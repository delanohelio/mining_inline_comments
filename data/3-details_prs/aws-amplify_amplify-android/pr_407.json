{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMzk0NTc1", "number": 407, "title": "[aws-api] Handle AppSync date time scalar types", "bodyText": "Adds support to serialize and deserialize AppSync date/time types.\n\nAWSDateTime -> AWSDateTime.java, backed by OffsetDateTime\nAWSDate -> AWSDate.java, backed by a LocalDate and a ZoneOffset\nAWSTime -> AWSTime.java, backed by a LocalTime and a ZoneOffset\nAWSTimestamp -> java.util.Date\n\nThe backing types come from a new dependency, ThreeTenABP, which is a backport of Java 8's java.time.   We can't use java.time currently because it requires a minSDK of 26 or higher.  However, in Android Studio 4.0, the desugaring engine has been extended to be able to desugar Java language APIs including java.time, so we can use this once Android Studio 4.0 gains critical mass.\nThis PR fixes two issues:\n\n#221 (response serialization does not handle timezone offset in seconds)\n#216 (request serialization is lossy - time is stripped, and timezone offset is not saved)\n\nNote: The CLI codegen still needs to be updated here to output the new types.  This PR was tested by manually modifying the generated models.\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-04-28T22:30:33Z", "url": "https://github.com/aws-amplify/amplify-android/pull/407", "merged": true, "mergeCommit": {"oid": "4d85b459af2539c6d6b0586228fd7ed6cc320986"}, "closed": true, "closedAt": "2020-05-04T17:10:58Z", "author": {"login": "richardmcclellan"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccLIprAH2gAyNDEwMzk0NTc1OjFmYjViMmUzODhiZTlhNzhlZjJmNmNhZjAzYmUzMjllYzNlOTZlMzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceAw_JgFqTQwNTA2NTM0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32", "author": {"user": {"login": "richardmcclellan", "name": "Richard McClellan"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/1fb5b2e388be9a78ef2f6caf03be329ec3e96e32", "committedDate": "2020-04-28T21:54:22Z", "message": "Add classes to represent AppSync date time scalar types"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMDEwNTAz", "url": "https://github.com/aws-amplify/amplify-android/pull/407#pullrequestreview-403010503", "createdAt": "2020-04-29T20:24:12Z", "commit": {"oid": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMDoyNDoxM1rOGOPmbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMjowNjozOVrOGOSylg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4ODg0NQ==", "bodyText": "~Loosely related to what's actually being done here --\nThis list might be getting long enough where it could benefit from a logical/natural sort. Not sure what the rules should be.\n\nPlatform stuff;\nUtility stuff;\nAWS Stuff\n\nor just even a lexographical sort?\nRight now, the ordering is the order in which the develop realized the need for the dependency. Which, as a reader, is a ~meaningless order.", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417588845", "createdAt": "2020-04-29T20:24:13Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/build.gradle", "diffHunk": "@@ -25,6 +25,8 @@ dependencies {\n     implementation dependency.gson\n     implementation dependency.aws.authcore\n     implementation dependency.aws.mobileclient\n+    implementation dependency.threetenabp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4OTQ1MA==", "bodyText": "Thoughts on the .scalar packaging? Can we just lump it all in .model?", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417589450", "createdAt": "2020-04-29T20:25:15Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/GsonGraphQLResponseFactory.java", "diffHunk": "@@ -18,6 +18,9 @@\n import com.amplifyframework.AmplifyException;\n import com.amplifyframework.api.ApiException;\n import com.amplifyframework.api.graphql.GraphQLResponse;\n+import com.amplifyframework.core.model.scalar.AWSDate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU4OTc4Ng==", "bodyText": "Is this here for compat, right now? Would we remove this once we start code-gen'ing AWSDate, instead?", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417589786", "createdAt": "2020-04-29T20:25:54Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/GsonGraphQLResponseFactory.java", "diffHunk": "@@ -47,6 +51,10 @@\n                 new GsonBuilder()\n                 .registerTypeAdapter(List.class, new GsonListDeserializer())\n                 .registerTypeAdapter(GraphQLResponse.Error.class, new GsonErrorDeserializer())\n+                .registerTypeAdapter(Date.class, new GsonUtil.DateAdapter())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzU5MDk5Mw==", "bodyText": "The Gson instance should already have been injected in the constructor. If we are going to change where the instance comes from, we should get it by means of constructor injection, instead of by this service locator pattern.\n(Ref: some guy on the internet who has an opinion on Service Locator)", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417590993", "createdAt": "2020-04-29T20:28:08Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/GsonListDeserializer.java", "diffHunk": "@@ -70,6 +70,6 @@\n             }\n         }\n \n-        return new Gson().fromJson(json, typeOfT);\n+        return GsonUtil.getGson().fromJson(json, typeOfT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYyNDYxNw==", "bodyText": "I worry about the naming Util, because classes with such names tend to veer from the Single Responsibility Principle.\nI think this us the case with the current incantation of this class, which has two responsibilities:\n\nCreate an instance of Gson, bound with all type adapters necessary for handling AWS API Plugin constructs;\nBundle together only the date-specific type adapters, but not the the other ones.\n\nSo, ultimately, I think we should rename this class, and modify its contents, to match:\nGsonFactory\nThe GsonFactory would contain a create() or getInstance() method which would access the Gson instance for the plugin. This is basically the getGson() that you currently have.\nPersonally, I think I would then split all of the date/time adapters into their own top-level classes, as siblings to the GsonErrorDeserializer and ListAdapter, etc.\nDateTimeAdapters\nBut, you don't have to make each its own top-level class. You could keep the encapsulation that you currently have, and create this DateTimeAdapters top-level class. It would contain AWSDateAdapter, etc. From GsonFactory, you'd have like:\n.registerTypeAdapter(AWSDate.class, new DateTimeAdapters.AWSDateAdapter())\n\nor something.\nGsonApiAdapters\nPossibly, you could move all of the adapters, including the error and list adapters, into a single envelope. This would contain the date/time adapters, the GsonErrorDeserializer, and the ListAdapter.\nI guess I don't actually think this is a terrific idea, but at least all of the adapters would be defined at the same level  of a class hierarchy.", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417624617", "createdAt": "2020-04-29T21:31:16Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/GsonUtil.java", "diffHunk": "@@ -15,19 +15,34 @@\n \n package com.amplifyframework.api.aws;\n \n+import com.amplifyframework.api.graphql.GraphQLResponse;\n+import com.amplifyframework.core.model.scalar.AWSDate;\n+import com.amplifyframework.core.model.scalar.AWSDateTime;\n+import com.amplifyframework.core.model.scalar.AWSTime;\n import com.amplifyframework.util.Immutable;\n \n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n import com.google.gson.JsonArray;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n import com.google.gson.JsonElement;\n import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n \n+import java.lang.reflect.Type;\n import java.util.ArrayList;\n+import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n \n final class GsonUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYyNTE3MQ==", "bodyText": "Wrap AppSync.... onto next line and indent +4 from prior line, so you don't have to split the statement after meeting1?", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417625171", "createdAt": "2020-04-29T21:32:27Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/test/java/com/amplifyframework/api/aws/AppSyncGraphQLRequestFactoryTest.java", "diffHunk": "@@ -125,4 +129,28 @@ public void buildSubscriptionFromClassAndSubscriptionType() throws ApiException\n             subscriptionRequest.getContent()\n         );\n     }\n+\n+    /**\n+     * Validates date serialization when creating GraphQLRequest.\n+     * @throws ApiException from buildMutation potential failure\n+     */\n+    @Test\n+    public void validateDateSerializer() throws ApiException {\n+        // Create expectation\n+        final Meeting meeting1 = Meeting.builder()\n+                .name(\"meeting1\")\n+                .id(\"45a5f600-8aa8-41ac-a529-aed75036f5be\")\n+                .date(new AWSDate(\"2001-02-03\"))\n+                .dateTime(new AWSDateTime(\"2001-02-03T01:30:15Z\"))\n+                .time(new AWSTime(\"01:22:33\"))\n+                .timestamp(new Date(1234567890000L))\n+                .build();\n+\n+        // Act: build a mutation to create a Meeting\n+        GraphQLRequest<Meeting> requestToCreateMeeting1 = AppSyncGraphQLRequestFactory.buildMutation(meeting1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYyNjQxMA==", "bodyText": "Can you put this through a formatter? A principal benefit to having the resources split out into files under src/test/resources is that they can be easy to read.\nIf you encounter issues in asserting the value, look at the JSONAssert util which is already a listed dependency in the root build.gradle. It allows you to perform whitespace-insensitive and order-insensitive comparisons of JSON structures.", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417626410", "createdAt": "2020-04-29T21:35:10Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/test/resources/create-meeting1.txt", "diffHunk": "@@ -0,0 +1 @@\n+{\"query\":\"mutation CreateMeeting($input: CreateMeetingInput!){ createMeeting(input: $input) { date dateTime id name time timestamp }}\",\"variables\":{\"input\":{\"date\":\"2001-02-03\",\"dateTime\":\"2001-02-03T01:30:15Z\",\"name\":\"meeting1\",\"id\":\"45a5f600-8aa8-41ac-a529-aed75036f5be\",\"time\":\"01:22:33\",\"timestamp\":1234567890}}}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYyOTA4OQ==", "bodyText": "More semantically written with the TimeUnit conversion utility as TimeUnit.MILLISECONDS.toSeconds(offsetInMillis)", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417629089", "createdAt": "2020-04-29T21:40:36Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/test/java/com/amplifyframework/core/model/scalar/AWSTimeTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.core.model.scalar;\n+\n+import org.junit.Test;\n+import org.junit.function.ThrowingRunnable;\n+\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.TimeZone;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n+\n+public class AWSTimeTest {\n+    @Test\n+    public void parsesExpectedFormats() {\n+        for (String value : Arrays.asList(\n+                \"01:22:33\",\n+                \"01:22:33.444\",\n+                \"01:22:33.444Z\",\n+                \"01:22:33.444+05:30\",\n+                \"01:22:33.444+05:30:15\"\n+        )) {\n+            assertEquals(value, new AWSTime(value).format());\n+        }\n+\n+        // Seconds for time is optional when parsing, but always present in formatted output.\n+        assertEquals(\"01:22:00\", new AWSTime(\"01:22\").format());\n+    }\n+\n+    @Test\n+    public void convertsToAndFromDate() {\n+        Calendar cal = new GregorianCalendar(1970, 0, 1, 2, 3, 4);\n+        cal.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+        Date date = cal.getTime();\n+        AWSTime awsTime = new AWSTime(date);\n+        assertEquals(date, awsTime.toDate());\n+        assertThrows(IllegalStateException.class, new ThrowingRunnable() {\n+            @Override\n+            public void run() throws Throwable {\n+                awsTime.getOffsetTotalSeconds();\n+            }\n+        });\n+    }\n+\n+    @Test\n+    public void convertsToAndFromDateWithOffset() {\n+        Calendar cal = new GregorianCalendar(1970, 0, 1, 2, 3, 4);\n+        TimeZone timeZone = TimeZone.getTimeZone(\"PST\");\n+        cal.setTimeZone(timeZone);\n+        Date date = cal.getTime();\n+        int offsetInMillis = timeZone.getOffset(date.getTime());\n+        int offsetInSeconds = offsetInMillis / 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzMjM3Nw==", "bodyText": "Blargh. The shear quantity of Java's badly designed time APIs is humbling, to bear witness.\nThis particular one has six integers all in a row. Which of course a user would understand to mean:\npublic GregorianCalendar(int year,\n                 int month,\n                 int dayOfMonth,\n                 int hourOfDay,\n                 int minute,\n                 int second)\n\n(Rolls eyes at Java.)\nIn the past, I have seen people \"patch\" this bad API design in the following way. You can set the calendar to the unix epoch, and the patch in the fields, with labels. It is wordy, but the meaning of the various integers becomes unambiguous and you no longer have to pull up the Oracle documentation.\nGregorianCalendar calendar = new GregorianCalendar();\ncalendar.setTimeInMillis(0); // clear\ncalendar.set(Calendar.YEAR, 1970);\ncalendar.set(Calendar.MONTH, Calendar.JANUARY); // 0 is the first month, not 1\ncalendar.set(Calendar.DAY_OF_MONTH, 15); // 1 is the first day, not 0 \ncalendar.set(Calendar.HOUR_OF_DAY, 1); // 1 AM\ncalendar.set(Calendar.MINUTE, 30); // 1:30AM\ncalendar.set(Calendar.SECOND, 15); // 1:30:15AM", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417632377", "createdAt": "2020-04-29T21:47:42Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/test/java/com/amplifyframework/core/model/scalar/AWSTimeTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.core.model.scalar;\n+\n+import org.junit.Test;\n+import org.junit.function.ThrowingRunnable;\n+\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.TimeZone;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n+\n+public class AWSTimeTest {\n+    @Test\n+    public void parsesExpectedFormats() {\n+        for (String value : Arrays.asList(\n+                \"01:22:33\",\n+                \"01:22:33.444\",\n+                \"01:22:33.444Z\",\n+                \"01:22:33.444+05:30\",\n+                \"01:22:33.444+05:30:15\"\n+        )) {\n+            assertEquals(value, new AWSTime(value).format());\n+        }\n+\n+        // Seconds for time is optional when parsing, but always present in formatted output.\n+        assertEquals(\"01:22:00\", new AWSTime(\"01:22\").format());\n+    }\n+\n+    @Test\n+    public void convertsToAndFromDate() {\n+        Calendar cal = new GregorianCalendar(1970, 0, 1, 2, 3, 4);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzNzM4MQ==", "bodyText": "I think you can replace this by a lambda expression. That is:\nIllegalStateException whatWasThrown =\n    assertThrows(IllegalStateException.class, () -> awsTime.getOffsetTotalSeconds());\n\n(assertThrows will also return the thrown exception as a return value, so you can do stuff like make assertions on its getMessage() and getCause(), if you wanted to.)", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417637381", "createdAt": "2020-04-29T21:58:41Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/test/java/com/amplifyframework/core/model/scalar/AWSTimeTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.core.model.scalar;\n+\n+import org.junit.Test;\n+import org.junit.function.ThrowingRunnable;\n+\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.TimeZone;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThrows;\n+\n+public class AWSTimeTest {\n+    @Test\n+    public void parsesExpectedFormats() {\n+        for (String value : Arrays.asList(\n+                \"01:22:33\",\n+                \"01:22:33.444\",\n+                \"01:22:33.444Z\",\n+                \"01:22:33.444+05:30\",\n+                \"01:22:33.444+05:30:15\"\n+        )) {\n+            assertEquals(value, new AWSTime(value).format());\n+        }\n+\n+        // Seconds for time is optional when parsing, but always present in formatted output.\n+        assertEquals(\"01:22:00\", new AWSTime(\"01:22\").format());\n+    }\n+\n+    @Test\n+    public void convertsToAndFromDate() {\n+        Calendar cal = new GregorianCalendar(1970, 0, 1, 2, 3, 4);\n+        cal.setTimeZone(TimeZone.getTimeZone(\"GMT\"));\n+        Date date = cal.getTime();\n+        AWSTime awsTime = new AWSTime(date);\n+        assertEquals(date, awsTime.toDate());\n+        assertThrows(IllegalStateException.class, new ThrowingRunnable() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzODI1OA==", "bodyText": "I'd split the list creation out of the loop. There's precious little space inside of an if () or a for ()`, and they're a lot easier to read when the contain only the traditional boilerplate.", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417638258", "createdAt": "2020-04-29T22:00:28Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/test/java/com/amplifyframework/core/model/scalar/AWSDateTimeTest.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.core.model.scalar;\n+\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.GregorianCalendar;\n+import java.util.TimeZone;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class AWSDateTimeTest {\n+    @Test\n+    public void parsesExpectedFormats() {\n+        for (String value : Arrays.asList(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzOTA1Nw==", "bodyText": "The current checkstyle will flag variable names under lenght 3, for public values and method arguments. It does not check implementation identifiers like this one. I'll leave it up to you, but localTime and zoneOffset would be more consistent with the style in the rest of the current code base.", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417639057", "createdAt": "2020-04-29T22:02:12Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/core/model/scalar/AWSTime.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.core.model.scalar;\n+\n+import androidx.annotation.NonNull;\n+import androidx.core.util.ObjectsCompat;\n+\n+import org.threeten.bp.DateTimeUtils;\n+import org.threeten.bp.Instant;\n+import org.threeten.bp.LocalDate;\n+import org.threeten.bp.LocalTime;\n+import org.threeten.bp.OffsetDateTime;\n+import org.threeten.bp.OffsetTime;\n+import org.threeten.bp.ZoneOffset;\n+import org.threeten.bp.format.DateTimeFormatter;\n+import org.threeten.bp.format.DateTimeParseException;\n+\n+import java.util.Date;\n+\n+/**\n+ * Represents a valid extended ISO-8601 Time string, with an optional timezone offset.\n+ * <p>\n+ * hh:mm:ss.sss\u00b1hh:mm:ss\n+ * OR\n+ * hh:mm:ss.sss\n+ * <p>\n+ * https://docs.aws.amazon.com/appsync/latest/devguide/scalars.html#appsync-defined-scalars\n+ */\n+public final class AWSTime {\n+    private final LocalTime localTime;\n+    private final ZoneOffset zoneOffset;\n+\n+    public AWSTime(@NonNull Date date) {\n+        this.zoneOffset = null;\n+        this.localTime = Instant.ofEpochMilli(date.getTime()).atOffset(ZoneOffset.UTC).toLocalTime();\n+    }\n+\n+    public AWSTime(@NonNull Date date, int offsetInSeconds) {\n+        this.zoneOffset = ZoneOffset.ofTotalSeconds(offsetInSeconds);\n+        this.localTime = Instant.ofEpochMilli(date.getTime()).atOffset(this.zoneOffset).toLocalTime();\n+    }\n+\n+    public AWSTime(@NonNull String text) {\n+        LocalTime lt;\n+        ZoneOffset zo;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0MDEwMw==", "bodyText": "This is just a test class, but a toString() might come in handy if like a jUnit assertFoo(...)-family method ever tries to print it out as part of a message?", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417640103", "createdAt": "2020-04-29T22:04:25Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/test/java/com/amplifyframework/api/aws/ListMeetingsResult.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws;\n+\n+import androidx.core.util.ObjectsCompat;\n+\n+import com.amplifyframework.testmodels.meeting.Meeting;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+/**\n+ * A hypothetical model for some data returned from a GraphQL API.\n+ * This is a placeholder for the model that gets code generated by the\n+ * Amplify CLI.\n+ */\n+final class ListMeetingsResult {\n+    private final List<Meeting> items;\n+\n+    ListMeetingsResult() {\n+        this.items = new ArrayList<>();\n+    }\n+\n+    ListMeetingsResult(final List<Meeting> items) {\n+        this.items = new ArrayList<>();\n+        if (items != null) {\n+            this.items.addAll(items);\n+        }\n+    }\n+\n+    List<Meeting> getItems() {\n+        return ListMeetingsResult.this.items;\n+    }\n+\n+    @Override\n+    public boolean equals(Object thatObject) {\n+        if (this == thatObject) {\n+            return true;\n+        }\n+        if (thatObject == null || getClass() != thatObject.getClass()) {\n+            return false;\n+        }\n+\n+        ListMeetingsResult that = (ListMeetingsResult) thatObject;\n+\n+        return ObjectsCompat.equals(items, that.items);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return items != null ? items.hashCode() : 0;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY0MTExMA==", "bodyText": "Also, if we make the GsonFactory, can we extract the logic at L51 of GsonGraphQLResponseFactory? Can both places share a single, externally-defined/construted Gson instance?", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r417641110", "createdAt": "2020-04-29T22:06:39Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/GsonUtil.java", "diffHunk": "@@ -75,4 +90,80 @@ private static Object toObject(JsonElement element) {\n         }\n         return null;\n     }\n+\n+    public static Gson getGson() {\n+        if (gson == null) {\n+            gson = new GsonBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fb5b2e388be9a78ef2f6caf03be329ec3e96e32"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af7a7cc115c95296ffa62ac59901d65c42a1cdf0", "author": {"user": {"login": "richardmcclellan", "name": "Richard McClellan"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/af7a7cc115c95296ffa62ac59901d65c42a1cdf0", "committedDate": "2020-05-01T21:53:44Z", "message": "PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5838181aa5d4f0739efb2ac1c747d21e47ae12b", "author": {"user": {"login": "richardmcclellan", "name": "Richard McClellan"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/b5838181aa5d4f0739efb2ac1c747d21e47ae12b", "committedDate": "2020-05-01T21:58:31Z", "message": "Merge branch 'master' into rm/dates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MDY1MzQ4", "url": "https://github.com/aws-amplify/amplify-android/pull/407#pullrequestreview-405065348", "createdAt": "2020-05-04T14:54:09Z", "commit": {"oid": "b5838181aa5d4f0739efb2ac1c747d21e47ae12b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDo1NDowOVrOGQEGqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDo1NDowOVrOGQEGqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5NzY0MA==", "bodyText": "Don't you need the List.class binding anymore?", "url": "https://github.com/aws-amplify/amplify-android/pull/407#discussion_r419497640", "createdAt": "2020-05-04T14:54:09Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/GsonGraphQLResponseFactory.java", "diffHunk": "@@ -31,24 +34,30 @@\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.Date;\n import java.util.List;\n \n /**\n  * Converts JSON strings into models of a given type, using Gson.\n  */\n final class GsonGraphQLResponseFactory implements GraphQLResponse.Factory {\n+    private static final String DATA_KEY = \"data\";\n+    private static final String ERRORS_KEY = \"errors\";\n+    private static final String ITEMS_KEY = \"items\";\n+\n     private final Gson gson;\n \n     /**\n      * Default constructor using default Gson object.\n      */\n     GsonGraphQLResponseFactory() {\n-        this(\n-                new GsonBuilder()\n-                .registerTypeAdapter(List.class, new GsonListDeserializer())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5838181aa5d4f0739efb2ac1c747d21e47ae12b"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2746, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}