{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MzE1NzE0", "number": 954, "title": "feature(aws-datastore): support for hybrid platforms", "bodyText": "Both offline mode and online modes are working, now. \u2705\nResolves: #842\nCo-authored-by: Praveen Gupta pravgupt@amazon.com, @Amplifiyer\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-11-05T20:19:34Z", "url": "https://github.com/aws-amplify/amplify-android/pull/954", "merged": true, "mergeCommit": {"oid": "4d727ff38c0ce609a424384a935615ef64978cec"}, "closed": true, "closedAt": "2020-11-13T21:35:25Z", "author": {"login": "jamesonwilliams"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZomWbABqjM5NjQzMTcyMDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdb26AEgH2gAyNTE2MzE1NzE0OjA3ZDUxMzU3Y2M5MzJkYWYwYTAxMWM4ZmE0OWVlNmM1MWFlNDU2Zjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/f72c9a2d619a939a7b4c4cd6b44a64a80a1df050", "committedDate": "2020-11-05T23:23:05Z", "message": "feature(aws-datastore): support for hybrid platforms\n\nResolves: https://github.com/aws-amplify/amplify-android/issues/842\nCo-authored-by: Praveen Gupta <pravgupt@amazon.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NTcwNDA4", "url": "https://github.com/aws-amplify/amplify-android/pull/954#pullrequestreview-526570408", "createdAt": "2020-11-09T19:08:17Z", "commit": {"oid": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTowODoxN1rOHv9gfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDoyNDo0OFrOHwAQuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1Mjg2Mg==", "bodyText": "Should we update equals, hashCode, toString to check this new field?", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r520052862", "createdAt": "2020-11-09T19:08:17Z", "author": {"login": "richardmcclellan"}, "path": "core/src/main/java/com/amplifyframework/core/model/ModelSchema.java", "diffHunk": "@@ -68,19 +68,24 @@\n     // Specifies the indexes of a Model.\n     private final Map<String, ModelIndex> indexes;\n \n+    // Class of the model this schema will represent\n+    private final Class<? extends Model> modelClass;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1NTAxOQ==", "bodyText": "Maybe update this constructor object to take a single Builder object, so we don't have such a long list of params?", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r520055019", "createdAt": "2020-11-09T19:10:24Z", "author": {"login": "richardmcclellan"}, "path": "core/src/main/java/com/amplifyframework/core/model/ModelSchema.java", "diffHunk": "@@ -68,19 +68,24 @@\n     // Specifies the indexes of a Model.\n     private final Map<String, ModelIndex> indexes;\n \n+    // Class of the model this schema will represent\n+    private final Class<? extends Model> modelClass;\n+\n     private ModelSchema(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1NzM5Ng==", "bodyText": "Can we simplify this class by removing modelClass entirely, since we will always have a modelSchema now?  Then, whenever we actually need the modelClass, we can just use modelSchema.getModelClass()", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r520057396", "createdAt": "2020-11-09T19:13:10Z", "author": {"login": "richardmcclellan"}, "path": "aws-api-appsync/src/main/java/com/amplifyframework/api/aws/AppSyncGraphQLRequest.java", "diffHunk": "@@ -288,19 +297,23 @@ public Builder variable(@NonNull String key, String type, Object value) {\n             Objects.requireNonNull(this.operation);\n             Objects.requireNonNull(this.responseType);\n \n-            if (modelClass != null) {\n-                // Derive modelSchema and selectionSet from modelClass.\n+            if (modelClass == null && modelSchema == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1Nzg2Mw==", "bodyText": "Same thing here.  Can we remove the modelClass field, and just use modelSchema.getModelClass() whenever the class is actually needed?", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r520057863", "createdAt": "2020-11-09T19:14:05Z", "author": {"login": "richardmcclellan"}, "path": "aws-api-appsync/src/main/java/com/amplifyframework/api/aws/SelectionSet.java", "diffHunk": "@@ -167,6 +172,7 @@ public int hashCode() {\n         private Class<? extends Model> modelClass;\n         private Operation operation;\n         private GraphQLRequestOptions requestOptions;\n+        private ModelSchema modelSchema;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2NTM4Mg==", "bodyText": "Why do you only want to serialize the id, rather than recursively serializing the entire child model?   I think that the native Amplify Android behavior (generated Java models), serializes the complete model graph, right?", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r520065382", "createdAt": "2020-11-09T19:26:55Z", "author": {"login": "richardmcclellan"}, "path": "aws-api-appsync/src/main/java/com/amplifyframework/datastore/appsync/SerializedModelAdapter.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.appsync;\n+\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.util.GsonObjectConverter;\n+\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+\n+import java.lang.reflect.Type;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Deserializer for SerializedModel. Helpful to deserialize from the graphql response.\n+ */\n+public final class SerializedModelAdapter\n+        implements JsonDeserializer<SerializedModel>, JsonSerializer<SerializedModel> {\n+    private SerializedModelAdapter() {}\n+\n+    /**\n+     * Registers an adapter with a Gson builder.\n+     * @param builder A gson builder\n+     */\n+    public static void register(GsonBuilder builder) {\n+        builder.registerTypeAdapter(SerializedModel.class, new SerializedModelAdapter());\n+    }\n+\n+    @Override\n+    public JsonElement serialize(SerializedModel src, Type typeOfSrc, JsonSerializationContext context) {\n+        ModelSchema schema = src.getModelSchema();\n+\n+        JsonObject result = new JsonObject();\n+        result.add(\"id\", context.serialize(src.getId()));\n+        result.add(\"modelSchema\", context.serialize(schema));\n+\n+        JsonObject serializedData = new JsonObject();\n+        for (Map.Entry<String, Object> entry : src.getSerializedData().entrySet()) {\n+            if (entry.getValue() instanceof SerializedModel) {\n+                SerializedModel hpm = (SerializedModel) entry.getValue();\n+                serializedData.add(entry.getKey(), new JsonPrimitive(hpm.getId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA2OTY0MA==", "bodyText": "Can we use this method for both Flutter and native Android, and get rid of the getModelFields(Class modelClass, int depth) method?  I think that would simplify this a bit.", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r520069640", "createdAt": "2020-11-09T19:34:25Z", "author": {"login": "richardmcclellan"}, "path": "aws-api-appsync/src/main/java/com/amplifyframework/api/aws/SelectionSet.java", "diffHunk": "@@ -320,5 +337,40 @@ private static boolean isCustomType(@NonNull Field field) {\n             }\n             return typeClass;\n         }\n+\n+        private Set<SelectionSet> getModelFields(ModelSchema modelSchema, int depth) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3NTM3Mw==", "bodyText": "Hmm, why are we serializing modelSchema?   Isn't this used when we serialize a model and send to AppSync for doing an update mutation? I don't think we want to send that to AppSync, right?   I guess we might need to serialize it into the local DB though.   Do we need different Gson instances for SQLite vs AppSync now?\nAnother thing I notice is there is no ModelSchemaAdapter in this PR, which means ModelSchema, ModelField, and AuthRule etc, will all be serialized via reflection of their field names.  That means we won't be able to make breaking changes to them in the future, otherwise we could break SQLite deserialization.   Maybe that's fine, but we should at least take that into consideration.", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r520075373", "createdAt": "2020-11-09T19:44:30Z", "author": {"login": "richardmcclellan"}, "path": "aws-api-appsync/src/main/java/com/amplifyframework/datastore/appsync/SerializedModelAdapter.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.appsync;\n+\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.util.GsonObjectConverter;\n+\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+\n+import java.lang.reflect.Type;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Deserializer for SerializedModel. Helpful to deserialize from the graphql response.\n+ */\n+public final class SerializedModelAdapter\n+        implements JsonDeserializer<SerializedModel>, JsonSerializer<SerializedModel> {\n+    private SerializedModelAdapter() {}\n+\n+    /**\n+     * Registers an adapter with a Gson builder.\n+     * @param builder A gson builder\n+     */\n+    public static void register(GsonBuilder builder) {\n+        builder.registerTypeAdapter(SerializedModel.class, new SerializedModelAdapter());\n+    }\n+\n+    @Override\n+    public JsonElement serialize(SerializedModel src, Type typeOfSrc, JsonSerializationContext context) {\n+        ModelSchema schema = src.getModelSchema();\n+\n+        JsonObject result = new JsonObject();\n+        result.add(\"id\", context.serialize(src.getId()));\n+        result.add(\"modelSchema\", context.serialize(schema));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3NTc4NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    // Patch up nested models as HybridPlatformModel themselves.\n          \n          \n            \n                    // Patch up nested models as SerializedModel themselves.", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r520075785", "createdAt": "2020-11-09T19:45:11Z", "author": {"login": "richardmcclellan"}, "path": "aws-api-appsync/src/main/java/com/amplifyframework/datastore/appsync/SerializedModelAdapter.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.appsync;\n+\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.util.GsonObjectConverter;\n+\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+\n+import java.lang.reflect.Type;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Deserializer for SerializedModel. Helpful to deserialize from the graphql response.\n+ */\n+public final class SerializedModelAdapter\n+        implements JsonDeserializer<SerializedModel>, JsonSerializer<SerializedModel> {\n+    private SerializedModelAdapter() {}\n+\n+    /**\n+     * Registers an adapter with a Gson builder.\n+     * @param builder A gson builder\n+     */\n+    public static void register(GsonBuilder builder) {\n+        builder.registerTypeAdapter(SerializedModel.class, new SerializedModelAdapter());\n+    }\n+\n+    @Override\n+    public JsonElement serialize(SerializedModel src, Type typeOfSrc, JsonSerializationContext context) {\n+        ModelSchema schema = src.getModelSchema();\n+\n+        JsonObject result = new JsonObject();\n+        result.add(\"id\", context.serialize(src.getId()));\n+        result.add(\"modelSchema\", context.serialize(schema));\n+\n+        JsonObject serializedData = new JsonObject();\n+        for (Map.Entry<String, Object> entry : src.getSerializedData().entrySet()) {\n+            if (entry.getValue() instanceof SerializedModel) {\n+                SerializedModel hpm = (SerializedModel) entry.getValue();\n+                serializedData.add(entry.getKey(), new JsonPrimitive(hpm.getId()));\n+            } else {\n+                serializedData.add(entry.getKey(), context.serialize(entry.getValue()));\n+            }\n+        }\n+        result.add(\"serializedData\", serializedData);\n+        return result;\n+    }\n+\n+    @Override\n+    public SerializedModel deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+            throws JsonParseException {\n+        JsonObject object = json.getAsJsonObject();\n+        ModelSchema modelSchema = context.deserialize(object.get(\"modelSchema\"), ModelSchema.class);\n+\n+        JsonObject serializedDataObject = object.get(\"serializedData\").getAsJsonObject();\n+        Map<String, Object> serializedData = new HashMap<>(GsonObjectConverter.toMap(serializedDataObject));\n+\n+        // Patch up nested models as HybridPlatformModel themselves.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA3OTQ5OQ==", "bodyText": "Looks like this only goes one level deep.  Should we instead deserialize the whole tree?   I suppose we might need to merge #892, but then, we could right?", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r520079499", "createdAt": "2020-11-09T19:51:42Z", "author": {"login": "richardmcclellan"}, "path": "aws-api-appsync/src/main/java/com/amplifyframework/datastore/appsync/SerializedModelAdapter.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.appsync;\n+\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.util.GsonObjectConverter;\n+\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+\n+import java.lang.reflect.Type;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Deserializer for SerializedModel. Helpful to deserialize from the graphql response.\n+ */\n+public final class SerializedModelAdapter\n+        implements JsonDeserializer<SerializedModel>, JsonSerializer<SerializedModel> {\n+    private SerializedModelAdapter() {}\n+\n+    /**\n+     * Registers an adapter with a Gson builder.\n+     * @param builder A gson builder\n+     */\n+    public static void register(GsonBuilder builder) {\n+        builder.registerTypeAdapter(SerializedModel.class, new SerializedModelAdapter());\n+    }\n+\n+    @Override\n+    public JsonElement serialize(SerializedModel src, Type typeOfSrc, JsonSerializationContext context) {\n+        ModelSchema schema = src.getModelSchema();\n+\n+        JsonObject result = new JsonObject();\n+        result.add(\"id\", context.serialize(src.getId()));\n+        result.add(\"modelSchema\", context.serialize(schema));\n+\n+        JsonObject serializedData = new JsonObject();\n+        for (Map.Entry<String, Object> entry : src.getSerializedData().entrySet()) {\n+            if (entry.getValue() instanceof SerializedModel) {\n+                SerializedModel hpm = (SerializedModel) entry.getValue();\n+                serializedData.add(entry.getKey(), new JsonPrimitive(hpm.getId()));\n+            } else {\n+                serializedData.add(entry.getKey(), context.serialize(entry.getValue()));\n+            }\n+        }\n+        result.add(\"serializedData\", serializedData);\n+        return result;\n+    }\n+\n+    @Override\n+    public SerializedModel deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context)\n+            throws JsonParseException {\n+        JsonObject object = json.getAsJsonObject();\n+        ModelSchema modelSchema = context.deserialize(object.get(\"modelSchema\"), ModelSchema.class);\n+\n+        JsonObject serializedDataObject = object.get(\"serializedData\").getAsJsonObject();\n+        Map<String, Object> serializedData = new HashMap<>(GsonObjectConverter.toMap(serializedDataObject));\n+\n+        // Patch up nested models as HybridPlatformModel themselves.\n+        for (Map.Entry<String, JsonElement> item : serializedDataObject.entrySet()) {\n+            ModelField field = modelSchema.getFields().get(item.getKey());\n+            if (field != null && field.isModel()) {\n+                serializedData.put(field.getName(), SerializedModel.builder()\n+                    .serializedData(Collections.singletonMap(\"id\", item.getValue().getAsString()))\n+                    .modelSchema(null)\n+                    .build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5NTc3MA==", "bodyText": "This can be removed now right?  Since an exception is thrown above if modelSchema is null, I think this code block is unreachable now?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (modelSchema == null) {\n          \n          \n            \n                            // Derive modelSchema from modelClass if not available\n          \n          \n            \n                            modelSchema = ModelSchema.fromModelClass(this.modelClass);\n          \n          \n            \n                        }", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r520095770", "createdAt": "2020-11-09T20:20:40Z", "author": {"login": "richardmcclellan"}, "path": "aws-api-appsync/src/main/java/com/amplifyframework/api/aws/AppSyncGraphQLRequest.java", "diffHunk": "@@ -288,19 +297,23 @@ public Builder variable(@NonNull String key, String type, Object value) {\n             Objects.requireNonNull(this.operation);\n             Objects.requireNonNull(this.responseType);\n \n-            if (modelClass != null) {\n-                // Derive modelSchema and selectionSet from modelClass.\n+            if (modelClass == null && modelSchema == null) {\n+                throw new AmplifyException(\"Both modelSchema and modelClass cannot be null\", \"\");\n+            }\n+\n+            if (modelSchema == null) {\n+                // Derive modelSchema from modelClass if not available\n                 modelSchema = ModelSchema.fromModelClass(this.modelClass);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA5Nzk3OQ==", "bodyText": "Maybe rename hpm to serializedModel?", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r520097979", "createdAt": "2020-11-09T20:24:48Z", "author": {"login": "richardmcclellan"}, "path": "aws-api-appsync/src/main/java/com/amplifyframework/datastore/appsync/SerializedModelAdapter.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.appsync;\n+\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.util.GsonObjectConverter;\n+\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.google.gson.JsonParseException;\n+import com.google.gson.JsonPrimitive;\n+import com.google.gson.JsonSerializationContext;\n+import com.google.gson.JsonSerializer;\n+\n+import java.lang.reflect.Type;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Deserializer for SerializedModel. Helpful to deserialize from the graphql response.\n+ */\n+public final class SerializedModelAdapter\n+        implements JsonDeserializer<SerializedModel>, JsonSerializer<SerializedModel> {\n+    private SerializedModelAdapter() {}\n+\n+    /**\n+     * Registers an adapter with a Gson builder.\n+     * @param builder A gson builder\n+     */\n+    public static void register(GsonBuilder builder) {\n+        builder.registerTypeAdapter(SerializedModel.class, new SerializedModelAdapter());\n+    }\n+\n+    @Override\n+    public JsonElement serialize(SerializedModel src, Type typeOfSrc, JsonSerializationContext context) {\n+        ModelSchema schema = src.getModelSchema();\n+\n+        JsonObject result = new JsonObject();\n+        result.add(\"id\", context.serialize(src.getId()));\n+        result.add(\"modelSchema\", context.serialize(schema));\n+\n+        JsonObject serializedData = new JsonObject();\n+        for (Map.Entry<String, Object> entry : src.getSerializedData().entrySet()) {\n+            if (entry.getValue() instanceof SerializedModel) {\n+                SerializedModel hpm = (SerializedModel) entry.getValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050"}, "originalPosition": 63}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f72c9a2d619a939a7b4c4cd6b44a64a80a1df050", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/f72c9a2d619a939a7b4c4cd6b44a64a80a1df050", "committedDate": "2020-11-05T23:23:05Z", "message": "feature(aws-datastore): support for hybrid platforms\n\nResolves: https://github.com/aws-amplify/amplify-android/issues/842\nCo-authored-by: Praveen Gupta <pravgupt@amazon.com>"}, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6250d93fbfda752c0aea51afd7c44d9768b35eb", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/e6250d93fbfda752c0aea51afd7c44d9768b35eb", "committedDate": "2020-11-12T08:56:44Z", "message": "feature(aws-datastore): support for hybrid platforms\n\nResolves: https://github.com/aws-amplify/amplify-android/issues/842\nCo-authored-by: Praveen Gupta <pravgupt@amazon.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "e6250d93fbfda752c0aea51afd7c44d9768b35eb", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/e6250d93fbfda752c0aea51afd7c44d9768b35eb", "committedDate": "2020-11-12T08:56:44Z", "message": "feature(aws-datastore): support for hybrid platforms\n\nResolves: https://github.com/aws-amplify/amplify-android/issues/842\nCo-authored-by: Praveen Gupta <pravgupt@amazon.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MjYwOTM3", "url": "https://github.com/aws-amplify/amplify-android/pull/954#pullrequestreview-529260937", "createdAt": "2020-11-12T16:24:58Z", "commit": {"oid": "e6250d93fbfda752c0aea51afd7c44d9768b35eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNjoyNDo1OFrOHyC28Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNjoyNDo1OFrOHyC28Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjIzNzY4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * NOTE: Private method and should not be part of {@link DataStoreCategory}\n          \n          \n            \n                 * NOTE: Private method used by hybrid platforms and should not be part of {@link DataStoreCategory}", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r522237681", "createdAt": "2020-11-12T16:24:58Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -409,6 +405,22 @@ public String getVersion() {\n         start(() -> sqliteStorageAdapter.query(itemClass, onQueryResults, onQueryFailure), onQueryFailure);\n     }\n \n+    /**\n+     * Query the DataStore to find all items of the requested model (by name).\n+     * NOTE: Private method and should not be part of {@link DataStoreCategory}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6250d93fbfda752c0aea51afd7c44d9768b35eb"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MjY0NTUx", "url": "https://github.com/aws-amplify/amplify-android/pull/954#pullrequestreview-529264551", "createdAt": "2020-11-12T16:28:38Z", "commit": {"oid": "e6250d93fbfda752c0aea51afd7c44d9768b35eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNjoyODozOFrOHyDCPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNjoyODozOFrOHyDCPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI0MDU3Mw==", "bodyText": "May be something we can do before we run integration tests. I'll make a note of it", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r522240573", "createdAt": "2020-11-12T16:28:38Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/HybridCloudSyncInstrumentationTest.java", "diffHunk": "@@ -0,0 +1,234 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import android.content.Context;\n+import androidx.annotation.RawRes;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiCategory;\n+import com.amplifyframework.api.aws.AWSApiPlugin;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.AmplifyConfiguration;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.category.CategoryConfiguration;\n+import com.amplifyframework.core.category.CategoryType;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.query.QueryOptions;\n+import com.amplifyframework.datastore.appsync.AppSyncClient;\n+import com.amplifyframework.datastore.appsync.SerializedModel;\n+import com.amplifyframework.datastore.appsync.SynchronousAppSync;\n+import com.amplifyframework.hub.HubChannel;\n+import com.amplifyframework.logging.AndroidLoggingPlugin;\n+import com.amplifyframework.logging.LogLevel;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.Blog;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+import com.amplifyframework.testutils.HubAccumulator;\n+import com.amplifyframework.testutils.Resources;\n+import com.amplifyframework.testutils.sync.SynchronousApi;\n+import com.amplifyframework.testutils.sync.SynchronousDataStore;\n+\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static com.amplifyframework.datastore.DataStoreHubEventFilters.publicationOf;\n+import static com.amplifyframework.datastore.DataStoreHubEventFilters.receiptOf;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Validates the ability of the {@link AWSDataStorePlugin} to sync data up/down\n+ * from AppSync, when being used by means of \"Hybrid-friendly\" API invocations:\n+ *\n+ *   1. Saving a {@link SerializedModel} via\n+ *      {@link AWSDataStorePlugin#save(Model, Consumer, Consumer)};\n+ *   2. Deleting a {@link SerializedModel} via\n+ *      {@link AWSDataStorePlugin#delete(Model, Consumer, Consumer)};\n+ *   3. Querying for {@link SerializedModel} by means of\n+ *      {@link AWSDataStorePlugin#query(String, QueryOptions, Consumer, Consumer)}.\n+ *\n+ * This test expects a backend API that has support for the {@link Blog} family of models,\n+ * which were defined by the schema in:\n+ * testmodels/src/main/java/com/amplifyframework/testmodels/commentsblog/schema.graphql.\n+ */\n+@Ignore(\n+    \"Over time, this test will create a large DynamoDB table. Even if we delete the content \" +\n+    \"through the AppSyncClient utility, the database will have lots of tombstone'd rows. \" +\n+    \"These entries will be synced, the next time this test runs, and the DataStore initializes. \" +\n+    \"After several runs, that sync will grow large and timeout the test, before the test can \" +\n+    \"run any business logic. A manual workaround exists, by running this cleanup script: \" +\n+    \"https://gist.github.com/jamesonwilliams/c76169676cb99c51d997ef0817eb9278#quikscript-to-clear-appsync-tables\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6250d93fbfda752c0aea51afd7c44d9768b35eb"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MzA3NDgw", "url": "https://github.com/aws-amplify/amplify-android/pull/954#pullrequestreview-529307480", "createdAt": "2020-11-12T17:13:33Z", "commit": {"oid": "e6250d93fbfda752c0aea51afd7c44d9768b35eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzoxMzozM1rOHyFDRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzoxMzozM1rOHyFDRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI3MzYwNg==", "bodyText": "Can you delete the ModelClassComparator now?", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r522273606", "createdAt": "2020-11-12T17:13:33Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "diffHunk": "@@ -99,18 +101,16 @@ public static Builder builder() {\n      * @return An Rx {@link Completable} which can be used to perform the operation.\n      */\n     Completable hydrate() {\n-        ModelClassComparator modelClassComparator =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6250d93fbfda752c0aea51afd7c44d9768b35eb"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MzE0NjA0", "url": "https://github.com/aws-amplify/amplify-android/pull/954#pullrequestreview-529314604", "createdAt": "2020-11-12T17:21:02Z", "commit": {"oid": "e6250d93fbfda752c0aea51afd7c44d9768b35eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzoyMTowMlrOHyFYvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzoyMTowMlrOHyFYvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjI3OTEwMA==", "bodyText": "Instead of catching this, can you just have the test throw an AmplifyException, to ensure the test fails for this scenario?", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r522279100", "createdAt": "2020-11-12T17:21:02Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/appsync/AppSyncClientTest.java", "diffHunk": "@@ -88,10 +90,12 @@ public void validateBaseSyncQueryGen() throws JSONException, DataStoreException\n             ) -> {\n                 try {\n                     GraphQLRequest<PaginatedResult<ModelWithMetadata<BlogOwner>>> request =\n-                            endpoint.buildSyncRequest(BlogOwner.class, null, null);\n+                            endpoint.buildSyncRequest(ModelSchema.fromModelClass(BlogOwner.class), null, null);\n                     endpoint.sync(request, onResult, onError);\n                 } catch (DataStoreException datastoreException) {\n                     onError.accept(datastoreException);\n+                } catch (AmplifyException amplifyException) {\n+                    // Todo failed converting Model Class to ModelSchema", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6250d93fbfda752c0aea51afd7c44d9768b35eb"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b63fdfa804c167b6be563ace0cf25518d4608542", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/b63fdfa804c167b6be563ace0cf25518d4608542", "committedDate": "2020-11-12T17:41:21Z", "message": "Addresses 12NOV PR feedback from @richardmcclellan"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MzQ0NTk3", "url": "https://github.com/aws-amplify/amplify-android/pull/954#pullrequestreview-529344597", "createdAt": "2020-11-12T17:54:03Z", "commit": {"oid": "e6250d93fbfda752c0aea51afd7c44d9768b35eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzo1NDowM1rOHyGzdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNzo1NDowM1rOHyGzdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjMwMjMyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Configures an AWSDataStorePlugin which is connected to a remote AppSync endpoint,\n          \n          \n            \n                 * Configures an AWSDataStorePlugin which only operates offline (not connected to any remote backend),", "url": "https://github.com/aws-amplify/amplify-android/pull/954#discussion_r522302326", "createdAt": "2020-11-12T17:54:03Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/HybridOfflineInstrumentationTest.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.InitializationStatus;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.datastore.appsync.SerializedModel;\n+import com.amplifyframework.hub.HubChannel;\n+import com.amplifyframework.logging.AndroidLoggingPlugin;\n+import com.amplifyframework.logging.LogLevel;\n+import com.amplifyframework.testmodels.commentsblog.Blog;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+import com.amplifyframework.testutils.Assets;\n+import com.amplifyframework.testutils.HubAccumulator;\n+import com.amplifyframework.testutils.sync.SynchronousDataStore;\n+import com.amplifyframework.util.GsonFactory;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Tests support for Hybrid platforms (e.g., Flutter, React Native).\n+ */\n+public final class HybridOfflineInstrumentationTest {\n+    private static final int TIMEOUT_SECONDS = 5;\n+\n+    private SynchronousHybridBehaviors hybridBehaviors;\n+    private SynchronousDataStore normalBehaviors;\n+    private ModelSchema blogOwnerSchema;\n+    private ModelSchema blogSchema;\n+\n+    /**\n+     * Configures an AWSDataStorePlugin which is connected to a remote AppSync endpoint,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6250d93fbfda752c0aea51afd7c44d9768b35eb"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MzQ5MzE0", "url": "https://github.com/aws-amplify/amplify-android/pull/954#pullrequestreview-529349314", "createdAt": "2020-11-12T17:59:37Z", "commit": {"oid": "b63fdfa804c167b6be563ace0cf25518d4608542"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MzU4MTUw", "url": "https://github.com/aws-amplify/amplify-android/pull/954#pullrequestreview-529358150", "createdAt": "2020-11-12T18:10:43Z", "commit": {"oid": "b63fdfa804c167b6be563ace0cf25518d4608542"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07d51357cc932daf0a011c8fa49ee6c51ae456f9", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/07d51357cc932daf0a011c8fa49ee6c51ae456f9", "committedDate": "2020-11-12T18:31:25Z", "message": "Update aws-datastore/src/androidTest/java/com/amplifyframework/datastore/HybridOfflineInstrumentationTest.java\n\nCo-authored-by: Richard McClellan <ricmccle@amazon.com>"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1805, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}