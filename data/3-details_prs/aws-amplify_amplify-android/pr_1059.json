{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNTQwOTY0", "number": 1059, "title": "fix(aws-datastore): publish each cascading delete", "bodyText": "Issue #, if available:\n#1013\nDescription of changes:\n\nIdentify every descendant of a deleted item to publish its deletion to remote store.\nAdd MatchNoneQueryPredicate to act as not(MatchAllQueryPredicate)\n\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-12-17T01:28:06Z", "url": "https://github.com/aws-amplify/amplify-android/pull/1059", "merged": true, "mergeCommit": {"oid": "cf02ebedaa7265315470142dd6d580d5fa8930f8"}, "closed": true, "closedAt": "2021-01-07T01:16:30Z", "author": {"login": "raphkim"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdm5JpagH2gAyNTQxNTQwOTY0OjBhOGYzZThkZTJkNjM1YWIyZGNjN2Q3MWJlYTRkYTFkYjM1YTc0M2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdtoTZagH2gAyNTQxNTQwOTY0OmQzMmRlNTYyODYyOGQ4OWNkN2VhODg3Y2I4NzU3MjRmOTc1NzgyNGI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0a8f3e8de2d635ab2dcc7d71bea4da1db35a743a", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/0a8f3e8de2d635ab2dcc7d71bea4da1db35a743a", "committedDate": "2020-12-17T01:21:29Z", "message": "publish each cascading delete"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0MjYwOTM5", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#pullrequestreview-554260939", "createdAt": "2020-12-17T03:51:04Z", "commit": {"oid": "0a8f3e8de2d635ab2dcc7d71bea4da1db35a743a"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e07debee203e3903e616dedba34fc0c6eecce83", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/6e07debee203e3903e616dedba34fc0c6eecce83", "committedDate": "2020-12-21T21:02:43Z", "message": "Merge branch 'main' of https://github.com/aws-amplify/amplify-android into publish-cascading-delete"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ecc894bb677e59d245a3029b8b5b7f8f827510d", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/4ecc894bb677e59d245a3029b8b5b7f8f827510d", "committedDate": "2020-12-23T01:02:31Z", "message": "add match none query predicate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba6247719205fbff02ac71c895398e8186d4971b", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/ba6247719205fbff02ac71c895398e8186d4971b", "committedDate": "2020-12-23T01:02:57Z", "message": "move model tree traversing logic out of sqlite storage adapter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NjcyMDAx", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#pullrequestreview-557672001", "createdAt": "2020-12-23T06:46:13Z", "commit": {"oid": "ba6247719205fbff02ac71c895398e8186d4971b"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjo0NjoxM1rOIKWIWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjo1MjoxOVrOIKWZRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcxOTI1OQ==", "bodyText": "Can this be private?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Cursor getQueryAllCursor(@NonNull String tableName,\n          \n          \n            \n                private Cursor getQueryAllCursor(@NonNull String tableName,", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#discussion_r547719259", "createdAt": "2020-12-23T06:46:13Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "diffHunk": "@@ -941,7 +876,6 @@ private String getModelName(@NonNull Model model) {\n     }\n \n     @SuppressWarnings(\"WeakerAccess\")\n-    @VisibleForTesting\n     Cursor getQueryAllCursor(@NonNull String tableName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba6247719205fbff02ac71c895398e8186d4971b"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcxOTg0Mw==", "bodyText": "Can we get these relationship strings into an enum somewhere?\nAlso, the contents of the case statements looks like a good candidate for some smaller helper method(s). That will also help to reduce the nesting.", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#discussion_r547719843", "createdAt": "2020-12-23T06:46:54Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/ModelTreeHelper.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelAssociation;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.query.QueryOptions;\n+import com.amplifyframework.core.model.query.Where;\n+import com.amplifyframework.core.model.query.predicate.QueryField;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicateOperation;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicates;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.util.Empty;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Utility class to help traverse a tree of models by relationship.\n+ */\n+final class ModelTreeHelper {\n+    private final ModelSchemaRegistry registry;\n+    private final SQLiteStorageAdapter storage;\n+\n+    /**\n+     * Constructs a model family tree traversing utility.\n+     * @param registry model registry to search schema from\n+     * @param storage SQLite storage engine\n+     */\n+    ModelTreeHelper(ModelSchemaRegistry registry,\n+                    SQLiteStorageAdapter storage) {\n+        this.registry = registry;\n+        this.storage = storage;\n+    }\n+\n+    /**\n+     * Returns a map of descendants of a set of models (of same type).\n+     * A model is a child of its parent if it uses its parent's ID as foreign key.\n+     * @param root Collection of models to query its descendants of.\n+     * @return Map of descendants keyed by model schema. The value contains a set of\n+     *          descendants' IDs for that model type.\n+     */\n+    <T extends Model> Map<ModelSchema, Set<String>> descendantsOf(Collection<T> root) {\n+        if (Empty.check(root)) {\n+            throw new IllegalArgumentException(\"Cannot traverse tree from an empty root.\");\n+        }\n+        Map<ModelSchema, Set<String>> descendants = new LinkedHashMap<>();\n+        ModelSchema rootSchema = registry.getModelSchemaForModelInstance(root.iterator().next());\n+        Set<String> rootIds = new HashSet<>();\n+        for (T model : root) {\n+            rootIds.add(model.getId());\n+        }\n+        recurseTree(descendants, rootSchema, rootIds);\n+        return descendants;\n+    }\n+\n+    private void recurseTree(\n+            Map<ModelSchema, Set<String>> tree,\n+            ModelSchema modelSchema,\n+            Collection<String> parentIds\n+    ) {\n+        SQLiteTable parentTable = SQLiteTable.fromSchema(modelSchema);\n+        for (ModelAssociation association : modelSchema.getAssociations().values()) {\n+            switch (association.getName()) {\n+                case \"HasOne\":\n+                case \"HasMany\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba6247719205fbff02ac71c895398e8186d4971b"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcyMTIzNQ==", "bodyText": "This SQLiteStorageAdapter looks like a bad coupling. The adapter owns a model tree helper, and the model tree helper owns a storage. But in reality, you're only ever using it to access a SQL cursor. So, a step better would be to pass just that, directly.", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#discussion_r547721235", "createdAt": "2020-12-23T06:48:54Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/ModelTreeHelper.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelAssociation;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.query.QueryOptions;\n+import com.amplifyframework.core.model.query.Where;\n+import com.amplifyframework.core.model.query.predicate.QueryField;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicateOperation;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicates;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.util.Empty;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Utility class to help traverse a tree of models by relationship.\n+ */\n+final class ModelTreeHelper {\n+    private final ModelSchemaRegistry registry;\n+    private final SQLiteStorageAdapter storage;\n+\n+    /**\n+     * Constructs a model family tree traversing utility.\n+     * @param registry model registry to search schema from\n+     * @param storage SQLite storage engine\n+     */\n+    ModelTreeHelper(ModelSchemaRegistry registry,\n+                    SQLiteStorageAdapter storage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba6247719205fbff02ac71c895398e8186d4971b"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcyMTg2NA==", "bodyText": "Now that you have this in its own unit, it will be a lot easier to write a unit test!\n\nSQLiteModelTree?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            final class ModelTreeHelper {\n          \n          \n            \n            final class SQLiteModelTree {", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#discussion_r547721864", "createdAt": "2020-12-23T06:49:46Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/ModelTreeHelper.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelAssociation;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.query.QueryOptions;\n+import com.amplifyframework.core.model.query.Where;\n+import com.amplifyframework.core.model.query.predicate.QueryField;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicateOperation;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicates;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.util.Empty;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Utility class to help traverse a tree of models by relationship.\n+ */\n+final class ModelTreeHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba6247719205fbff02ac71c895398e8186d4971b"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcyMzU5MQ==", "bodyText": "This type still kind of looks like a data structure in-and-of itself. You could make a class Descendent, and then return a List<Descendent>, here.\n    Map<ModelSchema, Set<String>>\n\nAny Map other than Map<PrimitiveA, PrimitiveB> is usually waiting to be made into a complex type of its own.", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#discussion_r547723591", "createdAt": "2020-12-23T06:52:19Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/ModelTreeHelper.java", "diffHunk": "@@ -0,0 +1,140 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelAssociation;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.query.QueryOptions;\n+import com.amplifyframework.core.model.query.Where;\n+import com.amplifyframework.core.model.query.predicate.QueryField;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicateOperation;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicates;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.util.Empty;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Utility class to help traverse a tree of models by relationship.\n+ */\n+final class ModelTreeHelper {\n+    private final ModelSchemaRegistry registry;\n+    private final SQLiteStorageAdapter storage;\n+\n+    /**\n+     * Constructs a model family tree traversing utility.\n+     * @param registry model registry to search schema from\n+     * @param storage SQLite storage engine\n+     */\n+    ModelTreeHelper(ModelSchemaRegistry registry,\n+                    SQLiteStorageAdapter storage) {\n+        this.registry = registry;\n+        this.storage = storage;\n+    }\n+\n+    /**\n+     * Returns a map of descendants of a set of models (of same type).\n+     * A model is a child of its parent if it uses its parent's ID as foreign key.\n+     * @param root Collection of models to query its descendants of.\n+     * @return Map of descendants keyed by model schema. The value contains a set of\n+     *          descendants' IDs for that model type.\n+     */\n+    <T extends Model> Map<ModelSchema, Set<String>> descendantsOf(Collection<T> root) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba6247719205fbff02ac71c895398e8186d4971b"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fdac6d167b2092ab04c8abb3a21734427767597", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/9fdac6d167b2092ab04c8abb3a21734427767597", "committedDate": "2021-01-05T09:17:16Z", "message": "address pr comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/0889f70447823b7eef7931baac75f6aedd2ebe85", "committedDate": "2021-01-05T09:55:15Z", "message": "Merge branch 'main' of https://github.com/aws-amplify/amplify-android into publish-cascading-delete"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMDk4ODUy", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#pullrequestreview-562098852", "createdAt": "2021-01-05T20:13:07Z", "commit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMDoxMzowN1rOIOlslg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMDoxMzowN1rOIOlslg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE2ODU5OA==", "bodyText": "Quotes around %s?", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#discussion_r552168598", "createdAt": "2021-01-05T20:13:07Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "diffHunk": "@@ -503,47 +515,28 @@ public void query(\n                     return;\n                 }\n \n-                LOG.debug(\"Deleting item in table: \" + sqliteTable.getName() +\n-                    \" identified by ID: \" + item.getId());\n-\n-                // delete always checks for ID first\n-                final QueryPredicateOperation<?> idCheck =\n-                    QueryField.field(primaryKeyName).eq(item.getId());\n-                final QueryPredicate condition = !QueryPredicates.all().equals(predicate)\n-                    ? idCheck.and(predicate)\n-                    : idCheck;\n-                final SqlCommand sqlCommand = sqlCommandFactory.deleteFor(modelSchema, condition);\n-                if (sqlCommand.sqlStatement() == null || !sqlCommand.hasCompiledSqlStatement()) {\n-                    onError.accept(new DataStoreException(\n-                        \"No delete statement found for the Model: \" + modelSchema.getName(),\n-                        AmplifyException.TODO_RECOVERY_SUGGESTION\n-                    ));\n-                    return;\n-                }\n-\n-                synchronized (sqlCommand.getCompiledSqlStatement()) {\n-                    final SQLiteStatement compiledSqlStatement = sqlCommand.getCompiledSqlStatement();\n-                    compiledSqlStatement.clearBindings();\n-                    bindStatementToValues(sqlCommand, null);\n-                    // executeUpdateDelete returns the number of rows affected.\n-                    final int rowsDeleted = compiledSqlStatement.executeUpdateDelete();\n-                    compiledSqlStatement.clearBindings();\n-                    if (rowsDeleted == 0) {\n-                        throw new DataStoreException(\n-                            \"Failed to meet condition. Model was not deleted.\",\n-                            \"Please verify the current state of saved item.\"\n-                        );\n+                // Use ModelTreeHelper to identify the models affected by cascading delete.\n+                Map<ModelSchema, Set<String>> modelFamilyTree =\n+                        sqLiteModelTree.descendantsOf(Collections.singleton(item));\n+\n+                for (ModelSchema schema : modelFamilyTree.keySet()) {\n+                    for (String id : modelFamilyTree.get(schema)) {\n+                        // Publish DELETE mutation for each affected item.\n+                        String dummyJson = String.format(\"{\\\"id\\\":%s}\", id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMTMzMTgy", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#pullrequestreview-562133182", "createdAt": "2021-01-05T21:07:52Z", "commit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMTowNzo1M1rOIOnUiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMTowNzo1M1rOIOnUiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE5NTIwOA==", "bodyText": "Does this method need to take a Collection<T>?  It looks like it is only ever taking a Collection of 1 item, so maybe you could just pass a T here?", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#discussion_r552195208", "createdAt": "2021-01-05T21:07:53Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelTree.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelAssociation;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.query.QueryOptions;\n+import com.amplifyframework.core.model.query.Where;\n+import com.amplifyframework.core.model.query.predicate.QueryField;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicateOperation;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicates;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.util.Empty;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Utility class to help traverse a tree of models by relationship.\n+ */\n+final class SQLiteModelTree {\n+    private final ModelSchemaRegistry registry;\n+    private final SQLCommandFactory commandFactory;\n+    private final SQLiteDatabase database;\n+\n+    /**\n+     * Constructs a model family tree traversing utility.\n+     * @param registry model registry to search schema from\n+     * @param commandFactory SQL command factory\n+     * @param database SQLite database connection handle\n+     */\n+    SQLiteModelTree(ModelSchemaRegistry registry,\n+                    SQLCommandFactory commandFactory,\n+                    SQLiteDatabase database) {\n+        this.registry = registry;\n+        this.commandFactory = commandFactory;\n+        this.database = database;\n+    }\n+\n+    /**\n+     * Returns a map of descendants of a set of models (of same type).\n+     * A model is a child of its parent if it uses its parent's ID as foreign key.\n+     * @param root Collection of models to query its descendants of.\n+     * @return Map of descendants keyed by model schema. The value contains a set of\n+     *          descendants' IDs for that model type.\n+     */\n+    <T extends Model> Map<ModelSchema, Set<String>> descendantsOf(Collection<T> root) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMTM3Njc3", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#pullrequestreview-562137677", "createdAt": "2021-01-05T21:15:19Z", "commit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMToxNToxOVrOIOnikg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMToxNToxOVrOIOnikg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE5ODgwMg==", "bodyText": "Instead of a raw String here, could you do HasOne.class.getSimpleName()? (and similar for HasMany, and BelongsTo?", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#discussion_r552198802", "createdAt": "2021-01-05T21:15:19Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelTree.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelAssociation;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.query.QueryOptions;\n+import com.amplifyframework.core.model.query.Where;\n+import com.amplifyframework.core.model.query.predicate.QueryField;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicateOperation;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicates;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.util.Empty;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Utility class to help traverse a tree of models by relationship.\n+ */\n+final class SQLiteModelTree {\n+    private final ModelSchemaRegistry registry;\n+    private final SQLCommandFactory commandFactory;\n+    private final SQLiteDatabase database;\n+\n+    /**\n+     * Constructs a model family tree traversing utility.\n+     * @param registry model registry to search schema from\n+     * @param commandFactory SQL command factory\n+     * @param database SQLite database connection handle\n+     */\n+    SQLiteModelTree(ModelSchemaRegistry registry,\n+                    SQLCommandFactory commandFactory,\n+                    SQLiteDatabase database) {\n+        this.registry = registry;\n+        this.commandFactory = commandFactory;\n+        this.database = database;\n+    }\n+\n+    /**\n+     * Returns a map of descendants of a set of models (of same type).\n+     * A model is a child of its parent if it uses its parent's ID as foreign key.\n+     * @param root Collection of models to query its descendants of.\n+     * @return Map of descendants keyed by model schema. The value contains a set of\n+     *          descendants' IDs for that model type.\n+     */\n+    <T extends Model> Map<ModelSchema, Set<String>> descendantsOf(Collection<T> root) {\n+        if (Empty.check(root)) {\n+            throw new IllegalArgumentException(\"Cannot traverse tree from an empty root.\");\n+        }\n+        Map<ModelSchema, Set<String>> descendants = new LinkedHashMap<>();\n+        ModelSchema rootSchema = registry.getModelSchemaForModelInstance(root.iterator().next());\n+        Set<String> rootIds = new HashSet<>();\n+        for (T model : root) {\n+            rootIds.add(model.getId());\n+        }\n+        recurseTree(descendants, rootSchema, rootIds);\n+        return descendants;\n+    }\n+\n+    private void recurseTree(\n+            Map<ModelSchema, Set<String>> tree,\n+            ModelSchema modelSchema,\n+            Collection<String> parentIds\n+    ) {\n+        SQLiteTable parentTable = SQLiteTable.fromSchema(modelSchema);\n+        for (ModelAssociation association : modelSchema.getAssociations().values()) {\n+            switch (association.getName()) {\n+                case \"HasOne\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMTUzNjQz", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#pullrequestreview-562153643", "createdAt": "2021-01-05T21:34:56Z", "commit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMTozNDo1NlrOIOoajA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMTozNDo1NlrOIOoajA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIxMzEzMg==", "bodyText": "Can you add a test that exercises this predicate building logic?  I think your current test is too simple to verify it.   Maybe add another test that deletes a Blog, which has 3 Posts, each of which has 3 Comments, and then verify that a total of 13 StorageItemChange items are observed?", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#discussion_r552213132", "createdAt": "2021-01-05T21:34:56Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelTree.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelAssociation;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.query.QueryOptions;\n+import com.amplifyframework.core.model.query.Where;\n+import com.amplifyframework.core.model.query.predicate.QueryField;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicateOperation;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicates;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.util.Empty;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Utility class to help traverse a tree of models by relationship.\n+ */\n+final class SQLiteModelTree {\n+    private final ModelSchemaRegistry registry;\n+    private final SQLCommandFactory commandFactory;\n+    private final SQLiteDatabase database;\n+\n+    /**\n+     * Constructs a model family tree traversing utility.\n+     * @param registry model registry to search schema from\n+     * @param commandFactory SQL command factory\n+     * @param database SQLite database connection handle\n+     */\n+    SQLiteModelTree(ModelSchemaRegistry registry,\n+                    SQLCommandFactory commandFactory,\n+                    SQLiteDatabase database) {\n+        this.registry = registry;\n+        this.commandFactory = commandFactory;\n+        this.database = database;\n+    }\n+\n+    /**\n+     * Returns a map of descendants of a set of models (of same type).\n+     * A model is a child of its parent if it uses its parent's ID as foreign key.\n+     * @param root Collection of models to query its descendants of.\n+     * @return Map of descendants keyed by model schema. The value contains a set of\n+     *          descendants' IDs for that model type.\n+     */\n+    <T extends Model> Map<ModelSchema, Set<String>> descendantsOf(Collection<T> root) {\n+        if (Empty.check(root)) {\n+            throw new IllegalArgumentException(\"Cannot traverse tree from an empty root.\");\n+        }\n+        Map<ModelSchema, Set<String>> descendants = new LinkedHashMap<>();\n+        ModelSchema rootSchema = registry.getModelSchemaForModelInstance(root.iterator().next());\n+        Set<String> rootIds = new HashSet<>();\n+        for (T model : root) {\n+            rootIds.add(model.getId());\n+        }\n+        recurseTree(descendants, rootSchema, rootIds);\n+        return descendants;\n+    }\n+\n+    private void recurseTree(\n+            Map<ModelSchema, Set<String>> tree,\n+            ModelSchema modelSchema,\n+            Collection<String> parentIds\n+    ) {\n+        SQLiteTable parentTable = SQLiteTable.fromSchema(modelSchema);\n+        for (ModelAssociation association : modelSchema.getAssociations().values()) {\n+            switch (association.getName()) {\n+                case \"HasOne\":\n+                case \"HasMany\":\n+                    String childModel = association.getAssociatedType(); // model name\n+                    ModelSchema childSchema = registry.getModelSchemaForModelClass(childModel);\n+                    SQLiteTable childTable = SQLiteTable.fromSchema(childSchema);\n+                    String childPrimaryKey = childTable.getPrimaryKey().getAliasedName();\n+                    QueryField queryField = QueryField.field(parentTable.getPrimaryKeyColumnName());\n+\n+                    // Chain predicates with OR operator.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMTU4ODI5", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#pullrequestreview-562158829", "createdAt": "2021-01-05T21:43:35Z", "commit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMTo0MzozNVrOIOoqhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMTo0MzozNVrOIOoqhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIxNzIyMQ==", "bodyText": "Does this need to be a LinkedHashMap, or would a regular HashMap work the same way?", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#discussion_r552217221", "createdAt": "2021-01-05T21:43:35Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelTree.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelAssociation;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.query.QueryOptions;\n+import com.amplifyframework.core.model.query.Where;\n+import com.amplifyframework.core.model.query.predicate.QueryField;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicateOperation;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicates;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.util.Empty;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Utility class to help traverse a tree of models by relationship.\n+ */\n+final class SQLiteModelTree {\n+    private final ModelSchemaRegistry registry;\n+    private final SQLCommandFactory commandFactory;\n+    private final SQLiteDatabase database;\n+\n+    /**\n+     * Constructs a model family tree traversing utility.\n+     * @param registry model registry to search schema from\n+     * @param commandFactory SQL command factory\n+     * @param database SQLite database connection handle\n+     */\n+    SQLiteModelTree(ModelSchemaRegistry registry,\n+                    SQLCommandFactory commandFactory,\n+                    SQLiteDatabase database) {\n+        this.registry = registry;\n+        this.commandFactory = commandFactory;\n+        this.database = database;\n+    }\n+\n+    /**\n+     * Returns a map of descendants of a set of models (of same type).\n+     * A model is a child of its parent if it uses its parent's ID as foreign key.\n+     * @param root Collection of models to query its descendants of.\n+     * @return Map of descendants keyed by model schema. The value contains a set of\n+     *          descendants' IDs for that model type.\n+     */\n+    <T extends Model> Map<ModelSchema, Set<String>> descendantsOf(Collection<T> root) {\n+        if (Empty.check(root)) {\n+            throw new IllegalArgumentException(\"Cannot traverse tree from an empty root.\");\n+        }\n+        Map<ModelSchema, Set<String>> descendants = new LinkedHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMTY0NDM1", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#pullrequestreview-562164435", "createdAt": "2021-01-05T21:53:35Z", "commit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMTo1MzozNVrOIOo77g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMTo1MzozNVrOIOo77g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIyMTY3OA==", "bodyText": "Looks like this will only be thrown if SQLPredicate::parsePredicate encounters a QueryPredicate that it can't parse, which should only happen if there is a bug in the library.  Wouldn't it be better to throw an exception back to the user, so they can report the bug to us, instead of failing silently?", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#discussion_r552221678", "createdAt": "2021-01-05T21:53:35Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelTree.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelAssociation;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.query.QueryOptions;\n+import com.amplifyframework.core.model.query.Where;\n+import com.amplifyframework.core.model.query.predicate.QueryField;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicateOperation;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicates;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.util.Empty;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Utility class to help traverse a tree of models by relationship.\n+ */\n+final class SQLiteModelTree {\n+    private final ModelSchemaRegistry registry;\n+    private final SQLCommandFactory commandFactory;\n+    private final SQLiteDatabase database;\n+\n+    /**\n+     * Constructs a model family tree traversing utility.\n+     * @param registry model registry to search schema from\n+     * @param commandFactory SQL command factory\n+     * @param database SQLite database connection handle\n+     */\n+    SQLiteModelTree(ModelSchemaRegistry registry,\n+                    SQLCommandFactory commandFactory,\n+                    SQLiteDatabase database) {\n+        this.registry = registry;\n+        this.commandFactory = commandFactory;\n+        this.database = database;\n+    }\n+\n+    /**\n+     * Returns a map of descendants of a set of models (of same type).\n+     * A model is a child of its parent if it uses its parent's ID as foreign key.\n+     * @param root Collection of models to query its descendants of.\n+     * @return Map of descendants keyed by model schema. The value contains a set of\n+     *          descendants' IDs for that model type.\n+     */\n+    <T extends Model> Map<ModelSchema, Set<String>> descendantsOf(Collection<T> root) {\n+        if (Empty.check(root)) {\n+            throw new IllegalArgumentException(\"Cannot traverse tree from an empty root.\");\n+        }\n+        Map<ModelSchema, Set<String>> descendants = new LinkedHashMap<>();\n+        ModelSchema rootSchema = registry.getModelSchemaForModelInstance(root.iterator().next());\n+        Set<String> rootIds = new HashSet<>();\n+        for (T model : root) {\n+            rootIds.add(model.getId());\n+        }\n+        recurseTree(descendants, rootSchema, rootIds);\n+        return descendants;\n+    }\n+\n+    private void recurseTree(\n+            Map<ModelSchema, Set<String>> tree,\n+            ModelSchema modelSchema,\n+            Collection<String> parentIds\n+    ) {\n+        SQLiteTable parentTable = SQLiteTable.fromSchema(modelSchema);\n+        for (ModelAssociation association : modelSchema.getAssociations().values()) {\n+            switch (association.getName()) {\n+                case \"HasOne\":\n+                case \"HasMany\":\n+                    String childModel = association.getAssociatedType(); // model name\n+                    ModelSchema childSchema = registry.getModelSchemaForModelClass(childModel);\n+                    SQLiteTable childTable = SQLiteTable.fromSchema(childSchema);\n+                    String childPrimaryKey = childTable.getPrimaryKey().getAliasedName();\n+                    QueryField queryField = QueryField.field(parentTable.getPrimaryKeyColumnName());\n+\n+                    // Chain predicates with OR operator.\n+                    // No predicate = Match NONE.\n+                    // 1 predicate = Match SELF.\n+                    // 2 or more predicates = Match ANY.\n+                    QueryPredicate predicate = QueryPredicates.none();\n+                    for (String parentId : parentIds) {\n+                        QueryPredicateOperation<Object> operation = queryField.eq(parentId);\n+                        if (QueryPredicates.none().equals(predicate)) {\n+                            predicate = operation;\n+                        } else {\n+                            predicate = operation.or(predicate);\n+                        }\n+                    }\n+\n+                    // Collect every children one level deeper than current level\n+                    // SELECT * FROM <CHILD_TABLE> WHERE <PARENT> = <ID_1> OR <PARENT> = <ID_2> OR ...\n+                    QueryOptions options = Where.matches(predicate);\n+                    Set<String> childrenIds = new HashSet<>();\n+                    try (Cursor cursor = queryAll(childModel, options)) {\n+                        if (cursor != null && cursor.moveToFirst()) {\n+                            int index = cursor.getColumnIndexOrThrow(childPrimaryKey);\n+                            do {\n+                                childrenIds.add(cursor.getString(index));\n+                            } while (cursor.moveToNext());\n+                        }\n+                    } catch (DataStoreException exception) {\n+                        // Don't cut the search short. Populate rest of the tree.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "originalPosition": 127}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMTcyNTg2", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#pullrequestreview-562172586", "createdAt": "2021-01-05T22:08:10Z", "commit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMjowODoxMFrOIOpU2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMjowODoxMFrOIOpU2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIyODA1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    QueryPredicateOperation<Object> operation = queryField.eq(parentId);\n          \n          \n            \n                                    QueryPredicateOperation<String> operation = queryField.eq(parentId);\n          \n      \n    \n    \n  \n\nThis should be the data type of the field being evaluates, which is String for the model id.", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#discussion_r552228056", "createdAt": "2021-01-05T22:08:10Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelTree.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelAssociation;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.query.QueryOptions;\n+import com.amplifyframework.core.model.query.Where;\n+import com.amplifyframework.core.model.query.predicate.QueryField;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicateOperation;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicates;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.util.Empty;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Utility class to help traverse a tree of models by relationship.\n+ */\n+final class SQLiteModelTree {\n+    private final ModelSchemaRegistry registry;\n+    private final SQLCommandFactory commandFactory;\n+    private final SQLiteDatabase database;\n+\n+    /**\n+     * Constructs a model family tree traversing utility.\n+     * @param registry model registry to search schema from\n+     * @param commandFactory SQL command factory\n+     * @param database SQLite database connection handle\n+     */\n+    SQLiteModelTree(ModelSchemaRegistry registry,\n+                    SQLCommandFactory commandFactory,\n+                    SQLiteDatabase database) {\n+        this.registry = registry;\n+        this.commandFactory = commandFactory;\n+        this.database = database;\n+    }\n+\n+    /**\n+     * Returns a map of descendants of a set of models (of same type).\n+     * A model is a child of its parent if it uses its parent's ID as foreign key.\n+     * @param root Collection of models to query its descendants of.\n+     * @return Map of descendants keyed by model schema. The value contains a set of\n+     *          descendants' IDs for that model type.\n+     */\n+    <T extends Model> Map<ModelSchema, Set<String>> descendantsOf(Collection<T> root) {\n+        if (Empty.check(root)) {\n+            throw new IllegalArgumentException(\"Cannot traverse tree from an empty root.\");\n+        }\n+        Map<ModelSchema, Set<String>> descendants = new LinkedHashMap<>();\n+        ModelSchema rootSchema = registry.getModelSchemaForModelInstance(root.iterator().next());\n+        Set<String> rootIds = new HashSet<>();\n+        for (T model : root) {\n+            rootIds.add(model.getId());\n+        }\n+        recurseTree(descendants, rootSchema, rootIds);\n+        return descendants;\n+    }\n+\n+    private void recurseTree(\n+            Map<ModelSchema, Set<String>> tree,\n+            ModelSchema modelSchema,\n+            Collection<String> parentIds\n+    ) {\n+        SQLiteTable parentTable = SQLiteTable.fromSchema(modelSchema);\n+        for (ModelAssociation association : modelSchema.getAssociations().values()) {\n+            switch (association.getName()) {\n+                case \"HasOne\":\n+                case \"HasMany\":\n+                    String childModel = association.getAssociatedType(); // model name\n+                    ModelSchema childSchema = registry.getModelSchemaForModelClass(childModel);\n+                    SQLiteTable childTable = SQLiteTable.fromSchema(childSchema);\n+                    String childPrimaryKey = childTable.getPrimaryKey().getAliasedName();\n+                    QueryField queryField = QueryField.field(parentTable.getPrimaryKeyColumnName());\n+\n+                    // Chain predicates with OR operator.\n+                    // No predicate = Match NONE.\n+                    // 1 predicate = Match SELF.\n+                    // 2 or more predicates = Match ANY.\n+                    QueryPredicate predicate = QueryPredicates.none();\n+                    for (String parentId : parentIds) {\n+                        QueryPredicateOperation<Object> operation = queryField.eq(parentId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMTc0MTYx", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#pullrequestreview-562174161", "createdAt": "2021-01-05T22:10:54Z", "commit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMjoxMDo1NFrOIOpZjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMjoxMDo1NFrOIOpZjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIyOTI2Mg==", "bodyText": "This is just a Map, not a tree, so maybe call it map?.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        Map<ModelSchema, Set<String>> tree,\n          \n          \n            \n                        Map<ModelSchema, Set<String>> map,", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#discussion_r552229262", "createdAt": "2021-01-05T22:10:54Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelTree.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelAssociation;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.query.QueryOptions;\n+import com.amplifyframework.core.model.query.Where;\n+import com.amplifyframework.core.model.query.predicate.QueryField;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicateOperation;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicates;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.util.Empty;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Utility class to help traverse a tree of models by relationship.\n+ */\n+final class SQLiteModelTree {\n+    private final ModelSchemaRegistry registry;\n+    private final SQLCommandFactory commandFactory;\n+    private final SQLiteDatabase database;\n+\n+    /**\n+     * Constructs a model family tree traversing utility.\n+     * @param registry model registry to search schema from\n+     * @param commandFactory SQL command factory\n+     * @param database SQLite database connection handle\n+     */\n+    SQLiteModelTree(ModelSchemaRegistry registry,\n+                    SQLCommandFactory commandFactory,\n+                    SQLiteDatabase database) {\n+        this.registry = registry;\n+        this.commandFactory = commandFactory;\n+        this.database = database;\n+    }\n+\n+    /**\n+     * Returns a map of descendants of a set of models (of same type).\n+     * A model is a child of its parent if it uses its parent's ID as foreign key.\n+     * @param root Collection of models to query its descendants of.\n+     * @return Map of descendants keyed by model schema. The value contains a set of\n+     *          descendants' IDs for that model type.\n+     */\n+    <T extends Model> Map<ModelSchema, Set<String>> descendantsOf(Collection<T> root) {\n+        if (Empty.check(root)) {\n+            throw new IllegalArgumentException(\"Cannot traverse tree from an empty root.\");\n+        }\n+        Map<ModelSchema, Set<String>> descendants = new LinkedHashMap<>();\n+        ModelSchema rootSchema = registry.getModelSchemaForModelInstance(root.iterator().next());\n+        Set<String> rootIds = new HashSet<>();\n+        for (T model : root) {\n+            rootIds.add(model.getId());\n+        }\n+        recurseTree(descendants, rootSchema, rootIds);\n+        return descendants;\n+    }\n+\n+    private void recurseTree(\n+            Map<ModelSchema, Set<String>> tree,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMTc0Mjkz", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#pullrequestreview-562174293", "createdAt": "2021-01-05T22:11:07Z", "commit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMjoxMTowOFrOIOpZ-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMjoxMTowOFrOIOpZ-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIyOTM3MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                // Add queried result to the tree\n          \n          \n            \n                                // Add queried result to the map", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#discussion_r552229370", "createdAt": "2021-01-05T22:11:08Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelTree.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import android.database.sqlite.SQLiteDatabase;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelAssociation;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.query.QueryOptions;\n+import com.amplifyframework.core.model.query.Where;\n+import com.amplifyframework.core.model.query.predicate.QueryField;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicateOperation;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicates;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.util.Empty;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Utility class to help traverse a tree of models by relationship.\n+ */\n+final class SQLiteModelTree {\n+    private final ModelSchemaRegistry registry;\n+    private final SQLCommandFactory commandFactory;\n+    private final SQLiteDatabase database;\n+\n+    /**\n+     * Constructs a model family tree traversing utility.\n+     * @param registry model registry to search schema from\n+     * @param commandFactory SQL command factory\n+     * @param database SQLite database connection handle\n+     */\n+    SQLiteModelTree(ModelSchemaRegistry registry,\n+                    SQLCommandFactory commandFactory,\n+                    SQLiteDatabase database) {\n+        this.registry = registry;\n+        this.commandFactory = commandFactory;\n+        this.database = database;\n+    }\n+\n+    /**\n+     * Returns a map of descendants of a set of models (of same type).\n+     * A model is a child of its parent if it uses its parent's ID as foreign key.\n+     * @param root Collection of models to query its descendants of.\n+     * @return Map of descendants keyed by model schema. The value contains a set of\n+     *          descendants' IDs for that model type.\n+     */\n+    <T extends Model> Map<ModelSchema, Set<String>> descendantsOf(Collection<T> root) {\n+        if (Empty.check(root)) {\n+            throw new IllegalArgumentException(\"Cannot traverse tree from an empty root.\");\n+        }\n+        Map<ModelSchema, Set<String>> descendants = new LinkedHashMap<>();\n+        ModelSchema rootSchema = registry.getModelSchemaForModelInstance(root.iterator().next());\n+        Set<String> rootIds = new HashSet<>();\n+        for (T model : root) {\n+            rootIds.add(model.getId());\n+        }\n+        recurseTree(descendants, rootSchema, rootIds);\n+        return descendants;\n+    }\n+\n+    private void recurseTree(\n+            Map<ModelSchema, Set<String>> tree,\n+            ModelSchema modelSchema,\n+            Collection<String> parentIds\n+    ) {\n+        SQLiteTable parentTable = SQLiteTable.fromSchema(modelSchema);\n+        for (ModelAssociation association : modelSchema.getAssociations().values()) {\n+            switch (association.getName()) {\n+                case \"HasOne\":\n+                case \"HasMany\":\n+                    String childModel = association.getAssociatedType(); // model name\n+                    ModelSchema childSchema = registry.getModelSchemaForModelClass(childModel);\n+                    SQLiteTable childTable = SQLiteTable.fromSchema(childSchema);\n+                    String childPrimaryKey = childTable.getPrimaryKey().getAliasedName();\n+                    QueryField queryField = QueryField.field(parentTable.getPrimaryKeyColumnName());\n+\n+                    // Chain predicates with OR operator.\n+                    // No predicate = Match NONE.\n+                    // 1 predicate = Match SELF.\n+                    // 2 or more predicates = Match ANY.\n+                    QueryPredicate predicate = QueryPredicates.none();\n+                    for (String parentId : parentIds) {\n+                        QueryPredicateOperation<Object> operation = queryField.eq(parentId);\n+                        if (QueryPredicates.none().equals(predicate)) {\n+                            predicate = operation;\n+                        } else {\n+                            predicate = operation.or(predicate);\n+                        }\n+                    }\n+\n+                    // Collect every children one level deeper than current level\n+                    // SELECT * FROM <CHILD_TABLE> WHERE <PARENT> = <ID_1> OR <PARENT> = <ID_2> OR ...\n+                    QueryOptions options = Where.matches(predicate);\n+                    Set<String> childrenIds = new HashSet<>();\n+                    try (Cursor cursor = queryAll(childModel, options)) {\n+                        if (cursor != null && cursor.moveToFirst()) {\n+                            int index = cursor.getColumnIndexOrThrow(childPrimaryKey);\n+                            do {\n+                                childrenIds.add(cursor.getString(index));\n+                            } while (cursor.moveToNext());\n+                        }\n+                    } catch (DataStoreException exception) {\n+                        // Don't cut the search short. Populate rest of the tree.\n+                    }\n+\n+                    // Add queried result to the tree", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMTgzMzYy", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#pullrequestreview-562183362", "createdAt": "2021-01-05T22:28:18Z", "commit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMjoyODoxOFrOIOp38A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMjoyODoxOFrOIOp38A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIzNzA0MA==", "bodyText": "Unrelated to this PR, but this seems wrong.  Shouldn't we not set changeId to anything here, so that StorageItemChange::build just randomly generates one?  From the changeId Javadoc, this is supposed to be a UUID representing this change, not the id of the model that it relates to.\nMaybe this is something that we could follow up on in a separate PR.", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#discussion_r552237040", "createdAt": "2021-01-05T22:28:18Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "diffHunk": "@@ -503,47 +515,28 @@ public void query(\n                     return;\n                 }\n \n-                LOG.debug(\"Deleting item in table: \" + sqliteTable.getName() +\n-                    \" identified by ID: \" + item.getId());\n-\n-                // delete always checks for ID first\n-                final QueryPredicateOperation<?> idCheck =\n-                    QueryField.field(primaryKeyName).eq(item.getId());\n-                final QueryPredicate condition = !QueryPredicates.all().equals(predicate)\n-                    ? idCheck.and(predicate)\n-                    : idCheck;\n-                final SqlCommand sqlCommand = sqlCommandFactory.deleteFor(modelSchema, condition);\n-                if (sqlCommand.sqlStatement() == null || !sqlCommand.hasCompiledSqlStatement()) {\n-                    onError.accept(new DataStoreException(\n-                        \"No delete statement found for the Model: \" + modelSchema.getName(),\n-                        AmplifyException.TODO_RECOVERY_SUGGESTION\n-                    ));\n-                    return;\n-                }\n-\n-                synchronized (sqlCommand.getCompiledSqlStatement()) {\n-                    final SQLiteStatement compiledSqlStatement = sqlCommand.getCompiledSqlStatement();\n-                    compiledSqlStatement.clearBindings();\n-                    bindStatementToValues(sqlCommand, null);\n-                    // executeUpdateDelete returns the number of rows affected.\n-                    final int rowsDeleted = compiledSqlStatement.executeUpdateDelete();\n-                    compiledSqlStatement.clearBindings();\n-                    if (rowsDeleted == 0) {\n-                        throw new DataStoreException(\n-                            \"Failed to meet condition. Model was not deleted.\",\n-                            \"Please verify the current state of saved item.\"\n-                        );\n+                // Use ModelTreeHelper to identify the models affected by cascading delete.\n+                Map<ModelSchema, Set<String>> modelFamilyTree =\n+                        sqLiteModelTree.descendantsOf(Collections.singleton(item));\n+\n+                for (ModelSchema schema : modelFamilyTree.keySet()) {\n+                    for (String id : modelFamilyTree.get(schema)) {\n+                        // Publish DELETE mutation for each affected item.\n+                        String dummyJson = String.format(\"{\\\"id\\\":%s}\", id);\n+                        Model dummyItem = gson.fromJson(dummyJson, schema.getModelClass());\n+                        itemChangeSubject.onNext(StorageItemChange.builder()\n+                                .changeId(id)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMTgzOTgw", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#pullrequestreview-562183980", "createdAt": "2021-01-05T22:29:31Z", "commit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMjoyOTozMlrOIOp56A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMjoyOTozMlrOIOp56A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIzNzU0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"QueryPredicateOperation, QueryPredicateGroup.\"\n          \n          \n            \n                                    \"QueryPredicateOperation, QueryPredicateGroup, MatchAllQueryPredicate, MatchNoneQueryPredicate\"", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#discussion_r552237544", "createdAt": "2021-01-05T22:29:32Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/adapter/SQLPredicate.java", "diffHunk": "@@ -106,19 +108,25 @@ private void addBinding(Object value) {\n \n     // Utility method to recursively parse a given predicate.\n     private StringBuilder parsePredicate(QueryPredicate queryPredicate) throws DataStoreException {\n+        if (queryPredicate instanceof MatchAllQueryPredicate) {\n+            return new StringBuilder(\"1 = 1\");\n+        }\n+        if (queryPredicate instanceof MatchNoneQueryPredicate) {\n+            return new StringBuilder(\"1 = 0\");\n+        }\n         if (queryPredicate instanceof QueryPredicateOperation) {\n             QueryPredicateOperation<?> qpo = (QueryPredicateOperation) queryPredicate;\n             return parsePredicateOperation(qpo);\n-        } else if (queryPredicate instanceof QueryPredicateGroup) {\n+        }\n+        if (queryPredicate instanceof QueryPredicateGroup) {\n             QueryPredicateGroup qpg = (QueryPredicateGroup) queryPredicate;\n             return parsePredicateGroup(qpg);\n-        } else {\n-            throw new DataStoreException(\n-                    \"Tried to parse an unsupported QueryPredicate\",\n-                    \"Try changing to one of the supported values: \" +\n-                            \"QueryPredicateOperation, QueryPredicateGroup.\"\n-            );\n         }\n+        throw new DataStoreException(\n+                \"Tried to parse an unsupported QueryPredicate\",\n+                \"Try changing to one of the supported values: \" +\n+                        \"QueryPredicateOperation, QueryPredicateGroup.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyMTg1MDE4", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#pullrequestreview-562185018", "createdAt": "2021-01-05T22:31:41Z", "commit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMjozMTo0MVrOIOp9YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQyMjozMTo0MVrOIOp9YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjIzODQzMw==", "bodyText": "This is a Map not a tree, so maybe just call it descendants or modelFamilyMap or something?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Map<ModelSchema, Set<String>> modelFamilyTree =\n          \n          \n            \n                            Map<ModelSchema, Set<String>> descendants =", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#discussion_r552238433", "createdAt": "2021-01-05T22:31:41Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "diffHunk": "@@ -503,47 +515,28 @@ public void query(\n                     return;\n                 }\n \n-                LOG.debug(\"Deleting item in table: \" + sqliteTable.getName() +\n-                    \" identified by ID: \" + item.getId());\n-\n-                // delete always checks for ID first\n-                final QueryPredicateOperation<?> idCheck =\n-                    QueryField.field(primaryKeyName).eq(item.getId());\n-                final QueryPredicate condition = !QueryPredicates.all().equals(predicate)\n-                    ? idCheck.and(predicate)\n-                    : idCheck;\n-                final SqlCommand sqlCommand = sqlCommandFactory.deleteFor(modelSchema, condition);\n-                if (sqlCommand.sqlStatement() == null || !sqlCommand.hasCompiledSqlStatement()) {\n-                    onError.accept(new DataStoreException(\n-                        \"No delete statement found for the Model: \" + modelSchema.getName(),\n-                        AmplifyException.TODO_RECOVERY_SUGGESTION\n-                    ));\n-                    return;\n-                }\n-\n-                synchronized (sqlCommand.getCompiledSqlStatement()) {\n-                    final SQLiteStatement compiledSqlStatement = sqlCommand.getCompiledSqlStatement();\n-                    compiledSqlStatement.clearBindings();\n-                    bindStatementToValues(sqlCommand, null);\n-                    // executeUpdateDelete returns the number of rows affected.\n-                    final int rowsDeleted = compiledSqlStatement.executeUpdateDelete();\n-                    compiledSqlStatement.clearBindings();\n-                    if (rowsDeleted == 0) {\n-                        throw new DataStoreException(\n-                            \"Failed to meet condition. Model was not deleted.\",\n-                            \"Please verify the current state of saved item.\"\n-                        );\n+                // Use ModelTreeHelper to identify the models affected by cascading delete.\n+                Map<ModelSchema, Set<String>> modelFamilyTree =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0889f70447823b7eef7931baac75f6aedd2ebe85"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b080957e2b7ab9f36d54ee118489258ab94fad17", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/b080957e2b7ab9f36d54ee118489258ab94fad17", "committedDate": "2021-01-05T23:40:09Z", "message": "address more pr comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53d0d52fde32a7d79b77398535fe4b9a723545d4", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/53d0d52fde32a7d79b77398535fe4b9a723545d4", "committedDate": "2021-01-05T23:49:47Z", "message": "unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba4dc0ffc88f8d949bbcfa8b288919345ad8d8b0", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/ba4dc0ffc88f8d949bbcfa8b288919345ad8d8b0", "committedDate": "2021-01-06T19:36:49Z", "message": "more pr commments to address"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyOTkxNTY4", "url": "https://github.com/aws-amplify/amplify-android/pull/1059#pullrequestreview-562991568", "createdAt": "2021-01-06T19:42:16Z", "commit": {"oid": "ba4dc0ffc88f8d949bbcfa8b288919345ad8d8b0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d32de5628628d89cd7ea887cb875724f9757824b", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/d32de5628628d89cd7ea887cb875724f9757824b", "committedDate": "2021-01-06T23:41:13Z", "message": "Merge branch 'main' of https://github.com/aws-amplify/amplify-android into publish-cascading-delete"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3380, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}