{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NzE5MTA2", "number": 398, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwODoyMDowN1rOD2RsSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwOToxMDo1N1rOD2SNqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjM5NTYyOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterModelConverterTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwODoyMDowN1rOGMA7MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNzozMToxNlrOGMvL9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI1MTI0OQ==", "bodyText": "For all of the assertEquals(.., ...) calls -- you have actual and expected backwards. The correct ordering is to put the expected value first, and the actual value second.\nIt doesn't make a huge different, except in how jUnit does reporting, when things go wrong. Right now, the message would print something like:\n\nWanted actual value! But actually, it was expected value.\n\nWhere-as it would ordinarily say:\n\nWanted the expected value, but actually, it was this actual value.", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r415251249", "createdAt": "2020-04-26T08:20:07Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterModelConverterTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.todo.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.todo.Todo;\n+import com.amplifyframework.testmodels.todo.TodoOwner;\n+import com.amplifyframework.testmodels.todo.TodoStatus;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public final class SQLiteStorageAdapterModelConverterTest {\n+\n+    private static final Date MAY_THE_FOURTH = new Date(1588627200000L);\n+\n+    private SynchronousStorageAdapter adapter;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        this.adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+    }\n+\n+    @After\n+    public void teardown() {\n+        if (adapter != null) {\n+            TestStorageAdapter.cleanup(adapter);\n+        }\n+    }\n+\n+    /**\n+     * Assert that save a model instance with fields of different types in the SQLite database correctly.\n+     * Then after save succeeds, query it and compare the values against the original model.\n+     *\n+     * @throws DataStoreException On unexpected failure manipulating items in/out of DataStore\n+     */\n+    @Test\n+    public void saveModelWithAllTypesThenQuery() throws DataStoreException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAwOTIwNQ==", "bodyText": "that's great to know! thanks for pointing it out", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r416009205", "createdAt": "2020-04-27T17:31:16Z", "author": {"login": "drochetti"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterModelConverterTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.todo.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.todo.Todo;\n+import com.amplifyframework.testmodels.todo.TodoOwner;\n+import com.amplifyframework.testmodels.todo.TodoStatus;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public final class SQLiteStorageAdapterModelConverterTest {\n+\n+    private static final Date MAY_THE_FOURTH = new Date(1588627200000L);\n+\n+    private SynchronousStorageAdapter adapter;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        this.adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+    }\n+\n+    @After\n+    public void teardown() {\n+        if (adapter != null) {\n+            TestStorageAdapter.cleanup(adapter);\n+        }\n+    }\n+\n+    /**\n+     * Assert that save a model instance with fields of different types in the SQLite database correctly.\n+     * Then after save succeeds, query it and compare the values against the original model.\n+     *\n+     * @throws DataStoreException On unexpected failure manipulating items in/out of DataStore\n+     */\n+    @Test\n+    public void saveModelWithAllTypesThenQuery() throws DataStoreException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI1MTI0OQ=="}, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjQwNDE5OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterModelConverterTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwODoyNToxMlrOGMA_NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMTo0MjoxN1rOGOW6JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI1MjI3Nw==", "bodyText": "For any of these blocks where you drill down into an object's individual fields, it should be possible instead to do:\nassertEquals(\n   expectedHighLevelObject,\n    actualHighLevelObject\n);\n\nThis will work so long as the class implements a sane equals(...) function.\n(There's a few layers of complexity before it arrives here, but the assert* family all just basically check expected.equals(actual), here.", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r415252277", "createdAt": "2020-04-26T08:25:12Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterModelConverterTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.todo.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.todo.Todo;\n+import com.amplifyframework.testmodels.todo.TodoOwner;\n+import com.amplifyframework.testmodels.todo.TodoStatus;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public final class SQLiteStorageAdapterModelConverterTest {\n+\n+    private static final Date MAY_THE_FOURTH = new Date(1588627200000L);\n+\n+    private SynchronousStorageAdapter adapter;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        this.adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+    }\n+\n+    @After\n+    public void teardown() {\n+        if (adapter != null) {\n+            TestStorageAdapter.cleanup(adapter);\n+        }\n+    }\n+\n+    /**\n+     * Assert that save a model instance with fields of different types in the SQLite database correctly.\n+     * Then after save succeeds, query it and compare the values against the original model.\n+     *\n+     * @throws DataStoreException On unexpected failure manipulating items in/out of DataStore\n+     */\n+    @Test\n+    public void saveModelWithAllTypesThenQuery() throws DataStoreException {\n+        final Todo todo = createTestTodoModel();\n+        this.adapter.save(todo);\n+\n+        final List<Todo> result = this.adapter.query(Todo.class, Todo.ID.eq(todo.getId()));\n+        assertEquals(result.size(), 1);\n+\n+        final Todo queriedTodo = result.get(0);\n+        assertNotNull(queriedTodo);\n+\n+        // Test common scalar types\n+        assertEquals(queriedTodo.getTitle(), todo.getTitle());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0Njk4MA==", "bodyText": "right now there are some issues with how dates are handled once they are persisted on SQL and then fetched, they don't exactly match (due to timezone adjustments: 2:00pm PST becomes 10:00pm GMT).\nThoughts on how to handle those cases? I think this is a general problem for equality check from customers as well.\n@richardmcclellan does your PR address this issue?", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r416146980", "createdAt": "2020-04-27T21:03:27Z", "author": {"login": "drochetti"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterModelConverterTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.todo.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.todo.Todo;\n+import com.amplifyframework.testmodels.todo.TodoOwner;\n+import com.amplifyframework.testmodels.todo.TodoStatus;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public final class SQLiteStorageAdapterModelConverterTest {\n+\n+    private static final Date MAY_THE_FOURTH = new Date(1588627200000L);\n+\n+    private SynchronousStorageAdapter adapter;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        this.adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+    }\n+\n+    @After\n+    public void teardown() {\n+        if (adapter != null) {\n+            TestStorageAdapter.cleanup(adapter);\n+        }\n+    }\n+\n+    /**\n+     * Assert that save a model instance with fields of different types in the SQLite database correctly.\n+     * Then after save succeeds, query it and compare the values against the original model.\n+     *\n+     * @throws DataStoreException On unexpected failure manipulating items in/out of DataStore\n+     */\n+    @Test\n+    public void saveModelWithAllTypesThenQuery() throws DataStoreException {\n+        final Todo todo = createTestTodoModel();\n+        this.adapter.save(todo);\n+\n+        final List<Todo> result = this.adapter.query(Todo.class, Todo.ID.eq(todo.getId()));\n+        assertEquals(result.size(), 1);\n+\n+        final Todo queriedTodo = result.get(0);\n+        assertNotNull(queriedTodo);\n+\n+        // Test common scalar types\n+        assertEquals(queriedTodo.getTitle(), todo.getTitle());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI1MjI3Nw=="}, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1MzcxNg==", "bodyText": "Good question.  My PR is intended to address this.  I've created new classes to represent AWSDate, AWSTime, and AWSDateTime, and they all have a sane  equals(...) method\nHow does Datastore serialization work though?  Does it rely on a toString implementation?  Or is it custom for each type?", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r416153716", "createdAt": "2020-04-27T21:14:57Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterModelConverterTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.todo.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.todo.Todo;\n+import com.amplifyframework.testmodels.todo.TodoOwner;\n+import com.amplifyframework.testmodels.todo.TodoStatus;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public final class SQLiteStorageAdapterModelConverterTest {\n+\n+    private static final Date MAY_THE_FOURTH = new Date(1588627200000L);\n+\n+    private SynchronousStorageAdapter adapter;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        this.adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+    }\n+\n+    @After\n+    public void teardown() {\n+        if (adapter != null) {\n+            TestStorageAdapter.cleanup(adapter);\n+        }\n+    }\n+\n+    /**\n+     * Assert that save a model instance with fields of different types in the SQLite database correctly.\n+     * Then after save succeeds, query it and compare the values against the original model.\n+     *\n+     * @throws DataStoreException On unexpected failure manipulating items in/out of DataStore\n+     */\n+    @Test\n+    public void saveModelWithAllTypesThenQuery() throws DataStoreException {\n+        final Todo todo = createTestTodoModel();\n+        this.adapter.save(todo);\n+\n+        final List<Todo> result = this.adapter.query(Todo.class, Todo.ID.eq(todo.getId()));\n+        assertEquals(result.size(), 1);\n+\n+        final Todo queriedTodo = result.get(0);\n+        assertNotNull(queriedTodo);\n+\n+        // Test common scalar types\n+        assertEquals(queriedTodo.getTitle(), todo.getTitle());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI1MjI3Nw=="}, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwODU4MQ==", "bodyText": "It's per type, the logic is handled in datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java (as of this PR, previously the adapter itself had a few private methods handling (de)serialization)", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r417708581", "createdAt": "2020-04-30T01:42:17Z", "author": {"login": "drochetti"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterModelConverterTest.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.StrictMode;\n+import com.amplifyframework.datastore.storage.SynchronousStorageAdapter;\n+import com.amplifyframework.testmodels.todo.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.todo.Todo;\n+import com.amplifyframework.testmodels.todo.TodoOwner;\n+import com.amplifyframework.testmodels.todo.TodoStatus;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+public final class SQLiteStorageAdapterModelConverterTest {\n+\n+    private static final Date MAY_THE_FOURTH = new Date(1588627200000L);\n+\n+    private SynchronousStorageAdapter adapter;\n+\n+    @BeforeClass\n+    public static void enableStrictMode() {\n+        StrictMode.enable();\n+    }\n+\n+    @Before\n+    public void setup() {\n+        TestStorageAdapter.cleanup();\n+        this.adapter = TestStorageAdapter.create(AmplifyModelProvider.getInstance());\n+    }\n+\n+    @After\n+    public void teardown() {\n+        if (adapter != null) {\n+            TestStorageAdapter.cleanup(adapter);\n+        }\n+    }\n+\n+    /**\n+     * Assert that save a model instance with fields of different types in the SQLite database correctly.\n+     * Then after save succeeds, query it and compare the values against the original model.\n+     *\n+     * @throws DataStoreException On unexpected failure manipulating items in/out of DataStore\n+     */\n+    @Test\n+    public void saveModelWithAllTypesThenQuery() throws DataStoreException {\n+        final Todo todo = createTestTodoModel();\n+        this.adapter.save(todo);\n+\n+        final List<Todo> result = this.adapter.query(Todo.class, Todo.ID.eq(todo.getId()));\n+        assertEquals(result.size(), 1);\n+\n+        final Todo queriedTodo = result.get(0);\n+        assertNotNull(queriedTodo);\n+\n+        // Test common scalar types\n+        assertEquals(queriedTodo.getTitle(), todo.getTitle());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI1MjI3Nw=="}, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjQyOTU4OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwODo0MDoyNVrOGMBK3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwODo0MDoyNVrOGMBK3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI1NTI2Mw==", "bodyText": "Most Java documents in this project are grouping instance variables together tightly, without newlines, right now.", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r415255263", "createdAt": "2020-04-26T08:40:25Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.types.JavaFieldType;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.ModelFieldTypeConverter;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteColumn;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.logging.Logger;\n+\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.sql.Time;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * <code>ModelField</code> value converter for SQLite. It converts from SQLite's <code>Cursor</code>\n+ * to <code>Model</code> properties and from <code>Model</code> properties to values that are\n+ * valid in a <code>SQLiteStatement</code>.\n+ */\n+final class SQLiteModelFieldTypeConverter implements ModelFieldTypeConverter<Cursor, Model> {\n+\n+    private static final Logger LOGGER = Amplify.Logging.forNamespace(\"amplify:aws-datastore:sqliteConverter\");\n+\n+    private final Class<? extends Model> modelType;\n+\n+    private final ModelSchemaRegistry modelSchemaRegistry;\n+\n+    private final Gson gson;\n+\n+    private final Map<String, SQLiteColumn> columns;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjQ0NTc4OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwODo0OToyMlrOGMBSEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMTo0Nzo1MVrOGOW_rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI1NzEwNQ==", "bodyText": "So far, and in the interest of keeping the tag short, all of these just say \"amplify:aws-datastore\", right now. (Well okay, I lied. The integration tests use \"amplify:aws-datastore:test\". This strategy is a little bit different from the ordinary private static final Sting LOG = CurrentClassName.class.getName() that is often used. The thinking was that we could  thinking of logging in a more wholistic way across a module, and then everything under a shared slug would be self-consistent (and also, terse.)", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r415257105", "createdAt": "2020-04-26T08:49:22Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.types.JavaFieldType;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.ModelFieldTypeConverter;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteColumn;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.logging.Logger;\n+\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.sql.Time;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * <code>ModelField</code> value converter for SQLite. It converts from SQLite's <code>Cursor</code>\n+ * to <code>Model</code> properties and from <code>Model</code> properties to values that are\n+ * valid in a <code>SQLiteStatement</code>.\n+ */\n+final class SQLiteModelFieldTypeConverter implements ModelFieldTypeConverter<Cursor, Model> {\n+\n+    private static final Logger LOGGER = Amplify.Logging.forNamespace(\"amplify:aws-datastore:sqliteConverter\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAxMTY3Ng==", "bodyText": "Interesting, I like that approach. Should we add a Amplify.Logging.forCategory(CategoryType.DATASTORE) to help enforce it?", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r416011676", "createdAt": "2020-04-27T17:34:29Z", "author": {"login": "drochetti"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.types.JavaFieldType;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.ModelFieldTypeConverter;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteColumn;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.logging.Logger;\n+\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.sql.Time;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * <code>ModelField</code> value converter for SQLite. It converts from SQLite's <code>Cursor</code>\n+ * to <code>Model</code> properties and from <code>Model</code> properties to values that are\n+ * valid in a <code>SQLiteStatement</code>.\n+ */\n+final class SQLiteModelFieldTypeConverter implements ModelFieldTypeConverter<Cursor, Model> {\n+\n+    private static final Logger LOGGER = Amplify.Logging.forNamespace(\"amplify:aws-datastore:sqliteConverter\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI1NzEwNQ=="}, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE1MDI3Nw==", "bodyText": "That's a great idea!", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r416150277", "createdAt": "2020-04-27T21:08:56Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.types.JavaFieldType;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.ModelFieldTypeConverter;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteColumn;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.logging.Logger;\n+\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.sql.Time;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * <code>ModelField</code> value converter for SQLite. It converts from SQLite's <code>Cursor</code>\n+ * to <code>Model</code> properties and from <code>Model</code> properties to values that are\n+ * valid in a <code>SQLiteStatement</code>.\n+ */\n+final class SQLiteModelFieldTypeConverter implements ModelFieldTypeConverter<Cursor, Model> {\n+\n+    private static final Logger LOGGER = Amplify.Logging.forNamespace(\"amplify:aws-datastore:sqliteConverter\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI1NzEwNQ=="}, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwOTk5OQ==", "bodyText": "Done!", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r417709999", "createdAt": "2020-04-30T01:47:51Z", "author": {"login": "drochetti"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.types.JavaFieldType;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.ModelFieldTypeConverter;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteColumn;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.logging.Logger;\n+\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.sql.Time;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * <code>ModelField</code> value converter for SQLite. It converts from SQLite's <code>Cursor</code>\n+ * to <code>Model</code> properties and from <code>Model</code> properties to values that are\n+ * valid in a <code>SQLiteStatement</code>.\n+ */\n+final class SQLiteModelFieldTypeConverter implements ModelFieldTypeConverter<Cursor, Model> {\n+\n+    private static final Logger LOGGER = Amplify.Logging.forNamespace(\"amplify:aws-datastore:sqliteConverter\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI1NzEwNQ=="}, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjQ0ODY4OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwODo1MToxMlrOGMBTWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNDowMTo1NVrOGOY2-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI1NzQzMg==", "bodyText": "It it possible to catch (AFewSpecific | KnownExceptionTypes conversionFailure) here, as opposed to catch (Exception allPossibleErrors)?", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r415257432", "createdAt": "2020-04-26T08:51:12Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.types.JavaFieldType;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.ModelFieldTypeConverter;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteColumn;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.logging.Logger;\n+\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.sql.Time;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * <code>ModelField</code> value converter for SQLite. It converts from SQLite's <code>Cursor</code>\n+ * to <code>Model</code> properties and from <code>Model</code> properties to values that are\n+ * valid in a <code>SQLiteStatement</code>.\n+ */\n+final class SQLiteModelFieldTypeConverter implements ModelFieldTypeConverter<Cursor, Model> {\n+\n+    private static final Logger LOGGER = Amplify.Logging.forNamespace(\"amplify:aws-datastore:sqliteConverter\");\n+\n+    private final Class<? extends Model> modelType;\n+\n+    private final ModelSchemaRegistry modelSchemaRegistry;\n+\n+    private final Gson gson;\n+\n+    private final Map<String, SQLiteColumn> columns;\n+\n+    SQLiteModelFieldTypeConverter(\n+            @NonNull Class<? extends Model> modelType,\n+            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n+            @NonNull Gson gson\n+    ) {\n+        this.modelSchemaRegistry = Objects.requireNonNull(modelSchemaRegistry);\n+        this.gson = Objects.requireNonNull(gson);\n+        this.modelType = modelType;\n+\n+        // load and store the SQL columns for the modelType\n+        final SQLiteTable sqliteTable = SQLiteTable.fromSchema(\n+                modelSchemaRegistry.getModelSchemaForModelClass(modelType.getSimpleName()));\n+        this.columns = sqliteTable.getColumns();\n+    }\n+\n+    @Override\n+    public Object convertValueFromSource(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+        try {\n+            // Skip if there is no equivalent column for field in object\n+            final SQLiteColumn column = columns.get(field.getName());\n+            if (column == null) {\n+                LOGGER.warn(\"Column with name \" + field.getName() + \" does not exist\");\n+                return null;\n+            }\n+\n+            final String columnName = column.getAliasedName();\n+            final int columnIndex = cursor.getColumnIndexOrThrow(columnName);\n+            // This check is necessary, because primitive values will return 0 even when null\n+            if (cursor.isNull(columnIndex)) {\n+                return null;\n+            }\n+\n+            switch (javaFieldType) {\n+                case STRING:\n+                    return cursor.getString(columnIndex);\n+                case MODEL:\n+                    return convertModelAssociationToTarget(cursor, field);\n+                case ENUM:\n+                case CUSTOM_TYPE:\n+                    return convertCustomTypeToTarget(cursor, field, columnIndex);\n+                case INTEGER:\n+                    return cursor.getInt(columnIndex);\n+                case BOOLEAN:\n+                    return cursor.getInt(columnIndex) != 0;\n+                case FLOAT:\n+                    return cursor.getFloat(columnIndex);\n+                case LONG:\n+                    return cursor.getLong(columnIndex);\n+                case DATE:\n+                    return convertDateToTarget(cursor, field, columnIndex);\n+                case TIME:\n+                    final long timeInLongFormat = cursor.getLong(columnIndex);\n+                    return new Time(timeInLongFormat);\n+                default:\n+                    LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                    return null;\n+            }\n+        } catch (Exception exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE0NzQxMQ==", "bodyText": "I believe I tried but the compiler warned me about API support. Let me double check it.\nDo we have other places in the codebase with multiple exception catch?", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r416147411", "createdAt": "2020-04-27T21:04:15Z", "author": {"login": "drochetti"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.types.JavaFieldType;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.ModelFieldTypeConverter;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteColumn;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.logging.Logger;\n+\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.sql.Time;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * <code>ModelField</code> value converter for SQLite. It converts from SQLite's <code>Cursor</code>\n+ * to <code>Model</code> properties and from <code>Model</code> properties to values that are\n+ * valid in a <code>SQLiteStatement</code>.\n+ */\n+final class SQLiteModelFieldTypeConverter implements ModelFieldTypeConverter<Cursor, Model> {\n+\n+    private static final Logger LOGGER = Amplify.Logging.forNamespace(\"amplify:aws-datastore:sqliteConverter\");\n+\n+    private final Class<? extends Model> modelType;\n+\n+    private final ModelSchemaRegistry modelSchemaRegistry;\n+\n+    private final Gson gson;\n+\n+    private final Map<String, SQLiteColumn> columns;\n+\n+    SQLiteModelFieldTypeConverter(\n+            @NonNull Class<? extends Model> modelType,\n+            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n+            @NonNull Gson gson\n+    ) {\n+        this.modelSchemaRegistry = Objects.requireNonNull(modelSchemaRegistry);\n+        this.gson = Objects.requireNonNull(gson);\n+        this.modelType = modelType;\n+\n+        // load and store the SQL columns for the modelType\n+        final SQLiteTable sqliteTable = SQLiteTable.fromSchema(\n+                modelSchemaRegistry.getModelSchemaForModelClass(modelType.getSimpleName()));\n+        this.columns = sqliteTable.getColumns();\n+    }\n+\n+    @Override\n+    public Object convertValueFromSource(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+        try {\n+            // Skip if there is no equivalent column for field in object\n+            final SQLiteColumn column = columns.get(field.getName());\n+            if (column == null) {\n+                LOGGER.warn(\"Column with name \" + field.getName() + \" does not exist\");\n+                return null;\n+            }\n+\n+            final String columnName = column.getAliasedName();\n+            final int columnIndex = cursor.getColumnIndexOrThrow(columnName);\n+            // This check is necessary, because primitive values will return 0 even when null\n+            if (cursor.isNull(columnIndex)) {\n+                return null;\n+            }\n+\n+            switch (javaFieldType) {\n+                case STRING:\n+                    return cursor.getString(columnIndex);\n+                case MODEL:\n+                    return convertModelAssociationToTarget(cursor, field);\n+                case ENUM:\n+                case CUSTOM_TYPE:\n+                    return convertCustomTypeToTarget(cursor, field, columnIndex);\n+                case INTEGER:\n+                    return cursor.getInt(columnIndex);\n+                case BOOLEAN:\n+                    return cursor.getInt(columnIndex) != 0;\n+                case FLOAT:\n+                    return cursor.getFloat(columnIndex);\n+                case LONG:\n+                    return cursor.getLong(columnIndex);\n+                case DATE:\n+                    return convertDateToTarget(cursor, field, columnIndex);\n+                case TIME:\n+                    final long timeInLongFormat = cursor.getLong(columnIndex);\n+                    return new Time(timeInLongFormat);\n+                default:\n+                    LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                    return null;\n+            }\n+        } catch (Exception exception) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI1NzQzMg=="}, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc0MDUzOQ==", "bodyText": "This \"multi-catch\" be okay in Java 7 and forward. There's got to be some around the code base, no? What was the warning you got from the compiler?", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r417740539", "createdAt": "2020-04-30T04:01:55Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.types.JavaFieldType;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.ModelFieldTypeConverter;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteColumn;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.logging.Logger;\n+\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.sql.Time;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * <code>ModelField</code> value converter for SQLite. It converts from SQLite's <code>Cursor</code>\n+ * to <code>Model</code> properties and from <code>Model</code> properties to values that are\n+ * valid in a <code>SQLiteStatement</code>.\n+ */\n+final class SQLiteModelFieldTypeConverter implements ModelFieldTypeConverter<Cursor, Model> {\n+\n+    private static final Logger LOGGER = Amplify.Logging.forNamespace(\"amplify:aws-datastore:sqliteConverter\");\n+\n+    private final Class<? extends Model> modelType;\n+\n+    private final ModelSchemaRegistry modelSchemaRegistry;\n+\n+    private final Gson gson;\n+\n+    private final Map<String, SQLiteColumn> columns;\n+\n+    SQLiteModelFieldTypeConverter(\n+            @NonNull Class<? extends Model> modelType,\n+            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n+            @NonNull Gson gson\n+    ) {\n+        this.modelSchemaRegistry = Objects.requireNonNull(modelSchemaRegistry);\n+        this.gson = Objects.requireNonNull(gson);\n+        this.modelType = modelType;\n+\n+        // load and store the SQL columns for the modelType\n+        final SQLiteTable sqliteTable = SQLiteTable.fromSchema(\n+                modelSchemaRegistry.getModelSchemaForModelClass(modelType.getSimpleName()));\n+        this.columns = sqliteTable.getColumns();\n+    }\n+\n+    @Override\n+    public Object convertValueFromSource(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+        try {\n+            // Skip if there is no equivalent column for field in object\n+            final SQLiteColumn column = columns.get(field.getName());\n+            if (column == null) {\n+                LOGGER.warn(\"Column with name \" + field.getName() + \" does not exist\");\n+                return null;\n+            }\n+\n+            final String columnName = column.getAliasedName();\n+            final int columnIndex = cursor.getColumnIndexOrThrow(columnName);\n+            // This check is necessary, because primitive values will return 0 even when null\n+            if (cursor.isNull(columnIndex)) {\n+                return null;\n+            }\n+\n+            switch (javaFieldType) {\n+                case STRING:\n+                    return cursor.getString(columnIndex);\n+                case MODEL:\n+                    return convertModelAssociationToTarget(cursor, field);\n+                case ENUM:\n+                case CUSTOM_TYPE:\n+                    return convertCustomTypeToTarget(cursor, field, columnIndex);\n+                case INTEGER:\n+                    return cursor.getInt(columnIndex);\n+                case BOOLEAN:\n+                    return cursor.getInt(columnIndex) != 0;\n+                case FLOAT:\n+                    return cursor.getFloat(columnIndex);\n+                case LONG:\n+                    return cursor.getLong(columnIndex);\n+                case DATE:\n+                    return convertDateToTarget(cursor, field, columnIndex);\n+                case TIME:\n+                    final long timeInLongFormat = cursor.getLong(columnIndex);\n+                    return new Time(timeInLongFormat);\n+                default:\n+                    LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                    return null;\n+            }\n+        } catch (Exception exception) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI1NzQzMg=="}, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjQ1MDg3OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwODo1MjoyMFrOGMBUTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNDowNToxNFrOGOY5_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI1NzY3OQ==", "bodyText": "Hmm. Maybe, check the schema? Or, report a bug to AWS? Or, check the type in the annotation in the model?", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r415257679", "createdAt": "2020-04-26T08:52:20Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.types.JavaFieldType;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.ModelFieldTypeConverter;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteColumn;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.logging.Logger;\n+\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.sql.Time;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * <code>ModelField</code> value converter for SQLite. It converts from SQLite's <code>Cursor</code>\n+ * to <code>Model</code> properties and from <code>Model</code> properties to values that are\n+ * valid in a <code>SQLiteStatement</code>.\n+ */\n+final class SQLiteModelFieldTypeConverter implements ModelFieldTypeConverter<Cursor, Model> {\n+\n+    private static final Logger LOGGER = Amplify.Logging.forNamespace(\"amplify:aws-datastore:sqliteConverter\");\n+\n+    private final Class<? extends Model> modelType;\n+\n+    private final ModelSchemaRegistry modelSchemaRegistry;\n+\n+    private final Gson gson;\n+\n+    private final Map<String, SQLiteColumn> columns;\n+\n+    SQLiteModelFieldTypeConverter(\n+            @NonNull Class<? extends Model> modelType,\n+            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n+            @NonNull Gson gson\n+    ) {\n+        this.modelSchemaRegistry = Objects.requireNonNull(modelSchemaRegistry);\n+        this.gson = Objects.requireNonNull(gson);\n+        this.modelType = modelType;\n+\n+        // load and store the SQL columns for the modelType\n+        final SQLiteTable sqliteTable = SQLiteTable.fromSchema(\n+                modelSchemaRegistry.getModelSchemaForModelClass(modelType.getSimpleName()));\n+        this.columns = sqliteTable.getColumns();\n+    }\n+\n+    @Override\n+    public Object convertValueFromSource(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+        try {\n+            // Skip if there is no equivalent column for field in object\n+            final SQLiteColumn column = columns.get(field.getName());\n+            if (column == null) {\n+                LOGGER.warn(\"Column with name \" + field.getName() + \" does not exist\");\n+                return null;\n+            }\n+\n+            final String columnName = column.getAliasedName();\n+            final int columnIndex = cursor.getColumnIndexOrThrow(columnName);\n+            // This check is necessary, because primitive values will return 0 even when null\n+            if (cursor.isNull(columnIndex)) {\n+                return null;\n+            }\n+\n+            switch (javaFieldType) {\n+                case STRING:\n+                    return cursor.getString(columnIndex);\n+                case MODEL:\n+                    return convertModelAssociationToTarget(cursor, field);\n+                case ENUM:\n+                case CUSTOM_TYPE:\n+                    return convertCustomTypeToTarget(cursor, field, columnIndex);\n+                case INTEGER:\n+                    return cursor.getInt(columnIndex);\n+                case BOOLEAN:\n+                    return cursor.getInt(columnIndex) != 0;\n+                case FLOAT:\n+                    return cursor.getFloat(columnIndex);\n+                case LONG:\n+                    return cursor.getLong(columnIndex);\n+                case DATE:\n+                    return convertDateToTarget(cursor, field, columnIndex);\n+                case TIME:\n+                    final long timeInLongFormat = cursor.getLong(columnIndex);\n+                    return new Time(timeInLongFormat);\n+                default:\n+                    LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                    return null;\n+            }\n+        } catch (Exception exception) {\n+            throw new DataStoreException(\n+                    \"Error converting field \" + field.getName() + \" from \" + modelType.getName(),\n+                    exception,\n+                    AmplifyException.TODO_RECOVERY_SUGGESTION", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcwOTk1OA==", "bodyText": "I added something similar to what we have on iOS to the Amplify Android: https://github.com/aws-amplify/amplify-ios/blob/master/Amplify/Core/Support/AmplifyErrorMessages.swift#L10\nBasically a default suggestion when the exception might be originated from potential bugs and/or programming mistakes. Let me know what you think.", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r417709958", "createdAt": "2020-04-30T01:47:39Z", "author": {"login": "drochetti"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.types.JavaFieldType;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.ModelFieldTypeConverter;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteColumn;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.logging.Logger;\n+\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.sql.Time;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * <code>ModelField</code> value converter for SQLite. It converts from SQLite's <code>Cursor</code>\n+ * to <code>Model</code> properties and from <code>Model</code> properties to values that are\n+ * valid in a <code>SQLiteStatement</code>.\n+ */\n+final class SQLiteModelFieldTypeConverter implements ModelFieldTypeConverter<Cursor, Model> {\n+\n+    private static final Logger LOGGER = Amplify.Logging.forNamespace(\"amplify:aws-datastore:sqliteConverter\");\n+\n+    private final Class<? extends Model> modelType;\n+\n+    private final ModelSchemaRegistry modelSchemaRegistry;\n+\n+    private final Gson gson;\n+\n+    private final Map<String, SQLiteColumn> columns;\n+\n+    SQLiteModelFieldTypeConverter(\n+            @NonNull Class<? extends Model> modelType,\n+            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n+            @NonNull Gson gson\n+    ) {\n+        this.modelSchemaRegistry = Objects.requireNonNull(modelSchemaRegistry);\n+        this.gson = Objects.requireNonNull(gson);\n+        this.modelType = modelType;\n+\n+        // load and store the SQL columns for the modelType\n+        final SQLiteTable sqliteTable = SQLiteTable.fromSchema(\n+                modelSchemaRegistry.getModelSchemaForModelClass(modelType.getSimpleName()));\n+        this.columns = sqliteTable.getColumns();\n+    }\n+\n+    @Override\n+    public Object convertValueFromSource(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+        try {\n+            // Skip if there is no equivalent column for field in object\n+            final SQLiteColumn column = columns.get(field.getName());\n+            if (column == null) {\n+                LOGGER.warn(\"Column with name \" + field.getName() + \" does not exist\");\n+                return null;\n+            }\n+\n+            final String columnName = column.getAliasedName();\n+            final int columnIndex = cursor.getColumnIndexOrThrow(columnName);\n+            // This check is necessary, because primitive values will return 0 even when null\n+            if (cursor.isNull(columnIndex)) {\n+                return null;\n+            }\n+\n+            switch (javaFieldType) {\n+                case STRING:\n+                    return cursor.getString(columnIndex);\n+                case MODEL:\n+                    return convertModelAssociationToTarget(cursor, field);\n+                case ENUM:\n+                case CUSTOM_TYPE:\n+                    return convertCustomTypeToTarget(cursor, field, columnIndex);\n+                case INTEGER:\n+                    return cursor.getInt(columnIndex);\n+                case BOOLEAN:\n+                    return cursor.getInt(columnIndex) != 0;\n+                case FLOAT:\n+                    return cursor.getFloat(columnIndex);\n+                case LONG:\n+                    return cursor.getLong(columnIndex);\n+                case DATE:\n+                    return convertDateToTarget(cursor, field, columnIndex);\n+                case TIME:\n+                    final long timeInLongFormat = cursor.getLong(columnIndex);\n+                    return new Time(timeInLongFormat);\n+                default:\n+                    LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                    return null;\n+            }\n+        } catch (Exception exception) {\n+            throw new DataStoreException(\n+                    \"Error converting field \" + field.getName() + \" from \" + modelType.getName(),\n+                    exception,\n+                    AmplifyException.TODO_RECOVERY_SUGGESTION", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI1NzY3OQ=="}, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc0MTMxMA==", "bodyText": "Yea! I like that as a default. Looks good. Also, that Swift syntax file: StaticString = #file was new to me.", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r417741310", "createdAt": "2020-04-30T04:05:14Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.types.JavaFieldType;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.ModelFieldTypeConverter;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteColumn;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.logging.Logger;\n+\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.sql.Time;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * <code>ModelField</code> value converter for SQLite. It converts from SQLite's <code>Cursor</code>\n+ * to <code>Model</code> properties and from <code>Model</code> properties to values that are\n+ * valid in a <code>SQLiteStatement</code>.\n+ */\n+final class SQLiteModelFieldTypeConverter implements ModelFieldTypeConverter<Cursor, Model> {\n+\n+    private static final Logger LOGGER = Amplify.Logging.forNamespace(\"amplify:aws-datastore:sqliteConverter\");\n+\n+    private final Class<? extends Model> modelType;\n+\n+    private final ModelSchemaRegistry modelSchemaRegistry;\n+\n+    private final Gson gson;\n+\n+    private final Map<String, SQLiteColumn> columns;\n+\n+    SQLiteModelFieldTypeConverter(\n+            @NonNull Class<? extends Model> modelType,\n+            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n+            @NonNull Gson gson\n+    ) {\n+        this.modelSchemaRegistry = Objects.requireNonNull(modelSchemaRegistry);\n+        this.gson = Objects.requireNonNull(gson);\n+        this.modelType = modelType;\n+\n+        // load and store the SQL columns for the modelType\n+        final SQLiteTable sqliteTable = SQLiteTable.fromSchema(\n+                modelSchemaRegistry.getModelSchemaForModelClass(modelType.getSimpleName()));\n+        this.columns = sqliteTable.getColumns();\n+    }\n+\n+    @Override\n+    public Object convertValueFromSource(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+        try {\n+            // Skip if there is no equivalent column for field in object\n+            final SQLiteColumn column = columns.get(field.getName());\n+            if (column == null) {\n+                LOGGER.warn(\"Column with name \" + field.getName() + \" does not exist\");\n+                return null;\n+            }\n+\n+            final String columnName = column.getAliasedName();\n+            final int columnIndex = cursor.getColumnIndexOrThrow(columnName);\n+            // This check is necessary, because primitive values will return 0 even when null\n+            if (cursor.isNull(columnIndex)) {\n+                return null;\n+            }\n+\n+            switch (javaFieldType) {\n+                case STRING:\n+                    return cursor.getString(columnIndex);\n+                case MODEL:\n+                    return convertModelAssociationToTarget(cursor, field);\n+                case ENUM:\n+                case CUSTOM_TYPE:\n+                    return convertCustomTypeToTarget(cursor, field, columnIndex);\n+                case INTEGER:\n+                    return cursor.getInt(columnIndex);\n+                case BOOLEAN:\n+                    return cursor.getInt(columnIndex) != 0;\n+                case FLOAT:\n+                    return cursor.getFloat(columnIndex);\n+                case LONG:\n+                    return cursor.getLong(columnIndex);\n+                case DATE:\n+                    return convertDateToTarget(cursor, field, columnIndex);\n+                case TIME:\n+                    final long timeInLongFormat = cursor.getLong(columnIndex);\n+                    return new Time(timeInLongFormat);\n+                default:\n+                    LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                    return null;\n+            }\n+        } catch (Exception exception) {\n+            throw new DataStoreException(\n+                    \"Error converting field \" + field.getName() + \" from \" + modelType.getName(),\n+                    exception,\n+                    AmplifyException.TODO_RECOVERY_SUGGESTION", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI1NzY3OQ=="}, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjQ2MzkyOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwOTowMDoyN1rOGMBaeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzozNzoxNlrOGOUwbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI1OTI1OA==", "bodyText": "What do you think about gson.toJson(fieldValue) as a default?", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r415259258", "createdAt": "2020-04-26T09:00:27Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.types.JavaFieldType;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.ModelFieldTypeConverter;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteColumn;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.logging.Logger;\n+\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.sql.Time;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * <code>ModelField</code> value converter for SQLite. It converts from SQLite's <code>Cursor</code>\n+ * to <code>Model</code> properties and from <code>Model</code> properties to values that are\n+ * valid in a <code>SQLiteStatement</code>.\n+ */\n+final class SQLiteModelFieldTypeConverter implements ModelFieldTypeConverter<Cursor, Model> {\n+\n+    private static final Logger LOGGER = Amplify.Logging.forNamespace(\"amplify:aws-datastore:sqliteConverter\");\n+\n+    private final Class<? extends Model> modelType;\n+\n+    private final ModelSchemaRegistry modelSchemaRegistry;\n+\n+    private final Gson gson;\n+\n+    private final Map<String, SQLiteColumn> columns;\n+\n+    SQLiteModelFieldTypeConverter(\n+            @NonNull Class<? extends Model> modelType,\n+            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n+            @NonNull Gson gson\n+    ) {\n+        this.modelSchemaRegistry = Objects.requireNonNull(modelSchemaRegistry);\n+        this.gson = Objects.requireNonNull(gson);\n+        this.modelType = modelType;\n+\n+        // load and store the SQL columns for the modelType\n+        final SQLiteTable sqliteTable = SQLiteTable.fromSchema(\n+                modelSchemaRegistry.getModelSchemaForModelClass(modelType.getSimpleName()));\n+        this.columns = sqliteTable.getColumns();\n+    }\n+\n+    @Override\n+    public Object convertValueFromSource(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+        try {\n+            // Skip if there is no equivalent column for field in object\n+            final SQLiteColumn column = columns.get(field.getName());\n+            if (column == null) {\n+                LOGGER.warn(\"Column with name \" + field.getName() + \" does not exist\");\n+                return null;\n+            }\n+\n+            final String columnName = column.getAliasedName();\n+            final int columnIndex = cursor.getColumnIndexOrThrow(columnName);\n+            // This check is necessary, because primitive values will return 0 even when null\n+            if (cursor.isNull(columnIndex)) {\n+                return null;\n+            }\n+\n+            switch (javaFieldType) {\n+                case STRING:\n+                    return cursor.getString(columnIndex);\n+                case MODEL:\n+                    return convertModelAssociationToTarget(cursor, field);\n+                case ENUM:\n+                case CUSTOM_TYPE:\n+                    return convertCustomTypeToTarget(cursor, field, columnIndex);\n+                case INTEGER:\n+                    return cursor.getInt(columnIndex);\n+                case BOOLEAN:\n+                    return cursor.getInt(columnIndex) != 0;\n+                case FLOAT:\n+                    return cursor.getFloat(columnIndex);\n+                case LONG:\n+                    return cursor.getLong(columnIndex);\n+                case DATE:\n+                    return convertDateToTarget(cursor, field, columnIndex);\n+                case TIME:\n+                    final long timeInLongFormat = cursor.getLong(columnIndex);\n+                    return new Time(timeInLongFormat);\n+                default:\n+                    LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                    return null;\n+            }\n+        } catch (Exception exception) {\n+            throw new DataStoreException(\n+                    \"Error converting field \" + field.getName() + \" from \" + modelType.getName(),\n+                    exception,\n+                    AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+    }\n+\n+    private Object convertModelAssociationToTarget(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        // Eager load model if the necessary columns are present inside the cursor.\n+        // At the time of implementation, cursor should have been joined with these\n+        // columns IF AND ONLY IF the model is a foreign key to the inner model.\n+        // value has Class<?>, but we want Class<? extends Model>\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends Model> nestedModelType = (Class<? extends Model>) field.getType();\n+        String className = nestedModelType.getSimpleName();\n+        ModelSchema innerModelSchema = modelSchemaRegistry.getModelSchemaForModelClass(className);\n+\n+        SQLiteModelFieldTypeConverter nestedModelConverter =\n+                new SQLiteModelFieldTypeConverter(nestedModelType, modelSchemaRegistry, gson);\n+\n+        Map<String, Object> mapForInnerModel = new HashMap<>();\n+        for (Map.Entry<String, ModelField> entry : innerModelSchema.getFields().entrySet()) {\n+            mapForInnerModel.put(entry.getKey(), nestedModelConverter.convertValueFromSource(cursor, entry.getValue()));\n+        }\n+        final String modelInJsonFormat = gson.toJson(mapForInnerModel);\n+        try {\n+            return gson.getAdapter(nestedModelType).fromJson(modelInJsonFormat);\n+        } catch (IOException exception) {\n+            LOGGER.warn(\"\", exception);\n+            return null;\n+        }\n+    }\n+\n+    private Object convertCustomTypeToTarget(Cursor cursor, ModelField field, int columnIndex) throws IOException {\n+        final String stringValue = cursor.getString(columnIndex);\n+        return gson.getAdapter(field.getType()).fromJson(stringValue);\n+    }\n+\n+    private Object convertDateToTarget(Cursor cursor, ModelField field, int columnIndex) throws ParseException {\n+        // TODO wire up the new Date/Time handling here\n+        final String dateInStringFormat = cursor.getString(columnIndex);\n+        if (dateInStringFormat != null) {\n+            return SimpleDateFormat\n+                    .getDateInstance()\n+                    .parse(dateInStringFormat);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Object convertValueFromTarget(Model model, ModelField field) throws DataStoreException {\n+        final String fieldName = field.getName();\n+\n+        final Object fieldValue = getModelValue(model, fieldName);\n+        if (fieldValue == null) {\n+            return null;\n+        }\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+\n+        switch (javaFieldType) {\n+            case INTEGER:\n+            case LONG:\n+            case FLOAT:\n+            case STRING:\n+                // these types require no special treatment\n+                return fieldValue;\n+            case BOOLEAN:\n+                boolean booleanValue = (boolean) fieldValue;\n+                return booleanValue ? 1L : 0L;\n+            case MODEL:\n+                return ((Model) fieldValue).getId();\n+            case ENUM:\n+            case CUSTOM_TYPE:\n+                return gson.toJson(fieldValue);\n+            case DATE:\n+                // TODO integrate with new Date/Time handling\n+                final Date dateValue = (Date) fieldValue;\n+                return SimpleDateFormat\n+                        .getDateInstance()\n+                        .format(dateValue);\n+            case TIME:\n+                return ((Time) fieldValue).getTime();\n+            default:\n+                LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAxMjgxOA==", "bodyText": "I think that's a good idea, as long as we keep the warn", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r416012818", "createdAt": "2020-04-27T17:36:06Z", "author": {"login": "drochetti"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.types.JavaFieldType;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.ModelFieldTypeConverter;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteColumn;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.logging.Logger;\n+\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.sql.Time;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * <code>ModelField</code> value converter for SQLite. It converts from SQLite's <code>Cursor</code>\n+ * to <code>Model</code> properties and from <code>Model</code> properties to values that are\n+ * valid in a <code>SQLiteStatement</code>.\n+ */\n+final class SQLiteModelFieldTypeConverter implements ModelFieldTypeConverter<Cursor, Model> {\n+\n+    private static final Logger LOGGER = Amplify.Logging.forNamespace(\"amplify:aws-datastore:sqliteConverter\");\n+\n+    private final Class<? extends Model> modelType;\n+\n+    private final ModelSchemaRegistry modelSchemaRegistry;\n+\n+    private final Gson gson;\n+\n+    private final Map<String, SQLiteColumn> columns;\n+\n+    SQLiteModelFieldTypeConverter(\n+            @NonNull Class<? extends Model> modelType,\n+            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n+            @NonNull Gson gson\n+    ) {\n+        this.modelSchemaRegistry = Objects.requireNonNull(modelSchemaRegistry);\n+        this.gson = Objects.requireNonNull(gson);\n+        this.modelType = modelType;\n+\n+        // load and store the SQL columns for the modelType\n+        final SQLiteTable sqliteTable = SQLiteTable.fromSchema(\n+                modelSchemaRegistry.getModelSchemaForModelClass(modelType.getSimpleName()));\n+        this.columns = sqliteTable.getColumns();\n+    }\n+\n+    @Override\n+    public Object convertValueFromSource(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+        try {\n+            // Skip if there is no equivalent column for field in object\n+            final SQLiteColumn column = columns.get(field.getName());\n+            if (column == null) {\n+                LOGGER.warn(\"Column with name \" + field.getName() + \" does not exist\");\n+                return null;\n+            }\n+\n+            final String columnName = column.getAliasedName();\n+            final int columnIndex = cursor.getColumnIndexOrThrow(columnName);\n+            // This check is necessary, because primitive values will return 0 even when null\n+            if (cursor.isNull(columnIndex)) {\n+                return null;\n+            }\n+\n+            switch (javaFieldType) {\n+                case STRING:\n+                    return cursor.getString(columnIndex);\n+                case MODEL:\n+                    return convertModelAssociationToTarget(cursor, field);\n+                case ENUM:\n+                case CUSTOM_TYPE:\n+                    return convertCustomTypeToTarget(cursor, field, columnIndex);\n+                case INTEGER:\n+                    return cursor.getInt(columnIndex);\n+                case BOOLEAN:\n+                    return cursor.getInt(columnIndex) != 0;\n+                case FLOAT:\n+                    return cursor.getFloat(columnIndex);\n+                case LONG:\n+                    return cursor.getLong(columnIndex);\n+                case DATE:\n+                    return convertDateToTarget(cursor, field, columnIndex);\n+                case TIME:\n+                    final long timeInLongFormat = cursor.getLong(columnIndex);\n+                    return new Time(timeInLongFormat);\n+                default:\n+                    LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                    return null;\n+            }\n+        } catch (Exception exception) {\n+            throw new DataStoreException(\n+                    \"Error converting field \" + field.getName() + \" from \" + modelType.getName(),\n+                    exception,\n+                    AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+    }\n+\n+    private Object convertModelAssociationToTarget(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        // Eager load model if the necessary columns are present inside the cursor.\n+        // At the time of implementation, cursor should have been joined with these\n+        // columns IF AND ONLY IF the model is a foreign key to the inner model.\n+        // value has Class<?>, but we want Class<? extends Model>\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends Model> nestedModelType = (Class<? extends Model>) field.getType();\n+        String className = nestedModelType.getSimpleName();\n+        ModelSchema innerModelSchema = modelSchemaRegistry.getModelSchemaForModelClass(className);\n+\n+        SQLiteModelFieldTypeConverter nestedModelConverter =\n+                new SQLiteModelFieldTypeConverter(nestedModelType, modelSchemaRegistry, gson);\n+\n+        Map<String, Object> mapForInnerModel = new HashMap<>();\n+        for (Map.Entry<String, ModelField> entry : innerModelSchema.getFields().entrySet()) {\n+            mapForInnerModel.put(entry.getKey(), nestedModelConverter.convertValueFromSource(cursor, entry.getValue()));\n+        }\n+        final String modelInJsonFormat = gson.toJson(mapForInnerModel);\n+        try {\n+            return gson.getAdapter(nestedModelType).fromJson(modelInJsonFormat);\n+        } catch (IOException exception) {\n+            LOGGER.warn(\"\", exception);\n+            return null;\n+        }\n+    }\n+\n+    private Object convertCustomTypeToTarget(Cursor cursor, ModelField field, int columnIndex) throws IOException {\n+        final String stringValue = cursor.getString(columnIndex);\n+        return gson.getAdapter(field.getType()).fromJson(stringValue);\n+    }\n+\n+    private Object convertDateToTarget(Cursor cursor, ModelField field, int columnIndex) throws ParseException {\n+        // TODO wire up the new Date/Time handling here\n+        final String dateInStringFormat = cursor.getString(columnIndex);\n+        if (dateInStringFormat != null) {\n+            return SimpleDateFormat\n+                    .getDateInstance()\n+                    .parse(dateInStringFormat);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Object convertValueFromTarget(Model model, ModelField field) throws DataStoreException {\n+        final String fieldName = field.getName();\n+\n+        final Object fieldValue = getModelValue(model, fieldName);\n+        if (fieldValue == null) {\n+            return null;\n+        }\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+\n+        switch (javaFieldType) {\n+            case INTEGER:\n+            case LONG:\n+            case FLOAT:\n+            case STRING:\n+                // these types require no special treatment\n+                return fieldValue;\n+            case BOOLEAN:\n+                boolean booleanValue = (boolean) fieldValue;\n+                return booleanValue ? 1L : 0L;\n+            case MODEL:\n+                return ((Model) fieldValue).getId();\n+            case ENUM:\n+            case CUSTOM_TYPE:\n+                return gson.toJson(fieldValue);\n+            case DATE:\n+                // TODO integrate with new Date/Time handling\n+                final Date dateValue = (Date) fieldValue;\n+                return SimpleDateFormat\n+                        .getDateInstance()\n+                        .format(dateValue);\n+            case TIME:\n+                return ((Time) fieldValue).getTime();\n+            default:\n+                LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI1OTI1OA=="}, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY1MzIwNQ==", "bodyText": "I gave this some thought after a few tests and would like your opinion.\nI believe we should fallback to null due to backward compatibility.\nWhen the code reaches that default it means that a field type we should support is not correctly supported (i.e. we did not exhaust the enum). If we assume JSON, when that's fixed we are at risk of breaking backward compatibility with existing data in case the correct format isn't the same as the one produced by the toJson()/fromJson() call.\nDoes that make sense? Thoughts?", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r417653205", "createdAt": "2020-04-29T22:37:37Z", "author": {"login": "drochetti"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.types.JavaFieldType;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.ModelFieldTypeConverter;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteColumn;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.logging.Logger;\n+\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.sql.Time;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * <code>ModelField</code> value converter for SQLite. It converts from SQLite's <code>Cursor</code>\n+ * to <code>Model</code> properties and from <code>Model</code> properties to values that are\n+ * valid in a <code>SQLiteStatement</code>.\n+ */\n+final class SQLiteModelFieldTypeConverter implements ModelFieldTypeConverter<Cursor, Model> {\n+\n+    private static final Logger LOGGER = Amplify.Logging.forNamespace(\"amplify:aws-datastore:sqliteConverter\");\n+\n+    private final Class<? extends Model> modelType;\n+\n+    private final ModelSchemaRegistry modelSchemaRegistry;\n+\n+    private final Gson gson;\n+\n+    private final Map<String, SQLiteColumn> columns;\n+\n+    SQLiteModelFieldTypeConverter(\n+            @NonNull Class<? extends Model> modelType,\n+            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n+            @NonNull Gson gson\n+    ) {\n+        this.modelSchemaRegistry = Objects.requireNonNull(modelSchemaRegistry);\n+        this.gson = Objects.requireNonNull(gson);\n+        this.modelType = modelType;\n+\n+        // load and store the SQL columns for the modelType\n+        final SQLiteTable sqliteTable = SQLiteTable.fromSchema(\n+                modelSchemaRegistry.getModelSchemaForModelClass(modelType.getSimpleName()));\n+        this.columns = sqliteTable.getColumns();\n+    }\n+\n+    @Override\n+    public Object convertValueFromSource(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+        try {\n+            // Skip if there is no equivalent column for field in object\n+            final SQLiteColumn column = columns.get(field.getName());\n+            if (column == null) {\n+                LOGGER.warn(\"Column with name \" + field.getName() + \" does not exist\");\n+                return null;\n+            }\n+\n+            final String columnName = column.getAliasedName();\n+            final int columnIndex = cursor.getColumnIndexOrThrow(columnName);\n+            // This check is necessary, because primitive values will return 0 even when null\n+            if (cursor.isNull(columnIndex)) {\n+                return null;\n+            }\n+\n+            switch (javaFieldType) {\n+                case STRING:\n+                    return cursor.getString(columnIndex);\n+                case MODEL:\n+                    return convertModelAssociationToTarget(cursor, field);\n+                case ENUM:\n+                case CUSTOM_TYPE:\n+                    return convertCustomTypeToTarget(cursor, field, columnIndex);\n+                case INTEGER:\n+                    return cursor.getInt(columnIndex);\n+                case BOOLEAN:\n+                    return cursor.getInt(columnIndex) != 0;\n+                case FLOAT:\n+                    return cursor.getFloat(columnIndex);\n+                case LONG:\n+                    return cursor.getLong(columnIndex);\n+                case DATE:\n+                    return convertDateToTarget(cursor, field, columnIndex);\n+                case TIME:\n+                    final long timeInLongFormat = cursor.getLong(columnIndex);\n+                    return new Time(timeInLongFormat);\n+                default:\n+                    LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                    return null;\n+            }\n+        } catch (Exception exception) {\n+            throw new DataStoreException(\n+                    \"Error converting field \" + field.getName() + \" from \" + modelType.getName(),\n+                    exception,\n+                    AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+    }\n+\n+    private Object convertModelAssociationToTarget(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        // Eager load model if the necessary columns are present inside the cursor.\n+        // At the time of implementation, cursor should have been joined with these\n+        // columns IF AND ONLY IF the model is a foreign key to the inner model.\n+        // value has Class<?>, but we want Class<? extends Model>\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends Model> nestedModelType = (Class<? extends Model>) field.getType();\n+        String className = nestedModelType.getSimpleName();\n+        ModelSchema innerModelSchema = modelSchemaRegistry.getModelSchemaForModelClass(className);\n+\n+        SQLiteModelFieldTypeConverter nestedModelConverter =\n+                new SQLiteModelFieldTypeConverter(nestedModelType, modelSchemaRegistry, gson);\n+\n+        Map<String, Object> mapForInnerModel = new HashMap<>();\n+        for (Map.Entry<String, ModelField> entry : innerModelSchema.getFields().entrySet()) {\n+            mapForInnerModel.put(entry.getKey(), nestedModelConverter.convertValueFromSource(cursor, entry.getValue()));\n+        }\n+        final String modelInJsonFormat = gson.toJson(mapForInnerModel);\n+        try {\n+            return gson.getAdapter(nestedModelType).fromJson(modelInJsonFormat);\n+        } catch (IOException exception) {\n+            LOGGER.warn(\"\", exception);\n+            return null;\n+        }\n+    }\n+\n+    private Object convertCustomTypeToTarget(Cursor cursor, ModelField field, int columnIndex) throws IOException {\n+        final String stringValue = cursor.getString(columnIndex);\n+        return gson.getAdapter(field.getType()).fromJson(stringValue);\n+    }\n+\n+    private Object convertDateToTarget(Cursor cursor, ModelField field, int columnIndex) throws ParseException {\n+        // TODO wire up the new Date/Time handling here\n+        final String dateInStringFormat = cursor.getString(columnIndex);\n+        if (dateInStringFormat != null) {\n+            return SimpleDateFormat\n+                    .getDateInstance()\n+                    .parse(dateInStringFormat);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Object convertValueFromTarget(Model model, ModelField field) throws DataStoreException {\n+        final String fieldName = field.getName();\n+\n+        final Object fieldValue = getModelValue(model, fieldName);\n+        if (fieldValue == null) {\n+            return null;\n+        }\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+\n+        switch (javaFieldType) {\n+            case INTEGER:\n+            case LONG:\n+            case FLOAT:\n+            case STRING:\n+                // these types require no special treatment\n+                return fieldValue;\n+            case BOOLEAN:\n+                boolean booleanValue = (boolean) fieldValue;\n+                return booleanValue ? 1L : 0L;\n+            case MODEL:\n+                return ((Model) fieldValue).getId();\n+            case ENUM:\n+            case CUSTOM_TYPE:\n+                return gson.toJson(fieldValue);\n+            case DATE:\n+                // TODO integrate with new Date/Time handling\n+                final Date dateValue = (Date) fieldValue;\n+                return SimpleDateFormat\n+                        .getDateInstance()\n+                        .format(dateValue);\n+            case TIME:\n+                return ((Time) fieldValue).getTime();\n+            default:\n+                LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI1OTI1OA=="}, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY3MzMyNA==", "bodyText": "Ah, yea I get what you're saying. Makes sense. null sounds safer.", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r417673324", "createdAt": "2020-04-29T23:37:16Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.types.JavaFieldType;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.ModelFieldTypeConverter;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteColumn;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.logging.Logger;\n+\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.sql.Time;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * <code>ModelField</code> value converter for SQLite. It converts from SQLite's <code>Cursor</code>\n+ * to <code>Model</code> properties and from <code>Model</code> properties to values that are\n+ * valid in a <code>SQLiteStatement</code>.\n+ */\n+final class SQLiteModelFieldTypeConverter implements ModelFieldTypeConverter<Cursor, Model> {\n+\n+    private static final Logger LOGGER = Amplify.Logging.forNamespace(\"amplify:aws-datastore:sqliteConverter\");\n+\n+    private final Class<? extends Model> modelType;\n+\n+    private final ModelSchemaRegistry modelSchemaRegistry;\n+\n+    private final Gson gson;\n+\n+    private final Map<String, SQLiteColumn> columns;\n+\n+    SQLiteModelFieldTypeConverter(\n+            @NonNull Class<? extends Model> modelType,\n+            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n+            @NonNull Gson gson\n+    ) {\n+        this.modelSchemaRegistry = Objects.requireNonNull(modelSchemaRegistry);\n+        this.gson = Objects.requireNonNull(gson);\n+        this.modelType = modelType;\n+\n+        // load and store the SQL columns for the modelType\n+        final SQLiteTable sqliteTable = SQLiteTable.fromSchema(\n+                modelSchemaRegistry.getModelSchemaForModelClass(modelType.getSimpleName()));\n+        this.columns = sqliteTable.getColumns();\n+    }\n+\n+    @Override\n+    public Object convertValueFromSource(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+        try {\n+            // Skip if there is no equivalent column for field in object\n+            final SQLiteColumn column = columns.get(field.getName());\n+            if (column == null) {\n+                LOGGER.warn(\"Column with name \" + field.getName() + \" does not exist\");\n+                return null;\n+            }\n+\n+            final String columnName = column.getAliasedName();\n+            final int columnIndex = cursor.getColumnIndexOrThrow(columnName);\n+            // This check is necessary, because primitive values will return 0 even when null\n+            if (cursor.isNull(columnIndex)) {\n+                return null;\n+            }\n+\n+            switch (javaFieldType) {\n+                case STRING:\n+                    return cursor.getString(columnIndex);\n+                case MODEL:\n+                    return convertModelAssociationToTarget(cursor, field);\n+                case ENUM:\n+                case CUSTOM_TYPE:\n+                    return convertCustomTypeToTarget(cursor, field, columnIndex);\n+                case INTEGER:\n+                    return cursor.getInt(columnIndex);\n+                case BOOLEAN:\n+                    return cursor.getInt(columnIndex) != 0;\n+                case FLOAT:\n+                    return cursor.getFloat(columnIndex);\n+                case LONG:\n+                    return cursor.getLong(columnIndex);\n+                case DATE:\n+                    return convertDateToTarget(cursor, field, columnIndex);\n+                case TIME:\n+                    final long timeInLongFormat = cursor.getLong(columnIndex);\n+                    return new Time(timeInLongFormat);\n+                default:\n+                    LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                    return null;\n+            }\n+        } catch (Exception exception) {\n+            throw new DataStoreException(\n+                    \"Error converting field \" + field.getName() + \" from \" + modelType.getName(),\n+                    exception,\n+                    AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+    }\n+\n+    private Object convertModelAssociationToTarget(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        // Eager load model if the necessary columns are present inside the cursor.\n+        // At the time of implementation, cursor should have been joined with these\n+        // columns IF AND ONLY IF the model is a foreign key to the inner model.\n+        // value has Class<?>, but we want Class<? extends Model>\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends Model> nestedModelType = (Class<? extends Model>) field.getType();\n+        String className = nestedModelType.getSimpleName();\n+        ModelSchema innerModelSchema = modelSchemaRegistry.getModelSchemaForModelClass(className);\n+\n+        SQLiteModelFieldTypeConverter nestedModelConverter =\n+                new SQLiteModelFieldTypeConverter(nestedModelType, modelSchemaRegistry, gson);\n+\n+        Map<String, Object> mapForInnerModel = new HashMap<>();\n+        for (Map.Entry<String, ModelField> entry : innerModelSchema.getFields().entrySet()) {\n+            mapForInnerModel.put(entry.getKey(), nestedModelConverter.convertValueFromSource(cursor, entry.getValue()));\n+        }\n+        final String modelInJsonFormat = gson.toJson(mapForInnerModel);\n+        try {\n+            return gson.getAdapter(nestedModelType).fromJson(modelInJsonFormat);\n+        } catch (IOException exception) {\n+            LOGGER.warn(\"\", exception);\n+            return null;\n+        }\n+    }\n+\n+    private Object convertCustomTypeToTarget(Cursor cursor, ModelField field, int columnIndex) throws IOException {\n+        final String stringValue = cursor.getString(columnIndex);\n+        return gson.getAdapter(field.getType()).fromJson(stringValue);\n+    }\n+\n+    private Object convertDateToTarget(Cursor cursor, ModelField field, int columnIndex) throws ParseException {\n+        // TODO wire up the new Date/Time handling here\n+        final String dateInStringFormat = cursor.getString(columnIndex);\n+        if (dateInStringFormat != null) {\n+            return SimpleDateFormat\n+                    .getDateInstance()\n+                    .parse(dateInStringFormat);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Object convertValueFromTarget(Model model, ModelField field) throws DataStoreException {\n+        final String fieldName = field.getName();\n+\n+        final Object fieldValue = getModelValue(model, fieldName);\n+        if (fieldValue == null) {\n+            return null;\n+        }\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+\n+        switch (javaFieldType) {\n+            case INTEGER:\n+            case LONG:\n+            case FLOAT:\n+            case STRING:\n+                // these types require no special treatment\n+                return fieldValue;\n+            case BOOLEAN:\n+                boolean booleanValue = (boolean) fieldValue;\n+                return booleanValue ? 1L : 0L;\n+            case MODEL:\n+                return ((Model) fieldValue).getId();\n+            case ENUM:\n+            case CUSTOM_TYPE:\n+                return gson.toJson(fieldValue);\n+            case DATE:\n+                // TODO integrate with new Date/Time handling\n+                final Date dateValue = (Date) fieldValue;\n+                return SimpleDateFormat\n+                        .getDateInstance()\n+                        .format(dateValue);\n+            case TIME:\n+                return ((Time) fieldValue).getTime();\n+            default:\n+                LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI1OTI1OA=="}, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjQ3NzQ1OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwOTowODoyM1rOGMBglg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMzozNjoxNlrOGOUvLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI2MDgyMg==", "bodyText": "If we assume that models only come from the code-generator, it might be over-kill to fall back on field inspection, here.\nIn practice, there's a whole set of expectations our code base has about M extends Model type classes. The interface says they need a method called getId(), but in reality, we have all of the (currently required) annotations, etc. Should we just assume they have getter methods? Or if we do the field access thing, should we respect the private access of the field? (I guess, tools like GSON don't, they just read the private field ...)\nAs a note on construction - can we avoid nesting the try/catch in a try/catch here?\nMaybe the flow could be like:\ntry {\n   return favorableApproach();\n} catch (DidntPanOutException favorableDidntWork) {\n    // ...\n}\ntry {\n    return fallbackApprach();\n} catch (FlalbackException alsoDidntWork) {\n    // ...\n}\n\n?", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r415260822", "createdAt": "2020-04-26T09:08:23Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.types.JavaFieldType;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.ModelFieldTypeConverter;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteColumn;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.logging.Logger;\n+\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.sql.Time;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * <code>ModelField</code> value converter for SQLite. It converts from SQLite's <code>Cursor</code>\n+ * to <code>Model</code> properties and from <code>Model</code> properties to values that are\n+ * valid in a <code>SQLiteStatement</code>.\n+ */\n+final class SQLiteModelFieldTypeConverter implements ModelFieldTypeConverter<Cursor, Model> {\n+\n+    private static final Logger LOGGER = Amplify.Logging.forNamespace(\"amplify:aws-datastore:sqliteConverter\");\n+\n+    private final Class<? extends Model> modelType;\n+\n+    private final ModelSchemaRegistry modelSchemaRegistry;\n+\n+    private final Gson gson;\n+\n+    private final Map<String, SQLiteColumn> columns;\n+\n+    SQLiteModelFieldTypeConverter(\n+            @NonNull Class<? extends Model> modelType,\n+            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n+            @NonNull Gson gson\n+    ) {\n+        this.modelSchemaRegistry = Objects.requireNonNull(modelSchemaRegistry);\n+        this.gson = Objects.requireNonNull(gson);\n+        this.modelType = modelType;\n+\n+        // load and store the SQL columns for the modelType\n+        final SQLiteTable sqliteTable = SQLiteTable.fromSchema(\n+                modelSchemaRegistry.getModelSchemaForModelClass(modelType.getSimpleName()));\n+        this.columns = sqliteTable.getColumns();\n+    }\n+\n+    @Override\n+    public Object convertValueFromSource(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+        try {\n+            // Skip if there is no equivalent column for field in object\n+            final SQLiteColumn column = columns.get(field.getName());\n+            if (column == null) {\n+                LOGGER.warn(\"Column with name \" + field.getName() + \" does not exist\");\n+                return null;\n+            }\n+\n+            final String columnName = column.getAliasedName();\n+            final int columnIndex = cursor.getColumnIndexOrThrow(columnName);\n+            // This check is necessary, because primitive values will return 0 even when null\n+            if (cursor.isNull(columnIndex)) {\n+                return null;\n+            }\n+\n+            switch (javaFieldType) {\n+                case STRING:\n+                    return cursor.getString(columnIndex);\n+                case MODEL:\n+                    return convertModelAssociationToTarget(cursor, field);\n+                case ENUM:\n+                case CUSTOM_TYPE:\n+                    return convertCustomTypeToTarget(cursor, field, columnIndex);\n+                case INTEGER:\n+                    return cursor.getInt(columnIndex);\n+                case BOOLEAN:\n+                    return cursor.getInt(columnIndex) != 0;\n+                case FLOAT:\n+                    return cursor.getFloat(columnIndex);\n+                case LONG:\n+                    return cursor.getLong(columnIndex);\n+                case DATE:\n+                    return convertDateToTarget(cursor, field, columnIndex);\n+                case TIME:\n+                    final long timeInLongFormat = cursor.getLong(columnIndex);\n+                    return new Time(timeInLongFormat);\n+                default:\n+                    LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                    return null;\n+            }\n+        } catch (Exception exception) {\n+            throw new DataStoreException(\n+                    \"Error converting field \" + field.getName() + \" from \" + modelType.getName(),\n+                    exception,\n+                    AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+    }\n+\n+    private Object convertModelAssociationToTarget(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        // Eager load model if the necessary columns are present inside the cursor.\n+        // At the time of implementation, cursor should have been joined with these\n+        // columns IF AND ONLY IF the model is a foreign key to the inner model.\n+        // value has Class<?>, but we want Class<? extends Model>\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends Model> nestedModelType = (Class<? extends Model>) field.getType();\n+        String className = nestedModelType.getSimpleName();\n+        ModelSchema innerModelSchema = modelSchemaRegistry.getModelSchemaForModelClass(className);\n+\n+        SQLiteModelFieldTypeConverter nestedModelConverter =\n+                new SQLiteModelFieldTypeConverter(nestedModelType, modelSchemaRegistry, gson);\n+\n+        Map<String, Object> mapForInnerModel = new HashMap<>();\n+        for (Map.Entry<String, ModelField> entry : innerModelSchema.getFields().entrySet()) {\n+            mapForInnerModel.put(entry.getKey(), nestedModelConverter.convertValueFromSource(cursor, entry.getValue()));\n+        }\n+        final String modelInJsonFormat = gson.toJson(mapForInnerModel);\n+        try {\n+            return gson.getAdapter(nestedModelType).fromJson(modelInJsonFormat);\n+        } catch (IOException exception) {\n+            LOGGER.warn(\"\", exception);\n+            return null;\n+        }\n+    }\n+\n+    private Object convertCustomTypeToTarget(Cursor cursor, ModelField field, int columnIndex) throws IOException {\n+        final String stringValue = cursor.getString(columnIndex);\n+        return gson.getAdapter(field.getType()).fromJson(stringValue);\n+    }\n+\n+    private Object convertDateToTarget(Cursor cursor, ModelField field, int columnIndex) throws ParseException {\n+        // TODO wire up the new Date/Time handling here\n+        final String dateInStringFormat = cursor.getString(columnIndex);\n+        if (dateInStringFormat != null) {\n+            return SimpleDateFormat\n+                    .getDateInstance()\n+                    .parse(dateInStringFormat);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Object convertValueFromTarget(Model model, ModelField field) throws DataStoreException {\n+        final String fieldName = field.getName();\n+\n+        final Object fieldValue = getModelValue(model, fieldName);\n+        if (fieldValue == null) {\n+            return null;\n+        }\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+\n+        switch (javaFieldType) {\n+            case INTEGER:\n+            case LONG:\n+            case FLOAT:\n+            case STRING:\n+                // these types require no special treatment\n+                return fieldValue;\n+            case BOOLEAN:\n+                boolean booleanValue = (boolean) fieldValue;\n+                return booleanValue ? 1L : 0L;\n+            case MODEL:\n+                return ((Model) fieldValue).getId();\n+            case ENUM:\n+            case CUSTOM_TYPE:\n+                return gson.toJson(fieldValue);\n+            case DATE:\n+                // TODO integrate with new Date/Time handling\n+                final Date dateValue = (Date) fieldValue;\n+                return SimpleDateFormat\n+                        .getDateInstance()\n+                        .format(dateValue);\n+            case TIME:\n+                return ((Time) fieldValue).getTime();\n+            default:\n+                LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                return null;\n+        }\n+    }\n+\n+    private Object getModelValue(Model model, String fieldName) throws DataStoreException {\n+        Class<? extends Model> modelClass = model.getClass();\n+        final String getterName = \"get\" + Character.toUpperCase(fieldName.charAt(0)) + fieldName.substring(1);\n+        try {\n+            final Method fieldGetter = modelClass.getMethod(getterName);\n+            return fieldGetter.invoke(model);\n+        } catch (Exception exception) {\n+            LOGGER.debug(\"Could not find \" + getterName + \"() on \" + modelClass.getName()\n+                    + \". Fallback to direct field access.\");\n+            // fallback to direct field access", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY2MDA4Mw==", "bodyText": "I'm not sure we should break in case customers decided (for any reason) to either change the generated model or even to write their own (e.g. with public fields instead, using Lombok or Kotlin data classes). I think we could be resilient here as long as it's a valid pojo.\nThat said, you raise an important question: is a pojo with private fields should have the access level respected as such? I don't know, but the argument that libraries like Gson, Jackson, Spring, etc bypass the access level seems like a strong one to do the same.\nNote that we have a few places with direct field access, this is just an initial attempt to standardize it. For the time being I'll refactor it into a more general-purpose helper and we can discuss the rules for field access and also remove field access duplication.", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r417660083", "createdAt": "2020-04-29T22:56:30Z", "author": {"login": "drochetti"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.types.JavaFieldType;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.ModelFieldTypeConverter;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteColumn;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.logging.Logger;\n+\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.sql.Time;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * <code>ModelField</code> value converter for SQLite. It converts from SQLite's <code>Cursor</code>\n+ * to <code>Model</code> properties and from <code>Model</code> properties to values that are\n+ * valid in a <code>SQLiteStatement</code>.\n+ */\n+final class SQLiteModelFieldTypeConverter implements ModelFieldTypeConverter<Cursor, Model> {\n+\n+    private static final Logger LOGGER = Amplify.Logging.forNamespace(\"amplify:aws-datastore:sqliteConverter\");\n+\n+    private final Class<? extends Model> modelType;\n+\n+    private final ModelSchemaRegistry modelSchemaRegistry;\n+\n+    private final Gson gson;\n+\n+    private final Map<String, SQLiteColumn> columns;\n+\n+    SQLiteModelFieldTypeConverter(\n+            @NonNull Class<? extends Model> modelType,\n+            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n+            @NonNull Gson gson\n+    ) {\n+        this.modelSchemaRegistry = Objects.requireNonNull(modelSchemaRegistry);\n+        this.gson = Objects.requireNonNull(gson);\n+        this.modelType = modelType;\n+\n+        // load and store the SQL columns for the modelType\n+        final SQLiteTable sqliteTable = SQLiteTable.fromSchema(\n+                modelSchemaRegistry.getModelSchemaForModelClass(modelType.getSimpleName()));\n+        this.columns = sqliteTable.getColumns();\n+    }\n+\n+    @Override\n+    public Object convertValueFromSource(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+        try {\n+            // Skip if there is no equivalent column for field in object\n+            final SQLiteColumn column = columns.get(field.getName());\n+            if (column == null) {\n+                LOGGER.warn(\"Column with name \" + field.getName() + \" does not exist\");\n+                return null;\n+            }\n+\n+            final String columnName = column.getAliasedName();\n+            final int columnIndex = cursor.getColumnIndexOrThrow(columnName);\n+            // This check is necessary, because primitive values will return 0 even when null\n+            if (cursor.isNull(columnIndex)) {\n+                return null;\n+            }\n+\n+            switch (javaFieldType) {\n+                case STRING:\n+                    return cursor.getString(columnIndex);\n+                case MODEL:\n+                    return convertModelAssociationToTarget(cursor, field);\n+                case ENUM:\n+                case CUSTOM_TYPE:\n+                    return convertCustomTypeToTarget(cursor, field, columnIndex);\n+                case INTEGER:\n+                    return cursor.getInt(columnIndex);\n+                case BOOLEAN:\n+                    return cursor.getInt(columnIndex) != 0;\n+                case FLOAT:\n+                    return cursor.getFloat(columnIndex);\n+                case LONG:\n+                    return cursor.getLong(columnIndex);\n+                case DATE:\n+                    return convertDateToTarget(cursor, field, columnIndex);\n+                case TIME:\n+                    final long timeInLongFormat = cursor.getLong(columnIndex);\n+                    return new Time(timeInLongFormat);\n+                default:\n+                    LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                    return null;\n+            }\n+        } catch (Exception exception) {\n+            throw new DataStoreException(\n+                    \"Error converting field \" + field.getName() + \" from \" + modelType.getName(),\n+                    exception,\n+                    AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+    }\n+\n+    private Object convertModelAssociationToTarget(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        // Eager load model if the necessary columns are present inside the cursor.\n+        // At the time of implementation, cursor should have been joined with these\n+        // columns IF AND ONLY IF the model is a foreign key to the inner model.\n+        // value has Class<?>, but we want Class<? extends Model>\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends Model> nestedModelType = (Class<? extends Model>) field.getType();\n+        String className = nestedModelType.getSimpleName();\n+        ModelSchema innerModelSchema = modelSchemaRegistry.getModelSchemaForModelClass(className);\n+\n+        SQLiteModelFieldTypeConverter nestedModelConverter =\n+                new SQLiteModelFieldTypeConverter(nestedModelType, modelSchemaRegistry, gson);\n+\n+        Map<String, Object> mapForInnerModel = new HashMap<>();\n+        for (Map.Entry<String, ModelField> entry : innerModelSchema.getFields().entrySet()) {\n+            mapForInnerModel.put(entry.getKey(), nestedModelConverter.convertValueFromSource(cursor, entry.getValue()));\n+        }\n+        final String modelInJsonFormat = gson.toJson(mapForInnerModel);\n+        try {\n+            return gson.getAdapter(nestedModelType).fromJson(modelInJsonFormat);\n+        } catch (IOException exception) {\n+            LOGGER.warn(\"\", exception);\n+            return null;\n+        }\n+    }\n+\n+    private Object convertCustomTypeToTarget(Cursor cursor, ModelField field, int columnIndex) throws IOException {\n+        final String stringValue = cursor.getString(columnIndex);\n+        return gson.getAdapter(field.getType()).fromJson(stringValue);\n+    }\n+\n+    private Object convertDateToTarget(Cursor cursor, ModelField field, int columnIndex) throws ParseException {\n+        // TODO wire up the new Date/Time handling here\n+        final String dateInStringFormat = cursor.getString(columnIndex);\n+        if (dateInStringFormat != null) {\n+            return SimpleDateFormat\n+                    .getDateInstance()\n+                    .parse(dateInStringFormat);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Object convertValueFromTarget(Model model, ModelField field) throws DataStoreException {\n+        final String fieldName = field.getName();\n+\n+        final Object fieldValue = getModelValue(model, fieldName);\n+        if (fieldValue == null) {\n+            return null;\n+        }\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+\n+        switch (javaFieldType) {\n+            case INTEGER:\n+            case LONG:\n+            case FLOAT:\n+            case STRING:\n+                // these types require no special treatment\n+                return fieldValue;\n+            case BOOLEAN:\n+                boolean booleanValue = (boolean) fieldValue;\n+                return booleanValue ? 1L : 0L;\n+            case MODEL:\n+                return ((Model) fieldValue).getId();\n+            case ENUM:\n+            case CUSTOM_TYPE:\n+                return gson.toJson(fieldValue);\n+            case DATE:\n+                // TODO integrate with new Date/Time handling\n+                final Date dateValue = (Date) fieldValue;\n+                return SimpleDateFormat\n+                        .getDateInstance()\n+                        .format(dateValue);\n+            case TIME:\n+                return ((Time) fieldValue).getTime();\n+            default:\n+                LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                return null;\n+        }\n+    }\n+\n+    private Object getModelValue(Model model, String fieldName) throws DataStoreException {\n+        Class<? extends Model> modelClass = model.getClass();\n+        final String getterName = \"get\" + Character.toUpperCase(fieldName.charAt(0)) + fieldName.substring(1);\n+        try {\n+            final Method fieldGetter = modelClass.getMethod(getterName);\n+            return fieldGetter.invoke(model);\n+        } catch (Exception exception) {\n+            LOGGER.debug(\"Could not find \" + getterName + \"() on \" + modelClass.getName()\n+                    + \". Fallback to direct field access.\");\n+            // fallback to direct field access", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI2MDgyMg=="}, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY3MzAwNQ==", "bodyText": "Okay, cool. Yes I do agree with you, we should move in the direction of supporting arbitrary @Models, through-out. My argument was basically \"But we don't right now\"; however, that doesn't mean we should keep marching in that direction!", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r417673005", "createdAt": "2020-04-29T23:36:16Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.types.JavaFieldType;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.ModelFieldTypeConverter;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteColumn;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.logging.Logger;\n+\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.sql.Time;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * <code>ModelField</code> value converter for SQLite. It converts from SQLite's <code>Cursor</code>\n+ * to <code>Model</code> properties and from <code>Model</code> properties to values that are\n+ * valid in a <code>SQLiteStatement</code>.\n+ */\n+final class SQLiteModelFieldTypeConverter implements ModelFieldTypeConverter<Cursor, Model> {\n+\n+    private static final Logger LOGGER = Amplify.Logging.forNamespace(\"amplify:aws-datastore:sqliteConverter\");\n+\n+    private final Class<? extends Model> modelType;\n+\n+    private final ModelSchemaRegistry modelSchemaRegistry;\n+\n+    private final Gson gson;\n+\n+    private final Map<String, SQLiteColumn> columns;\n+\n+    SQLiteModelFieldTypeConverter(\n+            @NonNull Class<? extends Model> modelType,\n+            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n+            @NonNull Gson gson\n+    ) {\n+        this.modelSchemaRegistry = Objects.requireNonNull(modelSchemaRegistry);\n+        this.gson = Objects.requireNonNull(gson);\n+        this.modelType = modelType;\n+\n+        // load and store the SQL columns for the modelType\n+        final SQLiteTable sqliteTable = SQLiteTable.fromSchema(\n+                modelSchemaRegistry.getModelSchemaForModelClass(modelType.getSimpleName()));\n+        this.columns = sqliteTable.getColumns();\n+    }\n+\n+    @Override\n+    public Object convertValueFromSource(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+        try {\n+            // Skip if there is no equivalent column for field in object\n+            final SQLiteColumn column = columns.get(field.getName());\n+            if (column == null) {\n+                LOGGER.warn(\"Column with name \" + field.getName() + \" does not exist\");\n+                return null;\n+            }\n+\n+            final String columnName = column.getAliasedName();\n+            final int columnIndex = cursor.getColumnIndexOrThrow(columnName);\n+            // This check is necessary, because primitive values will return 0 even when null\n+            if (cursor.isNull(columnIndex)) {\n+                return null;\n+            }\n+\n+            switch (javaFieldType) {\n+                case STRING:\n+                    return cursor.getString(columnIndex);\n+                case MODEL:\n+                    return convertModelAssociationToTarget(cursor, field);\n+                case ENUM:\n+                case CUSTOM_TYPE:\n+                    return convertCustomTypeToTarget(cursor, field, columnIndex);\n+                case INTEGER:\n+                    return cursor.getInt(columnIndex);\n+                case BOOLEAN:\n+                    return cursor.getInt(columnIndex) != 0;\n+                case FLOAT:\n+                    return cursor.getFloat(columnIndex);\n+                case LONG:\n+                    return cursor.getLong(columnIndex);\n+                case DATE:\n+                    return convertDateToTarget(cursor, field, columnIndex);\n+                case TIME:\n+                    final long timeInLongFormat = cursor.getLong(columnIndex);\n+                    return new Time(timeInLongFormat);\n+                default:\n+                    LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                    return null;\n+            }\n+        } catch (Exception exception) {\n+            throw new DataStoreException(\n+                    \"Error converting field \" + field.getName() + \" from \" + modelType.getName(),\n+                    exception,\n+                    AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+    }\n+\n+    private Object convertModelAssociationToTarget(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        // Eager load model if the necessary columns are present inside the cursor.\n+        // At the time of implementation, cursor should have been joined with these\n+        // columns IF AND ONLY IF the model is a foreign key to the inner model.\n+        // value has Class<?>, but we want Class<? extends Model>\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends Model> nestedModelType = (Class<? extends Model>) field.getType();\n+        String className = nestedModelType.getSimpleName();\n+        ModelSchema innerModelSchema = modelSchemaRegistry.getModelSchemaForModelClass(className);\n+\n+        SQLiteModelFieldTypeConverter nestedModelConverter =\n+                new SQLiteModelFieldTypeConverter(nestedModelType, modelSchemaRegistry, gson);\n+\n+        Map<String, Object> mapForInnerModel = new HashMap<>();\n+        for (Map.Entry<String, ModelField> entry : innerModelSchema.getFields().entrySet()) {\n+            mapForInnerModel.put(entry.getKey(), nestedModelConverter.convertValueFromSource(cursor, entry.getValue()));\n+        }\n+        final String modelInJsonFormat = gson.toJson(mapForInnerModel);\n+        try {\n+            return gson.getAdapter(nestedModelType).fromJson(modelInJsonFormat);\n+        } catch (IOException exception) {\n+            LOGGER.warn(\"\", exception);\n+            return null;\n+        }\n+    }\n+\n+    private Object convertCustomTypeToTarget(Cursor cursor, ModelField field, int columnIndex) throws IOException {\n+        final String stringValue = cursor.getString(columnIndex);\n+        return gson.getAdapter(field.getType()).fromJson(stringValue);\n+    }\n+\n+    private Object convertDateToTarget(Cursor cursor, ModelField field, int columnIndex) throws ParseException {\n+        // TODO wire up the new Date/Time handling here\n+        final String dateInStringFormat = cursor.getString(columnIndex);\n+        if (dateInStringFormat != null) {\n+            return SimpleDateFormat\n+                    .getDateInstance()\n+                    .parse(dateInStringFormat);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Object convertValueFromTarget(Model model, ModelField field) throws DataStoreException {\n+        final String fieldName = field.getName();\n+\n+        final Object fieldValue = getModelValue(model, fieldName);\n+        if (fieldValue == null) {\n+            return null;\n+        }\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+\n+        switch (javaFieldType) {\n+            case INTEGER:\n+            case LONG:\n+            case FLOAT:\n+            case STRING:\n+                // these types require no special treatment\n+                return fieldValue;\n+            case BOOLEAN:\n+                boolean booleanValue = (boolean) fieldValue;\n+                return booleanValue ? 1L : 0L;\n+            case MODEL:\n+                return ((Model) fieldValue).getId();\n+            case ENUM:\n+            case CUSTOM_TYPE:\n+                return gson.toJson(fieldValue);\n+            case DATE:\n+                // TODO integrate with new Date/Time handling\n+                final Date dateValue = (Date) fieldValue;\n+                return SimpleDateFormat\n+                        .getDateInstance()\n+                        .format(dateValue);\n+            case TIME:\n+                return ((Time) fieldValue).getTime();\n+            default:\n+                LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                return null;\n+        }\n+    }\n+\n+    private Object getModelValue(Model model, String fieldName) throws DataStoreException {\n+        Class<? extends Model> modelClass = model.getClass();\n+        final String getterName = \"get\" + Character.toUpperCase(fieldName.charAt(0)) + fieldName.substring(1);\n+        try {\n+            final Method fieldGetter = modelClass.getMethod(getterName);\n+            return fieldGetter.invoke(model);\n+        } catch (Exception exception) {\n+            LOGGER.debug(\"Could not find \" + getterName + \"() on \" + modelClass.getName()\n+                    + \". Fallback to direct field access.\");\n+            // fallback to direct field access", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI2MDgyMg=="}, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 227}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjQ4MTA0OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwOToxMDo1N1rOGMBiRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNjoxMjo0NVrOGPOFFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI2MTI1Mg==", "bodyText": "This is sort of a rule about the model classes. I wonder if we could make this a utility on one of them. Like ModelSchema.getterForField(fieldName)?  Maybe not ModelSchema itself...", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r415261252", "createdAt": "2020-04-26T09:10:57Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.types.JavaFieldType;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.ModelFieldTypeConverter;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteColumn;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.logging.Logger;\n+\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.sql.Time;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * <code>ModelField</code> value converter for SQLite. It converts from SQLite's <code>Cursor</code>\n+ * to <code>Model</code> properties and from <code>Model</code> properties to values that are\n+ * valid in a <code>SQLiteStatement</code>.\n+ */\n+final class SQLiteModelFieldTypeConverter implements ModelFieldTypeConverter<Cursor, Model> {\n+\n+    private static final Logger LOGGER = Amplify.Logging.forNamespace(\"amplify:aws-datastore:sqliteConverter\");\n+\n+    private final Class<? extends Model> modelType;\n+\n+    private final ModelSchemaRegistry modelSchemaRegistry;\n+\n+    private final Gson gson;\n+\n+    private final Map<String, SQLiteColumn> columns;\n+\n+    SQLiteModelFieldTypeConverter(\n+            @NonNull Class<? extends Model> modelType,\n+            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n+            @NonNull Gson gson\n+    ) {\n+        this.modelSchemaRegistry = Objects.requireNonNull(modelSchemaRegistry);\n+        this.gson = Objects.requireNonNull(gson);\n+        this.modelType = modelType;\n+\n+        // load and store the SQL columns for the modelType\n+        final SQLiteTable sqliteTable = SQLiteTable.fromSchema(\n+                modelSchemaRegistry.getModelSchemaForModelClass(modelType.getSimpleName()));\n+        this.columns = sqliteTable.getColumns();\n+    }\n+\n+    @Override\n+    public Object convertValueFromSource(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+        try {\n+            // Skip if there is no equivalent column for field in object\n+            final SQLiteColumn column = columns.get(field.getName());\n+            if (column == null) {\n+                LOGGER.warn(\"Column with name \" + field.getName() + \" does not exist\");\n+                return null;\n+            }\n+\n+            final String columnName = column.getAliasedName();\n+            final int columnIndex = cursor.getColumnIndexOrThrow(columnName);\n+            // This check is necessary, because primitive values will return 0 even when null\n+            if (cursor.isNull(columnIndex)) {\n+                return null;\n+            }\n+\n+            switch (javaFieldType) {\n+                case STRING:\n+                    return cursor.getString(columnIndex);\n+                case MODEL:\n+                    return convertModelAssociationToTarget(cursor, field);\n+                case ENUM:\n+                case CUSTOM_TYPE:\n+                    return convertCustomTypeToTarget(cursor, field, columnIndex);\n+                case INTEGER:\n+                    return cursor.getInt(columnIndex);\n+                case BOOLEAN:\n+                    return cursor.getInt(columnIndex) != 0;\n+                case FLOAT:\n+                    return cursor.getFloat(columnIndex);\n+                case LONG:\n+                    return cursor.getLong(columnIndex);\n+                case DATE:\n+                    return convertDateToTarget(cursor, field, columnIndex);\n+                case TIME:\n+                    final long timeInLongFormat = cursor.getLong(columnIndex);\n+                    return new Time(timeInLongFormat);\n+                default:\n+                    LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                    return null;\n+            }\n+        } catch (Exception exception) {\n+            throw new DataStoreException(\n+                    \"Error converting field \" + field.getName() + \" from \" + modelType.getName(),\n+                    exception,\n+                    AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+    }\n+\n+    private Object convertModelAssociationToTarget(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        // Eager load model if the necessary columns are present inside the cursor.\n+        // At the time of implementation, cursor should have been joined with these\n+        // columns IF AND ONLY IF the model is a foreign key to the inner model.\n+        // value has Class<?>, but we want Class<? extends Model>\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends Model> nestedModelType = (Class<? extends Model>) field.getType();\n+        String className = nestedModelType.getSimpleName();\n+        ModelSchema innerModelSchema = modelSchemaRegistry.getModelSchemaForModelClass(className);\n+\n+        SQLiteModelFieldTypeConverter nestedModelConverter =\n+                new SQLiteModelFieldTypeConverter(nestedModelType, modelSchemaRegistry, gson);\n+\n+        Map<String, Object> mapForInnerModel = new HashMap<>();\n+        for (Map.Entry<String, ModelField> entry : innerModelSchema.getFields().entrySet()) {\n+            mapForInnerModel.put(entry.getKey(), nestedModelConverter.convertValueFromSource(cursor, entry.getValue()));\n+        }\n+        final String modelInJsonFormat = gson.toJson(mapForInnerModel);\n+        try {\n+            return gson.getAdapter(nestedModelType).fromJson(modelInJsonFormat);\n+        } catch (IOException exception) {\n+            LOGGER.warn(\"\", exception);\n+            return null;\n+        }\n+    }\n+\n+    private Object convertCustomTypeToTarget(Cursor cursor, ModelField field, int columnIndex) throws IOException {\n+        final String stringValue = cursor.getString(columnIndex);\n+        return gson.getAdapter(field.getType()).fromJson(stringValue);\n+    }\n+\n+    private Object convertDateToTarget(Cursor cursor, ModelField field, int columnIndex) throws ParseException {\n+        // TODO wire up the new Date/Time handling here\n+        final String dateInStringFormat = cursor.getString(columnIndex);\n+        if (dateInStringFormat != null) {\n+            return SimpleDateFormat\n+                    .getDateInstance()\n+                    .parse(dateInStringFormat);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Object convertValueFromTarget(Model model, ModelField field) throws DataStoreException {\n+        final String fieldName = field.getName();\n+\n+        final Object fieldValue = getModelValue(model, fieldName);\n+        if (fieldValue == null) {\n+            return null;\n+        }\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+\n+        switch (javaFieldType) {\n+            case INTEGER:\n+            case LONG:\n+            case FLOAT:\n+            case STRING:\n+                // these types require no special treatment\n+                return fieldValue;\n+            case BOOLEAN:\n+                boolean booleanValue = (boolean) fieldValue;\n+                return booleanValue ? 1L : 0L;\n+            case MODEL:\n+                return ((Model) fieldValue).getId();\n+            case ENUM:\n+            case CUSTOM_TYPE:\n+                return gson.toJson(fieldValue);\n+            case DATE:\n+                // TODO integrate with new Date/Time handling\n+                final Date dateValue = (Date) fieldValue;\n+                return SimpleDateFormat\n+                        .getDateInstance()\n+                        .format(dateValue);\n+            case TIME:\n+                return ((Time) fieldValue).getTime();\n+            default:\n+                LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                return null;\n+        }\n+    }\n+\n+    private Object getModelValue(Model model, String fieldName) throws DataStoreException {\n+        Class<? extends Model> modelClass = model.getClass();\n+        final String getterName = \"get\" + Character.toUpperCase(fieldName.charAt(0)) + fieldName.substring(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzcxMDQ0NQ==", "bodyText": "I created a ModelHelper... I'm not a big fan of \"helper\", \"utils\" stuff in general, but sometimes I just find myself without a better alternative, like in this case. So, feel free to suggest something different :)", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r417710445", "createdAt": "2020-04-30T01:49:38Z", "author": {"login": "drochetti"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.types.JavaFieldType;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.ModelFieldTypeConverter;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteColumn;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.logging.Logger;\n+\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.sql.Time;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * <code>ModelField</code> value converter for SQLite. It converts from SQLite's <code>Cursor</code>\n+ * to <code>Model</code> properties and from <code>Model</code> properties to values that are\n+ * valid in a <code>SQLiteStatement</code>.\n+ */\n+final class SQLiteModelFieldTypeConverter implements ModelFieldTypeConverter<Cursor, Model> {\n+\n+    private static final Logger LOGGER = Amplify.Logging.forNamespace(\"amplify:aws-datastore:sqliteConverter\");\n+\n+    private final Class<? extends Model> modelType;\n+\n+    private final ModelSchemaRegistry modelSchemaRegistry;\n+\n+    private final Gson gson;\n+\n+    private final Map<String, SQLiteColumn> columns;\n+\n+    SQLiteModelFieldTypeConverter(\n+            @NonNull Class<? extends Model> modelType,\n+            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n+            @NonNull Gson gson\n+    ) {\n+        this.modelSchemaRegistry = Objects.requireNonNull(modelSchemaRegistry);\n+        this.gson = Objects.requireNonNull(gson);\n+        this.modelType = modelType;\n+\n+        // load and store the SQL columns for the modelType\n+        final SQLiteTable sqliteTable = SQLiteTable.fromSchema(\n+                modelSchemaRegistry.getModelSchemaForModelClass(modelType.getSimpleName()));\n+        this.columns = sqliteTable.getColumns();\n+    }\n+\n+    @Override\n+    public Object convertValueFromSource(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+        try {\n+            // Skip if there is no equivalent column for field in object\n+            final SQLiteColumn column = columns.get(field.getName());\n+            if (column == null) {\n+                LOGGER.warn(\"Column with name \" + field.getName() + \" does not exist\");\n+                return null;\n+            }\n+\n+            final String columnName = column.getAliasedName();\n+            final int columnIndex = cursor.getColumnIndexOrThrow(columnName);\n+            // This check is necessary, because primitive values will return 0 even when null\n+            if (cursor.isNull(columnIndex)) {\n+                return null;\n+            }\n+\n+            switch (javaFieldType) {\n+                case STRING:\n+                    return cursor.getString(columnIndex);\n+                case MODEL:\n+                    return convertModelAssociationToTarget(cursor, field);\n+                case ENUM:\n+                case CUSTOM_TYPE:\n+                    return convertCustomTypeToTarget(cursor, field, columnIndex);\n+                case INTEGER:\n+                    return cursor.getInt(columnIndex);\n+                case BOOLEAN:\n+                    return cursor.getInt(columnIndex) != 0;\n+                case FLOAT:\n+                    return cursor.getFloat(columnIndex);\n+                case LONG:\n+                    return cursor.getLong(columnIndex);\n+                case DATE:\n+                    return convertDateToTarget(cursor, field, columnIndex);\n+                case TIME:\n+                    final long timeInLongFormat = cursor.getLong(columnIndex);\n+                    return new Time(timeInLongFormat);\n+                default:\n+                    LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                    return null;\n+            }\n+        } catch (Exception exception) {\n+            throw new DataStoreException(\n+                    \"Error converting field \" + field.getName() + \" from \" + modelType.getName(),\n+                    exception,\n+                    AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+    }\n+\n+    private Object convertModelAssociationToTarget(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        // Eager load model if the necessary columns are present inside the cursor.\n+        // At the time of implementation, cursor should have been joined with these\n+        // columns IF AND ONLY IF the model is a foreign key to the inner model.\n+        // value has Class<?>, but we want Class<? extends Model>\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends Model> nestedModelType = (Class<? extends Model>) field.getType();\n+        String className = nestedModelType.getSimpleName();\n+        ModelSchema innerModelSchema = modelSchemaRegistry.getModelSchemaForModelClass(className);\n+\n+        SQLiteModelFieldTypeConverter nestedModelConverter =\n+                new SQLiteModelFieldTypeConverter(nestedModelType, modelSchemaRegistry, gson);\n+\n+        Map<String, Object> mapForInnerModel = new HashMap<>();\n+        for (Map.Entry<String, ModelField> entry : innerModelSchema.getFields().entrySet()) {\n+            mapForInnerModel.put(entry.getKey(), nestedModelConverter.convertValueFromSource(cursor, entry.getValue()));\n+        }\n+        final String modelInJsonFormat = gson.toJson(mapForInnerModel);\n+        try {\n+            return gson.getAdapter(nestedModelType).fromJson(modelInJsonFormat);\n+        } catch (IOException exception) {\n+            LOGGER.warn(\"\", exception);\n+            return null;\n+        }\n+    }\n+\n+    private Object convertCustomTypeToTarget(Cursor cursor, ModelField field, int columnIndex) throws IOException {\n+        final String stringValue = cursor.getString(columnIndex);\n+        return gson.getAdapter(field.getType()).fromJson(stringValue);\n+    }\n+\n+    private Object convertDateToTarget(Cursor cursor, ModelField field, int columnIndex) throws ParseException {\n+        // TODO wire up the new Date/Time handling here\n+        final String dateInStringFormat = cursor.getString(columnIndex);\n+        if (dateInStringFormat != null) {\n+            return SimpleDateFormat\n+                    .getDateInstance()\n+                    .parse(dateInStringFormat);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Object convertValueFromTarget(Model model, ModelField field) throws DataStoreException {\n+        final String fieldName = field.getName();\n+\n+        final Object fieldValue = getModelValue(model, fieldName);\n+        if (fieldValue == null) {\n+            return null;\n+        }\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+\n+        switch (javaFieldType) {\n+            case INTEGER:\n+            case LONG:\n+            case FLOAT:\n+            case STRING:\n+                // these types require no special treatment\n+                return fieldValue;\n+            case BOOLEAN:\n+                boolean booleanValue = (boolean) fieldValue;\n+                return booleanValue ? 1L : 0L;\n+            case MODEL:\n+                return ((Model) fieldValue).getId();\n+            case ENUM:\n+            case CUSTOM_TYPE:\n+                return gson.toJson(fieldValue);\n+            case DATE:\n+                // TODO integrate with new Date/Time handling\n+                final Date dateValue = (Date) fieldValue;\n+                return SimpleDateFormat\n+                        .getDateInstance()\n+                        .format(dateValue);\n+            case TIME:\n+                return ((Time) fieldValue).getTime();\n+            default:\n+                LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                return null;\n+        }\n+    }\n+\n+    private Object getModelValue(Model model, String fieldName) throws DataStoreException {\n+        Class<? extends Model> modelClass = model.getClass();\n+        final String getterName = \"get\" + Character.toUpperCase(fieldName.charAt(0)) + fieldName.substring(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI2MTI1Mg=="}, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc0MjM5OQ==", "bodyText": "Ah gosh actually we have this FieldFinder already too, that I'd forgotten about. It extracts a value from an object, by looking up an instance variable by name.\nMaybe let's punt this for now. We could do a separate, targeted PR that lumps together some of the reflection utilities that are currently around the code-base.\nOh, but maybe the right name for this current utility we are discussing, is a ModelFieldFinder?", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r417742399", "createdAt": "2020-04-30T04:09:58Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.types.JavaFieldType;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.ModelFieldTypeConverter;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteColumn;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.logging.Logger;\n+\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.sql.Time;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * <code>ModelField</code> value converter for SQLite. It converts from SQLite's <code>Cursor</code>\n+ * to <code>Model</code> properties and from <code>Model</code> properties to values that are\n+ * valid in a <code>SQLiteStatement</code>.\n+ */\n+final class SQLiteModelFieldTypeConverter implements ModelFieldTypeConverter<Cursor, Model> {\n+\n+    private static final Logger LOGGER = Amplify.Logging.forNamespace(\"amplify:aws-datastore:sqliteConverter\");\n+\n+    private final Class<? extends Model> modelType;\n+\n+    private final ModelSchemaRegistry modelSchemaRegistry;\n+\n+    private final Gson gson;\n+\n+    private final Map<String, SQLiteColumn> columns;\n+\n+    SQLiteModelFieldTypeConverter(\n+            @NonNull Class<? extends Model> modelType,\n+            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n+            @NonNull Gson gson\n+    ) {\n+        this.modelSchemaRegistry = Objects.requireNonNull(modelSchemaRegistry);\n+        this.gson = Objects.requireNonNull(gson);\n+        this.modelType = modelType;\n+\n+        // load and store the SQL columns for the modelType\n+        final SQLiteTable sqliteTable = SQLiteTable.fromSchema(\n+                modelSchemaRegistry.getModelSchemaForModelClass(modelType.getSimpleName()));\n+        this.columns = sqliteTable.getColumns();\n+    }\n+\n+    @Override\n+    public Object convertValueFromSource(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+        try {\n+            // Skip if there is no equivalent column for field in object\n+            final SQLiteColumn column = columns.get(field.getName());\n+            if (column == null) {\n+                LOGGER.warn(\"Column with name \" + field.getName() + \" does not exist\");\n+                return null;\n+            }\n+\n+            final String columnName = column.getAliasedName();\n+            final int columnIndex = cursor.getColumnIndexOrThrow(columnName);\n+            // This check is necessary, because primitive values will return 0 even when null\n+            if (cursor.isNull(columnIndex)) {\n+                return null;\n+            }\n+\n+            switch (javaFieldType) {\n+                case STRING:\n+                    return cursor.getString(columnIndex);\n+                case MODEL:\n+                    return convertModelAssociationToTarget(cursor, field);\n+                case ENUM:\n+                case CUSTOM_TYPE:\n+                    return convertCustomTypeToTarget(cursor, field, columnIndex);\n+                case INTEGER:\n+                    return cursor.getInt(columnIndex);\n+                case BOOLEAN:\n+                    return cursor.getInt(columnIndex) != 0;\n+                case FLOAT:\n+                    return cursor.getFloat(columnIndex);\n+                case LONG:\n+                    return cursor.getLong(columnIndex);\n+                case DATE:\n+                    return convertDateToTarget(cursor, field, columnIndex);\n+                case TIME:\n+                    final long timeInLongFormat = cursor.getLong(columnIndex);\n+                    return new Time(timeInLongFormat);\n+                default:\n+                    LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                    return null;\n+            }\n+        } catch (Exception exception) {\n+            throw new DataStoreException(\n+                    \"Error converting field \" + field.getName() + \" from \" + modelType.getName(),\n+                    exception,\n+                    AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+    }\n+\n+    private Object convertModelAssociationToTarget(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        // Eager load model if the necessary columns are present inside the cursor.\n+        // At the time of implementation, cursor should have been joined with these\n+        // columns IF AND ONLY IF the model is a foreign key to the inner model.\n+        // value has Class<?>, but we want Class<? extends Model>\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends Model> nestedModelType = (Class<? extends Model>) field.getType();\n+        String className = nestedModelType.getSimpleName();\n+        ModelSchema innerModelSchema = modelSchemaRegistry.getModelSchemaForModelClass(className);\n+\n+        SQLiteModelFieldTypeConverter nestedModelConverter =\n+                new SQLiteModelFieldTypeConverter(nestedModelType, modelSchemaRegistry, gson);\n+\n+        Map<String, Object> mapForInnerModel = new HashMap<>();\n+        for (Map.Entry<String, ModelField> entry : innerModelSchema.getFields().entrySet()) {\n+            mapForInnerModel.put(entry.getKey(), nestedModelConverter.convertValueFromSource(cursor, entry.getValue()));\n+        }\n+        final String modelInJsonFormat = gson.toJson(mapForInnerModel);\n+        try {\n+            return gson.getAdapter(nestedModelType).fromJson(modelInJsonFormat);\n+        } catch (IOException exception) {\n+            LOGGER.warn(\"\", exception);\n+            return null;\n+        }\n+    }\n+\n+    private Object convertCustomTypeToTarget(Cursor cursor, ModelField field, int columnIndex) throws IOException {\n+        final String stringValue = cursor.getString(columnIndex);\n+        return gson.getAdapter(field.getType()).fromJson(stringValue);\n+    }\n+\n+    private Object convertDateToTarget(Cursor cursor, ModelField field, int columnIndex) throws ParseException {\n+        // TODO wire up the new Date/Time handling here\n+        final String dateInStringFormat = cursor.getString(columnIndex);\n+        if (dateInStringFormat != null) {\n+            return SimpleDateFormat\n+                    .getDateInstance()\n+                    .parse(dateInStringFormat);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Object convertValueFromTarget(Model model, ModelField field) throws DataStoreException {\n+        final String fieldName = field.getName();\n+\n+        final Object fieldValue = getModelValue(model, fieldName);\n+        if (fieldValue == null) {\n+            return null;\n+        }\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+\n+        switch (javaFieldType) {\n+            case INTEGER:\n+            case LONG:\n+            case FLOAT:\n+            case STRING:\n+                // these types require no special treatment\n+                return fieldValue;\n+            case BOOLEAN:\n+                boolean booleanValue = (boolean) fieldValue;\n+                return booleanValue ? 1L : 0L;\n+            case MODEL:\n+                return ((Model) fieldValue).getId();\n+            case ENUM:\n+            case CUSTOM_TYPE:\n+                return gson.toJson(fieldValue);\n+            case DATE:\n+                // TODO integrate with new Date/Time handling\n+                final Date dateValue = (Date) fieldValue;\n+                return SimpleDateFormat\n+                        .getDateInstance()\n+                        .format(dateValue);\n+            case TIME:\n+                return ((Time) fieldValue).getTime();\n+            default:\n+                LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                return null;\n+        }\n+    }\n+\n+    private Object getModelValue(Model model, String fieldName) throws DataStoreException {\n+        Class<? extends Model> modelClass = model.getClass();\n+        final String getterName = \"get\" + Character.toUpperCase(fieldName.charAt(0)) + fieldName.substring(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI2MTI1Mg=="}, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 220}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODYxMjUwMQ==", "bodyText": "Agree. I'll merge my code as is and follow up with a clean-up/consolidation of all the reflection related code DataStore has", "url": "https://github.com/aws-amplify/amplify-android/pull/398#discussion_r418612501", "createdAt": "2020-05-01T16:12:45Z", "author": {"login": "drochetti"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteModelFieldTypeConverter.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.database.Cursor;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelField;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.core.model.types.JavaFieldType;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.ModelFieldTypeConverter;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteColumn;\n+import com.amplifyframework.datastore.storage.sqlite.adapter.SQLiteTable;\n+import com.amplifyframework.logging.Logger;\n+\n+import com.google.gson.Gson;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.sql.Time;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * <code>ModelField</code> value converter for SQLite. It converts from SQLite's <code>Cursor</code>\n+ * to <code>Model</code> properties and from <code>Model</code> properties to values that are\n+ * valid in a <code>SQLiteStatement</code>.\n+ */\n+final class SQLiteModelFieldTypeConverter implements ModelFieldTypeConverter<Cursor, Model> {\n+\n+    private static final Logger LOGGER = Amplify.Logging.forNamespace(\"amplify:aws-datastore:sqliteConverter\");\n+\n+    private final Class<? extends Model> modelType;\n+\n+    private final ModelSchemaRegistry modelSchemaRegistry;\n+\n+    private final Gson gson;\n+\n+    private final Map<String, SQLiteColumn> columns;\n+\n+    SQLiteModelFieldTypeConverter(\n+            @NonNull Class<? extends Model> modelType,\n+            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n+            @NonNull Gson gson\n+    ) {\n+        this.modelSchemaRegistry = Objects.requireNonNull(modelSchemaRegistry);\n+        this.gson = Objects.requireNonNull(gson);\n+        this.modelType = modelType;\n+\n+        // load and store the SQL columns for the modelType\n+        final SQLiteTable sqliteTable = SQLiteTable.fromSchema(\n+                modelSchemaRegistry.getModelSchemaForModelClass(modelType.getSimpleName()));\n+        this.columns = sqliteTable.getColumns();\n+    }\n+\n+    @Override\n+    public Object convertValueFromSource(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+        try {\n+            // Skip if there is no equivalent column for field in object\n+            final SQLiteColumn column = columns.get(field.getName());\n+            if (column == null) {\n+                LOGGER.warn(\"Column with name \" + field.getName() + \" does not exist\");\n+                return null;\n+            }\n+\n+            final String columnName = column.getAliasedName();\n+            final int columnIndex = cursor.getColumnIndexOrThrow(columnName);\n+            // This check is necessary, because primitive values will return 0 even when null\n+            if (cursor.isNull(columnIndex)) {\n+                return null;\n+            }\n+\n+            switch (javaFieldType) {\n+                case STRING:\n+                    return cursor.getString(columnIndex);\n+                case MODEL:\n+                    return convertModelAssociationToTarget(cursor, field);\n+                case ENUM:\n+                case CUSTOM_TYPE:\n+                    return convertCustomTypeToTarget(cursor, field, columnIndex);\n+                case INTEGER:\n+                    return cursor.getInt(columnIndex);\n+                case BOOLEAN:\n+                    return cursor.getInt(columnIndex) != 0;\n+                case FLOAT:\n+                    return cursor.getFloat(columnIndex);\n+                case LONG:\n+                    return cursor.getLong(columnIndex);\n+                case DATE:\n+                    return convertDateToTarget(cursor, field, columnIndex);\n+                case TIME:\n+                    final long timeInLongFormat = cursor.getLong(columnIndex);\n+                    return new Time(timeInLongFormat);\n+                default:\n+                    LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                    return null;\n+            }\n+        } catch (Exception exception) {\n+            throw new DataStoreException(\n+                    \"Error converting field \" + field.getName() + \" from \" + modelType.getName(),\n+                    exception,\n+                    AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+    }\n+\n+    private Object convertModelAssociationToTarget(\n+            @NonNull Cursor cursor,\n+            @NonNull ModelField field\n+    ) throws DataStoreException {\n+        // Eager load model if the necessary columns are present inside the cursor.\n+        // At the time of implementation, cursor should have been joined with these\n+        // columns IF AND ONLY IF the model is a foreign key to the inner model.\n+        // value has Class<?>, but we want Class<? extends Model>\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends Model> nestedModelType = (Class<? extends Model>) field.getType();\n+        String className = nestedModelType.getSimpleName();\n+        ModelSchema innerModelSchema = modelSchemaRegistry.getModelSchemaForModelClass(className);\n+\n+        SQLiteModelFieldTypeConverter nestedModelConverter =\n+                new SQLiteModelFieldTypeConverter(nestedModelType, modelSchemaRegistry, gson);\n+\n+        Map<String, Object> mapForInnerModel = new HashMap<>();\n+        for (Map.Entry<String, ModelField> entry : innerModelSchema.getFields().entrySet()) {\n+            mapForInnerModel.put(entry.getKey(), nestedModelConverter.convertValueFromSource(cursor, entry.getValue()));\n+        }\n+        final String modelInJsonFormat = gson.toJson(mapForInnerModel);\n+        try {\n+            return gson.getAdapter(nestedModelType).fromJson(modelInJsonFormat);\n+        } catch (IOException exception) {\n+            LOGGER.warn(\"\", exception);\n+            return null;\n+        }\n+    }\n+\n+    private Object convertCustomTypeToTarget(Cursor cursor, ModelField field, int columnIndex) throws IOException {\n+        final String stringValue = cursor.getString(columnIndex);\n+        return gson.getAdapter(field.getType()).fromJson(stringValue);\n+    }\n+\n+    private Object convertDateToTarget(Cursor cursor, ModelField field, int columnIndex) throws ParseException {\n+        // TODO wire up the new Date/Time handling here\n+        final String dateInStringFormat = cursor.getString(columnIndex);\n+        if (dateInStringFormat != null) {\n+            return SimpleDateFormat\n+                    .getDateInstance()\n+                    .parse(dateInStringFormat);\n+        }\n+        return null;\n+    }\n+\n+    @Override\n+    public Object convertValueFromTarget(Model model, ModelField field) throws DataStoreException {\n+        final String fieldName = field.getName();\n+\n+        final Object fieldValue = getModelValue(model, fieldName);\n+        if (fieldValue == null) {\n+            return null;\n+        }\n+        final JavaFieldType javaFieldType = TypeConverter.getJavaFieldType(field);\n+\n+        switch (javaFieldType) {\n+            case INTEGER:\n+            case LONG:\n+            case FLOAT:\n+            case STRING:\n+                // these types require no special treatment\n+                return fieldValue;\n+            case BOOLEAN:\n+                boolean booleanValue = (boolean) fieldValue;\n+                return booleanValue ? 1L : 0L;\n+            case MODEL:\n+                return ((Model) fieldValue).getId();\n+            case ENUM:\n+            case CUSTOM_TYPE:\n+                return gson.toJson(fieldValue);\n+            case DATE:\n+                // TODO integrate with new Date/Time handling\n+                final Date dateValue = (Date) fieldValue;\n+                return SimpleDateFormat\n+                        .getDateInstance()\n+                        .format(dateValue);\n+            case TIME:\n+                return ((Time) fieldValue).getTime();\n+            default:\n+                LOGGER.warn(\"Field of type \" + javaFieldType + \" is not supported. Fallback to null.\");\n+                return null;\n+        }\n+    }\n+\n+    private Object getModelValue(Model model, String fieldName) throws DataStoreException {\n+        Class<? extends Model> modelClass = model.getClass();\n+        final String getterName = \"get\" + Character.toUpperCase(fieldName.charAt(0)) + fieldName.substring(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI2MTI1Mg=="}, "originalCommit": {"oid": "d18f6ff128e89453bb1372ba5034be13699651f5"}, "originalPosition": 220}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1452, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}