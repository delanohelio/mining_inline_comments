{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNzkyMTY0", "number": 233, "title": "[Analytics] Support Auto session tracking initial commit", "bodyText": "Issue #, if available:\nDescription of changes:\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-01-16T18:48:00Z", "url": "https://github.com/aws-amplify/amplify-android/pull/233", "merged": true, "mergeCommit": {"oid": "080169ad5e3db1efa4e5647510ecbc97f654b495"}, "closed": true, "closedAt": "2020-03-19T17:48:20Z", "author": {"login": "desokroshan"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb7HegXgFqTM0NDM1NzM1NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPMtQFAFqTM3Nzc2NzIzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MzU3MzU0", "url": "https://github.com/aws-amplify/amplify-android/pull/233#pullrequestreview-344357354", "createdAt": "2020-01-17T04:23:01Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNDoyMzowMVrOFeug6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNDo1ODozMFrOFeu3ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc2MzY4OQ==", "bodyText": "It would be better to use a utility that exists in Amplify, directly. This utility is from a dependency which may/may not be removed in the future (when we do the auth category), and also it is marked .internal. (meaning, \"don't consume this from another library.\")", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r367763689", "createdAt": "2020-01-17T04:23:01Z", "author": {"login": "jamesonwilliams"}, "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/ApplicationLifeCycleHelper.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics.pinpoint;\n+\n+import android.app.Activity;\n+import android.app.Application;\n+import android.content.BroadcastReceiver;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.IntentFilter;\n+import android.os.Bundle;\n+import android.util.Log;\n+\n+import com.amazonaws.mobile.auth.core.internal.util.ThreadUtils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc2NDg5Mg==", "bodyText": "A problem here is that you have a way to register the callbacks, but no way to unregister the callbacks.\nSomeday, Amplify will probably have some kind of teardown() method. And it would call through and we'd want to do:\napplication.unregisterActivityLifecycleCallbacks(this);\n\nSo, either:\n\nJust stash a reference to the Application into an instance variable, and provide two new methods, startTracking(), and stopTracking(). These methods would call application.registerActivityLifecycleCallbacks(this) and application.unregisterActivityLifecycleCallbacks(this).\nDon't bother passing an Application at all. Just document in the class Javadoc for ApplicationLifecycleHelper that you intend for instances of this class to registered elsewhere, by someone else making calls to registerActivityLifecycleCallbacks(Application.ActivityLifecycleCallbacks) and unregisterActivityLifecycleCallbacks(Application.ActivityLifecycleCallbacks).", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r367764892", "createdAt": "2020-01-17T04:30:02Z", "author": {"login": "jamesonwilliams"}, "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/ApplicationLifeCycleHelper.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics.pinpoint;\n+\n+import android.app.Activity;\n+import android.app.Application;\n+import android.content.BroadcastReceiver;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.IntentFilter;\n+import android.os.Bundle;\n+import android.util.Log;\n+\n+import com.amazonaws.mobile.auth.core.internal.util.ThreadUtils;\n+\n+import java.util.WeakHashMap;\n+\n+/**\n+ * Aids in determining when your application has entered or left the foreground.\n+ * The constructor registers to receive Activity lifecycle events and also registers a\n+ * broadcast receiver to handle the screen being turned off.  Abstract methods are\n+ * provided to handle when the application enters the background or foreground.\n+ * Any activity lifecycle callbacks can easily be overriden if additional handling\n+ * is needed. Just be sure to call through to the super method so that this class\n+ * will still behave as intended.\n+ **/\n+public abstract class ApplicationLifeCycleHelper implements Application.ActivityLifecycleCallbacks {\n+    private static final String LOG_TAG = ApplicationLifeCycleHelper.class.getSimpleName();\n+    private static final String ACTION_SCREEN_OFF = \"android.intent.action.SCREEN_OFF\";\n+    private boolean inForeground = false;\n+    /** Tracks the lifecycle of activities that have not stopped (including those restarted). */\n+    private WeakHashMap<Activity, String> activityLifecycleStateMap = new WeakHashMap<>();\n+\n+    /**\n+     * Constructor. Registers to receive activity lifecycle events.\n+     * @param application The Android Application class.\n+     */\n+    public ApplicationLifeCycleHelper(final Application application) {\n+        application.registerActivityLifecycleCallbacks(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc2NTExNQ==", "bodyText": "Same issue here, there's no  way to do application.unregisterReceiver(...), if you do this right in the constructor. So, it probably shouldn't happen in the constructor, but rather in the startTracking() / stopTracking() methods I propose above.", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r367765115", "createdAt": "2020-01-17T04:31:22Z", "author": {"login": "jamesonwilliams"}, "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/ApplicationLifeCycleHelper.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics.pinpoint;\n+\n+import android.app.Activity;\n+import android.app.Application;\n+import android.content.BroadcastReceiver;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.IntentFilter;\n+import android.os.Bundle;\n+import android.util.Log;\n+\n+import com.amazonaws.mobile.auth.core.internal.util.ThreadUtils;\n+\n+import java.util.WeakHashMap;\n+\n+/**\n+ * Aids in determining when your application has entered or left the foreground.\n+ * The constructor registers to receive Activity lifecycle events and also registers a\n+ * broadcast receiver to handle the screen being turned off.  Abstract methods are\n+ * provided to handle when the application enters the background or foreground.\n+ * Any activity lifecycle callbacks can easily be overriden if additional handling\n+ * is needed. Just be sure to call through to the super method so that this class\n+ * will still behave as intended.\n+ **/\n+public abstract class ApplicationLifeCycleHelper implements Application.ActivityLifecycleCallbacks {\n+    private static final String LOG_TAG = ApplicationLifeCycleHelper.class.getSimpleName();\n+    private static final String ACTION_SCREEN_OFF = \"android.intent.action.SCREEN_OFF\";\n+    private boolean inForeground = false;\n+    /** Tracks the lifecycle of activities that have not stopped (including those restarted). */\n+    private WeakHashMap<Activity, String> activityLifecycleStateMap = new WeakHashMap<>();\n+\n+    /**\n+     * Constructor. Registers to receive activity lifecycle events.\n+     * @param application The Android Application class.\n+     */\n+    public ApplicationLifeCycleHelper(final Application application) {\n+        application.registerActivityLifecycleCallbacks(this);\n+        final ScreenOffReceiver screenOffReceiver = new ScreenOffReceiver();\n+        application.registerReceiver(screenOffReceiver, new IntentFilter(ACTION_SCREEN_OFF));", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc2NTk3Mg==", "bodyText": "ActivityBase and AppCompatActivity have existing solutions to track/obtain the current lifecycle. Checkout the AndroidX Lifecycle Components, with which V7 App Compat Activity is integrated.\nHowever, I can see an advantage to having something that works with every single Activity, ever. And for that, I guess you might need to have your own tracker.\nA good name for this class might be ApplicationForegroundTracker, instead of ApplicationLifecycleHelper.\nAnyway, even if you implement your own tracker, you can still use as much of AndroidX Lifecycle here as possible. Instead of using strings, you should use enums, which provide a bounded set of possible states the map value can be in. And, as it turns out, that enum is already defined by AndroidX Lifecycle --\nSo this map would (probably) become:\nprivate Map<Activity, Lifecycle.State> activityStates = new WeakHashMap<>();\n\n(Ref: LifecycleState)", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r367765972", "createdAt": "2020-01-17T04:36:39Z", "author": {"login": "jamesonwilliams"}, "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/ApplicationLifeCycleHelper.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics.pinpoint;\n+\n+import android.app.Activity;\n+import android.app.Application;\n+import android.content.BroadcastReceiver;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.IntentFilter;\n+import android.os.Bundle;\n+import android.util.Log;\n+\n+import com.amazonaws.mobile.auth.core.internal.util.ThreadUtils;\n+\n+import java.util.WeakHashMap;\n+\n+/**\n+ * Aids in determining when your application has entered or left the foreground.\n+ * The constructor registers to receive Activity lifecycle events and also registers a\n+ * broadcast receiver to handle the screen being turned off.  Abstract methods are\n+ * provided to handle when the application enters the background or foreground.\n+ * Any activity lifecycle callbacks can easily be overriden if additional handling\n+ * is needed. Just be sure to call through to the super method so that this class\n+ * will still behave as intended.\n+ **/\n+public abstract class ApplicationLifeCycleHelper implements Application.ActivityLifecycleCallbacks {\n+    private static final String LOG_TAG = ApplicationLifeCycleHelper.class.getSimpleName();\n+    private static final String ACTION_SCREEN_OFF = \"android.intent.action.SCREEN_OFF\";\n+    private boolean inForeground = false;\n+    /** Tracks the lifecycle of activities that have not stopped (including those restarted). */\n+    private WeakHashMap<Activity, String> activityLifecycleStateMap = new WeakHashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc2OTUwNw==", "bodyText": "Instead of doing this as an abstract class, and requiring someone to extend it, I suggest to use the \"observer\" design pattern. If you do that, this class would become a final class, and would provide a way to be \"observed.\"\nA classic Java implementation of this would be like:\nfinal class ApplicationForegroundTracker {\n    private final Set<Observer> observers;\n\n    ApplicationForegroundTracker() {\n        this.observers = new HashSet<>();\n    }\n\n    void registerForegroundObserver(Observer observer) {\n        synchronized (observers) {\n            this.observers.add(ObjectsCompat.requireNonNull(observer));\n        }\n    }\n\n    void unregisterForegroundObserver(Observer observer) {\n        synchronized (observers) {\n            observers.remove(Objects.requireNonNull(observer));\n        }\n    }\n\n    // Somewhere in your code, when its time to notify that you have a new state ...\n    // You can call this either like notify(observer::onApplicationEnteredForeground);\n    // or like notify(observer::onApplicationEnteredBackground);\n    void notify(NotificationStrategy strategy) {\n        Set<Observer> threadSafeObserversCopy = new HashSet<>();\n        synchronized (observers) {\n            threadSafeObserversCopy.addAll(observers);\n        }\n\n        for (Observer observer: threadSafeObserversCopy) {\n            strategy.apply(observer);\n        }      \n    }\n\n    interface Observer {\n        void onApplicationEnteredForeground();\n        void onApplciationEnteredBackground();\n    }\n\n    // An internal interface to define a function which calls back an observer.\n    // This is a strategy design pattern. One strategy might be to call \n    // {@link Observer#onApplicationEnteredForeground()}. Another strategy might be\n    // to call {@link Observer#onAppliactionEnteredBackground()}.\n    // This strategy is used to execute a small bit of code inside of the notification routine,\n    // where a lot of the same setup is used regardless of the notification strategy.\n    interface NotificationStrategy {\n        void apply(Observer observer);\n    }\n}\n\nAnyway, then you'd use it like:\nfinal ApplicationForegroundTracker tracker = new AppliactionForegroundTracker();\nfinal ApplicationForegroundTracker.Observer observer = new ApplicationForegroundTracker.Observer() {\n    @Override public void onApplicationEnteredForeground() {\n        analyticsSession.resume(); // or whatever\n    }\n    @Overridd public void onApplicactionEnteredBackground() {\n        analyticsSession.pause(); // or whatever\n    }\n};\n\ntracker.addForegroundObserver(observer);\n...\ntracker.removeForegroundObserver(observer);", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r367769507", "createdAt": "2020-01-17T04:58:30Z", "author": {"login": "jamesonwilliams"}, "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/ApplicationLifeCycleHelper.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics.pinpoint;\n+\n+import android.app.Activity;\n+import android.app.Application;\n+import android.content.BroadcastReceiver;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.IntentFilter;\n+import android.os.Bundle;\n+import android.util.Log;\n+\n+import com.amazonaws.mobile.auth.core.internal.util.ThreadUtils;\n+\n+import java.util.WeakHashMap;\n+\n+/**\n+ * Aids in determining when your application has entered or left the foreground.\n+ * The constructor registers to receive Activity lifecycle events and also registers a\n+ * broadcast receiver to handle the screen being turned off.  Abstract methods are\n+ * provided to handle when the application enters the background or foreground.\n+ * Any activity lifecycle callbacks can easily be overriden if additional handling\n+ * is needed. Just be sure to call through to the super method so that this class\n+ * will still behave as intended.\n+ **/\n+public abstract class ApplicationLifeCycleHelper implements Application.ActivityLifecycleCallbacks {\n+    private static final String LOG_TAG = ApplicationLifeCycleHelper.class.getSimpleName();\n+    private static final String ACTION_SCREEN_OFF = \"android.intent.action.SCREEN_OFF\";\n+    private boolean inForeground = false;\n+    /** Tracks the lifecycle of activities that have not stopped (including those restarted). */\n+    private WeakHashMap<Activity, String> activityLifecycleStateMap = new WeakHashMap<>();\n+\n+    /**\n+     * Constructor. Registers to receive activity lifecycle events.\n+     * @param application The Android Application class.\n+     */\n+    public ApplicationLifeCycleHelper(final Application application) {\n+        application.registerActivityLifecycleCallbacks(this);\n+        final ScreenOffReceiver screenOffReceiver = new ScreenOffReceiver();\n+        application.registerReceiver(screenOffReceiver, new IntentFilter(ACTION_SCREEN_OFF));\n+    }\n+\n+    @Override\n+    public void onActivityCreated(final Activity activity, final Bundle bundle) {\n+        Log.d(LOG_TAG, \"onActivityCreated \" + activity.getLocalClassName());\n+        handleOnCreateOrOnStartToHandleApplicationEnteredForeground();\n+        activityLifecycleStateMap.put(activity, \"created\");\n+    }\n+\n+    @Override\n+    public void onActivityStarted(final Activity activity) {\n+        Log.d(LOG_TAG, \"onActivityStarted \" + activity.getLocalClassName());\n+        handleOnCreateOrOnStartToHandleApplicationEnteredForeground();\n+        activityLifecycleStateMap.put(activity, \"started\");\n+    }\n+\n+    @Override\n+    public void onActivityResumed(final Activity activity) {\n+        Log.d(LOG_TAG, \"onActivityResumed \" + activity.getLocalClassName());\n+        activityLifecycleStateMap.put(activity, \"resumed\");\n+    }\n+\n+    @Override\n+    public void onActivityPaused(final Activity activity) {\n+        Log.d(LOG_TAG, \"onActivityPaused \" + activity.getLocalClassName());\n+        activityLifecycleStateMap.put(activity, \"paused\");\n+    }\n+\n+    @Override\n+    public void onActivityStopped(final Activity activity) {\n+        Log.d(LOG_TAG, \"onActivityStopped \" + activity.getLocalClassName());\n+        // When the activity is stopped, we remove it from the lifecycle state map since we\n+        // no longer consider it keeping a session alive.\n+        activityLifecycleStateMap.remove(activity);\n+    }\n+\n+    @Override\n+    public void onActivitySaveInstanceState(final Activity activity, final Bundle outState) {\n+        Log.d(LOG_TAG, \"onActivitySaveInstanceState \" + activity.getLocalClassName());\n+    }\n+\n+    @Override\n+    public void onActivityDestroyed(final Activity activity) {\n+        Log.d(LOG_TAG, \"onActivityDestroyed \" + activity.getLocalClassName());\n+        // Activity should not be in the activityLifecycleStateMap any longer.\n+        if (activityLifecycleStateMap.containsKey(activity)) {\n+            Log.wtf(LOG_TAG, \"Destroyed activity present in activityLifecycleMap!?\");\n+            activityLifecycleStateMap.remove(activity);\n+        }\n+    }\n+\n+    /**\n+     * Call this method when your Application trims memory.\n+     * @param level the level passed through from Application.onTrimMemory().\n+     */\n+    public void handleOnTrimMemory(final int level) {\n+        Log.d(LOG_TAG, \"onTrimMemory \" + level);\n+        // If no activities are running and the app has gone into the background.\n+        if (level >= Application.TRIM_MEMORY_UI_HIDDEN) {\n+            checkForApplicationEnteredBackground();\n+        }\n+    }\n+\n+    class ScreenOffReceiver extends BroadcastReceiver {\n+        @Override\n+        public void onReceive(Context context, Intent intent) {\n+            checkForApplicationEnteredBackground();\n+        }\n+    }\n+\n+    /**\n+     * Called back when your application enters the Foreground.\n+     */\n+    protected abstract void applicationEnteredForeground();\n+\n+    /**\n+     * Called back when your application enters the Background.\n+     */\n+    protected abstract void applicationEnteredBackground();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MzY1NTc3", "url": "https://github.com/aws-amplify/amplify-android/pull/233#pullrequestreview-344365577", "createdAt": "2020-01-17T05:06:10Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNTowNjoxMVrOFeu8tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwNTowNjoxMVrOFeu8tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Nzc3MDgwNA==", "bodyText": "When this class first runs, you won't know the right value of inForeground for sure. Did this code start executing when the initial state was in foreground? Or in background?\nSo, I propose that you change this from a boolean to an enum, that looks like:\nenum ForegroundState {\n    FOREGROUND,\n    BACKGROUND,\n    UNKNOWN;\n}\n\nThe class constructor would initialize a member like:\nApplicationForegroundTracker() {\n    this.state = ForgroundState.UNKNOWN;\n}\n\nOr perhaps:\nApplicationForegroundTracker() {\n    this.state = determineForegroundState();\n}\n\nwhere determineForegroundState() is something like this:\nhttps://stackoverflow.com/a/40804658/695787 perhaps", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r367770804", "createdAt": "2020-01-17T05:06:11Z", "author": {"login": "jamesonwilliams"}, "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/ApplicationLifeCycleHelper.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics.pinpoint;\n+\n+import android.app.Activity;\n+import android.app.Application;\n+import android.content.BroadcastReceiver;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.content.IntentFilter;\n+import android.os.Bundle;\n+import android.util.Log;\n+\n+import com.amazonaws.mobile.auth.core.internal.util.ThreadUtils;\n+\n+import java.util.WeakHashMap;\n+\n+/**\n+ * Aids in determining when your application has entered or left the foreground.\n+ * The constructor registers to receive Activity lifecycle events and also registers a\n+ * broadcast receiver to handle the screen being turned off.  Abstract methods are\n+ * provided to handle when the application enters the background or foreground.\n+ * Any activity lifecycle callbacks can easily be overriden if additional handling\n+ * is needed. Just be sure to call through to the super method so that this class\n+ * will still behave as intended.\n+ **/\n+public abstract class ApplicationLifeCycleHelper implements Application.ActivityLifecycleCallbacks {\n+    private static final String LOG_TAG = ApplicationLifeCycleHelper.class.getSimpleName();\n+    private static final String ACTION_SCREEN_OFF = \"android.intent.action.SCREEN_OFF\";\n+    private boolean inForeground = false;\n+    /** Tracks the lifecycle of activities that have not stopped (including those restarted). */\n+    private WeakHashMap<Activity, String> activityLifecycleStateMap = new WeakHashMap<>();\n+\n+    /**\n+     * Constructor. Registers to receive activity lifecycle events.\n+     * @param application The Android Application class.\n+     */\n+    public ApplicationLifeCycleHelper(final Application application) {\n+        application.registerActivityLifecycleCallbacks(this);\n+        final ScreenOffReceiver screenOffReceiver = new ScreenOffReceiver();\n+        application.registerReceiver(screenOffReceiver, new IntentFilter(ACTION_SCREEN_OFF));\n+    }\n+\n+    @Override\n+    public void onActivityCreated(final Activity activity, final Bundle bundle) {\n+        Log.d(LOG_TAG, \"onActivityCreated \" + activity.getLocalClassName());\n+        handleOnCreateOrOnStartToHandleApplicationEnteredForeground();\n+        activityLifecycleStateMap.put(activity, \"created\");\n+    }\n+\n+    @Override\n+    public void onActivityStarted(final Activity activity) {\n+        Log.d(LOG_TAG, \"onActivityStarted \" + activity.getLocalClassName());\n+        handleOnCreateOrOnStartToHandleApplicationEnteredForeground();\n+        activityLifecycleStateMap.put(activity, \"started\");\n+    }\n+\n+    @Override\n+    public void onActivityResumed(final Activity activity) {\n+        Log.d(LOG_TAG, \"onActivityResumed \" + activity.getLocalClassName());\n+        activityLifecycleStateMap.put(activity, \"resumed\");\n+    }\n+\n+    @Override\n+    public void onActivityPaused(final Activity activity) {\n+        Log.d(LOG_TAG, \"onActivityPaused \" + activity.getLocalClassName());\n+        activityLifecycleStateMap.put(activity, \"paused\");\n+    }\n+\n+    @Override\n+    public void onActivityStopped(final Activity activity) {\n+        Log.d(LOG_TAG, \"onActivityStopped \" + activity.getLocalClassName());\n+        // When the activity is stopped, we remove it from the lifecycle state map since we\n+        // no longer consider it keeping a session alive.\n+        activityLifecycleStateMap.remove(activity);\n+    }\n+\n+    @Override\n+    public void onActivitySaveInstanceState(final Activity activity, final Bundle outState) {\n+        Log.d(LOG_TAG, \"onActivitySaveInstanceState \" + activity.getLocalClassName());\n+    }\n+\n+    @Override\n+    public void onActivityDestroyed(final Activity activity) {\n+        Log.d(LOG_TAG, \"onActivityDestroyed \" + activity.getLocalClassName());\n+        // Activity should not be in the activityLifecycleStateMap any longer.\n+        if (activityLifecycleStateMap.containsKey(activity)) {\n+            Log.wtf(LOG_TAG, \"Destroyed activity present in activityLifecycleMap!?\");\n+            activityLifecycleStateMap.remove(activity);\n+        }\n+    }\n+\n+    /**\n+     * Call this method when your Application trims memory.\n+     * @param level the level passed through from Application.onTrimMemory().\n+     */\n+    public void handleOnTrimMemory(final int level) {\n+        Log.d(LOG_TAG, \"onTrimMemory \" + level);\n+        // If no activities are running and the app has gone into the background.\n+        if (level >= Application.TRIM_MEMORY_UI_HIDDEN) {\n+            checkForApplicationEnteredBackground();\n+        }\n+    }\n+\n+    class ScreenOffReceiver extends BroadcastReceiver {\n+        @Override\n+        public void onReceive(Context context, Intent intent) {\n+            checkForApplicationEnteredBackground();\n+        }\n+    }\n+\n+    /**\n+     * Called back when your application enters the Foreground.\n+     */\n+    protected abstract void applicationEnteredForeground();\n+\n+    /**\n+     * Called back when your application enters the Background.\n+     */\n+    protected abstract void applicationEnteredBackground();\n+\n+    /**\n+     * Called from onActivityCreated and onActivityStarted to handle when the application enters\n+     * the foreground.\n+     */\n+    private void handleOnCreateOrOnStartToHandleApplicationEnteredForeground() {\n+        // if nothing is in the activity lifecycle map indicating that we are likely in the background, and the flag\n+        // indicates we are indeed in the background.\n+        if (activityLifecycleStateMap.size() == 0 && !inForeground) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 142}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "dceb2b59a612feeccbce7d5fb42f97aa21ef032c", "author": {"user": {"login": "desokroshan", "name": "Roshan Kumar"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/dceb2b59a612feeccbce7d5fb42f97aa21ef032c", "committedDate": "2020-01-21T22:58:55Z", "message": "Fix checkstyle failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cb96cb98cb85dff9c51ecc8ee9bd16fefa1409a", "author": {"user": {"login": "desokroshan", "name": "Roshan Kumar"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/5cb96cb98cb85dff9c51ecc8ee9bd16fefa1409a", "committedDate": "2020-03-11T06:24:14Z", "message": "Support Auto session tracking initial commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88381af45bb2f18a2b0d0b451e55d61ef97e7960", "author": {"user": {"login": "desokroshan", "name": "Roshan Kumar"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/88381af45bb2f18a2b0d0b451e55d61ef97e7960", "committedDate": "2020-03-11T06:24:14Z", "message": "update lifecycle manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2477126eae13d6811aa7cbf1fa3ce8aac25e5eb", "author": {"user": {"login": "desokroshan", "name": "Roshan Kumar"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/b2477126eae13d6811aa7cbf1fa3ce8aac25e5eb", "committedDate": "2020-03-11T06:24:14Z", "message": "Updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79ce1fc44500fd9766178f3a85865cf751210822", "author": {"user": {"login": "desokroshan", "name": "Roshan Kumar"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/79ce1fc44500fd9766178f3a85865cf751210822", "committedDate": "2020-03-11T06:24:14Z", "message": "Delete Lifecycle helper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebd8059ebd83867d90c64c4e9dea9ed56b449674", "author": {"user": {"login": "desokroshan", "name": "Roshan Kumar"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/ebd8059ebd83867d90c64c4e9dea9ed56b449674", "committedDate": "2020-03-11T06:26:18Z", "message": "Updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d3c365b942a2adf35745e9604ac175f1d08572b", "author": {"user": {"login": "desokroshan", "name": "Roshan Kumar"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/0d3c365b942a2adf35745e9604ac175f1d08572b", "committedDate": "2020-03-11T06:28:23Z", "message": "Fix checkstyle failures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad0d9c7403b39f7ea2e0e911e7f6a42194e4ff67", "author": {"user": {"login": "desokroshan", "name": "Roshan Kumar"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/ad0d9c7403b39f7ea2e0e911e7f6a42194e4ff67", "committedDate": "2020-03-11T06:28:23Z", "message": "Update configuration to be compatible with latest changes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6679bf7d94b6cecb01e49acbe6106da178e7f65e", "author": {"user": {"login": "desokroshan", "name": "Roshan Kumar"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/6679bf7d94b6cecb01e49acbe6106da178e7f65e", "committedDate": "2020-01-21T23:29:50Z", "message": "Update configuration to be compatible with latest changes"}, "afterCommit": {"oid": "ad0d9c7403b39f7ea2e0e911e7f6a42194e4ff67", "author": {"user": {"login": "desokroshan", "name": "Roshan Kumar"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/ad0d9c7403b39f7ea2e0e911e7f6a42194e4ff67", "committedDate": "2020-03-11T06:28:23Z", "message": "Update configuration to be compatible with latest changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c994408c3006f780a0ddb328f94186a3a1c688e", "author": {"user": {"login": "desokroshan", "name": "Roshan Kumar"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/7c994408c3006f780a0ddb328f94186a3a1c688e", "committedDate": "2020-03-11T06:33:03Z", "message": "Clean-ups"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e1062dcfff37e20a218418b76f7bac73f00b5b4", "author": {"user": {"login": "desokroshan", "name": "Roshan Kumar"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/5e1062dcfff37e20a218418b76f7bac73f00b5b4", "committedDate": "2020-03-11T19:53:46Z", "message": "Fix checkstyle failures"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczMzA3MzE3", "url": "https://github.com/aws-amplify/amplify-android/pull/233#pullrequestreview-373307317", "createdAt": "2020-03-12T06:37:48Z", "commit": {"oid": "7c994408c3006f780a0ddb328f94186a3a1c688e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNjozNzo0OFrOF1Ss8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQwNjozNzo0OFrOF1Ss8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTQyNTI2Ng==", "bodyText": "This method name is long to the point of being unreadable. Maybe just inline that method, here? Or, name it like checkForApplicationEnteredForeground()?  As a bonus, this would match your checkForApplicationBackground() method.", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r391425266", "createdAt": "2020-03-12T06:37:48Z", "author": {"login": "jamesonwilliams"}, "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java", "diffHunk": "@@ -77,20 +75,19 @@ void stopSessionTracking(final Application application) {\n     @Override\n     public void onActivityCreated(final Activity activity, final Bundle bundle) {\n         Log.d(LOG_TAG, \"onActivityCreated \" + activity.getLocalClassName());\n-        handleOnCreateOrOnStartToHandleApplicationEnteredForeground();\n         activityLifecycleStateMap.put(activity, Lifecycle.State.CREATED);\n     }\n \n     @Override\n     public void onActivityStarted(final Activity activity) {\n         Log.d(LOG_TAG, \"onActivityStarted \" + activity.getLocalClassName());\n-        handleOnCreateOrOnStartToHandleApplicationEnteredForeground();\n         activityLifecycleStateMap.put(activity, Lifecycle.State.STARTED);\n     }\n \n     @Override\n     public void onActivityResumed(final Activity activity) {\n         Log.d(LOG_TAG, \"onActivityResumed \" + activity.getLocalClassName());\n+        handleOnCreateOrOnStartToHandleApplicationEnteredForeground();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c994408c3006f780a0ddb328f94186a3a1c688e"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f6892c9a35e697563fd23fdd7876d1deb40e21b", "author": {"user": {"login": "desokroshan", "name": "Roshan Kumar"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/5f6892c9a35e697563fd23fdd7876d1deb40e21b", "committedDate": "2020-03-12T09:56:58Z", "message": "Remove screen off receiver and add comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczOTYwMDU3", "url": "https://github.com/aws-amplify/amplify-android/pull/233#pullrequestreview-373960057", "createdAt": "2020-03-12T23:17:55Z", "commit": {"oid": "5f6892c9a35e697563fd23fdd7876d1deb40e21b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzoxNzo1NVrOF1zAFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQyMzoxNzo1NVrOF1zAFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTk1NDQ1NA==", "bodyText": "In our call, we agreed that this can be removed.", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r391954454", "createdAt": "2020-03-12T23:17:55Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/util/ThreadUtils.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.util;\n+\n+import android.os.Handler;\n+import android.os.Looper;\n+\n+public final class ThreadUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f6892c9a35e697563fd23fdd7876d1deb40e21b"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzczOTYwNTU3", "url": "https://github.com/aws-amplify/amplify-android/pull/233#pullrequestreview-373960557", "createdAt": "2020-03-12T23:19:38Z", "commit": {"oid": "5f6892c9a35e697563fd23fdd7876d1deb40e21b"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "604fadcda7e1a43f9c001b785e9167a078060e0b", "author": {"user": {"login": "desokroshan", "name": "Roshan Kumar"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/604fadcda7e1a43f9c001b785e9167a078060e0b", "committedDate": "2020-03-13T08:21:02Z", "message": "Unit tests for session tracker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d695aed7d44430821ee17bb20cf8fa8978310a3", "author": {"user": {"login": "desokroshan", "name": "Roshan Kumar"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/7d695aed7d44430821ee17bb20cf8fa8978310a3", "committedDate": "2020-03-13T09:10:11Z", "message": "Checkstyle fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0MzQ4NjA2", "url": "https://github.com/aws-amplify/amplify-android/pull/233#pullrequestreview-374348606", "createdAt": "2020-03-13T14:34:00Z", "commit": {"oid": "7d695aed7d44430821ee17bb20cf8fa8978310a3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NDg5Mzcw", "url": "https://github.com/aws-amplify/amplify-android/pull/233#pullrequestreview-376489370", "createdAt": "2020-03-18T00:21:25Z", "commit": {"oid": "7d695aed7d44430821ee17bb20cf8fa8978310a3"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDoyMToyNVrOF3yeQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwMDozMTo0N1rOF3yoQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0Mjk0Nw==", "bodyText": "trivial comment: move assignments into constructor", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r394042947", "createdAt": "2020-03-18T00:21:25Z", "author": {"login": "jamesonwilliams"}, "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics.pinpoint;\n+\n+import android.app.Activity;\n+import android.app.Application;\n+import android.os.Bundle;\n+import android.util.Log;\n+\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.AnalyticsClient;\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.SessionClient;\n+\n+/**\n+ * Tracks when the host application enters or leaves foreground.\n+ * The constructor registers to receive activity lifecycle events.\n+ **/\n+public final class AutoSessionTracker implements Application.ActivityLifecycleCallbacks {\n+    private static final String LOG_TAG = AutoSessionTracker.class.getSimpleName();\n+    private final SessionClient sessionClient;\n+    private final AnalyticsClient analyticsClient;\n+    private boolean inForeground = false;\n+    private int activityCount = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d695aed7d44430821ee17bb20cf8fa8978310a3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MzE1MQ==", "bodyText": "nit: an extra empty line here", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r394043151", "createdAt": "2020-03-18T00:22:20Z", "author": {"login": "jamesonwilliams"}, "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics.pinpoint;\n+\n+import android.app.Activity;\n+import android.app.Application;\n+import android.os.Bundle;\n+import android.util.Log;\n+\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.AnalyticsClient;\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.SessionClient;\n+\n+/**\n+ * Tracks when the host application enters or leaves foreground.\n+ * The constructor registers to receive activity lifecycle events.\n+ **/\n+public final class AutoSessionTracker implements Application.ActivityLifecycleCallbacks {\n+    private static final String LOG_TAG = AutoSessionTracker.class.getSimpleName();\n+    private final SessionClient sessionClient;\n+    private final AnalyticsClient analyticsClient;\n+    private boolean inForeground = false;\n+    private int activityCount = 0;\n+\n+    /**\n+     * Constructor. Registers to receive activity lifecycle events.\n+     * @param analyticsClient Amazon pinpoint analytics client\n+     * @param sessionClient Amazon pinpoint session client\n+     */\n+    public AutoSessionTracker(final AnalyticsClient analyticsClient,\n+                              final SessionClient sessionClient) {\n+        this.analyticsClient = analyticsClient;\n+        this.sessionClient = sessionClient;\n+    }\n+\n+    void startSessionTracking(final Application application) {\n+        application.registerActivityLifecycleCallbacks(this);\n+    }\n+\n+    void stopSessionTracking(final Application application) {\n+        application.unregisterActivityLifecycleCallbacks(this);\n+    }\n+\n+    @Override\n+    public void onActivityCreated(final Activity activity, final Bundle bundle) {\n+        Log.d(LOG_TAG, \"Activity created: \" + activity.getLocalClassName());\n+    }\n+\n+    @Override\n+    public void onActivityStarted(final Activity activity) {\n+        Log.d(LOG_TAG, \"Activity started: \" + activity.getLocalClassName());\n+    }\n+\n+    @Override\n+    public void onActivityResumed(final Activity activity) {\n+        // An activity came to foreground. Application potentially entered foreground as well\n+        // if there were no other activities in the foreground.\n+        Log.d(LOG_TAG, \"Activity resumed: \" + activity.getLocalClassName());\n+        checkIfApplicationEnteredForeground();\n+        activityCount++;\n+    }\n+\n+    @Override\n+    public void onActivityPaused(final Activity activity) {\n+        // onPause is always followed by onStop except when the app is interrupted by an event such\n+        // as a phone call, pop-ups or app losing focus in a multi-window mode, in which case activity is\n+        // resumed if app regains focus.In either case, app foreground status does not change for the\n+        // purpose of session tracking.\n+        Log.d(LOG_TAG, \"Activity paused: \" + activity.getLocalClassName());\n+    }\n+\n+    @Override\n+    public void onActivityStopped(final Activity activity) {\n+        // An activity entered stopped state. Application potentially entered background if there are\n+        // no other activities in non-stopped states, in which case app is not visible to user and has\n+        // entered background state.\n+        Log.d(LOG_TAG, \"Activity stopped: \" + activity.getLocalClassName());\n+        activityCount--;\n+        checkIfApplicationEnteredBackground();\n+    }\n+\n+    @Override\n+    public void onActivitySaveInstanceState(final Activity activity, final Bundle outState) {\n+        Log.d(LOG_TAG, \"Activity state saved: \" + activity.getLocalClassName());\n+    }\n+\n+    @Override\n+    public void onActivityDestroyed(final Activity activity) {\n+        // onStop is always called before onDestroy so no action is required in onActivityDestroyed.\n+        Log.d(LOG_TAG, \"Activity destroyed \" + activity.getLocalClassName());\n+    }\n+\n+    /**\n+     * Called when the application enters the foreground.\n+     */\n+    void applicationEnteredForeground() {\n+        Log.d(LOG_TAG, \"Application entered the foreground.\");\n+        sessionClient.startSession();\n+    }\n+\n+    /**\n+     * Called when the application enters the background.\n+     */\n+    void applicationEnteredBackground() {\n+        Log.d(LOG_TAG, \"Application entered the background.\");\n+        sessionClient.stopSession();\n+        analyticsClient.submitEvents();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d695aed7d44430821ee17bb20cf8fa8978310a3"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MzM5OA==", "bodyText": "nit: remove extra set of parens around activityCount == 0.", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r394043398", "createdAt": "2020-03-18T00:23:12Z", "author": {"login": "jamesonwilliams"}, "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics.pinpoint;\n+\n+import android.app.Activity;\n+import android.app.Application;\n+import android.os.Bundle;\n+import android.util.Log;\n+\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.AnalyticsClient;\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.SessionClient;\n+\n+/**\n+ * Tracks when the host application enters or leaves foreground.\n+ * The constructor registers to receive activity lifecycle events.\n+ **/\n+public final class AutoSessionTracker implements Application.ActivityLifecycleCallbacks {\n+    private static final String LOG_TAG = AutoSessionTracker.class.getSimpleName();\n+    private final SessionClient sessionClient;\n+    private final AnalyticsClient analyticsClient;\n+    private boolean inForeground = false;\n+    private int activityCount = 0;\n+\n+    /**\n+     * Constructor. Registers to receive activity lifecycle events.\n+     * @param analyticsClient Amazon pinpoint analytics client\n+     * @param sessionClient Amazon pinpoint session client\n+     */\n+    public AutoSessionTracker(final AnalyticsClient analyticsClient,\n+                              final SessionClient sessionClient) {\n+        this.analyticsClient = analyticsClient;\n+        this.sessionClient = sessionClient;\n+    }\n+\n+    void startSessionTracking(final Application application) {\n+        application.registerActivityLifecycleCallbacks(this);\n+    }\n+\n+    void stopSessionTracking(final Application application) {\n+        application.unregisterActivityLifecycleCallbacks(this);\n+    }\n+\n+    @Override\n+    public void onActivityCreated(final Activity activity, final Bundle bundle) {\n+        Log.d(LOG_TAG, \"Activity created: \" + activity.getLocalClassName());\n+    }\n+\n+    @Override\n+    public void onActivityStarted(final Activity activity) {\n+        Log.d(LOG_TAG, \"Activity started: \" + activity.getLocalClassName());\n+    }\n+\n+    @Override\n+    public void onActivityResumed(final Activity activity) {\n+        // An activity came to foreground. Application potentially entered foreground as well\n+        // if there were no other activities in the foreground.\n+        Log.d(LOG_TAG, \"Activity resumed: \" + activity.getLocalClassName());\n+        checkIfApplicationEnteredForeground();\n+        activityCount++;\n+    }\n+\n+    @Override\n+    public void onActivityPaused(final Activity activity) {\n+        // onPause is always followed by onStop except when the app is interrupted by an event such\n+        // as a phone call, pop-ups or app losing focus in a multi-window mode, in which case activity is\n+        // resumed if app regains focus.In either case, app foreground status does not change for the\n+        // purpose of session tracking.\n+        Log.d(LOG_TAG, \"Activity paused: \" + activity.getLocalClassName());\n+    }\n+\n+    @Override\n+    public void onActivityStopped(final Activity activity) {\n+        // An activity entered stopped state. Application potentially entered background if there are\n+        // no other activities in non-stopped states, in which case app is not visible to user and has\n+        // entered background state.\n+        Log.d(LOG_TAG, \"Activity stopped: \" + activity.getLocalClassName());\n+        activityCount--;\n+        checkIfApplicationEnteredBackground();\n+    }\n+\n+    @Override\n+    public void onActivitySaveInstanceState(final Activity activity, final Bundle outState) {\n+        Log.d(LOG_TAG, \"Activity state saved: \" + activity.getLocalClassName());\n+    }\n+\n+    @Override\n+    public void onActivityDestroyed(final Activity activity) {\n+        // onStop is always called before onDestroy so no action is required in onActivityDestroyed.\n+        Log.d(LOG_TAG, \"Activity destroyed \" + activity.getLocalClassName());\n+    }\n+\n+    /**\n+     * Called when the application enters the foreground.\n+     */\n+    void applicationEnteredForeground() {\n+        Log.d(LOG_TAG, \"Application entered the foreground.\");\n+        sessionClient.startSession();\n+    }\n+\n+    /**\n+     * Called when the application enters the background.\n+     */\n+    void applicationEnteredBackground() {\n+        Log.d(LOG_TAG, \"Application entered the background.\");\n+        sessionClient.stopSession();\n+        analyticsClient.submitEvents();\n+\n+    }\n+\n+    /**\n+     * Called from onActivityResumed to check if the application came to the foreground.\n+     */\n+    private void checkIfApplicationEnteredForeground() {\n+        // if nothing is in the activity lifecycle map indicating that we are likely in the background, and the flag\n+        // indicates we are indeed in the background.\n+        if (activityCount == 0 && !inForeground) {\n+            inForeground = true;\n+            // Since this is called when an activity has started, we now know the app has entered the foreground.\n+            applicationEnteredForeground();\n+        }\n+    }\n+\n+    /**\n+     * Called from onActivityStopped to check if the application receded to the background.\n+     */\n+    private void checkIfApplicationEnteredBackground() {\n+        // If the App is in the foreground and there are no longer any activities that have not been stopped.\n+        if ((activityCount == 0) && inForeground) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d695aed7d44430821ee17bb20cf8fa8978310a3"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MzU4Nw==", "bodyText": "Minor: naming, maybe, foregroundActivityCount?", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r394043587", "createdAt": "2020-03-18T00:23:56Z", "author": {"login": "jamesonwilliams"}, "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/AutoSessionTracker.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics.pinpoint;\n+\n+import android.app.Activity;\n+import android.app.Application;\n+import android.os.Bundle;\n+import android.util.Log;\n+\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.AnalyticsClient;\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.SessionClient;\n+\n+/**\n+ * Tracks when the host application enters or leaves foreground.\n+ * The constructor registers to receive activity lifecycle events.\n+ **/\n+public final class AutoSessionTracker implements Application.ActivityLifecycleCallbacks {\n+    private static final String LOG_TAG = AutoSessionTracker.class.getSimpleName();\n+    private final SessionClient sessionClient;\n+    private final AnalyticsClient analyticsClient;\n+    private boolean inForeground = false;\n+    private int activityCount = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d695aed7d44430821ee17bb20cf8fa8978310a3"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0MzgyNg==", "bodyText": "The class that creates a PinpointManager should probably be called a PinpointManagerFactory, not a PinpointClientFactory, I guess.", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r394043826", "createdAt": "2020-03-18T00:25:02Z", "author": {"login": "jamesonwilliams"}, "path": "aws-analytics-pinpoint/src/main/java/com/amplifyframework/analytics/pinpoint/PinpointClientFactory.java", "diffHunk": "@@ -47,7 +46,7 @@\n     private PinpointClientFactory() {\n     }\n \n-    static AnalyticsClient create(Context context,\n+    static PinpointManager create(Context context,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d695aed7d44430821ee17bb20cf8fa8978310a3"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NDc5OA==", "bodyText": "I've never seen this InOrder, but it looks quite useful. Nice find, and nice application.", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r394044798", "createdAt": "2020-03-18T00:28:44Z", "author": {"login": "jamesonwilliams"}, "path": "aws-analytics-pinpoint/src/test/java/com/amplifyframework/analytics/pinpoint/AutoSessionTrackerTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics.pinpoint;\n+\n+import android.app.Activity;\n+import android.app.Application;\n+import android.os.Bundle;\n+\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.AnalyticsClient;\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.SessionClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InOrder;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import static org.mockito.Mockito.inOrder;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Tests the {@link AutoSessionTracker}.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class AutoSessionTrackerTest {\n+    private AnalyticsClient analyticsClient;\n+    private SessionClient sessionClient;\n+    private Application.ActivityLifecycleCallbacks callbacks;\n+\n+    /**\n+     * Setup dependencies and object under test.\n+     */\n+    @Before\n+    public void setup() {\n+        // Dependencies\n+        this.analyticsClient = mock(AnalyticsClient.class);\n+        this.sessionClient = mock(SessionClient.class);\n+\n+        // Object under test\n+        this.callbacks = new AutoSessionTracker(analyticsClient, sessionClient);\n+    }\n+\n+    /**\n+     * When the app is opened, a start session should be recorded.\n+     */\n+    @Test\n+    public void sessionStartedWhenAppOpened() {\n+        // Given: the launcher activity instance and bundle class instance.\n+        Activity activity = mock(Activity.class);\n+        Bundle bundle = mock(Bundle.class);\n+\n+        // When: the app is opened main activity goes through the following lifecycle states.\n+        callbacks.onActivityCreated(activity, bundle);\n+        callbacks.onActivityStarted(activity);\n+        callbacks.onActivityResumed(activity);\n+\n+        // Then: Make sure that startSession was invoked on the session client.\n+        verify(sessionClient).startSession();\n+    }\n+\n+    /**\n+     * When the app is started, user interacts with the app and presses the home button\n+     * a start session and a stop session should be recorded in that order.\n+     */\n+    @Test\n+    public void sessionStoppedWhenHomeButtonPressed() {\n+        // Given: the activity that is currently in foreground.\n+        Activity activity = mock(Activity.class);\n+        Bundle bundle = mock(Bundle.class);\n+\n+        // When: the app goes to background, the activity in foreground is stopped.\n+        // Activity is put in resume state when the app is started.\n+        callbacks.onActivityCreated(activity, bundle);\n+        callbacks.onActivityStarted(activity);\n+        callbacks.onActivityResumed(activity);\n+\n+        // Activity stopped when home button is pressed.\n+        callbacks.onActivityPaused(activity);\n+        callbacks.onActivityStopped(activity);\n+\n+        // Then: Make sure startSession and stopSession are invoked in that order.\n+        InOrder inOrder = inOrder(sessionClient);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d695aed7d44430821ee17bb20cf8fa8978310a3"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDA0NTUwNA==", "bodyText": "For some of these, you have \"app is in goreground\" was a \"when\" step, but it is more like a \"given.\"\nFor example, \"Given that the app had already been opened, when the user hits the home button, then the session is stopped.\"\nThis will change your \"then\" logic slightly too, since I think you'll only want to verify stopSession(), in that case, not both startSession() and stopSession(), back to back.\nAlthough, that InOrder is cool!! I'm surprised I've never seen it before. Nice find.", "url": "https://github.com/aws-amplify/amplify-android/pull/233#discussion_r394045504", "createdAt": "2020-03-18T00:31:47Z", "author": {"login": "jamesonwilliams"}, "path": "aws-analytics-pinpoint/src/test/java/com/amplifyframework/analytics/pinpoint/AutoSessionTrackerTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.analytics.pinpoint;\n+\n+import android.app.Activity;\n+import android.app.Application;\n+import android.os.Bundle;\n+\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.AnalyticsClient;\n+import com.amazonaws.mobileconnectors.pinpoint.analytics.SessionClient;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.InOrder;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import static org.mockito.Mockito.inOrder;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Tests the {@link AutoSessionTracker}.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class AutoSessionTrackerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d695aed7d44430821ee17bb20cf8fa8978310a3"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89597955657844f2376c0e680864c6f707f19441", "author": {"user": {"login": "desokroshan", "name": "Roshan Kumar"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/89597955657844f2376c0e680864c6f707f19441", "committedDate": "2020-03-18T01:26:52Z", "message": "Clean-ups"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NTM2MTQy", "url": "https://github.com/aws-amplify/amplify-android/pull/233#pullrequestreview-376536142", "createdAt": "2020-03-18T03:07:46Z", "commit": {"oid": "89597955657844f2376c0e680864c6f707f19441"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3NzY3MjM0", "url": "https://github.com/aws-amplify/amplify-android/pull/233#pullrequestreview-377767234", "createdAt": "2020-03-19T14:23:14Z", "commit": {"oid": "89597955657844f2376c0e680864c6f707f19441"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2799, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}