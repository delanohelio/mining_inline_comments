{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxODMwNjcz", "number": 744, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDozMjo0M1rOEcvM1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDoyMjozNVrOEdPuAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NTY4OTE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/logging/JavaLoggingPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDozMjo0M1rOHHcrDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMDozMjo0M1rOHHcrDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU3MTg1Mw==", "bodyText": "The comment says LogLevel.INFO is used as the default logging threshold, but the constructor itself uses LogLevel.VERBOSE.", "url": "https://github.com/aws-amplify/amplify-android/pull/744#discussion_r477571853", "createdAt": "2020-08-26T20:32:43Z", "author": {"login": "eeatonaws"}, "path": "core/src/main/java/com/amplifyframework/logging/JavaLoggingPlugin.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.logging;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import org.json.JSONObject;\n+\n+/**\n+ * Implementation of the {@link LoggingCategoryBehavior} designed for use by unit tests,\n+ * which emits logs via {@code System.out.println()}.\n+ */\n+public final class JavaLoggingPlugin extends LoggingPlugin<Void> {\n+    private static final String AMPLIFY_NAMESPACE = \"amplify\";\n+    private final LogLevel defaultLoggerThreshold;\n+\n+    /**\n+     * Creates a logging plugin using {@link LogLevel#INFO} as the default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3c689692a1a18b6347303791340bb8b1941cb8a"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MTAxNjk4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/logging/JavaLogger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDoyMjozNVrOHISvRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QxNDo0Njo0N1rOHIT1oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ1NzY3MA==", "bodyText": "Since the LogLevel passed in is not always LogLevel.ERROR, I think it would be more clear to rename the LogLevel error parameter to something like logLevel or just level.", "url": "https://github.com/aws-amplify/amplify-android/pull/744#discussion_r478457670", "createdAt": "2020-08-27T14:22:35Z", "author": {"login": "eeatonaws"}, "path": "core/src/main/java/com/amplifyframework/logging/JavaLogger.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.logging;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.Objects;\n+\n+final class JavaLogger implements Logger {\n+    private final LogLevel threshold;\n+    private final String namespace;\n+\n+    JavaLogger(@NonNull String namespace, @NonNull LogLevel threshold) {\n+        this.threshold = Objects.requireNonNull(threshold);\n+        this.namespace = Objects.requireNonNull(namespace);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public LogLevel getThresholdLevel() {\n+        return threshold;\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String getNamespace() {\n+        return namespace;\n+    }\n+\n+    @Override\n+    public void error(@Nullable String message) {\n+        if (threshold.above(LogLevel.ERROR)) {\n+            return;\n+        }\n+        log(LogLevel.ERROR, message);\n+    }\n+\n+    @Override\n+    public void error(@Nullable String message, @Nullable Throwable error) {\n+        if (threshold.above(LogLevel.ERROR)) {\n+            return;\n+        }\n+        log(LogLevel.ERROR, message, error);\n+    }\n+\n+    @Override\n+    public void warn(@Nullable String message) {\n+        if (threshold.above(LogLevel.WARN)) {\n+            return;\n+        }\n+        log(LogLevel.WARN, message);\n+    }\n+\n+    @Override\n+    public void warn(@Nullable String message, @Nullable Throwable issue) {\n+        if (threshold.above(LogLevel.WARN)) {\n+            return;\n+        }\n+        log(LogLevel.WARN, message, issue);\n+    }\n+\n+    @Override\n+    public void info(@Nullable String message) {\n+        if (threshold.above(LogLevel.INFO)) {\n+            return;\n+        }\n+        log(LogLevel.INFO, message);\n+    }\n+\n+    @Override\n+    public void debug(@Nullable String message) {\n+        if (threshold.above(LogLevel.DEBUG)) {\n+            return;\n+        }\n+        log(LogLevel.DEBUG, message);\n+    }\n+\n+    @Override\n+    public void verbose(@Nullable String message) {\n+        if (threshold.above(LogLevel.VERBOSE)) {\n+            return;\n+        }\n+        log(LogLevel.VERBOSE, message);\n+    }\n+\n+    private void log(@NonNull LogLevel error, @Nullable String message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a6762ad59dcc5cf535786a61c21b7760e64f839"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ3NTY4MA==", "bodyText": "Good catch!  Naming it error was not intentional :)", "url": "https://github.com/aws-amplify/amplify-android/pull/744#discussion_r478475680", "createdAt": "2020-08-27T14:46:47Z", "author": {"login": "richardmcclellan"}, "path": "core/src/main/java/com/amplifyframework/logging/JavaLogger.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.logging;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.Objects;\n+\n+final class JavaLogger implements Logger {\n+    private final LogLevel threshold;\n+    private final String namespace;\n+\n+    JavaLogger(@NonNull String namespace, @NonNull LogLevel threshold) {\n+        this.threshold = Objects.requireNonNull(threshold);\n+        this.namespace = Objects.requireNonNull(namespace);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public LogLevel getThresholdLevel() {\n+        return threshold;\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String getNamespace() {\n+        return namespace;\n+    }\n+\n+    @Override\n+    public void error(@Nullable String message) {\n+        if (threshold.above(LogLevel.ERROR)) {\n+            return;\n+        }\n+        log(LogLevel.ERROR, message);\n+    }\n+\n+    @Override\n+    public void error(@Nullable String message, @Nullable Throwable error) {\n+        if (threshold.above(LogLevel.ERROR)) {\n+            return;\n+        }\n+        log(LogLevel.ERROR, message, error);\n+    }\n+\n+    @Override\n+    public void warn(@Nullable String message) {\n+        if (threshold.above(LogLevel.WARN)) {\n+            return;\n+        }\n+        log(LogLevel.WARN, message);\n+    }\n+\n+    @Override\n+    public void warn(@Nullable String message, @Nullable Throwable issue) {\n+        if (threshold.above(LogLevel.WARN)) {\n+            return;\n+        }\n+        log(LogLevel.WARN, message, issue);\n+    }\n+\n+    @Override\n+    public void info(@Nullable String message) {\n+        if (threshold.above(LogLevel.INFO)) {\n+            return;\n+        }\n+        log(LogLevel.INFO, message);\n+    }\n+\n+    @Override\n+    public void debug(@Nullable String message) {\n+        if (threshold.above(LogLevel.DEBUG)) {\n+            return;\n+        }\n+        log(LogLevel.DEBUG, message);\n+    }\n+\n+    @Override\n+    public void verbose(@Nullable String message) {\n+        if (threshold.above(LogLevel.VERBOSE)) {\n+            return;\n+        }\n+        log(LogLevel.VERBOSE, message);\n+    }\n+\n+    private void log(@NonNull LogLevel error, @Nullable String message) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODQ1NzY3MA=="}, "originalCommit": {"oid": "6a6762ad59dcc5cf535786a61c21b7760e64f839"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1195, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}