{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1MjAxOTQ1", "number": 770, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMTo0OTo0MlrOEelE0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyNjowN1rOEfBwgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNTAwMTc5OnYy", "diffSide": "RIGHT", "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/util/CognitoAuthExceptionConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMTo0OTo0MlrOHKT_Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNjoyMTozNVrOHK-mcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDU3NTI2Ng==", "bodyText": "You could further simplify your code in the plugin, by providing a default exception, here:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return null;\n          \n          \n            \n                    return new AuthException(fallbackMessage, error, \"See attached exception for more details.\");\n          \n      \n    \n    \n  \n\nThen, you'd only need to pass in an additional fallbackMessage when you call the lookup:\nAuthException mapped =\n    CognitoAuthExceptionConverter.lookup(\"Fallback message for some situation, here.\", error);\nNote: this is just a suggestion. You can choose not to do this.", "url": "https://github.com/aws-amplify/amplify-android/pull/770#discussion_r480575266", "createdAt": "2020-09-01T01:49:42Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/util/CognitoAuthExceptionConverter.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito.util;\n+\n+import com.amplifyframework.auth.AuthException;\n+\n+import com.amazonaws.services.cognitoidentityprovider.model.AliasExistsException;\n+import com.amazonaws.services.cognitoidentityprovider.model.CodeDeliveryFailureException;\n+import com.amazonaws.services.cognitoidentityprovider.model.CodeMismatchException;\n+import com.amazonaws.services.cognitoidentityprovider.model.ExpiredCodeException;\n+import com.amazonaws.services.cognitoidentityprovider.model.InvalidParameterException;\n+import com.amazonaws.services.cognitoidentityprovider.model.InvalidPasswordException;\n+import com.amazonaws.services.cognitoidentityprovider.model.LimitExceededException;\n+import com.amazonaws.services.cognitoidentityprovider.model.PasswordResetRequiredException;\n+import com.amazonaws.services.cognitoidentityprovider.model.ResourceNotFoundException;\n+import com.amazonaws.services.cognitoidentityprovider.model.TooManyFailedAttemptsException;\n+import com.amazonaws.services.cognitoidentityprovider.model.UnexpectedLambdaException;\n+import com.amazonaws.services.cognitoidentityprovider.model.UserNotConfirmedException;\n+import com.amazonaws.services.cognitoidentityprovider.model.UserNotFoundException;\n+import com.amazonaws.services.cognitoidentityprovider.model.UsernameExistsException;\n+\n+/**\n+ * Convert AWS Cognito Exceptions to AuthExceptions.\n+ */\n+public final class CognitoAuthExceptionConverter {\n+\n+    /**\n+     * Dis-allows instantiation of this class.\n+     */\n+    private CognitoAuthExceptionConverter() {}\n+\n+    /**\n+     * Lookup method to convert AWS Cognito Exception to AuthException.\n+     * @param error Exception thrown by AWSMobileClient\n+     * @return AuthException\n+     */\n+    public static AuthException lookup(Exception error) {\n+        if (error instanceof UserNotFoundException) {\n+            return new AuthException.UserNotFoundException(error);\n+        }\n+\n+        if (error instanceof UserNotConfirmedException) {\n+            return new AuthException.UserNotConfirmedException(error);\n+        }\n+\n+        if (error instanceof UsernameExistsException) {\n+            return new AuthException.UsernameExistsException(error);\n+        }\n+\n+        if (error instanceof AliasExistsException) {\n+            return new AuthException.AliasExistsException(error);\n+        }\n+\n+        if (error instanceof InvalidPasswordException) {\n+            return new AuthException.InvalidPasswordException(error);\n+        }\n+\n+        if (error instanceof InvalidParameterException) {\n+            return new AuthException.InvalidParameterException(error);\n+        }\n+\n+        if (error instanceof ExpiredCodeException) {\n+            return new AuthException.CodeExpiredException(error);\n+        }\n+\n+        if (error instanceof CodeMismatchException) {\n+            return new AuthException.CodeMismatchException(error);\n+        }\n+\n+        if (error instanceof CodeDeliveryFailureException) {\n+            return new AuthException.CodeDeliveryFailureException(error);\n+        }\n+\n+        if (error instanceof LimitExceededException) {\n+            return new AuthException.LimitExceededException(error);\n+        }\n+\n+        if (error instanceof ResourceNotFoundException) {\n+            return new AuthException.ResourceNotFoundException(error);\n+        }\n+\n+        if (error instanceof TooManyFailedAttemptsException) {\n+            return new AuthException.FailedAttemptsLimitExceededException(error);\n+        }\n+\n+        if (error instanceof UnexpectedLambdaException) {\n+            return new AuthException.LambdaException(error);\n+        }\n+\n+        if (error instanceof PasswordResetRequiredException) {\n+            return new AuthException.PasswordResetRequiredException(error);\n+        }\n+\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7adf48321a1f55608892566e625dc4093ce548f"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI3MzQ1Nw==", "bodyText": "This is a very good suggestion!", "url": "https://github.com/aws-amplify/amplify-android/pull/770#discussion_r481273457", "createdAt": "2020-09-01T16:21:35Z", "author": {"login": "changxu0306"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/util/CognitoAuthExceptionConverter.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito.util;\n+\n+import com.amplifyframework.auth.AuthException;\n+\n+import com.amazonaws.services.cognitoidentityprovider.model.AliasExistsException;\n+import com.amazonaws.services.cognitoidentityprovider.model.CodeDeliveryFailureException;\n+import com.amazonaws.services.cognitoidentityprovider.model.CodeMismatchException;\n+import com.amazonaws.services.cognitoidentityprovider.model.ExpiredCodeException;\n+import com.amazonaws.services.cognitoidentityprovider.model.InvalidParameterException;\n+import com.amazonaws.services.cognitoidentityprovider.model.InvalidPasswordException;\n+import com.amazonaws.services.cognitoidentityprovider.model.LimitExceededException;\n+import com.amazonaws.services.cognitoidentityprovider.model.PasswordResetRequiredException;\n+import com.amazonaws.services.cognitoidentityprovider.model.ResourceNotFoundException;\n+import com.amazonaws.services.cognitoidentityprovider.model.TooManyFailedAttemptsException;\n+import com.amazonaws.services.cognitoidentityprovider.model.UnexpectedLambdaException;\n+import com.amazonaws.services.cognitoidentityprovider.model.UserNotConfirmedException;\n+import com.amazonaws.services.cognitoidentityprovider.model.UserNotFoundException;\n+import com.amazonaws.services.cognitoidentityprovider.model.UsernameExistsException;\n+\n+/**\n+ * Convert AWS Cognito Exceptions to AuthExceptions.\n+ */\n+public final class CognitoAuthExceptionConverter {\n+\n+    /**\n+     * Dis-allows instantiation of this class.\n+     */\n+    private CognitoAuthExceptionConverter() {}\n+\n+    /**\n+     * Lookup method to convert AWS Cognito Exception to AuthException.\n+     * @param error Exception thrown by AWSMobileClient\n+     * @return AuthException\n+     */\n+    public static AuthException lookup(Exception error) {\n+        if (error instanceof UserNotFoundException) {\n+            return new AuthException.UserNotFoundException(error);\n+        }\n+\n+        if (error instanceof UserNotConfirmedException) {\n+            return new AuthException.UserNotConfirmedException(error);\n+        }\n+\n+        if (error instanceof UsernameExistsException) {\n+            return new AuthException.UsernameExistsException(error);\n+        }\n+\n+        if (error instanceof AliasExistsException) {\n+            return new AuthException.AliasExistsException(error);\n+        }\n+\n+        if (error instanceof InvalidPasswordException) {\n+            return new AuthException.InvalidPasswordException(error);\n+        }\n+\n+        if (error instanceof InvalidParameterException) {\n+            return new AuthException.InvalidParameterException(error);\n+        }\n+\n+        if (error instanceof ExpiredCodeException) {\n+            return new AuthException.CodeExpiredException(error);\n+        }\n+\n+        if (error instanceof CodeMismatchException) {\n+            return new AuthException.CodeMismatchException(error);\n+        }\n+\n+        if (error instanceof CodeDeliveryFailureException) {\n+            return new AuthException.CodeDeliveryFailureException(error);\n+        }\n+\n+        if (error instanceof LimitExceededException) {\n+            return new AuthException.LimitExceededException(error);\n+        }\n+\n+        if (error instanceof ResourceNotFoundException) {\n+            return new AuthException.ResourceNotFoundException(error);\n+        }\n+\n+        if (error instanceof TooManyFailedAttemptsException) {\n+            return new AuthException.FailedAttemptsLimitExceededException(error);\n+        }\n+\n+        if (error instanceof UnexpectedLambdaException) {\n+            return new AuthException.LambdaException(error);\n+        }\n+\n+        if (error instanceof PasswordResetRequiredException) {\n+            return new AuthException.PasswordResetRequiredException(error);\n+        }\n+\n+        return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDU3NTI2Ng=="}, "originalCommit": {"oid": "f7adf48321a1f55608892566e625dc4093ce548f"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNTAwNTU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/auth/AuthException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMTo1MDoxN1rOHKUBfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMTo1MDoxN1rOHKUBfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDU3NTg3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Could not perform the action because Amazon Cognito service cannot find the requested resource.\n          \n          \n            \n                 * Could not perform the action because Amplify cannot find the requested resource.", "url": "https://github.com/aws-amplify/amplify-android/pull/770#discussion_r480575870", "createdAt": "2020-09-01T01:50:17Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthException.java", "diffHunk": "@@ -191,4 +191,286 @@ public UnknownException(Throwable cause) {\n             );\n         }\n     }\n+\n+    /**\n+     * Could not perform the action because user not found in the system.\n+     */\n+    public static class UserNotFoundException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"User not found in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Please enter correct username.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         *\n+         * @param cause The original error.\n+         */\n+        public UserNotFoundException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because user not confirmed in the system.\n+     */\n+    public static class UserNotConfirmedException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"User not confirmed in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Please confirm user first and then retry operation\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public UserNotConfirmedException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because username already exists in the system.\n+     */\n+    public static class UsernameExistsException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Username already exists in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Retry operation and enter another username.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public UsernameExistsException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because alias (an account with certain email or phone) already exists in the system.\n+     */\n+    public static class AliasExistsException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE =\n+                \"Alias (an account with this email or phone) already exists in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Retry operation and use another alias.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public AliasExistsException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because error occurs when delivering the confirmation code.\n+     */\n+    public static class CodeDeliveryFailureException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Error in delivering the confirmation code.\";\n+        private static final String RECOVERY_SUGGESTION = \"Retry operation and send another confirmation code.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public CodeDeliveryFailureException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because user enters incorrect confirmation code.\n+     */\n+    public static class CodeMismatchException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Confirmation code entered is not correct.\";\n+        private static final String RECOVERY_SUGGESTION = \"Enter correct confirmation code.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public CodeMismatchException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because confirmation code has expired.\n+     */\n+    public static class CodeExpiredException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Confirmation code has expired.\";\n+        private static final String RECOVERY_SUGGESTION =\n+                \"Resend a new confirmation code and then retry operation with it.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public CodeExpiredException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because there exists incorrect parameters.\n+     */\n+    public static class InvalidParameterException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"One or more parameters are incorrect.\";\n+        private static final String RECOVERY_SUGGESTION = \"Enter correct parameters.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public InvalidParameterException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because the password given is invalid.\n+     */\n+    public static class InvalidPasswordException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"The password given is invalid.\";\n+        private static final String RECOVERY_SUGGESTION = \"Enter correct password.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public InvalidPasswordException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because number of allowed operation has exceeded.\n+     */\n+    public static class LimitExceededException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Number of allowed operation has exceeded.\";\n+        private static final String RECOVERY_SUGGESTION =\n+                \"Please wait a while before re-attempting or increase the service limit.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public LimitExceededException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because password needs to be reset.\n+     */\n+    public static class PasswordResetRequiredException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Required to reset the password of the user.\";\n+        private static final String RECOVERY_SUGGESTION = \"Reset the password of the user.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public PasswordResetRequiredException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because Amazon Cognito service cannot find the requested resource.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7adf48321a1f55608892566e625dc4093ce548f"}, "originalPosition": 197}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNTAxMzI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/auth/AuthException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMTo1MTozNFrOHKUG6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMTo1MTozNFrOHKUG6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDU3NzI1Nw==", "bodyText": "This type of exception is also implementation specific. (The Auth category doesn't need to involved AWS Lambda, necessarily.) I'd recommend to remove this LambdaException entirely.", "url": "https://github.com/aws-amplify/amplify-android/pull/770#discussion_r480577257", "createdAt": "2020-09-01T01:51:34Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthException.java", "diffHunk": "@@ -191,4 +191,286 @@ public UnknownException(Throwable cause) {\n             );\n         }\n     }\n+\n+    /**\n+     * Could not perform the action because user not found in the system.\n+     */\n+    public static class UserNotFoundException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"User not found in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Please enter correct username.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         *\n+         * @param cause The original error.\n+         */\n+        public UserNotFoundException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because user not confirmed in the system.\n+     */\n+    public static class UserNotConfirmedException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"User not confirmed in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Please confirm user first and then retry operation\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public UserNotConfirmedException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because username already exists in the system.\n+     */\n+    public static class UsernameExistsException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Username already exists in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Retry operation and enter another username.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public UsernameExistsException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because alias (an account with certain email or phone) already exists in the system.\n+     */\n+    public static class AliasExistsException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE =\n+                \"Alias (an account with this email or phone) already exists in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Retry operation and use another alias.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public AliasExistsException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because error occurs when delivering the confirmation code.\n+     */\n+    public static class CodeDeliveryFailureException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Error in delivering the confirmation code.\";\n+        private static final String RECOVERY_SUGGESTION = \"Retry operation and send another confirmation code.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public CodeDeliveryFailureException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because user enters incorrect confirmation code.\n+     */\n+    public static class CodeMismatchException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Confirmation code entered is not correct.\";\n+        private static final String RECOVERY_SUGGESTION = \"Enter correct confirmation code.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public CodeMismatchException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because confirmation code has expired.\n+     */\n+    public static class CodeExpiredException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Confirmation code has expired.\";\n+        private static final String RECOVERY_SUGGESTION =\n+                \"Resend a new confirmation code and then retry operation with it.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public CodeExpiredException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because there exists incorrect parameters.\n+     */\n+    public static class InvalidParameterException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"One or more parameters are incorrect.\";\n+        private static final String RECOVERY_SUGGESTION = \"Enter correct parameters.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public InvalidParameterException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because the password given is invalid.\n+     */\n+    public static class InvalidPasswordException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"The password given is invalid.\";\n+        private static final String RECOVERY_SUGGESTION = \"Enter correct password.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public InvalidPasswordException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because number of allowed operation has exceeded.\n+     */\n+    public static class LimitExceededException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Number of allowed operation has exceeded.\";\n+        private static final String RECOVERY_SUGGESTION =\n+                \"Please wait a while before re-attempting or increase the service limit.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public LimitExceededException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because password needs to be reset.\n+     */\n+    public static class PasswordResetRequiredException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Required to reset the password of the user.\";\n+        private static final String RECOVERY_SUGGESTION = \"Reset the password of the user.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public PasswordResetRequiredException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because Amazon Cognito service cannot find the requested resource.\n+     */\n+    public static class ResourceNotFoundException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Could not find the requested online resource.\";\n+        private static final String RECOVERY_SUGGESTION = \"Retry with exponential back-off\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public ResourceNotFoundException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because user made too many failed attempts for a given action.\n+     */\n+    public static class FailedAttemptsLimitExceededException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"User has made too many failed attempts for a given action.\";\n+        private static final String RECOVERY_SUGGESTION =\n+                \"Please check out the service configuration to see the condition of locking.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public FailedAttemptsLimitExceededException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because Amazon Cognito service encounters an invalid AWS Lambda response\n+     * or encounters an unexpected exception with the AWS Lambda service.\n+     */\n+    public static class LambdaException extends AuthException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7adf48321a1f55608892566e625dc4093ce548f"}, "originalPosition": 235}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNTAxNjM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/auth/AuthException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMTo1MjowNVrOHKUI6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwMTo1MjowNVrOHKUI6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDU3Nzc3MQ==", "bodyText": "Mentions two details of the implementation -- Cognito, Lambda. That's fine for the plugin, but not the category, which is abstract.", "url": "https://github.com/aws-amplify/amplify-android/pull/770#discussion_r480577771", "createdAt": "2020-09-01T01:52:05Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthException.java", "diffHunk": "@@ -191,4 +191,286 @@ public UnknownException(Throwable cause) {\n             );\n         }\n     }\n+\n+    /**\n+     * Could not perform the action because user not found in the system.\n+     */\n+    public static class UserNotFoundException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"User not found in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Please enter correct username.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         *\n+         * @param cause The original error.\n+         */\n+        public UserNotFoundException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because user not confirmed in the system.\n+     */\n+    public static class UserNotConfirmedException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"User not confirmed in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Please confirm user first and then retry operation\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public UserNotConfirmedException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because username already exists in the system.\n+     */\n+    public static class UsernameExistsException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Username already exists in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Retry operation and enter another username.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public UsernameExistsException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because alias (an account with certain email or phone) already exists in the system.\n+     */\n+    public static class AliasExistsException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE =\n+                \"Alias (an account with this email or phone) already exists in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Retry operation and use another alias.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public AliasExistsException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because error occurs when delivering the confirmation code.\n+     */\n+    public static class CodeDeliveryFailureException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Error in delivering the confirmation code.\";\n+        private static final String RECOVERY_SUGGESTION = \"Retry operation and send another confirmation code.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public CodeDeliveryFailureException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because user enters incorrect confirmation code.\n+     */\n+    public static class CodeMismatchException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Confirmation code entered is not correct.\";\n+        private static final String RECOVERY_SUGGESTION = \"Enter correct confirmation code.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public CodeMismatchException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because confirmation code has expired.\n+     */\n+    public static class CodeExpiredException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Confirmation code has expired.\";\n+        private static final String RECOVERY_SUGGESTION =\n+                \"Resend a new confirmation code and then retry operation with it.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public CodeExpiredException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because there exists incorrect parameters.\n+     */\n+    public static class InvalidParameterException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"One or more parameters are incorrect.\";\n+        private static final String RECOVERY_SUGGESTION = \"Enter correct parameters.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public InvalidParameterException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because the password given is invalid.\n+     */\n+    public static class InvalidPasswordException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"The password given is invalid.\";\n+        private static final String RECOVERY_SUGGESTION = \"Enter correct password.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public InvalidPasswordException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because number of allowed operation has exceeded.\n+     */\n+    public static class LimitExceededException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Number of allowed operation has exceeded.\";\n+        private static final String RECOVERY_SUGGESTION =\n+                \"Please wait a while before re-attempting or increase the service limit.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public LimitExceededException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because password needs to be reset.\n+     */\n+    public static class PasswordResetRequiredException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Required to reset the password of the user.\";\n+        private static final String RECOVERY_SUGGESTION = \"Reset the password of the user.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public PasswordResetRequiredException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because Amazon Cognito service cannot find the requested resource.\n+     */\n+    public static class ResourceNotFoundException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Could not find the requested online resource.\";\n+        private static final String RECOVERY_SUGGESTION = \"Retry with exponential back-off\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public ResourceNotFoundException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because user made too many failed attempts for a given action.\n+     */\n+    public static class FailedAttemptsLimitExceededException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"User has made too many failed attempts for a given action.\";\n+        private static final String RECOVERY_SUGGESTION =\n+                \"Please check out the service configuration to see the condition of locking.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public FailedAttemptsLimitExceededException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because Amazon Cognito service encounters an invalid AWS Lambda response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7adf48321a1f55608892566e625dc4093ce548f"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTU0NzI1OnYy", "diffSide": "RIGHT", "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/util/CognitoAuthExceptionConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzo0MToyMFrOHLBdFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzo1ODo1M1rOHLCElQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyMDIxNQ==", "bodyText": "A bit of nit picking but it was counter intuitive to me seeing this used with the string as the first parameter. It makes it seem like the string is what you're looking up. I think it'd be more intuitive to change the order of these parameters to make clear you're looking up the error and then specifying what message to use. You can use Android Studio to easily refactor the parameter order without having to worry about changing all the places this is used manually.", "url": "https://github.com/aws-amplify/amplify-android/pull/770#discussion_r481320215", "createdAt": "2020-09-01T17:41:20Z", "author": {"login": "TrekSoft"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/util/CognitoAuthExceptionConverter.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito.util;\n+\n+import com.amplifyframework.auth.AuthException;\n+\n+import com.amazonaws.services.cognitoidentityprovider.model.AliasExistsException;\n+import com.amazonaws.services.cognitoidentityprovider.model.CodeDeliveryFailureException;\n+import com.amazonaws.services.cognitoidentityprovider.model.CodeMismatchException;\n+import com.amazonaws.services.cognitoidentityprovider.model.ExpiredCodeException;\n+import com.amazonaws.services.cognitoidentityprovider.model.InvalidParameterException;\n+import com.amazonaws.services.cognitoidentityprovider.model.InvalidPasswordException;\n+import com.amazonaws.services.cognitoidentityprovider.model.LimitExceededException;\n+import com.amazonaws.services.cognitoidentityprovider.model.PasswordResetRequiredException;\n+import com.amazonaws.services.cognitoidentityprovider.model.ResourceNotFoundException;\n+import com.amazonaws.services.cognitoidentityprovider.model.TooManyFailedAttemptsException;\n+import com.amazonaws.services.cognitoidentityprovider.model.UserNotConfirmedException;\n+import com.amazonaws.services.cognitoidentityprovider.model.UserNotFoundException;\n+import com.amazonaws.services.cognitoidentityprovider.model.UsernameExistsException;\n+\n+/**\n+ * Convert AWS Cognito Exceptions to AuthExceptions.\n+ */\n+public final class CognitoAuthExceptionConverter {\n+\n+    /**\n+     * Dis-allows instantiation of this class.\n+     */\n+    private CognitoAuthExceptionConverter() {}\n+\n+    /**\n+     * Lookup method to convert AWS Cognito Exception to AuthException.\n+     * @param fallbackMessage Fallback message to inform failure\n+     * @param error Exception thrown by AWSMobileClient\n+     * @return AuthException\n+     */\n+    public static AuthException lookup(String fallbackMessage, Exception error) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3498ed6404da66e8ce9b71068da4e6c27808c990"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMzMDMyNQ==", "bodyText": "I really like this detailed suggestion\ud83d\ude04 Yeah it's just like reading a book and the order of parameters matters a lot.", "url": "https://github.com/aws-amplify/amplify-android/pull/770#discussion_r481330325", "createdAt": "2020-09-01T17:58:53Z", "author": {"login": "changxu0306"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/util/CognitoAuthExceptionConverter.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito.util;\n+\n+import com.amplifyframework.auth.AuthException;\n+\n+import com.amazonaws.services.cognitoidentityprovider.model.AliasExistsException;\n+import com.amazonaws.services.cognitoidentityprovider.model.CodeDeliveryFailureException;\n+import com.amazonaws.services.cognitoidentityprovider.model.CodeMismatchException;\n+import com.amazonaws.services.cognitoidentityprovider.model.ExpiredCodeException;\n+import com.amazonaws.services.cognitoidentityprovider.model.InvalidParameterException;\n+import com.amazonaws.services.cognitoidentityprovider.model.InvalidPasswordException;\n+import com.amazonaws.services.cognitoidentityprovider.model.LimitExceededException;\n+import com.amazonaws.services.cognitoidentityprovider.model.PasswordResetRequiredException;\n+import com.amazonaws.services.cognitoidentityprovider.model.ResourceNotFoundException;\n+import com.amazonaws.services.cognitoidentityprovider.model.TooManyFailedAttemptsException;\n+import com.amazonaws.services.cognitoidentityprovider.model.UserNotConfirmedException;\n+import com.amazonaws.services.cognitoidentityprovider.model.UserNotFoundException;\n+import com.amazonaws.services.cognitoidentityprovider.model.UsernameExistsException;\n+\n+/**\n+ * Convert AWS Cognito Exceptions to AuthExceptions.\n+ */\n+public final class CognitoAuthExceptionConverter {\n+\n+    /**\n+     * Dis-allows instantiation of this class.\n+     */\n+    private CognitoAuthExceptionConverter() {}\n+\n+    /**\n+     * Lookup method to convert AWS Cognito Exception to AuthException.\n+     * @param fallbackMessage Fallback message to inform failure\n+     * @param error Exception thrown by AWSMobileClient\n+     * @return AuthException\n+     */\n+    public static AuthException lookup(String fallbackMessage, Exception error) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyMDIxNQ=="}, "originalCommit": {"oid": "3498ed6404da66e8ce9b71068da4e6c27808c990"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTU1OTU3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/auth/AuthException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzo0NDo1MFrOHLBk1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzo0NDo1MFrOHLBk1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMyMjE5Ng==", "bodyText": "\"... or check your config file to be sure the endpoint is valid.\"", "url": "https://github.com/aws-amplify/amplify-android/pull/770#discussion_r481322196", "createdAt": "2020-09-01T17:44:50Z", "author": {"login": "TrekSoft"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthException.java", "diffHunk": "@@ -191,4 +191,230 @@ public UnknownException(Throwable cause) {\n             );\n         }\n     }\n+\n+    /**\n+     * Could not perform the action because user not found in the system.\n+     */\n+    public static class UserNotFoundException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"User not found in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Please enter correct username.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         *\n+         * @param cause The original error.\n+         */\n+        public UserNotFoundException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because user not confirmed in the system.\n+     */\n+    public static class UserNotConfirmedException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"User not confirmed in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Please confirm user first and then retry operation\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public UserNotConfirmedException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because username already exists in the system.\n+     */\n+    public static class UsernameExistsException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Username already exists in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Retry operation and enter another username.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public UsernameExistsException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because alias (an account with certain email or phone) already exists in the system.\n+     */\n+    public static class AliasExistsException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE =\n+                \"Alias (an account with this email or phone) already exists in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Retry operation and use another alias.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public AliasExistsException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because error occurs when delivering the confirmation code.\n+     */\n+    public static class CodeDeliveryFailureException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Error in delivering the confirmation code.\";\n+        private static final String RECOVERY_SUGGESTION = \"Retry operation and send another confirmation code.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public CodeDeliveryFailureException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because user enters incorrect confirmation code.\n+     */\n+    public static class CodeMismatchException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Confirmation code entered is not correct.\";\n+        private static final String RECOVERY_SUGGESTION = \"Enter correct confirmation code.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public CodeMismatchException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because confirmation code has expired.\n+     */\n+    public static class CodeExpiredException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Confirmation code has expired.\";\n+        private static final String RECOVERY_SUGGESTION =\n+                \"Resend a new confirmation code and then retry operation with it.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public CodeExpiredException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because there exists incorrect parameters.\n+     */\n+    public static class InvalidParameterException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"One or more parameters are incorrect.\";\n+        private static final String RECOVERY_SUGGESTION = \"Enter correct parameters.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public InvalidParameterException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because the password given is invalid.\n+     */\n+    public static class InvalidPasswordException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"The password given is invalid.\";\n+        private static final String RECOVERY_SUGGESTION = \"Enter correct password.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public InvalidPasswordException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because number of allowed operation has exceeded.\n+     */\n+    public static class LimitExceededException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Number of allowed operation has exceeded.\";\n+        private static final String RECOVERY_SUGGESTION =\n+                \"Please wait a while before re-attempting or increase the service limit.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public LimitExceededException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because password needs to be reset.\n+     */\n+    public static class PasswordResetRequiredException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Required to reset the password of the user.\";\n+        private static final String RECOVERY_SUGGESTION = \"Reset the password of the user.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public PasswordResetRequiredException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because Amplify cannot find the requested resource.\n+     */\n+    public static class ResourceNotFoundException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Could not find the requested online resource.\";\n+        private static final String RECOVERY_SUGGESTION = \"Retry with exponential back-off\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3498ed6404da66e8ce9b71068da4e6c27808c990"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY3NjY3OnYy", "diffSide": "RIGHT", "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/util/CognitoAuthExceptionConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxODo1M1rOHLCvGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoxODo1M1rOHLCvGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MTIwOA==", "bodyText": "quick description? e.g.\n@return AuthException Specific exception for Amplify Auth", "url": "https://github.com/aws-amplify/amplify-android/pull/770#discussion_r481341208", "createdAt": "2020-09-01T18:18:53Z", "author": {"login": "raphkim"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/util/CognitoAuthExceptionConverter.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito.util;\n+\n+import com.amplifyframework.auth.AuthException;\n+\n+import com.amazonaws.services.cognitoidentityprovider.model.AliasExistsException;\n+import com.amazonaws.services.cognitoidentityprovider.model.CodeDeliveryFailureException;\n+import com.amazonaws.services.cognitoidentityprovider.model.CodeMismatchException;\n+import com.amazonaws.services.cognitoidentityprovider.model.ExpiredCodeException;\n+import com.amazonaws.services.cognitoidentityprovider.model.InvalidParameterException;\n+import com.amazonaws.services.cognitoidentityprovider.model.InvalidPasswordException;\n+import com.amazonaws.services.cognitoidentityprovider.model.LimitExceededException;\n+import com.amazonaws.services.cognitoidentityprovider.model.PasswordResetRequiredException;\n+import com.amazonaws.services.cognitoidentityprovider.model.ResourceNotFoundException;\n+import com.amazonaws.services.cognitoidentityprovider.model.TooManyFailedAttemptsException;\n+import com.amazonaws.services.cognitoidentityprovider.model.UserNotConfirmedException;\n+import com.amazonaws.services.cognitoidentityprovider.model.UserNotFoundException;\n+import com.amazonaws.services.cognitoidentityprovider.model.UsernameExistsException;\n+\n+/**\n+ * Convert AWS Cognito Exceptions to AuthExceptions.\n+ */\n+public final class CognitoAuthExceptionConverter {\n+\n+    /**\n+     * Dis-allows instantiation of this class.\n+     */\n+    private CognitoAuthExceptionConverter() {}\n+\n+    /**\n+     * Lookup method to convert AWS Cognito Exception to AuthException.\n+     * @param error Exception thrown by AWSMobileClient\n+     * @param fallbackMessage Fallback message to inform failure\n+     * @return AuthException", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d38fcc4f6f694183f24553dda5253c956ff28e92"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY4NDcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/auth/AuthException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMTowN1rOHLC0DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMTowN1rOHLC0DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MjQ3Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Could not perform the action because user enters incorrect confirmation code.\n          \n          \n            \n                 * Could not perform the action because user entered incorrect confirmation code.", "url": "https://github.com/aws-amplify/amplify-android/pull/770#discussion_r481342476", "createdAt": "2020-09-01T18:21:07Z", "author": {"login": "raphkim"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthException.java", "diffHunk": "@@ -191,4 +191,231 @@ public UnknownException(Throwable cause) {\n             );\n         }\n     }\n+\n+    /**\n+     * Could not perform the action because user not found in the system.\n+     */\n+    public static class UserNotFoundException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"User not found in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Please enter correct username.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         *\n+         * @param cause The original error.\n+         */\n+        public UserNotFoundException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because user not confirmed in the system.\n+     */\n+    public static class UserNotConfirmedException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"User not confirmed in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Please confirm user first and then retry operation\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public UserNotConfirmedException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because username already exists in the system.\n+     */\n+    public static class UsernameExistsException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Username already exists in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Retry operation and enter another username.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public UsernameExistsException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because alias (an account with certain email or phone) already exists in the system.\n+     */\n+    public static class AliasExistsException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE =\n+                \"Alias (an account with this email or phone) already exists in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Retry operation and use another alias.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public AliasExistsException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because error occurs when delivering the confirmation code.\n+     */\n+    public static class CodeDeliveryFailureException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Error in delivering the confirmation code.\";\n+        private static final String RECOVERY_SUGGESTION = \"Retry operation and send another confirmation code.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public CodeDeliveryFailureException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because user enters incorrect confirmation code.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d38fcc4f6f694183f24553dda5253c956ff28e92"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY4NTk0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/auth/AuthException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMToyOVrOHLC0zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMToyOVrOHLC0zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MjY3MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Could not perform the action because error occurs when delivering the confirmation code.\n          \n          \n            \n                 * Could not perform the action because error occurred when delivering the confirmation code.", "url": "https://github.com/aws-amplify/amplify-android/pull/770#discussion_r481342671", "createdAt": "2020-09-01T18:21:29Z", "author": {"login": "raphkim"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthException.java", "diffHunk": "@@ -191,4 +191,231 @@ public UnknownException(Throwable cause) {\n             );\n         }\n     }\n+\n+    /**\n+     * Could not perform the action because user not found in the system.\n+     */\n+    public static class UserNotFoundException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"User not found in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Please enter correct username.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         *\n+         * @param cause The original error.\n+         */\n+        public UserNotFoundException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because user not confirmed in the system.\n+     */\n+    public static class UserNotConfirmedException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"User not confirmed in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Please confirm user first and then retry operation\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public UserNotConfirmedException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because username already exists in the system.\n+     */\n+    public static class UsernameExistsException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Username already exists in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Retry operation and enter another username.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public UsernameExistsException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because alias (an account with certain email or phone) already exists in the system.\n+     */\n+    public static class AliasExistsException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE =\n+                \"Alias (an account with this email or phone) already exists in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Retry operation and use another alias.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public AliasExistsException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because error occurs when delivering the confirmation code.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d38fcc4f6f694183f24553dda5253c956ff28e92"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY4NzE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/auth/AuthException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMTo0OVrOHLC1gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMTo0OVrOHLC1gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0Mjg1MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Could not perform the action because user not confirmed in the system.\n          \n          \n            \n                 * Could not perform the action because user is not confirmed in the system.", "url": "https://github.com/aws-amplify/amplify-android/pull/770#discussion_r481342851", "createdAt": "2020-09-01T18:21:49Z", "author": {"login": "raphkim"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthException.java", "diffHunk": "@@ -191,4 +191,231 @@ public UnknownException(Throwable cause) {\n             );\n         }\n     }\n+\n+    /**\n+     * Could not perform the action because user not found in the system.\n+     */\n+    public static class UserNotFoundException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"User not found in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Please enter correct username.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         *\n+         * @param cause The original error.\n+         */\n+        public UserNotFoundException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because user not confirmed in the system.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d38fcc4f6f694183f24553dda5253c956ff28e92"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY4Nzg4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/auth/AuthException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMTo1OVrOHLC17w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMTo1OVrOHLC17w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0Mjk1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Could not perform the action because user not found in the system.\n          \n          \n            \n                 * Could not perform the action because user was not found in the system.", "url": "https://github.com/aws-amplify/amplify-android/pull/770#discussion_r481342959", "createdAt": "2020-09-01T18:21:59Z", "author": {"login": "raphkim"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthException.java", "diffHunk": "@@ -191,4 +191,231 @@ public UnknownException(Throwable cause) {\n             );\n         }\n     }\n+\n+    /**\n+     * Could not perform the action because user not found in the system.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d38fcc4f6f694183f24553dda5253c956ff28e92"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY5MDIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/auth/AuthException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMjo0NVrOHLC3cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyMjo0NVrOHLC3cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0MzM0Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Could not perform the action because there exists incorrect parameters.\n          \n          \n            \n                 * Could not perform the action because there are incorrect parameters.", "url": "https://github.com/aws-amplify/amplify-android/pull/770#discussion_r481343346", "createdAt": "2020-09-01T18:22:45Z", "author": {"login": "raphkim"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthException.java", "diffHunk": "@@ -191,4 +191,231 @@ public UnknownException(Throwable cause) {\n             );\n         }\n     }\n+\n+    /**\n+     * Could not perform the action because user not found in the system.\n+     */\n+    public static class UserNotFoundException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"User not found in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Please enter correct username.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         *\n+         * @param cause The original error.\n+         */\n+        public UserNotFoundException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because user not confirmed in the system.\n+     */\n+    public static class UserNotConfirmedException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"User not confirmed in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Please confirm user first and then retry operation\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public UserNotConfirmedException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because username already exists in the system.\n+     */\n+    public static class UsernameExistsException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Username already exists in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Retry operation and enter another username.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public UsernameExistsException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because alias (an account with certain email or phone) already exists in the system.\n+     */\n+    public static class AliasExistsException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE =\n+                \"Alias (an account with this email or phone) already exists in the system.\";\n+        private static final String RECOVERY_SUGGESTION = \"Retry operation and use another alias.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public AliasExistsException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because error occurs when delivering the confirmation code.\n+     */\n+    public static class CodeDeliveryFailureException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Error in delivering the confirmation code.\";\n+        private static final String RECOVERY_SUGGESTION = \"Retry operation and send another confirmation code.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public CodeDeliveryFailureException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because user enters incorrect confirmation code.\n+     */\n+    public static class CodeMismatchException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Confirmation code entered is not correct.\";\n+        private static final String RECOVERY_SUGGESTION = \"Enter correct confirmation code.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public CodeMismatchException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because confirmation code has expired.\n+     */\n+    public static class CodeExpiredException extends AuthException {\n+        private static final long serialVersionUID = 1L;\n+        private static final String MESSAGE = \"Confirmation code has expired.\";\n+        private static final String RECOVERY_SUGGESTION =\n+                \"Resend a new confirmation code and then retry operation with it.\";\n+\n+        /**\n+         * Default message/recovery suggestion with a cause.\n+         * @param cause The original error.\n+         */\n+        public CodeExpiredException(Throwable cause) {\n+            super(MESSAGE, cause, RECOVERY_SUGGESTION);\n+        }\n+    }\n+\n+    /**\n+     * Could not perform the action because there exists incorrect parameters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d38fcc4f6f694183f24553dda5253c956ff28e92"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTY5OTU1OnYy", "diffSide": "RIGHT", "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/util/CognitoAuthExceptionConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyNTozNVrOHLC9Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyNTozNVrOHLC9Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0NDg3MA==", "bodyText": "Prefix with @NonNull to let developers know that this operation always returns a non-null exception.\nThe parameters should also have @NonNull and/or @Nullable tags.\nThe above practice should be used for every publicly exposed methods throughout the repo :)", "url": "https://github.com/aws-amplify/amplify-android/pull/770#discussion_r481344870", "createdAt": "2020-09-01T18:25:35Z", "author": {"login": "raphkim"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/util/CognitoAuthExceptionConverter.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito.util;\n+\n+import com.amplifyframework.auth.AuthException;\n+\n+import com.amazonaws.services.cognitoidentityprovider.model.AliasExistsException;\n+import com.amazonaws.services.cognitoidentityprovider.model.CodeDeliveryFailureException;\n+import com.amazonaws.services.cognitoidentityprovider.model.CodeMismatchException;\n+import com.amazonaws.services.cognitoidentityprovider.model.ExpiredCodeException;\n+import com.amazonaws.services.cognitoidentityprovider.model.InvalidParameterException;\n+import com.amazonaws.services.cognitoidentityprovider.model.InvalidPasswordException;\n+import com.amazonaws.services.cognitoidentityprovider.model.LimitExceededException;\n+import com.amazonaws.services.cognitoidentityprovider.model.PasswordResetRequiredException;\n+import com.amazonaws.services.cognitoidentityprovider.model.ResourceNotFoundException;\n+import com.amazonaws.services.cognitoidentityprovider.model.TooManyFailedAttemptsException;\n+import com.amazonaws.services.cognitoidentityprovider.model.UserNotConfirmedException;\n+import com.amazonaws.services.cognitoidentityprovider.model.UserNotFoundException;\n+import com.amazonaws.services.cognitoidentityprovider.model.UsernameExistsException;\n+\n+/**\n+ * Convert AWS Cognito Exceptions to AuthExceptions.\n+ */\n+public final class CognitoAuthExceptionConverter {\n+\n+    /**\n+     * Dis-allows instantiation of this class.\n+     */\n+    private CognitoAuthExceptionConverter() {}\n+\n+    /**\n+     * Lookup method to convert AWS Cognito Exception to AuthException.\n+     * @param error Exception thrown by AWSMobileClient\n+     * @param fallbackMessage Fallback message to inform failure\n+     * @return AuthException\n+     */\n+    public static AuthException lookup(Exception error, String fallbackMessage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d38fcc4f6f694183f24553dda5253c956ff28e92"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTcwMTE1OnYy", "diffSide": "RIGHT", "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/util/CognitoAuthExceptionConverter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyNjowN1rOHLC-hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODoyNjowN1rOHLC-hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM0NTE1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public static AuthException lookup(Exception error, String fallbackMessage) {\n          \n          \n            \n                @NonNull\n          \n          \n            \n                public static AuthException lookup(@NonNull Exception error, @NonNull String fallbackMessage) {", "url": "https://github.com/aws-amplify/amplify-android/pull/770#discussion_r481345158", "createdAt": "2020-09-01T18:26:07Z", "author": {"login": "raphkim"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/util/CognitoAuthExceptionConverter.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito.util;\n+\n+import com.amplifyframework.auth.AuthException;\n+\n+import com.amazonaws.services.cognitoidentityprovider.model.AliasExistsException;\n+import com.amazonaws.services.cognitoidentityprovider.model.CodeDeliveryFailureException;\n+import com.amazonaws.services.cognitoidentityprovider.model.CodeMismatchException;\n+import com.amazonaws.services.cognitoidentityprovider.model.ExpiredCodeException;\n+import com.amazonaws.services.cognitoidentityprovider.model.InvalidParameterException;\n+import com.amazonaws.services.cognitoidentityprovider.model.InvalidPasswordException;\n+import com.amazonaws.services.cognitoidentityprovider.model.LimitExceededException;\n+import com.amazonaws.services.cognitoidentityprovider.model.PasswordResetRequiredException;\n+import com.amazonaws.services.cognitoidentityprovider.model.ResourceNotFoundException;\n+import com.amazonaws.services.cognitoidentityprovider.model.TooManyFailedAttemptsException;\n+import com.amazonaws.services.cognitoidentityprovider.model.UserNotConfirmedException;\n+import com.amazonaws.services.cognitoidentityprovider.model.UserNotFoundException;\n+import com.amazonaws.services.cognitoidentityprovider.model.UsernameExistsException;\n+\n+/**\n+ * Convert AWS Cognito Exceptions to AuthExceptions.\n+ */\n+public final class CognitoAuthExceptionConverter {\n+\n+    /**\n+     * Dis-allows instantiation of this class.\n+     */\n+    private CognitoAuthExceptionConverter() {}\n+\n+    /**\n+     * Lookup method to convert AWS Cognito Exception to AuthException.\n+     * @param error Exception thrown by AWSMobileClient\n+     * @param fallbackMessage Fallback message to inform failure\n+     * @return AuthException\n+     */\n+    public static AuthException lookup(Exception error, String fallbackMessage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d38fcc4f6f694183f24553dda5253c956ff28e92"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 894, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}