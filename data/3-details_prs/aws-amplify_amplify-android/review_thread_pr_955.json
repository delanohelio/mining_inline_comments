{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NjIzNTI2", "number": 955, "reviewThreads": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzowMTowOVrOE23LVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjoxODo1NFrOE6Qjww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTYyNTgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/storage/StorageCategoryBehavior.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzowMTowOVrOHv4hvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzowMTowOVrOHv4hvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3MTI2Mg==", "bodyText": "Could we create a StorageUploadInputStreamOptions class to use here instead?   For now, they will have the exact same set of options, but a distinct class will allow them to diverge in the future if needed.\nTo avoid code duplication, you could create a common superclass StorageUploadOptions, which is extended by StorageUploadFileOptions and StorageUploadInputStreamOptions, like this:\npublic class StorageUploadOptions extends StorageOptions {\n    private final String contentType;\n    private final Map<String, String> metadata;\n}\n\npublic class StorageUploadFileOptions extends StorageUploadOptions { }\npublic class StorageUploadInputStreamOptions extends StorageUploadOptions { }", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r519971262", "createdAt": "2020-11-09T17:01:09Z", "author": {"login": "richardmcclellan"}, "path": "core/src/main/java/com/amplifyframework/storage/StorageCategoryBehavior.java", "diffHunk": "@@ -201,6 +202,65 @@\n         @NonNull Consumer<StorageUploadFileResult> onSuccess,\n         @NonNull Consumer<StorageException> onError);\n \n+    /**\n+     * Upload a local InputStream, storing it as a remote resource.\n+     * Register consumers to obtain the results of the upload.\n+     * @param key the unique identifier of the object in storage\n+     * @param local the local inputStream\n+     * @param onSuccess Called if operation completed successfully and furnishes a result\n+     * @param onError Called if an error occurs during operation\n+     * @return an operation object that provides notifications and\n+     *         actions related to the execution of the work\n+     */\n+    @NonNull\n+    StorageUploadFileOperation<?> uploadInputStream(\n+        @NonNull String key,\n+        @NonNull InputStream local,\n+        @NonNull Consumer<StorageUploadFileResult> onSuccess,\n+        @NonNull Consumer<StorageException> onError);\n+\n+    /**\n+     * Upload a local InputStream, storing it as a remote resource.\n+     * Specify options such as the access level the file should have.\n+     * Register consumers to observe results of upload request,\n+     * as well as intermediary progress updates.\n+     * @param key the unique identifier of the object in storage\n+     * @param local the local inputStream\n+     * @param options parameters specific to plugin behavior\n+     * @param onSuccess Called if operation completed successfully and furnishes a result\n+     * @param onError Called if an error occurs during operation\n+     * @return an operation object that provides notifications and\n+     *         actions related to the execution of the work\n+     */\n+    StorageUploadFileOperation<?> uploadInputStream(\n+        @NonNull String key,\n+        @NonNull InputStream local,\n+        @NonNull StorageUploadFileOptions options,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9748be75ed8e6d3bab956d17065ceeb09729e122"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTY0ODg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/storage/StorageCategoryBehavior.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzowNjowN1rOHv4vVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzowNjowN1rOHv4vVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3NDc0Mw==", "bodyText": "Could this return a StorageUploadInputStreamOperation instead, for the same reason I mentioned having a StorageUploadInputStreamOptions class?", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r519974743", "createdAt": "2020-11-09T17:06:07Z", "author": {"login": "richardmcclellan"}, "path": "core/src/main/java/com/amplifyframework/storage/StorageCategoryBehavior.java", "diffHunk": "@@ -201,6 +202,65 @@\n         @NonNull Consumer<StorageUploadFileResult> onSuccess,\n         @NonNull Consumer<StorageException> onError);\n \n+    /**\n+     * Upload a local InputStream, storing it as a remote resource.\n+     * Register consumers to obtain the results of the upload.\n+     * @param key the unique identifier of the object in storage\n+     * @param local the local inputStream\n+     * @param onSuccess Called if operation completed successfully and furnishes a result\n+     * @param onError Called if an error occurs during operation\n+     * @return an operation object that provides notifications and\n+     *         actions related to the execution of the work\n+     */\n+    @NonNull\n+    StorageUploadFileOperation<?> uploadInputStream(\n+        @NonNull String key,\n+        @NonNull InputStream local,\n+        @NonNull Consumer<StorageUploadFileResult> onSuccess,\n+        @NonNull Consumer<StorageException> onError);\n+\n+    /**\n+     * Upload a local InputStream, storing it as a remote resource.\n+     * Specify options such as the access level the file should have.\n+     * Register consumers to observe results of upload request,\n+     * as well as intermediary progress updates.\n+     * @param key the unique identifier of the object in storage\n+     * @param local the local inputStream\n+     * @param options parameters specific to plugin behavior\n+     * @param onSuccess Called if operation completed successfully and furnishes a result\n+     * @param onError Called if an error occurs during operation\n+     * @return an operation object that provides notifications and\n+     *         actions related to the execution of the work\n+     */\n+    StorageUploadFileOperation<?> uploadInputStream(\n+        @NonNull String key,\n+        @NonNull InputStream local,\n+        @NonNull StorageUploadFileOptions options,\n+        @NonNull Consumer<StorageUploadFileResult> onSuccess,\n+        @NonNull Consumer<StorageException> onError);\n+\n+    /**\n+     * Upload a local InputStream, storing it as a remote resource.\n+     * Specify options such as the access level the file should have.\n+     * Register consumers to observe results of upload request.\n+     * @param key the unique identifier of the object in storage\n+     * @param local the local inputStream\n+     * @param options parameters specific to plugin behavior\n+     * @param onProgress Called periodically to provides updates on upload progress\n+     * @param onSuccess Called if operation completed successfully and furnishes a result\n+     * @param onError Called if an error occurs during operation\n+     * @return an operation object that provides notifications and\n+     *         actions related to the execution of the work\n+     */\n+    @NonNull\n+    StorageUploadFileOperation<?> uploadInputStream(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9748be75ed8e6d3bab956d17065ceeb09729e122"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTY1ODQxOnYy", "diffSide": "RIGHT", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/request/AWSS3StorageUploadInputStreamRequest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzowODoxOFrOHv41Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzozNzozM1rOHv6B5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3NjIzOQ==", "bodyText": "There's a lot of duplication in this class with AWSS3StorageUploadFileRequest.  Could you create a common abstract super class, AWSS3StorageUploadRequest, which contains everything that is common to both?", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r519976239", "createdAt": "2020-11-09T17:08:18Z", "author": {"login": "richardmcclellan"}, "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/request/AWSS3StorageUploadInputStreamRequest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.storage.s3.request;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.storage.StorageAccessLevel;\n+import com.amplifyframework.storage.s3.ServerSideEncryption;\n+\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Parameters to provide to S3 that describe a request to upload a inputStream.\n+ */\n+public final class AWSS3StorageUploadInputStreamRequest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9748be75ed8e6d3bab956d17065ceeb09729e122"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5NTg3OA==", "bodyText": "Might make sense to do this for the AWSS3StorageUploadInputStreamOperation, as well. There could be an AWSS3StorageUploadOperation that gets extended in two different ways.", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r519995878", "createdAt": "2020-11-09T17:37:33Z", "author": {"login": "jamesonwilliams"}, "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/request/AWSS3StorageUploadInputStreamRequest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.storage.s3.request;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.storage.StorageAccessLevel;\n+import com.amplifyframework.storage.s3.ServerSideEncryption;\n+\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Parameters to provide to S3 that describe a request to upload a inputStream.\n+ */\n+public final class AWSS3StorageUploadInputStreamRequest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3NjIzOQ=="}, "originalCommit": {"oid": "9748be75ed8e6d3bab956d17065ceeb09729e122"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTY2OTI3OnYy", "diffSide": "RIGHT", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/service/AWSS3StorageService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzoxMDozNFrOHv47ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzoxMDozNFrOHv47ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk3Nzg5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                 * Begin uploading an inputStream.\n          \n          \n            \n                 * @param serviceKey S3 service key\n          \n          \n            \n                 * @param inputStream Target inputStream\n          \n          \n            \n                 * @param metadata Object metadata to associate with upload\n          \n          \n            \n                 * @return A transfer observer\n          \n          \n            \n                 * @throws IOException An IOException thrown during the process writing an inputStream into a file\n          \n          \n            \n                 */\n          \n          \n            \n                /**\n          \n          \n            \n                 * {@inheritDoc}\n          \n          \n            \n                 */", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r519977891", "createdAt": "2020-11-09T17:10:34Z", "author": {"login": "richardmcclellan"}, "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/service/AWSS3StorageService.java", "diffHunk": "@@ -147,6 +150,27 @@ public TransferObserver uploadFile(\n         return transferUtility.upload(bucket, serviceKey, file, metadata);\n     }\n \n+    /**\n+     * Begin uploading an inputStream.\n+     * @param serviceKey S3 service key\n+     * @param inputStream Target inputStream\n+     * @param metadata Object metadata to associate with upload\n+     * @return A transfer observer\n+     * @throws IOException An IOException thrown during the process writing an inputStream into a file\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9748be75ed8e6d3bab956d17065ceeb09729e122"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTY5OTUyOnYy", "diffSide": "RIGHT", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/service/StorageService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzoxNzozNVrOHv5OIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzoxNzozNVrOHv5OIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk4MjYyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @throws IOException An IOException thrown during the process writing an inputStream into a file\n          \n          \n            \n                 * @throws IOException on error reading the InputStream, or saving it to a temporary \n          \n          \n            \n                 *     File before the upload begins.", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r519982626", "createdAt": "2020-11-09T17:17:35Z", "author": {"login": "richardmcclellan"}, "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/service/StorageService.java", "diffHunk": "@@ -64,6 +66,20 @@ TransferObserver uploadFile(@NonNull String serviceKey,\n                                 @NonNull File file,\n                                 @NonNull ObjectMetadata metadata);\n \n+    /**\n+     * Begin uploading an inputStream to a key in storage and return an observer\n+     * to monitor upload progress. This item will be stored with specified\n+     * metadata.\n+     * @param serviceKey key to uniquely label item in storage\n+     * @param inputStream inputStream to upload\n+     * @param metadata metadata to attach to uploaded item\n+     * @return An instance of {@link TransferObserver} to monitor upload\n+     * @throws IOException An IOException thrown during the process writing an inputStream into a file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9748be75ed8e6d3bab956d17065ceeb09729e122"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTc4Nzg4OnYy", "diffSide": "RIGHT", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/request/AWSS3StorageUploadInputStreamRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzozODoyMlrOHv6D2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzozODoyMlrOHv6D2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5NjM3Ng==", "bodyText": "For any new data classes you add in this PR:\nPlease include equals(...), hashCode(...) and toString() implementations, as well.", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r519996376", "createdAt": "2020-11-09T17:38:22Z", "author": {"login": "jamesonwilliams"}, "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/request/AWSS3StorageUploadInputStreamRequest.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.storage.s3.request;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.storage.StorageAccessLevel;\n+import com.amplifyframework.storage.s3.ServerSideEncryption;\n+\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Parameters to provide to S3 that describe a request to upload a inputStream.\n+ */\n+public final class AWSS3StorageUploadInputStreamRequest {\n+    private final String key;\n+    private final InputStream local;\n+    private final StorageAccessLevel accessLevel;\n+    private final String targetIdentityId;\n+    private final String contentType;\n+    private final ServerSideEncryption serverSideEncryption;\n+    private final Map<String, String> metadata;\n+\n+    /**\n+     * Constructs a new AWSS3StorageUploadInputStreamRequest.\n+     * @param key key for item to upload\n+     * @param local InputStream to upload\n+     * @param accessLevel Storage access level\n+     * @param targetIdentityId If set, this should override the current user's identity ID.\n+     *                         If null, the operation will fetch the current identity ID.\n+     * @param contentType The standard MIME type describing the format of the object to store\n+     * @param serverSideEncryption server side encryption type for the current storage bucket\n+     * @param metadata Metadata for the object to store\n+     */\n+    public AWSS3StorageUploadInputStreamRequest(\n+            @NonNull String key,\n+            @NonNull InputStream local,\n+            @NonNull StorageAccessLevel accessLevel,\n+            @Nullable String targetIdentityId,\n+            @Nullable String contentType,\n+            @NonNull ServerSideEncryption serverSideEncryption,\n+            @Nullable Map<String, String> metadata\n+    ) {\n+        this.key = key;\n+        this.local = local;\n+        this.accessLevel = accessLevel;\n+        this.targetIdentityId = targetIdentityId;\n+        this.contentType = contentType;\n+        this.serverSideEncryption = serverSideEncryption;\n+        this.metadata = new HashMap<>();\n+        if (metadata != null) {\n+            this.metadata.putAll(metadata);\n+        }\n+    }\n+\n+    /**\n+     * Gets the storage key.\n+     * @return key\n+     */\n+    @NonNull\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    /**\n+     * Gets the inputStream to upload.\n+     * @return local file path\n+     */\n+    @NonNull\n+    public InputStream getLocal() {\n+        return local;\n+    }\n+\n+    /**\n+     * Gets the access level.\n+     * @return Access level\n+     */\n+    @NonNull\n+    public StorageAccessLevel getAccessLevel() {\n+        return accessLevel;\n+    }\n+\n+    /**\n+     * Gets the target identity id override. If null, the operation gets the default, current user's identity ID.\n+     * @return target identity id override\n+     */\n+    @Nullable\n+    public String getTargetIdentityId() {\n+        return targetIdentityId;\n+    }\n+\n+    /**\n+     * Gets the content type.\n+     * @return content type\n+     */\n+    @Nullable\n+    public String getContentType() {\n+        return contentType;\n+    }\n+\n+    /**\n+     * Gets the server side encryption algorithm.\n+     * @return server side encryption algorithm\n+     */\n+    @NonNull\n+    public ServerSideEncryption getServerSideEncryption() {\n+        return serverSideEncryption;\n+    }\n+\n+    /**\n+     * Gets the metadata.\n+     * @return metadata\n+     */\n+    @NonNull\n+    public Map<String, String> getMetadata() {\n+        return metadata;\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9748be75ed8e6d3bab956d17065ceeb09729e122"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTc5MzUwOnYy", "diffSide": "RIGHT", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/service/AWSS3StorageService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzozOTo0MFrOHv6HNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzozOTo0MFrOHv6HNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5NzIzNw==", "bodyText": "This formatting would probably be ceaner:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return transferUtility.upload(serviceKey, inputStream, UploadOptions.builder()\n          \n          \n            \n                                                                                        .bucket(bucket)\n          \n          \n            \n                                                                                        .objectMetadata(metadata)\n          \n          \n            \n                                                                                        .build());\n          \n          \n            \n                    UploadOptions uploadOptions = UploadOptions.builder()\n          \n          \n            \n                        .bucket(bucket)\n          \n          \n            \n                        .objectMetadata(metadata)\n          \n          \n            \n                        .build()\n          \n          \n            \n                    return transferUtility.upload(serviceKey, inputStream, uploadOptions);", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r519997237", "createdAt": "2020-11-09T17:39:40Z", "author": {"login": "jamesonwilliams"}, "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/service/AWSS3StorageService.java", "diffHunk": "@@ -147,6 +150,27 @@ public TransferObserver uploadFile(\n         return transferUtility.upload(bucket, serviceKey, file, metadata);\n     }\n \n+    /**\n+     * Begin uploading an inputStream.\n+     * @param serviceKey S3 service key\n+     * @param inputStream Target inputStream\n+     * @param metadata Object metadata to associate with upload\n+     * @return A transfer observer\n+     * @throws IOException An IOException thrown during the process writing an inputStream into a file\n+     */\n+    @NonNull\n+    public TransferObserver uploadInputStream(\n+            @NonNull String serviceKey,\n+            @NonNull InputStream inputStream,\n+            @NonNull ObjectMetadata metadata\n+    ) throws IOException {\n+        startServiceIfNotAlreadyStarted();\n+        return transferUtility.upload(serviceKey, inputStream, UploadOptions.builder()\n+                                                                            .bucket(bucket)\n+                                                                            .objectMetadata(metadata)\n+                                                                            .build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9748be75ed8e6d3bab956d17065ceeb09729e122"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTc5NDcyOnYy", "diffSide": "RIGHT", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/service/StorageService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzozOTo1NlrOHv6H5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzozOTo1NlrOHv6H5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5NzQxMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Begin uploading an inputStream to a key in storage and return an observer\n          \n          \n            \n                 * Begin uploading an InputStream to a key in storage and return an observer", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r519997412", "createdAt": "2020-11-09T17:39:56Z", "author": {"login": "jamesonwilliams"}, "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/service/StorageService.java", "diffHunk": "@@ -64,6 +66,20 @@ TransferObserver uploadFile(@NonNull String serviceKey,\n                                 @NonNull File file,\n                                 @NonNull ObjectMetadata metadata);\n \n+    /**\n+     * Begin uploading an inputStream to a key in storage and return an observer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9748be75ed8e6d3bab956d17065ceeb09729e122"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTc5NTgzOnYy", "diffSide": "RIGHT", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/service/StorageService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzo0MDowN1rOHv6Ieg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzo0MDowN1rOHv6Ieg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5NzU2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param inputStream inputStream to upload\n          \n          \n            \n                 * @param inputStream InputStream from which to read content", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r519997562", "createdAt": "2020-11-09T17:40:07Z", "author": {"login": "jamesonwilliams"}, "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/service/StorageService.java", "diffHunk": "@@ -64,6 +66,20 @@ TransferObserver uploadFile(@NonNull String serviceKey,\n                                 @NonNull File file,\n                                 @NonNull ObjectMetadata metadata);\n \n+    /**\n+     * Begin uploading an inputStream to a key in storage and return an observer\n+     * to monitor upload progress. This item will be stored with specified\n+     * metadata.\n+     * @param serviceKey key to uniquely label item in storage\n+     * @param inputStream inputStream to upload", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9748be75ed8e6d3bab956d17065ceeb09729e122"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1OTgwNzg0OnYy", "diffSide": "RIGHT", "path": "aws-storage-s3/src/test/java/com/amplifyframework/storage/s3/StorageComponentTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzo0MzowM1rOHv6Pzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNzo0MzowM1rOHv6Pzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTk5OTQzOQ==", "bodyText": "You could create a RandomBytes (like the RandomString utility) under testutils?\nnew ByteArrayInputStream(RandomBytes.bytes());\nwith\npublic final class RandomBytes {\n    private static final long DEFAULT_BYTE_COUNT = // choose one;\n    private RandomBytes() {}\n\n    public static byte[] bytes() {\n        return bytes(DEFAULT_BYTE_COUNT);\n    }\n\n    public static byte[] bytes(int count) {\n        // ...\n    }\n}", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r519999439", "createdAt": "2020-11-09T17:43:03Z", "author": {"login": "jamesonwilliams"}, "path": "aws-storage-s3/src/test/java/com/amplifyframework/storage/s3/StorageComponentTest.java", "diffHunk": "@@ -264,6 +266,42 @@ public void testUploadFileGetsKey() throws Exception {\n         assertEquals(toRemoteKey, result.getKey());\n     }\n \n+    /**\n+     * Test that calling upload inputStream method from Storage category correctly\n+     * invokes the registered AWSS3StoragePlugin instance and returns a\n+     * {@link StorageUploadFileResult} with correct remote key.\n+     *\n+     * @throws Exception when an error is encountered while uploading\n+     */\n+    @Test\n+    public void testUploadInputStreamGetsKey() throws Exception {\n+        final String toRemoteKey = RandomString.string();\n+        final InputStream inputStream = new ByteArrayInputStream(\"test data\".getBytes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9748be75ed8e6d3bab956d17065ceeb09729e122"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDA4NDE4OnYy", "diffSide": "RIGHT", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/operation/AWSS3StorageUploadInputStreamOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODo1NToxOVrOHv835Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODo1NToxOVrOHv835Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0MjQ2OQ==", "bodyText": "It's best to scope down to a specific Exception when possible - I believe you only need to catch an IOException here, right?", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r520042469", "createdAt": "2020-11-09T18:55:19Z", "author": {"login": "richardmcclellan"}, "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/operation/AWSS3StorageUploadInputStreamOperation.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.storage.s3.operation;\n+\n+import android.annotation.SuppressLint;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.hub.HubChannel;\n+import com.amplifyframework.hub.HubEvent;\n+import com.amplifyframework.storage.StorageChannelEventName;\n+import com.amplifyframework.storage.StorageException;\n+import com.amplifyframework.storage.operation.StorageUploadFileOperation;\n+import com.amplifyframework.storage.result.StorageTransferProgress;\n+import com.amplifyframework.storage.result.StorageUploadFileResult;\n+import com.amplifyframework.storage.s3.CognitoAuthProvider;\n+import com.amplifyframework.storage.s3.ServerSideEncryption;\n+import com.amplifyframework.storage.s3.request.AWSS3StorageUploadInputStreamRequest;\n+import com.amplifyframework.storage.s3.service.StorageService;\n+import com.amplifyframework.storage.s3.utils.S3Keys;\n+\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferListener;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferObserver;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferState;\n+import com.amazonaws.services.s3.model.ObjectMetadata;\n+\n+import java.io.InputStream;\n+import java.util.Objects;\n+\n+/**\n+ * An operation to upload an inputStream from AWS S3.\n+ */\n+public final class AWSS3StorageUploadInputStreamOperation\n+        extends StorageUploadFileOperation<AWSS3StorageUploadInputStreamRequest> {\n+    private final StorageService storageService;\n+    private final CognitoAuthProvider cognitoAuthProvider;\n+    private final Consumer<StorageTransferProgress> onProgress;\n+    private final Consumer<StorageUploadFileResult> onSuccess;\n+    private final Consumer<StorageException> onError;\n+    private TransferObserver transferObserver;\n+\n+    /**\n+     * Constructs a new AWSS3StorageUploadInputStreamOperation.\n+     * @param storageService S3 client wrapper\n+     * @param cognitoAuthProvider Interface to retrieve AWS specific auth information\n+     * @param request upload request parameters\n+     * @param onProgress Notified upon advancements in upload progress\n+     * @param onSuccess Will be notified when results of upload are available\n+     * @param onError Notified when upload fails with an error\n+     */\n+    public AWSS3StorageUploadInputStreamOperation(\n+            @NonNull StorageService storageService,\n+            @NonNull CognitoAuthProvider cognitoAuthProvider,\n+            @NonNull AWSS3StorageUploadInputStreamRequest request,\n+            @NonNull Consumer<StorageTransferProgress> onProgress,\n+            @NonNull Consumer<StorageUploadFileResult> onSuccess,\n+            @NonNull Consumer<StorageException> onError\n+    ) {\n+        super(Objects.requireNonNull(request));\n+        this.storageService = Objects.requireNonNull(storageService);\n+        this.cognitoAuthProvider = cognitoAuthProvider;\n+        this.onProgress = Objects.requireNonNull(onProgress);\n+        this.onSuccess = Objects.requireNonNull(onSuccess);\n+        this.onError = Objects.requireNonNull(onError);\n+        this.transferObserver = null;\n+    }\n+\n+    @SuppressLint(\"SyntheticAccessor\")\n+    @Override\n+    public void start() {\n+        // Only start if it hasn't already been started\n+        if (transferObserver != null) {\n+            return;\n+        }\n+\n+        String currentIdentityId;\n+\n+        try {\n+            currentIdentityId = cognitoAuthProvider.getIdentityId();\n+        } catch (StorageException exception) {\n+            onError.accept(exception);\n+            return;\n+        }\n+\n+        String serviceKey = S3Keys.createServiceKey(\n+                getRequest().getAccessLevel(),\n+                getRequest().getTargetIdentityId() != null\n+                        ? getRequest().getTargetIdentityId()\n+                        : currentIdentityId,\n+                getRequest().getKey()\n+        );\n+\n+        // Grab the inputStream to upload...\n+        InputStream inputStream = getRequest().getLocal();\n+\n+        // Set up the metadata\n+        ObjectMetadata objectMetadata = new ObjectMetadata();\n+        objectMetadata.setUserMetadata(getRequest().getMetadata());\n+        objectMetadata.setContentType(getRequest().getContentType());\n+\n+        ServerSideEncryption storageServerSideEncryption = getRequest().getServerSideEncryption();\n+        if (!ServerSideEncryption.NONE.equals(storageServerSideEncryption)) {\n+            objectMetadata.setSSEAlgorithm(storageServerSideEncryption.getName());\n+        }\n+\n+        // Upload!\n+        try {\n+            transferObserver = storageService.uploadInputStream(serviceKey, inputStream, objectMetadata);\n+            transferObserver.setTransferListener(new UploadTransferListener());\n+        } catch (Exception exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9748be75ed8e6d3bab956d17065ceeb09729e122"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDExMzc0OnYy", "diffSide": "RIGHT", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/operation/AWSS3StorageUploadInputStreamOperation.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxOTowMjoxMVrOHv9J9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToyMjoyN1rOH1L-gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0NzA5Mg==", "bodyText": "There's a lot of duplication in this class with the AWSS3StorageUploadFileOperation.  Any ideas on how to reduce it?", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r520047092", "createdAt": "2020-11-09T19:02:11Z", "author": {"login": "richardmcclellan"}, "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/operation/AWSS3StorageUploadInputStreamOperation.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.storage.s3.operation;\n+\n+import android.annotation.SuppressLint;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.hub.HubChannel;\n+import com.amplifyframework.hub.HubEvent;\n+import com.amplifyframework.storage.StorageChannelEventName;\n+import com.amplifyframework.storage.StorageException;\n+import com.amplifyframework.storage.operation.StorageUploadFileOperation;\n+import com.amplifyframework.storage.result.StorageTransferProgress;\n+import com.amplifyframework.storage.result.StorageUploadFileResult;\n+import com.amplifyframework.storage.s3.CognitoAuthProvider;\n+import com.amplifyframework.storage.s3.ServerSideEncryption;\n+import com.amplifyframework.storage.s3.request.AWSS3StorageUploadInputStreamRequest;\n+import com.amplifyframework.storage.s3.service.StorageService;\n+import com.amplifyframework.storage.s3.utils.S3Keys;\n+\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferListener;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferObserver;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferState;\n+import com.amazonaws.services.s3.model.ObjectMetadata;\n+\n+import java.io.InputStream;\n+import java.util.Objects;\n+\n+/**\n+ * An operation to upload an inputStream from AWS S3.\n+ */\n+public final class AWSS3StorageUploadInputStreamOperation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9748be75ed8e6d3bab956d17065ceeb09729e122"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjc0MzIzNg==", "bodyText": "I tried to make them extends the same superclass. But it makes it harder to call getRequest() method because they are using different types of Request. As a result, File or InputStream to be uploaded cannot be instantiated. Now this is the only thing left to be addressed in this PR.", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r522743236", "createdAt": "2020-11-13T07:45:38Z", "author": {"login": "changxu0306"}, "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/operation/AWSS3StorageUploadInputStreamOperation.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.storage.s3.operation;\n+\n+import android.annotation.SuppressLint;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.hub.HubChannel;\n+import com.amplifyframework.hub.HubEvent;\n+import com.amplifyframework.storage.StorageChannelEventName;\n+import com.amplifyframework.storage.StorageException;\n+import com.amplifyframework.storage.operation.StorageUploadFileOperation;\n+import com.amplifyframework.storage.result.StorageTransferProgress;\n+import com.amplifyframework.storage.result.StorageUploadFileResult;\n+import com.amplifyframework.storage.s3.CognitoAuthProvider;\n+import com.amplifyframework.storage.s3.ServerSideEncryption;\n+import com.amplifyframework.storage.s3.request.AWSS3StorageUploadInputStreamRequest;\n+import com.amplifyframework.storage.s3.service.StorageService;\n+import com.amplifyframework.storage.s3.utils.S3Keys;\n+\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferListener;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferObserver;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferState;\n+import com.amazonaws.services.s3.model.ObjectMetadata;\n+\n+import java.io.InputStream;\n+import java.util.Objects;\n+\n+/**\n+ * An operation to upload an inputStream from AWS S3.\n+ */\n+public final class AWSS3StorageUploadInputStreamOperation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0NzA5Mg=="}, "originalCommit": {"oid": "9748be75ed8e6d3bab956d17065ceeb09729e122"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzMjgwMA==", "bodyText": "Ok got it.  I can't think of a great way to do this either, so I think we can move forward as is!", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r525532800", "createdAt": "2020-11-17T21:22:27Z", "author": {"login": "richardmcclellan"}, "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/operation/AWSS3StorageUploadInputStreamOperation.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.storage.s3.operation;\n+\n+import android.annotation.SuppressLint;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.hub.HubChannel;\n+import com.amplifyframework.hub.HubEvent;\n+import com.amplifyframework.storage.StorageChannelEventName;\n+import com.amplifyframework.storage.StorageException;\n+import com.amplifyframework.storage.operation.StorageUploadFileOperation;\n+import com.amplifyframework.storage.result.StorageTransferProgress;\n+import com.amplifyframework.storage.result.StorageUploadFileResult;\n+import com.amplifyframework.storage.s3.CognitoAuthProvider;\n+import com.amplifyframework.storage.s3.ServerSideEncryption;\n+import com.amplifyframework.storage.s3.request.AWSS3StorageUploadInputStreamRequest;\n+import com.amplifyframework.storage.s3.service.StorageService;\n+import com.amplifyframework.storage.s3.utils.S3Keys;\n+\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferListener;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferObserver;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferState;\n+import com.amazonaws.services.s3.model.ObjectMetadata;\n+\n+import java.io.InputStream;\n+import java.util.Objects;\n+\n+/**\n+ * An operation to upload an inputStream from AWS S3.\n+ */\n+public final class AWSS3StorageUploadInputStreamOperation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA0NzA5Mg=="}, "originalCommit": {"oid": "9748be75ed8e6d3bab956d17065ceeb09729e122"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NjQ2NjY0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/storage/StorageCategoryBehavior.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMjo0MjoyNFrOHw6Dzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMjo0MjoyNFrOHw6Dzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTA0NDk0Mg==", "bodyText": "For any new APIs that get added to the StorageCategoryBehavior, we need to be sure to add the corresponding Rx versions to RxStorageCategoryBehavior, and associated implementation & tests.", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r521044942", "createdAt": "2020-11-11T02:42:24Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/storage/StorageCategoryBehavior.java", "diffHunk": "@@ -201,6 +202,65 @@\n         @NonNull Consumer<StorageUploadFileResult> onSuccess,\n         @NonNull Consumer<StorageException> onError);\n \n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9748be75ed8e6d3bab956d17065ceeb09729e122"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzY0NjEwOnYy", "diffSide": "RIGHT", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/operation/AWSS3StorageUploadInputStreamOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODo1OToxNFrOHyl9qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwODo1OToxNFrOHyl9qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgxMjg0MQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r522812841", "createdAt": "2020-11-13T08:59:14Z", "author": {"login": "jamesonwilliams"}, "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/operation/AWSS3StorageUploadInputStreamOperation.java", "diffHunk": "@@ -121,10 +122,10 @@ public void start() {\n         try {\n             transferObserver = storageService.uploadInputStream(serviceKey, inputStream, objectMetadata);\n             transferObserver.setTransferListener(new UploadTransferListener());\n-        } catch (Exception exception) {\n+        } catch (IOException ioException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5abedc152371292576016dfe2582b1fcbbc007"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzY2NjYyOnYy", "diffSide": "RIGHT", "path": "rxbindings/src/test/java/com/amplifyframework/rx/RxStorageBindingTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwOTowNTowM1rOHymJ2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwOTowNTowM1rOHymJ2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgxNTk2MA==", "bodyText": "We have an existing test that uses this mechanism, and it will sometimes fail. I think it is because the last progress update happens very close to the time of the result consumer.\nI think it would be okay to not test the progress listener.", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r522815960", "createdAt": "2020-11-13T09:05:03Z", "author": {"login": "jamesonwilliams"}, "path": "rxbindings/src/test/java/com/amplifyframework/rx/RxStorageBindingTest.java", "diffHunk": "@@ -208,7 +215,49 @@ public void uploadFileReturnsResult() throws InterruptedException {\n         testObserver.await(TIMEOUT_MS, TimeUnit.MILLISECONDS);\n         testObserver.assertValues(result);\n         testProgressObserver.assertValueCount(5);\n+    }\n+\n+    /**\n+     * When {@link StorageCategoryBehavior#uploadInputStream(String, InputStream, Consumer, Consumer)} returns\n+     * a {@link StorageUploadFileResult}, then the {@link Single} returned by\n+     * {@link RxStorageCategoryBehavior#uploadInputStream(String, InputStream)} should emit that result.\n+     * @throws InterruptedException Not expected.\n+     */\n+    @Test\n+    public void uploadInputStreamReturnsResult() throws InterruptedException {\n+        StorageUploadFileResult result = StorageUploadFileResult.fromKey(remoteKey);\n+        doAnswer(invocation -> {\n+            // 0 key, 1 local, 2 options, 3 onProgress, 4 onResult, 5 onError\n+            final int indexOfResultConsumer = 4;\n+            final int indexOfProgressConsumer = 3;\n+            Consumer<StorageUploadFileResult> resultConsumer = invocation.getArgument(indexOfResultConsumer);\n+            Consumer<StorageTransferProgress> progressConsumer = invocation.getArgument(indexOfProgressConsumer);\n \n+            Observable.interval(100, TimeUnit.MILLISECONDS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5abedc152371292576016dfe2582b1fcbbc007"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzY2OTk1OnYy", "diffSide": "RIGHT", "path": "rxbindings/src/test/java/com/amplifyframework/rx/RxStorageBindingTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwOTowNjowOFrOHymL6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwOTowNjowOFrOHymL6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgxNjQ4OA==", "bodyText": "Where possible, try to stick with a consistent level of indentation within a single file. Earlier, you use +4. Here, you use +8. The code base does mix the two styles, but it would be a good goal to be consistent within a single document.", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r522816488", "createdAt": "2020-11-13T09:06:08Z", "author": {"login": "jamesonwilliams"}, "path": "rxbindings/src/test/java/com/amplifyframework/rx/RxStorageBindingTest.java", "diffHunk": "@@ -239,6 +288,34 @@ public void uploadFileReturnsError() {\n             .assertError(error);\n     }\n \n+    /**\n+     * When {@link StorageCategoryBehavior#uploadInputStream(String, InputStream, Consumer, Consumer)} returns\n+     * an {@link StorageException}, then the {@link Single} returned by\n+     * {@link RxStorageCategoryBehavior#uploadInputStream(String, InputStream)} should emit a {@link StorageException}.\n+     */\n+    @Test\n+    public void uploadInputStreamReturnsError() {\n+        StorageException error = new StorageException(\"Error uploading.\", \"Expected.\");\n+        doAnswer(invocation -> {\n+            // 0 key, 1 local, 2 options, 3 onProgress 4 onResult, 5 onError\n+            final int indexOfResultConsumer = 5;\n+            Consumer<StorageException> errorConsumer = invocation.getArgument(indexOfResultConsumer);\n+            errorConsumer.accept(error);\n+            return mock(StorageUploadInputStreamOperation.class);\n+        }).when(delegate).uploadInputStream(eq(remoteKey),\n+                eq(localInputStream),\n+                any(StorageUploadInputStreamOptions.class),\n+                anyConsumer(),\n+                anyConsumer(),\n+                anyConsumer());\n+\n+        rxStorage\n+                .uploadInputStream(remoteKey, localInputStream)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5abedc152371292576016dfe2582b1fcbbc007"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3NzY3MDU0OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/amplifyframework/testutils/random/RandomBytes.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwOTowNjoxOFrOHymMQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwOTowNjoxOFrOHymMQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjgxNjU3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n          \n          \n            \n             * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r522816578", "createdAt": "2020-11-13T09:06:18Z", "author": {"login": "jamesonwilliams"}, "path": "testutils/src/main/java/com/amplifyframework/testutils/random/RandomBytes.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc5abedc152371292576016dfe2582b1fcbbc007"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NDkzMDYxOnYy", "diffSide": "RIGHT", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/AWSS3StoragePlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMDo0Nzo1NlrOH1K2kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMDo0Nzo1NlrOH1K2kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxNDM4Ng==", "bodyText": "Can you create a new class called StorageUploadInputStreamResult to use here?\nThen, you could also have a StorageUploadResult super class to contain whatever is shared between these two classes", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r525514386", "createdAt": "2020-11-17T20:47:56Z", "author": {"login": "richardmcclellan"}, "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/AWSS3StoragePlugin.java", "diffHunk": "@@ -329,6 +335,62 @@ public String getVersion() {\n         return operation;\n     }\n \n+    @NonNull\n+    @Override\n+    public StorageUploadInputStreamOperation<?> uploadInputStream(\n+            @NonNull String key,\n+            @NonNull InputStream local,\n+            @NonNull Consumer<StorageUploadFileResult> onSuccess,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e0833e95f3e6a5ccdfa70b02719906438959f2"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTA1MDA5OnYy", "diffSide": "RIGHT", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/operation/AWSS3StorageUploadInputStreamOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToyMjo1MlrOH1L_hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToyMjo1MlrOH1L_hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzMzA2MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"Something went wrong while attempting to cancel your AWS S3 Storage upload file operation\",\n          \n          \n            \n                                    \"Something went wrong while attempting to cancel your AWS S3 Storage upload input stream operation\",", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r525533061", "createdAt": "2020-11-17T21:22:52Z", "author": {"login": "richardmcclellan"}, "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/operation/AWSS3StorageUploadInputStreamOperation.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.storage.s3.operation;\n+\n+import android.annotation.SuppressLint;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.hub.HubChannel;\n+import com.amplifyframework.hub.HubEvent;\n+import com.amplifyframework.storage.StorageChannelEventName;\n+import com.amplifyframework.storage.StorageException;\n+import com.amplifyframework.storage.operation.StorageUploadInputStreamOperation;\n+import com.amplifyframework.storage.result.StorageTransferProgress;\n+import com.amplifyframework.storage.result.StorageUploadFileResult;\n+import com.amplifyframework.storage.s3.CognitoAuthProvider;\n+import com.amplifyframework.storage.s3.ServerSideEncryption;\n+import com.amplifyframework.storage.s3.request.AWSS3StorageUploadInputStreamRequest;\n+import com.amplifyframework.storage.s3.service.StorageService;\n+import com.amplifyframework.storage.s3.utils.S3Keys;\n+\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferListener;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferObserver;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferState;\n+import com.amazonaws.services.s3.model.ObjectMetadata;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Objects;\n+\n+/**\n+ * An operation to upload an InputStream from AWS S3.\n+ */\n+public final class AWSS3StorageUploadInputStreamOperation\n+        extends StorageUploadInputStreamOperation<AWSS3StorageUploadInputStreamRequest> {\n+    private final StorageService storageService;\n+    private final CognitoAuthProvider cognitoAuthProvider;\n+    private final Consumer<StorageTransferProgress> onProgress;\n+    private final Consumer<StorageUploadFileResult> onSuccess;\n+    private final Consumer<StorageException> onError;\n+    private TransferObserver transferObserver;\n+\n+    /**\n+     * Constructs a new AWSS3StorageUploadInputStreamOperation.\n+     * @param storageService S3 client wrapper\n+     * @param cognitoAuthProvider Interface to retrieve AWS specific auth information\n+     * @param request upload request parameters\n+     * @param onProgress Notified upon advancements in upload progress\n+     * @param onSuccess Will be notified when results of upload are available\n+     * @param onError Notified when upload fails with an error\n+     */\n+    public AWSS3StorageUploadInputStreamOperation(\n+            @NonNull StorageService storageService,\n+            @NonNull CognitoAuthProvider cognitoAuthProvider,\n+            @NonNull AWSS3StorageUploadInputStreamRequest request,\n+            @NonNull Consumer<StorageTransferProgress> onProgress,\n+            @NonNull Consumer<StorageUploadFileResult> onSuccess,\n+            @NonNull Consumer<StorageException> onError\n+    ) {\n+        super(Objects.requireNonNull(request));\n+        this.storageService = Objects.requireNonNull(storageService);\n+        this.cognitoAuthProvider = cognitoAuthProvider;\n+        this.onProgress = Objects.requireNonNull(onProgress);\n+        this.onSuccess = Objects.requireNonNull(onSuccess);\n+        this.onError = Objects.requireNonNull(onError);\n+        this.transferObserver = null;\n+    }\n+\n+    @SuppressLint(\"SyntheticAccessor\")\n+    @Override\n+    public void start() {\n+        // Only start if it hasn't already been started\n+        if (transferObserver != null) {\n+            return;\n+        }\n+\n+        String currentIdentityId;\n+\n+        try {\n+            currentIdentityId = cognitoAuthProvider.getIdentityId();\n+        } catch (StorageException exception) {\n+            onError.accept(exception);\n+            return;\n+        }\n+\n+        String serviceKey = S3Keys.createServiceKey(\n+                getRequest().getAccessLevel(),\n+                getRequest().getTargetIdentityId() != null\n+                        ? getRequest().getTargetIdentityId()\n+                        : currentIdentityId,\n+                getRequest().getKey()\n+        );\n+\n+        // Grab the inputStream to upload...\n+        InputStream inputStream = getRequest().getLocal();\n+\n+        // Set up the metadata\n+        ObjectMetadata objectMetadata = new ObjectMetadata();\n+        objectMetadata.setUserMetadata(getRequest().getMetadata());\n+        objectMetadata.setContentType(getRequest().getContentType());\n+\n+        ServerSideEncryption storageServerSideEncryption = getRequest().getServerSideEncryption();\n+        if (!ServerSideEncryption.NONE.equals(storageServerSideEncryption)) {\n+            objectMetadata.setSSEAlgorithm(storageServerSideEncryption.getName());\n+        }\n+\n+        // Upload!\n+        try {\n+            transferObserver = storageService.uploadInputStream(serviceKey, inputStream, objectMetadata);\n+            transferObserver.setTransferListener(new UploadTransferListener());\n+        } catch (IOException ioException) {\n+            onError.accept(new StorageException(\n+                    \"Issue uploading inputStream.\",\n+                    ioException,\n+                    \"See included exception for more details and suggestions to fix.\"\n+            ));\n+        }\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        if (transferObserver != null) {\n+            try {\n+                storageService.cancelTransfer(transferObserver);\n+            } catch (Exception exception) {\n+                onError.accept(new StorageException(\n+                        \"Something went wrong while attempting to cancel your AWS S3 Storage upload file operation\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e0833e95f3e6a5ccdfa70b02719906438959f2"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTA1MDc2OnYy", "diffSide": "RIGHT", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/operation/AWSS3StorageUploadInputStreamOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToyMzowNlrOH1L__Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToyMzowNlrOH1L__Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzMzE4MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"Something went wrong while attempting to pause your AWS S3 Storage upload file operation\",\n          \n          \n            \n                                    \"Something went wrong while attempting to pause your AWS S3 Storage upload input stream operation\",", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r525533181", "createdAt": "2020-11-17T21:23:06Z", "author": {"login": "richardmcclellan"}, "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/operation/AWSS3StorageUploadInputStreamOperation.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.storage.s3.operation;\n+\n+import android.annotation.SuppressLint;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.hub.HubChannel;\n+import com.amplifyframework.hub.HubEvent;\n+import com.amplifyframework.storage.StorageChannelEventName;\n+import com.amplifyframework.storage.StorageException;\n+import com.amplifyframework.storage.operation.StorageUploadInputStreamOperation;\n+import com.amplifyframework.storage.result.StorageTransferProgress;\n+import com.amplifyframework.storage.result.StorageUploadFileResult;\n+import com.amplifyframework.storage.s3.CognitoAuthProvider;\n+import com.amplifyframework.storage.s3.ServerSideEncryption;\n+import com.amplifyframework.storage.s3.request.AWSS3StorageUploadInputStreamRequest;\n+import com.amplifyframework.storage.s3.service.StorageService;\n+import com.amplifyframework.storage.s3.utils.S3Keys;\n+\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferListener;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferObserver;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferState;\n+import com.amazonaws.services.s3.model.ObjectMetadata;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Objects;\n+\n+/**\n+ * An operation to upload an InputStream from AWS S3.\n+ */\n+public final class AWSS3StorageUploadInputStreamOperation\n+        extends StorageUploadInputStreamOperation<AWSS3StorageUploadInputStreamRequest> {\n+    private final StorageService storageService;\n+    private final CognitoAuthProvider cognitoAuthProvider;\n+    private final Consumer<StorageTransferProgress> onProgress;\n+    private final Consumer<StorageUploadFileResult> onSuccess;\n+    private final Consumer<StorageException> onError;\n+    private TransferObserver transferObserver;\n+\n+    /**\n+     * Constructs a new AWSS3StorageUploadInputStreamOperation.\n+     * @param storageService S3 client wrapper\n+     * @param cognitoAuthProvider Interface to retrieve AWS specific auth information\n+     * @param request upload request parameters\n+     * @param onProgress Notified upon advancements in upload progress\n+     * @param onSuccess Will be notified when results of upload are available\n+     * @param onError Notified when upload fails with an error\n+     */\n+    public AWSS3StorageUploadInputStreamOperation(\n+            @NonNull StorageService storageService,\n+            @NonNull CognitoAuthProvider cognitoAuthProvider,\n+            @NonNull AWSS3StorageUploadInputStreamRequest request,\n+            @NonNull Consumer<StorageTransferProgress> onProgress,\n+            @NonNull Consumer<StorageUploadFileResult> onSuccess,\n+            @NonNull Consumer<StorageException> onError\n+    ) {\n+        super(Objects.requireNonNull(request));\n+        this.storageService = Objects.requireNonNull(storageService);\n+        this.cognitoAuthProvider = cognitoAuthProvider;\n+        this.onProgress = Objects.requireNonNull(onProgress);\n+        this.onSuccess = Objects.requireNonNull(onSuccess);\n+        this.onError = Objects.requireNonNull(onError);\n+        this.transferObserver = null;\n+    }\n+\n+    @SuppressLint(\"SyntheticAccessor\")\n+    @Override\n+    public void start() {\n+        // Only start if it hasn't already been started\n+        if (transferObserver != null) {\n+            return;\n+        }\n+\n+        String currentIdentityId;\n+\n+        try {\n+            currentIdentityId = cognitoAuthProvider.getIdentityId();\n+        } catch (StorageException exception) {\n+            onError.accept(exception);\n+            return;\n+        }\n+\n+        String serviceKey = S3Keys.createServiceKey(\n+                getRequest().getAccessLevel(),\n+                getRequest().getTargetIdentityId() != null\n+                        ? getRequest().getTargetIdentityId()\n+                        : currentIdentityId,\n+                getRequest().getKey()\n+        );\n+\n+        // Grab the inputStream to upload...\n+        InputStream inputStream = getRequest().getLocal();\n+\n+        // Set up the metadata\n+        ObjectMetadata objectMetadata = new ObjectMetadata();\n+        objectMetadata.setUserMetadata(getRequest().getMetadata());\n+        objectMetadata.setContentType(getRequest().getContentType());\n+\n+        ServerSideEncryption storageServerSideEncryption = getRequest().getServerSideEncryption();\n+        if (!ServerSideEncryption.NONE.equals(storageServerSideEncryption)) {\n+            objectMetadata.setSSEAlgorithm(storageServerSideEncryption.getName());\n+        }\n+\n+        // Upload!\n+        try {\n+            transferObserver = storageService.uploadInputStream(serviceKey, inputStream, objectMetadata);\n+            transferObserver.setTransferListener(new UploadTransferListener());\n+        } catch (IOException ioException) {\n+            onError.accept(new StorageException(\n+                    \"Issue uploading inputStream.\",\n+                    ioException,\n+                    \"See included exception for more details and suggestions to fix.\"\n+            ));\n+        }\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        if (transferObserver != null) {\n+            try {\n+                storageService.cancelTransfer(transferObserver);\n+            } catch (Exception exception) {\n+                onError.accept(new StorageException(\n+                        \"Something went wrong while attempting to cancel your AWS S3 Storage upload file operation\",\n+                        exception,\n+                        \"See attached exception for more information and suggestions\"\n+                ));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void pause() {\n+        if (transferObserver != null) {\n+            try {\n+                storageService.pauseTransfer(transferObserver);\n+            } catch (Exception exception) {\n+                onError.accept(new StorageException(\n+                        \"Something went wrong while attempting to pause your AWS S3 Storage upload file operation\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e0833e95f3e6a5ccdfa70b02719906438959f2"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTA1MTQxOnYy", "diffSide": "RIGHT", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/operation/AWSS3StorageUploadInputStreamOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToyMzoyMFrOH1MAZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToyMzoyMFrOH1MAZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzMzI4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    \"Something went wrong while attempting to resume your AWS S3 Storage upload file operation\",\n          \n          \n            \n                                    \"Something went wrong while attempting to resume your AWS S3 Storage upload input stream operation\",", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r525533284", "createdAt": "2020-11-17T21:23:20Z", "author": {"login": "richardmcclellan"}, "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/operation/AWSS3StorageUploadInputStreamOperation.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.storage.s3.operation;\n+\n+import android.annotation.SuppressLint;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.hub.HubChannel;\n+import com.amplifyframework.hub.HubEvent;\n+import com.amplifyframework.storage.StorageChannelEventName;\n+import com.amplifyframework.storage.StorageException;\n+import com.amplifyframework.storage.operation.StorageUploadInputStreamOperation;\n+import com.amplifyframework.storage.result.StorageTransferProgress;\n+import com.amplifyframework.storage.result.StorageUploadFileResult;\n+import com.amplifyframework.storage.s3.CognitoAuthProvider;\n+import com.amplifyframework.storage.s3.ServerSideEncryption;\n+import com.amplifyframework.storage.s3.request.AWSS3StorageUploadInputStreamRequest;\n+import com.amplifyframework.storage.s3.service.StorageService;\n+import com.amplifyframework.storage.s3.utils.S3Keys;\n+\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferListener;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferObserver;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferState;\n+import com.amazonaws.services.s3.model.ObjectMetadata;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Objects;\n+\n+/**\n+ * An operation to upload an InputStream from AWS S3.\n+ */\n+public final class AWSS3StorageUploadInputStreamOperation\n+        extends StorageUploadInputStreamOperation<AWSS3StorageUploadInputStreamRequest> {\n+    private final StorageService storageService;\n+    private final CognitoAuthProvider cognitoAuthProvider;\n+    private final Consumer<StorageTransferProgress> onProgress;\n+    private final Consumer<StorageUploadFileResult> onSuccess;\n+    private final Consumer<StorageException> onError;\n+    private TransferObserver transferObserver;\n+\n+    /**\n+     * Constructs a new AWSS3StorageUploadInputStreamOperation.\n+     * @param storageService S3 client wrapper\n+     * @param cognitoAuthProvider Interface to retrieve AWS specific auth information\n+     * @param request upload request parameters\n+     * @param onProgress Notified upon advancements in upload progress\n+     * @param onSuccess Will be notified when results of upload are available\n+     * @param onError Notified when upload fails with an error\n+     */\n+    public AWSS3StorageUploadInputStreamOperation(\n+            @NonNull StorageService storageService,\n+            @NonNull CognitoAuthProvider cognitoAuthProvider,\n+            @NonNull AWSS3StorageUploadInputStreamRequest request,\n+            @NonNull Consumer<StorageTransferProgress> onProgress,\n+            @NonNull Consumer<StorageUploadFileResult> onSuccess,\n+            @NonNull Consumer<StorageException> onError\n+    ) {\n+        super(Objects.requireNonNull(request));\n+        this.storageService = Objects.requireNonNull(storageService);\n+        this.cognitoAuthProvider = cognitoAuthProvider;\n+        this.onProgress = Objects.requireNonNull(onProgress);\n+        this.onSuccess = Objects.requireNonNull(onSuccess);\n+        this.onError = Objects.requireNonNull(onError);\n+        this.transferObserver = null;\n+    }\n+\n+    @SuppressLint(\"SyntheticAccessor\")\n+    @Override\n+    public void start() {\n+        // Only start if it hasn't already been started\n+        if (transferObserver != null) {\n+            return;\n+        }\n+\n+        String currentIdentityId;\n+\n+        try {\n+            currentIdentityId = cognitoAuthProvider.getIdentityId();\n+        } catch (StorageException exception) {\n+            onError.accept(exception);\n+            return;\n+        }\n+\n+        String serviceKey = S3Keys.createServiceKey(\n+                getRequest().getAccessLevel(),\n+                getRequest().getTargetIdentityId() != null\n+                        ? getRequest().getTargetIdentityId()\n+                        : currentIdentityId,\n+                getRequest().getKey()\n+        );\n+\n+        // Grab the inputStream to upload...\n+        InputStream inputStream = getRequest().getLocal();\n+\n+        // Set up the metadata\n+        ObjectMetadata objectMetadata = new ObjectMetadata();\n+        objectMetadata.setUserMetadata(getRequest().getMetadata());\n+        objectMetadata.setContentType(getRequest().getContentType());\n+\n+        ServerSideEncryption storageServerSideEncryption = getRequest().getServerSideEncryption();\n+        if (!ServerSideEncryption.NONE.equals(storageServerSideEncryption)) {\n+            objectMetadata.setSSEAlgorithm(storageServerSideEncryption.getName());\n+        }\n+\n+        // Upload!\n+        try {\n+            transferObserver = storageService.uploadInputStream(serviceKey, inputStream, objectMetadata);\n+            transferObserver.setTransferListener(new UploadTransferListener());\n+        } catch (IOException ioException) {\n+            onError.accept(new StorageException(\n+                    \"Issue uploading inputStream.\",\n+                    ioException,\n+                    \"See included exception for more details and suggestions to fix.\"\n+            ));\n+        }\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        if (transferObserver != null) {\n+            try {\n+                storageService.cancelTransfer(transferObserver);\n+            } catch (Exception exception) {\n+                onError.accept(new StorageException(\n+                        \"Something went wrong while attempting to cancel your AWS S3 Storage upload file operation\",\n+                        exception,\n+                        \"See attached exception for more information and suggestions\"\n+                ));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void pause() {\n+        if (transferObserver != null) {\n+            try {\n+                storageService.pauseTransfer(transferObserver);\n+            } catch (Exception exception) {\n+                onError.accept(new StorageException(\n+                        \"Something went wrong while attempting to pause your AWS S3 Storage upload file operation\",\n+                        exception,\n+                        \"See attached exception for more information and suggestions\"\n+                ));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void resume() {\n+        if (transferObserver != null) {\n+            try {\n+                storageService.resumeTransfer(transferObserver);\n+            } catch (Exception exception) {\n+                onError.accept(new StorageException(\n+                        \"Something went wrong while attempting to resume your AWS S3 Storage upload file operation\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e0833e95f3e6a5ccdfa70b02719906438959f2"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTA1NjYyOnYy", "diffSide": "RIGHT", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/operation/AWSS3StorageUploadInputStreamOperation.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToyNDo0NFrOH1MDkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMToyNDo0NFrOH1MDkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzNDA5OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                \"Something went wrong with your AWS S3 Storage upload file operation\",\n          \n          \n            \n                                \"Something went wrong with your AWS S3 Storage upload input stream operation\",", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r525534099", "createdAt": "2020-11-17T21:24:44Z", "author": {"login": "richardmcclellan"}, "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/operation/AWSS3StorageUploadInputStreamOperation.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.storage.s3.operation;\n+\n+import android.annotation.SuppressLint;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.hub.HubChannel;\n+import com.amplifyframework.hub.HubEvent;\n+import com.amplifyframework.storage.StorageChannelEventName;\n+import com.amplifyframework.storage.StorageException;\n+import com.amplifyframework.storage.operation.StorageUploadInputStreamOperation;\n+import com.amplifyframework.storage.result.StorageTransferProgress;\n+import com.amplifyframework.storage.result.StorageUploadFileResult;\n+import com.amplifyframework.storage.s3.CognitoAuthProvider;\n+import com.amplifyframework.storage.s3.ServerSideEncryption;\n+import com.amplifyframework.storage.s3.request.AWSS3StorageUploadInputStreamRequest;\n+import com.amplifyframework.storage.s3.service.StorageService;\n+import com.amplifyframework.storage.s3.utils.S3Keys;\n+\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferListener;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferObserver;\n+import com.amazonaws.mobileconnectors.s3.transferutility.TransferState;\n+import com.amazonaws.services.s3.model.ObjectMetadata;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Objects;\n+\n+/**\n+ * An operation to upload an InputStream from AWS S3.\n+ */\n+public final class AWSS3StorageUploadInputStreamOperation\n+        extends StorageUploadInputStreamOperation<AWSS3StorageUploadInputStreamRequest> {\n+    private final StorageService storageService;\n+    private final CognitoAuthProvider cognitoAuthProvider;\n+    private final Consumer<StorageTransferProgress> onProgress;\n+    private final Consumer<StorageUploadFileResult> onSuccess;\n+    private final Consumer<StorageException> onError;\n+    private TransferObserver transferObserver;\n+\n+    /**\n+     * Constructs a new AWSS3StorageUploadInputStreamOperation.\n+     * @param storageService S3 client wrapper\n+     * @param cognitoAuthProvider Interface to retrieve AWS specific auth information\n+     * @param request upload request parameters\n+     * @param onProgress Notified upon advancements in upload progress\n+     * @param onSuccess Will be notified when results of upload are available\n+     * @param onError Notified when upload fails with an error\n+     */\n+    public AWSS3StorageUploadInputStreamOperation(\n+            @NonNull StorageService storageService,\n+            @NonNull CognitoAuthProvider cognitoAuthProvider,\n+            @NonNull AWSS3StorageUploadInputStreamRequest request,\n+            @NonNull Consumer<StorageTransferProgress> onProgress,\n+            @NonNull Consumer<StorageUploadFileResult> onSuccess,\n+            @NonNull Consumer<StorageException> onError\n+    ) {\n+        super(Objects.requireNonNull(request));\n+        this.storageService = Objects.requireNonNull(storageService);\n+        this.cognitoAuthProvider = cognitoAuthProvider;\n+        this.onProgress = Objects.requireNonNull(onProgress);\n+        this.onSuccess = Objects.requireNonNull(onSuccess);\n+        this.onError = Objects.requireNonNull(onError);\n+        this.transferObserver = null;\n+    }\n+\n+    @SuppressLint(\"SyntheticAccessor\")\n+    @Override\n+    public void start() {\n+        // Only start if it hasn't already been started\n+        if (transferObserver != null) {\n+            return;\n+        }\n+\n+        String currentIdentityId;\n+\n+        try {\n+            currentIdentityId = cognitoAuthProvider.getIdentityId();\n+        } catch (StorageException exception) {\n+            onError.accept(exception);\n+            return;\n+        }\n+\n+        String serviceKey = S3Keys.createServiceKey(\n+                getRequest().getAccessLevel(),\n+                getRequest().getTargetIdentityId() != null\n+                        ? getRequest().getTargetIdentityId()\n+                        : currentIdentityId,\n+                getRequest().getKey()\n+        );\n+\n+        // Grab the inputStream to upload...\n+        InputStream inputStream = getRequest().getLocal();\n+\n+        // Set up the metadata\n+        ObjectMetadata objectMetadata = new ObjectMetadata();\n+        objectMetadata.setUserMetadata(getRequest().getMetadata());\n+        objectMetadata.setContentType(getRequest().getContentType());\n+\n+        ServerSideEncryption storageServerSideEncryption = getRequest().getServerSideEncryption();\n+        if (!ServerSideEncryption.NONE.equals(storageServerSideEncryption)) {\n+            objectMetadata.setSSEAlgorithm(storageServerSideEncryption.getName());\n+        }\n+\n+        // Upload!\n+        try {\n+            transferObserver = storageService.uploadInputStream(serviceKey, inputStream, objectMetadata);\n+            transferObserver.setTransferListener(new UploadTransferListener());\n+        } catch (IOException ioException) {\n+            onError.accept(new StorageException(\n+                    \"Issue uploading inputStream.\",\n+                    ioException,\n+                    \"See included exception for more details and suggestions to fix.\"\n+            ));\n+        }\n+    }\n+\n+    @Override\n+    public void cancel() {\n+        if (transferObserver != null) {\n+            try {\n+                storageService.cancelTransfer(transferObserver);\n+            } catch (Exception exception) {\n+                onError.accept(new StorageException(\n+                        \"Something went wrong while attempting to cancel your AWS S3 Storage upload file operation\",\n+                        exception,\n+                        \"See attached exception for more information and suggestions\"\n+                ));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void pause() {\n+        if (transferObserver != null) {\n+            try {\n+                storageService.pauseTransfer(transferObserver);\n+            } catch (Exception exception) {\n+                onError.accept(new StorageException(\n+                        \"Something went wrong while attempting to pause your AWS S3 Storage upload file operation\",\n+                        exception,\n+                        \"See attached exception for more information and suggestions\"\n+                ));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public void resume() {\n+        if (transferObserver != null) {\n+            try {\n+                storageService.resumeTransfer(transferObserver);\n+            } catch (Exception exception) {\n+                onError.accept(new StorageException(\n+                        \"Something went wrong while attempting to resume your AWS S3 Storage upload file operation\",\n+                        exception,\n+                        \"See attached exception for more information and suggestions\"\n+                ));\n+            }\n+        }\n+    }\n+\n+    @SuppressLint(\"SyntheticAccessor\")\n+    private final class UploadTransferListener implements TransferListener {\n+        @Override\n+        public void onStateChanged(int transferId, TransferState state) {\n+            Amplify.Hub.publish(HubChannel.STORAGE,\n+                    HubEvent.create(StorageChannelEventName.UPLOAD_STATE, state.name()));\n+            switch (state) {\n+                case COMPLETED:\n+                    onSuccess.accept(StorageUploadFileResult.fromKey(getRequest().getKey()));\n+                    return;\n+                case FAILED:\n+                    onError.accept(new StorageException(\n+                            \"Storage upload operation was interrupted.\",\n+                            \"Please verify that you have a stable internet connection.\"\n+                    ));\n+                    return;\n+                default:\n+                    // no-op;\n+            }\n+        }\n+\n+        @Override\n+        public void onProgressChanged(int transferId, long bytesCurrent, long bytesTotal) {\n+            onProgress.accept(new StorageTransferProgress(bytesCurrent, bytesTotal));\n+        }\n+\n+        @Override\n+        public void onError(int transferId, Exception exception) {\n+            Amplify.Hub.publish(HubChannel.STORAGE,\n+                    HubEvent.create(StorageChannelEventName.UPLOAD_ERROR, exception));\n+            onError.accept(new StorageException(\n+                    \"Something went wrong with your AWS S3 Storage upload file operation\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e0833e95f3e6a5ccdfa70b02719906438959f2"}, "originalPosition": 210}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTA4MjAyOnYy", "diffSide": "RIGHT", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/options/AWSS3StorageUploadInputStreamOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTozMTo1NVrOH1MS_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTozMTo1NVrOH1MS_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUzODA0Nw==", "bodyText": "Could we remove this?  Generally Builder classes don't have getters.  I see you are using it in the AWSS3StorageUploadInputStreamOptions constructor, but you should just be able to reference the member variable directly instead.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    @NonNull\n          \n          \n            \n                    ServerSideEncryption getServerSideEncryption() {\n          \n          \n            \n                        return serverSideEncryption;\n          \n          \n            \n                    }", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r525538047", "createdAt": "2020-11-17T21:31:55Z", "author": {"login": "richardmcclellan"}, "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/options/AWSS3StorageUploadInputStreamOptions.java", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.storage.s3.options;\n+\n+import androidx.annotation.NonNull;\n+import androidx.core.util.ObjectsCompat;\n+\n+import com.amplifyframework.storage.options.StorageUploadInputStreamOptions;\n+import com.amplifyframework.storage.s3.ServerSideEncryption;\n+\n+import java.util.Objects;\n+\n+/**\n+ * Options to specify attributes of object upload operation to an AWS S3 bucket.\n+ */\n+public final class AWSS3StorageUploadInputStreamOptions extends StorageUploadInputStreamOptions {\n+    private final ServerSideEncryption serverSideEncryption;\n+\n+    private AWSS3StorageUploadInputStreamOptions(final Builder builder) {\n+        super(builder);\n+        this.serverSideEncryption = builder.getServerSideEncryption();\n+    }\n+\n+    /**\n+     * Server side encryption algorithm.\n+     * @return Server side encryption algorithm\n+     */\n+    @NonNull\n+    public ServerSideEncryption getServerSideEncryption() {\n+        return serverSideEncryption;\n+    }\n+\n+    /**\n+     * Factory method to create a new instance of the\n+     * {@link Builder}.  The builder can be\n+     * used to configure properties and then construct a new immutable\n+     * instance of the storage options that are specific to AWS S3.\n+     * @return An instance of the {@link Builder}\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Factory method to create builder which is configured to prepare\n+     * object instances with the same field values as the provided\n+     * options. This can be used as a starting ground to create a\n+     * new clone of the provided options, which shares some common\n+     * configuration.\n+     * @param options Options to populate into a new builder configuration\n+     * @return A Builder instance that has been configured using the\n+     *         values in the provided options\n+     */\n+    @NonNull\n+    public static Builder from(@NonNull final AWSS3StorageUploadInputStreamOptions options) {\n+        return builder()\n+                .accessLevel(options.getAccessLevel())\n+                .targetIdentityId(options.getTargetIdentityId())\n+                .contentType(options.getContentType())\n+                .serverSideEncryption(options.getServerSideEncryption())\n+                .metadata(options.getMetadata());\n+    }\n+\n+    /**\n+     * Constructs a default instance of the {@link AWSS3StorageUploadInputStreamOptions}.\n+     * @return default instance of AWSS3StorageUploadInputStreamOptions\n+     */\n+    @NonNull\n+    public static AWSS3StorageUploadInputStreamOptions defaultInstance() {\n+        return builder().build();\n+    }\n+\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        } else if (!(obj instanceof AWSS3StorageUploadInputStreamOptions)) {\n+            return false;\n+        } else {\n+            AWSS3StorageUploadInputStreamOptions that = (AWSS3StorageUploadInputStreamOptions) obj;\n+            return ObjectsCompat.equals(getAccessLevel(), that.getAccessLevel()) &&\n+                    ObjectsCompat.equals(getTargetIdentityId(), that.getTargetIdentityId()) &&\n+                    ObjectsCompat.equals(getContentType(), that.getContentType()) &&\n+                    ObjectsCompat.equals(getServerSideEncryption(), that.getServerSideEncryption()) &&\n+                    ObjectsCompat.equals(getMetadata(), that.getMetadata());\n+        }\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return ObjectsCompat.hash(\n+                getAccessLevel(),\n+                getTargetIdentityId(),\n+                getContentType(),\n+                getServerSideEncryption(),\n+                getMetadata()\n+        );\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String toString() {\n+        return \"AWSS3StorageUploadInputStreamOptions {\" +\n+                \"accessLevel=\" + getAccessLevel() +\n+                \", targetIdentityId=\" + getTargetIdentityId() +\n+                \", contentType=\" + getContentType() +\n+                \", serverSideEncryption=\" + getServerSideEncryption().getName() +\n+                \", metadata=\" + getMetadata() +\n+                '}';\n+    }\n+\n+    /**\n+     * A utility that can be used to configure and construct immutable\n+     * instances of the {@link AWSS3StorageUploadInputStreamOptions}, by chaining\n+     * fluent configuration method calls.\n+     */\n+    public static final class Builder extends StorageUploadInputStreamOptions.Builder<Builder> {\n+        private ServerSideEncryption serverSideEncryption;\n+\n+        private Builder() {\n+            super();\n+            this.serverSideEncryption = ServerSideEncryption.NONE;\n+        }\n+\n+        /**\n+         * Configures the server side encryption algorithm for a new AWSS3StorageUploadInputStreamOptions instance.\n+         * @param serverSideEncryption server side encryption algorithm\n+         * @return Current Builder instance for fluent chaining\n+         */\n+        @NonNull\n+        public Builder serverSideEncryption(@NonNull ServerSideEncryption serverSideEncryption) {\n+            this.serverSideEncryption = Objects.requireNonNull(serverSideEncryption);\n+            return this;\n+        }\n+\n+        @NonNull\n+        ServerSideEncryption getServerSideEncryption() {\n+            return serverSideEncryption;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e0833e95f3e6a5ccdfa70b02719906438959f2"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTE0NjgzOnYy", "diffSide": "RIGHT", "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/service/AWSS3StorageService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo1MDozNVrOH1M6FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNDo1NjoxN1rOH1xuBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0ODA1Mw==", "bodyText": "This should probably be AWSS3StorageUploadInputStreamOptions, right?  I don't think UploadOptions is a class, so this doesn't compile right now", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r525548053", "createdAt": "2020-11-17T21:50:35Z", "author": {"login": "richardmcclellan"}, "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/service/AWSS3StorageService.java", "diffHunk": "@@ -147,6 +150,28 @@ public TransferObserver uploadFile(\n         return transferUtility.upload(bucket, serviceKey, file, metadata);\n     }\n \n+    /**\n+     * Begin uploading an inputStream.\n+     * @param serviceKey S3 service key\n+     * @param inputStream Target InputStream\n+     * @param metadata Object metadata to associate with upload\n+     * @return A transfer observer\n+     * @throws IOException An IOException thrown during the process writing an InputStream into a file\n+     */\n+    @NonNull\n+    public TransferObserver uploadInputStream(\n+            @NonNull String serviceKey,\n+            @NonNull InputStream inputStream,\n+            @NonNull ObjectMetadata metadata\n+    ) throws IOException {\n+        startServiceIfNotAlreadyStarted();\n+        UploadOptions uploadOptions = UploadOptions.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e0833e95f3e6a5ccdfa70b02719906438959f2"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTg5NjI1NA==", "bodyText": "We do have UploadOptions class within Storage SDK. This class serves as a builder to pass parameters to upload() method.", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r525896254", "createdAt": "2020-11-18T08:26:55Z", "author": {"login": "changxu0306"}, "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/service/AWSS3StorageService.java", "diffHunk": "@@ -147,6 +150,28 @@ public TransferObserver uploadFile(\n         return transferUtility.upload(bucket, serviceKey, file, metadata);\n     }\n \n+    /**\n+     * Begin uploading an inputStream.\n+     * @param serviceKey S3 service key\n+     * @param inputStream Target InputStream\n+     * @param metadata Object metadata to associate with upload\n+     * @return A transfer observer\n+     * @throws IOException An IOException thrown during the process writing an InputStream into a file\n+     */\n+    @NonNull\n+    public TransferObserver uploadInputStream(\n+            @NonNull String serviceKey,\n+            @NonNull InputStream inputStream,\n+            @NonNull ObjectMetadata metadata\n+    ) throws IOException {\n+        startServiceIfNotAlreadyStarted();\n+        UploadOptions uploadOptions = UploadOptions.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0ODA1Mw=="}, "originalCommit": {"oid": "a8e0833e95f3e6a5ccdfa70b02719906438959f2"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE1MTE3Mg==", "bodyText": "Ahh, right, you added UploadOptions in the 2.19.2 SDK release.  THe build is failing right now though is because Amplify still points to 2.19.1, which doesn't have UploadOptions.  Can you update to 2.19.2 here?  Once you get the build passing, I think this PR is ready to ship!", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r526151172", "createdAt": "2020-11-18T14:56:17Z", "author": {"login": "richardmcclellan"}, "path": "aws-storage-s3/src/main/java/com/amplifyframework/storage/s3/service/AWSS3StorageService.java", "diffHunk": "@@ -147,6 +150,28 @@ public TransferObserver uploadFile(\n         return transferUtility.upload(bucket, serviceKey, file, metadata);\n     }\n \n+    /**\n+     * Begin uploading an inputStream.\n+     * @param serviceKey S3 service key\n+     * @param inputStream Target InputStream\n+     * @param metadata Object metadata to associate with upload\n+     * @return A transfer observer\n+     * @throws IOException An IOException thrown during the process writing an InputStream into a file\n+     */\n+    @NonNull\n+    public TransferObserver uploadInputStream(\n+            @NonNull String serviceKey,\n+            @NonNull InputStream inputStream,\n+            @NonNull ObjectMetadata metadata\n+    ) throws IOException {\n+        startServiceIfNotAlreadyStarted();\n+        UploadOptions uploadOptions = UploadOptions.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU0ODA1Mw=="}, "originalCommit": {"oid": "a8e0833e95f3e6a5ccdfa70b02719906438959f2"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTE3NTIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/storage/options/StorageUploadFileOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo1OTowNlrOH1NLWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMTo1OTowNlrOH1NLWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1MjQ3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Options to specify attributes of put StorageUploadFile API invocation.\n          \n          \n            \n             * Options to specify attributes of put API invocation.", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r525552473", "createdAt": "2020-11-17T21:59:06Z", "author": {"login": "richardmcclellan"}, "path": "core/src/main/java/com/amplifyframework/storage/options/StorageUploadFileOptions.java", "diffHunk": "@@ -17,49 +17,20 @@\n \n import android.annotation.SuppressLint;\n import androidx.annotation.NonNull;\n-import androidx.annotation.Nullable;\n import androidx.core.util.ObjectsCompat;\n \n-import com.amplifyframework.util.Immutable;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Objects;\n-\n /**\n- * Options to specify attributes of put API invocation.\n+ * Options to specify attributes of put StorageUploadFile API invocation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e0833e95f3e6a5ccdfa70b02719906438959f2"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTE5NTA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/storage/options/StorageUploadOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjowNDo0OVrOH1NW6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjowNDo0OVrOH1NW6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1NTQzMg==", "bodyText": "\ud83e\udd29", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r525555432", "createdAt": "2020-11-17T22:04:49Z", "author": {"login": "richardmcclellan"}, "path": "core/src/main/java/com/amplifyframework/storage/options/StorageUploadOptions.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.storage.options;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.core.util.ObjectsCompat;\n+\n+import com.amplifyframework.util.Immutable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Options to specify attributes of put API invocation.\n+ */\n+public abstract class StorageUploadOptions extends StorageOptions {\n+    private final String contentType;\n+    private final Map<String, String> metadata;\n+\n+    /**\n+     * Upload options for Storage.\n+     * @param builder A builder to pass storage options\n+     * @param <B>     the type of builder to chain with\n+     * @param <O>     the type of StorageUploadOptions to chain with\n+     */\n+    protected <B extends Builder<B, O>, O extends StorageUploadOptions>\n+        StorageUploadOptions(final Builder<B, O> builder) {\n+        super(builder.getAccessLevel(), builder.getTargetIdentityId());\n+        this.contentType = builder.getContentType();\n+        this.metadata = builder.getMetadata();\n+    }\n+\n+    /**\n+     * The standard MIME type describing the format of the object to store.\n+     * @return Content type\n+     */\n+    @Nullable\n+    public String getContentType() {\n+        return contentType;\n+    }\n+\n+    /**\n+     * Metadata for the object to store.\n+     * @return metadata\n+     */\n+    @NonNull\n+    public Map<String, String> getMetadata() {\n+        return Immutable.of(metadata);\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        } else if (!(obj instanceof StorageUploadOptions)) {\n+            return false;\n+        } else {\n+            StorageUploadOptions that = (StorageUploadOptions) obj;\n+            return ObjectsCompat.equals(getAccessLevel(), that.getAccessLevel()) &&\n+                    ObjectsCompat.equals(getTargetIdentityId(), that.getTargetIdentityId()) &&\n+                    ObjectsCompat.equals(getContentType(), that.getContentType()) &&\n+                    ObjectsCompat.equals(getMetadata(), that.getMetadata());\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public int hashCode() {\n+        return ObjectsCompat.hash(\n+                getAccessLevel(),\n+                getTargetIdentityId(),\n+                getContentType(),\n+                getMetadata()\n+        );\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @NonNull\n+    @Override\n+    public String toString() {\n+        return \"StorageUploadOptions {\" +\n+                \"accessLevel=\" + getAccessLevel() +\n+                \", targetIdentityId=\" + getTargetIdentityId() +\n+                \", contentType=\" + getContentType() +\n+                \", metadata=\" + getMetadata() +\n+                '}';\n+    }\n+\n+    /**\n+     * Use to configure and build immutable instances of the\n+     * StorageUploadFileOptions, using fluent of property configuration\n+     * methods.\n+     * @param <B> the type of builder to chain with\n+     * @param <O> the type of storageOptions to chain with\n+     */\n+    @SuppressWarnings({\"unchecked\", \"WeakerAccess\"})\n+    public abstract static class Builder<B extends Builder<B, O>, O extends StorageOptions>\n+            extends StorageOptions.Builder<B, O> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e0833e95f3e6a5ccdfa70b02719906438959f2"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTIxMzMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/storage/options/StorageUploadInputStreamOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjoxMDoyNVrOH1NiMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjoxMDoyNVrOH1NiMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU1ODMyMw==", "bodyText": "If this just calls super, can it be deleted?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    /**\n          \n          \n            \n                     * Constructs a new Builder for StorageUploadInputStreamOptions.\n          \n          \n            \n                     */\n          \n          \n            \n                    protected Builder() {\n          \n          \n            \n                        super();\n          \n          \n            \n                    }", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r525558323", "createdAt": "2020-11-17T22:10:25Z", "author": {"login": "richardmcclellan"}, "path": "core/src/main/java/com/amplifyframework/storage/options/StorageUploadInputStreamOptions.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.storage.options;\n+\n+import android.annotation.SuppressLint;\n+import androidx.annotation.NonNull;\n+import androidx.core.util.ObjectsCompat;\n+\n+/**\n+ * Options to specify attributes of put StorageUploadInputStream API invocation.\n+ */\n+public class StorageUploadInputStreamOptions extends StorageUploadOptions {\n+\n+    /**\n+     * Constructs a StorageUploadInputStreamOptions instance with the\n+     * attributes from builder instance.\n+     * @param builder the builder with configured attributes\n+     */\n+    protected StorageUploadInputStreamOptions(final Builder<?> builder) {\n+        super(builder);\n+    }\n+\n+    /**\n+     * Returns a new Builder instance that can be used to configure\n+     * and build a new immutable instance of StorageUploadInputStreamOptions.\n+     * @return a new builder instance\n+     */\n+    @SuppressLint(\"SyntheticAccessor\")\n+    @NonNull\n+    public static Builder<?> builder() {\n+        return new Builder<>();\n+    }\n+\n+    /**\n+     * Factory method to create builder which is configured to prepare\n+     * object instances with the same field values as the provided\n+     * options. This can be used as a starting ground to create a\n+     * new clone of the provided options, which shares some common\n+     * configuration.\n+     * @param options Options to populate into a new builder configuration\n+     * @return A Builder instance that has been configured using the\n+     *         values in the provided options\n+     */\n+    @NonNull\n+    public static Builder<?> from(@NonNull final StorageUploadInputStreamOptions options) {\n+        return builder()\n+            .accessLevel(options.getAccessLevel())\n+            .targetIdentityId(options.getTargetIdentityId())\n+            .contentType(options.getContentType())\n+            .metadata(options.getMetadata());\n+    }\n+\n+    /**\n+     * Creates a new default instance of the StorageUploadInputStreamOptions.\n+     * @return default storage put options\n+     */\n+    @NonNull\n+    public static StorageUploadInputStreamOptions defaultInstance() {\n+        return builder().build();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean equals(Object obj) {\n+        if (this == obj) {\n+            return true;\n+        } else if (!(obj instanceof StorageUploadInputStreamOptions)) {\n+            return false;\n+        } else {\n+            StorageUploadInputStreamOptions that = (StorageUploadInputStreamOptions) obj;\n+            return ObjectsCompat.equals(getAccessLevel(), that.getAccessLevel()) &&\n+                    ObjectsCompat.equals(getTargetIdentityId(), that.getTargetIdentityId()) &&\n+                    ObjectsCompat.equals(getContentType(), that.getContentType()) &&\n+                    ObjectsCompat.equals(getMetadata(), that.getMetadata());\n+        }\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public int hashCode() {\n+        return ObjectsCompat.hash(\n+                getAccessLevel(),\n+                getTargetIdentityId(),\n+                getContentType(),\n+                getMetadata()\n+        );\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @NonNull\n+    @Override\n+    public String toString() {\n+        return \"StorageUploadInputStreamOptions {\" +\n+                \"accessLevel=\" + getAccessLevel() +\n+                \", targetIdentityId=\" + getTargetIdentityId() +\n+                \", contentType=\" + getContentType() +\n+                \", metadata=\" + getMetadata() +\n+                '}';\n+    }\n+\n+    /**\n+     * Use to configure and build immutable instances of the\n+     * StorageUploadInputStreamOptions, using fluent of property configuration\n+     * methods.\n+     * @param <B> the type of builder to chain with\n+     */\n+    @SuppressWarnings({\"unchecked\", \"WeakerAccess\"})\n+    public static class Builder<B extends StorageUploadInputStreamOptions.Builder<B>>\n+            extends StorageUploadOptions.Builder<B, StorageUploadInputStreamOptions> {\n+        /**\n+         * Constructs a new Builder for StorageUploadInputStreamOptions.\n+         */\n+        protected Builder() {\n+            super();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8e0833e95f3e6a5ccdfa70b02719906438959f2"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTIzMzI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/storage/options/StorageUploadFileOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjoxNjoyMVrOH1Nt6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjoxNjoyMVrOH1Nt6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU2MTMyMg==", "bodyText": "If this Builder just calls super(), can you just delete it?", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r525561322", "createdAt": "2020-11-17T22:16:21Z", "author": {"login": "richardmcclellan"}, "path": "core/src/main/java/com/amplifyframework/storage/options/StorageUploadFileOptions.java", "diffHunk": "@@ -153,47 +124,14 @@ public String toString() {\n      * @param <B> the type of builder to chain with\n      */\n     @SuppressWarnings({\"unchecked\", \"WeakerAccess\"})\n-    public static class Builder<B extends Builder<B>> extends StorageOptions.Builder<B, StorageUploadFileOptions> {\n-        private String contentType;\n-        private Map<String, String> metadata;\n+    public static class Builder<B extends Builder<B>>\n+            extends StorageUploadOptions.Builder<B, StorageUploadFileOptions> {\n \n         /**\n          * Constructs a new Builder for StorageUploadFileOptions.\n          */\n         protected Builder() {\n-            this.metadata = new HashMap<>();\n-        }\n-\n-        /**\n-         * Configures the content type for a new StorageUploadFileOptions instance.\n-         * @param contentType Content type\n-         * @return Current Builder instance for fluent chaining\n-         */\n-        @NonNull\n-        public final B contentType(@Nullable String contentType) {\n-            this.contentType = contentType;\n-            return (B) this;\n-        }\n-\n-        /**\n-         * Configures metadata for new StorageUploadFileOptions instance.\n-         * @param metadata Metadata for StorageUploadFileOptions\n-         * @return Current Builder instance for fluent method chaining\n-         */\n-        @NonNull\n-        public final B metadata(@NonNull Map<String, String> metadata) {\n-            this.metadata = new HashMap<>(Objects.requireNonNull(metadata));\n-            return (B) this;\n-        }\n-\n-        @Nullable\n-        final String getContentType() {\n-            return contentType;\n-        }\n-\n-        @NonNull\n-        final Map<String, String> getMetadata() {\n-            return Immutable.of(metadata);\n+            super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46693126c298696d93c5b2f148b4e5593264c944"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5NTI0MTYzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/storage/options/StorageUploadOptions.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjoxODo1NFrOH1NysQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMjoxODo1NFrOH1NysQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTU2MjU0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param <O>     the type of StorageUploadOptions to chain with\n          \n          \n            \n                 * @param <O>     the type of StorageUploadOptions", "url": "https://github.com/aws-amplify/amplify-android/pull/955#discussion_r525562545", "createdAt": "2020-11-17T22:18:54Z", "author": {"login": "richardmcclellan"}, "path": "core/src/main/java/com/amplifyframework/storage/options/StorageUploadOptions.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.storage.options;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.core.util.ObjectsCompat;\n+\n+import com.amplifyframework.util.Immutable;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * Options to specify attributes of put API invocation.\n+ */\n+public abstract class StorageUploadOptions extends StorageOptions {\n+    private final String contentType;\n+    private final Map<String, String> metadata;\n+\n+    /**\n+     * Upload options for Storage.\n+     * @param builder A builder to pass storage options\n+     * @param <B>     the type of builder to chain with\n+     * @param <O>     the type of StorageUploadOptions to chain with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46693126c298696d93c5b2f148b4e5593264c944"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1024, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}