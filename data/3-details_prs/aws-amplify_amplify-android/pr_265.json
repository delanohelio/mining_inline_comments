{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NzkwOTk2", "number": 265, "title": "[aws-datastore] Synchronous adapter utility for instrumentation tests", "bodyText": "A recent commit introduced a base class to be re-used by three similar\ninstrumentation tests. Instead, this functionality is reworked into\nutility code which may be composed into the various storage\ninstrumentation tests.\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-02-16T05:53:32Z", "url": "https://github.com/aws-amplify/amplify-android/pull/265", "merged": true, "mergeCommit": {"oid": "58d1e55d47267b74c188ca59eba9590bf7a40682"}, "closed": true, "closedAt": "2020-02-17T17:23:25Z", "author": {"login": "jamesonwilliams"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEyLfZgH2gAyMzc1NzkwOTk2OmY4ZmQzNjRkODdlZDA2ZGY0YzlmNzc2MTg4YzY0MDY4ZjM0NGE3YTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFQpYXgFqTM1OTg4Mzg1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f8fd364d87ed06df4c9f776188c64068f344a7a8", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/f8fd364d87ed06df4c9f776188c64068f344a7a8", "committedDate": "2020-02-16T05:49:35Z", "message": "[aws-datastore] Synchronous adapter utility for instrumentation tests\n\nA recent commit introduced a base class to be re-used by three similar\ninstrumentation tests. Instead, this functionality is reworked into\nutility code which may be composed into the various storage\ninstrumentation tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NDI2MDMx", "url": "https://github.com/aws-amplify/amplify-android/pull/265#pullrequestreview-359426031", "createdAt": "2020-02-16T20:11:57Z", "commit": {"oid": "f8fd364d87ed06df4c9f776188c64068f344a7a8"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NDI2MTE3", "url": "https://github.com/aws-amplify/amplify-android/pull/265#pullrequestreview-359426117", "createdAt": "2020-02-16T20:13:27Z", "commit": {"oid": "f8fd364d87ed06df4c9f776188c64068f344a7a8"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMDoxMzoyN1rOFqVFEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNlQyMDoyMToyNVrOFqVHHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkyOTg3NA==", "bodyText": "F", "url": "https://github.com/aws-amplify/amplify-android/pull/265#discussion_r379929874", "createdAt": "2020-02-16T20:13:27Z", "author": {"login": "raphkim"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapterQueryTest.java", "diffHunk": "@@ -35,10 +39,27 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n \n-/**\n+/**f", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8fd364d87ed06df4c9f776188c64068f344a7a8"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzMDIwOA==", "bodyText": "Something I noticed as weird while I was working on the same thing, but why did we do this? save(T, QueryPredicate) takes in two non-null values, but we are passing in null here and suppressing the warning with ConstantConditions. Same thing in other operations.", "url": "https://github.com/aws-amplify/amplify-android/pull/265#discussion_r379930208", "createdAt": "2020-02-16T20:18:37Z", "author": {"login": "raphkim"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SynchronousStorageAdapter.java", "diffHunk": "@@ -0,0 +1,279 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.storage.LocalStorageAdapter;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.testutils.Await;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A synchronization wrapper on top of a {@link LocalStorageAdapter} instance, which presents\n+ * the storage adapter's functionality via synchronous methods, without callbacks.\n+ * If any of the synchronous operations timeout, they will throw {@link RuntimeException}.\n+ * If the operation can return an {@link DataStoreException} via an error callback in async form,\n+ * then this adapter will throw that exception on the calling thread directly, to interrupt the\n+ * flow of execution.\n+ */\n+public final class SynchronousStorageAdapter {\n+    private static final long DEFAULT_OPERATION_TIMEOUT_MS = TimeUnit.SECONDS.toMillis(2);\n+\n+    private final long operationTimeoutMs;\n+    private final LocalStorageAdapter localStorageAdapter;\n+\n+    private SynchronousStorageAdapter(\n+            @NonNull LocalStorageAdapter localStorageAdapter,\n+            long operationTimeoutMs) {\n+        this.localStorageAdapter = localStorageAdapter;\n+        this.operationTimeoutMs = operationTimeoutMs;\n+    }\n+\n+    /**\n+     * Creates a new instance which will proxy calls to the provided {@link LocalStorageAdapter}.\n+     * The synchronous operations exposed by the returned adapter will timeout after a default,\n+     * \"reasonable\" delay.\n+     * @param localStorageAdapter Adapter to which calls will be proxied\n+     * @return A SynchronousStorageAdapter configured to proxy towards the provided async storage adapter\n+     */\n+    public static SynchronousStorageAdapter instance(@NonNull LocalStorageAdapter localStorageAdapter) {\n+        Objects.requireNonNull(localStorageAdapter);\n+        return new SynchronousStorageAdapter(localStorageAdapter, DEFAULT_OPERATION_TIMEOUT_MS);\n+    }\n+\n+    /**\n+     * Creates a new instance which will proxy calls to the provided {@link LocalStorageAdapter}.\n+     * The synchronous operations exposed by the returned adapter will timeout after the provided\n+     * amount of time, in milliseconds.\n+     * @param localStorageAdapter Adapter to which calls will be proxied\n+     * @param operationTimeoutMs Amount of time after which an operation will time out\n+     * @return A SynchronousStorageAdapter configured to proxy towards the provided async storage adapter\n+     */\n+    public static SynchronousStorageAdapter instance(\n+            @NonNull LocalStorageAdapter localStorageAdapter, long operationTimeoutMs) {\n+        Objects.requireNonNull(localStorageAdapter);\n+        return new SynchronousStorageAdapter(localStorageAdapter, operationTimeoutMs);\n+    }\n+\n+    /**\n+     * Initializes the storage adapter.\n+     * @param context An Android Context\n+     * @return The list of model schema that are available for use in the adapter\n+     * @throws DataStoreException On any initialization failure\n+     */\n+    @SuppressWarnings(\"UnusedReturnValue\")\n+    List<ModelSchema> initialize(@NonNull Context context) throws DataStoreException {\n+        return Await.result(\n+            operationTimeoutMs,\n+            (Consumer<List<ModelSchema>> onResult, Consumer<DataStoreException> onError) ->\n+                localStorageAdapter.initialize(context, onResult, onError)\n+        );\n+    }\n+\n+    /**\n+     * Terminate use of the storage adapter.\n+     * @throws DataStoreException On failure to terminate\n+     */\n+    void terminate() throws DataStoreException {\n+        localStorageAdapter.terminate();\n+    }\n+\n+    /**\n+     * Save a model into the storage adapter.\n+     * @param model Model to save\n+     * @param <T> Type of model being saved\n+     * @throws DataStoreException On any failure to save model into storage adapter\n+     */\n+    <T extends Model> void save(@NonNull T model) throws DataStoreException {\n+        //noinspection ConstantConditions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8fd364d87ed06df4c9f776188c64068f344a7a8"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzMDI0Mg==", "bodyText": "Let's make predicate @Nullable since the overloaded method calls this with null predicate.", "url": "https://github.com/aws-amplify/amplify-android/pull/265#discussion_r379930242", "createdAt": "2020-02-16T20:19:08Z", "author": {"login": "raphkim"}, "path": "aws-datastore/src/androidTest/java/com/amplifyframework/datastore/storage/sqlite/SynchronousStorageAdapter.java", "diffHunk": "@@ -0,0 +1,279 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.storage.sqlite;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.storage.LocalStorageAdapter;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.testutils.Await;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A synchronization wrapper on top of a {@link LocalStorageAdapter} instance, which presents\n+ * the storage adapter's functionality via synchronous methods, without callbacks.\n+ * If any of the synchronous operations timeout, they will throw {@link RuntimeException}.\n+ * If the operation can return an {@link DataStoreException} via an error callback in async form,\n+ * then this adapter will throw that exception on the calling thread directly, to interrupt the\n+ * flow of execution.\n+ */\n+public final class SynchronousStorageAdapter {\n+    private static final long DEFAULT_OPERATION_TIMEOUT_MS = TimeUnit.SECONDS.toMillis(2);\n+\n+    private final long operationTimeoutMs;\n+    private final LocalStorageAdapter localStorageAdapter;\n+\n+    private SynchronousStorageAdapter(\n+            @NonNull LocalStorageAdapter localStorageAdapter,\n+            long operationTimeoutMs) {\n+        this.localStorageAdapter = localStorageAdapter;\n+        this.operationTimeoutMs = operationTimeoutMs;\n+    }\n+\n+    /**\n+     * Creates a new instance which will proxy calls to the provided {@link LocalStorageAdapter}.\n+     * The synchronous operations exposed by the returned adapter will timeout after a default,\n+     * \"reasonable\" delay.\n+     * @param localStorageAdapter Adapter to which calls will be proxied\n+     * @return A SynchronousStorageAdapter configured to proxy towards the provided async storage adapter\n+     */\n+    public static SynchronousStorageAdapter instance(@NonNull LocalStorageAdapter localStorageAdapter) {\n+        Objects.requireNonNull(localStorageAdapter);\n+        return new SynchronousStorageAdapter(localStorageAdapter, DEFAULT_OPERATION_TIMEOUT_MS);\n+    }\n+\n+    /**\n+     * Creates a new instance which will proxy calls to the provided {@link LocalStorageAdapter}.\n+     * The synchronous operations exposed by the returned adapter will timeout after the provided\n+     * amount of time, in milliseconds.\n+     * @param localStorageAdapter Adapter to which calls will be proxied\n+     * @param operationTimeoutMs Amount of time after which an operation will time out\n+     * @return A SynchronousStorageAdapter configured to proxy towards the provided async storage adapter\n+     */\n+    public static SynchronousStorageAdapter instance(\n+            @NonNull LocalStorageAdapter localStorageAdapter, long operationTimeoutMs) {\n+        Objects.requireNonNull(localStorageAdapter);\n+        return new SynchronousStorageAdapter(localStorageAdapter, operationTimeoutMs);\n+    }\n+\n+    /**\n+     * Initializes the storage adapter.\n+     * @param context An Android Context\n+     * @return The list of model schema that are available for use in the adapter\n+     * @throws DataStoreException On any initialization failure\n+     */\n+    @SuppressWarnings(\"UnusedReturnValue\")\n+    List<ModelSchema> initialize(@NonNull Context context) throws DataStoreException {\n+        return Await.result(\n+            operationTimeoutMs,\n+            (Consumer<List<ModelSchema>> onResult, Consumer<DataStoreException> onError) ->\n+                localStorageAdapter.initialize(context, onResult, onError)\n+        );\n+    }\n+\n+    /**\n+     * Terminate use of the storage adapter.\n+     * @throws DataStoreException On failure to terminate\n+     */\n+    void terminate() throws DataStoreException {\n+        localStorageAdapter.terminate();\n+    }\n+\n+    /**\n+     * Save a model into the storage adapter.\n+     * @param model Model to save\n+     * @param <T> Type of model being saved\n+     * @throws DataStoreException On any failure to save model into storage adapter\n+     */\n+    <T extends Model> void save(@NonNull T model) throws DataStoreException {\n+        //noinspection ConstantConditions\n+        save(model, null);\n+    }\n+\n+    /**\n+     * Save a model.\n+     * @param model Model to save\n+     * @param predicate An existing instance of the model in the storage adapter must meet these criteria\n+     *                  in order for the save to succeed. If null, no criteria are considered\n+     * @param <T> Type of model being saved\n+     * @throws DataStoreException On any failure to save the model\n+     */\n+    <T extends Model> void save(@NonNull T model, @NonNull QueryPredicate predicate)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8fd364d87ed06df4c9f776188c64068f344a7a8"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTkzMDM5OQ==", "bodyText": "I was thinking the same thing! \ud83d\udc4d", "url": "https://github.com/aws-amplify/amplify-android/pull/265#discussion_r379930399", "createdAt": "2020-02-16T20:21:25Z", "author": {"login": "raphkim"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/storage/sqlite/SQLiteStorageAdapter.java", "diffHunk": "@@ -84,7 +84,8 @@\n     private static final int DATABASE_VERSION = 1;\n \n     // Name of the database\n-    private static final String DATABASE_NAME = \"AmplifyDatastore.db\";\n+    @VisibleForTesting @SuppressWarnings(\"checkstyle:all\") // Keep logger first", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8fd364d87ed06df4c9f776188c64068f344a7a8"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODc3ODky", "url": "https://github.com/aws-amplify/amplify-android/pull/265#pullrequestreview-359877892", "createdAt": "2020-02-17T17:07:22Z", "commit": {"oid": "f8fd364d87ed06df4c9f776188c64068f344a7a8"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f92196af60010bab940efbef6463ae6e5d8ab2eb", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/f92196af60010bab940efbef6463ae6e5d8ab2eb", "committedDate": "2020-02-17T17:16:55Z", "message": "Remove stray f as per review feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODgzODU2", "url": "https://github.com/aws-amplify/amplify-android/pull/265#pullrequestreview-359883856", "createdAt": "2020-02-17T17:19:23Z", "commit": {"oid": "f92196af60010bab940efbef6463ae6e5d8ab2eb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2835, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}