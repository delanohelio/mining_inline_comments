{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2NjQ4ODY1", "number": 876, "title": "fix(datastore):Prevent concurrent start/stop on orchestrator", "bodyText": "*Issue #, if available: #853\nDescription of changes:\nAdded a semaphore around start/stop operations for the orchestrator to prevent concurrent calls to these methods.\nModified the tests to attempt to start the orchestrator twice.\nAlso, instead of mocking the AppSyncClient class which is part of the DataStore package, I changed the test to mock the API category instead. If nothing else, it should provide increased coverage since we're now actually testing the code in AppSyncClient.\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-10-02T02:47:52Z", "url": "https://github.com/aws-amplify/amplify-android/pull/876", "merged": true, "mergeCommit": {"oid": "89ed53d3f2b887c6b23439c776be133fa1ac0819"}, "closed": true, "closedAt": "2020-10-09T10:38:12Z", "author": {"login": "rjuliano"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOcxyhAH2gAyNDk2NjQ4ODY1OjFkNWRmODQzZDM3NDhiM2NjNjdlZmMwNzlhODdhZjg2YjhiYmU0YjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQtV8NgFqTUwNTMzMTEyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1d5df843d3748b3cc67efc079a87af86b8bbe4b1", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/1d5df843d3748b3cc67efc079a87af86b8bbe4b1", "committedDate": "2020-10-02T02:43:54Z", "message": "fix(datastore):Prevent concurrent start/stop on orchestrator"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwODcyNTQw", "url": "https://github.com/aws-amplify/amplify-android/pull/876#pullrequestreview-500872540", "createdAt": "2020-10-02T05:51:45Z", "commit": {"oid": "1d5df843d3748b3cc67efc079a87af86b8bbe4b1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNTo1MTo0NlrOHbh0NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNTo1MTo0NlrOHbh0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODYyNzYzNw==", "bodyText": "Given that you generally want calls to stop to be terminal maybe use acquire so calling thread blocks or tryAcquire with timeout for a softer approach?", "url": "https://github.com/aws-amplify/amplify-android/pull/876#discussion_r498627637", "createdAt": "2020-10-02T05:51:46Z", "author": {"login": "saltonmassally"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -180,9 +189,16 @@ private Completable transitionCompletable() {\n      */\n     public Completable stop() {\n         LOG.info(\"DataStore orchestrator stopping. Current mode = \" + currentMode.get().name());\n+        if (!startStopSemaphore.tryAcquire()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d5df843d3748b3cc67efc079a87af86b8bbe4b1"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0ff24dddc6958027a5ebdce04b23069d43b5cd5", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/b0ff24dddc6958027a5ebdce04b23069d43b5cd5", "committedDate": "2020-10-02T13:49:01Z", "message": "Modify lock around stop operation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMzcyNTc1", "url": "https://github.com/aws-amplify/amplify-android/pull/876#pullrequestreview-501372575", "createdAt": "2020-10-02T18:52:06Z", "commit": {"oid": "b0ff24dddc6958027a5ebdce04b23069d43b5cd5"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODo1MjowNlrOHb4QSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxOToxNDo0OVrOHb429A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk5NTI3NA==", "bodyText": "We'll end up seeing this message from the returned exception, so there's probably no benefit to printing it immediately, too.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        LOG.warn(\"Unable to acquire orchestrator lock. Transition currently in progress.\");", "url": "https://github.com/aws-amplify/amplify-android/pull/876#discussion_r498995274", "createdAt": "2020-10-02T18:52:06Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -180,9 +189,20 @@ private Completable transitionCompletable() {\n      */\n     public Completable stop() {\n         LOG.info(\"DataStore orchestrator stopping. Current mode = \" + currentMode.get().name());\n+        try {\n+            startStopSemaphore.acquire();\n+\n+        } catch (InterruptedException exception) {\n+            LOG.warn(\"Unable to acquire orchestrator lock. Transition currently in progress.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff24dddc6958027a5ebdce04b23069d43b5cd5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk5NjUwMA==", "bodyText": "I'm deliberating between whether this should be acquire() or tryAcquire(). Currently, I guess this will complete with error on subsequent invocations? Does the consuming code handle that gracefully?\nIf we did use acquire(), we'd just want to ensure that this completable chain has some kind of a timeout on it, somewhere (if not directly as arguments to the .acquire(timeout, ...), then elsewhere in the chain.)", "url": "https://github.com/aws-amplify/amplify-android/pull/876#discussion_r498996500", "createdAt": "2020-10-02T18:54:42Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -135,10 +138,16 @@ public boolean isStopped() {\n      * Start performing sync operations between the local storage adapter\n      * and the remote GraphQL endpoint.\n      */\n-    public void start() {\n+    public synchronized void start() {\n+        LOG.debug(\"Available permits = \" + startStopSemaphore.availablePermits());\n+        if (!startStopSemaphore.tryAcquire()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff24dddc6958027a5ebdce04b23069d43b5cd5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk5NzI0Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public Completable stop() {\n          \n          \n            \n                public synchronized Completable stop() {", "url": "https://github.com/aws-amplify/amplify-android/pull/876#discussion_r498997242", "createdAt": "2020-10-02T18:56:15Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -180,9 +189,20 @@ private Completable transitionCompletable() {\n      */\n     public Completable stop() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff24dddc6958027a5ebdce04b23069d43b5cd5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk5NzYyMw==", "bodyText": "Does this have the potential to hang indefinitely? Should we add timeout arguments?", "url": "https://github.com/aws-amplify/amplify-android/pull/876#discussion_r498997623", "createdAt": "2020-10-02T18:57:05Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -180,9 +189,20 @@ private Completable transitionCompletable() {\n      */\n     public Completable stop() {\n         LOG.info(\"DataStore orchestrator stopping. Current mode = \" + currentMode.get().name());\n+        try {\n+            startStopSemaphore.acquire();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff24dddc6958027a5ebdce04b23069d43b5cd5"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwMDQxNQ==", "bodyText": "AppSyncMocking lives in com.amplifyframework.datastore.appsync since the AppSync interface does. Your new ApiMocking might be a testutility, since it mocks a core spec (the ApiCategoryBehavior.) In this view, it could live somewhere under testutils/src/main/java/com/amplifyframework/testutils. I don't feel 100% resolved in this, though. What do you think?", "url": "https://github.com/aws-amplify/amplify-android/pull/876#discussion_r499000415", "createdAt": "2020-10-02T19:03:28Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/appsync/ApiMocking.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.appsync;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff24dddc6958027a5ebdce04b23069d43b5cd5"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwMDgzMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                private ApiMocking(){\n          \n          \n            \n            \n          \n          \n            \n                }\n          \n          \n            \n                private ApiMocking() {}", "url": "https://github.com/aws-amplify/amplify-android/pull/876#discussion_r499000830", "createdAt": "2020-10-02T19:04:33Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/appsync/ApiMocking.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.appsync;\n+\n+import com.amplifyframework.api.graphql.GraphQLBehavior;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.api.graphql.GraphQLResponse;\n+import com.amplifyframework.api.graphql.PaginatedResult;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.temporal.Temporal;\n+import com.amplifyframework.testutils.random.RandomString;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.mockito.ArgumentMatcher;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.reactivex.rxjava3.core.Observable;\n+\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.doAnswer;\n+\n+/**\n+ * Utility to mock behaviors of the API category.\n+ */\n+public final class ApiMocking {\n+\n+    private ApiMocking(){\n+\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff24dddc6958027a5ebdce04b23069d43b5cd5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwMTc5Nw==", "bodyText": "This method name is leaking an abstraction, I think. The API category doesn't know about \"sync\"ing, that's a datastore thing. However, the class is called ApiMocking. To stay pure to its charter, this should probably not mention \"sync\" anywhere, just \"query.\"\nAlso, since ModelWithMetadata is essentially a DataStore detail, I would pull that out of the implementation as well. Instead, you could provide them at the call site:\npublic static <T> void mockSuccessfulSyncQuery(GraphQLBehavior mockApi, T... results) {\n    ...\n    // Implementation no longer mentions ModelWithMetadata either\n    onResults.accept(new GraphQLResponse<PaginatedResult<T>>(\n                new PaginatedResult<T>(syncQueryResults, null));\n    ...\n}", "url": "https://github.com/aws-amplify/amplify-android/pull/876#discussion_r499001797", "createdAt": "2020-10-02T19:06:41Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/appsync/ApiMocking.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.appsync;\n+\n+import com.amplifyframework.api.graphql.GraphQLBehavior;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.api.graphql.GraphQLResponse;\n+import com.amplifyframework.api.graphql.PaginatedResult;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.temporal.Temporal;\n+import com.amplifyframework.testutils.random.RandomString;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.mockito.ArgumentMatcher;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.reactivex.rxjava3.core.Observable;\n+\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.doAnswer;\n+\n+/**\n+ * Utility to mock behaviors of the API category.\n+ */\n+public final class ApiMocking {\n+\n+    private ApiMocking(){\n+\n+    }\n+\n+    /**\n+     * Mock successful subscription start calls.\n+     * @param mockApi Mock object of type {@link GraphQLBehavior}\n+     */\n+    public static void mockSubscriptionStart(GraphQLBehavior mockApi) {\n+        doAnswer(invocation -> {\n+            final int indexOfOnStart = 1;\n+            Consumer<String> onStart = invocation.getArgument(indexOfOnStart);\n+            onStart.accept(RandomString.string());\n+            return null;\n+        }).when(mockApi).subscribe(\n+            any(), // Class<T>\n+            any(), // Consumer<String>, onStart\n+            any(), // Consumer<GraphQLResponse<ModelWithMetadata<T>>>, onNextResponse\n+            any(), // Consumer<DataStoreException>, onSubscriptionFailure\n+            any() // Action, onSubscriptionCompleted\n+        );\n+    }\n+\n+    /**\n+     * Mock a successful mutation call made for a given model.\n+     * @param mockApi Mock object of type {@link GraphQLBehavior}\n+     * @param model The model for the mutation operation.\n+     * @param <M> The model type.\n+     */\n+    public static <M extends Model> void mockSuccessfulMutation(GraphQLBehavior mockApi, M model) {\n+        doAnswer(invocation -> {\n+            // Simulate a successful response callback from the create() method.\n+            final int indexOfModelBeingCreated = 0;\n+            final int indexOfResultConsumer = 1;\n+            GraphQLRequest<M> request = invocation.getArgument(indexOfModelBeingCreated);\n+\n+            // Pass back a ModelWithMetadata. Model is the one provided.\n+            ModelMetadata metadata =\n+                new ModelMetadata(model.getId(), false, 1, new Temporal.Timestamp());\n+            ModelWithMetadata<M> modelWithMetadata = new ModelWithMetadata<>(model, metadata);\n+            Consumer<GraphQLResponse<ModelWithMetadata<M>>> onResult =\n+                invocation.getArgument(indexOfResultConsumer);\n+            onResult.accept(new GraphQLResponse<>(modelWithMetadata, Collections.emptyList()));\n+\n+            // Technically, create() returns a Cancelable...\n+            return null;\n+        }).when(mockApi).mutate(\n+            argThat(getMatcherFor(model)), // Match the id of the model passed in to the function.\n+            any(), // onResponse\n+            any() // onFailure\n+        );\n+    }\n+\n+    /**\n+     * Mock the results of successful query operation triggered by the DataStore.\n+     * @param mockApi Mock object of type {@link GraphQLBehavior}\n+     * @param models A list of models to be returned in the result.\n+     * @param <M> The model type.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <M extends Model> void mockSuccessfulSyncQuery(GraphQLBehavior mockApi, M... models) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff24dddc6958027a5ebdce04b23069d43b5cd5"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwMzQ5NA==", "bodyText": "Maybe just take the model ID as an arg, and rename it to:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static <M extends Model> ArgumentMatcher<GraphQLRequest<M>> getMatcherFor(M model) {\n          \n          \n            \n                private static <M extends Model> ArgumentMatcher<GraphQLRequest<M>> requestContainsModelId(String modelId) {", "url": "https://github.com/aws-amplify/amplify-android/pull/876#discussion_r499003494", "createdAt": "2020-10-02T19:10:49Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/appsync/ApiMocking.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.appsync;\n+\n+import com.amplifyframework.api.graphql.GraphQLBehavior;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.api.graphql.GraphQLResponse;\n+import com.amplifyframework.api.graphql.PaginatedResult;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.temporal.Temporal;\n+import com.amplifyframework.testutils.random.RandomString;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.mockito.ArgumentMatcher;\n+\n+import java.util.Collections;\n+import java.util.List;\n+\n+import io.reactivex.rxjava3.core.Observable;\n+\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.argThat;\n+import static org.mockito.Mockito.doAnswer;\n+\n+/**\n+ * Utility to mock behaviors of the API category.\n+ */\n+public final class ApiMocking {\n+\n+    private ApiMocking(){\n+\n+    }\n+\n+    /**\n+     * Mock successful subscription start calls.\n+     * @param mockApi Mock object of type {@link GraphQLBehavior}\n+     */\n+    public static void mockSubscriptionStart(GraphQLBehavior mockApi) {\n+        doAnswer(invocation -> {\n+            final int indexOfOnStart = 1;\n+            Consumer<String> onStart = invocation.getArgument(indexOfOnStart);\n+            onStart.accept(RandomString.string());\n+            return null;\n+        }).when(mockApi).subscribe(\n+            any(), // Class<T>\n+            any(), // Consumer<String>, onStart\n+            any(), // Consumer<GraphQLResponse<ModelWithMetadata<T>>>, onNextResponse\n+            any(), // Consumer<DataStoreException>, onSubscriptionFailure\n+            any() // Action, onSubscriptionCompleted\n+        );\n+    }\n+\n+    /**\n+     * Mock a successful mutation call made for a given model.\n+     * @param mockApi Mock object of type {@link GraphQLBehavior}\n+     * @param model The model for the mutation operation.\n+     * @param <M> The model type.\n+     */\n+    public static <M extends Model> void mockSuccessfulMutation(GraphQLBehavior mockApi, M model) {\n+        doAnswer(invocation -> {\n+            // Simulate a successful response callback from the create() method.\n+            final int indexOfModelBeingCreated = 0;\n+            final int indexOfResultConsumer = 1;\n+            GraphQLRequest<M> request = invocation.getArgument(indexOfModelBeingCreated);\n+\n+            // Pass back a ModelWithMetadata. Model is the one provided.\n+            ModelMetadata metadata =\n+                new ModelMetadata(model.getId(), false, 1, new Temporal.Timestamp());\n+            ModelWithMetadata<M> modelWithMetadata = new ModelWithMetadata<>(model, metadata);\n+            Consumer<GraphQLResponse<ModelWithMetadata<M>>> onResult =\n+                invocation.getArgument(indexOfResultConsumer);\n+            onResult.accept(new GraphQLResponse<>(modelWithMetadata, Collections.emptyList()));\n+\n+            // Technically, create() returns a Cancelable...\n+            return null;\n+        }).when(mockApi).mutate(\n+            argThat(getMatcherFor(model)), // Match the id of the model passed in to the function.\n+            any(), // onResponse\n+            any() // onFailure\n+        );\n+    }\n+\n+    /**\n+     * Mock the results of successful query operation triggered by the DataStore.\n+     * @param mockApi Mock object of type {@link GraphQLBehavior}\n+     * @param models A list of models to be returned in the result.\n+     * @param <M> The model type.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public static <M extends Model> void mockSuccessfulSyncQuery(GraphQLBehavior mockApi, M... models) {\n+        doAnswer(invocation -> {\n+            final int onResultsIndex = 1;\n+            // Transform from an array of Model types to, to a list of ModelWithMetadata<M extends Model>\n+            List<ModelWithMetadata<M>> syncQueryResults =\n+                Observable.fromArray(models)\n+                          .map(model -> {\n+                              ModelMetadata metadata = new ModelMetadata(model.getId(),\n+                                                                         false,\n+                                                                         1,\n+                                                                         Temporal.Timestamp.now());\n+                              ModelWithMetadata<M> modelWithMetadata = new ModelWithMetadata<>(model, metadata);\n+                              return modelWithMetadata;\n+                          })\n+                          .toList()\n+                          .blockingGet();\n+\n+            // The callback function to be invoked with the results\n+            Consumer<GraphQLResponse<PaginatedResult<ModelWithMetadata<M>>>> onResults =\n+                invocation.getArgument(onResultsIndex);\n+            onResults.accept(new GraphQLResponse<PaginatedResult<ModelWithMetadata<M>>>(\n+                new PaginatedResult<ModelWithMetadata<M>>(syncQueryResults, null),\n+                Collections.emptyList()\n+            ));\n+            return null;\n+        }).when(mockApi).query(\n+            any(), // Request\n+            any(), // onResponse\n+            any()  // onFailure\n+        );\n+    }\n+\n+    private static <M extends Model> ArgumentMatcher<GraphQLRequest<M>> getMatcherFor(M model) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff24dddc6958027a5ebdce04b23069d43b5cd5"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTAwNTE3Mg==", "bodyText": "I forget exactly why I went with the static methods in the AppSyncMocking util. I think my goal was to get something that looked like Mockito:\nonCreate(appSync).callOnStart();\nIn hind-sight, it might have been a better design to create an object instance that encapsulated the appSync instance.\nOr, in other words, what if your utility worked like:\nApiMocking mocking = new ApiMocking(mock(GraphQLBehavior.class));\nOr even  just:\n// internally, encapsulates a `Mockito.mock(GraphQLBehavior.class)`\nMockGraphQLApi api = new MockGraphQLApi();", "url": "https://github.com/aws-amplify/amplify-android/pull/876#discussion_r499005172", "createdAt": "2020-10-02T19:14:49Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/OrchestratorTest.java", "diffHunk": "@@ -70,19 +73,18 @@ public void itemsPlacedInStorageArePublishedToNetwork() throws AmplifyException\n             .name(\"Susan Quimby\")\n             .build();\n \n-        HubAccumulator accumulator =\n-            HubAccumulator.create(HubChannel.DATASTORE, publicationOf(susan), 1)\n+        HubAccumulator orchestratorInitObserver =\n+            HubAccumulator.create(HubChannel.DATASTORE, DataStoreChannelEventName.READY, 1)\n                 .start();\n \n-        // Mock behaviors from AppSync\n-        AppSync appSync = mock(AppSync.class);\n-        ModelMetadata metadata = new ModelMetadata(susan.getId(), false, 1, Temporal.Timestamp.now());\n-        ModelWithMetadata<BlogOwner> modelWithMetadata = new ModelWithMetadata<>(susan, metadata);\n-        AppSyncMocking.create(appSync).mockResponse(susan);\n-        AppSyncMocking.sync(appSync).mockSuccessResponse(BlogOwner.class, modelWithMetadata);\n-        AppSyncMocking.onCreate(appSync).callOnStart();\n-        AppSyncMocking.onDelete(appSync).callOnStart();\n-        AppSyncMocking.onUpdate(appSync).callOnStart();\n+        // Mock behaviors from for the API category\n+        GraphQLBehavior mockApi = mock(GraphQLBehavior.class);\n+\n+        ApiMocking.mockSubscriptionStart(mockApi);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ff24dddc6958027a5ebdce04b23069d43b5cd5"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf757a5878548d98712746ff974e496d6de15785", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/bf757a5878548d98712746ff974e496d6de15785", "committedDate": "2020-10-02T20:48:19Z", "message": "Apply suggestions from code review\n\nCo-authored-by: Jameson Williams <jhwill@amazon.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxNTgxODYx", "url": "https://github.com/aws-amplify/amplify-android/pull/876#pullrequestreview-501581861", "createdAt": "2020-10-04T00:18:43Z", "commit": {"oid": "1d5df843d3748b3cc67efc079a87af86b8bbe4b1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMDoxODo0M1rOHcET1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNFQwMDoxODo0M1rOHcET1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTE5Mjc4OQ==", "bodyText": "In the problem description here: #853 you mentioned that we should only We truly only need to block until the storage observer starts, in here it looks like we are still blocking everything , shall we release the startStopSemaphore as soon as startObservingStorageChanges() is done? something like:\nmutationOutbox.load()\n    .andThen(Completable.create(emitter -> {\n        storageObserver.startObservingStorageChanges(emitter::onComplete);\n        currentMode.set(Mode.LOCAL_ONLY);\n    }))\n    .doFinally(startStopSemaphore::release)\n    .blockingAwait(OP_TIMEOUT_SECONDS, TimeUnit.SECONDS);", "url": "https://github.com/aws-amplify/amplify-android/pull/876#discussion_r499192789", "createdAt": "2020-10-04T00:18:43Z", "author": {"login": "richardissuperman"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -135,10 +138,16 @@ public boolean isStopped() {\n      * Start performing sync operations between the local storage adapter\n      * and the remote GraphQL endpoint.\n      */\n-    public void start() {\n+    public synchronized void start() {\n+        LOG.debug(\"Available permits = \" + startStopSemaphore.availablePermits());\n+        if (!startStopSemaphore.tryAcquire()) {\n+            LOG.warn(\"Unable to acquire orchestrator lock. Transition currently in progress.\");\n+            return;\n+        }\n         disposables.add(transitionCompletable()\n             .subscribeOn(startStopScheduler)\n             .doOnDispose(() -> LOG.debug(\"Orchestrator disposed a transition.\"))\n+            .doFinally(startStopSemaphore::release)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d5df843d3748b3cc67efc079a87af86b8bbe4b1"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f3e511152ba4f2f60bd92a32801bc2012ef543f", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/3f3e511152ba4f2f60bd92a32801bc2012ef543f", "committedDate": "2020-10-05T18:23:26Z", "message": "Added overload of start to override timeout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff41ff03fa778646396946072091fbdb8938176f", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/ff41ff03fa778646396946072091fbdb8938176f", "committedDate": "2020-10-06T14:19:51Z", "message": "Moved ApiMocking class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9f54bcca8a2b523d666f6250d86251372fb243d", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/f9f54bcca8a2b523d666f6250d86251372fb243d", "committedDate": "2020-10-06T18:44:24Z", "message": "Make orchestrator return a completable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3cc20e2f327a0909e351c4c494e2496963aadc4e", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/3cc20e2f327a0909e351c4c494e2496963aadc4e", "committedDate": "2020-10-08T13:43:21Z", "message": "Merge remote-tracking branch 'origin/main' into rjuliano/orchestrator-lock"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2646a0f75e4cdd48d1c868d938761c1d279bfb39", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/2646a0f75e4cdd48d1c868d938761c1d279bfb39", "committedDate": "2020-10-08T14:04:26Z", "message": "resolve merge issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0ODk4OTA0", "url": "https://github.com/aws-amplify/amplify-android/pull/876#pullrequestreview-504898904", "createdAt": "2020-10-08T15:21:15Z", "commit": {"oid": "2646a0f75e4cdd48d1c868d938761c1d279bfb39"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNToyMToxNVrOHej4NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxNTozNzo1NFrOHekoBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgwNzE1Ng==", "bodyText": "succeeded*", "url": "https://github.com/aws-amplify/amplify-android/pull/876#discussion_r501807156", "createdAt": "2020-10-08T15:21:15Z", "author": {"login": "raphkim"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -142,24 +142,53 @@ public boolean isStopped() {\n         return Mode.STOPPED.equals(currentMode.get());\n     }\n \n+    /**\n+     * Start the orchestrator with the default timeout of 10 seconds.\n+     * @return A completable that when subscribed to will attempt to start the orchestrator.\n+     */\n+    public synchronized Completable start() {\n+        return start(NETWORK_OP_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n+    }\n+\n     /**\n      * Start performing sync operations between the local storage adapter\n-     * and the remote GraphQL endpoint.\n+     * and the remote GraphQL endpoint. The timeout parameters provided will be\n+     * used to block execution of the current thread until lock acquisition has\n+     * either failed or succeded, or the timeout is elapsed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2646a0f75e4cdd48d1c868d938761c1d279bfb39"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxMTA0NA==", "bodyText": "I understand that you are testing the semaphore, but can we move this to a separate test case? Someone without context checking out this test might get confused why this step is necessary in testing that the \"items placed in storage are published to network\".", "url": "https://github.com/aws-amplify/amplify-android/pull/876#discussion_r501811044", "createdAt": "2020-10-08T15:26:16Z", "author": {"login": "raphkim"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/OrchestratorTest.java", "diffHunk": "@@ -100,8 +113,17 @@ public void itemsPlacedInStorageArePublishedToNetwork() throws AmplifyException\n             );\n \n         // Arrange: orchestrator is running\n-        orchestrator.start();\n+        orchestrator.start().subscribe();\n+\n+        // Try to start it in a new thread.\n+        new Thread(() -> orchestrator.start().subscribe()).start();\n+        // Try to start it again on a current thread.\n+        orchestrator.start().subscribe();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2646a0f75e4cdd48d1c868d938761c1d279bfb39"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxOTM5Nw==", "bodyText": "Considering that we are using this lock for mutual exclusion, isn't this log redundant?", "url": "https://github.com/aws-amplify/amplify-android/pull/876#discussion_r501819397", "createdAt": "2020-10-08T15:37:54Z", "author": {"login": "raphkim"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -142,24 +142,53 @@ public boolean isStopped() {\n         return Mode.STOPPED.equals(currentMode.get());\n     }\n \n+    /**\n+     * Start the orchestrator with the default timeout of 10 seconds.\n+     * @return A completable that when subscribed to will attempt to start the orchestrator.\n+     */\n+    public synchronized Completable start() {\n+        return start(NETWORK_OP_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n+    }\n+\n     /**\n      * Start performing sync operations between the local storage adapter\n-     * and the remote GraphQL endpoint.\n+     * and the remote GraphQL endpoint. The timeout parameters provided will be\n+     * used to block execution of the current thread until lock acquisition has\n+     * either failed or succeded, or the timeout is elapsed.\n+     *\n+     * @param opTimeout The desired timeout for the start operation.\n+     * @param timeUnit The unit of time of the opTimeout parameter.\n+     * @return A completable that when subscribed to will attempt to start the orchestrator.\n      */\n-    public void start() {\n-        disposables.add(transitionCompletable()\n-            .subscribeOn(startStopScheduler)\n-            .doOnDispose(() -> LOG.debug(\"Orchestrator disposed a transition.\"))\n-            .subscribe(\n-                () -> {\n-                    LOG.debug(\"Orchestrator completed a transition\");\n-                    if (isStarted()) {\n-                        Amplify.Hub.publish(HubChannel.DATASTORE,\n-                            HubEvent.create(DataStoreChannelEventName.READY));\n-                    }\n-                },\n-                failure -> LOG.warn(\"Orchestrator failed to transition.\")\n-            ));\n+    public synchronized Completable start(long opTimeout, TimeUnit timeUnit) {\n+        if (tryAcquireStartStopLock(opTimeout, timeUnit)) {\n+            return transitionCompletable()\n+                .doOnSubscribe(subscriber -> {\n+                    LOG.debug(\"Starting the orchestrator.\");\n+                })\n+                .doOnComplete(() -> LOG.debug(\"Orchestrator started.\"))\n+                .doOnDispose(() -> LOG.debug(\"Orchestrator disposed a transition.\"))\n+                .doFinally(startStopSemaphore::release)\n+                .subscribeOn(startStopScheduler);\n+        } else {\n+            return Completable.error(new DataStoreException(\"Unable to acquire orchestrator lock. \" +\n+                                                        \"Transition currently in progress.\",\n+                                                        \"Retry your operation.\"));\n+        }\n+    }\n+\n+    private boolean tryAcquireStartStopLock(long opTimeout, TimeUnit timeUnit) {\n+        LOG.debug(\"Attempting to acquire lock. Permits available = \" + startStopSemaphore.availablePermits());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2646a0f75e4cdd48d1c868d938761c1d279bfb39"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MDY3MDAx", "url": "https://github.com/aws-amplify/amplify-android/pull/876#pullrequestreview-505067001", "createdAt": "2020-10-08T18:43:41Z", "commit": {"oid": "2646a0f75e4cdd48d1c868d938761c1d279bfb39"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0Mzo0MVrOHerz1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODo0NTo1N1rOHer4xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNzExMA==", "bodyText": "To the fullest extent possible, we should keep this logic within the Orchestrator itself. The plugin is (theoretically) intended to be a thin veneer, and the Orchestrator itself has the job of managing start/stop lifecycle.\nIs there a way to get the actions of the subscribe callbacks back into the Orchestrator, here?", "url": "https://github.com/aws-amplify/amplify-android/pull/876#discussion_r501937110", "createdAt": "2020-10-08T18:43:41Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -223,7 +225,22 @@ public void initialize(@NonNull Context context) throws AmplifyException {\n                 initError, AmplifyException.TODO_RECOVERY_SUGGESTION\n             );\n         }\n-        orchestrator.start();\n+        startOrchestratorAsync();\n+    }\n+\n+    private void startOrchestratorAsync() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2646a0f75e4cdd48d1c868d938761c1d279bfb39"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzNzQ2Mw==", "bodyText": "I'm a little confused by this. What does it mean to have a 0 second timeout? Would it be better to just fork the start() API, and have startWithBehaviorFoo() and startWithBehaviorBar()?", "url": "https://github.com/aws-amplify/amplify-android/pull/876#discussion_r501937463", "createdAt": "2020-10-08T18:44:22Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -489,11 +506,8 @@ public void clear(@NonNull Action onComplete,\n \n     private void beforeOperation(@NonNull final Runnable runnable) {\n         try {\n-            Completable.fromAction(\n-                () -> {\n-                    categoryInitializationsPending.await();\n-                    orchestrator.start();\n-                })\n+            categoryInitializationsPending.await();\n+            orchestrator.start(BEFORE_OP_TIMEOUT_MS, TimeUnit.MILLISECONDS)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2646a0f75e4cdd48d1c868d938761c1d279bfb39"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkzODM3Mw==", "bodyText": "@raphkim I think your point is that this is a \"yes/no\" log, not a \"0...k\" log, right? Or in other words, the observation is that availablePermits() is either 0 or 1?", "url": "https://github.com/aws-amplify/amplify-android/pull/876#discussion_r501938373", "createdAt": "2020-10-08T18:45:57Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -142,24 +142,53 @@ public boolean isStopped() {\n         return Mode.STOPPED.equals(currentMode.get());\n     }\n \n+    /**\n+     * Start the orchestrator with the default timeout of 10 seconds.\n+     * @return A completable that when subscribed to will attempt to start the orchestrator.\n+     */\n+    public synchronized Completable start() {\n+        return start(NETWORK_OP_TIMEOUT_SECONDS, TimeUnit.SECONDS);\n+    }\n+\n     /**\n      * Start performing sync operations between the local storage adapter\n-     * and the remote GraphQL endpoint.\n+     * and the remote GraphQL endpoint. The timeout parameters provided will be\n+     * used to block execution of the current thread until lock acquisition has\n+     * either failed or succeded, or the timeout is elapsed.\n+     *\n+     * @param opTimeout The desired timeout for the start operation.\n+     * @param timeUnit The unit of time of the opTimeout parameter.\n+     * @return A completable that when subscribed to will attempt to start the orchestrator.\n      */\n-    public void start() {\n-        disposables.add(transitionCompletable()\n-            .subscribeOn(startStopScheduler)\n-            .doOnDispose(() -> LOG.debug(\"Orchestrator disposed a transition.\"))\n-            .subscribe(\n-                () -> {\n-                    LOG.debug(\"Orchestrator completed a transition\");\n-                    if (isStarted()) {\n-                        Amplify.Hub.publish(HubChannel.DATASTORE,\n-                            HubEvent.create(DataStoreChannelEventName.READY));\n-                    }\n-                },\n-                failure -> LOG.warn(\"Orchestrator failed to transition.\")\n-            ));\n+    public synchronized Completable start(long opTimeout, TimeUnit timeUnit) {\n+        if (tryAcquireStartStopLock(opTimeout, timeUnit)) {\n+            return transitionCompletable()\n+                .doOnSubscribe(subscriber -> {\n+                    LOG.debug(\"Starting the orchestrator.\");\n+                })\n+                .doOnComplete(() -> LOG.debug(\"Orchestrator started.\"))\n+                .doOnDispose(() -> LOG.debug(\"Orchestrator disposed a transition.\"))\n+                .doFinally(startStopSemaphore::release)\n+                .subscribeOn(startStopScheduler);\n+        } else {\n+            return Completable.error(new DataStoreException(\"Unable to acquire orchestrator lock. \" +\n+                                                        \"Transition currently in progress.\",\n+                                                        \"Retry your operation.\"));\n+        }\n+    }\n+\n+    private boolean tryAcquireStartStopLock(long opTimeout, TimeUnit timeUnit) {\n+        LOG.debug(\"Attempting to acquire lock. Permits available = \" + startStopSemaphore.availablePermits());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTgxOTM5Nw=="}, "originalCommit": {"oid": "2646a0f75e4cdd48d1c868d938761c1d279bfb39"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb731873b28a1368af6951289e14a4b48fd44e39", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/fb731873b28a1368af6951289e14a4b48fd44e39", "committedDate": "2020-10-08T19:28:48Z", "message": "Split out test and fixed typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e6c590e7429d6566eddfdbeabd2781abcdb9993", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/1e6c590e7429d6566eddfdbeabd2781abcdb9993", "committedDate": "2020-10-08T21:31:52Z", "message": "Remove the start method with timeouts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18beb514684957bf8ee15dbb6c5b7e1d21679719", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/18beb514684957bf8ee15dbb6c5b7e1d21679719", "committedDate": "2020-10-08T21:42:13Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8813514e8a25b238f45b8d4568ea998eafe90214", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/8813514e8a25b238f45b8d4568ea998eafe90214", "committedDate": "2020-10-08T21:56:59Z", "message": "more cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c68d281f92a4ccdd11cdbab657a788440b0a178", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/2c68d281f92a4ccdd11cdbab657a788440b0a178", "committedDate": "2020-10-08T22:14:12Z", "message": "Merge remote-tracking branch 'origin/main' into rjuliano/orchestrator-lock"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1MzMxMTI0", "url": "https://github.com/aws-amplify/amplify-android/pull/876#pullrequestreview-505331124", "createdAt": "2020-10-09T03:09:43Z", "commit": {"oid": "2c68d281f92a4ccdd11cdbab657a788440b0a178"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1729, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}