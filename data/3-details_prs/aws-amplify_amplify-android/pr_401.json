{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4OTIzMDk5", "number": 401, "title": "[aws-datstore] Implementation of user-provided DataStore configs", "bodyText": "Sorry guys, had to end up creating a new PR (this is a continuation of #395 which I botched on a merge)\nDescription of changes:\nHighlights of this edition as compared to #395\n\nMove the configuration responsibility back into the the configure method of the DataStore plugin. As a result, I had to add a bit of synchronization code in the constructor of the DataStore plugin class to wait for the configuration to be initialized before creating an instance of the Orchestrator.\nChange syncInterval to syncInterval in minutes\nUpdated javadoc descriptions for the DataStoreConflictResult enum.\nRe-structure the code that returns an empty CategoryConfiguration if one can't be found in the Amplify config file.\n\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-04-25T15:14:20Z", "url": "https://github.com/aws-amplify/amplify-android/pull/401", "merged": true, "mergeCommit": {"oid": "6b9b962c5bb299969223149f5c227bd5840c4553"}, "closed": true, "closedAt": "2020-05-01T02:25:03Z", "author": {"login": "rjuliano"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbHbYkgH2gAyNDA4OTIzMDk5OmQ5NWYwNjUwYTFhNDUxZTNkOWM0MTY3OTVhOWViNzY5MTc1MDhkNGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcc36kngH2gAyNDA4OTIzMDk5OjkwYzlmMDk4MTdhZjVhYzBhMDliODM3MDM5M2M2YWVmNTE3OTQ5MmQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d95f0650a1a451e3d9c416795a9eb76917508d4b", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/d95f0650a1a451e3d9c416795a9eb76917508d4b", "committedDate": "2020-04-25T15:01:17Z", "message": "[aws-datstore] Implementation of user-provided DataStore configs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNDY1MzEz", "url": "https://github.com/aws-amplify/amplify-android/pull/401#pullrequestreview-400465313", "createdAt": "2020-04-26T06:38:48Z", "commit": {"oid": "d95f0650a1a451e3d9c416795a9eb76917508d4b"}, "state": "COMMENTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNjozODo0OFrOGL_xZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNzoyNTo1NlrOGMASfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzMjM1Nw==", "bodyText": "This feels more like a top-level class to me personally, since CategoryConfiguration itself doesn't make reference to it. All of the other ones are, anyway - ApiCategoryConfiguration, etc.", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415232357", "createdAt": "2020-04-26T06:38:48Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/core/category/CategoryConfiguration.java", "diffHunk": "@@ -66,4 +68,27 @@ public void populateFromJSON(JSONObject json) throws JSONException {\n             }\n         }\n     }\n+\n+    /**\n+     * Convenience class to allow AmplifyConfiguration to return a\n+     * shell configuration for categories not present in the Amplify\n+     * config file.\n+     */\n+    public static final class EmptyCategoryConfiguration extends CategoryConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95f0650a1a451e3d9c416795a9eb76917508d4b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzMzUyNw==", "bodyText": "These are guaranteed by the compiler already, right? Maybe it would be more elucidating to check the behavior of them, or that they are equals() to an expected object, or something like that.\nEither:\ndataStoreConflictHandler = dataStoreConfiguration.getDataStoreConlictHandler();\nassertEquals(DataStoreConflictHandlerResult.RETRY, Await.result((onResult, onFailure) -> {\n    dataStoreConflictHandler.resolveConflict(new DataStoreConlictData<>(), onResult);\n}));\n\nOr maybe just cache the new DummyConflictHandler() that you pass in, so you can do\nassertEquals(arrangedHandler, dataStoreConfiguration.getDataStoreConflictHandler());\n\n(Same comment for all instanceof tests.)\nOut of interest, it looks like Hamcrest has a matcher for this, for the future:\nhttps://stackoverflow.com/a/12404813/695787\nassertThat(foo, instanceOf(Foo.class));", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415233527", "createdAt": "2020-04-26T06:45:37Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/DataStoreConfigurationTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.model.Model;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class DataStoreConfigurationTest {\n+//    private Context context;\n+\n+    @Before\n+    public void setup() {\n+//        this.context = getApplicationContext();\n+    }\n+\n+    @Test\n+    public void testDefaultConfiguration() {\n+        DataStoreConfiguration dataStoreConfiguration = DataStoreConfiguration.defaults();\n+        assertEquals(DataStoreConfiguration.DEFAULT_SYNC_INTERVAL_MINUTES,\n+            dataStoreConfiguration.getSyncIntervalInMinutes());\n+        assertEquals(DataStoreConfiguration.DEFAULT_SYNC_MAX_RECORDS,\n+            dataStoreConfiguration.getSyncMaxRecords());\n+        assertEquals(DataStoreConfiguration.DEFAULT_SYNC_PAGE_SIZE,\n+            dataStoreConfiguration.getSyncPageSize());\n+\n+        assertTrue(dataStoreConfiguration.getDataStoreConflictHandler() instanceof ApplyRemoteConflictHandler);\n+        assertTrue(dataStoreConfiguration.getDataStoreErrorHandler() instanceof DefaultDataStoreErrorHandler);\n+    }\n+\n+    @Test\n+    public void testDefaultOverridenFromConfiguration() throws JSONException, DataStoreException {\n+        long expectedSyncInterval = 6;\n+        int expectedSyncMaxRecords = 3;\n+        JSONObject jsonConfigFromFile = new JSONObject()\n+            .put(DataStoreConfiguration.ConfigKey.SYNC_INTERVAL.toString(), expectedSyncInterval)\n+            .put(DataStoreConfiguration.ConfigKey.SYNC_MAX_RECORDS.toString(), expectedSyncMaxRecords);\n+        DataStoreConfiguration dataStoreConfiguration = DataStoreConfiguration.builder(jsonConfigFromFile).build();\n+        assertEquals(expectedSyncInterval, dataStoreConfiguration.getSyncIntervalInMinutes());\n+        assertEquals(expectedSyncMaxRecords, dataStoreConfiguration.getSyncMaxRecords());\n+        assertEquals(DataStoreConfiguration.DEFAULT_SYNC_PAGE_SIZE, dataStoreConfiguration.getSyncPageSize());\n+\n+        assertTrue(dataStoreConfiguration.getDataStoreConflictHandler() instanceof ApplyRemoteConflictHandler);\n+        assertTrue(dataStoreConfiguration.getDataStoreErrorHandler() instanceof DefaultDataStoreErrorHandler);\n+    }\n+\n+    @Test\n+    public void testDefaultOverridenFromConfigurationAndObject() throws DataStoreException, JSONException {\n+        long expectedSyncInterval = 6;\n+        int expectedSyncMaxRecords = 3;\n+\n+        DataStoreConfiguration configObject = DataStoreConfiguration\n+            .builder()\n+            .syncMaxRecords(expectedSyncMaxRecords)\n+            .dataStoreConflictHandler(new DummyConflictHandler())\n+            .build();\n+\n+        JSONObject jsonConfigFromFile = new JSONObject()\n+            .put(DataStoreConfiguration.ConfigKey.SYNC_INTERVAL.toString(), expectedSyncInterval);\n+        DataStoreConfiguration dataStoreConfiguration = DataStoreConfiguration\n+            .builder(jsonConfigFromFile, configObject)\n+            .build();\n+\n+        assertEquals(expectedSyncInterval, dataStoreConfiguration.getSyncIntervalInMinutes());\n+        assertEquals(expectedSyncMaxRecords, dataStoreConfiguration.getSyncMaxRecords());\n+        assertEquals(DataStoreConfiguration.DEFAULT_SYNC_PAGE_SIZE, dataStoreConfiguration.getSyncPageSize());\n+\n+        assertTrue(dataStoreConfiguration.getDataStoreConflictHandler() instanceof DummyConflictHandler);\n+        assertTrue(dataStoreConfiguration.getDataStoreErrorHandler() instanceof DefaultDataStoreErrorHandler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95f0650a1a451e3d9c416795a9eb76917508d4b"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNDExMw==", "bodyText": "can remote this and L35", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415234113", "createdAt": "2020-04-26T06:48:53Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/DataStoreConfigurationTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.model.Model;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class DataStoreConfigurationTest {\n+//    private Context context;\n+\n+    @Before\n+    public void setup() {\n+//        this.context = getApplicationContext();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95f0650a1a451e3d9c416795a9eb76917508d4b"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNDE0Ng==", "bodyText": "Can be final", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415234146", "createdAt": "2020-04-26T06:49:01Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/DataStoreConfigurationTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.model.Model;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(RobolectricTestRunner.class)\n+public class DataStoreConfigurationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95f0650a1a451e3d9c416795a9eb76917508d4b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNDM1Nw==", "bodyText": "Ah, yea ... Hm. We should probably do this either as part of this PR, or immediately next.\nThe DataStore docs are all written like \"Use it without a cloud! Later, add a cloud!\" So this is very P0.", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415234357", "createdAt": "2020-04-26T06:50:23Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "diffHunk": "@@ -66,6 +67,7 @@ public void setup() {\n      * @throws JSONException Not expected; on failure to arrange configuration object\n      * @throws DataStoreException Not expected; on failure to configure of initialize plugin\n      */\n+    @Ignore(\"TODO: need a mechanism to re-enable this scenario........\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95f0650a1a451e3d9c416795a9eb76917508d4b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNTIwNg==", "bodyText": "Let's please only store this in milliseconds.\nI would do the conversion external to the SyncProcessor entirely. I'd convert to milliseconds immediately after reading config file, before exiting the config builder. Or, immediately after receiving a user-provided value from the Java builder, and before exiting the config builder.\n(Point in short, the unit conversion is an aspect of configuration logic, not of sync processor logic.)", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415235206", "createdAt": "2020-04-26T06:55:25Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "diffHunk": "@@ -56,21 +57,23 @@\n     private final SyncTimeRegistry syncTimeRegistry;\n     private final AppSync appSync;\n     private final Merger merger;\n-    private final BaseSyncIntervalProvider syncIntervalProvider;\n+    private final long syncIntervalMs;\n+    private final long syncIntervalInMinutes;\n \n     private SyncProcessor(\n             ModelProvider modelProvider,\n             ModelSchemaRegistry modelSchemaRegistry,\n             SyncTimeRegistry syncTimeRegistry,\n             AppSync appSync,\n             Merger merger,\n-            BaseSyncIntervalProvider baseSyncIntervalProvider) {\n+            long syncIntervalInMinutes) {\n         this.modelProvider = Objects.requireNonNull(modelProvider);\n         this.modelSchemaRegistry = Objects.requireNonNull(modelSchemaRegistry);\n         this.syncTimeRegistry = Objects.requireNonNull(syncTimeRegistry);\n         this.appSync = Objects.requireNonNull(appSync);\n         this.merger = Objects.requireNonNull(merger);\n-        this.syncIntervalProvider = Objects.requireNonNull(baseSyncIntervalProvider);\n+        this.syncIntervalInMinutes = syncIntervalInMinutes;\n+        this.syncIntervalMs = TimeUnit.MINUTES.toMillis(syncIntervalInMinutes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95f0650a1a451e3d9c416795a9eb76917508d4b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNTU2Ng==", "bodyText": "Is this still optimally worded, given the renaming?", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415235566", "createdAt": "2020-04-26T06:57:03Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConflictHandlerResult.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+/**\n+ * The possible results from a conflict resolution. Either the local data was discarded, kept, or\n+ * some new model instance is used which neither purely local or remote in origin.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95f0650a1a451e3d9c416795a9eb76917508d4b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNTcyMw==", "bodyText": "What happens if this thing fails to resolve a conflict? Does it throw an exception? Say for example, the strategy involves SQL operations, but the database is full.", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415235723", "createdAt": "2020-04-26T06:58:03Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConflictHandler.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.model.Model;\n+\n+/**\n+ * Handles conflicts between models observed during model synchronization in the DataStore.\n+ * Such conflicts may arise between version of models kept locally, and competing versions\n+ * found in the remote AppSync system.\n+ */\n+public interface DataStoreConflictHandler {\n+    /**\n+     * Resolves a DataStore conflict.\n+     * @param conflictData Data about the conflict.\n+     * @param onResult A callback that should be invoked when the conflict handling is complete.\n+     * @param <T> The type of model for which a conflict was observed\n+     */\n+    <T extends Model> void resolveConflict(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95f0650a1a451e3d9c416795a9eb76917508d4b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNjEwMA==", "bodyText": "Shouldn't need this if. In the case that syncPageSize == DEFAULT_SYNC_PAGE_SIZE, you'd just set the value to the same thing again. Which wouldn't change the system behavior.", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415236100", "createdAt": "2020-04-26T07:00:07Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A user-provided configuration for the DataStore.\n+ */\n+@SuppressWarnings(\"unused\")\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 1_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n+\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+\n+    private final DataStoreErrorHandler dataStoreErrorHandler;\n+    private final DataStoreConflictHandler dataStoreConflictHandler;\n+    private final long syncIntervalInMinutes;\n+    private final int syncMaxRecords;\n+    private final int syncPageSize;\n+\n+    private DataStoreConfiguration(\n+            DataStoreErrorHandler dataStoreErrorHandler,\n+            DataStoreConflictHandler dataStoreConflictHandler,\n+            long syncIntervalInMinutes,\n+            int syncMaxRecords,\n+            int syncPageSize) {\n+        this.dataStoreErrorHandler = dataStoreErrorHandler;\n+        this.dataStoreConflictHandler = dataStoreConflictHandler;\n+        this.syncIntervalInMinutes = syncIntervalInMinutes;\n+        this.syncMaxRecords = syncMaxRecords;\n+        this.syncPageSize = syncPageSize;\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @return A new builder instance\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration} by reading DataStore\n+     * settings from the config file.\n+     * @param pluginJson DataStore plugin configuration from amplicationconfiguration.json\n+     * @param userProvidedConfiguration An instance of {@DataStoreConfiguration} with settings specified by the user\n+     *                                  which will be used as overrides.\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson,\n+                                  @NonNull DataStoreConfiguration userProvidedConfiguration) throws DataStoreException {\n+        return builder(pluginJson)\n+            .syncPageSize(userProvidedConfiguration.getSyncPageSize())\n+            .syncMaxRecords(userProvidedConfiguration.getSyncMaxRecords())\n+            .syncIntervalMs(userProvidedConfiguration.getSyncIntervalInMinutes())\n+            .dataStoreErrorHandler(userProvidedConfiguration.getDataStoreErrorHandler())\n+            .dataStoreConflictHandler(userProvidedConfiguration.getDataStoreConflictHandler());\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @param pluginJson The dataStore configuration as a JSONObject\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson) throws DataStoreException {\n+        final Iterator<String> jsonKeys = pluginJson.keys();\n+        Builder builder = new Builder();\n+        while (jsonKeys.hasNext()) {\n+            final String keyString = jsonKeys.next();\n+            final ConfigKey configKey;\n+            try {\n+                configKey = ConfigKey.fromString(keyString);\n+            } catch (IllegalArgumentException noSuchConfigKey) {\n+                throw new DataStoreException(\n+                        \"Saw unexpected config key: \" + keyString,\n+                        \"Make sure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+            try {\n+                switch (configKey) {\n+                    case SYNC_INTERVAL:\n+                        builder.syncIntervalMs(pluginJson.getLong(ConfigKey.SYNC_INTERVAL.toString()));\n+                        break;\n+                    case SYNC_MAX_RECORDS:\n+                        builder.syncMaxRecords(pluginJson.getInt(ConfigKey.SYNC_MAX_RECORDS.toString()));\n+                        break;\n+                    case SYNC_PAGE_SIZE:\n+                        builder.syncPageSize(pluginJson.getInt(ConfigKey.SYNC_PAGE_SIZE.toString()));\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Unsupported config key = \" + configKey.toString());\n+                }\n+            } catch (JSONException jsonException) {\n+                throw new DataStoreException(\n+                        \"Issue encountered while parsing configuration JSON\",\n+                        jsonException, \"Ensure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+        }\n+\n+        return builder;\n+    }\n+\n+    /**\n+     * Creates an {@link DataStoreConfiguration} which uses all default values.\n+     * @return A default {@link DataStoreConfiguration}\n+     */\n+    @NonNull\n+    public static DataStoreConfiguration defaults() {\n+        return builder().build();\n+    }\n+\n+    /**\n+     * Gets the data store error handler.\n+     * @return Data store error handler.\n+     */\n+    @NonNull\n+    public DataStoreErrorHandler getDataStoreErrorHandler() {\n+        return this.dataStoreErrorHandler;\n+    }\n+\n+    /**\n+     * Gets the data store conflict handler.\n+     * @return Data store conflict handler\n+     */\n+    @NonNull\n+    public DataStoreConflictHandler getDataStoreConflictHandler() {\n+        return this.dataStoreConflictHandler;\n+    }\n+\n+    /**\n+     * Get the sync interval. The sync interval is the amount of time after a base sync, during which\n+     * the optimized delta-sync may be requested, instead of a full base sync.\n+     * @return The sync interval\n+     */\n+    @IntRange(from = 0)\n+    public long getSyncIntervalInMinutes() {\n+        return this.syncIntervalInMinutes;\n+    }\n+\n+    /**\n+     * Gets the maximum number of records that the client wants to process, while it is requesting\n+     * a base/delta sync operation from AppSync.\n+     * @return The max number of records to process from AppSync.\n+     */\n+    @IntRange(from = 0)\n+    public int getSyncMaxRecords() {\n+        return this.syncMaxRecords;\n+    }\n+\n+    /**\n+     * Gets the number of items that should be requested in page, from AppSync, during\n+     * a sync operation.\n+     * @return Desired size of a page of results from an AppSync sync response\n+     */\n+    @IntRange(from = 0)\n+    public int getSyncPageSize() {\n+        return this.syncPageSize;\n+    }\n+\n+    /**\n+     * Builds instances of {@link AWSDataStorePlugin} by providing a variety of\n+     * configuration methods.\n+     */\n+    public static final class Builder {\n+        private DataStoreErrorHandler dataStoreErrorHandler;\n+        private DataStoreConflictHandler dataStoreConflictHandler;\n+        private Long syncIntervalMs;\n+        private Integer syncMaxRecords;\n+        private Integer syncPageSize;\n+\n+        private Builder() {\n+            this.dataStoreErrorHandler = DefaultDataStoreErrorHandler.instance();\n+            this.dataStoreConflictHandler = ApplyRemoteConflictHandler.instance(dataStoreErrorHandler);\n+            this.syncIntervalMs = DEFAULT_SYNC_INTERVAL_MINUTES;\n+            this.syncMaxRecords = DEFAULT_SYNC_MAX_RECORDS;\n+            this.syncPageSize = DEFAULT_SYNC_PAGE_SIZE;\n+        }\n+\n+        /**\n+         * A handler that will be invoked whenever there is a conflict between two model instances,\n+         * one in the local store, and one from the remote server, as received from a sync operation.\n+         * @param dataStoreConflictHandler A handler to invoke upon sync conflicts\n+         * @return Current builder\n+         */\n+        @NonNull\n+        public Builder dataStoreConflictHandler(@NonNull DataStoreConflictHandler dataStoreConflictHandler) {\n+            this.dataStoreConflictHandler = Objects.requireNonNull(dataStoreConflictHandler);\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets a handler function to be applied when the DataStore encounters an unrecoverable error\n+         * in one of its ongoing background operations (model synchronization).\n+         * @param dataStoreErrorHandler A handler for unrecoverable background errors\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder dataStoreErrorHandler(@NonNull DataStoreErrorHandler dataStoreErrorHandler) {\n+            this.dataStoreErrorHandler = Objects.requireNonNull(dataStoreErrorHandler);\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets the duration of time after which delta syncs will not be preferred over base syncs.\n+         * @param syncIntervalMs The amount of time that must elapse for delta syncs to not be considered\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder syncIntervalMs(@IntRange(from = 0) long syncIntervalMs) {\n+            //Only set this value if the incoming value is not equal to the default\n+            if (syncIntervalMs != DEFAULT_SYNC_INTERVAL_MINUTES) {\n+                this.syncIntervalMs = syncIntervalMs;\n+            }\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets the maximum number of records, from the server, to process from a sync operation.\n+         * @param syncMaxRecords Max number of records client will consumer from server at one time\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder syncMaxRecords(@IntRange(from = 0) int syncMaxRecords) {\n+            //Only set this value if the incoming value is not equal to the default\n+            if (syncMaxRecords != DEFAULT_SYNC_MAX_RECORDS) {\n+                this.syncMaxRecords = syncMaxRecords;\n+            }\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets the number of items requested in each page of sync results.\n+         * @param syncPageSize Number of items requested per page in sync operation\n+         * @return Current builder\n+         */\n+        @NonNull\n+        public Builder syncPageSize(@IntRange(from = 0) int syncPageSize) {\n+            //Only set this value if the incoming value is not equal to the default\n+            if (syncPageSize != DEFAULT_SYNC_PAGE_SIZE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95f0650a1a451e3d9c416795a9eb76917508d4b"}, "originalPosition": 276}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNjEyMg==", "bodyText": "Same, shouldn't need the if.", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415236122", "createdAt": "2020-04-26T07:00:20Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A user-provided configuration for the DataStore.\n+ */\n+@SuppressWarnings(\"unused\")\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 1_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n+\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+\n+    private final DataStoreErrorHandler dataStoreErrorHandler;\n+    private final DataStoreConflictHandler dataStoreConflictHandler;\n+    private final long syncIntervalInMinutes;\n+    private final int syncMaxRecords;\n+    private final int syncPageSize;\n+\n+    private DataStoreConfiguration(\n+            DataStoreErrorHandler dataStoreErrorHandler,\n+            DataStoreConflictHandler dataStoreConflictHandler,\n+            long syncIntervalInMinutes,\n+            int syncMaxRecords,\n+            int syncPageSize) {\n+        this.dataStoreErrorHandler = dataStoreErrorHandler;\n+        this.dataStoreConflictHandler = dataStoreConflictHandler;\n+        this.syncIntervalInMinutes = syncIntervalInMinutes;\n+        this.syncMaxRecords = syncMaxRecords;\n+        this.syncPageSize = syncPageSize;\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @return A new builder instance\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration} by reading DataStore\n+     * settings from the config file.\n+     * @param pluginJson DataStore plugin configuration from amplicationconfiguration.json\n+     * @param userProvidedConfiguration An instance of {@DataStoreConfiguration} with settings specified by the user\n+     *                                  which will be used as overrides.\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson,\n+                                  @NonNull DataStoreConfiguration userProvidedConfiguration) throws DataStoreException {\n+        return builder(pluginJson)\n+            .syncPageSize(userProvidedConfiguration.getSyncPageSize())\n+            .syncMaxRecords(userProvidedConfiguration.getSyncMaxRecords())\n+            .syncIntervalMs(userProvidedConfiguration.getSyncIntervalInMinutes())\n+            .dataStoreErrorHandler(userProvidedConfiguration.getDataStoreErrorHandler())\n+            .dataStoreConflictHandler(userProvidedConfiguration.getDataStoreConflictHandler());\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @param pluginJson The dataStore configuration as a JSONObject\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson) throws DataStoreException {\n+        final Iterator<String> jsonKeys = pluginJson.keys();\n+        Builder builder = new Builder();\n+        while (jsonKeys.hasNext()) {\n+            final String keyString = jsonKeys.next();\n+            final ConfigKey configKey;\n+            try {\n+                configKey = ConfigKey.fromString(keyString);\n+            } catch (IllegalArgumentException noSuchConfigKey) {\n+                throw new DataStoreException(\n+                        \"Saw unexpected config key: \" + keyString,\n+                        \"Make sure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+            try {\n+                switch (configKey) {\n+                    case SYNC_INTERVAL:\n+                        builder.syncIntervalMs(pluginJson.getLong(ConfigKey.SYNC_INTERVAL.toString()));\n+                        break;\n+                    case SYNC_MAX_RECORDS:\n+                        builder.syncMaxRecords(pluginJson.getInt(ConfigKey.SYNC_MAX_RECORDS.toString()));\n+                        break;\n+                    case SYNC_PAGE_SIZE:\n+                        builder.syncPageSize(pluginJson.getInt(ConfigKey.SYNC_PAGE_SIZE.toString()));\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Unsupported config key = \" + configKey.toString());\n+                }\n+            } catch (JSONException jsonException) {\n+                throw new DataStoreException(\n+                        \"Issue encountered while parsing configuration JSON\",\n+                        jsonException, \"Ensure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+        }\n+\n+        return builder;\n+    }\n+\n+    /**\n+     * Creates an {@link DataStoreConfiguration} which uses all default values.\n+     * @return A default {@link DataStoreConfiguration}\n+     */\n+    @NonNull\n+    public static DataStoreConfiguration defaults() {\n+        return builder().build();\n+    }\n+\n+    /**\n+     * Gets the data store error handler.\n+     * @return Data store error handler.\n+     */\n+    @NonNull\n+    public DataStoreErrorHandler getDataStoreErrorHandler() {\n+        return this.dataStoreErrorHandler;\n+    }\n+\n+    /**\n+     * Gets the data store conflict handler.\n+     * @return Data store conflict handler\n+     */\n+    @NonNull\n+    public DataStoreConflictHandler getDataStoreConflictHandler() {\n+        return this.dataStoreConflictHandler;\n+    }\n+\n+    /**\n+     * Get the sync interval. The sync interval is the amount of time after a base sync, during which\n+     * the optimized delta-sync may be requested, instead of a full base sync.\n+     * @return The sync interval\n+     */\n+    @IntRange(from = 0)\n+    public long getSyncIntervalInMinutes() {\n+        return this.syncIntervalInMinutes;\n+    }\n+\n+    /**\n+     * Gets the maximum number of records that the client wants to process, while it is requesting\n+     * a base/delta sync operation from AppSync.\n+     * @return The max number of records to process from AppSync.\n+     */\n+    @IntRange(from = 0)\n+    public int getSyncMaxRecords() {\n+        return this.syncMaxRecords;\n+    }\n+\n+    /**\n+     * Gets the number of items that should be requested in page, from AppSync, during\n+     * a sync operation.\n+     * @return Desired size of a page of results from an AppSync sync response\n+     */\n+    @IntRange(from = 0)\n+    public int getSyncPageSize() {\n+        return this.syncPageSize;\n+    }\n+\n+    /**\n+     * Builds instances of {@link AWSDataStorePlugin} by providing a variety of\n+     * configuration methods.\n+     */\n+    public static final class Builder {\n+        private DataStoreErrorHandler dataStoreErrorHandler;\n+        private DataStoreConflictHandler dataStoreConflictHandler;\n+        private Long syncIntervalMs;\n+        private Integer syncMaxRecords;\n+        private Integer syncPageSize;\n+\n+        private Builder() {\n+            this.dataStoreErrorHandler = DefaultDataStoreErrorHandler.instance();\n+            this.dataStoreConflictHandler = ApplyRemoteConflictHandler.instance(dataStoreErrorHandler);\n+            this.syncIntervalMs = DEFAULT_SYNC_INTERVAL_MINUTES;\n+            this.syncMaxRecords = DEFAULT_SYNC_MAX_RECORDS;\n+            this.syncPageSize = DEFAULT_SYNC_PAGE_SIZE;\n+        }\n+\n+        /**\n+         * A handler that will be invoked whenever there is a conflict between two model instances,\n+         * one in the local store, and one from the remote server, as received from a sync operation.\n+         * @param dataStoreConflictHandler A handler to invoke upon sync conflicts\n+         * @return Current builder\n+         */\n+        @NonNull\n+        public Builder dataStoreConflictHandler(@NonNull DataStoreConflictHandler dataStoreConflictHandler) {\n+            this.dataStoreConflictHandler = Objects.requireNonNull(dataStoreConflictHandler);\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets a handler function to be applied when the DataStore encounters an unrecoverable error\n+         * in one of its ongoing background operations (model synchronization).\n+         * @param dataStoreErrorHandler A handler for unrecoverable background errors\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder dataStoreErrorHandler(@NonNull DataStoreErrorHandler dataStoreErrorHandler) {\n+            this.dataStoreErrorHandler = Objects.requireNonNull(dataStoreErrorHandler);\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets the duration of time after which delta syncs will not be preferred over base syncs.\n+         * @param syncIntervalMs The amount of time that must elapse for delta syncs to not be considered\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder syncIntervalMs(@IntRange(from = 0) long syncIntervalMs) {\n+            //Only set this value if the incoming value is not equal to the default\n+            if (syncIntervalMs != DEFAULT_SYNC_INTERVAL_MINUTES) {\n+                this.syncIntervalMs = syncIntervalMs;\n+            }\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets the maximum number of records, from the server, to process from a sync operation.\n+         * @param syncMaxRecords Max number of records client will consumer from server at one time\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder syncMaxRecords(@IntRange(from = 0) int syncMaxRecords) {\n+            //Only set this value if the incoming value is not equal to the default\n+            if (syncMaxRecords != DEFAULT_SYNC_MAX_RECORDS) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95f0650a1a451e3d9c416795a9eb76917508d4b"}, "originalPosition": 262}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNjQ2NA==", "bodyText": "Uh oh! This builder didn't get updated. This still says ms, but it should say:\n@NonNull\npublic Builder syncIntervalInMinutes(@IntRange(from = 0) long syncIntervalInMinutes) {\n    this.syncIntervalMs = TimeUnit.MINUTES.toMilliseconds(syncIntervalInMunutes);\n    return Builder.this;\n}\n\nNo if needed.\nAs per comments further down -- this is a ~good place to do the unit conversion into ms, I think.\n(Human beings like minutes, but computers like milliseconds.)", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415236464", "createdAt": "2020-04-26T07:01:56Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A user-provided configuration for the DataStore.\n+ */\n+@SuppressWarnings(\"unused\")\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 1_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n+\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+\n+    private final DataStoreErrorHandler dataStoreErrorHandler;\n+    private final DataStoreConflictHandler dataStoreConflictHandler;\n+    private final long syncIntervalInMinutes;\n+    private final int syncMaxRecords;\n+    private final int syncPageSize;\n+\n+    private DataStoreConfiguration(\n+            DataStoreErrorHandler dataStoreErrorHandler,\n+            DataStoreConflictHandler dataStoreConflictHandler,\n+            long syncIntervalInMinutes,\n+            int syncMaxRecords,\n+            int syncPageSize) {\n+        this.dataStoreErrorHandler = dataStoreErrorHandler;\n+        this.dataStoreConflictHandler = dataStoreConflictHandler;\n+        this.syncIntervalInMinutes = syncIntervalInMinutes;\n+        this.syncMaxRecords = syncMaxRecords;\n+        this.syncPageSize = syncPageSize;\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @return A new builder instance\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration} by reading DataStore\n+     * settings from the config file.\n+     * @param pluginJson DataStore plugin configuration from amplicationconfiguration.json\n+     * @param userProvidedConfiguration An instance of {@DataStoreConfiguration} with settings specified by the user\n+     *                                  which will be used as overrides.\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson,\n+                                  @NonNull DataStoreConfiguration userProvidedConfiguration) throws DataStoreException {\n+        return builder(pluginJson)\n+            .syncPageSize(userProvidedConfiguration.getSyncPageSize())\n+            .syncMaxRecords(userProvidedConfiguration.getSyncMaxRecords())\n+            .syncIntervalMs(userProvidedConfiguration.getSyncIntervalInMinutes())\n+            .dataStoreErrorHandler(userProvidedConfiguration.getDataStoreErrorHandler())\n+            .dataStoreConflictHandler(userProvidedConfiguration.getDataStoreConflictHandler());\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @param pluginJson The dataStore configuration as a JSONObject\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson) throws DataStoreException {\n+        final Iterator<String> jsonKeys = pluginJson.keys();\n+        Builder builder = new Builder();\n+        while (jsonKeys.hasNext()) {\n+            final String keyString = jsonKeys.next();\n+            final ConfigKey configKey;\n+            try {\n+                configKey = ConfigKey.fromString(keyString);\n+            } catch (IllegalArgumentException noSuchConfigKey) {\n+                throw new DataStoreException(\n+                        \"Saw unexpected config key: \" + keyString,\n+                        \"Make sure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+            try {\n+                switch (configKey) {\n+                    case SYNC_INTERVAL:\n+                        builder.syncIntervalMs(pluginJson.getLong(ConfigKey.SYNC_INTERVAL.toString()));\n+                        break;\n+                    case SYNC_MAX_RECORDS:\n+                        builder.syncMaxRecords(pluginJson.getInt(ConfigKey.SYNC_MAX_RECORDS.toString()));\n+                        break;\n+                    case SYNC_PAGE_SIZE:\n+                        builder.syncPageSize(pluginJson.getInt(ConfigKey.SYNC_PAGE_SIZE.toString()));\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Unsupported config key = \" + configKey.toString());\n+                }\n+            } catch (JSONException jsonException) {\n+                throw new DataStoreException(\n+                        \"Issue encountered while parsing configuration JSON\",\n+                        jsonException, \"Ensure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+        }\n+\n+        return builder;\n+    }\n+\n+    /**\n+     * Creates an {@link DataStoreConfiguration} which uses all default values.\n+     * @return A default {@link DataStoreConfiguration}\n+     */\n+    @NonNull\n+    public static DataStoreConfiguration defaults() {\n+        return builder().build();\n+    }\n+\n+    /**\n+     * Gets the data store error handler.\n+     * @return Data store error handler.\n+     */\n+    @NonNull\n+    public DataStoreErrorHandler getDataStoreErrorHandler() {\n+        return this.dataStoreErrorHandler;\n+    }\n+\n+    /**\n+     * Gets the data store conflict handler.\n+     * @return Data store conflict handler\n+     */\n+    @NonNull\n+    public DataStoreConflictHandler getDataStoreConflictHandler() {\n+        return this.dataStoreConflictHandler;\n+    }\n+\n+    /**\n+     * Get the sync interval. The sync interval is the amount of time after a base sync, during which\n+     * the optimized delta-sync may be requested, instead of a full base sync.\n+     * @return The sync interval\n+     */\n+    @IntRange(from = 0)\n+    public long getSyncIntervalInMinutes() {\n+        return this.syncIntervalInMinutes;\n+    }\n+\n+    /**\n+     * Gets the maximum number of records that the client wants to process, while it is requesting\n+     * a base/delta sync operation from AppSync.\n+     * @return The max number of records to process from AppSync.\n+     */\n+    @IntRange(from = 0)\n+    public int getSyncMaxRecords() {\n+        return this.syncMaxRecords;\n+    }\n+\n+    /**\n+     * Gets the number of items that should be requested in page, from AppSync, during\n+     * a sync operation.\n+     * @return Desired size of a page of results from an AppSync sync response\n+     */\n+    @IntRange(from = 0)\n+    public int getSyncPageSize() {\n+        return this.syncPageSize;\n+    }\n+\n+    /**\n+     * Builds instances of {@link AWSDataStorePlugin} by providing a variety of\n+     * configuration methods.\n+     */\n+    public static final class Builder {\n+        private DataStoreErrorHandler dataStoreErrorHandler;\n+        private DataStoreConflictHandler dataStoreConflictHandler;\n+        private Long syncIntervalMs;\n+        private Integer syncMaxRecords;\n+        private Integer syncPageSize;\n+\n+        private Builder() {\n+            this.dataStoreErrorHandler = DefaultDataStoreErrorHandler.instance();\n+            this.dataStoreConflictHandler = ApplyRemoteConflictHandler.instance(dataStoreErrorHandler);\n+            this.syncIntervalMs = DEFAULT_SYNC_INTERVAL_MINUTES;\n+            this.syncMaxRecords = DEFAULT_SYNC_MAX_RECORDS;\n+            this.syncPageSize = DEFAULT_SYNC_PAGE_SIZE;\n+        }\n+\n+        /**\n+         * A handler that will be invoked whenever there is a conflict between two model instances,\n+         * one in the local store, and one from the remote server, as received from a sync operation.\n+         * @param dataStoreConflictHandler A handler to invoke upon sync conflicts\n+         * @return Current builder\n+         */\n+        @NonNull\n+        public Builder dataStoreConflictHandler(@NonNull DataStoreConflictHandler dataStoreConflictHandler) {\n+            this.dataStoreConflictHandler = Objects.requireNonNull(dataStoreConflictHandler);\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets a handler function to be applied when the DataStore encounters an unrecoverable error\n+         * in one of its ongoing background operations (model synchronization).\n+         * @param dataStoreErrorHandler A handler for unrecoverable background errors\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder dataStoreErrorHandler(@NonNull DataStoreErrorHandler dataStoreErrorHandler) {\n+            this.dataStoreErrorHandler = Objects.requireNonNull(dataStoreErrorHandler);\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets the duration of time after which delta syncs will not be preferred over base syncs.\n+         * @param syncIntervalMs The amount of time that must elapse for delta syncs to not be considered\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder syncIntervalMs(@IntRange(from = 0) long syncIntervalMs) {\n+            //Only set this value if the incoming value is not equal to the default\n+            if (syncIntervalMs != DEFAULT_SYNC_INTERVAL_MINUTES) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95f0650a1a451e3d9c416795a9eb76917508d4b"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNjg4NQ==", "bodyText": "I don't think you ever use the fact that these are objects. (They have non-null default values, and you overwrite the m via primitive types.)\nSo, I think it should be both safe and preferable to store these as their primitive counterparsts,long and int .", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415236885", "createdAt": "2020-04-26T07:04:23Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A user-provided configuration for the DataStore.\n+ */\n+@SuppressWarnings(\"unused\")\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 1_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n+\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+\n+    private final DataStoreErrorHandler dataStoreErrorHandler;\n+    private final DataStoreConflictHandler dataStoreConflictHandler;\n+    private final long syncIntervalInMinutes;\n+    private final int syncMaxRecords;\n+    private final int syncPageSize;\n+\n+    private DataStoreConfiguration(\n+            DataStoreErrorHandler dataStoreErrorHandler,\n+            DataStoreConflictHandler dataStoreConflictHandler,\n+            long syncIntervalInMinutes,\n+            int syncMaxRecords,\n+            int syncPageSize) {\n+        this.dataStoreErrorHandler = dataStoreErrorHandler;\n+        this.dataStoreConflictHandler = dataStoreConflictHandler;\n+        this.syncIntervalInMinutes = syncIntervalInMinutes;\n+        this.syncMaxRecords = syncMaxRecords;\n+        this.syncPageSize = syncPageSize;\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @return A new builder instance\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration} by reading DataStore\n+     * settings from the config file.\n+     * @param pluginJson DataStore plugin configuration from amplicationconfiguration.json\n+     * @param userProvidedConfiguration An instance of {@DataStoreConfiguration} with settings specified by the user\n+     *                                  which will be used as overrides.\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson,\n+                                  @NonNull DataStoreConfiguration userProvidedConfiguration) throws DataStoreException {\n+        return builder(pluginJson)\n+            .syncPageSize(userProvidedConfiguration.getSyncPageSize())\n+            .syncMaxRecords(userProvidedConfiguration.getSyncMaxRecords())\n+            .syncIntervalMs(userProvidedConfiguration.getSyncIntervalInMinutes())\n+            .dataStoreErrorHandler(userProvidedConfiguration.getDataStoreErrorHandler())\n+            .dataStoreConflictHandler(userProvidedConfiguration.getDataStoreConflictHandler());\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @param pluginJson The dataStore configuration as a JSONObject\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson) throws DataStoreException {\n+        final Iterator<String> jsonKeys = pluginJson.keys();\n+        Builder builder = new Builder();\n+        while (jsonKeys.hasNext()) {\n+            final String keyString = jsonKeys.next();\n+            final ConfigKey configKey;\n+            try {\n+                configKey = ConfigKey.fromString(keyString);\n+            } catch (IllegalArgumentException noSuchConfigKey) {\n+                throw new DataStoreException(\n+                        \"Saw unexpected config key: \" + keyString,\n+                        \"Make sure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+            try {\n+                switch (configKey) {\n+                    case SYNC_INTERVAL:\n+                        builder.syncIntervalMs(pluginJson.getLong(ConfigKey.SYNC_INTERVAL.toString()));\n+                        break;\n+                    case SYNC_MAX_RECORDS:\n+                        builder.syncMaxRecords(pluginJson.getInt(ConfigKey.SYNC_MAX_RECORDS.toString()));\n+                        break;\n+                    case SYNC_PAGE_SIZE:\n+                        builder.syncPageSize(pluginJson.getInt(ConfigKey.SYNC_PAGE_SIZE.toString()));\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Unsupported config key = \" + configKey.toString());\n+                }\n+            } catch (JSONException jsonException) {\n+                throw new DataStoreException(\n+                        \"Issue encountered while parsing configuration JSON\",\n+                        jsonException, \"Ensure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+        }\n+\n+        return builder;\n+    }\n+\n+    /**\n+     * Creates an {@link DataStoreConfiguration} which uses all default values.\n+     * @return A default {@link DataStoreConfiguration}\n+     */\n+    @NonNull\n+    public static DataStoreConfiguration defaults() {\n+        return builder().build();\n+    }\n+\n+    /**\n+     * Gets the data store error handler.\n+     * @return Data store error handler.\n+     */\n+    @NonNull\n+    public DataStoreErrorHandler getDataStoreErrorHandler() {\n+        return this.dataStoreErrorHandler;\n+    }\n+\n+    /**\n+     * Gets the data store conflict handler.\n+     * @return Data store conflict handler\n+     */\n+    @NonNull\n+    public DataStoreConflictHandler getDataStoreConflictHandler() {\n+        return this.dataStoreConflictHandler;\n+    }\n+\n+    /**\n+     * Get the sync interval. The sync interval is the amount of time after a base sync, during which\n+     * the optimized delta-sync may be requested, instead of a full base sync.\n+     * @return The sync interval\n+     */\n+    @IntRange(from = 0)\n+    public long getSyncIntervalInMinutes() {\n+        return this.syncIntervalInMinutes;\n+    }\n+\n+    /**\n+     * Gets the maximum number of records that the client wants to process, while it is requesting\n+     * a base/delta sync operation from AppSync.\n+     * @return The max number of records to process from AppSync.\n+     */\n+    @IntRange(from = 0)\n+    public int getSyncMaxRecords() {\n+        return this.syncMaxRecords;\n+    }\n+\n+    /**\n+     * Gets the number of items that should be requested in page, from AppSync, during\n+     * a sync operation.\n+     * @return Desired size of a page of results from an AppSync sync response\n+     */\n+    @IntRange(from = 0)\n+    public int getSyncPageSize() {\n+        return this.syncPageSize;\n+    }\n+\n+    /**\n+     * Builds instances of {@link AWSDataStorePlugin} by providing a variety of\n+     * configuration methods.\n+     */\n+    public static final class Builder {\n+        private DataStoreErrorHandler dataStoreErrorHandler;\n+        private DataStoreConflictHandler dataStoreConflictHandler;\n+        private Long syncIntervalMs;\n+        private Integer syncMaxRecords;\n+        private Integer syncPageSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95f0650a1a451e3d9c416795a9eb76917508d4b"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNzQxNQ==", "bodyText": "Since this one is user-exposed, I think we want this work in minutes, here. Inside the builder, convert to ms.", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415237415", "createdAt": "2020-04-26T07:06:54Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A user-provided configuration for the DataStore.\n+ */\n+@SuppressWarnings(\"unused\")\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 1_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n+\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+\n+    private final DataStoreErrorHandler dataStoreErrorHandler;\n+    private final DataStoreConflictHandler dataStoreConflictHandler;\n+    private final long syncIntervalInMinutes;\n+    private final int syncMaxRecords;\n+    private final int syncPageSize;\n+\n+    private DataStoreConfiguration(\n+            DataStoreErrorHandler dataStoreErrorHandler,\n+            DataStoreConflictHandler dataStoreConflictHandler,\n+            long syncIntervalInMinutes,\n+            int syncMaxRecords,\n+            int syncPageSize) {\n+        this.dataStoreErrorHandler = dataStoreErrorHandler;\n+        this.dataStoreConflictHandler = dataStoreConflictHandler;\n+        this.syncIntervalInMinutes = syncIntervalInMinutes;\n+        this.syncMaxRecords = syncMaxRecords;\n+        this.syncPageSize = syncPageSize;\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @return A new builder instance\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration} by reading DataStore\n+     * settings from the config file.\n+     * @param pluginJson DataStore plugin configuration from amplicationconfiguration.json\n+     * @param userProvidedConfiguration An instance of {@DataStoreConfiguration} with settings specified by the user\n+     *                                  which will be used as overrides.\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson,\n+                                  @NonNull DataStoreConfiguration userProvidedConfiguration) throws DataStoreException {\n+        return builder(pluginJson)\n+            .syncPageSize(userProvidedConfiguration.getSyncPageSize())\n+            .syncMaxRecords(userProvidedConfiguration.getSyncMaxRecords())\n+            .syncIntervalMs(userProvidedConfiguration.getSyncIntervalInMinutes())\n+            .dataStoreErrorHandler(userProvidedConfiguration.getDataStoreErrorHandler())\n+            .dataStoreConflictHandler(userProvidedConfiguration.getDataStoreConflictHandler());\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @param pluginJson The dataStore configuration as a JSONObject\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson) throws DataStoreException {\n+        final Iterator<String> jsonKeys = pluginJson.keys();\n+        Builder builder = new Builder();\n+        while (jsonKeys.hasNext()) {\n+            final String keyString = jsonKeys.next();\n+            final ConfigKey configKey;\n+            try {\n+                configKey = ConfigKey.fromString(keyString);\n+            } catch (IllegalArgumentException noSuchConfigKey) {\n+                throw new DataStoreException(\n+                        \"Saw unexpected config key: \" + keyString,\n+                        \"Make sure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+            try {\n+                switch (configKey) {\n+                    case SYNC_INTERVAL:\n+                        builder.syncIntervalMs(pluginJson.getLong(ConfigKey.SYNC_INTERVAL.toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95f0650a1a451e3d9c416795a9eb76917508d4b"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzNzg0NQ==", "bodyText": "Hm, how does this  work? Doesn't the user config always clobber the file config?", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415237845", "createdAt": "2020-04-26T07:09:29Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A user-provided configuration for the DataStore.\n+ */\n+@SuppressWarnings(\"unused\")\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 1_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n+\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+\n+    private final DataStoreErrorHandler dataStoreErrorHandler;\n+    private final DataStoreConflictHandler dataStoreConflictHandler;\n+    private final long syncIntervalInMinutes;\n+    private final int syncMaxRecords;\n+    private final int syncPageSize;\n+\n+    private DataStoreConfiguration(\n+            DataStoreErrorHandler dataStoreErrorHandler,\n+            DataStoreConflictHandler dataStoreConflictHandler,\n+            long syncIntervalInMinutes,\n+            int syncMaxRecords,\n+            int syncPageSize) {\n+        this.dataStoreErrorHandler = dataStoreErrorHandler;\n+        this.dataStoreConflictHandler = dataStoreConflictHandler;\n+        this.syncIntervalInMinutes = syncIntervalInMinutes;\n+        this.syncMaxRecords = syncMaxRecords;\n+        this.syncPageSize = syncPageSize;\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @return A new builder instance\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration} by reading DataStore\n+     * settings from the config file.\n+     * @param pluginJson DataStore plugin configuration from amplicationconfiguration.json\n+     * @param userProvidedConfiguration An instance of {@DataStoreConfiguration} with settings specified by the user\n+     *                                  which will be used as overrides.\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson,\n+                                  @NonNull DataStoreConfiguration userProvidedConfiguration) throws DataStoreException {\n+        return builder(pluginJson)\n+            .syncPageSize(userProvidedConfiguration.getSyncPageSize())\n+            .syncMaxRecords(userProvidedConfiguration.getSyncMaxRecords())\n+            .syncIntervalMs(userProvidedConfiguration.getSyncIntervalInMinutes())\n+            .dataStoreErrorHandler(userProvidedConfiguration.getDataStoreErrorHandler())\n+            .dataStoreConflictHandler(userProvidedConfiguration.getDataStoreConflictHandler());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95f0650a1a451e3d9c416795a9eb76917508d4b"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzODE2Ng==", "bodyText": "You can probably strip this off now that it's being referenced at least from test", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415238166", "createdAt": "2020-04-26T07:11:30Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A user-provided configuration for the DataStore.\n+ */\n+@SuppressWarnings(\"unused\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95f0650a1a451e3d9c416795a9eb76917508d4b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzODQwNA==", "bodyText": "Are these default values the same on iOS and JavaScript? I don't remember, but I may have just made these up on the fly.", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415238404", "createdAt": "2020-04-26T07:12:36Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A user-provided configuration for the DataStore.\n+ */\n+@SuppressWarnings(\"unused\")\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 1_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95f0650a1a451e3d9c416795a9eb76917508d4b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIzOTIyMw==", "bodyText": "Can we push this null check down into the builder(...) so that we don't have to process it in this block here in the plugin? That is,\ndataStoreConfiguration = DataStoreConfiguration.builder(configFromDisk, null).build();", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415239223", "createdAt": "2020-04-26T07:16:58Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -148,13 +163,24 @@ public String getPluginKey() {\n     @SuppressLint(\"CheckResult\")\n     @Override\n     public void configure(\n-            @Nullable JSONObject pluginConfiguration,\n+            @NonNull JSONObject pluginConfiguration,\n             @NonNull Context context\n     ) throws DataStoreException {\n         try {\n-            this.pluginConfiguration =\n-                AWSDataStorePluginConfiguration.fromJson(pluginConfiguration);\n+            DataStoreConfiguration dataStoreConfiguration;\n+            if (userProvidedConfiguration == null) {\n+                dataStoreConfiguration = DataStoreConfiguration\n+                    .builder(pluginConfiguration)\n+                    .build();\n+            } else {\n+                dataStoreConfiguration = DataStoreConfiguration\n+                    .builder(pluginConfiguration, userProvidedConfiguration)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95f0650a1a451e3d9c416795a9eb76917508d4b"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI0MDgyOQ==", "bodyText": "I guess there are two ways of looking at this:\n\nThe current view:\n\n\nThe orchestrator is an optional component. It's presence is determined by the content of the configuration. If the configuration does not permit remote sync, then don't create an orchestrator.\n\n\nThe original view:\n\n\nThe orchestrator is a data store component, it is constructed at the same time as the plugin. Later, if the configuration determines that sync should be enabled, the orchestrator is started.\n\nRealistically, the only concrete concern is whether or not orchestrator is null at the time you call start. So long as configuration is definitely done by the time initialize() rolls around, you should be good.", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r415240829", "createdAt": "2020-04-26T07:25:56Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -62,28 +65,39 @@\n \n     // A component which synchronizes data state between the\n     // local storage adapter, and a remote API\n-    private final Orchestrator orchestrator;\n+    private Orchestrator orchestrator;\n \n     // Keeps track of whether of not the category is initialized yet\n     private final CountDownLatch categoryInitializationsPending;\n \n     // Configuration for the plugin.\n-    private AWSDataStorePluginConfiguration pluginConfiguration;\n+    private final DataStoreConfiguration userProvidedConfiguration;\n+    private final AsyncSubject<DataStoreConfiguration> dataStoreConfigurationProvider;\n \n+    @SuppressLint(\"CheckResult\")\n     private AWSDataStorePlugin(\n-            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n             @NonNull ModelProvider modelProvider,\n-            @NonNull GraphQlBehavior api) {\n+            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n+            @NonNull GraphQlBehavior api,\n+            @Nullable DataStoreConfiguration userProvidedConfiguration) {\n         this.sqliteStorageAdapter = SQLiteStorageAdapter.forModels(modelSchemaRegistry, modelProvider);\n         this.storageItemChangeConverter = new GsonStorageItemChangeConverter();\n         this.categoryInitializationsPending = new CountDownLatch(1);\n-        this.orchestrator = new Orchestrator(\n-            modelProvider,\n-            modelSchemaRegistry,\n-            sqliteStorageAdapter,\n-            AppSyncClient.via(api),\n-            () -> pluginConfiguration.getBaseSyncIntervalMs()\n+        dataStoreConfigurationProvider = AsyncSubject.create();\n+\n+        dataStoreConfigurationProvider.subscribe(initializedConfiguration -> {\n+            orchestrator = new Orchestrator(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d95f0650a1a451e3d9c416795a9eb76917508d4b"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a91de2e1da9dd6f646c2439aaa4c244ad9c3a6a", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/8a91de2e1da9dd6f646c2439aaa4c244ad9c3a6a", "committedDate": "2020-04-26T22:57:54Z", "message": "PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c98450b8b3d5f587fa04f452a66b42e527a6fe46", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/c98450b8b3d5f587fa04f452a66b42e527a6fe46", "committedDate": "2020-04-27T19:03:17Z", "message": "Change scalar types to nullable"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzMTMyOTc0", "url": "https://github.com/aws-amplify/amplify-android/pull/401#pullrequestreview-403132974", "createdAt": "2020-04-30T00:39:50Z", "commit": {"oid": "c98450b8b3d5f587fa04f452a66b42e527a6fe46"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDozOTo1MVrOGOV6hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDo0NToxNlrOGOWAVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5MjI5NQ==", "bodyText": "I'd expect that dataStoreConfiguration would be guaranteed non-null, here. That is, if there's no config file, and the user supplies no config, then you still have some system defaults you can use. Right? So, those could go into a non-null dataStoreConfiguration. And that would have a different effect here.\nThe current logic says basically \"never do a delta sync.\"\nBut that's not what we want -- we want a delta sync if the last sync time is within some san default (1 day? Whatever it is?)\nIn other words, I'd prefer to have an Objects.requireNonNull(...) and @NonNull directive on the SyncProcessor constructor, and then just never have to worry about this branch, in this spot.", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r417692295", "createdAt": "2020-04-30T00:39:51Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "diffHunk": "@@ -121,14 +122,13 @@ Completable hydrate() {\n      * @param lastSyncTime The time of a last successful sync.\n      * @return The input, or {@link SyncTime#never()}, if the last sync time is \"too old.\"\n      */\n-    private SyncTime filterOutOldSyncTimes(SyncTime lastSyncTime) throws DataStoreException {\n-        if (!lastSyncTime.exists()) {\n+    private SyncTime filterOutOldSyncTimes(SyncTime lastSyncTime) {\n+        if (!lastSyncTime.exists() || dataStoreConfiguration == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98450b8b3d5f587fa04f452a66b42e527a6fe46"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5Mjk2Mg==", "bodyText": "This is still a little spooky. If do:\nbuilder.syncMaxRecords(1000)\n    .syncMaxRecords(500)\n    .build();\n\nThe value is 1000 even though I'd probably expect it to be 500...\n(Same for others with this pattern.)", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r417692962", "createdAt": "2020-04-30T00:42:16Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A user-provided configuration for the DataStore.\n+ */\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final long DEFAULT_SYNC_INTERVAL_MS = TimeUnit.MINUTES.toMillis(DEFAULT_SYNC_INTERVAL_MINUTES);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n+\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+\n+    private final DataStoreErrorHandler dataStoreErrorHandler;\n+    private final DataStoreConflictHandler dataStoreConflictHandler;\n+    private final Integer syncMaxRecords;\n+    private final Integer syncPageSize;\n+    private Long syncIntervalMs;\n+\n+    private DataStoreConfiguration(\n+            DataStoreErrorHandler dataStoreErrorHandler,\n+            DataStoreConflictHandler dataStoreConflictHandler,\n+            Long syncIntervalInMinutes,\n+            Integer syncMaxRecords,\n+            Integer syncPageSize) {\n+        this.dataStoreErrorHandler = dataStoreErrorHandler;\n+        this.dataStoreConflictHandler = dataStoreConflictHandler;\n+        this.syncMaxRecords = syncMaxRecords;\n+        this.syncPageSize = syncPageSize;\n+        if (syncIntervalInMinutes != null) {\n+            this.syncIntervalMs = TimeUnit.MINUTES.toMillis(syncIntervalInMinutes);\n+        }\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @return A new builder instance\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration} by reading DataStore\n+     * settings from the config file.\n+     * @param pluginJson DataStore plugin configuration from amplicationconfiguration.json\n+     * @param userProvidedConfiguration An instance of {@DataStoreConfiguration} with settings specified by the user\n+     *                                  which will be used as overrides.\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson,\n+                                  @Nullable DataStoreConfiguration userProvidedConfiguration)\n+        throws DataStoreException {\n+        Builder builder = builder(pluginJson);\n+        if (userProvidedConfiguration != null) {\n+            builder.syncPageSize(userProvidedConfiguration.getSyncPageSize())\n+                .syncMaxRecords(userProvidedConfiguration.getSyncMaxRecords())\n+                .syncIntervalInMinutes(\n+                    TimeUnit.MILLISECONDS.toMinutes(userProvidedConfiguration.getSyncIntervalMs()))\n+                .dataStoreErrorHandler(userProvidedConfiguration.getDataStoreErrorHandler())\n+                .dataStoreConflictHandler(userProvidedConfiguration.getDataStoreConflictHandler());\n+        }\n+        return builder;\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @param pluginJson The dataStore configuration as a JSONObject\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson) throws DataStoreException {\n+        final Iterator<String> jsonKeys = pluginJson.keys();\n+        Builder builder = new Builder();\n+        while (jsonKeys.hasNext()) {\n+            final String keyString = jsonKeys.next();\n+            final ConfigKey configKey;\n+            try {\n+                configKey = ConfigKey.fromString(keyString);\n+            } catch (IllegalArgumentException noSuchConfigKey) {\n+                throw new DataStoreException(\n+                        \"Saw unexpected config key: \" + keyString,\n+                        \"Make sure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+            try {\n+                switch (configKey) {\n+                    case SYNC_INTERVAL_IN_MINUTES:\n+                        builder.syncIntervalInMinutes(pluginJson\n+                            .getLong(ConfigKey.SYNC_INTERVAL_IN_MINUTES.toString()));\n+                        break;\n+                    case SYNC_MAX_RECORDS:\n+                        builder.syncMaxRecords(pluginJson.getInt(ConfigKey.SYNC_MAX_RECORDS.toString()));\n+                        break;\n+                    case SYNC_PAGE_SIZE:\n+                        builder.syncPageSize(pluginJson.getInt(ConfigKey.SYNC_PAGE_SIZE.toString()));\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Unsupported config key = \" + configKey.toString());\n+                }\n+            } catch (JSONException jsonException) {\n+                throw new DataStoreException(\n+                        \"Issue encountered while parsing configuration JSON\",\n+                        jsonException, \"Ensure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+        }\n+\n+        return builder;\n+    }\n+\n+    /**\n+     * Creates an {@link DataStoreConfiguration} which uses all default values.\n+     * @return A default {@link DataStoreConfiguration}\n+     */\n+    @NonNull\n+    public static DataStoreConfiguration defaults() {\n+        return builder()\n+            .syncIntervalInMinutes(DEFAULT_SYNC_INTERVAL_MINUTES)\n+            .syncPageSize(DEFAULT_SYNC_PAGE_SIZE)\n+            .syncMaxRecords(DEFAULT_SYNC_MAX_RECORDS)\n+            .build();\n+    }\n+\n+    /**\n+     * Gets the data store error handler.\n+     * @return Data store error handler.\n+     */\n+    @NonNull\n+    public DataStoreErrorHandler getDataStoreErrorHandler() {\n+        return this.dataStoreErrorHandler;\n+    }\n+\n+    /**\n+     * Gets the data store conflict handler.\n+     * @return Data store conflict handler\n+     */\n+    @NonNull\n+    public DataStoreConflictHandler getDataStoreConflictHandler() {\n+        return this.dataStoreConflictHandler;\n+    }\n+\n+    /**\n+     * Get the sync interval. The sync interval is the amount of time after a base sync, during which\n+     * the optimized delta-sync may be requested, instead of a full base sync.\n+     * @return The sync interval\n+     */\n+    @IntRange(from = 0)\n+    public Long getSyncIntervalMs() {\n+        return this.syncIntervalMs == null ? DEFAULT_SYNC_INTERVAL_MS : this.syncIntervalMs;\n+    }\n+\n+    /**\n+     * Gets the maximum number of records that the client wants to process, while it is requesting\n+     * a base/delta sync operation from AppSync.\n+     * @return The max number of records to process from AppSync.\n+     */\n+    @IntRange(from = 0)\n+    public Integer getSyncMaxRecords() {\n+        return this.syncMaxRecords == null ? DEFAULT_SYNC_MAX_RECORDS : this.syncMaxRecords;\n+    }\n+\n+    /**\n+     * Gets the number of items that should be requested in page, from AppSync, during\n+     * a sync operation.\n+     * @return Desired size of a page of results from an AppSync sync response\n+     */\n+    @IntRange(from = 0)\n+    public Integer getSyncPageSize() {\n+        return this.syncPageSize == null ? DEFAULT_SYNC_PAGE_SIZE : this.syncPageSize;\n+    }\n+\n+    /**\n+     * Builds instances of {@link AWSDataStorePlugin} by providing a variety of\n+     * configuration methods.\n+     */\n+    public static final class Builder {\n+        private DataStoreErrorHandler dataStoreErrorHandler;\n+        private DataStoreConflictHandler dataStoreConflictHandler;\n+        private Long syncIntervalInMinutes;\n+        private Integer syncMaxRecords;\n+        private Integer syncPageSize;\n+\n+        private Builder() {\n+            this.dataStoreErrorHandler = DefaultDataStoreErrorHandler.instance();\n+            this.dataStoreConflictHandler = ApplyRemoteConflictHandler.instance(dataStoreErrorHandler);\n+        }\n+\n+        /**\n+         * A handler that will be invoked whenever there is a conflict between two model instances,\n+         * one in the local store, and one from the remote server, as received from a sync operation.\n+         * @param dataStoreConflictHandler A handler to invoke upon sync conflicts\n+         * @return Current builder\n+         */\n+        @NonNull\n+        public Builder dataStoreConflictHandler(@NonNull DataStoreConflictHandler dataStoreConflictHandler) {\n+            this.dataStoreConflictHandler = Objects.requireNonNull(dataStoreConflictHandler);\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets a handler function to be applied when the DataStore encounters an unrecoverable error\n+         * in one of its ongoing background operations (model synchronization).\n+         * @param dataStoreErrorHandler A handler for unrecoverable background errors\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder dataStoreErrorHandler(@NonNull DataStoreErrorHandler dataStoreErrorHandler) {\n+            this.dataStoreErrorHandler = Objects.requireNonNull(dataStoreErrorHandler);\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets the duration of time after which delta syncs will not be preferred over base syncs.\n+         * @param syncIntervalInMinutes The amount of time that must elapse for delta syncs to not be considered\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder syncIntervalInMinutes(@IntRange(from = 0) Long syncIntervalInMinutes) {\n+            //Only set this value if the incoming value is null\n+            if (this.syncIntervalInMinutes == null) {\n+                this.syncIntervalInMinutes = syncIntervalInMinutes;\n+            }\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets the maximum number of records, from the server, to process from a sync operation.\n+         * @param syncMaxRecords Max number of records client will consumer from server at one time\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder syncMaxRecords(@IntRange(from = 0) Integer syncMaxRecords) {\n+            //Only set this value if the incoming value is null\n+            if (this.syncMaxRecords == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98450b8b3d5f587fa04f452a66b42e527a6fe46"}, "originalPosition": 271}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5MzE2MQ==", "bodyText": "Can you put this construction stuff in the build() so that the DataStoreConfiguration doesn't have any logic, it just returned a single, final, stored instance value?\n(Same for others with this pattern.)", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r417693161", "createdAt": "2020-04-30T00:43:06Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A user-provided configuration for the DataStore.\n+ */\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final long DEFAULT_SYNC_INTERVAL_MS = TimeUnit.MINUTES.toMillis(DEFAULT_SYNC_INTERVAL_MINUTES);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n+\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+\n+    private final DataStoreErrorHandler dataStoreErrorHandler;\n+    private final DataStoreConflictHandler dataStoreConflictHandler;\n+    private final Integer syncMaxRecords;\n+    private final Integer syncPageSize;\n+    private Long syncIntervalMs;\n+\n+    private DataStoreConfiguration(\n+            DataStoreErrorHandler dataStoreErrorHandler,\n+            DataStoreConflictHandler dataStoreConflictHandler,\n+            Long syncIntervalInMinutes,\n+            Integer syncMaxRecords,\n+            Integer syncPageSize) {\n+        this.dataStoreErrorHandler = dataStoreErrorHandler;\n+        this.dataStoreConflictHandler = dataStoreConflictHandler;\n+        this.syncMaxRecords = syncMaxRecords;\n+        this.syncPageSize = syncPageSize;\n+        if (syncIntervalInMinutes != null) {\n+            this.syncIntervalMs = TimeUnit.MINUTES.toMillis(syncIntervalInMinutes);\n+        }\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @return A new builder instance\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration} by reading DataStore\n+     * settings from the config file.\n+     * @param pluginJson DataStore plugin configuration from amplicationconfiguration.json\n+     * @param userProvidedConfiguration An instance of {@DataStoreConfiguration} with settings specified by the user\n+     *                                  which will be used as overrides.\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson,\n+                                  @Nullable DataStoreConfiguration userProvidedConfiguration)\n+        throws DataStoreException {\n+        Builder builder = builder(pluginJson);\n+        if (userProvidedConfiguration != null) {\n+            builder.syncPageSize(userProvidedConfiguration.getSyncPageSize())\n+                .syncMaxRecords(userProvidedConfiguration.getSyncMaxRecords())\n+                .syncIntervalInMinutes(\n+                    TimeUnit.MILLISECONDS.toMinutes(userProvidedConfiguration.getSyncIntervalMs()))\n+                .dataStoreErrorHandler(userProvidedConfiguration.getDataStoreErrorHandler())\n+                .dataStoreConflictHandler(userProvidedConfiguration.getDataStoreConflictHandler());\n+        }\n+        return builder;\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @param pluginJson The dataStore configuration as a JSONObject\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static Builder builder(@NonNull JSONObject pluginJson) throws DataStoreException {\n+        final Iterator<String> jsonKeys = pluginJson.keys();\n+        Builder builder = new Builder();\n+        while (jsonKeys.hasNext()) {\n+            final String keyString = jsonKeys.next();\n+            final ConfigKey configKey;\n+            try {\n+                configKey = ConfigKey.fromString(keyString);\n+            } catch (IllegalArgumentException noSuchConfigKey) {\n+                throw new DataStoreException(\n+                        \"Saw unexpected config key: \" + keyString,\n+                        \"Make sure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+            try {\n+                switch (configKey) {\n+                    case SYNC_INTERVAL_IN_MINUTES:\n+                        builder.syncIntervalInMinutes(pluginJson\n+                            .getLong(ConfigKey.SYNC_INTERVAL_IN_MINUTES.toString()));\n+                        break;\n+                    case SYNC_MAX_RECORDS:\n+                        builder.syncMaxRecords(pluginJson.getInt(ConfigKey.SYNC_MAX_RECORDS.toString()));\n+                        break;\n+                    case SYNC_PAGE_SIZE:\n+                        builder.syncPageSize(pluginJson.getInt(ConfigKey.SYNC_PAGE_SIZE.toString()));\n+                        break;\n+                    default:\n+                        throw new IllegalArgumentException(\"Unsupported config key = \" + configKey.toString());\n+                }\n+            } catch (JSONException jsonException) {\n+                throw new DataStoreException(\n+                        \"Issue encountered while parsing configuration JSON\",\n+                        jsonException, \"Ensure your amplifyconfiguration.json is valid.\"\n+                );\n+            }\n+        }\n+\n+        return builder;\n+    }\n+\n+    /**\n+     * Creates an {@link DataStoreConfiguration} which uses all default values.\n+     * @return A default {@link DataStoreConfiguration}\n+     */\n+    @NonNull\n+    public static DataStoreConfiguration defaults() {\n+        return builder()\n+            .syncIntervalInMinutes(DEFAULT_SYNC_INTERVAL_MINUTES)\n+            .syncPageSize(DEFAULT_SYNC_PAGE_SIZE)\n+            .syncMaxRecords(DEFAULT_SYNC_MAX_RECORDS)\n+            .build();\n+    }\n+\n+    /**\n+     * Gets the data store error handler.\n+     * @return Data store error handler.\n+     */\n+    @NonNull\n+    public DataStoreErrorHandler getDataStoreErrorHandler() {\n+        return this.dataStoreErrorHandler;\n+    }\n+\n+    /**\n+     * Gets the data store conflict handler.\n+     * @return Data store conflict handler\n+     */\n+    @NonNull\n+    public DataStoreConflictHandler getDataStoreConflictHandler() {\n+        return this.dataStoreConflictHandler;\n+    }\n+\n+    /**\n+     * Get the sync interval. The sync interval is the amount of time after a base sync, during which\n+     * the optimized delta-sync may be requested, instead of a full base sync.\n+     * @return The sync interval\n+     */\n+    @IntRange(from = 0)\n+    public Long getSyncIntervalMs() {\n+        return this.syncIntervalMs == null ? DEFAULT_SYNC_INTERVAL_MS : this.syncIntervalMs;\n+    }\n+\n+    /**\n+     * Gets the maximum number of records that the client wants to process, while it is requesting\n+     * a base/delta sync operation from AppSync.\n+     * @return The max number of records to process from AppSync.\n+     */\n+    @IntRange(from = 0)\n+    public Integer getSyncMaxRecords() {\n+        return this.syncMaxRecords == null ? DEFAULT_SYNC_MAX_RECORDS : this.syncMaxRecords;\n+    }\n+\n+    /**\n+     * Gets the number of items that should be requested in page, from AppSync, during\n+     * a sync operation.\n+     * @return Desired size of a page of results from an AppSync sync response\n+     */\n+    @IntRange(from = 0)\n+    public Integer getSyncPageSize() {\n+        return this.syncPageSize == null ? DEFAULT_SYNC_PAGE_SIZE : this.syncPageSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98450b8b3d5f587fa04f452a66b42e527a6fe46"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY5Mzc4MQ==", "bodyText": "You actually use it to model a few things right, it is no longer just user-provided?", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r417693781", "createdAt": "2020-04-30T00:45:16Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,349 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * A user-provided configuration for the DataStore.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c98450b8b3d5f587fa04f452a66b42e527a6fe46"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c3c4c5522dcd21c055d511c03afb970e64bede5", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/6c3c4c5522dcd21c055d511c03afb970e64bede5", "committedDate": "2020-04-30T16:38:01Z", "message": "Lazy initialization of config via provider. Move logic into builder."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzODk3MzE5", "url": "https://github.com/aws-amplify/amplify-android/pull/401#pullrequestreview-403897319", "createdAt": "2020-04-30T21:40:51Z", "commit": {"oid": "6c3c4c5522dcd21c055d511c03afb970e64bede5"}, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTo0MDo1MVrOGO7Ujg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMTo1MjowN1rOGO7nPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwNTE2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    orchestrator = new Orchestrator(\n          \n          \n            \n                    this.orchestrator = new Orchestrator(", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r418305166", "createdAt": "2020-04-30T21:40:51Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -62,28 +64,36 @@\n \n     // A component which synchronizes data state between the\n     // local storage adapter, and a remote API\n-    private final Orchestrator orchestrator;\n+    private Orchestrator orchestrator;\n \n     // Keeps track of whether of not the category is initialized yet\n     private final CountDownLatch categoryInitializationsPending;\n \n-    // Configuration for the plugin.\n-    private AWSDataStorePluginConfiguration pluginConfiguration;\n+    // User-provided configuration for the plugin.\n+    private final DataStoreConfiguration userProvidedConfiguration;\n \n+    // Configuration for the plugin that contains settings from the JSON file plus any\n+    // overrides provided via the userProvidedConfiguration\n+    private DataStoreConfiguration pluginConfiguration;\n+\n+    @SuppressLint(\"CheckResult\")\n     private AWSDataStorePlugin(\n-            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n             @NonNull ModelProvider modelProvider,\n-            @NonNull GraphQlBehavior api) {\n+            @NonNull ModelSchemaRegistry modelSchemaRegistry,\n+            @NonNull GraphQlBehavior api,\n+            @Nullable DataStoreConfiguration userProvidedConfiguration) {\n         this.sqliteStorageAdapter = SQLiteStorageAdapter.forModels(modelSchemaRegistry, modelProvider);\n         this.storageItemChangeConverter = new GsonStorageItemChangeConverter();\n         this.categoryInitializationsPending = new CountDownLatch(1);\n-        this.orchestrator = new Orchestrator(\n+\n+        orchestrator = new Orchestrator(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c3c4c5522dcd21c055d511c03afb970e64bede5"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwNTM3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Orchestrator orchestrator;\n          \n          \n            \n                private final Orchestrator orchestrator;", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r418305371", "createdAt": "2020-04-30T21:41:17Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -62,28 +64,36 @@\n \n     // A component which synchronizes data state between the\n     // local storage adapter, and a remote API\n-    private final Orchestrator orchestrator;\n+    private Orchestrator orchestrator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c3c4c5522dcd21c055d511c03afb970e64bede5"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwNTk5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        this.pluginConfiguration = DataStoreConfiguration\n          \n          \n            \n                        // Applies user-provided configs on-top-of any values from the file.\n          \n          \n            \n                        this.pluginConfiguration = DataStoreConfiguration", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r418305999", "createdAt": "2020-04-30T21:42:46Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -148,12 +159,13 @@ public String getPluginKey() {\n     @SuppressLint(\"CheckResult\")\n     @Override\n     public void configure(\n-            @Nullable JSONObject pluginConfiguration,\n+            @NonNull JSONObject pluginConfiguration,\n             @NonNull Context context\n     ) throws DataStoreException {\n         try {\n-            this.pluginConfiguration =\n-                AWSDataStorePluginConfiguration.fromJson(pluginConfiguration);\n+            this.pluginConfiguration = DataStoreConfiguration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c3c4c5522dcd21c055d511c03afb970e64bede5"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwNjg4OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import androidx.annotation.Nullable;\n          \n          \n            \n            import androidx.annotation.Nullable;\n          \n          \n            \n            import androidx.annotation.VisibleForTesting;", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r418306889", "createdAt": "2020-04-30T21:44:47Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,387 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c3c4c5522dcd21c055d511c03afb970e64bede5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwNzM4Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n          \n          \n            \n                static final long DEFAULT_SYNC_INTERVAL_MS = TimeUnit.MINUTES.toMillis(DEFAULT_SYNC_INTERVAL_MINUTES);\n          \n          \n            \n                static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n          \n          \n            \n                static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n          \n          \n            \n                @VisibleForTesting\n          \n          \n            \n                static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n          \n          \n            \n                @VisibleForTesting\n          \n          \n            \n                static final long DEFAULT_SYNC_INTERVAL_MS = TimeUnit.MINUTES.toMillis(DEFAULT_SYNC_INTERVAL_MINUTES);\n          \n          \n            \n                @VisibleForTesting \n          \n          \n            \n                static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n          \n          \n            \n                @VisibleForTesting \n          \n          \n            \n                static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r418307383", "createdAt": "2020-04-30T21:46:01Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,387 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Configuration options for {@link AWSDataStorePlugin}.\n+ */\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final long DEFAULT_SYNC_INTERVAL_MS = TimeUnit.MINUTES.toMillis(DEFAULT_SYNC_INTERVAL_MINUTES);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c3c4c5522dcd21c055d511c03afb970e64bede5"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwOTQ4Mw==", "bodyText": "Suggested change", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r418309483", "createdAt": "2020-04-30T21:51:05Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,387 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Configuration options for {@link AWSDataStorePlugin}.\n+ */\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final long DEFAULT_SYNC_INTERVAL_MS = TimeUnit.MINUTES.toMillis(DEFAULT_SYNC_INTERVAL_MINUTES);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n+\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+\n+    private final DataStoreErrorHandler dataStoreErrorHandler;\n+    private final DataStoreConflictHandler dataStoreConflictHandler;\n+    private final Integer syncMaxRecords;\n+    private final Integer syncPageSize;\n+    private Long syncIntervalInMinutes;\n+    private Long syncIntervalMs;\n+\n+    private DataStoreConfiguration(\n+            DataStoreErrorHandler dataStoreErrorHandler,\n+            DataStoreConflictHandler dataStoreConflictHandler,\n+            Long syncIntervalInMinutes,\n+            Integer syncMaxRecords,\n+            Integer syncPageSize) {\n+        this.dataStoreErrorHandler = dataStoreErrorHandler;\n+        this.dataStoreConflictHandler = dataStoreConflictHandler;\n+        this.syncMaxRecords = syncMaxRecords;\n+        this.syncPageSize = syncPageSize;\n+        if (syncIntervalInMinutes != null) {\n+            this.syncIntervalInMinutes = syncIntervalInMinutes;\n+            this.syncIntervalMs = TimeUnit.MINUTES.toMillis(syncIntervalInMinutes);\n+        }\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @return A new builder instance\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration} by reading DataStore\n+     * settings from the config file and an optional set of user-provided overrides.\n+     * @param pluginJson DataStore plugin configuration from amplicationconfiguration.json\n+     * @param userProvidedConfiguration An instance of {@DataStoreConfiguration} with settings specified by the user\n+     *                                  which will be used as overrides.\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    static Builder builder(@NonNull JSONObject pluginJson,\n+                           @Nullable DataStoreConfiguration userProvidedConfiguration) {\n+        return new Builder(pluginJson, userProvidedConfiguration);\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @param pluginJson The dataStore configuration as a JSONObject\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    static Builder builder(@NonNull JSONObject pluginJson) {\n+        return builder(pluginJson, null);\n+    }\n+\n+    /**\n+     * Creates an {@link DataStoreConfiguration} which uses all default values.\n+     * @return A default {@link DataStoreConfiguration}\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static DataStoreConfiguration defaults() throws DataStoreException {\n+        return builder()\n+            .syncIntervalInMinutes(DEFAULT_SYNC_INTERVAL_MINUTES)\n+            .syncPageSize(DEFAULT_SYNC_PAGE_SIZE)\n+            .syncMaxRecords(DEFAULT_SYNC_MAX_RECORDS)\n+            .build();\n+    }\n+\n+    /**\n+     * Gets the data store error handler.\n+     * @return Data store error handler.\n+     */\n+    @NonNull\n+    public DataStoreErrorHandler getDataStoreErrorHandler() {\n+        return this.dataStoreErrorHandler;\n+    }\n+\n+    /**\n+     * Gets the data store conflict handler.\n+     * @return Data store conflict handler\n+     */\n+    @NonNull\n+    public DataStoreConflictHandler getDataStoreConflictHandler() {\n+        return this.dataStoreConflictHandler;\n+    }\n+\n+    /**\n+     * Get the sync interval. The sync interval is the amount of time after a base sync, during which\n+     * the optimized delta-sync may be requested, instead of a full base sync.\n+     * @return The sync interval\n+     */\n+    @IntRange(from = 0)\n+    public Long getSyncIntervalMs() {\n+        return this.syncIntervalMs;\n+    }\n+\n+    @IntRange(from = 0)\n+    public Long getSyncIntervalInMinutes() {\n+        return this.syncIntervalInMinutes;\n+    }\n+\n+    /**\n+     * Gets the maximum number of records that the client wants to process, while it is requesting\n+     * a base/delta sync operation from AppSync.\n+     * @return The max number of records to process from AppSync.\n+     */\n+    @IntRange(from = 0)\n+    public Integer getSyncMaxRecords() {\n+        return this.syncMaxRecords;\n+    }\n+\n+    /**\n+     * Gets the number of items that should be requested in page, from AppSync, during\n+     * a sync operation.\n+     * @return Desired size of a page of results from an AppSync sync response\n+     */\n+    @IntRange(from = 0)\n+    public Integer getSyncPageSize() {\n+        return this.syncPageSize;\n+    }\n+\n+    /**\n+     * Builds instances of {@link AWSDataStorePlugin} by providing a variety of\n+     * configuration methods.\n+     */\n+    public static final class Builder {\n+        private DataStoreErrorHandler dataStoreErrorHandler;\n+        private DataStoreConflictHandler dataStoreConflictHandler;\n+        private Long syncIntervalInMinutes;\n+        private Integer syncMaxRecords;\n+        private Integer syncPageSize;\n+        private boolean ensureDefaults;\n+        private JSONObject pluginJson;\n+        private DataStoreConfiguration userProvidedConfiguration;\n+\n+        private Builder() {\n+            this.dataStoreErrorHandler = DefaultDataStoreErrorHandler.instance();\n+            this.dataStoreConflictHandler = ApplyRemoteConflictHandler.instance(dataStoreErrorHandler);\n+            this.ensureDefaults = false;\n+        }\n+\n+        private Builder(JSONObject pluginJson, DataStoreConfiguration userProvidedConfiguration) {\n+            this();\n+            this.pluginJson = pluginJson;\n+            this.userProvidedConfiguration = userProvidedConfiguration;\n+            this.ensureDefaults = true;\n+        }\n+\n+        /**\n+         * A handler that will be invoked whenever there is a conflict between two model instances,\n+         * one in the local store, and one from the remote server, as received from a sync operation.\n+         * @param dataStoreConflictHandler A handler to invoke upon sync conflicts\n+         * @return Current builder\n+         */\n+        @NonNull\n+        public Builder dataStoreConflictHandler(@NonNull DataStoreConflictHandler dataStoreConflictHandler) {\n+            this.dataStoreConflictHandler = Objects.requireNonNull(dataStoreConflictHandler);\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets a handler function to be applied when the DataStore encounters an unrecoverable error\n+         * in one of its ongoing background operations (model synchronization).\n+         * @param dataStoreErrorHandler A handler for unrecoverable background errors\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder dataStoreErrorHandler(@NonNull DataStoreErrorHandler dataStoreErrorHandler) {\n+            this.dataStoreErrorHandler = Objects.requireNonNull(dataStoreErrorHandler);\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets the duration of time after which delta syncs will not be preferred over base syncs.\n+         * @param syncIntervalInMinutes The amount of time that must elapse for delta syncs to not be considered\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder syncIntervalInMinutes(@IntRange(from = 0) Long syncIntervalInMinutes) {\n+            this.syncIntervalInMinutes = syncIntervalInMinutes;\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets the maximum number of records, from the server, to process from a sync operation.\n+         * @param syncMaxRecords Max number of records client will consumer from server at one time\n+         * @return Current builder instance\n+         */\n+        @NonNull\n+        public Builder syncMaxRecords(@IntRange(from = 0) Integer syncMaxRecords) {\n+            this.syncMaxRecords = syncMaxRecords;\n+            return Builder.this;\n+        }\n+\n+        /**\n+         * Sets the number of items requested in each page of sync results.\n+         * @param syncPageSize Number of items requested per page in sync operation\n+         * @return Current builder\n+         */\n+        @NonNull\n+        public Builder syncPageSize(@IntRange(from = 0) Integer syncPageSize) {\n+            this.syncPageSize = syncPageSize;\n+            return Builder.this;\n+        }\n+\n+        private void populateSettingsFromJson() throws DataStoreException {\n+            if (pluginJson == null) {\n+                return;\n+            }\n+            final Iterator<String> jsonKeys = pluginJson.keys();\n+            while (jsonKeys.hasNext()) {\n+                final String keyString = jsonKeys.next();\n+                final ConfigKey configKey;\n+                try {\n+                    configKey = ConfigKey.fromString(keyString);\n+                } catch (IllegalArgumentException noSuchConfigKey) {\n+                    throw new DataStoreException(\n+                        \"Saw unexpected config key: \" + keyString,\n+                        \"Make sure your amplifyconfiguration.json is valid.\"\n+                    );\n+                }\n+                try {\n+                    switch (configKey) {\n+                        case SYNC_INTERVAL_IN_MINUTES:\n+                            this.syncIntervalInMinutes(pluginJson\n+                                .getLong(ConfigKey.SYNC_INTERVAL_IN_MINUTES.toString()));\n+                            break;\n+                        case SYNC_MAX_RECORDS:\n+                            this.syncMaxRecords(pluginJson.getInt(ConfigKey.SYNC_MAX_RECORDS.toString()));\n+                            break;\n+                        case SYNC_PAGE_SIZE:\n+                            this.syncPageSize(pluginJson.getInt(ConfigKey.SYNC_PAGE_SIZE.toString()));\n+                            break;\n+                        default:\n+                            throw new IllegalArgumentException(\"Unsupported config key = \" + configKey.toString());\n+                    }\n+                } catch (JSONException jsonException) {\n+                    throw new DataStoreException(\n+                        \"Issue encountered while parsing configuration JSON\",\n+                        jsonException, \"Ensure your amplifyconfiguration.json is valid.\"\n+                    );\n+                }\n+            }\n+        }\n+\n+        private void applyUserProvidedConfiguration() {\n+            if (userProvidedConfiguration == null) {\n+                return;\n+            }\n+            dataStoreErrorHandler = userProvidedConfiguration.getDataStoreErrorHandler();\n+            dataStoreConflictHandler = userProvidedConfiguration.getDataStoreConflictHandler();\n+            syncIntervalInMinutes = getValueOrDefault(\n+                userProvidedConfiguration.getSyncIntervalInMinutes(),\n+                syncIntervalInMinutes);\n+            syncMaxRecords = getValueOrDefault(userProvidedConfiguration.getSyncMaxRecords(), syncMaxRecords);\n+            syncPageSize = getValueOrDefault(userProvidedConfiguration.getSyncPageSize(), syncPageSize);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c3c4c5522dcd21c055d511c03afb970e64bede5"}, "originalPosition": 307}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODMwOTk1MA==", "bodyText": "Should this also include our opinionated error and conflict handlers?", "url": "https://github.com/aws-amplify/amplify-android/pull/401#discussion_r418309950", "createdAt": "2020-04-30T21:52:07Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java", "diffHunk": "@@ -0,0 +1,387 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore;\n+\n+import androidx.annotation.IntRange;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.logging.Logger;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.Iterator;\n+import java.util.Objects;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * Configuration options for {@link AWSDataStorePlugin}.\n+ */\n+public final class DataStoreConfiguration {\n+    static final String PLUGIN_CONFIG_KEY = \"awsDataStorePlugin\";\n+    static final long DEFAULT_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    static final long DEFAULT_SYNC_INTERVAL_MS = TimeUnit.MINUTES.toMillis(DEFAULT_SYNC_INTERVAL_MINUTES);\n+    static final int DEFAULT_SYNC_MAX_RECORDS = 10_000;\n+    static final int DEFAULT_SYNC_PAGE_SIZE = 1_000;\n+\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+\n+    private final DataStoreErrorHandler dataStoreErrorHandler;\n+    private final DataStoreConflictHandler dataStoreConflictHandler;\n+    private final Integer syncMaxRecords;\n+    private final Integer syncPageSize;\n+    private Long syncIntervalInMinutes;\n+    private Long syncIntervalMs;\n+\n+    private DataStoreConfiguration(\n+            DataStoreErrorHandler dataStoreErrorHandler,\n+            DataStoreConflictHandler dataStoreConflictHandler,\n+            Long syncIntervalInMinutes,\n+            Integer syncMaxRecords,\n+            Integer syncPageSize) {\n+        this.dataStoreErrorHandler = dataStoreErrorHandler;\n+        this.dataStoreConflictHandler = dataStoreConflictHandler;\n+        this.syncMaxRecords = syncMaxRecords;\n+        this.syncPageSize = syncPageSize;\n+        if (syncIntervalInMinutes != null) {\n+            this.syncIntervalInMinutes = syncIntervalInMinutes;\n+            this.syncIntervalMs = TimeUnit.MINUTES.toMillis(syncIntervalInMinutes);\n+        }\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @return A new builder instance\n+     */\n+    @NonNull\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration} by reading DataStore\n+     * settings from the config file and an optional set of user-provided overrides.\n+     * @param pluginJson DataStore plugin configuration from amplicationconfiguration.json\n+     * @param userProvidedConfiguration An instance of {@DataStoreConfiguration} with settings specified by the user\n+     *                                  which will be used as overrides.\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    static Builder builder(@NonNull JSONObject pluginJson,\n+                           @Nullable DataStoreConfiguration userProvidedConfiguration) {\n+        return new Builder(pluginJson, userProvidedConfiguration);\n+    }\n+\n+    /**\n+     * Begin building a new instance of {@link DataStoreConfiguration}.\n+     * @param pluginJson The dataStore configuration as a JSONObject\n+     * @return A new builder instance\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    static Builder builder(@NonNull JSONObject pluginJson) {\n+        return builder(pluginJson, null);\n+    }\n+\n+    /**\n+     * Creates an {@link DataStoreConfiguration} which uses all default values.\n+     * @return A default {@link DataStoreConfiguration}\n+     * @throws DataStoreException exception thrown if there's an unexpected configuration key or\n+     * an invalid configuration value\n+     */\n+    @NonNull\n+    public static DataStoreConfiguration defaults() throws DataStoreException {\n+        return builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c3c4c5522dcd21c055d511c03afb970e64bede5"}, "originalPosition": 112}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dee83ae7247d0a71adf81a9caf50d6d1df02afc3", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/dee83ae7247d0a71adf81a9caf50d6d1df02afc3", "committedDate": "2020-05-01T01:43:05Z", "message": "Update aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java\n\nCo-authored-by: Jameson Williams <jhwill@amazon.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a82b01075913c303ac209517abb8680f60d1f66", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/8a82b01075913c303ac209517abb8680f60d1f66", "committedDate": "2020-05-01T01:43:51Z", "message": "Update aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java\n\nCo-authored-by: Jameson Williams <jhwill@amazon.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bc1729a0456ae00ad5f86ee8222c9a63431d4f7", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/7bc1729a0456ae00ad5f86ee8222c9a63431d4f7", "committedDate": "2020-05-01T01:44:19Z", "message": "Update aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java\n\nCo-authored-by: Jameson Williams <jhwill@amazon.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f92b4fa2c2a8dacf0064681e38625e121a673074", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/f92b4fa2c2a8dacf0064681e38625e121a673074", "committedDate": "2020-05-01T01:44:50Z", "message": "Update aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n\nCo-authored-by: Jameson Williams <jhwill@amazon.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8948fe20fc06509e88351059d0a01eb2018ae93f", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/8948fe20fc06509e88351059d0a01eb2018ae93f", "committedDate": "2020-05-01T01:45:23Z", "message": "Update aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n\nCo-authored-by: Jameson Williams <jhwill@amazon.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b780ca667bf909dbd3eafee24289c74f60d7c0b1", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/b780ca667bf909dbd3eafee24289c74f60d7c0b1", "committedDate": "2020-05-01T01:47:44Z", "message": "Update aws-datastore/src/main/java/com/amplifyframework/datastore/DataStoreConfiguration.java\n\nCo-authored-by: Jameson Williams <jhwill@amazon.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90c9f09817af5ac0a09b8370393c6aef5179492d", "author": {"user": {"login": "rjuliano", "name": "Rafael Juliano"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/90c9f09817af5ac0a09b8370393c6aef5179492d", "committedDate": "2020-05-01T02:04:43Z", "message": "Explicitly set handlers in defaults() method"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2740, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}