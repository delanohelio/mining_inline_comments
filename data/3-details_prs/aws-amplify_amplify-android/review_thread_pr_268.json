{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1OTQ1MTk3", "number": 268, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjoyNDozOVrODgcmmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMToxODoxOFrODhrr9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzQ5NjU3OnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/amplifyframework/hub/AWSHubPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjoyNDozOVrOFqqHBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjoyNDozOVrOFqqHBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3NDQzOQ==", "bodyText": "This line is problematic when writing a unit test that exercises the AWSHubPlugin. It is also a strange choice, to callback on the main thread, when the subscription did not necessarily happen on the main thread. So, while this line doesn't appear to have to do with the purpose of the PR at first glance -- it's towards making this class test-able.", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r380274439", "createdAt": "2020-02-17T16:24:39Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/hub/AWSHubPlugin.java", "diffHunk": "@@ -68,8 +65,7 @@\n                         !subscription.getHubEventFilter().filter(hubEvent)) {\n                     continue;\n                 }\n-\n-                mainHandler.post(() -> subscription.getHubSubscriber().onEvent(hubEvent));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjM3OTQ2OnYy", "diffSide": "RIGHT", "path": "rxbindings/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDo1Mjo1OVrOFsiw6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzowNDo1N1rOFsqVIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1MTI0Mg==", "bodyText": "0.9.1", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382251242", "createdAt": "2020-02-20T20:52:59Z", "author": {"login": "raphkim"}, "path": "rxbindings/README.md", "diffHunk": "@@ -0,0 +1,69 @@\n+# amplify-android-rxbindings\n+A wrapper for the AWS Amplify Android framework, which exposes\n+functionalities via RxJava2\n+\n+Instead of using Amplify's native callback interface, you can interact\n+with Amplify APIs by means of RxJava2\n+[`Observable`](http://reactivex.io/RxJava/javadoc/io/reactivex/Observable.html),\n+[`Single`](http://reactivex.io/RxJava/javadoc/io/reactivex/Single.html), and\n+[`Completable`](http://reactivex.io/RxJava/javadoc/io/reactivex/Completable.html).\n+\n+## Usage\n+\n+### Pre-requisites\n+\n+As a pre-requisite, deploy AWS resources to your backend using the\n+Amplify CLI, as in the [Getting\n+Started guide](https://aws-amplify.github.io/docs/android/start).\n+\n+\n+### Gradle\n+Take an `implementation` dependency on this library. In your module's\n+`build.gradle`:\n+```\n+dependencies {\n+    # ...\n+    implementation 'com.amplifyframework:core:0.9.0'\n+    implementation 'com.amplifyframework:rxbindings:0.9.0'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NTIwMA==", "bodyText": "Updating", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382375200", "createdAt": "2020-02-21T03:04:57Z", "author": {"login": "jamesonwilliams"}, "path": "rxbindings/README.md", "diffHunk": "@@ -0,0 +1,69 @@\n+# amplify-android-rxbindings\n+A wrapper for the AWS Amplify Android framework, which exposes\n+functionalities via RxJava2\n+\n+Instead of using Amplify's native callback interface, you can interact\n+with Amplify APIs by means of RxJava2\n+[`Observable`](http://reactivex.io/RxJava/javadoc/io/reactivex/Observable.html),\n+[`Single`](http://reactivex.io/RxJava/javadoc/io/reactivex/Single.html), and\n+[`Completable`](http://reactivex.io/RxJava/javadoc/io/reactivex/Completable.html).\n+\n+## Usage\n+\n+### Pre-requisites\n+\n+As a pre-requisite, deploy AWS resources to your backend using the\n+Amplify CLI, as in the [Getting\n+Started guide](https://aws-amplify.github.io/docs/android/start).\n+\n+\n+### Gradle\n+Take an `implementation` dependency on this library. In your module's\n+`build.gradle`:\n+```\n+dependencies {\n+    # ...\n+    implementation 'com.amplifyframework:core:0.9.0'\n+    implementation 'com.amplifyframework:rxbindings:0.9.0'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1MTI0Mg=="}, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjM4NTk2OnYy", "diffSide": "RIGHT", "path": "rxbindings/src/main/AndroidManifest.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDo1NToyMVrOFsi1Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzowNDo1MVrOFsqVEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1MjMwNg==", "bodyText": "Shouldn't this say:\n\nCopyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382252306", "createdAt": "2020-02-20T20:55:21Z", "author": {"login": "raphkim"}, "path": "rxbindings/src/main/AndroidManifest.xml", "diffHunk": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+   Copyright 2020 nosemaj.org. All Rights Reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NTE4NA==", "bodyText": "Yes! Good catch.", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382375184", "createdAt": "2020-02-21T03:04:51Z", "author": {"login": "jamesonwilliams"}, "path": "rxbindings/src/main/AndroidManifest.xml", "diffHunk": "@@ -0,0 +1,20 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+   Copyright 2020 nosemaj.org. All Rights Reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1MjMwNg=="}, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjM5MjAxOnYy", "diffSide": "RIGHT", "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxAmplify.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMDo1NzowMlrOFsi48g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzoyMjoyN1rOFsmn3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1MzI5OA==", "bodyText": "Aren't we making them both Async as per our last initialization workflow discussion?", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382253298", "createdAt": "2020-02-20T20:57:02Z", "author": {"login": "raphkim"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxAmplify.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.rx;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.AmplifyConfiguration;\n+import com.amplifyframework.core.plugin.Plugin;\n+\n+/**\n+ * A collection of bindings to facilitate use of the Amplify framework with Rx-centered APIs.\n+ */\n+@SuppressWarnings({\"WeakerAccess\", \"unused\"})\n+public final class RxAmplify {\n+\n+    @SuppressWarnings(\"checkstyle:all\") private RxAmplify() {}\n+\n+    // Breaking the rules, here. Don't look.\n+    @SuppressWarnings({\"checkstyle:all\", \"unused\"}) public static final RxApi API = new RxApiBinding();\n+    @SuppressWarnings({\"checkstyle:all\", \"unused\"}) public static final RxDataStore DataStore = new RxDataStoreBinding();\n+    @SuppressWarnings({\"checkstyle:all\", \"unused\"}) public static final RxHub Hub = new RxHubBinding();\n+    @SuppressWarnings({\"checkstyle:all\", \"unused\"}) public static final RxStorage Storage = new RxStorageBinding();\n+    // Logging currently has no callback/async behaviors\n+    // Analytics currently has no callback/async behaviors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxNDQ2Mw==", "bodyText": "Yea, we'll have to. But we should do it in a separate PR. This RxAmplify will need to be updated as well, but the nice thing is the compiler will tell us about it since they're in the same repo.", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382314463", "createdAt": "2020-02-20T23:22:27Z", "author": {"login": "jamesonwilliams"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxAmplify.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.rx;\n+\n+import android.content.Context;\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.AmplifyConfiguration;\n+import com.amplifyframework.core.plugin.Plugin;\n+\n+/**\n+ * A collection of bindings to facilitate use of the Amplify framework with Rx-centered APIs.\n+ */\n+@SuppressWarnings({\"WeakerAccess\", \"unused\"})\n+public final class RxAmplify {\n+\n+    @SuppressWarnings(\"checkstyle:all\") private RxAmplify() {}\n+\n+    // Breaking the rules, here. Don't look.\n+    @SuppressWarnings({\"checkstyle:all\", \"unused\"}) public static final RxApi API = new RxApiBinding();\n+    @SuppressWarnings({\"checkstyle:all\", \"unused\"}) public static final RxDataStore DataStore = new RxDataStoreBinding();\n+    @SuppressWarnings({\"checkstyle:all\", \"unused\"}) public static final RxHub Hub = new RxHubBinding();\n+    @SuppressWarnings({\"checkstyle:all\", \"unused\"}) public static final RxStorage Storage = new RxStorageBinding();\n+    // Logging currently has no callback/async behaviors\n+    // Analytics currently has no callback/async behaviors", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1MzI5OA=="}, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQyMTY1OnYy", "diffSide": "RIGHT", "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApi.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTowNjowNVrOFsjLgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMzoyNzozM1rOFsmuow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1ODA1MA==", "bodyText": "public interface RxApiCategoryBehavior extends RxRestBehavior, RxGraphQLBehavior {}\nAlso would be nice to agree on GraphQL vs GraphQl when naming our java classes.\nOn somewhat-related note, there is also similar inconsistency in datastore storage engine (Sql vs SQL, SQLite vs Sqlite)", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382258050", "createdAt": "2020-02-20T21:06:05Z", "author": {"login": "raphkim"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApi.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.rx;\n+\n+import com.amplifyframework.api.ApiCategoryBehavior;\n+\n+/**\n+ * An Rx-idiomatic expression of Amplify's {@link ApiCategoryBehavior}s.\n+ */\n+@SuppressWarnings(\"WeakerAccess\") // This is a public API.\n+public interface RxApi extends RxRestApi, RxGraphQlApi {\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxNjE5NQ==", "bodyText": "there is this guidance -\nhttps://stackoverflow.com/a/15526526/695787\nBut it\u2019s complicated since the acronyms are embedded in other words. I guess it should be GraphQL and Sqlite in pascal-case, and graphql and sqlite in camel-case? Does that sound right?", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382316195", "createdAt": "2020-02-20T23:27:33Z", "author": {"login": "jamesonwilliams"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApi.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.rx;\n+\n+import com.amplifyframework.api.ApiCategoryBehavior;\n+\n+/**\n+ * An Rx-idiomatic expression of Amplify's {@link ApiCategoryBehavior}s.\n+ */\n+@SuppressWarnings(\"WeakerAccess\") // This is a public API.\n+public interface RxApi extends RxRestApi, RxGraphQlApi {\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1ODA1MA=="}, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQyNTkxOnYy", "diffSide": "RIGHT", "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTowNzo0OFrOFsjOPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDozNDoyM1rOFsramQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1ODc1MQ==", "bodyText": "Is this meant to be for plugin or category?", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382258751", "createdAt": "2020-02-20T21:07:48Z", "author": {"login": "raphkim"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.rx;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.api.ApiCategoryBehavior;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.api.graphql.GraphQLResponse;\n+import com.amplifyframework.api.graphql.MutationType;\n+import com.amplifyframework.api.graphql.SubscriptionType;\n+import com.amplifyframework.api.rest.RestOptions;\n+import com.amplifyframework.api.rest.RestResponse;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+\n+import io.reactivex.Observable;\n+import io.reactivex.Single;\n+\n+/**\n+ * An implementation of the RxApi which satisfies the API contract by wrapping\n+ * {@link ApiCategoryBehavior} in Rx primitives.\n+ */\n+final class RxApiBinding implements RxApi {\n+    private final ApiCategoryBehavior api;\n+\n+    RxApiBinding() {\n+        this(Amplify.API);\n+    }\n+\n+    @SuppressWarnings(\"WeakerAccess\")\n+    RxApiBinding(ApiCategoryBehavior api) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMxODM4MA==", "bodyText": "For the category\u2019s APIs. This stuff should work regardless of which plugin is implementing the behaviors.", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382318380", "createdAt": "2020-02-20T23:34:10Z", "author": {"login": "jamesonwilliams"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.rx;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.api.ApiCategoryBehavior;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.api.graphql.GraphQLResponse;\n+import com.amplifyframework.api.graphql.MutationType;\n+import com.amplifyframework.api.graphql.SubscriptionType;\n+import com.amplifyframework.api.rest.RestOptions;\n+import com.amplifyframework.api.rest.RestResponse;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+\n+import io.reactivex.Observable;\n+import io.reactivex.Single;\n+\n+/**\n+ * An implementation of the RxApi which satisfies the API contract by wrapping\n+ * {@link ApiCategoryBehavior} in Rx primitives.\n+ */\n+final class RxApiBinding implements RxApi {\n+    private final ApiCategoryBehavior api;\n+\n+    RxApiBinding() {\n+        this(Amplify.API);\n+    }\n+\n+    @SuppressWarnings(\"WeakerAccess\")\n+    RxApiBinding(ApiCategoryBehavior api) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1ODc1MQ=="}, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjMzNDUwMQ==", "bodyText": "Then I think ApiCategory is a better fit than ApiCategoryBehavior, since RxApiBinding simulates the category, not just a plugin", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382334501", "createdAt": "2020-02-21T00:25:06Z", "author": {"login": "raphkim"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.rx;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.api.ApiCategoryBehavior;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.api.graphql.GraphQLResponse;\n+import com.amplifyframework.api.graphql.MutationType;\n+import com.amplifyframework.api.graphql.SubscriptionType;\n+import com.amplifyframework.api.rest.RestOptions;\n+import com.amplifyframework.api.rest.RestResponse;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+\n+import io.reactivex.Observable;\n+import io.reactivex.Single;\n+\n+/**\n+ * An implementation of the RxApi which satisfies the API contract by wrapping\n+ * {@link ApiCategoryBehavior} in Rx primitives.\n+ */\n+final class RxApiBinding implements RxApi {\n+    private final ApiCategoryBehavior api;\n+\n+    RxApiBinding() {\n+        this(Amplify.API);\n+    }\n+\n+    @SuppressWarnings(\"WeakerAccess\")\n+    RxApiBinding(ApiCategoryBehavior api) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1ODc1MQ=="}, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NTgxOQ==", "bodyText": "Hmm, yes you might be right. I think I agree. Let me give it a try anyway and see if there are any negative side effects to that proposal.", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382375819", "createdAt": "2020-02-21T03:07:38Z", "author": {"login": "jamesonwilliams"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.rx;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.api.ApiCategoryBehavior;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.api.graphql.GraphQLResponse;\n+import com.amplifyframework.api.graphql.MutationType;\n+import com.amplifyframework.api.graphql.SubscriptionType;\n+import com.amplifyframework.api.rest.RestOptions;\n+import com.amplifyframework.api.rest.RestResponse;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+\n+import io.reactivex.Observable;\n+import io.reactivex.Single;\n+\n+/**\n+ * An implementation of the RxApi which satisfies the API contract by wrapping\n+ * {@link ApiCategoryBehavior} in Rx primitives.\n+ */\n+final class RxApiBinding implements RxApi {\n+    private final ApiCategoryBehavior api;\n+\n+    RxApiBinding() {\n+        this(Amplify.API);\n+    }\n+\n+    @SuppressWarnings(\"WeakerAccess\")\n+    RxApiBinding(ApiCategoryBehavior api) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1ODc1MQ=="}, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5Mjk4NQ==", "bodyText": "It worked, I just had to play some small games in the unit tests to deal with the final categories.", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382392985", "createdAt": "2020-02-21T04:34:23Z", "author": {"login": "jamesonwilliams"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "diffHunk": "@@ -0,0 +1,262 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.rx;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.api.ApiCategoryBehavior;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.api.graphql.GraphQLResponse;\n+import com.amplifyframework.api.graphql.MutationType;\n+import com.amplifyframework.api.graphql.SubscriptionType;\n+import com.amplifyframework.api.rest.RestOptions;\n+import com.amplifyframework.api.rest.RestResponse;\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+\n+import io.reactivex.Observable;\n+import io.reactivex.Single;\n+\n+/**\n+ * An implementation of the RxApi which satisfies the API contract by wrapping\n+ * {@link ApiCategoryBehavior} in Rx primitives.\n+ */\n+final class RxApiBinding implements RxApi {\n+    private final ApiCategoryBehavior api;\n+\n+    RxApiBinding() {\n+        this(Amplify.API);\n+    }\n+\n+    @SuppressWarnings(\"WeakerAccess\")\n+    RxApiBinding(ApiCategoryBehavior api) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1ODc1MQ=="}, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQyNzc3OnYy", "diffSide": "RIGHT", "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxDataStore.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTowODoyM1rOFsjPWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDozNDo1M1rOFsra3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1OTAzMw==", "bodyText": "RxDataStoreCategoryBehavior", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382259033", "createdAt": "2020-02-20T21:08:23Z", "author": {"login": "raphkim"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxDataStore.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.rx;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+import com.amplifyframework.datastore.DataStoreCategoryBehavior;\n+import com.amplifyframework.datastore.DataStoreItemChange;\n+\n+import io.reactivex.Completable;\n+import io.reactivex.Observable;\n+\n+/**\n+ * An Rx-idiomatic expression of the behaviors in {@link DataStoreCategoryBehavior}.\n+ */\n+@SuppressWarnings(\"unused\") // These are all public APIs\n+public interface RxDataStore {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NjIyNQ==", "bodyText": "Eh, yea, I think you're probably right.\nWe had talked at one point about dropping the CategoryBehavior from even core. They're descriptive, but when you think about it from a customer standpoint, they have like:\nDataStoreCategoryBehavior ds = Amplify.DataStore;\n\nBut the customer would probably rather just write like:\nDataStore ds = Amplify.DataStore", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382376225", "createdAt": "2020-02-21T03:09:31Z", "author": {"login": "jamesonwilliams"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxDataStore.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.rx;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+import com.amplifyframework.datastore.DataStoreCategoryBehavior;\n+import com.amplifyframework.datastore.DataStoreItemChange;\n+\n+import io.reactivex.Completable;\n+import io.reactivex.Observable;\n+\n+/**\n+ * An Rx-idiomatic expression of the behaviors in {@link DataStoreCategoryBehavior}.\n+ */\n+@SuppressWarnings(\"unused\") // These are all public APIs\n+public interface RxDataStore {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1OTAzMw=="}, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5MzA1NA==", "bodyText": "I went with the + CategoryBehavior versions for now. We can come back and remove them from all places at the same time, maybe.", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382393054", "createdAt": "2020-02-21T04:34:53Z", "author": {"login": "jamesonwilliams"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxDataStore.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.rx;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate;\n+import com.amplifyframework.datastore.DataStoreCategoryBehavior;\n+import com.amplifyframework.datastore.DataStoreItemChange;\n+\n+import io.reactivex.Completable;\n+import io.reactivex.Observable;\n+\n+/**\n+ * An Rx-idiomatic expression of the behaviors in {@link DataStoreCategoryBehavior}.\n+ */\n+@SuppressWarnings(\"unused\") // These are all public APIs\n+public interface RxDataStore {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1OTAzMw=="}, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQzMDk4OnYy", "diffSide": "RIGHT", "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxHub.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTowOTo0MFrOFsjRWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDozNToyM1rOFsrbLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1OTU0Nw==", "bodyText": "RxHubCategoryBehavior", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382259547", "createdAt": "2020-02-20T21:09:40Z", "author": {"login": "raphkim"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxHub.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.rx;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.hub.HubCategoryBehavior;\n+import com.amplifyframework.hub.HubChannel;\n+import com.amplifyframework.hub.HubEvent;\n+import com.amplifyframework.hub.HubException;\n+\n+import io.reactivex.Completable;\n+import io.reactivex.Observable;\n+\n+/**\n+ * An Rx-idiomatic version of Amplify's {@link HubCategoryBehavior}.\n+ */\n+@SuppressWarnings(\"unused\") // These are public APIs\n+public interface RxHub {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5MzEzMw==", "bodyText": "Done", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382393133", "createdAt": "2020-02-21T04:35:23Z", "author": {"login": "jamesonwilliams"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxHub.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.rx;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.hub.HubCategoryBehavior;\n+import com.amplifyframework.hub.HubChannel;\n+import com.amplifyframework.hub.HubEvent;\n+import com.amplifyframework.hub.HubException;\n+\n+import io.reactivex.Completable;\n+import io.reactivex.Observable;\n+\n+/**\n+ * An Rx-idiomatic version of Amplify's {@link HubCategoryBehavior}.\n+ */\n+@SuppressWarnings(\"unused\") // These are public APIs\n+public interface RxHub {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1OTU0Nw=="}, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQzMzI3OnYy", "diffSide": "RIGHT", "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxStorage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMToxMDozNVrOFsjSyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDozNToxNlrOFsrbGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1OTkxMw==", "bodyText": "public interface RxStorageCategoryBehavior {", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382259913", "createdAt": "2020-02-20T21:10:35Z", "author": {"login": "raphkim"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxStorage.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.rx;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.storage.StorageCategoryBehavior;\n+import com.amplifyframework.storage.options.StorageDownloadFileOptions;\n+import com.amplifyframework.storage.options.StorageListOptions;\n+import com.amplifyframework.storage.options.StorageRemoveOptions;\n+import com.amplifyframework.storage.options.StorageUploadFileOptions;\n+import com.amplifyframework.storage.result.StorageDownloadFileResult;\n+import com.amplifyframework.storage.result.StorageListResult;\n+import com.amplifyframework.storage.result.StorageRemoveResult;\n+import com.amplifyframework.storage.result.StorageUploadFileResult;\n+\n+import io.reactivex.Single;\n+\n+/**\n+ * An Rx idiomatic expression of the facilities in Amplify's {@link StorageCategoryBehavior}.\n+ */\n+@SuppressWarnings(\"unused\")\n+public interface RxStorage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5MzExMg==", "bodyText": "Done", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382393112", "createdAt": "2020-02-21T04:35:16Z", "author": {"login": "jamesonwilliams"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxStorage.java", "diffHunk": "@@ -0,0 +1,149 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.rx;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.storage.StorageCategoryBehavior;\n+import com.amplifyframework.storage.options.StorageDownloadFileOptions;\n+import com.amplifyframework.storage.options.StorageListOptions;\n+import com.amplifyframework.storage.options.StorageRemoveOptions;\n+import com.amplifyframework.storage.options.StorageUploadFileOptions;\n+import com.amplifyframework.storage.result.StorageDownloadFileResult;\n+import com.amplifyframework.storage.result.StorageListResult;\n+import com.amplifyframework.storage.result.StorageRemoveResult;\n+import com.amplifyframework.storage.result.StorageUploadFileResult;\n+\n+import io.reactivex.Single;\n+\n+/**\n+ * An Rx idiomatic expression of the facilities in Amplify's {@link StorageCategoryBehavior}.\n+ */\n+@SuppressWarnings(\"unused\")\n+public interface RxStorage {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1OTkxMw=="}, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQ0Mjk1OnYy", "diffSide": "RIGHT", "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxStorageBinding.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMToxNDowMVrOFsjYyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwMzoxMDo0OFrOFsqaOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2MTQ1MQ==", "bodyText": "Is it cancelable in iOS?", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382261451", "createdAt": "2020-02-20T21:14:01Z", "author": {"login": "raphkim"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxStorageBinding.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.rx;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.VisibleForTesting;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.async.NoOpCancelable;\n+import com.amplifyframework.storage.StorageCategoryBehavior;\n+import com.amplifyframework.storage.StorageException;\n+import com.amplifyframework.storage.options.StorageDownloadFileOptions;\n+import com.amplifyframework.storage.options.StorageListOptions;\n+import com.amplifyframework.storage.options.StorageRemoveOptions;\n+import com.amplifyframework.storage.options.StorageUploadFileOptions;\n+import com.amplifyframework.storage.result.StorageDownloadFileResult;\n+import com.amplifyframework.storage.result.StorageListResult;\n+import com.amplifyframework.storage.result.StorageRemoveResult;\n+import com.amplifyframework.storage.result.StorageUploadFileResult;\n+\n+import io.reactivex.Single;\n+\n+final class RxStorageBinding implements RxStorage {\n+    private final StorageCategoryBehavior storage;\n+\n+    RxStorageBinding() {\n+        this(Amplify.Storage);\n+    }\n+\n+    @VisibleForTesting\n+    @SuppressWarnings(\"WeakerAccess\")\n+    RxStorageBinding(StorageCategoryBehavior storage) {\n+        this.storage = storage;\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Single<StorageDownloadFileResult> downloadFile(@NonNull String key, @NonNull String local) {\n+        return toSingle((onResult, onError) -> storage.downloadFile(key, local, onResult, onError));\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Single<StorageDownloadFileResult> downloadFile(\n+            @NonNull String key, @NonNull String local, @NonNull StorageDownloadFileOptions options) {\n+        return toSingle((onResult, onError) -> storage.downloadFile(key, local, options, onResult, onError));\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Single<StorageUploadFileResult> uploadFile(@NonNull String key, @NonNull String local) {\n+        return toSingle((onResult, onError) -> storage.uploadFile(key, local, onResult, onError));\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Single<StorageUploadFileResult> uploadFile(\n+            @NonNull String key, @NonNull String local, @NonNull StorageUploadFileOptions options) {\n+        return toSingle((onResult, onError) -> storage.uploadFile(key, local, options, onResult, onError));\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Single<StorageRemoveResult> remove(@NonNull String key) {\n+        return toSingle((onResult, onError) -> {\n+            storage.remove(key, onResult, onError);\n+            return new NoOpCancelable(); // StorageRemoveOperation (above) is not Cancelable right now!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3NjUwNw==", "bodyText": "Looks like it is, yea: https://github.com/aws-amplify/amplify-ios/blob/master/AmplifyPlugins/Storage/AWSS3StoragePlugin/Operation/AWSS3StorageRemoveOperation.swift#L32", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382376507", "createdAt": "2020-02-21T03:10:48Z", "author": {"login": "jamesonwilliams"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxStorageBinding.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.rx;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.VisibleForTesting;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.async.NoOpCancelable;\n+import com.amplifyframework.storage.StorageCategoryBehavior;\n+import com.amplifyframework.storage.StorageException;\n+import com.amplifyframework.storage.options.StorageDownloadFileOptions;\n+import com.amplifyframework.storage.options.StorageListOptions;\n+import com.amplifyframework.storage.options.StorageRemoveOptions;\n+import com.amplifyframework.storage.options.StorageUploadFileOptions;\n+import com.amplifyframework.storage.result.StorageDownloadFileResult;\n+import com.amplifyframework.storage.result.StorageListResult;\n+import com.amplifyframework.storage.result.StorageRemoveResult;\n+import com.amplifyframework.storage.result.StorageUploadFileResult;\n+\n+import io.reactivex.Single;\n+\n+final class RxStorageBinding implements RxStorage {\n+    private final StorageCategoryBehavior storage;\n+\n+    RxStorageBinding() {\n+        this(Amplify.Storage);\n+    }\n+\n+    @VisibleForTesting\n+    @SuppressWarnings(\"WeakerAccess\")\n+    RxStorageBinding(StorageCategoryBehavior storage) {\n+        this.storage = storage;\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Single<StorageDownloadFileResult> downloadFile(@NonNull String key, @NonNull String local) {\n+        return toSingle((onResult, onError) -> storage.downloadFile(key, local, onResult, onError));\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Single<StorageDownloadFileResult> downloadFile(\n+            @NonNull String key, @NonNull String local, @NonNull StorageDownloadFileOptions options) {\n+        return toSingle((onResult, onError) -> storage.downloadFile(key, local, options, onResult, onError));\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Single<StorageUploadFileResult> uploadFile(@NonNull String key, @NonNull String local) {\n+        return toSingle((onResult, onError) -> storage.uploadFile(key, local, onResult, onError));\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Single<StorageUploadFileResult> uploadFile(\n+            @NonNull String key, @NonNull String local, @NonNull StorageUploadFileOptions options) {\n+        return toSingle((onResult, onError) -> storage.uploadFile(key, local, options, onResult, onError));\n+    }\n+\n+    @NonNull\n+    @Override\n+    public Single<StorageRemoveResult> remove(@NonNull String key) {\n+        return toSingle((onResult, onError) -> {\n+            storage.remove(key, onResult, onError);\n+            return new NoOpCancelable(); // StorageRemoveOperation (above) is not Cancelable right now!", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2MTQ1MQ=="}, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQ1MzY2OnYy", "diffSide": "RIGHT", "path": "rxbindings/src/test/java/com/amplifyframework/rx/RxAdaptersTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMToxODoxOFrOFsjfbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwNDozNTowN1rOFsrbAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2MzE0OA==", "bodyText": "Ugh, we should just use Cancellable and Cancelled everywhere since that's what RX went with when naming Cancellable interface.", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382263148", "createdAt": "2020-02-20T21:18:18Z", "author": {"login": "raphkim"}, "path": "rxbindings/src/test/java/com/amplifyframework/rx/RxAdaptersTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.rx;\n+\n+import com.amplifyframework.core.async.Cancelable;\n+import com.amplifyframework.core.async.NoOpCancelable;\n+import com.amplifyframework.rx.RxAdapters.CancelableResultEmitter;\n+import com.amplifyframework.rx.RxAdapters.CancelableStreamEmitter;\n+import com.amplifyframework.rx.RxAdapters.VoidResultEmitter;\n+import com.amplifyframework.testutils.RandomString;\n+import com.amplifyframework.testutils.SimpleCancelable;\n+\n+import org.junit.Test;\n+\n+import io.reactivex.Completable;\n+import io.reactivex.Observable;\n+import io.reactivex.Single;\n+import io.reactivex.observers.TestObserver;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests the {@link RxAdapters} utility methods.\n+ */\n+public final class RxAdaptersTest {\n+    /**\n+     * The {@link Completable} returned by {@link RxAdapters#toCompletable(VoidResultEmitter)}\n+     * will complete when {@link VoidResultEmitter}'s result consumer is invoked.\n+     */\n+    @Test\n+    public void completableFiresOnCompleteWhenResultEmitted() {\n+        RxAdapters\n+            .toCompletable((onResult, onError) -> onResult.accept(RandomString.string()))\n+            .test()\n+            .assertComplete()\n+            .assertNoErrors();\n+    }\n+\n+    /**\n+     * The {@link Completable} returned by {@link RxAdapters#toCompletable(VoidResultEmitter)}\n+     * will dispatch an error when {@link VoidResultEmitter}'s error consumer is invoked.\n+     */\n+    @Test\n+    public void completableFiresErrorWhenErrorEmitted() {\n+        Throwable expected = new Throwable(RandomString.string());\n+        RxAdapters\n+            .toCompletable((onResult, onError) -> onError.accept(expected))\n+            .test()\n+            .assertError(expected)\n+            .assertNotComplete();\n+    }\n+\n+    /**\n+     * The {@link Completable} returned by {@link RxAdapters#toCompletable(VoidResultEmitter)}\n+     * is cancelable.\n+     */\n+    @SuppressWarnings(\"checkstyle:WhitespaceAround\")\n+    @Test\n+    public void completableIsCancellable() {\n+        Completable completable = RxAdapters.toCompletable(((onResult, onError) -> {}));\n+        TestObserver<?> observer = completable.test();\n+        observer.cancel();\n+        assertTrue(observer.isCancelled());\n+    }\n+\n+    /**\n+     * The {@link Single} returned by {@link RxAdapters#toSingle(CancelableResultEmitter)}\n+     * will dispatch an error when the {@link CancelableResultEmitter}'s error consumer is\n+     * invoked.\n+     */\n+    @Test\n+    public void singleFiresErrorWhenErrorEmitted() {\n+        Throwable expected = new Throwable(RandomString.string());\n+        RxAdapters\n+            .toSingle((onResult, onError) -> {\n+                onError.accept(expected);\n+                return new NoOpCancelable();\n+            })\n+            .test()\n+            .assertError(expected)\n+            .assertNoValues();\n+    }\n+\n+    /**\n+     * The {@link Single} returned by {@link RxAdapters#toSingle(CancelableResultEmitter)}\n+     * will dispatch a result when the {@link CancelableResultEmitter}'s value consumer\n+     * is invoked.\n+     */\n+    @Test\n+    public void singleFiresResultWhenEmitted() {\n+        String result = RandomString.string();\n+        RxAdapters\n+            .toSingle((onResult, onError) -> {\n+                onResult.accept(result);\n+                return new NoOpCancelable();\n+            })\n+            .test()\n+            .assertValue(result)\n+            .assertComplete();\n+    }\n+\n+    /**\n+     * {@link RxAdapters#toSingle(CancelableResultEmitter)} returns a {@link Single} which\n+     * can be canceled. The Amplify {@link Cancelable} returned by that emitter will also show\n+     * as canceled.\n+     */\n+    @Test\n+    public void singleIsCancelable() {\n+        SimpleCancelable cancelable = new SimpleCancelable();\n+        TestObserver<?> observer = RxAdapters.toSingle(((onResult, onError) -> cancelable))\n+            .test();\n+        observer.cancel();\n+        assertTrue(observer.isCancelled());\n+        assertTrue(cancelable.isCanceled());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM3ODIzNw==", "bodyText": "Yea, I agree. American English is the only dialect of English that prefers the spelling Cancelable. But, I think I researched this one day and determined that it was a non-American who added Cancellable into Java. So, I guess they win by virtue of getting their first!", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382378237", "createdAt": "2020-02-21T03:18:46Z", "author": {"login": "jamesonwilliams"}, "path": "rxbindings/src/test/java/com/amplifyframework/rx/RxAdaptersTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.rx;\n+\n+import com.amplifyframework.core.async.Cancelable;\n+import com.amplifyframework.core.async.NoOpCancelable;\n+import com.amplifyframework.rx.RxAdapters.CancelableResultEmitter;\n+import com.amplifyframework.rx.RxAdapters.CancelableStreamEmitter;\n+import com.amplifyframework.rx.RxAdapters.VoidResultEmitter;\n+import com.amplifyframework.testutils.RandomString;\n+import com.amplifyframework.testutils.SimpleCancelable;\n+\n+import org.junit.Test;\n+\n+import io.reactivex.Completable;\n+import io.reactivex.Observable;\n+import io.reactivex.Single;\n+import io.reactivex.observers.TestObserver;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests the {@link RxAdapters} utility methods.\n+ */\n+public final class RxAdaptersTest {\n+    /**\n+     * The {@link Completable} returned by {@link RxAdapters#toCompletable(VoidResultEmitter)}\n+     * will complete when {@link VoidResultEmitter}'s result consumer is invoked.\n+     */\n+    @Test\n+    public void completableFiresOnCompleteWhenResultEmitted() {\n+        RxAdapters\n+            .toCompletable((onResult, onError) -> onResult.accept(RandomString.string()))\n+            .test()\n+            .assertComplete()\n+            .assertNoErrors();\n+    }\n+\n+    /**\n+     * The {@link Completable} returned by {@link RxAdapters#toCompletable(VoidResultEmitter)}\n+     * will dispatch an error when {@link VoidResultEmitter}'s error consumer is invoked.\n+     */\n+    @Test\n+    public void completableFiresErrorWhenErrorEmitted() {\n+        Throwable expected = new Throwable(RandomString.string());\n+        RxAdapters\n+            .toCompletable((onResult, onError) -> onError.accept(expected))\n+            .test()\n+            .assertError(expected)\n+            .assertNotComplete();\n+    }\n+\n+    /**\n+     * The {@link Completable} returned by {@link RxAdapters#toCompletable(VoidResultEmitter)}\n+     * is cancelable.\n+     */\n+    @SuppressWarnings(\"checkstyle:WhitespaceAround\")\n+    @Test\n+    public void completableIsCancellable() {\n+        Completable completable = RxAdapters.toCompletable(((onResult, onError) -> {}));\n+        TestObserver<?> observer = completable.test();\n+        observer.cancel();\n+        assertTrue(observer.isCancelled());\n+    }\n+\n+    /**\n+     * The {@link Single} returned by {@link RxAdapters#toSingle(CancelableResultEmitter)}\n+     * will dispatch an error when the {@link CancelableResultEmitter}'s error consumer is\n+     * invoked.\n+     */\n+    @Test\n+    public void singleFiresErrorWhenErrorEmitted() {\n+        Throwable expected = new Throwable(RandomString.string());\n+        RxAdapters\n+            .toSingle((onResult, onError) -> {\n+                onError.accept(expected);\n+                return new NoOpCancelable();\n+            })\n+            .test()\n+            .assertError(expected)\n+            .assertNoValues();\n+    }\n+\n+    /**\n+     * The {@link Single} returned by {@link RxAdapters#toSingle(CancelableResultEmitter)}\n+     * will dispatch a result when the {@link CancelableResultEmitter}'s value consumer\n+     * is invoked.\n+     */\n+    @Test\n+    public void singleFiresResultWhenEmitted() {\n+        String result = RandomString.string();\n+        RxAdapters\n+            .toSingle((onResult, onError) -> {\n+                onResult.accept(result);\n+                return new NoOpCancelable();\n+            })\n+            .test()\n+            .assertValue(result)\n+            .assertComplete();\n+    }\n+\n+    /**\n+     * {@link RxAdapters#toSingle(CancelableResultEmitter)} returns a {@link Single} which\n+     * can be canceled. The Amplify {@link Cancelable} returned by that emitter will also show\n+     * as canceled.\n+     */\n+    @Test\n+    public void singleIsCancelable() {\n+        SimpleCancelable cancelable = new SimpleCancelable();\n+        TestObserver<?> observer = RxAdapters.toSingle(((onResult, onError) -> cancelable))\n+            .test();\n+        observer.cancel();\n+        assertTrue(observer.isCancelled());\n+        assertTrue(cancelable.isCanceled());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2MzE0OA=="}, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjM5MzA5MA==", "bodyText": "For another PR...", "url": "https://github.com/aws-amplify/amplify-android/pull/268#discussion_r382393090", "createdAt": "2020-02-21T04:35:07Z", "author": {"login": "jamesonwilliams"}, "path": "rxbindings/src/test/java/com/amplifyframework/rx/RxAdaptersTest.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.rx;\n+\n+import com.amplifyframework.core.async.Cancelable;\n+import com.amplifyframework.core.async.NoOpCancelable;\n+import com.amplifyframework.rx.RxAdapters.CancelableResultEmitter;\n+import com.amplifyframework.rx.RxAdapters.CancelableStreamEmitter;\n+import com.amplifyframework.rx.RxAdapters.VoidResultEmitter;\n+import com.amplifyframework.testutils.RandomString;\n+import com.amplifyframework.testutils.SimpleCancelable;\n+\n+import org.junit.Test;\n+\n+import io.reactivex.Completable;\n+import io.reactivex.Observable;\n+import io.reactivex.Single;\n+import io.reactivex.observers.TestObserver;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests the {@link RxAdapters} utility methods.\n+ */\n+public final class RxAdaptersTest {\n+    /**\n+     * The {@link Completable} returned by {@link RxAdapters#toCompletable(VoidResultEmitter)}\n+     * will complete when {@link VoidResultEmitter}'s result consumer is invoked.\n+     */\n+    @Test\n+    public void completableFiresOnCompleteWhenResultEmitted() {\n+        RxAdapters\n+            .toCompletable((onResult, onError) -> onResult.accept(RandomString.string()))\n+            .test()\n+            .assertComplete()\n+            .assertNoErrors();\n+    }\n+\n+    /**\n+     * The {@link Completable} returned by {@link RxAdapters#toCompletable(VoidResultEmitter)}\n+     * will dispatch an error when {@link VoidResultEmitter}'s error consumer is invoked.\n+     */\n+    @Test\n+    public void completableFiresErrorWhenErrorEmitted() {\n+        Throwable expected = new Throwable(RandomString.string());\n+        RxAdapters\n+            .toCompletable((onResult, onError) -> onError.accept(expected))\n+            .test()\n+            .assertError(expected)\n+            .assertNotComplete();\n+    }\n+\n+    /**\n+     * The {@link Completable} returned by {@link RxAdapters#toCompletable(VoidResultEmitter)}\n+     * is cancelable.\n+     */\n+    @SuppressWarnings(\"checkstyle:WhitespaceAround\")\n+    @Test\n+    public void completableIsCancellable() {\n+        Completable completable = RxAdapters.toCompletable(((onResult, onError) -> {}));\n+        TestObserver<?> observer = completable.test();\n+        observer.cancel();\n+        assertTrue(observer.isCancelled());\n+    }\n+\n+    /**\n+     * The {@link Single} returned by {@link RxAdapters#toSingle(CancelableResultEmitter)}\n+     * will dispatch an error when the {@link CancelableResultEmitter}'s error consumer is\n+     * invoked.\n+     */\n+    @Test\n+    public void singleFiresErrorWhenErrorEmitted() {\n+        Throwable expected = new Throwable(RandomString.string());\n+        RxAdapters\n+            .toSingle((onResult, onError) -> {\n+                onError.accept(expected);\n+                return new NoOpCancelable();\n+            })\n+            .test()\n+            .assertError(expected)\n+            .assertNoValues();\n+    }\n+\n+    /**\n+     * The {@link Single} returned by {@link RxAdapters#toSingle(CancelableResultEmitter)}\n+     * will dispatch a result when the {@link CancelableResultEmitter}'s value consumer\n+     * is invoked.\n+     */\n+    @Test\n+    public void singleFiresResultWhenEmitted() {\n+        String result = RandomString.string();\n+        RxAdapters\n+            .toSingle((onResult, onError) -> {\n+                onResult.accept(result);\n+                return new NoOpCancelable();\n+            })\n+            .test()\n+            .assertValue(result)\n+            .assertComplete();\n+    }\n+\n+    /**\n+     * {@link RxAdapters#toSingle(CancelableResultEmitter)} returns a {@link Single} which\n+     * can be canceled. The Amplify {@link Cancelable} returned by that emitter will also show\n+     * as canceled.\n+     */\n+    @Test\n+    public void singleIsCancelable() {\n+        SimpleCancelable cancelable = new SimpleCancelable();\n+        TestObserver<?> observer = RxAdapters.toSingle(((onResult, onError) -> cancelable))\n+            .test();\n+        observer.cancel();\n+        assertTrue(observer.isCancelled());\n+        assertTrue(cancelable.isCanceled());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI2MzE0OA=="}, "originalCommit": {"oid": "89bab29cc9b8fd66db1a819dd7cd1fb5dd0951a3"}, "originalPosition": 127}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1543, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}