{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMTA3OTM4", "number": 502, "title": "Subscription authorizer for API", "bodyText": "Issue #, if available:\nDescription of changes:\nCurrently not working\nIdeally, SubscriptionWithAwsIamTest (identical to GraphQLInstrumentationTest except for the API being used) should pass, but it does not.\nWORKS NOW\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-05-21T02:06:38Z", "url": "https://github.com/aws-amplify/amplify-android/pull/502", "merged": true, "mergeCommit": {"oid": "097d3451f0393a5dfb33f7bb36bf8af86352d8f5"}, "closed": true, "closedAt": "2020-05-22T18:25:54Z", "author": {"login": "raphkim"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjL3kagH2gAyNDIxMTA3OTM4OmVhZGFlZmZjMjk4ODIwMjNmOThkYWQ3MDg0NDM5MDdmODY4MDkyYmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcj2hs7gFqTQxNzEwNzA3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "eadaeffc29882023f98dad708443907f868092bb", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/eadaeffc29882023f98dad708443907f868092bb", "committedDate": "2020-05-20T16:43:05Z", "message": "Add subscription authorizer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa0f4961c253b3bab76a9c65f32d7d27dcd484b7", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/fa0f4961c253b3bab76a9c65f32d7d27dcd484b7", "committedDate": "2020-05-21T01:46:31Z", "message": "Minor fixup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41ab19b3069c5696bb6cc0819bcfcdccc46feaa6", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/41ab19b3069c5696bb6cc0819bcfcdccc46feaa6", "committedDate": "2020-05-21T01:58:51Z", "message": "GraphQL test copied for subscription"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2feba6d7daff15d777e0073c226a90ad763ad892", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/2feba6d7daff15d777e0073c226a90ad763ad892", "committedDate": "2020-05-21T20:49:35Z", "message": "Fix attached request content"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2NTc2OTEw", "url": "https://github.com/aws-amplify/amplify-android/pull/502#pullrequestreview-416576910", "createdAt": "2020-05-22T00:29:35Z", "commit": {"oid": "41ab19b3069c5696bb6cc0819bcfcdccc46feaa6"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMDoyOTozNVrOGZHFfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMDo0NDowNVrOGZHTWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4MzY3OQ==", "bodyText": "Ah heck. I was gonna say, \"remember to add this to the hashCode()/equals()/toString()!\" But it looks like we don't even have those in this class. Which, given how prominent it is in the API signatures, is bad news.", "url": "https://github.com/aws-amplify/amplify-android/pull/502#discussion_r428983679", "createdAt": "2020-05-22T00:29:35Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/api/graphql/GraphQLRequest.java", "diffHunk": "@@ -69,6 +71,22 @@ public GraphQLRequest(\n         this.variablesSerializer = variablesSerializer;\n     }\n \n+    /**\n+     * Returns the query document string.\n+     * @return the query document string\n+     */\n+    public String getDocument() {\n+        return document;\n+    }\n+\n+    /**\n+     * Returns the immutable map of request variables.\n+     * @return the map of variables\n+     */\n+    public Map<String, Object> getVariables() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ab19b3069c5696bb6cc0819bcfcdccc46feaa6"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4NTAzOA==", "bodyText": "I've never liked this ApiAuthProviders thing, it has poor encapsulation, and muddles together several different technologies without a consistent behavioral contract.", "url": "https://github.com/aws-amplify/amplify-android/pull/502#discussion_r428985038", "createdAt": "2020-05-22T00:35:08Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/test/java/com/amplifyframework/api/aws/SubscriptionAuthorizerTest.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws;\n+\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.testutils.random.RandomString;\n+\n+import com.amazonaws.auth.AWSCredentials;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.auth.BasicAWSCredentials;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+/**\n+ * Test that Subscription authorizer can correctly generate appropriate\n+ * headers for different types of authentication methods.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class SubscriptionAuthorizerTest {\n+    private String authenticationSecret;\n+    private ApiAuthProviders apiAuthProviders;\n+\n+    /**\n+     * Construct fake auth providers to override default behaviors for\n+     * subscription authorizer.\n+     */\n+    @Before\n+    public void setup() {\n+        authenticationSecret = RandomString.string();\n+        apiAuthProviders = ApiAuthProviders.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ab19b3069c5696bb6cc0819bcfcdccc46feaa6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4NjA4NQ==", "bodyText": "Use the REPORT_TO_AWS-or-whatever one that @drochetti added", "url": "https://github.com/aws-amplify/amplify-android/pull/502#discussion_r428986085", "createdAt": "2020-05-22T00:39:29Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionAuthorizer.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws;\n+\n+import android.net.Uri;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.sigv4.ApiKeyAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.AppSyncV4Signer;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.DefaultCognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.OidcAuthProvider;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+\n+import com.amazonaws.DefaultRequest;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.http.HttpMethodName;\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayInputStream;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Map;\n+\n+final class SubscriptionAuthorizer {\n+    private final ApiConfiguration configuration;\n+    private final ApiAuthProviders authProviders;\n+\n+    SubscriptionAuthorizer(ApiConfiguration configuration) {\n+        this(configuration, ApiAuthProviders.noProviderOverrides());\n+    }\n+\n+    SubscriptionAuthorizer(ApiConfiguration configuration, ApiAuthProviders authProviders) {\n+        this.configuration = configuration;\n+        this.authProviders = authProviders;\n+    }\n+\n+    /**\n+     * Return authorization json to be used explicitly for subscription registration.\n+     */\n+    JSONObject createHeadersForSubscription(GraphQLRequest<?> request) throws ApiException {\n+        return createHeaders(request, false);\n+    }\n+\n+    /**\n+     * Return authorization json to be used explicitly for establishing connection.\n+     */\n+    JSONObject createHeadersForConnection() throws ApiException {\n+        return createHeaders(null, true);\n+    }\n+\n+    private JSONObject createHeaders(GraphQLRequest<?> request, boolean connectionFlag) throws ApiException {\n+        switch (configuration.getAuthorizationType()) {\n+            case API_KEY:\n+                ApiKeyAuthProvider keyProvider = authProviders.getApiKeyAuthProvider();\n+                if (keyProvider == null) {\n+                    keyProvider = configuration::getApiKey;\n+                }\n+                return forApiKey(keyProvider);\n+            case AWS_IAM:\n+                AWSCredentialsProvider credentialsProvider = authProviders.getAWSCredentialsProvider();\n+                if (credentialsProvider == null) {\n+                    credentialsProvider = AWSMobileClient.getInstance();\n+                }\n+                return forIam(credentialsProvider, request, connectionFlag);\n+            case AMAZON_COGNITO_USER_POOLS:\n+                CognitoUserPoolsAuthProvider cognitoProvider = authProviders.getCognitoUserPoolsAuthProvider();\n+                if (cognitoProvider == null) {\n+                    cognitoProvider = new DefaultCognitoUserPoolsAuthProvider();\n+                }\n+                return forCognitoUserPools(cognitoProvider);\n+            case OPENID_CONNECT:\n+                OidcAuthProvider oidcProvider = authProviders.getOidcAuthProvider();\n+                if (oidcProvider == null) {\n+                    oidcProvider = () -> {\n+                        throw new ApiException(\n+                                \"OidcAuthProvider interface is not implemented.\",\n+                                AmplifyException.TODO_RECOVERY_SUGGESTION\n+                        );\n+                    };\n+                }\n+                return forOidc(oidcProvider);\n+            case NONE:\n+            default:\n+                return new JSONObject();\n+        }\n+    }\n+\n+    private JSONObject forApiKey(ApiKeyAuthProvider keyProvider) throws ApiException {\n+        final String apiKey = keyProvider.getAPIKey();\n+        try {\n+            return new JSONObject()\n+                    .put(\"host\", getHost())\n+                    .put(\"x-amz-date\", Iso8601Timestamp.now())\n+                    .put(\"x-api-key\", apiKey);\n+        } catch (JSONException jsonException) {\n+            throw new ApiException(\n+                    \"Error constructing the authorization json for Api key. \",\n+                    jsonException, AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+    }\n+\n+    private JSONObject forCognitoUserPools(CognitoUserPoolsAuthProvider cognitoProvider) throws ApiException {\n+        try {\n+            return new JSONObject()\n+                    .put(\"host\", getHost())\n+                    .put(\"Authorization\", cognitoProvider.getLatestAuthToken());\n+        } catch (JSONException jsonException) {\n+            throw new ApiException(\n+                    \"Error constructing the authorization json for Cognito User Pools.\",\n+                    jsonException, AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+    }\n+\n+    private JSONObject forOidc(OidcAuthProvider oidcProvider) throws ApiException {\n+        try {\n+            return new JSONObject()\n+                    .put(\"host\", getHost())\n+                    .put(\"Authorization\", oidcProvider.getLatestAuthToken());\n+        } catch (JSONException jsonException) {\n+            throw new ApiException(\n+                    \"Error constructing the authorization json for Open ID Connect.\",\n+                    jsonException, AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+    }\n+\n+    private JSONObject forIam(\n+            AWSCredentialsProvider credentialsProvider,\n+            GraphQLRequest<?> request,\n+            boolean connectionFlag\n+    ) throws ApiException {\n+        final URI apiUrl = getRequestEndpoint(connectionFlag);\n+        final String apiRegion = apiUrl.getAuthority().split(\"\\\\.\")[2];\n+        final String requestContent = getRequestContent(request, connectionFlag);\n+\n+        // Construct a request to be signed\n+        DefaultRequest<?> canonicalRequest = new DefaultRequest<>(\"appsync\");\n+        canonicalRequest.addHeader(\"accept\", \"application/json, text/javascript\");\n+        canonicalRequest.addHeader(\"content-encoding\", \"amz-1.0\");\n+        canonicalRequest.addHeader(\"content-type\", \"application/json; charset=UTF-8\");\n+        canonicalRequest.setHttpMethod(HttpMethodName.valueOf(\"POST\"));\n+        canonicalRequest.setEndpoint(apiUrl);\n+        canonicalRequest.setContent(new ByteArrayInputStream(requestContent.getBytes()));\n+\n+        // Sign with AppSync's SigV4 signer that also considers connection resource path\n+        new AppSyncV4Signer(apiRegion, connectionFlag).sign(\n+                canonicalRequest,\n+                credentialsProvider.getCredentials()\n+        );\n+\n+        // Extract header from signed request and return\n+        Map<String, String> signedHeaders = canonicalRequest.getHeaders();\n+        JSONObject authorization = new JSONObject();\n+        try {\n+            for (Map.Entry<String, String> headerEntry : signedHeaders.entrySet()) {\n+                authorization.put(headerEntry.getKey(), headerEntry.getValue());\n+            }\n+        } catch (JSONException jsonException) {\n+            throw new ApiException(\n+                    \"Error constructing the authorization json for AWS IAM.\",\n+                    jsonException, AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+        return authorization;\n+    }\n+\n+    private String getHost() {\n+        return Uri.parse(configuration.getEndpoint()).getHost();\n+    }\n+\n+    private URI getRequestEndpoint(boolean connectionFlag) throws ApiException {\n+        try {\n+            String baseUrl = configuration.getEndpoint();\n+            String connectionUrl = connectionFlag ? baseUrl + \"/connect\" : baseUrl;\n+            return new URI(connectionUrl);\n+        } catch (URISyntaxException uriException) {\n+            throw new ApiException(\n+                    \"Error constructing canonical URI for IAM request signature\",\n+                    uriException, AmplifyException.TODO_RECOVERY_SUGGESTION", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ab19b3069c5696bb6cc0819bcfcdccc46feaa6"}, "originalPosition": 198}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4NjIzNg==", "bodyText": "Just, authorization.putAll(signedHeaders()))?", "url": "https://github.com/aws-amplify/amplify-android/pull/502#discussion_r428986236", "createdAt": "2020-05-22T00:40:04Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/SubscriptionAuthorizer.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws;\n+\n+import android.net.Uri;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.sigv4.ApiKeyAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.AppSyncV4Signer;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.DefaultCognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.OidcAuthProvider;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+\n+import com.amazonaws.DefaultRequest;\n+import com.amazonaws.auth.AWSCredentialsProvider;\n+import com.amazonaws.http.HttpMethodName;\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.io.ByteArrayInputStream;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Map;\n+\n+final class SubscriptionAuthorizer {\n+    private final ApiConfiguration configuration;\n+    private final ApiAuthProviders authProviders;\n+\n+    SubscriptionAuthorizer(ApiConfiguration configuration) {\n+        this(configuration, ApiAuthProviders.noProviderOverrides());\n+    }\n+\n+    SubscriptionAuthorizer(ApiConfiguration configuration, ApiAuthProviders authProviders) {\n+        this.configuration = configuration;\n+        this.authProviders = authProviders;\n+    }\n+\n+    /**\n+     * Return authorization json to be used explicitly for subscription registration.\n+     */\n+    JSONObject createHeadersForSubscription(GraphQLRequest<?> request) throws ApiException {\n+        return createHeaders(request, false);\n+    }\n+\n+    /**\n+     * Return authorization json to be used explicitly for establishing connection.\n+     */\n+    JSONObject createHeadersForConnection() throws ApiException {\n+        return createHeaders(null, true);\n+    }\n+\n+    private JSONObject createHeaders(GraphQLRequest<?> request, boolean connectionFlag) throws ApiException {\n+        switch (configuration.getAuthorizationType()) {\n+            case API_KEY:\n+                ApiKeyAuthProvider keyProvider = authProviders.getApiKeyAuthProvider();\n+                if (keyProvider == null) {\n+                    keyProvider = configuration::getApiKey;\n+                }\n+                return forApiKey(keyProvider);\n+            case AWS_IAM:\n+                AWSCredentialsProvider credentialsProvider = authProviders.getAWSCredentialsProvider();\n+                if (credentialsProvider == null) {\n+                    credentialsProvider = AWSMobileClient.getInstance();\n+                }\n+                return forIam(credentialsProvider, request, connectionFlag);\n+            case AMAZON_COGNITO_USER_POOLS:\n+                CognitoUserPoolsAuthProvider cognitoProvider = authProviders.getCognitoUserPoolsAuthProvider();\n+                if (cognitoProvider == null) {\n+                    cognitoProvider = new DefaultCognitoUserPoolsAuthProvider();\n+                }\n+                return forCognitoUserPools(cognitoProvider);\n+            case OPENID_CONNECT:\n+                OidcAuthProvider oidcProvider = authProviders.getOidcAuthProvider();\n+                if (oidcProvider == null) {\n+                    oidcProvider = () -> {\n+                        throw new ApiException(\n+                                \"OidcAuthProvider interface is not implemented.\",\n+                                AmplifyException.TODO_RECOVERY_SUGGESTION\n+                        );\n+                    };\n+                }\n+                return forOidc(oidcProvider);\n+            case NONE:\n+            default:\n+                return new JSONObject();\n+        }\n+    }\n+\n+    private JSONObject forApiKey(ApiKeyAuthProvider keyProvider) throws ApiException {\n+        final String apiKey = keyProvider.getAPIKey();\n+        try {\n+            return new JSONObject()\n+                    .put(\"host\", getHost())\n+                    .put(\"x-amz-date\", Iso8601Timestamp.now())\n+                    .put(\"x-api-key\", apiKey);\n+        } catch (JSONException jsonException) {\n+            throw new ApiException(\n+                    \"Error constructing the authorization json for Api key. \",\n+                    jsonException, AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+    }\n+\n+    private JSONObject forCognitoUserPools(CognitoUserPoolsAuthProvider cognitoProvider) throws ApiException {\n+        try {\n+            return new JSONObject()\n+                    .put(\"host\", getHost())\n+                    .put(\"Authorization\", cognitoProvider.getLatestAuthToken());\n+        } catch (JSONException jsonException) {\n+            throw new ApiException(\n+                    \"Error constructing the authorization json for Cognito User Pools.\",\n+                    jsonException, AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+    }\n+\n+    private JSONObject forOidc(OidcAuthProvider oidcProvider) throws ApiException {\n+        try {\n+            return new JSONObject()\n+                    .put(\"host\", getHost())\n+                    .put(\"Authorization\", oidcProvider.getLatestAuthToken());\n+        } catch (JSONException jsonException) {\n+            throw new ApiException(\n+                    \"Error constructing the authorization json for Open ID Connect.\",\n+                    jsonException, AmplifyException.TODO_RECOVERY_SUGGESTION\n+            );\n+        }\n+    }\n+\n+    private JSONObject forIam(\n+            AWSCredentialsProvider credentialsProvider,\n+            GraphQLRequest<?> request,\n+            boolean connectionFlag\n+    ) throws ApiException {\n+        final URI apiUrl = getRequestEndpoint(connectionFlag);\n+        final String apiRegion = apiUrl.getAuthority().split(\"\\\\.\")[2];\n+        final String requestContent = getRequestContent(request, connectionFlag);\n+\n+        // Construct a request to be signed\n+        DefaultRequest<?> canonicalRequest = new DefaultRequest<>(\"appsync\");\n+        canonicalRequest.addHeader(\"accept\", \"application/json, text/javascript\");\n+        canonicalRequest.addHeader(\"content-encoding\", \"amz-1.0\");\n+        canonicalRequest.addHeader(\"content-type\", \"application/json; charset=UTF-8\");\n+        canonicalRequest.setHttpMethod(HttpMethodName.valueOf(\"POST\"));\n+        canonicalRequest.setEndpoint(apiUrl);\n+        canonicalRequest.setContent(new ByteArrayInputStream(requestContent.getBytes()));\n+\n+        // Sign with AppSync's SigV4 signer that also considers connection resource path\n+        new AppSyncV4Signer(apiRegion, connectionFlag).sign(\n+                canonicalRequest,\n+                credentialsProvider.getCredentials()\n+        );\n+\n+        // Extract header from signed request and return\n+        Map<String, String> signedHeaders = canonicalRequest.getHeaders();\n+        JSONObject authorization = new JSONObject();\n+        try {\n+            for (Map.Entry<String, String> headerEntry : signedHeaders.entrySet()) {\n+                authorization.put(headerEntry.getKey(), headerEntry.getValue());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ab19b3069c5696bb6cc0819bcfcdccc46feaa6"}, "originalPosition": 176}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4NzIyNA==", "bodyText": "How can you move this to src/test?", "url": "https://github.com/aws-amplify/amplify-android/pull/502#discussion_r428987224", "createdAt": "2020-05-22T00:44:05Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/androidTest/java/com/amplifyframework/api/aws/SubscriptionWithAwsIamTest.java", "diffHunk": "@@ -0,0 +1,232 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41ab19b3069c5696bb6cc0819bcfcdccc46feaa6"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14367a98c86c121dc905f3159e1ed5a5f67d7907", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/14367a98c86c121dc905f3159e1ed5a5f67d7907", "committedDate": "2020-05-22T07:58:12Z", "message": "Fix data being attached to request"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7b244ad0e95dc5079e43731167f87c6e888d696", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/e7b244ad0e95dc5079e43731167f87c6e888d696", "committedDate": "2020-05-22T14:16:17Z", "message": "Merge branch 'master' of https://github.com/aws-amplify/amplify-android into subscription-auth"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "070813ac44780bd8a745e602dc646842535c8f8a", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/070813ac44780bd8a745e602dc646842535c8f8a", "committedDate": "2020-05-22T14:26:30Z", "message": "Apply PR suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35c8dfd739acccb917962962cdc5bd5f518fe459", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/35c8dfd739acccb917962962cdc5bd5f518fe459", "committedDate": "2020-05-22T15:59:16Z", "message": "Add integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc0459977928e4bc907abd3c1ea62df466104e58", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/cc0459977928e4bc907abd3c1ea62df466104e58", "committedDate": "2020-05-22T18:14:52Z", "message": "Integrate Amplify Auth"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MTA3MDc2", "url": "https://github.com/aws-amplify/amplify-android/pull/502#pullrequestreview-417107076", "createdAt": "2020-05-22T18:25:07Z", "commit": {"oid": "cc0459977928e4bc907abd3c1ea62df466104e58"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2536, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}