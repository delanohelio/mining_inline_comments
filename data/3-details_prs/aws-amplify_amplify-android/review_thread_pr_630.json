{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1Njg5OTM4", "number": 630, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMToyMzo1NFrOEMP25Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMTozMDozOVrOEMP_AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjc4MTgxOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/amplifyframework/core/ShakeDetectorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMToyMzo1NFrOGuQH5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMToyMzo1NFrOGuQH5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1MTg0Nw==", "bodyText": "Thanks for writing milliseconds in the comment. Even so, I'd bake the unit into the variable name. Ambiguity of time and data storage size units are common, but easily avoidable. e.g. SENSOR_DATA_POLLING_INTERVAL_MS?", "url": "https://github.com/aws-amplify/amplify-android/pull/630#discussion_r451151847", "createdAt": "2020-07-07T21:23:54Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/test/java/com/amplifyframework/core/ShakeDetectorTest.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.core;\n+\n+import android.content.Context;\n+import android.hardware.Sensor;\n+import android.hardware.SensorEvent;\n+import android.hardware.SensorEventListener;\n+import android.hardware.SensorManager;\n+\n+import com.amplifyframework.testutils.Resources;\n+import com.amplifyframework.testutils.Sleep;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.Completable;\n+import io.reactivex.schedulers.Schedulers;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Tests the {@link ShakeDetector} behavior.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class ShakeDetectorTest {\n+    // Amount of time in milliseconds between sending sensor\n+    // events to the sensor listener.\n+    private static final int SENSOR_DATA_DELAY = 65;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba110f5ac1e338a6870eca7357f02c8434180657"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjc4NDU5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/amplifyframework/core/ShakeDetectorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMToyNDo0N1rOGuQJig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMToyNDo0N1rOGuQJig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1MjI2Ng==", "bodyText": "Naming: SHAKE_RESULT_TIMEOUT_SECS?", "url": "https://github.com/aws-amplify/amplify-android/pull/630#discussion_r451152266", "createdAt": "2020-07-07T21:24:47Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/test/java/com/amplifyframework/core/ShakeDetectorTest.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.core;\n+\n+import android.content.Context;\n+import android.hardware.Sensor;\n+import android.hardware.SensorEvent;\n+import android.hardware.SensorEventListener;\n+import android.hardware.SensorManager;\n+\n+import com.amplifyframework.testutils.Resources;\n+import com.amplifyframework.testutils.Sleep;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.Completable;\n+import io.reactivex.schedulers.Schedulers;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Tests the {@link ShakeDetector} behavior.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class ShakeDetectorTest {\n+    // Amount of time in milliseconds between sending sensor\n+    // events to the sensor listener.\n+    private static final int SENSOR_DATA_DELAY = 65;\n+    // Maximum amount of time in seconds before a test times out if the callback\n+    // method has not been called.\n+    private static final int TIMEOUT = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba110f5ac1e338a6870eca7357f02c8434180657"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjc5NDU2OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/amplifyframework/core/ShakeDetectorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMToyODowMVrOGuQPow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMToyODowMVrOGuQPow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1MzgyNw==", "bodyText": "I deliberated on whether or not you could use a ParameterizedRobolectricTestRunner for the test runner. Then, you could run the same test boy against different .csv. However, it is probably overkill. It is an interesting tool to be aware of, though. I've never actually used that one. Only Parameterized in backend development, and RobolectricTestRunner in front-end development; never the combo!", "url": "https://github.com/aws-amplify/amplify-android/pull/630#discussion_r451153827", "createdAt": "2020-07-07T21:28:01Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/test/java/com/amplifyframework/core/ShakeDetectorTest.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.core;\n+\n+import android.content.Context;\n+import android.hardware.Sensor;\n+import android.hardware.SensorEvent;\n+import android.hardware.SensorEventListener;\n+import android.hardware.SensorManager;\n+\n+import com.amplifyframework.testutils.Resources;\n+import com.amplifyframework.testutils.Sleep;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.Completable;\n+import io.reactivex.schedulers.Schedulers;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Tests the {@link ShakeDetector} behavior.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class ShakeDetectorTest {\n+    // Amount of time in milliseconds between sending sensor\n+    // events to the sensor listener.\n+    private static final int SENSOR_DATA_DELAY = 65;\n+    // Maximum amount of time in seconds before a test times out if the callback\n+    // method has not been called.\n+    private static final int TIMEOUT = 5;\n+\n+    /**\n+     * Test that the callback method is called when a shake\n+     * event is triggered.\n+     */\n+    @Test\n+    public void shakeTriggersCallback() {\n+        simulateSensorEvent(\"shake-accel-values.csv\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba110f5ac1e338a6870eca7357f02c8434180657"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjgwMjU3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/amplifyframework/core/ShakeDetectorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMTozMDozOVrOGuQUng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QyMTozMDozOVrOGuQUng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTE1NTEwMg==", "bodyText": "Maybe throw new RuntimeException(relfectionFailure)? (change name of e)", "url": "https://github.com/aws-amplify/amplify-android/pull/630#discussion_r451155102", "createdAt": "2020-07-07T21:30:39Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/test/java/com/amplifyframework/core/ShakeDetectorTest.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.core;\n+\n+import android.content.Context;\n+import android.hardware.Sensor;\n+import android.hardware.SensorEvent;\n+import android.hardware.SensorEventListener;\n+import android.hardware.SensorManager;\n+\n+import com.amplifyframework.testutils.Resources;\n+import com.amplifyframework.testutils.Sleep;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import io.reactivex.Completable;\n+import io.reactivex.schedulers.Schedulers;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Tests the {@link ShakeDetector} behavior.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public class ShakeDetectorTest {\n+    // Amount of time in milliseconds between sending sensor\n+    // events to the sensor listener.\n+    private static final int SENSOR_DATA_DELAY = 65;\n+    // Maximum amount of time in seconds before a test times out if the callback\n+    // method has not been called.\n+    private static final int TIMEOUT = 5;\n+\n+    /**\n+     * Test that the callback method is called when a shake\n+     * event is triggered.\n+     */\n+    @Test\n+    public void shakeTriggersCallback() {\n+        simulateSensorEvent(\"shake-accel-values.csv\");\n+    }\n+\n+    /**\n+     * Test that the callback method is not called when\n+     * no shake is detected.\n+     */\n+    @Test(expected = RuntimeException.class)\n+    public void noShakeDetected() {\n+        simulateSensorEvent(\"no-shake-accel-values.csv\");\n+    }\n+\n+    /**\n+     * Test that the callback method is not called\n+     * when the sensor listener has not been registered.\n+     */\n+    @Test(expected = RuntimeException.class)\n+    public void beforeSensorListenerRegistered() {\n+        Completable.create(emitter -> {\n+            ShakeDetector sd = new ShakeDetector(mock(Context.class), emitter::onComplete);\n+        }).observeOn(Schedulers.io())\n+                .subscribeOn(Schedulers.io())\n+                .timeout(TIMEOUT, TimeUnit.SECONDS)\n+                .blockingAwait();\n+    }\n+\n+    /**\n+     * Test that the callback method is not called\n+     * after the sensor listener has been unregistered.\n+     */\n+    @Test(expected = RuntimeException.class)\n+    public void afterSensorListenerUnregistered() {\n+        Completable.create(emitter -> {\n+            ShakeDetector sd = new ShakeDetector(mock(Context.class), emitter::onComplete);\n+            sd.startDetecting();\n+            sd.stopDetecting();\n+        }).observeOn(Schedulers.io())\n+                .subscribeOn(Schedulers.io())\n+                .timeout(TIMEOUT, TimeUnit.SECONDS)\n+                .blockingAwait();\n+    }\n+\n+    /**\n+     * For each line in the CSV file with the given name, creates and starts a thread that sends\n+     * a sensor event with the corresponding data in the CSV file to the sensor listener and waits\n+     * for the callback method to be called (times out after TIMEOUT seconds).\n+     * @param accelDataFileName Name of the CSV file containing acceleration data.\n+     */\n+    private void simulateSensorEvent(String accelDataFileName) {\n+        Context mockContext = mock(Context.class);\n+        SensorManager mockSensorManager = mock(SensorManager.class);\n+        when(mockContext.getSystemService(Context.SENSOR_SERVICE)).thenReturn(mockSensorManager);\n+        when(mockSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER)).thenReturn(mock(Sensor.class));\n+        AtomicReference<Thread> streamingThread = new AtomicReference<>();\n+        doAnswer(invocation -> {\n+            int indexOfListener = 0; // First argument passed to registerListener(...)\n+            SensorEventListener listener = invocation.getArgument(indexOfListener);\n+            streamingThread.set(createStreamingThread(processAccelCsv(accelDataFileName), listener));\n+            streamingThread.get().start();\n+            return true;\n+        }).when(mockSensorManager).registerListener(any(SensorEventListener.class), any(Sensor.class), anyInt());\n+\n+        Completable.create(emitter -> {\n+            ShakeDetector sd = new ShakeDetector(mockContext, emitter::onComplete);\n+            sd.startDetecting();\n+        }).observeOn(Schedulers.io())\n+                .subscribeOn(Schedulers.io())\n+                .timeout(TIMEOUT, TimeUnit.SECONDS)\n+                .blockingAwait();\n+    }\n+\n+    /**\n+     * Converts each line in the CSV file with the given name to a float[].\n+     * @param fileName Name of CSV file containing the acceleration data.\n+     * @return List of float[] where each element in the List corresponds to\n+     *         one line in the CSV file.\n+     */\n+    private List<float[]> processAccelCsv(String fileName) {\n+        List<float[]> sensorValues = new ArrayList<>();\n+        for (String line : Resources.readLines(fileName)) {\n+            String[] currentLine = line.split(\",\");\n+            float[] accelValues = new float[currentLine.length];\n+            for (int i = 0; i < currentLine.length; i++) {\n+                accelValues[i] = Float.parseFloat(currentLine[i]);\n+            }\n+            sensorValues.add(accelValues);\n+        }\n+        return sensorValues;\n+    }\n+\n+    /**\n+     * Creates a new thread that when started will send a sensor event to the given\n+     * SensorEventListener for each element in the given List.\n+     * @param sensorValues List where each element represents the acceleration in the x, y, and z directions.\n+     * @param listener SensorEventListener object.\n+     * @return a Thread object.\n+     */\n+    private Thread createStreamingThread(List<float[]> sensorValues, SensorEventListener listener) {\n+        return new Thread(() -> {\n+            for (float[] accelValues: sensorValues) {\n+                SensorEvent mockEvent = mock(SensorEvent.class);\n+                try {\n+                    Field sensorValuesField = SensorEvent.class.getField(\"values\");\n+                    sensorValuesField.setAccessible(true);\n+                    sensorValuesField.set(mockEvent, accelValues);\n+                    listener.onSensorChanged(mockEvent);\n+                    Sleep.milliseconds(SENSOR_DATA_DELAY);\n+                } catch (NoSuchFieldException | IllegalAccessException e) {\n+                    e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba110f5ac1e338a6870eca7357f02c8434180657"}, "originalPosition": 172}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1075, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}