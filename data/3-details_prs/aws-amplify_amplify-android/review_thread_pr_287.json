{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMjMyMjg1", "number": 287, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowNzo1N1rODljAew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo1MTowMlrODlj8pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjk3NDY3OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTowNzo1N1rOFygPzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODoxNjo0NlrOFzCj6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwMTQ1NQ==", "bodyText": "Minor nit but maybe since this is effectively the latch variable we're using for concurrency management in category initialization we could have explicit naming of categoryInitializationLatch?", "url": "https://github.com/aws-amplify/amplify-android/pull/287#discussion_r388501455", "createdAt": "2020-03-05T19:07:57Z", "author": {"login": "undefobj"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -56,13 +60,17 @@\n     // local storage adapter, and a remote API\n     private final Orchestrator orchestrator;\n \n+    // Keeps track of whether of not the category is initialized yet\n+    private final CountDownLatch categoryInitializationsPending;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457d4bd2f06a82cd2ff22c6b9c8b50f9379c0b69"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MzY1Ng==", "bodyText": "The naming here is awkward, agreed. The logic here was that it's a count that starts at 1 and then goes to 0, so it's like, how can I name this count in a reasonable way? Quantity of things that still need some operation..., etc.", "url": "https://github.com/aws-amplify/amplify-android/pull/287#discussion_r389063656", "createdAt": "2020-03-06T18:16:46Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -56,13 +60,17 @@\n     // local storage adapter, and a remote API\n     private final Orchestrator orchestrator;\n \n+    // Keeps track of whether of not the category is initialized yet\n+    private final CountDownLatch categoryInitializationsPending;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwMTQ1NQ=="}, "originalCommit": {"oid": "457d4bd2f06a82cd2ff22c6b9c8b50f9379c0b69"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzAwMDI2OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToxNDo0OFrOFygfdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODoxNDozMFrOFzCfsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwNTQ2Mg==", "bodyText": "I like this refactor out of the individual overrides, basically lifecycle checks. I wonder do we need a separate beforeInitialization to ensure everything is in a good state? Could that be used for the race condition issue we saw the other day on app startup instead of requiring a singleton?", "url": "https://github.com/aws-amplify/amplify-android/pull/287#discussion_r388505462", "createdAt": "2020-03-05T19:14:48Z", "author": {"login": "undefobj"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -314,20 +329,24 @@ public Cancelable observe(\n             },\n             onObservationFailure,\n             onObservationCompleted\n-        );\n+        )));\n     }\n \n-    @SuppressWarnings(\"checkstyle:WhitespaceAround\") // () -> {}\n-    @NonNull\n     @Override\n-    public <T extends Model> Cancelable observe(\n+    public <T extends Model> void observe(\n             @NonNull Class<T> itemClass,\n             @NonNull QueryPredicate selectionCriteria,\n+            @NonNull Consumer<Cancelable> onObservationStarted,\n             @NonNull Consumer<DataStoreItemChange<T>> onDataStoreItemChange,\n             @NonNull Consumer<DataStoreException> onObservationFailure,\n             @NonNull Action onObservationCompleted) {\n         onObservationFailure.accept(new DataStoreException(\"Not implemented yet, buster!\", \"Check back later!\"));\n-        return () -> {};\n+    }\n+\n+    private void afterInitialization(@NonNull final Runnable runnable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457d4bd2f06a82cd2ff22c6b9c8b50f9379c0b69"}, "originalPosition": 196}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MjU3Nw==", "bodyText": "Hm, yea we could. Right now, afterInitialization is just only a method in this implementation class, not anything fancier. And there logically is some beforeInitialization, stuff (basically, setup a listener). Right now, the configure(...) is being used for both configuration and for this \"before\" initialization step.", "url": "https://github.com/aws-amplify/amplify-android/pull/287#discussion_r389062577", "createdAt": "2020-03-06T18:14:30Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -314,20 +329,24 @@ public Cancelable observe(\n             },\n             onObservationFailure,\n             onObservationCompleted\n-        );\n+        )));\n     }\n \n-    @SuppressWarnings(\"checkstyle:WhitespaceAround\") // () -> {}\n-    @NonNull\n     @Override\n-    public <T extends Model> Cancelable observe(\n+    public <T extends Model> void observe(\n             @NonNull Class<T> itemClass,\n             @NonNull QueryPredicate selectionCriteria,\n+            @NonNull Consumer<Cancelable> onObservationStarted,\n             @NonNull Consumer<DataStoreItemChange<T>> onDataStoreItemChange,\n             @NonNull Consumer<DataStoreException> onObservationFailure,\n             @NonNull Action onObservationCompleted) {\n         onObservationFailure.accept(new DataStoreException(\"Not implemented yet, buster!\", \"Check back later!\"));\n-        return () -> {};\n+    }\n+\n+    private void afterInitialization(@NonNull final Runnable runnable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwNTQ2Mg=="}, "originalCommit": {"oid": "457d4bd2f06a82cd2ff22c6b9c8b50f9379c0b69"}, "originalPosition": 196}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzEyODcxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/core/category/Category.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOTo1MTowMlrOFyhvJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxODoxMzoyMVrOFzCd1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyNTg2MA==", "bodyText": "I really like the new State enum here but I will admit that readability of the if-not-equals-get is a bit much and someone could introduce a bug in the future if they're not careful. Not sure I have an answer just calling it out.", "url": "https://github.com/aws-amplify/amplify-android/pull/287#discussion_r388525860", "createdAt": "2020-03-05T19:51:02Z", "author": {"login": "undefobj"}, "path": "core/src/main/java/com/amplifyframework/core/category/Category.java", "diffHunk": "@@ -101,25 +98,47 @@ public final boolean isConfigured() {\n      * the category has been successfully configured. Whereas configuration is a short-lived\n      * synchronous phase of setup, initialization may require disk/network resources, etc.\n      * @param context An Android Context\n-     * @param onInitializationAttempted Called when initialization has been attempted.\n-     *                                  The result contains information about each plugin,\n-     *                                  and whether or not its initialization succeeded.\n+     * @return A category initialization result\n      */\n-    public final synchronized void initialize(\n-            @NonNull Context context,\n-            @NonNull Consumer<CategoryInitializationResult> onInitializationAttempted) {\n-        Map<String, InitializationResult> pluginInitializationResults = new HashMap<>();\n-        for (P plugin : getPlugins()) {\n-            InitializationResult result;\n-            try {\n-                plugin.initialize(context);\n-                result = InitializationResult.success();\n-            } catch (AmplifyException pluginInitializationFailure) {\n-                result = InitializationResult.failure(pluginInitializationFailure);\n+    @NonNull\n+    @WorkerThread\n+    public final synchronized CategoryInitializationResult initialize(@NonNull Context context) {\n+        final Map<String, InitializationResult> pluginInitializationResults = new HashMap<>();\n+        if (!State.CONFIGURED.equals(state.get())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "457d4bd2f06a82cd2ff22c6b9c8b50f9379c0b69"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA2MjEwMA==", "bodyText": "The enum is a decent way to handle the state machine, however, I would have liked to avoid the state machine. Hopefully this can be revisited ...", "url": "https://github.com/aws-amplify/amplify-android/pull/287#discussion_r389062100", "createdAt": "2020-03-06T18:13:21Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/core/category/Category.java", "diffHunk": "@@ -101,25 +98,47 @@ public final boolean isConfigured() {\n      * the category has been successfully configured. Whereas configuration is a short-lived\n      * synchronous phase of setup, initialization may require disk/network resources, etc.\n      * @param context An Android Context\n-     * @param onInitializationAttempted Called when initialization has been attempted.\n-     *                                  The result contains information about each plugin,\n-     *                                  and whether or not its initialization succeeded.\n+     * @return A category initialization result\n      */\n-    public final synchronized void initialize(\n-            @NonNull Context context,\n-            @NonNull Consumer<CategoryInitializationResult> onInitializationAttempted) {\n-        Map<String, InitializationResult> pluginInitializationResults = new HashMap<>();\n-        for (P plugin : getPlugins()) {\n-            InitializationResult result;\n-            try {\n-                plugin.initialize(context);\n-                result = InitializationResult.success();\n-            } catch (AmplifyException pluginInitializationFailure) {\n-                result = InitializationResult.failure(pluginInitializationFailure);\n+    @NonNull\n+    @WorkerThread\n+    public final synchronized CategoryInitializationResult initialize(@NonNull Context context) {\n+        final Map<String, InitializationResult> pluginInitializationResults = new HashMap<>();\n+        if (!State.CONFIGURED.equals(state.get())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUyNTg2MA=="}, "originalCommit": {"oid": "457d4bd2f06a82cd2ff22c6b9c8b50f9379c0b69"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1558, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}