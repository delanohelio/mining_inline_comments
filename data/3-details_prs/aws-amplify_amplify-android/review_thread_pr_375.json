{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMTE5NDM4", "number": 375, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozODoyN1rODw7BVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzo0MjowOFrODw7Caw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI1MjM2OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/amplifyframework/testutils/Await.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzozODoyN1rOGELNIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzo1NDowMFrOGELS4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTA3Mg==", "bodyText": "is there any reason why you want these threads to persist? I feel like all threads should be stopped if the test suite that started it crashes due to a certain error that is unrelated to this thread.", "url": "https://github.com/aws-amplify/amplify-android/pull/375#discussion_r407031072", "createdAt": "2020-04-11T07:38:27Z", "author": {"login": "raphkim"}, "path": "testutils/src/main/java/com/amplifyframework/testutils/Await.java", "diffHunk": "@@ -134,28 +134,37 @@ private Await() {}\n             @NonNull ResultErrorEmitter<R, E> resultErrorEmitter,\n             @NonNull AtomicReference<R> resultContainer,\n             @NonNull AtomicReference<E> errorContainer) {\n-\n-        CountDownLatch latch = new CountDownLatch(1);\n-\n-        resultErrorEmitter.emitTo(\n-            result -> {\n-                resultContainer.set(result);\n-                latch.countDown();\n-            }, error -> {\n-                errorContainer.set(error);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        final AtomicReference<Throwable> unexpectedErrorContainer = new AtomicReference<>();\n+        final Thread thread = new Thread(() -> {\n+            try {\n+                resultErrorEmitter.emitTo(\n+                    result -> {\n+                        resultContainer.set(result);\n+                        latch.countDown();\n+                    }, error -> {\n+                        errorContainer.set(error);\n+                        latch.countDown();\n+                    }\n+                );\n+            } catch (Throwable unexpectedFailure) {\n+                unexpectedErrorContainer.set(unexpectedFailure);\n                 latch.countDown();\n             }\n-        );\n+        });\n+        thread.setDaemon(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf34ea71f0c93d9df0a7fa904a2852c2d7001a2c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTg1NQ==", "bodyText": "(Update) Oh yea I did want setDaemon(true):\n\nsetDaemon() Marks this thread as either a daemon thread or a user thread. The Java Virtual Machine exits when the only threads running are all daemon threads.\n\nMy goal was to not hang the VM.", "url": "https://github.com/aws-amplify/amplify-android/pull/375#discussion_r407031855", "createdAt": "2020-04-11T07:47:00Z", "author": {"login": "jamesonwilliams"}, "path": "testutils/src/main/java/com/amplifyframework/testutils/Await.java", "diffHunk": "@@ -134,28 +134,37 @@ private Await() {}\n             @NonNull ResultErrorEmitter<R, E> resultErrorEmitter,\n             @NonNull AtomicReference<R> resultContainer,\n             @NonNull AtomicReference<E> errorContainer) {\n-\n-        CountDownLatch latch = new CountDownLatch(1);\n-\n-        resultErrorEmitter.emitTo(\n-            result -> {\n-                resultContainer.set(result);\n-                latch.countDown();\n-            }, error -> {\n-                errorContainer.set(error);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        final AtomicReference<Throwable> unexpectedErrorContainer = new AtomicReference<>();\n+        final Thread thread = new Thread(() -> {\n+            try {\n+                resultErrorEmitter.emitTo(\n+                    result -> {\n+                        resultContainer.set(result);\n+                        latch.countDown();\n+                    }, error -> {\n+                        errorContainer.set(error);\n+                        latch.countDown();\n+                    }\n+                );\n+            } catch (Throwable unexpectedFailure) {\n+                unexpectedErrorContainer.set(unexpectedFailure);\n                 latch.countDown();\n             }\n-        );\n+        });\n+        thread.setDaemon(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTA3Mg=="}, "originalCommit": {"oid": "bf34ea71f0c93d9df0a7fa904a2852c2d7001a2c"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMjU0Nw==", "bodyText": "ah okay. that sounds like a good reason.", "url": "https://github.com/aws-amplify/amplify-android/pull/375#discussion_r407032547", "createdAt": "2020-04-11T07:54:00Z", "author": {"login": "raphkim"}, "path": "testutils/src/main/java/com/amplifyframework/testutils/Await.java", "diffHunk": "@@ -134,28 +134,37 @@ private Await() {}\n             @NonNull ResultErrorEmitter<R, E> resultErrorEmitter,\n             @NonNull AtomicReference<R> resultContainer,\n             @NonNull AtomicReference<E> errorContainer) {\n-\n-        CountDownLatch latch = new CountDownLatch(1);\n-\n-        resultErrorEmitter.emitTo(\n-            result -> {\n-                resultContainer.set(result);\n-                latch.countDown();\n-            }, error -> {\n-                errorContainer.set(error);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        final AtomicReference<Throwable> unexpectedErrorContainer = new AtomicReference<>();\n+        final Thread thread = new Thread(() -> {\n+            try {\n+                resultErrorEmitter.emitTo(\n+                    result -> {\n+                        resultContainer.set(result);\n+                        latch.countDown();\n+                    }, error -> {\n+                        errorContainer.set(error);\n+                        latch.countDown();\n+                    }\n+                );\n+            } catch (Throwable unexpectedFailure) {\n+                unexpectedErrorContainer.set(unexpectedFailure);\n                 latch.countDown();\n             }\n-        );\n+        });\n+        thread.setDaemon(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTA3Mg=="}, "originalCommit": {"oid": "bf34ea71f0c93d9df0a7fa904a2852c2d7001a2c"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNjI1NTE1OnYy", "diffSide": "RIGHT", "path": "testutils/src/main/java/com/amplifyframework/testutils/Await.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzo0MjowOFrOGELOZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMVQwNzo1NToyOVrOGELTYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTM5OA==", "bodyText": "would anything ever get thrown directly to this thread?", "url": "https://github.com/aws-amplify/amplify-android/pull/375#discussion_r407031398", "createdAt": "2020-04-11T07:42:08Z", "author": {"login": "raphkim"}, "path": "testutils/src/main/java/com/amplifyframework/testutils/Await.java", "diffHunk": "@@ -134,28 +134,37 @@ private Await() {}\n             @NonNull ResultErrorEmitter<R, E> resultErrorEmitter,\n             @NonNull AtomicReference<R> resultContainer,\n             @NonNull AtomicReference<E> errorContainer) {\n-\n-        CountDownLatch latch = new CountDownLatch(1);\n-\n-        resultErrorEmitter.emitTo(\n-            result -> {\n-                resultContainer.set(result);\n-                latch.countDown();\n-            }, error -> {\n-                errorContainer.set(error);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        final AtomicReference<Throwable> unexpectedErrorContainer = new AtomicReference<>();\n+        final Thread thread = new Thread(() -> {\n+            try {\n+                resultErrorEmitter.emitTo(\n+                    result -> {\n+                        resultContainer.set(result);\n+                        latch.countDown();\n+                    }, error -> {\n+                        errorContainer.set(error);\n+                        latch.countDown();\n+                    }\n+                );\n+            } catch (Throwable unexpectedFailure) {\n+                unexpectedErrorContainer.set(unexpectedFailure);\n                 latch.countDown();\n             }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf34ea71f0c93d9df0a7fa904a2852c2d7001a2c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMjA3NQ==", "bodyText": "Not if it is working properly. Before, if something was broken, it would throw on the calling thread, here. But since I've moved the call onto a new thread, I don't want the exception to just kill the thread, while the caller is still alive waiting for a response. I want it to kill the calling thread, too.\nBut yea - this is a safeguard. Software that is functioning as we intent it do would not trigger this condition. (But, this is after-all a testutils component, so we can't expect things passed into this method will always be functioning correctly (they may throw instead of calling error consumer, accidentally.))", "url": "https://github.com/aws-amplify/amplify-android/pull/375#discussion_r407032075", "createdAt": "2020-04-11T07:49:10Z", "author": {"login": "jamesonwilliams"}, "path": "testutils/src/main/java/com/amplifyframework/testutils/Await.java", "diffHunk": "@@ -134,28 +134,37 @@ private Await() {}\n             @NonNull ResultErrorEmitter<R, E> resultErrorEmitter,\n             @NonNull AtomicReference<R> resultContainer,\n             @NonNull AtomicReference<E> errorContainer) {\n-\n-        CountDownLatch latch = new CountDownLatch(1);\n-\n-        resultErrorEmitter.emitTo(\n-            result -> {\n-                resultContainer.set(result);\n-                latch.countDown();\n-            }, error -> {\n-                errorContainer.set(error);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        final AtomicReference<Throwable> unexpectedErrorContainer = new AtomicReference<>();\n+        final Thread thread = new Thread(() -> {\n+            try {\n+                resultErrorEmitter.emitTo(\n+                    result -> {\n+                        resultContainer.set(result);\n+                        latch.countDown();\n+                    }, error -> {\n+                        errorContainer.set(error);\n+                        latch.countDown();\n+                    }\n+                );\n+            } catch (Throwable unexpectedFailure) {\n+                unexpectedErrorContainer.set(unexpectedFailure);\n                 latch.countDown();\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTM5OA=="}, "originalCommit": {"oid": "bf34ea71f0c93d9df0a7fa904a2852c2d7001a2c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMjY3NQ==", "bodyText": "I guess it's always better safe than sorry. I just couldn't think of a scenario where anything would ever be thrown directly here now that you created a new well-contained thread.", "url": "https://github.com/aws-amplify/amplify-android/pull/375#discussion_r407032675", "createdAt": "2020-04-11T07:55:29Z", "author": {"login": "raphkim"}, "path": "testutils/src/main/java/com/amplifyframework/testutils/Await.java", "diffHunk": "@@ -134,28 +134,37 @@ private Await() {}\n             @NonNull ResultErrorEmitter<R, E> resultErrorEmitter,\n             @NonNull AtomicReference<R> resultContainer,\n             @NonNull AtomicReference<E> errorContainer) {\n-\n-        CountDownLatch latch = new CountDownLatch(1);\n-\n-        resultErrorEmitter.emitTo(\n-            result -> {\n-                resultContainer.set(result);\n-                latch.countDown();\n-            }, error -> {\n-                errorContainer.set(error);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        final AtomicReference<Throwable> unexpectedErrorContainer = new AtomicReference<>();\n+        final Thread thread = new Thread(() -> {\n+            try {\n+                resultErrorEmitter.emitTo(\n+                    result -> {\n+                        resultContainer.set(result);\n+                        latch.countDown();\n+                    }, error -> {\n+                        errorContainer.set(error);\n+                        latch.countDown();\n+                    }\n+                );\n+            } catch (Throwable unexpectedFailure) {\n+                unexpectedErrorContainer.set(unexpectedFailure);\n                 latch.countDown();\n             }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzAzMTM5OA=="}, "originalCommit": {"oid": "bf34ea71f0c93d9df0a7fa904a2852c2d7001a2c"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1425, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}