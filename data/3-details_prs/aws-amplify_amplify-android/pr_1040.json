{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NTEyNDM4", "number": 1040, "title": "fix(aws-datastore): store schema float as a java double", "bodyText": "The Amplify DataStore leverages GraphQL to define its data models.\nTherefor, our intention is to support a strict superset of the primitive\ntypes described by the GraphQL specification.\nWhile implementing the DataStore, we overlooked that the GraphQL \"Float\"\ntype is a double-precision value. The SQL adapter is able to accomodate\nthis, currently. However, our Java codegen stores a float value, and we\nlook for values of Float type while serializing and deserializing object\ndata.\nUnfortunately, we need to continue to support that behavior, since\ncustomers will have Float values in their models. None-the-less, the\nFlutter consumer of this library rightly wants to use the actual GraphQL\nscalar types, and see the same behavior accross iOS and Android. As a\nresult of these constraints, we must support both types in the library,\nfor now.\nThe decision to express a floating point value as a Java Float or Double\nwill be taken from the type of the value in the model object. For our\nJava models, it will be a Float. When Map data is passed from Flutter,\nit will be a Double. Both SQL and AppSync will treat both as a double,\nwhich is large enough to accomodate both types. Or in other words, both\ntypes are supported, now.\nThe next step will be to update the Java codegen, so that it represents\nGraphQL Float types as Java Doubles. This change will allow new\ncustomers to use the fix, while we continue to support existing\ncustomers' models.\nResolves: #1031\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-12-09T22:48:14Z", "url": "https://github.com/aws-amplify/amplify-android/pull/1040", "merged": true, "mergeCommit": {"oid": "3f5c509599b2cb0e075269dfba7ccfd76146283d"}, "closed": true, "closedAt": "2020-12-10T18:24:56Z", "author": {"login": "jamesonwilliams"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdknMkUAH2gAyNTM1NTEyNDM4OjNlYzYwNmRhMDZkYzRkZDQyZTY1ZjlkZGJkMTljNGM4OThkZjBhM2U=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdknnCpgFqTU0ODcwOTkzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3ec606da06dc4dd42e65f9ddbd19c4c898df0a3e", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/3ec606da06dc4dd42e65f9ddbd19c4c898df0a3e", "committedDate": "2020-12-09T23:18:32Z", "message": "fix(aws-datastore): store schema float as a java double\n\nThe Amplify DataStore leverages GraphQL to define its data models.\nTherefor, our intention is to support a strict superset of the primitive\ntypes described by the GraphQL specification.\n\nWhile implementing the DataStore, we overlooked that the GraphQL \"Float\"\ntype is a double-precision value. The SQL adapter is able to accomodate\nthis, currently. However, our Java codegen stores a float value, and we\nlook for values of Float type while serializing and deserializing object\ndata.\n\nUnfortunately, we need to continue to support that behavior, since\ncustomers will have Float values in their models. None-the-less, the\nFlutter consumer of this library rightly wants to use the actual GraphQL\nscalar types, and see the same behavior accross iOS and Android. As a\nresult of these constraints, we must support both types in the library,\nfor now.\n\nThe decision to express a floating point value as a Java Float or Double\nwill be taken from the type of the value in the model object. For our\nJava models, it will be a Float. When Map data is passed from Flutter,\nit will be a Double. Both SQL and AppSync will treat both as a double,\nwhich is large enough to accomodate both types. Or in other words, both\ntypes are supported, now.\n\nThe next step will be to update the Java codegen, so that it represents\nGraphQL Float types as Java Doubles. This change will allow new\ncustomers to use the fix, while we continue to support existing\ncustomers' models.\n\nResolves: https://github.com/aws-amplify/amplify-android/issues/1031"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "3ec606da06dc4dd42e65f9ddbd19c4c898df0a3e", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/3ec606da06dc4dd42e65f9ddbd19c4c898df0a3e", "committedDate": "2020-12-09T23:18:32Z", "message": "fix(aws-datastore): store schema float as a java double\n\nThe Amplify DataStore leverages GraphQL to define its data models.\nTherefor, our intention is to support a strict superset of the primitive\ntypes described by the GraphQL specification.\n\nWhile implementing the DataStore, we overlooked that the GraphQL \"Float\"\ntype is a double-precision value. The SQL adapter is able to accomodate\nthis, currently. However, our Java codegen stores a float value, and we\nlook for values of Float type while serializing and deserializing object\ndata.\n\nUnfortunately, we need to continue to support that behavior, since\ncustomers will have Float values in their models. None-the-less, the\nFlutter consumer of this library rightly wants to use the actual GraphQL\nscalar types, and see the same behavior accross iOS and Android. As a\nresult of these constraints, we must support both types in the library,\nfor now.\n\nThe decision to express a floating point value as a Java Float or Double\nwill be taken from the type of the value in the model object. For our\nJava models, it will be a Float. When Map data is passed from Flutter,\nit will be a Double. Both SQL and AppSync will treat both as a double,\nwhich is large enough to accomodate both types. Or in other words, both\ntypes are supported, now.\n\nThe next step will be to update the Java codegen, so that it represents\nGraphQL Float types as Java Doubles. This change will allow new\ncustomers to use the fix, while we continue to support existing\ncustomers' models.\n\nResolves: https://github.com/aws-amplify/amplify-android/issues/1031"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4Njk1OTgw", "url": "https://github.com/aws-amplify/amplify-android/pull/1040#pullrequestreview-548695980", "createdAt": "2020-12-09T23:21:27Z", "commit": {"oid": "3ec606da06dc4dd42e65f9ddbd19c4c898df0a3e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzoyMToyOFrOICuBlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzoyMToyOFrOICuBlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTcyMjEzMw==", "bodyText": "Accidentally fixed one of the bugs here.\nThe milliseconds issue is unrelated. That's about AppSync using AWSTimestamp as:\n\nthe number of seconds that have elapsed since 1970-01-01T00:00Z\n\nBut then it returns a value in milliseconds in the ConflictUnhandled data, in production \ud83e\udd37 . Most likely straight from a Java API without conversion.", "url": "https://github.com/aws-amplify/amplify-android/pull/1040#discussion_r539722133", "createdAt": "2020-12-09T23:21:28Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/appsync/AppSyncConflictUnhandledErrorTest.java", "diffHunk": "@@ -119,9 +119,8 @@ public void conflictErrorExtractedIfPresent() {\n             AppSyncConflictUnhandledError.findFirst(Note.class, response.getErrors());\n         assertNotNull(conflictUnhandledError);\n \n-        // TODO: The JSON document has '1601499066604' as the time. These differ by 26604,\n-        // also the TimeUnit appears to be wrong. Should be MILLISECONDS.\n-        Temporal.Timestamp lastChangedAt = new Temporal.Timestamp(1601499040000L, TimeUnit.SECONDS);\n+        // TODO: the TimeUnit appears to be wrong. Should be MILLISECONDS?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ec606da06dc4dd42e65f9ddbd19c4c898df0a3e"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NzA5ODM5", "url": "https://github.com/aws-amplify/amplify-android/pull/1040#pullrequestreview-548709839", "createdAt": "2020-12-09T23:47:14Z", "commit": {"oid": "3ec606da06dc4dd42e65f9ddbd19c4c898df0a3e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzo0NzoxNVrOICuxLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMzo0NzoxNVrOICuxLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTczNDMxNw==", "bodyText": "Could we get rid of the FLOAT type at some point in the future?  We can't now, since the codegen'd models all have Float objects, but if we change codegen to generate Double objects, then we could, right?", "url": "https://github.com/aws-amplify/amplify-android/pull/1040#discussion_r539734317", "createdAt": "2020-12-09T23:47:15Z", "author": {"login": "richardmcclellan"}, "path": "aws-api-appsync/src/main/java/com/amplifyframework/core/model/types/JavaFieldType.java", "diffHunk": "@@ -46,6 +46,11 @@\n      */\n     FLOAT(Float.class),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ec606da06dc4dd42e65f9ddbd19c4c898df0a3e"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NzA5OTM4", "url": "https://github.com/aws-amplify/amplify-android/pull/1040#pullrequestreview-548709938", "createdAt": "2020-12-09T23:47:27Z", "commit": {"oid": "3ec606da06dc4dd42e65f9ddbd19c4c898df0a3e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3363, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}