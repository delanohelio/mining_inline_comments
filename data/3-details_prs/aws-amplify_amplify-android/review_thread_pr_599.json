{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMTQ3MzE0", "number": 599, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDo1NjowNlrOEI-GMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODoyNTowMFrOENAdoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODQxNDU4OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDo1NjowNlrOGpQeDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzo0MToyNlrOGphWEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkxNDYzOQ==", "bodyText": "Augustus De Morgan sez:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (!permitAcquired || !status.compareAndSet(OrchestratorStatus.STOPPED, OrchestratorStatus.STARTING)) {\n          \n          \n            \n                    if (!(permitAcquired && status.compareAndSet(OrchestratorStatus.STOPPED, OrchestratorStatus.STARTING)) {", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r445914639", "createdAt": "2020-06-26T00:56:06Z", "author": {"login": "jpignata"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -115,15 +119,21 @@ public boolean isStarted() {\n      * @return A Completable operation to start the sync engine orchestrator\n      */\n     @NonNull\n-    public Completable start() {\n-        // Only start if it's stopped.\n-        if (!OrchestratorStatus.STOPPED.equals(status.get())) {\n-            return initializationCompletable;\n+    public synchronized Completable start() {\n+        boolean permitAcquired = acquirePermit(OrchestratorAction.START);\n+        // Only start if it's stopped AND if we can get a permit.\n+        if (!permitAcquired || !status.compareAndSet(OrchestratorStatus.STOPPED, OrchestratorStatus.STARTING)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b359af12eb15b6178db2de1044954cd6ff529650"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5MTEyMQ==", "bodyText": "hahaha...can't tell you how many times I went back and forth until the IDE \"suggested\" I use OR instead of AND...Only to find out that it would also suggest AND instead of OR when I'd switch \ud83e\udd26", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r446191121", "createdAt": "2020-06-26T13:41:26Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -115,15 +119,21 @@ public boolean isStarted() {\n      * @return A Completable operation to start the sync engine orchestrator\n      */\n     @NonNull\n-    public Completable start() {\n-        // Only start if it's stopped.\n-        if (!OrchestratorStatus.STOPPED.equals(status.get())) {\n-            return initializationCompletable;\n+    public synchronized Completable start() {\n+        boolean permitAcquired = acquirePermit(OrchestratorAction.START);\n+        // Only start if it's stopped AND if we can get a permit.\n+        if (!permitAcquired || !status.compareAndSet(OrchestratorStatus.STOPPED, OrchestratorStatus.STARTING)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkxNDYzOQ=="}, "originalCommit": {"oid": "b359af12eb15b6178db2de1044954cd6ff529650"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODQxODMzOnYy", "diffSide": "LEFT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDo1ODozNFrOGpQgUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoxMjowN1rOGrlRUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkxNTIxOQ==", "bodyText": "It seems like OrchestratorStatus needs some helpers like isStopped(), isStarting(), etc.", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r445915219", "createdAt": "2020-06-26T00:58:34Z", "author": {"login": "jpignata"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -115,15 +119,21 @@ public boolean isStarted() {\n      * @return A Completable operation to start the sync engine orchestrator\n      */\n     @NonNull\n-    public Completable start() {\n-        // Only start if it's stopped.\n-        if (!OrchestratorStatus.STOPPED.equals(status.get())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b359af12eb15b6178db2de1044954cd6ff529650"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1MjU5NQ==", "bodyText": "I have an isStarted right now. That being said, I did end up changing how we do this a little bit: rather than check the start and perform action, I'm using the compareAndSet method of the AtomicReference.", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r448352595", "createdAt": "2020-07-01T13:12:07Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -115,15 +119,21 @@ public boolean isStarted() {\n      * @return A Completable operation to start the sync engine orchestrator\n      */\n     @NonNull\n-    public Completable start() {\n-        // Only start if it's stopped.\n-        if (!OrchestratorStatus.STOPPED.equals(status.get())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkxNTIxOQ=="}, "originalCommit": {"oid": "b359af12eb15b6178db2de1044954cd6ff529650"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODQyMTAxOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMTowMDoyOVrOGpQiBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxMzo0MjoxMVrOGphXzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkxNTY1Mw==", "bodyText": "Can we wrapped the compareAndSet operation in the same method that grabs the semaphore so it can release it as needed?", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r445915653", "createdAt": "2020-06-26T01:00:29Z", "author": {"login": "jpignata"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -147,25 +157,50 @@ public Completable start() {\n                     subscriptionProcessor.startDrainingMutationBuffer();\n                 }\n                 status.compareAndSet(OrchestratorStatus.STARTING, OrchestratorStatus.STARTED);\n+                LOG.debug(\"Orchestrator started.\");\n             })\n-        );\n+        ).doFinally(startStopSemaphore::release);\n         return initializationCompletable;\n     }\n \n     /**\n      * Stop all model synchronization.\n      */\n-    public void stop() {\n-        if (isStarted()) {\n+    public synchronized void stop() {\n+        boolean permitAcquired = acquirePermit(OrchestratorAction.STOP);\n+        // only stop if it's started AND if we can get a permit.\n+        if (!permitAcquired || !status.compareAndSet(OrchestratorStatus.STARTED, OrchestratorStatus.STOPPING)) {\n+            LOG.warn(String.format(\"Orchestrator could not be stopped. Orchestrator status: %s\", status.get()));\n+            // If we acquired the permit but failed to set the status, let's release the permit.\n+            if (permitAcquired) {\n+                startStopSemaphore.release();\n+            }\n+            return;\n+        }\n+        try {\n             LOG.info(\"Intentionally stopping cloud synchronization, now.\");\n-            status.compareAndSet(OrchestratorStatus.STARTED, OrchestratorStatus.STOPPING);\n             subscriptionProcessor.stopAllSubscriptionActivity();\n             storageObserver.stopObservingStorageChanges();\n             mutationProcessor.stopDrainingMutationOutbox();\n             status.compareAndSet(OrchestratorStatus.STOPPING, OrchestratorStatus.STOPPED);\n             LOG.debug(\"Stopped remote synchronization.\");\n+        } finally {\n+            startStopSemaphore.release();\n         }\n+    }\n \n+    private boolean acquirePermit(OrchestratorAction action) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b359af12eb15b6178db2de1044954cd6ff529650"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjE5MTU2Ng==", "bodyText": "I can definitely do that. \ud83d\udc4d", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r446191566", "createdAt": "2020-06-26T13:42:11Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -147,25 +157,50 @@ public Completable start() {\n                     subscriptionProcessor.startDrainingMutationBuffer();\n                 }\n                 status.compareAndSet(OrchestratorStatus.STARTING, OrchestratorStatus.STARTED);\n+                LOG.debug(\"Orchestrator started.\");\n             })\n-        );\n+        ).doFinally(startStopSemaphore::release);\n         return initializationCompletable;\n     }\n \n     /**\n      * Stop all model synchronization.\n      */\n-    public void stop() {\n-        if (isStarted()) {\n+    public synchronized void stop() {\n+        boolean permitAcquired = acquirePermit(OrchestratorAction.STOP);\n+        // only stop if it's started AND if we can get a permit.\n+        if (!permitAcquired || !status.compareAndSet(OrchestratorStatus.STARTED, OrchestratorStatus.STOPPING)) {\n+            LOG.warn(String.format(\"Orchestrator could not be stopped. Orchestrator status: %s\", status.get()));\n+            // If we acquired the permit but failed to set the status, let's release the permit.\n+            if (permitAcquired) {\n+                startStopSemaphore.release();\n+            }\n+            return;\n+        }\n+        try {\n             LOG.info(\"Intentionally stopping cloud synchronization, now.\");\n-            status.compareAndSet(OrchestratorStatus.STARTED, OrchestratorStatus.STOPPING);\n             subscriptionProcessor.stopAllSubscriptionActivity();\n             storageObserver.stopObservingStorageChanges();\n             mutationProcessor.stopDrainingMutationOutbox();\n             status.compareAndSet(OrchestratorStatus.STOPPING, OrchestratorStatus.STOPPED);\n             LOG.debug(\"Stopped remote synchronization.\");\n+        } finally {\n+            startStopSemaphore.release();\n         }\n+    }\n \n+    private boolean acquirePermit(OrchestratorAction action) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkxNTY1Mw=="}, "originalCommit": {"oid": "b359af12eb15b6178db2de1044954cd6ff529650"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MjYxODM2OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxODozNDo0N1rOGp3giQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzowNzozM1rOGrlGwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1NDI0OQ==", "bodyText": "I saw this pattern in multiple place in Amplify Android's source code. Is there any reason why we want to perform observeOn and subscribeOn at the same place with the same scheduler?\nShould'nt\norchestrator.start()\n                  .subscribeOn(Schedulers.io());\n\nDo the work? Unless you were using a Subject which may change the threading so you have to reset the scheduler in observeOn but i dont see any Subject in orchestrator", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r446554249", "createdAt": "2020-06-27T18:34:47Z", "author": {"login": "richardissuperman"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -449,7 +450,10 @@ private Completable initializeOrchestrator() {\n         if (api.getPlugins().isEmpty()) {\n             return Completable.complete();\n         } else {\n-            return orchestrator.start();\n+            // Let's prevent the orchestrator startup from possibly running in main.\n+            return orchestrator.start()\n+                .observeOn(Schedulers.io())\n+                .subscribeOn(Schedulers.io());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b359af12eb15b6178db2de1044954cd6ff529650"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk3MjM4OA==", "bodyText": "The thinking behind that was to ensure it was not in main since we have the occasional blockingAwait/Get call throughout the process. Not sure if it makes a difference, but the subscriber of the SubscriptionProcessor is a ReplaySubject", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r446972388", "createdAt": "2020-06-29T13:30:20Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -449,7 +450,10 @@ private Completable initializeOrchestrator() {\n         if (api.getPlugins().isEmpty()) {\n             return Completable.complete();\n         } else {\n-            return orchestrator.start();\n+            // Let's prevent the orchestrator startup from possibly running in main.\n+            return orchestrator.start()\n+                .observeOn(Schedulers.io())\n+                .subscribeOn(Schedulers.io());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1NDI0OQ=="}, "originalCommit": {"oid": "b359af12eb15b6178db2de1044954cd6ff529650"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzExNDIyNg==", "bodyText": "@rjuliano yeah then i dont think its needed to call observeOn again, it will just wrap the lower stream runnable into the same thread pool.\nwe only need to switch to same scheduler if we have below use case , which is to transform a callback style code into rxjava observable\n Observable.<StorageItemChange<? extends Model>>create(emitter ->\n                localStorageAdapter.observe(emitter::onNext, emitter::onError, emitter::onComplete)\n            )\n            .subscribeOn(Schedulers.single())\n            .observeOn(Schedulers.single())\n\n\nThe above code makes sense cause the emitter will be emitting the onNext event in a different thread other than the one we specify in Schedulers.single(), so it makes sense to quickly switch back to it by calling single,\nsimilar use case : https://github.com/aws-amplify/amplify-android/blob/main/aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessor.java#L137\nnit: the above link code i think it need to be changed as well as the onErrorResume() will be executed not in IO() thread scheduler", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r447114226", "createdAt": "2020-06-29T16:52:31Z", "author": {"login": "richardissuperman"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -449,7 +450,10 @@ private Completable initializeOrchestrator() {\n         if (api.getPlugins().isEmpty()) {\n             return Completable.complete();\n         } else {\n-            return orchestrator.start();\n+            // Let's prevent the orchestrator startup from possibly running in main.\n+            return orchestrator.start()\n+                .observeOn(Schedulers.io())\n+                .subscribeOn(Schedulers.io());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1NDI0OQ=="}, "originalCommit": {"oid": "b359af12eb15b6178db2de1044954cd6ff529650"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE2NjEzNg==", "bodyText": "That makes sense. That's the change you made in #612 right @richardmcclellan ?", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r447166136", "createdAt": "2020-06-29T18:23:52Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -449,7 +450,10 @@ private Completable initializeOrchestrator() {\n         if (api.getPlugins().isEmpty()) {\n             return Completable.complete();\n         } else {\n-            return orchestrator.start();\n+            // Let's prevent the orchestrator startup from possibly running in main.\n+            return orchestrator.start()\n+                .observeOn(Schedulers.io())\n+                .subscribeOn(Schedulers.io());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1NDI0OQ=="}, "originalCommit": {"oid": "b359af12eb15b6178db2de1044954cd6ff529650"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE3MzU0Ng==", "bodyText": "I think you meant @richardissuperman, not me :)", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r447173546", "createdAt": "2020-06-29T18:36:16Z", "author": {"login": "richardmcclellan"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -449,7 +450,10 @@ private Completable initializeOrchestrator() {\n         if (api.getPlugins().isEmpty()) {\n             return Completable.complete();\n         } else {\n-            return orchestrator.start();\n+            // Let's prevent the orchestrator startup from possibly running in main.\n+            return orchestrator.start()\n+                .observeOn(Schedulers.io())\n+                .subscribeOn(Schedulers.io());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1NDI0OQ=="}, "originalCommit": {"oid": "b359af12eb15b6178db2de1044954cd6ff529650"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzM0MjEwNQ==", "bodyText": "@rjuliano yep, exactly, but that PR was messed up with my previous commit, will revise all two later tonight", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r447342105", "createdAt": "2020-06-30T00:48:41Z", "author": {"login": "richardissuperman"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -449,7 +450,10 @@ private Completable initializeOrchestrator() {\n         if (api.getPlugins().isEmpty()) {\n             return Completable.complete();\n         } else {\n-            return orchestrator.start();\n+            // Let's prevent the orchestrator startup from possibly running in main.\n+            return orchestrator.start()\n+                .observeOn(Schedulers.io())\n+                .subscribeOn(Schedulers.io());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1NDI0OQ=="}, "originalCommit": {"oid": "b359af12eb15b6178db2de1044954cd6ff529650"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0OTg5MA==", "bodyText": "Cool...that's super helpful and thanks for updating the PR. I just merged it.", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r448349890", "createdAt": "2020-07-01T13:07:33Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -449,7 +450,10 @@ private Completable initializeOrchestrator() {\n         if (api.getPlugins().isEmpty()) {\n             return Completable.complete();\n         } else {\n-            return orchestrator.start();\n+            // Let's prevent the orchestrator startup from possibly running in main.\n+            return orchestrator.start()\n+                .observeOn(Schedulers.io())\n+                .subscribeOn(Schedulers.io());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1NDI0OQ=="}, "originalCommit": {"oid": "b359af12eb15b6178db2de1044954cd6ff529650"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDg0MzI4OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoxMzo1OFrOGqJe8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoxMzo1OFrOGqJe8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0ODc1Mg==", "bodyText": "nit: call call", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r446848752", "createdAt": "2020-06-29T08:13:58Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -425,19 +426,22 @@ public void observe(\n     @Override\n     public void clear(@NonNull Action onComplete,\n                       @NonNull Consumer<DataStoreException> onError) {\n-        beforeOperation(() -> {\n-            orchestrator.stop();\n-            sqliteStorageAdapter.clear(onComplete, onError);\n-        });\n+        // We shouldn't call call beforeOperation when clearing the DataStore. The", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97f643e75288b3cc7aec465fbf15284f0639abd0"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzAyNjk2OnYy", "diffSide": "LEFT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNToxMDowN1rOGrW-aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMjowMjo1MFrOGri_uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExODM3Ng==", "bodyText": "Even before, we weren't checking the return value here -- wether or not the latch actually counted down. Should we be, now?", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r448118376", "createdAt": "2020-07-01T05:10:07Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessor.java", "diffHunk": "@@ -117,14 +117,19 @@ void startSubscriptions() {\n                 clazz,\n                 token -> latch.countDown(),\n                 emitter::onNext,\n-                emitter::onError,\n+                AmplifyDisposables.onErrorConsumerWrapperFor(emitter),\n                 emitter::onComplete\n             );\n             // When the observable is disposed, we need to call cancel() on the subscription\n             // so it can properly dispose of resources if necessary. For the AWS API plugin,\n             // this means means closing the underlying network connection.\n             emitter.setDisposable(AmplifyDisposables.fromCancelable(cancelable));\n-            latch.await(SUBSCRIPTION_START_TIMEOUT_MS, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97f643e75288b3cc7aec465fbf15284f0639abd0"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxNTMyMQ==", "bodyText": "That's a good call. If it returns false, we know it was a timeout. If it throws the InterruptedException we know it was killed before the timeout lapsed.", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r448315321", "createdAt": "2020-07-01T12:02:50Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessor.java", "diffHunk": "@@ -117,14 +117,19 @@ void startSubscriptions() {\n                 clazz,\n                 token -> latch.countDown(),\n                 emitter::onNext,\n-                emitter::onError,\n+                AmplifyDisposables.onErrorConsumerWrapperFor(emitter),\n                 emitter::onComplete\n             );\n             // When the observable is disposed, we need to call cancel() on the subscription\n             // so it can properly dispose of resources if necessary. For the AWS API plugin,\n             // this means means closing the underlying network connection.\n             emitter.setDisposable(AmplifyDisposables.fromCancelable(cancelable));\n-            latch.await(SUBSCRIPTION_START_TIMEOUT_MS, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExODM3Ng=="}, "originalCommit": {"oid": "97f643e75288b3cc7aec465fbf15284f0639abd0"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzAzMTQ5OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AmplifyDisposables.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNToxMjoyMFrOGrXA8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxNjozMzo1NlrOGrtRWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExOTAyNQ==", "bodyText": "Is it an AmplifyDisposables thing, really? It doesn't build a Disposable. If you only use it from the SubscriptionProcessor, maybe it should live as a static utility method on that class, instead?", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r448119025", "createdAt": "2020-07-01T05:12:20Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AmplifyDisposables.java", "diffHunk": "@@ -61,4 +71,47 @@ public boolean isDisposed() {\n             }\n         };\n     }\n+\n+    /**\n+     * This function that creates a {@link Consumer} which wraps the {@link ObservableEmitter#onError(Throwable)}\n+     * to prevent it from calling observers that have already been disposed.\n+     *\n+     * <p>\n+     * The scenario is that we have multiple event sources (1 AppSync subscription\n+     * for each model+operation type combination) being consumed by a single downstream\n+     * oberserver. Once the first subscription emits an error, the downstream subscriber\n+     * is placed in a disposed state and will not receive any further notifications.\n+     * In a situation such as loss of connectivity, it's innevitable that multiple subscriptions will fail.\n+     * With that said, after the first failure, the other events sources (AppSync subscriptions)\n+     * will attempt to invoke the downstream onError handler which then results in an\n+     * {@link io.reactivex.exceptions.UndeliverableException} being thrown.\n+     * </p>\n+     *\n+     * <p>\n+     * This method takes a reference of the observable that represents the AppSync subscription,\n+     * wraps it and returns a {@link Consumer} that is used as the onError parameter. The returned\n+     * {@link Consumer} function will delegate the onError call to the downstream observers if it's\n+     * still available, otherwise it logs a warning.\n+     * </p>\n+     *\n+     * @param realEmitter The emitter which will have it's onError function proxied by the return\n+     *                    value of this function.\n+     * @param <T> The type of model handled by the emitter.\n+     * @param <E> The type of exception for the onError consumer\n+     * @return A {@link Consumer} that proxies the {@link ObservableEmitter#onError(Throwable)} call\n+     * to the {@code realEmitter} if it's not disposed or logs a warning.\n+     * @see <a href=\"https://github.com/aws-amplify/amplify-android/issues/541\">GitHub issue #541</a>\n+     *\n+     */\n+    @NonNull\n+    public static <T extends Model, E extends AmplifyException> Consumer<E> onErrorConsumerWrapperFor(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97f643e75288b3cc7aec465fbf15284f0639abd0"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMxMzkxNQ==", "bodyText": "I'm not sure I'm really comfortable with the fact that it even exists. The more I think about it, the more I feel like we shouldn't have to do this. I added it because we have multiple Observables (one for each subscription) merging into one observer. Once onError is called from any of the subscriptions, the downstream observer is done, while the upstream subscriptions are blissfully unaware of that until they attempt to invoke either onError or onNext (a.k.a the lapsed listener problem\nI'm going to take another look at this today. I feel like there's gotta be a better solution.", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r448313915", "createdAt": "2020-07-01T11:59:58Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AmplifyDisposables.java", "diffHunk": "@@ -61,4 +71,47 @@ public boolean isDisposed() {\n             }\n         };\n     }\n+\n+    /**\n+     * This function that creates a {@link Consumer} which wraps the {@link ObservableEmitter#onError(Throwable)}\n+     * to prevent it from calling observers that have already been disposed.\n+     *\n+     * <p>\n+     * The scenario is that we have multiple event sources (1 AppSync subscription\n+     * for each model+operation type combination) being consumed by a single downstream\n+     * oberserver. Once the first subscription emits an error, the downstream subscriber\n+     * is placed in a disposed state and will not receive any further notifications.\n+     * In a situation such as loss of connectivity, it's innevitable that multiple subscriptions will fail.\n+     * With that said, after the first failure, the other events sources (AppSync subscriptions)\n+     * will attempt to invoke the downstream onError handler which then results in an\n+     * {@link io.reactivex.exceptions.UndeliverableException} being thrown.\n+     * </p>\n+     *\n+     * <p>\n+     * This method takes a reference of the observable that represents the AppSync subscription,\n+     * wraps it and returns a {@link Consumer} that is used as the onError parameter. The returned\n+     * {@link Consumer} function will delegate the onError call to the downstream observers if it's\n+     * still available, otherwise it logs a warning.\n+     * </p>\n+     *\n+     * @param realEmitter The emitter which will have it's onError function proxied by the return\n+     *                    value of this function.\n+     * @param <T> The type of model handled by the emitter.\n+     * @param <E> The type of exception for the onError consumer\n+     * @return A {@link Consumer} that proxies the {@link ObservableEmitter#onError(Throwable)} call\n+     * to the {@code realEmitter} if it's not disposed or logs a warning.\n+     * @see <a href=\"https://github.com/aws-amplify/amplify-android/issues/541\">GitHub issue #541</a>\n+     *\n+     */\n+    @NonNull\n+    public static <T extends Model, E extends AmplifyException> Consumer<E> onErrorConsumerWrapperFor(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExOTAyNQ=="}, "originalCommit": {"oid": "97f643e75288b3cc7aec465fbf15284f0639abd0"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODQ4MzY3Mg==", "bodyText": "\u2764\ufe0f was granted for the wiki link! :-D", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r448483672", "createdAt": "2020-07-01T16:33:56Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AmplifyDisposables.java", "diffHunk": "@@ -61,4 +71,47 @@ public boolean isDisposed() {\n             }\n         };\n     }\n+\n+    /**\n+     * This function that creates a {@link Consumer} which wraps the {@link ObservableEmitter#onError(Throwable)}\n+     * to prevent it from calling observers that have already been disposed.\n+     *\n+     * <p>\n+     * The scenario is that we have multiple event sources (1 AppSync subscription\n+     * for each model+operation type combination) being consumed by a single downstream\n+     * oberserver. Once the first subscription emits an error, the downstream subscriber\n+     * is placed in a disposed state and will not receive any further notifications.\n+     * In a situation such as loss of connectivity, it's innevitable that multiple subscriptions will fail.\n+     * With that said, after the first failure, the other events sources (AppSync subscriptions)\n+     * will attempt to invoke the downstream onError handler which then results in an\n+     * {@link io.reactivex.exceptions.UndeliverableException} being thrown.\n+     * </p>\n+     *\n+     * <p>\n+     * This method takes a reference of the observable that represents the AppSync subscription,\n+     * wraps it and returns a {@link Consumer} that is used as the onError parameter. The returned\n+     * {@link Consumer} function will delegate the onError call to the downstream observers if it's\n+     * still available, otherwise it logs a warning.\n+     * </p>\n+     *\n+     * @param realEmitter The emitter which will have it's onError function proxied by the return\n+     *                    value of this function.\n+     * @param <T> The type of model handled by the emitter.\n+     * @param <E> The type of exception for the onError consumer\n+     * @return A {@link Consumer} that proxies the {@link ObservableEmitter#onError(Throwable)} call\n+     * to the {@code realEmitter} if it's not disposed or logs a warning.\n+     * @see <a href=\"https://github.com/aws-amplify/amplify-android/issues/541\">GitHub issue #541</a>\n+     *\n+     */\n+    @NonNull\n+    public static <T extends Model, E extends AmplifyException> Consumer<E> onErrorConsumerWrapperFor(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExOTAyNQ=="}, "originalCommit": {"oid": "97f643e75288b3cc7aec465fbf15284f0639abd0"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzAzMjY1OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNToxMzoxMVrOGrXBqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMTozMzowNVrOGvNKIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExOTIwOA==", "bodyText": "Should we be checking the return value here to tell whether or not the latch did count down? What are the appropriate actions to take if so, vs. if not?", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r448119208", "createdAt": "2020-07-01T05:13:11Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -425,19 +426,22 @@ public void observe(\n     @Override\n     public void clear(@NonNull Action onComplete,\n                       @NonNull Consumer<DataStoreException> onError) {\n-        beforeOperation(() -> {\n-            orchestrator.stop();\n-            sqliteStorageAdapter.clear(onComplete, onError);\n-        });\n+        // We shouldn't call call beforeOperation when clearing the DataStore. The\n+        // only thing we have to wait for is the category initialization latch.\n+        try {\n+            categoryInitializationsPending.await();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97f643e75288b3cc7aec465fbf15284f0639abd0"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1NTIwNA==", "bodyText": "Let me think about this one. Just realized also that we don't have a timeout on this await. We'll need to do some testing on this though.", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r448355204", "createdAt": "2020-07-01T13:16:15Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -425,19 +426,22 @@ public void observe(\n     @Override\n     public void clear(@NonNull Action onComplete,\n                       @NonNull Consumer<DataStoreException> onError) {\n-        beforeOperation(() -> {\n-            orchestrator.stop();\n-            sqliteStorageAdapter.clear(onComplete, onError);\n-        });\n+        // We shouldn't call call beforeOperation when clearing the DataStore. The\n+        // only thing we have to wait for is the category initialization latch.\n+        try {\n+            categoryInitializationsPending.await();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExOTIwOA=="}, "originalCommit": {"oid": "97f643e75288b3cc7aec465fbf15284f0639abd0"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjE1MTg0MQ==", "bodyText": "I added a timeout and it's also now checking the result of the await operation.", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r452151841", "createdAt": "2020-07-09T11:33:05Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -425,19 +426,22 @@ public void observe(\n     @Override\n     public void clear(@NonNull Action onComplete,\n                       @NonNull Consumer<DataStoreException> onError) {\n-        beforeOperation(() -> {\n-            orchestrator.stop();\n-            sqliteStorageAdapter.clear(onComplete, onError);\n-        });\n+        // We shouldn't call call beforeOperation when clearing the DataStore. The\n+        // only thing we have to wait for is the category initialization latch.\n+        try {\n+            categoryInitializationsPending.await();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExOTIwOA=="}, "originalCommit": {"oid": "97f643e75288b3cc7aec465fbf15284f0639abd0"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzAzNTQ0OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNToxNDo1OFrOGrXDQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoxNjozNFrOGrlcPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExOTYxOQ==", "bodyText": "Should onComplete.call() be fired as a result of the subscription, when the initialization of the orchestrator completes, later? That is,\ninitializeOrchestrator().subscribe(onComplete::call);", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r448119619", "createdAt": "2020-07-01T05:14:58Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -425,19 +426,22 @@ public void observe(\n     @Override\n     public void clear(@NonNull Action onComplete,\n                       @NonNull Consumer<DataStoreException> onError) {\n-        beforeOperation(() -> {\n-            orchestrator.stop();\n-            sqliteStorageAdapter.clear(onComplete, onError);\n-        });\n+        // We shouldn't call call beforeOperation when clearing the DataStore. The\n+        // only thing we have to wait for is the category initialization latch.\n+        try {\n+            categoryInitializationsPending.await();\n+        } catch (InterruptedException exception) {\n+            LOG.warn(\"Execution interrupted while waiting for DataStore to be initialized.\");\n+        }\n+        orchestrator.stop();\n+        sqliteStorageAdapter.clear(() -> {\n+            initializeOrchestrator().subscribe();\n+            onComplete.call();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97f643e75288b3cc7aec465fbf15284f0639abd0"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM1NTM4OQ==", "bodyText": "Done", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r448355389", "createdAt": "2020-07-01T13:16:34Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -425,19 +426,22 @@ public void observe(\n     @Override\n     public void clear(@NonNull Action onComplete,\n                       @NonNull Consumer<DataStoreException> onError) {\n-        beforeOperation(() -> {\n-            orchestrator.stop();\n-            sqliteStorageAdapter.clear(onComplete, onError);\n-        });\n+        // We shouldn't call call beforeOperation when clearing the DataStore. The\n+        // only thing we have to wait for is the category initialization latch.\n+        try {\n+            categoryInitializationsPending.await();\n+        } catch (InterruptedException exception) {\n+            LOG.warn(\"Execution interrupted while waiting for DataStore to be initialized.\");\n+        }\n+        orchestrator.stop();\n+        sqliteStorageAdapter.clear(() -> {\n+            initializeOrchestrator().subscribe();\n+            onComplete.call();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExOTYxOQ=="}, "originalCommit": {"oid": "97f643e75288b3cc7aec465fbf15284f0639abd0"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzA0MDc4OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNToxNzo1OVrOGrXGXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMjo0MjozMlrOGrkQbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyMDQxMg==", "bodyText": "Can you get rid of the OrchestratorAction entirely, if you make this:\nprivate boolean transitionToState(OrchestratorState targetState) {\n?", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r448120412", "createdAt": "2020-07-01T05:17:59Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -147,25 +149,56 @@ public Completable start() {\n                     subscriptionProcessor.startDrainingMutationBuffer();\n                 }\n                 status.compareAndSet(OrchestratorStatus.STARTING, OrchestratorStatus.STARTED);\n+                LOG.debug(\"Orchestrator started.\");\n             })\n-        );\n-        return initializationCompletable;\n+        ).doFinally(startStopSemaphore::release);\n     }\n \n     /**\n      * Stop all model synchronization.\n      */\n-    public void stop() {\n-        if (isStarted()) {\n+    public synchronized void stop() {\n+        if (!performAction(OrchestratorAction.STOP)) {\n+            return;\n+        }\n+        try {\n             LOG.info(\"Intentionally stopping cloud synchronization, now.\");\n-            status.compareAndSet(OrchestratorStatus.STARTED, OrchestratorStatus.STOPPING);\n             subscriptionProcessor.stopAllSubscriptionActivity();\n             storageObserver.stopObservingStorageChanges();\n             mutationProcessor.stopDrainingMutationOutbox();\n             status.compareAndSet(OrchestratorStatus.STOPPING, OrchestratorStatus.STOPPED);\n             LOG.debug(\"Stopped remote synchronization.\");\n+        } finally {\n+            startStopSemaphore.release();\n         }\n+    }\n \n+    private boolean performAction(OrchestratorAction intendedAction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97f643e75288b3cc7aec465fbf15284f0639abd0"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMzNTk4Mw==", "bodyText": "Good call. Totally doable.", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r448335983", "createdAt": "2020-07-01T12:42:32Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -147,25 +149,56 @@ public Completable start() {\n                     subscriptionProcessor.startDrainingMutationBuffer();\n                 }\n                 status.compareAndSet(OrchestratorStatus.STARTING, OrchestratorStatus.STARTED);\n+                LOG.debug(\"Orchestrator started.\");\n             })\n-        );\n-        return initializationCompletable;\n+        ).doFinally(startStopSemaphore::release);\n     }\n \n     /**\n      * Stop all model synchronization.\n      */\n-    public void stop() {\n-        if (isStarted()) {\n+    public synchronized void stop() {\n+        if (!performAction(OrchestratorAction.STOP)) {\n+            return;\n+        }\n+        try {\n             LOG.info(\"Intentionally stopping cloud synchronization, now.\");\n-            status.compareAndSet(OrchestratorStatus.STARTED, OrchestratorStatus.STOPPING);\n             subscriptionProcessor.stopAllSubscriptionActivity();\n             storageObserver.stopObservingStorageChanges();\n             mutationProcessor.stopDrainingMutationOutbox();\n             status.compareAndSet(OrchestratorStatus.STOPPING, OrchestratorStatus.STOPPED);\n             LOG.debug(\"Stopped remote synchronization.\");\n+        } finally {\n+            startStopSemaphore.release();\n         }\n+    }\n \n+    private boolean performAction(OrchestratorAction intendedAction) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyMDQxMg=="}, "originalCommit": {"oid": "97f643e75288b3cc7aec465fbf15284f0639abd0"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzA0MjIwOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNToxODo1N1rOGrXHRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNDoxMjoyNlrOGvTCVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyMDY0Nw==", "bodyText": "This might be an error, if the user is expecting cloud sync to function? Should we wire this back to the user error handler somehow, too?", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r448120647", "createdAt": "2020-07-01T05:18:57Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -147,25 +149,56 @@ public Completable start() {\n                     subscriptionProcessor.startDrainingMutationBuffer();\n                 }\n                 status.compareAndSet(OrchestratorStatus.STARTING, OrchestratorStatus.STARTED);\n+                LOG.debug(\"Orchestrator started.\");\n             })\n-        );\n-        return initializationCompletable;\n+        ).doFinally(startStopSemaphore::release);\n     }\n \n     /**\n      * Stop all model synchronization.\n      */\n-    public void stop() {\n-        if (isStarted()) {\n+    public synchronized void stop() {\n+        if (!performAction(OrchestratorAction.STOP)) {\n+            return;\n+        }\n+        try {\n             LOG.info(\"Intentionally stopping cloud synchronization, now.\");\n-            status.compareAndSet(OrchestratorStatus.STARTED, OrchestratorStatus.STOPPING);\n             subscriptionProcessor.stopAllSubscriptionActivity();\n             storageObserver.stopObservingStorageChanges();\n             mutationProcessor.stopDrainingMutationOutbox();\n             status.compareAndSet(OrchestratorStatus.STOPPING, OrchestratorStatus.STOPPED);\n             LOG.debug(\"Stopped remote synchronization.\");\n+        } finally {\n+            startStopSemaphore.release();\n         }\n+    }\n \n+    private boolean performAction(OrchestratorAction intendedAction) {\n+        OrchestratorStatus expectedCurrentStatus = OrchestratorAction.START.equals(intendedAction) ?\n+            OrchestratorStatus.STOPPED : OrchestratorStatus.STARTED;\n+        try {\n+            LOG.debug(String.format(\"Trying to %s the orchestrator.\", intendedAction.name()));\n+            boolean permitAcquired = startStopSemaphore.tryAcquire(ACQUIRE_PERMIT_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+            if (!permitAcquired) {\n+                LOG.warn(String.format(\"Unable to acquire permit to %s the orchestrator. \", intendedAction.name()));\n+                return false;\n+            }\n+            boolean statusSet = status.compareAndSet(intendedAction.expectedCurrentStatus, intendedAction.targetStatus);\n+            // only stop if it's started AND if we can get a permit.\n+            if (!statusSet) {\n+                LOG.warn(String.format(\"Failed %s orchestrator. Current status: %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97f643e75288b3cc7aec465fbf15284f0639abd0"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM0MTU1OA==", "bodyText": "I was torn about this one. Part of me thinks I shouldn't bubble up an exception if the orchestrator fails simply because I don't think the consuming app can do anything about it. That being said, it feels wrong not to do so. I like the idea of at least passing the error to the user-provided error handler though (if one is provided).\nGoing to work on that today.", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r448341558", "createdAt": "2020-07-01T12:52:49Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -147,25 +149,56 @@ public Completable start() {\n                     subscriptionProcessor.startDrainingMutationBuffer();\n                 }\n                 status.compareAndSet(OrchestratorStatus.STARTING, OrchestratorStatus.STARTED);\n+                LOG.debug(\"Orchestrator started.\");\n             })\n-        );\n-        return initializationCompletable;\n+        ).doFinally(startStopSemaphore::release);\n     }\n \n     /**\n      * Stop all model synchronization.\n      */\n-    public void stop() {\n-        if (isStarted()) {\n+    public synchronized void stop() {\n+        if (!performAction(OrchestratorAction.STOP)) {\n+            return;\n+        }\n+        try {\n             LOG.info(\"Intentionally stopping cloud synchronization, now.\");\n-            status.compareAndSet(OrchestratorStatus.STARTED, OrchestratorStatus.STOPPING);\n             subscriptionProcessor.stopAllSubscriptionActivity();\n             storageObserver.stopObservingStorageChanges();\n             mutationProcessor.stopDrainingMutationOutbox();\n             status.compareAndSet(OrchestratorStatus.STOPPING, OrchestratorStatus.STOPPED);\n             LOG.debug(\"Stopped remote synchronization.\");\n+        } finally {\n+            startStopSemaphore.release();\n         }\n+    }\n \n+    private boolean performAction(OrchestratorAction intendedAction) {\n+        OrchestratorStatus expectedCurrentStatus = OrchestratorAction.START.equals(intendedAction) ?\n+            OrchestratorStatus.STOPPED : OrchestratorStatus.STARTED;\n+        try {\n+            LOG.debug(String.format(\"Trying to %s the orchestrator.\", intendedAction.name()));\n+            boolean permitAcquired = startStopSemaphore.tryAcquire(ACQUIRE_PERMIT_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+            if (!permitAcquired) {\n+                LOG.warn(String.format(\"Unable to acquire permit to %s the orchestrator. \", intendedAction.name()));\n+                return false;\n+            }\n+            boolean statusSet = status.compareAndSet(intendedAction.expectedCurrentStatus, intendedAction.targetStatus);\n+            // only stop if it's started AND if we can get a permit.\n+            if (!statusSet) {\n+                LOG.warn(String.format(\"Failed %s orchestrator. Current status: %s\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyMDY0Nw=="}, "originalCommit": {"oid": "97f643e75288b3cc7aec465fbf15284f0639abd0"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjI0ODE1MQ==", "bodyText": "I added some logic here to invoke the user-provided onError callback (if one is provided)", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r452248151", "createdAt": "2020-07-09T14:12:26Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -147,25 +149,56 @@ public Completable start() {\n                     subscriptionProcessor.startDrainingMutationBuffer();\n                 }\n                 status.compareAndSet(OrchestratorStatus.STARTING, OrchestratorStatus.STARTED);\n+                LOG.debug(\"Orchestrator started.\");\n             })\n-        );\n-        return initializationCompletable;\n+        ).doFinally(startStopSemaphore::release);\n     }\n \n     /**\n      * Stop all model synchronization.\n      */\n-    public void stop() {\n-        if (isStarted()) {\n+    public synchronized void stop() {\n+        if (!performAction(OrchestratorAction.STOP)) {\n+            return;\n+        }\n+        try {\n             LOG.info(\"Intentionally stopping cloud synchronization, now.\");\n-            status.compareAndSet(OrchestratorStatus.STARTED, OrchestratorStatus.STOPPING);\n             subscriptionProcessor.stopAllSubscriptionActivity();\n             storageObserver.stopObservingStorageChanges();\n             mutationProcessor.stopDrainingMutationOutbox();\n             status.compareAndSet(OrchestratorStatus.STOPPING, OrchestratorStatus.STOPPED);\n             LOG.debug(\"Stopped remote synchronization.\");\n+        } finally {\n+            startStopSemaphore.release();\n         }\n+    }\n \n+    private boolean performAction(OrchestratorAction intendedAction) {\n+        OrchestratorStatus expectedCurrentStatus = OrchestratorAction.START.equals(intendedAction) ?\n+            OrchestratorStatus.STOPPED : OrchestratorStatus.STARTED;\n+        try {\n+            LOG.debug(String.format(\"Trying to %s the orchestrator.\", intendedAction.name()));\n+            boolean permitAcquired = startStopSemaphore.tryAcquire(ACQUIRE_PERMIT_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+            if (!permitAcquired) {\n+                LOG.warn(String.format(\"Unable to acquire permit to %s the orchestrator. \", intendedAction.name()));\n+                return false;\n+            }\n+            boolean statusSet = status.compareAndSet(intendedAction.expectedCurrentStatus, intendedAction.targetStatus);\n+            // only stop if it's started AND if we can get a permit.\n+            if (!statusSet) {\n+                LOG.warn(String.format(\"Failed %s orchestrator. Current status: %s\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODEyMDY0Nw=="}, "originalCommit": {"oid": "97f643e75288b3cc7aec465fbf15284f0639abd0"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDcyOTcyOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/appsync/AppSyncMocking.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODoyMDoyOFrOGvcqjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODoxNjoxN1rOGxfoUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwNTkwMQ==", "bodyText": "Do you have anyConsumer() available here? I forget where that utility lives.", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r452405901", "createdAt": "2020-07-09T18:20:28Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/appsync/AppSyncMocking.java", "diffHunk": "@@ -248,5 +249,25 @@ public SyncConfigurator mockSuccessResponses() {\n             );\n             return SyncConfigurator.this;\n         }\n+\n+        /**\n+         * Triggers an exception when invoking the sync method.\n+         * @param <T> Type of models for which a response is mocked\n+         * @return The same Configurator instance, to enable chaining of calls\n+         */\n+        public <T extends Model> SyncConfigurator mockFailure() {\n+            doAnswer(invocation -> {\n+                final int errorConsumerPosition = 3;\n+                final Consumer<DataStoreException> consumer = invocation.getArgument(errorConsumerPosition);\n+                consumer.accept(new DataStoreException(\"Something timed out during sync.\", \"Nothing to do.\"));\n+                return new NoOpCancelable();\n+            }).when(appSync).sync(\n+                any(), // Item class to sync\n+                any(), // last sync time\n+                any(), // Consumer<Iterable<ModelWithMetadata<T>>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a4848025c79e928a9ed3d69267a924628241188"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1MTYzMw==", "bodyText": "It's a private static function buried in SubscriptionProcessorTest It probably should be moved elsewhere.", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r454551633", "createdAt": "2020-07-14T18:16:17Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/appsync/AppSyncMocking.java", "diffHunk": "@@ -248,5 +249,25 @@ public SyncConfigurator mockSuccessResponses() {\n             );\n             return SyncConfigurator.this;\n         }\n+\n+        /**\n+         * Triggers an exception when invoking the sync method.\n+         * @param <T> Type of models for which a response is mocked\n+         * @return The same Configurator instance, to enable chaining of calls\n+         */\n+        public <T extends Model> SyncConfigurator mockFailure() {\n+            doAnswer(invocation -> {\n+                final int errorConsumerPosition = 3;\n+                final Consumer<DataStoreException> consumer = invocation.getArgument(errorConsumerPosition);\n+                consumer.accept(new DataStoreException(\"Something timed out during sync.\", \"Nothing to do.\"));\n+                return new NoOpCancelable();\n+            }).when(appSync).sync(\n+                any(), // Item class to sync\n+                any(), // last sync time\n+                any(), // Consumer<Iterable<ModelWithMetadata<T>>>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwNTkwMQ=="}, "originalCommit": {"oid": "6a4848025c79e928a9ed3d69267a924628241188"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDczMzc5OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/appsync/AppSyncMocking.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODoyMToyN1rOGvctBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODoxOTo1MVrOGxfwuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwNjUzNA==", "bodyText": "Can you change to accept a DataStoreException, and then pass in the failure when you make the call? That way, the AppSyncMocking can remain as utility software, with any specific values codified external to its implementation.", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r452406534", "createdAt": "2020-07-09T18:21:27Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/appsync/AppSyncMocking.java", "diffHunk": "@@ -248,5 +249,25 @@ public SyncConfigurator mockSuccessResponses() {\n             );\n             return SyncConfigurator.this;\n         }\n+\n+        /**\n+         * Triggers an exception when invoking the sync method.\n+         * @param <T> Type of models for which a response is mocked\n+         * @return The same Configurator instance, to enable chaining of calls\n+         */\n+        public <T extends Model> SyncConfigurator mockFailure() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a4848025c79e928a9ed3d69267a924628241188"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU1Mzc4NQ==", "bodyText": "Done", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r454553785", "createdAt": "2020-07-14T18:19:51Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/appsync/AppSyncMocking.java", "diffHunk": "@@ -248,5 +249,25 @@ public SyncConfigurator mockSuccessResponses() {\n             );\n             return SyncConfigurator.this;\n         }\n+\n+        /**\n+         * Triggers an exception when invoking the sync method.\n+         * @param <T> Type of models for which a response is mocked\n+         * @return The same Configurator instance, to enable chaining of calls\n+         */\n+        public <T extends Model> SyncConfigurator mockFailure() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwNjUzNA=="}, "originalCommit": {"oid": "6a4848025c79e928a9ed3d69267a924628241188"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDc0MTgzOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODoyMzo1NVrOGvcyHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODo0NjoxNlrOGxgsIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwNzgzNw==", "bodyText": "We should keep this event driven, even from test. There is an initialization event that is published, currently. The intent of that event was to prevent the need for waits, in test. Between it, and the HubAccumulator, you should be able to await the initialization results. It's a more determinist mechanism than tuning ASSERTION_TIMEOUT_MS.", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r452407837", "createdAt": "2020-07-09T18:23:55Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "diffHunk": "@@ -242,6 +247,8 @@ private void assertRemoteSubscriptionsCancelled() {\n     }\n \n     private void assertRemoteSubscriptionsStarted() {\n+        // Introduce a delay to allow the orchestrator to start since this is done in a non-blocking manner now.\n+        Single.just(true).delay(ASSERTION_TIMEOUT_MS, TimeUnit.MILLISECONDS).blockingGet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a4848025c79e928a9ed3d69267a924628241188"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU2ODk5Mg==", "bodyText": "That makes sense. I just changed it so the orchestrator emits a hub event on start and stop. Then modified the test to use the HubAccumulator. It will be in my next commit.", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r454568992", "createdAt": "2020-07-14T18:46:16Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "diffHunk": "@@ -242,6 +247,8 @@ private void assertRemoteSubscriptionsCancelled() {\n     }\n \n     private void assertRemoteSubscriptionsStarted() {\n+        // Introduce a delay to allow the orchestrator to start since this is done in a non-blocking manner now.\n+        Single.just(true).delay(ASSERTION_TIMEOUT_MS, TimeUnit.MILLISECONDS).blockingGet();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwNzgzNw=="}, "originalCommit": {"oid": "6a4848025c79e928a9ed3d69267a924628241188"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDc0NTI5OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxODoyNTowMFrOGvc0aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxOTowMToyNVrOGxhNZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwODQyNA==", "bodyText": "Can getConfiguration() ever return null? Is there a need to guard against that scenario, here, to prevent a NullPointerException?", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r452408424", "createdAt": "2020-07-09T18:25:00Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "diffHunk": "@@ -113,9 +114,18 @@ Completable hydrate() {\n                         .flatMapCompletable(merger::merge)\n                     )\n                     .andThen(syncTimeRegistry.saveLastSyncTime(modelClass, SyncTime.now()))\n-                    .doOnError(failureToSync ->\n-                        LOG.warn(\"Initial cloud sync failed.\", failureToSync)\n-                    )\n+                    .doOnError(failureToSync -> {\n+                        LOG.warn(\"Initial cloud sync failed.\", failureToSync);\n+                        DataStoreErrorHandler dataStoreErrorHandler =\n+                            dataStoreConfigurationProvider.getConfiguration().getDataStoreErrorHandler();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a4848025c79e928a9ed3d69267a924628241188"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU3NzUxMA==", "bodyText": "I don't think so. That parameter comes from the plugin's constructor and passes the plugin configuration that's initialized here. Since the orchestrator is only started after the plugin is configured, I think we're safe here.", "url": "https://github.com/aws-amplify/amplify-android/pull/599#discussion_r454577510", "createdAt": "2020-07-14T19:01:25Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "diffHunk": "@@ -113,9 +114,18 @@ Completable hydrate() {\n                         .flatMapCompletable(merger::merge)\n                     )\n                     .andThen(syncTimeRegistry.saveLastSyncTime(modelClass, SyncTime.now()))\n-                    .doOnError(failureToSync ->\n-                        LOG.warn(\"Initial cloud sync failed.\", failureToSync)\n-                    )\n+                    .doOnError(failureToSync -> {\n+                        LOG.warn(\"Initial cloud sync failed.\", failureToSync);\n+                        DataStoreErrorHandler dataStoreErrorHandler =\n+                            dataStoreConfigurationProvider.getConfiguration().getDataStoreErrorHandler();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQwODQyNA=="}, "originalCommit": {"oid": "6a4848025c79e928a9ed3d69267a924628241188"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1043, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}