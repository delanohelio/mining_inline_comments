{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0OTI0MjE1", "number": 768, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzo1MToxM1rOEddupg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzo1OToyNFrOEddzhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzMxMjM4OnYy", "diffSide": "RIGHT", "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzo1MToxM1rOHIolsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzoyMjo0OVrOHJFLhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNTY2Ng==", "bodyText": "Is this access level escalation required, for the implementation class? (The public methods will still be public.)", "url": "https://github.com/aws-amplify/amplify-android/pull/768#discussion_r478815666", "createdAt": "2020-08-28T03:51:13Z", "author": {"login": "jamesonwilliams"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "diffHunk": "@@ -26,16 +26,19 @@\n import com.amplifyframework.api.rest.RestOptions;\n import com.amplifyframework.api.rest.RestResponse;\n import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.async.Cancelable;\n import com.amplifyframework.rx.RxAdapters.CancelableBehaviors;\n \n import io.reactivex.rxjava3.core.Observable;\n import io.reactivex.rxjava3.core.Single;\n+import io.reactivex.rxjava3.subjects.BehaviorSubject;\n \n /**\n  * An implementation of the RxApiCategoryBehavior which satisfies the API contract by wrapping\n  * {@link ApiCategoryBehavior} in Rx primitives.\n  */\n-final class RxApiBinding implements RxApiCategoryBehavior {\n+public final class RxApiBinding implements RxApiCategoryBehavior {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d18f0d123f78a41c1dbf1489186e48f519a674"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI4NDEwMg==", "bodyText": "Yeah...that's because anything outside of the package wouldn't have access to the RxSubscriptionOperation object. That being said, rather than making this public, I created a top level class called RxOperations where we can put of the Rx-operation related objects. That, we can make public.", "url": "https://github.com/aws-amplify/amplify-android/pull/768#discussion_r479284102", "createdAt": "2020-08-28T13:22:49Z", "author": {"login": "rjuliano"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "diffHunk": "@@ -26,16 +26,19 @@\n import com.amplifyframework.api.rest.RestOptions;\n import com.amplifyframework.api.rest.RestResponse;\n import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.async.Cancelable;\n import com.amplifyframework.rx.RxAdapters.CancelableBehaviors;\n \n import io.reactivex.rxjava3.core.Observable;\n import io.reactivex.rxjava3.core.Single;\n+import io.reactivex.rxjava3.subjects.BehaviorSubject;\n \n /**\n  * An implementation of the RxApiCategoryBehavior which satisfies the API contract by wrapping\n  * {@link ApiCategoryBehavior} in Rx primitives.\n  */\n-final class RxApiBinding implements RxApiCategoryBehavior {\n+public final class RxApiBinding implements RxApiCategoryBehavior {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNTY2Ng=="}, "originalCommit": {"oid": "a3d18f0d123f78a41c1dbf1489186e48f519a674"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzMxNDAzOnYy", "diffSide": "RIGHT", "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzo1MjoxNlrOHIomtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzoyNDo0MFrOHJFSXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNTkyNA==", "bodyText": "does it need to be public?", "url": "https://github.com/aws-amplify/amplify-android/pull/768#discussion_r478815924", "createdAt": "2020-08-28T03:52:16Z", "author": {"login": "jamesonwilliams"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "diffHunk": "@@ -168,4 +173,83 @@\n             CancelableBehaviors.StreamEmitter<String, T, ApiException> method) {\n         return CancelableBehaviors.toObservable(method);\n     }\n+\n+    /**\n+     * A class that represents a subscription operation and exposes\n+     * observables for consumers to listen to subscription data and\n+     * status events.\n+     * @param <T> The type representing the subscription data.\n+     */\n+    public static final class RxSubscriptionOperation<T> implements Cancelable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d18f0d123f78a41c1dbf1489186e48f519a674"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI4NTg1NA==", "bodyText": "This one does, but now lives under RxOperations.", "url": "https://github.com/aws-amplify/amplify-android/pull/768#discussion_r479285854", "createdAt": "2020-08-28T13:24:40Z", "author": {"login": "rjuliano"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "diffHunk": "@@ -168,4 +173,83 @@\n             CancelableBehaviors.StreamEmitter<String, T, ApiException> method) {\n         return CancelableBehaviors.toObservable(method);\n     }\n+\n+    /**\n+     * A class that represents a subscription operation and exposes\n+     * observables for consumers to listen to subscription data and\n+     * status events.\n+     * @param <T> The type representing the subscription data.\n+     */\n+    public static final class RxSubscriptionOperation<T> implements Cancelable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNTkyNA=="}, "originalCommit": {"oid": "a3d18f0d123f78a41c1dbf1489186e48f519a674"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzMxNTk5OnYy", "diffSide": "RIGHT", "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzo1MzozOVrOHIon4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzo1MzozOVrOHIon4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNjIyNg==", "bodyText": "Maybe do this as an inner class (FooConsumer extends Consumer), and initialize it inside the constructor body? S.t. private final Consumer<String> onConnected; is up with the other ordinary declarations?", "url": "https://github.com/aws-amplify/amplify-android/pull/768#discussion_r478816226", "createdAt": "2020-08-28T03:53:39Z", "author": {"login": "jamesonwilliams"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "diffHunk": "@@ -168,4 +173,83 @@\n             CancelableBehaviors.StreamEmitter<String, T, ApiException> method) {\n         return CancelableBehaviors.toObservable(method);\n     }\n+\n+    /**\n+     * A class that represents a subscription operation and exposes\n+     * observables for consumers to listen to subscription data and\n+     * status events.\n+     * @param <T> The type representing the subscription data.\n+     */\n+    public static final class RxSubscriptionOperation<T> implements Cancelable {\n+        private BehaviorSubject<ConnectionState> connectionStateSubject;\n+        private Observable<T> subscriptionData;\n+        private Cancelable amplifyOperation;\n+        private String subscriptionId;\n+\n+        private Consumer<String> onConnected = new Consumer<String>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d18f0d123f78a41c1dbf1489186e48f519a674"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzMyMDk2OnYy", "diffSide": "RIGHT", "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzo1Njo0M1rOHIoqmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzoyNjowOFrOHJFYDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNjkyMg==", "bodyText": "Is there any way to bundle this into the ConnectionState object?", "url": "https://github.com/aws-amplify/amplify-android/pull/768#discussion_r478816922", "createdAt": "2020-08-28T03:56:43Z", "author": {"login": "jamesonwilliams"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "diffHunk": "@@ -168,4 +173,83 @@\n             CancelableBehaviors.StreamEmitter<String, T, ApiException> method) {\n         return CancelableBehaviors.toObservable(method);\n     }\n+\n+    /**\n+     * A class that represents a subscription operation and exposes\n+     * observables for consumers to listen to subscription data and\n+     * status events.\n+     * @param <T> The type representing the subscription data.\n+     */\n+    public static final class RxSubscriptionOperation<T> implements Cancelable {\n+        private BehaviorSubject<ConnectionState> connectionStateSubject;\n+        private Observable<T> subscriptionData;\n+        private Cancelable amplifyOperation;\n+        private String subscriptionId;\n+\n+        private Consumer<String> onConnected = new Consumer<String>() {\n+            @Override\n+            public void accept(@NonNull String subscriptionId) {\n+                RxSubscriptionOperation.this.subscriptionId = subscriptionId;\n+                connectionStateSubject.onNext(ConnectionState.CONNECTED);\n+            }\n+        };\n+\n+        RxSubscriptionOperation(CancelableBehaviors.StreamEmitter<String, T, ApiException> callbacks) {\n+            connectionStateSubject = BehaviorSubject.create();\n+            subscriptionData = Observable.create(emitter -> {\n+                amplifyOperation = callbacks.streamTo(onConnected::accept,\n+                                                      emitter::onNext,\n+                                                      emitter::onError,\n+                                                      emitter::onComplete);\n+            });\n+        }\n+\n+        /**\n+         * Returns an {@link Observable} which consumers can use to\n+         * retrieve data received by the subscription operation.\n+         * @return Reference to the {@link Observable} with subscription data.\n+         */\n+        public Observable<T> observeSubscriptionData() {\n+            return subscriptionData;\n+        }\n+\n+        /**\n+         * Once the subscription starts, this method returns\n+         * the value of the subscriptionId.\n+         * @return The value of the subscriptionId.\n+         */\n+        public String getSubscriptionId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d18f0d123f78a41c1dbf1489186e48f519a674"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI4NzMxMA==", "bodyText": "Good call on this one. Rather that doing it this way, I created a ConnectionStateEvent that has a connectionState and subscriptionId properties. We can expand on that down the road.", "url": "https://github.com/aws-amplify/amplify-android/pull/768#discussion_r479287310", "createdAt": "2020-08-28T13:26:08Z", "author": {"login": "rjuliano"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "diffHunk": "@@ -168,4 +173,83 @@\n             CancelableBehaviors.StreamEmitter<String, T, ApiException> method) {\n         return CancelableBehaviors.toObservable(method);\n     }\n+\n+    /**\n+     * A class that represents a subscription operation and exposes\n+     * observables for consumers to listen to subscription data and\n+     * status events.\n+     * @param <T> The type representing the subscription data.\n+     */\n+    public static final class RxSubscriptionOperation<T> implements Cancelable {\n+        private BehaviorSubject<ConnectionState> connectionStateSubject;\n+        private Observable<T> subscriptionData;\n+        private Cancelable amplifyOperation;\n+        private String subscriptionId;\n+\n+        private Consumer<String> onConnected = new Consumer<String>() {\n+            @Override\n+            public void accept(@NonNull String subscriptionId) {\n+                RxSubscriptionOperation.this.subscriptionId = subscriptionId;\n+                connectionStateSubject.onNext(ConnectionState.CONNECTED);\n+            }\n+        };\n+\n+        RxSubscriptionOperation(CancelableBehaviors.StreamEmitter<String, T, ApiException> callbacks) {\n+            connectionStateSubject = BehaviorSubject.create();\n+            subscriptionData = Observable.create(emitter -> {\n+                amplifyOperation = callbacks.streamTo(onConnected::accept,\n+                                                      emitter::onNext,\n+                                                      emitter::onError,\n+                                                      emitter::onComplete);\n+            });\n+        }\n+\n+        /**\n+         * Returns an {@link Observable} which consumers can use to\n+         * retrieve data received by the subscription operation.\n+         * @return Reference to the {@link Observable} with subscription data.\n+         */\n+        public Observable<T> observeSubscriptionData() {\n+            return subscriptionData;\n+        }\n+\n+        /**\n+         * Once the subscription starts, this method returns\n+         * the value of the subscriptionId.\n+         * @return The value of the subscriptionId.\n+         */\n+        public String getSubscriptionId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNjkyMg=="}, "originalCommit": {"oid": "a3d18f0d123f78a41c1dbf1489186e48f519a674"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzMyMzYxOnYy", "diffSide": "RIGHT", "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzo1ODozNFrOHIosJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzoyNzoxN1rOHJFcLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNzMxNg==", "bodyText": "@palpatim notes:\n\nFWIW, we also notify on \"connecting\" and \"disconnected\" states. \"Connecting\" isn't terribly meaningful, and \"disconnected\" degrades to a completion on the subscription data publisher, so that may not be necessary in Android\n\nNot sure if we need to do this today -- or can defer.", "url": "https://github.com/aws-amplify/amplify-android/pull/768#discussion_r478817316", "createdAt": "2020-08-28T03:58:34Z", "author": {"login": "jamesonwilliams"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "diffHunk": "@@ -168,4 +173,83 @@\n             CancelableBehaviors.StreamEmitter<String, T, ApiException> method) {\n         return CancelableBehaviors.toObservable(method);\n     }\n+\n+    /**\n+     * A class that represents a subscription operation and exposes\n+     * observables for consumers to listen to subscription data and\n+     * status events.\n+     * @param <T> The type representing the subscription data.\n+     */\n+    public static final class RxSubscriptionOperation<T> implements Cancelable {\n+        private BehaviorSubject<ConnectionState> connectionStateSubject;\n+        private Observable<T> subscriptionData;\n+        private Cancelable amplifyOperation;\n+        private String subscriptionId;\n+\n+        private Consumer<String> onConnected = new Consumer<String>() {\n+            @Override\n+            public void accept(@NonNull String subscriptionId) {\n+                RxSubscriptionOperation.this.subscriptionId = subscriptionId;\n+                connectionStateSubject.onNext(ConnectionState.CONNECTED);\n+            }\n+        };\n+\n+        RxSubscriptionOperation(CancelableBehaviors.StreamEmitter<String, T, ApiException> callbacks) {\n+            connectionStateSubject = BehaviorSubject.create();\n+            subscriptionData = Observable.create(emitter -> {\n+                amplifyOperation = callbacks.streamTo(onConnected::accept,\n+                                                      emitter::onNext,\n+                                                      emitter::onError,\n+                                                      emitter::onComplete);\n+            });\n+        }\n+\n+        /**\n+         * Returns an {@link Observable} which consumers can use to\n+         * retrieve data received by the subscription operation.\n+         * @return Reference to the {@link Observable} with subscription data.\n+         */\n+        public Observable<T> observeSubscriptionData() {\n+            return subscriptionData;\n+        }\n+\n+        /**\n+         * Once the subscription starts, this method returns\n+         * the value of the subscriptionId.\n+         * @return The value of the subscriptionId.\n+         */\n+        public String getSubscriptionId() {\n+            return subscriptionId;\n+        }\n+\n+        /**\n+         * Returns an {@link Observable} which consumers can use to\n+         * receive notfication about the status of the subscription connection. Currently,\n+         * only {@link ConnectionState#CONNECTED} is emitted.\n+         * @return Reference to the {@link Observable} that receives connection events.\n+         */\n+        public Observable<ConnectionState> observeConnectionState() {\n+            return connectionStateSubject;\n+        }\n+\n+        @Override\n+        public void cancel() {\n+            if (amplifyOperation != null) {\n+                amplifyOperation.cancel();\n+            }\n+            connectionStateSubject.onComplete();\n+        }\n+\n+        /**\n+         * Enum representing connection states of a\n+         * subscription operation.\n+         */\n+        public enum ConnectionState {\n+            /**\n+             * The subscription successfully established a connection and is\n+             * ready to receive data.\n+             */\n+            CONNECTED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d18f0d123f78a41c1dbf1489186e48f519a674"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTI4ODM2NA==", "bodyText": "I looked into this, but it will require some additional plumbing to surface those events from the SubscriptionEndpoint class. I will make note to create a task for this.", "url": "https://github.com/aws-amplify/amplify-android/pull/768#discussion_r479288364", "createdAt": "2020-08-28T13:27:17Z", "author": {"login": "rjuliano"}, "path": "rxbindings/src/main/java/com/amplifyframework/rx/RxApiBinding.java", "diffHunk": "@@ -168,4 +173,83 @@\n             CancelableBehaviors.StreamEmitter<String, T, ApiException> method) {\n         return CancelableBehaviors.toObservable(method);\n     }\n+\n+    /**\n+     * A class that represents a subscription operation and exposes\n+     * observables for consumers to listen to subscription data and\n+     * status events.\n+     * @param <T> The type representing the subscription data.\n+     */\n+    public static final class RxSubscriptionOperation<T> implements Cancelable {\n+        private BehaviorSubject<ConnectionState> connectionStateSubject;\n+        private Observable<T> subscriptionData;\n+        private Cancelable amplifyOperation;\n+        private String subscriptionId;\n+\n+        private Consumer<String> onConnected = new Consumer<String>() {\n+            @Override\n+            public void accept(@NonNull String subscriptionId) {\n+                RxSubscriptionOperation.this.subscriptionId = subscriptionId;\n+                connectionStateSubject.onNext(ConnectionState.CONNECTED);\n+            }\n+        };\n+\n+        RxSubscriptionOperation(CancelableBehaviors.StreamEmitter<String, T, ApiException> callbacks) {\n+            connectionStateSubject = BehaviorSubject.create();\n+            subscriptionData = Observable.create(emitter -> {\n+                amplifyOperation = callbacks.streamTo(onConnected::accept,\n+                                                      emitter::onNext,\n+                                                      emitter::onError,\n+                                                      emitter::onComplete);\n+            });\n+        }\n+\n+        /**\n+         * Returns an {@link Observable} which consumers can use to\n+         * retrieve data received by the subscription operation.\n+         * @return Reference to the {@link Observable} with subscription data.\n+         */\n+        public Observable<T> observeSubscriptionData() {\n+            return subscriptionData;\n+        }\n+\n+        /**\n+         * Once the subscription starts, this method returns\n+         * the value of the subscriptionId.\n+         * @return The value of the subscriptionId.\n+         */\n+        public String getSubscriptionId() {\n+            return subscriptionId;\n+        }\n+\n+        /**\n+         * Returns an {@link Observable} which consumers can use to\n+         * receive notfication about the status of the subscription connection. Currently,\n+         * only {@link ConnectionState#CONNECTED} is emitted.\n+         * @return Reference to the {@link Observable} that receives connection events.\n+         */\n+        public Observable<ConnectionState> observeConnectionState() {\n+            return connectionStateSubject;\n+        }\n+\n+        @Override\n+        public void cancel() {\n+            if (amplifyOperation != null) {\n+                amplifyOperation.cancel();\n+            }\n+            connectionStateSubject.onComplete();\n+        }\n+\n+        /**\n+         * Enum representing connection states of a\n+         * subscription operation.\n+         */\n+        public enum ConnectionState {\n+            /**\n+             * The subscription successfully established a connection and is\n+             * ready to receive data.\n+             */\n+            CONNECTED", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNzMxNg=="}, "originalCommit": {"oid": "a3d18f0d123f78a41c1dbf1489186e48f519a674"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzMyNDg2OnYy", "diffSide": "RIGHT", "path": "rxbindings/src/test/java/com/amplifyframework/rx/RxApiBindingTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzo1OToyNFrOHIoszg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzo1OToyNFrOHIoszg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNzQ4Ng==", "bodyText": "I'd add an import ...  for RxSubscriptionOperation.. directly just to cut down on some of this boiler plate a tiny bit.", "url": "https://github.com/aws-amplify/amplify-android/pull/768#discussion_r478817486", "createdAt": "2020-08-28T03:59:24Z", "author": {"login": "jamesonwilliams"}, "path": "rxbindings/src/test/java/com/amplifyframework/rx/RxApiBindingTest.java", "diffHunk": "@@ -225,12 +228,20 @@ public void subscribeStartsEmitsValuesAndCompletes() throws InterruptedException\n         );\n \n         // Act: subscribe via binding\n-        TestObserver<GraphQLResponse<Model>> observer =\n-            rxApi.subscribe(request).test();\n+        RxApiBinding.RxSubscriptionOperation<GraphQLResponse<Model>> rxOperation = rxApi.subscribe(request);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3d18f0d123f78a41c1dbf1489186e48f519a674"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 889, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}