{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0OTMwMDQ5", "number": 710, "reviewThreads": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwODoxNDozOFrOEWbpEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzo0OToxMlrOEddtZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTU3MDA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/datastore/DataStoreChannelEventName.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwODoxNDozOFrOG9u5Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMjoxOTo1M1rOHBEwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM4NDYzOQ==", "bodyText": "Should we also remove REMOTE_SYNC_STARTED and REMOTE_SYNC_STOPPED as part of this? Right now, I think we have some duplicative code. A good goal would be to align the events to iOS and Android. In so doing, that means we have to rename/remove the events we have, that already provide a similar functionality.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r467384639", "createdAt": "2020-08-08T08:14:38Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/datastore/DataStoreChannelEventName.java", "diffHunk": "@@ -52,7 +52,22 @@\n     /**\n      * The remote synchonization processes stopped.\n      */\n-    REMOTE_SYNC_STOPPED(\"remote_sync_stopped\");\n+    REMOTE_SYNC_STOPPED(\"remote_sync_stopped\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa959826c1ed00d0950e7b2501fabc8641c2fdf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ3MzQ0MQ==", "bodyText": "Makes sense. We're using this for a slightly different purpose I believe (it's more of a orchestrator start and stop), but I don't believe anyone is using this as it is not documented.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r467473441", "createdAt": "2020-08-08T15:06:24Z", "author": {"login": "rjuliano"}, "path": "core/src/main/java/com/amplifyframework/datastore/DataStoreChannelEventName.java", "diffHunk": "@@ -52,7 +52,22 @@\n     /**\n      * The remote synchonization processes stopped.\n      */\n-    REMOTE_SYNC_STOPPED(\"remote_sync_stopped\");\n+    REMOTE_SYNC_STOPPED(\"remote_sync_stopped\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM4NDYzOQ=="}, "originalCommit": {"oid": "3aa959826c1ed00d0950e7b2501fabc8641c2fdf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg4ODQ5OQ==", "bodyText": "I removed REMOTE_SYNC_STOPPED and REMOTE_SYNC_STARTED", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r470888499", "createdAt": "2020-08-14T22:19:53Z", "author": {"login": "rjuliano"}, "path": "core/src/main/java/com/amplifyframework/datastore/DataStoreChannelEventName.java", "diffHunk": "@@ -52,7 +52,22 @@\n     /**\n      * The remote synchonization processes stopped.\n      */\n-    REMOTE_SYNC_STOPPED(\"remote_sync_stopped\");\n+    REMOTE_SYNC_STOPPED(\"remote_sync_stopped\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM4NDYzOQ=="}, "originalCommit": {"oid": "3aa959826c1ed00d0950e7b2501fabc8641c2fdf"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTU3NDY3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/datastore/DataStoreChannelEventName.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwODoxNjowM1rOG9u8Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQxODo0MTo0NVrOHA_ltA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM4NTM1MA==", "bodyText": "I'm not sure what \"sync queries ready\" means, just from the name. Is this a good name?\nThe Javadoc is the same on L63 and L68 so I think at least one needs to be updated.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r467385350", "createdAt": "2020-08-08T08:16:03Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/datastore/DataStoreChannelEventName.java", "diffHunk": "@@ -52,7 +52,22 @@\n     /**\n      * The remote synchonization processes stopped.\n      */\n-    REMOTE_SYNC_STOPPED(\"remote_sync_stopped\");\n+    REMOTE_SYNC_STOPPED(\"remote_sync_stopped\"),\n+\n+    /**\n+     * The DataStore is about to start the Sync Queries.\n+     */\n+    SYNC_QUERIES_STARTED(\"syncQueriesStarted\"),\n+\n+    /**\n+     * All models have been synced.\n+     */\n+    SYNC_QUERIES_READY(\"syncQueriesReady\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa959826c1ed00d0950e7b2501fabc8641c2fdf"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ3MzIxOQ==", "bodyText": "Definitely agree on the naming. That being said, I think we're supposed to align with the names currently used in JS [1]; however, I'll check and see what iOS is currently doing.\nRegarding the javadoc, that's my trademarked Clipboard Inheritance pattern [2] \ud83e\udd13\n[1] - https://github.com/aws-amplify/amplify-js/blob/a7feacea4ed506340d250249d0b15286fe3ef5fa/packages/datastore/src/sync/index.ts#L71-L82\n[2] - There's a wikipedia page for it, so it's real. https://en.wikipedia.org/wiki/Copy-and-paste_programming", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r467473219", "createdAt": "2020-08-08T15:04:08Z", "author": {"login": "rjuliano"}, "path": "core/src/main/java/com/amplifyframework/datastore/DataStoreChannelEventName.java", "diffHunk": "@@ -52,7 +52,22 @@\n     /**\n      * The remote synchonization processes stopped.\n      */\n-    REMOTE_SYNC_STOPPED(\"remote_sync_stopped\");\n+    REMOTE_SYNC_STOPPED(\"remote_sync_stopped\"),\n+\n+    /**\n+     * The DataStore is about to start the Sync Queries.\n+     */\n+    SYNC_QUERIES_STARTED(\"syncQueriesStarted\"),\n+\n+    /**\n+     * All models have been synced.\n+     */\n+    SYNC_QUERIES_READY(\"syncQueriesReady\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM4NTM1MA=="}, "originalCommit": {"oid": "3aa959826c1ed00d0950e7b2501fabc8641c2fdf"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ4MTQ4Nw==", "bodyText": "This was the one that we talked about in the working group that we could possible rename but if we do it then should be done quickly since the JS versions aren't documented yet. Suggest you sync up with Ivan this week.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r467481487", "createdAt": "2020-08-08T16:33:09Z", "author": {"login": "undefobj"}, "path": "core/src/main/java/com/amplifyframework/datastore/DataStoreChannelEventName.java", "diffHunk": "@@ -52,7 +52,22 @@\n     /**\n      * The remote synchonization processes stopped.\n      */\n-    REMOTE_SYNC_STOPPED(\"remote_sync_stopped\");\n+    REMOTE_SYNC_STOPPED(\"remote_sync_stopped\"),\n+\n+    /**\n+     * The DataStore is about to start the Sync Queries.\n+     */\n+    SYNC_QUERIES_STARTED(\"syncQueriesStarted\"),\n+\n+    /**\n+     * All models have been synced.\n+     */\n+    SYNC_QUERIES_READY(\"syncQueriesReady\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM4NTM1MA=="}, "originalCommit": {"oid": "3aa959826c1ed00d0950e7b2501fabc8641c2fdf"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDgwMzg5Mg==", "bodyText": "Fixed the javadoc on this one.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r470803892", "createdAt": "2020-08-14T18:41:45Z", "author": {"login": "rjuliano"}, "path": "core/src/main/java/com/amplifyframework/datastore/DataStoreChannelEventName.java", "diffHunk": "@@ -52,7 +52,22 @@\n     /**\n      * The remote synchonization processes stopped.\n      */\n-    REMOTE_SYNC_STOPPED(\"remote_sync_stopped\");\n+    REMOTE_SYNC_STOPPED(\"remote_sync_stopped\"),\n+\n+    /**\n+     * The DataStore is about to start the Sync Queries.\n+     */\n+    SYNC_QUERIES_STARTED(\"syncQueriesStarted\"),\n+\n+    /**\n+     * All models have been synced.\n+     */\n+    SYNC_QUERIES_READY(\"syncQueriesReady\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM4NTM1MA=="}, "originalCommit": {"oid": "3aa959826c1ed00d0950e7b2501fabc8641c2fdf"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTU3ODI4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/datastore/DataStoreChannelEventName.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwODoxNzoxOVrOG9u-NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQxNToxMDoyNVrOG90V3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM4NTkwOQ==", "bodyText": "One says model (singular) and one says models (plural). From the Javadoc, it looks like it means the plural form. If that's so, can we name this ALL_MODELS_SYCNED? This probably means going back to the cross-platform design doc and making sure the other guys do likewise. Or, if JS already has these publicly documented and live, we could at least align some better names with iOS.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r467385909", "createdAt": "2020-08-08T08:17:19Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/datastore/DataStoreChannelEventName.java", "diffHunk": "@@ -52,7 +52,22 @@\n     /**\n      * The remote synchonization processes stopped.\n      */\n-    REMOTE_SYNC_STOPPED(\"remote_sync_stopped\");\n+    REMOTE_SYNC_STOPPED(\"remote_sync_stopped\"),\n+\n+    /**\n+     * The DataStore is about to start the Sync Queries.\n+     */\n+    SYNC_QUERIES_STARTED(\"syncQueriesStarted\"),\n+\n+    /**\n+     * All models have been synced.\n+     */\n+    SYNC_QUERIES_READY(\"syncQueriesReady\"),\n+\n+    /**\n+     * All models have been synced.\n+     */\n+    MODEL_SYNCED(\"modelSynced\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa959826c1ed00d0950e7b2501fabc8641c2fdf"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ3Mzg4Ng==", "bodyText": "This event is emitted once for each individual model, so it makes sense for it to be singular.\nRegarding the event names in general, I'll check in with iOS to see how they're going about implementing. My understanding from one of the meeting we had is that they were going to follow JS though.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r467473886", "createdAt": "2020-08-08T15:10:25Z", "author": {"login": "rjuliano"}, "path": "core/src/main/java/com/amplifyframework/datastore/DataStoreChannelEventName.java", "diffHunk": "@@ -52,7 +52,22 @@\n     /**\n      * The remote synchonization processes stopped.\n      */\n-    REMOTE_SYNC_STOPPED(\"remote_sync_stopped\");\n+    REMOTE_SYNC_STOPPED(\"remote_sync_stopped\"),\n+\n+    /**\n+     * The DataStore is about to start the Sync Queries.\n+     */\n+    SYNC_QUERIES_STARTED(\"syncQueriesStarted\"),\n+\n+    /**\n+     * All models have been synced.\n+     */\n+    SYNC_QUERIES_READY(\"syncQueriesReady\"),\n+\n+    /**\n+     * All models have been synced.\n+     */\n+    MODEL_SYNCED(\"modelSynced\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM4NTkwOQ=="}, "originalCommit": {"oid": "3aa959826c1ed00d0950e7b2501fabc8641c2fdf"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTU5MTQ2OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwODoyMTo0N1rOG9vGmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDo1NDoyMlrOG_I35w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM4ODA1Nw==", "bodyText": "Since we have the observer pattern here, I don't think you even need to put this in the SyncProcessor at all, do you? You could have this be like a SyncMetricsPublisher.java or a SyncMetricsObserver.java, and then cleanly separate all of this logic into its own little place.\nOverall though, I'm worry about how long hydrate() is getting, here. Any approaches you can think of to break this apart into some smaller bits would probably useful, towards keeping the code clear. -- Keep in mind, the reader expects hydrate() to be mostly about populating data, not broadcasting events.\nThe other benefit to breaking out a separate observer class is that you will no longer have SyncProcessor depending on the LocalStorageAdapter. I don't think I ever completely got there, but you can se several mid-level utilities like the VersionRepository, etc., which abstract away the LocalStorageAdapter from the sync processor. All in all, I think the LocalStorageAdapter is a fairly low level detail for the sync processor and -- where possible -- it would be best to avoid direct dependency on it.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r467388057", "createdAt": "2020-08-08T08:21:47Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "diffHunk": "@@ -92,12 +106,67 @@ public static Builder builder() {\n     Completable hydrate() {\n         ModelWithMetadataComparator modelWithMetadataComparator =\n             new ModelWithMetadataComparator(modelProvider, modelSchemaRegistry);\n-\n+        final Map<String, ModelSyncMetrics> metricsByModel = new ConcurrentHashMap<>();\n         final Set<Completable> hydrationTasks = new HashSet<>();\n         for (Class<? extends Model> clazz : modelProvider.models()) {\n+            SyncTime lastSyncTime = syncTimeRegistry.lookupLastSyncTime(clazz)\n+                .map(this::filterOutOldSyncTimes)\n+                .blockingGet();\n+            metricsByModel.put(clazz.getSimpleName(), new ModelSyncMetrics(lastSyncTime));\n             hydrationTasks.add(createHydrationTask(modelWithMetadataComparator, clazz));\n         }\n-        return Completable.concat(hydrationTasks);\n+\n+        // We'll collect metrics for the initial sync by observing changes to the local DataStore.\n+        Cancelable metricsObserver =\n+            localStorageAdapter.observe(itemChange -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa959826c1ed00d0950e7b2501fabc8641c2fdf"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzQ3NDExOA==", "bodyText": "LOL...I should have followed my gut on this one. I was going to do just that and talked myself out of it. \ud83e\udd23  The moment I had to add the local LocalStorageAdapter as a dependency, it felt wrong. Glad to refactor this though.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r467474118", "createdAt": "2020-08-08T15:12:58Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "diffHunk": "@@ -92,12 +106,67 @@ public static Builder builder() {\n     Completable hydrate() {\n         ModelWithMetadataComparator modelWithMetadataComparator =\n             new ModelWithMetadataComparator(modelProvider, modelSchemaRegistry);\n-\n+        final Map<String, ModelSyncMetrics> metricsByModel = new ConcurrentHashMap<>();\n         final Set<Completable> hydrationTasks = new HashSet<>();\n         for (Class<? extends Model> clazz : modelProvider.models()) {\n+            SyncTime lastSyncTime = syncTimeRegistry.lookupLastSyncTime(clazz)\n+                .map(this::filterOutOldSyncTimes)\n+                .blockingGet();\n+            metricsByModel.put(clazz.getSimpleName(), new ModelSyncMetrics(lastSyncTime));\n             hydrationTasks.add(createHydrationTask(modelWithMetadataComparator, clazz));\n         }\n-        return Completable.concat(hydrationTasks);\n+\n+        // We'll collect metrics for the initial sync by observing changes to the local DataStore.\n+        Cancelable metricsObserver =\n+            localStorageAdapter.observe(itemChange -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM4ODA1Nw=="}, "originalCommit": {"oid": "3aa959826c1ed00d0950e7b2501fabc8641c2fdf"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg1ODg1NQ==", "bodyText": "I refactored this on the latest commit.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r468858855", "createdAt": "2020-08-11T20:54:22Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "diffHunk": "@@ -92,12 +106,67 @@ public static Builder builder() {\n     Completable hydrate() {\n         ModelWithMetadataComparator modelWithMetadataComparator =\n             new ModelWithMetadataComparator(modelProvider, modelSchemaRegistry);\n-\n+        final Map<String, ModelSyncMetrics> metricsByModel = new ConcurrentHashMap<>();\n         final Set<Completable> hydrationTasks = new HashSet<>();\n         for (Class<? extends Model> clazz : modelProvider.models()) {\n+            SyncTime lastSyncTime = syncTimeRegistry.lookupLastSyncTime(clazz)\n+                .map(this::filterOutOldSyncTimes)\n+                .blockingGet();\n+            metricsByModel.put(clazz.getSimpleName(), new ModelSyncMetrics(lastSyncTime));\n             hydrationTasks.add(createHydrationTask(modelWithMetadataComparator, clazz));\n         }\n-        return Completable.concat(hydrationTasks);\n+\n+        // We'll collect metrics for the initial sync by observing changes to the local DataStore.\n+        Cancelable metricsObserver =\n+            localStorageAdapter.observe(itemChange -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM4ODA1Nw=="}, "originalCommit": {"oid": "3aa959826c1ed00d0950e7b2501fabc8641c2fdf"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTYwNTg4OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwODoyNjozOFrOG9vP3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQwMjo0OTozNFrOG-AH_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM5MDQyOA==", "bodyText": "Ahh. Hm, yea.\nSo, this looks reasonable. Can you create a separate isolated PR for this?\nIf we treat this seriously, I think we can make use of SyncType in a number of places where delta vs. base sync logic is managed currently. If I'm not mistaken, it is a nullability check in most places right now. Like, do I have a timestamp yes vs. no? However, it would be cleaner to be like:\nif (lastSyncTime == null) {\n    syncType = SyncType.FULL;\n}\netc.\nTLDR there's a bunch of places you can use this, and it'll probably be significant enough for its own (~low complexity, but potentially verbose) PR.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r467390428", "createdAt": "2020-08-08T08:26:38Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncType.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.syncengine;\n+\n+/**\n+ * Enum representing the type of initial sync.\n+ */\n+public enum SyncType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa959826c1ed00d0950e7b2501fabc8641c2fdf"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzY2Njk0MQ==", "bodyText": "Just posted #713\nNote that in that PR, I'm using BASE instead of FULL since it appears to be more consistent with what I've seen in the docs.\nI have some other changes to this PR which should address some of the other issues. Once we get #713 merged, I can update this PR.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r467666941", "createdAt": "2020-08-10T02:49:34Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncType.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.syncengine;\n+\n+/**\n+ * Enum representing the type of initial sync.\n+ */\n+public enum SyncType {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM5MDQyOA=="}, "originalCommit": {"oid": "3aa959826c1ed00d0950e7b2501fabc8641c2fdf"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTYwNzkzOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/events/ModelSyncedEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwODoyNzoxOFrOG9vRJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMDo1NTowOVrOG_I5nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM5MDc1Nw==", "bodyText": "Or, alternately, you could just use your enum type? getSyncType()? The way you have it is fine too.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r467390757", "createdAt": "2020-08-08T08:27:18Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/events/ModelSyncedEvent.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.syncengine.events;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.datastore.syncengine.SyncType;\n+\n+/**\n+ * Hub event payload emitted when the initial sync completes for a given model.\n+ */\n+public final class ModelSyncedEvent {\n+    private final int added;\n+    private final int updated;\n+    private final int deleted;\n+    private final String model;\n+    private final boolean isFullSync;\n+    private final boolean isDeltaSync;\n+\n+    /**\n+     * Constructs a ModelSyncEvent object.\n+     * @param model The of the model.\n+     * @param syncType Indicates whether is a full or delta sync.\n+     * @param added Number of records added during the sync attempt.\n+     * @param updated Number of records updated during the sync attempt.\n+     * @param deleted Number of records deleted during the sync attempt.\n+     */\n+    public ModelSyncedEvent(String model,\n+                            SyncType syncType,\n+                            int added,\n+                            int updated,\n+                            int deleted) {\n+        this.added = added;\n+        this.updated = updated;\n+        this.deleted = deleted;\n+        this.model = model;\n+        this.isFullSync = SyncType.FULL.equals(syncType);\n+        this.isDeltaSync = SyncType.DELTA.equals(syncType);\n+    }\n+\n+    /**\n+     * Getter for the model name.\n+     * @return The model name (ex. Post).\n+     */\n+    public String getModel() {\n+        return model;\n+    }\n+\n+    /**\n+     * Getter for the number of records added during the sync.\n+     * @return Number of records added.\n+     */\n+    public int getAdded() {\n+        return added;\n+    }\n+\n+    /**\n+     * Getter for the number of records updated during the sync.\n+     * @return Number of records updated.\n+     */\n+    public int getUpdated() {\n+        return updated;\n+    }\n+\n+    /**\n+     * Getter for the number of records deleted during the sync.\n+     * @return Number of records deleted.\n+     */\n+    public int getDeleted() {\n+        return deleted;\n+    }\n+\n+    /**\n+     * Getter for the isFullSync property.\n+     * @return True if it's a full sync, false otherwise.\n+     */\n+    public boolean isFullSync() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa959826c1ed00d0950e7b2501fabc8641c2fdf"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg1OTI5Mg==", "bodyText": "The event payload calls for isFullSync and isDeltaSync, so I just kept it consistent with what JS is doing.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r468859292", "createdAt": "2020-08-11T20:55:09Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/events/ModelSyncedEvent.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.syncengine.events;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.datastore.syncengine.SyncType;\n+\n+/**\n+ * Hub event payload emitted when the initial sync completes for a given model.\n+ */\n+public final class ModelSyncedEvent {\n+    private final int added;\n+    private final int updated;\n+    private final int deleted;\n+    private final String model;\n+    private final boolean isFullSync;\n+    private final boolean isDeltaSync;\n+\n+    /**\n+     * Constructs a ModelSyncEvent object.\n+     * @param model The of the model.\n+     * @param syncType Indicates whether is a full or delta sync.\n+     * @param added Number of records added during the sync attempt.\n+     * @param updated Number of records updated during the sync attempt.\n+     * @param deleted Number of records deleted during the sync attempt.\n+     */\n+    public ModelSyncedEvent(String model,\n+                            SyncType syncType,\n+                            int added,\n+                            int updated,\n+                            int deleted) {\n+        this.added = added;\n+        this.updated = updated;\n+        this.deleted = deleted;\n+        this.model = model;\n+        this.isFullSync = SyncType.FULL.equals(syncType);\n+        this.isDeltaSync = SyncType.DELTA.equals(syncType);\n+    }\n+\n+    /**\n+     * Getter for the model name.\n+     * @return The model name (ex. Post).\n+     */\n+    public String getModel() {\n+        return model;\n+    }\n+\n+    /**\n+     * Getter for the number of records added during the sync.\n+     * @return Number of records added.\n+     */\n+    public int getAdded() {\n+        return added;\n+    }\n+\n+    /**\n+     * Getter for the number of records updated during the sync.\n+     * @return Number of records updated.\n+     */\n+    public int getUpdated() {\n+        return updated;\n+    }\n+\n+    /**\n+     * Getter for the number of records deleted during the sync.\n+     * @return Number of records deleted.\n+     */\n+    public int getDeleted() {\n+        return deleted;\n+    }\n+\n+    /**\n+     * Getter for the isFullSync property.\n+     * @return True if it's a full sync, false otherwise.\n+     */\n+    public boolean isFullSync() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM5MDc1Nw=="}, "originalCommit": {"oid": "3aa959826c1ed00d0950e7b2501fabc8641c2fdf"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTYxMTI2OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/events/ModelSyncedEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwODoyODoyN1rOG9vTQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDo0MzoxOVrOHBCyEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM5MTI5OQ==", "bodyText": "Since you'll send these back to the customer, be sure that all of your event structures are:\n\nImmutable;\nImplement equals, toString, and hashCode\nIf applicable, implementing Comparable might be appropriate as well?", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r467391299", "createdAt": "2020-08-08T08:28:27Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/events/ModelSyncedEvent.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.syncengine.events;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.datastore.syncengine.SyncType;\n+\n+/**\n+ * Hub event payload emitted when the initial sync completes for a given model.\n+ */\n+public final class ModelSyncedEvent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa959826c1ed00d0950e7b2501fabc8641c2fdf"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg1NjIxMQ==", "bodyText": "1 and 2 should be addressed. I'm not sure it makes sense to implement comparable here since none of the fields really stand out in terms of sorting.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r470856211", "createdAt": "2020-08-14T20:43:19Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/events/ModelSyncedEvent.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.syncengine.events;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.datastore.syncengine.SyncType;\n+\n+/**\n+ * Hub event payload emitted when the initial sync completes for a given model.\n+ */\n+public final class ModelSyncedEvent {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM5MTI5OQ=="}, "originalCommit": {"oid": "3aa959826c1ed00d0950e7b2501fabc8641c2fdf"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxOTYxODA3OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/events/SyncQueriesStartedEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wOFQwODozMDozNFrOG9vXjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMToxOTo0OVrOHBDoPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM5MjM5Ng==", "bodyText": "If you use the array primitive, be sure to do an Array.copy on the input, so that your DTO won't be effected if the input hcanges. https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#copyOf(U[],%20int,%20java.lang.Class)\nsame deal on this one -- equals, toString, and hashCode, please", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r467392396", "createdAt": "2020-08-08T08:30:34Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/events/SyncQueriesStartedEvent.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.syncengine.events;\n+\n+/**\n+ * Event payload emitted when the sync process starts.\n+ */\n+public final class SyncQueriesStartedEvent {\n+    private String[] models;\n+\n+    /**\n+     * Constructs a SyncQueriesStartedEvent object.\n+     * @param models An array of model names.\n+     */\n+    public SyncQueriesStartedEvent(String[] models) {\n+        this.models = models;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aa959826c1ed00d0950e7b2501fabc8641c2fdf"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg3MDA3OA==", "bodyText": "Done. Added tests using EqualsToStringHashValidator", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r470870078", "createdAt": "2020-08-14T21:19:49Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/events/SyncQueriesStartedEvent.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.syncengine.events;\n+\n+/**\n+ * Event payload emitted when the sync process starts.\n+ */\n+public final class SyncQueriesStartedEvent {\n+    private String[] models;\n+\n+    /**\n+     * Constructs a SyncQueriesStartedEvent object.\n+     * @param models An array of model names.\n+     */\n+    public SyncQueriesStartedEvent(String[] models) {\n+        this.models = models;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzM5MjM5Ng=="}, "originalCommit": {"oid": "3aa959826c1ed00d0950e7b2501fabc8641c2fdf"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjk1MDcwOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMzoyMjoxMFrOHBHWiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMjoxNzo1NFrOHBmWaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTA4MA==", "bodyText": "This seems to be a frivolous construct. Isn't this just equivalent to using modelProvider.models() directly?", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r470931080", "createdAt": "2020-08-15T03:22:10Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -97,6 +103,11 @@ public Orchestrator(\n         Merger merger = new Merger(mutationOutbox, versionRepository, localStorageAdapter);\n         SyncTimeRegistry syncTimeRegistry = new SyncTimeRegistry(localStorageAdapter);\n \n+        this.localStorageAdapter = localStorageAdapter;\n+        syncableModels = Observable.fromIterable(modelProvider.models())\n+            .toList()\n+            .blockingGet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQzODk1Mw==", "bodyText": "Yeah...initially, I was going to filter based on isSyncable, but we don't have such a flag for Android.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r471438953", "createdAt": "2020-08-17T12:17:54Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -97,6 +103,11 @@ public Orchestrator(\n         Merger merger = new Merger(mutationOutbox, versionRepository, localStorageAdapter);\n         SyncTimeRegistry syncTimeRegistry = new SyncTimeRegistry(localStorageAdapter);\n \n+        this.localStorageAdapter = localStorageAdapter;\n+        syncableModels = Observable.fromIterable(modelProvider.models())\n+            .toList()\n+            .blockingGet();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTA4MA=="}, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjk1MjAyOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMzoyNDozMlrOHBHXMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzoxMDozMVrOHBxsmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTI1MA==", "bodyText": "It gets assigned here, but where is it used? Do you have behavior in the constructor? If so, can you move it to start() and stop() methods, and keep the constructor only for dependency wiring?\nOther thought: it would be kinda nice if this could be syncProcessor.addObserver(new SyncMtericsObserver()), or if the syncProcessor just managed this thing internally, itself._", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r470931250", "createdAt": "2020-08-15T03:24:32Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -106,6 +117,9 @@ public Orchestrator(\n             .merger(merger)\n             .dataStoreConfigurationProvider(dataStoreConfigurationProvider)\n             .build();\n+        this.syncObserver = new SyncMetricsObserver(localStorageAdapter,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyNDg1OQ==", "bodyText": "I refactored the logic to make it a bit lighter in terms of dependencies. I created an accumulator class that keeps track of the sync metrics for an individual model. Rather than depending on the local storage adapter and creating an observer, I'm just passing in a reference to this new object into the merge method.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r471624859", "createdAt": "2020-08-17T17:10:31Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -106,6 +117,9 @@ public Orchestrator(\n             .merger(merger)\n             .dataStoreConfigurationProvider(dataStoreConfigurationProvider)\n             .build();\n+        this.syncObserver = new SyncMetricsObserver(localStorageAdapter,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTI1MA=="}, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjk1MjU1OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncMetricsObserver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMzoyNDo1OFrOHBHXbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzoxMTowNVrOHBxvFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTMwOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Map<String, ModelSyncMetrics> metricsByModel;\n          \n          \n            \n                private final Map<String, ModelSyncMetrics> metricsByModel;", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r470931308", "createdAt": "2020-08-15T03:24:58Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncMetricsObserver.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.syncengine;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.async.Cancelable;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.datastore.DataStoreChannelEventName;\n+import com.amplifyframework.datastore.DataStoreConfigurationProvider;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.DataStoreItemChange;\n+import com.amplifyframework.datastore.events.ModelSyncedEvent;\n+import com.amplifyframework.datastore.storage.LocalStorageAdapter;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.hub.HubChannel;\n+import com.amplifyframework.hub.HubEvent;\n+import com.amplifyframework.logging.Logger;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Class that encapsulates the logic of listening to local DataStore changes\n+ * and emitting metrics when base/delta sync completes.\n+ */\n+class SyncMetricsObserver {\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+    private Map<String, ModelSyncMetrics> metricsByModel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyNTQ5Mw==", "bodyText": "No longer exists after refactor.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r471625493", "createdAt": "2020-08-17T17:11:05Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncMetricsObserver.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.syncengine;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.async.Cancelable;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.datastore.DataStoreChannelEventName;\n+import com.amplifyframework.datastore.DataStoreConfigurationProvider;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.DataStoreItemChange;\n+import com.amplifyframework.datastore.events.ModelSyncedEvent;\n+import com.amplifyframework.datastore.storage.LocalStorageAdapter;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.hub.HubChannel;\n+import com.amplifyframework.hub.HubEvent;\n+import com.amplifyframework.logging.Logger;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Class that encapsulates the logic of listening to local DataStore changes\n+ * and emitting metrics when base/delta sync completes.\n+ */\n+class SyncMetricsObserver {\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+    private Map<String, ModelSyncMetrics> metricsByModel;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTMwOA=="}, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjk1MjY5OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncMetricsObserver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMzoyNTowOFrOHBHXew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzoxMToyOVrOHBxw1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTMyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            class SyncMetricsObserver {\n          \n          \n            \n            final class SyncMetricsObserver {", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r470931323", "createdAt": "2020-08-15T03:25:08Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncMetricsObserver.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.syncengine;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.async.Cancelable;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.datastore.DataStoreChannelEventName;\n+import com.amplifyframework.datastore.DataStoreConfigurationProvider;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.DataStoreItemChange;\n+import com.amplifyframework.datastore.events.ModelSyncedEvent;\n+import com.amplifyframework.datastore.storage.LocalStorageAdapter;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.hub.HubChannel;\n+import com.amplifyframework.hub.HubEvent;\n+import com.amplifyframework.logging.Logger;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Class that encapsulates the logic of listening to local DataStore changes\n+ * and emitting metrics when base/delta sync completes.\n+ */\n+class SyncMetricsObserver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyNTk0Mg==", "bodyText": "Made it final after renaming it to ModelSyncMetricsAccumulator.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r471625942", "createdAt": "2020-08-17T17:11:29Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncMetricsObserver.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.syncengine;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.async.Cancelable;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.datastore.DataStoreChannelEventName;\n+import com.amplifyframework.datastore.DataStoreConfigurationProvider;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.DataStoreItemChange;\n+import com.amplifyframework.datastore.events.ModelSyncedEvent;\n+import com.amplifyframework.datastore.storage.LocalStorageAdapter;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.hub.HubChannel;\n+import com.amplifyframework.hub.HubEvent;\n+import com.amplifyframework.logging.Logger;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Class that encapsulates the logic of listening to local DataStore changes\n+ * and emitting metrics when base/delta sync completes.\n+ */\n+class SyncMetricsObserver {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTMyMw=="}, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjk1MzUxOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncMetricsObserver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMzoyNjoyMlrOHBHX5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzoxMTo0N1rOHBxyUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTQyOA==", "bodyText": "Maybe invert this, so you can save 4 columns for the main body of the method.\ne.g.\nif (!isSyncProcessChange) {\n    return;\n}\nahaSweetISavedSomeCols();", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r470931428", "createdAt": "2020-08-15T03:26:22Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncMetricsObserver.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.syncengine;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.async.Cancelable;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.datastore.DataStoreChannelEventName;\n+import com.amplifyframework.datastore.DataStoreConfigurationProvider;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.DataStoreItemChange;\n+import com.amplifyframework.datastore.events.ModelSyncedEvent;\n+import com.amplifyframework.datastore.storage.LocalStorageAdapter;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.hub.HubChannel;\n+import com.amplifyframework.hub.HubEvent;\n+import com.amplifyframework.logging.Logger;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Class that encapsulates the logic of listening to local DataStore changes\n+ * and emitting metrics when base/delta sync completes.\n+ */\n+class SyncMetricsObserver {\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+    private Map<String, ModelSyncMetrics> metricsByModel;\n+    private final Cancelable itemChangeObserver;\n+    private final List<Class<? extends Model>> syncableModels;\n+\n+    /**\n+     * Constructor that sets up an observer to watch for mutations\n+     * made by the sync process on the local DataStore.\n+     * @param localStorageAdapter A reference to the implementation of the {@link LocalStorageAdapter}.\n+     * @param syncableModels A list of all the syncable models.\n+     * @param dataStoreConfigurationProvider A reference to the DataStore configuration.\n+     */\n+    SyncMetricsObserver(LocalStorageAdapter localStorageAdapter,\n+                        List<Class<? extends Model>> syncableModels,\n+                        DataStoreConfigurationProvider dataStoreConfigurationProvider) {\n+        itemChangeObserver = localStorageAdapter.observe(\n+            this::onItemChange,\n+            this::onError,\n+            this::onComplete\n+        );\n+        metricsByModel = new ConcurrentHashMap<>();\n+        this.syncableModels = syncableModels;\n+    }\n+\n+    private void onComplete() {\n+        LOG.debug(\"Initial sync metrics observer completed.\");\n+        itemChangeObserver.cancel();\n+    }\n+\n+    private void onError(DataStoreException dataStoreException) {\n+        LOG.warn(\"Unable to gather metrics for remote sync.\", dataStoreException);\n+    }\n+\n+    private void onItemChange(StorageItemChange<? extends Model> itemChange) {\n+        boolean isSyncProcessChange = StorageItemChange.Initiator.SYNC_ENGINE.equals(itemChange.initiator());\n+        if (isSyncProcessChange) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyNjMyMQ==", "bodyText": "No longer needed.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r471626321", "createdAt": "2020-08-17T17:11:47Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncMetricsObserver.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.syncengine;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.async.Cancelable;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.datastore.DataStoreChannelEventName;\n+import com.amplifyframework.datastore.DataStoreConfigurationProvider;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.DataStoreItemChange;\n+import com.amplifyframework.datastore.events.ModelSyncedEvent;\n+import com.amplifyframework.datastore.storage.LocalStorageAdapter;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.hub.HubChannel;\n+import com.amplifyframework.hub.HubEvent;\n+import com.amplifyframework.logging.Logger;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Class that encapsulates the logic of listening to local DataStore changes\n+ * and emitting metrics when base/delta sync completes.\n+ */\n+class SyncMetricsObserver {\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+    private Map<String, ModelSyncMetrics> metricsByModel;\n+    private final Cancelable itemChangeObserver;\n+    private final List<Class<? extends Model>> syncableModels;\n+\n+    /**\n+     * Constructor that sets up an observer to watch for mutations\n+     * made by the sync process on the local DataStore.\n+     * @param localStorageAdapter A reference to the implementation of the {@link LocalStorageAdapter}.\n+     * @param syncableModels A list of all the syncable models.\n+     * @param dataStoreConfigurationProvider A reference to the DataStore configuration.\n+     */\n+    SyncMetricsObserver(LocalStorageAdapter localStorageAdapter,\n+                        List<Class<? extends Model>> syncableModels,\n+                        DataStoreConfigurationProvider dataStoreConfigurationProvider) {\n+        itemChangeObserver = localStorageAdapter.observe(\n+            this::onItemChange,\n+            this::onError,\n+            this::onComplete\n+        );\n+        metricsByModel = new ConcurrentHashMap<>();\n+        this.syncableModels = syncableModels;\n+    }\n+\n+    private void onComplete() {\n+        LOG.debug(\"Initial sync metrics observer completed.\");\n+        itemChangeObserver.cancel();\n+    }\n+\n+    private void onError(DataStoreException dataStoreException) {\n+        LOG.warn(\"Unable to gather metrics for remote sync.\", dataStoreException);\n+    }\n+\n+    private void onItemChange(StorageItemChange<? extends Model> itemChange) {\n+        boolean isSyncProcessChange = StorageItemChange.Initiator.SYNC_ENGINE.equals(itemChange.initiator());\n+        if (isSyncProcessChange) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTQyOA=="}, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjk1NDUyOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMzoyODoxMFrOHBHYYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzoxNDo0NlrOHByAkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTU1NA==", "bodyText": "Is this still needed? Can you remove the commented out stuff?", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r470931554", "createdAt": "2020-08-15T03:28:10Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "diffHunk": "@@ -206,6 +204,10 @@ public void configureAndInitializeInApiModeWithoutApi() throws JSONException, Am\n      */\n     @Test\n     public void clearStopsSyncUntilNextInteraction() throws AmplifyException, JSONException {\n+//        HubAccumulator subscriptionsStarted =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyOTk3MQ==", "bodyText": "Removed.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r471629971", "createdAt": "2020-08-17T17:14:46Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "diffHunk": "@@ -206,6 +204,10 @@ public void configureAndInitializeInApiModeWithoutApi() throws JSONException, Am\n      */\n     @Test\n     public void clearStopsSyncUntilNextInteraction() throws AmplifyException, JSONException {\n+//        HubAccumulator subscriptionsStarted =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTU1NA=="}, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjk1NDc3OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMzoyODo0MVrOHBHYfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzo0Mjo0OVrOHBzjBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTU4MA==", "bodyText": "Can we do this by checking for an event on the hub, instead of by using mockito invocation verification?", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r470931580", "createdAt": "2020-08-15T03:28:41Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "diffHunk": "@@ -307,16 +309,17 @@ private void assertRemoteSubscriptionsStarted() {\n     }\n \n     /**\n-     * Check that there were no interactions between the SyncProcessor\n-     * and the model provider. This is used to verify that the synchronization\n-     * processes don't start if there's no API configured.\n+     * Check that the SyncProcessor did not start by asserting that the\n+     * only interaction with the API category was triggered by the getPlugins\n+     * method.\n+     * @param mockApi Mock or spy of the ApiCategory being used for the test.\n      */\n-    private void assertSyncProcessorNotStarted() {\n-        boolean syncProcessorNotInvoked = mockingDetails(modelProvider)\n-            .getInvocations()\n-            .stream()\n-            .noneMatch(invocation -> invocation.getLocation().getSourceFile().contains(\"SyncProcessor\"));\n-        assertTrue(syncProcessorNotInvoked);\n+    private void assertSyncProcessorNotStarted(ApiCategory mockApi) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1NTE3NA==", "bodyText": "That will probably be a little trickier since we'd be checking for the absence of an event. It's probably a useful pattern to create in the HubAccumulator, but I'd prefer to do that as a separate PR if that's OK.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r471655174", "createdAt": "2020-08-17T17:42:49Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/AWSDataStorePluginTest.java", "diffHunk": "@@ -307,16 +309,17 @@ private void assertRemoteSubscriptionsStarted() {\n     }\n \n     /**\n-     * Check that there were no interactions between the SyncProcessor\n-     * and the model provider. This is used to verify that the synchronization\n-     * processes don't start if there's no API configured.\n+     * Check that the SyncProcessor did not start by asserting that the\n+     * only interaction with the API category was triggered by the getPlugins\n+     * method.\n+     * @param mockApi Mock or spy of the ApiCategory being used for the test.\n      */\n-    private void assertSyncProcessorNotStarted() {\n-        boolean syncProcessorNotInvoked = mockingDetails(modelProvider)\n-            .getInvocations()\n-            .stream()\n-            .noneMatch(invocation -> invocation.getLocation().getSourceFile().contains(\"SyncProcessor\"));\n-        assertTrue(syncProcessorNotInvoked);\n+    private void assertSyncProcessorNotStarted(ApiCategory mockApi) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTU4MA=="}, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjk1NTUwOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMzoyOTo0NVrOHBHY1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzozMToyOFrOHBzMIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTY3MQ==", "bodyText": "m -> m.getSimpleName() I think you can write Class::getSimpleName, instead?\nThe stream APIs are a little nicer for simple collection mapping like this aren't they? Oh well.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r470931671", "createdAt": "2020-08-15T03:29:45Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "diffHunk": "@@ -69,13 +79,18 @@\n public final class SyncProcessorTest {\n     private static final long OP_TIMEOUT_MS = TimeUnit.SECONDS.toMillis(2);\n     private static final long BASE_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    private static final List<String> SYSTEM_MODEL_NAMES =\n+        Observable.fromIterable(SystemModelsProviderFactory.create().models())\n+            .map(m -> m.getSimpleName()).toList().blockingGet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY0OTMxNQ==", "bodyText": "Done.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r471649315", "createdAt": "2020-08-17T17:31:28Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "diffHunk": "@@ -69,13 +79,18 @@\n public final class SyncProcessorTest {\n     private static final long OP_TIMEOUT_MS = TimeUnit.SECONDS.toMillis(2);\n     private static final long BASE_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    private static final List<String> SYSTEM_MODEL_NAMES =\n+        Observable.fromIterable(SystemModelsProviderFactory.create().models())\n+            .map(m -> m.getSimpleName()).toList().blockingGet();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTY3MQ=="}, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjk1NjEzOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMzozMDoxOFrOHBHZHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzozOTowMVrOHBzbyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTc0Mg==", "bodyText": "To self document it, you could express this as int expectedModelCount = Arrays.asList(EventObject1.class, EventObject2.class).size().", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r470931742", "createdAt": "2020-08-15T03:30:18Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "diffHunk": "@@ -116,6 +140,91 @@ public void setup() throws AmplifyException {\n             .build();\n     }\n \n+    /**\n+     * During a base sync, there are a series of events that should be emitted.\n+     * This test verifies that these events are published via Amplify Hub depending\n+     * on actions takes for each available model.\n+     * @throws DataStoreException Not expected.\n+     */\n+    @Test\n+    public void dataStoreHubEventsTriggered() throws DataStoreException {\n+        // Arrange - BEGIN\n+        // We're only emitting events for Post and Blogger\n+        int expectedModelCount = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1MDQ4Mw==", "bodyText": "That's a good idea.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r471650483", "createdAt": "2020-08-17T17:33:38Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "diffHunk": "@@ -116,6 +140,91 @@ public void setup() throws AmplifyException {\n             .build();\n     }\n \n+    /**\n+     * During a base sync, there are a series of events that should be emitted.\n+     * This test verifies that these events are published via Amplify Hub depending\n+     * on actions takes for each available model.\n+     * @throws DataStoreException Not expected.\n+     */\n+    @Test\n+    public void dataStoreHubEventsTriggered() throws DataStoreException {\n+        // Arrange - BEGIN\n+        // We're only emitting events for Post and Blogger\n+        int expectedModelCount = 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTc0Mg=="}, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1MzMyMw==", "bodyText": "Done.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r471653323", "createdAt": "2020-08-17T17:39:01Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "diffHunk": "@@ -116,6 +140,91 @@ public void setup() throws AmplifyException {\n             .build();\n     }\n \n+    /**\n+     * During a base sync, there are a series of events that should be emitted.\n+     * This test verifies that these events are published via Amplify Hub depending\n+     * on actions takes for each available model.\n+     * @throws DataStoreException Not expected.\n+     */\n+    @Test\n+    public void dataStoreHubEventsTriggered() throws DataStoreException {\n+        // Arrange - BEGIN\n+        // We're only emitting events for Post and Blogger\n+        int expectedModelCount = 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTc0Mg=="}, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjk1Nzk5OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMzozMzowNFrOHBHZ_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzozOTowOFrOHBzb_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTk2NQ==", "bodyText": "Lambda-fy this?", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r470931965", "createdAt": "2020-08-15T03:33:04Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "diffHunk": "@@ -400,6 +509,60 @@ public void userProvidedErrorCallbackInvokedOnFailure() {\n         assertEquals(1, errorHandlerCallCount);\n     }\n \n+    private void assertOperationTypeCounts(ModelSyncedEvent event,\n+                                           int expectedAdd,\n+                                           int expectedUpdate,\n+                                           int expectedDelete) {\n+        assertEquals(expectedAdd, event.getAdded());\n+        assertEquals(expectedUpdate, event.getUpdated());\n+        assertEquals(expectedDelete, event.getDeleted());\n+    }\n+\n+    private static HubAccumulator createAccumulator(HubEventFilter eventFilter, int times) {\n+        return HubAccumulator.create(HubChannel.DATASTORE, eventFilter, times);\n+    }\n+\n+    private static HubEventFilter forEvent(DataStoreChannelEventName eventName) {\n+        return new HubEventFilter() {\n+            @Override\n+            public boolean filter(@NonNull HubEvent<?> hubEvent) {\n+                return eventName.toString().equals(hubEvent.getName());\n+            }\n+        };\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private HubEventFilter syncMetricsEmittedFor(Class<? extends Model>... models) {\n+        List<String> modelNames = Observable.fromIterable(Arrays.asList(models))\n+            .map(model -> model.getSimpleName())\n+            .toList()\n+            .blockingGet();\n+\n+        return new HubEventFilter() {\n+            @Override\n+            public boolean filter(@NonNull HubEvent<?> hubEvent) {\n+                if (!(hubEvent.getData() instanceof ModelSyncedEvent)) {\n+                    return false;\n+                }\n+                ModelSyncedEvent hubEventData = (ModelSyncedEvent) hubEvent.getData();\n+                return forEvent(DataStoreChannelEventName.MODEL_SYNCED).filter(hubEvent) &&\n+                    modelNames.contains(hubEventData.getModel());\n+            }\n+        };\n+    }\n+\n+    private static HubEventFilter syncQueryStartedForModels(int modelCount) {\n+        return new HubEventFilter() {\n+            @Override\n+            public boolean filter(@NonNull HubEvent<?> hubEvent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTY1MzM3NQ==", "bodyText": "Done", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r471653375", "createdAt": "2020-08-17T17:39:08Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "diffHunk": "@@ -400,6 +509,60 @@ public void userProvidedErrorCallbackInvokedOnFailure() {\n         assertEquals(1, errorHandlerCallCount);\n     }\n \n+    private void assertOperationTypeCounts(ModelSyncedEvent event,\n+                                           int expectedAdd,\n+                                           int expectedUpdate,\n+                                           int expectedDelete) {\n+        assertEquals(expectedAdd, event.getAdded());\n+        assertEquals(expectedUpdate, event.getUpdated());\n+        assertEquals(expectedDelete, event.getDeleted());\n+    }\n+\n+    private static HubAccumulator createAccumulator(HubEventFilter eventFilter, int times) {\n+        return HubAccumulator.create(HubChannel.DATASTORE, eventFilter, times);\n+    }\n+\n+    private static HubEventFilter forEvent(DataStoreChannelEventName eventName) {\n+        return new HubEventFilter() {\n+            @Override\n+            public boolean filter(@NonNull HubEvent<?> hubEvent) {\n+                return eventName.toString().equals(hubEvent.getName());\n+            }\n+        };\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private HubEventFilter syncMetricsEmittedFor(Class<? extends Model>... models) {\n+        List<String> modelNames = Observable.fromIterable(Arrays.asList(models))\n+            .map(model -> model.getSimpleName())\n+            .toList()\n+            .blockingGet();\n+\n+        return new HubEventFilter() {\n+            @Override\n+            public boolean filter(@NonNull HubEvent<?> hubEvent) {\n+                if (!(hubEvent.getData() instanceof ModelSyncedEvent)) {\n+                    return false;\n+                }\n+                ModelSyncedEvent hubEventData = (ModelSyncedEvent) hubEvent.getData();\n+                return forEvent(DataStoreChannelEventName.MODEL_SYNCED).filter(hubEvent) &&\n+                    modelNames.contains(hubEventData.getModel());\n+            }\n+        };\n+    }\n+\n+    private static HubEventFilter syncQueryStartedForModels(int modelCount) {\n+        return new HubEventFilter() {\n+            @Override\n+            public boolean filter(@NonNull HubEvent<?> hubEvent) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTk2NQ=="}, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjk1ODA1OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMzozMzoxNVrOHBHaBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMzozMzoxNVrOHBHaBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTk3NQ==", "bodyText": "Lambda-fy?", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r470931975", "createdAt": "2020-08-15T03:33:15Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "diffHunk": "@@ -400,6 +509,60 @@ public void userProvidedErrorCallbackInvokedOnFailure() {\n         assertEquals(1, errorHandlerCallCount);\n     }\n \n+    private void assertOperationTypeCounts(ModelSyncedEvent event,\n+                                           int expectedAdd,\n+                                           int expectedUpdate,\n+                                           int expectedDelete) {\n+        assertEquals(expectedAdd, event.getAdded());\n+        assertEquals(expectedUpdate, event.getUpdated());\n+        assertEquals(expectedDelete, event.getDeleted());\n+    }\n+\n+    private static HubAccumulator createAccumulator(HubEventFilter eventFilter, int times) {\n+        return HubAccumulator.create(HubChannel.DATASTORE, eventFilter, times);\n+    }\n+\n+    private static HubEventFilter forEvent(DataStoreChannelEventName eventName) {\n+        return new HubEventFilter() {\n+            @Override\n+            public boolean filter(@NonNull HubEvent<?> hubEvent) {\n+                return eventName.toString().equals(hubEvent.getName());\n+            }\n+        };\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private HubEventFilter syncMetricsEmittedFor(Class<? extends Model>... models) {\n+        List<String> modelNames = Observable.fromIterable(Arrays.asList(models))\n+            .map(model -> model.getSimpleName())\n+            .toList()\n+            .blockingGet();\n+\n+        return new HubEventFilter() {\n+            @Override\n+            public boolean filter(@NonNull HubEvent<?> hubEvent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjk1ODIwOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMzozMzoyNlrOHBHaGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMzozMzoyNlrOHBHaGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMTk5NQ==", "bodyText": "Lambda-fy?", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r470931995", "createdAt": "2020-08-15T03:33:26Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "diffHunk": "@@ -400,6 +509,60 @@ public void userProvidedErrorCallbackInvokedOnFailure() {\n         assertEquals(1, errorHandlerCallCount);\n     }\n \n+    private void assertOperationTypeCounts(ModelSyncedEvent event,\n+                                           int expectedAdd,\n+                                           int expectedUpdate,\n+                                           int expectedDelete) {\n+        assertEquals(expectedAdd, event.getAdded());\n+        assertEquals(expectedUpdate, event.getUpdated());\n+        assertEquals(expectedDelete, event.getDeleted());\n+    }\n+\n+    private static HubAccumulator createAccumulator(HubEventFilter eventFilter, int times) {\n+        return HubAccumulator.create(HubChannel.DATASTORE, eventFilter, times);\n+    }\n+\n+    private static HubEventFilter forEvent(DataStoreChannelEventName eventName) {\n+        return new HubEventFilter() {\n+            @Override\n+            public boolean filter(@NonNull HubEvent<?> hubEvent) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mjk1ODI1OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMzozMzozNVrOHBHaIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQwMzozMzozNVrOHBHaIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDkzMjAwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r470932001", "createdAt": "2020-08-15T03:33:35Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "diffHunk": "@@ -116,6 +140,91 @@ public void setup() throws AmplifyException {\n             .build();\n     }\n \n+    /**\n+     * During a base sync, there are a series of events that should be emitted.\n+     * This test verifies that these events are published via Amplify Hub depending\n+     * on actions takes for each available model.\n+     * @throws DataStoreException Not expected.\n+     */\n+    @Test\n+    public void dataStoreHubEventsTriggered() throws DataStoreException {\n+        // Arrange - BEGIN\n+        // We're only emitting events for Post and Blogger\n+        int expectedModelCount = 2;\n+        // Collects one syncQueriesStarted event.\n+        HubAccumulator syncStartAccumulator =\n+            createAccumulator(syncQueryStartedForModels(modelCount), 1);\n+        // Collects one syncQueriesReady event.\n+        HubAccumulator syncQueryReadyAccumulator =\n+            createAccumulator(forEvent(DataStoreChannelEventName.SYNC_QUERIES_READY), 1);\n+        // Collects one modelSynced event for each model.\n+        HubAccumulator modelSyncedAccumulator =\n+            createAccumulator(forEvent(DataStoreChannelEventName.MODEL_SYNCED), expectedModelCount);\n+\n+        // Add a couple of seed records so they can be deleted/updated.\n+        storageAdapter.save(DRUM_POST.getModel());\n+        storageAdapter.save(BLOGGER_ISLA.getModel());\n+\n+        // Mock sync query results for a couple of models.\n+        AppSyncMocking.sync(appSync)\n+            .mockSuccessResponse(Post.class, DELETED_DRUM_POST)\n+            .mockSuccessResponse(BlogOwner.class, BLOGGER_ISLA, BLOGGER_JAMESON);\n+\n+        // Start the accumulators.\n+        syncQueryReadyAccumulator.start();\n+        syncStartAccumulator.start();\n+        modelSyncedAccumulator.start();\n+\n+        TestObserver<ModelWithMetadata<? extends Model>> hydrationObserver = TestObserver.create();\n+        // Arrange - END\n+\n+        // Act: kickoff sync.\n+        syncProcessor.hydrate().subscribe(hydrationObserver);\n+\n+        // Check - BEGIN\n+        // Verify that sync completes.\n+        assertTrue(hydrationObserver.awaitTerminalEvent(OP_TIMEOUT_MS, TimeUnit.MILLISECONDS));\n+        hydrationObserver.assertNoErrors();\n+        hydrationObserver.assertComplete();\n+\n+        // Verify that syncQueriesStarted was emitted once.\n+        assertEquals(1, syncStartAccumulator.await((int) OP_TIMEOUT_MS, TimeUnit.MILLISECONDS).size());\n+        // Verify that syncQueriesReady was emitted once.\n+        assertEquals(1, syncQueryReadyAccumulator.await((int) OP_TIMEOUT_MS, TimeUnit.MILLISECONDS).size());\n+\n+        // Get the list of modelSynced events captured.\n+        List<HubEvent<?>> hubEvents = modelSyncedAccumulator.await((int) OP_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+        // Verify that [number of events] = [number of models]\n+        assertEquals(expectedModelCount, hubEvents.size());\n+\n+        // For each event (excluding system models), verify the desired count.\n+        for (HubEvent<?> event : hubEvents) {\n+            ModelSyncedEvent eventData = (ModelSyncedEvent) event.getData();\n+            assertTrue(eventData.isFullSync());\n+            assertFalse(eventData.isDeltaSync());\n+            String eventModel = eventData.getModel();\n+            switch (eventModel) {\n+                case \"BlogOwner\":\n+                    // One BlogOwner added and one updated.\n+                    assertOperationTypeCounts(eventData, 1, 1, 0);\n+                    break;\n+                case \"Post\":\n+                    // One post deleted.\n+                    assertOperationTypeCounts(eventData, 0, 0, 1);\n+                    break;\n+                default:\n+                    // Exclude system models\n+                    if (!SYSTEM_MODEL_NAMES.contains(eventModel)) {\n+                        // Verify there were no unexpected events for any other models.\n+                        assertOperationTypeCounts(eventData, 0, 0, 0);\n+                    }\n+            }\n+        }\n+        // Check - END\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ded64616374bcce33ac4fabfc77b6462fd28fbe0"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDE5MTQxOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Merger.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNTowMzo1NlrOHDpvwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzo1Nzo1M1rOHEC60A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU5MTc0Ng==", "bodyText": "There is a NoOpConsumer.create(), I think? Which might be a little more explicit about the intention.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r473591746", "createdAt": "2020-08-20T05:03:56Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Merger.java", "diffHunk": "@@ -66,6 +67,18 @@\n      * @return A completable operation to merge the model\n      */\n     <T extends Model> Completable merge(ModelWithMetadata<T> modelWithMetadata) {\n+        return merge(modelWithMetadata, value -> { });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAwNDE3Ng==", "bodyText": "I thought we had something like that. I was looking for EmptyConsumer \ud83e\udd26", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r474004176", "createdAt": "2020-08-20T13:57:53Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Merger.java", "diffHunk": "@@ -66,6 +67,18 @@\n      * @return A completable operation to merge the model\n      */\n     <T extends Model> Completable merge(ModelWithMetadata<T> modelWithMetadata) {\n+        return merge(modelWithMetadata, value -> { });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU5MTc0Ng=="}, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDE5MzE5OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Merger.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNTowNDoyOVrOHDpw0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNTowNDoyOVrOHDpw0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzU5MjAxOQ==", "bodyText": "Ditto here", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r473592019", "createdAt": "2020-08-20T05:04:29Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Merger.java", "diffHunk": "@@ -87,8 +100,8 @@\n             .filter(currentVersion -> currentVersion == -1 || incomingVersion > currentVersion)\n             // If we should merge, then do so now, starting with the model data.\n             .flatMapCompletable(shouldMerge ->\n-                (isDelete ? delete(model) : save(model))\n-                    .andThen(save(metadata))\n+                (isDelete ? delete(model, storageItemChangeConsumer) : save(model, storageItemChangeConsumer))\n+                    .andThen(save(metadata, value -> { }))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDI3ODY5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/datastore/events/SyncQueriesStartedEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNToyNzozOFrOHDqmgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNDowNDo0MFrOHEDNog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYwNTc2Mg==", "bodyText": "You don't need this, if you use the Arrays.equals, right?", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r473605762", "createdAt": "2020-08-20T05:27:38Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/datastore/events/SyncQueriesStartedEvent.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.events;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * Event payload emitted when the sync process starts.\n+ */\n+public final class SyncQueriesStartedEvent {\n+    private String[] models;\n+\n+    /**\n+     * Constructs a SyncQueriesStartedEvent object.\n+     * @param models An array of model names.\n+     */\n+    public SyncQueriesStartedEvent(String[] models) {\n+        this.models = Arrays.copyOf(models, models.length);\n+    }\n+\n+    /**\n+     * Getter for the list of models in the initial sync.\n+     * @return An array with the list of models (Ex. [Post, Blog]).\n+     */\n+    public String[] getModels() {\n+        return models;\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String toString() {\n+        return \"SyncQueriesStartedEvent{\" +\n+            \"models=\" + Arrays.toString(models) +\n+            '}';\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Arrays.hashCode(models);\n+    }\n+\n+    @Override\n+    public boolean equals(@Nullable Object thatObject) {\n+        if (this == thatObject) {\n+            return true;\n+        }\n+        if (thatObject == null || getClass() != thatObject.getClass()) {\n+            return false;\n+        }\n+\n+        SyncQueriesStartedEvent that = (SyncQueriesStartedEvent) thatObject;\n+        if (models.length != that.models.length) {\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAwODk5NA==", "bodyText": "Ah...yes I can.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r474008994", "createdAt": "2020-08-20T14:04:40Z", "author": {"login": "rjuliano"}, "path": "core/src/main/java/com/amplifyframework/datastore/events/SyncQueriesStartedEvent.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.events;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * Event payload emitted when the sync process starts.\n+ */\n+public final class SyncQueriesStartedEvent {\n+    private String[] models;\n+\n+    /**\n+     * Constructs a SyncQueriesStartedEvent object.\n+     * @param models An array of model names.\n+     */\n+    public SyncQueriesStartedEvent(String[] models) {\n+        this.models = Arrays.copyOf(models, models.length);\n+    }\n+\n+    /**\n+     * Getter for the list of models in the initial sync.\n+     * @return An array with the list of models (Ex. [Post, Blog]).\n+     */\n+    public String[] getModels() {\n+        return models;\n+    }\n+\n+    @NonNull\n+    @Override\n+    public String toString() {\n+        return \"SyncQueriesStartedEvent{\" +\n+            \"models=\" + Arrays.toString(models) +\n+            '}';\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Arrays.hashCode(models);\n+    }\n+\n+    @Override\n+    public boolean equals(@Nullable Object thatObject) {\n+        if (this == thatObject) {\n+            return true;\n+        }\n+        if (thatObject == null || getClass() != thatObject.getClass()) {\n+            return false;\n+        }\n+\n+        SyncQueriesStartedEvent that = (SyncQueriesStartedEvent) thatObject;\n+        if (models.length != that.models.length) {\n+            return false;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYwNTc2Mg=="}, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDI4MDcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/datastore/events/SyncQueriesStartedEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNToyNzo1OFrOHDqnjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNToyNzo1OFrOHDqnjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYwNjAyOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private String[] models;\n          \n          \n            \n                private final String[] models;", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r473606029", "createdAt": "2020-08-20T05:27:58Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/datastore/events/SyncQueriesStartedEvent.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.events;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * Event payload emitted when the sync process starts.\n+ */\n+public final class SyncQueriesStartedEvent {\n+    private String[] models;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDMwMTEyOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNTozMjo1OFrOHDq0DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTozMzo1MVrOHEHRHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYwOTIyOA==", "bodyText": "Ah crumbs. I guess HubAccumulator should have taken long, in hindsight, huh?", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r473609228", "createdAt": "2020-08-20T05:32:58Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "diffHunk": "@@ -116,6 +130,88 @@ public void setup() throws AmplifyException {\n             .build();\n     }\n \n+    /**\n+     * During a base sync, there are a series of events that should be emitted.\n+     * This test verifies that these events are published via Amplify Hub depending\n+     * on actions takes for each available model.\n+     * @throws DataStoreException Not expected.\n+     */\n+    @Test\n+    public void dataStoreHubEventsTriggered() throws DataStoreException {\n+        // Arrange - BEGIN\n+        int expectedModelCount = Arrays.asList(Post.class, BlogOwner.class).size();\n+        // Collects one syncQueriesStarted event.\n+        HubAccumulator syncStartAccumulator =\n+            createAccumulator(syncQueryStartedForModels(modelCount), 1);\n+        // Collects one syncQueriesReady event.\n+        HubAccumulator syncQueryReadyAccumulator =\n+            createAccumulator(forEvent(DataStoreChannelEventName.SYNC_QUERIES_READY), 1);\n+        // Collects one modelSynced event for each model.\n+        HubAccumulator modelSyncedAccumulator =\n+            createAccumulator(forEvent(DataStoreChannelEventName.MODEL_SYNCED), expectedModelCount);\n+\n+        // Add a couple of seed records so they can be deleted/updated.\n+        storageAdapter.save(DRUM_POST.getModel());\n+        storageAdapter.save(BLOGGER_ISLA.getModel());\n+\n+        // Mock sync query results for a couple of models.\n+        AppSyncMocking.sync(appSync)\n+            .mockSuccessResponse(Post.class, DELETED_DRUM_POST)\n+            .mockSuccessResponse(BlogOwner.class, BLOGGER_ISLA, BLOGGER_JAMESON);\n+\n+        // Start the accumulators.\n+        syncQueryReadyAccumulator.start();\n+        syncStartAccumulator.start();\n+        modelSyncedAccumulator.start();\n+\n+        TestObserver<ModelWithMetadata<? extends Model>> hydrationObserver = TestObserver.create();\n+        // Arrange - END\n+\n+        // Act: kickoff sync.\n+        syncProcessor.hydrate().subscribe(hydrationObserver);\n+\n+        // Check - BEGIN\n+        // Verify that sync completes.\n+        assertTrue(hydrationObserver.awaitTerminalEvent(OP_TIMEOUT_MS, TimeUnit.MILLISECONDS));\n+        hydrationObserver.assertNoErrors();\n+        hydrationObserver.assertComplete();\n+\n+        // Verify that syncQueriesStarted was emitted once.\n+        assertEquals(1, syncStartAccumulator.await((int) OP_TIMEOUT_MS, TimeUnit.MILLISECONDS).size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAxMzIzMA==", "bodyText": "Yeah...we can always change that. I'll make a note to do that in a follow up PR", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r474013230", "createdAt": "2020-08-20T14:10:48Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "diffHunk": "@@ -116,6 +130,88 @@ public void setup() throws AmplifyException {\n             .build();\n     }\n \n+    /**\n+     * During a base sync, there are a series of events that should be emitted.\n+     * This test verifies that these events are published via Amplify Hub depending\n+     * on actions takes for each available model.\n+     * @throws DataStoreException Not expected.\n+     */\n+    @Test\n+    public void dataStoreHubEventsTriggered() throws DataStoreException {\n+        // Arrange - BEGIN\n+        int expectedModelCount = Arrays.asList(Post.class, BlogOwner.class).size();\n+        // Collects one syncQueriesStarted event.\n+        HubAccumulator syncStartAccumulator =\n+            createAccumulator(syncQueryStartedForModels(modelCount), 1);\n+        // Collects one syncQueriesReady event.\n+        HubAccumulator syncQueryReadyAccumulator =\n+            createAccumulator(forEvent(DataStoreChannelEventName.SYNC_QUERIES_READY), 1);\n+        // Collects one modelSynced event for each model.\n+        HubAccumulator modelSyncedAccumulator =\n+            createAccumulator(forEvent(DataStoreChannelEventName.MODEL_SYNCED), expectedModelCount);\n+\n+        // Add a couple of seed records so they can be deleted/updated.\n+        storageAdapter.save(DRUM_POST.getModel());\n+        storageAdapter.save(BLOGGER_ISLA.getModel());\n+\n+        // Mock sync query results for a couple of models.\n+        AppSyncMocking.sync(appSync)\n+            .mockSuccessResponse(Post.class, DELETED_DRUM_POST)\n+            .mockSuccessResponse(BlogOwner.class, BLOGGER_ISLA, BLOGGER_JAMESON);\n+\n+        // Start the accumulators.\n+        syncQueryReadyAccumulator.start();\n+        syncStartAccumulator.start();\n+        modelSyncedAccumulator.start();\n+\n+        TestObserver<ModelWithMetadata<? extends Model>> hydrationObserver = TestObserver.create();\n+        // Arrange - END\n+\n+        // Act: kickoff sync.\n+        syncProcessor.hydrate().subscribe(hydrationObserver);\n+\n+        // Check - BEGIN\n+        // Verify that sync completes.\n+        assertTrue(hydrationObserver.awaitTerminalEvent(OP_TIMEOUT_MS, TimeUnit.MILLISECONDS));\n+        hydrationObserver.assertNoErrors();\n+        hydrationObserver.assertComplete();\n+\n+        // Verify that syncQueriesStarted was emitted once.\n+        assertEquals(1, syncStartAccumulator.await((int) OP_TIMEOUT_MS, TimeUnit.MILLISECONDS).size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYwOTIyOA=="}, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3NTQyMA==", "bodyText": "Sounds good, yes -- for a separate PR!", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r474075420", "createdAt": "2020-08-20T15:33:51Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "diffHunk": "@@ -116,6 +130,88 @@ public void setup() throws AmplifyException {\n             .build();\n     }\n \n+    /**\n+     * During a base sync, there are a series of events that should be emitted.\n+     * This test verifies that these events are published via Amplify Hub depending\n+     * on actions takes for each available model.\n+     * @throws DataStoreException Not expected.\n+     */\n+    @Test\n+    public void dataStoreHubEventsTriggered() throws DataStoreException {\n+        // Arrange - BEGIN\n+        int expectedModelCount = Arrays.asList(Post.class, BlogOwner.class).size();\n+        // Collects one syncQueriesStarted event.\n+        HubAccumulator syncStartAccumulator =\n+            createAccumulator(syncQueryStartedForModels(modelCount), 1);\n+        // Collects one syncQueriesReady event.\n+        HubAccumulator syncQueryReadyAccumulator =\n+            createAccumulator(forEvent(DataStoreChannelEventName.SYNC_QUERIES_READY), 1);\n+        // Collects one modelSynced event for each model.\n+        HubAccumulator modelSyncedAccumulator =\n+            createAccumulator(forEvent(DataStoreChannelEventName.MODEL_SYNCED), expectedModelCount);\n+\n+        // Add a couple of seed records so they can be deleted/updated.\n+        storageAdapter.save(DRUM_POST.getModel());\n+        storageAdapter.save(BLOGGER_ISLA.getModel());\n+\n+        // Mock sync query results for a couple of models.\n+        AppSyncMocking.sync(appSync)\n+            .mockSuccessResponse(Post.class, DELETED_DRUM_POST)\n+            .mockSuccessResponse(BlogOwner.class, BLOGGER_ISLA, BLOGGER_JAMESON);\n+\n+        // Start the accumulators.\n+        syncQueryReadyAccumulator.start();\n+        syncStartAccumulator.start();\n+        modelSyncedAccumulator.start();\n+\n+        TestObserver<ModelWithMetadata<? extends Model>> hydrationObserver = TestObserver.create();\n+        // Arrange - END\n+\n+        // Act: kickoff sync.\n+        syncProcessor.hydrate().subscribe(hydrationObserver);\n+\n+        // Check - BEGIN\n+        // Verify that sync completes.\n+        assertTrue(hydrationObserver.awaitTerminalEvent(OP_TIMEOUT_MS, TimeUnit.MILLISECONDS));\n+        hydrationObserver.assertNoErrors();\n+        hydrationObserver.assertComplete();\n+\n+        // Verify that syncQueriesStarted was emitted once.\n+        assertEquals(1, syncStartAccumulator.await((int) OP_TIMEOUT_MS, TimeUnit.MILLISECONDS).size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYwOTIyOA=="}, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDMwMzQ1OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNTozMzozOVrOHDq1gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNDoyOTozM1rOHEEUaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYwOTYwMQ==", "bodyText": "Can we do BlogOwner.class.getSimpleName() for these case statements, instead of string literal?", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r473609601", "createdAt": "2020-08-20T05:33:39Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "diffHunk": "@@ -116,6 +130,88 @@ public void setup() throws AmplifyException {\n             .build();\n     }\n \n+    /**\n+     * During a base sync, there are a series of events that should be emitted.\n+     * This test verifies that these events are published via Amplify Hub depending\n+     * on actions takes for each available model.\n+     * @throws DataStoreException Not expected.\n+     */\n+    @Test\n+    public void dataStoreHubEventsTriggered() throws DataStoreException {\n+        // Arrange - BEGIN\n+        int expectedModelCount = Arrays.asList(Post.class, BlogOwner.class).size();\n+        // Collects one syncQueriesStarted event.\n+        HubAccumulator syncStartAccumulator =\n+            createAccumulator(syncQueryStartedForModels(modelCount), 1);\n+        // Collects one syncQueriesReady event.\n+        HubAccumulator syncQueryReadyAccumulator =\n+            createAccumulator(forEvent(DataStoreChannelEventName.SYNC_QUERIES_READY), 1);\n+        // Collects one modelSynced event for each model.\n+        HubAccumulator modelSyncedAccumulator =\n+            createAccumulator(forEvent(DataStoreChannelEventName.MODEL_SYNCED), expectedModelCount);\n+\n+        // Add a couple of seed records so they can be deleted/updated.\n+        storageAdapter.save(DRUM_POST.getModel());\n+        storageAdapter.save(BLOGGER_ISLA.getModel());\n+\n+        // Mock sync query results for a couple of models.\n+        AppSyncMocking.sync(appSync)\n+            .mockSuccessResponse(Post.class, DELETED_DRUM_POST)\n+            .mockSuccessResponse(BlogOwner.class, BLOGGER_ISLA, BLOGGER_JAMESON);\n+\n+        // Start the accumulators.\n+        syncQueryReadyAccumulator.start();\n+        syncStartAccumulator.start();\n+        modelSyncedAccumulator.start();\n+\n+        TestObserver<ModelWithMetadata<? extends Model>> hydrationObserver = TestObserver.create();\n+        // Arrange - END\n+\n+        // Act: kickoff sync.\n+        syncProcessor.hydrate().subscribe(hydrationObserver);\n+\n+        // Check - BEGIN\n+        // Verify that sync completes.\n+        assertTrue(hydrationObserver.awaitTerminalEvent(OP_TIMEOUT_MS, TimeUnit.MILLISECONDS));\n+        hydrationObserver.assertNoErrors();\n+        hydrationObserver.assertComplete();\n+\n+        // Verify that syncQueriesStarted was emitted once.\n+        assertEquals(1, syncStartAccumulator.await((int) OP_TIMEOUT_MS, TimeUnit.MILLISECONDS).size());\n+        // Verify that syncQueriesReady was emitted once.\n+        assertEquals(1, syncQueryReadyAccumulator.await((int) OP_TIMEOUT_MS, TimeUnit.MILLISECONDS).size());\n+\n+        // Get the list of modelSynced events captured.\n+        List<HubEvent<?>> hubEvents = modelSyncedAccumulator.await((int) OP_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+        // Verify that [number of events] = [number of models]\n+        assertEquals(expectedModelCount, hubEvents.size());\n+\n+        // For each event (excluding system models), verify the desired count.\n+        for (HubEvent<?> event : hubEvents) {\n+            ModelSyncedEvent eventData = (ModelSyncedEvent) event.getData();\n+            assertTrue(eventData.isFullSync());\n+            assertFalse(eventData.isDeltaSync());\n+            String eventModel = eventData.getModel();\n+            switch (eventModel) {\n+                case \"BlogOwner\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDAyNzExMg==", "bodyText": "Interesting...Evidently BlogOwner.class.getSimpleName() is not considered a compile-time constant. Even if I create a final static field and assign it the value of BlogOwner.class.getSimpleName(), the compiler still flags it with a Constant expression required error", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r474027112", "createdAt": "2020-08-20T14:29:33Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "diffHunk": "@@ -116,6 +130,88 @@ public void setup() throws AmplifyException {\n             .build();\n     }\n \n+    /**\n+     * During a base sync, there are a series of events that should be emitted.\n+     * This test verifies that these events are published via Amplify Hub depending\n+     * on actions takes for each available model.\n+     * @throws DataStoreException Not expected.\n+     */\n+    @Test\n+    public void dataStoreHubEventsTriggered() throws DataStoreException {\n+        // Arrange - BEGIN\n+        int expectedModelCount = Arrays.asList(Post.class, BlogOwner.class).size();\n+        // Collects one syncQueriesStarted event.\n+        HubAccumulator syncStartAccumulator =\n+            createAccumulator(syncQueryStartedForModels(modelCount), 1);\n+        // Collects one syncQueriesReady event.\n+        HubAccumulator syncQueryReadyAccumulator =\n+            createAccumulator(forEvent(DataStoreChannelEventName.SYNC_QUERIES_READY), 1);\n+        // Collects one modelSynced event for each model.\n+        HubAccumulator modelSyncedAccumulator =\n+            createAccumulator(forEvent(DataStoreChannelEventName.MODEL_SYNCED), expectedModelCount);\n+\n+        // Add a couple of seed records so they can be deleted/updated.\n+        storageAdapter.save(DRUM_POST.getModel());\n+        storageAdapter.save(BLOGGER_ISLA.getModel());\n+\n+        // Mock sync query results for a couple of models.\n+        AppSyncMocking.sync(appSync)\n+            .mockSuccessResponse(Post.class, DELETED_DRUM_POST)\n+            .mockSuccessResponse(BlogOwner.class, BLOGGER_ISLA, BLOGGER_JAMESON);\n+\n+        // Start the accumulators.\n+        syncQueryReadyAccumulator.start();\n+        syncStartAccumulator.start();\n+        modelSyncedAccumulator.start();\n+\n+        TestObserver<ModelWithMetadata<? extends Model>> hydrationObserver = TestObserver.create();\n+        // Arrange - END\n+\n+        // Act: kickoff sync.\n+        syncProcessor.hydrate().subscribe(hydrationObserver);\n+\n+        // Check - BEGIN\n+        // Verify that sync completes.\n+        assertTrue(hydrationObserver.awaitTerminalEvent(OP_TIMEOUT_MS, TimeUnit.MILLISECONDS));\n+        hydrationObserver.assertNoErrors();\n+        hydrationObserver.assertComplete();\n+\n+        // Verify that syncQueriesStarted was emitted once.\n+        assertEquals(1, syncStartAccumulator.await((int) OP_TIMEOUT_MS, TimeUnit.MILLISECONDS).size());\n+        // Verify that syncQueriesReady was emitted once.\n+        assertEquals(1, syncQueryReadyAccumulator.await((int) OP_TIMEOUT_MS, TimeUnit.MILLISECONDS).size());\n+\n+        // Get the list of modelSynced events captured.\n+        List<HubEvent<?>> hubEvents = modelSyncedAccumulator.await((int) OP_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+        // Verify that [number of events] = [number of models]\n+        assertEquals(expectedModelCount, hubEvents.size());\n+\n+        // For each event (excluding system models), verify the desired count.\n+        for (HubEvent<?> event : hubEvents) {\n+            ModelSyncedEvent eventData = (ModelSyncedEvent) event.getData();\n+            assertTrue(eventData.isFullSync());\n+            assertFalse(eventData.isDeltaSync());\n+            String eventModel = eventData.getModel();\n+            switch (eventModel) {\n+                case \"BlogOwner\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYwOTYwMQ=="}, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDMyODE4OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNTo0MDoxNlrOHDrFjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNDo1NToyOFrOHEFfCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYxMzcxMA==", "bodyText": "We have this pattern pretty frequently, by now.\nWe could wrap it into a utility:\nList<String> modelNames = ForEach.inList(models, Model::getSimpleName);\n// In testutils, probskis.\npublic final class ForEach {\n     private ForEach() {}\n\n     <I, O> List<O> inList(List<I> in, Mapping<I, O> mapping) {\n         final List<O> out = new ArrayList<>();\n         for (I item : in) {\n             out.add(mapping.apply(item));\n         }\n         return Immutable.of(out);\n     }\n\n     @FunctionalInterface\n     interface Mapping<I, O> {\n         O apply(I in);\n     }\n}\nSoftware is so cool. Sigh.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r473613710", "createdAt": "2020-08-20T05:40:16Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "diffHunk": "@@ -400,6 +496,48 @@ public void userProvidedErrorCallbackInvokedOnFailure() {\n         assertEquals(1, errorHandlerCallCount);\n     }\n \n+    private void assertOperationTypeCounts(ModelSyncedEvent event,\n+                                           int expectedAdd,\n+                                           int expectedUpdate,\n+                                           int expectedDelete) {\n+        assertEquals(expectedAdd, event.getAdded());\n+        assertEquals(expectedUpdate, event.getUpdated());\n+        assertEquals(expectedDelete, event.getDeleted());\n+    }\n+\n+    private static HubAccumulator createAccumulator(HubEventFilter eventFilter, int times) {\n+        return HubAccumulator.create(HubChannel.DATASTORE, eventFilter, times);\n+    }\n+\n+    private static HubEventFilter forEvent(DataStoreChannelEventName eventName) {\n+        return hubEvent -> eventName.toString().equals(hubEvent.getName());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private HubEventFilter syncMetricsEmittedFor(Class<? extends Model>... models) {\n+        List<String> modelNames = Observable.fromIterable(Arrays.asList(models))\n+            .map(model -> model.getSimpleName())\n+            .toList()\n+            .blockingGet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA0NjIxNw==", "bodyText": "I like it :)", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r474046217", "createdAt": "2020-08-20T14:55:28Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "diffHunk": "@@ -400,6 +496,48 @@ public void userProvidedErrorCallbackInvokedOnFailure() {\n         assertEquals(1, errorHandlerCallCount);\n     }\n \n+    private void assertOperationTypeCounts(ModelSyncedEvent event,\n+                                           int expectedAdd,\n+                                           int expectedUpdate,\n+                                           int expectedDelete) {\n+        assertEquals(expectedAdd, event.getAdded());\n+        assertEquals(expectedUpdate, event.getUpdated());\n+        assertEquals(expectedDelete, event.getDeleted());\n+    }\n+\n+    private static HubAccumulator createAccumulator(HubEventFilter eventFilter, int times) {\n+        return HubAccumulator.create(HubChannel.DATASTORE, eventFilter, times);\n+    }\n+\n+    private static HubEventFilter forEvent(DataStoreChannelEventName eventName) {\n+        return hubEvent -> eventName.toString().equals(hubEvent.getName());\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private HubEventFilter syncMetricsEmittedFor(Class<? extends Model>... models) {\n+        List<String> modelNames = Observable.fromIterable(Arrays.asList(models))\n+            .map(model -> model.getSimpleName())\n+            .toList()\n+            .blockingGet();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYxMzcxMA=="}, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDM0Mzk3OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNTo0NDoyMlrOHDrPYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTowODozOVrOHEGImw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYxNjIyNA==", "bodyText": "When you call this, it is hard to remember which int is which. While potentially overkill, one solution is like:\nassertOperationTypeCounts(event, TypeCounts.builder().added(5).updated(1).deleted(0).build());\nWith a little inner data class to store those vals.\nOr hey, I mean, it's just a test class. Life doesn't always need to be complicated, we could even just have:\nclass TypeCounts {\n    int added;\n    int updated;\n    int deleted;\n}\n\nAnd then prepare them:\nTypeCounts counts = new TypeCounts();\ncounts.added = 4;\ncounts.updated = 9;\ncounts.deleted = 1;", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r473616224", "createdAt": "2020-08-20T05:44:22Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "diffHunk": "@@ -400,6 +496,48 @@ public void userProvidedErrorCallbackInvokedOnFailure() {\n         assertEquals(1, errorHandlerCallCount);\n     }\n \n+    private void assertOperationTypeCounts(ModelSyncedEvent event,\n+                                           int expectedAdd,\n+                                           int expectedUpdate,\n+                                           int expectedDelete) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYxNzIxNw==", "bodyText": "Oh duh, or wait -- update. Can you just reuse the ModelSyncMetrics as a pojo to store these immediate values?", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r473617217", "createdAt": "2020-08-20T05:46:02Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "diffHunk": "@@ -400,6 +496,48 @@ public void userProvidedErrorCallbackInvokedOnFailure() {\n         assertEquals(1, errorHandlerCallCount);\n     }\n \n+    private void assertOperationTypeCounts(ModelSyncedEvent event,\n+                                           int expectedAdd,\n+                                           int expectedUpdate,\n+                                           int expectedDelete) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYxNjIyNA=="}, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 165}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA1Njg1OQ==", "bodyText": "Oh yeah...I don't even have to have a separate method. I just created \"expected\" objects and use assertEquals.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r474056859", "createdAt": "2020-08-20T15:08:39Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "diffHunk": "@@ -400,6 +496,48 @@ public void userProvidedErrorCallbackInvokedOnFailure() {\n         assertEquals(1, errorHandlerCallCount);\n     }\n \n+    private void assertOperationTypeCounts(ModelSyncedEvent event,\n+                                           int expectedAdd,\n+                                           int expectedUpdate,\n+                                           int expectedDelete) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYxNjIyNA=="}, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDM0NjkzOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNTo0NTowN1rOHDrRDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNTo0NTowN1rOHDrRDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYxNjY1Mw==", "bodyText": "I discuss a ForEach utility below that may make sense, if we have to pull this same trick more than a time or two.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r473616653", "createdAt": "2020-08-20T05:45:07Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SyncProcessorTest.java", "diffHunk": "@@ -69,13 +78,17 @@\n public final class SyncProcessorTest {\n     private static final long OP_TIMEOUT_MS = TimeUnit.SECONDS.toMillis(2);\n     private static final long BASE_SYNC_INTERVAL_MINUTES = TimeUnit.DAYS.toMinutes(1);\n+    private static final List<String> SYSTEM_MODEL_NAMES =\n+        Observable.fromIterable(SystemModelsProviderFactory.create().models())\n+            .map(Class::getSimpleName).toList().blockingGet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDM1NDQwOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNTo0NzowMFrOHDrVwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNToxOToxNFrOHEGlCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYxNzg1Nw==", "bodyText": "Does this get sent back to user? Does it need to be public, with equals/hashCode/toString and field accessors?", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r473617857", "createdAt": "2020-08-20T05:47:00Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "diffHunk": "@@ -340,4 +380,25 @@ public SyncProcessor build() {\n             return modelSchemaRegistry.getModelSchemaForModelInstance(modelWithMetadata.getModel());\n         }\n     }\n+\n+    private static final class ModelSyncMetrics {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2NDEzNw==", "bodyText": "Actually...this can be removed entirely.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r474064137", "createdAt": "2020-08-20T15:19:14Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "diffHunk": "@@ -340,4 +380,25 @@ public SyncProcessor build() {\n             return modelSchemaRegistry.getModelSchemaForModelInstance(modelWithMetadata.getModel());\n         }\n     }\n+\n+    private static final class ModelSyncMetrics {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYxNzg1Nw=="}, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDM2MDg0OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNTo0ODozN1rOHDrZ7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTo0NjoxNFrOHFrLIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYxODkyNA==", "bodyText": "What implications does this have on testability, if you inline Amplify.Hub? Should we instead snake a hub instance in through the constructor? That way, you could provide a mock in test, if you needed to?\nI forget why we put this in the publish arg... it seemed like a good idea at the time?", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r473618924", "createdAt": "2020-08-20T05:48:37Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "diffHunk": "@@ -113,13 +144,21 @@ private Completable createHydrationTask(\n                     // So that when we save them, the references will exist.\n                     .sorted(modelWithMetadataComparator::compare)\n                     // For each ModelWithMetadata, merge it into the local store.\n-                    .flatMapCompletable(merger::merge)\n+                    .flatMapCompletable(modelWithMetadata ->\n+                        merger.merge(modelWithMetadata, metricsAccumulator::increment)\n+                    )\n                     .toSingle(() -> lastSyncTime.exists() ? SyncType.DELTA : SyncType.BASE);\n             })\n             .flatMapCompletable(syncType -> {\n-                return SyncType.DELTA.equals(syncType) ?\n+                Completable syncTimeSaveCompletable = SyncType.DELTA.equals(syncType) ?\n                     syncTimeRegistry.saveLastDeltaSyncTime(modelClass, SyncTime.now()) :\n                     syncTimeRegistry.saveLastBaseSyncTime(modelClass, SyncTime.now());\n+                return syncTimeSaveCompletable.andThen(Completable.fromAction(() -> {\n+                    metricsAccumulator\n+                        .toModelSyncedEvent(syncType)\n+                        .toHubEvent()\n+                        .publish(HubChannel.DATASTORE, Amplify.Hub);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA2NTY5Mg==", "bodyText": "The original intent was to not have Amplify.Hub references inside the HubEvent class. Let me ponder over this one for a bit.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r474065692", "createdAt": "2020-08-20T15:21:28Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "diffHunk": "@@ -113,13 +144,21 @@ private Completable createHydrationTask(\n                     // So that when we save them, the references will exist.\n                     .sorted(modelWithMetadataComparator::compare)\n                     // For each ModelWithMetadata, merge it into the local store.\n-                    .flatMapCompletable(merger::merge)\n+                    .flatMapCompletable(modelWithMetadata ->\n+                        merger.merge(modelWithMetadata, metricsAccumulator::increment)\n+                    )\n                     .toSingle(() -> lastSyncTime.exists() ? SyncType.DELTA : SyncType.BASE);\n             })\n             .flatMapCompletable(syncType -> {\n-                return SyncType.DELTA.equals(syncType) ?\n+                Completable syncTimeSaveCompletable = SyncType.DELTA.equals(syncType) ?\n                     syncTimeRegistry.saveLastDeltaSyncTime(modelClass, SyncTime.now()) :\n                     syncTimeRegistry.saveLastBaseSyncTime(modelClass, SyncTime.now());\n+                return syncTimeSaveCompletable.andThen(Completable.fromAction(() -> {\n+                    metricsAccumulator\n+                        .toModelSyncedEvent(syncType)\n+                        .toHubEvent()\n+                        .publish(HubChannel.DATASTORE, Amplify.Hub);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYxODkyNA=="}, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA3NDM3OQ==", "bodyText": "I may have simply been wrong on this. It does feel like encapsulating it HubEvent is cleaner than stating it at random call sites like this, doesn't it?", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r474074379", "createdAt": "2020-08-20T15:32:49Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "diffHunk": "@@ -113,13 +144,21 @@ private Completable createHydrationTask(\n                     // So that when we save them, the references will exist.\n                     .sorted(modelWithMetadataComparator::compare)\n                     // For each ModelWithMetadata, merge it into the local store.\n-                    .flatMapCompletable(merger::merge)\n+                    .flatMapCompletable(modelWithMetadata ->\n+                        merger.merge(modelWithMetadata, metricsAccumulator::increment)\n+                    )\n                     .toSingle(() -> lastSyncTime.exists() ? SyncType.DELTA : SyncType.BASE);\n             })\n             .flatMapCompletable(syncType -> {\n-                return SyncType.DELTA.equals(syncType) ?\n+                Completable syncTimeSaveCompletable = SyncType.DELTA.equals(syncType) ?\n                     syncTimeRegistry.saveLastDeltaSyncTime(modelClass, SyncTime.now()) :\n                     syncTimeRegistry.saveLastBaseSyncTime(modelClass, SyncTime.now());\n+                return syncTimeSaveCompletable.andThen(Completable.fromAction(() -> {\n+                    metricsAccumulator\n+                        .toModelSyncedEvent(syncType)\n+                        .toHubEvent()\n+                        .publish(HubChannel.DATASTORE, Amplify.Hub);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYxODkyNA=="}, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxMjI5MA==", "bodyText": "I've gone back and changed this a bit. I see HubEvent more as a POJO rather than something that has behavior. I changed the call sites back to:\nAmplify.Hub.publish(HubChannel.DATASTORE, <eventDataPojo>.toHubEvent());", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r475712290", "createdAt": "2020-08-24T15:46:14Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "diffHunk": "@@ -113,13 +144,21 @@ private Completable createHydrationTask(\n                     // So that when we save them, the references will exist.\n                     .sorted(modelWithMetadataComparator::compare)\n                     // For each ModelWithMetadata, merge it into the local store.\n-                    .flatMapCompletable(merger::merge)\n+                    .flatMapCompletable(modelWithMetadata ->\n+                        merger.merge(modelWithMetadata, metricsAccumulator::increment)\n+                    )\n                     .toSingle(() -> lastSyncTime.exists() ? SyncType.DELTA : SyncType.BASE);\n             })\n             .flatMapCompletable(syncType -> {\n-                return SyncType.DELTA.equals(syncType) ?\n+                Completable syncTimeSaveCompletable = SyncType.DELTA.equals(syncType) ?\n                     syncTimeRegistry.saveLastDeltaSyncTime(modelClass, SyncTime.now()) :\n                     syncTimeRegistry.saveLastBaseSyncTime(modelClass, SyncTime.now());\n+                return syncTimeSaveCompletable.andThen(Completable.fromAction(() -> {\n+                    metricsAccumulator\n+                        .toModelSyncedEvent(syncType)\n+                        .toHubEvent()\n+                        .publish(HubChannel.DATASTORE, Amplify.Hub);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYxODkyNA=="}, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDM2NzIzOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNTo1MDowOFrOHDrdyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTo0MTozMFrOHEHvCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYxOTkxMw==", "bodyText": "See other comments about ForEach. This one returns String[] though instead of List<String>. I guess we'd have to standardize. Oh, or like ForEach.inArray, ForEach.inList, etc. Could do multiple collection types", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r473619913", "createdAt": "2020-08-20T05:50:08Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "diffHunk": "@@ -74,6 +84,11 @@ private SyncProcessor(\n         this.appSync = Objects.requireNonNull(appSync);\n         this.merger = Objects.requireNonNull(merger);\n         this.dataStoreConfigurationProvider = dataStoreConfigurationProvider;\n+        this.modelNames = Observable.fromIterable(modelProvider.models())\n+                                        .map(m -> m.getSimpleName())\n+                                        .toList()\n+                                        .blockingGet()\n+                                        .toArray(new String[0]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA4MzA4Mw==", "bodyText": "I changed the input parameter to be Collection<T> which covers a majority of cases and also added a inArray method in case someone needs it.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r474083083", "createdAt": "2020-08-20T15:41:30Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SyncProcessor.java", "diffHunk": "@@ -74,6 +84,11 @@ private SyncProcessor(\n         this.appSync = Objects.requireNonNull(appSync);\n         this.merger = Objects.requireNonNull(merger);\n         this.dataStoreConfigurationProvider = dataStoreConfigurationProvider;\n+        this.modelNames = Observable.fromIterable(modelProvider.models())\n+                                        .map(m -> m.getSimpleName())\n+                                        .toList()\n+                                        .blockingGet()\n+                                        .toArray(new String[0]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYxOTkxMw=="}, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDM2OTUwOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNTo1MDo0M1rOHDrfOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNTo1MDo0M1rOHDrfOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyMDI4MQ==", "bodyText": "Is this a dead store variable? Doesn't look like syncableModels gets used.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r473620281", "createdAt": "2020-08-20T05:50:43Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -97,6 +101,9 @@ public Orchestrator(\n         Merger merger = new Merger(mutationOutbox, versionRepository, localStorageAdapter);\n         SyncTimeRegistry syncTimeRegistry = new SyncTimeRegistry(localStorageAdapter);\n \n+        this.localStorageAdapter = localStorageAdapter;\n+        syncableModels = modelProvider.models();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDM3MDYxOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNTo1MDo1OFrOHDrf7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTo0Nzo1OFrOHEH_-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyMDQ2MQ==", "bodyText": "Is this dead store, too?", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r473620461", "createdAt": "2020-08-20T05:50:58Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -97,6 +101,9 @@ public Orchestrator(\n         Merger merger = new Merger(mutationOutbox, versionRepository, localStorageAdapter);\n         SyncTimeRegistry syncTimeRegistry = new SyncTimeRegistry(localStorageAdapter);\n \n+        this.localStorageAdapter = localStorageAdapter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA4NzQxNg==", "bodyText": "Yup...can't remember why, but I think I was using it somewhere other than the constructor in one of my previous iterations.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r474087416", "createdAt": "2020-08-20T15:47:58Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -97,6 +101,9 @@ public Orchestrator(\n         Merger merger = new Merger(mutationOutbox, versionRepository, localStorageAdapter);\n         SyncTimeRegistry syncTimeRegistry = new SyncTimeRegistry(localStorageAdapter);\n \n+        this.localStorageAdapter = localStorageAdapter;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyMDQ2MQ=="}, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDM3NDYyOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/ModelSyncMetricsAccumulator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNTo1MTo1OVrOHDriWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNTo1NTozMlrOHEIUPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyMTA4MA==", "bodyText": "Does it make sense for the key to be the constrained type, DataStoreItemChange.TYPE, instead of just String?", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r473621080", "createdAt": "2020-08-20T05:51:59Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/ModelSyncMetricsAccumulator.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.syncengine;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.datastore.DataStoreItemChange;\n+import com.amplifyframework.datastore.events.ModelSyncedEvent;\n+import com.amplifyframework.datastore.storage.LocalStorageAdapter;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.logging.Logger;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Class that encapsulates the logic of keeping track of sync metrics\n+ * by operation type for a given model.\n+ */\n+final class ModelSyncMetricsAccumulator {\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+    private final Map<String, AtomicInteger> syncMetrics;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDA5MjYwNA==", "bodyText": "You know...I tried to do this and couldn't get it to work. Finally just realized why: there is a StorageItemChange.Type and a DataStoreItemChange.Type. When I initially tried this, I was using StorageItemChange.Type in the key declaration, and then trying to retrieve by passing in a variable of DataStoreItemChange.Type. Just brilliant \ud83e\udd23", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r474092604", "createdAt": "2020-08-20T15:55:32Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/ModelSyncMetricsAccumulator.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.syncengine;\n+\n+import com.amplifyframework.core.Amplify;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.datastore.DataStoreItemChange;\n+import com.amplifyframework.datastore.events.ModelSyncedEvent;\n+import com.amplifyframework.datastore.storage.LocalStorageAdapter;\n+import com.amplifyframework.datastore.storage.StorageItemChange;\n+import com.amplifyframework.logging.Logger;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * Class that encapsulates the logic of keeping track of sync metrics\n+ * by operation type for a given model.\n+ */\n+final class ModelSyncMetricsAccumulator {\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+    private final Map<String, AtomicInteger> syncMetrics;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyMTA4MA=="}, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MDM4ODcyOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Merger.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwNTo1NToyNVrOHDrrEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzo1MjowNlrOHJG2Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyMzMxNA==", "bodyText": "Is there anyway we can avoid having these callbacks?\nThe Completable is already an asynchronous signal. Now, this method has two different async signals that have different lifecycles. It's a bit to handle, conceptually.\nOne possible option, if you need to observe save/deletes on the datastore, is the observe() method on the LocalStorageAdapter? Hopefully that can be setup internally, without effecting the Merger's contract?", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r473623314", "createdAt": "2020-08-20T05:55:25Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Merger.java", "diffHunk": "@@ -66,6 +67,18 @@\n      * @return A completable operation to merge the model\n      */\n     <T extends Model> Completable merge(ModelWithMetadata<T> modelWithMetadata) {\n+        return merge(modelWithMetadata, value -> { });\n+    }\n+\n+    /**\n+     * Merge an item back into the local store, using a default strategy.\n+     * @param modelWithMetadata A model, combined with metadata about it\n+     * @param storageItemChangeConsumer A callback invoked when the merge method saves or deletes the model.\n+     * @param <T> Type of model\n+     * @return A completable operation to merge the model\n+     */\n+    <T extends Model> Completable merge(ModelWithMetadata<T> modelWithMetadata,\n+                                        Consumer<StorageItemChange<T>> storageItemChangeConsumer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDExMDY4NQ==", "bodyText": "That was my previous implementation. However, it proved to be cumbersome from the standpoint of determining the lifecycle of the sync attempt for a given model.\nI was creating an observer before kicking off the sync. That observer kept an in-memory map of counters for each model and applied the following logic to each event received.:\n// pseudo-code\nonChangeEvent (changeEvent) {\n if (changeEvent.initiator == SYNC_ENGINE && isUserModel(changeEvent.model)) {\n   incrementCounter(changeEvent.model, changeEvent.changeType)\n } else if (changeEvent.initiator == SYNC_ENGINE && changeEvent.model == LastSyncMetadata) {\n  // That means the sync attempt finished for one of the models\n  let syncMetadata = changeEvent.eventPayload\n  //end of sync attempt for model specified in the \n  emitMetricsFor(syncMetadata.modelName);\n } else {\n   NoOp\n }\n}\n\nWhile this approach worked and it was nicely decoupled, it felt kind of brittle. It assumes that the initial sync  is the only thing emitting events with initiator set to SYNC_ENGINE. While this is true right now, it's one of those things that could change and break this logic. It also assumes that an update to the LastSyncMetadata table made by SYNC_ENGINE was the end of the sync attempt for the model.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r474110685", "createdAt": "2020-08-20T16:23:57Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Merger.java", "diffHunk": "@@ -66,6 +67,18 @@\n      * @return A completable operation to merge the model\n      */\n     <T extends Model> Completable merge(ModelWithMetadata<T> modelWithMetadata) {\n+        return merge(modelWithMetadata, value -> { });\n+    }\n+\n+    /**\n+     * Merge an item back into the local store, using a default strategy.\n+     * @param modelWithMetadata A model, combined with metadata about it\n+     * @param storageItemChangeConsumer A callback invoked when the merge method saves or deletes the model.\n+     * @param <T> Type of model\n+     * @return A completable operation to merge the model\n+     */\n+    <T extends Model> Completable merge(ModelWithMetadata<T> modelWithMetadata,\n+                                        Consumer<StorageItemChange<T>> storageItemChangeConsumer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyMzMxNA=="}, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc3MDc4NA==", "bodyText": "If I have bandwidth tomorrow, I'll revisit this one to see what I can come up with. Maybe instead of returning a completable, I can return a Single or a Maybe with the StorageItemChange", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r478770784", "createdAt": "2020-08-28T00:48:27Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Merger.java", "diffHunk": "@@ -66,6 +67,18 @@\n      * @return A completable operation to merge the model\n      */\n     <T extends Model> Completable merge(ModelWithMetadata<T> modelWithMetadata) {\n+        return merge(modelWithMetadata, value -> { });\n+    }\n+\n+    /**\n+     * Merge an item back into the local store, using a default strategy.\n+     * @param modelWithMetadata A model, combined with metadata about it\n+     * @param storageItemChangeConsumer A callback invoked when the merge method saves or deletes the model.\n+     * @param <T> Type of model\n+     * @return A completable operation to merge the model\n+     */\n+    <T extends Model> Completable merge(ModelWithMetadata<T> modelWithMetadata,\n+                                        Consumer<StorageItemChange<T>> storageItemChangeConsumer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyMzMxNA=="}, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMxMTQwMg==", "bodyText": "I'll do this as a follow-up.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r479311402", "createdAt": "2020-08-28T13:52:06Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Merger.java", "diffHunk": "@@ -66,6 +67,18 @@\n      * @return A completable operation to merge the model\n      */\n     <T extends Model> Completable merge(ModelWithMetadata<T> modelWithMetadata) {\n+        return merge(modelWithMetadata, value -> { });\n+    }\n+\n+    /**\n+     * Merge an item back into the local store, using a default strategy.\n+     * @param modelWithMetadata A model, combined with metadata about it\n+     * @param storageItemChangeConsumer A callback invoked when the merge method saves or deletes the model.\n+     * @param <T> Type of model\n+     * @return A completable operation to merge the model\n+     */\n+    <T extends Model> Completable merge(ModelWithMetadata<T> modelWithMetadata,\n+                                        Consumer<StorageItemChange<T>> storageItemChangeConsumer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzYyMzMxNA=="}, "originalCommit": {"oid": "e0187380dc0aa8f19287eee68ab556d0dea7d8f3"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Mjg1NTE1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/datastore/events/SyncQueriesStartedEvent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzoyMzowMlrOHIkeMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxMzo0OTowNVrOHJGrYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc0ODIwOQ==", "bodyText": "Perhaps we can use List<String> or Set<String> here?\nMost de/serializers should be able to easily convert these collections into a json array.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r478748209", "createdAt": "2020-08-27T23:23:02Z", "author": {"login": "raphkim"}, "path": "core/src/main/java/com/amplifyframework/datastore/events/SyncQueriesStartedEvent.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.events;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * Event payload emitted when the sync process starts.\n+ */\n+public final class SyncQueriesStartedEvent {\n+    private final String[] models;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e08675b5635e38d45b58d8bee47d08b388fcfa2"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTMwODY0MA==", "bodyText": "I'll probably do this as a follow up PR.", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r479308640", "createdAt": "2020-08-28T13:49:05Z", "author": {"login": "rjuliano"}, "path": "core/src/main/java/com/amplifyframework/datastore/events/SyncQueriesStartedEvent.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.events;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.Arrays;\n+\n+/**\n+ * Event payload emitted when the sync process starts.\n+ */\n+public final class SyncQueriesStartedEvent {\n+    private final String[] models;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc0ODIwOQ=="}, "originalCommit": {"oid": "2e08675b5635e38d45b58d8bee47d08b388fcfa2"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5Mjg1Njg5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/amplifyframework/util/ForEach.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzoyMzo1OFrOHIkfQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QyMzoyMzo1OFrOHIkfQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODc0ODQ4MA==", "bodyText": "cool!", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r478748480", "createdAt": "2020-08-27T23:23:58Z", "author": {"login": "raphkim"}, "path": "core/src/main/java/com/amplifyframework/util/ForEach.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.util;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+\n+/**\n+ * Utility class that reduces boilerplate code in tests\n+ * where an oft-used pattern of mapping a list of values to another by\n+ * applying a function.\n+ */\n+public final class ForEach {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e08675b5635e38d45b58d8bee47d08b388fcfa2"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk5MzMwOTE4OnYy", "diffSide": "RIGHT", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/AWSApiPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzo0OToxMlrOHIoj2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQwMzo0OToxMlrOHIoj2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODgxNTE5NA==", "bodyText": "The previousStatus.transitionTo(newStatus) is a little bit hidden, currently. I'd put it on its own naked line just so people can see it visibly and make note of the behavioral part. Hidden inside the publish, it could easily be glanced over as \"oh just publish some static stuff...\"", "url": "https://github.com/aws-amplify/amplify-android/pull/710#discussion_r478815194", "createdAt": "2020-08-28T03:49:12Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/AWSApiPlugin.java", "diffHunk": "@@ -783,8 +782,7 @@ public void connectionAcquired(@NonNull Call call, @NonNull Connection connectio\n         private void transitionTo(ApiEndpointStatus newStatus) {\n             ApiEndpointStatus previousStatus = currentNetworkStatus.getAndSet(newStatus);\n             if (previousStatus != newStatus) {\n-                ApiEndpointStatusChangeEvent apiEndpointStatusChangeEvent = previousStatus.transitionTo(newStatus);\n-                apiEndpointStatusChangeEvent.toHubEvent().publish(HubChannel.API, Amplify.Hub);\n+                Amplify.Hub.publish(HubChannel.API, previousStatus.transitionTo(newStatus).toHubEvent());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a53ef80154be3d21ae48bd2b144f793c0a75b6f"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1155, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}