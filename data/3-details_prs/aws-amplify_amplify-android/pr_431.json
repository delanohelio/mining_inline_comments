{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzOTQ0NTE0", "number": 431, "title": "StorageAdapter and SyncEngine to use different event bundles", "bodyText": "This is refactoring work to provided a basis for Merger updates.\nCreates a new PendingMutation type, that may be enqueued and removed from the MutationOutbox.\nThe LocalStorageAdapter interface is updated to emit StorageItemChanges, instead of StorageItemChange.Records. StorageItemChange.Record is removed from the code base.\nThe StorageObserver will observe StorageItemChanges, and build/enqueue PendingMutations into the MutationOutbox, for each. Internally, the MutationOutbox persists these as PendingMutation.PersistentRecords.\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-05-06T08:15:23Z", "url": "https://github.com/aws-amplify/amplify-android/pull/431", "merged": true, "mergeCommit": {"oid": "de533743b77f65dba5a5d84a0390d086d6b549a7"}, "closed": true, "closedAt": "2020-05-06T15:30:57Z", "author": {"login": "jamesonwilliams"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABced5pCgH2gAyNDEzOTQ0NTE0OjdhY2VkMTZmODVlZmRmODBiZmZjOGIxYmFmN2E0NjE3YmM0MDlkZTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceqKkZAFqTQwNjcxMjkyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7aced16f85efdf80bffc8b1baf7a4617bc409de4", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/7aced16f85efdf80bffc8b1baf7a4617bc409de4", "committedDate": "2020-05-06T00:54:01Z", "message": "[aws-datastore] Decompose StorageItemChange into smaller pieces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7260bf99d339f24c8b3baf70d98ba00805cd8f84", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/7260bf99d339f24c8b3baf70d98ba00805cd8f84", "committedDate": "2020-05-06T04:28:30Z", "message": "[aws-datastore] Emit StorageItemChange from LocalStorageAdapter\n\nPreviously, the LocalStorageAdapter would emit StorageItemChangeRecord,\nwhich is the serialization convenience class use to persist the changes.\nFrom the standpoint of a component contract, this is leaking a detail.\n\nA future chnage will consume the higher-level StorageItemChange, and\nconvert it to a _different_ type, not a StorageItemChangeRecord.\n\nAs of this commit, the StorageItemChangeRecord is still used widely\nin test while inspecing a variety of ancillary behaviors."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "608eaec1117f1c0da6326081447ef03669eab809", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/608eaec1117f1c0da6326081447ef03669eab809", "committedDate": "2020-05-06T08:11:45Z", "message": "[aws-datastore] Spilt StorageItemChange and PendingMutation\n\nNow, the LocalStorageAdapter emits StorageItemChange. This notification\ntype does not get persisted (the storage items do, duh.)\n\nThe StorageObserver is a component of the Sync Engine package. It\nobserves the storage layer. It responds by enqueing PendingMutations\ninto a MutationOutbox. The MutationOutbox is persistent. Internally, it\nsaves its PendingMutations using a LocalStorageAdapter.\n\nThe LocalStorageAdapter has no actual awareness of the PendingMutation\ntype. The PendingMutation is just an Model that holds a couple of\nstrings. The MutationOutbox can later use this information to\nreconstruct a PendingMutation."}, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "efe40d343bb0f44122cdf09e86d4b3ecc7824f5d", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/efe40d343bb0f44122cdf09e86d4b3ecc7824f5d", "committedDate": "2020-05-06T09:06:40Z", "message": "[aws-datastore] Spilt StorageItemChange and PendingMutation\n\nNow, the LocalStorageAdapter emits StorageItemChange. This notification\ntype does not get persisted (the storage items do, duh.)\n\nThe StorageObserver is a component of the Sync Engine package. It\nobserves the storage layer. It responds by enqueing PendingMutations\ninto a MutationOutbox. The MutationOutbox is persistent. Internally, it\nsaves its PendingMutations using a LocalStorageAdapter.\n\nThe LocalStorageAdapter has no actual awareness of the PendingMutation\ntype. The PendingMutation is just an Model that holds a couple of\nstrings. The MutationOutbox can later use this information to\nreconstruct a PendingMutation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "efe40d343bb0f44122cdf09e86d4b3ecc7824f5d", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/efe40d343bb0f44122cdf09e86d4b3ecc7824f5d", "committedDate": "2020-05-06T09:06:40Z", "message": "[aws-datastore] Spilt StorageItemChange and PendingMutation\n\nNow, the LocalStorageAdapter emits StorageItemChange. This notification\ntype does not get persisted (the storage items do, duh.)\n\nThe StorageObserver is a component of the Sync Engine package. It\nobserves the storage layer. It responds by enqueing PendingMutations\ninto a MutationOutbox. The MutationOutbox is persistent. Internally, it\nsaves its PendingMutations using a LocalStorageAdapter.\n\nThe LocalStorageAdapter has no actual awareness of the PendingMutation\ntype. The PendingMutation is just an Model that holds a couple of\nstrings. The MutationOutbox can later use this information to\nreconstruct a PendingMutation."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NjQzNTgy", "url": "https://github.com/aws-amplify/amplify-android/pull/431#pullrequestreview-406643582", "createdAt": "2020-05-06T14:01:50Z", "commit": {"oid": "efe40d343bb0f44122cdf09e86d4b3ecc7824f5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDowMTo1MVrOGRUjtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNDowMTo1MVrOGRUjtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDgxNTc5Nw==", "bodyText": "Just to make sure I'm understanding the removal here: we're saying that by virtue of SYNC_ENGINE-initiated records not being enqueued by the StorageObserver, this filter was essentially useless, right?", "url": "https://github.com/aws-amplify/amplify-android/pull/431#discussion_r420815797", "createdAt": "2020-05-06T14:01:51Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/MutationOutbox.java", "diffHunk": "@@ -38,165 +39,152 @@\n  * for changes that have already occurred in the storage adapter, and need\n  * to be synchronized with a remote GraphQL API, via (a) GraphQL mutation(s).\n  *\n- * This component may also be thought of as an \"offline mutation queue,\" except for\n- * that the implementation doesn't store GraphQL primitives, it stores storage change\n- * primitives. These are consumed and converted to GraphQL mutations, though.\n- *\n- * Items in the mutation outbox are observed, and written out over the network.\n- * When a write completes successfully, it is safe to remove the corresponding item\n- * from the outbox.\n+ * This component is an \"offline mutation queue,\"; items in the mutation outbox are observed,\n+ * and written out over the network. When an item is written out over the network successfully,\n+ * it is safe to remove it from this outbox.\n  */\n-// In this class, some lambdas look more readable w/ blocks\n-// The generics get crazy, so we break convention and use labels MODEL and SIC, not just M, S.\n-@SuppressWarnings({\"CodeBlock2Expr\", \"checkstyle:MethodTypeParameterName\"})\n final class MutationOutbox {\n-    private final LocalStorageAdapter localStorageAdapter;\n-    private final PublishSubject<StorageItemChange<? extends Model>> pendingStorageItemChanges;\n-    private final GsonStorageItemChangeConverter storageItemChangeConverter;\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");\n+\n+    private final LocalStorageAdapter storage;\n+    private final PublishSubject<PendingMutation<? extends Model>> pendingMutations;\n+    private final PendingMutation.Converter converter;\n \n     MutationOutbox(@NonNull final LocalStorageAdapter localStorageAdapter) {\n-        this.localStorageAdapter = Objects.requireNonNull(localStorageAdapter);\n-        this.pendingStorageItemChanges = PublishSubject.create();\n-        this.storageItemChangeConverter = new GsonStorageItemChangeConverter();\n+        this.storage = Objects.requireNonNull(localStorageAdapter);\n+        this.pendingMutations = PublishSubject.create();\n+        this.converter = new GsonPendingMutationConverter();\n     }\n \n     /**\n      * Checks to see if there is a pending mutation for a model with the given ID.\n-     * @param modelId ID of any model\n+     * @param modelId ID of any model in the system\n      * @return An {@link Single} which emits true if there is a pending mutation for\n-     *         the model id, emits false if not, emits error if it can't tell due to an error\n+     *         the model id, emits false if not, and emits error if not determinable\n      */\n     @NonNull\n-    Single<Boolean> hasPendingMutation(String modelId) {\n-        QueryPredicate hasMatchingId = QueryField.field(\"id\").eq(modelId);\n-        return Single.create(emitter -> {\n-            localStorageAdapter.query(StorageItemChange.Record.class, hasMatchingId,\n+    Single<Boolean> hasPendingMutation(@NonNull String modelId) {\n+        Objects.requireNonNull(modelId);\n+        return Single.create(emitter ->\n+            storage.query(PendingMutation.PersistentRecord.class, QueryField.field(\"id\").eq(modelId),\n                 results -> emitter.onSuccess(results.hasNext()),\n                 emitter::onError\n-            );\n-        });\n+            )\n+        );\n     }\n \n     /**\n-     * Write a new {@link StorageItemChange} into the outbox.\n+     * Write a new {@link PendingMutation} into the outbox.\n+     *\n      * This involves:\n-     *   1. Writing the {@link StorageItemChange.Record} into a persistent store\n-     *      (we use the storage adapter, again, for this). To make our lives easier,\n-     *      we first convert the {@link StorageItemChange} to a {@link StorageItemChange.Record},\n-     *      which is something the storage adapter can handle.\n-     *   2. Notifying the observers of the outbox that there is a new\n-     *      {@link StorageItemChange} that needs to be processed.\n-     * @param storageItemChange Storage item change to be placed into the outbox\n-     * @param <MODEL> Any Java type that extends {@link Model}\n-     * @param <SIC> Any Java type that extends {@link StorageItemChange} with template param of MODEL\n-     * @return A Single that emits the StorageItemChange that was put into the outbox, if successful,\n-     *         or emits error, if not.\n+     *\n+     *   1. Writing a {@link PendingMutation} into a persistent store, by first converting it\n+     *      to and {@link PendingMutation.PersistentRecord}.\n+     *\n+     *   2. Notifying the observers of the outbox that there is a new {@link PendingMutation}\n+     *      that needs to be processed.\n+     *\n+     * @param pendingMutation A mutation to be enqueued into the outbox\n+     * @param <T> The type of model to which the mutation refers; e.g., if the PendingMutation\n+     *            is intending to create Person object, this type could be Person.\n+     * @return A Completable that emits success upon successful enqueue, or failure if it is not\n+     *         possible to enqueue the mutation\n      */\n     @NonNull\n-    <MODEL extends Model, SIC extends StorageItemChange<MODEL>> Single<SIC> enqueue(\n-            @NonNull SIC storageItemChange) {\n-        Objects.requireNonNull(storageItemChange);\n+    <T extends Model> Completable enqueue(@NonNull PendingMutation<T> pendingMutation) {\n+        Objects.requireNonNull(pendingMutation);\n \n-        // defer() the creation of a Single, until someone subscribes enqueue().\n-        // When they do, create() a single that wraps a save() call to LocalStorageAdapter.\n-        return Single.defer(() -> Single.create(subscriber -> {\n-            // Convert the storageItemChange (that we want to store) into a record\n-            StorageItemChange.Record record = storageItemChange.toRecord(storageItemChangeConverter);\n+        // defer() the creation of a Completable, until someone subscribes enqueue().\n+        // When they do, create() a Completable that wraps a save() call to LocalStorageAdapter.\n+        return Completable.defer(() -> Completable.create(subscriber -> {\n+            // Convert the PendingMutation (that we want to store) into a Record\n+            PendingMutation.PersistentRecord record = converter.toRecord(pendingMutation);\n             // Save it.\n-            localStorageAdapter.save(record, StorageItemChange.Initiator.SYNC_ENGINE,\n-                recordOfRecord -> {\n+            storage.save(record, StorageItemChange.Initiator.SYNC_ENGINE,\n+                saved -> {\n                     // The return value is a record that we saved a record.\n                     // So, we would have to \"unwrap\" it, to get the item we saved, out.\n                     // Forget that. We know the save succeeded, so just emit the\n                     // original thing enqueue() got as a param.\n-                    pendingStorageItemChanges.onNext(storageItemChange);\n-                    subscriber.onSuccess(storageItemChange);\n+                    LOG.info(\"Successfully enqueued \" + pendingMutation);\n+                    pendingMutations.onNext(pendingMutation);\n+                    subscriber.onComplete();\n                 },\n                 error -> {\n-                    pendingStorageItemChanges.onError(error);\n+                    pendingMutations.onError(error);\n                     subscriber.onError(error);\n                 }\n             );\n         }));\n     }\n \n     /**\n-     * Observe the {@link MutationOutbox}, for new {@link StorageItemChange}s.\n-     * The Orchestrator may invoke this method to consume items out of the outbox. After\n+     * Observe the {@link MutationOutbox}, for newly enqueued {@link PendingMutation}s.\n+     * The {@link SyncProcessor} may invoke this method to consume items out of the outbox. After\n      * processing an item on this observable, that item should be removed from the\n-     * MutationOutbox.\n+     * MutationOutbox via {@link #remove(PendingMutation)}.\n      * @return An observable stream of items that have yet to be published via the network\n      */\n     @WorkerThread\n     @NonNull\n-    Observable<StorageItemChange<? extends Model>> observe() {\n-        return pendingStorageItemChanges\n+    Observable<PendingMutation<? extends Model>> observe() {\n+        return pendingMutations\n             .observeOn(Schedulers.io())\n             .subscribeOn(Schedulers.io())\n-            .startWith(previouslyUnprocessedChanges())\n-            .filter(storageItemChange -> {\n-                return !StorageItemChange.Initiator.SYNC_ENGINE.equals(storageItemChange.initiator());\n-            });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efe40d343bb0f44122cdf09e86d4b3ecc7824f5d"}, "originalPosition": 173}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NzEyOTI5", "url": "https://github.com/aws-amplify/amplify-android/pull/431#pullrequestreview-406712929", "createdAt": "2020-05-06T15:11:22Z", "commit": {"oid": "efe40d343bb0f44122cdf09e86d4b3ecc7824f5d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1992, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}