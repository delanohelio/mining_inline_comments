{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNDQwMDQ5", "number": 363, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODo1ODoyOFrODvsvDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTowNjoxMlrODv1XDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzQyNjA2OnYy", "diffSide": "RIGHT", "path": "aws-predictions-tensorflow/src/test/resources/word-tokens.txt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODo1ODoyOFrOGCRxsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDowOTo0M1rOGCUNBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0MTU4NA==", "bodyText": "Do you need these indices, if you're just making a list of 10 items? Can you infer the indices from the ordering in the file?\nIf you do need the indices, you could make this a word-tokens.csv (a little more standard) and write it as <TOKEN>,4, etc.", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405041584", "createdAt": "2020-04-07T18:58:28Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/test/resources/word-tokens.txt", "diffHunk": "@@ -0,0 +1,10 @@\n+<PAD> 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2MDc0Ng==", "bodyText": "Hmm I guess I could, but this was how the asset in the official sample tensorflow lite app was formatted. It wouldn't be a huge deal, since we can internalize how we want them to be formatted, but I feel like it could create confusion to customers who are directly copying the assets from the official tensorflow sample.", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405060746", "createdAt": "2020-04-07T19:32:17Z", "author": {"login": "raphkim"}, "path": "aws-predictions-tensorflow/src/test/resources/word-tokens.txt", "diffHunk": "@@ -0,0 +1,10 @@\n+<PAD> 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0MTU4NA=="}, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4MTM1MA==", "bodyText": "Oh yea, okay! I agree. Let's stick with the TensorFlow sample.", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405081350", "createdAt": "2020-04-07T20:09:43Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/test/resources/word-tokens.txt", "diffHunk": "@@ -0,0 +1,10 @@\n+<PAD> 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0MTU4NA=="}, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzQ0MTg5OnYy", "diffSide": "RIGHT", "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TensorFlowTextClassificationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTowMjo0MFrOGCR7qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTowMjo0MFrOGCR7qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0NDEzOA==", "bodyText": "One of the reason I user factories all the time is that they allow you to write code above the equivalent of this(...). e.g.,\nstatic TensorFlowTextClassificationService fromContext(@NonNull Context context) {\n    Objects.requireNonNull(context);\n    TextClassificationModel model = new TextClassificationModel(context);\n    TextClassificationDictionary dictionary = new TextClassificationDictionary(context);\n    TextClassifcationLabels labels = new TextClassificationLabels(context);\n    return new TensorFlowTextClassificationService(model, dictionary, labels);\n}\n\nOverall, you just don't have to fight the syntax as hard, with this approach ^^ as compared the constructor-way.", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405044138", "createdAt": "2020-04-07T19:02:40Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TensorFlowTextClassificationService.java", "diffHunk": "@@ -62,13 +64,23 @@\n      * @param context the Android context\n      */\n     TensorFlowTextClassificationService(@NonNull Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzQ3MTY3OnYy", "diffSide": "LEFT", "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TensorFlowTextClassificationService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToxMToyN1rOGCSO-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoxMzoxM1rOGCUUqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0OTA4Mw==", "bodyText": "If you already have package visibility for classify(...), can you just test through it?\nThe only problem I can see might be that latch, which would block stuff.\nAh, haha. Okay. Remember that crazy Loadable<List<Loadable<?, PredictionsException>>, PredictionsException>? If you use that, and then accept it as a dependency in the constructor, you can \"fake\" whether or not this service is loaded.\nAssuming you can push loaded.await(); into the implementation of that big Loadable, that'll help you when you run classify from test. (In source, you provide an impl that blocks. In test, you provide a mock(Loadable.class) that does whatever you want.\nI guess the actual latch await call would change to:\nif (!compoundLoadable.isLoaded()) {\n    compountLoadable.load();\n}\n\nOr something like that.", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405049083", "createdAt": "2020-04-07T19:11:27Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TensorFlowTextClassificationService.java", "diffHunk": "@@ -132,7 +148,8 @@ void classify(\n         }\n     }\n \n-    private Sentiment fetchSentiment(String text) throws PredictionsException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4MzMwNA==", "bodyText": "This test is to directly test the behavior of fetchSentiment. How about if I write more tests for blocking behavior in the future when I improve on the current latch design?", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405083304", "createdAt": "2020-04-07T20:13:13Z", "author": {"login": "raphkim"}, "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TensorFlowTextClassificationService.java", "diffHunk": "@@ -132,7 +148,8 @@ void classify(\n         }\n     }\n \n-    private Sentiment fetchSentiment(String text) throws PredictionsException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0OTA4Mw=="}, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzQ3NTEzOnYy", "diffSide": "RIGHT", "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/asset/InputTokenizerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToxMjoyM1rOGCSRIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo0MzowNVrOGCTS9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0OTYzMw==", "bodyText": "Since both of these are in @Before scope, I would move this when arrangement up right underneath them, there, too.", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405049633", "createdAt": "2020-04-07T19:12:23Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/asset/InputTokenizerTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.asset;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+\n+import com.amplifyframework.predictions.PredictionsException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that input conversion to TensorFlow Lite tokens\n+ * works as intended.\n+ */\n+public final class InputTokenizerTest {\n+    private static final long LOAD_TIMEOUT_MS = 100;\n+\n+    private Context mockContext;\n+    private AssetManager mockAssets;\n+\n+    /**\n+     * Set up mock behavior before each test.\n+     */\n+    @Before\n+    public void setUp() {\n+        // Mock Android context and asset manager\n+        mockContext = mock(Context.class);\n+        mockAssets = mock(AssetManager.class);\n+    }\n+\n+    /**\n+     * Test that text tokenizer converts input text into a 2-D\n+     * array of equivalent token values and pads the rest with 0's.\n+     * @throws Exception if dictionary fails to load\n+     */\n+    @Test\n+    @SuppressWarnings(\"MagicNumber\") // word tokens\n+    public void testInputTextTokenizer() throws Exception {\n+        final CountDownLatch loaded = new CountDownLatch(1);\n+        final AtomicReference<Map<String, Integer>> tokens = new AtomicReference<>();\n+        final AtomicReference<PredictionsException> error = new AtomicReference<>();\n+\n+        final String inputText = \"Where is the bathroom?\";\n+        final InputStream stream = new FileInputStream(\"src/test/resources/word-tokens.txt\");\n+\n+        // Make mock context return mock asset manager\n+        when(mockContext.getAssets()).thenReturn(mockAssets);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NjQ4Nw==", "bodyText": "I envision adding more tests in this suite that tests different types of assets to load (for different predictions verbs), so I structured it like this intentionally.", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405066487", "createdAt": "2020-04-07T19:43:05Z", "author": {"login": "raphkim"}, "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/asset/InputTokenizerTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.asset;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+\n+import com.amplifyframework.predictions.PredictionsException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that input conversion to TensorFlow Lite tokens\n+ * works as intended.\n+ */\n+public final class InputTokenizerTest {\n+    private static final long LOAD_TIMEOUT_MS = 100;\n+\n+    private Context mockContext;\n+    private AssetManager mockAssets;\n+\n+    /**\n+     * Set up mock behavior before each test.\n+     */\n+    @Before\n+    public void setUp() {\n+        // Mock Android context and asset manager\n+        mockContext = mock(Context.class);\n+        mockAssets = mock(AssetManager.class);\n+    }\n+\n+    /**\n+     * Test that text tokenizer converts input text into a 2-D\n+     * array of equivalent token values and pads the rest with 0's.\n+     * @throws Exception if dictionary fails to load\n+     */\n+    @Test\n+    @SuppressWarnings(\"MagicNumber\") // word tokens\n+    public void testInputTextTokenizer() throws Exception {\n+        final CountDownLatch loaded = new CountDownLatch(1);\n+        final AtomicReference<Map<String, Integer>> tokens = new AtomicReference<>();\n+        final AtomicReference<PredictionsException> error = new AtomicReference<>();\n+\n+        final String inputText = \"Where is the bathroom?\";\n+        final InputStream stream = new FileInputStream(\"src/test/resources/word-tokens.txt\");\n+\n+        // Make mock context return mock asset manager\n+        when(mockContext.getAssets()).thenReturn(mockAssets);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0OTYzMw=="}, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzQ4NDIwOnYy", "diffSide": "RIGHT", "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/asset/InputTokenizerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToxNTowMlrOGCSW0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoxMDo0N1rOGCUPZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MTA5MQ==", "bodyText": "You can use the Await utility for this:\nMap<String, Integer> tokens = Await.<WhateverResultType, PredictionsException>result(\n    (onResult, onError) -> dictionary.onLoaded(onResult::accept, onError::accept)\n);\n\nThis way, you don't have to mess around with a CountDownLatch,  yourself.", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405051091", "createdAt": "2020-04-07T19:15:02Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/asset/InputTokenizerTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.asset;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+\n+import com.amplifyframework.predictions.PredictionsException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that input conversion to TensorFlow Lite tokens\n+ * works as intended.\n+ */\n+public final class InputTokenizerTest {\n+    private static final long LOAD_TIMEOUT_MS = 100;\n+\n+    private Context mockContext;\n+    private AssetManager mockAssets;\n+\n+    /**\n+     * Set up mock behavior before each test.\n+     */\n+    @Before\n+    public void setUp() {\n+        // Mock Android context and asset manager\n+        mockContext = mock(Context.class);\n+        mockAssets = mock(AssetManager.class);\n+    }\n+\n+    /**\n+     * Test that text tokenizer converts input text into a 2-D\n+     * array of equivalent token values and pads the rest with 0's.\n+     * @throws Exception if dictionary fails to load\n+     */\n+    @Test\n+    @SuppressWarnings(\"MagicNumber\") // word tokens\n+    public void testInputTextTokenizer() throws Exception {\n+        final CountDownLatch loaded = new CountDownLatch(1);\n+        final AtomicReference<Map<String, Integer>> tokens = new AtomicReference<>();\n+        final AtomicReference<PredictionsException> error = new AtomicReference<>();\n+\n+        final String inputText = \"Where is the bathroom?\";\n+        final InputStream stream = new FileInputStream(\"src/test/resources/word-tokens.txt\");\n+\n+        // Make mock context return mock asset manager\n+        when(mockContext.getAssets()).thenReturn(mockAssets);\n+\n+        // Make mock asset manager return pre-determined input stream\n+        when(mockAssets.open(anyString())).thenReturn(stream);\n+\n+        // Load!! (from mock assets)\n+        TextClassificationDictionary dictionary = new TextClassificationDictionary(mockContext)\n+                .onLoaded(\n+                    onLoad -> {\n+                        loaded.countDown();\n+                        tokens.set(onLoad);\n+                    },\n+                    onError -> {\n+                        loaded.countDown();\n+                        error.set(onError);\n+                    }\n+                );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2OTEyNw==", "bodyText": "Ah I was wrestling with that for a bit, but I think I got it now!", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405069127", "createdAt": "2020-04-07T19:48:03Z", "author": {"login": "raphkim"}, "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/asset/InputTokenizerTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.asset;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+\n+import com.amplifyframework.predictions.PredictionsException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that input conversion to TensorFlow Lite tokens\n+ * works as intended.\n+ */\n+public final class InputTokenizerTest {\n+    private static final long LOAD_TIMEOUT_MS = 100;\n+\n+    private Context mockContext;\n+    private AssetManager mockAssets;\n+\n+    /**\n+     * Set up mock behavior before each test.\n+     */\n+    @Before\n+    public void setUp() {\n+        // Mock Android context and asset manager\n+        mockContext = mock(Context.class);\n+        mockAssets = mock(AssetManager.class);\n+    }\n+\n+    /**\n+     * Test that text tokenizer converts input text into a 2-D\n+     * array of equivalent token values and pads the rest with 0's.\n+     * @throws Exception if dictionary fails to load\n+     */\n+    @Test\n+    @SuppressWarnings(\"MagicNumber\") // word tokens\n+    public void testInputTextTokenizer() throws Exception {\n+        final CountDownLatch loaded = new CountDownLatch(1);\n+        final AtomicReference<Map<String, Integer>> tokens = new AtomicReference<>();\n+        final AtomicReference<PredictionsException> error = new AtomicReference<>();\n+\n+        final String inputText = \"Where is the bathroom?\";\n+        final InputStream stream = new FileInputStream(\"src/test/resources/word-tokens.txt\");\n+\n+        // Make mock context return mock asset manager\n+        when(mockContext.getAssets()).thenReturn(mockAssets);\n+\n+        // Make mock asset manager return pre-determined input stream\n+        when(mockAssets.open(anyString())).thenReturn(stream);\n+\n+        // Load!! (from mock assets)\n+        TextClassificationDictionary dictionary = new TextClassificationDictionary(mockContext)\n+                .onLoaded(\n+                    onLoad -> {\n+                        loaded.countDown();\n+                        tokens.set(onLoad);\n+                    },\n+                    onError -> {\n+                        loaded.countDown();\n+                        error.set(onError);\n+                    }\n+                );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MTA5MQ=="}, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4MTk1Nw==", "bodyText": "Haha yea, it's a compound statement with a lot of syntax...", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405081957", "createdAt": "2020-04-07T20:10:47Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/asset/InputTokenizerTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.asset;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+\n+import com.amplifyframework.predictions.PredictionsException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that input conversion to TensorFlow Lite tokens\n+ * works as intended.\n+ */\n+public final class InputTokenizerTest {\n+    private static final long LOAD_TIMEOUT_MS = 100;\n+\n+    private Context mockContext;\n+    private AssetManager mockAssets;\n+\n+    /**\n+     * Set up mock behavior before each test.\n+     */\n+    @Before\n+    public void setUp() {\n+        // Mock Android context and asset manager\n+        mockContext = mock(Context.class);\n+        mockAssets = mock(AssetManager.class);\n+    }\n+\n+    /**\n+     * Test that text tokenizer converts input text into a 2-D\n+     * array of equivalent token values and pads the rest with 0's.\n+     * @throws Exception if dictionary fails to load\n+     */\n+    @Test\n+    @SuppressWarnings(\"MagicNumber\") // word tokens\n+    public void testInputTextTokenizer() throws Exception {\n+        final CountDownLatch loaded = new CountDownLatch(1);\n+        final AtomicReference<Map<String, Integer>> tokens = new AtomicReference<>();\n+        final AtomicReference<PredictionsException> error = new AtomicReference<>();\n+\n+        final String inputText = \"Where is the bathroom?\";\n+        final InputStream stream = new FileInputStream(\"src/test/resources/word-tokens.txt\");\n+\n+        // Make mock context return mock asset manager\n+        when(mockContext.getAssets()).thenReturn(mockAssets);\n+\n+        // Make mock asset manager return pre-determined input stream\n+        when(mockAssets.open(anyString())).thenReturn(stream);\n+\n+        // Load!! (from mock assets)\n+        TextClassificationDictionary dictionary = new TextClassificationDictionary(mockContext)\n+                .onLoaded(\n+                    onLoad -> {\n+                        loaded.countDown();\n+                        tokens.set(onLoad);\n+                    },\n+                    onError -> {\n+                        loaded.countDown();\n+                        error.set(onError);\n+                    }\n+                );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MTA5MQ=="}, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzQ4NzI3OnYy", "diffSide": "RIGHT", "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/asset/InputTokenizerTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToxNTo1N1rOGCSYyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoxMTo1M1rOGCURsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MTU5NQ==", "bodyText": "(This will go away with Await, too. But nit: MILLISECONDS! Not MICROSECONDS.)", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405051595", "createdAt": "2020-04-07T19:15:57Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/asset/InputTokenizerTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.asset;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+\n+import com.amplifyframework.predictions.PredictionsException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that input conversion to TensorFlow Lite tokens\n+ * works as intended.\n+ */\n+public final class InputTokenizerTest {\n+    private static final long LOAD_TIMEOUT_MS = 100;\n+\n+    private Context mockContext;\n+    private AssetManager mockAssets;\n+\n+    /**\n+     * Set up mock behavior before each test.\n+     */\n+    @Before\n+    public void setUp() {\n+        // Mock Android context and asset manager\n+        mockContext = mock(Context.class);\n+        mockAssets = mock(AssetManager.class);\n+    }\n+\n+    /**\n+     * Test that text tokenizer converts input text into a 2-D\n+     * array of equivalent token values and pads the rest with 0's.\n+     * @throws Exception if dictionary fails to load\n+     */\n+    @Test\n+    @SuppressWarnings(\"MagicNumber\") // word tokens\n+    public void testInputTextTokenizer() throws Exception {\n+        final CountDownLatch loaded = new CountDownLatch(1);\n+        final AtomicReference<Map<String, Integer>> tokens = new AtomicReference<>();\n+        final AtomicReference<PredictionsException> error = new AtomicReference<>();\n+\n+        final String inputText = \"Where is the bathroom?\";\n+        final InputStream stream = new FileInputStream(\"src/test/resources/word-tokens.txt\");\n+\n+        // Make mock context return mock asset manager\n+        when(mockContext.getAssets()).thenReturn(mockAssets);\n+\n+        // Make mock asset manager return pre-determined input stream\n+        when(mockAssets.open(anyString())).thenReturn(stream);\n+\n+        // Load!! (from mock assets)\n+        TextClassificationDictionary dictionary = new TextClassificationDictionary(mockContext)\n+                .onLoaded(\n+                    onLoad -> {\n+                        loaded.countDown();\n+                        tokens.set(onLoad);\n+                    },\n+                    onError -> {\n+                        loaded.countDown();\n+                        error.set(onError);\n+                    }\n+                );\n+        dictionary.load();\n+        loaded.await(LOAD_TIMEOUT_MS, TimeUnit.MICROSECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2OTcxNg==", "bodyText": "oh wow i guess I shouldn't have relied on autocomplete LOL", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405069716", "createdAt": "2020-04-07T19:49:01Z", "author": {"login": "raphkim"}, "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/asset/InputTokenizerTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.asset;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+\n+import com.amplifyframework.predictions.PredictionsException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that input conversion to TensorFlow Lite tokens\n+ * works as intended.\n+ */\n+public final class InputTokenizerTest {\n+    private static final long LOAD_TIMEOUT_MS = 100;\n+\n+    private Context mockContext;\n+    private AssetManager mockAssets;\n+\n+    /**\n+     * Set up mock behavior before each test.\n+     */\n+    @Before\n+    public void setUp() {\n+        // Mock Android context and asset manager\n+        mockContext = mock(Context.class);\n+        mockAssets = mock(AssetManager.class);\n+    }\n+\n+    /**\n+     * Test that text tokenizer converts input text into a 2-D\n+     * array of equivalent token values and pads the rest with 0's.\n+     * @throws Exception if dictionary fails to load\n+     */\n+    @Test\n+    @SuppressWarnings(\"MagicNumber\") // word tokens\n+    public void testInputTextTokenizer() throws Exception {\n+        final CountDownLatch loaded = new CountDownLatch(1);\n+        final AtomicReference<Map<String, Integer>> tokens = new AtomicReference<>();\n+        final AtomicReference<PredictionsException> error = new AtomicReference<>();\n+\n+        final String inputText = \"Where is the bathroom?\";\n+        final InputStream stream = new FileInputStream(\"src/test/resources/word-tokens.txt\");\n+\n+        // Make mock context return mock asset manager\n+        when(mockContext.getAssets()).thenReturn(mockAssets);\n+\n+        // Make mock asset manager return pre-determined input stream\n+        when(mockAssets.open(anyString())).thenReturn(stream);\n+\n+        // Load!! (from mock assets)\n+        TextClassificationDictionary dictionary = new TextClassificationDictionary(mockContext)\n+                .onLoaded(\n+                    onLoad -> {\n+                        loaded.countDown();\n+                        tokens.set(onLoad);\n+                    },\n+                    onError -> {\n+                        loaded.countDown();\n+                        error.set(onError);\n+                    }\n+                );\n+        dictionary.load();\n+        loaded.await(LOAD_TIMEOUT_MS, TimeUnit.MICROSECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MTU5NQ=="}, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4MjU0NA==", "bodyText": "This exact thing happens to me all the time. It's probably something IntelliSense could improve.", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405082544", "createdAt": "2020-04-07T20:11:53Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/asset/InputTokenizerTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.asset;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+\n+import com.amplifyframework.predictions.PredictionsException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that input conversion to TensorFlow Lite tokens\n+ * works as intended.\n+ */\n+public final class InputTokenizerTest {\n+    private static final long LOAD_TIMEOUT_MS = 100;\n+\n+    private Context mockContext;\n+    private AssetManager mockAssets;\n+\n+    /**\n+     * Set up mock behavior before each test.\n+     */\n+    @Before\n+    public void setUp() {\n+        // Mock Android context and asset manager\n+        mockContext = mock(Context.class);\n+        mockAssets = mock(AssetManager.class);\n+    }\n+\n+    /**\n+     * Test that text tokenizer converts input text into a 2-D\n+     * array of equivalent token values and pads the rest with 0's.\n+     * @throws Exception if dictionary fails to load\n+     */\n+    @Test\n+    @SuppressWarnings(\"MagicNumber\") // word tokens\n+    public void testInputTextTokenizer() throws Exception {\n+        final CountDownLatch loaded = new CountDownLatch(1);\n+        final AtomicReference<Map<String, Integer>> tokens = new AtomicReference<>();\n+        final AtomicReference<PredictionsException> error = new AtomicReference<>();\n+\n+        final String inputText = \"Where is the bathroom?\";\n+        final InputStream stream = new FileInputStream(\"src/test/resources/word-tokens.txt\");\n+\n+        // Make mock context return mock asset manager\n+        when(mockContext.getAssets()).thenReturn(mockAssets);\n+\n+        // Make mock asset manager return pre-determined input stream\n+        when(mockAssets.open(anyString())).thenReturn(stream);\n+\n+        // Load!! (from mock assets)\n+        TextClassificationDictionary dictionary = new TextClassificationDictionary(mockContext)\n+                .onLoaded(\n+                    onLoad -> {\n+                        loaded.countDown();\n+                        tokens.set(onLoad);\n+                    },\n+                    onError -> {\n+                        loaded.countDown();\n+                        error.set(onError);\n+                    }\n+                );\n+        dictionary.load();\n+        loaded.await(LOAD_TIMEOUT_MS, TimeUnit.MICROSECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MTU5NQ=="}, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzQ5NDkxOnYy", "diffSide": "RIGHT", "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/asset/InputTokenizerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToxODowMlrOGCSdgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo1MDo0NFrOGCTjww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MjgwMg==", "bodyText": "int[] values = { 1, 2, 9, 4, 2};\nfor (int index = 0; index < : values.size(); index++) {\n    expected[0][index] = values[index];\n}", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405052802", "createdAt": "2020-04-07T19:18:02Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/asset/InputTokenizerTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.asset;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+\n+import com.amplifyframework.predictions.PredictionsException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that input conversion to TensorFlow Lite tokens\n+ * works as intended.\n+ */\n+public final class InputTokenizerTest {\n+    private static final long LOAD_TIMEOUT_MS = 100;\n+\n+    private Context mockContext;\n+    private AssetManager mockAssets;\n+\n+    /**\n+     * Set up mock behavior before each test.\n+     */\n+    @Before\n+    public void setUp() {\n+        // Mock Android context and asset manager\n+        mockContext = mock(Context.class);\n+        mockAssets = mock(AssetManager.class);\n+    }\n+\n+    /**\n+     * Test that text tokenizer converts input text into a 2-D\n+     * array of equivalent token values and pads the rest with 0's.\n+     * @throws Exception if dictionary fails to load\n+     */\n+    @Test\n+    @SuppressWarnings(\"MagicNumber\") // word tokens\n+    public void testInputTextTokenizer() throws Exception {\n+        final CountDownLatch loaded = new CountDownLatch(1);\n+        final AtomicReference<Map<String, Integer>> tokens = new AtomicReference<>();\n+        final AtomicReference<PredictionsException> error = new AtomicReference<>();\n+\n+        final String inputText = \"Where is the bathroom?\";\n+        final InputStream stream = new FileInputStream(\"src/test/resources/word-tokens.txt\");\n+\n+        // Make mock context return mock asset manager\n+        when(mockContext.getAssets()).thenReturn(mockAssets);\n+\n+        // Make mock asset manager return pre-determined input stream\n+        when(mockAssets.open(anyString())).thenReturn(stream);\n+\n+        // Load!! (from mock assets)\n+        TextClassificationDictionary dictionary = new TextClassificationDictionary(mockContext)\n+                .onLoaded(\n+                    onLoad -> {\n+                        loaded.countDown();\n+                        tokens.set(onLoad);\n+                    },\n+                    onError -> {\n+                        loaded.countDown();\n+                        error.set(onError);\n+                    }\n+                );\n+        dictionary.load();\n+        loaded.await(LOAD_TIMEOUT_MS, TimeUnit.MICROSECONDS);\n+        if (error.get() != null) {\n+            fail(\"Failed to load dictionary.\");\n+        }\n+\n+        // Assert that load was successful\n+        assertEquals(tokens.get(), dictionary.getValue());\n+\n+        // Tokenize input\n+        float[][] input = dictionary.tokenizeInputText(inputText);\n+        float[][] expected = new float[1][input[0].length];\n+        expected[0][0] = 1; // <START>\n+        expected[0][1] = 2; // Where (<UNKNOWN>)\n+        expected[0][2] = 9; // is\n+        expected[0][3] = 4; // the\n+        expected[0][4] = 2; // bathroom (<UNKNOWN>)\n+        // Followed by 0's (<PAD>)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3MDc4Nw==", "bodyText": "I was considering that, but I think the way I currently have it written makes it easier to document what each number means", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405070787", "createdAt": "2020-04-07T19:50:44Z", "author": {"login": "raphkim"}, "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/asset/InputTokenizerTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.asset;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+\n+import com.amplifyframework.predictions.PredictionsException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that input conversion to TensorFlow Lite tokens\n+ * works as intended.\n+ */\n+public final class InputTokenizerTest {\n+    private static final long LOAD_TIMEOUT_MS = 100;\n+\n+    private Context mockContext;\n+    private AssetManager mockAssets;\n+\n+    /**\n+     * Set up mock behavior before each test.\n+     */\n+    @Before\n+    public void setUp() {\n+        // Mock Android context and asset manager\n+        mockContext = mock(Context.class);\n+        mockAssets = mock(AssetManager.class);\n+    }\n+\n+    /**\n+     * Test that text tokenizer converts input text into a 2-D\n+     * array of equivalent token values and pads the rest with 0's.\n+     * @throws Exception if dictionary fails to load\n+     */\n+    @Test\n+    @SuppressWarnings(\"MagicNumber\") // word tokens\n+    public void testInputTextTokenizer() throws Exception {\n+        final CountDownLatch loaded = new CountDownLatch(1);\n+        final AtomicReference<Map<String, Integer>> tokens = new AtomicReference<>();\n+        final AtomicReference<PredictionsException> error = new AtomicReference<>();\n+\n+        final String inputText = \"Where is the bathroom?\";\n+        final InputStream stream = new FileInputStream(\"src/test/resources/word-tokens.txt\");\n+\n+        // Make mock context return mock asset manager\n+        when(mockContext.getAssets()).thenReturn(mockAssets);\n+\n+        // Make mock asset manager return pre-determined input stream\n+        when(mockAssets.open(anyString())).thenReturn(stream);\n+\n+        // Load!! (from mock assets)\n+        TextClassificationDictionary dictionary = new TextClassificationDictionary(mockContext)\n+                .onLoaded(\n+                    onLoad -> {\n+                        loaded.countDown();\n+                        tokens.set(onLoad);\n+                    },\n+                    onError -> {\n+                        loaded.countDown();\n+                        error.set(onError);\n+                    }\n+                );\n+        dictionary.load();\n+        loaded.await(LOAD_TIMEOUT_MS, TimeUnit.MICROSECONDS);\n+        if (error.get() != null) {\n+            fail(\"Failed to load dictionary.\");\n+        }\n+\n+        // Assert that load was successful\n+        assertEquals(tokens.get(), dictionary.getValue());\n+\n+        // Tokenize input\n+        float[][] input = dictionary.tokenizeInputText(inputText);\n+        float[][] expected = new float[1][input[0].length];\n+        expected[0][0] = 1; // <START>\n+        expected[0][1] = 2; // Where (<UNKNOWN>)\n+        expected[0][2] = 9; // is\n+        expected[0][3] = 4; // the\n+        expected[0][4] = 2; // bathroom (<UNKNOWN>)\n+        // Followed by 0's (<PAD>)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MjgwMg=="}, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzUwODkxOnYy", "diffSide": "RIGHT", "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/service/TextClassificationTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToyMTo1M1rOGCSmHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDozNDowM1rOGCVCRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NTAwNw==", "bodyText": "Instead of mocking the dictionary, can your provide text_classification_vocab.txt, and use real one?", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405055007", "createdAt": "2020-04-07T19:21:53Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/service/TextClassificationTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.service;\n+\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationDictionary;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationLabels;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationModel;\n+import com.amplifyframework.testutils.random.RandomString;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Random;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that sentiment detection using TensorFlow Lite interpreter\n+ * to output Amplify text interpretation result works.\n+ */\n+public final class TextClassificationTest {\n+\n+    private TextClassificationModel mockInterpreter;\n+    private TextClassificationDictionary mockDictionary;\n+    private TextClassificationLabels mockLabels;\n+\n+    private TensorFlowTextClassificationService service;\n+\n+    /**\n+     * Set up mock behavior before each test.\n+     */\n+    @Before\n+    public void setUp() {\n+        // Mock asset loaders\n+        mockInterpreter = mock(TextClassificationModel.class);\n+        mockDictionary = mock(TextClassificationDictionary.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3MjE2Mw==", "bodyText": "I was trying to stay away from relying on androidx and robolectric if possible. I think this is sufficient for now.", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405072163", "createdAt": "2020-04-07T19:53:11Z", "author": {"login": "raphkim"}, "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/service/TextClassificationTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.service;\n+\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationDictionary;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationLabels;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationModel;\n+import com.amplifyframework.testutils.random.RandomString;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Random;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that sentiment detection using TensorFlow Lite interpreter\n+ * to output Amplify text interpretation result works.\n+ */\n+public final class TextClassificationTest {\n+\n+    private TextClassificationModel mockInterpreter;\n+    private TextClassificationDictionary mockDictionary;\n+    private TextClassificationLabels mockLabels;\n+\n+    private TensorFlowTextClassificationService service;\n+\n+    /**\n+     * Set up mock behavior before each test.\n+     */\n+    @Before\n+    public void setUp() {\n+        // Mock asset loaders\n+        mockInterpreter = mock(TextClassificationModel.class);\n+        mockDictionary = mock(TextClassificationDictionary.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NTAwNw=="}, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4MzI2Mw==", "bodyText": "There are pros and cons -- the less you mock, the more \"real\" your test is, and the more coverage you get. Plus, you'll be able to keep final on your class, to keep it \"closed.\"\nThe only con is really just that Robolectric is slow.", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405083263", "createdAt": "2020-04-07T20:13:08Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/service/TextClassificationTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.service;\n+\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationDictionary;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationLabels;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationModel;\n+import com.amplifyframework.testutils.random.RandomString;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Random;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that sentiment detection using TensorFlow Lite interpreter\n+ * to output Amplify text interpretation result works.\n+ */\n+public final class TextClassificationTest {\n+\n+    private TextClassificationModel mockInterpreter;\n+    private TextClassificationDictionary mockDictionary;\n+    private TextClassificationLabels mockLabels;\n+\n+    private TensorFlowTextClassificationService service;\n+\n+    /**\n+     * Set up mock behavior before each test.\n+     */\n+    @Before\n+    public void setUp() {\n+        // Mock asset loaders\n+        mockInterpreter = mock(TextClassificationModel.class);\n+        mockDictionary = mock(TextClassificationDictionary.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NTAwNw=="}, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA5NDk4Mw==", "bodyText": "One more note --\nI used to write (and I have seen a lot of others write) tests like this:\n// Assuming a simple actor like ...\nclass ObjectUnderTest {\n    private final Dependency dependency;\n    ObjectUnderTest(Dependency dependency) {\n        this.dependency = dependency;\n    }\n    Value lookupValue() {\n        return dependency.getValue();\n     }\n}\n\n// Here, we mock out all dependencies of the unit, and write a test\n// that basically just re-codifies or implementation logic into Mockito syntax.\npublic final class AnemicUnitTest {\n    private Dependency dependency;\n    @Before\n    public void setup() {\n        this.dependency = mock(Dependency.class);\n        this.objectUnderTest = new ObjectUnderTest(dependency);\n    }\n\n    @Test\n    public void lookupValueCallsDependency() {\n        when(dependency.getValue()).thenReturn(Value.of(2));\n        assertEquals(Value.of(2), doSomething.lookupValue());\n    }\n}\n\nThis is an \"anemic\" unit test, where all dependencies are mocked. We've verified that the unit of code (the ObjectUnderTest) calls our Dependency. But so what? The complexity is very low.\nNow, let's imagine Dependency is something like TensorFlow, and getValue() triggers thousands of lines of code to be executed. If we can avoid using the mock, we have a bonafide component test on our hands, and a good indication that the ObjectUnderTest itself will work in a real-world application.\n// Here, we test *both* ObjectUnderTest, and the direct dependencies it needs to its job\npublic final class ComponentTest {\n     private RealDependency dependency;\n     private ObjectUnderTest objectUnderTest;\n\n     @Before\n      public void setup() {\n          this.dependency = new RealDependency();\n          this.objectUnderTest = new ObjectUnderTest(dependency);\n      }\n\n      @Test\n      public void lookupValueReturnsExpectedValue() {\n          // Value is not arranged, but derived form real world business conditions\n          dependency.setColor(\"#441155\"); // Some logic mutates the dependency state\n          assertTrue(Value.of(44), objectUnderTest.getValue());\n      }\n}", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405094983", "createdAt": "2020-04-07T20:34:03Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/service/TextClassificationTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.service;\n+\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationDictionary;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationLabels;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationModel;\n+import com.amplifyframework.testutils.random.RandomString;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Random;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that sentiment detection using TensorFlow Lite interpreter\n+ * to output Amplify text interpretation result works.\n+ */\n+public final class TextClassificationTest {\n+\n+    private TextClassificationModel mockInterpreter;\n+    private TextClassificationDictionary mockDictionary;\n+    private TextClassificationLabels mockLabels;\n+\n+    private TensorFlowTextClassificationService service;\n+\n+    /**\n+     * Set up mock behavior before each test.\n+     */\n+    @Before\n+    public void setUp() {\n+        // Mock asset loaders\n+        mockInterpreter = mock(TextClassificationModel.class);\n+        mockDictionary = mock(TextClassificationDictionary.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NTAwNw=="}, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzUyMjM3OnYy", "diffSide": "RIGHT", "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/TextClassificationModel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToyNTozOVrOGCSuZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoxNDowN1rOGCUWiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NzEyNw==", "bodyText": "It might make sense to have a\npublic interface TextClassificationModel<T> extends Loadable<T, PredictionsException> {\n    ...\n}\n\nwith a:\npublic final class TensorFlowTextInterpreter implements TextClassificationModel<Interpreter> {\n    ...\n}\n\nThen, in your test you can mock(TestClassificationModel.class), but in your source, you can keep TensorflowTextInperpreter.", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405057127", "createdAt": "2020-04-07T19:25:39Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/TextClassificationModel.java", "diffHunk": "@@ -37,7 +37,7 @@\n  * Loads the pre-trained text classification model into\n  * a TensorFlow Lite interpreter instance.\n  */\n-public final class TextClassificationModel implements Loadable<Interpreter, PredictionsException> {\n+public class TextClassificationModel implements Loadable<Interpreter, PredictionsException> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3NjQ2Ng==", "bodyText": "interfaces are almost always great, but I think we shouldn't overuse it either. TextClassificationModel would be a bit too specific of a concept to be appropriate as an interface, and we are not really getting concrete advantage out of it besides allowing its instance to be final.", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405076466", "createdAt": "2020-04-07T20:00:40Z", "author": {"login": "raphkim"}, "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/TextClassificationModel.java", "diffHunk": "@@ -37,7 +37,7 @@\n  * Loads the pre-trained text classification model into\n  * a TensorFlow Lite interpreter instance.\n  */\n-public final class TextClassificationModel implements Loadable<Interpreter, PredictionsException> {\n+public class TextClassificationModel implements Loadable<Interpreter, PredictionsException> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NzEyNw=="}, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4Mzc4NQ==", "bodyText": "Yea, actually, agreed. There aren't going be multiple text classification services -- it's the TensorFlow plugin. The only alternate would be for test purposes. So I do agree, that's overkill.", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405083785", "createdAt": "2020-04-07T20:14:07Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/TextClassificationModel.java", "diffHunk": "@@ -37,7 +37,7 @@\n  * Loads the pre-trained text classification model into\n  * a TensorFlow Lite interpreter instance.\n  */\n-public final class TextClassificationModel implements Loadable<Interpreter, PredictionsException> {\n+public class TextClassificationModel implements Loadable<Interpreter, PredictionsException> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NzEyNw=="}, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNDgzOTE5OnYy", "diffSide": "RIGHT", "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/service/TextClassificationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTowNjoxMlrOGCfIfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTowNjoxMlrOGCfIfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI2MDQxNA==", "bodyText": "Huh, I like this indexing.", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405260414", "createdAt": "2020-04-08T05:06:12Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/service/TextClassificationTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.service;\n+\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationDictionary;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationLabels;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationModel;\n+import com.amplifyframework.testutils.random.RandomString;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Random;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that sentiment detection using TensorFlow Lite interpreter\n+ * to output Amplify text interpretation result works.\n+ */\n+public final class TextClassificationTest {\n+\n+    private TextClassificationModel mockInterpreter;\n+    private TextClassificationDictionary mockDictionary;\n+    private TextClassificationLabels mockLabels;\n+\n+    private TensorFlowTextClassificationService service;\n+\n+    /**\n+     * Set up mock behavior before each test.\n+     */\n+    @Before\n+    public void setUp() {\n+        // Mock asset loaders\n+        mockInterpreter = mock(TextClassificationModel.class);\n+        mockDictionary = mock(TextClassificationDictionary.class);\n+        mockLabels = mock(TextClassificationLabels.class);\n+\n+        // Create text classifier with mock asset loaders\n+        service = new TensorFlowTextClassificationService(\n+                mockInterpreter,\n+                mockDictionary,\n+                mockLabels\n+        );\n+    }\n+\n+    /**\n+     * Test that fetchSentiment() can do the following.\n+     *\n+     *  - Choose the output with highest score,\n+     *  - obtain the column index,\n+     *  - obtain the label located at that index,\n+     *  - convert the label into {@link SentimentType}, and\n+     *  - return appropriate {@link Sentiment}\n+     *\n+     * @throws Exception if sentiment fetch fails\n+     */\n+    @Test\n+    @SuppressWarnings(\"MagicNumber\") // Double comparison delta epsilon\n+    public void testFetchSentiment() throws Exception {\n+        // List of labels to expect\n+        final List<String> labels = Arrays.asList(\n+                \"negative\",\n+                \"positive\",\n+                \"unknown1\",\n+                \"unknown2\"\n+        );\n+        // Mock random confidence score\n+        final float confidenceScore = new Random().nextFloat();\n+\n+        // Make mock interpreter set confidence score for\n+        // \"positive\" label into pre-determined random value\n+        doAnswer(invocation -> {\n+            float[][] output = invocation.getArgument(1, float[][].class);\n+            output[0][labels.indexOf(\"positive\")] = confidenceScore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76a513697c6e07f394a6cc694cab213be0043ec7"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1410, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}