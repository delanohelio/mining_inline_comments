{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3NzE4Mzgx", "number": 920, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODoyNToyN1rOEwZ5Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODozMzowMVrOEwaLgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTkxMzE0OnYy", "diffSide": "RIGHT", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/AWSApiPlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODoyNToyN1rOHl8ivA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODoyNToyN1rOHl8ivA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1MTI5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    GraphQLRequest<R> request = graphQLRequest;\n          \n          \n            \n                    GraphQLRequest<R> authDecoratedRequest = graphQLRequest;", "url": "https://github.com/aws-amplify/amplify-android/pull/920#discussion_r509551292", "createdAt": "2020-10-21T18:25:27Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/AWSApiPlugin.java", "diffHunk": "@@ -276,68 +267,23 @@ public String getVersion() {\n             @NonNull Action onSubscriptionComplete) {\n         final ClientDetails clientDetails = apiDetails.get(apiName);\n         if (clientDetails == null) {\n-            onSubscriptionFailure.accept(\n-                    new ApiException(\n-                            \"No client information for API named \" + apiName,\n-                            \"Check your amplify configuration to make sure there \" +\n-                                    \"is a correctly configured section for \" + apiName\n-                    )\n-            );\n+            onSubscriptionFailure.accept(new ApiException(\n+                    \"No client information for API named \" + apiName,\n+                    \"Check your amplify configuration to make sure there \" +\n+                            \"is a correctly configured section for \" + apiName\n+            ));\n             return null;\n         }\n \n         GraphQLRequest<R> request = graphQLRequest;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c572796c62f7741c486f7632d28c4706ac78a6e"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTkyODYzOnYy", "diffSide": "RIGHT", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/auth/AuthRuleProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODoyODozN1rOHl8suw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODoyODozN1rOHl8suw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1Mzg1MQ==", "bodyText": "Should this say something about like \"@auth is only supported when suing Cognito User Pools or OpenID connect?\"", "url": "https://github.com/aws-amplify/amplify-android/pull/920#discussion_r509553851", "createdAt": "2020-10-21T18:28:37Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/auth/AuthRuleProcessor.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.ApiAuthProviders;\n+import com.amplifyframework.api.aws.AppSyncGraphQLRequest;\n+import com.amplifyframework.api.aws.AuthorizationType;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.DefaultCognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.OidcAuthProvider;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.core.model.AuthRule;\n+import com.amplifyframework.core.model.AuthStrategy;\n+import com.amplifyframework.core.model.ModelOperation;\n+\n+import com.amazonaws.mobileconnectors.cognitoidentityprovider.exceptions.CognitoParameterInvalidException;\n+import com.amazonaws.mobileconnectors.cognitoidentityprovider.util.CognitoJWTParser;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Objects;\n+\n+/**\n+ * Processor that can decorate an AppSync-compliant GraphQL request with additional variables\n+ * that are required for owner-based or group-based authorization.\n+ */\n+public final class AuthRuleProcessor {\n+    private final ApiAuthProviders authProvider;\n+\n+    /**\n+     * Constructs a new instance of GraphQL request's auth rule processor.\n+     * @param authProvider the auth providers to authorize requests\n+     */\n+    public AuthRuleProcessor(@NonNull ApiAuthProviders authProvider) {\n+        this.authProvider = Objects.requireNonNull(authProvider);\n+    }\n+\n+    /**\n+     * Decorate given GraphQL request instance with additional variables for owner-based or\n+     * group-based authorization.\n+     *\n+     * This will only work if the request is compliant with the AppSync specifications.\n+     * @param request an instance of {@link GraphQLRequest}.\n+     * @param authType the mode of authorization being used to authorize the request\n+     * @param <R> The type of data contained in the GraphQLResponse expected from this request.\n+     * @return the input request with additional variables that specify model's owner and/or\n+     *          groups\n+     * @throws ApiException If an error is encountered while processing the auth rules associated\n+     *          with the request or if the authorization fails\n+     */\n+    public <R> GraphQLRequest<R> process(\n+            @NonNull GraphQLRequest<R> request,\n+            @NonNull AuthorizationType authType\n+    ) throws ApiException {\n+        if (!(request instanceof AppSyncGraphQLRequest)) {\n+            return request;\n+        }\n+\n+        AppSyncGraphQLRequest<R> appSyncRequest = (AppSyncGraphQLRequest<R>) request;\n+        AuthRule ownerRuleWithReadRestriction = null;\n+        ArrayList<String> readAuthorizedGroups = new ArrayList<>();\n+\n+        // Note that we are intentionally supporting only one owner rule with a READ operation at this time.\n+        // If there is more than one, the operation will fail because AppSync generates a parameter for each\n+        // one. The question then is which one do we pass. JavaScript currently doesn't support this use case\n+        // and it's not clear what a good solution would be until AppSync supports real time filters.\n+        for (AuthRule authRule : appSyncRequest.getModelSchema().getAuthRules()) {\n+            if (isReadRestrictingOwner(authRule)) {\n+                if (ownerRuleWithReadRestriction == null) {\n+                    ownerRuleWithReadRestriction = authRule;\n+                } else {\n+                    throw new ApiException(\n+                            \"Detected multiple owner type auth rules with a READ operation\",\n+                            \"We currently do not support this use case. Please limit your type to just one \" +\n+                                    \"owner auth rule with a READ operation restriction.\"\n+                    );\n+                }\n+            } else if (isReadRestrictingStaticGroup(authRule)) {\n+                readAuthorizedGroups.addAll(authRule.getGroups());\n+            }\n+        }\n+\n+        // We only add the owner parameter to the subscription if there is an owner rule with a READ restriction\n+        // and either there are no group auth rules with read access or there are but the user isn't in any of\n+        // them.\n+        if (ownerRuleWithReadRestriction != null\n+                && (readAuthorizedGroups.isEmpty()\n+                || Collections.disjoint(readAuthorizedGroups, getUserGroups(authType)))\n+        ) {\n+            String idClaim = ownerRuleWithReadRestriction.getIdentityClaimOrDefault();\n+            String key = ownerRuleWithReadRestriction.getOwnerFieldOrDefault();\n+            String value = getIdentityValue(idClaim, authType);\n+\n+            try {\n+                return appSyncRequest.newBuilder()\n+                        .variable(key, \"String!\", value)\n+                        .build();\n+            } catch (AmplifyException exception) {\n+                throw new ApiException(\n+                        \"Failed to set owner field on AppSyncGraphQLRequest\", exception,\n+                        \"See attached exception for details.\");\n+            }\n+        }\n+\n+        return request;\n+    }\n+\n+    private boolean isReadRestrictingOwner(AuthRule authRule) {\n+        return AuthStrategy.OWNER.equals(authRule.getAuthStrategy())\n+                && authRule.getOperationsOrDefault().contains(ModelOperation.READ);\n+    }\n+\n+    private boolean isReadRestrictingStaticGroup(AuthRule authRule) {\n+        return AuthStrategy.GROUPS.equals(authRule.getAuthStrategy())\n+                && authRule.getGroups() != null && !authRule.getGroups().isEmpty()\n+                && authRule.getOperationsOrDefault().contains(ModelOperation.READ);\n+    }\n+\n+    private String getIdentityValue(String identityClaim, AuthorizationType authType) throws ApiException {\n+        String identityValue = null;\n+\n+        try {\n+            identityValue = CognitoJWTParser\n+                    .getPayload(getAuthToken(authType))\n+                    .getString(identityClaim);\n+        } catch (JSONException | CognitoParameterInvalidException error) {\n+            // Could not read identity value from the token...\n+            // Exception will be thrown so do nothing for now\n+        }\n+\n+        if (identityValue == null || identityValue.isEmpty()) {\n+            throw new ApiException(\n+                    \"Attempted to subscribe to a model with owner based authorization without \" + identityClaim + \" \" +\n+                            \"which was specified (or defaulted to) as the identity claim.\",\n+                    \"If you did not specify a custom identityClaim in your schema, make sure you are logged in. If \" +\n+                            \"you did, check that the value you specified in your schema is present in the access key.\"\n+            );\n+        }\n+\n+        return identityValue;\n+    }\n+\n+    private ArrayList<String> getUserGroups(AuthorizationType authType) throws ApiException {\n+        // Custom groups claim isn't supported yet.\n+        if (!AuthorizationType.AMAZON_COGNITO_USER_POOLS.equals(authType)) {\n+            throw new ApiException(\"Custom groups claim is not supported yet.\",\n+                    \"Please use Amazon Cognito User Pools to authorize your API.\");\n+        }\n+\n+        ArrayList<String> groups = new ArrayList<>();\n+        final String GROUPS_KEY = \"cognito:groups\";\n+\n+        try {\n+            JSONObject accessToken = CognitoJWTParser.getPayload(getAuthToken(authType));\n+\n+            if (accessToken.has(GROUPS_KEY)) {\n+                JSONArray jsonGroups = accessToken.getJSONArray(GROUPS_KEY);\n+\n+                for (int i = 0; i < jsonGroups.length(); i++) {\n+                    groups.add(jsonGroups.getString(i));\n+                }\n+            }\n+        } catch (JSONException | CognitoParameterInvalidException error) {\n+            throw new ApiException(\n+                    \"Failed to parse groups from auth rule.\",\n+                    error,\n+                    \"This should never happen - see attached exception for more details and report to us on GitHub.\"\n+            );\n+        }\n+\n+        return groups;\n+    }\n+\n+    private String getAuthToken(AuthorizationType authType) throws ApiException {\n+        switch (authType) {\n+            case AMAZON_COGNITO_USER_POOLS:\n+                CognitoUserPoolsAuthProvider cognitoProvider = authProvider.getCognitoUserPoolsAuthProvider();\n+                if (cognitoProvider == null) {\n+                    cognitoProvider = new DefaultCognitoUserPoolsAuthProvider();\n+                }\n+                return cognitoProvider.getLatestAuthToken();\n+            case OPENID_CONNECT:\n+                OidcAuthProvider oidcProvider = authProvider.getOidcAuthProvider();\n+                if (oidcProvider == null) {\n+                    throw new ApiException(\n+                            \"OidcAuthProvider interface is not implemented.\",\n+                            \"Configure AWSApiPlugin with ApiAuthProviders containing an implementation of \" +\n+                                    \"OidcAuthProvider interface that can vend a valid JWT token.\"\n+                    );\n+                }\n+                return oidcProvider.getLatestAuthToken();\n+            case API_KEY:\n+            case AWS_IAM:\n+            case NONE:\n+            default:\n+                throw new ApiException(\n+                        \"Failed to obtain access token from the configured auth provider.\",\n+                        \"Verify that the API is configured with either Cognito User Pools or OpenID Connect.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c572796c62f7741c486f7632d28c4706ac78a6e"}, "originalPosition": 218}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTkzNDExOnYy", "diffSide": "RIGHT", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/auth/AuthRuleProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODoyOToyNFrOHl8waQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODoyOToyNFrOHl8waQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1NDc5Mw==", "bodyText": "There is the REPORT_TO_AWS (or whatever) message constant, can you use that?", "url": "https://github.com/aws-amplify/amplify-android/pull/920#discussion_r509554793", "createdAt": "2020-10-21T18:29:24Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/auth/AuthRuleProcessor.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.ApiAuthProviders;\n+import com.amplifyframework.api.aws.AppSyncGraphQLRequest;\n+import com.amplifyframework.api.aws.AuthorizationType;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.DefaultCognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.OidcAuthProvider;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.core.model.AuthRule;\n+import com.amplifyframework.core.model.AuthStrategy;\n+import com.amplifyframework.core.model.ModelOperation;\n+\n+import com.amazonaws.mobileconnectors.cognitoidentityprovider.exceptions.CognitoParameterInvalidException;\n+import com.amazonaws.mobileconnectors.cognitoidentityprovider.util.CognitoJWTParser;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Objects;\n+\n+/**\n+ * Processor that can decorate an AppSync-compliant GraphQL request with additional variables\n+ * that are required for owner-based or group-based authorization.\n+ */\n+public final class AuthRuleProcessor {\n+    private final ApiAuthProviders authProvider;\n+\n+    /**\n+     * Constructs a new instance of GraphQL request's auth rule processor.\n+     * @param authProvider the auth providers to authorize requests\n+     */\n+    public AuthRuleProcessor(@NonNull ApiAuthProviders authProvider) {\n+        this.authProvider = Objects.requireNonNull(authProvider);\n+    }\n+\n+    /**\n+     * Decorate given GraphQL request instance with additional variables for owner-based or\n+     * group-based authorization.\n+     *\n+     * This will only work if the request is compliant with the AppSync specifications.\n+     * @param request an instance of {@link GraphQLRequest}.\n+     * @param authType the mode of authorization being used to authorize the request\n+     * @param <R> The type of data contained in the GraphQLResponse expected from this request.\n+     * @return the input request with additional variables that specify model's owner and/or\n+     *          groups\n+     * @throws ApiException If an error is encountered while processing the auth rules associated\n+     *          with the request or if the authorization fails\n+     */\n+    public <R> GraphQLRequest<R> process(\n+            @NonNull GraphQLRequest<R> request,\n+            @NonNull AuthorizationType authType\n+    ) throws ApiException {\n+        if (!(request instanceof AppSyncGraphQLRequest)) {\n+            return request;\n+        }\n+\n+        AppSyncGraphQLRequest<R> appSyncRequest = (AppSyncGraphQLRequest<R>) request;\n+        AuthRule ownerRuleWithReadRestriction = null;\n+        ArrayList<String> readAuthorizedGroups = new ArrayList<>();\n+\n+        // Note that we are intentionally supporting only one owner rule with a READ operation at this time.\n+        // If there is more than one, the operation will fail because AppSync generates a parameter for each\n+        // one. The question then is which one do we pass. JavaScript currently doesn't support this use case\n+        // and it's not clear what a good solution would be until AppSync supports real time filters.\n+        for (AuthRule authRule : appSyncRequest.getModelSchema().getAuthRules()) {\n+            if (isReadRestrictingOwner(authRule)) {\n+                if (ownerRuleWithReadRestriction == null) {\n+                    ownerRuleWithReadRestriction = authRule;\n+                } else {\n+                    throw new ApiException(\n+                            \"Detected multiple owner type auth rules with a READ operation\",\n+                            \"We currently do not support this use case. Please limit your type to just one \" +\n+                                    \"owner auth rule with a READ operation restriction.\"\n+                    );\n+                }\n+            } else if (isReadRestrictingStaticGroup(authRule)) {\n+                readAuthorizedGroups.addAll(authRule.getGroups());\n+            }\n+        }\n+\n+        // We only add the owner parameter to the subscription if there is an owner rule with a READ restriction\n+        // and either there are no group auth rules with read access or there are but the user isn't in any of\n+        // them.\n+        if (ownerRuleWithReadRestriction != null\n+                && (readAuthorizedGroups.isEmpty()\n+                || Collections.disjoint(readAuthorizedGroups, getUserGroups(authType)))\n+        ) {\n+            String idClaim = ownerRuleWithReadRestriction.getIdentityClaimOrDefault();\n+            String key = ownerRuleWithReadRestriction.getOwnerFieldOrDefault();\n+            String value = getIdentityValue(idClaim, authType);\n+\n+            try {\n+                return appSyncRequest.newBuilder()\n+                        .variable(key, \"String!\", value)\n+                        .build();\n+            } catch (AmplifyException exception) {\n+                throw new ApiException(\n+                        \"Failed to set owner field on AppSyncGraphQLRequest\", exception,\n+                        \"See attached exception for details.\");\n+            }\n+        }\n+\n+        return request;\n+    }\n+\n+    private boolean isReadRestrictingOwner(AuthRule authRule) {\n+        return AuthStrategy.OWNER.equals(authRule.getAuthStrategy())\n+                && authRule.getOperationsOrDefault().contains(ModelOperation.READ);\n+    }\n+\n+    private boolean isReadRestrictingStaticGroup(AuthRule authRule) {\n+        return AuthStrategy.GROUPS.equals(authRule.getAuthStrategy())\n+                && authRule.getGroups() != null && !authRule.getGroups().isEmpty()\n+                && authRule.getOperationsOrDefault().contains(ModelOperation.READ);\n+    }\n+\n+    private String getIdentityValue(String identityClaim, AuthorizationType authType) throws ApiException {\n+        String identityValue = null;\n+\n+        try {\n+            identityValue = CognitoJWTParser\n+                    .getPayload(getAuthToken(authType))\n+                    .getString(identityClaim);\n+        } catch (JSONException | CognitoParameterInvalidException error) {\n+            // Could not read identity value from the token...\n+            // Exception will be thrown so do nothing for now\n+        }\n+\n+        if (identityValue == null || identityValue.isEmpty()) {\n+            throw new ApiException(\n+                    \"Attempted to subscribe to a model with owner based authorization without \" + identityClaim + \" \" +\n+                            \"which was specified (or defaulted to) as the identity claim.\",\n+                    \"If you did not specify a custom identityClaim in your schema, make sure you are logged in. If \" +\n+                            \"you did, check that the value you specified in your schema is present in the access key.\"\n+            );\n+        }\n+\n+        return identityValue;\n+    }\n+\n+    private ArrayList<String> getUserGroups(AuthorizationType authType) throws ApiException {\n+        // Custom groups claim isn't supported yet.\n+        if (!AuthorizationType.AMAZON_COGNITO_USER_POOLS.equals(authType)) {\n+            throw new ApiException(\"Custom groups claim is not supported yet.\",\n+                    \"Please use Amazon Cognito User Pools to authorize your API.\");\n+        }\n+\n+        ArrayList<String> groups = new ArrayList<>();\n+        final String GROUPS_KEY = \"cognito:groups\";\n+\n+        try {\n+            JSONObject accessToken = CognitoJWTParser.getPayload(getAuthToken(authType));\n+\n+            if (accessToken.has(GROUPS_KEY)) {\n+                JSONArray jsonGroups = accessToken.getJSONArray(GROUPS_KEY);\n+\n+                for (int i = 0; i < jsonGroups.length(); i++) {\n+                    groups.add(jsonGroups.getString(i));\n+                }\n+            }\n+        } catch (JSONException | CognitoParameterInvalidException error) {\n+            throw new ApiException(\n+                    \"Failed to parse groups from auth rule.\",\n+                    error,\n+                    \"This should never happen - see attached exception for more details and report to us on GitHub.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c572796c62f7741c486f7632d28c4706ac78a6e"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTk0MDM1OnYy", "diffSide": "RIGHT", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/auth/AuthRuleProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODozMDoxOFrOHl80ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODozMDoxOFrOHl80ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1NTg3MA==", "bodyText": "Impossible to find single letter variables. I suggest:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            for (int i = 0; i < jsonGroups.length(); i++) {\n          \n          \n            \n                                groups.add(jsonGroups.getString(i));\n          \n          \n            \n                            for (int index = 0; index < jsonGroups.length(); index++) {\n          \n          \n            \n                                groups.add(jsonGroups.getString(index));", "url": "https://github.com/aws-amplify/amplify-android/pull/920#discussion_r509555870", "createdAt": "2020-10-21T18:30:18Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/auth/AuthRuleProcessor.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.ApiAuthProviders;\n+import com.amplifyframework.api.aws.AppSyncGraphQLRequest;\n+import com.amplifyframework.api.aws.AuthorizationType;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.DefaultCognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.OidcAuthProvider;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.core.model.AuthRule;\n+import com.amplifyframework.core.model.AuthStrategy;\n+import com.amplifyframework.core.model.ModelOperation;\n+\n+import com.amazonaws.mobileconnectors.cognitoidentityprovider.exceptions.CognitoParameterInvalidException;\n+import com.amazonaws.mobileconnectors.cognitoidentityprovider.util.CognitoJWTParser;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Objects;\n+\n+/**\n+ * Processor that can decorate an AppSync-compliant GraphQL request with additional variables\n+ * that are required for owner-based or group-based authorization.\n+ */\n+public final class AuthRuleProcessor {\n+    private final ApiAuthProviders authProvider;\n+\n+    /**\n+     * Constructs a new instance of GraphQL request's auth rule processor.\n+     * @param authProvider the auth providers to authorize requests\n+     */\n+    public AuthRuleProcessor(@NonNull ApiAuthProviders authProvider) {\n+        this.authProvider = Objects.requireNonNull(authProvider);\n+    }\n+\n+    /**\n+     * Decorate given GraphQL request instance with additional variables for owner-based or\n+     * group-based authorization.\n+     *\n+     * This will only work if the request is compliant with the AppSync specifications.\n+     * @param request an instance of {@link GraphQLRequest}.\n+     * @param authType the mode of authorization being used to authorize the request\n+     * @param <R> The type of data contained in the GraphQLResponse expected from this request.\n+     * @return the input request with additional variables that specify model's owner and/or\n+     *          groups\n+     * @throws ApiException If an error is encountered while processing the auth rules associated\n+     *          with the request or if the authorization fails\n+     */\n+    public <R> GraphQLRequest<R> process(\n+            @NonNull GraphQLRequest<R> request,\n+            @NonNull AuthorizationType authType\n+    ) throws ApiException {\n+        if (!(request instanceof AppSyncGraphQLRequest)) {\n+            return request;\n+        }\n+\n+        AppSyncGraphQLRequest<R> appSyncRequest = (AppSyncGraphQLRequest<R>) request;\n+        AuthRule ownerRuleWithReadRestriction = null;\n+        ArrayList<String> readAuthorizedGroups = new ArrayList<>();\n+\n+        // Note that we are intentionally supporting only one owner rule with a READ operation at this time.\n+        // If there is more than one, the operation will fail because AppSync generates a parameter for each\n+        // one. The question then is which one do we pass. JavaScript currently doesn't support this use case\n+        // and it's not clear what a good solution would be until AppSync supports real time filters.\n+        for (AuthRule authRule : appSyncRequest.getModelSchema().getAuthRules()) {\n+            if (isReadRestrictingOwner(authRule)) {\n+                if (ownerRuleWithReadRestriction == null) {\n+                    ownerRuleWithReadRestriction = authRule;\n+                } else {\n+                    throw new ApiException(\n+                            \"Detected multiple owner type auth rules with a READ operation\",\n+                            \"We currently do not support this use case. Please limit your type to just one \" +\n+                                    \"owner auth rule with a READ operation restriction.\"\n+                    );\n+                }\n+            } else if (isReadRestrictingStaticGroup(authRule)) {\n+                readAuthorizedGroups.addAll(authRule.getGroups());\n+            }\n+        }\n+\n+        // We only add the owner parameter to the subscription if there is an owner rule with a READ restriction\n+        // and either there are no group auth rules with read access or there are but the user isn't in any of\n+        // them.\n+        if (ownerRuleWithReadRestriction != null\n+                && (readAuthorizedGroups.isEmpty()\n+                || Collections.disjoint(readAuthorizedGroups, getUserGroups(authType)))\n+        ) {\n+            String idClaim = ownerRuleWithReadRestriction.getIdentityClaimOrDefault();\n+            String key = ownerRuleWithReadRestriction.getOwnerFieldOrDefault();\n+            String value = getIdentityValue(idClaim, authType);\n+\n+            try {\n+                return appSyncRequest.newBuilder()\n+                        .variable(key, \"String!\", value)\n+                        .build();\n+            } catch (AmplifyException exception) {\n+                throw new ApiException(\n+                        \"Failed to set owner field on AppSyncGraphQLRequest\", exception,\n+                        \"See attached exception for details.\");\n+            }\n+        }\n+\n+        return request;\n+    }\n+\n+    private boolean isReadRestrictingOwner(AuthRule authRule) {\n+        return AuthStrategy.OWNER.equals(authRule.getAuthStrategy())\n+                && authRule.getOperationsOrDefault().contains(ModelOperation.READ);\n+    }\n+\n+    private boolean isReadRestrictingStaticGroup(AuthRule authRule) {\n+        return AuthStrategy.GROUPS.equals(authRule.getAuthStrategy())\n+                && authRule.getGroups() != null && !authRule.getGroups().isEmpty()\n+                && authRule.getOperationsOrDefault().contains(ModelOperation.READ);\n+    }\n+\n+    private String getIdentityValue(String identityClaim, AuthorizationType authType) throws ApiException {\n+        String identityValue = null;\n+\n+        try {\n+            identityValue = CognitoJWTParser\n+                    .getPayload(getAuthToken(authType))\n+                    .getString(identityClaim);\n+        } catch (JSONException | CognitoParameterInvalidException error) {\n+            // Could not read identity value from the token...\n+            // Exception will be thrown so do nothing for now\n+        }\n+\n+        if (identityValue == null || identityValue.isEmpty()) {\n+            throw new ApiException(\n+                    \"Attempted to subscribe to a model with owner based authorization without \" + identityClaim + \" \" +\n+                            \"which was specified (or defaulted to) as the identity claim.\",\n+                    \"If you did not specify a custom identityClaim in your schema, make sure you are logged in. If \" +\n+                            \"you did, check that the value you specified in your schema is present in the access key.\"\n+            );\n+        }\n+\n+        return identityValue;\n+    }\n+\n+    private ArrayList<String> getUserGroups(AuthorizationType authType) throws ApiException {\n+        // Custom groups claim isn't supported yet.\n+        if (!AuthorizationType.AMAZON_COGNITO_USER_POOLS.equals(authType)) {\n+            throw new ApiException(\"Custom groups claim is not supported yet.\",\n+                    \"Please use Amazon Cognito User Pools to authorize your API.\");\n+        }\n+\n+        ArrayList<String> groups = new ArrayList<>();\n+        final String GROUPS_KEY = \"cognito:groups\";\n+\n+        try {\n+            JSONObject accessToken = CognitoJWTParser.getPayload(getAuthToken(authType));\n+\n+            if (accessToken.has(GROUPS_KEY)) {\n+                JSONArray jsonGroups = accessToken.getJSONArray(GROUPS_KEY);\n+\n+                for (int i = 0; i < jsonGroups.length(); i++) {\n+                    groups.add(jsonGroups.getString(i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c572796c62f7741c486f7632d28c4706ac78a6e"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTk0OTc3OnYy", "diffSide": "RIGHT", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/auth/AuthRuleProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODozMTozMFrOHl87Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODozMTozMFrOHl87Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1NzU4Nw==", "bodyText": "Meh", "url": "https://github.com/aws-amplify/amplify-android/pull/920#discussion_r509557587", "createdAt": "2020-10-21T18:31:30Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/auth/AuthRuleProcessor.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.ApiAuthProviders;\n+import com.amplifyframework.api.aws.AppSyncGraphQLRequest;\n+import com.amplifyframework.api.aws.AuthorizationType;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.DefaultCognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.OidcAuthProvider;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.core.model.AuthRule;\n+import com.amplifyframework.core.model.AuthStrategy;\n+import com.amplifyframework.core.model.ModelOperation;\n+\n+import com.amazonaws.mobileconnectors.cognitoidentityprovider.exceptions.CognitoParameterInvalidException;\n+import com.amazonaws.mobileconnectors.cognitoidentityprovider.util.CognitoJWTParser;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Objects;\n+\n+/**\n+ * Processor that can decorate an AppSync-compliant GraphQL request with additional variables\n+ * that are required for owner-based or group-based authorization.\n+ */\n+public final class AuthRuleProcessor {\n+    private final ApiAuthProviders authProvider;\n+\n+    /**\n+     * Constructs a new instance of GraphQL request's auth rule processor.\n+     * @param authProvider the auth providers to authorize requests\n+     */\n+    public AuthRuleProcessor(@NonNull ApiAuthProviders authProvider) {\n+        this.authProvider = Objects.requireNonNull(authProvider);\n+    }\n+\n+    /**\n+     * Decorate given GraphQL request instance with additional variables for owner-based or\n+     * group-based authorization.\n+     *\n+     * This will only work if the request is compliant with the AppSync specifications.\n+     * @param request an instance of {@link GraphQLRequest}.\n+     * @param authType the mode of authorization being used to authorize the request\n+     * @param <R> The type of data contained in the GraphQLResponse expected from this request.\n+     * @return the input request with additional variables that specify model's owner and/or\n+     *          groups\n+     * @throws ApiException If an error is encountered while processing the auth rules associated\n+     *          with the request or if the authorization fails\n+     */\n+    public <R> GraphQLRequest<R> process(\n+            @NonNull GraphQLRequest<R> request,\n+            @NonNull AuthorizationType authType\n+    ) throws ApiException {\n+        if (!(request instanceof AppSyncGraphQLRequest)) {\n+            return request;\n+        }\n+\n+        AppSyncGraphQLRequest<R> appSyncRequest = (AppSyncGraphQLRequest<R>) request;\n+        AuthRule ownerRuleWithReadRestriction = null;\n+        ArrayList<String> readAuthorizedGroups = new ArrayList<>();\n+\n+        // Note that we are intentionally supporting only one owner rule with a READ operation at this time.\n+        // If there is more than one, the operation will fail because AppSync generates a parameter for each\n+        // one. The question then is which one do we pass. JavaScript currently doesn't support this use case\n+        // and it's not clear what a good solution would be until AppSync supports real time filters.\n+        for (AuthRule authRule : appSyncRequest.getModelSchema().getAuthRules()) {\n+            if (isReadRestrictingOwner(authRule)) {\n+                if (ownerRuleWithReadRestriction == null) {\n+                    ownerRuleWithReadRestriction = authRule;\n+                } else {\n+                    throw new ApiException(\n+                            \"Detected multiple owner type auth rules with a READ operation\",\n+                            \"We currently do not support this use case. Please limit your type to just one \" +\n+                                    \"owner auth rule with a READ operation restriction.\"\n+                    );\n+                }\n+            } else if (isReadRestrictingStaticGroup(authRule)) {\n+                readAuthorizedGroups.addAll(authRule.getGroups());\n+            }\n+        }\n+\n+        // We only add the owner parameter to the subscription if there is an owner rule with a READ restriction\n+        // and either there are no group auth rules with read access or there are but the user isn't in any of\n+        // them.\n+        if (ownerRuleWithReadRestriction != null\n+                && (readAuthorizedGroups.isEmpty()\n+                || Collections.disjoint(readAuthorizedGroups, getUserGroups(authType)))\n+        ) {\n+            String idClaim = ownerRuleWithReadRestriction.getIdentityClaimOrDefault();\n+            String key = ownerRuleWithReadRestriction.getOwnerFieldOrDefault();\n+            String value = getIdentityValue(idClaim, authType);\n+\n+            try {\n+                return appSyncRequest.newBuilder()\n+                        .variable(key, \"String!\", value)\n+                        .build();\n+            } catch (AmplifyException exception) {\n+                throw new ApiException(\n+                        \"Failed to set owner field on AppSyncGraphQLRequest\", exception,\n+                        \"See attached exception for details.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c572796c62f7741c486f7632d28c4706ac78a6e"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MTk2MDM0OnYy", "diffSide": "RIGHT", "path": "aws-api/src/main/java/com/amplifyframework/api/aws/auth/AuthRuleProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODozMzowMVrOHl9DMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxODozMzowMVrOHl9DMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTU1OTYwMg==", "bodyText": "maybe\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public <R> GraphQLRequest<R> process(\n          \n          \n            \n                public <R> GraphQLRequest<R> addAuthorizationFields(\n          \n      \n    \n    \n  \n\nor:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public <R> GraphQLRequest<R> process(\n          \n          \n            \n                public <R> GraphQLRequest<R> decorate(\n          \n      \n    \n    \n  \n\n?\nShould this be a AuthRuleRequestDecorator?", "url": "https://github.com/aws-amplify/amplify-android/pull/920#discussion_r509559602", "createdAt": "2020-10-21T18:33:01Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/auth/AuthRuleProcessor.java", "diffHunk": "@@ -0,0 +1,222 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws.auth;\n+\n+import androidx.annotation.NonNull;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.ApiAuthProviders;\n+import com.amplifyframework.api.aws.AppSyncGraphQLRequest;\n+import com.amplifyframework.api.aws.AuthorizationType;\n+import com.amplifyframework.api.aws.sigv4.CognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.DefaultCognitoUserPoolsAuthProvider;\n+import com.amplifyframework.api.aws.sigv4.OidcAuthProvider;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.core.model.AuthRule;\n+import com.amplifyframework.core.model.AuthStrategy;\n+import com.amplifyframework.core.model.ModelOperation;\n+\n+import com.amazonaws.mobileconnectors.cognitoidentityprovider.exceptions.CognitoParameterInvalidException;\n+import com.amazonaws.mobileconnectors.cognitoidentityprovider.util.CognitoJWTParser;\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Objects;\n+\n+/**\n+ * Processor that can decorate an AppSync-compliant GraphQL request with additional variables\n+ * that are required for owner-based or group-based authorization.\n+ */\n+public final class AuthRuleProcessor {\n+    private final ApiAuthProviders authProvider;\n+\n+    /**\n+     * Constructs a new instance of GraphQL request's auth rule processor.\n+     * @param authProvider the auth providers to authorize requests\n+     */\n+    public AuthRuleProcessor(@NonNull ApiAuthProviders authProvider) {\n+        this.authProvider = Objects.requireNonNull(authProvider);\n+    }\n+\n+    /**\n+     * Decorate given GraphQL request instance with additional variables for owner-based or\n+     * group-based authorization.\n+     *\n+     * This will only work if the request is compliant with the AppSync specifications.\n+     * @param request an instance of {@link GraphQLRequest}.\n+     * @param authType the mode of authorization being used to authorize the request\n+     * @param <R> The type of data contained in the GraphQLResponse expected from this request.\n+     * @return the input request with additional variables that specify model's owner and/or\n+     *          groups\n+     * @throws ApiException If an error is encountered while processing the auth rules associated\n+     *          with the request or if the authorization fails\n+     */\n+    public <R> GraphQLRequest<R> process(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c572796c62f7741c486f7632d28c4706ac78a6e"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 985, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}