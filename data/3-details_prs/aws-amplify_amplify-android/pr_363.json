{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNDQwMDQ5", "number": 363, "title": "Add unit tests for offline predictions", "bodyText": "Issue #, if available:\nDescription of changes:\n\nAdd unit tests for fetchSentiment() and tokenizeInputText()\nRemove final keyword from loaders to make them mockable\n\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-04-07T18:47:55Z", "url": "https://github.com/aws-amplify/amplify-android/pull/363", "merged": true, "mergeCommit": {"oid": "d85a178a10af408573f06eb668a901774163715d"}, "closed": true, "closedAt": "2020-04-08T06:05:49Z", "author": {"login": "raphkim"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVX17qgH2gAyNDAwNDQwMDQ5Ojc1NGY3NGExMmQ0MGI4ZTJmOTJhODgwOTFhNTk3MjcwOGM3ZTI5M2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVguoJgFqTM4OTY1NDczMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "754f74a12d40b8e2f92a88091a5972708c7e293c", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/754f74a12d40b8e2f92a88091a5972708c7e293c", "committedDate": "2020-04-07T18:45:13Z", "message": "Add unit tests for offline predictions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/cd52e3ad7b92d9c37960ac145ee6534b8e37ca86", "committedDate": "2020-04-07T18:52:46Z", "message": "Remove test runners"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDAzODI4", "url": "https://github.com/aws-amplify/amplify-android/pull/363#pullrequestreview-389403828", "createdAt": "2020-04-07T18:58:28Z", "commit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxODo1ODoyOFrOGCRxsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToyNTozOVrOGCSuZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0MTU4NA==", "bodyText": "Do you need these indices, if you're just making a list of 10 items? Can you infer the indices from the ordering in the file?\nIf you do need the indices, you could make this a word-tokens.csv (a little more standard) and write it as <TOKEN>,4, etc.", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405041584", "createdAt": "2020-04-07T18:58:28Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/test/resources/word-tokens.txt", "diffHunk": "@@ -0,0 +1,10 @@\n+<PAD> 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0NDEzOA==", "bodyText": "One of the reason I user factories all the time is that they allow you to write code above the equivalent of this(...). e.g.,\nstatic TensorFlowTextClassificationService fromContext(@NonNull Context context) {\n    Objects.requireNonNull(context);\n    TextClassificationModel model = new TextClassificationModel(context);\n    TextClassificationDictionary dictionary = new TextClassificationDictionary(context);\n    TextClassifcationLabels labels = new TextClassificationLabels(context);\n    return new TensorFlowTextClassificationService(model, dictionary, labels);\n}\n\nOverall, you just don't have to fight the syntax as hard, with this approach ^^ as compared the constructor-way.", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405044138", "createdAt": "2020-04-07T19:02:40Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TensorFlowTextClassificationService.java", "diffHunk": "@@ -62,13 +64,23 @@\n      * @param context the Android context\n      */\n     TensorFlowTextClassificationService(@NonNull Context context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0OTA4Mw==", "bodyText": "If you already have package visibility for classify(...), can you just test through it?\nThe only problem I can see might be that latch, which would block stuff.\nAh, haha. Okay. Remember that crazy Loadable<List<Loadable<?, PredictionsException>>, PredictionsException>? If you use that, and then accept it as a dependency in the constructor, you can \"fake\" whether or not this service is loaded.\nAssuming you can push loaded.await(); into the implementation of that big Loadable, that'll help you when you run classify from test. (In source, you provide an impl that blocks. In test, you provide a mock(Loadable.class) that does whatever you want.\nI guess the actual latch await call would change to:\nif (!compoundLoadable.isLoaded()) {\n    compountLoadable.load();\n}\n\nOr something like that.", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405049083", "createdAt": "2020-04-07T19:11:27Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/service/TensorFlowTextClassificationService.java", "diffHunk": "@@ -132,7 +148,8 @@ void classify(\n         }\n     }\n \n-    private Sentiment fetchSentiment(String text) throws PredictionsException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA0OTYzMw==", "bodyText": "Since both of these are in @Before scope, I would move this when arrangement up right underneath them, there, too.", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405049633", "createdAt": "2020-04-07T19:12:23Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/asset/InputTokenizerTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.asset;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+\n+import com.amplifyframework.predictions.PredictionsException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that input conversion to TensorFlow Lite tokens\n+ * works as intended.\n+ */\n+public final class InputTokenizerTest {\n+    private static final long LOAD_TIMEOUT_MS = 100;\n+\n+    private Context mockContext;\n+    private AssetManager mockAssets;\n+\n+    /**\n+     * Set up mock behavior before each test.\n+     */\n+    @Before\n+    public void setUp() {\n+        // Mock Android context and asset manager\n+        mockContext = mock(Context.class);\n+        mockAssets = mock(AssetManager.class);\n+    }\n+\n+    /**\n+     * Test that text tokenizer converts input text into a 2-D\n+     * array of equivalent token values and pads the rest with 0's.\n+     * @throws Exception if dictionary fails to load\n+     */\n+    @Test\n+    @SuppressWarnings(\"MagicNumber\") // word tokens\n+    public void testInputTextTokenizer() throws Exception {\n+        final CountDownLatch loaded = new CountDownLatch(1);\n+        final AtomicReference<Map<String, Integer>> tokens = new AtomicReference<>();\n+        final AtomicReference<PredictionsException> error = new AtomicReference<>();\n+\n+        final String inputText = \"Where is the bathroom?\";\n+        final InputStream stream = new FileInputStream(\"src/test/resources/word-tokens.txt\");\n+\n+        // Make mock context return mock asset manager\n+        when(mockContext.getAssets()).thenReturn(mockAssets);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MTA5MQ==", "bodyText": "You can use the Await utility for this:\nMap<String, Integer> tokens = Await.<WhateverResultType, PredictionsException>result(\n    (onResult, onError) -> dictionary.onLoaded(onResult::accept, onError::accept)\n);\n\nThis way, you don't have to mess around with a CountDownLatch,  yourself.", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405051091", "createdAt": "2020-04-07T19:15:02Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/asset/InputTokenizerTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.asset;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+\n+import com.amplifyframework.predictions.PredictionsException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that input conversion to TensorFlow Lite tokens\n+ * works as intended.\n+ */\n+public final class InputTokenizerTest {\n+    private static final long LOAD_TIMEOUT_MS = 100;\n+\n+    private Context mockContext;\n+    private AssetManager mockAssets;\n+\n+    /**\n+     * Set up mock behavior before each test.\n+     */\n+    @Before\n+    public void setUp() {\n+        // Mock Android context and asset manager\n+        mockContext = mock(Context.class);\n+        mockAssets = mock(AssetManager.class);\n+    }\n+\n+    /**\n+     * Test that text tokenizer converts input text into a 2-D\n+     * array of equivalent token values and pads the rest with 0's.\n+     * @throws Exception if dictionary fails to load\n+     */\n+    @Test\n+    @SuppressWarnings(\"MagicNumber\") // word tokens\n+    public void testInputTextTokenizer() throws Exception {\n+        final CountDownLatch loaded = new CountDownLatch(1);\n+        final AtomicReference<Map<String, Integer>> tokens = new AtomicReference<>();\n+        final AtomicReference<PredictionsException> error = new AtomicReference<>();\n+\n+        final String inputText = \"Where is the bathroom?\";\n+        final InputStream stream = new FileInputStream(\"src/test/resources/word-tokens.txt\");\n+\n+        // Make mock context return mock asset manager\n+        when(mockContext.getAssets()).thenReturn(mockAssets);\n+\n+        // Make mock asset manager return pre-determined input stream\n+        when(mockAssets.open(anyString())).thenReturn(stream);\n+\n+        // Load!! (from mock assets)\n+        TextClassificationDictionary dictionary = new TextClassificationDictionary(mockContext)\n+                .onLoaded(\n+                    onLoad -> {\n+                        loaded.countDown();\n+                        tokens.set(onLoad);\n+                    },\n+                    onError -> {\n+                        loaded.countDown();\n+                        error.set(onError);\n+                    }\n+                );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MTU5NQ==", "bodyText": "(This will go away with Await, too. But nit: MILLISECONDS! Not MICROSECONDS.)", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405051595", "createdAt": "2020-04-07T19:15:57Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/asset/InputTokenizerTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.asset;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+\n+import com.amplifyframework.predictions.PredictionsException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that input conversion to TensorFlow Lite tokens\n+ * works as intended.\n+ */\n+public final class InputTokenizerTest {\n+    private static final long LOAD_TIMEOUT_MS = 100;\n+\n+    private Context mockContext;\n+    private AssetManager mockAssets;\n+\n+    /**\n+     * Set up mock behavior before each test.\n+     */\n+    @Before\n+    public void setUp() {\n+        // Mock Android context and asset manager\n+        mockContext = mock(Context.class);\n+        mockAssets = mock(AssetManager.class);\n+    }\n+\n+    /**\n+     * Test that text tokenizer converts input text into a 2-D\n+     * array of equivalent token values and pads the rest with 0's.\n+     * @throws Exception if dictionary fails to load\n+     */\n+    @Test\n+    @SuppressWarnings(\"MagicNumber\") // word tokens\n+    public void testInputTextTokenizer() throws Exception {\n+        final CountDownLatch loaded = new CountDownLatch(1);\n+        final AtomicReference<Map<String, Integer>> tokens = new AtomicReference<>();\n+        final AtomicReference<PredictionsException> error = new AtomicReference<>();\n+\n+        final String inputText = \"Where is the bathroom?\";\n+        final InputStream stream = new FileInputStream(\"src/test/resources/word-tokens.txt\");\n+\n+        // Make mock context return mock asset manager\n+        when(mockContext.getAssets()).thenReturn(mockAssets);\n+\n+        // Make mock asset manager return pre-determined input stream\n+        when(mockAssets.open(anyString())).thenReturn(stream);\n+\n+        // Load!! (from mock assets)\n+        TextClassificationDictionary dictionary = new TextClassificationDictionary(mockContext)\n+                .onLoaded(\n+                    onLoad -> {\n+                        loaded.countDown();\n+                        tokens.set(onLoad);\n+                    },\n+                    onError -> {\n+                        loaded.countDown();\n+                        error.set(onError);\n+                    }\n+                );\n+        dictionary.load();\n+        loaded.await(LOAD_TIMEOUT_MS, TimeUnit.MICROSECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1MjgwMg==", "bodyText": "int[] values = { 1, 2, 9, 4, 2};\nfor (int index = 0; index < : values.size(); index++) {\n    expected[0][index] = values[index];\n}", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405052802", "createdAt": "2020-04-07T19:18:02Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/asset/InputTokenizerTest.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.asset;\n+\n+import android.content.Context;\n+import android.content.res.AssetManager;\n+\n+import com.amplifyframework.predictions.PredictionsException;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that input conversion to TensorFlow Lite tokens\n+ * works as intended.\n+ */\n+public final class InputTokenizerTest {\n+    private static final long LOAD_TIMEOUT_MS = 100;\n+\n+    private Context mockContext;\n+    private AssetManager mockAssets;\n+\n+    /**\n+     * Set up mock behavior before each test.\n+     */\n+    @Before\n+    public void setUp() {\n+        // Mock Android context and asset manager\n+        mockContext = mock(Context.class);\n+        mockAssets = mock(AssetManager.class);\n+    }\n+\n+    /**\n+     * Test that text tokenizer converts input text into a 2-D\n+     * array of equivalent token values and pads the rest with 0's.\n+     * @throws Exception if dictionary fails to load\n+     */\n+    @Test\n+    @SuppressWarnings(\"MagicNumber\") // word tokens\n+    public void testInputTextTokenizer() throws Exception {\n+        final CountDownLatch loaded = new CountDownLatch(1);\n+        final AtomicReference<Map<String, Integer>> tokens = new AtomicReference<>();\n+        final AtomicReference<PredictionsException> error = new AtomicReference<>();\n+\n+        final String inputText = \"Where is the bathroom?\";\n+        final InputStream stream = new FileInputStream(\"src/test/resources/word-tokens.txt\");\n+\n+        // Make mock context return mock asset manager\n+        when(mockContext.getAssets()).thenReturn(mockAssets);\n+\n+        // Make mock asset manager return pre-determined input stream\n+        when(mockAssets.open(anyString())).thenReturn(stream);\n+\n+        // Load!! (from mock assets)\n+        TextClassificationDictionary dictionary = new TextClassificationDictionary(mockContext)\n+                .onLoaded(\n+                    onLoad -> {\n+                        loaded.countDown();\n+                        tokens.set(onLoad);\n+                    },\n+                    onError -> {\n+                        loaded.countDown();\n+                        error.set(onError);\n+                    }\n+                );\n+        dictionary.load();\n+        loaded.await(LOAD_TIMEOUT_MS, TimeUnit.MICROSECONDS);\n+        if (error.get() != null) {\n+            fail(\"Failed to load dictionary.\");\n+        }\n+\n+        // Assert that load was successful\n+        assertEquals(tokens.get(), dictionary.getValue());\n+\n+        // Tokenize input\n+        float[][] input = dictionary.tokenizeInputText(inputText);\n+        float[][] expected = new float[1][input[0].length];\n+        expected[0][0] = 1; // <START>\n+        expected[0][1] = 2; // Where (<UNKNOWN>)\n+        expected[0][2] = 9; // is\n+        expected[0][3] = 4; // the\n+        expected[0][4] = 2; // bathroom (<UNKNOWN>)\n+        // Followed by 0's (<PAD>)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NTAwNw==", "bodyText": "Instead of mocking the dictionary, can your provide text_classification_vocab.txt, and use real one?", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405055007", "createdAt": "2020-04-07T19:21:53Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/service/TextClassificationTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.service;\n+\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationDictionary;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationLabels;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationModel;\n+import com.amplifyframework.testutils.random.RandomString;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Random;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that sentiment detection using TensorFlow Lite interpreter\n+ * to output Amplify text interpretation result works.\n+ */\n+public final class TextClassificationTest {\n+\n+    private TextClassificationModel mockInterpreter;\n+    private TextClassificationDictionary mockDictionary;\n+    private TextClassificationLabels mockLabels;\n+\n+    private TensorFlowTextClassificationService service;\n+\n+    /**\n+     * Set up mock behavior before each test.\n+     */\n+    @Before\n+    public void setUp() {\n+        // Mock asset loaders\n+        mockInterpreter = mock(TextClassificationModel.class);\n+        mockDictionary = mock(TextClassificationDictionary.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NzEyNw==", "bodyText": "It might make sense to have a\npublic interface TextClassificationModel<T> extends Loadable<T, PredictionsException> {\n    ...\n}\n\nwith a:\npublic final class TensorFlowTextInterpreter implements TextClassificationModel<Interpreter> {\n    ...\n}\n\nThen, in your test you can mock(TestClassificationModel.class), but in your source, you can keep TensorflowTextInperpreter.", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405057127", "createdAt": "2020-04-07T19:25:39Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/main/java/com/amplifyframework/predictions/tensorflow/asset/TextClassificationModel.java", "diffHunk": "@@ -37,7 +37,7 @@\n  * Loads the pre-trained text classification model into\n  * a TensorFlow Lite interpreter instance.\n  */\n-public final class TextClassificationModel implements Loadable<Interpreter, PredictionsException> {\n+public class TextClassificationModel implements Loadable<Interpreter, PredictionsException> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd52e3ad7b92d9c37960ac145ee6534b8e37ca86"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76a513697c6e07f394a6cc694cab213be0043ec7", "author": {"user": {"login": "raphkim", "name": "Raphael Kim"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/76a513697c6e07f394a6cc694cab213be0043ec7", "committedDate": "2020-04-07T20:16:19Z", "message": "Apply Jameson's PR suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NjU0NzMy", "url": "https://github.com/aws-amplify/amplify-android/pull/363#pullrequestreview-389654732", "createdAt": "2020-04-08T05:06:12Z", "commit": {"oid": "76a513697c6e07f394a6cc694cab213be0043ec7"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTowNjoxMlrOGCfIfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNTowNjoxMlrOGCfIfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTI2MDQxNA==", "bodyText": "Huh, I like this indexing.", "url": "https://github.com/aws-amplify/amplify-android/pull/363#discussion_r405260414", "createdAt": "2020-04-08T05:06:12Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions-tensorflow/src/test/java/com/amplifyframework/predictions/tensorflow/service/TextClassificationTest.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.tensorflow.service;\n+\n+import com.amplifyframework.predictions.models.Sentiment;\n+import com.amplifyframework.predictions.models.SentimentType;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationDictionary;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationLabels;\n+import com.amplifyframework.predictions.tensorflow.asset.TextClassificationModel;\n+import com.amplifyframework.testutils.random.RandomString;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Random;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Test that sentiment detection using TensorFlow Lite interpreter\n+ * to output Amplify text interpretation result works.\n+ */\n+public final class TextClassificationTest {\n+\n+    private TextClassificationModel mockInterpreter;\n+    private TextClassificationDictionary mockDictionary;\n+    private TextClassificationLabels mockLabels;\n+\n+    private TensorFlowTextClassificationService service;\n+\n+    /**\n+     * Set up mock behavior before each test.\n+     */\n+    @Before\n+    public void setUp() {\n+        // Mock asset loaders\n+        mockInterpreter = mock(TextClassificationModel.class);\n+        mockDictionary = mock(TextClassificationDictionary.class);\n+        mockLabels = mock(TextClassificationLabels.class);\n+\n+        // Create text classifier with mock asset loaders\n+        service = new TensorFlowTextClassificationService(\n+                mockInterpreter,\n+                mockDictionary,\n+                mockLabels\n+        );\n+    }\n+\n+    /**\n+     * Test that fetchSentiment() can do the following.\n+     *\n+     *  - Choose the output with highest score,\n+     *  - obtain the column index,\n+     *  - obtain the label located at that index,\n+     *  - convert the label into {@link SentimentType}, and\n+     *  - return appropriate {@link Sentiment}\n+     *\n+     * @throws Exception if sentiment fetch fails\n+     */\n+    @Test\n+    @SuppressWarnings(\"MagicNumber\") // Double comparison delta epsilon\n+    public void testFetchSentiment() throws Exception {\n+        // List of labels to expect\n+        final List<String> labels = Arrays.asList(\n+                \"negative\",\n+                \"positive\",\n+                \"unknown1\",\n+                \"unknown2\"\n+        );\n+        // Mock random confidence score\n+        final float confidenceScore = new Random().nextFloat();\n+\n+        // Make mock interpreter set confidence score for\n+        // \"positive\" label into pre-determined random value\n+        doAnswer(invocation -> {\n+            float[][] output = invocation.getArgument(1, float[][].class);\n+            output[0][labels.indexOf(\"positive\")] = confidenceScore;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76a513697c6e07f394a6cc694cab213be0043ec7"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2670, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}