{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxMDYyNDUz", "number": 1057, "title": "A Kotlin-centric Facade for Amplify Android", "bodyText": "This commit introduces a new, optional core-kotlin module.\nThe module improves the experience of using Amplify from Kotlin.\nUsage\nTo use the Kotlin facade, include this dependency:\ndependencies {\n    implementation \"com.amplifyframework:core-kotlin:$version\"\n}\nAnd import the Kotlin facade instead of the similar one at\ncom.amplifyframework.core.Amplify:\nimport com.amplifyframework.kotlin.core.Amplify\nOverview\ncore-kotlin introduces an alternate Amplify facade, which provides new\nmeans of interacting with the various Amplify categories (API, Auth,\nDataStore, Predictions, Storage.) The new facade include several\nimprovements to the Kotlin developer experience, mainly by adding\nsupport for Coroutines.\nAmplify has several types of APIs. Some are synchronous calls, which\nimmediately return a value. However, most Amplify behaviors are\nasynchronous calls. Among the async calls, there are a few broad\ncategories:\n\nFunctions that return a single value, and cannot be canceled;\nFunctions that return a single value, and can be canceled;\nFunctions that emit a stream of values\nFunctions that emit multiple types of values\n\nSingle-valued functions\nMost Amplify behaviors are of type (1). Auth and Predictions are\nentirely comprised of type (1). The Kotlin flavors of these behaviors\nare expressed as suspending functions, e.g.:\nsuspend fun signOut() {\n   ...\n}\nThe simplest developer experience to invoke this method will be:\nactivityScope.launch {\n    Amplify.Auth.signOut()\n}\nCancelable, single-valued functions\nSome single-valued functions, such as the mutate(...) behavior in the\nAPI category, may be canceled before rendering a result. The Kotlin\nversion of mutate(...) is expressed this way:\nsuspend fun <R> ApiCategory.mutate(\n        request: GraphQLRequest<R>, apiName: String? = null)\n        : GraphQLResponse<R> {\n    ...\n}\nThe user may cancel the behavior via Kotlin's Job construct:\nval job = activityScope.launch {\n    Amplify.API.mutate(request)\n}\n...\njob.cancel()\nMulti-valued functions\nThere are also some Amplify behaviors which emit a stream of values.\nDataStore's observe() is a canonical example. The Kotlin facade\nfunction is:\nsuspend fun observe(): Flow<DataStoreItemChange<out Model>> {\n    ...\n}\nA developer may interact with the flow in this way:\nactivityScope.launch {\n    Amplify.DataStore.observe()\n        .collect { print(it) }\n}\nNote that observe() itself is a suspending function. This function\nsuspends until the observation is ready to be used, e.g.:\nval changes: Flow<DataStoreItemChange<out Model>> =\n    runBlocking { Amplify.DataStore.observe() }\nprint(\"Ready to see DataStore changes!\")\nactivityScope.launch {\n    dataStoreChanges.collect { print(\"Found one: $it\") }\n}\nMixed-valued functions\nAPI's subscribe() also emits a stream of values. Like DataStore, there is\nsome non-zero cost associated with establishing a subscription. So\nsubscribe() also suspends until it establishes a connection.\nsuspend fun <T> ApiCategory.subscribe(\n        request: GraphQLRequest<T>, apiName: String? = null)\n        : Flow<GraphQLResponse<T>> {\n    ...\n}\nA developer can access the flow:\nval events = runBlocking { Amplify.API.subscribe(request) }\nprint(\"Ready to see subscription events!\")\nactivityScope.launch {\n    events.collect { print(\"Found one: $it\") }\n}\nThe Storage category's various upload and download functions provide\ntwo interesting pieces of information. We want obtain the result of the\ntransfer, but we may also like to observe a stream of progress updates.\nThe signature looks like:\nfun StorageCategory.downloadFile(\n        key: String,\n        local: File,\n): InProgressStorageOperation<StorageDownloadFileResult> {\nA developer can access the result of the download via a suspend\nfunction exposed on the download operation:\nval result = runBlocking { download.result() }\nOr get periodic progress updates by doing:\nactivityScope.async {\n    download.progress().collect {\n        print(\"Download made some progress! $it\")\n    }\n}\nRefer: #605", "createdAt": "2020-12-16T10:34:23Z", "url": "https://github.com/aws-amplify/amplify-android/pull/1057", "merged": true, "mergeCommit": {"oid": "7dc76ee8ee635b217fed015a00fb93bfe6c846ee"}, "closed": true, "closedAt": "2021-02-19T22:47:16Z", "author": {"login": "jamesonwilliams"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmw_SwAFqTU1MzgyNDg0Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd7x0JAAFqTU5NDYzMDE3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODI0ODQ2", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#pullrequestreview-553824846", "createdAt": "2020-12-16T15:50:51Z", "commit": {"oid": "768420d71538c206b63e9d331a22c5c1fd78714a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTo1MDo1MVrOIHMI5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTo1MDo1MVrOIHMI5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQwOTgyOQ==", "bodyText": "We're going to have to start generating Kotlin models, too. We'll need to add a \"which language?\" prompt to the CLI.", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r544409829", "createdAt": "2020-12-16T15:50:51Z", "author": {"login": "jamesonwilliams"}, "path": "kotlin-extensions/src/test/java/com/amplifyframework/ktx/DataStoreCategoryExtTest.kt", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.ktx\n+\n+import androidx.test.core.app.ApplicationProvider.getApplicationContext\n+\n+import com.amplifyframework.core.Amplify\n+import com.amplifyframework.core.AmplifyConfiguration\n+import com.amplifyframework.core.Consumer\n+import com.amplifyframework.datastore.DataStoreItemChange\n+import com.amplifyframework.datastore.DataStoreItemChange.Initiator.LOCAL\n+import com.amplifyframework.datastore.DataStoreItemChange.Type.CREATE\n+import com.amplifyframework.datastore.DataStorePlugin\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner\n+\n+import kotlinx.coroutines.runBlocking\n+import org.json.JSONObject\n+\n+import org.junit.Assert.assertEquals\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.mockito.Mockito.`when`\n+import org.mockito.Mockito.any\n+import org.mockito.Mockito.eq\n+import org.mockito.Mockito.mock\n+import org.robolectric.RobolectricTestRunner\n+\n+@RunWith(RobolectricTestRunner::class)\n+class DataStoreCategoryExtTest {\n+    private lateinit var mockPlugin: DataStorePlugin<*>\n+    private lateinit var blogOwner: BlogOwner\n+    private lateinit var values: MutableList<BlogOwner>\n+\n+    @Before\n+    fun setupMockDataStorePlugin() {\n+        // When items are saved, store them in a local buffer.\n+        values = mutableListOf()\n+\n+        // We'll mock away the plugin.\n+        mockPlugin = mock(DataStorePlugin::class.java)\n+\n+        // Prepare an item to save.\n+        blogOwner = BlogOwner.builder()\n+            .name(\"Tony Danielsen, J.D.\")\n+            .build()\n+\n+        `when`(mockPlugin.pluginKey).thenReturn(\"fakeDataStorePlugin\")\n+\n+        // When its saved, fire success on the plugin with a DataStoreItemChange.\n+        // Also save the the item to the buffer.\n+        `when`(mockPlugin.save(eq(blogOwner), any(), any())).thenAnswer {\n+            val onResult = it.getArgument<Consumer<DataStoreItemChange<BlogOwner>>>(1)\n+            val value = it.getArgument<BlogOwner>(0)\n+            values.add(value)\n+            val change = DataStoreItemChange.builder<BlogOwner>()\n+                .initiator(LOCAL)\n+                .item(value)\n+                .itemClass(BlogOwner::class.java)\n+                .type(CREATE)\n+                .build()\n+            onResult.accept(change)\n+        }\n+\n+        // When the plugin is queried, fake a response by just returning\n+        // the saved list.\n+        `when`(mockPlugin.query(eq(BlogOwner::class.java), any(), any())).thenAnswer {\n+            val onResult = it.getArgument<Consumer<Iterator<BlogOwner>>>(1)\n+            onResult.accept(values.iterator())\n+        }\n+\n+        // Okay, now add the plugin.\n+        Amplify.addPlugin(mockPlugin)\n+        val config = AmplifyConfiguration.fromJson(JSONObject())\n+        Amplify.configure(config, getApplicationContext())\n+    }\n+\n+    @Test\n+    fun highlightDeveloperExperience() {\n+        runBlocking {\n+            Amplify.DataStore.save(blogOwner)\n+            val results = Amplify.DataStore.query(BlogOwner::class.java)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "768420d71538c206b63e9d331a22c5c1fd78714a"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NjE0MjIw", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#pullrequestreview-554614220", "createdAt": "2020-12-17T13:43:20Z", "commit": {"oid": "768420d71538c206b63e9d331a22c5c1fd78714a"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMzo0MzoyMFrOIH2Ncg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMzo1NDozOVrOIH2sTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA5OTEyMg==", "bodyText": "What makes you say we will \"have\" to? Not that I necessarily disagree, just curious", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r545099122", "createdAt": "2020-12-17T13:43:20Z", "author": {"login": "aajtodd"}, "path": "kotlin-extensions/src/test/java/com/amplifyframework/ktx/DataStoreCategoryExtTest.kt", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.ktx\n+\n+import androidx.test.core.app.ApplicationProvider.getApplicationContext\n+\n+import com.amplifyframework.core.Amplify\n+import com.amplifyframework.core.AmplifyConfiguration\n+import com.amplifyframework.core.Consumer\n+import com.amplifyframework.datastore.DataStoreItemChange\n+import com.amplifyframework.datastore.DataStoreItemChange.Initiator.LOCAL\n+import com.amplifyframework.datastore.DataStoreItemChange.Type.CREATE\n+import com.amplifyframework.datastore.DataStorePlugin\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner\n+\n+import kotlinx.coroutines.runBlocking\n+import org.json.JSONObject\n+\n+import org.junit.Assert.assertEquals\n+import org.junit.Before\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+import org.mockito.Mockito.`when`\n+import org.mockito.Mockito.any\n+import org.mockito.Mockito.eq\n+import org.mockito.Mockito.mock\n+import org.robolectric.RobolectricTestRunner\n+\n+@RunWith(RobolectricTestRunner::class)\n+class DataStoreCategoryExtTest {\n+    private lateinit var mockPlugin: DataStorePlugin<*>\n+    private lateinit var blogOwner: BlogOwner\n+    private lateinit var values: MutableList<BlogOwner>\n+\n+    @Before\n+    fun setupMockDataStorePlugin() {\n+        // When items are saved, store them in a local buffer.\n+        values = mutableListOf()\n+\n+        // We'll mock away the plugin.\n+        mockPlugin = mock(DataStorePlugin::class.java)\n+\n+        // Prepare an item to save.\n+        blogOwner = BlogOwner.builder()\n+            .name(\"Tony Danielsen, J.D.\")\n+            .build()\n+\n+        `when`(mockPlugin.pluginKey).thenReturn(\"fakeDataStorePlugin\")\n+\n+        // When its saved, fire success on the plugin with a DataStoreItemChange.\n+        // Also save the the item to the buffer.\n+        `when`(mockPlugin.save(eq(blogOwner), any(), any())).thenAnswer {\n+            val onResult = it.getArgument<Consumer<DataStoreItemChange<BlogOwner>>>(1)\n+            val value = it.getArgument<BlogOwner>(0)\n+            values.add(value)\n+            val change = DataStoreItemChange.builder<BlogOwner>()\n+                .initiator(LOCAL)\n+                .item(value)\n+                .itemClass(BlogOwner::class.java)\n+                .type(CREATE)\n+                .build()\n+            onResult.accept(change)\n+        }\n+\n+        // When the plugin is queried, fake a response by just returning\n+        // the saved list.\n+        `when`(mockPlugin.query(eq(BlogOwner::class.java), any(), any())).thenAnswer {\n+            val onResult = it.getArgument<Consumer<Iterator<BlogOwner>>>(1)\n+            onResult.accept(values.iterator())\n+        }\n+\n+        // Okay, now add the plugin.\n+        Amplify.addPlugin(mockPlugin)\n+        val config = AmplifyConfiguration.fromJson(JSONObject())\n+        Amplify.configure(config, getApplicationContext())\n+    }\n+\n+    @Test\n+    fun highlightDeveloperExperience() {\n+        runBlocking {\n+            Amplify.DataStore.save(blogOwner)\n+            val results = Amplify.DataStore.query(BlogOwner::class.java)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQwOTgyOQ=="}, "originalCommit": {"oid": "768420d71538c206b63e9d331a22c5c1fd78714a"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEwMTc0MQ==", "bodyText": "Yeah I don't love ktx for some reason.\nYou could just use the original package name since these are extensions to those models or perhaps coroutines.\nAll just bike shedding though.", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r545101741", "createdAt": "2020-12-17T13:47:07Z", "author": {"login": "aajtodd"}, "path": "kotlin-extensions/src/main/java/com/amplifyframework/ktx/DataStoreCategoryExt.kt", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+@file:Suppress(\"unused\")\n+\n+package com.amplifyframework.ktx // TODO: or .datastore?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "768420d71538c206b63e9d331a22c5c1fd78714a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEwNTAyNw==", "bodyText": "You can also do something like:\nsuspend inline fun <reified T: Model> DataStoreCategory.query(): Iterator<T> {\n    return suspendCoroutine { continuation ->\n        query(\n            T::class.java,\n            { continuation.resume(it) },\n            { continuation.resumeWithException(it) }\n        )\n    }\n}\nWhich allows callers to do:\nval results: Iterator<MyItem> = store.query()\n// OR\nval results = store.query<MyItem>()\n\nSee: https://kotlinlang.org/docs/reference/inline-functions.html#reified-type-parameters", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r545105027", "createdAt": "2020-12-17T13:51:54Z", "author": {"login": "aajtodd"}, "path": "kotlin-extensions/src/main/java/com/amplifyframework/ktx/DataStoreCategoryExt.kt", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+@file:Suppress(\"unused\")\n+\n+package com.amplifyframework.ktx // TODO: or .datastore?\n+\n+import com.amplifyframework.core.async.Cancelable\n+import com.amplifyframework.core.model.Model\n+import com.amplifyframework.core.model.query.QueryOptions\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate\n+import com.amplifyframework.datastore.DataStoreCategory\n+import com.amplifyframework.datastore.DataStoreException\n+import com.amplifyframework.datastore.DataStoreItemChange\n+import kotlinx.coroutines.ExperimentalCoroutinesApi\n+\n+import kotlinx.coroutines.channels.awaitClose\n+import kotlinx.coroutines.channels.sendBlocking\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.callbackFlow\n+import kotlin.coroutines.resume\n+import kotlin.coroutines.resumeWithException\n+import kotlin.coroutines.suspendCoroutine\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.save(item: T) {\n+    return suspendCoroutine { continuation ->\n+        save(item,\n+            { continuation.resume(Unit) },\n+            { continuation.resumeWithException(it) }\n+        )\n+    }\n+}\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.save(item: T, predicate: QueryPredicate) {\n+    return suspendCoroutine { continuation ->\n+        save(item, predicate,\n+            { continuation.resume(Unit) },\n+            { continuation.resumeWithException(it) }\n+        )\n+    }\n+}\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.delete(item: T) {\n+    return suspendCoroutine { continuation ->\n+        delete(item,\n+            { continuation.resume(Unit) },\n+            { continuation.resumeWithException(it) }\n+        )\n+    }\n+}\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.delete(item: T, predicate: QueryPredicate) {\n+    return suspendCoroutine { continuation ->\n+        delete(item, predicate,\n+            { continuation.resume(Unit) },\n+            { continuation.resumeWithException(it) }\n+        )\n+    }\n+}\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.query(clazz: Class<T>): Iterator<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "768420d71538c206b63e9d331a22c5c1fd78714a"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEwNzAyMg==", "bodyText": "This is fine. If you're using coroutines you're already depending on the kotlinx-coroutines-core", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r545107022", "createdAt": "2020-12-17T13:54:39Z", "author": {"login": "aajtodd"}, "path": "kotlin-extensions/src/main/java/com/amplifyframework/ktx/DataStoreCategoryExt.kt", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+@file:Suppress(\"unused\")\n+\n+package com.amplifyframework.ktx // TODO: or .datastore?\n+\n+import com.amplifyframework.core.async.Cancelable\n+import com.amplifyframework.core.model.Model\n+import com.amplifyframework.core.model.query.QueryOptions\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate\n+import com.amplifyframework.datastore.DataStoreCategory\n+import com.amplifyframework.datastore.DataStoreException\n+import com.amplifyframework.datastore.DataStoreItemChange\n+import kotlinx.coroutines.ExperimentalCoroutinesApi\n+\n+import kotlinx.coroutines.channels.awaitClose\n+import kotlinx.coroutines.channels.sendBlocking\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.callbackFlow\n+import kotlin.coroutines.resume\n+import kotlin.coroutines.resumeWithException\n+import kotlin.coroutines.suspendCoroutine\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.save(item: T) {\n+    return suspendCoroutine { continuation ->\n+        save(item,\n+            { continuation.resume(Unit) },\n+            { continuation.resumeWithException(it) }\n+        )\n+    }\n+}\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.save(item: T, predicate: QueryPredicate) {\n+    return suspendCoroutine { continuation ->\n+        save(item, predicate,\n+            { continuation.resume(Unit) },\n+            { continuation.resumeWithException(it) }\n+        )\n+    }\n+}\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.delete(item: T) {\n+    return suspendCoroutine { continuation ->\n+        delete(item,\n+            { continuation.resume(Unit) },\n+            { continuation.resumeWithException(it) }\n+        )\n+    }\n+}\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.delete(item: T, predicate: QueryPredicate) {\n+    return suspendCoroutine { continuation ->\n+        delete(item, predicate,\n+            { continuation.resume(Unit) },\n+            { continuation.resumeWithException(it) }\n+        )\n+    }\n+}\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.query(clazz: Class<T>): Iterator<T> {\n+    return suspendCoroutine { continuation ->\n+        query(\n+            clazz,\n+            { continuation.resume(it) },\n+            { continuation.resumeWithException(it) }\n+        )\n+    }\n+}\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.query(clazz: Class<T>, predicate: QueryPredicate): Iterator<T> {\n+    return suspendCoroutine { continuation ->\n+        query(\n+            clazz,\n+            predicate,\n+            { continuation.resume(it) },\n+            { continuation.resumeWithException(it) }\n+        )\n+    }\n+}\n+\n+@Throws(DataStoreException::class)\n+suspend fun <T: Model> DataStoreCategory.query(clazz: Class<T>, options: QueryOptions): Iterator<T> {\n+    return suspendCoroutine { continuation ->\n+        query(\n+            clazz,\n+            options,\n+            { continuation.resume(it) },\n+            { continuation.resumeWithException(it) }\n+        )\n+    }\n+}\n+\n+// TOOD: Flow is from kotlinx, which requires another dependency,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "768420d71538c206b63e9d331a22c5c1fd78714a"}, "originalPosition": 112}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "e8196e99439d4795016c31f36700e86055940418", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/e8196e99439d4795016c31f36700e86055940418", "committedDate": "2021-01-13T16:55:43Z", "message": "feature(core-ktx): A Kotlin-first API for Amplify\n\nThis commit introduces a new, optional core-ktx module. The module\nincludes improved support for using Amplify from Kotlin.\n\n```gradle\ndependencies {\n    implementation \"com.amplifyframework:core-ktx:$version\"\n}\n```\n\ncore-ktx is largely comprised of extension functions, which provide new\nmeans of interacting with the various Amplify categories (API, Auth,\nDataStore, Predictions, Storage.) These functions include several\nimprovements to the Kotlin developer experience, mainly by adding\nsupport for Coroutines.\n\nAmplify has several types of APIs. Some are synchronous calls, which\nimmediately return a value. However, most Amplify behaviors are\nasynchronous calls. Among the async calls, there are a few broad\ncategories:\n\n 1. Functions that return a single value, and cannot be canceled;\n 2. Functions that return a single value, and can be canceled;\n 3. Functions that emit a stream of values\n 4. Functions that emit multiple types of values\n\nMost Amplify behaviors are of type (1). Auth and Predictions are\nentirely comprised of type (1). The Kotlin flavors of these behaviors\nare expressed as suspending functions, e.g.:\n\n```kotlin\nsuspend fun AuthCategory.signOut() {\n   ...\n}\n```\n\nThe simplest developer experience to invoke this method will be:\n```kotlin\nrunBlocking {\n    Amplify.Auth.signOut()\n}\n```\n\nSome single-valued functions, such as the `mutate(...)` behavior in the\nAPI category, may be canceled before rendering a result. The Kotlin\nversion of `mutate(...)` is expressed this way:\n\n```kotlin\nsuspend fun <R> ApiCategory.mutate(\n        graphQlRequest: GraphQLRequest<R>): GraphQLResponse<R> {\n    ...\n}\n```\n\nThe user may cancel the behavior via Kotlin's `Job` construct:\n```kotlin\nval job = launch(Dispatchers.IO) {\n    Amplify.API.mutate(request)\n}\n...\njob.cancel()\n```\n\nThere are also some Amplify beahviors which a stream of values.\nDataStore's `observe()` is a canonical example. It's extension function\nis expressed as:\n\n```kotlin\nfun DataStoreCategory.observe(): Flow<DataStoreItemChange<out Model>> {\n    ...\n}\n```\n\nA developer may interact with the flow in this way:\n```kotlin\nAmplify.DataStore.observe()\n    .collect { print(it) }\n```\n\nAPI's `subscribe()` also emits a stream of values. However, it is also\nimportant to know about the _lifecycle_ of a GraphQL subscription. So,\nthis method returns an operation structure, which envelopes two flows:\n```kotlin\nfun <T> ApiCategory.subscribe(\n        graphQlRequest: GraphQLRequest<T>): GraphQLSubscriptionOperation<T> {\n    ...\n}\n```\n\nA developer can inspect the connection state, as well as the stream of\nsubscription data:\n```kotlin\nval subscription = Amplify.API.subscribe(request)\nsubscription.events.collect {\n    print(\"Got a subscription event: $it\")\n}\nsubscription.connectionState.collect {\n    print(\"Connection state changed: $it\")\n}\n```\n\nThe Storage category's various upload and download functions also\nexhibit a similar pattern. We want obtain the result, but we may also\nlike to observe a stream of progress updates. The signature looks like:\n```kotlin\nfun StorageCategory.downloadFile(\n        key: String,\n        local: File,\n): InProgressStorageOperation<StorageDownloadFileResult> {\n```\n\nA developer can observe the download progress via a Flow:\n```kotlin\nval download = Amplify.Storage.downloadFile(\"s3Key\", local)\ndownload.progress.collect { print(\"Progress: $it\") }\n```\nOr, the developer can access the result of the download via a suspend\nfunction exposed on the download operation:\n```kotlin\nval result = runBlocking { download.result }\n```\n\nRefer: https://github.com/aws-amplify/amplify-android/issues/605"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "7356734439514c303ee43e9d09673c2de598b984", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/7356734439514c303ee43e9d09673c2de598b984", "committedDate": "2021-02-12T23:28:59Z", "message": "feature(core-ktx): A Kotlin-first API for Amplify\n\nThis commit introduces a new, optional core-ktx module. The module\nincludes improved support for using Amplify from Kotlin.\n\nTo use the Kotlin facade, include this dependency:\n```gradle\ndependencies {\n    implementation \"com.amplifyframework:core-ktx:$version\"\n}\n```\nAnd import the Kotlin facade instead of the one in `core`:\n```kotlin\nimport com.amplifyframework.kotlin.Amplify\n```\n\ncore-ktx introduces an alternate `Amplify` facade, which provides new\nmeans of interacting with the various Amplify categories (API, Auth,\nDataStore, Predictions, Storage.) The new facade include several\nimprovements to the Kotlin developer experience, mainly by adding\nsupport for Coroutines.\n\nAmplify has several types of APIs. Some are synchronous calls, which\nimmediately return a value. However, most Amplify behaviors are\nasynchronous calls. Among the async calls, there are a few broad\ncategories:\n\n 1. Functions that return a single value, and cannot be canceled;\n 2. Functions that return a single value, and can be canceled;\n 3. Functions that emit a stream of values\n 4. Functions that emit multiple types of values\n\nMost Amplify behaviors are of type (1). Auth and Predictions are\nentirely comprised of type (1). The Kotlin flavors of these behaviors\nare expressed as suspending functions, e.g.:\n\n```kotlin\nsuspend fun signOut() {\n   ...\n}\n```\n\nThe simplest developer experience to invoke this method will be:\n```kotlin\nrunBlocking {\n    Amplify.Auth.signOut()\n}\n```\n\nSome single-valued functions, such as the `mutate(...)` behavior in the\nAPI category, may be canceled before rendering a result. The Kotlin\nversion of `mutate(...)` is expressed this way:\n\n```kotlin\nsuspend fun <R> ApiCategory.mutate(\n        request: GraphQLRequest<R>, apiName: String? = null)\n        : GraphQLResponse<R> {\n    ...\n}\n```\n\nThe user may cancel the behavior via Kotlin's `Job` construct:\n```kotlin\nval job = launch(Dispatchers.IO) {\n    Amplify.API.mutate(request)\n}\n...\njob.cancel()\n```\n\nThere are also some Amplify behaviors which emit a stream of values.\nDataStore's `observe()` is a canonical example. It's extension function\nis expressed as:\n\n```kotlin\nfun observe(): Flow<DataStoreItemChange<out Model>> {\n    ...\n}\n```\n\nA developer may interact with the flow in this way:\n```kotlin\nAmplify.DataStore.observe()\n    .collect { print(it) }\n```\n\nAPI's `subscribe()` also emits a stream of values. However, it is also\nimportant to know about the _lifecycle_ of a GraphQL subscription. So,\nthis method returns an operation structure, which envelopes two flows:\n```kotlin\nfun <T> ApiCategory.subscribe(\n        request: GraphQLRequest<T>, apiName: String? = null)\n        : GraphQLSubscriptionOperation<T> {\n    ...\n}\n```\n\nA developer can inspect the connection state, as well as the stream of\nsubscription data:\n```kotlin\nval subscription = Amplify.API.subscribe(request)\nsubscription.subscriptionData.collect {\n    print(\"Got a subscription data: $it\")\n}\nsubscription.connectionState.collect {\n    print(\"Connection state changed: $it\")\n}\n```\n\nThe Storage category's various upload and download functions also\nexhibit a similar pattern. We want obtain the result, but we may also\nlike to observe a stream of progress updates. The signature looks like:\n```kotlin\nfun StorageCategory.downloadFile(\n        key: String,\n        local: File,\n): InProgressStorageOperation<StorageDownloadFileResult> {\n```\n\nA developer can access the result of the download via a suspend\nfunction exposed on the download operation:\n```kotlin\nval result = runBlocking { download.result() }\n```\n\nRefer: https://github.com/aws-amplify/amplify-android/issues/605"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkwNjYzMTg0", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#pullrequestreview-590663184", "createdAt": "2021-02-15T17:31:29Z", "commit": {"oid": "7356734439514c303ee43e9d09673c2de598b984"}, "state": "COMMENTED", "comments": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNVQxNzozMToyOVrOIlpJ5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNVQyMzowMjo0M1rOIlwdNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM0MjUwMw==", "bodyText": "Perhaps this should be com.amplifyframework.core.kotlin instead?  Without the core, it sort of limits us to only being able to have a Kotlin facade for core.  Perhaps we may want to add Kotlin facades for other modules in the future, which, following my suggested pattern, could be com.amplifyframework.api.kotlin.", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576342503", "createdAt": "2021-02-15T17:31:29Z", "author": {"login": "richardmcclellan"}, "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/Amplify.kt", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7356734439514c303ee43e9d09673c2de598b984"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM0MzM0OQ==", "bodyText": "Given that there is a core-ktx dependency, perhaps we should disambiguate our module by calling it core-kotlin?  That would also match the package name a little better.", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576343349", "createdAt": "2021-02-15T17:33:29Z", "author": {"login": "richardmcclellan"}, "path": "build.gradle", "diffHunk": "@@ -63,6 +71,7 @@ ext {\n             annotation: 'androidx.annotation:annotation:1.1.0',\n             appcompat: 'androidx.appcompat:appcompat:1.2.0',\n             core: 'androidx.core:core:1.3.2',\n+            core_ktx: 'androidx.core:core-ktx:1.3.2',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7356734439514c303ee43e9d09673c2de598b984"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM1NTQ5NQ==", "bodyText": "The default value for AuthSignInOptions here is null, while the default for AuthSignUpOptions, in the signUp method above, is AuthSignUpOptions.builder().build().\nIs that intentional?  Should they both be the same instead?", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576355495", "createdAt": "2021-02-15T18:00:10Z", "author": {"login": "richardmcclellan"}, "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/Auth.kt", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin\n+\n+import android.app.Activity\n+import android.content.Intent\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails\n+import com.amplifyframework.auth.AuthDevice\n+import com.amplifyframework.auth.AuthException\n+import com.amplifyframework.auth.AuthProvider\n+import com.amplifyframework.auth.AuthSession\n+import com.amplifyframework.auth.AuthUser\n+import com.amplifyframework.auth.AuthUserAttribute\n+import com.amplifyframework.auth.AuthUserAttributeKey\n+import com.amplifyframework.auth.options.AuthSignInOptions\n+import com.amplifyframework.auth.options.AuthSignOutOptions\n+import com.amplifyframework.auth.options.AuthSignUpOptions\n+import com.amplifyframework.auth.options.AuthWebUISignInOptions\n+import com.amplifyframework.auth.result.AuthResetPasswordResult\n+import com.amplifyframework.auth.result.AuthSignInResult\n+import com.amplifyframework.auth.result.AuthSignUpResult\n+import com.amplifyframework.auth.result.AuthUpdateAttributeResult\n+\n+/**\n+ * Defines Authentication behaviors available from Kotlin.\n+ */\n+interface Auth {\n+\n+    /**\n+     * Creates a new user account with the specified username and password.\n+     * Can also pass in user attributes to associate with the user through\n+     * the options object.\n+     * @param username A login identifier e.g. `tony44`; or an email/phone number,\n+     *                 depending on configuration\n+     * @param password The user's password\n+     * @param options Advanced options such as additional attributes of the user\n+     *                or validation data.\n+     *                If not provided, default options will be used.\n+     * @return A sign-up result; check the nextStep field to determine which\n+     *         action to take next. The next step is typically to confirm a\n+     *         code sent over email/SMS.\n+     */\n+    @Throws(AuthException::class)\n+    suspend fun signUp(\n+        username: String,\n+        password: String,\n+        options: AuthSignUpOptions = AuthSignUpOptions.builder().build()\n+    ):\n+        AuthSignUpResult\n+\n+    /**\n+     * If you have attribute confirmation enabled, this will allow the user\n+     * to enter the confirmation code they received to activate their account.\n+     * @param username A login identifier e.g. `tony44`; or an email/phone number,\n+     *                 depending on configuration\n+     * @param confirmationCode The confirmation code the user received\n+     * @return A sign-up result; if the code has been confirmed successfully, the result\n+     *         will show true for isSignUpComplete().\n+     */\n+    @Throws(AuthException::class)\n+    suspend fun confirmSignUp(username: String, confirmationCode: String): AuthSignUpResult\n+\n+    /**\n+     * If the user's code expires or they just missed it, this method can\n+     * be used to send them a new one.\n+     * @param username A login identifier e.g. `tony44`; or an email/phone number,\n+     *                 depending on configuration\n+     * @return A sign-up result; if the code is requested, typically the result will\n+     *         include a next step requiring confirmation of the re-sent code.\n+     */\n+    @Throws(AuthException::class)\n+    suspend fun resendSignUpCode(username: String): AuthSignUpResult\n+\n+    /**\n+     * Basic authentication to the app with a username and password or, if custom auth is setup,\n+     * you can send null for those and the necessary authentication details in the options object.\n+     * @param username A login identifier e.g. `tony44`; or an email/phone number, depending on configuration.\n+     *                 May be omitted or null when using custom auth.\n+     * @param password User's password for normal sign-up. May be omitted or null if custom auth or\n+     *                 password-less configurations are in use\n+     * @param options Advanced options such as a map of auth information for custom auth,\n+     *                If not provided, default options will be used\n+     * @return A sign-in result. The nextStep field may indicate additional actions to be taken\n+     *         to confirm the sign-in, or it may show isSignInComplete as true, in which case\n+     *         an authenticated session is available\n+     */\n+    @Throws(AuthException::class)\n+    suspend fun signIn(\n+        username: String? = null,\n+        password: String? = null,\n+        options: AuthSignInOptions? = null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7356734439514c303ee43e9d09673c2de598b984"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM1NjMyMA==", "bodyText": "I don't think this method actually throws an AuthException, does it?", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576356320", "createdAt": "2021-02-15T18:02:10Z", "author": {"login": "richardmcclellan"}, "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/Auth.kt", "diffHunk": "@@ -0,0 +1,269 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin\n+\n+import android.app.Activity\n+import android.content.Intent\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails\n+import com.amplifyframework.auth.AuthDevice\n+import com.amplifyframework.auth.AuthException\n+import com.amplifyframework.auth.AuthProvider\n+import com.amplifyframework.auth.AuthSession\n+import com.amplifyframework.auth.AuthUser\n+import com.amplifyframework.auth.AuthUserAttribute\n+import com.amplifyframework.auth.AuthUserAttributeKey\n+import com.amplifyframework.auth.options.AuthSignInOptions\n+import com.amplifyframework.auth.options.AuthSignOutOptions\n+import com.amplifyframework.auth.options.AuthSignUpOptions\n+import com.amplifyframework.auth.options.AuthWebUISignInOptions\n+import com.amplifyframework.auth.result.AuthResetPasswordResult\n+import com.amplifyframework.auth.result.AuthSignInResult\n+import com.amplifyframework.auth.result.AuthSignUpResult\n+import com.amplifyframework.auth.result.AuthUpdateAttributeResult\n+\n+/**\n+ * Defines Authentication behaviors available from Kotlin.\n+ */\n+interface Auth {\n+\n+    /**\n+     * Creates a new user account with the specified username and password.\n+     * Can also pass in user attributes to associate with the user through\n+     * the options object.\n+     * @param username A login identifier e.g. `tony44`; or an email/phone number,\n+     *                 depending on configuration\n+     * @param password The user's password\n+     * @param options Advanced options such as additional attributes of the user\n+     *                or validation data.\n+     *                If not provided, default options will be used.\n+     * @return A sign-up result; check the nextStep field to determine which\n+     *         action to take next. The next step is typically to confirm a\n+     *         code sent over email/SMS.\n+     */\n+    @Throws(AuthException::class)\n+    suspend fun signUp(\n+        username: String,\n+        password: String,\n+        options: AuthSignUpOptions = AuthSignUpOptions.builder().build()\n+    ):\n+        AuthSignUpResult\n+\n+    /**\n+     * If you have attribute confirmation enabled, this will allow the user\n+     * to enter the confirmation code they received to activate their account.\n+     * @param username A login identifier e.g. `tony44`; or an email/phone number,\n+     *                 depending on configuration\n+     * @param confirmationCode The confirmation code the user received\n+     * @return A sign-up result; if the code has been confirmed successfully, the result\n+     *         will show true for isSignUpComplete().\n+     */\n+    @Throws(AuthException::class)\n+    suspend fun confirmSignUp(username: String, confirmationCode: String): AuthSignUpResult\n+\n+    /**\n+     * If the user's code expires or they just missed it, this method can\n+     * be used to send them a new one.\n+     * @param username A login identifier e.g. `tony44`; or an email/phone number,\n+     *                 depending on configuration\n+     * @return A sign-up result; if the code is requested, typically the result will\n+     *         include a next step requiring confirmation of the re-sent code.\n+     */\n+    @Throws(AuthException::class)\n+    suspend fun resendSignUpCode(username: String): AuthSignUpResult\n+\n+    /**\n+     * Basic authentication to the app with a username and password or, if custom auth is setup,\n+     * you can send null for those and the necessary authentication details in the options object.\n+     * @param username A login identifier e.g. `tony44`; or an email/phone number, depending on configuration.\n+     *                 May be omitted or null when using custom auth.\n+     * @param password User's password for normal sign-up. May be omitted or null if custom auth or\n+     *                 password-less configurations are in use\n+     * @param options Advanced options such as a map of auth information for custom auth,\n+     *                If not provided, default options will be used\n+     * @return A sign-in result. The nextStep field may indicate additional actions to be taken\n+     *         to confirm the sign-in, or it may show isSignInComplete as true, in which case\n+     *         an authenticated session is available\n+     */\n+    @Throws(AuthException::class)\n+    suspend fun signIn(\n+        username: String? = null,\n+        password: String? = null,\n+        options: AuthSignInOptions? = null\n+    ):\n+        AuthSignInResult\n+\n+    /**\n+     * Submit the confirmation code received as part of multi-factor Authentication during sign in.\n+     * @param confirmationCode The code received as part of the multi-factor authentication process\n+     * @return A sign-in result; check the nextStep field for cues on additional sign-in challenges\n+     */\n+    @Throws(AuthException::class)\n+    suspend fun confirmSignIn(confirmationCode: String): AuthSignInResult\n+\n+    /**\n+     * Launch the specified auth provider's web UI sign in experience. You should also put the\n+     * {@link #handleWebUISignInResponse(Intent)} method in your activity's onNewIntent method to\n+     * capture the response which comes back from the UI flow.\n+     * @param provider The auth provider you want to launch the web ui for (e.g. Facebook, Google, etc.)\n+     * @param callingActivity The activity in your app you are calling this from\n+     * @param options Advanced options for signing in with an auth provider's hosted web ui.\n+     *                If not provided, default options will be used.\n+     * @return A sign-in result; check the nextStep for additional sign-in confirmation requirements\n+     */\n+    @Throws(AuthException::class)\n+    suspend fun signInWithSocialWebUI(\n+        provider: AuthProvider,\n+        callingActivity: Activity,\n+        options: AuthWebUISignInOptions = AuthWebUISignInOptions.builder().build()\n+    ):\n+        AuthSignInResult\n+\n+    /**\n+     * Launch a hosted web sign in UI flow. You should also put the {@link #handleWebUISignInResponse(Intent)}\n+     * method in your activity's onNewIntent method to capture the response which comes back from the UI flow.\n+     * @param callingActivity The activity in your app you are calling this from\n+     * @param options Advanced options for signing in with a hosted web ui.\n+     *                If not provided, default options will be used.\n+     * @return A sign-in result; check the nextStep for additional sign-in confirmation requirements\n+     */\n+    @Throws(AuthException::class)\n+    suspend fun signInWithWebUI(\n+        callingActivity: Activity,\n+        options: AuthWebUISignInOptions = AuthWebUISignInOptions.builder().build()\n+    ):\n+        AuthSignInResult\n+\n+    /**\n+     * Handles the response which comes back from {@link #signInWithWebUI(Activity, Consumer, Consumer)}.\n+     * @param intent The app activity's intent\n+     */\n+    @Throws(AuthException::class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7356734439514c303ee43e9d09673c2de598b984"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM1OTkzNA==", "bodyText": "This should return a DataStoreItemChange<T>, right?", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576359934", "createdAt": "2021-02-15T18:11:13Z", "author": {"login": "richardmcclellan"}, "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/DataStore.kt", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin\n+\n+import com.amplifyframework.core.model.Model\n+import com.amplifyframework.core.model.query.QueryOptions\n+import com.amplifyframework.core.model.query.Where\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate\n+import com.amplifyframework.core.model.query.predicate.QueryPredicates\n+import com.amplifyframework.datastore.DataStoreException\n+import com.amplifyframework.datastore.DataStoreItemChange\n+import kotlinx.coroutines.ExperimentalCoroutinesApi\n+import kotlinx.coroutines.flow.Flow\n+\n+/**\n+ * A local object store with cloud synchronization.\n+ */\n+interface DataStore {\n+    /**\n+     * Save an item into the DataStore.\n+     * @param item Item to save\n+     * @param predicate Conditions that must be true before save can succeed.\n+     *                  If not specified, an \"allow all\" predicate is used.\n+     */\n+    @Throws(DataStoreException::class)\n+    suspend fun <T : Model> save(item: T, predicate: QueryPredicate = QueryPredicates.all())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7356734439514c303ee43e9d09673c2de598b984"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM2MDAxOA==", "bodyText": "This should return a DataStoreItemChange<T> as well, right?", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576360018", "createdAt": "2021-02-15T18:11:26Z", "author": {"login": "richardmcclellan"}, "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/DataStore.kt", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin\n+\n+import com.amplifyframework.core.model.Model\n+import com.amplifyframework.core.model.query.QueryOptions\n+import com.amplifyframework.core.model.query.Where\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate\n+import com.amplifyframework.core.model.query.predicate.QueryPredicates\n+import com.amplifyframework.datastore.DataStoreException\n+import com.amplifyframework.datastore.DataStoreItemChange\n+import kotlinx.coroutines.ExperimentalCoroutinesApi\n+import kotlinx.coroutines.flow.Flow\n+\n+/**\n+ * A local object store with cloud synchronization.\n+ */\n+interface DataStore {\n+    /**\n+     * Save an item into the DataStore.\n+     * @param item Item to save\n+     * @param predicate Conditions that must be true before save can succeed.\n+     *                  If not specified, an \"allow all\" predicate is used.\n+     */\n+    @Throws(DataStoreException::class)\n+    suspend fun <T : Model> save(item: T, predicate: QueryPredicate = QueryPredicates.all())\n+\n+    /**\n+     * Delete an item from the DataStore.\n+     * @param item Item to delete\n+     * @param predicate Conditions that must be true before delete can succeed.\n+     *                  If not specified, an \"allow all\" predicate is used.\n+     */\n+    @Throws(DataStoreException::class)\n+    suspend fun <T : Model> delete(item: T, predicate: QueryPredicate = QueryPredicates.all())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7356734439514c303ee43e9d09673c2de598b984"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjM2MzI1MQ==", "bodyText": "I think you are missing this one:\n/**\n * Deletes every item of given type from the DataStore that meets the provided\n * conditions. If there is no match, then nothing is deleted and operation\n * succeeds.\n * @param itemClass Item type to delete from the DataStore\n * @param predicate Predicate condition to filter items to delete\n */\n@Throws(DataStoreException::class)\nsuspend fun <T : Model> delete(itemClass: Class<T>, predicate: QueryPredicate = QueryPredicates.all()): DataStoreItemChange<T>", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576363251", "createdAt": "2021-02-15T18:19:31Z", "author": {"login": "richardmcclellan"}, "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/DataStore.kt", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin\n+\n+import com.amplifyframework.core.model.Model\n+import com.amplifyframework.core.model.query.QueryOptions\n+import com.amplifyframework.core.model.query.Where\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate\n+import com.amplifyframework.core.model.query.predicate.QueryPredicates\n+import com.amplifyframework.datastore.DataStoreException\n+import com.amplifyframework.datastore.DataStoreItemChange\n+import kotlinx.coroutines.ExperimentalCoroutinesApi\n+import kotlinx.coroutines.flow.Flow\n+\n+/**\n+ * A local object store with cloud synchronization.\n+ */\n+interface DataStore {\n+    /**\n+     * Save an item into the DataStore.\n+     * @param item Item to save\n+     * @param predicate Conditions that must be true before save can succeed.\n+     *                  If not specified, an \"allow all\" predicate is used.\n+     */\n+    @Throws(DataStoreException::class)\n+    suspend fun <T : Model> save(item: T, predicate: QueryPredicate = QueryPredicates.all())\n+\n+    /**\n+     * Delete an item from the DataStore.\n+     * @param item Item to delete\n+     * @param predicate Conditions that must be true before delete can succeed.\n+     *                  If not specified, an \"allow all\" predicate is used.\n+     */\n+    @Throws(DataStoreException::class)\n+    suspend fun <T : Model> delete(item: T, predicate: QueryPredicate = QueryPredicates.all())\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7356734439514c303ee43e9d09673c2de598b984"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQxNDY3OA==", "bodyText": "Is it okay that we are not exposing the onObservationStarted callback to the customer?\nFor a customer building a real time UI, they likely want to do something like:\nAmplify.DataStore.observe(\n    { onObservationStarted -> {\n          Amplify.DataStore.query(Todo.class, \n              { /* display results on UI */ }\n              { /* handle errors */ } \n         )\n    },\n    { onDataStoreItemChange -> /* display item on UI */ },\n    { /* handle errors */ }\n    { / * completion */ }\n}\n\nWith these extensions, it doesn't look like there is a way to ensure query is not called until after observe is started.\nPerhaps as a solution, this could be a suspend function that returns as soon as observations have started.  Then, after observations are started, it returns a Flow<DataStoreItemChange>.   What do you think?", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576414678", "createdAt": "2021-02-15T20:45:18Z", "author": {"login": "richardmcclellan"}, "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/facades/KotlinDataStoreFacade.kt", "diffHunk": "@@ -0,0 +1,161 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin.facades\n+\n+import com.amplifyframework.core.Amplify\n+import com.amplifyframework.core.async.Cancelable\n+import com.amplifyframework.core.model.Model\n+import com.amplifyframework.core.model.query.QueryOptions\n+import com.amplifyframework.core.model.query.predicate.QueryPredicate\n+import com.amplifyframework.datastore.DataStoreCategoryBehavior as Delegate\n+import com.amplifyframework.datastore.DataStoreException\n+import com.amplifyframework.datastore.DataStoreItemChange\n+import com.amplifyframework.kotlin.DataStore\n+import java.util.concurrent.atomic.AtomicReference\n+import kotlin.coroutines.resume\n+import kotlin.coroutines.resumeWithException\n+import kotlin.coroutines.suspendCoroutine\n+import kotlinx.coroutines.ExperimentalCoroutinesApi\n+import kotlinx.coroutines.channels.awaitClose\n+import kotlinx.coroutines.channels.sendBlocking\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.callbackFlow\n+\n+class KotlinDataStoreFacade(private val delegate: Delegate = Amplify.DataStore) : DataStore {\n+    @Throws(DataStoreException::class)\n+    override suspend fun <T : Model> save(item: T, predicate: QueryPredicate) {\n+        return suspendCoroutine { continuation ->\n+            delegate.save(\n+                item,\n+                predicate,\n+                { continuation.resume(Unit) },\n+                { continuation.resumeWithException(it) }\n+            )\n+        }\n+    }\n+\n+    @Throws(DataStoreException::class)\n+    override suspend fun <T : Model> delete(item: T, predicate: QueryPredicate) {\n+        return suspendCoroutine { continuation ->\n+            delegate.delete(\n+                item,\n+                predicate,\n+                { continuation.resume(Unit) },\n+                { continuation.resumeWithException(it) }\n+            )\n+        }\n+    }\n+\n+    @ExperimentalCoroutinesApi\n+    @Throws(DataStoreException::class)\n+    override fun <T : Model> query(itemClass: Class<T>, options: QueryOptions): Flow<T> {\n+        return callbackFlow {\n+            delegate.query(\n+                itemClass,\n+                options,\n+                {\n+                    while (it.hasNext()) {\n+                        sendBlocking(it.next())\n+                    }\n+                    close()\n+                },\n+                { close(it) }\n+            )\n+            awaitClose {}\n+        }\n+    }\n+\n+    @ExperimentalCoroutinesApi\n+    @Throws(DataStoreException::class)\n+    override fun observe(): Flow<DataStoreItemChange<out Model>> {\n+        return callbackFlow {\n+            val cancelable = AtomicReference<Cancelable?>()\n+            delegate.observe(\n+                { cancelable.set(it) },", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7356734439514c303ee43e9d09673c2de598b984"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQxNjg1OQ==", "bodyText": "Instead of returning a Subscription data object which wraps two Flows, could you simplify and instead make this a suspend function that completes when the subscription is started, and then returns a Flow<GraphQLResponse<T>>?", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576416859", "createdAt": "2021-02-15T20:51:14Z", "author": {"login": "richardmcclellan"}, "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/GraphQL.kt", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin\n+\n+import com.amplifyframework.api.ApiException\n+import com.amplifyframework.api.graphql.GraphQLRequest\n+import com.amplifyframework.api.graphql.GraphQLResponse\n+import com.amplifyframework.core.async.Cancelable\n+import kotlinx.coroutines.ExperimentalCoroutinesApi\n+import kotlinx.coroutines.FlowPreview\n+import kotlinx.coroutines.flow.Flow\n+\n+interface GraphQL {\n+    /**\n+     * Query a GraphQL API.\n+     * @param request Query request\n+     * @param apiName The name of an API as configured in your configuration file;\n+     *                if not provided, the first GraphQL API in your config is used\n+     * @return Response\n+     */\n+    @Throws(ApiException::class)\n+    suspend fun <T> query(request: GraphQLRequest<T>, apiName: String? = null): GraphQLResponse<T>\n+\n+    /**\n+     * Run a mutation against a GraphQL API.\n+     * @param request Mutation request\n+     * @param apiName The name of an API as configured in your configuration file;\n+     *                if not provided, the first GraphQL API in your config is used\n+     * @return Response\n+     */\n+    @Throws(ApiException::class)\n+    suspend fun <T> mutate(request: GraphQLRequest<T>, apiName: String? = null): GraphQLResponse<T>\n+\n+    /**\n+     * Subscribe to realtime events observed on a GraphQL API.\n+     * @param request Subscription request\n+     * @param apiName The name of an API as configured in your configuration file;\n+     *                if not provided, the first GraphQL API in your config is used\n+     * @return A subscription object. Inspect its connectionState and subscriptionData.\n+     */\n+    @ExperimentalCoroutinesApi\n+    @FlowPreview\n+    fun <T> subscribe(request: GraphQLRequest<T>, apiName: String? = null): Subscription<T>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7356734439514c303ee43e9d09673c2de598b984"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQxNzkwMQ==", "bodyText": "This is just a synchronous function, right?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                suspend fun publish(channel: HubChannel, event: HubEvent<*>)\n          \n          \n            \n               fun publish(channel: HubChannel, event: HubEvent<*>)", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576417901", "createdAt": "2021-02-15T20:54:30Z", "author": {"login": "richardmcclellan"}, "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/Hub.kt", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin\n+\n+import com.amplifyframework.hub.HubChannel\n+import com.amplifyframework.hub.HubEvent\n+import com.amplifyframework.hub.HubEventFilter\n+import com.amplifyframework.hub.HubEventFilters\n+import kotlinx.coroutines.flow.Flow\n+\n+interface Hub {\n+    /**\n+     * Publish an event to a particular channel of the Hub.\n+     * @param channel Hub channel onto which to publish\n+     * @param event Event to publish\n+     */\n+    suspend fun publish(channel: HubChannel, event: HubEvent<*>)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7356734439514c303ee43e9d09673c2de598b984"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ0NTMzNg==", "bodyText": "So, it sounds like a Flow is cold, and a SharedFlow is hot, right?   Most of the other Kotlin extensions in this PR return (cold) Flow's. Why does this one use (hot) SharedFlows?\nWouldn't it be easier for customers to understand to use one or the other throughout?\nIt also seems strange that the upload is started as soon as uploadFile is called.  Instead, I think I would expect the upload to start whenever I subscribe to (or collect, I think?) to the results Flow.", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576445336", "createdAt": "2021-02-15T22:02:51Z", "author": {"login": "richardmcclellan"}, "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/facades/KotlinStorageFacade.kt", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin.facades\n+\n+import com.amplifyframework.core.Amplify\n+import com.amplifyframework.core.async.Cancelable\n+import com.amplifyframework.kotlin.Storage\n+import com.amplifyframework.kotlin.Storage.InProgressStorageOperation\n+import com.amplifyframework.storage.StorageCategoryBehavior as Delegate\n+import com.amplifyframework.storage.StorageException\n+import com.amplifyframework.storage.options.StorageDownloadFileOptions\n+import com.amplifyframework.storage.options.StorageGetUrlOptions\n+import com.amplifyframework.storage.options.StorageListOptions\n+import com.amplifyframework.storage.options.StorageRemoveOptions\n+import com.amplifyframework.storage.options.StorageUploadFileOptions\n+import com.amplifyframework.storage.options.StorageUploadInputStreamOptions\n+import com.amplifyframework.storage.result.StorageDownloadFileResult\n+import com.amplifyframework.storage.result.StorageGetUrlResult\n+import com.amplifyframework.storage.result.StorageListResult\n+import com.amplifyframework.storage.result.StorageRemoveResult\n+import com.amplifyframework.storage.result.StorageTransferProgress\n+import com.amplifyframework.storage.result.StorageUploadFileResult\n+import com.amplifyframework.storage.result.StorageUploadInputStreamResult\n+import java.io.File\n+import java.io.InputStream\n+import kotlin.coroutines.resume\n+import kotlin.coroutines.resumeWithException\n+import kotlin.coroutines.suspendCoroutine\n+import kotlinx.coroutines.ExperimentalCoroutinesApi\n+import kotlinx.coroutines.FlowPreview\n+import kotlinx.coroutines.flow.MutableSharedFlow\n+import kotlinx.coroutines.flow.asSharedFlow\n+\n+class KotlinStorageFacade(private val delegate: Delegate = Amplify.Storage) : Storage {\n+    @Throws(StorageException::class)\n+    override suspend fun getUrl(key: String, options: StorageGetUrlOptions):\n+        StorageGetUrlResult {\n+            return suspendCoroutine { continuation ->\n+                delegate.getUrl(\n+                    key,\n+                    options,\n+                    { continuation.resume(it) },\n+                    { continuation.resumeWithException(it) }\n+                )\n+            }\n+        }\n+\n+    @ExperimentalCoroutinesApi\n+    @FlowPreview\n+    override fun downloadFile(key: String, local: File, options: StorageDownloadFileOptions):\n+        InProgressStorageOperation<StorageDownloadFileResult> {\n+            val progress = MutableSharedFlow<StorageTransferProgress>(replay = 0)\n+            val results = MutableSharedFlow<StorageDownloadFileResult>(replay = 1)\n+            val errors = MutableSharedFlow<StorageException>(replay = 1)\n+            val operation = delegate.downloadFile(\n+                key,\n+                local,\n+                options,\n+                { progress.tryEmit(it) },\n+                { results.tryEmit(it) },\n+                { errors.tryEmit(it) }\n+            )\n+            return InProgressStorageOperation(\n+                results.asSharedFlow(),\n+                progress.asSharedFlow(),\n+                errors.asSharedFlow(),\n+                operation as Cancelable\n+            )\n+        }\n+\n+    @ExperimentalCoroutinesApi\n+    @FlowPreview\n+    override fun uploadFile(key: String, local: File, options: StorageUploadFileOptions):\n+        InProgressStorageOperation<StorageUploadFileResult> {\n+            val progress = MutableSharedFlow<StorageTransferProgress>(replay = 0)\n+            val results = MutableSharedFlow<StorageUploadFileResult>(replay = 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7356734439514c303ee43e9d09673c2de598b984"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ0NjE4OA==", "bodyText": "lol", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576446188", "createdAt": "2021-02-15T22:05:50Z", "author": {"login": "richardmcclellan"}, "path": "core-ktx/src/test/java/com/amplifyframework/kotlin/facades/KotlinAuthFacadeTest.kt", "diffHunk": "@@ -0,0 +1,828 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin.facades\n+\n+import android.app.Activity\n+import android.content.Intent\n+import com.amplifyframework.auth.AuthCategoryBehavior\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails.DeliveryMedium.SMS\n+import com.amplifyframework.auth.AuthDevice\n+import com.amplifyframework.auth.AuthException\n+import com.amplifyframework.auth.AuthProvider\n+import com.amplifyframework.auth.AuthSession\n+import com.amplifyframework.auth.AuthUser\n+import com.amplifyframework.auth.AuthUserAttribute\n+import com.amplifyframework.auth.AuthUserAttributeKey\n+import com.amplifyframework.auth.result.AuthResetPasswordResult\n+import com.amplifyframework.auth.result.AuthSignInResult\n+import com.amplifyframework.auth.result.AuthSignUpResult\n+import com.amplifyframework.auth.result.AuthUpdateAttributeResult\n+import com.amplifyframework.core.Action\n+import com.amplifyframework.core.Consumer\n+import io.mockk.every\n+import io.mockk.mockk\n+import io.mockk.verify\n+import kotlinx.coroutines.runBlocking\n+import org.junit.Assert.assertEquals\n+import org.junit.Test\n+\n+/**\n+ * Tests that the various facade APIs in the KotlinAuthFacade are wired\n+ * to the delegate AuthCategoryBehavior correctly.\n+ */\n+@Suppress(\"UNCHECKED_CAST\") // The more things change, the more they stay the same.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7356734439514c303ee43e9d09673c2de598b984"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ2MTg1NA==", "bodyText": "Instead of having two Flow's, (results and errors), could you just have results, and in the facade implementation emit success, as an item, or failure, as an error, directly to results?\nThen, make result public, and you don't need this method at all any more.", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576461854", "createdAt": "2021-02-15T23:01:33Z", "author": {"login": "richardmcclellan"}, "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/Storage.kt", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin\n+\n+import com.amplifyframework.core.async.Cancelable\n+import com.amplifyframework.storage.StorageException\n+import com.amplifyframework.storage.options.StorageDownloadFileOptions\n+import com.amplifyframework.storage.options.StorageGetUrlOptions\n+import com.amplifyframework.storage.options.StorageListOptions\n+import com.amplifyframework.storage.options.StorageRemoveOptions\n+import com.amplifyframework.storage.options.StorageUploadFileOptions\n+import com.amplifyframework.storage.options.StorageUploadInputStreamOptions\n+import com.amplifyframework.storage.result.StorageDownloadFileResult\n+import com.amplifyframework.storage.result.StorageGetUrlResult\n+import com.amplifyframework.storage.result.StorageListResult\n+import com.amplifyframework.storage.result.StorageRemoveResult\n+import com.amplifyframework.storage.result.StorageTransferProgress\n+import com.amplifyframework.storage.result.StorageUploadFileResult\n+import com.amplifyframework.storage.result.StorageUploadInputStreamResult\n+import java.io.File\n+import java.io.InputStream\n+import kotlinx.coroutines.ExperimentalCoroutinesApi\n+import kotlinx.coroutines.FlowPreview\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.first\n+import kotlinx.coroutines.flow.flattenMerge\n+import kotlinx.coroutines.flow.flowOf\n+import kotlinx.coroutines.flow.map\n+import kotlinx.coroutines.flow.onEach\n+\n+@Suppress(\"unused\")\n+interface Storage {\n+    @Throws(StorageException::class)\n+    suspend fun getUrl(\n+        key: String,\n+        options: StorageGetUrlOptions = StorageGetUrlOptions.defaultInstance()\n+    ):\n+        StorageGetUrlResult\n+\n+    @ExperimentalCoroutinesApi\n+    @FlowPreview\n+    fun downloadFile(\n+        key: String,\n+        local: File,\n+        options: StorageDownloadFileOptions = StorageDownloadFileOptions.defaultInstance()\n+    ):\n+        InProgressStorageOperation<StorageDownloadFileResult>\n+\n+    @ExperimentalCoroutinesApi\n+    @FlowPreview\n+    fun uploadFile(\n+        key: String,\n+        local: File,\n+        options: StorageUploadFileOptions = StorageUploadFileOptions.defaultInstance()\n+    ):\n+        InProgressStorageOperation<StorageUploadFileResult>\n+\n+    @FlowPreview\n+    @ExperimentalCoroutinesApi\n+    fun uploadInputStream(\n+        key: String,\n+        local: InputStream,\n+        options: StorageUploadInputStreamOptions = StorageUploadInputStreamOptions.defaultInstance()\n+    ): InProgressStorageOperation<StorageUploadInputStreamResult>\n+\n+    @Throws(StorageException::class)\n+    suspend fun remove(\n+        key: String,\n+        options: StorageRemoveOptions = StorageRemoveOptions.defaultInstance()\n+    ): StorageRemoveResult\n+\n+    @Throws(StorageException::class)\n+    suspend fun list(\n+        path: String,\n+        options: StorageListOptions = StorageListOptions.defaultInstance()\n+    ): StorageListResult\n+\n+    @FlowPreview\n+    data class InProgressStorageOperation<T>(\n+        private val results: Flow<T>,\n+        private val progress: Flow<StorageTransferProgress>,\n+        private val errors: Flow<StorageException>,\n+        private val delegate: Cancelable?\n+    ) : Cancelable {\n+\n+        override fun cancel() {\n+            delegate?.cancel()\n+        }\n+\n+        @Suppress(\"UNCHECKED_CAST\")\n+        suspend fun result(): T {\n+            // We want to take the first item from either one,\n+            // without waiting for the other.\n+            // Maybe there's a cleaner way to achieve this.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7356734439514c303ee43e9d09673c2de598b984"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NjQ2MjEzMg==", "bodyText": "Make this public, so customers can access it?  I don't see a way for customers to access progress, currently.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private val progress: Flow<StorageTransferProgress>,\n          \n          \n            \n                   val progress: Flow<StorageTransferProgress>,", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r576462132", "createdAt": "2021-02-15T23:02:43Z", "author": {"login": "richardmcclellan"}, "path": "core-ktx/src/main/java/com/amplifyframework/kotlin/Storage.kt", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2021 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.kotlin\n+\n+import com.amplifyframework.core.async.Cancelable\n+import com.amplifyframework.storage.StorageException\n+import com.amplifyframework.storage.options.StorageDownloadFileOptions\n+import com.amplifyframework.storage.options.StorageGetUrlOptions\n+import com.amplifyframework.storage.options.StorageListOptions\n+import com.amplifyframework.storage.options.StorageRemoveOptions\n+import com.amplifyframework.storage.options.StorageUploadFileOptions\n+import com.amplifyframework.storage.options.StorageUploadInputStreamOptions\n+import com.amplifyframework.storage.result.StorageDownloadFileResult\n+import com.amplifyframework.storage.result.StorageGetUrlResult\n+import com.amplifyframework.storage.result.StorageListResult\n+import com.amplifyframework.storage.result.StorageRemoveResult\n+import com.amplifyframework.storage.result.StorageTransferProgress\n+import com.amplifyframework.storage.result.StorageUploadFileResult\n+import com.amplifyframework.storage.result.StorageUploadInputStreamResult\n+import java.io.File\n+import java.io.InputStream\n+import kotlinx.coroutines.ExperimentalCoroutinesApi\n+import kotlinx.coroutines.FlowPreview\n+import kotlinx.coroutines.flow.Flow\n+import kotlinx.coroutines.flow.first\n+import kotlinx.coroutines.flow.flattenMerge\n+import kotlinx.coroutines.flow.flowOf\n+import kotlinx.coroutines.flow.map\n+import kotlinx.coroutines.flow.onEach\n+\n+@Suppress(\"unused\")\n+interface Storage {\n+    @Throws(StorageException::class)\n+    suspend fun getUrl(\n+        key: String,\n+        options: StorageGetUrlOptions = StorageGetUrlOptions.defaultInstance()\n+    ):\n+        StorageGetUrlResult\n+\n+    @ExperimentalCoroutinesApi\n+    @FlowPreview\n+    fun downloadFile(\n+        key: String,\n+        local: File,\n+        options: StorageDownloadFileOptions = StorageDownloadFileOptions.defaultInstance()\n+    ):\n+        InProgressStorageOperation<StorageDownloadFileResult>\n+\n+    @ExperimentalCoroutinesApi\n+    @FlowPreview\n+    fun uploadFile(\n+        key: String,\n+        local: File,\n+        options: StorageUploadFileOptions = StorageUploadFileOptions.defaultInstance()\n+    ):\n+        InProgressStorageOperation<StorageUploadFileResult>\n+\n+    @FlowPreview\n+    @ExperimentalCoroutinesApi\n+    fun uploadInputStream(\n+        key: String,\n+        local: InputStream,\n+        options: StorageUploadInputStreamOptions = StorageUploadInputStreamOptions.defaultInstance()\n+    ): InProgressStorageOperation<StorageUploadInputStreamResult>\n+\n+    @Throws(StorageException::class)\n+    suspend fun remove(\n+        key: String,\n+        options: StorageRemoveOptions = StorageRemoveOptions.defaultInstance()\n+    ): StorageRemoveResult\n+\n+    @Throws(StorageException::class)\n+    suspend fun list(\n+        path: String,\n+        options: StorageListOptions = StorageListOptions.defaultInstance()\n+    ): StorageListResult\n+\n+    @FlowPreview\n+    data class InProgressStorageOperation<T>(\n+        private val results: Flow<T>,\n+        private val progress: Flow<StorageTransferProgress>,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7356734439514c303ee43e9d09673c2de598b984"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkxNTQ5ODcz", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#pullrequestreview-591549873", "createdAt": "2021-02-16T19:22:33Z", "commit": {"oid": "7356734439514c303ee43e9d09673c2de598b984"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxOToyMjozM1rOImV_iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xNlQxOToyMjozM1rOImV_iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3NzA3NzEyOA==", "bodyText": "very klever \ud83d\ude06", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r577077128", "createdAt": "2021-02-16T19:22:33Z", "author": {"login": "rjuliano"}, "path": "core-ktx/build.gradle", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+apply plugin: 'com.android.library'\n+apply plugin: 'kotlin-android'\n+apply plugin: 'org.jlleitschuh.gradle.ktlint'\n+apply from: rootProject.file(\"configuration/publishing.gradle\")\n+\n+dependencies {\n+    implementation dependency.kotlin.stdlib\n+    implementation dependency.kotlin.coroutines\n+    implementation dependency.androidx.core_ktx\n+    implementation project(':core')\n+\n+    testImplementation dependency.androidx.test.core\n+    testImplementation dependency.junit\n+    testImplementation dependency.mockk", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7356734439514c303ee43e9d09673c2de598b984"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkxNTk3NDMy", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#pullrequestreview-591597432", "createdAt": "2021-02-16T20:28:28Z", "commit": {"oid": "7356734439514c303ee43e9d09673c2de598b984"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkzNzUwODE0", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#pullrequestreview-593750814", "createdAt": "2021-02-18T23:56:29Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQyMzo1NjoyOVrOIoA-tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOFQyMzo1NjoyOVrOIoA-tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3ODgzMDAwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * the delegate When delegate succeeds, so too does the coroutine API.\n          \n          \n            \n                 * the delegate.  When delegate succeeds, so too does the coroutine API.", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r578830004", "createdAt": "2021-02-18T23:56:29Z", "author": {"login": "richardmcclellan"}, "path": "core-kotlin/src/test/java/com/amplifyframework/kotlin/datastore/KotlinDataStoreFacadeTest.kt", "diffHunk": "@@ -100,11 +100,11 @@ class KotlinDataStoreFacadeTest {\n     }\n \n     /**\n-     * When delete() coroutine is called, it passes through to the delegate.\n-     * When delegate succeeds, so too does the coroutine API.\n+     * When item-based delete() coroutine is called, it passes through to\n+     * the delegate When delegate succeeds, so too does the coroutine API.", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 7}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0NTgxODUw", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#pullrequestreview-594581850", "createdAt": "2021-02-19T21:14:28Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQyMToxNDoyOFrOIoom0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQyMToxNDoyOFrOIoom0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTQ3OTI1MQ==", "bodyText": "Maybe name this variable itemClass, for consistency with the query method below?", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r579479251", "createdAt": "2021-02-19T21:14:28Z", "author": {"login": "richardmcclellan"}, "path": "core-kotlin/src/main/java/com/amplifyframework/kotlin/datastore/DataStore.kt", "diffHunk": "@@ -47,6 +48,18 @@ interface DataStore {\n     @Throws(DataStoreException::class)\n     suspend fun <T : Model> delete(item: T, predicate: QueryPredicate = QueryPredicates.all())\n \n+    /**\n+     * Delete item(s) of a given class from the DataStore.\n+     * @param byClass The class of item(s) being deleted\n+     * @param filter Items must additionally match this filter, to be targeted for deletion.\n+     *               If no filter is specified, an \"allow all\" predicate is used.\n+     */\n+    @Throws(DataStoreException::class)\n+    suspend fun <T : Model> delete(\n+        byClass: KClass<T>,", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0NTg2NjA1", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#pullrequestreview-594586605", "createdAt": "2021-02-19T21:22:36Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQyMToyMjozNlrOIoo10Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQyMToyMjozNlrOIoo10Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTQ4MzA4OQ==", "bodyText": "Maybe call this itemId?  Just a thought, though I don't feel strongly one way or the other.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    uniqueId: String\n          \n          \n            \n                    itemId: String", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r579483089", "createdAt": "2021-02-19T21:22:36Z", "author": {"login": "richardmcclellan"}, "path": "core-kotlin/src/main/java/com/amplifyframework/kotlin/datastore/DataStore.kt", "diffHunk": "@@ -73,33 +73,45 @@ interface DataStore {\n \n     /**\n      * Observe all changes to items in the DataStore.\n+     * This function suspends until observation has been setup.\n+     * Once the observation begins, the function resumes and returns a Flow.\n+     * The returned Flow represents a stream of changes to the DataStore.\n      * @return A flow of changes to the items in the DataStore\n      */\n     @ExperimentalCoroutinesApi\n     @Throws(DataStoreException::class)\n-    fun observe(): Flow<DataStoreItemChange<out Model>>\n+    suspend fun observe(): Flow<DataStoreItemChange<out Model>>\n \n     /**\n      * Observe the DataStore for changes to a particular item.\n+     * This function suspends until observation has been setup.\n+     * Once the observation begins, the function resumes and returns a Flow.\n+     * The returned Flow represents a stream of changes to the DataStore.\n      * @param itemClass The class of the model being observed\n      * @param uniqueId The ID of the item being observed\n      * @return A flow of changes to the requested model\n      */\n     @ExperimentalCoroutinesApi\n     @Throws(DataStoreException::class)\n-    fun <T : Model> observe(itemClass: Class<T>, uniqueId: String): Flow<DataStoreItemChange<T>>\n+    suspend fun <T : Model> observe(\n+        itemClass: Class<T>,\n+        uniqueId: String", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0NTg4MzM1", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#pullrequestreview-594588335", "createdAt": "2021-02-19T21:25:26Z", "commit": null, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQyMToyNToyNlrOIoo66Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0xOVQyMToyNToyNlrOIoo66Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTQ4NDM5Mw==", "bodyText": "This is super awesome! \ud83d\ude0e", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#discussion_r579484393", "createdAt": "2021-02-19T21:25:26Z", "author": {"login": "richardmcclellan"}, "path": "core-kotlin/src/main/java/com/amplifyframework/kotlin/datastore/KotlinDataStoreFacade.kt", "diffHunk": "@@ -170,4 +176,38 @@ class KotlinDataStoreFacade(private val delegate: Delegate = Amplify.DataStore)\n             )\n         }\n     }\n+\n+    internal class Observation<T>(\n+        internal val starts: MutableSharedFlow<Cancelable> = MutableSharedFlow(1),\n+        internal val changes: MutableSharedFlow<T> = MutableSharedFlow(1),\n+        internal val failures: MutableSharedFlow<DataStoreException> = MutableSharedFlow(1),\n+        internal val completions: MutableSharedFlow<Unit> = MutableSharedFlow(1)\n+    ) {\n+        @Suppress(\"UNCHECKED_CAST\")\n+        @FlowPreview\n+        internal suspend fun waitForStart(): Flow<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0NTk3MDUy", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#pullrequestreview-594597052", "createdAt": "2021-02-19T21:40:37Z", "commit": null, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8da7132d67819d5259c450e023b9c8c4241cb11f", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/8da7132d67819d5259c450e023b9c8c4241cb11f", "committedDate": "2021-02-19T22:29:05Z", "message": "feature(core-ktx): A Kotlin-first API for Amplify\n\nThis commit introduces a new, optional core-ktx module. The module\nincludes improved support for using Amplify from Kotlin.\n\nTo use the Kotlin facade, include this dependency:\n```gradle\ndependencies {\n    implementation \"com.amplifyframework:core-ktx:$version\"\n}\n```\nAnd import the Kotlin facade instead of the one in `core`:\n```kotlin\nimport com.amplifyframework.kotlin.Amplify\n```\n\ncore-ktx introduces an alternate `Amplify` facade, which provides new\nmeans of interacting with the various Amplify categories (API, Auth,\nDataStore, Predictions, Storage.) The new facade include several\nimprovements to the Kotlin developer experience, mainly by adding\nsupport for Coroutines.\n\nAmplify has several types of APIs. Some are synchronous calls, which\nimmediately return a value. However, most Amplify behaviors are\nasynchronous calls. Among the async calls, there are a few broad\ncategories:\n\n 1. Functions that return a single value, and cannot be canceled;\n 2. Functions that return a single value, and can be canceled;\n 3. Functions that emit a stream of values\n 4. Functions that emit multiple types of values\n\nMost Amplify behaviors are of type (1). Auth and Predictions are\nentirely comprised of type (1). The Kotlin flavors of these behaviors\nare expressed as suspending functions, e.g.:\n\n```kotlin\nsuspend fun signOut() {\n   ...\n}\n```\n\nThe simplest developer experience to invoke this method will be:\n```kotlin\nrunBlocking {\n    Amplify.Auth.signOut()\n}\n```\n\nSome single-valued functions, such as the `mutate(...)` behavior in the\nAPI category, may be canceled before rendering a result. The Kotlin\nversion of `mutate(...)` is expressed this way:\n\n```kotlin\nsuspend fun <R> ApiCategory.mutate(\n        request: GraphQLRequest<R>, apiName: String? = null)\n        : GraphQLResponse<R> {\n    ...\n}\n```\n\nThe user may cancel the behavior via Kotlin's `Job` construct:\n```kotlin\nval job = launch(Dispatchers.IO) {\n    Amplify.API.mutate(request)\n}\n...\njob.cancel()\n```\n\nThere are also some Amplify behaviors which emit a stream of values.\nDataStore's `observe()` is a canonical example. It's extension function\nis expressed as:\n\n```kotlin\nfun observe(): Flow<DataStoreItemChange<out Model>> {\n    ...\n}\n```\n\nA developer may interact with the flow in this way:\n```kotlin\nAmplify.DataStore.observe()\n    .collect { print(it) }\n```\n\nAPI's `subscribe()` also emits a stream of values. However, it is also\nimportant to know about the _lifecycle_ of a GraphQL subscription. So,\nthis method returns an operation structure, which envelopes two flows:\n```kotlin\nfun <T> ApiCategory.subscribe(\n        request: GraphQLRequest<T>, apiName: String? = null)\n        : GraphQLSubscriptionOperation<T> {\n    ...\n}\n```\n\nA developer can inspect the connection state, as well as the stream of\nsubscription data:\n```kotlin\nval subscription = Amplify.API.subscribe(request)\nsubscription.subscriptionData.collect {\n    print(\"Got a subscription data: $it\")\n}\nsubscription.connectionState.collect {\n    print(\"Connection state changed: $it\")\n}\n```\n\nThe Storage category's various upload and download functions also\nexhibit a similar pattern. We want obtain the result, but we may also\nlike to observe a stream of progress updates. The signature looks like:\n```kotlin\nfun StorageCategory.downloadFile(\n        key: String,\n        local: File,\n): InProgressStorageOperation<StorageDownloadFileResult> {\n```\n\nA developer can access the result of the download via a suspend\nfunction exposed on the download operation:\n```kotlin\nval result = runBlocking { download.result() }\n```\n\nRefer: https://github.com/aws-amplify/amplify-android/issues/605"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79478f1b86cdb04270a9b22c51eb89caf5ea7f27", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/79478f1b86cdb04270a9b22c51eb89caf5ea7f27", "committedDate": "2021-02-19T22:29:07Z", "message": "Update core-ktx/src/main/java/com/amplifyframework/kotlin/Hub.kt\n\nCo-authored-by: Richard McClellan <ricmccle@amazon.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a6740011e0faaf4a4069a5260f15c7ce1253493", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/5a6740011e0faaf4a4069a5260f15c7ce1253493", "committedDate": "2021-02-19T22:29:07Z", "message": "Mixed valued functions use SharedFlow & StateFlow"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84644a9bd99180348e02a0063d14e46fc984b92d", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/84644a9bd99180348e02a0063d14e46fc984b92d", "committedDate": "2021-02-19T22:29:07Z", "message": "fixup from web inclusion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7078e1485e3fa1b45e5a418c3f630e3df25fb880", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/7078e1485e3fa1b45e5a418c3f630e3df25fb880", "committedDate": "2021-02-19T22:29:07Z", "message": "handleWebSignInResponse doesn't actually throw an AuthException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ded186434ab8f8e6ac03123fecb6194a53fdfbab", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/ded186434ab8f8e6ac03123fecb6194a53fdfbab", "committedDate": "2021-02-19T22:29:08Z", "message": "touchup: rename module from core-ktx to core-kotlin"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eedd7434fe2addbfdfe42558a1560210b022954", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/9eedd7434fe2addbfdfe42558a1560210b022954", "committedDate": "2021-02-19T22:29:08Z", "message": "feat: add default param type for sign in options\n\nThe AuthSignInOptions are currently an abstract class in the core\nmodule. There are no concrete implementations in core. As a result, this\nmeans we have no value to provide as a default in the Kotlin signIn()\nAPI, even though it would be useful for the customer to use a default if\nno value is explicitly provided.\n\nTo improve the Kotlin signIn() API experience, we introduce a new\nDefaultAuthSignInOptions class which may be instantiated exactly one\nway:\n\n```kotlin\nAuthSignInOptions.defaults()\n```\n\nA small bit of internal rewiring is necessary to watch for this type and\nthen maintain the correct forking logic when it is seen in the Cognito\nplugin.\n\nThis is intended *not* to be a breaking change."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96aa953737cdff52109b7348c3933c3c0d88803a", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/96aa953737cdff52109b7348c3933c3c0d88803a", "committedDate": "2021-02-19T22:29:08Z", "message": "fixup: remove a file that was not intended for commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccfc98d593089426bae1d478d8b34950505acaa2", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/ccfc98d593089426bae1d478d8b34950505acaa2", "committedDate": "2021-02-19T22:29:08Z", "message": "update java packages per PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b524879eb653d122a36d061c1c29b6e76effa5d", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/3b524879eb653d122a36d061c1c29b6e76effa5d", "committedDate": "2021-02-19T22:29:08Z", "message": "fixup ktlint issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ed9aa27407b43da4a0ebc8446c4d86399cb2ac8", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/7ed9aa27407b43da4a0ebc8446c4d86399cb2ac8", "committedDate": "2021-02-19T22:29:09Z", "message": "Add missing delete(byClass, ...) API to DataStore.kt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6147e4450c36e56665457acf20559251f5f24b8", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/f6147e4450c36e56665457acf20559251f5f24b8", "committedDate": "2021-02-19T22:29:09Z", "message": "Await onObservationStarted in DataStore observe() functions.\n\nAs of yet, the Kotlin DataStore observe() methods did not wait for the\nonObservationStarted signal from the delegate. This meant that the\nfunctions would return a Flow which might not actually be usable. As a\nresult, it would be possible for customers to miss some changes.\n\nobserve() APIs have been updated to become suspending functions. The\nfunctions suspend until the observation is ready. When it is, the\nfunctions continue to return the usable Flow."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "448d2b8e445c62451cb05df32fed8b772781eec2", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/448d2b8e445c62451cb05df32fed8b772781eec2", "committedDate": "2021-02-19T22:29:09Z", "message": "Rework API subscribe() to suspend until established\n\nInstead of using two separate Flows, one for data and one for connection\nlifecycle, we can simplify to a single data Flow.\n\nThe subscribe() function will suspend until a connection is established.\nIf there is an error establishing a connection then it will throw at\nthis phase.\n\nOnce established, a Flow of GraphQLResponse can be collected. This Flow\ncan complete gracefully if the user cancels the subscription -- or it\ncan throw an error (say, if the network goes down.)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c6d94f51b2eec3f32cfe7bb4ed976920fc4d53a0", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/c6d94f51b2eec3f32cfe7bb4ed976920fc4d53a0", "committedDate": "2021-02-19T22:29:09Z", "message": "Use KClass instead of Class in all DataStore APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05092b4c8cc28738afbd7b91a46e90326b2d2b50", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/05092b4c8cc28738afbd7b91a46e90326b2d2b50", "committedDate": "2021-02-19T22:29:09Z", "message": "Update a few DataStore parameter names"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "05092b4c8cc28738afbd7b91a46e90326b2d2b50", "author": {"user": {"login": "jamesonwilliams", "name": "Jameson Williams"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/05092b4c8cc28738afbd7b91a46e90326b2d2b50", "committedDate": "2021-02-19T22:29:09Z", "message": "Update a few DataStore parameter names"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0NjMwMTc0", "url": "https://github.com/aws-amplify/amplify-android/pull/1057#pullrequestreview-594630174", "createdAt": "2021-02-19T22:41:05Z", "commit": {"oid": "05092b4c8cc28738afbd7b91a46e90326b2d2b50"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3374, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}