{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NjQ2MDU5", "number": 543, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTowNTo1OFrOEDES-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTowNTo1OFrOEDES-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjUxNTc2OnYy", "diffSide": "RIGHT", "path": "aws-api/src/test/java/com/amplifyframework/api/aws/UserAgentTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTowNTo1OFrOGf6KcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTowNTo1OFrOGf6KcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjExMTk4NA==", "bodyText": "Nice. Good test idea.", "url": "https://github.com/aws-amplify/amplify-android/pull/543#discussion_r436111984", "createdAt": "2020-06-05T19:05:58Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/test/java/com/amplifyframework/api/aws/UserAgentTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws;\n+\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.api.graphql.model.ModelQuery;\n+import com.amplifyframework.core.NoOpConsumer;\n+\n+import org.json.JSONObject;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+import org.robolectric.annotation.Config;\n+\n+import java.io.IOException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import okhttp3.mockwebserver.MockWebServer;\n+import okhttp3.mockwebserver.RecordedRequest;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests that the user agent is applied as expected by the {@link UserAgentInterceptor}\n+ * in {@link AWSApiPlugin}.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class UserAgentTest {\n+    private static final long REQUEST_TIMEOUT_MS = 200;\n+    private static final String USER_AGENT_REGEX = \"^(?<libraryName>.*?)\\\\/(?<libraryVersion>.*?) \" +\n+            \"\\\\((?<systemName>.*?) (?<systemVersion>.*?); \" +\n+            \"(?<deviceManufacturer>.*?) (?<deviceName>.*?); \" +\n+            \"(?<userLanguage>.*?)_(?<userRegion>.*?)\\\\)$\";\n+    private static final Pattern USER_AGENT_PATTERN = Pattern.compile(USER_AGENT_REGEX);\n+\n+    private MockWebServer server;\n+    private AWSApiPlugin api;\n+\n+    /**\n+     * Set up the mock web server and API that talks to it.\n+     * @throws Exception If setting up the server or API plugin fails\n+     */\n+    @Before\n+    public void setUp() throws Exception {\n+        // Set up backend\n+        server = new MockWebServer();\n+        server.start();\n+\n+        // Set up the API\n+        api = new AWSApiPlugin();\n+        JSONObject config = new JSONObject()\n+                .put(\"name\", new JSONObject()\n+                        .put(\"endpointType\", \"GraphQL\")\n+                        .put(\"endpoint\", getEndpoint())\n+                        .put(\"region\", \"\")\n+                        .put(\"authorizationType\", \"API_KEY\")\n+                        .put(\"apiKey\", \"\"));\n+        api.configure(config, getApplicationContext());\n+    }\n+\n+    /**\n+     * Shuts down the mock web server.\n+     * @throws IOException If closing the server encounters an error\n+     */\n+    @After\n+    public void tearDown() throws IOException {\n+        server.shutdown();\n+    }\n+\n+    /**\n+     * Make an API request to the mock server and check the user agent\n+     * header format on the request. Verify that the Android version is\n+     * accurately reflected on the user agent.\n+     * @throws Exception if API call fails or thread is interrupted while\n+     *          waiting for request\n+     */\n+    @Test\n+    @Config(sdk = 16)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca575de55199bccbf7da2c33a0dfb2efa0503942"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1329, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}