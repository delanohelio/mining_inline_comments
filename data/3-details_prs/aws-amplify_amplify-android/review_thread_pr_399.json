{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4ODI3ODQ3", "number": 399, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNzo0Mjo1MFrOD2RUCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDoxMDoxN1rOD32Gwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjMzMzU1OnYy", "diffSide": "RIGHT", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSRekognitionService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNzo0Mjo1MFrOGMAe2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNTo1ODozMlrOGMGa5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI0Mzk5NA==", "bodyText": "nit: extra line", "url": "https://github.com/aws-amplify/amplify-android/pull/399#discussion_r415243994", "createdAt": "2020-04-26T07:42:50Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSRekognitionService.java", "diffHunk": "@@ -114,6 +133,29 @@ void recognizeCelebrities(\n         }\n     }\n \n+    void detectEntities(\n+            @NonNull Image image,\n+            @NonNull Consumer<IdentifyResult> onSuccess,\n+            @NonNull Consumer<PredictionsException> onError\n+    ) {\n+        final IdentifyEntitiesConfiguration config;\n+        try {\n+            config = pluginConfiguration.getIdentifyEntitiesConfiguration();\n+            if (config.isGeneralEntityDetection()) {\n+                List<EntityDetails> entities = detectEntities(image);\n+                onSuccess.accept(IdentifyEntitiesResult.fromEntityDetails(entities));\n+            } else {\n+                int maxEntities = config.getMaxEntities();\n+                String collectionId = config.getCollectionId();\n+                List<EntityMatch> matches = detectEntityMatches(image, maxEntities, collectionId);\n+                onSuccess.accept(IdentifyEntityMatchesResult.fromEntityMatches(matches));\n+            }\n+        } catch (PredictionsException exception) {\n+            onError.accept(exception);\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16dd58100133b63f82cfa1cbf2a34d431aca7a9f"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0MTI4NA==", "bodyText": "removed", "url": "https://github.com/aws-amplify/amplify-android/pull/399#discussion_r415341284", "createdAt": "2020-04-26T15:58:32Z", "author": {"login": "raphkim"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSRekognitionService.java", "diffHunk": "@@ -114,6 +133,29 @@ void recognizeCelebrities(\n         }\n     }\n \n+    void detectEntities(\n+            @NonNull Image image,\n+            @NonNull Consumer<IdentifyResult> onSuccess,\n+            @NonNull Consumer<PredictionsException> onError\n+    ) {\n+        final IdentifyEntitiesConfiguration config;\n+        try {\n+            config = pluginConfiguration.getIdentifyEntitiesConfiguration();\n+            if (config.isGeneralEntityDetection()) {\n+                List<EntityDetails> entities = detectEntities(image);\n+                onSuccess.accept(IdentifyEntitiesResult.fromEntityDetails(entities));\n+            } else {\n+                int maxEntities = config.getMaxEntities();\n+                String collectionId = config.getCollectionId();\n+                List<EntityMatch> matches = detectEntityMatches(image, maxEntities, collectionId);\n+                onSuccess.accept(IdentifyEntityMatchesResult.fromEntityMatches(matches));\n+            }\n+        } catch (PredictionsException exception) {\n+            onError.accept(exception);\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI0Mzk5NA=="}, "originalCommit": {"oid": "16dd58100133b63f82cfa1cbf2a34d431aca7a9f"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjMzNzM2OnYy", "diffSide": "RIGHT", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/configuration/IdentifyEntitiesConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNzo0NToxNFrOGMAgmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNTo1ODoyN1rOGMGazw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI0NDQ0Mg==", "bodyText": "Naming: isCelebritryDection...() (with is[A-Z] that Kotlin likes.)", "url": "https://github.com/aws-amplify/amplify-android/pull/399#discussion_r415244442", "createdAt": "2020-04-26T07:45:14Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/configuration/IdentifyEntitiesConfiguration.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws.configuration;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.predictions.aws.NetworkPolicy;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+/**\n+ * Configures the behavior for text interpretation.\n+ */\n+public final class IdentifyEntitiesConfiguration {\n+\n+    private static final int MAX_VALID_ENTITIES = 50;\n+\n+    private final int maxEntities;\n+    private final String collectionId;\n+    private final boolean generalEntityDetection;\n+    private final boolean celebrityDetectionEnabled;\n+    private final NetworkPolicy networkPolicy;\n+\n+    private IdentifyEntitiesConfiguration(\n+            int maxEntities,\n+            String collectionId,\n+            boolean generalEntityDetection,\n+            boolean celebrityDetectionEnabled,\n+            NetworkPolicy networkPolicy\n+    ) {\n+        this.maxEntities = maxEntities;\n+        this.collectionId = collectionId;\n+        this.generalEntityDetection = generalEntityDetection;\n+        this.celebrityDetectionEnabled = celebrityDetectionEnabled;\n+        this.networkPolicy = networkPolicy;\n+    }\n+\n+    /**\n+     * Construct an instance of {@link IdentifyEntitiesConfiguration} from\n+     * plugin configuration JSON object.\n+     * @param configurationJson the plugin configuration\n+     * @return the configuration for entities detection\n+     * @throws JSONException if identify configuration is malformed\n+     */\n+    @Nullable\n+    public static IdentifyEntitiesConfiguration fromJson(@NonNull JSONObject configurationJson) throws JSONException {\n+        if (!configurationJson.has(\"identifyEntities\")) {\n+            return null;\n+        }\n+\n+        // Required fields\n+        JSONObject identifyEntitiesJson = configurationJson.getJSONObject(\"identifyEntities\");\n+        String celebEnabledString = identifyEntitiesJson.getString(\"celebrityDetectionEnabled\");\n+        String networkPolicyString = identifyEntitiesJson.getString(\"defaultNetworkPolicy\");\n+\n+        boolean celebEnabled = Boolean.parseBoolean(celebEnabledString);\n+        NetworkPolicy networkPolicy = NetworkPolicy.fromKey(networkPolicyString);\n+\n+        // Optional fields\n+        int maxEntities;\n+        boolean generalEntity;\n+        String collectionId;\n+        String maxEntitiesString;\n+        try {\n+            maxEntitiesString = identifyEntitiesJson.getString(\"maxEntities\");\n+            collectionId = identifyEntitiesJson.getString(\"collectionId\");\n+            maxEntities = Integer.parseInt(maxEntitiesString);\n+            generalEntity = maxEntities < 1 || maxEntities > MAX_VALID_ENTITIES;\n+        } catch (JSONException | IllegalArgumentException exception) {\n+            maxEntities = 0;\n+            collectionId = \"\";\n+            generalEntity = true;\n+        }\n+\n+        return new IdentifyEntitiesConfiguration(maxEntities, collectionId,\n+                generalEntity, celebEnabled, networkPolicy);\n+    }\n+\n+    /**\n+     * Gets the max number of entities to detect per image.\n+     * @return the max number of detected entities\n+     */\n+    public int getMaxEntities() {\n+        return maxEntities;\n+    }\n+\n+    /**\n+     * Gets the collection ID to match entities against.\n+     * @return the collection ID to find matching entities in\n+     */\n+    @NonNull\n+    public String getCollectionId() {\n+        return collectionId;\n+    }\n+\n+    /**\n+     * Returns true if configured to detect entities. False if\n+     * scoped to detect matching entities from collection.\n+     * @return true if configured for general entity detection\n+     */\n+    public boolean isGeneralEntityDetection() {\n+        return generalEntityDetection;\n+    }\n+\n+    /**\n+     * Returns true if configured to allow celebrity detection.\n+     * @return true if configured to allow celebrity detection\n+     */\n+    public boolean celebrityDetectionEnabled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16dd58100133b63f82cfa1cbf2a34d431aca7a9f"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0MTI2Mw==", "bodyText": "will do", "url": "https://github.com/aws-amplify/amplify-android/pull/399#discussion_r415341263", "createdAt": "2020-04-26T15:58:27Z", "author": {"login": "raphkim"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/configuration/IdentifyEntitiesConfiguration.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws.configuration;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.predictions.aws.NetworkPolicy;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+/**\n+ * Configures the behavior for text interpretation.\n+ */\n+public final class IdentifyEntitiesConfiguration {\n+\n+    private static final int MAX_VALID_ENTITIES = 50;\n+\n+    private final int maxEntities;\n+    private final String collectionId;\n+    private final boolean generalEntityDetection;\n+    private final boolean celebrityDetectionEnabled;\n+    private final NetworkPolicy networkPolicy;\n+\n+    private IdentifyEntitiesConfiguration(\n+            int maxEntities,\n+            String collectionId,\n+            boolean generalEntityDetection,\n+            boolean celebrityDetectionEnabled,\n+            NetworkPolicy networkPolicy\n+    ) {\n+        this.maxEntities = maxEntities;\n+        this.collectionId = collectionId;\n+        this.generalEntityDetection = generalEntityDetection;\n+        this.celebrityDetectionEnabled = celebrityDetectionEnabled;\n+        this.networkPolicy = networkPolicy;\n+    }\n+\n+    /**\n+     * Construct an instance of {@link IdentifyEntitiesConfiguration} from\n+     * plugin configuration JSON object.\n+     * @param configurationJson the plugin configuration\n+     * @return the configuration for entities detection\n+     * @throws JSONException if identify configuration is malformed\n+     */\n+    @Nullable\n+    public static IdentifyEntitiesConfiguration fromJson(@NonNull JSONObject configurationJson) throws JSONException {\n+        if (!configurationJson.has(\"identifyEntities\")) {\n+            return null;\n+        }\n+\n+        // Required fields\n+        JSONObject identifyEntitiesJson = configurationJson.getJSONObject(\"identifyEntities\");\n+        String celebEnabledString = identifyEntitiesJson.getString(\"celebrityDetectionEnabled\");\n+        String networkPolicyString = identifyEntitiesJson.getString(\"defaultNetworkPolicy\");\n+\n+        boolean celebEnabled = Boolean.parseBoolean(celebEnabledString);\n+        NetworkPolicy networkPolicy = NetworkPolicy.fromKey(networkPolicyString);\n+\n+        // Optional fields\n+        int maxEntities;\n+        boolean generalEntity;\n+        String collectionId;\n+        String maxEntitiesString;\n+        try {\n+            maxEntitiesString = identifyEntitiesJson.getString(\"maxEntities\");\n+            collectionId = identifyEntitiesJson.getString(\"collectionId\");\n+            maxEntities = Integer.parseInt(maxEntitiesString);\n+            generalEntity = maxEntities < 1 || maxEntities > MAX_VALID_ENTITIES;\n+        } catch (JSONException | IllegalArgumentException exception) {\n+            maxEntities = 0;\n+            collectionId = \"\";\n+            generalEntity = true;\n+        }\n+\n+        return new IdentifyEntitiesConfiguration(maxEntities, collectionId,\n+                generalEntity, celebEnabled, networkPolicy);\n+    }\n+\n+    /**\n+     * Gets the max number of entities to detect per image.\n+     * @return the max number of detected entities\n+     */\n+    public int getMaxEntities() {\n+        return maxEntities;\n+    }\n+\n+    /**\n+     * Gets the collection ID to match entities against.\n+     * @return the collection ID to find matching entities in\n+     */\n+    @NonNull\n+    public String getCollectionId() {\n+        return collectionId;\n+    }\n+\n+    /**\n+     * Returns true if configured to detect entities. False if\n+     * scoped to detect matching entities from collection.\n+     * @return true if configured for general entity detection\n+     */\n+    public boolean isGeneralEntityDetection() {\n+        return generalEntityDetection;\n+    }\n+\n+    /**\n+     * Returns true if configured to allow celebrity detection.\n+     * @return true if configured to allow celebrity detection\n+     */\n+    public boolean celebrityDetectionEnabled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI0NDQ0Mg=="}, "originalCommit": {"oid": "16dd58100133b63f82cfa1cbf2a34d431aca7a9f"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjM0NDgxOnYy", "diffSide": "RIGHT", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/configuration/IdentifyEntitiesConfiguration.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNzo0OTo0NFrOGMAj9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxODo0ODoxMVrOGOMVVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI0NTMwMg==", "bodyText": "So if this throws, you'lll end up in the catch block, and then maxEntities will be 0, and generalEntity will be true. Is that the control flow you were going for, here? Seems like there's a lot of branches here, depending on which lines throws, and what the defaults will get set to.\nActually, I guess if maxEntitiesString line throws, then the outcome here is even weirder, with maxEntitiesString as null and collectionId as \"\".\ngeneralEntity is very hard to trace. It starts as false (default for a boolean.) It might get set to true/false on L83. But. But if there is an error before L83, it gets reset to true in the catch.", "url": "https://github.com/aws-amplify/amplify-android/pull/399#discussion_r415245302", "createdAt": "2020-04-26T07:49:44Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/configuration/IdentifyEntitiesConfiguration.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws.configuration;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.predictions.aws.NetworkPolicy;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+/**\n+ * Configures the behavior for text interpretation.\n+ */\n+public final class IdentifyEntitiesConfiguration {\n+\n+    private static final int MAX_VALID_ENTITIES = 50;\n+\n+    private final int maxEntities;\n+    private final String collectionId;\n+    private final boolean generalEntityDetection;\n+    private final boolean celebrityDetectionEnabled;\n+    private final NetworkPolicy networkPolicy;\n+\n+    private IdentifyEntitiesConfiguration(\n+            int maxEntities,\n+            String collectionId,\n+            boolean generalEntityDetection,\n+            boolean celebrityDetectionEnabled,\n+            NetworkPolicy networkPolicy\n+    ) {\n+        this.maxEntities = maxEntities;\n+        this.collectionId = collectionId;\n+        this.generalEntityDetection = generalEntityDetection;\n+        this.celebrityDetectionEnabled = celebrityDetectionEnabled;\n+        this.networkPolicy = networkPolicy;\n+    }\n+\n+    /**\n+     * Construct an instance of {@link IdentifyEntitiesConfiguration} from\n+     * plugin configuration JSON object.\n+     * @param configurationJson the plugin configuration\n+     * @return the configuration for entities detection\n+     * @throws JSONException if identify configuration is malformed\n+     */\n+    @Nullable\n+    public static IdentifyEntitiesConfiguration fromJson(@NonNull JSONObject configurationJson) throws JSONException {\n+        if (!configurationJson.has(\"identifyEntities\")) {\n+            return null;\n+        }\n+\n+        // Required fields\n+        JSONObject identifyEntitiesJson = configurationJson.getJSONObject(\"identifyEntities\");\n+        String celebEnabledString = identifyEntitiesJson.getString(\"celebrityDetectionEnabled\");\n+        String networkPolicyString = identifyEntitiesJson.getString(\"defaultNetworkPolicy\");\n+\n+        boolean celebEnabled = Boolean.parseBoolean(celebEnabledString);\n+        NetworkPolicy networkPolicy = NetworkPolicy.fromKey(networkPolicyString);\n+\n+        // Optional fields\n+        int maxEntities;\n+        boolean generalEntity;\n+        String collectionId;\n+        String maxEntitiesString;\n+        try {\n+            maxEntitiesString = identifyEntitiesJson.getString(\"maxEntities\");\n+            collectionId = identifyEntitiesJson.getString(\"collectionId\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16dd58100133b63f82cfa1cbf2a34d431aca7a9f"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0MDU5OQ==", "bodyText": "https://docs.amplify.aws/lib/predictions/identify-entity?platform=ios\n\nThe value of maxEntities should be a number greater than 0 or less than 51 (50 is the max number of entities Rekognition can detect from a collection). If both collectionId and maxEntities do not have valid values in the amplifyconfiguration.json file, then this call will just detect entities in general with facial features, landmarks, etc.\n\nVery weird flow indeed, but I think what I currently have kind of describes this sufficiently?", "url": "https://github.com/aws-amplify/amplify-android/pull/399#discussion_r415340599", "createdAt": "2020-04-26T15:55:04Z", "author": {"login": "raphkim"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/configuration/IdentifyEntitiesConfiguration.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws.configuration;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.predictions.aws.NetworkPolicy;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+/**\n+ * Configures the behavior for text interpretation.\n+ */\n+public final class IdentifyEntitiesConfiguration {\n+\n+    private static final int MAX_VALID_ENTITIES = 50;\n+\n+    private final int maxEntities;\n+    private final String collectionId;\n+    private final boolean generalEntityDetection;\n+    private final boolean celebrityDetectionEnabled;\n+    private final NetworkPolicy networkPolicy;\n+\n+    private IdentifyEntitiesConfiguration(\n+            int maxEntities,\n+            String collectionId,\n+            boolean generalEntityDetection,\n+            boolean celebrityDetectionEnabled,\n+            NetworkPolicy networkPolicy\n+    ) {\n+        this.maxEntities = maxEntities;\n+        this.collectionId = collectionId;\n+        this.generalEntityDetection = generalEntityDetection;\n+        this.celebrityDetectionEnabled = celebrityDetectionEnabled;\n+        this.networkPolicy = networkPolicy;\n+    }\n+\n+    /**\n+     * Construct an instance of {@link IdentifyEntitiesConfiguration} from\n+     * plugin configuration JSON object.\n+     * @param configurationJson the plugin configuration\n+     * @return the configuration for entities detection\n+     * @throws JSONException if identify configuration is malformed\n+     */\n+    @Nullable\n+    public static IdentifyEntitiesConfiguration fromJson(@NonNull JSONObject configurationJson) throws JSONException {\n+        if (!configurationJson.has(\"identifyEntities\")) {\n+            return null;\n+        }\n+\n+        // Required fields\n+        JSONObject identifyEntitiesJson = configurationJson.getJSONObject(\"identifyEntities\");\n+        String celebEnabledString = identifyEntitiesJson.getString(\"celebrityDetectionEnabled\");\n+        String networkPolicyString = identifyEntitiesJson.getString(\"defaultNetworkPolicy\");\n+\n+        boolean celebEnabled = Boolean.parseBoolean(celebEnabledString);\n+        NetworkPolicy networkPolicy = NetworkPolicy.fromKey(networkPolicyString);\n+\n+        // Optional fields\n+        int maxEntities;\n+        boolean generalEntity;\n+        String collectionId;\n+        String maxEntitiesString;\n+        try {\n+            maxEntitiesString = identifyEntitiesJson.getString(\"maxEntities\");\n+            collectionId = identifyEntitiesJson.getString(\"collectionId\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI0NTMwMg=="}, "originalCommit": {"oid": "16dd58100133b63f82cfa1cbf2a34d431aca7a9f"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUzNTMxOQ==", "bodyText": "also generalEntity (which is pretty badly named I guess. Should have been something like isGeneralEntityDetectionEnabled, but that was too long haha) should kind of be defaulted to true. However, the IDE saw that its value is specified in both try and catch clauses, so it didn't like being given n initial value.\nThe main idea is, isGeneralEntityDetection should be true, and collectionId and maxEntities should not be referenced if it is. Therefore, they are given arbitrary values for the time being (inside catch). isGeneralEntityDetection will be true ONLY if both maxEntities and collectionId are specified in the configuration, and the maxEntities value is valid (0 < x < 51).", "url": "https://github.com/aws-amplify/amplify-android/pull/399#discussion_r417535319", "createdAt": "2020-04-29T18:48:11Z", "author": {"login": "raphkim"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/configuration/IdentifyEntitiesConfiguration.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws.configuration;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import com.amplifyframework.predictions.aws.NetworkPolicy;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+\n+/**\n+ * Configures the behavior for text interpretation.\n+ */\n+public final class IdentifyEntitiesConfiguration {\n+\n+    private static final int MAX_VALID_ENTITIES = 50;\n+\n+    private final int maxEntities;\n+    private final String collectionId;\n+    private final boolean generalEntityDetection;\n+    private final boolean celebrityDetectionEnabled;\n+    private final NetworkPolicy networkPolicy;\n+\n+    private IdentifyEntitiesConfiguration(\n+            int maxEntities,\n+            String collectionId,\n+            boolean generalEntityDetection,\n+            boolean celebrityDetectionEnabled,\n+            NetworkPolicy networkPolicy\n+    ) {\n+        this.maxEntities = maxEntities;\n+        this.collectionId = collectionId;\n+        this.generalEntityDetection = generalEntityDetection;\n+        this.celebrityDetectionEnabled = celebrityDetectionEnabled;\n+        this.networkPolicy = networkPolicy;\n+    }\n+\n+    /**\n+     * Construct an instance of {@link IdentifyEntitiesConfiguration} from\n+     * plugin configuration JSON object.\n+     * @param configurationJson the plugin configuration\n+     * @return the configuration for entities detection\n+     * @throws JSONException if identify configuration is malformed\n+     */\n+    @Nullable\n+    public static IdentifyEntitiesConfiguration fromJson(@NonNull JSONObject configurationJson) throws JSONException {\n+        if (!configurationJson.has(\"identifyEntities\")) {\n+            return null;\n+        }\n+\n+        // Required fields\n+        JSONObject identifyEntitiesJson = configurationJson.getJSONObject(\"identifyEntities\");\n+        String celebEnabledString = identifyEntitiesJson.getString(\"celebrityDetectionEnabled\");\n+        String networkPolicyString = identifyEntitiesJson.getString(\"defaultNetworkPolicy\");\n+\n+        boolean celebEnabled = Boolean.parseBoolean(celebEnabledString);\n+        NetworkPolicy networkPolicy = NetworkPolicy.fromKey(networkPolicyString);\n+\n+        // Optional fields\n+        int maxEntities;\n+        boolean generalEntity;\n+        String collectionId;\n+        String maxEntitiesString;\n+        try {\n+            maxEntitiesString = identifyEntitiesJson.getString(\"maxEntities\");\n+            collectionId = identifyEntitiesJson.getString(\"collectionId\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI0NTMwMg=="}, "originalCommit": {"oid": "16dd58100133b63f82cfa1cbf2a34d431aca7a9f"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjM1MzQ0OnYy", "diffSide": "RIGHT", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyResultTransformers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNzo1NToxNVrOGMAnxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNTo1ODoyMFrOGMGaxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI0NjI3OQ==", "bodyText": "Just use:\nArrays.astList(\n    new Foo<>(\"asdf\"),\n    new Foo<>(\"asdfeee\"),\n    new Foo<>(\"sdfgsdfgr\")\n)\n\nAlmost as good as Java 9 List.of(), or Kotlin listOf() :-D", "url": "https://github.com/aws-amplify/amplify-android/pull/399#discussion_r415246279", "createdAt": "2020-04-26T07:55:15Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyResultTransformers.java", "diffHunk": "@@ -108,4 +123,50 @@ public static Pose fromRekognitionPose(@NonNull com.amazonaws.services.rekogniti\n \n         return amplifyLandmarks;\n     }\n+\n+    /**\n+     * Gets all the binary features from AWS Rekognition's face\n+     * details and compiles them into a single list.\n+     * @param face the Rekognition face detail object\n+     * @return the list of Amplify {@link BinaryFeature}\n+     */\n+    public static List<BinaryFeature> fromFaceDetail(FaceDetail face) {\n+        List<BinaryFeature> features = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16dd58100133b63f82cfa1cbf2a34d431aca7a9f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0MTI1Mg==", "bodyText": "haha i was thinking about it, and the only reason I decided against it was to reduce indentation depth. Will fix", "url": "https://github.com/aws-amplify/amplify-android/pull/399#discussion_r415341252", "createdAt": "2020-04-26T15:58:20Z", "author": {"login": "raphkim"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyResultTransformers.java", "diffHunk": "@@ -108,4 +123,50 @@ public static Pose fromRekognitionPose(@NonNull com.amazonaws.services.rekogniti\n \n         return amplifyLandmarks;\n     }\n+\n+    /**\n+     * Gets all the binary features from AWS Rekognition's face\n+     * details and compiles them into a single list.\n+     * @param face the Rekognition face detail object\n+     * @return the list of Amplify {@link BinaryFeature}\n+     */\n+    public static List<BinaryFeature> fromFaceDetail(FaceDetail face) {\n+        List<BinaryFeature> features = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI0NjI3OQ=="}, "originalCommit": {"oid": "16dd58100133b63f82cfa1cbf2a34d431aca7a9f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MjM1NzA1OnYy", "diffSide": "LEFT", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/NetworkPolicy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQwNzo1NzowMVrOGMApXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNjowMDozNVrOGMGcWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI0NjY4NQ==", "bodyText": "Hm. How come?", "url": "https://github.com/aws-amplify/amplify-android/pull/399#discussion_r415246685", "createdAt": "2020-04-26T07:57:01Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/NetworkPolicy.java", "diffHunk": "@@ -22,12 +22,6 @@\n  * perform a Predictions operation.\n  */\n public enum NetworkPolicy {\n-    /**\n-     * Only use cloud resources to perform online Predictions\n-     * operation.\n-     */\n-    ONLINE(\"online\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16dd58100133b63f82cfa1cbf2a34d431aca7a9f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM0MTY1Nw==", "bodyText": "We still give them the implicit option of doing so (i.e. choose \"auto\" and just not add any offline models). iOS currently doesn't support \"online\" only mode and there was apparently already a discussion that decided against giving the customer an option to explicitly specify online-only mode.", "url": "https://github.com/aws-amplify/amplify-android/pull/399#discussion_r415341657", "createdAt": "2020-04-26T16:00:35Z", "author": {"login": "raphkim"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/NetworkPolicy.java", "diffHunk": "@@ -22,12 +22,6 @@\n  * perform a Predictions operation.\n  */\n public enum NetworkPolicy {\n-    /**\n-     * Only use cloud resources to perform online Predictions\n-     * operation.\n-     */\n-    ONLINE(\"online\"),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI0NjY4NQ=="}, "originalCommit": {"oid": "16dd58100133b63f82cfa1cbf2a34d431aca7a9f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODgzNDMzOnYy", "diffSide": "RIGHT", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSRekognitionService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDowMzo1NVrOGOVRaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNjozOTozNFrOGObreQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4MTc2OQ==", "bodyText": "Does Rekognition store \"ALL\" as a labeled constant anywhere, that you could use instead?", "url": "https://github.com/aws-amplify/amplify-android/pull/399#discussion_r417681769", "createdAt": "2020-04-30T00:03:55Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSRekognitionService.java", "diffHunk": "@@ -226,6 +267,99 @@ void recognizeCelebrities(\n         return celebrities;\n     }\n \n+    private List<EntityDetails> detectEntities(Image image) throws PredictionsException {\n+        DetectFacesRequest request = new DetectFacesRequest()\n+                .withImage(image)\n+                .withAttributes(\"ALL\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eae7dff6ae9fd7ac888bd540bf9e121d7ee0c86"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc4Njc0NQ==", "bodyText": "good catch. Indeed there was!", "url": "https://github.com/aws-amplify/amplify-android/pull/399#discussion_r417786745", "createdAt": "2020-04-30T06:39:34Z", "author": {"login": "raphkim"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/service/AWSRekognitionService.java", "diffHunk": "@@ -226,6 +267,99 @@ void recognizeCelebrities(\n         return celebrities;\n     }\n \n+    private List<EntityDetails> detectEntities(Image image) throws PredictionsException {\n+        DetectFacesRequest request = new DetectFacesRequest()\n+                .withImage(image)\n+                .withAttributes(\"ALL\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4MTc2OQ=="}, "originalCommit": {"oid": "0eae7dff6ae9fd7ac888bd540bf9e121d7ee0c86"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODg0MDE2OnYy", "diffSide": "RIGHT", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyResultTransformers.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDowNjozNVrOGOVU3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwOToyMTo1OFrOGOhA8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4MjY1NQ==", "bodyText": "Does Rekognition have labeled constants somewhere for like \"Beard\" ,  etc., that you could use instead of hard-coding the string?", "url": "https://github.com/aws-amplify/amplify-android/pull/399#discussion_r417682655", "createdAt": "2020-04-30T00:06:35Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyResultTransformers.java", "diffHunk": "@@ -108,4 +124,50 @@ public static Pose fromRekognitionPose(@NonNull com.amazonaws.services.rekogniti\n \n         return amplifyLandmarks;\n     }\n+\n+    /**\n+     * Gets all the binary features from AWS Rekognition's face\n+     * details and compiles them into a single list.\n+     * @param face the Rekognition face detail object\n+     * @return the list of Amplify {@link BinaryFeature}\n+     */\n+    public static List<BinaryFeature> fromFaceDetail(FaceDetail face) {\n+        return Arrays.asList(\n+                BinaryFeature.builder()\n+                        .type(\"Beard\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eae7dff6ae9fd7ac888bd540bf9e121d7ee0c86"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc4NjI5Mw==", "bodyText": "they are individual features with strongly typed classes in Rekognition, but iOS folks decided to make them all into generic binary attributes (binary features). So FaceDetail#getBeard() returns a Beard typed object, which makes it hard to obtain constants. Perhaps I can do something like Beard.class.getSimpleName(), but that seems somewhat pointless.", "url": "https://github.com/aws-amplify/amplify-android/pull/399#discussion_r417786293", "createdAt": "2020-04-30T06:38:31Z", "author": {"login": "raphkim"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyResultTransformers.java", "diffHunk": "@@ -108,4 +124,50 @@ public static Pose fromRekognitionPose(@NonNull com.amazonaws.services.rekogniti\n \n         return amplifyLandmarks;\n     }\n+\n+    /**\n+     * Gets all the binary features from AWS Rekognition's face\n+     * details and compiles them into a single list.\n+     * @param face the Rekognition face detail object\n+     * @return the list of Amplify {@link BinaryFeature}\n+     */\n+    public static List<BinaryFeature> fromFaceDetail(FaceDetail face) {\n+        return Arrays.asList(\n+                BinaryFeature.builder()\n+                        .type(\"Beard\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4MjY1NQ=="}, "originalCommit": {"oid": "0eae7dff6ae9fd7ac888bd540bf9e121d7ee0c86"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc4NzcwNw==", "bodyText": "^The above solution would also cause SLIGHT disparity with iOS since the binary feature for glasses is hardcoded as \"EyeGlasses\", but the Rekognition class is named \"Eyeglasses\"", "url": "https://github.com/aws-amplify/amplify-android/pull/399#discussion_r417787707", "createdAt": "2020-04-30T06:41:54Z", "author": {"login": "raphkim"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyResultTransformers.java", "diffHunk": "@@ -108,4 +124,50 @@ public static Pose fromRekognitionPose(@NonNull com.amazonaws.services.rekogniti\n \n         return amplifyLandmarks;\n     }\n+\n+    /**\n+     * Gets all the binary features from AWS Rekognition's face\n+     * details and compiles them into a single list.\n+     * @param face the Rekognition face detail object\n+     * @return the list of Amplify {@link BinaryFeature}\n+     */\n+    public static List<BinaryFeature> fromFaceDetail(FaceDetail face) {\n+        return Arrays.asList(\n+                BinaryFeature.builder()\n+                        .type(\"Beard\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4MjY1NQ=="}, "originalCommit": {"oid": "0eae7dff6ae9fd7ac888bd540bf9e121d7ee0c86"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc5NTU4Ng==", "bodyText": "Hm, yea -- right now, if we are just returning arbitrary strings as part of our contract, the user will have to do like \"isThisTheRightValue\".equals(thingAmpilfyGaveMe) enuming up the values the customer will see could be a good improvement.", "url": "https://github.com/aws-amplify/amplify-android/pull/399#discussion_r417795586", "createdAt": "2020-04-30T07:00:08Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyResultTransformers.java", "diffHunk": "@@ -108,4 +124,50 @@ public static Pose fromRekognitionPose(@NonNull com.amazonaws.services.rekogniti\n \n         return amplifyLandmarks;\n     }\n+\n+    /**\n+     * Gets all the binary features from AWS Rekognition's face\n+     * details and compiles them into a single list.\n+     * @param face the Rekognition face detail object\n+     * @return the list of Amplify {@link BinaryFeature}\n+     */\n+    public static List<BinaryFeature> fromFaceDetail(FaceDetail face) {\n+        return Arrays.asList(\n+                BinaryFeature.builder()\n+                        .type(\"Beard\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4MjY1NQ=="}, "originalCommit": {"oid": "0eae7dff6ae9fd7ac888bd540bf9e121d7ee0c86"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzg3NDE2Mg==", "bodyText": "Hmm, perhaps so. These are specific types of binary features that OUR implementation happens to detect, so that wouldn't belong in the core. However, I can see it being useful inside the actual plugin module.\nI'll make a new PR to address this since it is big enough of a change to add to an already approved PR.", "url": "https://github.com/aws-amplify/amplify-android/pull/399#discussion_r417874162", "createdAt": "2020-04-30T09:21:58Z", "author": {"login": "raphkim"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/IdentifyResultTransformers.java", "diffHunk": "@@ -108,4 +124,50 @@ public static Pose fromRekognitionPose(@NonNull com.amazonaws.services.rekogniti\n \n         return amplifyLandmarks;\n     }\n+\n+    /**\n+     * Gets all the binary features from AWS Rekognition's face\n+     * details and compiles them into a single list.\n+     * @param face the Rekognition face detail object\n+     * @return the list of Amplify {@link BinaryFeature}\n+     */\n+    public static List<BinaryFeature> fromFaceDetail(FaceDetail face) {\n+        return Arrays.asList(\n+                BinaryFeature.builder()\n+                        .type(\"Beard\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4MjY1NQ=="}, "originalCommit": {"oid": "0eae7dff6ae9fd7ac888bd540bf9e121d7ee0c86"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODg0NzM4OnYy", "diffSide": "RIGHT", "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyEntitiesTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwMDoxMDoxN1rOGOVZPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQwNjozNDozNFrOGObkIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4Mzc3Mw==", "bodyText": "Wasn't there a getPredominantSentiment() or something like that? Should we provide an API for this, getPredominantEmotion() or something?\nThe thing about test code is that it tends to look like what a customer will do. If the customer just wants to know \"Is Jeff Bezos happy?\" (Insert joke here...)\n(... back from joke) what about like FeatureAssert.assertMatches(EmotionType.HAPPY, entity.getPredominantEmotion())? // Returns the one with most confidence?", "url": "https://github.com/aws-amplify/amplify-android/pull/399#discussion_r417683773", "createdAt": "2020-04-30T00:10:17Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyEntitiesTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import android.content.Context;\n+import android.graphics.Bitmap;\n+\n+import com.amplifyframework.predictions.PredictionsCategory;\n+import com.amplifyframework.predictions.aws.test.R;\n+import com.amplifyframework.predictions.models.EmotionType;\n+import com.amplifyframework.predictions.models.EntityDetails;\n+import com.amplifyframework.predictions.models.GenderBinaryType;\n+import com.amplifyframework.predictions.models.IdentifyActionType;\n+import com.amplifyframework.predictions.result.IdentifyEntitiesResult;\n+import com.amplifyframework.testutils.Assets;\n+import com.amplifyframework.testutils.FeatureAssert;\n+import com.amplifyframework.testutils.sync.SynchronousMobileClient;\n+import com.amplifyframework.testutils.sync.SynchronousPredictions;\n+import com.amplifyframework.util.CollectionUtils;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests that Predictions identify delivers a non-null\n+ * entity detection result for valid input.\n+ */\n+public final class AWSPredictionsIdentifyEntitiesTest {\n+\n+    private static final IdentifyActionType TYPE = IdentifyActionType.DETECT_ENTITIES;\n+\n+    private SynchronousPredictions predictions;\n+\n+    /**\n+     * Configure Predictions category before each test.\n+     * @throws Exception if mobile client initialization fails\n+     */\n+    @Before\n+    public void setUp() throws Exception {\n+        Context context = getApplicationContext();\n+\n+        // Set up Auth\n+        SynchronousMobileClient.instance().initialize();\n+\n+        // Delegate to Predictions category\n+        PredictionsCategory asyncDelegate =\n+                TestPredictionsCategory.create(context, R.raw.amplifyconfiguration);\n+        predictions = SynchronousPredictions.delegatingTo(asyncDelegate);\n+    }\n+\n+    /**\n+     * Assert general entity detection works.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    @SuppressWarnings(\"MagicNumber\") // Jeff Bezos' current age\n+    public void testIdentifyEntities() throws Exception {\n+        final Bitmap image = Assets.readAsBitmap(\"jeff_bezos.jpg\");\n+\n+        // Identify the entity inside given image and assert non-null result.\n+        IdentifyEntitiesResult result = (IdentifyEntitiesResult) predictions.identify(TYPE, image);\n+        assertNotNull(result);\n+\n+        // Assert that at least one entity is detected\n+        assertFalse(CollectionUtils.isNullOrEmpty(result.getEntities()));\n+        EntityDetails entity = result.getEntities().get(0);\n+\n+        // Assert features from detected entity\n+        FeatureAssert.assertMatches(GenderBinaryType.MALE, entity.getGender());\n+        FeatureAssert.assertMatches(EmotionType.HAPPY, Collections.max(entity.getEmotions()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eae7dff6ae9fd7ac888bd540bf9e121d7ee0c86"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzc4NDg2NA==", "bodyText": "it would be convenient in a way... but that would unfortunately break the platform parity.\nTo be completely fair, iOS's implementation of interpret provides BOTH predominant sentiment AND the map of all other sentiments (and their confidence scores), while I only provided the predominant sentiment. I'll leave emotions as it is for now, but it would certainly be a nice addition in the future on both platforms.", "url": "https://github.com/aws-amplify/amplify-android/pull/399#discussion_r417784864", "createdAt": "2020-04-30T06:34:34Z", "author": {"login": "raphkim"}, "path": "aws-predictions/src/androidTest/java/com/amplifyframework/predictions/aws/AWSPredictionsIdentifyEntitiesTest.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws;\n+\n+import android.content.Context;\n+import android.graphics.Bitmap;\n+\n+import com.amplifyframework.predictions.PredictionsCategory;\n+import com.amplifyframework.predictions.aws.test.R;\n+import com.amplifyframework.predictions.models.EmotionType;\n+import com.amplifyframework.predictions.models.EntityDetails;\n+import com.amplifyframework.predictions.models.GenderBinaryType;\n+import com.amplifyframework.predictions.models.IdentifyActionType;\n+import com.amplifyframework.predictions.result.IdentifyEntitiesResult;\n+import com.amplifyframework.testutils.Assets;\n+import com.amplifyframework.testutils.FeatureAssert;\n+import com.amplifyframework.testutils.sync.SynchronousMobileClient;\n+import com.amplifyframework.testutils.sync.SynchronousPredictions;\n+import com.amplifyframework.util.CollectionUtils;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests that Predictions identify delivers a non-null\n+ * entity detection result for valid input.\n+ */\n+public final class AWSPredictionsIdentifyEntitiesTest {\n+\n+    private static final IdentifyActionType TYPE = IdentifyActionType.DETECT_ENTITIES;\n+\n+    private SynchronousPredictions predictions;\n+\n+    /**\n+     * Configure Predictions category before each test.\n+     * @throws Exception if mobile client initialization fails\n+     */\n+    @Before\n+    public void setUp() throws Exception {\n+        Context context = getApplicationContext();\n+\n+        // Set up Auth\n+        SynchronousMobileClient.instance().initialize();\n+\n+        // Delegate to Predictions category\n+        PredictionsCategory asyncDelegate =\n+                TestPredictionsCategory.create(context, R.raw.amplifyconfiguration);\n+        predictions = SynchronousPredictions.delegatingTo(asyncDelegate);\n+    }\n+\n+    /**\n+     * Assert general entity detection works.\n+     * @throws Exception if prediction fails\n+     */\n+    @Test\n+    @SuppressWarnings(\"MagicNumber\") // Jeff Bezos' current age\n+    public void testIdentifyEntities() throws Exception {\n+        final Bitmap image = Assets.readAsBitmap(\"jeff_bezos.jpg\");\n+\n+        // Identify the entity inside given image and assert non-null result.\n+        IdentifyEntitiesResult result = (IdentifyEntitiesResult) predictions.identify(TYPE, image);\n+        assertNotNull(result);\n+\n+        // Assert that at least one entity is detected\n+        assertFalse(CollectionUtils.isNullOrEmpty(result.getEntities()));\n+        EntityDetails entity = result.getEntities().get(0);\n+\n+        // Assert features from detected entity\n+        FeatureAssert.assertMatches(GenderBinaryType.MALE, entity.getGender());\n+        FeatureAssert.assertMatches(EmotionType.HAPPY, Collections.max(entity.getEmotions()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzY4Mzc3Mw=="}, "originalCommit": {"oid": "0eae7dff6ae9fd7ac888bd540bf9e121d7ee0c86"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1455, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}