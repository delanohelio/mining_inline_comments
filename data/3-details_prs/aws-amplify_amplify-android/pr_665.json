{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1ODU2OTk4", "number": 665, "title": "chore(datastore) Remove all API deserialization logic in DataStore, and rely on API instead", "bodyText": "This PR is a prerequisite for adding pagination support to DataStore.   The API category response deserializer knows how to extract pagination details from an AppSync response.  This PR refactors the AppSyncClient in DataStore to rely on API's response deserializer, instead of having its own implementation.\nSummary\n\nMoved ModelMetadata and ModelWithMetadata from aws-datastore to aws-api-appsync, and added a ModelWithMetadataDeserializer in API.\nRefactored AppSyncRequestFactory (in DataStore) to build the complete GraphQLRequest objects. Instead of just the query document, it also handles the variables too now.\nDeleted AppSyncResponseDeserializer (in DataStore), since we are now relying on the one in API.\n\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-07-23T17:33:08Z", "url": "https://github.com/aws-amplify/amplify-android/pull/665", "merged": true, "mergeCommit": {"oid": "27503d7a64c014e39eea4062d1962fb5b5128a27"}, "closed": true, "closedAt": "2020-07-24T23:22:12Z", "author": {"login": "richardmcclellan"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3ytDlgH2gAyNDU1ODU2OTk4Ojk1NzZmOTM5YTA5ZjBjZTc3NzhkMWZlNjQwYTNjMGQzYTZkYjdmODM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc4Lc06gH2gAyNDU1ODU2OTk4OmIwMDk0NDgzNTZiNjQwMDQ0NGEyZTA2ODU2ZTg0ZjFhYTJjZjU2NTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9576f939a09f0ce7778d1fe640a3c0d3a6db7f83", "author": {"user": {"login": "richardmcclellan", "name": "Richard McClellan"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/9576f939a09f0ce7778d1fe640a3c0d3a6db7f83", "committedDate": "2020-07-23T17:16:23Z", "message": "chore(datastore) Use API category to parse AppSync responses into models, instead of having duplicate logic in datastore"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bcee8d8471a8c5ce0a6313949f5e11bff139cab", "author": {"user": {"login": "richardmcclellan", "name": "Richard McClellan"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/2bcee8d8471a8c5ce0a6313949f5e11bff139cab", "committedDate": "2020-07-23T19:54:26Z", "message": "Update DataStorePluginTests to expect strongly typed responses instead of Strings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NTE5MzEw", "url": "https://github.com/aws-amplify/amplify-android/pull/665#pullrequestreview-454519310", "createdAt": "2020-07-23T21:49:13Z", "commit": {"oid": "2bcee8d8471a8c5ce0a6313949f5e11bff139cab"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo0OToxM1rOG2cwqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QyMTo1NTo1OVrOG2c8GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NzQ5OQ==", "bodyText": "Should it be <? extends Model>?", "url": "https://github.com/aws-amplify/amplify-android/pull/665#discussion_r459747499", "createdAt": "2020-07-23T21:49:13Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api-appsync/src/main/java/com/amplifyframework/datastore/appsync/ModelWithMetadataDeserializer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.appsync;\n+\n+import com.amplifyframework.core.model.Model;\n+\n+import com.google.gson.JsonDeserializationContext;\n+import com.google.gson.JsonDeserializer;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonParseException;\n+\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+\n+/**\n+ * Deserializer for ModelWithMetadata.\n+ */\n+public final class ModelWithMetadataDeserializer implements JsonDeserializer<ModelWithMetadata<Model>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcee8d8471a8c5ce0a6313949f5e11bff139cab"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0NzcxNg==", "bodyText": "Not the subclass simple name?", "url": "https://github.com/aws-amplify/amplify-android/pull/665#discussion_r459747716", "createdAt": "2020-07-23T21:49:46Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/main/java/com/amplifyframework/api/aws/AppSyncGraphQLRequestFactory.java", "diffHunk": "@@ -204,7 +204,11 @@ private AppSyncGraphQLRequestFactory() { }\n             }\n \n             if (!QueryPredicates.all().equals(predicate)) {\n-                String conditionType = \"Model\" + graphQlTypeName + \"ConditionInput\";\n+                String conditionType = new StringBuilder()\n+                    .append(\"Model\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcee8d8471a8c5ce0a6313949f5e11bff139cab"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0ODk0OA==", "bodyText": "formatting here is weird", "url": "https://github.com/aws-amplify/amplify-android/pull/665#discussion_r459748948", "createdAt": "2020-07-23T21:52:42Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/appsync/AppSyncRequestFactoryTest.java", "diffHunk": "@@ -43,68 +44,80 @@\n     /**\n      * Validates the construction of a base-sync query document.\n      * @throws DataStoreException On failure to interrogate fields in Blog.class\n+     * @throws JSONException from JSONAssert.assertEquals\n      */\n     @Test\n-    public void validateRequestGenerationForBaseSync() throws DataStoreException {\n-        assertEquals(\n+    public void validateRequestGenerationForBaseSync() throws DataStoreException, JSONException {\n+        JSONAssert.assertEquals(\n             Resources.readAsString(\"base-sync-request-document-for-blog-owner.txt\"),\n-            AppSyncRequestFactory.buildSyncRequest(BlogOwner.class, null, null).getQuery()\n+            AppSyncRequestFactory.buildSyncRequest(BlogOwner.class, null, null).getContent(),\n+            true\n         );\n     }\n \n     /**\n      * Validates the construction of a delta-sync query document.\n      * @throws DataStoreException On failure to interrogate fields in Blog.class.\n+     * @throws JSONException from JSONAssert.assertEquals\n      */\n     @Test\n-    public void validateRequestGenerationForDeltaSync() throws DataStoreException {\n-        final GraphQLRequest<Iterable<Post>> request =\n-                AppSyncRequestFactory.buildSyncRequest(Post.class, 123123123L, null);\n-\n-        assertEquals(Resources.readAsString(\"delta-sync-request-document-for-post.txt\"), request.getQuery());\n-        assertEquals(Collections.singletonMap(\"lastSync\", 123123123L), request.getVariables());\n+    public void validateRequestGenerationForDeltaSync() throws DataStoreException, JSONException {\n+        JSONAssert.assertEquals(Resources.readAsString(\"delta-sync-request-document-for-post.txt\"),\n+                AppSyncRequestFactory.buildSyncRequest(Post.class, 123123123L, null).getContent(),\n+                true);\n     }\n \n     /**\n      * Validates that the nextToken parameter is correctly generate for a Sync query.\n      * @throws DataStoreException On failure to interrogate the BlogOwner.class.\n+     * @throws JSONException from JSONAssert.assertEquals.\n      */\n     @Test\n-    public void validateRequestGenerationForPagination() throws DataStoreException {\n+    public void validateRequestGenerationForPagination() throws DataStoreException, JSONException {\n         final String nextToken = Resources.readAsString(\"base-sync-request-next-token-value.txt\").trim();\n         final GraphQLRequest<Iterable<Post>> request =\n                 AppSyncRequestFactory.buildSyncRequest(BlogOwner.class, null, nextToken);\n-        assertEquals(Resources.readAsString(\"base-sync-request-paginating-blog-owners.txt\"), request.getQuery());\n-        assertEquals(Collections.singletonMap(\"nextToken\", nextToken), request.getVariables());\n+        JSONAssert.assertEquals(Resources.readAsString(\"base-sync-request-paginating-blog-owners.txt\"),\n+                request.getContent(),\n+                true);\n     }\n \n     /**\n      * Checks that we're getting the expected output for a mutation with predicate.\n      * @throws DataStoreException If the output does not match.\n+     * @throws JSONException from JSONAssert.assertEquals.\n      */\n     @Test\n-    public void validateUpdateWithPredicateGeneration() throws DataStoreException {\n-        assertEquals(\n+    public void validateUpdateWithPredicateGeneration() throws DataStoreException, JSONException {\n+        String blogOwnerId = \"926d7ee8-4ea5-40c0-8e62-3fb80b2a2edd\";\n+        BlogOwner blogOwner = BlogOwner.builder().name(\"John Doe\").id(blogOwnerId).build();\n+        JSONAssert.assertEquals(\n             Resources.readAsString(\"update-blog-owner-with-predicate.txt\"),\n-            AppSyncRequestFactory.buildUpdateDoc(BlogOwner.class, true)\n+            AppSyncRequestFactory.buildUpdateRequest(\n+                    blogOwner, 42, BlogOwner.WEA.contains(\"ther\")).getContent(),\n+            true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcee8d8471a8c5ce0a6313949f5e11bff139cab"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTAxOA==", "bodyText": "ditto", "url": "https://github.com/aws-amplify/amplify-android/pull/665#discussion_r459749018", "createdAt": "2020-07-23T21:52:51Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/appsync/AppSyncRequestFactoryTest.java", "diffHunk": "@@ -43,68 +44,80 @@\n     /**\n      * Validates the construction of a base-sync query document.\n      * @throws DataStoreException On failure to interrogate fields in Blog.class\n+     * @throws JSONException from JSONAssert.assertEquals\n      */\n     @Test\n-    public void validateRequestGenerationForBaseSync() throws DataStoreException {\n-        assertEquals(\n+    public void validateRequestGenerationForBaseSync() throws DataStoreException, JSONException {\n+        JSONAssert.assertEquals(\n             Resources.readAsString(\"base-sync-request-document-for-blog-owner.txt\"),\n-            AppSyncRequestFactory.buildSyncRequest(BlogOwner.class, null, null).getQuery()\n+            AppSyncRequestFactory.buildSyncRequest(BlogOwner.class, null, null).getContent(),\n+            true\n         );\n     }\n \n     /**\n      * Validates the construction of a delta-sync query document.\n      * @throws DataStoreException On failure to interrogate fields in Blog.class.\n+     * @throws JSONException from JSONAssert.assertEquals\n      */\n     @Test\n-    public void validateRequestGenerationForDeltaSync() throws DataStoreException {\n-        final GraphQLRequest<Iterable<Post>> request =\n-                AppSyncRequestFactory.buildSyncRequest(Post.class, 123123123L, null);\n-\n-        assertEquals(Resources.readAsString(\"delta-sync-request-document-for-post.txt\"), request.getQuery());\n-        assertEquals(Collections.singletonMap(\"lastSync\", 123123123L), request.getVariables());\n+    public void validateRequestGenerationForDeltaSync() throws DataStoreException, JSONException {\n+        JSONAssert.assertEquals(Resources.readAsString(\"delta-sync-request-document-for-post.txt\"),\n+                AppSyncRequestFactory.buildSyncRequest(Post.class, 123123123L, null).getContent(),\n+                true);\n     }\n \n     /**\n      * Validates that the nextToken parameter is correctly generate for a Sync query.\n      * @throws DataStoreException On failure to interrogate the BlogOwner.class.\n+     * @throws JSONException from JSONAssert.assertEquals.\n      */\n     @Test\n-    public void validateRequestGenerationForPagination() throws DataStoreException {\n+    public void validateRequestGenerationForPagination() throws DataStoreException, JSONException {\n         final String nextToken = Resources.readAsString(\"base-sync-request-next-token-value.txt\").trim();\n         final GraphQLRequest<Iterable<Post>> request =\n                 AppSyncRequestFactory.buildSyncRequest(BlogOwner.class, null, nextToken);\n-        assertEquals(Resources.readAsString(\"base-sync-request-paginating-blog-owners.txt\"), request.getQuery());\n-        assertEquals(Collections.singletonMap(\"nextToken\", nextToken), request.getVariables());\n+        JSONAssert.assertEquals(Resources.readAsString(\"base-sync-request-paginating-blog-owners.txt\"),\n+                request.getContent(),\n+                true);\n     }\n \n     /**\n      * Checks that we're getting the expected output for a mutation with predicate.\n      * @throws DataStoreException If the output does not match.\n+     * @throws JSONException from JSONAssert.assertEquals.\n      */\n     @Test\n-    public void validateUpdateWithPredicateGeneration() throws DataStoreException {\n-        assertEquals(\n+    public void validateUpdateWithPredicateGeneration() throws DataStoreException, JSONException {\n+        String blogOwnerId = \"926d7ee8-4ea5-40c0-8e62-3fb80b2a2edd\";\n+        BlogOwner blogOwner = BlogOwner.builder().name(\"John Doe\").id(blogOwnerId).build();\n+        JSONAssert.assertEquals(\n             Resources.readAsString(\"update-blog-owner-with-predicate.txt\"),\n-            AppSyncRequestFactory.buildUpdateDoc(BlogOwner.class, true)\n+            AppSyncRequestFactory.buildUpdateRequest(\n+                    blogOwner, 42, BlogOwner.WEA.contains(\"ther\")).getContent(),\n+            true\n         );\n     }\n \n     /**\n      * Checks that we're getting the expected output for a mutation with predicate.\n      * @throws DataStoreException If the output does not match.\n+     * @throws JSONException from JSONAssert.assertEquals.\n      */\n     @Test\n-    public void validateDeleteWithPredicateGeneration() throws DataStoreException {\n-        assertEquals(\n+    public void validateDeleteWithPredicateGeneration() throws DataStoreException, JSONException {\n+        JSONAssert.assertEquals(\n             Resources.readAsString(\"delete-person-with-predicate.txt\"),\n-            AppSyncRequestFactory.buildDeletionDoc(Person.class, true)\n+            AppSyncRequestFactory.buildDeletionRequest(\n+                    Person.class, \"123\", 456, Person.AGE.gt(40)).getContent(),\n+            true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcee8d8471a8c5ce0a6313949f5e11bff139cab"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc0OTc5Mg==", "bodyText": "Does this need to be explicitly present and null? Or can we figure out how to omit this block from the output, if the value is null?", "url": "https://github.com/aws-amplify/amplify-android/pull/665#discussion_r459749792", "createdAt": "2020-07-23T21:54:34Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/resources/on-delete-request-for-blog-owner.txt", "diffHunk": "@@ -11,3 +12,6 @@ subscription OnDeleteBlogOwner {\n     wea\n   }\n }\n+\",\n+  \"variables\": null\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcee8d8471a8c5ce0a6313949f5e11bff139cab"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTc1MDQyNA==", "bodyText": "Hm. Are there any remaining types we want/need to paginate over, that are not models?\nIterable<String>, <String>, ModelWithMutation<T>, CustomGizmoNotFromCodeGen?", "url": "https://github.com/aws-amplify/amplify-android/pull/665#discussion_r459750424", "createdAt": "2020-07-23T21:55:59Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/api/graphql/PaginatedResult.java", "diffHunk": "@@ -15,15 +15,13 @@\n \n package com.amplifyframework.api.graphql;\n \n-import com.amplifyframework.core.model.Model;\n-\n /**\n  * Represents a page of results returned from an API.  Specifically, contains the list of items in the page, as well as\n  * a GraphQLRequest which can be used to obtain the next page.\n  *\n- * @param <T> Type of the items in the list.  Must extend Model.\n+ * @param <T> Type of the items in the list.\n  */\n-public abstract class PaginatedResult<T extends Model> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bcee8d8471a8c5ce0a6313949f5e11bff139cab"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NTc2NTI0", "url": "https://github.com/aws-amplify/amplify-android/pull/665#pullrequestreview-454576524", "createdAt": "2020-07-24T00:21:27Z", "commit": {"oid": "2bcee8d8471a8c5ce0a6313949f5e11bff139cab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dac908fe571e89c2998d13d8973af0824cb3ad00", "author": {"user": {"login": "richardmcclellan", "name": "Richard McClellan"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/dac908fe571e89c2998d13d8973af0824cb3ad00", "committedDate": "2020-07-24T00:25:21Z", "message": "PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b009448356b6400444a2e06856e84f1aa2cf5655", "author": {"user": {"login": "richardmcclellan", "name": "Richard McClellan"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/b009448356b6400444a2e06856e84f1aa2cf5655", "committedDate": "2020-07-24T22:06:17Z", "message": "Get AppSyncClientInstrumentationTest working again, and fix two bugs uncovered by running it"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1892, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}