{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMDM3Mjkz", "number": 1027, "title": "fix(datastore) release startStopSemaphore when start returns, not when API sync completes", "bodyText": "Fixes #1010 (\"Unable to acquire orchestrator lock. Transition currently in progress\") (also reported in #977 (comment)). Previously, if you call two DataStore operations right after each other, the second one would usually fail.  Each operation calls start, which previously required obtaining a semaphore, within a 2 second timeout.  Previously, the semaphore was locked until the API sync completed, but with this PR, the lock is released as soon as the storage observer is initialized (which only takes a few milliseconds).\n\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-12-05T16:00:32Z", "url": "https://github.com/aws-amplify/amplify-android/pull/1027", "merged": true, "mergeCommit": {"oid": "2abf80827ec75f3e93e84c96f0407c789d81bb96"}, "closed": true, "closedAt": "2020-12-08T16:49:51Z", "author": {"login": "richardmcclellan"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdjOAqpgH2gAyNTMzMDM3MjkzOmM3NGRhYzMzZDZiNGM1NWNlMDQ2YmU1ZTE0NWQyNmE4MDIyOTM1OTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkMyKxAFqTU0NzQwOTI1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c74dac33d6b4c55ce046be5e145d26a802293599", "author": {"user": {"login": "richardmcclellan", "name": "Richard McClellan"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/c74dac33d6b4c55ce046be5e145d26a802293599", "committedDate": "2020-12-05T15:23:59Z", "message": "fix(datastore) release startStopSemaphore after storage observer inits, not when API sync completes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NjQ1MTYx", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#pullrequestreview-545645161", "createdAt": "2020-12-05T19:50:49Z", "commit": {"oid": "c74dac33d6b4c55ce046be5e145d26a802293599"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQxOTo1MDo0OVrOIAApFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMDowMDoxNVrOIAAu4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MTQzMQ==", "bodyText": "The goal of including \"target\" was to distinguish between what we want the orchestrator to be doing, and what it actually is doing right now. apiSyncEnabled I think means \"should be enabled,\" but it's more ambiguous of a name.\nSame  deal with the enum, it was an over-engineered Boolean for the sake of having clearly labeled semantics to the true/false.", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r536881431", "createdAt": "2020-12-05T19:50:49Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -62,7 +60,7 @@\n     private final MutationProcessor mutationProcessor;\n     private final QueryPredicateProvider queryPredicateProvider;\n     private final StorageObserver storageObserver;\n-    private final Supplier<Mode> targetMode;\n+    private final boolean apiSyncEnabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c74dac33d6b4c55ce046be5e145d26a802293599"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MTgxOQ==", "bodyText": "You could theoretically add the lock acquisition logic into a doOnSubscribe, to get visual symmetry with the doFinally? This is an idle thought, not a recommendation.", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r536881819", "createdAt": "2020-12-05T19:53:04Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -145,169 +143,86 @@ public Orchestrator(\n     }\n \n     /**\n-     * Checks if the orchestrator is running in the desired target state.\n-     * @return true if so, false otherwise.\n+     * Start the orchestrator.\n+     * @return A completable which emits success when the orchestrator has transitioned to LOCAL_ONLY (synchronously)\n+     *      and started (asynchronously) the transition to SYNC_VIA_API, if an API is available.\n      */\n-    public boolean isStarted() {\n-        return ObjectsCompat.equals(targetMode.get(), currentMode.get());\n+    public synchronized Completable start() {\n+        return performSynchronized(Completable.fromAction(this::transitionToStarted));\n     }\n \n     /**\n-     * Checks if the orchestrator is stopped.\n-     * @return true if so, false otherwise.\n-     */\n-    @SuppressWarnings(\"unused\")\n-    public boolean isStopped() {\n-        return Mode.STOPPED.equals(currentMode.get());\n-    }\n-\n-    /**\n-     * Start performing sync operations between the local storage adapter\n-     * and the remote GraphQL endpoint.\n-     * @throws DataStoreException on failure to aquire start stop lock.\n+     * Stop the orchestrator.\n+     * @return A completable which emits success when orchestrator stops\n      */\n-    public synchronized void start() throws DataStoreException {\n-        if (tryAcquireStartStopLock(LOCAL_OP_TIMEOUT_SECONDS, TimeUnit.SECONDS)) {\n-            if (isStarted()) {\n-                startStopSemaphore.release();\n-                return;\n-            }\n-            disposables.add(transitionCompletable()\n-                .doOnSubscribe(subscriber -> {\n-                    LOG.info(\"Starting the orchestrator.\");\n-                })\n-                .doOnComplete(() -> {\n-                    LOG.info(\"Orchestrator completed a transition\");\n-                    if (isStarted()) {\n-                        Amplify.Hub.publish(HubChannel.DATASTORE,\n-                            HubEvent.create(DataStoreChannelEventName.READY));\n-                    }\n-                })\n-                .doOnError(failure -> {\n-                    LOG.warn(\"Failed to start orchestrator.\", failure);\n-                })\n-                .doOnDispose(() -> LOG.debug(\"Orchestrator disposed a transition.\"))\n-                .doFinally(startStopSemaphore::release)\n-                .subscribeOn(startStopScheduler)\n-                .subscribe()\n-            );\n-        } else {\n-            throw new DataStoreException(\"Unable to acquire orchestrator lock. Transition currently in \" +\n-                    \"progress.\", \"Retry your request\");\n-        }\n+    public synchronized Completable stop() {\n+        return performSynchronized(transitionToStopped());\n     }\n \n-    private boolean tryAcquireStartStopLock(long opTimeout, TimeUnit timeUnit) {\n+    private Completable performSynchronized(Completable completable) {\n         boolean permitAvailable = startStopSemaphore.availablePermits() > 0;\n         LOG.debug(\"Attempting to acquire lock. Permits available = \" + permitAvailable);\n         try {\n-            if (!startStopSemaphore.tryAcquire(opTimeout, timeUnit)) {\n-                LOG.warn(\"Unable to acquire orchestrator lock. Transition currently in progress.\");\n-                return false;\n+            if (!startStopSemaphore.tryAcquire(LOCAL_OP_TIMEOUT_SECONDS, TimeUnit.SECONDS)) {\n+                return Completable.error(new DataStoreException(\"Timed out acquiring lock.\",\n+                        \"Retry your request.\"));\n             }\n         } catch (InterruptedException exception) {\n-            return false;\n+            return Completable.error(new DataStoreException(\"Interrupted while acquiring lock.\",\n+                    \"Retry your request.\"));\n         }\n         LOG.debug(\"Lock acquired.\");\n-        return true;\n+        return completable.doFinally(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c74dac33d6b4c55ce046be5e145d26a802293599"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MjMxNw==", "bodyText": "Should we have transition states for all of the transitions? Does it matter?\n(Stopped) -> (Starting local mode) -> (Local model) -> (Starting API sync) -> (API sync enabled)\n\nand:\n(API sync enabled) -> (stopping api sync) -> (local mode) -> (stopping local mode) -> (Stopped)\n\nReally, this is a state machine. The transitions I list above are only one possible (perhaps even unlikely) traversal through the states.", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r536882317", "createdAt": "2020-12-05T19:56:23Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -145,169 +143,86 @@ public Orchestrator(\n     }\n \n     /**\n-     * Checks if the orchestrator is running in the desired target state.\n-     * @return true if so, false otherwise.\n+     * Start the orchestrator.\n+     * @return A completable which emits success when the orchestrator has transitioned to LOCAL_ONLY (synchronously)\n+     *      and started (asynchronously) the transition to SYNC_VIA_API, if an API is available.\n      */\n-    public boolean isStarted() {\n-        return ObjectsCompat.equals(targetMode.get(), currentMode.get());\n+    public synchronized Completable start() {\n+        return performSynchronized(Completable.fromAction(this::transitionToStarted));\n     }\n \n     /**\n-     * Checks if the orchestrator is stopped.\n-     * @return true if so, false otherwise.\n-     */\n-    @SuppressWarnings(\"unused\")\n-    public boolean isStopped() {\n-        return Mode.STOPPED.equals(currentMode.get());\n-    }\n-\n-    /**\n-     * Start performing sync operations between the local storage adapter\n-     * and the remote GraphQL endpoint.\n-     * @throws DataStoreException on failure to aquire start stop lock.\n+     * Stop the orchestrator.\n+     * @return A completable which emits success when orchestrator stops\n      */\n-    public synchronized void start() throws DataStoreException {\n-        if (tryAcquireStartStopLock(LOCAL_OP_TIMEOUT_SECONDS, TimeUnit.SECONDS)) {\n-            if (isStarted()) {\n-                startStopSemaphore.release();\n-                return;\n-            }\n-            disposables.add(transitionCompletable()\n-                .doOnSubscribe(subscriber -> {\n-                    LOG.info(\"Starting the orchestrator.\");\n-                })\n-                .doOnComplete(() -> {\n-                    LOG.info(\"Orchestrator completed a transition\");\n-                    if (isStarted()) {\n-                        Amplify.Hub.publish(HubChannel.DATASTORE,\n-                            HubEvent.create(DataStoreChannelEventName.READY));\n-                    }\n-                })\n-                .doOnError(failure -> {\n-                    LOG.warn(\"Failed to start orchestrator.\", failure);\n-                })\n-                .doOnDispose(() -> LOG.debug(\"Orchestrator disposed a transition.\"))\n-                .doFinally(startStopSemaphore::release)\n-                .subscribeOn(startStopScheduler)\n-                .subscribe()\n-            );\n-        } else {\n-            throw new DataStoreException(\"Unable to acquire orchestrator lock. Transition currently in \" +\n-                    \"progress.\", \"Retry your request\");\n-        }\n+    public synchronized Completable stop() {\n+        return performSynchronized(transitionToStopped());\n     }\n \n-    private boolean tryAcquireStartStopLock(long opTimeout, TimeUnit timeUnit) {\n+    private Completable performSynchronized(Completable completable) {\n         boolean permitAvailable = startStopSemaphore.availablePermits() > 0;\n         LOG.debug(\"Attempting to acquire lock. Permits available = \" + permitAvailable);\n         try {\n-            if (!startStopSemaphore.tryAcquire(opTimeout, timeUnit)) {\n-                LOG.warn(\"Unable to acquire orchestrator lock. Transition currently in progress.\");\n-                return false;\n+            if (!startStopSemaphore.tryAcquire(LOCAL_OP_TIMEOUT_SECONDS, TimeUnit.SECONDS)) {\n+                return Completable.error(new DataStoreException(\"Timed out acquiring lock.\",\n+                        \"Retry your request.\"));\n             }\n         } catch (InterruptedException exception) {\n-            return false;\n+            return Completable.error(new DataStoreException(\"Interrupted while acquiring lock.\",\n+                    \"Retry your request.\"));\n         }\n         LOG.debug(\"Lock acquired.\");\n-        return true;\n+        return completable.doFinally(() -> {\n+            startStopSemaphore.release();\n+            LOG.debug(\"Lock released.\");\n+        });\n     }\n \n-    private Completable transitionCompletable() {\n-        Mode current = currentMode.get();\n-        Mode target = targetMode.get();\n-        if (ObjectsCompat.equals(current, target)) {\n-            return Completable.complete();\n-        }\n-        LOG.info(String.format(Locale.US,\n-            \"DataStore orchestrator transitioning states. \" +\n-                \"Current mode = %s, target mode = %s.\", current, target\n-        ));\n-\n-        switch (target) {\n+    private void transitionToStarted() throws DataStoreException {\n+        switch (currentMode.get()) {\n             case STOPPED:\n-                return transitionToStopped(current);\n+                LOG.info(\"Starting the orchestrator.\");\n+                startObservingStorageChanges();\n+                if (apiSyncEnabled) {\n+                    startApiSync();\n+                } else {\n+                    LOG.info(\"Started the orchestrator in local only mode.\");\n+                    publishReadyEvent();\n+                }\n+                break;\n             case LOCAL_ONLY:\n-                return transitionToLocalOnly(current);\n+                if (apiSyncEnabled) {\n+                    startApiSync();\n+                }\n+                break;\n+            case SYNC_STARTING:\n             case SYNC_VIA_API:\n-                return transitionToApiSync(current);\n             default:\n-                return unknownMode(target);\n+                break;\n         }\n     }\n \n-    /**\n-     * Stop the orchestrator.\n-     * @return A completable which emits success when orchestrator stops\n-     */\n-    public synchronized Completable stop() {\n+    private Completable transitionToStopped() {\n         LOG.info(\"DataStore orchestrator stopping. Current mode = \" + currentMode.get().name());\n-        if (tryAcquireStartStopLock(LOCAL_OP_TIMEOUT_SECONDS, TimeUnit.SECONDS)) {\n-            disposables.clear();\n-            return transitionToStopped(currentMode.get())\n-                .subscribeOn(startStopScheduler)\n-                .doFinally(startStopSemaphore::release);\n-        } else {\n-            return Completable.error(new DataStoreException(\"Unable to acquire orchestrator lock. \" +\n-                                                                \"Transition currently in progress.\",\n-                                                            \"Retry your operation\"));\n-        }\n-\n-    }\n-\n-    private static Completable unknownMode(Mode mode) {\n-        return Completable.error(new DataStoreException(\n-            \"Orchestrator state machine made reference to unknown mode = \" + mode.name(),\n-            AmplifyException.REPORT_BUG_TO_AWS_SUGGESTION\n-        ));\n-    }\n-\n-    private Completable transitionToStopped(Mode current) {\n-        switch (current) {\n+        disposables.clear();\n+        switch (currentMode.get()) {\n             case SYNC_VIA_API:\n+            case SYNC_STARTING:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c74dac33d6b4c55ce046be5e145d26a802293599"}, "originalPosition": 214}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MjQwNQ==", "bodyText": "Hm, yea! Good fix. This looks bad.", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r536882405", "createdAt": "2020-12-05T19:56:58Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -319,7 +234,8 @@ private void startObservingStorageChanges() {\n                 throw new TimeoutException(\"Timed out while preparing local-only mode.\");\n             }\n         } catch (Throwable throwable) {\n-            LOG.warn(\"Failed to start observing storage changes.\", throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c74dac33d6b4c55ce046be5e145d26a802293599"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MjYxMQ==", "bodyText": "Maybe we should rename this now. Formerly, it was kind of a component API between the Orchestrator component and its consumer. Now, it is more like a state internal enumeration of the possible states.\nMaybe this is just a State, now?", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r536882611", "createdAt": "2020-12-05T19:58:27Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/Orchestrator.java", "diffHunk": "@@ -411,7 +344,7 @@ private Completable stopApiSync() {\n     }\n \n     /**\n-     * The mode of operation for the Orchestrator's synchronization logic.\n+     * The current state of the Orchestrator.\n      */\n     public enum Mode {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c74dac33d6b4c55ce046be5e145d26a802293599"}, "originalPosition": 314}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4Mjc1OQ==", "bodyText": "(Comment looks out of date.)", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r536882759", "createdAt": "2020-12-05T19:59:23Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/OrchestratorTest.java", "diffHunk": "@@ -80,7 +79,7 @@ public void setup() throws AmplifyException {\n \n         // SUBSCRIPTIONS_ESTABLISHED indicates that the orchestrator is up and running.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c74dac33d6b4c55ce046be5e145d26a802293599"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg4MjkxMg==", "bodyText": "maybe TestObserver<Void> observer = orchestrator.start().test()? I think those auto-dispose, which is cool.", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r536882912", "createdAt": "2020-12-05T20:00:15Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/OrchestratorTest.java", "diffHunk": "@@ -122,7 +121,7 @@ public void setup() throws AmplifyException {\n     @Test\n     public void itemsPlacedInStorageArePublishedToNetwork() throws AmplifyException {\n         // Arrange: orchestrator is running\n-        orchestrator.start();\n+        orchestrator.start().subscribe();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c74dac33d6b4c55ce046be5e145d26a802293599"}, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": null}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1b1f285f5e09c66fbde952f0f54d0b5d8f40757", "author": {"user": {"login": "richardmcclellan", "name": "Richard McClellan"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/d1b1f285f5e09c66fbde952f0f54d0b5d8f40757", "committedDate": "2020-12-07T18:14:55Z", "message": "PR feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": null, "afterCommit": {"oid": "d1b1f285f5e09c66fbde952f0f54d0b5d8f40757", "author": {"user": {"login": "richardmcclellan", "name": "Richard McClellan"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/d1b1f285f5e09c66fbde952f0f54d0b5d8f40757", "committedDate": "2020-12-07T18:14:55Z", "message": "PR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2NzIwNzgx", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#pullrequestreview-546720781", "createdAt": "2020-12-08T03:36:15Z", "commit": {"oid": "d1b1f285f5e09c66fbde952f0f54d0b5d8f40757"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzozNjoxNVrOIBFcuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQwMzozOToyOFrOIBFgtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAwODc2MA==", "bodyText": "Should this one happen on Schedulers.io() as above?", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r538008760", "createdAt": "2020-12-08T03:36:15Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/AWSDataStorePlugin.java", "diffHunk": "@@ -235,47 +235,38 @@ private Completable initializeStorageAdapter(Context context) {\n         ));\n     }\n \n-    private void waitForInitialization(@NonNull Action onComplete, @NonNull Consumer<DataStoreException> onError) {\n-        Completable.create(emitter -> {\n-            categoryInitializationsPending.await();\n-            emitter.onComplete();\n-        })\n-                .timeout(LIFECYCLE_TIMEOUT_MS, TimeUnit.MILLISECONDS)\n-                .subscribeOn(Schedulers.io())\n-                .subscribe(\n-                        onComplete::call,\n-                        throwable -> onError.accept(new DataStoreException(\"Request failed because DataStore is not \" +\n-                                \"initialized.\", throwable, \"Retry your request.\"))\n-            );\n+    private Completable waitForInitialization() {\n+        return Completable.fromAction(() -> categoryInitializationsPending.await())\n+            .timeout(LIFECYCLE_TIMEOUT_MS, TimeUnit.MILLISECONDS)\n+            .subscribeOn(Schedulers.io())\n+            .doOnError(error -> LOG.error(\"DataStore initialization timed out.\", error));\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void start(@NonNull Action onComplete, @NonNull Consumer<DataStoreException> onError) {\n-        waitForInitialization(() -> {\n-            try {\n-                orchestrator.start();\n-            } catch (DataStoreException exception) {\n-                onError.accept(exception);\n-                return;\n-            }\n-            onComplete.call();\n-        }, onError);\n+        waitForInitialization()\n+            .andThen(orchestrator.start())\n+            .subscribeOn(Schedulers.io())\n+            .subscribe(\n+                onComplete::call,\n+                error -> onError.accept(new DataStoreException(\"Failed to start DataStore.\", error, \"Retry.\"))\n+            );\n     }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public void stop(@NonNull Action onComplete, @NonNull Consumer<DataStoreException> onError) {\n-        waitForInitialization(() -> orchestrator.stop()\n-                .subscribeOn(Schedulers.io())\n-                .subscribe(\n-                    onComplete::call,\n-                    error -> onError.accept(new DataStoreException(\"Failed to stop DataStore.\", error,\n-                            \"Retry your request.\"))), onError);\n+        waitForInitialization()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1b1f285f5e09c66fbde952f0f54d0b5d8f40757"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODAwOTc4Mg==", "bodyText": "The existing test tags end with :test", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#discussion_r538009782", "createdAt": "2020-12-08T03:39:28Z", "author": {"login": "jamesonwilliams"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/OrchestratorTest.java", "diffHunk": "@@ -61,6 +62,8 @@\n  */\n @RunWith(RobolectricTestRunner.class)\n public final class OrchestratorTest {\n+    private static final Logger LOG = Amplify.Logging.forNamespace(\"amplify:aws-datastore\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1b1f285f5e09c66fbde952f0f54d0b5d8f40757"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18914ccf94e0f10952207a27fbc5d6fb7005f844", "author": {"user": {"login": "richardmcclellan", "name": "Richard McClellan"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/18914ccf94e0f10952207a27fbc5d6fb7005f844", "committedDate": "2020-12-08T15:50:09Z", "message": "PR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3NDA5MjUz", "url": "https://github.com/aws-amplify/amplify-android/pull/1027#pullrequestreview-547409253", "createdAt": "2020-12-08T16:32:10Z", "commit": {"oid": "18914ccf94e0f10952207a27fbc5d6fb7005f844"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3347, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}