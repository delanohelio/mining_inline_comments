{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NDQzMTQ1", "number": 467, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDozMzo1NFrOD85YbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDo0Mzo1NlrOD85odg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTgxMjkzOnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDozMzo1NFrOGWHcVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDozMzo1NFrOGWHcVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg0Mzc5Nw==", "bodyText": "To incorporate, my changes all you would have to do here is:\n        .doOnError(exception -> {\n            LOG.warn(\"An error occurred with the subscription for model \" + clazz.getSimpleName() +\n                \" and operation type \" + subscriptionType.name(), exception.getCause());\n        })\n        .onErrorResumeNext((ObservableSource<GraphQLResponse<ModelWithMetadata<T>>>) Observer::onComplete)\n\nThis basically handles the error by logging it and completing the observable. This prevents the Orchestrator from crashing if there's no API configured or the API is not reachable.\nIf you think it makes sense, we can incorporate this changes here.\nThat's basically what I added in #459", "url": "https://github.com/aws-amplify/amplify-android/pull/467#discussion_r425843797", "createdAt": "2020-05-15T14:33:54Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/main/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessor.java", "diffHunk": "@@ -56,15 +82,47 @@\n      * Start subscribing to model mutations.\n      */\n     void startSubscriptions() {\n-        disposable.add(remoteModelMutations.observe()\n+        Set<Observable<SubscriptionEvent<? extends Model>>> subscriptions = new HashSet<>();\n+        for (Class<? extends Model> clazz : modelProvider.models()) {\n+            for (SubscriptionType subscriptionType : SubscriptionType.values()) {\n+                subscriptions.add(subscriptionObservable(appSync, subscriptionType, clazz));\n+            }\n+        }\n+        disposable.add(Observable.merge(subscriptions)\n+            .subscribeOn(Schedulers.io())\n+            .observeOn(Schedulers.io())\n             .subscribe(\n-                mutationOnSubscription -> {\n-                    buffer.onNext(mutationOnSubscription);\n-                    LOG.info(\"Successfully enqueued mutation from subscription: \" + mutationOnSubscription);\n-                },\n-                error -> LOG.warn(\"Error enqueuing mutation from subscription.\", error),\n-                () -> LOG.warn(\"Subscription to remote model mutations is completed.\")\n-            )\n+                buffer::onNext,\n+                buffer::onError,\n+                buffer::onComplete\n+            ));\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    private static <T extends Model> Observable<SubscriptionEvent<? extends Model>>\n+            subscriptionObservable(AppSync appSync, SubscriptionType subscriptionType, Class<T> clazz) {\n+        return Observable.<GraphQLResponse<ModelWithMetadata<T>>>create(emitter -> {\n+            CountDownLatch latch = new CountDownLatch(1);\n+            SubscriptionMethod method = subscriptionMethodFor(appSync, subscriptionType);\n+            AtomicReference<Cancelable> cancelable = new AtomicReference<>(NoOpCancelable::new);\n+            emitter.setCancellable(cancelable::get);\n+            cancelable.set(method.subscribe(\n+                clazz,\n+                token -> latch.countDown(),\n+                emitter::onNext,\n+                emitter::onError,\n+                emitter::onComplete\n+            ));\n+            latch.await(SUBSCRIPTION_START_TIMEOUT_MS, TimeUnit.MILLISECONDS);\n+        })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f678a49966eac300eb9d21384e52371999aa68e"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY1MTg1Mzk4OnYy", "diffSide": "RIGHT", "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDo0Mzo1NlrOGWH2Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNDo0Mzo1NlrOGWH2Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTg1MDM5MA==", "bodyText": "Java's missing tuple :) I like it. I'll have to remember it's under android.util", "url": "https://github.com/aws-amplify/amplify-android/pull/467#discussion_r425850390", "createdAt": "2020-05-15T14:43:56Z", "author": {"login": "rjuliano"}, "path": "aws-datastore/src/test/java/com/amplifyframework/datastore/syncengine/SubscriptionProcessorTest.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * Copyright 2019 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.datastore.syncengine;\n+\n+import android.util.Pair;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.api.graphql.GraphQLResponse;\n+import com.amplifyframework.api.graphql.SubscriptionType;\n+import com.amplifyframework.core.Action;\n+import com.amplifyframework.core.Consumer;\n+import com.amplifyframework.core.async.Cancelable;\n+import com.amplifyframework.core.async.NoOpCancelable;\n+import com.amplifyframework.core.model.Model;\n+import com.amplifyframework.core.model.ModelProvider;\n+import com.amplifyframework.core.model.ModelSchema;\n+import com.amplifyframework.core.model.ModelSchemaRegistry;\n+import com.amplifyframework.datastore.DataStoreException;\n+import com.amplifyframework.datastore.appsync.AppSync;\n+import com.amplifyframework.datastore.appsync.ModelMetadata;\n+import com.amplifyframework.datastore.appsync.ModelWithMetadata;\n+import com.amplifyframework.testmodels.commentsblog.AmplifyModelProvider;\n+import com.amplifyframework.testmodels.commentsblog.BlogOwner;\n+import com.amplifyframework.testutils.random.RandomString;\n+import com.amplifyframework.util.Time;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.stubbing.Answer;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.reactivex.Completable;\n+import io.reactivex.Observable;\n+\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Tests the {@link SubscriptionProcessor}.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class SubscriptionProcessorTest {\n+    private static final long OPERATION_TIMEOUT_MS = TimeUnit.SECONDS.toMillis(1);\n+\n+    private List<Class<? extends Model>> models;\n+    private AppSync appSync;\n+    private Merger merger;\n+    private SubscriptionProcessor subscriptionProcessor;\n+\n+    /**\n+     * Sets up an {@link SubscriptionProcessor} and associated test dependencies.\n+     * @throws AmplifyException On failure to load model schema registry\n+     */\n+    @Before\n+    public void setup() throws AmplifyException {\n+        ModelProvider modelProvider = AmplifyModelProvider.getInstance();\n+        this.models = sortedModels(modelProvider);\n+        this.appSync = mock(AppSync.class);\n+        this.merger = mock(Merger.class);\n+        this.subscriptionProcessor = new SubscriptionProcessor(appSync, modelProvider, merger);\n+    }\n+\n+    private static List<Class<? extends Model>> sortedModels(ModelProvider modelProvider) throws AmplifyException {\n+        ModelSchemaRegistry modelSchemaRegistry = ModelSchemaRegistry.instance();\n+        modelSchemaRegistry.load(modelProvider.models());\n+        TopologicalOrdering topologicalOrdering =\n+            TopologicalOrdering.forRegisteredModels(modelSchemaRegistry, modelProvider);\n+        Comparator<Class<? extends Model>> comparator = (one, two) -> {\n+            ModelSchema schemaOne = modelSchemaRegistry.getModelSchemaForModelClass(one.getSimpleName());\n+            ModelSchema schemaTwo = modelSchemaRegistry.getModelSchemaForModelClass(two.getSimpleName());\n+            return topologicalOrdering.compare(schemaOne, schemaTwo);\n+        };\n+        List<Class<? extends Model>> models = new ArrayList<>(modelProvider.models());\n+        Collections.sort(models, comparator);\n+        return models;\n+    }\n+\n+    /**\n+     * When {@link SubscriptionProcessor#startSubscriptions()} is invoked,\n+     * the {@link AppSync} client receives subscription requests.\n+     */\n+    @Test\n+    public void appSyncInvokedWhenSubscriptionsStarted() {\n+        arrangeStartedSubscriptions(appSync, models, SubscriptionType.values());\n+\n+        // Act: start some subscriptions.\n+        subscriptionProcessor.startSubscriptions();\n+\n+        // Validate that a request was made to create a subscription for each model and subscription pair\n+        verifySubscriptions(appSync, models, SubscriptionType.values());\n+    }\n+\n+    /**\n+     * When {@link SubscriptionProcessor#startDrainingMutationBuffer()} is called, then the\n+     * {@link Merger} is invoked to begin merging whatever content has shown up on the subscriptions.\n+     * @throws DataStoreException On failure to arrange mocking\n+     * @throws InterruptedException On failure to await latch\n+     */\n+    @Test\n+    public void dataMergedWhenBufferDrained() throws DataStoreException, InterruptedException {\n+        // By default, start the subscriptions up.\n+        arrangeStartedSubscriptions(appSync, models, SubscriptionType.values());\n+\n+        // Arrange some subscription data\n+        BlogOwner model = BlogOwner.builder()\n+            .name(\"John P. Stetson, Jr.\")\n+            .build();\n+        ModelMetadata modelMetadata = new ModelMetadata(model.getId(), false, 1, Time.now());\n+        ModelWithMetadata<BlogOwner> modelWithMetadata = new ModelWithMetadata<>(model, modelMetadata);\n+        GraphQLResponse<ModelWithMetadata<BlogOwner>> response = new GraphQLResponse<>(modelWithMetadata, null);\n+        arrangeDataEmittingSubscription(appSync, BlogOwner.class, SubscriptionType.ON_CREATE, response);\n+\n+        // Merge will be invoked for the subcription data, when we start draining...\n+        CountDownLatch latch = new CountDownLatch(1);\n+        doAnswer(invocation -> {\n+            latch.countDown();\n+            return Completable.complete();\n+        }).when(merger).merge(eq(modelWithMetadata));\n+\n+        // Start draining....\n+        subscriptionProcessor.startSubscriptions();\n+        subscriptionProcessor.startDrainingMutationBuffer();\n+\n+        // Was the data merged?\n+        assertTrue(latch.await(OPERATION_TIMEOUT_MS, TimeUnit.MILLISECONDS));\n+    }\n+\n+    @SuppressWarnings(\"SameParameterValue\")\n+    private static <T extends Model> void arrangeDataEmittingSubscription(\n+            AppSync appSync,\n+            Class<T> clazz,\n+            SubscriptionType subscriptionType,\n+            GraphQLResponse<ModelWithMetadata<T>> response) throws DataStoreException {\n+        Answer<Cancelable> answer = invocation -> {\n+            final int startConsumerIndex = 1;\n+            Consumer<String> onStart = invocation.getArgument(startConsumerIndex);\n+            onStart.accept(RandomString.string());\n+\n+            final int dataConsumerIndex = 2;\n+            Consumer<GraphQLResponse<ModelWithMetadata<T>>> onData = invocation.getArgument(dataConsumerIndex);\n+            onData.accept(response);\n+\n+            return new NoOpCancelable();\n+        };\n+        arrangeSubscription(appSync, answer, clazz, subscriptionType);\n+    }\n+\n+    private static void arrangeStartedSubscriptions(\n+        AppSync appSync, List<Class<? extends Model>> classes, SubscriptionType[] subscriptionTypes) {\n+        Answer<Cancelable> answer = invocation -> {\n+            final int startConsumerIndex = 1;\n+            Consumer<String> onStart = invocation.getArgument(startConsumerIndex);\n+            onStart.accept(RandomString.string());\n+            return new NoOpCancelable();\n+        };\n+        arrangeSubscriptions(appSync, answer, classes, subscriptionTypes);\n+    }\n+\n+    private static void arrangeSubscriptions(\n+            AppSync appSync,\n+            Answer<Cancelable> answer,\n+            List<Class<? extends Model>> classes,\n+            SubscriptionType[] subscriptionTypes) {\n+        Observable.fromIterable(classes)\n+            .flatMap(modelClass -> Observable.fromArray(subscriptionTypes)\n+                .map(subscriptionType -> Pair.create(modelClass, subscriptionType)))\n+            .blockingForEach(pair -> arrangeSubscription(appSync, answer, pair.first, pair.second));\n+    }\n+\n+    private static <T extends Model> void arrangeSubscription(\n+            AppSync appSync, Answer<Cancelable> answer, Class<T> clazz, SubscriptionType subscriptionType)\n+            throws DataStoreException {\n+        AppSync stub = doAnswer(answer).when(appSync);\n+        SubscriptionProcessor.SubscriptionMethod method =\n+            SubscriptionProcessor.subscriptionMethodFor(stub, subscriptionType);\n+        method.subscribe(eq(clazz), anyConsumer(), anyConsumer(), anyConsumer(), anyAction());\n+    }\n+\n+    private static void verifySubscriptions(\n+            AppSync appSync, List<Class<? extends Model>> classes, SubscriptionType[] subscriptionTypes) {\n+        Observable.fromIterable(classes)\n+            .flatMap(modelClass -> Observable.fromArray(subscriptionTypes)\n+                .map(subscriptionType -> Pair.create(modelClass, subscriptionType)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f678a49966eac300eb9d21384e52371999aa68e"}, "originalPosition": 208}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1246, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}