{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzNDA4Mjg0", "number": 323, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNToxNDo0MlrODrQrUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNToxNDo0MlrODrQrUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2Njg4NTk0OnYy", "diffSide": "RIGHT", "path": "aws-api/src/androidTest/java/com/amplifyframework/api/aws/SubscriptionEndpointTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNToxNDo0MlrOF7gBXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNTozNDoxOFrOF7g_Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzNDk0Mw==", "bodyText": "*Unexpected", "url": "https://github.com/aws-amplify/amplify-android/pull/323#discussion_r397934943", "createdAt": "2020-03-25T15:14:42Z", "author": {"login": "TrekSoft"}, "path": "aws-api/src/androidTest/java/com/amplifyframework/api/aws/SubscriptionEndpointTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws;\n+\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.test.R;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.api.graphql.GraphQLResponse;\n+import com.amplifyframework.testutils.Assets;\n+import com.amplifyframework.testutils.Await;\n+import com.amplifyframework.testutils.Resources;\n+import com.amplifyframework.testutils.random.RandomString;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * Tests the {@link SubscriptionEndpoint}.\n+ */\n+public final class SubscriptionEndpointTest {\n+    private Executor executor;\n+    private SubscriptionEndpoint subscriptionEndpoint;\n+    private String eventId;\n+    private Set<String> subscriptionIdsForRelease;\n+\n+    /**\n+     * Create an {@link SubscriptionEndpoint}.\n+     * @throws ApiException On failure to load API configuration from config file\n+     * @throws JSONException On failure to manipulate configuration JSON during test arrangement\n+     */\n+    @Before\n+    public void setup() throws ApiException, JSONException {\n+        this.executor = Executors.newCachedThreadPool();\n+\n+        String endpointConfigKey = \"eventsApi\"; // The endpoint config in amplifyconfiguration.json with this name\n+        JSONObject configJson = Resources.readAsJson(getApplicationContext(), R.raw.amplifyconfiguration)\n+            .getJSONObject(\"api\")\n+            .getJSONObject(\"plugins\")\n+            .getJSONObject(\"awsAPIPlugin\");\n+        AWSApiPluginConfiguration pluginConfiguration = AWSApiPluginConfigurationReader.readFrom(configJson);\n+        ApiConfiguration apiConfiguration = pluginConfiguration.getApi(endpointConfigKey);\n+        assertNotNull(apiConfiguration);\n+\n+        final GraphQLResponse.Factory responseFactory = new GsonGraphQLResponseFactory();\n+        this.subscriptionEndpoint = new SubscriptionEndpoint(apiConfiguration, responseFactory);\n+\n+        this.eventId = RandomString.string();\n+        this.subscriptionIdsForRelease = new HashSet<>();\n+    }\n+\n+    /**\n+     * After the test, tear down the subscriptions.\n+     * @throws RuntimeException On failure to release subscription\n+     */\n+    @After\n+    public void releaseSubscriptions() throws RuntimeException {\n+        for (String subscriptionId : subscriptionIdsForRelease) {\n+            executor.execute(() ->\n+                Await.result((onResult, onError) -> {\n+                    try {\n+                        subscriptionEndpoint.releaseSubscription(subscriptionId);\n+                    } catch (ApiException failureToLetGo) {\n+                        // Friend, it is time. It is time.\n+                        throw new RuntimeException(failureToLetGo);\n+                    }\n+                })\n+            );\n+        }\n+    }\n+\n+    /**\n+     * It should be possible to create two subscriptions to the same type of model.\n+     * @throws ApiException On failure to subscribe\n+     */\n+    @Test\n+    public void twoSubscriptionsToTheSameThing() throws ApiException {\n+        // Okay, request a first subscription.\n+        String firstSubscriptionId = subscribeToEventComments(eventId);\n+        assertNotNull(firstSubscriptionId);\n+        subscriptionIdsForRelease.add(firstSubscriptionId);\n+\n+        // Now, request a second subscription, with the same request data.\n+        // This is around where the test fails.\n+        String secondSubscriptionId = subscribeToEventComments(eventId);\n+        assertNotNull(secondSubscriptionId);\n+        subscriptionIdsForRelease.add(secondSubscriptionId);\n+\n+        // Theoretically would expect that we'd have two subscriptions,\n+        // and that their subscription IDs would be different/unique.\n+        assertNotEquals(firstSubscriptionId, secondSubscriptionId);\n+    }\n+\n+    /**\n+     * Subscribe to comments on an event.\n+     * @param eventId ID of event for which comments are being made\n+     * @return Subscription ID received from subscription_ack message payload\n+     * @throws ApiException If outcome of subscription request is anything other than an ACK w/ new ID\n+     */\n+    private String subscribeToEventComments(String eventId) throws ApiException {\n+        // Arrange a request to start a subscription.\n+        String document = Assets.readAsString(\"subscribe-event-comments.graphql\");\n+\n+        GsonVariablesSerializer serializer = new GsonVariablesSerializer();\n+        Map<String, Object> variables = Collections.singletonMap(\"eventId\", eventId);\n+        GraphQLRequest<String> request = new GraphQLRequest<>(document, variables, String.class, serializer);\n+\n+        return Await.<String, ApiException>result((onResult, onError) ->\n+            executor.execute(() ->\n+                subscriptionEndpoint.requestSubscription(\n+                    request,\n+                    onResult,\n+                    item -> {\n+                        final String message;\n+                        if (item.hasErrors()) {\n+                            message = \"Subscription error: \" + item.getErrors().toString();\n+                        } else {\n+                            message = \"Unexpect subscription data: \" + item.getData();", "state": "SUBMITTED", "replyTo": null, "originalCommit": null, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzNTU1MQ==", "bodyText": "Also, I must be missing something but why are you failing if it receives an item without errors?", "url": "https://github.com/aws-amplify/amplify-android/pull/323#discussion_r397935551", "createdAt": "2020-03-25T15:15:25Z", "author": {"login": "TrekSoft"}, "path": "aws-api/src/androidTest/java/com/amplifyframework/api/aws/SubscriptionEndpointTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws;\n+\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.test.R;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.api.graphql.GraphQLResponse;\n+import com.amplifyframework.testutils.Assets;\n+import com.amplifyframework.testutils.Await;\n+import com.amplifyframework.testutils.Resources;\n+import com.amplifyframework.testutils.random.RandomString;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * Tests the {@link SubscriptionEndpoint}.\n+ */\n+public final class SubscriptionEndpointTest {\n+    private Executor executor;\n+    private SubscriptionEndpoint subscriptionEndpoint;\n+    private String eventId;\n+    private Set<String> subscriptionIdsForRelease;\n+\n+    /**\n+     * Create an {@link SubscriptionEndpoint}.\n+     * @throws ApiException On failure to load API configuration from config file\n+     * @throws JSONException On failure to manipulate configuration JSON during test arrangement\n+     */\n+    @Before\n+    public void setup() throws ApiException, JSONException {\n+        this.executor = Executors.newCachedThreadPool();\n+\n+        String endpointConfigKey = \"eventsApi\"; // The endpoint config in amplifyconfiguration.json with this name\n+        JSONObject configJson = Resources.readAsJson(getApplicationContext(), R.raw.amplifyconfiguration)\n+            .getJSONObject(\"api\")\n+            .getJSONObject(\"plugins\")\n+            .getJSONObject(\"awsAPIPlugin\");\n+        AWSApiPluginConfiguration pluginConfiguration = AWSApiPluginConfigurationReader.readFrom(configJson);\n+        ApiConfiguration apiConfiguration = pluginConfiguration.getApi(endpointConfigKey);\n+        assertNotNull(apiConfiguration);\n+\n+        final GraphQLResponse.Factory responseFactory = new GsonGraphQLResponseFactory();\n+        this.subscriptionEndpoint = new SubscriptionEndpoint(apiConfiguration, responseFactory);\n+\n+        this.eventId = RandomString.string();\n+        this.subscriptionIdsForRelease = new HashSet<>();\n+    }\n+\n+    /**\n+     * After the test, tear down the subscriptions.\n+     * @throws RuntimeException On failure to release subscription\n+     */\n+    @After\n+    public void releaseSubscriptions() throws RuntimeException {\n+        for (String subscriptionId : subscriptionIdsForRelease) {\n+            executor.execute(() ->\n+                Await.result((onResult, onError) -> {\n+                    try {\n+                        subscriptionEndpoint.releaseSubscription(subscriptionId);\n+                    } catch (ApiException failureToLetGo) {\n+                        // Friend, it is time. It is time.\n+                        throw new RuntimeException(failureToLetGo);\n+                    }\n+                })\n+            );\n+        }\n+    }\n+\n+    /**\n+     * It should be possible to create two subscriptions to the same type of model.\n+     * @throws ApiException On failure to subscribe\n+     */\n+    @Test\n+    public void twoSubscriptionsToTheSameThing() throws ApiException {\n+        // Okay, request a first subscription.\n+        String firstSubscriptionId = subscribeToEventComments(eventId);\n+        assertNotNull(firstSubscriptionId);\n+        subscriptionIdsForRelease.add(firstSubscriptionId);\n+\n+        // Now, request a second subscription, with the same request data.\n+        // This is around where the test fails.\n+        String secondSubscriptionId = subscribeToEventComments(eventId);\n+        assertNotNull(secondSubscriptionId);\n+        subscriptionIdsForRelease.add(secondSubscriptionId);\n+\n+        // Theoretically would expect that we'd have two subscriptions,\n+        // and that their subscription IDs would be different/unique.\n+        assertNotEquals(firstSubscriptionId, secondSubscriptionId);\n+    }\n+\n+    /**\n+     * Subscribe to comments on an event.\n+     * @param eventId ID of event for which comments are being made\n+     * @return Subscription ID received from subscription_ack message payload\n+     * @throws ApiException If outcome of subscription request is anything other than an ACK w/ new ID\n+     */\n+    private String subscribeToEventComments(String eventId) throws ApiException {\n+        // Arrange a request to start a subscription.\n+        String document = Assets.readAsString(\"subscribe-event-comments.graphql\");\n+\n+        GsonVariablesSerializer serializer = new GsonVariablesSerializer();\n+        Map<String, Object> variables = Collections.singletonMap(\"eventId\", eventId);\n+        GraphQLRequest<String> request = new GraphQLRequest<>(document, variables, String.class, serializer);\n+\n+        return Await.<String, ApiException>result((onResult, onError) ->\n+            executor.execute(() ->\n+                subscriptionEndpoint.requestSubscription(\n+                    request,\n+                    onResult,\n+                    item -> {\n+                        final String message;\n+                        if (item.hasErrors()) {\n+                            message = \"Subscription error: \" + item.getErrors().toString();\n+                        } else {\n+                            message = \"Unexpect subscription data: \" + item.getData();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzNDk0Mw=="}, "originalCommit": null, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzk1MDcyMg==", "bodyText": "Ah thanks the for the catch -\nAnd, for this test, all that's important is the establishment of the subscription, and the receipt of the subscription IDs. Since I don't create any actual models, I don't expect to receive any subscription data. If I do receive any items on the subscription, it'd be unexpected.", "url": "https://github.com/aws-amplify/amplify-android/pull/323#discussion_r397950722", "createdAt": "2020-03-25T15:34:18Z", "author": {"login": "jamesonwilliams"}, "path": "aws-api/src/androidTest/java/com/amplifyframework/api/aws/SubscriptionEndpointTest.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.api.aws;\n+\n+import com.amplifyframework.api.ApiException;\n+import com.amplifyframework.api.aws.test.R;\n+import com.amplifyframework.api.graphql.GraphQLRequest;\n+import com.amplifyframework.api.graphql.GraphQLResponse;\n+import com.amplifyframework.testutils.Assets;\n+import com.amplifyframework.testutils.Await;\n+import com.amplifyframework.testutils.Resources;\n+import com.amplifyframework.testutils.random.RandomString;\n+\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+/**\n+ * Tests the {@link SubscriptionEndpoint}.\n+ */\n+public final class SubscriptionEndpointTest {\n+    private Executor executor;\n+    private SubscriptionEndpoint subscriptionEndpoint;\n+    private String eventId;\n+    private Set<String> subscriptionIdsForRelease;\n+\n+    /**\n+     * Create an {@link SubscriptionEndpoint}.\n+     * @throws ApiException On failure to load API configuration from config file\n+     * @throws JSONException On failure to manipulate configuration JSON during test arrangement\n+     */\n+    @Before\n+    public void setup() throws ApiException, JSONException {\n+        this.executor = Executors.newCachedThreadPool();\n+\n+        String endpointConfigKey = \"eventsApi\"; // The endpoint config in amplifyconfiguration.json with this name\n+        JSONObject configJson = Resources.readAsJson(getApplicationContext(), R.raw.amplifyconfiguration)\n+            .getJSONObject(\"api\")\n+            .getJSONObject(\"plugins\")\n+            .getJSONObject(\"awsAPIPlugin\");\n+        AWSApiPluginConfiguration pluginConfiguration = AWSApiPluginConfigurationReader.readFrom(configJson);\n+        ApiConfiguration apiConfiguration = pluginConfiguration.getApi(endpointConfigKey);\n+        assertNotNull(apiConfiguration);\n+\n+        final GraphQLResponse.Factory responseFactory = new GsonGraphQLResponseFactory();\n+        this.subscriptionEndpoint = new SubscriptionEndpoint(apiConfiguration, responseFactory);\n+\n+        this.eventId = RandomString.string();\n+        this.subscriptionIdsForRelease = new HashSet<>();\n+    }\n+\n+    /**\n+     * After the test, tear down the subscriptions.\n+     * @throws RuntimeException On failure to release subscription\n+     */\n+    @After\n+    public void releaseSubscriptions() throws RuntimeException {\n+        for (String subscriptionId : subscriptionIdsForRelease) {\n+            executor.execute(() ->\n+                Await.result((onResult, onError) -> {\n+                    try {\n+                        subscriptionEndpoint.releaseSubscription(subscriptionId);\n+                    } catch (ApiException failureToLetGo) {\n+                        // Friend, it is time. It is time.\n+                        throw new RuntimeException(failureToLetGo);\n+                    }\n+                })\n+            );\n+        }\n+    }\n+\n+    /**\n+     * It should be possible to create two subscriptions to the same type of model.\n+     * @throws ApiException On failure to subscribe\n+     */\n+    @Test\n+    public void twoSubscriptionsToTheSameThing() throws ApiException {\n+        // Okay, request a first subscription.\n+        String firstSubscriptionId = subscribeToEventComments(eventId);\n+        assertNotNull(firstSubscriptionId);\n+        subscriptionIdsForRelease.add(firstSubscriptionId);\n+\n+        // Now, request a second subscription, with the same request data.\n+        // This is around where the test fails.\n+        String secondSubscriptionId = subscribeToEventComments(eventId);\n+        assertNotNull(secondSubscriptionId);\n+        subscriptionIdsForRelease.add(secondSubscriptionId);\n+\n+        // Theoretically would expect that we'd have two subscriptions,\n+        // and that their subscription IDs would be different/unique.\n+        assertNotEquals(firstSubscriptionId, secondSubscriptionId);\n+    }\n+\n+    /**\n+     * Subscribe to comments on an event.\n+     * @param eventId ID of event for which comments are being made\n+     * @return Subscription ID received from subscription_ack message payload\n+     * @throws ApiException If outcome of subscription request is anything other than an ACK w/ new ID\n+     */\n+    private String subscribeToEventComments(String eventId) throws ApiException {\n+        // Arrange a request to start a subscription.\n+        String document = Assets.readAsString(\"subscribe-event-comments.graphql\");\n+\n+        GsonVariablesSerializer serializer = new GsonVariablesSerializer();\n+        Map<String, Object> variables = Collections.singletonMap(\"eventId\", eventId);\n+        GraphQLRequest<String> request = new GraphQLRequest<>(document, variables, String.class, serializer);\n+\n+        return Await.<String, ApiException>result((onResult, onError) ->\n+            executor.execute(() ->\n+                subscriptionEndpoint.requestSubscription(\n+                    request,\n+                    onResult,\n+                    item -> {\n+                        final String message;\n+                        if (item.hasErrors()) {\n+                            message = \"Subscription error: \" + item.getErrors().toString();\n+                        } else {\n+                            message = \"Unexpect subscription data: \" + item.getData();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzkzNDk0Mw=="}, "originalCommit": null, "originalPosition": 144}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1352, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}