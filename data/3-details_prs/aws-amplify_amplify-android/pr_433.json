{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0Mjk4Mjg4", "number": 433, "title": "Refactors methods to match design and adds unit tests", "bodyText": "Refactors existing methods to match final interface design: https://quip-amazon.com/V550Arr1aKJN/Amplify-Auth-Category-Interface\nAlso adds unit tests to ensure that this wrapper implementation calls the proper AWSMobileClient methods with the expected parameters and parses its results into the proper Amplify result objects.\nBy submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.", "createdAt": "2020-05-06T19:48:18Z", "url": "https://github.com/aws-amplify/amplify-android/pull/433", "merged": true, "mergeCommit": {"oid": "6c174706f15b8071b3f34ae2c90cab10195ef67b"}, "closed": true, "closedAt": "2020-05-11T14:08:07Z", "author": {"login": "TrekSoft"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcetpKfAH2gAyNDE0Mjk4Mjg4OjRkMjJmNzU1MzRhNzBiYmQzYWQzODBiZWUzYjFjZjcwNTljZmQwOTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgQIHKAH2gAyNDE0Mjk4Mjg4OmIxZDFlYjAwMmUwYmNhZTNlOTJkMjdjMmI5MDFlOTlhYzc5MDljNDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4d22f75534a70bbd3ad380bee3b1cf7059cfd097", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/4d22f75534a70bbd3ad380bee3b1cf7059cfd097", "committedDate": "2020-05-06T19:14:30Z", "message": "Refactors methods to design and adds unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c920abdf1eef49684114347a4703feaf8e664985", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/c920abdf1eef49684114347a4703feaf8e664985", "committedDate": "2020-05-06T19:45:26Z", "message": "Adds NonNull/Nullable annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/560463f9ddede2126b8bb036f153723a96adb69e", "committedDate": "2020-05-06T20:29:00Z", "message": "Corrects minor spacing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MTM5ODQx", "url": "https://github.com/aws-amplify/amplify-android/pull/433#pullrequestreview-407139841", "createdAt": "2020-05-07T04:23:19Z", "commit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "state": "COMMENTED", "comments": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNDoyMzoxOVrOGRt4lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNTozMToyMFrOGRu9_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzMDc0Mg==", "bodyText": "It only makes sense to include this if you are using these annotations from inside your new instrumentation test code. You would already have this dependency, transitively, from the source code. However, it is a best practice to to enumerate dependencies for any imports your source uses.", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421230742", "createdAt": "2020-05-07T04:23:19Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/build.gradle", "diffHunk": "@@ -22,4 +22,18 @@ dependencies {\n     implementation dependency.androidx.appcompat\n     implementation dependency.aws.mobileclient\n     implementation dependency.aws.cognitoauth\n+\n+    testImplementation project(path: ':testutils')\n+    testImplementation dependency.junit\n+    testImplementation dependency.mockito\n+    testImplementation (dependency.robolectric) {\n+        // https://github.com/robolectric/robolectric/issues/5245\n+        exclude group: 'com.google.auto.service', module: 'auto-service'\n+    }\n+    testImplementation dependency.androidx.test.core\n+\n+    androidTestImplementation project(path: ':testutils')\n+    androidTestImplementation dependency.androidx.annotation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzMjU4Mg==", "bodyText": "It's impossible to know what this means, without going to look it up.\nMy usual suggestion here is to replace a boolean flag with an enum, which is plenty more semantic:\nenum PerformMoonLaunch {\n    YEA_DO_IT,\n    NAH_CHIEF_NO_THANKS;\n}\n\nHow it looks when being passed as a flag:\n// Oh! it's time to go to the moon...\nnasa.runHoustonOperations(PerformMoonLaunch.YEA_DO_IT);\n\nvs. the original with a boolean flag:\n// Oh okay, we should run the operations, for real? Or... wait, why is there a bool?\nnasa.runHoustonOperations(true);", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421232582", "createdAt": "2020-05-07T04:30:31Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthPlugin.java", "diffHunk": "@@ -452,16 +414,23 @@ public void onError(Exception exception) {\n     }\n \n     @Override\n-    public void forgotPassword(\n+    public void resetPassword(\n             @NonNull String username,\n-            @NonNull Consumer<AuthCodeDeliveryDetails> onSuccess,\n+            @NonNull Consumer<AuthResetPasswordResult> onSuccess,\n             @NonNull Consumer<AuthException> onException\n     ) {\n-        AWSMobileClient.getInstance().forgotPassword(username, new Callback<ForgotPasswordResult>() {\n+        awsMobileClient.forgotPassword(username, new Callback<ForgotPasswordResult>() {\n             @Override\n             public void onResult(ForgotPasswordResult result) {\n                 if (result.getState().equals(ForgotPasswordState.CONFIRMATION_CODE)) {\n-                    onSuccess.accept(convertCodeDeliveryDetails(result.getParameters()));\n+                    onSuccess.accept(new AuthResetPasswordResult(\n+                            false,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzMzUwMQ==", "bodyText": "Instead of having a constructor which allows a null field, provide an overloaded constructor that doesn't require the field. This way, the class never accepts null. (You might use one internally, but that's your own business.)\ne.g.\n// Huh? What's null?\nnasa.fuelUp(rockets, null, fuelSequences);\n\nvs.\nnasa.fuelUp(rockets, fuelSequences);\n\nOr:\nnasa.fuelUp(rockets, fuelContainers, fuelSequences);", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421233501", "createdAt": "2020-05-07T04:34:21Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthPlugin.java", "diffHunk": "@@ -452,16 +414,23 @@ public void onError(Exception exception) {\n     }\n \n     @Override\n-    public void forgotPassword(\n+    public void resetPassword(\n             @NonNull String username,\n-            @NonNull Consumer<AuthCodeDeliveryDetails> onSuccess,\n+            @NonNull Consumer<AuthResetPasswordResult> onSuccess,\n             @NonNull Consumer<AuthException> onException\n     ) {\n-        AWSMobileClient.getInstance().forgotPassword(username, new Callback<ForgotPasswordResult>() {\n+        awsMobileClient.forgotPassword(username, new Callback<ForgotPasswordResult>() {\n             @Override\n             public void onResult(ForgotPasswordResult result) {\n                 if (result.getState().equals(ForgotPasswordState.CONFIRMATION_CODE)) {\n-                    onSuccess.accept(convertCodeDeliveryDetails(result.getParameters()));\n+                    onSuccess.accept(new AuthResetPasswordResult(\n+                            false,\n+                            new AuthNextResetPasswordStep(\n+                                    AuthResetPasswordStep.CONFIRM_RESET_PASSWORD_WITH_CODE,\n+                                    null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzMzk5OQ==", "bodyText": "Not for this PR --\nMaybe we should only require the recovery suggestion if there is no cause. That is to say, we could create amplify exceptions from just a message and a cause", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421233999", "createdAt": "2020-05-07T04:36:19Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthPlugin.java", "diffHunk": "@@ -517,14 +486,34 @@ public void onError(Exception exception) {\n         );\n     }\n \n+    @Override\n+    public void updatePassword(\n+            @NonNull String oldPassword,\n+            @NonNull String newPassword,\n+            @Nullable Action onSuccess,\n+            @Nullable Consumer<AuthException> onError\n+    ) {\n+        awsMobileClient.changePassword(oldPassword, newPassword, new Callback<Void>() {\n+            @Override\n+            public void onResult(Void result) {\n+                onSuccess.call();\n+            }\n+\n+            @Override\n+            public void onError(Exception error) {\n+                onError.accept(new AuthException(\n+                        \"Failed to change password\",\n+                        error,\n+                        \"See attached exception for more details\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 314}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzNTg4OA==", "bodyText": "If you have to call get immediately after containsKey, it's usually better to just call get, and check if the result is not null. This way, you perform the check once, atomically, and don't get into a race condition between the two (very closely ocurring calls.)\nThat is, this is \"racy\":\nif (map.containsKey(key)) { // It does!! Neat.\n    // Right in here, some other thread goes and deleted key from the map.\n    Value value = map.get(key);  // It doesn't. Ugh!!\n    // Here, value might be null anyway. So, to be 100% safe, you'd have to check it _anyway_\n    if (value != null) {\n    }\n}\n\nVs.\nValue value = map.get(key);\n// key is removed from map on a different thread.\nif (value != null) {\n    // Meanwhile, we have a snapshot of the value and can continue\n}\n\nNow, if a cache-coherent view of the value is necessary across threads, the above still doesn't solve that issue.", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421235888", "createdAt": "2020-05-07T04:44:12Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/util/SignInStateConverter.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito.util;\n+\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+\n+import com.amazonaws.mobile.client.results.SignInState;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Helpful util class to convert AWSMobileClient sign in state enum to the Amplify equivalent.\n+ */\n+public final class SignInStateConverter {\n+    private static final Map<SignInState, AuthSignInStep> CONVERT_SIGN_IN_STATE;\n+\n+    /**\n+     * Dis-allows instantiation of this class.\n+     */\n+    private SignInStateConverter() { }\n+\n+    static {\n+        Map<SignInState, AuthSignInStep> convertSignInStateInit = new HashMap<>();\n+        convertSignInStateInit.put(SignInState.SMS_MFA, AuthSignInStep.CONFIRM_SIGN_IN_WITH_SMS_MFA_CODE);\n+        convertSignInStateInit.put(SignInState.CUSTOM_CHALLENGE, AuthSignInStep.CONFIRM_SIGN_IN_WITH_CUSTOM_CHALLENGE);\n+        convertSignInStateInit.put(SignInState.NEW_PASSWORD_REQUIRED, AuthSignInStep.CONFIRM_SIGN_IN_WITH_NEW_PASSWORD);\n+        convertSignInStateInit.put(SignInState.DONE, AuthSignInStep.DONE);\n+        CONVERT_SIGN_IN_STATE = Collections.unmodifiableMap(convertSignInStateInit);\n+    }\n+\n+    public static AuthSignInStep getAuthSignInStep(SignInState fromState) throws AuthException {\n+        if (CONVERT_SIGN_IN_STATE.containsKey(fromState)) {\n+            return CONVERT_SIGN_IN_STATE.get(fromState);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzNjIxNw==", "bodyText": "We should make this a default recovery option type, and include a link to our GitHub issues in this message. To raise the bar, we could use an amzn.to or something like that, to keep it short (and under our control.)", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421236217", "createdAt": "2020-05-07T04:45:19Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/util/SignInStateConverter.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito.util;\n+\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+\n+import com.amazonaws.mobile.client.results.SignInState;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * Helpful util class to convert AWSMobileClient sign in state enum to the Amplify equivalent.\n+ */\n+public final class SignInStateConverter {\n+    private static final Map<SignInState, AuthSignInStep> CONVERT_SIGN_IN_STATE;\n+\n+    /**\n+     * Dis-allows instantiation of this class.\n+     */\n+    private SignInStateConverter() { }\n+\n+    static {\n+        Map<SignInState, AuthSignInStep> convertSignInStateInit = new HashMap<>();\n+        convertSignInStateInit.put(SignInState.SMS_MFA, AuthSignInStep.CONFIRM_SIGN_IN_WITH_SMS_MFA_CODE);\n+        convertSignInStateInit.put(SignInState.CUSTOM_CHALLENGE, AuthSignInStep.CONFIRM_SIGN_IN_WITH_CUSTOM_CHALLENGE);\n+        convertSignInStateInit.put(SignInState.NEW_PASSWORD_REQUIRED, AuthSignInStep.CONFIRM_SIGN_IN_WITH_NEW_PASSWORD);\n+        convertSignInStateInit.put(SignInState.DONE, AuthSignInStep.DONE);\n+        CONVERT_SIGN_IN_STATE = Collections.unmodifiableMap(convertSignInStateInit);\n+    }\n+\n+    public static AuthSignInStep getAuthSignInStep(SignInState fromState) throws AuthException {\n+        if (CONVERT_SIGN_IN_STATE.containsKey(fromState)) {\n+            return CONVERT_SIGN_IN_STATE.get(fromState);\n+        } else {\n+            throw new AuthException(\"Unsupported sign in state\",\n+                \"We currently do not support the \" + fromState + \" state from AWSMobileClient. \" +\n+                    \"If this error is reached, please report it as a bug\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzNjU5NQ==", "bodyText": "For the various *Step enums --\nMaybe this should be named AuthSignUpState, since these appear to be different states that flow from one to another? What's the name of hte starting state? does that need to be in here, too? (If you use a null to mean \"no step,\" then just add a NOT_SIGNED_UP or something, so you can stop using null to mean that.)", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421236595", "createdAt": "2020-05-07T04:46:45Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/result/step/AuthSignUpStep.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.result.step;\n+\n+public enum AuthSignUpStep {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzNzM0Nw==", "bodyText": "These names are confusing. You've got an enum named AuthSignInStep, but then a class named AuthNextSignInStep. I'm not sure what they're for, immediately. I would at least add an ELI5 class-level JavaDoc, This repreents <foo>, it is used for <bar>. It is different than the <other similarly named things> for the <baz rationale>.", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421237347", "createdAt": "2020-05-07T04:49:38Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/result/step/AuthNextSignInStep.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.result.step;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.core.util.ObjectsCompat;\n+\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public final class AuthNextSignInStep {\n+    private final AuthSignInStep signInStep;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzODQ3Mg==", "bodyText": "Cool! This is a nice simplification. Glad we found another way to achieve this.", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421238472", "createdAt": "2020-05-07T04:54:13Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthUser.java", "diffHunk": "@@ -55,24 +52,6 @@ public String getUsername() {\n         return username;\n     }\n \n-    /**\n-     * Interface for changing the password of an existing user.\n-     * @param oldPassword The user's existing password\n-     * @param newPassword The new password desired on the user account\n-     * @param onSuccess Success callback\n-     * @param onError Error callback\n-     */\n-    public abstract void changePassword(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzODc0MQ==", "bodyText": "In the rest of the code base, these are @NonNull. Maybe it makes sense to allow a user to ignore results. But, to stay consistent, I think we should apply that change globally instead of to individual methods.", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421238741", "createdAt": "2020-05-07T04:55:24Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthCategoryBehavior.java", "diffHunk": "@@ -176,12 +163,26 @@ void forgotPassword(\n      * @param onSuccess Success callback\n      * @param onError Error callback\n      */\n-    void confirmForgotPassword(\n+    void confirmResetPassword(\n             @NonNull String newPassword,\n             @NonNull String confirmationCode,\n             @NonNull Action onSuccess,\n             @NonNull Consumer<AuthException> onError);\n \n+    /**\n+     * Update the password of an existing user - must be signed in to perform this action.\n+     * @param oldPassword The user's existing password\n+     * @param newPassword The new password desired on the user account\n+     * @param onSuccess Success callback\n+     * @param onError Error callback\n+     */\n+    void updatePassword(\n+            @NonNull String oldPassword,\n+            @NonNull String newPassword,\n+            @Nullable Action onSuccess,\n+            @Nullable Consumer<AuthException> onError", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzODkwMQ==", "bodyText": "Huh. What happened with this one? We're not doing this anymore? Or just not for now?", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421238901", "createdAt": "2020-05-07T04:56:03Z", "author": {"login": "jamesonwilliams"}, "path": "core/src/main/java/com/amplifyframework/auth/AuthCategoryBehavior.java", "diffHunk": "@@ -132,19 +132,6 @@ void signInWithUI(\n      */\n     void handleSignInWithUIResponse(Intent intent);\n \n-    /**\n-     * Allows a user to sign in to your app using their credentials from another provider (e.g. Facebook, Google, etc).\n-     * @param provider The provider you are signing in with (e.g. Facebook, Google, etc.)\n-     * @param token Token retrieved from the social provider's authentication code.\n-     * @param onSuccess Success callback\n-     * @param onError Error callback\n-     */\n-    void signInWithSocial(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzOTM2MA==", "bodyText": "Don't use this repackaged version, just use java.util.Collections, directly.", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421239360", "createdAt": "2020-05-07T04:57:51Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MDAwMg==", "bodyText": "Can you add a // Where do they come from? explanation after it?", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421240002", "createdAt": "2020-05-07T05:00:11Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MDQ3Mw==", "bodyText": "At least private static final String SCREAMING_SNAKE_VAR -- but, do you have some data models that you can put these in, so that there aren't just a heap of String? Like maybe an new SomeCognitoType(\"username\", \"email@foo.tld\");, etc?\nLastly, the non-final fields should appear after these constants (L76, L77.)\nIn unit tests, I prefer not to store constants at the class level. This is because, often, the values are only used in individual tests. There are still a lot of good reasons to label your constants, though.\n@Test(expected = FrickinMurdersItException.class)\npublic void testCookieMonsterWillPower() {\n    final String temptation = \"Cookie\";\n    CookieMonster monster = new CookieMonster();\n    monster.temp(temptation);\n    // Well, what did we expect, sigh.\n}", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421240473", "createdAt": "2020-05-07T05:01:46Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MjI0Nw==", "bodyText": "Were you able to do:\nAuthCategory auth = new AuthCategory();\nauth.addPlugin(new AWSCognitoAuthPlugin());\nCategoryConfiguration config = // blah blach\nauth.configure(config, getApplicationContext());\nauth.initialize(getApplicationContext());\n\nAnd then test against the category? You'd get more coverage that way.\nTesting a thin veneer of invocation verifications on just the plugin is going to be a little brittle.", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421242247", "createdAt": "2020-05-07T05:08:31Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MjM5MA==", "bodyText": "Can you provide a version of this constructor which does not require the null value?", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421242390", "createdAt": "2020-05-07T05:09:01Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MzA1Ng==", "bodyText": "You shouldn't need to check this. This is guaranteed, based on the matching you do in your .when(...).\nThe way this construct usually fails is if .when does not match, when you expect it to. In this case, the doAnswer part never gets called. So the problem isn't what happens inside of the lambda, rather that it's tricky to know if the lambda even got called (without checking for that.)", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421243056", "createdAt": "2020-05-07T05:11:28Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject testConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(testConfig.toString(), invocation.getArgument(1).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MzM1NA==", "bodyText": "times(1) is the default, I believe. So you can just say verify(foo).gotFooed(). The times(int) comes into play when the value is not 1.", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421243354", "createdAt": "2020-05-07T05:12:37Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject testConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(testConfig.toString(), invocation.getArgument(1).toString());\n+\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onResult(userStateDetails);\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(testConfig, context);\n+        verify(mobileClient, times(1))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NDAzMg==", "bodyText": "If {@link AWSMobileClient} emits an error during initialization, the {@link Auth#configure(...)} method should throw that same exception on its calling thread.", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421244032", "createdAt": "2020-05-07T05:15:00Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject testConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(testConfig.toString(), invocation.getArgument(1).toString());\n+\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onResult(userStateDetails);\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(testConfig, context);\n+        verify(mobileClient, times(1))\n+                .initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that if AWSMobileClient returns an error callback during initialization, the Auth configure method", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NDc1Mw==", "bodyText": "These are basically just testing your test. The doAnswer for faking a behavior on a a component. You'd want to make assertions on the final state, after your test. But here, it's sort of intermediate, before you do callback.onResult(amcResult).\nOutside of this doAnswer().when() constrcut, later, I'd expect some like assertTrue(hasSomePropertyOfInterest(amcResult)).", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421244753", "createdAt": "2020-05-07T05:17:40Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject testConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(testConfig.toString(), invocation.getArgument(1).toString());\n+\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onResult(userStateDetails);\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(testConfig, context);\n+        verify(mobileClient, times(1))\n+                .initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that if AWSMobileClient returns an error callback during initialization, the Auth configure method\n+     * throws an AuthException.\n+     * @throws AuthException the AuthException expected to be thrown if initialization fails.\n+     */\n+    @Test(expected = AuthException.class)\n+    public void testConfigureExceptionHandling() throws AuthException {\n+        doAnswer(invocation -> {\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(new JSONObject(), getApplicationContext());\n+    }\n+\n+    /**\n+     * Tests that the signUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signUp() with the username\n+     * and password it received and, if included, the userAttributes and validationData sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void signUp() {\n+        SignUpResult amcResult = new SignUpResult(\n+            false,\n+            new UserCodeDeliveryDetails(\n+                    destination,\n+                    deliveryMedium,\n+                    attributeName\n+            ),\n+            null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(password, invocation.getArgument(1));\n+            Map<String, String> attributeMap = invocation.getArgument(2);\n+            assertTrue(attributeMap.containsKey(attributeKey));\n+            assertEquals(attributeVal, attributeMap.get(attributeKey));\n+            assertEquals(metadata, invocation.getArgument(3));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NTAwNQ==", "bodyText": "Indentation here is -4 from where it ought to be, I believe. It's not clearly indented from the username, password, etc.", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421245005", "createdAt": "2020-05-07T05:18:38Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject testConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(testConfig.toString(), invocation.getArgument(1).toString());\n+\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onResult(userStateDetails);\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(testConfig, context);\n+        verify(mobileClient, times(1))\n+                .initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that if AWSMobileClient returns an error callback during initialization, the Auth configure method\n+     * throws an AuthException.\n+     * @throws AuthException the AuthException expected to be thrown if initialization fails.\n+     */\n+    @Test(expected = AuthException.class)\n+    public void testConfigureExceptionHandling() throws AuthException {\n+        doAnswer(invocation -> {\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(new JSONObject(), getApplicationContext());\n+    }\n+\n+    /**\n+     * Tests that the signUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signUp() with the username\n+     * and password it received and, if included, the userAttributes and validationData sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void signUp() {\n+        SignUpResult amcResult = new SignUpResult(\n+            false,\n+            new UserCodeDeliveryDetails(\n+                    destination,\n+                    deliveryMedium,\n+                    attributeName\n+            ),\n+            null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(password, invocation.getArgument(1));\n+            Map<String, String> attributeMap = invocation.getArgument(2);\n+            assertTrue(attributeMap.containsKey(attributeKey));\n+            assertEquals(attributeVal, attributeMap.get(attributeKey));\n+            assertEquals(metadata, invocation.getArgument(3));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(4);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .signUp(any(String.class), any(String.class), any(Map.class), any(Map.class), any(Callback.class));\n+\n+        authPlugin.signUp(\n+            username,\n+            password,\n+            AWSCognitoAuthSignUpOptions.builder()\n+            .userAttributes(\n+                Collections.singletonList(new AuthUserAttribute(AuthUserAttributeKey.email(), attributeVal))\n+            )\n+            .validationData(metadata)\n+            .build(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NTU0Mg==", "bodyText": "If this callback occurs on a different thread, fail() may not do what you think it will. fail() needs to be called on the test runner thread, to halt the test. If a background thread crashes, but the @Test has already moved on, jUnit won't catch it.\nTLDR: use something like Await.result to pull the exception back into your calling thread, and then do something with it, from that thread. Completable.fromAction(() -> {}).blockingAwait() is another way to achieve the same.", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421245542", "createdAt": "2020-05-07T05:20:36Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject testConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(testConfig.toString(), invocation.getArgument(1).toString());\n+\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onResult(userStateDetails);\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(testConfig, context);\n+        verify(mobileClient, times(1))\n+                .initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that if AWSMobileClient returns an error callback during initialization, the Auth configure method\n+     * throws an AuthException.\n+     * @throws AuthException the AuthException expected to be thrown if initialization fails.\n+     */\n+    @Test(expected = AuthException.class)\n+    public void testConfigureExceptionHandling() throws AuthException {\n+        doAnswer(invocation -> {\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(new JSONObject(), getApplicationContext());\n+    }\n+\n+    /**\n+     * Tests that the signUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signUp() with the username\n+     * and password it received and, if included, the userAttributes and validationData sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void signUp() {\n+        SignUpResult amcResult = new SignUpResult(\n+            false,\n+            new UserCodeDeliveryDetails(\n+                    destination,\n+                    deliveryMedium,\n+                    attributeName\n+            ),\n+            null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(password, invocation.getArgument(1));\n+            Map<String, String> attributeMap = invocation.getArgument(2);\n+            assertTrue(attributeMap.containsKey(attributeKey));\n+            assertEquals(attributeVal, attributeMap.get(attributeKey));\n+            assertEquals(metadata, invocation.getArgument(3));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(4);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .signUp(any(String.class), any(String.class), any(Map.class), any(Map.class), any(Callback.class));\n+\n+        authPlugin.signUp(\n+            username,\n+            password,\n+            AWSCognitoAuthSignUpOptions.builder()\n+            .userAttributes(\n+                Collections.singletonList(new AuthUserAttribute(AuthUserAttributeKey.email(), attributeVal))\n+            )\n+            .validationData(metadata)\n+            .build(),\n+            result -> validateSignUpResult(result, AuthSignUpStep.CONFIRM_SIGN_UP_STEP),\n+            error -> fail());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NTgwMg==", "bodyText": "You can do these any in a way that respects the type system:\nMockito.<Map<Key, Value>>any()\n\nInstead of:\nMockito.any(/* rawtypes */ Map.class)", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421245802", "createdAt": "2020-05-07T05:21:34Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject testConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(testConfig.toString(), invocation.getArgument(1).toString());\n+\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onResult(userStateDetails);\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(testConfig, context);\n+        verify(mobileClient, times(1))\n+                .initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that if AWSMobileClient returns an error callback during initialization, the Auth configure method\n+     * throws an AuthException.\n+     * @throws AuthException the AuthException expected to be thrown if initialization fails.\n+     */\n+    @Test(expected = AuthException.class)\n+    public void testConfigureExceptionHandling() throws AuthException {\n+        doAnswer(invocation -> {\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(new JSONObject(), getApplicationContext());\n+    }\n+\n+    /**\n+     * Tests that the signUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signUp() with the username\n+     * and password it received and, if included, the userAttributes and validationData sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void signUp() {\n+        SignUpResult amcResult = new SignUpResult(\n+            false,\n+            new UserCodeDeliveryDetails(\n+                    destination,\n+                    deliveryMedium,\n+                    attributeName\n+            ),\n+            null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(password, invocation.getArgument(1));\n+            Map<String, String> attributeMap = invocation.getArgument(2);\n+            assertTrue(attributeMap.containsKey(attributeKey));\n+            assertEquals(attributeVal, attributeMap.get(attributeKey));\n+            assertEquals(metadata, invocation.getArgument(3));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(4);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .signUp(any(String.class), any(String.class), any(Map.class), any(Map.class), any(Callback.class));\n+\n+        authPlugin.signUp(\n+            username,\n+            password,\n+            AWSCognitoAuthSignUpOptions.builder()\n+            .userAttributes(\n+                Collections.singletonList(new AuthUserAttribute(AuthUserAttributeKey.email(), attributeVal))\n+            )\n+            .validationData(metadata)\n+            .build(),\n+            result -> validateSignUpResult(result, AuthSignUpStep.CONFIRM_SIGN_UP_STEP),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .signUp(any(String.class), any(String.class), any(Map.class), any(Map.class), any(Callback.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NjQ4OQ==", "bodyText": "To my earlier point about needing to make these calls synchronous -- this is why our other components all have a corresponding test utility called like SynchronousWhatever. It allows us to write easy jUnit tests that perform actions in a serial way. I would suggest you make like a SynchronousAuth utility, which wraps the AuthCategoryBehavior. Then, you could either do SynchronousAuth.delegatingTo(authCategory), or SynchronousAuth.delegatingTo(authPlugin), since both are examples of the AuthCategoryBehavior.", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421246489", "createdAt": "2020-05-07T05:24:00Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject testConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(testConfig.toString(), invocation.getArgument(1).toString());\n+\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onResult(userStateDetails);\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(testConfig, context);\n+        verify(mobileClient, times(1))\n+                .initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that if AWSMobileClient returns an error callback during initialization, the Auth configure method\n+     * throws an AuthException.\n+     * @throws AuthException the AuthException expected to be thrown if initialization fails.\n+     */\n+    @Test(expected = AuthException.class)\n+    public void testConfigureExceptionHandling() throws AuthException {\n+        doAnswer(invocation -> {\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(new JSONObject(), getApplicationContext());\n+    }\n+\n+    /**\n+     * Tests that the signUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signUp() with the username\n+     * and password it received and, if included, the userAttributes and validationData sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void signUp() {\n+        SignUpResult amcResult = new SignUpResult(\n+            false,\n+            new UserCodeDeliveryDetails(\n+                    destination,\n+                    deliveryMedium,\n+                    attributeName\n+            ),\n+            null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(password, invocation.getArgument(1));\n+            Map<String, String> attributeMap = invocation.getArgument(2);\n+            assertTrue(attributeMap.containsKey(attributeKey));\n+            assertEquals(attributeVal, attributeMap.get(attributeKey));\n+            assertEquals(metadata, invocation.getArgument(3));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(4);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .signUp(any(String.class), any(String.class), any(Map.class), any(Map.class), any(Callback.class));\n+\n+        authPlugin.signUp(\n+            username,\n+            password,\n+            AWSCognitoAuthSignUpOptions.builder()\n+            .userAttributes(\n+                Collections.singletonList(new AuthUserAttribute(AuthUserAttributeKey.email(), attributeVal))\n+            )\n+            .validationData(metadata)\n+            .build(),\n+            result -> validateSignUpResult(result, AuthSignUpStep.CONFIRM_SIGN_UP_STEP),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .signUp(any(String.class), any(String.class), any(Map.class), any(Map.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the confirmSignUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.confirmSignUp with\n+     * the username and confirmation code it received.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void confirmSignUp() {\n+        SignUpResult amcResult = new SignUpResult(\n+                true,\n+                new UserCodeDeliveryDetails(\n+                        destination,\n+                        deliveryMedium,\n+                        attributeName\n+                ),\n+                null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(confirmationCode, invocation.getArgument(1));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(2);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .confirmSignUp(any(String.class), any(String.class), any(Callback.class));\n+\n+        authPlugin.confirmSignUp(\n+            username,\n+            confirmationCode,\n+            result -> validateSignUpResult(result, AuthSignUpStep.DONE),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .confirmSignUp(any(String.class), any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the resendSignUpCode method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.resendSignUp with\n+     * the username it received .\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void resendSignUpCode() {\n+        SignUpResult amcResult = new SignUpResult(\n+                false,\n+                new UserCodeDeliveryDetails(\n+                        destination,\n+                        deliveryMedium,\n+                        attributeName\n+                ),\n+                null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(1);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .resendSignUp(any(String.class), any(Callback.class));\n+\n+        authPlugin.resendSignUpCode(\n+            username,\n+            result -> validateSignUpResult(result, AuthSignUpStep.CONFIRM_SIGN_UP_STEP),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .resendSignUp(any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the signIn method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signIn with\n+     * the username, password it received, and, if included, the metadata sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignInResult.\n+     */\n+    @Test\n+    public void signIn() {\n+        SignInResult amcResult = new SignInResult(\n+            SignInState.SMS_MFA,\n+            new UserCodeDeliveryDetails(\n+                    destination,\n+                    deliveryMedium,\n+                    attributeName\n+            )\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(password, invocation.getArgument(1));\n+            assertEquals(metadata, invocation.getArgument(2));\n+\n+            Callback<SignInResult> callback = invocation.getArgument(3);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .signIn(any(String.class), any(String.class), any(Map.class), any(Callback.class));\n+\n+        authPlugin.signIn(\n+            username,\n+            password,\n+            AWSCognitoAuthSignInOptions.builder().metadata(metadata).build(),\n+            result -> validateSignInResult(\n+                result,\n+                false,\n+                AuthSignInStep.CONFIRM_SIGN_IN_WITH_SMS_MFA_CODE\n+            ),\n+            error -> fail());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 294}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NjY4Mg==", "bodyText": "nit empty line", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421246682", "createdAt": "2020-05-07T05:24:40Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject testConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(testConfig.toString(), invocation.getArgument(1).toString());\n+\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onResult(userStateDetails);\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(testConfig, context);\n+        verify(mobileClient, times(1))\n+                .initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that if AWSMobileClient returns an error callback during initialization, the Auth configure method\n+     * throws an AuthException.\n+     * @throws AuthException the AuthException expected to be thrown if initialization fails.\n+     */\n+    @Test(expected = AuthException.class)\n+    public void testConfigureExceptionHandling() throws AuthException {\n+        doAnswer(invocation -> {\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(new JSONObject(), getApplicationContext());\n+    }\n+\n+    /**\n+     * Tests that the signUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signUp() with the username\n+     * and password it received and, if included, the userAttributes and validationData sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void signUp() {\n+        SignUpResult amcResult = new SignUpResult(\n+            false,\n+            new UserCodeDeliveryDetails(\n+                    destination,\n+                    deliveryMedium,\n+                    attributeName\n+            ),\n+            null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(password, invocation.getArgument(1));\n+            Map<String, String> attributeMap = invocation.getArgument(2);\n+            assertTrue(attributeMap.containsKey(attributeKey));\n+            assertEquals(attributeVal, attributeMap.get(attributeKey));\n+            assertEquals(metadata, invocation.getArgument(3));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(4);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .signUp(any(String.class), any(String.class), any(Map.class), any(Map.class), any(Callback.class));\n+\n+        authPlugin.signUp(\n+            username,\n+            password,\n+            AWSCognitoAuthSignUpOptions.builder()\n+            .userAttributes(\n+                Collections.singletonList(new AuthUserAttribute(AuthUserAttributeKey.email(), attributeVal))\n+            )\n+            .validationData(metadata)\n+            .build(),\n+            result -> validateSignUpResult(result, AuthSignUpStep.CONFIRM_SIGN_UP_STEP),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .signUp(any(String.class), any(String.class), any(Map.class), any(Map.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the confirmSignUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.confirmSignUp with\n+     * the username and confirmation code it received.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void confirmSignUp() {\n+        SignUpResult amcResult = new SignUpResult(\n+                true,\n+                new UserCodeDeliveryDetails(\n+                        destination,\n+                        deliveryMedium,\n+                        attributeName\n+                ),\n+                null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(confirmationCode, invocation.getArgument(1));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(2);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .confirmSignUp(any(String.class), any(String.class), any(Callback.class));\n+\n+        authPlugin.confirmSignUp(\n+            username,\n+            confirmationCode,\n+            result -> validateSignUpResult(result, AuthSignUpStep.DONE),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .confirmSignUp(any(String.class), any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the resendSignUpCode method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.resendSignUp with\n+     * the username it received .\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void resendSignUpCode() {\n+        SignUpResult amcResult = new SignUpResult(\n+                false,\n+                new UserCodeDeliveryDetails(\n+                        destination,\n+                        deliveryMedium,\n+                        attributeName\n+                ),\n+                null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(1);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .resendSignUp(any(String.class), any(Callback.class));\n+\n+        authPlugin.resendSignUpCode(\n+            username,\n+            result -> validateSignUpResult(result, AuthSignUpStep.CONFIRM_SIGN_UP_STEP),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .resendSignUp(any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the signIn method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signIn with\n+     * the username, password it received, and, if included, the metadata sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignInResult.\n+     */\n+    @Test\n+    public void signIn() {\n+        SignInResult amcResult = new SignInResult(\n+            SignInState.SMS_MFA,\n+            new UserCodeDeliveryDetails(\n+                    destination,\n+                    deliveryMedium,\n+                    attributeName\n+            )\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(password, invocation.getArgument(1));\n+            assertEquals(metadata, invocation.getArgument(2));\n+\n+            Callback<SignInResult> callback = invocation.getArgument(3);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .signIn(any(String.class), any(String.class), any(Map.class), any(Callback.class));\n+\n+        authPlugin.signIn(\n+            username,\n+            password,\n+            AWSCognitoAuthSignInOptions.builder().metadata(metadata).build(),\n+            result -> validateSignInResult(\n+                result,\n+                false,\n+                AuthSignInStep.CONFIRM_SIGN_IN_WITH_SMS_MFA_CODE\n+            ),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .signIn(any(String.class), any(String.class), any(Map.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the confirmSignIn method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.confirmSignIn with\n+     * the confirmation code it received and the success callback receives a valid AuthSignInResult.\n+     */\n+    @Test\n+    public void confirmSignIn() {\n+        SignInResult amcResult = new SignInResult(\n+                SignInState.DONE,\n+                new UserCodeDeliveryDetails(\n+                        destination,\n+                        deliveryMedium,\n+                        attributeName\n+                )\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(confirmationCode, invocation.getArgument(0));\n+\n+            Callback<SignInResult> callback = invocation.getArgument(1);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .confirmSignIn(any(String.class), any(Callback.class));\n+\n+        authPlugin.confirmSignIn(\n+            confirmationCode,\n+            result -> validateSignInResult(\n+                result,\n+                true,\n+                AuthSignInStep.DONE\n+            ),\n+            error -> fail()\n+        );\n+\n+        verify(mobileClient, times(1))\n+                .confirmSignIn(any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the resetPassword method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.forgotPassword with\n+     * the username it received.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthResetPasswordResult and in\n+     * the onError case, the error call back receives an AuthException with the root cause attached.\n+     */\n+    @Test\n+    public void resetPassword() {\n+        ForgotPasswordResult amcResult = new ForgotPasswordResult(ForgotPasswordState.CONFIRMATION_CODE);\n+        amcResult.setParameters(new UserCodeDeliveryDetails(\n+                destination,\n+                deliveryMedium,\n+                attributeName\n+        ));\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+\n+            Callback<ForgotPasswordResult> callback = invocation.getArgument(1);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .forgotPassword(any(String.class), any(Callback.class));\n+\n+        authPlugin.resetPassword(\n+            username,\n+            result -> {\n+                assertFalse(result.isPasswordReset());\n+                assertEquals(\n+                    AuthResetPasswordStep.CONFIRM_RESET_PASSWORD_WITH_CODE,\n+                    result.getNextStep().getResetPasswordStep()\n+                );\n+                validateCodeDeliveryDetails(result.getNextStep().getCodeDeliveryDetails());\n+            },\n+            error -> fail()\n+        );\n+\n+        verify(mobileClient, times(1))\n+                .forgotPassword(any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the confirmResetPassword method of the Auth wrapper of AWSMobileClient (AMC) calls\n+     * AMC.confirmForgotPassword with the new password and confirmation code it received.\n+     * Also ensures that in the onResult case, the success callback is triggered and in the onError case,\n+     * the error call back receives an AuthException with the root cause attached.\n+     */\n+    @Test\n+    public void confirmResetPassword() {\n+        ForgotPasswordResult amcResult = new ForgotPasswordResult(ForgotPasswordState.DONE);\n+\n+        doAnswer(invocation -> {\n+            assertEquals(newPassword, invocation.getArgument(0));\n+            assertEquals(confirmationCode, invocation.getArgument(1));\n+\n+            Callback<ForgotPasswordResult> callback = invocation.getArgument(2);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .confirmForgotPassword(any(String.class), any(String.class), any(Callback.class));\n+\n+        authPlugin.confirmResetPassword(\n+            newPassword,\n+            confirmationCode,\n+            () -> { },\n+            error -> fail()\n+        );\n+\n+        verify(mobileClient, times(1))\n+                .confirmForgotPassword(any(String.class), any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the getCurrentUser method of the Auth wrapper of AWSMobileClient (AMC) returns a new\n+     * AWSCognitoAuthUser object containing the userId property in the plugin and the username from AMC.getUsername().\n+     */\n+    @Test\n+    public void getCurrentUser() {\n+        doAnswer(invocation -> username).when(mobileClient).getUsername();\n+        AuthUser user = authPlugin.getCurrentUser();\n+\n+        assertEquals(userId, user.getUserId());\n+        assertEquals(username, user.getUsername());\n+    }\n+\n+    /**\n+     * Tests that the getEscapeHatch method of the Auth wrapper of AWSMobileClient (AMC) returns the instance of\n+     * AWSMobileClient held by the plugin.\n+     */\n+    @Test\n+    public void getEscapeHatch() {\n+        AWSMobileClient client = authPlugin.getEscapeHatch();\n+        assertEquals(mobileClient, client);\n+    }\n+\n+    /**\n+     * Validate the sign up result is what was expected.\n+     * @param result The received result\n+     * @param targetStep The correct value for the next step (the only part of the response that varies in these tests)\n+     */\n+    private void validateSignUpResult(AuthSignUpResult result, AuthSignUpStep targetStep) {\n+        AuthNextSignUpStep nextStep = result.getNextStep();\n+        validateCodeDeliveryDetails(nextStep.getCodeDeliveryDetails());\n+        assertTrue(result.isSignUpComplete());\n+        assertEquals(targetStep, nextStep.getSignUpStep());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 443}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0ODAyMA==", "bodyText": "Instead of this, you can usually do like:\norg.junit.Assert.assertEquals(highLevelExpectedObj, highLevelActualObj)\n\nThis works if the high level object has a sane equals() implementation.\nSeems likely that AWSMobileClient (and its associated classes) may not.\nIf that's the case, the next best you can do is like:\nprivate static void assertEquals(HighLevelType expected, HighLevelType actual) {\n    // Assert field-by-field equality\n}", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421248020", "createdAt": "2020-05-07T05:29:38Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,459 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Map;\n+\n+import edu.emory.mathcs.backport.java.util.Collections;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"unchecked\")\n+public final class AuthComponentTest {\n+    private AWSMobileClient mobileClient;\n+    private AWSCognitoAuthPlugin authPlugin;\n+    private final String userId = \"myId\";\n+    private final String destination = \"e***@email.com\";\n+    private final String deliveryMedium = \"sms\";\n+    private final String attributeName = \"email\";\n+    private final String username = \"username\";\n+    private final String password = \"password123\";\n+    private final String newPassword = \"newPassword123\";\n+    private final String attributeKey = AuthUserAttributeKey.email().getKeyString();\n+    private final String attributeVal = \"email@email.com\";\n+    private final String confirmationCode = \"confirm\";\n+    private final Map<String, String> metadata = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authPlugin = new AWSCognitoAuthPlugin(mobileClient, userId);\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject testConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(testConfig.toString(), invocation.getArgument(1).toString());\n+\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onResult(userStateDetails);\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(testConfig, context);\n+        verify(mobileClient, times(1))\n+                .initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that if AWSMobileClient returns an error callback during initialization, the Auth configure method\n+     * throws an AuthException.\n+     * @throws AuthException the AuthException expected to be thrown if initialization fails.\n+     */\n+    @Test(expected = AuthException.class)\n+    public void testConfigureExceptionHandling() throws AuthException {\n+        doAnswer(invocation -> {\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).initialize(any(Context.class), any(AWSConfiguration.class), any(Callback.class));\n+\n+        authPlugin.configure(new JSONObject(), getApplicationContext());\n+    }\n+\n+    /**\n+     * Tests that the signUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signUp() with the username\n+     * and password it received and, if included, the userAttributes and validationData sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void signUp() {\n+        SignUpResult amcResult = new SignUpResult(\n+            false,\n+            new UserCodeDeliveryDetails(\n+                    destination,\n+                    deliveryMedium,\n+                    attributeName\n+            ),\n+            null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(password, invocation.getArgument(1));\n+            Map<String, String> attributeMap = invocation.getArgument(2);\n+            assertTrue(attributeMap.containsKey(attributeKey));\n+            assertEquals(attributeVal, attributeMap.get(attributeKey));\n+            assertEquals(metadata, invocation.getArgument(3));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(4);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .signUp(any(String.class), any(String.class), any(Map.class), any(Map.class), any(Callback.class));\n+\n+        authPlugin.signUp(\n+            username,\n+            password,\n+            AWSCognitoAuthSignUpOptions.builder()\n+            .userAttributes(\n+                Collections.singletonList(new AuthUserAttribute(AuthUserAttributeKey.email(), attributeVal))\n+            )\n+            .validationData(metadata)\n+            .build(),\n+            result -> validateSignUpResult(result, AuthSignUpStep.CONFIRM_SIGN_UP_STEP),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .signUp(any(String.class), any(String.class), any(Map.class), any(Map.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the confirmSignUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.confirmSignUp with\n+     * the username and confirmation code it received.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void confirmSignUp() {\n+        SignUpResult amcResult = new SignUpResult(\n+                true,\n+                new UserCodeDeliveryDetails(\n+                        destination,\n+                        deliveryMedium,\n+                        attributeName\n+                ),\n+                null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(confirmationCode, invocation.getArgument(1));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(2);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .confirmSignUp(any(String.class), any(String.class), any(Callback.class));\n+\n+        authPlugin.confirmSignUp(\n+            username,\n+            confirmationCode,\n+            result -> validateSignUpResult(result, AuthSignUpStep.DONE),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .confirmSignUp(any(String.class), any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the resendSignUpCode method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.resendSignUp with\n+     * the username it received .\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     */\n+    @Test\n+    public void resendSignUpCode() {\n+        SignUpResult amcResult = new SignUpResult(\n+                false,\n+                new UserCodeDeliveryDetails(\n+                        destination,\n+                        deliveryMedium,\n+                        attributeName\n+                ),\n+                null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(1);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .resendSignUp(any(String.class), any(Callback.class));\n+\n+        authPlugin.resendSignUpCode(\n+            username,\n+            result -> validateSignUpResult(result, AuthSignUpStep.CONFIRM_SIGN_UP_STEP),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .resendSignUp(any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the signIn method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signIn with\n+     * the username, password it received, and, if included, the metadata sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignInResult.\n+     */\n+    @Test\n+    public void signIn() {\n+        SignInResult amcResult = new SignInResult(\n+            SignInState.SMS_MFA,\n+            new UserCodeDeliveryDetails(\n+                    destination,\n+                    deliveryMedium,\n+                    attributeName\n+            )\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+            assertEquals(password, invocation.getArgument(1));\n+            assertEquals(metadata, invocation.getArgument(2));\n+\n+            Callback<SignInResult> callback = invocation.getArgument(3);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .signIn(any(String.class), any(String.class), any(Map.class), any(Callback.class));\n+\n+        authPlugin.signIn(\n+            username,\n+            password,\n+            AWSCognitoAuthSignInOptions.builder().metadata(metadata).build(),\n+            result -> validateSignInResult(\n+                result,\n+                false,\n+                AuthSignInStep.CONFIRM_SIGN_IN_WITH_SMS_MFA_CODE\n+            ),\n+            error -> fail());\n+\n+        verify(mobileClient, times(1))\n+                .signIn(any(String.class), any(String.class), any(Map.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the confirmSignIn method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.confirmSignIn with\n+     * the confirmation code it received and the success callback receives a valid AuthSignInResult.\n+     */\n+    @Test\n+    public void confirmSignIn() {\n+        SignInResult amcResult = new SignInResult(\n+                SignInState.DONE,\n+                new UserCodeDeliveryDetails(\n+                        destination,\n+                        deliveryMedium,\n+                        attributeName\n+                )\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(confirmationCode, invocation.getArgument(0));\n+\n+            Callback<SignInResult> callback = invocation.getArgument(1);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .confirmSignIn(any(String.class), any(Callback.class));\n+\n+        authPlugin.confirmSignIn(\n+            confirmationCode,\n+            result -> validateSignInResult(\n+                result,\n+                true,\n+                AuthSignInStep.DONE\n+            ),\n+            error -> fail()\n+        );\n+\n+        verify(mobileClient, times(1))\n+                .confirmSignIn(any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the resetPassword method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.forgotPassword with\n+     * the username it received.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthResetPasswordResult and in\n+     * the onError case, the error call back receives an AuthException with the root cause attached.\n+     */\n+    @Test\n+    public void resetPassword() {\n+        ForgotPasswordResult amcResult = new ForgotPasswordResult(ForgotPasswordState.CONFIRMATION_CODE);\n+        amcResult.setParameters(new UserCodeDeliveryDetails(\n+                destination,\n+                deliveryMedium,\n+                attributeName\n+        ));\n+\n+        doAnswer(invocation -> {\n+            assertEquals(username, invocation.getArgument(0));\n+\n+            Callback<ForgotPasswordResult> callback = invocation.getArgument(1);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .forgotPassword(any(String.class), any(Callback.class));\n+\n+        authPlugin.resetPassword(\n+            username,\n+            result -> {\n+                assertFalse(result.isPasswordReset());\n+                assertEquals(\n+                    AuthResetPasswordStep.CONFIRM_RESET_PASSWORD_WITH_CODE,\n+                    result.getNextStep().getResetPasswordStep()\n+                );\n+                validateCodeDeliveryDetails(result.getNextStep().getCodeDeliveryDetails());\n+            },\n+            error -> fail()\n+        );\n+\n+        verify(mobileClient, times(1))\n+                .forgotPassword(any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the confirmResetPassword method of the Auth wrapper of AWSMobileClient (AMC) calls\n+     * AMC.confirmForgotPassword with the new password and confirmation code it received.\n+     * Also ensures that in the onResult case, the success callback is triggered and in the onError case,\n+     * the error call back receives an AuthException with the root cause attached.\n+     */\n+    @Test\n+    public void confirmResetPassword() {\n+        ForgotPasswordResult amcResult = new ForgotPasswordResult(ForgotPasswordState.DONE);\n+\n+        doAnswer(invocation -> {\n+            assertEquals(newPassword, invocation.getArgument(0));\n+            assertEquals(confirmationCode, invocation.getArgument(1));\n+\n+            Callback<ForgotPasswordResult> callback = invocation.getArgument(2);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient)\n+            .confirmForgotPassword(any(String.class), any(String.class), any(Callback.class));\n+\n+        authPlugin.confirmResetPassword(\n+            newPassword,\n+            confirmationCode,\n+            () -> { },\n+            error -> fail()\n+        );\n+\n+        verify(mobileClient, times(1))\n+                .confirmForgotPassword(any(String.class), any(String.class), any(Callback.class));\n+    }\n+\n+    /**\n+     * Tests that the getCurrentUser method of the Auth wrapper of AWSMobileClient (AMC) returns a new\n+     * AWSCognitoAuthUser object containing the userId property in the plugin and the username from AMC.getUsername().\n+     */\n+    @Test\n+    public void getCurrentUser() {\n+        doAnswer(invocation -> username).when(mobileClient).getUsername();\n+        AuthUser user = authPlugin.getCurrentUser();\n+\n+        assertEquals(userId, user.getUserId());\n+        assertEquals(username, user.getUsername());\n+    }\n+\n+    /**\n+     * Tests that the getEscapeHatch method of the Auth wrapper of AWSMobileClient (AMC) returns the instance of\n+     * AWSMobileClient held by the plugin.\n+     */\n+    @Test\n+    public void getEscapeHatch() {\n+        AWSMobileClient client = authPlugin.getEscapeHatch();\n+        assertEquals(mobileClient, client);\n+    }\n+\n+    /**\n+     * Validate the sign up result is what was expected.\n+     * @param result The received result\n+     * @param targetStep The correct value for the next step (the only part of the response that varies in these tests)\n+     */\n+    private void validateSignUpResult(AuthSignUpResult result, AuthSignUpStep targetStep) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 438}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0ODI5MA==", "bodyText": "I was surprised that you don't need to include a special second dependency for the final value mocking stuff. Isn't there like an mockito-inline, or something? Maybe that was an older version....", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421248290", "createdAt": "2020-05-07T05:30:38Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/build.gradle", "diffHunk": "@@ -22,4 +22,18 @@ dependencies {\n     implementation dependency.androidx.appcompat\n     implementation dependency.aws.mobileclient\n     implementation dependency.aws.cognitoauth\n+\n+    testImplementation project(path: ':testutils')\n+    testImplementation dependency.junit\n+    testImplementation dependency.mockito", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0ODUwOA==", "bodyText": "You don't have an instrumentation tests, so you don't need to include anything that begins with androidTest*.", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421248508", "createdAt": "2020-05-07T05:31:20Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/build.gradle", "diffHunk": "@@ -22,4 +22,18 @@ dependencies {\n     implementation dependency.androidx.appcompat\n     implementation dependency.aws.mobileclient\n     implementation dependency.aws.cognitoauth\n+\n+    testImplementation project(path: ':testutils')\n+    testImplementation dependency.junit\n+    testImplementation dependency.mockito\n+    testImplementation (dependency.robolectric) {\n+        // https://github.com/robolectric/robolectric/issues/5245\n+        exclude group: 'com.google.auto.service', module: 'auto-service'\n+    }\n+    testImplementation dependency.androidx.test.core\n+\n+    androidTestImplementation project(path: ':testutils')\n+    androidTestImplementation dependency.androidx.annotation\n+    androidTestImplementation dependency.androidx.test.runner\n+    androidTestImplementation dependency.androidx.test.junit", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c7831a2a7a329a4a719184dae0379be77581f8c", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/1c7831a2a7a329a4a719184dae0379be77581f8c", "committedDate": "2020-05-07T23:11:10Z", "message": "Addresses PR comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MDEwMTA0", "url": "https://github.com/aws-amplify/amplify-android/pull/433#pullrequestreview-408010104", "createdAt": "2020-05-08T05:46:59Z", "commit": {"oid": "1c7831a2a7a329a4a719184dae0379be77581f8c"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNTo0Njo1OVrOGSZ3aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNjowNjozOVrOGSaOdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1MTMzNg==", "bodyText": "It isn't much extra complexity, really:\nboolean someFlag;\n\nvs.\nenum SomeFlag {\n    TRUE,\n    FALSE\n}\n\n3 lines more --- none more, if you cheat:\nenum SomeFlag { TRUE, FALSE }\n\n:-)", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421951336", "createdAt": "2020-05-08T05:46:59Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthPlugin.java", "diffHunk": "@@ -452,16 +414,23 @@ public void onError(Exception exception) {\n     }\n \n     @Override\n-    public void forgotPassword(\n+    public void resetPassword(\n             @NonNull String username,\n-            @NonNull Consumer<AuthCodeDeliveryDetails> onSuccess,\n+            @NonNull Consumer<AuthResetPasswordResult> onSuccess,\n             @NonNull Consumer<AuthException> onException\n     ) {\n-        AWSMobileClient.getInstance().forgotPassword(username, new Callback<ForgotPasswordResult>() {\n+        awsMobileClient.forgotPassword(username, new Callback<ForgotPasswordResult>() {\n             @Override\n             public void onResult(ForgotPasswordResult result) {\n                 if (result.getState().equals(ForgotPasswordState.CONFIRMATION_CODE)) {\n-                    onSuccess.accept(convertCodeDeliveryDetails(result.getParameters()));\n+                    onSuccess.accept(new AuthResetPasswordResult(\n+                            false,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzMjU4Mg=="}, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 266}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1MjI3Ng==", "bodyText": "Ah this one is the \"additional info\" field (I had to go look it up.) You could at least do Collections.emptyMap() to visually indicate the type of the param, even if it won't be utilized in any significant way. Also, means you don't have to add an if (thing is null) do special ops branch. It actually reduces complexity.", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421952276", "createdAt": "2020-05-08T05:50:20Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthPlugin.java", "diffHunk": "@@ -452,16 +414,23 @@ public void onError(Exception exception) {\n     }\n \n     @Override\n-    public void forgotPassword(\n+    public void resetPassword(\n             @NonNull String username,\n-            @NonNull Consumer<AuthCodeDeliveryDetails> onSuccess,\n+            @NonNull Consumer<AuthResetPasswordResult> onSuccess,\n             @NonNull Consumer<AuthException> onException\n     ) {\n-        AWSMobileClient.getInstance().forgotPassword(username, new Callback<ForgotPasswordResult>() {\n+        awsMobileClient.forgotPassword(username, new Callback<ForgotPasswordResult>() {\n             @Override\n             public void onResult(ForgotPasswordResult result) {\n                 if (result.getState().equals(ForgotPasswordState.CONFIRMATION_CODE)) {\n-                    onSuccess.accept(convertCodeDeliveryDetails(result.getParameters()));\n+                    onSuccess.accept(new AuthResetPasswordResult(\n+                            false,\n+                            new AuthNextResetPasswordStep(\n+                                    AuthResetPasswordStep.CONFIRM_RESET_PASSWORD_WITH_CODE,\n+                                    null,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzMzUwMQ=="}, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1MjYxMw==", "bodyText": "I feel like 50% of our recovery suggestions right now are either the TODO or a \"see attached exception\" or a \"file a bug,\" right now. We should streamline these, if they're going to be so prevalent.", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421952613", "createdAt": "2020-05-08T05:51:27Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthPlugin.java", "diffHunk": "@@ -517,14 +486,34 @@ public void onError(Exception exception) {\n         );\n     }\n \n+    @Override\n+    public void updatePassword(\n+            @NonNull String oldPassword,\n+            @NonNull String newPassword,\n+            @Nullable Action onSuccess,\n+            @Nullable Consumer<AuthException> onError\n+    ) {\n+        awsMobileClient.changePassword(oldPassword, newPassword, new Callback<Void>() {\n+            @Override\n+            public void onResult(Void result) {\n+                onSuccess.call();\n+            }\n+\n+            @Override\n+            public void onError(Exception error) {\n+                onError.accept(new AuthException(\n+                        \"Failed to change password\",\n+                        error,\n+                        \"See attached exception for more details\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzMzk5OQ=="}, "originalCommit": {"oid": "560463f9ddede2126b8bb036f153723a96adb69e"}, "originalPosition": 314}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1MzYwMQ==", "bodyText": "This feels like a heavy weight way to get a string -- you could hard code it? In theory, people shouldn't be changing the plugin key, ever. So if they do, it'd almost be preferable for all of the tests to go up in uproarious flames.", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421953601", "createdAt": "2020-05-08T05:54:48Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,458 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCategory;\n+import com.amplifyframework.auth.AuthCategoryConfiguration;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthResetPasswordResult;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+import com.amplifyframework.testutils.sync.SynchronousAuth;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.Tokens;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class AuthComponentTest {\n+    private static final String USER_ID = \"myId\";\n+    private static final String DESTINATION = \"e***@email.com\";\n+    private static final String DELIVERY_MEDIUM = \"sms\";\n+    private static final String ATTRIBUTE_NAME = \"email\";\n+    private static final String USERNAME = \"username\";\n+    private static final String PASSWORD = \"password123\";\n+    private static final String NEW_PASSWORD = \"newPassword123\";\n+    private static final String ATTRIBUTE_KEY = AuthUserAttributeKey.email().getKeyString();\n+    private static final String ATTRIBUTE_VAL = \"email@email.com\";\n+    private static final String CONFIRMATION_CODE = \"confirm\";\n+    private static final Map<String, String> METADATA = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+    private AWSMobileClient mobileClient;\n+    private AuthCategory authCategory;\n+    private SynchronousAuth synchronousAuth;\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authCategory = new AuthCategory();\n+        authCategory.addPlugin(new AWSCognitoAuthPlugin(mobileClient, USER_ID));\n+        synchronousAuth = SynchronousAuth.delegatingTo(authCategory);\n+\n+        doAnswer(invocation -> {\n+            Callback<Tokens> callback = invocation.getArgument(0);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).getTokens(any());\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject pluginConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+        JSONObject json = new JSONObject().put(\"plugins\",\n+                new JSONObject().put(\n+                    new AWSCognitoAuthPlugin().getPluginKey(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c7831a2a7a329a4a719184dae0379be77581f8c"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NDU2Mg==", "bodyText": "Previously, you had eq() matchers, and then made assertions inside, which more or less just verified that the eq test matchers worked.\nThe way you have this now, with the any() matches, and the assertions on the value of the any()-thing -- this is more of a valid test. However, the mechanism is unusual.\nIf you are trying to see what values were passed into the initialize() call, the standard way to achieve this is with an ArgumentCaptor. The doAnswer is really for behavior mocking_, not for behavioral verification.\nTLDR for ArgumentCaptor:\nArgumentCaptor<FooType> fooCaptor = ArgumentCaptor.forClass(FooType.class);\nverify(gizmo).initialize(fooCaptor.capture());\nFooType capturedValue = fooCaptor.value();\nassertTrue(idealFoo, capturedValue);", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421954562", "createdAt": "2020-05-08T05:58:00Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,458 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCategory;\n+import com.amplifyframework.auth.AuthCategoryConfiguration;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthResetPasswordResult;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+import com.amplifyframework.testutils.sync.SynchronousAuth;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.Tokens;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class AuthComponentTest {\n+    private static final String USER_ID = \"myId\";\n+    private static final String DESTINATION = \"e***@email.com\";\n+    private static final String DELIVERY_MEDIUM = \"sms\";\n+    private static final String ATTRIBUTE_NAME = \"email\";\n+    private static final String USERNAME = \"username\";\n+    private static final String PASSWORD = \"password123\";\n+    private static final String NEW_PASSWORD = \"newPassword123\";\n+    private static final String ATTRIBUTE_KEY = AuthUserAttributeKey.email().getKeyString();\n+    private static final String ATTRIBUTE_VAL = \"email@email.com\";\n+    private static final String CONFIRMATION_CODE = \"confirm\";\n+    private static final Map<String, String> METADATA = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+    private AWSMobileClient mobileClient;\n+    private AuthCategory authCategory;\n+    private SynchronousAuth synchronousAuth;\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authCategory = new AuthCategory();\n+        authCategory.addPlugin(new AWSCognitoAuthPlugin(mobileClient, USER_ID));\n+        synchronousAuth = SynchronousAuth.delegatingTo(authCategory);\n+\n+        doAnswer(invocation -> {\n+            Callback<Tokens> callback = invocation.getArgument(0);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).getTokens(any());\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject pluginConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+        JSONObject json = new JSONObject().put(\"plugins\",\n+                new JSONObject().put(\n+                    new AWSCognitoAuthPlugin().getPluginKey(),\n+                    pluginConfig\n+                )\n+        );\n+        AuthCategoryConfiguration authConfig = new AuthCategoryConfiguration();\n+        authConfig.populateFromJSON(json);\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(pluginConfig.toString(), invocation.getArgument(1).toString());\n+            assertTrue(invocation.getArgument(1) instanceof AWSConfiguration);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c7831a2a7a329a4a719184dae0379be77581f8c"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NTgxNA==", "bodyText": "Feels like a lot of boilerplate for the user to add a dang attribute, no?\nCan we achieve soemthing more like:\nAWSCognitoAuthSignUpOptions.builder()\n    .userAttribute(AuthUserAttributeKey.email(), ATTRIBUTE_VAL)\n    .build();", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421955814", "createdAt": "2020-05-08T06:01:53Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,458 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCategory;\n+import com.amplifyframework.auth.AuthCategoryConfiguration;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthResetPasswordResult;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+import com.amplifyframework.testutils.sync.SynchronousAuth;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.Tokens;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class AuthComponentTest {\n+    private static final String USER_ID = \"myId\";\n+    private static final String DESTINATION = \"e***@email.com\";\n+    private static final String DELIVERY_MEDIUM = \"sms\";\n+    private static final String ATTRIBUTE_NAME = \"email\";\n+    private static final String USERNAME = \"username\";\n+    private static final String PASSWORD = \"password123\";\n+    private static final String NEW_PASSWORD = \"newPassword123\";\n+    private static final String ATTRIBUTE_KEY = AuthUserAttributeKey.email().getKeyString();\n+    private static final String ATTRIBUTE_VAL = \"email@email.com\";\n+    private static final String CONFIRMATION_CODE = \"confirm\";\n+    private static final Map<String, String> METADATA = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+    private AWSMobileClient mobileClient;\n+    private AuthCategory authCategory;\n+    private SynchronousAuth synchronousAuth;\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authCategory = new AuthCategory();\n+        authCategory.addPlugin(new AWSCognitoAuthPlugin(mobileClient, USER_ID));\n+        synchronousAuth = SynchronousAuth.delegatingTo(authCategory);\n+\n+        doAnswer(invocation -> {\n+            Callback<Tokens> callback = invocation.getArgument(0);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).getTokens(any());\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject pluginConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+        JSONObject json = new JSONObject().put(\"plugins\",\n+                new JSONObject().put(\n+                    new AWSCognitoAuthPlugin().getPluginKey(),\n+                    pluginConfig\n+                )\n+        );\n+        AuthCategoryConfiguration authConfig = new AuthCategoryConfiguration();\n+        authConfig.populateFromJSON(json);\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(pluginConfig.toString(), invocation.getArgument(1).toString());\n+            assertTrue(invocation.getArgument(1) instanceof AWSConfiguration);\n+\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onResult(userStateDetails);\n+            return null;\n+        }).when(mobileClient).initialize(any(), any(), any());\n+\n+        authCategory.configure(authConfig, context);\n+        verify(mobileClient).initialize(any(), any(), any());\n+    }\n+\n+    /**\n+     * If {@link AWSMobileClient} emits an error during initialization, the\n+     * {@link com.amplifyframework.auth.AuthPlugin#configure(JSONObject, Context)} method should wrap that exception\n+     * in an {@link AuthException} and throw it on its calling thread.\n+     * @throws AmplifyException the exception expected to be thrown when configuration fails.\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test(expected = AuthException.class)\n+    public void testConfigureExceptionHandling() throws AmplifyException, JSONException {\n+        JSONObject pluginConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+        JSONObject json = new JSONObject().put(\"plugins\",\n+                new JSONObject().put(\n+                        new AWSCognitoAuthPlugin().getPluginKey(),\n+                        pluginConfig\n+                )\n+        );\n+        AuthCategoryConfiguration authConfig = new AuthCategoryConfiguration();\n+        authConfig.populateFromJSON(json);\n+\n+        doAnswer(invocation -> {\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).initialize(any(), any(), any());\n+\n+        authCategory.configure(authConfig, getApplicationContext());\n+    }\n+\n+    /**\n+     * Tests that the signUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signUp() with the username\n+     * and password it received and, if included, the userAttributes and validationData sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     * @throws AuthException test fails if this gets thrown since method should succeed\n+     */\n+    @Test\n+    public void signUp() throws AuthException {\n+        SignUpResult amcResult = new SignUpResult(\n+            false,\n+            new UserCodeDeliveryDetails(\n+                    DESTINATION,\n+                    DELIVERY_MEDIUM,\n+                    ATTRIBUTE_NAME\n+            ),\n+            null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(USERNAME, invocation.getArgument(0));\n+            assertEquals(PASSWORD, invocation.getArgument(1));\n+            Map<String, String> attributeMap = invocation.getArgument(2);\n+            assertEquals(ATTRIBUTE_VAL, attributeMap.get(ATTRIBUTE_KEY));\n+            assertEquals(METADATA, invocation.getArgument(3));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(4);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient).signUp(any(), any(), any(), any(), any());\n+\n+        AuthSignUpResult result = synchronousAuth.signUp(\n+                USERNAME,\n+                PASSWORD,\n+                AWSCognitoAuthSignUpOptions.builder()\n+                    .userAttributes(\n+                        Collections.singletonList(new AuthUserAttribute(AuthUserAttributeKey.email(), ATTRIBUTE_VAL))\n+                    )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c7831a2a7a329a4a719184dae0379be77581f8c"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTk1NzIzOA==", "bodyText": "You can probably skip the doAnswer stuff, and then just use eq to check what is passed in.\nMost of these tests should just be like:\n// Arrange some options foo, bar, baz\nFoo foo = new Foo();\nBar bar = mock(Bar.class);\nBaz baz = getABaz();\n\n// Act by calling Auth API\nauth.signUp(foo, bar, baz, whatever);\n\n// veriify that the mobile client was called in a certain way...\nverfiy(mobileClient).signUp(eq(foo), eq(baz));\n\nOr, in some cases you might not be able to useeq, directly. In which case you can do:\nauth.signUo(\"foo\", \"bar\", \"baz\");\n\nArgumentCaptor<TypeYouCantMake> whatDidItGiveMe = ArgumentCaptor.forClass(TypeYouCantMake.class);\nverify(mobileClient).signUp(whatDidItGiveMe.capture(), eq(bar), eq(baz));\n\nFoo foo = whatDidItGiveMe.value().getSomeContainedField();\nassertEquals(expectedFoo, foo); // Ah!!  the thing it gave us _contained_ an expected foo.", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r421957238", "createdAt": "2020-05-08T06:06:39Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/test/java/com/amplifyframework/auth/cognito/AuthComponentTest.java", "diffHunk": "@@ -0,0 +1,458 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.auth.cognito;\n+\n+import android.content.Context;\n+\n+import com.amplifyframework.AmplifyException;\n+import com.amplifyframework.auth.AuthCategory;\n+import com.amplifyframework.auth.AuthCategoryConfiguration;\n+import com.amplifyframework.auth.AuthCodeDeliveryDetails;\n+import com.amplifyframework.auth.AuthException;\n+import com.amplifyframework.auth.AuthUser;\n+import com.amplifyframework.auth.AuthUserAttribute;\n+import com.amplifyframework.auth.AuthUserAttributeKey;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignInOptions;\n+import com.amplifyframework.auth.cognito.options.AWSCognitoAuthSignUpOptions;\n+import com.amplifyframework.auth.result.AuthResetPasswordResult;\n+import com.amplifyframework.auth.result.AuthSignInResult;\n+import com.amplifyframework.auth.result.AuthSignUpResult;\n+import com.amplifyframework.auth.result.step.AuthNextSignInStep;\n+import com.amplifyframework.auth.result.step.AuthNextSignUpStep;\n+import com.amplifyframework.auth.result.step.AuthResetPasswordStep;\n+import com.amplifyframework.auth.result.step.AuthSignInStep;\n+import com.amplifyframework.auth.result.step.AuthSignUpStep;\n+import com.amplifyframework.testutils.sync.SynchronousAuth;\n+\n+import com.amazonaws.mobile.client.AWSMobileClient;\n+import com.amazonaws.mobile.client.Callback;\n+import com.amazonaws.mobile.client.UserState;\n+import com.amazonaws.mobile.client.UserStateDetails;\n+import com.amazonaws.mobile.client.results.ForgotPasswordResult;\n+import com.amazonaws.mobile.client.results.ForgotPasswordState;\n+import com.amazonaws.mobile.client.results.SignInResult;\n+import com.amazonaws.mobile.client.results.SignInState;\n+import com.amazonaws.mobile.client.results.SignUpResult;\n+import com.amazonaws.mobile.client.results.Tokens;\n+import com.amazonaws.mobile.client.results.UserCodeDeliveryDetails;\n+import com.amazonaws.mobile.config.AWSConfiguration;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import static androidx.test.core.app.ApplicationProvider.getApplicationContext;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.any;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Test that the current implementation of Auth as a wrapper of AWSMobileClient calls the correct\n+ * AWSMobileClient methods with the correct parameters when the different Auth methods are called.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+public final class AuthComponentTest {\n+    private static final String USER_ID = \"myId\";\n+    private static final String DESTINATION = \"e***@email.com\";\n+    private static final String DELIVERY_MEDIUM = \"sms\";\n+    private static final String ATTRIBUTE_NAME = \"email\";\n+    private static final String USERNAME = \"username\";\n+    private static final String PASSWORD = \"password123\";\n+    private static final String NEW_PASSWORD = \"newPassword123\";\n+    private static final String ATTRIBUTE_KEY = AuthUserAttributeKey.email().getKeyString();\n+    private static final String ATTRIBUTE_VAL = \"email@email.com\";\n+    private static final String CONFIRMATION_CODE = \"confirm\";\n+    private static final Map<String, String> METADATA = Collections.singletonMap(\"aCustomKey\", \"aCustomVal\");\n+    private AWSMobileClient mobileClient;\n+    private AuthCategory authCategory;\n+    private SynchronousAuth synchronousAuth;\n+\n+    @Before\n+    public void setup() throws AmplifyException {\n+        mobileClient = mock(AWSMobileClient.class);\n+        authCategory = new AuthCategory();\n+        authCategory.addPlugin(new AWSCognitoAuthPlugin(mobileClient, USER_ID));\n+        synchronousAuth = SynchronousAuth.delegatingTo(authCategory);\n+\n+        doAnswer(invocation -> {\n+            Callback<Tokens> callback = invocation.getArgument(0);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).getTokens(any());\n+    }\n+\n+    /**\n+     * Tests that the configure method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.initialize() with the\n+     * passed in context, a new AWSConfiguration object containing the passed in JSONObject, and a callback object\n+     * which causes configure to complete successfully in the onResult case.\n+     * @throws AmplifyException an exception wrapping the exception returned in onError of AMC.initialize()\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test\n+    public void testConfigure() throws AmplifyException, JSONException {\n+        UserStateDetails userStateDetails = new UserStateDetails(UserState.SIGNED_OUT, null);\n+        Context context = getApplicationContext();\n+        JSONObject pluginConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+        JSONObject json = new JSONObject().put(\"plugins\",\n+                new JSONObject().put(\n+                    new AWSCognitoAuthPlugin().getPluginKey(),\n+                    pluginConfig\n+                )\n+        );\n+        AuthCategoryConfiguration authConfig = new AuthCategoryConfiguration();\n+        authConfig.populateFromJSON(json);\n+\n+        doAnswer(invocation -> {\n+            assertEquals(context, invocation.getArgument(0));\n+            assertEquals(pluginConfig.toString(), invocation.getArgument(1).toString());\n+            assertTrue(invocation.getArgument(1) instanceof AWSConfiguration);\n+\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onResult(userStateDetails);\n+            return null;\n+        }).when(mobileClient).initialize(any(), any(), any());\n+\n+        authCategory.configure(authConfig, context);\n+        verify(mobileClient).initialize(any(), any(), any());\n+    }\n+\n+    /**\n+     * If {@link AWSMobileClient} emits an error during initialization, the\n+     * {@link com.amplifyframework.auth.AuthPlugin#configure(JSONObject, Context)} method should wrap that exception\n+     * in an {@link AuthException} and throw it on its calling thread.\n+     * @throws AmplifyException the exception expected to be thrown when configuration fails.\n+     * @throws JSONException has to be declared as part of creating a test JSON object\n+     */\n+    @Test(expected = AuthException.class)\n+    public void testConfigureExceptionHandling() throws AmplifyException, JSONException {\n+        JSONObject pluginConfig = new JSONObject().put(\"TestKey\", \"TestVal\");\n+        JSONObject json = new JSONObject().put(\"plugins\",\n+                new JSONObject().put(\n+                        new AWSCognitoAuthPlugin().getPluginKey(),\n+                        pluginConfig\n+                )\n+        );\n+        AuthCategoryConfiguration authConfig = new AuthCategoryConfiguration();\n+        authConfig.populateFromJSON(json);\n+\n+        doAnswer(invocation -> {\n+            Callback<UserStateDetails> callback = invocation.getArgument(2);\n+            callback.onError(new Exception());\n+            return null;\n+        }).when(mobileClient).initialize(any(), any(), any());\n+\n+        authCategory.configure(authConfig, getApplicationContext());\n+    }\n+\n+    /**\n+     * Tests that the signUp method of the Auth wrapper of AWSMobileClient (AMC) calls AMC.signUp() with the username\n+     * and password it received and, if included, the userAttributes and validationData sent in the options object.\n+     * Also ensures that in the onResult case, the success callback receives a valid AuthSignUpResult.\n+     * @throws AuthException test fails if this gets thrown since method should succeed\n+     */\n+    @Test\n+    public void signUp() throws AuthException {\n+        SignUpResult amcResult = new SignUpResult(\n+            false,\n+            new UserCodeDeliveryDetails(\n+                    DESTINATION,\n+                    DELIVERY_MEDIUM,\n+                    ATTRIBUTE_NAME\n+            ),\n+            null\n+        );\n+\n+        doAnswer(invocation -> {\n+            assertEquals(USERNAME, invocation.getArgument(0));\n+            assertEquals(PASSWORD, invocation.getArgument(1));\n+            Map<String, String> attributeMap = invocation.getArgument(2);\n+            assertEquals(ATTRIBUTE_VAL, attributeMap.get(ATTRIBUTE_KEY));\n+            assertEquals(METADATA, invocation.getArgument(3));\n+\n+            Callback<SignUpResult> callback = invocation.getArgument(4);\n+            callback.onResult(amcResult);\n+            return null;\n+        }).when(mobileClient).signUp(any(), any(), any(), any(), any());\n+\n+        AuthSignUpResult result = synchronousAuth.signUp(\n+                USERNAME,\n+                PASSWORD,\n+                AWSCognitoAuthSignUpOptions.builder()\n+                    .userAttributes(\n+                        Collections.singletonList(new AuthUserAttribute(AuthUserAttributeKey.email(), ATTRIBUTE_VAL))\n+                    )\n+                    .validationData(METADATA)\n+                    .build()\n+        );\n+\n+        validateSignUpResult(result, AuthSignUpStep.CONFIRM_SIGN_UP_STEP);\n+        verify(mobileClient).signUp(any(), any(), any(), any(), any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c7831a2a7a329a4a719184dae0379be77581f8c"}, "originalPosition": 211}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fd48c7da886304ba4b2b3f3f811cb40cc8a9829", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/3fd48c7da886304ba4b2b3f3f811cb40cc8a9829", "committedDate": "2020-05-08T15:42:20Z", "message": "Round 2 of PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "436c3bdd2dce0643148f2440e8d28af3390fba03", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/436c3bdd2dce0643148f2440e8d28af3390fba03", "committedDate": "2020-05-08T17:42:05Z", "message": "Merge branch 'AuthCategory' into ddaudeli/AuthCategory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0af699ae8cc92ee180ffa8698c2154c72bed9680", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/0af699ae8cc92ee180ffa8698c2154c72bed9680", "committedDate": "2020-05-08T18:04:49Z", "message": "Adds additional JavaDocs to meet new rule"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4NTkyMTk2", "url": "https://github.com/aws-amplify/amplify-android/pull/433#pullrequestreview-408592196", "createdAt": "2020-05-09T00:37:41Z", "commit": {"oid": "0af699ae8cc92ee180ffa8698c2154c72bed9680"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDozNzo0MVrOGS3K-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQwMDozNzo0MVrOGS3K-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQzMTQ4MA==", "bodyText": "Blech, we're gonna need Javadocs on this, now that we have the new Checkstyle rule.", "url": "https://github.com/aws-amplify/amplify-android/pull/433#discussion_r422431480", "createdAt": "2020-05-09T00:37:41Z", "author": {"login": "jamesonwilliams"}, "path": "aws-auth-cognito/src/main/java/com/amplifyframework/auth/cognito/AWSCognitoAuthPlugin.java", "diffHunk": "@@ -58,18 +64,33 @@\n import org.json.JSONException;\n import org.json.JSONObject;\n \n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.concurrent.CountDownLatch;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.atomic.AtomicReference;\n \n+/**\n+ * A Cognito implementation of the Auth Plugin.\n+ */\n public final class AWSCognitoAuthPlugin extends AuthPlugin<AWSMobileClient> {\n     private static final String AWS_COGNITO_AUTH_PLUGIN_KEY = \"awsCognitoAuthPlugin\";\n     private static final long SECONDS_BEFORE_TIMEOUT = 10;\n     private static final String COGNITO_USER_ID_ATTRIBUTE = \"sub\";\n     private static final String MOBILE_CLIENT_TOKEN_KEY = \"token\";\n     private String userId;\n+    private AWSMobileClient awsMobileClient;\n+\n+    public AWSCognitoAuthPlugin() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0af699ae8cc92ee180ffa8698c2154c72bed9680"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "076e1d72fa3b71b6b168622233b474897c8b7337", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/076e1d72fa3b71b6b168622233b474897c8b7337", "committedDate": "2020-05-11T13:36:03Z", "message": "Merge branch 'AuthCategory' into ddaudeli/AuthCategory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1d1eb002e0bcae3e92d27c2b901e99ac7909c49", "author": {"user": {"login": "TrekSoft", "name": "David Daudelin"}}, "url": "https://github.com/aws-amplify/amplify-android/commit/b1d1eb002e0bcae3e92d27c2b901e99ac7909c49", "committedDate": "2020-05-11T13:59:00Z", "message": "Updates Javadocs"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2001, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}