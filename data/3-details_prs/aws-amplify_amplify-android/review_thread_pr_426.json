{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNzA1MTM2", "number": 426, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoxMjozMFrOD5nRgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOToxMDo1OVrOD5uzww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzM4ODgyOnYy", "diffSide": "RIGHT", "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/TextractResultTransformers.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoxMjozMFrOGQ-7Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODo1Njo0NFrOGRJ2BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2MTM4Ng==", "bodyText": "The @VisibleForTesting thing isn't ideal, and is usually used for constructor overloads.\nWhy not just test fetchTable, and keep this is a private implementation detail of it? If fetchTable passes your test cases, you don't really care about what happens inside this cell-processing routine.", "url": "https://github.com/aws-amplify/amplify-android/pull/426#discussion_r420461386", "createdAt": "2020-05-05T23:12:30Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/TextractResultTransformers.java", "diffHunk": "@@ -209,7 +210,13 @@ public static BoundedKeyValue fetchKeyValue(@Nullable Block block, @NonNull Map<\n                 .build();\n     }\n \n-    private static Cell fetchTableCell(Block block, Map<String, Block> blockMap) {\n+    @VisibleForTesting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf4824d602e4b9b9ffcfb644ca92cec101fee36f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0MDI2MA==", "bodyText": "I can do that! There was no real reason for me to do it besides breaking up test suites into smaller components", "url": "https://github.com/aws-amplify/amplify-android/pull/426#discussion_r420640260", "createdAt": "2020-05-06T08:56:44Z", "author": {"login": "raphkim"}, "path": "aws-predictions/src/main/java/com/amplifyframework/predictions/aws/adapter/TextractResultTransformers.java", "diffHunk": "@@ -209,7 +210,13 @@ public static BoundedKeyValue fetchKeyValue(@Nullable Block block, @NonNull Map<\n                 .build();\n     }\n \n-    private static Cell fetchTableCell(Block block, Map<String, Block> blockMap) {\n+    @VisibleForTesting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2MTM4Ng=="}, "originalCommit": {"oid": "cf4824d602e4b9b9ffcfb644ca92cec101fee36f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODYyMzM5OnYy", "diffSide": "RIGHT", "path": "aws-predictions/src/test/java/com/amplifyframework/predictions/aws/adapter/TextractResultTransformersTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwOToxMDo1OVrOGRKU0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMjozNToyN1rOGRn1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0ODE0Nw==", "bodyText": "Whenever you duplicate an operation 2-3 times, you should move to a control structure.\nList<Block> blocks = Arrays.asList(valueTextBlock, keyTextBlock, valueBlock, keyBlock);\nMap<String, Block> blocksById = new HashMap<>();\nfor (Block block : blocks) {\n    blocksById.put(block.getId(), block);\n}\n\nOr:\nMap<String, Block> blocksById = new HashMap<>();\nObservable.fromArray(valueTextBlock, keyTextBlock, valueBlock, keyBlock)\n    .blockingForEach(block -> blocksById.put(block.getId(), block));", "url": "https://github.com/aws-amplify/amplify-android/pull/426#discussion_r420648147", "createdAt": "2020-05-06T09:10:59Z", "author": {"login": "jamesonwilliams"}, "path": "aws-predictions/src/test/java/com/amplifyframework/predictions/aws/adapter/TextractResultTransformersTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws.adapter;\n+\n+import android.graphics.PointF;\n+import android.graphics.RectF;\n+\n+import com.amplifyframework.predictions.models.BoundedKeyValue;\n+import com.amplifyframework.predictions.models.Cell;\n+import com.amplifyframework.predictions.models.IdentifiedText;\n+import com.amplifyframework.predictions.models.Polygon;\n+import com.amplifyframework.predictions.models.Selection;\n+import com.amplifyframework.predictions.models.Table;\n+import com.amplifyframework.testutils.random.RandomString;\n+\n+import com.amazonaws.services.textract.model.Block;\n+import com.amazonaws.services.textract.model.BlockType;\n+import com.amazonaws.services.textract.model.BoundingBox;\n+import com.amazonaws.services.textract.model.EntityType;\n+import com.amazonaws.services.textract.model.Geometry;\n+import com.amazonaws.services.textract.model.Point;\n+import com.amazonaws.services.textract.model.Relationship;\n+import com.amazonaws.services.textract.model.SelectionStatus;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests that the result transformer utility methods work\n+ * as intended.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"ConstantConditions\") // NullPointerException will not be thrown\n+public final class TextractResultTransformersTest {\n+    private static final double DELTA = 1E-5;\n+\n+    private Random random;\n+\n+    @Before\n+    public void setUp() {\n+        random = new Random();\n+    }\n+\n+    /**\n+     * Tests that the rectangular boundary from Textract\n+     * is converted to an equivalent Android rectangle object.\n+     */\n+    @Test\n+    public void testBoundingBoxConversion() {\n+        BoundingBox box = randomBox();\n+        RectF rect = TextractResultTransformers.fromBoundingBox(box);\n+        assertEquals(box.getHeight(), rect.height(), DELTA);\n+        assertEquals(box.getWidth(), rect.width(), DELTA);\n+        assertEquals(box.getLeft(), rect.left, DELTA);\n+        assertEquals(box.getTop(), rect.top, DELTA);\n+    }\n+\n+    /**\n+     * Tests that the polygonal boundary from Textract in the form\n+     * of list of points is converted to an Amplify shape for polygons.\n+     */\n+    @Test\n+    public void testPolygonConversion() {\n+        List<Point> randomPolygon = randomPolygon();\n+        Polygon polygon = TextractResultTransformers.fromPoints(randomPolygon);\n+        List<PointF> actualPoints = polygon.getPoints();\n+        List<PointF> expectedPoints = new ArrayList<>();\n+        for (Point point : randomPolygon) {\n+            expectedPoints.add(new PointF(point.getX(), point.getY()));\n+        }\n+        assertEquals(expectedPoints, actualPoints);\n+    }\n+\n+    /**\n+     * Tests that the individual block from Textract is converted to\n+     * an Amplify image text feature.\n+     */\n+    @Test\n+    public void testIdentifiedTextConversion() {\n+        Block block = new Block()\n+                .withText(RandomString.string())\n+                .withConfidence(random.nextFloat())\n+                .withGeometry(randomGeometry())\n+                .withPage(random.nextInt());\n+\n+        // Test block conversion\n+        IdentifiedText text = TextractResultTransformers.fetchIdentifiedText(block);\n+        assertEquals(block.getText(), text.getText());\n+        assertEquals(block.getConfidence(), text.getConfidence(), DELTA);\n+        assertEquals((int) block.getPage(), text.getPage());\n+    }\n+\n+    /**\n+     * Tests that the individual block from Textract is properly\n+     * converted to an Amplify selection item.\n+     */\n+    @Test\n+    public void testSelectionConversion() {\n+        Block block;\n+        Selection selection;\n+\n+        // Assert that SELECTED sets it to selected\n+        block = new Block()\n+                .withSelectionStatus(SelectionStatus.SELECTED)\n+                .withGeometry(randomGeometry());\n+        selection = TextractResultTransformers.fetchSelection(block);\n+        assertTrue(selection.isSelected());\n+\n+        // Assert that NOT_SELECTED sets it to not selected\n+        block = new Block()\n+                .withSelectionStatus(SelectionStatus.NOT_SELECTED)\n+                .withGeometry(randomGeometry());\n+        selection = TextractResultTransformers.fetchSelection(block);\n+        assertFalse(selection.isSelected());\n+    }\n+\n+    /**\n+     * Tests that the graph of related blocks from Textract is properly\n+     * converted to an Amplify table item.\n+     */\n+    @Test\n+    public void testTableConversion() {\n+        Block cellTextBlock = new Block()\n+                .withId(RandomString.string())\n+                .withText(RandomString.string());\n+        Block cellSelectionBlock = new Block()\n+                .withId(RandomString.string())\n+                .withSelectionStatus(SelectionStatus.SELECTED);\n+        Block cellBlock = new Block()\n+                .withId(RandomString.string())\n+                .withBlockType(BlockType.CELL)\n+                .withConfidence(random.nextFloat())\n+                .withGeometry(randomGeometry())\n+                .withRowIndex(random.nextInt())\n+                .withColumnIndex(random.nextInt())\n+                .withRelationships(new Relationship()\n+                        .withIds(cellTextBlock.getId(), cellSelectionBlock.getId()));\n+        Block tableBlock = new Block()\n+                .withId(RandomString.string())\n+                .withBlockType(BlockType.TABLE)\n+                .withConfidence(random.nextFloat())\n+                .withGeometry(randomGeometry())\n+                .withRelationships(new Relationship()\n+                        .withIds(cellBlock.getId()));\n+\n+        // Construct a map to act as a graph\n+        Map<String, Block> blockMap = new HashMap<>();\n+        blockMap.put(cellTextBlock.getId(), cellTextBlock);\n+        blockMap.put(cellSelectionBlock.getId(), cellSelectionBlock);\n+        blockMap.put(cellBlock.getId(), cellBlock);\n+        blockMap.put(tableBlock.getId(), tableBlock);\n+\n+        // Test table block conversion\n+        Table table = TextractResultTransformers.fetchTable(tableBlock, blockMap);\n+        assertEquals(1, table.getCells().size());\n+        assertEquals(tableBlock.getConfidence(), table.getConfidence(), DELTA);\n+        assertEquals(1, table.getRowSize());\n+        assertEquals(1, table.getColumnSize());\n+\n+        // Test cell block conversion\n+        Cell cell = table.getCells().iterator().next();\n+        assertEquals(cellTextBlock.getText(), cell.getText());\n+        assertEquals(cellBlock.getConfidence(), cell.getConfidence(), DELTA);\n+        assertTrue(cell.isSelected());\n+        assertEquals(cellBlock.getRowIndex() - 1, cell.getRow());\n+        assertEquals(cellBlock.getColumnIndex() - 1, cell.getColumn());\n+    }\n+\n+    /**\n+     * Tests that the graph of related blocks from Textract is properly\n+     * converted to an Amplify key-value pair item.\n+     */\n+    @Test\n+    public void testKeyValueConversion() {\n+        Block valueTextBlock = new Block()\n+                .withId(RandomString.string())\n+                .withText(RandomString.string());\n+        Block keyTextBlock = new Block()\n+                .withId(RandomString.string())\n+                .withText(RandomString.string());\n+        Block valueBlock = new Block()\n+                .withId(RandomString.string())\n+                .withBlockType(BlockType.KEY_VALUE_SET)\n+                .withEntityTypes(EntityType.VALUE.toString())\n+                .withRelationships(new Relationship()\n+                        .withIds(valueTextBlock.getId()));\n+        Block keyBlock = new Block()\n+                .withId(RandomString.string())\n+                .withBlockType(BlockType.KEY_VALUE_SET)\n+                .withEntityTypes(EntityType.KEY.toString())\n+                .withConfidence(random.nextFloat())\n+                .withGeometry(randomGeometry())\n+                .withRelationships(new Relationship()\n+                        .withIds(keyTextBlock.getId(), valueBlock.getId()));\n+\n+        // Construct a map to act as a graph\n+        Map<String, Block> blockMap = new HashMap<>();\n+        blockMap.put(valueTextBlock.getId(), valueTextBlock);\n+        blockMap.put(keyTextBlock.getId(), keyTextBlock);\n+        blockMap.put(valueBlock.getId(), valueBlock);\n+        blockMap.put(keyBlock.getId(), keyBlock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "629f2bebd5eaf9a691af830b9ef7a1b7c19cb731"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTEzMTU3Mw==", "bodyText": "the second solution seems nice! I'll do that", "url": "https://github.com/aws-amplify/amplify-android/pull/426#discussion_r421131573", "createdAt": "2020-05-06T22:35:27Z", "author": {"login": "raphkim"}, "path": "aws-predictions/src/test/java/com/amplifyframework/predictions/aws/adapter/TextractResultTransformersTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+/*\n+ * Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\").\n+ * You may not use this file except in compliance with the License.\n+ * A copy of the License is located at\n+ *\n+ *  http://aws.amazon.com/apache2.0\n+ *\n+ * or in the \"license\" file accompanying this file. This file is distributed\n+ * on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\n+ * express or implied. See the License for the specific language governing\n+ * permissions and limitations under the License.\n+ */\n+\n+package com.amplifyframework.predictions.aws.adapter;\n+\n+import android.graphics.PointF;\n+import android.graphics.RectF;\n+\n+import com.amplifyframework.predictions.models.BoundedKeyValue;\n+import com.amplifyframework.predictions.models.Cell;\n+import com.amplifyframework.predictions.models.IdentifiedText;\n+import com.amplifyframework.predictions.models.Polygon;\n+import com.amplifyframework.predictions.models.Selection;\n+import com.amplifyframework.predictions.models.Table;\n+import com.amplifyframework.testutils.random.RandomString;\n+\n+import com.amazonaws.services.textract.model.Block;\n+import com.amazonaws.services.textract.model.BlockType;\n+import com.amazonaws.services.textract.model.BoundingBox;\n+import com.amazonaws.services.textract.model.EntityType;\n+import com.amazonaws.services.textract.model.Geometry;\n+import com.amazonaws.services.textract.model.Point;\n+import com.amazonaws.services.textract.model.Relationship;\n+import com.amazonaws.services.textract.model.SelectionStatus;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.RobolectricTestRunner;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertTrue;\n+\n+/**\n+ * Tests that the result transformer utility methods work\n+ * as intended.\n+ */\n+@RunWith(RobolectricTestRunner.class)\n+@SuppressWarnings(\"ConstantConditions\") // NullPointerException will not be thrown\n+public final class TextractResultTransformersTest {\n+    private static final double DELTA = 1E-5;\n+\n+    private Random random;\n+\n+    @Before\n+    public void setUp() {\n+        random = new Random();\n+    }\n+\n+    /**\n+     * Tests that the rectangular boundary from Textract\n+     * is converted to an equivalent Android rectangle object.\n+     */\n+    @Test\n+    public void testBoundingBoxConversion() {\n+        BoundingBox box = randomBox();\n+        RectF rect = TextractResultTransformers.fromBoundingBox(box);\n+        assertEquals(box.getHeight(), rect.height(), DELTA);\n+        assertEquals(box.getWidth(), rect.width(), DELTA);\n+        assertEquals(box.getLeft(), rect.left, DELTA);\n+        assertEquals(box.getTop(), rect.top, DELTA);\n+    }\n+\n+    /**\n+     * Tests that the polygonal boundary from Textract in the form\n+     * of list of points is converted to an Amplify shape for polygons.\n+     */\n+    @Test\n+    public void testPolygonConversion() {\n+        List<Point> randomPolygon = randomPolygon();\n+        Polygon polygon = TextractResultTransformers.fromPoints(randomPolygon);\n+        List<PointF> actualPoints = polygon.getPoints();\n+        List<PointF> expectedPoints = new ArrayList<>();\n+        for (Point point : randomPolygon) {\n+            expectedPoints.add(new PointF(point.getX(), point.getY()));\n+        }\n+        assertEquals(expectedPoints, actualPoints);\n+    }\n+\n+    /**\n+     * Tests that the individual block from Textract is converted to\n+     * an Amplify image text feature.\n+     */\n+    @Test\n+    public void testIdentifiedTextConversion() {\n+        Block block = new Block()\n+                .withText(RandomString.string())\n+                .withConfidence(random.nextFloat())\n+                .withGeometry(randomGeometry())\n+                .withPage(random.nextInt());\n+\n+        // Test block conversion\n+        IdentifiedText text = TextractResultTransformers.fetchIdentifiedText(block);\n+        assertEquals(block.getText(), text.getText());\n+        assertEquals(block.getConfidence(), text.getConfidence(), DELTA);\n+        assertEquals((int) block.getPage(), text.getPage());\n+    }\n+\n+    /**\n+     * Tests that the individual block from Textract is properly\n+     * converted to an Amplify selection item.\n+     */\n+    @Test\n+    public void testSelectionConversion() {\n+        Block block;\n+        Selection selection;\n+\n+        // Assert that SELECTED sets it to selected\n+        block = new Block()\n+                .withSelectionStatus(SelectionStatus.SELECTED)\n+                .withGeometry(randomGeometry());\n+        selection = TextractResultTransformers.fetchSelection(block);\n+        assertTrue(selection.isSelected());\n+\n+        // Assert that NOT_SELECTED sets it to not selected\n+        block = new Block()\n+                .withSelectionStatus(SelectionStatus.NOT_SELECTED)\n+                .withGeometry(randomGeometry());\n+        selection = TextractResultTransformers.fetchSelection(block);\n+        assertFalse(selection.isSelected());\n+    }\n+\n+    /**\n+     * Tests that the graph of related blocks from Textract is properly\n+     * converted to an Amplify table item.\n+     */\n+    @Test\n+    public void testTableConversion() {\n+        Block cellTextBlock = new Block()\n+                .withId(RandomString.string())\n+                .withText(RandomString.string());\n+        Block cellSelectionBlock = new Block()\n+                .withId(RandomString.string())\n+                .withSelectionStatus(SelectionStatus.SELECTED);\n+        Block cellBlock = new Block()\n+                .withId(RandomString.string())\n+                .withBlockType(BlockType.CELL)\n+                .withConfidence(random.nextFloat())\n+                .withGeometry(randomGeometry())\n+                .withRowIndex(random.nextInt())\n+                .withColumnIndex(random.nextInt())\n+                .withRelationships(new Relationship()\n+                        .withIds(cellTextBlock.getId(), cellSelectionBlock.getId()));\n+        Block tableBlock = new Block()\n+                .withId(RandomString.string())\n+                .withBlockType(BlockType.TABLE)\n+                .withConfidence(random.nextFloat())\n+                .withGeometry(randomGeometry())\n+                .withRelationships(new Relationship()\n+                        .withIds(cellBlock.getId()));\n+\n+        // Construct a map to act as a graph\n+        Map<String, Block> blockMap = new HashMap<>();\n+        blockMap.put(cellTextBlock.getId(), cellTextBlock);\n+        blockMap.put(cellSelectionBlock.getId(), cellSelectionBlock);\n+        blockMap.put(cellBlock.getId(), cellBlock);\n+        blockMap.put(tableBlock.getId(), tableBlock);\n+\n+        // Test table block conversion\n+        Table table = TextractResultTransformers.fetchTable(tableBlock, blockMap);\n+        assertEquals(1, table.getCells().size());\n+        assertEquals(tableBlock.getConfidence(), table.getConfidence(), DELTA);\n+        assertEquals(1, table.getRowSize());\n+        assertEquals(1, table.getColumnSize());\n+\n+        // Test cell block conversion\n+        Cell cell = table.getCells().iterator().next();\n+        assertEquals(cellTextBlock.getText(), cell.getText());\n+        assertEquals(cellBlock.getConfidence(), cell.getConfidence(), DELTA);\n+        assertTrue(cell.isSelected());\n+        assertEquals(cellBlock.getRowIndex() - 1, cell.getRow());\n+        assertEquals(cellBlock.getColumnIndex() - 1, cell.getColumn());\n+    }\n+\n+    /**\n+     * Tests that the graph of related blocks from Textract is properly\n+     * converted to an Amplify key-value pair item.\n+     */\n+    @Test\n+    public void testKeyValueConversion() {\n+        Block valueTextBlock = new Block()\n+                .withId(RandomString.string())\n+                .withText(RandomString.string());\n+        Block keyTextBlock = new Block()\n+                .withId(RandomString.string())\n+                .withText(RandomString.string());\n+        Block valueBlock = new Block()\n+                .withId(RandomString.string())\n+                .withBlockType(BlockType.KEY_VALUE_SET)\n+                .withEntityTypes(EntityType.VALUE.toString())\n+                .withRelationships(new Relationship()\n+                        .withIds(valueTextBlock.getId()));\n+        Block keyBlock = new Block()\n+                .withId(RandomString.string())\n+                .withBlockType(BlockType.KEY_VALUE_SET)\n+                .withEntityTypes(EntityType.KEY.toString())\n+                .withConfidence(random.nextFloat())\n+                .withGeometry(randomGeometry())\n+                .withRelationships(new Relationship()\n+                        .withIds(keyTextBlock.getId(), valueBlock.getId()));\n+\n+        // Construct a map to act as a graph\n+        Map<String, Block> blockMap = new HashMap<>();\n+        blockMap.put(valueTextBlock.getId(), valueTextBlock);\n+        blockMap.put(keyTextBlock.getId(), keyTextBlock);\n+        blockMap.put(valueBlock.getId(), valueBlock);\n+        blockMap.put(keyBlock.getId(), keyBlock);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDY0ODE0Nw=="}, "originalCommit": {"oid": "629f2bebd5eaf9a691af830b9ef7a1b7c19cb731"}, "originalPosition": 225}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1494, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}