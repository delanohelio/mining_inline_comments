{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MTA1OTg5", "number": 1423, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMToxODo0OVrOEAR1pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMToxODo0OVrOEAR1pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzI3NzE5OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMToxODo0OVrOGbdhFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMTo0NDoyOVrOGbePdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ0ODM0MQ==", "bodyText": "Good idea. It might make sense to create our own type for ArtifactProblems rather than an ImmutableSet. Then the checking as to whether we've already created one hides inside that class.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1423#discussion_r431448341", "createdAt": "2020-05-27T21:18:49Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -192,11 +194,16 @@ private DependencyGraphResult buildDependencyGraph(\n     } catch (DependencyResolutionException ex) {\n       DependencyResult result = ex.getResult();\n       node = result.getRoot();\n+\n+      Set<Artifact> checkedArtifacts = new HashSet<>();\n       for (ArtifactResult artifactResult : result.getArtifactResults()) {\n         Artifact resolvedArtifact = artifactResult.getArtifact();\n+\n         if (resolvedArtifact == null) {\n           Artifact requestedArtifact = artifactResult.getRequest().getArtifact();\n-          artifactProblems.add(createUnresolvableArtifactProblem(node, requestedArtifact));\n+          if (checkedArtifacts.add(requestedArtifact)) {\n+            artifactProblems.add(createUnresolvableArtifactProblem(node, requestedArtifact));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "003bf3e7c3a496fb6753e09235be973e7ab24b09"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ2MDIxMg==", "bodyText": "The problem was createUnresolvableArtifactProblem method needs to traverse the (potentially large) graph. So we need to check whether an artifact is already checked or not before calling the method.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1423#discussion_r431460212", "createdAt": "2020-05-27T21:44:29Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -192,11 +194,16 @@ private DependencyGraphResult buildDependencyGraph(\n     } catch (DependencyResolutionException ex) {\n       DependencyResult result = ex.getResult();\n       node = result.getRoot();\n+\n+      Set<Artifact> checkedArtifacts = new HashSet<>();\n       for (ArtifactResult artifactResult : result.getArtifactResults()) {\n         Artifact resolvedArtifact = artifactResult.getArtifact();\n+\n         if (resolvedArtifact == null) {\n           Artifact requestedArtifact = artifactResult.getRequest().getArtifact();\n-          artifactProblems.add(createUnresolvableArtifactProblem(node, requestedArtifact));\n+          if (checkedArtifacts.add(requestedArtifact)) {\n+            artifactProblems.add(createUnresolvableArtifactProblem(node, requestedArtifact));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ0ODM0MQ=="}, "originalCommit": {"oid": "003bf3e7c3a496fb6753e09235be973e7ab24b09"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2767, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}