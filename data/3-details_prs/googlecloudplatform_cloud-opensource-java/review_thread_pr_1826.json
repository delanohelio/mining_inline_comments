{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0MjQ2MzE4", "number": 1826, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMTozNzoyMFrOE7QNvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMzo0MToxM1rOE7SmAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTY3MTAxOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMTozNzoyMFrOH2yvnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjoyODo1M1rOH20l4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIxNjU0Mw==", "bodyText": "why is this stored here and in the superclass? The superclass should be enough.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1826#discussion_r527216543", "createdAt": "2020-11-19T21:37:20Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblem.java", "diffHunk": "@@ -26,17 +28,22 @@\n  */\n final class InaccessibleClassProblem extends LinkageProblem {\n   private AccessModifier modifier;\n+  private ClassSymbol classSymbol;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9a56bac64d41e563a607b94569b126821ab4709"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0NjgxNw==", "bodyText": "That's a good point. It's not needed. Removed.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1826#discussion_r527246817", "createdAt": "2020-11-19T22:28:53Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblem.java", "diffHunk": "@@ -26,17 +28,22 @@\n  */\n final class InaccessibleClassProblem extends LinkageProblem {\n   private AccessModifier modifier;\n+  private ClassSymbol classSymbol;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzIxNjU0Mw=="}, "originalCommit": {"oid": "b9a56bac64d41e563a607b94569b126821ab4709"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTg1NjE4OnYy", "diffSide": "LEFT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblem.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjoyNjo1NlrOH20iEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjoyNjo1NlrOH20iEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0NTg0Mw==", "bodyText": "getTargetClass() may return null. It caused the NullPointerException in the issue (#1825).", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1826#discussion_r527245843", "createdAt": "2020-11-19T22:26:56Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblem.java", "diffHunk": "@@ -28,15 +30,18 @@\n   private AccessModifier modifier;\n \n   InaccessibleClassProblem(\n-      ClassFile sourceClass, ClassFile targetClass, Symbol classSymbol, AccessModifier modifier) {\n+      ClassFile sourceClass,\n+      @Nullable ClassFile targetClass,\n+      ClassSymbol classSymbol,\n+      AccessModifier modifier) {\n     super(\"is not accessible\", sourceClass, classSymbol, targetClass);\n     this.modifier = modifier;\n   }\n \n   @Override\n   public final String toString() {\n     StringBuilder message = new StringBuilder();\n-    message.append(\"Class \" + getTargetClass().getBinaryName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42dfb2fe225c248c7827abb5d454f57b05f25bac"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTg2MDMxOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjoyODoxMVrOH20kmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjoyODoxMVrOH20kmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0NjQ5MA==", "bodyText": "The symbol for InaccessibleClassProblem should be a class symbol, not a field symbol or method symbol.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1826#discussion_r527246490", "createdAt": "2020-11-19T22:28:11Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -266,7 +266,11 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n       if (!isClassAccessibleFrom(targetJavaClass, sourceClassName)) {\n         AccessModifier modifier = AccessModifier.fromFlag(targetJavaClass.getModifiers());\n         return Optional.of(\n-            new InaccessibleClassProblem(sourceClassFile, targetClassFile, symbol, modifier));\n+            new InaccessibleClassProblem(\n+                sourceClassFile,\n+                targetClassFile,\n+                new ClassSymbol(symbol.getClassBinaryName()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42dfb2fe225c248c7827abb5d454f57b05f25bac"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTg3MjQ1OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjozMjoxMVrOH20r3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMzo0MDoyNVrOH22aOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0ODM0OQ==", "bodyText": "I don't think there's a test for the case where this is null yet.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1826#discussion_r527248349", "createdAt": "2020-11-19T22:32:11Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -60,7 +60,10 @@\n    *     not exist in the class path.\n    */\n   LinkageProblem(\n-      String symbolProblemMessage, ClassFile sourceClass, Symbol symbol, ClassFile targetClass) {\n+      String symbolProblemMessage,\n+      ClassFile sourceClass,\n+      Symbol symbol,\n+      @Nullable ClassFile targetClass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42dfb2fe225c248c7827abb5d454f57b05f25bac"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI1MTMxOA==", "bodyText": "Let me add a test.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1826#discussion_r527251318", "createdAt": "2020-11-19T22:38:41Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -60,7 +60,10 @@\n    *     not exist in the class path.\n    */\n   LinkageProblem(\n-      String symbolProblemMessage, ClassFile sourceClass, Symbol symbol, ClassFile targetClass) {\n+      String symbolProblemMessage,\n+      ClassFile sourceClass,\n+      Symbol symbol,\n+      @Nullable ClassFile targetClass) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0ODM0OQ=="}, "originalCommit": {"oid": "42dfb2fe225c248c7827abb5d454f57b05f25bac"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI3NjYwMw==", "bodyText": "Added a test.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1826#discussion_r527276603", "createdAt": "2020-11-19T23:40:25Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -60,7 +60,10 @@\n    *     not exist in the class path.\n    */\n   LinkageProblem(\n-      String symbolProblemMessage, ClassFile sourceClass, Symbol symbol, ClassFile targetClass) {\n+      String symbolProblemMessage,\n+      ClassFile sourceClass,\n+      Symbol symbol,\n+      @Nullable ClassFile targetClass) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0ODM0OQ=="}, "originalCommit": {"oid": "42dfb2fe225c248c7827abb5d454f57b05f25bac"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNTg3NDg1OnYy", "diffSide": "RIGHT", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblemTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjozMzowNFrOH20tWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMjozOToyMVrOH204oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0ODcyOQ==", "bodyText": "Is there a reason you have to change the type here?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1826#discussion_r527248729", "createdAt": "2020-11-19T22:33:04Z", "author": {"login": "elharo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblemTest.java", "diffHunk": "@@ -25,42 +25,42 @@\n public class InaccessibleClassProblemTest {\n   \n   private ClassFile file;\n-  private Symbol symbol;\n-  \n+  private ClassSymbol symbol;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42dfb2fe225c248c7827abb5d454f57b05f25bac"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI1MTYxNg==", "bodyText": "It's because InaccessibleClassProblem now takes a class symbol, not a generic Symbol.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1826#discussion_r527251616", "createdAt": "2020-11-19T22:39:21Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblemTest.java", "diffHunk": "@@ -25,42 +25,42 @@\n public class InaccessibleClassProblemTest {\n   \n   private ClassFile file;\n-  private Symbol symbol;\n-  \n+  private ClassSymbol symbol;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI0ODcyOQ=="}, "originalCommit": {"oid": "42dfb2fe225c248c7827abb5d454f57b05f25bac"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjA1MDcyOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblem.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMzozNjo1NFrOH22VZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMzozNjo1NFrOH22VZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI3NTM2NQ==", "bodyText": "It was a generic Symbol. But InaccessibleClassProblem's symbol should always be a class symbol as written in the parameter name.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1826#discussion_r527275365", "createdAt": "2020-11-19T23:36:54Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblem.java", "diffHunk": "@@ -28,15 +30,18 @@\n   private AccessModifier modifier;\n \n   InaccessibleClassProblem(\n-      ClassFile sourceClass, ClassFile targetClass, Symbol classSymbol, AccessModifier modifier) {\n+      ClassFile sourceClass,\n+      @Nullable ClassFile targetClass,\n+      ClassSymbol classSymbol,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24a012c8b280566e764c3696ee3b9b54c4c83c33"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNjA2MDgwOnYy", "diffSide": "RIGHT", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblemTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMzo0MToxM1rOH22bVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQyMzo0MToxM1rOH22bVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzI3Njg4NQ==", "bodyText": "#1825 had NullPointerException at this toString method.\njava.lang.NullPointerException\n\tat com.google.cloud.tools.opensource.classpath.InaccessibleClassProblem.toString(InaccessibleClassProblem.java:40)", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1826#discussion_r527276885", "createdAt": "2020-11-19T23:41:13Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblemTest.java", "diffHunk": "@@ -25,43 +25,53 @@\n public class InaccessibleClassProblemTest {\n   \n   private ClassFile file;\n-  private Symbol symbol;\n-  \n+  private ClassSymbol symbol;\n+\n   @Before\n   public void setUp() {\n     Path path = Paths.get(\"/usr/tmp\");\n     ClassPathEntry entry = new ClassPathEntry(path);\n     file = new ClassFile(entry, \"foo\");\n-    symbol = new ClassSymbol(\"\");\n+    symbol = new ClassSymbol(\"Foo\");\n   }\n \n   @Test\n   public void testProtected() {\n     InaccessibleClassProblem problem =\n         new InaccessibleClassProblem(file, file, symbol, AccessModifier.PROTECTED);\n-    Assert.assertEquals(\"Class foo is protected and is referenced by foo\", problem.toString());\n+    Assert.assertEquals(\"Class Foo is protected and is referenced by foo\", problem.toString());\n   }\n \n   @Test\n   public void testPrivate() {\n     InaccessibleClassProblem problem =\n         new InaccessibleClassProblem(file, file, symbol, AccessModifier.PRIVATE);\n-    Assert.assertEquals(\"Class foo is private and is referenced by foo\", problem.toString());\n+    Assert.assertEquals(\"Class Foo is private and is referenced by foo\", problem.toString());\n   }\n \n   @Test\n   public void testPublic() {\n     InaccessibleClassProblem problem =\n         new InaccessibleClassProblem(file, file, symbol, AccessModifier.PUBLIC);\n-    Assert.assertEquals(\"Class foo is public and is referenced by foo\", problem.toString());\n+    Assert.assertEquals(\"Class Foo is public and is referenced by foo\", problem.toString());\n   }\n \n   @Test\n   public void testDefault() {\n     InaccessibleClassProblem problem =\n         new InaccessibleClassProblem(file, file, symbol, AccessModifier.DEFAULT);\n-    Assert.assertEquals(\"Class foo has default access and is referenced by foo (different package)\",\n+    Assert.assertEquals(\n+        \"Class Foo has default access and is referenced by foo (different package)\",\n         problem.toString());\n   }\n \n+  @Test\n+  public void testToString_nullTargetClass() {\n+    InaccessibleClassProblem problem =\n+        new InaccessibleClassProblem(file, null, symbol, AccessModifier.DEFAULT);\n+\n+    Assert.assertEquals(\n+        \"Class Foo has default access and is referenced by foo (different package)\",\n+        problem.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24a012c8b280566e764c3696ee3b9b54c4c83c33"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2484, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}