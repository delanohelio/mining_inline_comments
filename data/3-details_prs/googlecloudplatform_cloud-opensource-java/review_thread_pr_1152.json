{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2OTMxMTAz", "number": 1152, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzoxMTo1NlrODajYaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowNzowNlrODakSkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTY5MjU5OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathResult.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzoxMTo1NlrOFhkeXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzoyNzowMlrOFhk4Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0NDkyNA==", "bodyText": "and 163 other dependency paths\ninstead\nand other 163 dependency paths", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1152#discussion_r370744924", "createdAt": "2020-01-24T17:11:56Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathResult.java", "diffHunk": "@@ -69,4 +71,24 @@ public ClassPathResult(\n   ImmutableList<UnresolvableArtifactProblem> getArtifactProblems() {\n     return artifactProblems;\n   }\n+\n+  /** Returns text describing dependency paths to {@code jars} in the dependency tree. */\n+  public String formatDependencyPaths(Iterable<Path> jars) {\n+    StringBuilder message = new StringBuilder();\n+    for (Path jar : jars) {\n+      ImmutableList<DependencyPath> dependencyPaths = getDependencyPaths(jar);\n+      checkArgument(dependencyPaths.size() >= 1, \"%s is not in the class path\", jar);\n+\n+      message.append(jar.getFileName() + \" is at:\\n\");\n+\n+      int otherCount = dependencyPaths.size() - 1;\n+      message.append(\"  \" + dependencyPaths.get(0) + \"\\n\");\n+      if (otherCount == 1) {\n+        message.append(\"  and 1 dependency path.\\n\");\n+      } else if (otherCount > 1) {\n+        message.append(\"  and other \" + otherCount + \" dependency paths.\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "725a41cda21d65fbb79bdcc0cca4e9a63c525fb8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1MTUxOQ==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1152#discussion_r370751519", "createdAt": "2020-01-24T17:27:02Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathResult.java", "diffHunk": "@@ -69,4 +71,24 @@ public ClassPathResult(\n   ImmutableList<UnresolvableArtifactProblem> getArtifactProblems() {\n     return artifactProblems;\n   }\n+\n+  /** Returns text describing dependency paths to {@code jars} in the dependency tree. */\n+  public String formatDependencyPaths(Iterable<Path> jars) {\n+    StringBuilder message = new StringBuilder();\n+    for (Path jar : jars) {\n+      ImmutableList<DependencyPath> dependencyPaths = getDependencyPaths(jar);\n+      checkArgument(dependencyPaths.size() >= 1, \"%s is not in the class path\", jar);\n+\n+      message.append(jar.getFileName() + \" is at:\\n\");\n+\n+      int otherCount = dependencyPaths.size() - 1;\n+      message.append(\"  \" + dependencyPaths.get(0) + \"\\n\");\n+      if (otherCount == 1) {\n+        message.append(\"  and 1 dependency path.\\n\");\n+      } else if (otherCount > 1) {\n+        message.append(\"  and other \" + otherCount + \" dependency paths.\\n\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc0NDkyNA=="}, "originalCommit": {"oid": "725a41cda21d65fbb79bdcc0cca4e9a63c525fb8"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTgzODIwOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathResult.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowNTo0N1rOFhl3uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODoxNzoyN1rOFhmKjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NzgwMQ==", "bodyText": "This could be simpler if this method only formatted a single jar. Then you'd only need one loop in LinkageChecker.main and you wouldn't have to build an intermediate list.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1152#discussion_r370767801", "createdAt": "2020-01-24T18:05:47Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathResult.java", "diffHunk": "@@ -69,4 +71,24 @@ public ClassPathResult(\n   ImmutableList<UnresolvableArtifactProblem> getArtifactProblems() {\n     return artifactProblems;\n   }\n+\n+  /** Returns text describing dependency paths to {@code jars} in the dependency tree. */\n+  public String formatDependencyPaths(Iterable<Path> jars) {\n+    StringBuilder message = new StringBuilder();\n+    for (Path jar : jars) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe7d13a8ea02b5dd47dca2c7cba3db72dabd8ad6"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3MjYyMQ==", "bodyText": "The intermediate ImmutableSet is for deduplication logic.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1152#discussion_r370772621", "createdAt": "2020-01-24T18:17:27Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathResult.java", "diffHunk": "@@ -69,4 +71,24 @@ public ClassPathResult(\n   ImmutableList<UnresolvableArtifactProblem> getArtifactProblems() {\n     return artifactProblems;\n   }\n+\n+  /** Returns text describing dependency paths to {@code jars} in the dependency tree. */\n+  public String formatDependencyPaths(Iterable<Path> jars) {\n+    StringBuilder message = new StringBuilder();\n+    for (Path jar : jars) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2NzgwMQ=="}, "originalCommit": {"oid": "fe7d13a8ea02b5dd47dca2c7cba3db72dabd8ad6"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTg0MTQ2OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODowNzowNlrOFhl52Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODo1NTo0MlrOFhnN0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2ODM0NQ==", "bodyText": "You don't need this set, just print each jar as you find it. That should also make the order more predictable.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1152#discussion_r370768345", "createdAt": "2020-01-24T18:07:06Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -82,6 +86,20 @@ public static void main(String[] arguments)\n \n     System.out.println(SymbolProblem.formatSymbolProblems(symbolProblems));\n \n+    if (classPathResult != null && !symbolProblems.isEmpty()) {\n+      ImmutableSet.Builder<Path> problematicJars = ImmutableSet.builder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe7d13a8ea02b5dd47dca2c7cba3db72dabd8ad6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3MTkzNQ==", "bodyText": "That would explode the number of lines in the output. We need this de-duplication logic. When there's 100 linkage errors on 100 classes from a JAR file, this should not print the dependency path to the that JAR file 100 times.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1152#discussion_r370771935", "createdAt": "2020-01-24T18:15:49Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -82,6 +86,20 @@ public static void main(String[] arguments)\n \n     System.out.println(SymbolProblem.formatSymbolProblems(symbolProblems));\n \n+    if (classPathResult != null && !symbolProblems.isEmpty()) {\n+      ImmutableSet.Builder<Path> problematicJars = ImmutableSet.builder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2ODM0NQ=="}, "originalCommit": {"oid": "fe7d13a8ea02b5dd47dca2c7cba3db72dabd8ad6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3OTM3MQ==", "bodyText": "OK, that makes sense. Does the order of output matter though?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1152#discussion_r370779371", "createdAt": "2020-01-24T18:32:55Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -82,6 +86,20 @@ public static void main(String[] arguments)\n \n     System.out.println(SymbolProblem.formatSymbolProblems(symbolProblems));\n \n+    if (classPathResult != null && !symbolProblems.isEmpty()) {\n+      ImmutableSet.Builder<Path> problematicJars = ImmutableSet.builder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2ODM0NQ=="}, "originalCommit": {"oid": "fe7d13a8ea02b5dd47dca2c7cba3db72dabd8ad6"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4OTg0Mg==", "bodyText": "No, the order does not matter.\n(Guava\u2019s ImmutableSet guarantees a deterministic iteration order, which is not affected by JVM implementation.)", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1152#discussion_r370789842", "createdAt": "2020-01-24T18:55:42Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -82,6 +86,20 @@ public static void main(String[] arguments)\n \n     System.out.println(SymbolProblem.formatSymbolProblems(symbolProblems));\n \n+    if (classPathResult != null && !symbolProblems.isEmpty()) {\n+      ImmutableSet.Builder<Path> problematicJars = ImmutableSet.builder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc2ODM0NQ=="}, "originalCommit": {"oid": "fe7d13a8ea02b5dd47dca2c7cba3db72dabd8ad6"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2885, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}