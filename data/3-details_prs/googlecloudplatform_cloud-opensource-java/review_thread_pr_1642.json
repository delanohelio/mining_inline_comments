{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0MDU2MDIy", "number": 1642, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzoxNzoxMVrOEiN1Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMDozMDoyOVrOEiVm0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzEzNjM0OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblemCauseAnnotator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzoxNzoxMVrOHP-BDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxODoyMDoxOVrOHQAU4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUwNjc2NQ==", "bodyText": "classPathBuilder looks like it can be null here.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486506765", "createdAt": "2020-09-10T17:17:11Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblemCauseAnnotator.java", "diffHunk": "@@ -47,7 +52,6 @@ public static void annotate(ClassPathResult rootResult, Iterable<LinkageProblem>\n       ClassPathResult subtreeResult = cache.get(sourceArtifact);\n       if (subtreeResult == null) {\n         // Resolves the dependency graph with the source artifact at the root.\n-        ClassPathBuilder classPathBuilder = new ClassPathBuilder();\n         subtreeResult = classPathBuilder.resolveWithMaven(sourceArtifact);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707d1e1bd6a96cee087dfb23adec955ba92c1fb8"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxODIxNw==", "bodyText": "classPathBuilder parameter cannot be null; otherwise it throws NullPointerException here.\nInitially I thought making the parameter @Nullable. However, the enforcer rule and LinkageCheckerMain both need to resolve dependency graphs using their ClassPathBuilder.\nDo you see a chance some non-test class passes null for the 1st argument?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486518217", "createdAt": "2020-09-10T17:36:55Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblemCauseAnnotator.java", "diffHunk": "@@ -47,7 +52,6 @@ public static void annotate(ClassPathResult rootResult, Iterable<LinkageProblem>\n       ClassPathResult subtreeResult = cache.get(sourceArtifact);\n       if (subtreeResult == null) {\n         // Resolves the dependency graph with the source artifact at the root.\n-        ClassPathBuilder classPathBuilder = new ClassPathBuilder();\n         subtreeResult = classPathBuilder.resolveWithMaven(sourceArtifact);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUwNjc2NQ=="}, "originalCommit": {"oid": "707d1e1bd6a96cee087dfb23adec955ba92c1fb8"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzMTM5OA==", "bodyText": "It is a public method so anything can be passed. If you expect to be not null, it's worth checking.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486531398", "createdAt": "2020-09-10T17:59:14Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblemCauseAnnotator.java", "diffHunk": "@@ -47,7 +52,6 @@ public static void annotate(ClassPathResult rootResult, Iterable<LinkageProblem>\n       ClassPathResult subtreeResult = cache.get(sourceArtifact);\n       if (subtreeResult == null) {\n         // Resolves the dependency graph with the source artifact at the root.\n-        ClassPathBuilder classPathBuilder = new ClassPathBuilder();\n         subtreeResult = classPathBuilder.resolveWithMaven(sourceArtifact);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUwNjc2NQ=="}, "originalCommit": {"oid": "707d1e1bd6a96cee087dfb23adec955ba92c1fb8"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0NDYwOA==", "bodyText": "Added checkNotNull()s.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486544608", "createdAt": "2020-09-10T18:20:19Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblemCauseAnnotator.java", "diffHunk": "@@ -47,7 +52,6 @@ public static void annotate(ClassPathResult rootResult, Iterable<LinkageProblem>\n       ClassPathResult subtreeResult = cache.get(sourceArtifact);\n       if (subtreeResult == null) {\n         // Resolves the dependency graph with the source artifact at the root.\n-        ClassPathBuilder classPathBuilder = new ClassPathBuilder();\n         subtreeResult = classPathBuilder.resolveWithMaven(sourceArtifact);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUwNjc2NQ=="}, "originalCommit": {"oid": "707d1e1bd6a96cee087dfb23adec955ba92c1fb8"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzIxNDEzOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzozODo1MVrOHP-yTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzozODo1MVrOHP-yTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUxOTM3NQ==", "bodyText": "if classPathResult is not null, then classPathBuilder is not null. (the classPathResult is generated from the classPathBuilder).", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486519375", "createdAt": "2020-09-10T17:38:51Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -100,7 +101,7 @@ public static void main(String[] arguments)\n         }\n \n         if (classPathResult != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707d1e1bd6a96cee087dfb23adec955ba92c1fb8"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MzI4NTM1OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNzo1Nzo0OVrOHP_eKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMDowMzoyOVrOHQDziw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzMDYwMQ==", "bodyText": "using these in two variables in only one branch of the if-else block is a bit of a code smell. I wonder if there's an alternative approach that doesn't use nullness as flags?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486530601", "createdAt": "2020-09-10T17:57:49Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -67,7 +67,8 @@ public static void main(String[] arguments)\n         List<ArtifactProblem> artifactProblems = new ArrayList<>();\n         // classPathResult is kept null if JAR files are specified in the argument\n         ClassPathResult classPathResult = null;\n-    \n+        ClassPathBuilder classPathBuilder = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "707d1e1bd6a96cee087dfb23adec955ba92c1fb8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU0NDIyNA==", "bodyText": "It now relies on artifactsInArguments variable. It's empty when we specify JAR files.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486544224", "createdAt": "2020-09-10T18:19:54Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -67,7 +67,8 @@ public static void main(String[] arguments)\n         List<ArtifactProblem> artifactProblems = new ArrayList<>();\n         // classPathResult is kept null if JAR files are specified in the argument\n         ClassPathResult classPathResult = null;\n-    \n+        ClassPathBuilder classPathBuilder = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzMDYwMQ=="}, "originalCommit": {"oid": "707d1e1bd6a96cee087dfb23adec955ba92c1fb8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjU2NTAyMw==", "bodyText": "This is becoming more complex, not less. I think the fundamental issue is that two very different cases are being managed with lots of if-else instead of different methods or objects. When I looked at this code in my IDE, it was quite hard to follow.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486565023", "createdAt": "2020-09-10T18:52:36Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -67,7 +67,8 @@ public static void main(String[] arguments)\n         List<ArtifactProblem> artifactProblems = new ArrayList<>();\n         // classPathResult is kept null if JAR files are specified in the argument\n         ClassPathResult classPathResult = null;\n-    \n+        ClassPathBuilder classPathBuilder = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzMDYwMQ=="}, "originalCommit": {"oid": "707d1e1bd6a96cee087dfb23adec955ba92c1fb8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYwMTYxMQ==", "bodyText": "let me try to split the 2 (3?) cases into methods.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486601611", "createdAt": "2020-09-10T20:03:29Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -67,7 +67,8 @@ public static void main(String[] arguments)\n         List<ArtifactProblem> artifactProblems = new ArrayList<>();\n         // classPathResult is kept null if JAR files are specified in the argument\n         ClassPathResult classPathResult = null;\n-    \n+        ClassPathBuilder classPathBuilder = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjUzMDYwMQ=="}, "originalCommit": {"oid": "707d1e1bd6a96cee087dfb23adec955ba92c1fb8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Mzk2MzI1OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMToxNToyNVrOHQGBBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMToxNToyNVrOHQGBBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzNzgzMQ==", "bodyText": "Now the the case of JAR file and the case of artifacts are separated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486637831", "createdAt": "2020-09-10T21:15:25Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -57,85 +55,19 @@ public static void main(String[] arguments)\n         linkageCheckerArguments.printHelp();\n       }\n \n-      if (linkageCheckerArguments.hasInput()) { \n-        // This is non-empty if a BOM or artifacts are specified in the argument\n-        ImmutableList<Artifact> artifacts = linkageCheckerArguments.getArtifacts();\n-\n-        // When JAR files are specified in the argument, artifacts are empty.\n-        ImmutableList<ClassPathEntry> inputClassPath;\n-        ImmutableSet<ClassPathEntry> entryPoints;\n-        List<ArtifactProblem> artifactProblems = new ArrayList<>();\n-        // classPathResult is kept null if JAR files are specified in the argument\n-        ClassPathResult classPathResult = null;\n-    \n-        if (artifacts.isEmpty()) {\n-          // When JAR files are passed as arguments, classPathResult is null, because there is no need\n-          // to resolve Maven dependencies.\n-          inputClassPath = linkageCheckerArguments.getJarFiles();\n-          entryPoints = ImmutableSet.copyOf(inputClassPath);\n-        } else {\n-          // When a BOM or Maven artifacts are passed as arguments, resolve the dependencies.\n-          DependencyGraphBuilder dependencyGraphBuilder =\n-              new DependencyGraphBuilder(linkageCheckerArguments.getMavenRepositoryUrls());\n-          ClassPathBuilder classPathBuilder = new ClassPathBuilder(dependencyGraphBuilder);\n-          classPathResult = classPathBuilder.resolve(artifacts, false);\n-          inputClassPath = classPathResult.getClassPath();\n-          artifactProblems.addAll(classPathResult.getArtifactProblems());\n-          entryPoints = ImmutableSet.copyOf(inputClassPath.subList(0, artifacts.size()));\n-        }\n-\n-        LinkageChecker linkageChecker =\n-            LinkageChecker.create(\n-                inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n-        ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n-\n-        if (linkageCheckerArguments.getReportOnlyReachable()) {\n-          ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n-          linkageProblems =\n-              linkageProblems.stream()\n-                  .filter(\n-                      (LinkageProblem problem) ->\n-                          graph.isReachable(problem.getSourceClass().getBinaryName()))\n-                  .collect(toImmutableSet());\n-        }\n-\n-        if (classPathResult != null) {\n-          LinkageProblemCauseAnnotator.annotate(classPathResult, linkageProblems);\n-        }\n-\n-        Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n-        if (writeAsExclusionFile != null) {\n-          ExclusionFiles.write(writeAsExclusionFile, linkageProblems);\n-          System.out.println(\"Wrote the linkage errors as exclusion file: \" + writeAsExclusionFile);\n-          return;\n-        }\n+      if (linkageCheckerArguments.hasInput()) {\n+        // artifactsInArguments is not empty if a BOM or artifacts are specified in the argument.\n+        // If JAR files are specified, it's empty.\n+        ImmutableList<Artifact> artifactsInArguments = linkageCheckerArguments.getArtifacts();\n \n+        ImmutableSet<LinkageProblem> linkageProblems =\n+            artifactsInArguments.isEmpty()\n+                ? runWithJarFiles(linkageCheckerArguments)\n+                : runWithArtifacts(linkageCheckerArguments);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ea7c8b86f6d8970f48945f07a5015d13c3274e"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Mzk2Nzc3OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMToxNjo1NVrOHQGDvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMToxNjo1NVrOHQGDvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjYzODUyNg==", "bodyText": "classPathBuilder is always non-null.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486638526", "createdAt": "2020-09-10T21:16:55Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -145,4 +77,102 @@ public static void main(String[] arguments)\n       System.err.println(ex.getMessage());\n     }\n   }\n+\n+  private static ImmutableSet<LinkageProblem> runWithJarFiles(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, TransformerException, XMLStreamException {\n+    ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n+    ImmutableSet<ClassPathEntry> entryPoints = ImmutableSet.copyOf(inputClassPath);\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n+      linkageProblems =\n+          linkageProblems.stream()\n+              .filter(\n+                  (LinkageProblem problem) ->\n+                      graph.isReachable(problem.getSourceClass().getBinaryName()))\n+              .collect(toImmutableSet());\n+    }\n+\n+    Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n+    if (writeAsExclusionFile != null) {\n+      ExclusionFiles.write(writeAsExclusionFile, linkageProblems);\n+      System.out.println(\"Wrote the linkage errors as exclusion file: \" + writeAsExclusionFile);\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {\n+      System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n+    }\n+\n+    return linkageProblems;\n+  }\n+\n+  private static ImmutableSet<LinkageProblem> runWithArtifacts(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, RepositoryException, TransformerException, XMLStreamException {\n+    ImmutableList<Artifact> artifactsInArguments = linkageCheckerArguments.getArtifacts();\n+\n+    // When a BOM or Maven artifacts are passed as arguments, resolve the dependencies.\n+    DependencyGraphBuilder dependencyGraphBuilder =\n+        new DependencyGraphBuilder(linkageCheckerArguments.getMavenRepositoryUrls());\n+    ClassPathBuilder classPathBuilder = new ClassPathBuilder(dependencyGraphBuilder);\n+    ClassPathResult classPathResult = classPathBuilder.resolve(artifactsInArguments, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ea7c8b86f6d8970f48945f07a5015d13c3274e"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Mzk5MTc0OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMToyNDozNFrOHQGR-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjowNjoxMFrOHQHXYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0MjE3MQ==", "bodyText": "checkJarFiles?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486642171", "createdAt": "2020-09-10T21:24:34Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -145,4 +77,102 @@ public static void main(String[] arguments)\n       System.err.println(ex.getMessage());\n     }\n   }\n+\n+  private static ImmutableSet<LinkageProblem> runWithJarFiles(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ea7c8b86f6d8970f48945f07a5015d13c3274e"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY1OTkzNg==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486659936", "createdAt": "2020-09-10T22:06:10Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -145,4 +77,102 @@ public static void main(String[] arguments)\n       System.err.println(ex.getMessage());\n     }\n   }\n+\n+  private static ImmutableSet<LinkageProblem> runWithJarFiles(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0MjE3MQ=="}, "originalCommit": {"oid": "72ea7c8b86f6d8970f48945f07a5015d13c3274e"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Mzk5MjgwOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMToyNDo1OFrOHQGSsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjowNjoyNFrOHQHXrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0MjM1Mg==", "bodyText": "checkArtifacts?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486642352", "createdAt": "2020-09-10T21:24:58Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -145,4 +77,102 @@ public static void main(String[] arguments)\n       System.err.println(ex.getMessage());\n     }\n   }\n+\n+  private static ImmutableSet<LinkageProblem> runWithJarFiles(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, TransformerException, XMLStreamException {\n+    ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n+    ImmutableSet<ClassPathEntry> entryPoints = ImmutableSet.copyOf(inputClassPath);\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n+      linkageProblems =\n+          linkageProblems.stream()\n+              .filter(\n+                  (LinkageProblem problem) ->\n+                      graph.isReachable(problem.getSourceClass().getBinaryName()))\n+              .collect(toImmutableSet());\n+    }\n+\n+    Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n+    if (writeAsExclusionFile != null) {\n+      ExclusionFiles.write(writeAsExclusionFile, linkageProblems);\n+      System.out.println(\"Wrote the linkage errors as exclusion file: \" + writeAsExclusionFile);\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {\n+      System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n+    }\n+\n+    return linkageProblems;\n+  }\n+\n+  private static ImmutableSet<LinkageProblem> runWithArtifacts(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ea7c8b86f6d8970f48945f07a5015d13c3274e"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2MDAxNQ==", "bodyText": "Updated", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486660015", "createdAt": "2020-09-10T22:06:24Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -145,4 +77,102 @@ public static void main(String[] arguments)\n       System.err.println(ex.getMessage());\n     }\n   }\n+\n+  private static ImmutableSet<LinkageProblem> runWithJarFiles(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, TransformerException, XMLStreamException {\n+    ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n+    ImmutableSet<ClassPathEntry> entryPoints = ImmutableSet.copyOf(inputClassPath);\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n+      linkageProblems =\n+          linkageProblems.stream()\n+              .filter(\n+                  (LinkageProblem problem) ->\n+                      graph.isReachable(problem.getSourceClass().getBinaryName()))\n+              .collect(toImmutableSet());\n+    }\n+\n+    Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n+    if (writeAsExclusionFile != null) {\n+      ExclusionFiles.write(writeAsExclusionFile, linkageProblems);\n+      System.out.println(\"Wrote the linkage errors as exclusion file: \" + writeAsExclusionFile);\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {\n+      System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n+    }\n+\n+    return linkageProblems;\n+  }\n+\n+  private static ImmutableSet<LinkageProblem> runWithArtifacts(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0MjM1Mg=="}, "originalCommit": {"oid": "72ea7c8b86f6d8970f48945f07a5015d13c3274e"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Mzk5NTk4OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMToyNjowMlrOHQGUog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjoxMzoxMFrOHQHhgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0Mjg1MA==", "bodyText": "This chunk of code could be extracted to a writeExclusionFile helper method to avoid duplication", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486642850", "createdAt": "2020-09-10T21:26:02Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -145,4 +77,102 @@ public static void main(String[] arguments)\n       System.err.println(ex.getMessage());\n     }\n   }\n+\n+  private static ImmutableSet<LinkageProblem> runWithJarFiles(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, TransformerException, XMLStreamException {\n+    ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n+    ImmutableSet<ClassPathEntry> entryPoints = ImmutableSet.copyOf(inputClassPath);\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n+      linkageProblems =\n+          linkageProblems.stream()\n+              .filter(\n+                  (LinkageProblem problem) ->\n+                      graph.isReachable(problem.getSourceClass().getBinaryName()))\n+              .collect(toImmutableSet());\n+    }\n+\n+    Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ea7c8b86f6d8970f48945f07a5015d13c3274e"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2MjUyOA==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486662528", "createdAt": "2020-09-10T22:13:10Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -145,4 +77,102 @@ public static void main(String[] arguments)\n       System.err.println(ex.getMessage());\n     }\n   }\n+\n+  private static ImmutableSet<LinkageProblem> runWithJarFiles(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, TransformerException, XMLStreamException {\n+    ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n+    ImmutableSet<ClassPathEntry> entryPoints = ImmutableSet.copyOf(inputClassPath);\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n+      linkageProblems =\n+          linkageProblems.stream()\n+              .filter(\n+                  (LinkageProblem problem) ->\n+                      graph.isReachable(problem.getSourceClass().getBinaryName()))\n+              .collect(toImmutableSet());\n+    }\n+\n+    Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0Mjg1MA=="}, "originalCommit": {"oid": "72ea7c8b86f6d8970f48945f07a5015d13c3274e"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDAxMzU5OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTozMTo1NlrOHQGfBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjoxNTo0NlrOHQHlUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0NTUwOQ==", "bodyText": "the body of this if block can probably be pulled out to a helper method (or maybe the whole if block) to avoid the duplication", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486645509", "createdAt": "2020-09-10T21:31:56Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -145,4 +77,102 @@ public static void main(String[] arguments)\n       System.err.println(ex.getMessage());\n     }\n   }\n+\n+  private static ImmutableSet<LinkageProblem> runWithJarFiles(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, TransformerException, XMLStreamException {\n+    ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n+    ImmutableSet<ClassPathEntry> entryPoints = ImmutableSet.copyOf(inputClassPath);\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n+      linkageProblems =\n+          linkageProblems.stream()\n+              .filter(\n+                  (LinkageProblem problem) ->\n+                      graph.isReachable(problem.getSourceClass().getBinaryName()))\n+              .collect(toImmutableSet());\n+    }\n+\n+    Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n+    if (writeAsExclusionFile != null) {\n+      ExclusionFiles.write(writeAsExclusionFile, linkageProblems);\n+      System.out.println(\"Wrote the linkage errors as exclusion file: \" + writeAsExclusionFile);\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {\n+      System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n+    }\n+\n+    return linkageProblems;\n+  }\n+\n+  private static ImmutableSet<LinkageProblem> runWithArtifacts(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, RepositoryException, TransformerException, XMLStreamException {\n+    ImmutableList<Artifact> artifactsInArguments = linkageCheckerArguments.getArtifacts();\n+\n+    // When a BOM or Maven artifacts are passed as arguments, resolve the dependencies.\n+    DependencyGraphBuilder dependencyGraphBuilder =\n+        new DependencyGraphBuilder(linkageCheckerArguments.getMavenRepositoryUrls());\n+    ClassPathBuilder classPathBuilder = new ClassPathBuilder(dependencyGraphBuilder);\n+    ClassPathResult classPathResult = classPathBuilder.resolve(artifactsInArguments, false);\n+    ImmutableList<ClassPathEntry> inputClassPath = classPathResult.getClassPath();\n+    ImmutableList<ArtifactProblem> artifactProblems =\n+        ImmutableList.copyOf(classPathResult.getArtifactProblems());\n+    ImmutableSet<ClassPathEntry> entryPoints =\n+        ImmutableSet.copyOf(inputClassPath.subList(0, artifactsInArguments.size()));\n+\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ea7c8b86f6d8970f48945f07a5015d13c3274e"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2MzUwNw==", "bodyText": "Done.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486663507", "createdAt": "2020-09-10T22:15:46Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -145,4 +77,102 @@ public static void main(String[] arguments)\n       System.err.println(ex.getMessage());\n     }\n   }\n+\n+  private static ImmutableSet<LinkageProblem> runWithJarFiles(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, TransformerException, XMLStreamException {\n+    ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n+    ImmutableSet<ClassPathEntry> entryPoints = ImmutableSet.copyOf(inputClassPath);\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n+      linkageProblems =\n+          linkageProblems.stream()\n+              .filter(\n+                  (LinkageProblem problem) ->\n+                      graph.isReachable(problem.getSourceClass().getBinaryName()))\n+              .collect(toImmutableSet());\n+    }\n+\n+    Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n+    if (writeAsExclusionFile != null) {\n+      ExclusionFiles.write(writeAsExclusionFile, linkageProblems);\n+      System.out.println(\"Wrote the linkage errors as exclusion file: \" + writeAsExclusionFile);\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {\n+      System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n+    }\n+\n+    return linkageProblems;\n+  }\n+\n+  private static ImmutableSet<LinkageProblem> runWithArtifacts(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, RepositoryException, TransformerException, XMLStreamException {\n+    ImmutableList<Artifact> artifactsInArguments = linkageCheckerArguments.getArtifacts();\n+\n+    // When a BOM or Maven artifacts are passed as arguments, resolve the dependencies.\n+    DependencyGraphBuilder dependencyGraphBuilder =\n+        new DependencyGraphBuilder(linkageCheckerArguments.getMavenRepositoryUrls());\n+    ClassPathBuilder classPathBuilder = new ClassPathBuilder(dependencyGraphBuilder);\n+    ClassPathResult classPathResult = classPathBuilder.resolve(artifactsInArguments, false);\n+    ImmutableList<ClassPathEntry> inputClassPath = classPathResult.getClassPath();\n+    ImmutableList<ArtifactProblem> artifactProblems =\n+        ImmutableList.copyOf(classPathResult.getArtifactProblems());\n+    ImmutableSet<ClassPathEntry> entryPoints =\n+        ImmutableSet.copyOf(inputClassPath.subList(0, artifactsInArguments.size()));\n+\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0NTUwOQ=="}, "originalCommit": {"oid": "72ea7c8b86f6d8970f48945f07a5015d13c3274e"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDAxNDk2OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMTozMjoyOFrOHQGf3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjoyMToyOVrOHQHvEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0NTcyNQ==", "bodyText": "tempted to move this if block to a printLinkageProblems method too", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486645725", "createdAt": "2020-09-10T21:32:28Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -145,4 +77,102 @@ public static void main(String[] arguments)\n       System.err.println(ex.getMessage());\n     }\n   }\n+\n+  private static ImmutableSet<LinkageProblem> runWithJarFiles(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, TransformerException, XMLStreamException {\n+    ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n+    ImmutableSet<ClassPathEntry> entryPoints = ImmutableSet.copyOf(inputClassPath);\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n+      linkageProblems =\n+          linkageProblems.stream()\n+              .filter(\n+                  (LinkageProblem problem) ->\n+                      graph.isReachable(problem.getSourceClass().getBinaryName()))\n+              .collect(toImmutableSet());\n+    }\n+\n+    Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n+    if (writeAsExclusionFile != null) {\n+      ExclusionFiles.write(writeAsExclusionFile, linkageProblems);\n+      System.out.println(\"Wrote the linkage errors as exclusion file: \" + writeAsExclusionFile);\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {\n+      System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n+    }\n+\n+    return linkageProblems;\n+  }\n+\n+  private static ImmutableSet<LinkageProblem> runWithArtifacts(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, RepositoryException, TransformerException, XMLStreamException {\n+    ImmutableList<Artifact> artifactsInArguments = linkageCheckerArguments.getArtifacts();\n+\n+    // When a BOM or Maven artifacts are passed as arguments, resolve the dependencies.\n+    DependencyGraphBuilder dependencyGraphBuilder =\n+        new DependencyGraphBuilder(linkageCheckerArguments.getMavenRepositoryUrls());\n+    ClassPathBuilder classPathBuilder = new ClassPathBuilder(dependencyGraphBuilder);\n+    ClassPathResult classPathResult = classPathBuilder.resolve(artifactsInArguments, false);\n+    ImmutableList<ClassPathEntry> inputClassPath = classPathResult.getClassPath();\n+    ImmutableList<ArtifactProblem> artifactProblems =\n+        ImmutableList.copyOf(classPathResult.getArtifactProblems());\n+    ImmutableSet<ClassPathEntry> entryPoints =\n+        ImmutableSet.copyOf(inputClassPath.subList(0, artifactsInArguments.size()));\n+\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n+      linkageProblems =\n+          linkageProblems.stream()\n+              .filter(\n+                  (LinkageProblem problem) ->\n+                      graph.isReachable(problem.getSourceClass().getBinaryName()))\n+              .collect(toImmutableSet());\n+    }\n+\n+    LinkageProblemCauseAnnotator.annotate(classPathBuilder, classPathResult, linkageProblems);\n+\n+    Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n+    if (writeAsExclusionFile != null) {\n+      ExclusionFiles.write(writeAsExclusionFile, linkageProblems);\n+      System.out.println(\"Wrote the linkage errors as exclusion file: \" + writeAsExclusionFile);\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "72ea7c8b86f6d8970f48945f07a5015d13c3274e"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2NjAwMA==", "bodyText": "I searched the usage of formatLinkageProblems.  The enforcer rule uses logger. That printLinkageProblems method would be only used by LinkageCheckerMain. So it's better to have if statement here.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486666000", "createdAt": "2020-09-10T22:21:29Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -145,4 +77,102 @@ public static void main(String[] arguments)\n       System.err.println(ex.getMessage());\n     }\n   }\n+\n+  private static ImmutableSet<LinkageProblem> runWithJarFiles(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, TransformerException, XMLStreamException {\n+    ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n+    ImmutableSet<ClassPathEntry> entryPoints = ImmutableSet.copyOf(inputClassPath);\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n+      linkageProblems =\n+          linkageProblems.stream()\n+              .filter(\n+                  (LinkageProblem problem) ->\n+                      graph.isReachable(problem.getSourceClass().getBinaryName()))\n+              .collect(toImmutableSet());\n+    }\n+\n+    Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n+    if (writeAsExclusionFile != null) {\n+      ExclusionFiles.write(writeAsExclusionFile, linkageProblems);\n+      System.out.println(\"Wrote the linkage errors as exclusion file: \" + writeAsExclusionFile);\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {\n+      System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n+    }\n+\n+    return linkageProblems;\n+  }\n+\n+  private static ImmutableSet<LinkageProblem> runWithArtifacts(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, RepositoryException, TransformerException, XMLStreamException {\n+    ImmutableList<Artifact> artifactsInArguments = linkageCheckerArguments.getArtifacts();\n+\n+    // When a BOM or Maven artifacts are passed as arguments, resolve the dependencies.\n+    DependencyGraphBuilder dependencyGraphBuilder =\n+        new DependencyGraphBuilder(linkageCheckerArguments.getMavenRepositoryUrls());\n+    ClassPathBuilder classPathBuilder = new ClassPathBuilder(dependencyGraphBuilder);\n+    ClassPathResult classPathResult = classPathBuilder.resolve(artifactsInArguments, false);\n+    ImmutableList<ClassPathEntry> inputClassPath = classPathResult.getClassPath();\n+    ImmutableList<ArtifactProblem> artifactProblems =\n+        ImmutableList.copyOf(classPathResult.getArtifactProblems());\n+    ImmutableSet<ClassPathEntry> entryPoints =\n+        ImmutableSet.copyOf(inputClassPath.subList(0, artifactsInArguments.size()));\n+\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n+      linkageProblems =\n+          linkageProblems.stream()\n+              .filter(\n+                  (LinkageProblem problem) ->\n+                      graph.isReachable(problem.getSourceClass().getBinaryName()))\n+              .collect(toImmutableSet());\n+    }\n+\n+    LinkageProblemCauseAnnotator.annotate(classPathBuilder, classPathResult, linkageProblems);\n+\n+    Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n+    if (writeAsExclusionFile != null) {\n+      ExclusionFiles.write(writeAsExclusionFile, linkageProblems);\n+      System.out.println(\"Wrote the linkage errors as exclusion file: \" + writeAsExclusionFile);\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY0NTcyNQ=="}, "originalCommit": {"oid": "72ea7c8b86f6d8970f48945f07a5015d13c3274e"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDE1NjcwOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjoyNTo1M1rOHQH1Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzoxMDoyMlrOHQIvlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2NzYxNQ==", "bodyText": "@elharo Do you think of a better name for such function that does nothing depending on the argument? I was thinking writeExclusionFileIfnecessary but this sounds redundant.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486667615", "createdAt": "2020-09-10T22:25:53Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -145,4 +77,112 @@ public static void main(String[] arguments)\n       System.err.println(ex.getMessage());\n     }\n   }\n+\n+  private static ImmutableSet<LinkageProblem> checkJarFiles(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, TransformerException, XMLStreamException {\n+    ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n+    ImmutableSet<ClassPathEntry> entryPoints = ImmutableSet.copyOf(inputClassPath);\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    linkageProblems = filterReachable(linkageCheckerArguments, linkageChecker, linkageProblems);\n+\n+    if (writeExclusionFile(linkageCheckerArguments, linkageProblems)) {\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {\n+      System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n+    }\n+\n+    return linkageProblems;\n+  }\n+\n+  private static ImmutableSet<LinkageProblem> filterReachable(\n+      LinkageCheckerArguments linkageCheckerArguments,\n+      LinkageChecker linkageChecker,\n+      ImmutableSet<LinkageProblem> linkageProblems) {\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n+      linkageProblems =\n+          linkageProblems.stream()\n+              .filter(\n+                  (LinkageProblem problem) ->\n+                      graph.isReachable(problem.getSourceClass().getBinaryName()))\n+              .collect(toImmutableSet());\n+    }\n+    return linkageProblems;\n+  }\n+\n+  /**\n+   * Writes {@code linkageProblems} to a file and returns true if {@code linkageCheckerArguments}\n+   * specifies the option; otherwise returns false.\n+   */\n+  private static boolean writeExclusionFile(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "738b30fe88cb033695d8c488c116cbae459ac0d4"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NDg0MA==", "bodyText": "writeExclusionFile is fine", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486674840", "createdAt": "2020-09-10T22:45:59Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -145,4 +77,112 @@ public static void main(String[] arguments)\n       System.err.println(ex.getMessage());\n     }\n   }\n+\n+  private static ImmutableSet<LinkageProblem> checkJarFiles(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, TransformerException, XMLStreamException {\n+    ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n+    ImmutableSet<ClassPathEntry> entryPoints = ImmutableSet.copyOf(inputClassPath);\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    linkageProblems = filterReachable(linkageCheckerArguments, linkageChecker, linkageProblems);\n+\n+    if (writeExclusionFile(linkageCheckerArguments, linkageProblems)) {\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {\n+      System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n+    }\n+\n+    return linkageProblems;\n+  }\n+\n+  private static ImmutableSet<LinkageProblem> filterReachable(\n+      LinkageCheckerArguments linkageCheckerArguments,\n+      LinkageChecker linkageChecker,\n+      ImmutableSet<LinkageProblem> linkageProblems) {\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n+      linkageProblems =\n+          linkageProblems.stream()\n+              .filter(\n+                  (LinkageProblem problem) ->\n+                      graph.isReachable(problem.getSourceClass().getBinaryName()))\n+              .collect(toImmutableSet());\n+    }\n+    return linkageProblems;\n+  }\n+\n+  /**\n+   * Writes {@code linkageProblems} to a file and returns true if {@code linkageCheckerArguments}\n+   * specifies the option; otherwise returns false.\n+   */\n+  private static boolean writeExclusionFile(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2NzYxNQ=="}, "originalCommit": {"oid": "738b30fe88cb033695d8c488c116cbae459ac0d4"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4MjUxOA==", "bodyText": "writeExclusionFile is merged into findLinkageProblems.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486682518", "createdAt": "2020-09-10T23:10:22Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -145,4 +77,112 @@ public static void main(String[] arguments)\n       System.err.println(ex.getMessage());\n     }\n   }\n+\n+  private static ImmutableSet<LinkageProblem> checkJarFiles(\n+      LinkageCheckerArguments linkageCheckerArguments)\n+      throws IOException, TransformerException, XMLStreamException {\n+    ImmutableList<ClassPathEntry> inputClassPath = linkageCheckerArguments.getJarFiles();\n+    ImmutableSet<ClassPathEntry> entryPoints = ImmutableSet.copyOf(inputClassPath);\n+    LinkageChecker linkageChecker =\n+        LinkageChecker.create(\n+            inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n+    ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+    linkageProblems = filterReachable(linkageCheckerArguments, linkageChecker, linkageProblems);\n+\n+    if (writeExclusionFile(linkageCheckerArguments, linkageProblems)) {\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {\n+      System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n+    }\n+\n+    return linkageProblems;\n+  }\n+\n+  private static ImmutableSet<LinkageProblem> filterReachable(\n+      LinkageCheckerArguments linkageCheckerArguments,\n+      LinkageChecker linkageChecker,\n+      ImmutableSet<LinkageProblem> linkageProblems) {\n+    if (linkageCheckerArguments.getReportOnlyReachable()) {\n+      ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n+      linkageProblems =\n+          linkageProblems.stream()\n+              .filter(\n+                  (LinkageProblem problem) ->\n+                      graph.isReachable(problem.getSourceClass().getBinaryName()))\n+              .collect(toImmutableSet());\n+    }\n+    return linkageProblems;\n+  }\n+\n+  /**\n+   * Writes {@code linkageProblems} to a file and returns true if {@code linkageCheckerArguments}\n+   * specifies the option; otherwise returns false.\n+   */\n+  private static boolean writeExclusionFile(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY2NzYxNQ=="}, "originalCommit": {"oid": "738b30fe88cb033695d8c488c116cbae459ac0d4"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDIwNDQ5OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjo0NTozM1rOHQIRGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzowOTozM1rOHQIupg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NDcxMg==", "bodyText": "I don't think you need this linkageProblems argument", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486674712", "createdAt": "2020-09-10T22:45:33Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -88,6 +88,23 @@ public static void main(String[] arguments)\n             inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n     ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n \n+    linkageProblems = filterReachable(linkageCheckerArguments, linkageChecker, linkageProblems);\n+\n+    if (writeExclusionFile(linkageCheckerArguments, linkageProblems)) {\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {\n+      System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n+    }\n+\n+    return linkageProblems;\n+  }\n+\n+  private static ImmutableSet<LinkageProblem> filterReachable(\n+      LinkageCheckerArguments linkageCheckerArguments,\n+      LinkageChecker linkageChecker,\n+      ImmutableSet<LinkageProblem> linkageProblems) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "738b30fe88cb033695d8c488c116cbae459ac0d4"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY4MjI3OA==", "bodyText": "That's a nice idea. Updated this function as findLinkageProblems.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486682278", "createdAt": "2020-09-10T23:09:33Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -88,6 +88,23 @@ public static void main(String[] arguments)\n             inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n     ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n \n+    linkageProblems = filterReachable(linkageCheckerArguments, linkageChecker, linkageProblems);\n+\n+    if (writeExclusionFile(linkageCheckerArguments, linkageProblems)) {\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {\n+      System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n+    }\n+\n+    return linkageProblems;\n+  }\n+\n+  private static ImmutableSet<LinkageProblem> filterReachable(\n+      LinkageCheckerArguments linkageCheckerArguments,\n+      LinkageChecker linkageChecker,\n+      ImmutableSet<LinkageProblem> linkageProblems) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NDcxMg=="}, "originalCommit": {"oid": "738b30fe88cb033695d8c488c116cbae459ac0d4"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDIwNjE5OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjo0NjozM1rOHQISPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMzowMToyOFrOHQIkwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NTAwNA==", "bodyText": "exclusionFilePath or just path", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486675004", "createdAt": "2020-09-10T22:46:33Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -97,22 +114,26 @@ public static void main(String[] arguments)\n                       graph.isReachable(problem.getSourceClass().getBinaryName()))\n               .collect(toImmutableSet());\n     }\n+    return linkageProblems;\n+  }\n \n+  /**\n+   * Writes {@code linkageProblems} to a file and returns true if {@code linkageCheckerArguments}\n+   * specifies the option; otherwise returns false.\n+   */\n+  private static boolean writeExclusionFile(\n+      LinkageCheckerArguments linkageCheckerArguments, ImmutableSet<LinkageProblem> linkageProblems)\n+      throws TransformerException, XMLStreamException, IOException {\n     Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "738b30fe88cb033695d8c488c116cbae459ac0d4"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3OTc0NQ==", "bodyText": "Updated to outputExclusionFile as per option name.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486679745", "createdAt": "2020-09-10T23:01:28Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -97,22 +114,26 @@ public static void main(String[] arguments)\n                       graph.isReachable(problem.getSourceClass().getBinaryName()))\n               .collect(toImmutableSet());\n     }\n+    return linkageProblems;\n+  }\n \n+  /**\n+   * Writes {@code linkageProblems} to a file and returns true if {@code linkageCheckerArguments}\n+   * specifies the option; otherwise returns false.\n+   */\n+  private static boolean writeExclusionFile(\n+      LinkageCheckerArguments linkageCheckerArguments, ImmutableSet<LinkageProblem> linkageProblems)\n+      throws TransformerException, XMLStreamException, IOException {\n     Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NTAwNA=="}, "originalCommit": {"oid": "738b30fe88cb033695d8c488c116cbae459ac0d4"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDIwODg2OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjo0Nzo0N1rOHQITsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQyMjo1NjowM1rOHQIeBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NTM3Nw==", "bodyText": "I'm tempted to pull the if out of this method and not pass the linkageChecker arguments in", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486675377", "createdAt": "2020-09-10T22:47:47Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -88,6 +88,23 @@ public static void main(String[] arguments)\n             inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n     ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n \n+    linkageProblems = filterReachable(linkageCheckerArguments, linkageChecker, linkageProblems);\n+\n+    if (writeExclusionFile(linkageCheckerArguments, linkageProblems)) {\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {\n+      System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n+    }\n+\n+    return linkageProblems;\n+  }\n+\n+  private static ImmutableSet<LinkageProblem> filterReachable(\n+      LinkageCheckerArguments linkageCheckerArguments,\n+      LinkageChecker linkageChecker,\n+      ImmutableSet<LinkageProblem> linkageProblems) {\n     if (linkageCheckerArguments.getReportOnlyReachable()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "738b30fe88cb033695d8c488c116cbae459ac0d4"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3ODAyMw==", "bodyText": "It's now shared code in findLinkageProblems.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486678023", "createdAt": "2020-09-10T22:56:03Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -88,6 +88,23 @@ public static void main(String[] arguments)\n             inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n     ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n \n+    linkageProblems = filterReachable(linkageCheckerArguments, linkageChecker, linkageProblems);\n+\n+    if (writeExclusionFile(linkageCheckerArguments, linkageProblems)) {\n+      return ImmutableSet.of();\n+    }\n+\n+    if (!linkageProblems.isEmpty()) {\n+      System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n+    }\n+\n+    return linkageProblems;\n+  }\n+\n+  private static ImmutableSet<LinkageProblem> filterReachable(\n+      LinkageCheckerArguments linkageCheckerArguments,\n+      LinkageChecker linkageChecker,\n+      ImmutableSet<LinkageProblem> linkageProblems) {\n     if (linkageCheckerArguments.getReportOnlyReachable()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjY3NTM3Nw=="}, "originalCommit": {"oid": "738b30fe88cb033695d8c488c116cbae459ac0d4"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDQwNTY3OnYy", "diffSide": "LEFT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMDoyNzo0NVrOHQKGaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMDoyNzo0NVrOHQKGaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwNDc0Nw==", "bodyText": "This logic has moved to formatDependencyPaths.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486704747", "createdAt": "2020-09-11T00:27:45Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -57,85 +55,19 @@ public static void main(String[] arguments)\n         linkageCheckerArguments.printHelp();\n       }\n \n-      if (linkageCheckerArguments.hasInput()) { \n-        // This is non-empty if a BOM or artifacts are specified in the argument\n-        ImmutableList<Artifact> artifacts = linkageCheckerArguments.getArtifacts();\n-\n-        // When JAR files are specified in the argument, artifacts are empty.\n-        ImmutableList<ClassPathEntry> inputClassPath;\n-        ImmutableSet<ClassPathEntry> entryPoints;\n-        List<ArtifactProblem> artifactProblems = new ArrayList<>();\n-        // classPathResult is kept null if JAR files are specified in the argument\n-        ClassPathResult classPathResult = null;\n-    \n-        if (artifacts.isEmpty()) {\n-          // When JAR files are passed as arguments, classPathResult is null, because there is no need\n-          // to resolve Maven dependencies.\n-          inputClassPath = linkageCheckerArguments.getJarFiles();\n-          entryPoints = ImmutableSet.copyOf(inputClassPath);\n-        } else {\n-          // When a BOM or Maven artifacts are passed as arguments, resolve the dependencies.\n-          DependencyGraphBuilder dependencyGraphBuilder =\n-              new DependencyGraphBuilder(linkageCheckerArguments.getMavenRepositoryUrls());\n-          ClassPathBuilder classPathBuilder = new ClassPathBuilder(dependencyGraphBuilder);\n-          classPathResult = classPathBuilder.resolve(artifacts, false);\n-          inputClassPath = classPathResult.getClassPath();\n-          artifactProblems.addAll(classPathResult.getArtifactProblems());\n-          entryPoints = ImmutableSet.copyOf(inputClassPath.subList(0, artifacts.size()));\n-        }\n-\n-        LinkageChecker linkageChecker =\n-            LinkageChecker.create(\n-                inputClassPath, entryPoints, linkageCheckerArguments.getInputExclusionFile());\n-        ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n-\n-        if (linkageCheckerArguments.getReportOnlyReachable()) {\n-          ClassReferenceGraph graph = linkageChecker.getClassReferenceGraph();\n-          linkageProblems =\n-              linkageProblems.stream()\n-                  .filter(\n-                      (LinkageProblem problem) ->\n-                          graph.isReachable(problem.getSourceClass().getBinaryName()))\n-                  .collect(toImmutableSet());\n-        }\n-\n-        if (classPathResult != null) {\n-          LinkageProblemCauseAnnotator.annotate(classPathResult, linkageProblems);\n-        }\n-\n-        Path writeAsExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n-        if (writeAsExclusionFile != null) {\n-          ExclusionFiles.write(writeAsExclusionFile, linkageProblems);\n-          System.out.println(\"Wrote the linkage errors as exclusion file: \" + writeAsExclusionFile);\n-          return;\n-        }\n+      if (linkageCheckerArguments.hasInput()) {\n+        // artifactsInArguments is not empty if a BOM or artifacts are specified in the argument.\n+        // If JAR files are specified, it's empty.\n+        ImmutableList<Artifact> artifactsInArguments = linkageCheckerArguments.getArtifacts();\n \n+        ImmutableSet<LinkageProblem> linkageProblems =\n+            artifactsInArguments.isEmpty()\n+                ? checkJarFiles(linkageCheckerArguments)\n+                : checkArtifacts(linkageCheckerArguments);\n         if (!linkageProblems.isEmpty()) {\n-          System.out.println(LinkageProblem.formatLinkageProblems(linkageProblems));\n-        }\n-\n-        if (classPathResult != null && !linkageProblems.isEmpty()) {\n-          ImmutableSet.Builder<ClassPathEntry> problematicJars = ImmutableSet.builder();\n-          for (LinkageProblem linkageProblem : linkageProblems) {\n-            ClassFile targetClass = linkageProblem.getTargetClass();\n-            if (targetClass != null) {\n-              problematicJars.add(targetClass.getClassPathEntry());\n-            }\n-            ClassFile sourceClassFile = linkageProblem.getSourceClass();\n-            problematicJars.add(sourceClassFile.getClassPathEntry());\n-          }\n-          System.out.println(classPathResult.formatDependencyPaths(problematicJars.build()));\n-        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "701f864e8c904d41d802e7ac8ed8a2825404b317"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDQwODcwOnYy", "diffSide": "RIGHT", "path": "enforcer-rules/src/it/bom-project-error/verify.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMDoyOToyM1rOHQKIHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMDoyOToyM1rOHQKIHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwNTE4Mg==", "bodyText": "Because linkage problems and the dependency paths are printed as one message, this no longer carry [ERROR] .", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486705182", "createdAt": "2020-09-11T00:29:23Z", "author": {"login": "suztomo"}, "path": "enforcer-rules/src/it/bom-project-error/verify.groovy", "diffHunk": "@@ -28,7 +28,7 @@ Class org.apache.log.Logger is not found;\n       unselected: io.grpc:grpc-core:1.17.1 (compile) / com.google.guava:guava:26.0-android (compile)\n ''')\n \n-assert buildLog.contains('''[ERROR] Problematic artifacts in the dependency tree:\n+assert buildLog.contains('''Problematic artifacts in the dependency tree:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "701f864e8c904d41d802e7ac8ed8a2825404b317"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDQwODg4OnYy", "diffSide": "RIGHT", "path": "enforcer-rules/src/it/fail-build-for-linkage-errors/verify.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMDoyOToyOVrOHQKINw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMDoyOToyOVrOHQKINw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwNTIwNw==", "bodyText": "Because linkage problems and the dependency paths are printed as one message, this no longer carry [ERROR] .", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486705207", "createdAt": "2020-09-11T00:29:29Z", "author": {"login": "suztomo"}, "path": "enforcer-rules/src/it/fail-build-for-linkage-errors/verify.groovy", "diffHunk": "@@ -20,7 +20,7 @@ assert buildLog.contains('''\\\n ''')\n \n assert buildLog.contains('''\\\n-[ERROR] Problematic artifacts in the dependency tree:\n+Problematic artifacts in the dependency tree:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "701f864e8c904d41d802e7ac8ed8a2825404b317"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDQwOTUwOnYy", "diffSide": "LEFT", "path": "enforcer-rules/src/main/java/com/google/cloud/tools/dependencies/enforcer/LinkageCheckerRule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMDoyOTo1MlrOHQKIkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMDoyOTo1MlrOHQKIkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwNTI5OQ==", "bodyText": "This has moved to formatLinkageProblems.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486705299", "createdAt": "2020-09-11T00:29:52Z", "author": {"login": "suztomo"}, "path": "enforcer-rules/src/main/java/com/google/cloud/tools/dependencies/enforcer/LinkageCheckerRule.java", "diffHunk": "@@ -385,20 +382,4 @@ private ClassPathResult findBomClasspath(\n     }\n     return result;\n   }\n-\n-  private String dependencyPathsOfProblematicJars(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "701f864e8c904d41d802e7ac8ed8a2825404b317"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NDQxMDQxOnYy", "diffSide": "RIGHT", "path": "enforcer-rules/src/test/java/com/google/cloud/tools/dependencies/enforcer/LinkageCheckerRuleTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMDozMDoyOVrOHQKJIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwMDozMDoyOVrOHQKJIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjcwNTQ0MA==", "bodyText": "Now one error() prints both linkage problems and dependency paths.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1642#discussion_r486705440", "createdAt": "2020-09-11T00:30:29Z", "author": {"login": "suztomo"}, "path": "enforcer-rules/src/test/java/com/google/cloud/tools/dependencies/enforcer/LinkageCheckerRuleTest.java", "diffHunk": "@@ -232,12 +231,12 @@ public void testExecute_shouldFailForBadProject() throws RepositoryException {\n     } catch (EnforcerRuleException ex) {\n       // pass\n       ArgumentCaptor<String> errorMessageCaptor = ArgumentCaptor.forClass(String.class);\n-      verify(mockLog, times(2)).error(errorMessageCaptor.capture());\n+      verify(mockLog, times(1)).error(errorMessageCaptor.capture());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "701f864e8c904d41d802e7ac8ed8a2825404b317"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2536, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}