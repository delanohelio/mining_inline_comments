{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1ODE0NTU5", "number": 1322, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODozMjo1MVrODszTnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODozODoyNVrODszbQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzA0NTQzOnYy", "diffSide": "RIGHT", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassPathEntryTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODozMjo1MVrOF926Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODoyNzo0M1rOF-ir8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwNzA3OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Artifact artifact = resolveArtifact(\"com.google.truth.extensions:truth-java8-extension:1.0.1\");\n          \n          \n            \n                Artifact artifact = LinkageCheckerTest.resolvePaths(\"com.google.truth.extensions:truth-java8-extension:1.0.1\").get(0).getArtifact();\n          \n      \n    \n    \n  \n\nThis does almost same thing, although resolveArtifact does not fetch (unnecessary) dependencies.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1322#discussion_r400407079", "createdAt": "2020-03-30T18:32:51Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassPathEntryTest.java", "diffHunk": "@@ -78,6 +86,38 @@ public void testToStringArtifact() {\n     assertEquals(\"com.google:foo:0.0.1\", entry.toString());\n   }\n \n+  @Test\n+  public void testListFileNames() throws IOException, ArtifactResolutionException {\n+    \n+    // copy into the local repository so we can read the jar file\n+    Artifact artifact = resolveArtifact(\"com.google.truth.extensions:truth-java8-extension:1.0.1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd187157ac460a48d494a551efdcaeafcce98480"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMTA1NA==", "bodyText": "Or, you can just use one of the JAR files in test/resources/testdata. This idea does not require (unnecessary) network connections.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1322#discussion_r400411054", "createdAt": "2020-03-30T18:39:42Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassPathEntryTest.java", "diffHunk": "@@ -78,6 +86,38 @@ public void testToStringArtifact() {\n     assertEquals(\"com.google:foo:0.0.1\", entry.toString());\n   }\n \n+  @Test\n+  public void testListFileNames() throws IOException, ArtifactResolutionException {\n+    \n+    // copy into the local repository so we can read the jar file\n+    Artifact artifact = resolveArtifact(\"com.google.truth.extensions:truth-java8-extension:1.0.1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwNzA3OQ=="}, "originalCommit": {"oid": "dd187157ac460a48d494a551efdcaeafcce98480"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQyNzgyMg==", "bodyText": "This test definitely shouldn't pull an entire dependency tree to only look at one jar.\nWe could bundle it. I might yet do that if we need to contrive a specific jar with specific characteristic for testing. For now this one was small and simple enough that it could easily be characterized.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1322#discussion_r400427822", "createdAt": "2020-03-30T19:08:17Z", "author": {"login": "elharo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassPathEntryTest.java", "diffHunk": "@@ -78,6 +86,38 @@ public void testToStringArtifact() {\n     assertEquals(\"com.google:foo:0.0.1\", entry.toString());\n   }\n \n+  @Test\n+  public void testListFileNames() throws IOException, ArtifactResolutionException {\n+    \n+    // copy into the local repository so we can read the jar file\n+    Artifact artifact = resolveArtifact(\"com.google.truth.extensions:truth-java8-extension:1.0.1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwNzA3OQ=="}, "originalCommit": {"oid": "dd187157ac460a48d494a551efdcaeafcce98480"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQ3MjQzNQ==", "bodyText": "Truth-java-8-extension is small JAR file and thus a good case to observe the completeness of listing.\nApart from that, I found conscrypt-openjdk-uber-1.4.2.jar in test/resources/testdata has nice list of contents to assert.\nsuztomo-macbookpro44% jar tf dependencies/src/test/resources/testdata/conscrypt-openjdk-uber-1.4.2.jar\nMETA-INF/MANIFEST.MF\nMETA-INF/SIGNINGC.SF\nMETA-INF/SIGNINGC.RSA\nMETA-INF/\nMETA-INF/native/\nMETA-INF/native/libconscrypt_openjdk_jni-linux-x86_64.so\nMETA-INF/native/conscrypt_openjdk_jni-windows-x86.dll\nMETA-INF/native/libconscrypt_openjdk_jni-osx-x86_64.dylib\nMETA-INF/native/conscrypt_openjdk_jni-windows-x86_64.dll\norg/\norg/conscrypt/\norg/conscrypt/NativeCrypto.class\norg/conscrypt/OpenSSLSignature$1.class\norg/conscrypt/TrustManagerImpl$1.class\norg/conscrypt/OpenSSLContextImpl$TLSv1.class\norg/conscrypt/OpenSSLX509CertPath.class\norg/conscrypt/OpenSSLECPrivateKey.class\norg/conscrypt/OpenSSLCipherRSA$OAEP$SHA512.class", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1322#discussion_r400472435", "createdAt": "2020-03-30T20:26:51Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassPathEntryTest.java", "diffHunk": "@@ -78,6 +86,38 @@ public void testToStringArtifact() {\n     assertEquals(\"com.google:foo:0.0.1\", entry.toString());\n   }\n \n+  @Test\n+  public void testListFileNames() throws IOException, ArtifactResolutionException {\n+    \n+    // copy into the local repository so we can read the jar file\n+    Artifact artifact = resolveArtifact(\"com.google.truth.extensions:truth-java8-extension:1.0.1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwNzA3OQ=="}, "originalCommit": {"oid": "dd187157ac460a48d494a551efdcaeafcce98480"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyNDMzNg==", "bodyText": "That does have some nice inner classes and is not too large.\nAs to network connections in tests, yes, I am nervous about that. Though I do wonder, is this any different than pulling in our own dependencies from Maven central. In fact, this is a Maven dependency we're loading from the same serverlocal cache we'd load it from if we depended on it directly from pom.xml.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1322#discussion_r401124336", "createdAt": "2020-03-31T18:27:43Z", "author": {"login": "elharo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassPathEntryTest.java", "diffHunk": "@@ -78,6 +86,38 @@ public void testToStringArtifact() {\n     assertEquals(\"com.google:foo:0.0.1\", entry.toString());\n   }\n \n+  @Test\n+  public void testListFileNames() throws IOException, ArtifactResolutionException {\n+    \n+    // copy into the local repository so we can read the jar file\n+    Artifact artifact = resolveArtifact(\"com.google.truth.extensions:truth-java8-extension:1.0.1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQwNzA3OQ=="}, "originalCommit": {"oid": "dd187157ac460a48d494a551efdcaeafcce98480"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzA2NDk2OnYy", "diffSide": "RIGHT", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassPathEntryTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODozODoyNVrOF93Gng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxOTozMDo1MlrOF-lAFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMDI3MA==", "bodyText": "You may want to add some inner classes.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1322#discussion_r400410270", "createdAt": "2020-03-30T18:38:25Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassPathEntryTest.java", "diffHunk": "@@ -78,6 +86,38 @@ public void testToStringArtifact() {\n     assertEquals(\"com.google:foo:0.0.1\", entry.toString());\n   }\n \n+  @Test\n+  public void testListFileNames() throws IOException, ArtifactResolutionException {\n+    \n+    // copy into the local repository so we can read the jar file\n+    Artifact artifact = resolveArtifact(\"com.google.truth.extensions:truth-java8-extension:1.0.1\");\n+    \n+    ClassPathEntry entry = new ClassPathEntry(artifact);\n+    ImmutableSet<String> classFileNames = entry.listClassFileNames();\n+    Truth.assertThat(classFileNames).containsExactly(\n+        \"com.google.common.truth.IntStreamSubject\",\n+        \"com.google.common.truth.LongStreamSubject\",\n+        \"com.google.common.truth.OptionalDoubleSubject\",\n+        \"com.google.common.truth.OptionalSubject\",\n+        \"com.google.common.truth.OptionalIntSubject\",\n+        \"com.google.common.truth.OptionalLongSubject\",\n+        \"com.google.common.truth.PathSubject\",\n+        \"com.google.common.truth.Truth8\",\n+        \"com.google.common.truth.StreamSubject\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd187157ac460a48d494a551efdcaeafcce98480"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEyNDQ5NA==", "bodyText": "yes, looking at that now.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1322#discussion_r401124494", "createdAt": "2020-03-31T18:27:54Z", "author": {"login": "elharo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassPathEntryTest.java", "diffHunk": "@@ -78,6 +86,38 @@ public void testToStringArtifact() {\n     assertEquals(\"com.google:foo:0.0.1\", entry.toString());\n   }\n \n+  @Test\n+  public void testListFileNames() throws IOException, ArtifactResolutionException {\n+    \n+    // copy into the local repository so we can read the jar file\n+    Artifact artifact = resolveArtifact(\"com.google.truth.extensions:truth-java8-extension:1.0.1\");\n+    \n+    ClassPathEntry entry = new ClassPathEntry(artifact);\n+    ImmutableSet<String> classFileNames = entry.listClassFileNames();\n+    Truth.assertThat(classFileNames).containsExactly(\n+        \"com.google.common.truth.IntStreamSubject\",\n+        \"com.google.common.truth.LongStreamSubject\",\n+        \"com.google.common.truth.OptionalDoubleSubject\",\n+        \"com.google.common.truth.OptionalSubject\",\n+        \"com.google.common.truth.OptionalIntSubject\",\n+        \"com.google.common.truth.OptionalLongSubject\",\n+        \"com.google.common.truth.PathSubject\",\n+        \"com.google.common.truth.Truth8\",\n+        \"com.google.common.truth.StreamSubject\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMDI3MA=="}, "originalCommit": {"oid": "dd187157ac460a48d494a551efdcaeafcce98480"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTE2MjI2Mg==", "bodyText": "Also verify there's no such class that has package name META-INF?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1322#discussion_r401162262", "createdAt": "2020-03-31T19:30:52Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassPathEntryTest.java", "diffHunk": "@@ -78,6 +86,38 @@ public void testToStringArtifact() {\n     assertEquals(\"com.google:foo:0.0.1\", entry.toString());\n   }\n \n+  @Test\n+  public void testListFileNames() throws IOException, ArtifactResolutionException {\n+    \n+    // copy into the local repository so we can read the jar file\n+    Artifact artifact = resolveArtifact(\"com.google.truth.extensions:truth-java8-extension:1.0.1\");\n+    \n+    ClassPathEntry entry = new ClassPathEntry(artifact);\n+    ImmutableSet<String> classFileNames = entry.listClassFileNames();\n+    Truth.assertThat(classFileNames).containsExactly(\n+        \"com.google.common.truth.IntStreamSubject\",\n+        \"com.google.common.truth.LongStreamSubject\",\n+        \"com.google.common.truth.OptionalDoubleSubject\",\n+        \"com.google.common.truth.OptionalSubject\",\n+        \"com.google.common.truth.OptionalIntSubject\",\n+        \"com.google.common.truth.OptionalLongSubject\",\n+        \"com.google.common.truth.PathSubject\",\n+        \"com.google.common.truth.Truth8\",\n+        \"com.google.common.truth.StreamSubject\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMDI3MA=="}, "originalCommit": {"oid": "dd187157ac460a48d494a551efdcaeafcce98480"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2695, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}