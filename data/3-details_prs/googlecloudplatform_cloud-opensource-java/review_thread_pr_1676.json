{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxOTY4Mzg0", "number": 1676, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMjoyMDowNVrOEm2UHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODoxOTowNFrOEnKdwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTcxMjI4OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMjoyMDowNVrOHXHXzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTowOToxMFrOHXfmmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwMDA3Ng==", "bodyText": "They cover the ones listed in http://go/jdd-class-reference-validation", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494000076", "createdAt": "2020-09-24T02:20:05Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -656,7 +656,8 @@ boolean isUnusedClassSymbolReference(String sourceClassName, ClassSymbol classSy\n             Instruction instruction = instructionHandle.getInstruction();\n             if (instruction instanceof CPInstruction) {\n               // Checking JVM instructions that take a symbolic reference to a class in\n-              // JVM Instruction Set\n+              // JVM Instruction Set: anewarray, checkcast, instanceof, ldc, ldc2_w, multianewarray,\n+              // and new.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71523f86d8cc73a8f5bfc16610b53475f5da4b16"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5MjMzMA==", "bodyText": "I think you mean ldc_w, not ldc2_w. ldc2_w is for longs or doubles.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494392330", "createdAt": "2020-09-24T15:02:37Z", "author": {"login": "netdpb"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -656,7 +656,8 @@ boolean isUnusedClassSymbolReference(String sourceClassName, ClassSymbol classSy\n             Instruction instruction = instructionHandle.getInstruction();\n             if (instruction instanceof CPInstruction) {\n               // Checking JVM instructions that take a symbolic reference to a class in\n-              // JVM Instruction Set\n+              // JVM Instruction Set: anewarray, checkcast, instanceof, ldc, ldc2_w, multianewarray,\n+              // and new.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwMDA3Ng=="}, "originalCommit": {"oid": "71523f86d8cc73a8f5bfc16610b53475f5da4b16"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5NzA4MQ==", "bodyText": "Thanks. Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494397081", "createdAt": "2020-09-24T15:09:10Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -656,7 +656,8 @@ boolean isUnusedClassSymbolReference(String sourceClassName, ClassSymbol classSy\n             Instruction instruction = instructionHandle.getInstruction();\n             if (instruction instanceof CPInstruction) {\n               // Checking JVM instructions that take a symbolic reference to a class in\n-              // JVM Instruction Set\n+              // JVM Instruction Set: anewarray, checkcast, instanceof, ldc, ldc2_w, multianewarray,\n+              // and new.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAwMDA3Ng=="}, "originalCommit": {"oid": "71523f86d8cc73a8f5bfc16610b53475f5da4b16"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MTgwMTY2OnYy", "diffSide": "LEFT", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMzoxNToyNVrOHXIMOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwMzoxNToyNVrOHXIMOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDAxMzQ5Nw==", "bodyText": "It was using a dummy pair. The dummySource jar does not contain LinkageCheckerTest class.\nWith this PR, the test cases require real class files that have constant pool section containing the target class.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494013497", "createdAt": "2020-09-24T03:15:25Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerTest.java", "diffHunk": "@@ -548,53 +551,56 @@ public void testFindClassReferences_innerClass() throws IOException {\n     Truth.assertThat(problems).isEmpty();\n   }\n \n-\n   @Test\n-  public void testFindClassReferences_privateClass() throws IOException, URISyntaxException {\n-    // The superclass of AbstractApiService$InnerService (Guava's ApiService) is not in the paths\n-    ClassPathEntry dummySource = firestoreJar;\n-    List<ClassPathEntry> paths =\n-        ImmutableList.of(classPathEntryOfResource(\"testdata/api-common-1.7.0.jar\"));\n-    LinkageChecker linkageChecker = LinkageChecker.create(paths);\n+  public void testFindClassReferences_inaccessibleClass() throws IOException, URISyntaxException {\n+    // io.grpc.grpclb.GrpclbLoadBalancer in grpc-grpclb 0.12.0 had a reference to\n+    // io.grpc.internal.SingleTransportChannel. The SingleTransportChannel became non-public in\n+    // grpc-core 0.15.0.\n+    ClassPathBuilder classPathBuilder = new ClassPathBuilder();\n+    ClassPathResult classPathResult =\n+        classPathBuilder.resolve(\n+            ImmutableList.of(\n+                new DefaultArtifact(\"io.grpc:grpc-core:0.15.0\"),\n+                new DefaultArtifact(\"io.grpc:grpc-grpclb:0.12.0\")),\n+            false);\n \n-    SymbolReferences.Builder builder = new SymbolReferences.Builder();\n-    builder.addClassReference(\n-        new ClassFile(dummySource, LinkageCheckerTest.class.getName()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bd196d68536c1f6824236508bd458664d3a8615"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzcyMjE2OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzoyMToxMlrOHXaWsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDo1ODoyMFrOHXfG8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxMTA5MQ==", "bodyText": "@netdpb FYI, BCEL has an abstract class \"CPInstruction\" that represents an instruction that takes a constant pool index, and we already had this function to determine whether a constant pool index is unused by JVM instructions. (Therefore this function does not list \"safe\" operations)", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494311091", "createdAt": "2020-09-24T13:21:12Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -656,7 +656,8 @@ boolean isUnusedClassSymbolReference(String sourceClassName, ClassSymbol classSy\n             Instruction instruction = instructionHandle.getInstruction();\n             if (instruction instanceof CPInstruction) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bd196d68536c1f6824236508bd458664d3a8615"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM4ODk3OA==", "bodyText": "That's fine, as long as it doesn't list \"dangerous\" operations either.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494388978", "createdAt": "2020-09-24T14:58:20Z", "author": {"login": "netdpb"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -656,7 +656,8 @@ boolean isUnusedClassSymbolReference(String sourceClassName, ClassSymbol classSy\n             Instruction instruction = instructionHandle.getInstruction();\n             if (instruction instanceof CPInstruction) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxMTA5MQ=="}, "originalCommit": {"oid": "5bd196d68536c1f6824236508bd458664d3a8615"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDI2NzUwOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToxMTowOFrOHXfslw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTo1ODo1M1rOHXh1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5ODYxNQ==", "bodyText": "What about:\nif (!isClassAccessibleFrom(targetClass, sourceClassName)\n    && !classDumper.isUnusedClassSymbolReference(sourceClassName, symbol)) {\n  return Optional.of(new InaccessibleClassProblem(sourceClassFile, targetClassFile, symbol));\n}\nreturn Optional.empty();", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494398615", "createdAt": "2020-09-24T15:11:08Z", "author": {"login": "netdpb"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -512,7 +512,13 @@ private boolean isMemberAccessibleFrom(\n       }\n \n       if (!isClassAccessibleFrom(targetClass, sourceClassName)) {\n-        return Optional.of(new InaccessibleClassProblem(sourceClassFile, targetClassFile, symbol));\n+        if (classDumper.isUnusedClassSymbolReference(sourceClassName, symbol)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bd196d68536c1f6824236508bd458664d3a8615"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwNjk1NA==", "bodyText": "I tried that and I was confused. Maybe this is more clear:\nif (isClassAccessibleFrom(targetClass, sourceClassName)\n    || classDumper.isUnusedClassSymbolReference(sourceClassName, symbol)) {\n  return Optional.empty();\n} else {\n  return Optional.of(new InaccessibleClassProblem(sourceClassFile, targetClassFile, symbol));\n}", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494406954", "createdAt": "2020-09-24T15:22:27Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -512,7 +512,13 @@ private boolean isMemberAccessibleFrom(\n       }\n \n       if (!isClassAccessibleFrom(targetClass, sourceClassName)) {\n-        return Optional.of(new InaccessibleClassProblem(sourceClassFile, targetClassFile, symbol));\n+        if (classDumper.isUnusedClassSymbolReference(sourceClassName, symbol)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5ODYxNQ=="}, "originalCommit": {"oid": "5bd196d68536c1f6824236508bd458664d3a8615"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxMjg5NQ==", "bodyText": "Maybe, but it does seem like an inversion of the test.\nIf the class is inaccessible and it's not unused... What if you inverted isUnusedClassSymbolReference?\nif (!isClassAccessibleFrom(targetClass, sourceClassname)\n    && classDumpter.isClassSymbolReferenceUsed(sourceClassName, symbol)) {\n  return Optional.of(\u2026);\n}\nreturn Optional.empty();", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494412895", "createdAt": "2020-09-24T15:30:07Z", "author": {"login": "netdpb"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -512,7 +512,13 @@ private boolean isMemberAccessibleFrom(\n       }\n \n       if (!isClassAccessibleFrom(targetClass, sourceClassName)) {\n-        return Optional.of(new InaccessibleClassProblem(sourceClassFile, targetClassFile, symbol));\n+        if (classDumper.isUnusedClassSymbolReference(sourceClassName, symbol)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5ODYxNQ=="}, "originalCommit": {"oid": "5bd196d68536c1f6824236508bd458664d3a8615"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzMzU4NQ==", "bodyText": "Added isClassSymbolReferenceUsed to ClassDumper.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494433585", "createdAt": "2020-09-24T15:58:53Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -512,7 +512,13 @@ private boolean isMemberAccessibleFrom(\n       }\n \n       if (!isClassAccessibleFrom(targetClass, sourceClassName)) {\n-        return Optional.of(new InaccessibleClassProblem(sourceClassFile, targetClassFile, symbol));\n+        if (classDumper.isUnusedClassSymbolReference(sourceClassName, symbol)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5ODYxNQ=="}, "originalCommit": {"oid": "5bd196d68536c1f6824236508bd458664d3a8615"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDI4MzAxOnYy", "diffSide": "RIGHT", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToxNDozMFrOHXf2Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTo1OTowN1rOHXh12A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwMTA0Ng==", "bodyText": "You only use this once. Inline?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494401046", "createdAt": "2020-09-24T15:14:30Z", "author": {"login": "netdpb"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerTest.java", "diffHunk": "@@ -548,53 +551,56 @@ public void testFindClassReferences_innerClass() throws IOException {\n     Truth.assertThat(problems).isEmpty();\n   }\n \n-\n   @Test\n-  public void testFindClassReferences_privateClass() throws IOException, URISyntaxException {\n-    // The superclass of AbstractApiService$InnerService (Guava's ApiService) is not in the paths\n-    ClassPathEntry dummySource = firestoreJar;\n-    List<ClassPathEntry> paths =\n-        ImmutableList.of(classPathEntryOfResource(\"testdata/api-common-1.7.0.jar\"));\n-    LinkageChecker linkageChecker = LinkageChecker.create(paths);\n+  public void testFindClassReferences_inaccessibleClass() throws IOException, URISyntaxException {\n+    // io.grpc.grpclb.GrpclbLoadBalancer in grpc-grpclb 0.12.0 had a reference to\n+    // io.grpc.internal.SingleTransportChannel. The SingleTransportChannel became non-public in\n+    // grpc-core 0.15.0.\n+    ClassPathBuilder classPathBuilder = new ClassPathBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5bd196d68536c1f6824236508bd458664d3a8615"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQzMzc1Mg==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494433752", "createdAt": "2020-09-24T15:59:07Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerTest.java", "diffHunk": "@@ -548,53 +551,56 @@ public void testFindClassReferences_innerClass() throws IOException {\n     Truth.assertThat(problems).isEmpty();\n   }\n \n-\n   @Test\n-  public void testFindClassReferences_privateClass() throws IOException, URISyntaxException {\n-    // The superclass of AbstractApiService$InnerService (Guava's ApiService) is not in the paths\n-    ClassPathEntry dummySource = firestoreJar;\n-    List<ClassPathEntry> paths =\n-        ImmutableList.of(classPathEntryOfResource(\"testdata/api-common-1.7.0.jar\"));\n-    LinkageChecker linkageChecker = LinkageChecker.create(paths);\n+  public void testFindClassReferences_inaccessibleClass() throws IOException, URISyntaxException {\n+    // io.grpc.grpclb.GrpclbLoadBalancer in grpc-grpclb 0.12.0 had a reference to\n+    // io.grpc.internal.SingleTransportChannel. The SingleTransportChannel became non-public in\n+    // grpc-core 0.15.0.\n+    ClassPathBuilder classPathBuilder = new ClassPathBuilder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwMTA0Ng=="}, "originalCommit": {"oid": "5bd196d68536c1f6824236508bd458664d3a8615"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDUzOTg3OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoxMTo1NVrOHXiXxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODo1OTo0OVrOHXoplA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0MjQzNw==", "bodyText": "Oh. Do we need both? I think positive method names are usually better than negative ones. Where else is isUnusedClassSymbolReference used, and can it be switched?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494442437", "createdAt": "2020-09-24T16:11:55Z", "author": {"login": "netdpb"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -561,6 +561,10 @@ private static String outerClassName(JavaClass sourceJavaClass) {\n     return null;\n   }\n \n+  boolean isClassSymbolReferenceUsed(String sourceClassName, ClassSymbol classSymbol) {\n+    return !isUnusedClassSymbolReference(sourceClassName, classSymbol);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28acb807152f7ed589f098cee6cb951f268171d8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU0NTMwMA==", "bodyText": "Updated.\n\npositive method names are usually better than negative ones\n\nYes, especially when we negate the result.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494545300", "createdAt": "2020-09-24T18:59:49Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -561,6 +561,10 @@ private static String outerClassName(JavaClass sourceJavaClass) {\n     return null;\n   }\n \n+  boolean isClassSymbolReferenceUsed(String sourceClassName, ClassSymbol classSymbol) {\n+    return !isUnusedClassSymbolReference(sourceClassName, classSymbol);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0MjQzNw=="}, "originalCommit": {"oid": "28acb807152f7ed589f098cee6cb951f268171d8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTAxMzc2OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODoxOTowNFrOHXnB-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxODoyNzowMFrOHXnYOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUxODc3OQ==", "bodyText": "checks the following", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494518779", "createdAt": "2020-09-24T18:19:04Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -561,12 +561,8 @@ private static String outerClassName(JavaClass sourceJavaClass) {\n     return null;\n   }\n \n-  boolean isClassSymbolReferenceUsed(String sourceClassName, ClassSymbol classSymbol) {\n-    return !isUnusedClassSymbolReference(sourceClassName, classSymbol);\n-  }\n-\n   /**\n-   * Returns true if the class symbol reference is unused in the source class file. It checks\n+   * Returns true if the class symbol reference is used in the source class file. It checks", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "905cdcfdbeead4d720b1d772e0e16d2607e7ae0c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUyNDQ3Mw==", "bodyText": "Fixed.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1676#discussion_r494524473", "createdAt": "2020-09-24T18:27:00Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -561,12 +561,8 @@ private static String outerClassName(JavaClass sourceJavaClass) {\n     return null;\n   }\n \n-  boolean isClassSymbolReferenceUsed(String sourceClassName, ClassSymbol classSymbol) {\n-    return !isUnusedClassSymbolReference(sourceClassName, classSymbol);\n-  }\n-\n   /**\n-   * Returns true if the class symbol reference is unused in the source class file. It checks\n+   * Returns true if the class symbol reference is used in the source class file. It checks", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUxODc3OQ=="}, "originalCommit": {"oid": "905cdcfdbeead4d720b1d772e0e16d2607e7ae0c"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2557, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}