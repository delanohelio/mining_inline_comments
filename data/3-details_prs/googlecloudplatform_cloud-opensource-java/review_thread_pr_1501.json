{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNzIzNTYy", "number": 1501, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDoxNTowMlrOEJQOjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjoxNToyOVrOEJu2nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTM4NTA5OnYy", "diffSide": "RIGHT", "path": "dashboard/src/main/java/com/google/cloud/tools/opensource/dashboard/ArtifactResults.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDoxNTowMlrOGptdRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjo1MjoyNFrOGpwt-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4OTU3Mw==", "bodyText": "can we use a more specific type here? i.e. a semantic class instead of a data structure?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r446389573", "createdAt": "2020-06-26T20:15:02Z", "author": {"login": "elharo"}, "path": "dashboard/src/main/java/com/google/cloud/tools/opensource/dashboard/ArtifactResults.java", "diffHunk": "@@ -33,6 +37,7 @@\n   private final Map<String, Integer> results = new HashMap<>();\n   private final Artifact artifact;\n   private String exceptionMessage;\n+  private ImmutableListMultimap<DependencyPath, DependencyPath> dependencyTree;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70ce242b33882bea5992f7d8fbf8e0ce76268b07"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNzQ2NQ==", "bodyText": "Will do.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r446417465", "createdAt": "2020-06-26T21:26:58Z", "author": {"login": "suztomo"}, "path": "dashboard/src/main/java/com/google/cloud/tools/opensource/dashboard/ArtifactResults.java", "diffHunk": "@@ -33,6 +37,7 @@\n   private final Map<String, Integer> results = new HashMap<>();\n   private final Artifact artifact;\n   private String exceptionMessage;\n+  private ImmutableListMultimap<DependencyPath, DependencyPath> dependencyTree;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4OTU3Mw=="}, "originalCommit": {"oid": "70ce242b33882bea5992f7d8fbf8e0ce76268b07"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0MzAwMg==", "bodyText": "This is reverted in favor of DependencyGraph class.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r446443002", "createdAt": "2020-06-26T22:52:24Z", "author": {"login": "suztomo"}, "path": "dashboard/src/main/java/com/google/cloud/tools/opensource/dashboard/ArtifactResults.java", "diffHunk": "@@ -33,6 +37,7 @@\n   private final Map<String, Integer> results = new HashMap<>();\n   private final Artifact artifact;\n   private String exceptionMessage;\n+  private ImmutableListMultimap<DependencyPath, DependencyPath> dependencyTree;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4OTU3Mw=="}, "originalCommit": {"oid": "70ce242b33882bea5992f7d8fbf8e0ce76268b07"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTM5MjU2OnYy", "diffSide": "RIGHT", "path": "dashboard/src/test/java/com/google/cloud/tools/opensource/dashboard/DashboardUnavailableArtifactTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDoxNzo1NVrOGpthvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjo0MToxN1rOGpwjtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM5MDcxNg==", "bodyText": "why are we passing the same object as key and value?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r446390716", "createdAt": "2020-06-26T20:17:55Z", "author": {"login": "elharo"}, "path": "dashboard/src/test/java/com/google/cloud/tools/opensource/dashboard/DashboardUnavailableArtifactTest.java", "diffHunk": "@@ -118,12 +120,17 @@ public void testDashboardWithRepositoryException()\n     validArtifactResult.addResult(DashboardMain.TEST_NAME_UPPER_BOUND, 0);\n     validArtifactResult.addResult(DashboardMain.TEST_NAME_DEPENDENCY_CONVERGENCE, 0);\n     validArtifactResult.addResult(DashboardMain.TEST_NAME_GLOBAL_UPPER_BOUND, 0);\n+    DependencyPath rootValid = new DependencyPath(validArtifact);\n+    validArtifactResult.setDependencyTree(ImmutableListMultimap.of(rootValid, rootValid));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70ce242b33882bea5992f7d8fbf8e0ce76268b07"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQxNzc0Ng==", "bodyText": "It's a convention of the multipmap<DependencyPath, dependencyPath>. I'll try to use DependencyGraph and this will be gone.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r446417746", "createdAt": "2020-06-26T21:27:43Z", "author": {"login": "suztomo"}, "path": "dashboard/src/test/java/com/google/cloud/tools/opensource/dashboard/DashboardUnavailableArtifactTest.java", "diffHunk": "@@ -118,12 +120,17 @@ public void testDashboardWithRepositoryException()\n     validArtifactResult.addResult(DashboardMain.TEST_NAME_UPPER_BOUND, 0);\n     validArtifactResult.addResult(DashboardMain.TEST_NAME_DEPENDENCY_CONVERGENCE, 0);\n     validArtifactResult.addResult(DashboardMain.TEST_NAME_GLOBAL_UPPER_BOUND, 0);\n+    DependencyPath rootValid = new DependencyPath(validArtifact);\n+    validArtifactResult.setDependencyTree(ImmutableListMultimap.of(rootValid, rootValid));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM5MDcxNg=="}, "originalCommit": {"oid": "70ce242b33882bea5992f7d8fbf8e0ce76268b07"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0MDM3NQ==", "bodyText": "This piece of code is removed.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r446440375", "createdAt": "2020-06-26T22:41:17Z", "author": {"login": "suztomo"}, "path": "dashboard/src/test/java/com/google/cloud/tools/opensource/dashboard/DashboardUnavailableArtifactTest.java", "diffHunk": "@@ -118,12 +120,17 @@ public void testDashboardWithRepositoryException()\n     validArtifactResult.addResult(DashboardMain.TEST_NAME_UPPER_BOUND, 0);\n     validArtifactResult.addResult(DashboardMain.TEST_NAME_DEPENDENCY_CONVERGENCE, 0);\n     validArtifactResult.addResult(DashboardMain.TEST_NAME_GLOBAL_UPPER_BOUND, 0);\n+    DependencyPath rootValid = new DependencyPath(validArtifact);\n+    validArtifactResult.setDependencyTree(ImmutableListMultimap.of(rootValid, rootValid));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM5MDcxNg=="}, "originalCommit": {"oid": "70ce242b33882bea5992f7d8fbf8e0ce76268b07"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTcwMjg4OnYy", "diffSide": "LEFT", "path": "dashboard/src/main/java/com/google/cloud/tools/opensource/dashboard/DashboardMain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjozOTozM1rOGpwiGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjozOTozM1rOGpwiGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzOTk2MQ==", "bodyText": "Now we don't need to depend on ListMultimap<DependencyPath, DependencyPath>, because the parent-children relationship is inside DependencyGraph.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r446439961", "createdAt": "2020-06-26T22:39:33Z", "author": {"login": "suztomo"}, "path": "dashboard/src/main/java/com/google/cloud/tools/opensource/dashboard/DashboardMain.java", "diffHunk": "@@ -348,40 +345,33 @@ private static ArtifactResults generateArtifactReport(\n         new FileOutputStream(outputFile), StandardCharsets.UTF_8)) {\n \n       // includes all versions\n-      DependencyGraph completeDependencies = artifactInfo.getCompleteDependencies();\n-      List<Update> convergenceIssues = completeDependencies.findUpdates();\n+      DependencyGraph graph = artifactInfo.getCompleteDependencies();\n+      List<Update> convergenceIssues = graph.findUpdates();\n \n       // picks versions according to Maven rules\n       DependencyGraph transitiveDependencies = artifactInfo.getTransitiveDependencies();\n \n       Map<Artifact, Artifact> upperBoundFailures =\n-          findUpperBoundsFailures(completeDependencies.getHighestVersionMap(),\n-              transitiveDependencies);\n+          findUpperBoundsFailures(graph.getHighestVersionMap(), transitiveDependencies);\n \n       Map<Artifact, Artifact> globalUpperBoundFailures = findUpperBoundsFailures(\n           collectLatestVersions(globalDependencies), transitiveDependencies);\n \n-      List<DependencyPath> dependencyPaths = completeDependencies.list();\n-\n       long totalLinkageErrorCount =\n           symbolProblemTable.values().stream()\n               .flatMap(problemToClasses -> problemToClasses.keySet().stream())\n               .distinct()\n               .count();\n \n-      ListMultimap<DependencyPath, DependencyPath> dependencyTree =\n-          DependencyTreeFormatter.buildDependencyPathTree(dependencyPaths);\n       Template report = configuration.getTemplate(\"/templates/component.ftl\");\n \n-      DependencyPath rootNode = Iterables.getFirst(dependencyTree.values(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6f926fbefb66e492af5b2a910035102682bd0ba"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTcwNzI2OnYy", "diffSide": "RIGHT", "path": "dashboard/src/main/java/com/google/cloud/tools/opensource/dashboard/DashboardMain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjo0MjoyOVrOGpwkww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjo0MjoyOVrOGpwkww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0MDY0Mw==", "bodyText": "It used to pass parent-children relationship and the root node. Now DependencyGraph knows both.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r446440643", "createdAt": "2020-06-26T22:42:29Z", "author": {"login": "suztomo"}, "path": "dashboard/src/main/java/com/google/cloud/tools/opensource/dashboard/DashboardMain.java", "diffHunk": "@@ -348,40 +345,33 @@ private static ArtifactResults generateArtifactReport(\n         new FileOutputStream(outputFile), StandardCharsets.UTF_8)) {\n \n       // includes all versions\n-      DependencyGraph completeDependencies = artifactInfo.getCompleteDependencies();\n-      List<Update> convergenceIssues = completeDependencies.findUpdates();\n+      DependencyGraph graph = artifactInfo.getCompleteDependencies();\n+      List<Update> convergenceIssues = graph.findUpdates();\n \n       // picks versions according to Maven rules\n       DependencyGraph transitiveDependencies = artifactInfo.getTransitiveDependencies();\n \n       Map<Artifact, Artifact> upperBoundFailures =\n-          findUpperBoundsFailures(completeDependencies.getHighestVersionMap(),\n-              transitiveDependencies);\n+          findUpperBoundsFailures(graph.getHighestVersionMap(), transitiveDependencies);\n \n       Map<Artifact, Artifact> globalUpperBoundFailures = findUpperBoundsFailures(\n           collectLatestVersions(globalDependencies), transitiveDependencies);\n \n-      List<DependencyPath> dependencyPaths = completeDependencies.list();\n-\n       long totalLinkageErrorCount =\n           symbolProblemTable.values().stream()\n               .flatMap(problemToClasses -> problemToClasses.keySet().stream())\n               .distinct()\n               .count();\n \n-      ListMultimap<DependencyPath, DependencyPath> dependencyTree =\n-          DependencyTreeFormatter.buildDependencyPathTree(dependencyPaths);\n       Template report = configuration.getTemplate(\"/templates/component.ftl\");\n \n-      DependencyPath rootNode = Iterables.getFirst(dependencyTree.values(), null);\n       Map<String, Object> templateData = new HashMap<>();\n       templateData.put(\"artifact\", artifact);\n       templateData.put(\"updates\", convergenceIssues);\n       templateData.put(\"upperBoundFailures\", upperBoundFailures);\n       templateData.put(\"globalUpperBoundFailures\", globalUpperBoundFailures);\n       templateData.put(\"lastUpdated\", LocalDateTime.now());\n-      templateData.put(\"dependencyTree\", dependencyTree);\n-      templateData.put(\"dependencyRootNode\", rootNode);\n+      templateData.put(\"dependencyGraph\", graph);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6f926fbefb66e492af5b2a910035102682bd0ba"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTcwODk2OnYy", "diffSide": "RIGHT", "path": "dashboard/src/test/java/com/google/cloud/tools/opensource/dashboard/DashboardTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjo0Mzo0MVrOGpwl8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNjoxNjoxOFrOGrEEYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0MDk0Ng==", "bodyText": "This test is set to use libraries-bom:1.0.0. Therefore this number 53144 does not change when we make changes to libraries-bom.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r446440946", "createdAt": "2020-06-26T22:43:41Z", "author": {"login": "suztomo"}, "path": "dashboard/src/test/java/com/google/cloud/tools/opensource/dashboard/DashboardTest.java", "diffHunk": "@@ -439,6 +439,16 @@ public void testBomCoordinatesInUnstableArtifacts() throws IOException, ParsingE\n         \"BOM: com.google.cloud:libraries-bom:1.0.0\", bomCoordinatesNodes.get(0).getValue());\n   }\n \n+  @Test\n+  public void testDependencyTrees() throws IOException, ParsingException {\n+    Document document = parseOutputFile(\"dependency_trees.html\");\n+    Nodes dependencyTreeParagraph = document.query(\"//p[@class='dependency-tree-node']\");\n+\n+    Assert.assertEquals(53144, dependencyTreeParagraph.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6f926fbefb66e492af5b2a910035102682bd0ba"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3NDI5Mg==", "bodyText": "However it appears it does change when we drop transitive optional dependencies. Not unexpected.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r447774292", "createdAt": "2020-06-30T15:28:22Z", "author": {"login": "elharo"}, "path": "dashboard/src/test/java/com/google/cloud/tools/opensource/dashboard/DashboardTest.java", "diffHunk": "@@ -439,6 +439,16 @@ public void testBomCoordinatesInUnstableArtifacts() throws IOException, ParsingE\n         \"BOM: com.google.cloud:libraries-bom:1.0.0\", bomCoordinatesNodes.get(0).getValue());\n   }\n \n+  @Test\n+  public void testDependencyTrees() throws IOException, ParsingException {\n+    Document document = parseOutputFile(\"dependency_trees.html\");\n+    Nodes dependencyTreeParagraph = document.query(\"//p[@class='dependency-tree-node']\");\n+\n+    Assert.assertEquals(53144, dependencyTreeParagraph.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0MDk0Ng=="}, "originalCommit": {"oid": "e6f926fbefb66e492af5b2a910035102682bd0ba"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzgwODYxMQ==", "bodyText": "Yes, that's correct.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r447808611", "createdAt": "2020-06-30T16:16:18Z", "author": {"login": "suztomo"}, "path": "dashboard/src/test/java/com/google/cloud/tools/opensource/dashboard/DashboardTest.java", "diffHunk": "@@ -439,6 +439,16 @@ public void testBomCoordinatesInUnstableArtifacts() throws IOException, ParsingE\n         \"BOM: com.google.cloud:libraries-bom:1.0.0\", bomCoordinatesNodes.get(0).getValue());\n   }\n \n+  @Test\n+  public void testDependencyTrees() throws IOException, ParsingException {\n+    Document document = parseOutputFile(\"dependency_trees.html\");\n+    Nodes dependencyTreeParagraph = document.query(\"//p[@class='dependency-tree-node']\");\n+\n+    Assert.assertEquals(53144, dependencyTreeParagraph.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0MDk0Ng=="}, "originalCommit": {"oid": "e6f926fbefb66e492af5b2a910035102682bd0ba"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjE5MDc0OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToyNzoxN1rOGqWPEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo1NDozN1rOGqXaUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1NzY4Mg==", "bodyText": "do we need to preserve insertion order here? If so, the type should be LinkedListMultimap", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r447057682", "createdAt": "2020-06-29T15:27:17Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java", "diffHunk": "@@ -79,6 +81,9 @@\n   // map of groupId:artifactId:version to paths\n   private SetMultimap<String, DependencyPath> paths = HashMultimap.create();\n \n+  private final ListMultimap<DependencyPath, DependencyPath> parentToChildren =\n+      LinkedListMultimap.create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6f926fbefb66e492af5b2a910035102682bd0ba"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3Njk0NQ==", "bodyText": "Updated for clarity.\nListMultimap holds the insertion order.\n\nA Multimap that can hold duplicate key-value pairs and that maintains the insertion ordering of values for a given key\n\nhttps://guava.dev/releases/19.0/api/docs/com/google/common/collect/ListMultimap.html", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r447076945", "createdAt": "2020-06-29T15:54:37Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java", "diffHunk": "@@ -79,6 +81,9 @@\n   // map of groupId:artifactId:version to paths\n   private SetMultimap<String, DependencyPath> paths = HashMultimap.create();\n \n+  private final ListMultimap<DependencyPath, DependencyPath> parentToChildren =\n+      LinkedListMultimap.create();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1NzY4Mg=="}, "originalCommit": {"oid": "e6f926fbefb66e492af5b2a910035102682bd0ba"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjE5ODA1OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNToyODo1MVrOGqWTgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjowMTo1OFrOGqXufg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1ODgxNw==", "bodyText": "This comment could be clearer. Is this the paths from the root to what exactly? What are the child paths of a dependency path?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r447058817", "createdAt": "2020-06-29T15:28:51Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java", "diffHunk": "@@ -115,16 +120,29 @@ void addPath(DependencyPath path) {\n     return result;\n   }\n \n-  /**\n-   * @return a mutable copy of the paths in this graph, usually in breadth first order\n-   */\n+  /** Returns a mutable copy of the paths in this graph, usually in breadth first order. */\n   public List<DependencyPath> list() {\n     return new ArrayList<>(graph);\n   }\n \n   /**\n-   * @return all paths to the specified artifact\n+   * Returns dependency path of the root node.\n+   *\n+   * @throws IllegalStateException if the graph is empty\n    */\n+  public DependencyPath getRootPath() {\n+    if (graph.isEmpty()) {\n+      throw new IllegalStateException(\"The graph is empty\");\n+    }\n+    return graph.get(0);\n+  }\n+\n+  /** Returns the dependency paths of the children of the node at {@code dependencyPath}. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6f926fbefb66e492af5b2a910035102682bd0ba"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA4MjExMA==", "bodyText": "Updated as Returns dependency paths from the root to the dependencies of the node at {@code  dependencyPath}..\nI thought renaming this to getDependencyDependencyPaths but this verbosity does not give clarity. Keeping getChildPaths.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r447082110", "createdAt": "2020-06-29T16:01:58Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java", "diffHunk": "@@ -115,16 +120,29 @@ void addPath(DependencyPath path) {\n     return result;\n   }\n \n-  /**\n-   * @return a mutable copy of the paths in this graph, usually in breadth first order\n-   */\n+  /** Returns a mutable copy of the paths in this graph, usually in breadth first order. */\n   public List<DependencyPath> list() {\n     return new ArrayList<>(graph);\n   }\n \n   /**\n-   * @return all paths to the specified artifact\n+   * Returns dependency path of the root node.\n+   *\n+   * @throws IllegalStateException if the graph is empty\n    */\n+  public DependencyPath getRootPath() {\n+    if (graph.isEmpty()) {\n+      throw new IllegalStateException(\"The graph is empty\");\n+    }\n+    return graph.get(0);\n+  }\n+\n+  /** Returns the dependency paths of the children of the node at {@code dependencyPath}. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA1ODgxNw=="}, "originalCommit": {"oid": "e6f926fbefb66e492af5b2a910035102682bd0ba"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjQwMDIyOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjoxNTowM1rOGqYQFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjoyMzozOVrOGqYmQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5MDcxMA==", "bodyText": "dependencies of the node --> children of the node", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r447090710", "createdAt": "2020-06-29T16:15:03Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java", "diffHunk": "@@ -115,16 +119,32 @@ void addPath(DependencyPath path) {\n     return result;\n   }\n \n-  /**\n-   * @return a mutable copy of the paths in this graph, usually in breadth first order\n-   */\n+  /** Returns a mutable copy of the paths in this graph, usually in breadth first order. */\n   public List<DependencyPath> list() {\n     return new ArrayList<>(graph);\n   }\n \n   /**\n-   * @return all paths to the specified artifact\n+   * Returns dependency path of the root node.\n+   *\n+   * @throws IllegalStateException if the graph is empty\n+   */\n+  public DependencyPath getRootPath() {\n+    if (graph.isEmpty()) {\n+      throw new IllegalStateException(\"The graph is empty\");\n+    }\n+    return graph.get(0);\n+  }\n+\n+  /**\n+   * Returns dependency paths from the root to the dependencies of the node at {@code", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab6be0d7838c538d929676f5c25b5cbd286e41f5"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5NjM4NA==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r447096384", "createdAt": "2020-06-29T16:23:39Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java", "diffHunk": "@@ -115,16 +119,32 @@ void addPath(DependencyPath path) {\n     return result;\n   }\n \n-  /**\n-   * @return a mutable copy of the paths in this graph, usually in breadth first order\n-   */\n+  /** Returns a mutable copy of the paths in this graph, usually in breadth first order. */\n   public List<DependencyPath> list() {\n     return new ArrayList<>(graph);\n   }\n \n   /**\n-   * @return all paths to the specified artifact\n+   * Returns dependency path of the root node.\n+   *\n+   * @throws IllegalStateException if the graph is empty\n+   */\n+  public DependencyPath getRootPath() {\n+    if (graph.isEmpty()) {\n+      throw new IllegalStateException(\"The graph is empty\");\n+    }\n+    return graph.get(0);\n+  }\n+\n+  /**\n+   * Returns dependency paths from the root to the dependencies of the node at {@code", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5MDcxMA=="}, "originalCommit": {"oid": "ab6be0d7838c538d929676f5c25b5cbd286e41f5"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjQwMjg3OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjoxNToyOVrOGqYRiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjoyMzozM1rOGqYmCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5MTA4MA==", "bodyText": "possibly rename dependencyPath --> node or perhaps dependencyPath --> parent\nand now that I think about it, getChildren might be a better method name than getChildPaths", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r447091080", "createdAt": "2020-06-29T16:15:29Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java", "diffHunk": "@@ -115,16 +119,32 @@ void addPath(DependencyPath path) {\n     return result;\n   }\n \n-  /**\n-   * @return a mutable copy of the paths in this graph, usually in breadth first order\n-   */\n+  /** Returns a mutable copy of the paths in this graph, usually in breadth first order. */\n   public List<DependencyPath> list() {\n     return new ArrayList<>(graph);\n   }\n \n   /**\n-   * @return all paths to the specified artifact\n+   * Returns dependency path of the root node.\n+   *\n+   * @throws IllegalStateException if the graph is empty\n+   */\n+  public DependencyPath getRootPath() {\n+    if (graph.isEmpty()) {\n+      throw new IllegalStateException(\"The graph is empty\");\n+    }\n+    return graph.get(0);\n+  }\n+\n+  /**\n+   * Returns dependency paths from the root to the dependencies of the node at {@code\n+   * dependencyPath}.\n    */\n+  public List<DependencyPath> getChildPaths(DependencyPath dependencyPath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab6be0d7838c538d929676f5c25b5cbd286e41f5"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5NjMyOQ==", "bodyText": "Updated to getChildren. Thank you for suggestion.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1501#discussion_r447096329", "createdAt": "2020-06-29T16:23:33Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java", "diffHunk": "@@ -115,16 +119,32 @@ void addPath(DependencyPath path) {\n     return result;\n   }\n \n-  /**\n-   * @return a mutable copy of the paths in this graph, usually in breadth first order\n-   */\n+  /** Returns a mutable copy of the paths in this graph, usually in breadth first order. */\n   public List<DependencyPath> list() {\n     return new ArrayList<>(graph);\n   }\n \n   /**\n-   * @return all paths to the specified artifact\n+   * Returns dependency path of the root node.\n+   *\n+   * @throws IllegalStateException if the graph is empty\n+   */\n+  public DependencyPath getRootPath() {\n+    if (graph.isEmpty()) {\n+      throw new IllegalStateException(\"The graph is empty\");\n+    }\n+    return graph.get(0);\n+  }\n+\n+  /**\n+   * Returns dependency paths from the root to the dependencies of the node at {@code\n+   * dependencyPath}.\n    */\n+  public List<DependencyPath> getChildPaths(DependencyPath dependencyPath) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5MTA4MA=="}, "originalCommit": {"oid": "ab6be0d7838c538d929676f5c25b5cbd286e41f5"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2623, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}