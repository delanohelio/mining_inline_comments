{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5ODY5NzU0", "number": 1607, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDowNToyNlrOEZwzfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODoyMzo1OFrOEaGWMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDQ5NDY5OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/resources/linkage-checker-exclusion-default.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDowNToyNlrOHCxEJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDowNToyNlrOHCxEJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY2MzA3Ng==", "bodyText": "Because now we check JDK classes, GraalVM-related exclusion is needed.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1607#discussion_r472663076", "createdAt": "2020-08-19T04:05:26Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/resources/linkage-checker-exclusion-default.xml", "diffHunk": "@@ -41,7 +41,62 @@\n       <Package name=\"org.graalvm\" />\n     </Source>\n   </LinkageError>\n-\n+  <LinkageError>\n+    <Target>\n+      <Class name=\"java.lang.invoke.MethodHandle\" />\n+    </Target>\n+    <Source>\n+      <Package name=\"com.oracle.svm\" />\n+    </Source>\n+    <Reason>\n+      GraalVM-related libraries depend on Java Compiler Interface (JVMCI) that\n+      only exists in special JDK. These missing classes are false positives, because\n+      the code is only invoked when running in a GraalVM.\n+      https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/929\n+    </Reason>\n+  </LinkageError>\n+  <LinkageError>\n+    <Target>\n+      <Class name=\"java.lang.invoke.MethodHandle\" />\n+    </Target>\n+    <Source>\n+      <Package name=\"com.oracle.graal\" />\n+    </Source>\n+    <Reason>\n+      GraalVM-related libraries depend on Java Compiler Interface (JVMCI) that\n+      only exists in special JDK. These missing classes are false positives, because\n+      the code is only invoked when running in a GraalVM.\n+      https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/929\n+    </Reason>\n+  </LinkageError>\n+  <LinkageError>\n+    <Target>\n+      <Class name=\"java.lang.invoke.MethodHandle\" />\n+    </Target>\n+    <Source>\n+      <Package name=\"org.graalvm\" />\n+    </Source>\n+    <Reason>\n+      GraalVM-related libraries depend on Java Compiler Interface (JVMCI) that\n+      only exists in special JDK. These missing classes are false positives, because\n+      the code is only invoked when running in a GraalVM.\n+      https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/929\n+    </Reason>\n+  </LinkageError>\n+  <LinkageError>\n+    <Target>\n+      <Class name=\"java.lang.invoke.MethodHandle\" />\n+    </Target>\n+    <Source>\n+      <Package name=\"com.oracle.truffle\" />\n+    </Source>\n+    <Reason>\n+      GraalVM-related libraries depend on Java Compiler Interface (JVMCI) that\n+      only exists in special JDK. These missing classes are false positives, because\n+      the code is only invoked when running in a GraalVM.\n+      https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/929\n+    </Reason>\n+  </LinkageError>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a1571176ed9b8b48d9d698c9a56f2527bd878f"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDQ5NTI4OnYy", "diffSide": "RIGHT", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDowNTozOVrOHCxEmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDowNTozOVrOHCxEmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY2MzE5Mw==", "bodyText": "This is Kristen's finding yesterday.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1607#discussion_r472663193", "createdAt": "2020-08-19T04:05:39Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerTest.java", "diffHunk": "@@ -1120,4 +1120,24 @@ public void testFindLinkageProblems_grpcAndGuava() throws IOException {\n                 \"has class binary name\"))\n         .contains(\"io.grpc.internal.DnsNameResolver\");\n   }\n+\n+  @Test\n+  public void testFindLinkageProblems_referenceToNonexistentMethodForJava8() throws IOException {\n+    // Protobuf-java 3.12.4 contained wrong byte code to reference non-existent method in JRE 1.8\n+    // https://github.com/protocolbuffers/protobuf/issues/7827", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a1571176ed9b8b48d9d698c9a56f2527bd878f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NDUwMjE2OnYy", "diffSide": "LEFT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDowNzozOFrOHCxJJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNDowNzozOFrOHCxJJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjY2NDM1Ng==", "bodyText": "This was hiding the protobuf's linkage error against Java 8 runtime protocolbuffers/protobuf#7827", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1607#discussion_r472664356", "createdAt": "2020-08-19T04:07:38Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -239,8 +239,14 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n     String targetClassName = symbol.getClassBinaryName();\n     String methodName = symbol.getName();\n \n-    // Skip references to Java runtime class. For example, java.lang.String.\n-    if (classDumper.isSystemClass(targetClassName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a1571176ed9b8b48d9d698c9a56f2527bd878f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NjUwMzQxOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMjoyNzo0N1rOHDFBRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMjo1MzoyN1rOHDF81w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk5MDAyMA==", "bodyText": "I'm not sure lines 246-248 explain this code. It explains what we're not doing, not what we are. I suggest deleting them.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1607#discussion_r472990020", "createdAt": "2020-08-19T12:27:47Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -239,8 +239,14 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n     String targetClassName = symbol.getClassBinaryName();\n     String methodName = symbol.getName();\n \n-    // Skip references to Java runtime class. For example, java.lang.String.\n-    if (classDumper.isSystemClass(targetClassName)) {\n+    if (ClassDumper.isArrayClass(targetClassName)) {\n+      return Optional.empty();\n+    }\n+    // Skip references from Java runtime class. For example, java.lang.String.\n+    // It is possible for wrongly configured Java compiler to generate bad byte code that references", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a1571176ed9b8b48d9d698c9a56f2527bd878f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAwNTI3MQ==", "bodyText": "Removed this if-statement and moved the explanation to array class skipping.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1607#discussion_r473005271", "createdAt": "2020-08-19T12:53:27Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -239,8 +239,14 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n     String targetClassName = symbol.getClassBinaryName();\n     String methodName = symbol.getName();\n \n-    // Skip references to Java runtime class. For example, java.lang.String.\n-    if (classDumper.isSystemClass(targetClassName)) {\n+    if (ClassDumper.isArrayClass(targetClassName)) {\n+      return Optional.empty();\n+    }\n+    // Skip references from Java runtime class. For example, java.lang.String.\n+    // It is possible for wrongly configured Java compiler to generate bad byte code that references", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk5MDAyMA=="}, "originalCommit": {"oid": "a8a1571176ed9b8b48d9d698c9a56f2527bd878f"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NjUwODk3OnYy", "diffSide": "RIGHT", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMjoyOToxOFrOHDFEiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMjo1Mjo1MlrOHDF7gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk5MDg1Nw==", "bodyText": "protobuf-java 3.12.4 references a Java 11 method that does not exist in Java 8", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1607#discussion_r472990857", "createdAt": "2020-08-19T12:29:18Z", "author": {"login": "elharo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerTest.java", "diffHunk": "@@ -1120,4 +1120,24 @@ public void testFindLinkageProblems_grpcAndGuava() throws IOException {\n                 \"has class binary name\"))\n         .contains(\"io.grpc.internal.DnsNameResolver\");\n   }\n+\n+  @Test\n+  public void testFindLinkageProblems_referenceToNonexistentMethodForJava8() throws IOException {\n+    // Protobuf-java 3.12.4 contained wrong byte code to reference non-existent method in JRE 1.8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8a1571176ed9b8b48d9d698c9a56f2527bd878f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAwNDkyOA==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1607#discussion_r473004928", "createdAt": "2020-08-19T12:52:52Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerTest.java", "diffHunk": "@@ -1120,4 +1120,24 @@ public void testFindLinkageProblems_grpcAndGuava() throws IOException {\n                 \"has class binary name\"))\n         .contains(\"io.grpc.internal.DnsNameResolver\");\n   }\n+\n+  @Test\n+  public void testFindLinkageProblems_referenceToNonexistentMethodForJava8() throws IOException {\n+    // Protobuf-java 3.12.4 contained wrong byte code to reference non-existent method in JRE 1.8", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk5MDg1Nw=="}, "originalCommit": {"oid": "a8a1571176ed9b8b48d9d698c9a56f2527bd878f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODAyMDgwOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODoyMjo1OVrOHDT7sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODozNDowNVrOHDUS4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzNDM1NQ==", "bodyText": "will we catch a reference to an array of a missing class?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1607#discussion_r473234355", "createdAt": "2020-08-19T18:22:59Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -126,8 +126,7 @@ JavaClass loadJavaClass(String className) throws ClassNotFoundException {\n   /** Returns true if {@code className} is available in the system class loader. */\n   boolean isSystemClass(String className) {\n     try {\n-      if (className.startsWith(\"[\")) {\n-        // Array class\n+      if (isArrayClass(className)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a36b4521d179b1dd9e2f54e4c2eca1749b59c826"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0MDI4OQ==", "bodyText": "Yes, but not from array class reference. When there's a reference to array of a class, there should be a reference to the class in the same class file.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1607#discussion_r473240289", "createdAt": "2020-08-19T18:34:05Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -126,8 +126,7 @@ JavaClass loadJavaClass(String className) throws ClassNotFoundException {\n   /** Returns true if {@code className} is available in the system class loader. */\n   boolean isSystemClass(String className) {\n     try {\n-      if (className.startsWith(\"[\")) {\n-        // Array class\n+      if (isArrayClass(className)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzNDM1NQ=="}, "originalCommit": {"oid": "a36b4521d179b1dd9e2f54e4c2eca1749b59c826"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODAyNDE4OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODoyMzo1OFrOHDT9xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODozNDo0NFrOHDUUNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzNDg4NQ==", "bodyText": "delete this comment. It describes what the code is not doing.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1607#discussion_r473234885", "createdAt": "2020-08-19T18:23:58Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -239,8 +239,11 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n     String targetClassName = symbol.getClassBinaryName();\n     String methodName = symbol.getName();\n \n-    // Skip references to Java runtime class. For example, java.lang.String.\n-    if (classDumper.isSystemClass(targetClassName)) {\n+    if (ClassDumper.isArrayClass(targetClassName)) {\n+      // Skip references to array class. However, we want to check other JDK-provided classes,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a36b4521d179b1dd9e2f54e4c2eca1749b59c826"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzI0MDYyOA==", "bodyText": "Removed.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1607#discussion_r473240628", "createdAt": "2020-08-19T18:34:44Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -239,8 +239,11 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n     String targetClassName = symbol.getClassBinaryName();\n     String methodName = symbol.getName();\n \n-    // Skip references to Java runtime class. For example, java.lang.String.\n-    if (classDumper.isSystemClass(targetClassName)) {\n+    if (ClassDumper.isArrayClass(targetClassName)) {\n+      // Skip references to array class. However, we want to check other JDK-provided classes,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzNDg4NQ=="}, "originalCommit": {"oid": "a36b4521d179b1dd9e2f54e4c2eca1749b59c826"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2511, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}