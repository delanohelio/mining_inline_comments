{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1OTExNDA0", "number": 1140, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNToyNjoyNVrODZ3z7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODoyODo1NVrODako5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDU1NDA3OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/SymbolProblem.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNToyNjoyNVrOFggPMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODozMDowM1rOFhmgDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyNjkyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * Returns the class that references the symbol. If the symbol is a method or a field,\n          \n          \n            \n               * Returns the class that contains the symbol. If the symbol is a method or a field,", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1140#discussion_r369626928", "createdAt": "2020-01-22T15:26:25Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/SymbolProblem.java", "diffHunk": "@@ -57,12 +56,10 @@ Symbol getSymbol() {\n   }\n \n   /**\n-   * Returns the referenced class that contains the symbol. Null when the target class is not found\n-   * in the class path (this is the case if the errorType is {@code CLASS_NOT_FOUND} for top-level\n-   * classes).\n-   *\n-   * <p>In case of a nested class is missing while its outer class is found in the class path, this\n-   * method returns the outer class.\n+   * Returns the class that references the symbol. If the symbol is a method or a field,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad5a5e583e2eaa73987e00f41ee7a0f710c5adfd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY4NzAxMw==", "bodyText": "Not 100% sure, but I think \"references\" is clearer. \"contains\" sounds more to me like the class where the symbol is defined.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1140#discussion_r369687013", "createdAt": "2020-01-22T17:05:11Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/SymbolProblem.java", "diffHunk": "@@ -57,12 +56,10 @@ Symbol getSymbol() {\n   }\n \n   /**\n-   * Returns the referenced class that contains the symbol. Null when the target class is not found\n-   * in the class path (this is the case if the errorType is {@code CLASS_NOT_FOUND} for top-level\n-   * classes).\n-   *\n-   * <p>In case of a nested class is missing while its outer class is found in the class path, this\n-   * method returns the outer class.\n+   * Returns the class that references the symbol. If the symbol is a method or a field,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyNjkyOA=="}, "originalCommit": {"oid": "ad5a5e583e2eaa73987e00f41ee7a0f710c5adfd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTcwMzk4MA==", "bodyText": "This return value is the class file where the incompatible symbol is defined.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1140#discussion_r369703980", "createdAt": "2020-01-22T17:38:05Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/SymbolProblem.java", "diffHunk": "@@ -57,12 +56,10 @@ Symbol getSymbol() {\n   }\n \n   /**\n-   * Returns the referenced class that contains the symbol. Null when the target class is not found\n-   * in the class path (this is the case if the errorType is {@code CLASS_NOT_FOUND} for top-level\n-   * classes).\n-   *\n-   * <p>In case of a nested class is missing while its outer class is found in the class path, this\n-   * method returns the outer class.\n+   * Returns the class that references the symbol. If the symbol is a method or a field,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyNjkyOA=="}, "originalCommit": {"oid": "ad5a5e583e2eaa73987e00f41ee7a0f710c5adfd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3NTczOQ==", "bodyText": "is expected to contain\n(since it doesn't contain the symbol, and that's the problem)", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1140#discussion_r370775739", "createdAt": "2020-01-24T18:24:30Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/SymbolProblem.java", "diffHunk": "@@ -57,12 +56,10 @@ Symbol getSymbol() {\n   }\n \n   /**\n-   * Returns the referenced class that contains the symbol. Null when the target class is not found\n-   * in the class path (this is the case if the errorType is {@code CLASS_NOT_FOUND} for top-level\n-   * classes).\n-   *\n-   * <p>In case of a nested class is missing while its outer class is found in the class path, this\n-   * method returns the outer class.\n+   * Returns the class that references the symbol. If the symbol is a method or a field,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyNjkyOA=="}, "originalCommit": {"oid": "ad5a5e583e2eaa73987e00f41ee7a0f710c5adfd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3ODEyNQ==", "bodyText": "Nice.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1140#discussion_r370778125", "createdAt": "2020-01-24T18:30:03Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/SymbolProblem.java", "diffHunk": "@@ -57,12 +56,10 @@ Symbol getSymbol() {\n   }\n \n   /**\n-   * Returns the referenced class that contains the symbol. Null when the target class is not found\n-   * in the class path (this is the case if the errorType is {@code CLASS_NOT_FOUND} for top-level\n-   * classes).\n-   *\n-   * <p>In case of a nested class is missing while its outer class is found in the class path, this\n-   * method returns the outer class.\n+   * Returns the class that references the symbol. If the symbol is a method or a field,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyNjkyOA=="}, "originalCommit": {"oid": "ad5a5e583e2eaa73987e00f41ee7a0f710c5adfd"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NDU2NTYyOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/SymbolProblem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNToyOToxOVrOFggWbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMlQxNzowMTo1MVrOFgjyZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyODc4Mg==", "bodyText": "This link is outdated. Would you update to https://jlbp.dev/glossary.html#linkage-error?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1140#discussion_r369628782", "createdAt": "2020-01-22T15:29:19Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/SymbolProblem.java", "diffHunk": "@@ -23,8 +23,7 @@\n import javax.annotation.Nullable;\n \n /**\n- * A missing or incompatible symbol. This constitutes the cause of a linkage error (without the\n- * source class).\n+ * A missing or incompatible symbol that causes a linkage error.\n  *\n  * @see <a\n  *     href=\"https://github.com/GoogleCloudPlatform/cloud-opensource-java/blob/master/library-best-practices/glossary.md#linkage-error\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad5a5e583e2eaa73987e00f41ee7a0f710c5adfd"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTY4NTA5NA==", "bodyText": "done", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1140#discussion_r369685094", "createdAt": "2020-01-22T17:01:51Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/SymbolProblem.java", "diffHunk": "@@ -23,8 +23,7 @@\n import javax.annotation.Nullable;\n \n /**\n- * A missing or incompatible symbol. This constitutes the cause of a linkage error (without the\n- * source class).\n+ * A missing or incompatible symbol that causes a linkage error.\n  *\n  * @see <a\n  *     href=\"https://github.com/GoogleCloudPlatform/cloud-opensource-java/blob/master/library-best-practices/glossary.md#linkage-error\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTYyODc4Mg=="}, "originalCommit": {"oid": "ad5a5e583e2eaa73987e00f41ee7a0f710c5adfd"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MTg5ODYwOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/SymbolProblem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODoyODo1NVrOFhmeOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxODozNDo1MVrOFhmoFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3NzY1OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * @see <a href=\"https://jlbp.dev/glossary.html#linkage-error?\">\n          \n          \n            \n             * @see <a href=\"https://jlbp.dev/glossary.html#linkage-error\">", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1140#discussion_r370777659", "createdAt": "2020-01-24T18:28:55Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/SymbolProblem.java", "diffHunk": "@@ -16,18 +16,16 @@\n \n package com.google.cloud.tools.opensource.classpath;\n \n-import static com.google.common.base.Preconditions.checkNotNull;\n-\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableSetMultimap;\n import java.util.Objects;\n import javax.annotation.Nullable;\n \n /**\n- * A missing or incompatible symbol. This constitutes the cause of a linkage error (without the\n- * source class).\n+ * A missing or incompatible symbol that causes a linkage error.\n  *\n- * @see <a\n- *     href=\"https://github.com/GoogleCloudPlatform/cloud-opensource-java/blob/master/library-best-practices/glossary.md#linkage-error\">\n+ * @see <a href=\"https://jlbp.dev/glossary.html#linkage-error?\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26f938b07b560017d00fab5c846c2a1a5def65e3"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc4MDE4Mg==", "bodyText": "done", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1140#discussion_r370780182", "createdAt": "2020-01-24T18:34:51Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/SymbolProblem.java", "diffHunk": "@@ -16,18 +16,16 @@\n \n package com.google.cloud.tools.opensource.classpath;\n \n-import static com.google.common.base.Preconditions.checkNotNull;\n-\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableSetMultimap;\n import java.util.Objects;\n import javax.annotation.Nullable;\n \n /**\n- * A missing or incompatible symbol. This constitutes the cause of a linkage error (without the\n- * source class).\n+ * A missing or incompatible symbol that causes a linkage error.\n  *\n- * @see <a\n- *     href=\"https://github.com/GoogleCloudPlatform/cloud-opensource-java/blob/master/library-best-practices/glossary.md#linkage-error\">\n+ * @see <a href=\"https://jlbp.dev/glossary.html#linkage-error?\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc3NzY1OQ=="}, "originalCommit": {"oid": "26f938b07b560017d00fab5c846c2a1a5def65e3"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2879, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}