{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0NDgxNDQ2", "number": 1210, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDozNToxN1rODfUu5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMzoyMTo1NFrODfisQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTcyMTM1OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDozNToxN1rOFo9rHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMzoxNDo1OVrOFpTQig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5NzgyMQ==", "bodyText": "Renamed getStaticLinkageCheckDependencyGraph to build ... to follow the previous refactoring.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378497821", "createdAt": "2020-02-12T20:35:17Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java", "diffHunk": "@@ -68,15 +69,20 @@ public ClassPathResult resolve(List<Artifact> artifacts) throws RepositoryExcept\n     }\n     // dependencyGraph holds multiple versions for one artifact key (groupId:artifactId)\n     DependencyGraphResult result =\n-        dependencyGraphBuilder.getStaticLinkageCheckDependencyGraph(artifacts);\n+        dependencyGraphBuilder.buildLinkageCheckDependencyGraph(artifacts);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37ca27b2ccdb551328a9279ee53fe0f777f615a5"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1MTQ2Ng==", "bodyText": "Good idea, though it's a little easier if this sort of change can happen in its own PR that takes less time to review and approve", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378851466", "createdAt": "2020-02-13T13:14:59Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java", "diffHunk": "@@ -68,15 +69,20 @@ public ClassPathResult resolve(List<Artifact> artifacts) throws RepositoryExcept\n     }\n     // dependencyGraph holds multiple versions for one artifact key (groupId:artifactId)\n     DependencyGraphResult result =\n-        dependencyGraphBuilder.getStaticLinkageCheckDependencyGraph(artifacts);\n+        dependencyGraphBuilder.buildLinkageCheckDependencyGraph(artifacts);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5NzgyMQ=="}, "originalCommit": {"oid": "37ca27b2ccdb551328a9279ee53fe0f777f615a5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTcyNTQzOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDozNjo0MFrOFo9tvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDozOToyMFrOFo9yXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5ODQ5Mw==", "bodyText": "Equality function is added to dedup at https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210/files#diff-659d7bf4148f942fcc1eb60a50a2ee80R261", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378498493", "createdAt": "2020-02-12T20:36:40Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java", "diffHunk": "@@ -78,4 +81,44 @@ public static String formatProblems(Iterable<ArtifactProblem> problems) {\n     }\n     return output.toString();\n   }\n+\n+  @Override\n+  public boolean equals(Object other) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37ca27b2ccdb551328a9279ee53fe0f777f615a5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5OTY3Ng==", "bodyText": "Equality test is added in ArtifactProblemTest.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378499676", "createdAt": "2020-02-12T20:39:20Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java", "diffHunk": "@@ -78,4 +81,44 @@ public static String formatProblems(Iterable<ArtifactProblem> problems) {\n     }\n     return output.toString();\n   }\n+\n+  @Override\n+  public boolean equals(Object other) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5ODQ5Mw=="}, "originalCommit": {"oid": "37ca27b2ccdb551328a9279ee53fe0f777f615a5"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTczMDUyOnYy", "diffSide": "LEFT", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDozODozNVrOFo9xAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDozODozNVrOFo9xAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ5OTMyOQ==", "bodyText": "With this PR, missing artifact is recorded as getArtifactProblem(), not as an exception.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378499329", "createdAt": "2020-02-12T20:38:35Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilderTest.java", "diffHunk": "@@ -131,15 +130,15 @@ public void testResolveClassPath_optionalDependency() throws RepositoryException\n   }\n \n   @Test\n-  public void testResolveClassPath_invalidCoordinate() {\n+  public void testResolveClassPath_invalidCoordinate() throws RepositoryException {\n     Artifact nonExistentArtifact = new DefaultArtifact(\"io.grpc:nosuchartifact:1.2.3\");\n-    try {\n-      classPathBuilder.resolve(ImmutableList.of(nonExistentArtifact));\n-      Assert.fail(\"Invalid Maven coodinate should raise RepositoryException\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37ca27b2ccdb551328a9279ee53fe0f777f615a5"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTc0MDI3OnYy", "diffSide": "LEFT", "path": "enforcer-rules/src/main/java/com/google/cloud/tools/dependencies/enforcer/LinkageCheckerRule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo0MTo1N1rOFo928Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo0MTo1N1rOFo928Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwMDg0OQ==", "bodyText": "This function has moved to DependencyGraphBuilder.\nhttps://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210/files#diff-659d7bf4148f942fcc1eb60a50a2ee80R283", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378500849", "createdAt": "2020-02-12T20:41:57Z", "author": {"login": "suztomo"}, "path": "enforcer-rules/src/main/java/com/google/cloud/tools/dependencies/enforcer/LinkageCheckerRule.java", "diffHunk": "@@ -352,14 +339,4 @@ public void execute(@Nonnull EnforcerRuleHelper helper) throws EnforcerRuleExcep\n       throw new EnforcerRuleException(\"Failed to collect dependency \" + ex.getMessage(), ex);\n     }\n   }\n-\n-  private static ImmutableList<List<DependencyNode>> findArtifactPaths(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37ca27b2ccdb551328a9279ee53fe0f777f615a5"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTc0NTM3OnYy", "diffSide": "RIGHT", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo0Mzo0OFrOFo96IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo0Mzo0OFrOFo96IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwMTY2NA==", "bodyText": "This is the motivation of this PR. Before this PR, the function threw DependencyResolutionException. Such errors should be reported as result.getArtifactProblems().", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378501664", "createdAt": "2020-02-12T20:43:48Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilderTest.java", "diffHunk": "@@ -234,14 +233,34 @@ public void testConfigureAdditionalMavenRepositories_notToUseMavenCentral()\n     // This artifact does not exist in Android's repository\n     Artifact artifact = new DefaultArtifact(\"com.google.guava:guava:28.2-jre\");\n \n-    try {\n-      graphBuilder.buildCompleteGraph(new Dependency(artifact, \"compile\"));\n-      fail(\"The dependency resolution should fail if Maven Central is not used\");\n-    } catch (DependencyResolutionException ex) {\n-      Truth.assertThat(ex.getMessage())\n-          .startsWith(\n-              \"Could not find artifact com.google.guava:guava:jar:28.2-jre in \"\n-                  + \" (https://dl.google.com/dl/android/maven2)\");\n-    }\n+    DependencyGraphResult result =\n+        graphBuilder.buildCompleteGraph(new Dependency(artifact, \"compile\"));\n+    Truth.assertThat(result.getArtifactProblems())\n+        .comparingElementsUsing(problemOnArtifact)\n+        .contains(\"com.google.guava:guava:28.2-jre\");\n+  }\n+\n+  @Test\n+  public void testBuildLinkageCheckDependencyGraph_catchRootException() throws RepositoryException {\n+    // This should not throw exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37ca27b2ccdb551328a9279ee53fe0f777f615a5"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTc1NTA3OnYy", "diffSide": "LEFT", "path": "dashboard/src/main/java/com/google/cloud/tools/opensource/dashboard/DashboardMain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo0Njo1N1rOFo-AMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo0Njo1N1rOFo-AMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwMzIxNg==", "bodyText": "This exception is not thrown any more.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378503216", "createdAt": "2020-02-12T20:46:57Z", "author": {"login": "suztomo"}, "path": "dashboard/src/main/java/com/google/cloud/tools/opensource/dashboard/DashboardMain.java", "diffHunk": "@@ -339,23 +339,18 @@ private static ArtifactCache loadArtifactInfo(List<Artifact> artifacts) {\n     List<DependencyGraph> globalDependencies = new ArrayList<>();\n \n     for (Artifact artifact : artifacts) {\n-      try {\n-        DependencyGraphResult completeDependencyResult =\n-            dependencyGraphBuilder.buildCompleteGraph(new Dependency(artifact, \"compile\"));\n-        DependencyGraph completeDependencies = completeDependencyResult.getDependencyGraph();\n-        globalDependencies.add(completeDependencies);\n-\n-        // picks versions according to Maven rules\n-        DependencyGraphResult transitiveDependencyResult =\n-            dependencyGraphBuilder.buildGraph(new Dependency(artifact, \"compile\"));\n-        DependencyGraph transitiveDependencies = transitiveDependencyResult.getDependencyGraph();\n-\n-        ArtifactInfo info = new ArtifactInfo(completeDependencies, transitiveDependencies);\n-        infoMap.put(artifact, info);\n-      } catch (RepositoryException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef916fb1a8328675fcd5e34b90f6cd913bff48bb"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTc1NzU0OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo0Nzo0OFrOFo-B0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMDo0Nzo0OFrOFo-B0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUwMzYzMg==", "bodyText": "DependencyNode does not have equals/hashcode. So leveraging Dependency class's equality.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378503632", "createdAt": "2020-02-12T20:47:48Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java", "diffHunk": "@@ -78,4 +81,44 @@ public static String formatProblems(Iterable<ArtifactProblem> problems) {\n     }\n     return output.toString();\n   }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    }\n+    if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+\n+    ArtifactProblem otherProblem = (ArtifactProblem) other;\n+    return Objects.equals(artifact, otherProblem.artifact)\n+        && sameDependencyPath(dependencyPath, otherProblem.dependencyPath);\n+  }\n+\n+  private static boolean sameDependencyPath(\n+      ImmutableList<DependencyNode> listA, ImmutableList<DependencyNode> listB) {\n+    int size = listA.size();\n+    if (listB.size() != size) {\n+      return false;\n+    }\n+\n+    for (int i = 0; i < size; i++) {\n+      DependencyNode nodeA = listA.get(i);\n+      DependencyNode nodeB = listB.get(i);\n+      Dependency dependencyA = nodeA.getDependency();\n+      Dependency dependencyB = nodeB.getDependency();\n+      if (!Objects.equals(dependencyA, dependencyB)) {\n+        return false;\n+      }\n+    }\n+    return true;\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    ImmutableList<Dependency> dependencyList =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef916fb1a8328675fcd5e34b90f6cd913bff48bb"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjYzOTkwOnYy", "diffSide": "LEFT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoxMDo1NlrOFpGgEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTozNTo0OVrOFpkXjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0MjQ0OQ==", "bodyText": "Removing unnecessary override.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378642449", "createdAt": "2020-02-13T04:10:56Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -128,21 +131,9 @@ public DependencyGraphBuilder(Iterable<String> mavenRepositoryUrls) {\n     this.repositories = repositoryListBuilder.build();\n   }\n \n-  private DependencyNode resolveCompileTimeDependencies(DependencyNode root)\n-      throws DependencyCollectionException, DependencyResolutionException {\n-    return resolveCompileTimeDependencies(root, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f688f536391798bb9eb6f1cda763088baa66bd6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1NTg3Ng==", "bodyText": "What was being overridden? Or did you mean overload?\nAlso, is this removal dependent on this PR or could it be done separately?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378855876", "createdAt": "2020-02-13T13:23:47Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -128,21 +131,9 @@ public DependencyGraphBuilder(Iterable<String> mavenRepositoryUrls) {\n     this.repositories = repositoryListBuilder.build();\n   }\n \n-  private DependencyNode resolveCompileTimeDependencies(DependencyNode root)\n-      throws DependencyCollectionException, DependencyResolutionException {\n-    return resolveCompileTimeDependencies(root, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0MjQ0OQ=="}, "originalCommit": {"oid": "7f688f536391798bb9eb6f1cda763088baa66bd6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkxNDYyOQ==", "bodyText": "Overload, yes.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378914629", "createdAt": "2020-02-13T15:00:56Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -128,21 +131,9 @@ public DependencyGraphBuilder(Iterable<String> mavenRepositoryUrls) {\n     this.repositories = repositoryListBuilder.build();\n   }\n \n-  private DependencyNode resolveCompileTimeDependencies(DependencyNode root)\n-      throws DependencyCollectionException, DependencyResolutionException {\n-    return resolveCompileTimeDependencies(root, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0MjQ0OQ=="}, "originalCommit": {"oid": "7f688f536391798bb9eb6f1cda763088baa66bd6"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzMTc5MQ==", "bodyText": "Reverted irrelevant refactoring.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r379131791", "createdAt": "2020-02-13T21:35:49Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -128,21 +131,9 @@ public DependencyGraphBuilder(Iterable<String> mavenRepositoryUrls) {\n     this.repositories = repositoryListBuilder.build();\n   }\n \n-  private DependencyNode resolveCompileTimeDependencies(DependencyNode root)\n-      throws DependencyCollectionException, DependencyResolutionException {\n-    return resolveCompileTimeDependencies(root, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0MjQ0OQ=="}, "originalCommit": {"oid": "7f688f536391798bb9eb6f1cda763088baa66bd6"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjY1MDc1OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathResult.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoyMDowNFrOFpGmaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoyMDowNFrOFpGmaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NDA3Mw==", "bodyText": "This function is now used by LinkageCheckerRule", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378644073", "createdAt": "2020-02-13T04:20:04Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathResult.java", "diffHunk": "@@ -67,7 +67,7 @@ public ClassPathResult(\n   }\n \n   /** Returns problems encountered while constructing the dependency graph. */\n-  ImmutableList<UnresolvableArtifactProblem> getArtifactProblems() {\n+  public ImmutableList<UnresolvableArtifactProblem> getArtifactProblems() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f688f536391798bb9eb6f1cda763088baa66bd6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjY1MjE2OnYy", "diffSide": "LEFT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArguments.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoyMToxMVrOFpGnQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoyMToxMVrOFpGnQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NDI4OA==", "bodyText": "This method \"resolve\" does not throw RepositoryException any more.\nHandling the unresolved artifact error by checking result.getArtifactProblems().", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378644288", "createdAt": "2020-02-13T04:21:11Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArguments.java", "diffHunk": "@@ -200,7 +202,13 @@ private static Options configureOptions() {\n \n     if (commandLine.hasOption(\"b\") || commandLine.hasOption(\"a\")) {\n       List<Artifact> artifacts = getArtifacts();\n-      cachedInputClasspath = classPathBuilder.resolve(artifacts).getClassPath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f688f536391798bb9eb6f1cda763088baa66bd6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjY1NTUyOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoyNDozOVrOFpGpVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoyNDozOVrOFpGpVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NDgyMQ==", "bodyText": "renamed this method to follow other method \"build...\"", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378644821", "createdAt": "2020-02-13T04:24:39Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -216,38 +208,90 @@ private DependencyNode resolveCompileTimeDependencies(\n    *\n    * @param artifacts Maven artifacts to retrieve their dependencies\n    * @return dependency graph representing the tree of Maven artifacts\n-   * @throws RepositoryException when there is a problem resolving or collecting dependencies\n    */\n-  public DependencyGraphResult getStaticLinkageCheckDependencyGraph(List<Artifact> artifacts)\n-      throws RepositoryException {\n+  public DependencyGraphResult buildLinkageCheckDependencyGraph(List<Artifact> artifacts) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f688f536391798bb9eb6f1cda763088baa66bd6"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjY1NjIyOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoyNToxMVrOFpGpuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoyNToxMVrOFpGpuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NDkyMA==", "bodyText": "Set to remove duplicates.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378644920", "createdAt": "2020-02-13T04:25:11Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -216,38 +208,90 @@ private DependencyNode resolveCompileTimeDependencies(\n    *\n    * @param artifacts Maven artifacts to retrieve their dependencies\n    * @return dependency graph representing the tree of Maven artifacts\n-   * @throws RepositoryException when there is a problem resolving or collecting dependencies\n    */\n-  public DependencyGraphResult getStaticLinkageCheckDependencyGraph(List<Artifact> artifacts)\n-      throws RepositoryException {\n+  public DependencyGraphResult buildLinkageCheckDependencyGraph(List<Artifact> artifacts) {\n     ImmutableList<DependencyNode> dependencyNodes =\n         artifacts.stream().map(DefaultDependencyNode::new).collect(toImmutableList());\n-    DependencyNode node = resolveCompileTimeDependencies(dependencyNodes, true);\n-    return levelOrder(node, GraphTraversalOption.FULL_DEPENDENCY_WITH_PROVIDED);\n+    return buildDependencyGraph(\n+        dependencyNodes, GraphTraversalOption.FULL_DEPENDENCY_WITH_PROVIDED);\n   }\n \n   /**\n    * Finds the full compile time, transitive dependency graph including duplicates and conflicting\n    * versions.\n    */\n-  public DependencyGraphResult buildCompleteGraph(Dependency dependency)\n-      throws RepositoryException {\n-\n+  public DependencyGraphResult buildCompleteGraph(Dependency dependency) {\n     DefaultDependencyNode root = new DefaultDependencyNode(dependency);\n-    DependencyNode node = resolveCompileTimeDependencies(root);\n-    return levelOrder(node, GraphTraversalOption.FULL_DEPENDENCY);\n+    return buildDependencyGraph(ImmutableList.of(root), GraphTraversalOption.FULL_DEPENDENCY);\n   }\n \n   /**\n    * Finds the complete transitive dependency graph as seen by Maven. It does not include duplicates\n    * and conflicting versions. That is, this resolves conflicting versions by picking the first\n    * version seen. This is how Maven normally operates.\n    */\n-  public DependencyGraphResult buildGraph(Dependency dependency)\n-      throws RepositoryException {\n-    // root node\n-    DependencyNode node = resolveCompileTimeDependencies(new DefaultDependencyNode(dependency));\n-    return levelOrder(node);\n+  public DependencyGraphResult buildGraph(Dependency dependency) {\n+    return buildDependencyGraph(\n+        ImmutableList.of(new DefaultDependencyNode(dependency)), GraphTraversalOption.NONE);\n+  }\n+\n+  private DependencyGraphResult buildDependencyGraph(\n+      List<DependencyNode> dependencyNodes, GraphTraversalOption traversalOption) {\n+    boolean includeProvidedScope =\n+        traversalOption == GraphTraversalOption.FULL_DEPENDENCY_WITH_PROVIDED;\n+    DependencyNode node;\n+    ImmutableSet.Builder<UnresolvableArtifactProblem> artifactProblems = ImmutableSet.builder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f688f536391798bb9eb6f1cda763088baa66bd6"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjY1ODA4OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoyNjoxNVrOFpGqqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTozOTozOVrOFpkeKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NTE2Mw==", "bodyText": "artifact is null at a root dummy node.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378645163", "createdAt": "2020-02-13T04:26:15Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -216,38 +208,90 @@ private DependencyNode resolveCompileTimeDependencies(\n    *\n    * @param artifacts Maven artifacts to retrieve their dependencies\n    * @return dependency graph representing the tree of Maven artifacts\n-   * @throws RepositoryException when there is a problem resolving or collecting dependencies\n    */\n-  public DependencyGraphResult getStaticLinkageCheckDependencyGraph(List<Artifact> artifacts)\n-      throws RepositoryException {\n+  public DependencyGraphResult buildLinkageCheckDependencyGraph(List<Artifact> artifacts) {\n     ImmutableList<DependencyNode> dependencyNodes =\n         artifacts.stream().map(DefaultDependencyNode::new).collect(toImmutableList());\n-    DependencyNode node = resolveCompileTimeDependencies(dependencyNodes, true);\n-    return levelOrder(node, GraphTraversalOption.FULL_DEPENDENCY_WITH_PROVIDED);\n+    return buildDependencyGraph(\n+        dependencyNodes, GraphTraversalOption.FULL_DEPENDENCY_WITH_PROVIDED);\n   }\n \n   /**\n    * Finds the full compile time, transitive dependency graph including duplicates and conflicting\n    * versions.\n    */\n-  public DependencyGraphResult buildCompleteGraph(Dependency dependency)\n-      throws RepositoryException {\n-\n+  public DependencyGraphResult buildCompleteGraph(Dependency dependency) {\n     DefaultDependencyNode root = new DefaultDependencyNode(dependency);\n-    DependencyNode node = resolveCompileTimeDependencies(root);\n-    return levelOrder(node, GraphTraversalOption.FULL_DEPENDENCY);\n+    return buildDependencyGraph(ImmutableList.of(root), GraphTraversalOption.FULL_DEPENDENCY);\n   }\n \n   /**\n    * Finds the complete transitive dependency graph as seen by Maven. It does not include duplicates\n    * and conflicting versions. That is, this resolves conflicting versions by picking the first\n    * version seen. This is how Maven normally operates.\n    */\n-  public DependencyGraphResult buildGraph(Dependency dependency)\n-      throws RepositoryException {\n-    // root node\n-    DependencyNode node = resolveCompileTimeDependencies(new DefaultDependencyNode(dependency));\n-    return levelOrder(node);\n+  public DependencyGraphResult buildGraph(Dependency dependency) {\n+    return buildDependencyGraph(\n+        ImmutableList.of(new DefaultDependencyNode(dependency)), GraphTraversalOption.NONE);\n+  }\n+\n+  private DependencyGraphResult buildDependencyGraph(\n+      List<DependencyNode> dependencyNodes, GraphTraversalOption traversalOption) {\n+    boolean includeProvidedScope =\n+        traversalOption == GraphTraversalOption.FULL_DEPENDENCY_WITH_PROVIDED;\n+    DependencyNode node;\n+    ImmutableSet.Builder<UnresolvableArtifactProblem> artifactProblems = ImmutableSet.builder();\n+\n+    try {\n+      node = resolveDependencyGraph(dependencyNodes, includeProvidedScope);\n+    } catch (DependencyResolutionException ex) {\n+      DependencyResult result = ex.getResult();\n+      node = result.getRoot();\n+      for (ArtifactResult artifactResult : result.getArtifactResults()) {\n+        Artifact resolvedArtifact = artifactResult.getArtifact();\n+        if (resolvedArtifact != null) {\n+          continue;\n+        }\n+        Artifact requestedArtifact = artifactResult.getRequest().getArtifact();\n+        artifactProblems.add(createUnresolvableArtifactProblem(node, requestedArtifact));\n+      }\n+    }\n+\n+    DependencyGraphResult result = levelOrder(node, traversalOption);\n+    // Duplicate problems found in resolveDependencyGraph and levelOrder are removed by ImmutableSet\n+    artifactProblems.addAll(result.getArtifactProblems());\n+\n+    return new DependencyGraphResult(result.getDependencyGraph(), artifactProblems.build());\n+  }\n+\n+  /**\n+   * Returns a problem describing that {@code artifact} is unresolvable in the {@code\n+   * dependencyGraph}.\n+   */\n+  public static UnresolvableArtifactProblem createUnresolvableArtifactProblem(\n+      DependencyNode dependencyGraph, Artifact artifact) {\n+    ImmutableList<List<DependencyNode>> paths = findArtifactPaths(dependencyGraph, artifact);\n+    if (paths.isEmpty()) {\n+      // On certain conditions, Maven throws ArtifactDescriptorException even when the\n+      // (transformed) dependency dependencyGraph does not contain the problematic artifact any\n+      // more.\n+      // https://issues.apache.org/jira/browse/MNG-6732\n+      return new UnresolvableArtifactProblem(artifact);\n+    } else {\n+      return new UnresolvableArtifactProblem(paths.get(0));\n+    }\n+  }\n+\n+  private static ImmutableList<List<DependencyNode>> findArtifactPaths(\n+      DependencyNode root, Artifact artifact) {\n+    String coordinates = Artifacts.toCoordinates(artifact);\n+    DependencyFilter filter =\n+        (node, parents) ->\n+            node.getArtifact() != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f688f536391798bb9eb6f1cda763088baa66bd6"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1NjczMg==", "bodyText": "This would be more useful as a code comment than a review comment.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378856732", "createdAt": "2020-02-13T13:25:25Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -216,38 +208,90 @@ private DependencyNode resolveCompileTimeDependencies(\n    *\n    * @param artifacts Maven artifacts to retrieve their dependencies\n    * @return dependency graph representing the tree of Maven artifacts\n-   * @throws RepositoryException when there is a problem resolving or collecting dependencies\n    */\n-  public DependencyGraphResult getStaticLinkageCheckDependencyGraph(List<Artifact> artifacts)\n-      throws RepositoryException {\n+  public DependencyGraphResult buildLinkageCheckDependencyGraph(List<Artifact> artifacts) {\n     ImmutableList<DependencyNode> dependencyNodes =\n         artifacts.stream().map(DefaultDependencyNode::new).collect(toImmutableList());\n-    DependencyNode node = resolveCompileTimeDependencies(dependencyNodes, true);\n-    return levelOrder(node, GraphTraversalOption.FULL_DEPENDENCY_WITH_PROVIDED);\n+    return buildDependencyGraph(\n+        dependencyNodes, GraphTraversalOption.FULL_DEPENDENCY_WITH_PROVIDED);\n   }\n \n   /**\n    * Finds the full compile time, transitive dependency graph including duplicates and conflicting\n    * versions.\n    */\n-  public DependencyGraphResult buildCompleteGraph(Dependency dependency)\n-      throws RepositoryException {\n-\n+  public DependencyGraphResult buildCompleteGraph(Dependency dependency) {\n     DefaultDependencyNode root = new DefaultDependencyNode(dependency);\n-    DependencyNode node = resolveCompileTimeDependencies(root);\n-    return levelOrder(node, GraphTraversalOption.FULL_DEPENDENCY);\n+    return buildDependencyGraph(ImmutableList.of(root), GraphTraversalOption.FULL_DEPENDENCY);\n   }\n \n   /**\n    * Finds the complete transitive dependency graph as seen by Maven. It does not include duplicates\n    * and conflicting versions. That is, this resolves conflicting versions by picking the first\n    * version seen. This is how Maven normally operates.\n    */\n-  public DependencyGraphResult buildGraph(Dependency dependency)\n-      throws RepositoryException {\n-    // root node\n-    DependencyNode node = resolveCompileTimeDependencies(new DefaultDependencyNode(dependency));\n-    return levelOrder(node);\n+  public DependencyGraphResult buildGraph(Dependency dependency) {\n+    return buildDependencyGraph(\n+        ImmutableList.of(new DefaultDependencyNode(dependency)), GraphTraversalOption.NONE);\n+  }\n+\n+  private DependencyGraphResult buildDependencyGraph(\n+      List<DependencyNode> dependencyNodes, GraphTraversalOption traversalOption) {\n+    boolean includeProvidedScope =\n+        traversalOption == GraphTraversalOption.FULL_DEPENDENCY_WITH_PROVIDED;\n+    DependencyNode node;\n+    ImmutableSet.Builder<UnresolvableArtifactProblem> artifactProblems = ImmutableSet.builder();\n+\n+    try {\n+      node = resolveDependencyGraph(dependencyNodes, includeProvidedScope);\n+    } catch (DependencyResolutionException ex) {\n+      DependencyResult result = ex.getResult();\n+      node = result.getRoot();\n+      for (ArtifactResult artifactResult : result.getArtifactResults()) {\n+        Artifact resolvedArtifact = artifactResult.getArtifact();\n+        if (resolvedArtifact != null) {\n+          continue;\n+        }\n+        Artifact requestedArtifact = artifactResult.getRequest().getArtifact();\n+        artifactProblems.add(createUnresolvableArtifactProblem(node, requestedArtifact));\n+      }\n+    }\n+\n+    DependencyGraphResult result = levelOrder(node, traversalOption);\n+    // Duplicate problems found in resolveDependencyGraph and levelOrder are removed by ImmutableSet\n+    artifactProblems.addAll(result.getArtifactProblems());\n+\n+    return new DependencyGraphResult(result.getDependencyGraph(), artifactProblems.build());\n+  }\n+\n+  /**\n+   * Returns a problem describing that {@code artifact} is unresolvable in the {@code\n+   * dependencyGraph}.\n+   */\n+  public static UnresolvableArtifactProblem createUnresolvableArtifactProblem(\n+      DependencyNode dependencyGraph, Artifact artifact) {\n+    ImmutableList<List<DependencyNode>> paths = findArtifactPaths(dependencyGraph, artifact);\n+    if (paths.isEmpty()) {\n+      // On certain conditions, Maven throws ArtifactDescriptorException even when the\n+      // (transformed) dependency dependencyGraph does not contain the problematic artifact any\n+      // more.\n+      // https://issues.apache.org/jira/browse/MNG-6732\n+      return new UnresolvableArtifactProblem(artifact);\n+    } else {\n+      return new UnresolvableArtifactProblem(paths.get(0));\n+    }\n+  }\n+\n+  private static ImmutableList<List<DependencyNode>> findArtifactPaths(\n+      DependencyNode root, Artifact artifact) {\n+    String coordinates = Artifacts.toCoordinates(artifact);\n+    DependencyFilter filter =\n+        (node, parents) ->\n+            node.getArtifact() != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NTE2Mw=="}, "originalCommit": {"oid": "7f688f536391798bb9eb6f1cda763088baa66bd6"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEzMzQ4MQ==", "bodyText": "Added source code comment.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r379133481", "createdAt": "2020-02-13T21:39:39Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -216,38 +208,90 @@ private DependencyNode resolveCompileTimeDependencies(\n    *\n    * @param artifacts Maven artifacts to retrieve their dependencies\n    * @return dependency graph representing the tree of Maven artifacts\n-   * @throws RepositoryException when there is a problem resolving or collecting dependencies\n    */\n-  public DependencyGraphResult getStaticLinkageCheckDependencyGraph(List<Artifact> artifacts)\n-      throws RepositoryException {\n+  public DependencyGraphResult buildLinkageCheckDependencyGraph(List<Artifact> artifacts) {\n     ImmutableList<DependencyNode> dependencyNodes =\n         artifacts.stream().map(DefaultDependencyNode::new).collect(toImmutableList());\n-    DependencyNode node = resolveCompileTimeDependencies(dependencyNodes, true);\n-    return levelOrder(node, GraphTraversalOption.FULL_DEPENDENCY_WITH_PROVIDED);\n+    return buildDependencyGraph(\n+        dependencyNodes, GraphTraversalOption.FULL_DEPENDENCY_WITH_PROVIDED);\n   }\n \n   /**\n    * Finds the full compile time, transitive dependency graph including duplicates and conflicting\n    * versions.\n    */\n-  public DependencyGraphResult buildCompleteGraph(Dependency dependency)\n-      throws RepositoryException {\n-\n+  public DependencyGraphResult buildCompleteGraph(Dependency dependency) {\n     DefaultDependencyNode root = new DefaultDependencyNode(dependency);\n-    DependencyNode node = resolveCompileTimeDependencies(root);\n-    return levelOrder(node, GraphTraversalOption.FULL_DEPENDENCY);\n+    return buildDependencyGraph(ImmutableList.of(root), GraphTraversalOption.FULL_DEPENDENCY);\n   }\n \n   /**\n    * Finds the complete transitive dependency graph as seen by Maven. It does not include duplicates\n    * and conflicting versions. That is, this resolves conflicting versions by picking the first\n    * version seen. This is how Maven normally operates.\n    */\n-  public DependencyGraphResult buildGraph(Dependency dependency)\n-      throws RepositoryException {\n-    // root node\n-    DependencyNode node = resolveCompileTimeDependencies(new DefaultDependencyNode(dependency));\n-    return levelOrder(node);\n+  public DependencyGraphResult buildGraph(Dependency dependency) {\n+    return buildDependencyGraph(\n+        ImmutableList.of(new DefaultDependencyNode(dependency)), GraphTraversalOption.NONE);\n+  }\n+\n+  private DependencyGraphResult buildDependencyGraph(\n+      List<DependencyNode> dependencyNodes, GraphTraversalOption traversalOption) {\n+    boolean includeProvidedScope =\n+        traversalOption == GraphTraversalOption.FULL_DEPENDENCY_WITH_PROVIDED;\n+    DependencyNode node;\n+    ImmutableSet.Builder<UnresolvableArtifactProblem> artifactProblems = ImmutableSet.builder();\n+\n+    try {\n+      node = resolveDependencyGraph(dependencyNodes, includeProvidedScope);\n+    } catch (DependencyResolutionException ex) {\n+      DependencyResult result = ex.getResult();\n+      node = result.getRoot();\n+      for (ArtifactResult artifactResult : result.getArtifactResults()) {\n+        Artifact resolvedArtifact = artifactResult.getArtifact();\n+        if (resolvedArtifact != null) {\n+          continue;\n+        }\n+        Artifact requestedArtifact = artifactResult.getRequest().getArtifact();\n+        artifactProblems.add(createUnresolvableArtifactProblem(node, requestedArtifact));\n+      }\n+    }\n+\n+    DependencyGraphResult result = levelOrder(node, traversalOption);\n+    // Duplicate problems found in resolveDependencyGraph and levelOrder are removed by ImmutableSet\n+    artifactProblems.addAll(result.getArtifactProblems());\n+\n+    return new DependencyGraphResult(result.getDependencyGraph(), artifactProblems.build());\n+  }\n+\n+  /**\n+   * Returns a problem describing that {@code artifact} is unresolvable in the {@code\n+   * dependencyGraph}.\n+   */\n+  public static UnresolvableArtifactProblem createUnresolvableArtifactProblem(\n+      DependencyNode dependencyGraph, Artifact artifact) {\n+    ImmutableList<List<DependencyNode>> paths = findArtifactPaths(dependencyGraph, artifact);\n+    if (paths.isEmpty()) {\n+      // On certain conditions, Maven throws ArtifactDescriptorException even when the\n+      // (transformed) dependency dependencyGraph does not contain the problematic artifact any\n+      // more.\n+      // https://issues.apache.org/jira/browse/MNG-6732\n+      return new UnresolvableArtifactProblem(artifact);\n+    } else {\n+      return new UnresolvableArtifactProblem(paths.get(0));\n+    }\n+  }\n+\n+  private static ImmutableList<List<DependencyNode>> findArtifactPaths(\n+      DependencyNode root, Artifact artifact) {\n+    String coordinates = Artifacts.toCoordinates(artifact);\n+    DependencyFilter filter =\n+        (node, parents) ->\n+            node.getArtifact() != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NTE2Mw=="}, "originalCommit": {"oid": "7f688f536391798bb9eb6f1cda763088baa66bd6"}, "originalPosition": 159}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjY1ODg2OnYy", "diffSide": "LEFT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoyNjo1M1rOFpGrLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDoyNjo1M1rOFpGrLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NTI5Mg==", "bodyText": "This exception is no longer thrown.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378645292", "createdAt": "2020-02-13T04:26:53Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -345,8 +386,6 @@ private DependencyGraphResult levelOrder(\n                 artifactProblems.add(new UnresolvableArtifactProblem(fullPath));\n               }\n             }\n-          } catch (DependencyCollectionException collectionException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f688f536391798bb9eb6f1cda763088baa66bd6"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjY2MzcyOnYy", "diffSide": "LEFT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDozMDo0NFrOFpGuKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDozMDo0NFrOFpGuKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NjA1Nw==", "bodyText": "testBuildLinkageCheckDependencyGraph_catchRootException revealed that sometimes there was duplicate element in dependency path. For example:\nxerces:xerces-impl:jar:2.6.2 was not resolved. Dependency path: ant:ant:jar:1.6.2 (compile) > xerces:xerces-impl:jar:2.6.2 (compile?) > xerces:xerces-impl:jar:2.6.2 (compile?)", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378646057", "createdAt": "2020-02-13T04:30:44Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -365,7 +404,14 @@ private DependencyGraphResult levelOrder(\n       Stack<DependencyNode> parentNodes, DependencyNode failedDependencyNode) {\n     List<DependencyNode> fullPath = new ArrayList<>();\n     fullPath.addAll(parentNodes);\n-    fullPath.add(failedDependencyNode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f688f536391798bb9eb6f1cda763088baa66bd6"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MjY2NjgxOnYy", "diffSide": "RIGHT", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilderTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDozMzoxNVrOFpGv9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwNDozMzoxNVrOFpGv9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODY0NjUxNg==", "bodyText": "xerces-impl and xml-apis are not available (in Maven Central).", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378646516", "createdAt": "2020-02-13T04:33:15Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilderTest.java", "diffHunk": "@@ -234,14 +233,34 @@ public void testConfigureAdditionalMavenRepositories_notToUseMavenCentral()\n     // This artifact does not exist in Android's repository\n     Artifact artifact = new DefaultArtifact(\"com.google.guava:guava:28.2-jre\");\n \n-    try {\n-      graphBuilder.buildCompleteGraph(new Dependency(artifact, \"compile\"));\n-      fail(\"The dependency resolution should fail if Maven Central is not used\");\n-    } catch (DependencyResolutionException ex) {\n-      Truth.assertThat(ex.getMessage())\n-          .startsWith(\n-              \"Could not find artifact com.google.guava:guava:jar:28.2-jre in \"\n-                  + \" (https://dl.google.com/dl/android/maven2)\");\n-    }\n+    DependencyGraphResult result =\n+        graphBuilder.buildCompleteGraph(new Dependency(artifact, \"compile\"));\n+    Truth.assertThat(result.getArtifactProblems())\n+        .comparingElementsUsing(problemOnArtifact)\n+        .contains(\"com.google.guava:guava:28.2-jre\");\n+  }\n+\n+  @Test\n+  public void testBuildLinkageCheckDependencyGraph_catchRootException() throws RepositoryException {\n+    // This should not throw exception\n+    DependencyGraphResult result =\n+        dependencyGraphBuilder.buildLinkageCheckDependencyGraph(\n+            ImmutableList.of(new DefaultArtifact(\"ant:ant:jar:1.6.2\")));\n+\n+    ImmutableList<UnresolvableArtifactProblem> problems = result.getArtifactProblems();\n+\n+    Truth.assertThat(problems)\n+        .comparingElementsUsing(problemOnArtifact)\n+        .containsAtLeast(\"xerces:xerces-impl:2.6.2\", \"xml-apis:xml-apis:2.6.2\");\n+\n+    Truth.assertThat(problems).hasSize(2);\n+    Truth.assertThat(problems)\n+        .comparingElementsUsing(\n+            Correspondence.transforming(UnresolvableArtifactProblem::toString, \"has description\"))\n+        .containsExactly(\n+            \"xerces:xerces-impl:jar:2.6.2 was not resolved. Dependency path: ant:ant:jar:1.6.2\"\n+                + \" (compile) > xerces:xerces-impl:jar:2.6.2 (compile?)\",\n+            \"xml-apis:xml-apis:jar:2.6.2 was not resolved. Dependency path: ant:ant:jar:1.6.2\"\n+                + \" (compile) > xml-apis:xml-apis:jar:2.6.2 (compile?)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f688f536391798bb9eb6f1cda763088baa66bd6"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0Mzk5ODM2OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMzoxODo0N1rOFpTX7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNTowNjo1MFrOFpXWMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1MzM1Ng==", "bodyText": "not sure, but what if a file is not found for foo:bar:21.6 but we already have foo:bar:24.8 in the graph? Do we still record an unresolved artifact problem? Does this method still work?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378853356", "createdAt": "2020-02-13T13:18:47Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java", "diffHunk": "@@ -58,25 +58,29 @@ public ClassPathBuilder(DependencyGraphBuilder dependencyGraphBuilder) {\n    * closest' strategy follows Maven's dependency mediation.\n    *\n    * @param artifacts Maven artifacts to check. They are treated as the root of the dependency tree.\n-   * @throws RepositoryException when there is a problem retrieving jar files\n    */\n-  public ClassPathResult resolve(List<Artifact> artifacts) throws RepositoryException {\n+  public ClassPathResult resolve(List<Artifact> artifacts) {\n \n     LinkedListMultimap<Path, DependencyPath> multimap = LinkedListMultimap.create();\n     if (artifacts.isEmpty()) {\n       return new ClassPathResult(multimap, ImmutableList.of());\n     }\n     // dependencyGraph holds multiple versions for one artifact key (groupId:artifactId)\n     DependencyGraphResult result =\n-        dependencyGraphBuilder.getStaticLinkageCheckDependencyGraph(artifacts);\n+        dependencyGraphBuilder.buildLinkageCheckDependencyGraph(artifacts);\n     List<DependencyPath> dependencyPaths = result.getDependencyGraph().list();\n \n     // To remove duplicates on (groupId:artifactId) for dependency mediation\n     Map<String, String> keyToFirstArtifactVersion = Maps.newHashMap();\n \n     for (DependencyPath dependencyPath : dependencyPaths) {\n       Artifact artifact = dependencyPath.getLeaf();\n-      Path jarAbsolutePath = artifact.getFile().toPath().toAbsolutePath();\n+      File file = artifact.getFile();\n+      if (file == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f688f536391798bb9eb6f1cda763088baa66bd6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkxODQ0OQ==", "bodyText": "Yes, that unavailable artifacts are recorded in result.getArtifactProblems().\nCreated the followup. #1215", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378918449", "createdAt": "2020-02-13T15:06:50Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java", "diffHunk": "@@ -58,25 +58,29 @@ public ClassPathBuilder(DependencyGraphBuilder dependencyGraphBuilder) {\n    * closest' strategy follows Maven's dependency mediation.\n    *\n    * @param artifacts Maven artifacts to check. They are treated as the root of the dependency tree.\n-   * @throws RepositoryException when there is a problem retrieving jar files\n    */\n-  public ClassPathResult resolve(List<Artifact> artifacts) throws RepositoryException {\n+  public ClassPathResult resolve(List<Artifact> artifacts) {\n \n     LinkedListMultimap<Path, DependencyPath> multimap = LinkedListMultimap.create();\n     if (artifacts.isEmpty()) {\n       return new ClassPathResult(multimap, ImmutableList.of());\n     }\n     // dependencyGraph holds multiple versions for one artifact key (groupId:artifactId)\n     DependencyGraphResult result =\n-        dependencyGraphBuilder.getStaticLinkageCheckDependencyGraph(artifacts);\n+        dependencyGraphBuilder.buildLinkageCheckDependencyGraph(artifacts);\n     List<DependencyPath> dependencyPaths = result.getDependencyGraph().list();\n \n     // To remove duplicates on (groupId:artifactId) for dependency mediation\n     Map<String, String> keyToFirstArtifactVersion = Maps.newHashMap();\n \n     for (DependencyPath dependencyPath : dependencyPaths) {\n       Artifact artifact = dependencyPath.getLeaf();\n-      Path jarAbsolutePath = artifact.getFile().toPath().toAbsolutePath();\n+      File file = artifact.getFile();\n+      if (file == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1MzM1Ng=="}, "originalCommit": {"oid": "7f688f536391798bb9eb6f1cda763088baa66bd6"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDAwMTQ3OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArguments.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMzoxOTo0N1rOFpTZxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNToxMDo1MlrOFpXfkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1MzgyOA==", "bodyText": "should probably add a space after the comma in the joiner", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378853828", "createdAt": "2020-02-13T13:19:47Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArguments.java", "diffHunk": "@@ -200,7 +202,13 @@ private static Options configureOptions() {\n \n     if (commandLine.hasOption(\"b\") || commandLine.hasOption(\"a\")) {\n       List<Artifact> artifacts = getArtifacts();\n-      cachedInputClasspath = classPathBuilder.resolve(artifacts).getClassPath();\n+      ClassPathResult result = classPathBuilder.resolve(artifacts);\n+      ImmutableList<UnresolvableArtifactProblem> artifactProblems = result.getArtifactProblems();\n+      if (!artifactProblems.isEmpty()) {\n+        throw new RepositoryException(\n+            \"Unresolved artifacts: \" + Joiner.on(\",\").join(artifactProblems));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f688f536391798bb9eb6f1cda763088baa66bd6"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyMDg0OA==", "bodyText": "Added", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378920848", "createdAt": "2020-02-13T15:10:52Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArguments.java", "diffHunk": "@@ -200,7 +202,13 @@ private static Options configureOptions() {\n \n     if (commandLine.hasOption(\"b\") || commandLine.hasOption(\"a\")) {\n       List<Artifact> artifacts = getArtifacts();\n-      cachedInputClasspath = classPathBuilder.resolve(artifacts).getClassPath();\n+      ClassPathResult result = classPathBuilder.resolve(artifacts);\n+      ImmutableList<UnresolvableArtifactProblem> artifactProblems = result.getArtifactProblems();\n+      if (!artifactProblems.isEmpty()) {\n+        throw new RepositoryException(\n+            \"Unresolved artifacts: \" + Joiner.on(\",\").join(artifactProblems));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1MzgyOA=="}, "originalCommit": {"oid": "7f688f536391798bb9eb6f1cda763088baa66bd6"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDAwODM0OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMzoyMTo1NFrOFpTd5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QyMTozMToxNlrOFpkPWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1NDg4NQ==", "bodyText": "Any chance this method belongs in DependencyPath?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378854885", "createdAt": "2020-02-13T13:21:54Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java", "diffHunk": "@@ -78,4 +81,44 @@ public static String formatProblems(Iterable<ArtifactProblem> problems) {\n     }\n     return output.toString();\n   }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    }\n+    if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+\n+    ArtifactProblem otherProblem = (ArtifactProblem) other;\n+    return Objects.equals(artifact, otherProblem.artifact)\n+        && sameDependencyPath(dependencyPath, otherProblem.dependencyPath);\n+  }\n+\n+  private static boolean sameDependencyPath(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7f688f536391798bb9eb6f1cda763088baa66bd6"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODkyMDE5Nw==", "bodyText": "com.google.cloud.tools.opensource.dependencies.DependencyPath does not use ImmutableList<DependencyNode>. It uses List<Dependency>. So this method should be in DependencyPath.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r378920197", "createdAt": "2020-02-13T15:09:53Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java", "diffHunk": "@@ -78,4 +81,44 @@ public static String formatProblems(Iterable<ArtifactProblem> problems) {\n     }\n     return output.toString();\n   }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    }\n+    if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+\n+    ArtifactProblem otherProblem = (ArtifactProblem) other;\n+    return Objects.equals(artifact, otherProblem.artifact)\n+        && sameDependencyPath(dependencyPath, otherProblem.dependencyPath);\n+  }\n+\n+  private static boolean sameDependencyPath(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1NDg4NQ=="}, "originalCommit": {"oid": "7f688f536391798bb9eb6f1cda763088baa66bd6"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTExMDg1MQ==", "bodyText": "This method eeems like it works with both mutable and immutable lists.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r379110851", "createdAt": "2020-02-13T20:49:45Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java", "diffHunk": "@@ -78,4 +81,44 @@ public static String formatProblems(Iterable<ArtifactProblem> problems) {\n     }\n     return output.toString();\n   }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    }\n+    if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+\n+    ArtifactProblem otherProblem = (ArtifactProblem) other;\n+    return Objects.equals(artifact, otherProblem.artifact)\n+        && sameDependencyPath(dependencyPath, otherProblem.dependencyPath);\n+  }\n+\n+  private static boolean sameDependencyPath(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1NDg4NQ=="}, "originalCommit": {"oid": "7f688f536391798bb9eb6f1cda763088baa66bd6"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTEyOTY4OA==", "bodyText": "Yes. Updated. Also renamed to equalsOnDependencies as \"same\" implies checking object identity.\n  private static boolean equalsOnDependencies(\n      List<DependencyNode> listA, List<DependencyNode> listB) {", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1210#discussion_r379129688", "createdAt": "2020-02-13T21:31:16Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/ArtifactProblem.java", "diffHunk": "@@ -78,4 +81,44 @@ public static String formatProblems(Iterable<ArtifactProblem> problems) {\n     }\n     return output.toString();\n   }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    }\n+    if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+\n+    ArtifactProblem otherProblem = (ArtifactProblem) other;\n+    return Objects.equals(artifact, otherProblem.artifact)\n+        && sameDependencyPath(dependencyPath, otherProblem.dependencyPath);\n+  }\n+\n+  private static boolean sameDependencyPath(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg1NDg4NQ=="}, "originalCommit": {"oid": "7f688f536391798bb9eb6f1cda763088baa66bd6"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2808, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}