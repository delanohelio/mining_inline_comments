{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc0OTU1Njc5", "number": 1625, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozNjowMFrOEfAtOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzoxOTowOVrOEgFftg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTUyODkxOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/BadJdkReferenceChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozNjowMFrOHLBRWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTo1MzowOVrOHMBpCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNzIwOQ==", "bodyText": "we need a better name for this. What's a \"bad JDK\"?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1625#discussion_r481317209", "createdAt": "2020-09-01T17:36:00Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/BadJdkReferenceChecker.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+\n+import com.google.cloud.tools.opensource.classpath.ClassFile;\n+import com.google.cloud.tools.opensource.classpath.ClassPathBuilder;\n+import com.google.cloud.tools.opensource.classpath.ClassPathEntry;\n+import com.google.cloud.tools.opensource.classpath.ClassPathResult;\n+import com.google.cloud.tools.opensource.classpath.LinkageChecker;\n+import com.google.cloud.tools.opensource.classpath.LinkageProblem;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSetMultimap;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.logging.Logger;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+public class BadJdkReferenceChecker {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d07c0ab9f23084e5c99411a6bcbd27afd37ab9c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM3MTg1MQ==", "bodyText": "Updated to Java8IncompatibleReferenceCheck.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1625#discussion_r482371851", "createdAt": "2020-09-02T19:53:09Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/BadJdkReferenceChecker.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+\n+import com.google.cloud.tools.opensource.classpath.ClassFile;\n+import com.google.cloud.tools.opensource.classpath.ClassPathBuilder;\n+import com.google.cloud.tools.opensource.classpath.ClassPathEntry;\n+import com.google.cloud.tools.opensource.classpath.ClassPathResult;\n+import com.google.cloud.tools.opensource.classpath.LinkageChecker;\n+import com.google.cloud.tools.opensource.classpath.LinkageProblem;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSetMultimap;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.logging.Logger;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+public class BadJdkReferenceChecker {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNzIwOQ=="}, "originalCommit": {"oid": "9d07c0ab9f23084e5c99411a6bcbd27afd37ab9c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTUzMDU0OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/BadJdkReferenceChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozNjoyNlrOHLBSSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTo1MzowMVrOHMBoYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNzQ1MA==", "bodyText": "per google style do not use \"Please\" in UI messages", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1625#discussion_r481317450", "createdAt": "2020-09-01T17:36:26Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/BadJdkReferenceChecker.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+\n+import com.google.cloud.tools.opensource.classpath.ClassFile;\n+import com.google.cloud.tools.opensource.classpath.ClassPathBuilder;\n+import com.google.cloud.tools.opensource.classpath.ClassPathEntry;\n+import com.google.cloud.tools.opensource.classpath.ClassPathResult;\n+import com.google.cloud.tools.opensource.classpath.LinkageChecker;\n+import com.google.cloud.tools.opensource.classpath.LinkageProblem;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSetMultimap;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.logging.Logger;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+public class BadJdkReferenceChecker {\n+\n+  private static final Logger logger = Logger.getLogger(BadJdkReferenceChecker.class.getName());\n+\n+  public static void main(String[] arguments)\n+      throws MavenRepositoryException, IOException, URISyntaxException {\n+\n+    if (arguments.length != 1) {\n+      System.err.println(\"Please specify a path to the BOM file\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d07c0ab9f23084e5c99411a6bcbd27afd37ab9c"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM3MTY4MA==", "bodyText": "Removed.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1625#discussion_r482371680", "createdAt": "2020-09-02T19:53:01Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/BadJdkReferenceChecker.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+\n+import com.google.cloud.tools.opensource.classpath.ClassFile;\n+import com.google.cloud.tools.opensource.classpath.ClassPathBuilder;\n+import com.google.cloud.tools.opensource.classpath.ClassPathEntry;\n+import com.google.cloud.tools.opensource.classpath.ClassPathResult;\n+import com.google.cloud.tools.opensource.classpath.LinkageChecker;\n+import com.google.cloud.tools.opensource.classpath.LinkageProblem;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSetMultimap;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.logging.Logger;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+public class BadJdkReferenceChecker {\n+\n+  private static final Logger logger = Logger.getLogger(BadJdkReferenceChecker.class.getName());\n+\n+  public static void main(String[] arguments)\n+      throws MavenRepositoryException, IOException, URISyntaxException {\n+\n+    if (arguments.length != 1) {\n+      System.err.println(\"Please specify a path to the BOM file\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNzQ1MA=="}, "originalCommit": {"oid": "9d07c0ab9f23084e5c99411a6bcbd27afd37ab9c"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTUzMjM2OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/BadJdkReferenceChecker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozNzowNFrOHLBTkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTo1MzoyNlrOHMBqcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNzc3OQ==", "bodyText": "does --> do", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1625#discussion_r481317779", "createdAt": "2020-09-01T17:37:04Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/BadJdkReferenceChecker.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+\n+import com.google.cloud.tools.opensource.classpath.ClassFile;\n+import com.google.cloud.tools.opensource.classpath.ClassPathBuilder;\n+import com.google.cloud.tools.opensource.classpath.ClassPathEntry;\n+import com.google.cloud.tools.opensource.classpath.ClassPathResult;\n+import com.google.cloud.tools.opensource.classpath.LinkageChecker;\n+import com.google.cloud.tools.opensource.classpath.LinkageProblem;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSetMultimap;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.logging.Logger;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+public class BadJdkReferenceChecker {\n+\n+  private static final Logger logger = Logger.getLogger(BadJdkReferenceChecker.class.getName());\n+\n+  public static void main(String[] arguments)\n+      throws MavenRepositoryException, IOException, URISyntaxException {\n+\n+    if (arguments.length != 1) {\n+      System.err.println(\"Please specify a path to the BOM file\");\n+      System.exit(1);\n+    }\n+\n+    URI exclusionFileUri =\n+        BadJdkReferenceChecker.class\n+            .getClassLoader()\n+            .getResource(\"bad-jdk-reference-check-exclusion.xml\")\n+            .toURI();\n+    Path exclusionFile = Paths.get(exclusionFileUri).toAbsolutePath();\n+\n+    String bomFileName = arguments[0];\n+\n+    Path bomFile = Paths.get(bomFileName);\n+    Bom bom = Bom.readBom(bomFile);\n+\n+    ImmutableList<Artifact> managedDependencies = bom.getManagedDependencies();\n+\n+    int count = 1;\n+\n+    ImmutableSetMultimap.Builder<Artifact, Artifact> badDependencies =\n+        ImmutableSetMultimap.builder();\n+    for (Artifact managedDependency : managedDependencies) {\n+      logger.info(\n+          \"Checking \"\n+              + managedDependency\n+              + \" (\"\n+              + (count++)\n+              + \"/\"\n+              + managedDependencies.size()\n+              + \")\");\n+\n+      ClassPathBuilder classPathBuilder = new ClassPathBuilder();\n+      ClassPathResult result = classPathBuilder.resolve(ImmutableList.of(managedDependency), false);\n+\n+      LinkageChecker linkageChecker =\n+          LinkageChecker.create(result.getClassPath(), result.getClassPath(), exclusionFile);\n+\n+      ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+      ImmutableSet<LinkageProblem> badJdkReferences =\n+          linkageProblems.stream()\n+              .filter(problem -> problem.getSymbol().getClassBinaryName().startsWith(\"java.\"))\n+              .collect(toImmutableSet());\n+\n+      if (!badJdkReferences.isEmpty()) {\n+        badJdkReferences.stream()\n+            .map(LinkageProblem::getSourceClass)\n+            .map(ClassFile::getClassPathEntry)\n+            .map(ClassPathEntry::getArtifact)\n+            .forEach(artifact -> badDependencies.put(managedDependency, artifact));\n+\n+        logger.severe(LinkageProblem.formatLinkageProblems(badJdkReferences));\n+      }\n+    }\n+\n+    ImmutableSetMultimap<Artifact, Artifact> bomMemberToBadDependencies = badDependencies.build();\n+\n+    if (bomMemberToBadDependencies.isEmpty()) {\n+      logger.info(\"No problematic artifacts\");\n+      return;\n+    }\n+\n+    StringBuilder message = new StringBuilder();\n+    message.append(\n+        \"The following artifacts contain bad references to classes in 'java' package,\"\n+            + \" which does not work for Java 8\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d07c0ab9f23084e5c99411a6bcbd27afd37ab9c"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM3MjIwOQ==", "bodyText": "Fixed.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1625#discussion_r482372209", "createdAt": "2020-09-02T19:53:26Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/BadJdkReferenceChecker.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+\n+import com.google.cloud.tools.opensource.classpath.ClassFile;\n+import com.google.cloud.tools.opensource.classpath.ClassPathBuilder;\n+import com.google.cloud.tools.opensource.classpath.ClassPathEntry;\n+import com.google.cloud.tools.opensource.classpath.ClassPathResult;\n+import com.google.cloud.tools.opensource.classpath.LinkageChecker;\n+import com.google.cloud.tools.opensource.classpath.LinkageProblem;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSetMultimap;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.logging.Logger;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+public class BadJdkReferenceChecker {\n+\n+  private static final Logger logger = Logger.getLogger(BadJdkReferenceChecker.class.getName());\n+\n+  public static void main(String[] arguments)\n+      throws MavenRepositoryException, IOException, URISyntaxException {\n+\n+    if (arguments.length != 1) {\n+      System.err.println(\"Please specify a path to the BOM file\");\n+      System.exit(1);\n+    }\n+\n+    URI exclusionFileUri =\n+        BadJdkReferenceChecker.class\n+            .getClassLoader()\n+            .getResource(\"bad-jdk-reference-check-exclusion.xml\")\n+            .toURI();\n+    Path exclusionFile = Paths.get(exclusionFileUri).toAbsolutePath();\n+\n+    String bomFileName = arguments[0];\n+\n+    Path bomFile = Paths.get(bomFileName);\n+    Bom bom = Bom.readBom(bomFile);\n+\n+    ImmutableList<Artifact> managedDependencies = bom.getManagedDependencies();\n+\n+    int count = 1;\n+\n+    ImmutableSetMultimap.Builder<Artifact, Artifact> badDependencies =\n+        ImmutableSetMultimap.builder();\n+    for (Artifact managedDependency : managedDependencies) {\n+      logger.info(\n+          \"Checking \"\n+              + managedDependency\n+              + \" (\"\n+              + (count++)\n+              + \"/\"\n+              + managedDependencies.size()\n+              + \")\");\n+\n+      ClassPathBuilder classPathBuilder = new ClassPathBuilder();\n+      ClassPathResult result = classPathBuilder.resolve(ImmutableList.of(managedDependency), false);\n+\n+      LinkageChecker linkageChecker =\n+          LinkageChecker.create(result.getClassPath(), result.getClassPath(), exclusionFile);\n+\n+      ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+      ImmutableSet<LinkageProblem> badJdkReferences =\n+          linkageProblems.stream()\n+              .filter(problem -> problem.getSymbol().getClassBinaryName().startsWith(\"java.\"))\n+              .collect(toImmutableSet());\n+\n+      if (!badJdkReferences.isEmpty()) {\n+        badJdkReferences.stream()\n+            .map(LinkageProblem::getSourceClass)\n+            .map(ClassFile::getClassPathEntry)\n+            .map(ClassPathEntry::getArtifact)\n+            .forEach(artifact -> badDependencies.put(managedDependency, artifact));\n+\n+        logger.severe(LinkageProblem.formatLinkageProblems(badJdkReferences));\n+      }\n+    }\n+\n+    ImmutableSetMultimap<Artifact, Artifact> bomMemberToBadDependencies = badDependencies.build();\n+\n+    if (bomMemberToBadDependencies.isEmpty()) {\n+      logger.info(\"No problematic artifacts\");\n+      return;\n+    }\n+\n+    StringBuilder message = new StringBuilder();\n+    message.append(\n+        \"The following artifacts contain bad references to classes in 'java' package,\"\n+            + \" which does not work for Java 8\\n\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNzc3OQ=="}, "originalCommit": {"oid": "9d07c0ab9f23084e5c99411a6bcbd27afd37ab9c"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjA1NzUxOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/Java8IncompatibleReferenceCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTo1NjozNFrOHMB7Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTo0ODowN1rOHMJ4Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM3NjQ4Mg==", "bodyText": "JavaDoc would help clarify this.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1625#discussion_r482376482", "createdAt": "2020-09-02T19:56:34Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/Java8IncompatibleReferenceCheck.java", "diffHunk": "@@ -35,20 +35,20 @@\n import java.util.logging.Logger;\n import org.eclipse.aether.artifact.Artifact;\n \n-public class BadJdkReferenceChecker {\n+public class Java8IncompatibleReferenceCheck {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5172cfe94decebb77a077f7c1efd4e47cb63b715"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUwNjgyMg==", "bodyText": "Added Javadoc. I'll prepare another document (wiki) to explain how to use this tool.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1625#discussion_r482506822", "createdAt": "2020-09-02T21:48:07Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/Java8IncompatibleReferenceCheck.java", "diffHunk": "@@ -35,20 +35,20 @@\n import java.util.logging.Logger;\n import org.eclipse.aether.artifact.Artifact;\n \n-public class BadJdkReferenceChecker {\n+public class Java8IncompatibleReferenceCheck {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM3NjQ4Mg=="}, "originalCommit": {"oid": "5172cfe94decebb77a077f7c1efd4e47cb63b715"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjA2OTI2OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/Java8IncompatibleReferenceCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTo1ODowOVrOHMCDpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTozMToxMVrOHMJBKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM3ODY2Mw==", "bodyText": "delete \"bad\"\nperhaps \"classes in 'java' package\" --> classes in the core library\nwhich do not work for --> which are not present in", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1625#discussion_r482378663", "createdAt": "2020-09-02T19:58:09Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/Java8IncompatibleReferenceCheck.java", "diffHunk": "@@ -109,7 +109,7 @@ public static void main(String[] arguments)\n     StringBuilder message = new StringBuilder();\n     message.append(\n         \"The following artifacts contain bad references to classes in 'java' package,\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5172cfe94decebb77a077f7c1efd4e47cb63b715"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ5MjcxNA==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1625#discussion_r482492714", "createdAt": "2020-09-02T21:31:11Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/Java8IncompatibleReferenceCheck.java", "diffHunk": "@@ -109,7 +109,7 @@ public static void main(String[] arguments)\n     StringBuilder message = new StringBuilder();\n     message.append(\n         \"The following artifacts contain bad references to classes in 'java' package,\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM3ODY2Mw=="}, "originalCommit": {"oid": "5172cfe94decebb77a077f7c1efd4e47cb63b715"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTk3MDk1OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/Java8IncompatibleReferenceCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDowNTozMFrOHMoPoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDozNToxMlrOHMppWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNDMyMA==", "bodyText": "dependency graph of each of the artifacts above", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1625#discussion_r483004320", "createdAt": "2020-09-03T14:05:30Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/Java8IncompatibleReferenceCheck.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+\n+import com.google.cloud.tools.opensource.classpath.ClassFile;\n+import com.google.cloud.tools.opensource.classpath.ClassPathBuilder;\n+import com.google.cloud.tools.opensource.classpath.ClassPathEntry;\n+import com.google.cloud.tools.opensource.classpath.ClassPathResult;\n+import com.google.cloud.tools.opensource.classpath.LinkageChecker;\n+import com.google.cloud.tools.opensource.classpath.LinkageProblem;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSetMultimap;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.logging.Logger;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+/**\n+ * A tool to find Java 8-incompatible references in the class files in a BOM. It checks the class\n+ * files in the following artifacts:\n+ *\n+ * <ul>\n+ *   <li>The artifacts in the {@code dependencyManagement} section of the BOM\n+ *   <li>The artifacts in the dependency graph for each of the artifact above", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d778a567222ddc02a56e92ea2b6da43c91d662e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyNzI5MQ==", "bodyText": "Fixed.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1625#discussion_r483027291", "createdAt": "2020-09-03T14:35:12Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/Java8IncompatibleReferenceCheck.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+\n+import com.google.cloud.tools.opensource.classpath.ClassFile;\n+import com.google.cloud.tools.opensource.classpath.ClassPathBuilder;\n+import com.google.cloud.tools.opensource.classpath.ClassPathEntry;\n+import com.google.cloud.tools.opensource.classpath.ClassPathResult;\n+import com.google.cloud.tools.opensource.classpath.LinkageChecker;\n+import com.google.cloud.tools.opensource.classpath.LinkageProblem;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSetMultimap;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.logging.Logger;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+/**\n+ * A tool to find Java 8-incompatible references in the class files in a BOM. It checks the class\n+ * files in the following artifacts:\n+ *\n+ * <ul>\n+ *   <li>The artifacts in the {@code dependencyManagement} section of the BOM\n+ *   <li>The artifacts in the dependency graph for each of the artifact above", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNDMyMA=="}, "originalCommit": {"oid": "5d778a567222ddc02a56e92ea2b6da43c91d662e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTk3MjUzOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/Java8IncompatibleReferenceCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDowNTo0N1rOHMoQgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDozNjo0NFrOHMpulw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNDU0NA==", "bodyText": "no comma after library", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1625#discussion_r483004544", "createdAt": "2020-09-03T14:05:47Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/Java8IncompatibleReferenceCheck.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+\n+import com.google.cloud.tools.opensource.classpath.ClassFile;\n+import com.google.cloud.tools.opensource.classpath.ClassPathBuilder;\n+import com.google.cloud.tools.opensource.classpath.ClassPathEntry;\n+import com.google.cloud.tools.opensource.classpath.ClassPathResult;\n+import com.google.cloud.tools.opensource.classpath.LinkageChecker;\n+import com.google.cloud.tools.opensource.classpath.LinkageProblem;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSetMultimap;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.logging.Logger;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+/**\n+ * A tool to find Java 8-incompatible references in the class files in a BOM. It checks the class\n+ * files in the following artifacts:\n+ *\n+ * <ul>\n+ *   <li>The artifacts in the {@code dependencyManagement} section of the BOM\n+ *   <li>The artifacts in the dependency graph for each of the artifact above\n+ *   <li>The latest version of the artifacts in the dependency graphs\n+ * </ul>\n+ *\n+ * <p>If it finds references to classes in the core library, which are not present in Java 8, it", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d778a567222ddc02a56e92ea2b6da43c91d662e"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyODYzMQ==", "bodyText": "Fixed.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1625#discussion_r483028631", "createdAt": "2020-09-03T14:36:44Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/Java8IncompatibleReferenceCheck.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+\n+import com.google.cloud.tools.opensource.classpath.ClassFile;\n+import com.google.cloud.tools.opensource.classpath.ClassPathBuilder;\n+import com.google.cloud.tools.opensource.classpath.ClassPathEntry;\n+import com.google.cloud.tools.opensource.classpath.ClassPathResult;\n+import com.google.cloud.tools.opensource.classpath.LinkageChecker;\n+import com.google.cloud.tools.opensource.classpath.LinkageProblem;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSetMultimap;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.logging.Logger;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+/**\n+ * A tool to find Java 8-incompatible references in the class files in a BOM. It checks the class\n+ * files in the following artifacts:\n+ *\n+ * <ul>\n+ *   <li>The artifacts in the {@code dependencyManagement} section of the BOM\n+ *   <li>The artifacts in the dependency graph for each of the artifact above\n+ *   <li>The latest version of the artifacts in the dependency graphs\n+ * </ul>\n+ *\n+ * <p>If it finds references to classes in the core library, which are not present in Java 8, it", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNDU0NA=="}, "originalCommit": {"oid": "5d778a567222ddc02a56e92ea2b6da43c91d662e"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTk4MDc1OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/Java8IncompatibleReferenceCheck.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDowNzozOVrOHMoVmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzoyMTo0NVrOHMwa-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNTg0OQ==", "bodyText": "I'm surprised this works since it's a resource in a jar, not a file. Could we skip both URIs and paths here and get a stream from the resource instead?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1625#discussion_r483005849", "createdAt": "2020-09-03T14:07:39Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/Java8IncompatibleReferenceCheck.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+\n+import com.google.cloud.tools.opensource.classpath.ClassFile;\n+import com.google.cloud.tools.opensource.classpath.ClassPathBuilder;\n+import com.google.cloud.tools.opensource.classpath.ClassPathEntry;\n+import com.google.cloud.tools.opensource.classpath.ClassPathResult;\n+import com.google.cloud.tools.opensource.classpath.LinkageChecker;\n+import com.google.cloud.tools.opensource.classpath.LinkageProblem;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSetMultimap;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.logging.Logger;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+/**\n+ * A tool to find Java 8-incompatible references in the class files in a BOM. It checks the class\n+ * files in the following artifacts:\n+ *\n+ * <ul>\n+ *   <li>The artifacts in the {@code dependencyManagement} section of the BOM\n+ *   <li>The artifacts in the dependency graph for each of the artifact above\n+ *   <li>The latest version of the artifacts in the dependency graphs\n+ * </ul>\n+ *\n+ * <p>If it finds references to classes in the core library, which are not present in Java 8, it\n+ * exits with status code 1; otherwise it exits with status code 0.\n+ *\n+ * @see <a\n+ *     href=\"https://github.com/GoogleCloudPlatform/cloud-opensource-java/wiki/Java-8-incompatible-references-of-java.nio.Buffer-classes-generated-by-Java-9--compilers\"\n+ *     >Java 8 incompatible references of java.nio.Buffer classes generated by Java 9 compilers</a>\n+ */\n+public class Java8IncompatibleReferenceCheck {\n+\n+  private static final Logger logger =\n+      Logger.getLogger(Java8IncompatibleReferenceCheck.class.getName());\n+\n+  public static void main(String[] arguments)\n+      throws MavenRepositoryException, IOException, URISyntaxException {\n+\n+    if (arguments.length != 1) {\n+      System.err.println(\"Specify a path to the BOM file\");\n+      System.exit(1);\n+    }\n+\n+    URI exclusionFileUri =\n+        Java8IncompatibleReferenceCheck.class\n+            .getClassLoader()\n+            .getResource(\"java8-incompatible-reference-check-exclusion.xml\")\n+            .toURI();\n+    Path exclusionFile = Paths.get(exclusionFileUri).toAbsolutePath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d778a567222ddc02a56e92ea2b6da43c91d662e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAzMjY5NA==", "bodyText": "This works because it reads the XML file from target directory. With maven-exec-plugin (used by java8-incompatible-reference-check.sh), the value (toString) of exclusionFile is Users/suztomo/cloud-opensource-java/dependencies/target/classes/java8-incompatible-reference-check-exclusion.xml, not from a JAR file.\nLinkageChecker.create() takes Path for an exclusion file.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1625#discussion_r483032694", "createdAt": "2020-09-03T14:42:28Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/Java8IncompatibleReferenceCheck.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+\n+import com.google.cloud.tools.opensource.classpath.ClassFile;\n+import com.google.cloud.tools.opensource.classpath.ClassPathBuilder;\n+import com.google.cloud.tools.opensource.classpath.ClassPathEntry;\n+import com.google.cloud.tools.opensource.classpath.ClassPathResult;\n+import com.google.cloud.tools.opensource.classpath.LinkageChecker;\n+import com.google.cloud.tools.opensource.classpath.LinkageProblem;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSetMultimap;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.logging.Logger;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+/**\n+ * A tool to find Java 8-incompatible references in the class files in a BOM. It checks the class\n+ * files in the following artifacts:\n+ *\n+ * <ul>\n+ *   <li>The artifacts in the {@code dependencyManagement} section of the BOM\n+ *   <li>The artifacts in the dependency graph for each of the artifact above\n+ *   <li>The latest version of the artifacts in the dependency graphs\n+ * </ul>\n+ *\n+ * <p>If it finds references to classes in the core library, which are not present in Java 8, it\n+ * exits with status code 1; otherwise it exits with status code 0.\n+ *\n+ * @see <a\n+ *     href=\"https://github.com/GoogleCloudPlatform/cloud-opensource-java/wiki/Java-8-incompatible-references-of-java.nio.Buffer-classes-generated-by-Java-9--compilers\"\n+ *     >Java 8 incompatible references of java.nio.Buffer classes generated by Java 9 compilers</a>\n+ */\n+public class Java8IncompatibleReferenceCheck {\n+\n+  private static final Logger logger =\n+      Logger.getLogger(Java8IncompatibleReferenceCheck.class.getName());\n+\n+  public static void main(String[] arguments)\n+      throws MavenRepositoryException, IOException, URISyntaxException {\n+\n+    if (arguments.length != 1) {\n+      System.err.println(\"Specify a path to the BOM file\");\n+      System.exit(1);\n+    }\n+\n+    URI exclusionFileUri =\n+        Java8IncompatibleReferenceCheck.class\n+            .getClassLoader()\n+            .getResource(\"java8-incompatible-reference-check-exclusion.xml\")\n+            .toURI();\n+    Path exclusionFile = Paths.get(exclusionFileUri).toAbsolutePath();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNTg0OQ=="}, "originalCommit": {"oid": "5d778a567222ddc02a56e92ea2b6da43c91d662e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA2OTAyNQ==", "bodyText": "I'll trust you that it works, but this still looks very brittle to me. Can we add a method to LinkageChecker that takes an InputStream to avoid this.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1625#discussion_r483069025", "createdAt": "2020-09-03T15:31:50Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/Java8IncompatibleReferenceCheck.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+\n+import com.google.cloud.tools.opensource.classpath.ClassFile;\n+import com.google.cloud.tools.opensource.classpath.ClassPathBuilder;\n+import com.google.cloud.tools.opensource.classpath.ClassPathEntry;\n+import com.google.cloud.tools.opensource.classpath.ClassPathResult;\n+import com.google.cloud.tools.opensource.classpath.LinkageChecker;\n+import com.google.cloud.tools.opensource.classpath.LinkageProblem;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSetMultimap;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.logging.Logger;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+/**\n+ * A tool to find Java 8-incompatible references in the class files in a BOM. It checks the class\n+ * files in the following artifacts:\n+ *\n+ * <ul>\n+ *   <li>The artifacts in the {@code dependencyManagement} section of the BOM\n+ *   <li>The artifacts in the dependency graph for each of the artifact above\n+ *   <li>The latest version of the artifacts in the dependency graphs\n+ * </ul>\n+ *\n+ * <p>If it finds references to classes in the core library, which are not present in Java 8, it\n+ * exits with status code 1; otherwise it exits with status code 0.\n+ *\n+ * @see <a\n+ *     href=\"https://github.com/GoogleCloudPlatform/cloud-opensource-java/wiki/Java-8-incompatible-references-of-java.nio.Buffer-classes-generated-by-Java-9--compilers\"\n+ *     >Java 8 incompatible references of java.nio.Buffer classes generated by Java 9 compilers</a>\n+ */\n+public class Java8IncompatibleReferenceCheck {\n+\n+  private static final Logger logger =\n+      Logger.getLogger(Java8IncompatibleReferenceCheck.class.getName());\n+\n+  public static void main(String[] arguments)\n+      throws MavenRepositoryException, IOException, URISyntaxException {\n+\n+    if (arguments.length != 1) {\n+      System.err.println(\"Specify a path to the BOM file\");\n+      System.exit(1);\n+    }\n+\n+    URI exclusionFileUri =\n+        Java8IncompatibleReferenceCheck.class\n+            .getClassLoader()\n+            .getResource(\"java8-incompatible-reference-check-exclusion.xml\")\n+            .toURI();\n+    Path exclusionFile = Paths.get(exclusionFileUri).toAbsolutePath();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNTg0OQ=="}, "originalCommit": {"oid": "5d778a567222ddc02a56e92ea2b6da43c91d662e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEwODEwMw==", "bodyText": "I tried adding another factory method for LinkageChecker to take URL (not InputStream, because ExcludedErrors already takes URL) but the change is unexpectedly large 01b6dc4\nI will just use Path for the exclusion xml as second parameter, without URL or InputStream.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1625#discussion_r483108103", "createdAt": "2020-09-03T16:30:06Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/Java8IncompatibleReferenceCheck.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+\n+import com.google.cloud.tools.opensource.classpath.ClassFile;\n+import com.google.cloud.tools.opensource.classpath.ClassPathBuilder;\n+import com.google.cloud.tools.opensource.classpath.ClassPathEntry;\n+import com.google.cloud.tools.opensource.classpath.ClassPathResult;\n+import com.google.cloud.tools.opensource.classpath.LinkageChecker;\n+import com.google.cloud.tools.opensource.classpath.LinkageProblem;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSetMultimap;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.logging.Logger;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+/**\n+ * A tool to find Java 8-incompatible references in the class files in a BOM. It checks the class\n+ * files in the following artifacts:\n+ *\n+ * <ul>\n+ *   <li>The artifacts in the {@code dependencyManagement} section of the BOM\n+ *   <li>The artifacts in the dependency graph for each of the artifact above\n+ *   <li>The latest version of the artifacts in the dependency graphs\n+ * </ul>\n+ *\n+ * <p>If it finds references to classes in the core library, which are not present in Java 8, it\n+ * exits with status code 1; otherwise it exits with status code 0.\n+ *\n+ * @see <a\n+ *     href=\"https://github.com/GoogleCloudPlatform/cloud-opensource-java/wiki/Java-8-incompatible-references-of-java.nio.Buffer-classes-generated-by-Java-9--compilers\"\n+ *     >Java 8 incompatible references of java.nio.Buffer classes generated by Java 9 compilers</a>\n+ */\n+public class Java8IncompatibleReferenceCheck {\n+\n+  private static final Logger logger =\n+      Logger.getLogger(Java8IncompatibleReferenceCheck.class.getName());\n+\n+  public static void main(String[] arguments)\n+      throws MavenRepositoryException, IOException, URISyntaxException {\n+\n+    if (arguments.length != 1) {\n+      System.err.println(\"Specify a path to the BOM file\");\n+      System.exit(1);\n+    }\n+\n+    URI exclusionFileUri =\n+        Java8IncompatibleReferenceCheck.class\n+            .getClassLoader()\n+            .getResource(\"java8-incompatible-reference-check-exclusion.xml\")\n+            .toURI();\n+    Path exclusionFile = Paths.get(exclusionFileUri).toAbsolutePath();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNTg0OQ=="}, "originalCommit": {"oid": "5d778a567222ddc02a56e92ea2b6da43c91d662e"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEzODI5OA==", "bodyText": "Now the exclusion file is passed as the second parameter. No need to deal with URL.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1625#discussion_r483138298", "createdAt": "2020-09-03T17:21:45Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/Java8IncompatibleReferenceCheck.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+\n+import com.google.cloud.tools.opensource.classpath.ClassFile;\n+import com.google.cloud.tools.opensource.classpath.ClassPathBuilder;\n+import com.google.cloud.tools.opensource.classpath.ClassPathEntry;\n+import com.google.cloud.tools.opensource.classpath.ClassPathResult;\n+import com.google.cloud.tools.opensource.classpath.LinkageChecker;\n+import com.google.cloud.tools.opensource.classpath.LinkageProblem;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSetMultimap;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.logging.Logger;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+/**\n+ * A tool to find Java 8-incompatible references in the class files in a BOM. It checks the class\n+ * files in the following artifacts:\n+ *\n+ * <ul>\n+ *   <li>The artifacts in the {@code dependencyManagement} section of the BOM\n+ *   <li>The artifacts in the dependency graph for each of the artifact above\n+ *   <li>The latest version of the artifacts in the dependency graphs\n+ * </ul>\n+ *\n+ * <p>If it finds references to classes in the core library, which are not present in Java 8, it\n+ * exits with status code 1; otherwise it exits with status code 0.\n+ *\n+ * @see <a\n+ *     href=\"https://github.com/GoogleCloudPlatform/cloud-opensource-java/wiki/Java-8-incompatible-references-of-java.nio.Buffer-classes-generated-by-Java-9--compilers\"\n+ *     >Java 8 incompatible references of java.nio.Buffer classes generated by Java 9 compilers</a>\n+ */\n+public class Java8IncompatibleReferenceCheck {\n+\n+  private static final Logger logger =\n+      Logger.getLogger(Java8IncompatibleReferenceCheck.class.getName());\n+\n+  public static void main(String[] arguments)\n+      throws MavenRepositoryException, IOException, URISyntaxException {\n+\n+    if (arguments.length != 1) {\n+      System.err.println(\"Specify a path to the BOM file\");\n+      System.exit(1);\n+    }\n+\n+    URI exclusionFileUri =\n+        Java8IncompatibleReferenceCheck.class\n+            .getClassLoader()\n+            .getResource(\"java8-incompatible-reference-check-exclusion.xml\")\n+            .toURI();\n+    Path exclusionFile = Paths.get(exclusionFileUri).toAbsolutePath();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNTg0OQ=="}, "originalCommit": {"oid": "5d778a567222ddc02a56e92ea2b6da43c91d662e"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxOTk5MzM0OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/Java8IncompatibleReferenceCheck.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDoxMDoyOVrOHModgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDo1MjozMFrOHMqb9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNzg3NQ==", "bodyText": "This is what would contain the return type change?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1625#discussion_r483007875", "createdAt": "2020-09-03T14:10:29Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/Java8IncompatibleReferenceCheck.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+\n+import com.google.cloud.tools.opensource.classpath.ClassFile;\n+import com.google.cloud.tools.opensource.classpath.ClassPathBuilder;\n+import com.google.cloud.tools.opensource.classpath.ClassPathEntry;\n+import com.google.cloud.tools.opensource.classpath.ClassPathResult;\n+import com.google.cloud.tools.opensource.classpath.LinkageChecker;\n+import com.google.cloud.tools.opensource.classpath.LinkageProblem;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSetMultimap;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.logging.Logger;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+/**\n+ * A tool to find Java 8-incompatible references in the class files in a BOM. It checks the class\n+ * files in the following artifacts:\n+ *\n+ * <ul>\n+ *   <li>The artifacts in the {@code dependencyManagement} section of the BOM\n+ *   <li>The artifacts in the dependency graph for each of the artifact above\n+ *   <li>The latest version of the artifacts in the dependency graphs\n+ * </ul>\n+ *\n+ * <p>If it finds references to classes in the core library, which are not present in Java 8, it\n+ * exits with status code 1; otherwise it exits with status code 0.\n+ *\n+ * @see <a\n+ *     href=\"https://github.com/GoogleCloudPlatform/cloud-opensource-java/wiki/Java-8-incompatible-references-of-java.nio.Buffer-classes-generated-by-Java-9--compilers\"\n+ *     >Java 8 incompatible references of java.nio.Buffer classes generated by Java 9 compilers</a>\n+ */\n+public class Java8IncompatibleReferenceCheck {\n+\n+  private static final Logger logger =\n+      Logger.getLogger(Java8IncompatibleReferenceCheck.class.getName());\n+\n+  public static void main(String[] arguments)\n+      throws MavenRepositoryException, IOException, URISyntaxException {\n+\n+    if (arguments.length != 1) {\n+      System.err.println(\"Specify a path to the BOM file\");\n+      System.exit(1);\n+    }\n+\n+    URI exclusionFileUri =\n+        Java8IncompatibleReferenceCheck.class\n+            .getClassLoader()\n+            .getResource(\"java8-incompatible-reference-check-exclusion.xml\")\n+            .toURI();\n+    Path exclusionFile = Paths.get(exclusionFileUri).toAbsolutePath();\n+\n+    String bomFileName = arguments[0];\n+\n+    Path bomFile = Paths.get(bomFileName);\n+    Bom bom = Bom.readBom(bomFile);\n+\n+    ImmutableList<Artifact> managedDependencies = bom.getManagedDependencies();\n+\n+    int count = 1;\n+\n+    // The BOM member to problematic dependencies\n+    ImmutableSetMultimap.Builder<Artifact, Artifact> problematicDependencies =\n+        ImmutableSetMultimap.builder();\n+    for (Artifact managedDependency : managedDependencies) {\n+      logger.info(\n+          \"Checking \"\n+              + managedDependency\n+              + \" (\"\n+              + (count++)\n+              + \"/\"\n+              + managedDependencies.size()\n+              + \")\");\n+\n+      ClassPathBuilder classPathBuilder = new ClassPathBuilder();\n+      ClassPathResult result = classPathBuilder.resolve(ImmutableList.of(managedDependency), false);\n+\n+      LinkageChecker linkageChecker =\n+          LinkageChecker.create(result.getClassPath(), result.getClassPath(), exclusionFile);\n+\n+      ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+      ImmutableSet<LinkageProblem> invalidJdkReferences =\n+          linkageProblems.stream()\n+              .filter(problem -> problem.getSymbol().getClassBinaryName().startsWith(\"java.\"))\n+              .collect(toImmutableSet());\n+\n+      if (!invalidJdkReferences.isEmpty()) {\n+        invalidJdkReferences.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d778a567222ddc02a56e92ea2b6da43c91d662e"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA0MDI0NA==", "bodyText": "Yes. Renamed this to invalidReferencesToJavaCoreLibrary.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1625#discussion_r483040244", "createdAt": "2020-09-03T14:52:30Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/Java8IncompatibleReferenceCheck.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.dependencies;\n+\n+import static com.google.common.collect.ImmutableSet.toImmutableSet;\n+\n+import com.google.cloud.tools.opensource.classpath.ClassFile;\n+import com.google.cloud.tools.opensource.classpath.ClassPathBuilder;\n+import com.google.cloud.tools.opensource.classpath.ClassPathEntry;\n+import com.google.cloud.tools.opensource.classpath.ClassPathResult;\n+import com.google.cloud.tools.opensource.classpath.LinkageChecker;\n+import com.google.cloud.tools.opensource.classpath.LinkageProblem;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSetMultimap;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.logging.Logger;\n+import org.eclipse.aether.artifact.Artifact;\n+\n+/**\n+ * A tool to find Java 8-incompatible references in the class files in a BOM. It checks the class\n+ * files in the following artifacts:\n+ *\n+ * <ul>\n+ *   <li>The artifacts in the {@code dependencyManagement} section of the BOM\n+ *   <li>The artifacts in the dependency graph for each of the artifact above\n+ *   <li>The latest version of the artifacts in the dependency graphs\n+ * </ul>\n+ *\n+ * <p>If it finds references to classes in the core library, which are not present in Java 8, it\n+ * exits with status code 1; otherwise it exits with status code 0.\n+ *\n+ * @see <a\n+ *     href=\"https://github.com/GoogleCloudPlatform/cloud-opensource-java/wiki/Java-8-incompatible-references-of-java.nio.Buffer-classes-generated-by-Java-9--compilers\"\n+ *     >Java 8 incompatible references of java.nio.Buffer classes generated by Java 9 compilers</a>\n+ */\n+public class Java8IncompatibleReferenceCheck {\n+\n+  private static final Logger logger =\n+      Logger.getLogger(Java8IncompatibleReferenceCheck.class.getName());\n+\n+  public static void main(String[] arguments)\n+      throws MavenRepositoryException, IOException, URISyntaxException {\n+\n+    if (arguments.length != 1) {\n+      System.err.println(\"Specify a path to the BOM file\");\n+      System.exit(1);\n+    }\n+\n+    URI exclusionFileUri =\n+        Java8IncompatibleReferenceCheck.class\n+            .getClassLoader()\n+            .getResource(\"java8-incompatible-reference-check-exclusion.xml\")\n+            .toURI();\n+    Path exclusionFile = Paths.get(exclusionFileUri).toAbsolutePath();\n+\n+    String bomFileName = arguments[0];\n+\n+    Path bomFile = Paths.get(bomFileName);\n+    Bom bom = Bom.readBom(bomFile);\n+\n+    ImmutableList<Artifact> managedDependencies = bom.getManagedDependencies();\n+\n+    int count = 1;\n+\n+    // The BOM member to problematic dependencies\n+    ImmutableSetMultimap.Builder<Artifact, Artifact> problematicDependencies =\n+        ImmutableSetMultimap.builder();\n+    for (Artifact managedDependency : managedDependencies) {\n+      logger.info(\n+          \"Checking \"\n+              + managedDependency\n+              + \" (\"\n+              + (count++)\n+              + \"/\"\n+              + managedDependencies.size()\n+              + \")\");\n+\n+      ClassPathBuilder classPathBuilder = new ClassPathBuilder();\n+      ClassPathResult result = classPathBuilder.resolve(ImmutableList.of(managedDependency), false);\n+\n+      LinkageChecker linkageChecker =\n+          LinkageChecker.create(result.getClassPath(), result.getClassPath(), exclusionFile);\n+\n+      ImmutableSet<LinkageProblem> linkageProblems = linkageChecker.findLinkageProblems();\n+\n+      ImmutableSet<LinkageProblem> invalidJdkReferences =\n+          linkageProblems.stream()\n+              .filter(problem -> problem.getSymbol().getClassBinaryName().startsWith(\"java.\"))\n+              .collect(toImmutableSet());\n+\n+      if (!invalidJdkReferences.isEmpty()) {\n+        invalidJdkReferences.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwNzg3NQ=="}, "originalCommit": {"oid": "5d778a567222ddc02a56e92ea2b6da43c91d662e"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMDc5OTI2OnYy", "diffSide": "RIGHT", "path": "dependencies/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzoxOTowOVrOHMwVAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNzoxOTowOVrOHMwVAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzEzNjc3MQ==", "bodyText": "Now the exclusion file is passed to the program as the second argument.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1625#discussion_r483136771", "createdAt": "2020-09-03T17:19:09Z", "author": {"login": "suztomo"}, "path": "dependencies/pom.xml", "diffHunk": "@@ -120,4 +120,26 @@\n       <scope>test</scope>\n     </dependency>\n   </dependencies>\n+\n+  <profiles>\n+    <profile>\n+      <id>java8-incompatible-reference-check</id>\n+      <build>\n+        <plugins>\n+          <plugin>\n+            <groupId>org.codehaus.mojo</groupId>\n+            <artifactId>exec-maven-plugin</artifactId>\n+            <configuration>\n+              <skip>false</skip>\n+              <mainClass>com.google.cloud.tools.opensource.dependencies.Java8IncompatibleReferenceCheck</mainClass>\n+              <arguments>\n+                <argument>../boms/cloud-oss-bom/pom.xml</argument>\n+                <argument>src/main/resources/java8-incompatible-reference-check-exclusion.xml</argument>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e75533a2c456142d611fd4a5ae2a6a3e9e472259"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2523, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}