{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4Nzg5MDYy", "number": 1371, "title": "LinkageCheckerRule to use ClassPathResult regardless of DependencySection value", "bodyText": "fixes #1372\nInitially this started towards #1369 . By using ClassPathResult for non-BOM projects, this PR also found and fixes a bug #1372 .\n\nFor #1369, LinkageCheckerRule needs to access a dependency tree.\nIn LinkageCheckerRule, it is not easy to access the tree.\n\nFor a BOM project (DependencySection == DEPENDENCY_MANAGEMENT), it uses ClassPathResult, which has DependencyPaths as dependency tree.\nFor a non-BOM project (DependencySection == DEPENDENCIES), it uses Maven's DependencyResolutionResult as dependency tree.\n\n\nFor consistency, this PR converts DependencyResolutionResult to ClassPathResult, so that DependencyPaths represent dependency tree for both BOM case and non-BOM case.\nThis fixes #1372 , where entry point JARs were not selected correctly.\nWhen I tried to use DependencyGraphBuilder.levelOrder to do the conversion, I noticed it throws NullPointerException. DependencyPath could not represent a dependency path in Maven project's dependency tree, because DependencyPath was assuming every node in a tree is a dependency, whereas the root of the tree is not a dependency.\nWith this PR, DependencyPath can represent a path in Maven project's dependency tree, which Maven enforcer rule generates. The tree's root node is not a dependency (a Maven project, in which you run mvn command, is not a dependency).", "createdAt": "2020-04-24T22:16:36Z", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371", "merged": true, "mergeCommit": {"oid": "7b51cdede500e6a414880023ba1605435256b87c"}, "closed": true, "closedAt": "2020-04-29T20:42:00Z", "author": {"login": "suztomo"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcazmpWgH2gAyNDA4Nzg5MDYyOmJmNjVhMzNmZjhhYjdlZGMxNWFmOGVmZDUxYjI3MzNhOGJhNDljMTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcceCiSgFqTQwMjk5MTEwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bf65a33ff8ab7edc15af8efd51b2733a8ba49c13", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/bf65a33ff8ab7edc15af8efd51b2733a8ba49c13", "committedDate": "2020-04-24T15:55:29Z", "message": "Adding more tests for enforcer rules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7759cff287ff02ae34e47c9be43be8b6a30cedb6", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/7759cff287ff02ae34e47c9be43be8b6a30cedb6", "committedDate": "2020-04-24T15:56:44Z", "message": "comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92eb1cc8615a1d38baec4d040ece84d11e09449c", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/92eb1cc8615a1d38baec4d040ece84d11e09449c", "committedDate": "2020-04-24T18:23:26Z", "message": "Merge remote-tracking branch 'origin/master' into i1369"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6341267a0dd980a86bca3aa9ca6dd1690d46b1bf", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/6341267a0dd980a86bca3aa9ca6dd1690d46b1bf", "committedDate": "2020-04-24T19:42:17Z", "message": "DependencyPath to hold root"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f893686f01fbebb4e530bd9b6828b360de73e5a", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/6f893686f01fbebb4e530bd9b6828b360de73e5a", "committedDate": "2020-04-24T22:04:15Z", "message": "DependencyPath.appended"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMzAxOTUz", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#pullrequestreview-400301953", "createdAt": "2020-04-24T22:17:52Z", "commit": {"oid": "6f893686f01fbebb4e530bd9b6828b360de73e5a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMjoxNzo1MlrOGLrH2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMjoxNzo1MlrOGLrH2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg5NDA0MQ==", "bodyText": "LinkageCheckerRule uses this to convert Maven's DependencyNode to our DependencyGraph.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r414894041", "createdAt": "2020-04-24T22:17:52Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -262,22 +264,20 @@ public static UnresolvableArtifactProblem createUnresolvableArtifactProblem(\n    *\n    * @param firstNode node to start traversal\n    */\n-  private DependencyGraph levelOrder(DependencyNode firstNode) {\n+  public static DependencyGraph levelOrder(DependencyNode firstNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f893686f01fbebb4e530bd9b6828b360de73e5a"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94e8ff2c4ba9cff09ee2d8ac2c79e75237d113fb", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/94e8ff2c4ba9cff09ee2d8ac2c79e75237d113fb", "committedDate": "2020-04-27T16:10:33Z", "message": "Merge remote-tracking branch 'origin/master' into i1369"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f373b0122f69eda08b1b87d7dd9053e7c76279e4", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/f373b0122f69eda08b1b87d7dd9053e7c76279e4", "committedDate": "2020-04-27T19:58:53Z", "message": "DependencyPath formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acd20b44ac8980d58cea0753a68a842609cc6402", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/acd20b44ac8980d58cea0753a68a842609cc6402", "committedDate": "2020-04-27T20:08:50Z", "message": "reverted unnecessary import changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b4b7c88f064d4a0481766d84641703df0455a74", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/3b4b7c88f064d4a0481766d84641703df0455a74", "committedDate": "2020-04-27T21:46:20Z", "message": "Fixed formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f09838176df133eed06e3171666b993bbc13377c", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/f09838176df133eed06e3171666b993bbc13377c", "committedDate": "2020-04-27T22:08:46Z", "message": "Fixed a test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5218e1531436693d8619e6992222577a5a3b9791", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/5218e1531436693d8619e6992222577a5a3b9791", "committedDate": "2020-04-28T14:31:18Z", "message": "Merge remote-tracking branch 'origin/master' into i1369"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d91e31524a1ddf47f51692c8e5af528883ec73c1", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/d91e31524a1ddf47f51692c8e5af528883ec73c1", "committedDate": "2020-04-28T14:55:02Z", "message": "fixed root handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd7b2918931c984c07d4527da2b4ede8241bdfee", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/fd7b2918931c984c07d4527da2b4ede8241bdfee", "committedDate": "2020-04-28T15:23:52Z", "message": "Fixed test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "361d98cba2308f17007661268c7eb2f88a86701b", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/361d98cba2308f17007661268c7eb2f88a86701b", "committedDate": "2020-04-28T16:21:40Z", "message": "debugging empty tree"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cac005fdd1bd0bc34b8a28dd3967848e3cd26f4", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/5cac005fdd1bd0bc34b8a28dd3967848e3cd26f4", "committedDate": "2020-04-28T17:52:55Z", "message": "Test case that fails"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ef7463fbe725f5807bd97f4297797b75a985b6d", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/0ef7463fbe725f5807bd97f4297797b75a985b6d", "committedDate": "2020-04-28T18:12:46Z", "message": "Tree's root's parent is the root itself"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "583683c1c2e8bc05904975e13add4a767cdcb235", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/583683c1c2e8bc05904975e13add4a767cdcb235", "committedDate": "2020-04-28T21:15:50Z", "message": "Fixed dashboard"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bef48230c2290dd8a74177d467c17de9019493b", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/3bef48230c2290dd8a74177d467c17de9019493b", "committedDate": "2020-04-28T22:13:11Z", "message": "Fixed Test setup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "923b97c51e738f16469892b72fa7eb5765ec9ce0", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/923b97c51e738f16469892b72fa7eb5765ec9ce0", "committedDate": "2020-04-28T22:40:10Z", "message": "Path formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d9a732752362e3671cb5c264ee66e2f52f94e6f", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/9d9a732752362e3671cb5c264ee66e2f52f94e6f", "committedDate": "2020-04-29T01:53:54Z", "message": "Merge remote-tracking branch 'origin/master' into i1369"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9f1e6c262ebb5b9fb989e189bab565c88a338b6", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/a9f1e6c262ebb5b9fb989e189bab565c88a338b6", "committedDate": "2020-04-29T02:17:17Z", "message": "DependencyPath as immutable objects"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMjIyOTQ5", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#pullrequestreview-402222949", "createdAt": "2020-04-28T21:24:21Z", "commit": {"oid": "583683c1c2e8bc05904975e13add4a767cdcb235"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToyNDoyMVrOGNnhVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwMjowNTowNVrOGNtXmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzMjE4Mw==", "bodyText": "The new method DependencyPath.appended(...) works nicely when instantiating an instance.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r416932183", "createdAt": "2020-04-28T21:24:21Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassPathResultTest.java", "diffHunk": "@@ -26,36 +26,33 @@\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.ImmutableSetMultimap;\n import com.google.common.collect.UnmodifiableIterator;\n-import java.io.IOException;\n import java.nio.file.Paths;\n import org.eclipse.aether.artifact.Artifact;\n import org.eclipse.aether.artifact.DefaultArtifact;\n import org.eclipse.aether.graph.Dependency;\n-import org.junit.Before;\n import org.junit.Test;\n \n public class ClassPathResultTest {\n-  private Artifact artifactA = new DefaultArtifact(\"com.google:a:1\");\n-  private Artifact artifactB = new DefaultArtifact(\"com.google:b:1\");\n-  private DependencyPath dependencyPath_A = new DependencyPath();\n-  private DependencyPath dependencyPath_B = new DependencyPath();\n-  private DependencyPath dependencyPath_B_A = new DependencyPath();\n-  private DependencyPath dependencyPath_A_B_A = new DependencyPath();\n-  private ClassPathEntry jarA = new ClassPathEntry(Paths.get(\"a.jar\"));\n-  private ClassPathEntry jarB = new ClassPathEntry(Paths.get(\"b.jar\"));;\n-\n-  @Before\n-  public void setup() throws IOException {\n-    dependencyPath_A.add(new Dependency(artifactA, \"compile\"));\n-    dependencyPath_B.add(new Dependency(artifactB, \"compile\"));\n-\n-    dependencyPath_B_A.add(new Dependency(artifactB, \"compile\"));\n-    dependencyPath_B_A.add(new Dependency(artifactA, \"compile\"));\n-\n-    dependencyPath_A_B_A.add(new Dependency(artifactA, \"compile\"));\n-    dependencyPath_A_B_A.add(new Dependency(artifactB, \"compile\"));\n-    dependencyPath_A_B_A.add(new Dependency(artifactA, \"compile\"));\n-  }\n+  private Artifact artifactA =\n+      new DefaultArtifact(\"com.google:a:1\").setFile(Paths.get(\"a.jar\").toFile());\n+  private Artifact artifactB =\n+      new DefaultArtifact(\"com.google:b:1\").setFile(Paths.get(\"b.jar\").toFile());\n+  private DependencyPath dependencyPath_A =\n+      new DependencyPath(null).appended(new Dependency(artifactA, \"compile\"));\n+  private DependencyPath dependencyPath_B =\n+      new DependencyPath(null).appended(new Dependency(artifactB, \"compile\"));\n+  private DependencyPath dependencyPath_B_A =\n+      new DependencyPath(null)\n+          .appended(new Dependency(artifactB, \"compile\"))\n+          .appended(new Dependency(artifactA, \"compile\"));\n+  private DependencyPath dependencyPath_A_B_A =\n+      new DependencyPath(null)\n+          .appended(new Dependency(artifactA, \"compile\"))\n+          .appended(new Dependency(artifactB, \"compile\"))\n+          .appended(new Dependency(artifactA, \"compile\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "583683c1c2e8bc05904975e13add4a767cdcb235"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzMjcwMA==", "bodyText": "DependencyPath.appended makes these code simpler.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r416932700", "createdAt": "2020-04-28T21:25:19Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -262,22 +264,20 @@ public static UnresolvableArtifactProblem createUnresolvableArtifactProblem(\n    *\n    * @param firstNode node to start traversal\n    */\n-  private DependencyGraph levelOrder(DependencyNode firstNode) {\n+  public static DependencyGraph levelOrder(DependencyNode firstNode) {\n \n     DependencyGraph graph = new DependencyGraph();\n \n     Queue<LevelOrderQueueItem> queue = new ArrayDeque<>();\n-    queue.add(new LevelOrderQueueItem(firstNode, new ArrayDeque<>()));\n+    queue.add(new LevelOrderQueueItem(firstNode, null));\n \n     while (!queue.isEmpty()) {\n       LevelOrderQueueItem item = queue.poll();\n       DependencyNode dependencyNode = item.dependencyNode;\n-      DependencyPath path = new DependencyPath();\n-      ArrayDeque<DependencyNode> parentNodes = item.parentNodes;\n-      parentNodes.forEach(\n-          parentNode -> path.add(parentNode.getDependency()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "583683c1c2e8bc05904975e13add4a767cdcb235"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzMzY4Mw==", "bodyText": "parentPath.appended returns a clone.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r416933683", "createdAt": "2020-04-28T21:26:56Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -287,21 +287,23 @@ private DependencyGraph levelOrder(DependencyNode firstNode) {\n         // dependency mediation always picks up g1:a1:2.0 over g1:a1:1.0.\n         String groupIdAndArtifactId = Artifacts.makeKey(artifact);\n         boolean parentHasSameKey =\n-            parentNodes.stream()\n-                .map(node -> Artifacts.makeKey(node.getArtifact()))\n+            parentPath.getArtifacts().stream()\n+                .map(Artifacts::makeKey)\n                 .anyMatch(key -> key.equals(groupIdAndArtifactId));\n         if (parentHasSameKey) {\n           continue;\n         }\n-\n-        path.add(dependencyNode.getDependency());\n-        parentNodes.add(dependencyNode);\n-        graph.addPath(path);\n       }\n-      \n+\n+      // parentPath is null for the first item\n+      DependencyPath path =\n+          parentPath == null\n+              ? new DependencyPath(artifact)\n+              : parentPath.appended(dependencyNode.getDependency());\n+      graph.addPath(path);\n+\n       for (DependencyNode child : dependencyNode.getChildren()) {\n-        ArrayDeque<DependencyNode> clone = parentNodes.clone();\n-        queue.add(new LevelOrderQueueItem(child, clone));\n+        queue.add(new LevelOrderQueueItem(child, path));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "583683c1c2e8bc05904975e13add4a767cdcb235"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAyNjgwOA==", "bodyText": "This test case was wrong ( #1372). The class path generated by com.google.api-client:google-api-client:1.27.0 and io.grpc:grpc-core:1.17.1 have reachable linkage errors for io.grpc.internal.ServiceConfigInterceptor.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417026808", "createdAt": "2020-04-29T01:59:51Z", "author": {"login": "suztomo"}, "path": "enforcer-rules/src/it/report-only-reachable/invoker.properties", "diffHunk": "@@ -1,2 +1,2 @@\n invoker.goals=verify\n-invoker.buildResult=success\n+invoker.buildResult=failure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d9a732752362e3671cb5c264ee66e2f52f94e6f"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzAyNzk5NQ==", "bodyText": "This code is the main purpose of this PR: to get ClassPathResult for non-BOM project.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417027995", "createdAt": "2020-04-29T02:05:05Z", "author": {"login": "suztomo"}, "path": "enforcer-rules/src/main/java/com/google/cloud/tools/dependencies/enforcer/LinkageCheckerRule.java", "diffHunk": "@@ -311,30 +317,41 @@ public void execute(@Nonnull EnforcerRuleHelper helper) throws EnforcerRuleExcep\n       throw new EnforcerRuleException(\"Unable to collect dependencies\", resolutionException);\n     } else {\n       // The exception is acceptable enough to build a class path.\n-      return buildClasspath(result);\n+      return buildClassPathResult(result);\n     }\n   }\n \n-  private ImmutableList<ClassPathEntry> buildClasspath(DependencyResolutionResult result)\n+  private ClassPathResult buildClassPathResult(DependencyResolutionResult result)\n       throws EnforcerRuleException {\n-    ImmutableList.Builder<ClassPathEntry> builder = ImmutableList.builder();\n-\n     // The root node must have the project's JAR file\n     File rootFile = result.getDependencyGraph().getArtifact().getFile();\n     if (rootFile == null) {\n       throw new EnforcerRuleException(\"The root project artifact is not associated with a file.\");\n     }\n-    builder.add(new ClassPathEntry(result.getDependencyGraph().getArtifact()));\n-    // The rest are the dependencies\n-    for (Dependency dependency : result.getResolvedDependencies()) {\n-      // Resolved dependencies are guaranteed to have files.\n-      builder.add(new ClassPathEntry(dependency.getArtifact()));\n+\n+    List<Dependency> unresolvedDependencies = result.getUnresolvedDependencies();\n+    Set<Artifact> unresolvedArtifacts =\n+        unresolvedDependencies.stream().map(Dependency::getArtifact).collect(toImmutableSet());\n+\n+    DependencyGraph dependencyGraph =\n+        DependencyGraphBuilder.levelOrder(result.getDependencyGraph());\n+    ImmutableListMultimap.Builder<ClassPathEntry, DependencyPath> builder =\n+        ImmutableListMultimap.builder();\n+    ImmutableList.Builder<UnresolvableArtifactProblem> problems = ImmutableList.builder();\n+    for (DependencyPath path : dependencyGraph.list()) {\n+      Artifact artifact = path.getLeaf();\n+\n+      if (unresolvedArtifacts.contains(artifact)) {\n+        problems.add(new UnresolvableArtifactProblem(artifact));\n+      } else {\n+        builder.put(new ClassPathEntry(artifact), path);\n+      }\n     }\n-    return builder.build();\n+    return new ClassPathResult(builder.build(), problems.build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d9a732752362e3671cb5c264ee66e2f52f94e6f"}, "originalPosition": 142}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNjQ3MTc2", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#pullrequestreview-402647176", "createdAt": "2020-04-29T13:08:37Z", "commit": {"oid": "a9f1e6c262ebb5b9fb989e189bab565c88a338b6"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzowODozN1rOGN9-Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxMzozMzoyOVrOGN_BEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMwMDAwMw==", "bodyText": "I'm not sure this method should be renamed like this. In general shorter names are easier to follow. Partly this is confusing because of the use of the ImmutableSetMultimap instead of a more specific class so you're trying to capture details in the method name that really belong in the return type.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417300003", "createdAt": "2020-04-29T13:08:37Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathResult.java", "diffHunk": "@@ -95,14 +95,15 @@ public String formatDependencyPaths(Iterable<ClassPathEntry> entries) {\n   }\n \n   /**\n-   * Returns mapping from the Maven coordinates to class path entries that are in the dependency\n-   * tree.\n+   * Returns mapping from the Maven coordinates to {@link ClassPathEntry}. The keys are the\n+   * coordinates of the direct dependencies of the root nodes in {@link #dependencyPaths}. The\n+   * values are all {@link ClassPathEntry}s in the subtree of the key.\n    */\n-  public ImmutableSetMultimap<String, ClassPathEntry> coordinatesToClassPathEntry() {\n+  public ImmutableSetMultimap<String, ClassPathEntry> coordinatesToClassPathEntriesInSubtree() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f1e6c262ebb5b9fb989e189bab565c88a338b6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMwOTcwNQ==", "bodyText": "\"appended\" is strangely phrased. Usually this would be a present tense verb.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417309705", "createdAt": "2020-04-29T13:23:28Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyPath.java", "diffHunk": "@@ -25,52 +25,88 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n import org.eclipse.aether.artifact.Artifact;\n import org.eclipse.aether.graph.Dependency;\n \n /**\n- * Path from the root to a node in a dependency tree, where a node is a dependency.\n+ * Path from the root to a node in a dependency tree, where the root node is a Maven artifact and\n+ * non-root nodes are dependencies.\n+ *\n+ * <p>The root node is null for the dependency trees generated for multiple artifacts by {@link\n+ * DependencyGraphBuilder#buildFullDependencyGraph(List)}; otherwise the root node is not null.\n  */\n public final class DependencyPath {\n \n-  private List<Dependency> path = new ArrayList<>();\n+  // The root of the dependency path. The project root is not a dependency.\n+  private final Artifact root;\n+  // Path without the root\n+  private final List<Dependency> path = new ArrayList<>();\n+\n+  public DependencyPath(@Nullable Artifact root) {\n+    this.root = root;\n+  }\n \n   @VisibleForTesting\n-  public void add(Dependency dependency) {\n-    path.add(dependency);\n+  public DependencyPath appended(Dependency dependency) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f1e6c262ebb5b9fb989e189bab565c88a338b6"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxMTUwOA==", "bodyText": "The separation here is confusing and makes this class more complex. Why isn't the root just the first node in the path? At the very least the public API and documentation can present it as such, even if the internal implementation is more complex.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417311508", "createdAt": "2020-04-29T13:25:57Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyPath.java", "diffHunk": "@@ -25,52 +25,88 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n import org.eclipse.aether.artifact.Artifact;\n import org.eclipse.aether.graph.Dependency;\n \n /**\n- * Path from the root to a node in a dependency tree, where a node is a dependency.\n+ * Path from the root to a node in a dependency tree, where the root node is a Maven artifact and\n+ * non-root nodes are dependencies.\n+ *\n+ * <p>The root node is null for the dependency trees generated for multiple artifacts by {@link\n+ * DependencyGraphBuilder#buildFullDependencyGraph(List)}; otherwise the root node is not null.\n  */\n public final class DependencyPath {\n \n-  private List<Dependency> path = new ArrayList<>();\n+  // The root of the dependency path. The project root is not a dependency.\n+  private final Artifact root;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f1e6c262ebb5b9fb989e189bab565c88a338b6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxMjI3Ng==", "bodyText": "It occurs to me here that paths don't have roots. Can we rewrite this as simply a path without reference to dependency trees? We can still use it in the dependency tree, but this class doesn't need to know that.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417312276", "createdAt": "2020-04-29T13:26:56Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyPath.java", "diffHunk": "@@ -25,52 +25,88 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n import org.eclipse.aether.artifact.Artifact;\n import org.eclipse.aether.graph.Dependency;\n \n /**\n- * Path from the root to a node in a dependency tree, where a node is a dependency.\n+ * Path from the root to a node in a dependency tree, where the root node is a Maven artifact and", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f1e6c262ebb5b9fb989e189bab565c88a338b6"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxMzAxMg==", "bodyText": "why is this not just the length of the path? That is, why does the documentation reflect the implementation?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417313012", "createdAt": "2020-04-29T13:27:55Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyPath.java", "diffHunk": "@@ -25,52 +25,88 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n import org.eclipse.aether.artifact.Artifact;\n import org.eclipse.aether.graph.Dependency;\n \n /**\n- * Path from the root to a node in a dependency tree, where a node is a dependency.\n+ * Path from the root to a node in a dependency tree, where the root node is a Maven artifact and\n+ * non-root nodes are dependencies.\n+ *\n+ * <p>The root node is null for the dependency trees generated for multiple artifacts by {@link\n+ * DependencyGraphBuilder#buildFullDependencyGraph(List)}; otherwise the root node is not null.\n  */\n public final class DependencyPath {\n \n-  private List<Dependency> path = new ArrayList<>();\n+  // The root of the dependency path. The project root is not a dependency.\n+  private final Artifact root;\n+  // Path without the root\n+  private final List<Dependency> path = new ArrayList<>();\n+\n+  public DependencyPath(@Nullable Artifact root) {\n+    this.root = root;\n+  }\n \n   @VisibleForTesting\n-  public void add(Dependency dependency) {\n-    path.add(dependency);\n+  public DependencyPath appended(Dependency dependency) {\n+    DependencyPath copy = new DependencyPath(root);\n+    for (Dependency value : path) {\n+      copy.path.add(value);\n+    }\n+    copy.path.add(dependency);\n+    return copy;\n   }\n \n-  /** Returns the length of the path. */\n+  /** Returns the length of the path plus the root. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f1e6c262ebb5b9fb989e189bab565c88a338b6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxMzU3OQ==", "bodyText": "Returns the artifact at the end of the path", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417313579", "createdAt": "2020-04-29T13:28:38Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyPath.java", "diffHunk": "@@ -25,52 +25,88 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n import org.eclipse.aether.artifact.Artifact;\n import org.eclipse.aether.graph.Dependency;\n \n /**\n- * Path from the root to a node in a dependency tree, where a node is a dependency.\n+ * Path from the root to a node in a dependency tree, where the root node is a Maven artifact and\n+ * non-root nodes are dependencies.\n+ *\n+ * <p>The root node is null for the dependency trees generated for multiple artifacts by {@link\n+ * DependencyGraphBuilder#buildFullDependencyGraph(List)}; otherwise the root node is not null.\n  */\n public final class DependencyPath {\n \n-  private List<Dependency> path = new ArrayList<>();\n+  // The root of the dependency path. The project root is not a dependency.\n+  private final Artifact root;\n+  // Path without the root\n+  private final List<Dependency> path = new ArrayList<>();\n+\n+  public DependencyPath(@Nullable Artifact root) {\n+    this.root = root;\n+  }\n \n   @VisibleForTesting\n-  public void add(Dependency dependency) {\n-    path.add(dependency);\n+  public DependencyPath appended(Dependency dependency) {\n+    DependencyPath copy = new DependencyPath(root);\n+    for (Dependency value : path) {\n+      copy.path.add(value);\n+    }\n+    copy.path.add(dependency);\n+    return copy;\n   }\n \n-  /** Returns the length of the path. */\n+  /** Returns the length of the path plus the root. */\n   public int size() {\n-    return path.size();\n+    return path.size() + 1;\n   }\n \n   /** Returns the artifact in the leaf (the furthest node from the node) of the path. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f1e6c262ebb5b9fb989e189bab565c88a338b6"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxNDI0OA==", "bodyText": "parent node of the leaf --> second to last node in the path", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417314248", "createdAt": "2020-04-29T13:29:31Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyPath.java", "diffHunk": "@@ -25,52 +25,88 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n import org.eclipse.aether.artifact.Artifact;\n import org.eclipse.aether.graph.Dependency;\n \n /**\n- * Path from the root to a node in a dependency tree, where a node is a dependency.\n+ * Path from the root to a node in a dependency tree, where the root node is a Maven artifact and\n+ * non-root nodes are dependencies.\n+ *\n+ * <p>The root node is null for the dependency trees generated for multiple artifacts by {@link\n+ * DependencyGraphBuilder#buildFullDependencyGraph(List)}; otherwise the root node is not null.\n  */\n public final class DependencyPath {\n \n-  private List<Dependency> path = new ArrayList<>();\n+  // The root of the dependency path. The project root is not a dependency.\n+  private final Artifact root;\n+  // Path without the root\n+  private final List<Dependency> path = new ArrayList<>();\n+\n+  public DependencyPath(@Nullable Artifact root) {\n+    this.root = root;\n+  }\n \n   @VisibleForTesting\n-  public void add(Dependency dependency) {\n-    path.add(dependency);\n+  public DependencyPath appended(Dependency dependency) {\n+    DependencyPath copy = new DependencyPath(root);\n+    for (Dependency value : path) {\n+      copy.path.add(value);\n+    }\n+    copy.path.add(dependency);\n+    return copy;\n   }\n \n-  /** Returns the length of the path. */\n+  /** Returns the length of the path plus the root. */\n   public int size() {\n-    return path.size();\n+    return path.size() + 1;\n   }\n \n   /** Returns the artifact in the leaf (the furthest node from the node) of the path. */\n   public Artifact getLeaf() {\n-    return path.get(size() - 1).getArtifact();\n+    if (path.isEmpty()) {\n+      return root;\n+    } else {\n+      return path.get(path.size() - 1).getArtifact();\n+    }\n   }\n \n-  /** Returns the list of artifact in the path. */\n+  /** Returns the list of artifacts in the path, including the root if it's not null. */\n   public ImmutableList<Artifact> getArtifacts() {\n-    return path.stream().map(Dependency::getArtifact).collect(toImmutableList());\n+    ImmutableList.Builder<Artifact> builder = ImmutableList.builder();\n+\n+    if (root != null) {\n+      builder.add(root);\n+    }\n+    path.stream().map(Dependency::getArtifact).forEach(builder::add);\n+    return builder.build();\n+  }\n+\n+  /** Returns the root of the dependency path. */\n+  @Nullable\n+  public Artifact getRoot() {\n+    return root;\n   }\n \n   /**\n    * Returns the artifact at {@code i}th node in the path. The {@code 0}th element is the root of\n    * the dependency tree.\n    */\n   public Artifact get(int i) {\n-    return path.get(i).getArtifact();\n+    if (i == 0) {\n+      return root;\n+    }\n+    return path.get(i - 1).getArtifact();\n   }\n \n   /**\n    * Returns the dependency path of the parent node of the leaf. Empty dependency path if the leaf", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f1e6c262ebb5b9fb989e189bab565c88a338b6"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxNTQzMg==", "bodyText": "should this be named \"append\"?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417315432", "createdAt": "2020-04-29T13:31:10Z", "author": {"login": "elharo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassPathResultTest.java", "diffHunk": "@@ -26,36 +26,33 @@\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.ImmutableSetMultimap;\n import com.google.common.collect.UnmodifiableIterator;\n-import java.io.IOException;\n import java.nio.file.Paths;\n import org.eclipse.aether.artifact.Artifact;\n import org.eclipse.aether.artifact.DefaultArtifact;\n import org.eclipse.aether.graph.Dependency;\n-import org.junit.Before;\n import org.junit.Test;\n \n public class ClassPathResultTest {\n-  private Artifact artifactA = new DefaultArtifact(\"com.google:a:1\");\n-  private Artifact artifactB = new DefaultArtifact(\"com.google:b:1\");\n-  private DependencyPath dependencyPath_A = new DependencyPath();\n-  private DependencyPath dependencyPath_B = new DependencyPath();\n-  private DependencyPath dependencyPath_B_A = new DependencyPath();\n-  private DependencyPath dependencyPath_A_B_A = new DependencyPath();\n-  private ClassPathEntry jarA = new ClassPathEntry(Paths.get(\"a.jar\"));\n-  private ClassPathEntry jarB = new ClassPathEntry(Paths.get(\"b.jar\"));;\n-\n-  @Before\n-  public void setup() throws IOException {\n-    dependencyPath_A.add(new Dependency(artifactA, \"compile\"));\n-    dependencyPath_B.add(new Dependency(artifactB, \"compile\"));\n-\n-    dependencyPath_B_A.add(new Dependency(artifactB, \"compile\"));\n-    dependencyPath_B_A.add(new Dependency(artifactA, \"compile\"));\n-\n-    dependencyPath_A_B_A.add(new Dependency(artifactA, \"compile\"));\n-    dependencyPath_A_B_A.add(new Dependency(artifactB, \"compile\"));\n-    dependencyPath_A_B_A.add(new Dependency(artifactA, \"compile\"));\n-  }\n+  private Artifact artifactA =\n+      new DefaultArtifact(\"com.google:a:1\").setFile(Paths.get(\"a.jar\").toFile());\n+  private Artifact artifactB =\n+      new DefaultArtifact(\"com.google:b:1\").setFile(Paths.get(\"b.jar\").toFile());\n+  private DependencyPath dependencyPath_A =\n+      new DependencyPath(null).appended(new Dependency(artifactA, \"compile\"));\n+  private DependencyPath dependencyPath_B =\n+      new DependencyPath(null).appended(new Dependency(artifactB, \"compile\"));\n+  private DependencyPath dependencyPath_B_A =\n+      new DependencyPath(null)\n+          .appended(new Dependency(artifactB, \"compile\"))\n+          .appended(new Dependency(artifactA, \"compile\"));\n+  private DependencyPath dependencyPath_A_B_A =\n+      new DependencyPath(null)\n+          .appended(new Dependency(artifactA, \"compile\"))\n+          .appended(new Dependency(artifactB, \"compile\"))\n+          .appended(new Dependency(artifactA, \"compile\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzMjE4Mw=="}, "originalCommit": {"oid": "583683c1c2e8bc05904975e13add4a767cdcb235"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxNzEzOA==", "bodyText": "I see a lot of copying of lists. It looks like appending a single element copies every item in the list, and then appending another element copies every item in the list again. This is probably N^2 performance and might be relevant given the size of some of our trees.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417317138", "createdAt": "2020-04-29T13:33:29Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyPath.java", "diffHunk": "@@ -25,52 +25,88 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n import org.eclipse.aether.artifact.Artifact;\n import org.eclipse.aether.graph.Dependency;\n \n /**\n- * Path from the root to a node in a dependency tree, where a node is a dependency.\n+ * Path from the root to a node in a dependency tree, where the root node is a Maven artifact and\n+ * non-root nodes are dependencies.\n+ *\n+ * <p>The root node is null for the dependency trees generated for multiple artifacts by {@link\n+ * DependencyGraphBuilder#buildFullDependencyGraph(List)}; otherwise the root node is not null.\n  */\n public final class DependencyPath {\n \n-  private List<Dependency> path = new ArrayList<>();\n+  // The root of the dependency path. The project root is not a dependency.\n+  private final Artifact root;\n+  // Path without the root\n+  private final List<Dependency> path = new ArrayList<>();\n+\n+  public DependencyPath(@Nullable Artifact root) {\n+    this.root = root;\n+  }\n \n   @VisibleForTesting\n-  public void add(Dependency dependency) {\n-    path.add(dependency);\n+  public DependencyPath appended(Dependency dependency) {\n+    DependencyPath copy = new DependencyPath(root);\n+    for (Dependency value : path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f1e6c262ebb5b9fb989e189bab565c88a338b6"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbb1b3bd6899200241290d47ac61c0385b2cf554", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/cbb1b3bd6899200241290d47ac61c0385b2cf554", "committedDate": "2020-04-29T14:37:44Z", "message": "Applied review\n\nappended -> append\nRemoved DependencyPath.getRoot in favor fo get(0)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNzAxNzM4", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#pullrequestreview-402701738", "createdAt": "2020-04-29T14:06:36Z", "commit": {"oid": "a9f1e6c262ebb5b9fb989e189bab565c88a338b6"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDowNjozNlrOGOAjIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNDozNTo0MlrOGOB8vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM0MjI0Mw==", "bodyText": "Reverted the renaming.\nRight, I suffered from the vague type while I was debugging the purpose of this method. It tries to fetch all JAR files in a subtree of a Maven artifact but the method name was just rephrasing its return type. Updating Javadoc should suffice.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417342243", "createdAt": "2020-04-29T14:06:36Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathResult.java", "diffHunk": "@@ -95,14 +95,15 @@ public String formatDependencyPaths(Iterable<ClassPathEntry> entries) {\n   }\n \n   /**\n-   * Returns mapping from the Maven coordinates to class path entries that are in the dependency\n-   * tree.\n+   * Returns mapping from the Maven coordinates to {@link ClassPathEntry}. The keys are the\n+   * coordinates of the direct dependencies of the root nodes in {@link #dependencyPaths}. The\n+   * values are all {@link ClassPathEntry}s in the subtree of the key.\n    */\n-  public ImmutableSetMultimap<String, ClassPathEntry> coordinatesToClassPathEntry() {\n+  public ImmutableSetMultimap<String, ClassPathEntry> coordinatesToClassPathEntriesInSubtree() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMwMDAwMw=="}, "originalCommit": {"oid": "a9f1e6c262ebb5b9fb989e189bab565c88a338b6"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM0OTQyNg==", "bodyText": "Updated as A sequence of Maven artifacts and dependency (scope and optional flag) in between.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417349426", "createdAt": "2020-04-29T14:15:54Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyPath.java", "diffHunk": "@@ -25,52 +25,88 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n import org.eclipse.aether.artifact.Artifact;\n import org.eclipse.aether.graph.Dependency;\n \n /**\n- * Path from the root to a node in a dependency tree, where a node is a dependency.\n+ * Path from the root to a node in a dependency tree, where the root node is a Maven artifact and", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxMjI3Ng=="}, "originalCommit": {"oid": "a9f1e6c262ebb5b9fb989e189bab565c88a338b6"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM1MTM1Nw==", "bodyText": "Removed getRoot() API in favor of get(0). Now the root and other artifacts are treated the same in get(int).\n\nWhy isn't the root just the first node in the path?\n\nIt's because the first node is an artifact (without a dependency). The other nodes are dependencies, carrying scope and optional flag.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417351357", "createdAt": "2020-04-29T14:18:20Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyPath.java", "diffHunk": "@@ -25,52 +25,88 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n import org.eclipse.aether.artifact.Artifact;\n import org.eclipse.aether.graph.Dependency;\n \n /**\n- * Path from the root to a node in a dependency tree, where a node is a dependency.\n+ * Path from the root to a node in a dependency tree, where the root node is a Maven artifact and\n+ * non-root nodes are dependencies.\n+ *\n+ * <p>The root node is null for the dependency trees generated for multiple artifacts by {@link\n+ * DependencyGraphBuilder#buildFullDependencyGraph(List)}; otherwise the root node is not null.\n  */\n public final class DependencyPath {\n \n-  private List<Dependency> path = new ArrayList<>();\n+  // The root of the dependency path. The project root is not a dependency.\n+  private final Artifact root;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxMTUwOA=="}, "originalCommit": {"oid": "a9f1e6c262ebb5b9fb989e189bab565c88a338b6"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM1MTkzMQ==", "bodyText": "Renamed to append.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417351931", "createdAt": "2020-04-29T14:19:02Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyPath.java", "diffHunk": "@@ -25,52 +25,88 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n import org.eclipse.aether.artifact.Artifact;\n import org.eclipse.aether.graph.Dependency;\n \n /**\n- * Path from the root to a node in a dependency tree, where a node is a dependency.\n+ * Path from the root to a node in a dependency tree, where the root node is a Maven artifact and\n+ * non-root nodes are dependencies.\n+ *\n+ * <p>The root node is null for the dependency trees generated for multiple artifacts by {@link\n+ * DependencyGraphBuilder#buildFullDependencyGraph(List)}; otherwise the root node is not null.\n  */\n public final class DependencyPath {\n \n-  private List<Dependency> path = new ArrayList<>();\n+  // The root of the dependency path. The project root is not a dependency.\n+  private final Artifact root;\n+  // Path without the root\n+  private final List<Dependency> path = new ArrayList<>();\n+\n+  public DependencyPath(@Nullable Artifact root) {\n+    this.root = root;\n+  }\n \n   @VisibleForTesting\n-  public void add(Dependency dependency) {\n-    path.add(dependency);\n+  public DependencyPath appended(Dependency dependency) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMwOTcwNQ=="}, "originalCommit": {"oid": "a9f1e6c262ebb5b9fb989e189bab565c88a338b6"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM1ODAyNg==", "bodyText": "levelOrder was already copying the list when building the dependency tree that consists of DependencyPaths\nhttps://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371/files#diff-659d7bf4148f942fcc1eb60a50a2ee80L275 .\nIn future, we can abandon DependencyPath in favor of our own node class to represent a tree. It would be something similar to Maven's DependencyNode, but with a parent field. Maven's DependencyNode does not know its parent; therefore, given a DependnecyNode, we cannot get the path from the root to the node.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417358026", "createdAt": "2020-04-29T14:26:47Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyPath.java", "diffHunk": "@@ -25,52 +25,88 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n import org.eclipse.aether.artifact.Artifact;\n import org.eclipse.aether.graph.Dependency;\n \n /**\n- * Path from the root to a node in a dependency tree, where a node is a dependency.\n+ * Path from the root to a node in a dependency tree, where the root node is a Maven artifact and\n+ * non-root nodes are dependencies.\n+ *\n+ * <p>The root node is null for the dependency trees generated for multiple artifacts by {@link\n+ * DependencyGraphBuilder#buildFullDependencyGraph(List)}; otherwise the root node is not null.\n  */\n public final class DependencyPath {\n \n-  private List<Dependency> path = new ArrayList<>();\n+  // The root of the dependency path. The project root is not a dependency.\n+  private final Artifact root;\n+  // Path without the root\n+  private final List<Dependency> path = new ArrayList<>();\n+\n+  public DependencyPath(@Nullable Artifact root) {\n+    this.root = root;\n+  }\n \n   @VisibleForTesting\n-  public void add(Dependency dependency) {\n-    path.add(dependency);\n+  public DependencyPath appended(Dependency dependency) {\n+    DependencyPath copy = new DependencyPath(root);\n+    for (Dependency value : path) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxNzEzOA=="}, "originalCommit": {"oid": "a9f1e6c262ebb5b9fb989e189bab565c88a338b6"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM1OTE4Mg==", "bodyText": "Reverted the javadoc change.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417359182", "createdAt": "2020-04-29T14:28:14Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyPath.java", "diffHunk": "@@ -25,52 +25,88 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n import org.eclipse.aether.artifact.Artifact;\n import org.eclipse.aether.graph.Dependency;\n \n /**\n- * Path from the root to a node in a dependency tree, where a node is a dependency.\n+ * Path from the root to a node in a dependency tree, where the root node is a Maven artifact and\n+ * non-root nodes are dependencies.\n+ *\n+ * <p>The root node is null for the dependency trees generated for multiple artifacts by {@link\n+ * DependencyGraphBuilder#buildFullDependencyGraph(List)}; otherwise the root node is not null.\n  */\n public final class DependencyPath {\n \n-  private List<Dependency> path = new ArrayList<>();\n+  // The root of the dependency path. The project root is not a dependency.\n+  private final Artifact root;\n+  // Path without the root\n+  private final List<Dependency> path = new ArrayList<>();\n+\n+  public DependencyPath(@Nullable Artifact root) {\n+    this.root = root;\n+  }\n \n   @VisibleForTesting\n-  public void add(Dependency dependency) {\n-    path.add(dependency);\n+  public DependencyPath appended(Dependency dependency) {\n+    DependencyPath copy = new DependencyPath(root);\n+    for (Dependency value : path) {\n+      copy.path.add(value);\n+    }\n+    copy.path.add(dependency);\n+    return copy;\n   }\n \n-  /** Returns the length of the path. */\n+  /** Returns the length of the path plus the root. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxMzAxMg=="}, "originalCommit": {"oid": "a9f1e6c262ebb5b9fb989e189bab565c88a338b6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM1OTUxMA==", "bodyText": "Updated", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417359510", "createdAt": "2020-04-29T14:28:37Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyPath.java", "diffHunk": "@@ -25,52 +25,88 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n import org.eclipse.aether.artifact.Artifact;\n import org.eclipse.aether.graph.Dependency;\n \n /**\n- * Path from the root to a node in a dependency tree, where a node is a dependency.\n+ * Path from the root to a node in a dependency tree, where the root node is a Maven artifact and\n+ * non-root nodes are dependencies.\n+ *\n+ * <p>The root node is null for the dependency trees generated for multiple artifacts by {@link\n+ * DependencyGraphBuilder#buildFullDependencyGraph(List)}; otherwise the root node is not null.\n  */\n public final class DependencyPath {\n \n-  private List<Dependency> path = new ArrayList<>();\n+  // The root of the dependency path. The project root is not a dependency.\n+  private final Artifact root;\n+  // Path without the root\n+  private final List<Dependency> path = new ArrayList<>();\n+\n+  public DependencyPath(@Nullable Artifact root) {\n+    this.root = root;\n+  }\n \n   @VisibleForTesting\n-  public void add(Dependency dependency) {\n-    path.add(dependency);\n+  public DependencyPath appended(Dependency dependency) {\n+    DependencyPath copy = new DependencyPath(root);\n+    for (Dependency value : path) {\n+      copy.path.add(value);\n+    }\n+    copy.path.add(dependency);\n+    return copy;\n   }\n \n-  /** Returns the length of the path. */\n+  /** Returns the length of the path plus the root. */\n   public int size() {\n-    return path.size();\n+    return path.size() + 1;\n   }\n \n   /** Returns the artifact in the leaf (the furthest node from the node) of the path. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxMzU3OQ=="}, "originalCommit": {"oid": "a9f1e6c262ebb5b9fb989e189bab565c88a338b6"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM2MDMzMw==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417360333", "createdAt": "2020-04-29T14:29:33Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyPath.java", "diffHunk": "@@ -25,52 +25,88 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n import org.eclipse.aether.artifact.Artifact;\n import org.eclipse.aether.graph.Dependency;\n \n /**\n- * Path from the root to a node in a dependency tree, where a node is a dependency.\n+ * Path from the root to a node in a dependency tree, where the root node is a Maven artifact and\n+ * non-root nodes are dependencies.\n+ *\n+ * <p>The root node is null for the dependency trees generated for multiple artifacts by {@link\n+ * DependencyGraphBuilder#buildFullDependencyGraph(List)}; otherwise the root node is not null.\n  */\n public final class DependencyPath {\n \n-  private List<Dependency> path = new ArrayList<>();\n+  // The root of the dependency path. The project root is not a dependency.\n+  private final Artifact root;\n+  // Path without the root\n+  private final List<Dependency> path = new ArrayList<>();\n+\n+  public DependencyPath(@Nullable Artifact root) {\n+    this.root = root;\n+  }\n \n   @VisibleForTesting\n-  public void add(Dependency dependency) {\n-    path.add(dependency);\n+  public DependencyPath appended(Dependency dependency) {\n+    DependencyPath copy = new DependencyPath(root);\n+    for (Dependency value : path) {\n+      copy.path.add(value);\n+    }\n+    copy.path.add(dependency);\n+    return copy;\n   }\n \n-  /** Returns the length of the path. */\n+  /** Returns the length of the path plus the root. */\n   public int size() {\n-    return path.size();\n+    return path.size() + 1;\n   }\n \n   /** Returns the artifact in the leaf (the furthest node from the node) of the path. */\n   public Artifact getLeaf() {\n-    return path.get(size() - 1).getArtifact();\n+    if (path.isEmpty()) {\n+      return root;\n+    } else {\n+      return path.get(path.size() - 1).getArtifact();\n+    }\n   }\n \n-  /** Returns the list of artifact in the path. */\n+  /** Returns the list of artifacts in the path, including the root if it's not null. */\n   public ImmutableList<Artifact> getArtifacts() {\n-    return path.stream().map(Dependency::getArtifact).collect(toImmutableList());\n+    ImmutableList.Builder<Artifact> builder = ImmutableList.builder();\n+\n+    if (root != null) {\n+      builder.add(root);\n+    }\n+    path.stream().map(Dependency::getArtifact).forEach(builder::add);\n+    return builder.build();\n+  }\n+\n+  /** Returns the root of the dependency path. */\n+  @Nullable\n+  public Artifact getRoot() {\n+    return root;\n   }\n \n   /**\n    * Returns the artifact at {@code i}th node in the path. The {@code 0}th element is the root of\n    * the dependency tree.\n    */\n   public Artifact get(int i) {\n-    return path.get(i).getArtifact();\n+    if (i == 0) {\n+      return root;\n+    }\n+    return path.get(i - 1).getArtifact();\n   }\n \n   /**\n    * Returns the dependency path of the parent node of the leaf. Empty dependency path if the leaf", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxNDI0OA=="}, "originalCommit": {"oid": "a9f1e6c262ebb5b9fb989e189bab565c88a338b6"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM2MDUzNA==", "bodyText": "Renamed this method as append. (I had thought past participle would indicate a clone. If append is more natural to you, that's good.)", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417360534", "createdAt": "2020-04-29T14:29:48Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassPathResultTest.java", "diffHunk": "@@ -26,36 +26,33 @@\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.ImmutableSetMultimap;\n import com.google.common.collect.UnmodifiableIterator;\n-import java.io.IOException;\n import java.nio.file.Paths;\n import org.eclipse.aether.artifact.Artifact;\n import org.eclipse.aether.artifact.DefaultArtifact;\n import org.eclipse.aether.graph.Dependency;\n-import org.junit.Before;\n import org.junit.Test;\n \n public class ClassPathResultTest {\n-  private Artifact artifactA = new DefaultArtifact(\"com.google:a:1\");\n-  private Artifact artifactB = new DefaultArtifact(\"com.google:b:1\");\n-  private DependencyPath dependencyPath_A = new DependencyPath();\n-  private DependencyPath dependencyPath_B = new DependencyPath();\n-  private DependencyPath dependencyPath_B_A = new DependencyPath();\n-  private DependencyPath dependencyPath_A_B_A = new DependencyPath();\n-  private ClassPathEntry jarA = new ClassPathEntry(Paths.get(\"a.jar\"));\n-  private ClassPathEntry jarB = new ClassPathEntry(Paths.get(\"b.jar\"));;\n-\n-  @Before\n-  public void setup() throws IOException {\n-    dependencyPath_A.add(new Dependency(artifactA, \"compile\"));\n-    dependencyPath_B.add(new Dependency(artifactB, \"compile\"));\n-\n-    dependencyPath_B_A.add(new Dependency(artifactB, \"compile\"));\n-    dependencyPath_B_A.add(new Dependency(artifactA, \"compile\"));\n-\n-    dependencyPath_A_B_A.add(new Dependency(artifactA, \"compile\"));\n-    dependencyPath_A_B_A.add(new Dependency(artifactB, \"compile\"));\n-    dependencyPath_A_B_A.add(new Dependency(artifactA, \"compile\"));\n-  }\n+  private Artifact artifactA =\n+      new DefaultArtifact(\"com.google:a:1\").setFile(Paths.get(\"a.jar\").toFile());\n+  private Artifact artifactB =\n+      new DefaultArtifact(\"com.google:b:1\").setFile(Paths.get(\"b.jar\").toFile());\n+  private DependencyPath dependencyPath_A =\n+      new DependencyPath(null).appended(new Dependency(artifactA, \"compile\"));\n+  private DependencyPath dependencyPath_B =\n+      new DependencyPath(null).appended(new Dependency(artifactB, \"compile\"));\n+  private DependencyPath dependencyPath_B_A =\n+      new DependencyPath(null)\n+          .appended(new Dependency(artifactB, \"compile\"))\n+          .appended(new Dependency(artifactA, \"compile\"));\n+  private DependencyPath dependencyPath_A_B_A =\n+      new DependencyPath(null)\n+          .appended(new Dependency(artifactA, \"compile\"))\n+          .appended(new Dependency(artifactB, \"compile\"))\n+          .appended(new Dependency(artifactA, \"compile\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzMjE4Mw=="}, "originalCommit": {"oid": "583683c1c2e8bc05904975e13add4a767cdcb235"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzM2NTE4MA==", "bodyText": "Removed getRoot in favor of get(0) to treat root and non-root in the same manner in API.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417365180", "createdAt": "2020-04-29T14:35:42Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyPath.java", "diffHunk": "@@ -25,52 +25,88 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n import org.eclipse.aether.artifact.Artifact;\n import org.eclipse.aether.graph.Dependency;\n \n /**\n- * Path from the root to a node in a dependency tree, where a node is a dependency.\n+ * Path from the root to a node in a dependency tree, where the root node is a Maven artifact and\n+ * non-root nodes are dependencies.\n+ *\n+ * <p>The root node is null for the dependency trees generated for multiple artifacts by {@link\n+ * DependencyGraphBuilder#buildFullDependencyGraph(List)}; otherwise the root node is not null.\n  */\n public final class DependencyPath {\n \n-  private List<Dependency> path = new ArrayList<>();\n+  // The root of the dependency path. The project root is not a dependency.\n+  private final Artifact root;\n+  // Path without the root\n+  private final List<Dependency> path = new ArrayList<>();\n+\n+  public DependencyPath(@Nullable Artifact root) {\n+    this.root = root;\n+  }\n \n   @VisibleForTesting\n-  public void add(Dependency dependency) {\n-    path.add(dependency);\n+  public DependencyPath appended(Dependency dependency) {\n+    DependencyPath copy = new DependencyPath(root);\n+    for (Dependency value : path) {\n+      copy.path.add(value);\n+    }\n+    copy.path.add(dependency);\n+    return copy;\n   }\n \n-  /** Returns the length of the path. */\n+  /** Returns the length of the path plus the root. */\n   public int size() {\n-    return path.size();\n+    return path.size() + 1;\n   }\n \n   /** Returns the artifact in the leaf (the furthest node from the node) of the path. */\n   public Artifact getLeaf() {\n-    return path.get(size() - 1).getArtifact();\n+    if (path.isEmpty()) {\n+      return root;\n+    } else {\n+      return path.get(path.size() - 1).getArtifact();\n+    }\n   }\n \n-  /** Returns the list of artifact in the path. */\n+  /** Returns the list of artifacts in the path, including the root if it's not null. */\n   public ImmutableList<Artifact> getArtifacts() {\n-    return path.stream().map(Dependency::getArtifact).collect(toImmutableList());\n+    ImmutableList.Builder<Artifact> builder = ImmutableList.builder();\n+\n+    if (root != null) {\n+      builder.add(root);\n+    }\n+    path.stream().map(Dependency::getArtifact).forEach(builder::add);\n+    return builder.build();\n+  }\n+\n+  /** Returns the root of the dependency path. */\n+  @Nullable\n+  public Artifact getRoot() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9f1e6c262ebb5b9fb989e189bab565c88a338b6"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyODM5NTE2", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#pullrequestreview-402839516", "createdAt": "2020-04-29T16:31:54Z", "commit": {"oid": "cbb1b3bd6899200241290d47ac61c0385b2cf554"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjozMTo1NFrOGOHL_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNjo1NDoyN1rOGOIF9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MTAwNA==", "bodyText": "Why is this a multimap? Shouldn't each string coordinate such as com.google:foo:32.2 map to exactly one classpath entry?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417451004", "createdAt": "2020-04-29T16:31:54Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathResult.java", "diffHunk": "@@ -95,14 +95,15 @@ public String formatDependencyPaths(Iterable<ClassPathEntry> entries) {\n   }\n \n   /**\n-   * Returns mapping from the Maven coordinates to class path entries that are in the dependency\n-   * tree.\n+   * Returns mapping from the Maven coordinates to {@link ClassPathEntry}. The keys are the\n+   * coordinates of the direct dependencies of the root nodes in {@link #dependencyPaths}. The\n+   * values are all {@link ClassPathEntry}s in the subtree of the key.\n    */\n   public ImmutableSetMultimap<String, ClassPathEntry> coordinatesToClassPathEntry() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbb1b3bd6899200241290d47ac61c0385b2cf554"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MTg2Mg==", "bodyText": "path --> entry", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417451862", "createdAt": "2020-04-29T16:33:19Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathResult.java", "diffHunk": "@@ -95,14 +95,15 @@ public String formatDependencyPaths(Iterable<ClassPathEntry> entries) {\n   }\n \n   /**\n-   * Returns mapping from the Maven coordinates to class path entries that are in the dependency\n-   * tree.\n+   * Returns mapping from the Maven coordinates to {@link ClassPathEntry}. The keys are the\n+   * coordinates of the direct dependencies of the root nodes in {@link #dependencyPaths}. The\n+   * values are all {@link ClassPathEntry}s in the subtree of the key.\n    */\n   public ImmutableSetMultimap<String, ClassPathEntry> coordinatesToClassPathEntry() {\n     Builder<String, ClassPathEntry> coordinatesToEntry = ImmutableSetMultimap.builder();\n     for (ClassPathEntry path : getClassPath()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbb1b3bd6899200241290d47ac61c0385b2cf554"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MjI3Ng==", "bodyText": "is this a null root? Looks like a null leaf.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417452276", "createdAt": "2020-04-29T16:33:56Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java", "diffHunk": "@@ -65,8 +65,12 @@ public DependencyGraph() {\n   }\n \n   void addPath(DependencyPath path) {\n-    graph.add(path);\n     Artifact leaf = path.getLeaf();\n+    if (leaf == null) {\n+      // No need to include a path to null root", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbb1b3bd6899200241290d47ac61c0385b2cf554"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1NDE1Ng==", "bodyText": "You might do better by copying/cloning the entire list rather than by rebuilding it.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417454156", "createdAt": "2020-04-29T16:36:53Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyPath.java", "diffHunk": "@@ -25,52 +25,88 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n import org.eclipse.aether.artifact.Artifact;\n import org.eclipse.aether.graph.Dependency;\n \n /**\n- * Path from the root to a node in a dependency tree, where a node is a dependency.\n+ * Path from the root to a node in a dependency tree, where the root node is a Maven artifact and\n+ * non-root nodes are dependencies.\n+ *\n+ * <p>The root node is null for the dependency trees generated for multiple artifacts by {@link\n+ * DependencyGraphBuilder#buildFullDependencyGraph(List)}; otherwise the root node is not null.\n  */\n public final class DependencyPath {\n \n-  private List<Dependency> path = new ArrayList<>();\n+  // The root of the dependency path. The project root is not a dependency.\n+  private final Artifact root;\n+  // Path without the root\n+  private final List<Dependency> path = new ArrayList<>();\n+\n+  public DependencyPath(@Nullable Artifact root) {\n+    this.root = root;\n+  }\n \n   @VisibleForTesting\n-  public void add(Dependency dependency) {\n-    path.add(dependency);\n+  public DependencyPath appended(Dependency dependency) {\n+    DependencyPath copy = new DependencyPath(root);\n+    for (Dependency value : path) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxNzEzOA=="}, "originalCommit": {"oid": "a9f1e6c262ebb5b9fb989e189bab565c88a338b6"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NTg0NQ==", "bodyText": "what is the key? the path to the node?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417465845", "createdAt": "2020-04-29T16:54:27Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyTreeFormatter.java", "diffHunk": "@@ -31,43 +35,54 @@\n    *     DependencyGraphBuilder#buildFullDependencyGraph(List)} (Dependency)}.\n    */\n   static String formatDependencyPaths(List<DependencyPath> dependencyPaths) {\n+    DependencyPath firstPath = dependencyPaths.get(0);\n+    Artifact rootArtifact = firstPath.get(0);\n+    checkArgument(\n+        dependencyPaths.stream().allMatch(path -> Objects.equals(path.get(0), rootArtifact)),\n+        \"all dependency paths should have the same root\");\n     StringBuilder stringBuilder = new StringBuilder();\n     // While Maven dependencies are resolved in level-order, printing text representing a tree\n     // requires traversing the items in pre-order\n     ListMultimap<DependencyPath, DependencyPath> tree = buildDependencyPathTree(dependencyPaths);\n     // Empty dependency path is to retrieve children of root node\n-    formatDependencyPathTree(stringBuilder, tree, new DependencyPath());\n+    formatDependencyPathTree(stringBuilder, tree, new DependencyPath(rootArtifact), 1);\n     return stringBuilder.toString();\n   }\n \n   private static void formatDependencyPathTree(\n       StringBuilder stringBuilder,\n       ListMultimap<DependencyPath, DependencyPath> tree,\n-      DependencyPath currentNode) {\n-    String indentCharacter = \"  \";\n-    int depth = currentNode.size();\n-    if (depth > 0) {\n+      DependencyPath currentNode,\n+      int depth) {\n+    Artifact leaf = currentNode.getLeaf();\n+    if (leaf != null) {\n       // Nodes at top have one or more depth\n-      stringBuilder.append(Strings.repeat(indentCharacter, depth));\n-      stringBuilder.append(currentNode.getLeaf());\n+      stringBuilder.append(Strings.repeat(\"  \", depth));\n+      stringBuilder.append(leaf);\n       stringBuilder.append(\"\\n\");\n+      depth++;\n     }\n     for (DependencyPath childPath : tree.get(currentNode)) {\n-      formatDependencyPathTree(stringBuilder, tree, childPath);\n+      if (currentNode.equals(childPath)) {\n+        continue; // root node's parent is the root itself\n+      }\n+      formatDependencyPathTree(stringBuilder, tree, childPath, depth);\n     }\n   }\n \n   /**\n    * Builds ListMultimap that represents a Maven dependency tree of parent-children relationship.\n    * Each node in the tree has a corresponding key in the ListMultimap. The value associated with", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbb1b3bd6899200241290d47ac61c0385b2cf554"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "133e88b75874fd6566b01992c361db098e7453dc", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/133e88b75874fd6566b01992c361db098e7453dc", "committedDate": "2020-04-29T17:56:16Z", "message": "list.addAll"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyODk1NTAz", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#pullrequestreview-402895503", "createdAt": "2020-04-29T17:42:52Z", "commit": {"oid": "cbb1b3bd6899200241290d47ac61c0385b2cf554"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzo0Mjo1MlrOGOJ8AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNzo1MjoxM1rOGOKThg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5NjA2NA==", "bodyText": "Great question. This method groups dependencies by its direct dependencies of the root. For example, suppose we have the following tree:\n+- g:a:1\n|  +- g:b:1\n|     +- g:c:1\n|\n+- g:d:1\n   +- g:c:1\n   +- g:e:1\n\nThe method returns a multimap of\n{\n\"g:a:1\" => {g:a:1, g:b:1, g:c:1}\n\"g:d:1\" => {g:d:1, g:c:1, g:e:1}\n}\n\nDashboardMain uses this map to group linkage errors by BOM members. E.g.,\nDependency Analysis of io.grpc:grpc-netty:1.29.0 has linkage errors that has source classes in the JAR files of the subtree of io.grpc:grpc-netty:1.29.0.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417496064", "createdAt": "2020-04-29T17:42:52Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathResult.java", "diffHunk": "@@ -95,14 +95,15 @@ public String formatDependencyPaths(Iterable<ClassPathEntry> entries) {\n   }\n \n   /**\n-   * Returns mapping from the Maven coordinates to class path entries that are in the dependency\n-   * tree.\n+   * Returns mapping from the Maven coordinates to {@link ClassPathEntry}. The keys are the\n+   * coordinates of the direct dependencies of the root nodes in {@link #dependencyPaths}. The\n+   * values are all {@link ClassPathEntry}s in the subtree of the key.\n    */\n   public ImmutableSetMultimap<String, ClassPathEntry> coordinatesToClassPathEntry() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MTAwNA=="}, "originalCommit": {"oid": "cbb1b3bd6899200241290d47ac61c0385b2cf554"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5Nzc0OA==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417497748", "createdAt": "2020-04-29T17:45:30Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathResult.java", "diffHunk": "@@ -95,14 +95,15 @@ public String formatDependencyPaths(Iterable<ClassPathEntry> entries) {\n   }\n \n   /**\n-   * Returns mapping from the Maven coordinates to class path entries that are in the dependency\n-   * tree.\n+   * Returns mapping from the Maven coordinates to {@link ClassPathEntry}. The keys are the\n+   * coordinates of the direct dependencies of the root nodes in {@link #dependencyPaths}. The\n+   * values are all {@link ClassPathEntry}s in the subtree of the key.\n    */\n   public ImmutableSetMultimap<String, ClassPathEntry> coordinatesToClassPathEntry() {\n     Builder<String, ClassPathEntry> coordinatesToEntry = ImmutableSetMultimap.builder();\n     for (ClassPathEntry path : getClassPath()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MTg2Mg=="}, "originalCommit": {"oid": "cbb1b3bd6899200241290d47ac61c0385b2cf554"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5ODIxNg==", "bodyText": "Right. Updated to \"null leaf\".", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417498216", "createdAt": "2020-04-29T17:46:17Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraph.java", "diffHunk": "@@ -65,8 +65,12 @@ public DependencyGraph() {\n   }\n \n   void addPath(DependencyPath path) {\n-    graph.add(path);\n     Artifact leaf = path.getLeaf();\n+    if (leaf == null) {\n+      // No need to include a path to null root", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ1MjI3Ng=="}, "originalCommit": {"oid": "cbb1b3bd6899200241290d47ac61c0385b2cf554"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ5OTU4Mw==", "bodyText": "That's right. Thanks. Updated the loop to copy.path.addAll(path).", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417499583", "createdAt": "2020-04-29T17:48:23Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyPath.java", "diffHunk": "@@ -25,52 +25,88 @@\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n+import javax.annotation.Nullable;\n import org.eclipse.aether.artifact.Artifact;\n import org.eclipse.aether.graph.Dependency;\n \n /**\n- * Path from the root to a node in a dependency tree, where a node is a dependency.\n+ * Path from the root to a node in a dependency tree, where the root node is a Maven artifact and\n+ * non-root nodes are dependencies.\n+ *\n+ * <p>The root node is null for the dependency trees generated for multiple artifacts by {@link\n+ * DependencyGraphBuilder#buildFullDependencyGraph(List)}; otherwise the root node is not null.\n  */\n public final class DependencyPath {\n \n-  private List<Dependency> path = new ArrayList<>();\n+  // The root of the dependency path. The project root is not a dependency.\n+  private final Artifact root;\n+  // Path without the root\n+  private final List<Dependency> path = new ArrayList<>();\n+\n+  public DependencyPath(@Nullable Artifact root) {\n+    this.root = root;\n+  }\n \n   @VisibleForTesting\n-  public void add(Dependency dependency) {\n-    path.add(dependency);\n+  public DependencyPath appended(Dependency dependency) {\n+    DependencyPath copy = new DependencyPath(root);\n+    for (Dependency value : path) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzMxNzEzOA=="}, "originalCommit": {"oid": "a9f1e6c262ebb5b9fb989e189bab565c88a338b6"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzUwMjA4Ng==", "bodyText": "Yes, the key is the path from the root to the node. Updated javadoc.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#discussion_r417502086", "createdAt": "2020-04-29T17:52:13Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyTreeFormatter.java", "diffHunk": "@@ -31,43 +35,54 @@\n    *     DependencyGraphBuilder#buildFullDependencyGraph(List)} (Dependency)}.\n    */\n   static String formatDependencyPaths(List<DependencyPath> dependencyPaths) {\n+    DependencyPath firstPath = dependencyPaths.get(0);\n+    Artifact rootArtifact = firstPath.get(0);\n+    checkArgument(\n+        dependencyPaths.stream().allMatch(path -> Objects.equals(path.get(0), rootArtifact)),\n+        \"all dependency paths should have the same root\");\n     StringBuilder stringBuilder = new StringBuilder();\n     // While Maven dependencies are resolved in level-order, printing text representing a tree\n     // requires traversing the items in pre-order\n     ListMultimap<DependencyPath, DependencyPath> tree = buildDependencyPathTree(dependencyPaths);\n     // Empty dependency path is to retrieve children of root node\n-    formatDependencyPathTree(stringBuilder, tree, new DependencyPath());\n+    formatDependencyPathTree(stringBuilder, tree, new DependencyPath(rootArtifact), 1);\n     return stringBuilder.toString();\n   }\n \n   private static void formatDependencyPathTree(\n       StringBuilder stringBuilder,\n       ListMultimap<DependencyPath, DependencyPath> tree,\n-      DependencyPath currentNode) {\n-    String indentCharacter = \"  \";\n-    int depth = currentNode.size();\n-    if (depth > 0) {\n+      DependencyPath currentNode,\n+      int depth) {\n+    Artifact leaf = currentNode.getLeaf();\n+    if (leaf != null) {\n       // Nodes at top have one or more depth\n-      stringBuilder.append(Strings.repeat(indentCharacter, depth));\n-      stringBuilder.append(currentNode.getLeaf());\n+      stringBuilder.append(Strings.repeat(\"  \", depth));\n+      stringBuilder.append(leaf);\n       stringBuilder.append(\"\\n\");\n+      depth++;\n     }\n     for (DependencyPath childPath : tree.get(currentNode)) {\n-      formatDependencyPathTree(stringBuilder, tree, childPath);\n+      if (currentNode.equals(childPath)) {\n+        continue; // root node's parent is the root itself\n+      }\n+      formatDependencyPathTree(stringBuilder, tree, childPath, depth);\n     }\n   }\n \n   /**\n    * Builds ListMultimap that represents a Maven dependency tree of parent-children relationship.\n    * Each node in the tree has a corresponding key in the ListMultimap. The value associated with", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQ2NTg0NQ=="}, "originalCommit": {"oid": "cbb1b3bd6899200241290d47ac61c0385b2cf554"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyOTkxMTA0", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1371#pullrequestreview-402991104", "createdAt": "2020-04-29T19:55:53Z", "commit": {"oid": "133e88b75874fd6566b01992c361db098e7453dc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 372, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}