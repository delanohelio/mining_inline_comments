{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MjEwODgy", "number": 1523, "title": "LinkageProblem class to replace Multimap<SymbolProblem, ClassFile>", "bodyText": "Still in progress.\nTodo\n\nFix build failure (done)\nJavadoc for new methods (done)\nUpdate variable name \"symbolProblems\" to \"linkageProblems\" (done)\nAdd test for LinkageProblem method (done)\n\nI confirmed that the dashboard works good in my local:", "createdAt": "2020-07-10T04:06:07Z", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523", "merged": true, "mergeCommit": {"oid": "47805ea01e99942bfb1585edc5f01aa07cad3ab9"}, "closed": true, "closedAt": "2020-07-13T19:45:26Z", "author": {"login": "suztomo"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczVPctAH2gAyNDQ3MjEwODgyOjUyMTUwZmZjNDc5ODJmOWE4MTY4OGE0NmE2ODA4OGZlN2VjODI5MmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc0mcpzAH2gAyNDQ3MjEwODgyOmI1OGJkOWRhZjBlNDVmNTBjNGI0ZTQwZjNkM2Y2MDJiMDdjZjA4ZjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "52150ffc47982f9a81688a46a68088fe7ec8292a", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/52150ffc47982f9a81688a46a68088fe7ec8292a", "committedDate": "2020-07-09T20:41:06Z", "message": "IntelliJ renaming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f868f0344d965b96538b1bea34cd88b339adbaf9", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/f868f0344d965b96538b1bea34cd88b339adbaf9", "committedDate": "2020-07-09T22:00:03Z", "message": "dependencies module compiles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28269c9d3ee138fa48d7c461eb3523d8f6551554", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/28269c9d3ee138fa48d7c461eb3523d8f6551554", "committedDate": "2020-07-10T04:04:38Z", "message": "in progress"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NDEzMzQ5", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#pullrequestreview-446413349", "createdAt": "2020-07-10T13:45:10Z", "commit": {"oid": "28269c9d3ee138fa48d7c461eb3523d8f6551554"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo0NToxMFrOGv382Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMzo1NDoxOVrOGv4SZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1Mjk1Mw==", "bodyText": "This probably doesn't need to be a multimap anymore since LinkageProblem points to the class file.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r452852953", "createdAt": "2020-07-10T13:45:10Z", "author": {"login": "elharo"}, "path": "boms/integration-tests/src/test/java/com/google/cloud/MaximumLinkageErrorsTest.java", "diffHunk": "@@ -49,28 +49,28 @@ public void testForNewLinkageErrors()\n     Path bomFile = Paths.get(\"../cloud-oss-bom/pom.xml\");\n     Bom bom = Bom.readBom(bomFile);\n \n-    ImmutableSetMultimap<SymbolProblem, ClassFile> oldProblems =\n+    ImmutableSetMultimap<LinkageProblem, ClassFile> oldProblems =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28269c9d3ee138fa48d7c461eb3523d8f6551554"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1MzAzOA==", "bodyText": "ditto", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r452853038", "createdAt": "2020-07-10T13:45:17Z", "author": {"login": "elharo"}, "path": "boms/integration-tests/src/test/java/com/google/cloud/MaximumLinkageErrorsTest.java", "diffHunk": "@@ -49,28 +49,28 @@ public void testForNewLinkageErrors()\n     Path bomFile = Paths.get(\"../cloud-oss-bom/pom.xml\");\n     Bom bom = Bom.readBom(bomFile);\n \n-    ImmutableSetMultimap<SymbolProblem, ClassFile> oldProblems =\n+    ImmutableSetMultimap<LinkageProblem, ClassFile> oldProblems =\n         LinkageChecker.create(baseline).findSymbolProblems();\n     LinkageChecker checker = LinkageChecker.create(bom);\n-    ImmutableSetMultimap<SymbolProblem, ClassFile> currentProblems = checker.findSymbolProblems();\n+    ImmutableSetMultimap<LinkageProblem, ClassFile> currentProblems = checker.findSymbolProblems();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28269c9d3ee138fa48d7c461eb3523d8f6551554"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1MzUzNQ==", "bodyText": "relevantLinkage", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r452853535", "createdAt": "2020-07-10T13:46:11Z", "author": {"login": "elharo"}, "path": "dashboard/src/main/java/com/google/cloud/tools/opensource/dashboard/DashboardMain.java", "diffHunk": "@@ -273,9 +272,8 @@ static Configuration configureFreemarker() {\n           Artifact artifact = entry.getKey();\n           ImmutableSet<ClassPathEntry> jarsInDependencyTree =\n               classPathResult.getClassPathEntries(Artifacts.toCoordinates(artifact));\n-          Map<ClassPathEntry, ImmutableSetMultimap<SymbolProblem, String>>\n-              relevantSymbolProblemTable =\n-                  Maps.filterKeys(symbolProblemTable, jarsInDependencyTree::contains);\n+          Map<ClassPathEntry, ImmutableSet<LinkageProblem>> relevantlinkageProblemTable =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28269c9d3ee138fa48d7c461eb3523d8f6551554"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1NDI5OA==", "bodyText": "2020?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r452854298", "createdAt": "2020-07-10T13:47:28Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2019 Google LLC.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28269c9d3ee138fa48d7c461eb3523d8f6551554"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1NDkwNA==", "bodyText": "does this need to be public?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r452854904", "createdAt": "2020-07-10T13:48:28Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.ListMultimap;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Multimaps;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A linkage error.\n+ *\n+ * @see <a href=\"https://jlbp.dev/glossary.html#linkage-error\">Java Dependency Glossary: Linkage\n+ *     Error</a>\n+ */\n+public final class LinkageProblem {\n+\n+  private final ErrorType errorType;\n+  private final Symbol symbol;\n+  private final ClassFile containingClass;\n+  private final ClassFile sourceClass;\n+\n+  @VisibleForTesting\n+  public LinkageProblem(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28269c9d3ee138fa48d7c461eb3523d8f6551554"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1NTA1Mw==", "bodyText": "errorType --> reason", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r452855053", "createdAt": "2020-07-10T13:48:44Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.ListMultimap;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Multimaps;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A linkage error.\n+ *\n+ * @see <a href=\"https://jlbp.dev/glossary.html#linkage-error\">Java Dependency Glossary: Linkage\n+ *     Error</a>\n+ */\n+public final class LinkageProblem {\n+\n+  private final ErrorType errorType;\n+  private final Symbol symbol;\n+  private final ClassFile containingClass;\n+  private final ClassFile sourceClass;\n+\n+  @VisibleForTesting\n+  public LinkageProblem(\n+      Symbol symbol,\n+      ErrorType errorType,\n+      @Nullable ClassFile containingClass,\n+      ClassFile sourceClass) {\n+    Preconditions.checkNotNull(symbol);\n+\n+    // After finding symbol problem, there is no need to have SuperClassSymbol over ClassSymbol.\n+    this.symbol =\n+        symbol instanceof SuperClassSymbol ? new ClassSymbol(symbol.getClassBinaryName()) : symbol;\n+    this.errorType = Preconditions.checkNotNull(errorType);\n+    this.containingClass = containingClass;\n+    this.sourceClass = Preconditions.checkNotNull(sourceClass);\n+  }\n+\n+  /** Returns the errorType why the symbol was not resolved. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28269c9d3ee138fa48d7c461eb3523d8f6551554"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1NTc0OQ==", "bodyText": "its --> their", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r452855749", "createdAt": "2020-07-10T13:49:55Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.ListMultimap;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Multimaps;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A linkage error.\n+ *\n+ * @see <a href=\"https://jlbp.dev/glossary.html#linkage-error\">Java Dependency Glossary: Linkage\n+ *     Error</a>\n+ */\n+public final class LinkageProblem {\n+\n+  private final ErrorType errorType;\n+  private final Symbol symbol;\n+  private final ClassFile containingClass;\n+  private final ClassFile sourceClass;\n+\n+  @VisibleForTesting\n+  public LinkageProblem(\n+      Symbol symbol,\n+      ErrorType errorType,\n+      @Nullable ClassFile containingClass,\n+      ClassFile sourceClass) {\n+    Preconditions.checkNotNull(symbol);\n+\n+    // After finding symbol problem, there is no need to have SuperClassSymbol over ClassSymbol.\n+    this.symbol =\n+        symbol instanceof SuperClassSymbol ? new ClassSymbol(symbol.getClassBinaryName()) : symbol;\n+    this.errorType = Preconditions.checkNotNull(errorType);\n+    this.containingClass = containingClass;\n+    this.sourceClass = Preconditions.checkNotNull(sourceClass);\n+  }\n+\n+  /** Returns the errorType why the symbol was not resolved. */\n+  ErrorType getErrorType() {\n+    return errorType;\n+  }\n+\n+  /** Returns the target symbol that was not resolved. */\n+  public Symbol getSymbol() {\n+    return symbol;\n+  }\n+\n+  /**\n+   * Returns the class that is expected to contain the symbol. If the symbol is a method or a field,\n+   * then this is the class where the symbol was expected to be found. If the symbol is an inner\n+   * class, this is the outer class that was expected to contain the inner class. If the symbol is\n+   * an outer class, this is null.\n+   */\n+  @Nullable\n+  public ClassFile getContainingClass() {\n+    return containingClass;\n+  }\n+\n+  /** Returns the source of the invalid reference which this linkage error represents. */\n+  public ClassFile getSourceClass() {\n+    return sourceClass;\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    }\n+    if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+    LinkageProblem that = (LinkageProblem) other;\n+    return errorType == that.errorType\n+        && symbol.equals(that.symbol)\n+        && Objects.equals(containingClass, that.containingClass)\n+        && Objects.equals(sourceClass, that.sourceClass);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(errorType, symbol, containingClass, sourceClass);\n+  }\n+\n+  @Override\n+  public final String toString() {\n+    return formatSymbolProblem() + \" referenced by \" + sourceClass;\n+  }\n+\n+  /**\n+   * Returns description of the problem on the symbol. This description does not include the {@code\n+   * sourceClass}. This value is useful when grouping {@link LinkageProblem}s by its symbols.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28269c9d3ee138fa48d7c461eb3523d8f6551554"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1NzYyNg==", "bodyText": "I guess I'm missing something but I don't see anywhere a linkageproblem is created except in test code", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r452857626", "createdAt": "2020-07-10T13:52:51Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.ListMultimap;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Multimaps;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A linkage error.\n+ *\n+ * @see <a href=\"https://jlbp.dev/glossary.html#linkage-error\">Java Dependency Glossary: Linkage\n+ *     Error</a>\n+ */\n+public final class LinkageProblem {\n+\n+  private final ErrorType errorType;\n+  private final Symbol symbol;\n+  private final ClassFile containingClass;\n+  private final ClassFile sourceClass;\n+\n+  @VisibleForTesting\n+  public LinkageProblem(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28269c9d3ee138fa48d7c461eb3523d8f6551554"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1ODQ3MA==", "bodyText": "In general \"type\" variables in classes are a code smell in object oriented languages. By default I expect types to be indicated by class/object types. Should that be done here?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r452858470", "createdAt": "2020-07-10T13:54:19Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.ListMultimap;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Multimaps;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A linkage error.\n+ *\n+ * @see <a href=\"https://jlbp.dev/glossary.html#linkage-error\">Java Dependency Glossary: Linkage\n+ *     Error</a>\n+ */\n+public final class LinkageProblem {\n+\n+  private final ErrorType errorType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28269c9d3ee138fa48d7c461eb3523d8f6551554"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0512e76961547d64e707efaf0cb3f27d7d61766", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/e0512e76961547d64e707efaf0cb3f27d7d61766", "committedDate": "2020-07-10T14:41:09Z", "message": "Compiles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6dce0c57ef9f98b79ab966153aee28b576f3a3d8", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/6dce0c57ef9f98b79ab966153aee28b576f3a3d8", "committedDate": "2020-07-10T15:33:56Z", "message": "Added test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24891f2f356da77f011240a8dcbc73f0f26c0227", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/24891f2f356da77f011240a8dcbc73f0f26c0227", "committedDate": "2020-07-10T15:55:58Z", "message": "Renamed symbols"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a3daa4341e3490abd1ae346c00ffb2547511ad1", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/4a3daa4341e3490abd1ae346c00ffb2547511ad1", "committedDate": "2020-07-10T15:57:51Z", "message": "format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NTI3Mjc1", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#pullrequestreview-446527275", "createdAt": "2020-07-10T16:13:58Z", "commit": {"oid": "4a3daa4341e3490abd1ae346c00ffb2547511ad1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjoxMzo1OFrOGv9Rrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNjoyNToyNFrOGv9otA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0MDIwNg==", "bodyText": "The check 2 lines above invalidate new references to existing symbol problems if any.\nIt was checking 2 types of errors\n\nNew linkage errors on symbols problem\nNew references to existing problems", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r452940206", "createdAt": "2020-07-10T16:13:58Z", "author": {"login": "suztomo"}, "path": "boms/integration-tests/src/test/java/com/google/cloud/MaximumLinkageErrorsTest.java", "diffHunk": "@@ -49,39 +47,22 @@ public void testForNewLinkageErrors()\n     Path bomFile = Paths.get(\"../cloud-oss-bom/pom.xml\");\n     Bom bom = Bom.readBom(bomFile);\n \n-    ImmutableSetMultimap<SymbolProblem, ClassFile> oldProblems =\n-        LinkageChecker.create(baseline).findSymbolProblems();\n+    ImmutableSet<LinkageProblem> oldProblems =\n+        LinkageChecker.create(baseline).findLinkageProblems();\n     LinkageChecker checker = LinkageChecker.create(bom);\n-    ImmutableSetMultimap<SymbolProblem, ClassFile> currentProblems = checker.findSymbolProblems();\n+    ImmutableSet<LinkageProblem> currentProblems = checker.findLinkageProblems();\n \n     // This only tests for newly missing methods, not new references to\n     // previously missing methods.\n-    SetView<SymbolProblem> newProblems =\n-        Sets.difference(currentProblems.keySet(), oldProblems.keySet());\n+    SetView<LinkageProblem> newProblems = Sets.difference(currentProblems, oldProblems);\n \n     // Check that no new linkage errors have been introduced since the baseline\n     StringBuilder message = new StringBuilder(\"Baseline BOM: \" + baselineCoordinates + \"\\n\");\n     if (!newProblems.isEmpty()) {\n       message.append(\"Newly introduced problems:\\n\");\n-      for (SymbolProblem problem : newProblems) {\n-        message.append(problem + \" referenced from \" + currentProblems.get(problem) + \"\\n\");\n-      }\n+      message.append(LinkageProblem.formatLinkageProblems(newProblems));\n       Assert.fail(message.toString());\n     }\n-    \n-    // If that passes, check whether there are any new references to missing methods:\n-    for (SymbolProblem problem : currentProblems.keySet()) {\n-      ImmutableSet<ClassFile> oldReferences = oldProblems.get(problem);\n-      ImmutableSet<ClassFile> currentReferences = currentProblems.get(problem);\n-      SetView<ClassFile> newReferences = Sets.difference(currentReferences, oldReferences);\n-      if (!newReferences.isEmpty()) {\n-        message.append(\"Newly introduced classes linking to \" + problem + \":\\n\");\n-        for (ClassFile classFile : newReferences) {\n-          message.append(\"Link from \" + classFile + \"\\n\");\n-        }\n-        Assert.fail(message.toString());\n-      }\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3daa4341e3490abd1ae346c00ffb2547511ad1"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk0NjEwMA==", "bodyText": "This is public because DashboardMain touches this class.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r452946100", "createdAt": "2020-07-10T16:25:24Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/Symbol.java", "diffHunk": "@@ -27,7 +27,7 @@\n  * @see <a href=\"https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html#jvms-5.1\">Java\n  *     Virtual Machine Specification: The Run-Time Constant Pool</a>\n  */\n-abstract class Symbol {\n+public abstract class Symbol {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3daa4341e3490abd1ae346c00ffb2547511ad1"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NTg0MTYx", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#pullrequestreview-446584161", "createdAt": "2020-07-10T17:44:25Z", "commit": {"oid": "4a3daa4341e3490abd1ae346c00ffb2547511ad1"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzo0Nzo0NFrOGwAE_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxNzo0ODoxMlrOGwAF0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4NjExMA==", "bodyText": "The large diff in LinkageChecker.java is not rendered by default. Find 'LinkageChecker.java' and expand the diff before searching for \"new LinkageProblem\":", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r452986110", "createdAt": "2020-07-10T17:47:44Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.ListMultimap;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Multimaps;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A linkage error.\n+ *\n+ * @see <a href=\"https://jlbp.dev/glossary.html#linkage-error\">Java Dependency Glossary: Linkage\n+ *     Error</a>\n+ */\n+public final class LinkageProblem {\n+\n+  private final ErrorType errorType;\n+  private final Symbol symbol;\n+  private final ClassFile containingClass;\n+  private final ClassFile sourceClass;\n+\n+  @VisibleForTesting\n+  public LinkageProblem(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1NzYyNg=="}, "originalCommit": {"oid": "28269c9d3ee138fa48d7c461eb3523d8f6551554"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjk4NjMyMw==", "bodyText": "So far, I don't see any need to have different subtypes. Current ErrorType enum is sufficient. When we encounter the need of differentiating them with error-specific fields, I'll apply the subtyping.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r452986323", "createdAt": "2020-07-10T17:48:12Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.ListMultimap;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Multimaps;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A linkage error.\n+ *\n+ * @see <a href=\"https://jlbp.dev/glossary.html#linkage-error\">Java Dependency Glossary: Linkage\n+ *     Error</a>\n+ */\n+public final class LinkageProblem {\n+\n+  private final ErrorType errorType;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1ODQ3MA=="}, "originalCommit": {"oid": "28269c9d3ee138fa48d7c461eb3523d8f6551554"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NjA1MjQx", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#pullrequestreview-446605241", "createdAt": "2020-07-10T18:19:46Z", "commit": {"oid": "4a3daa4341e3490abd1ae346c00ffb2547511ad1"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxODoxOTo0N1rOGwBATQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxODoyNzo1NlrOGwBPRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwMTI5Mw==", "bodyText": "Is it possible for these three arguments to indicate more than one linkage problem?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453001293", "createdAt": "2020-07-10T18:19:47Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -238,7 +238,8 @@ private boolean problemFilter(Map.Entry<SymbolProblem, ClassFile> entry) {\n    *     Virtual Machine Specification: 5.4.3.4. Interface Method Resolution</a>\n    */\n   @VisibleForTesting\n-  Optional<SymbolProblem> findSymbolProblem(ClassFile classFile, MethodSymbol symbol) {\n+  Optional<LinkageProblem> findLinkageProblem(\n+      ClassFile classFile, MethodSymbol symbol, ClassFile sourceClassFile) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3daa4341e3490abd1ae346c00ffb2547511ad1"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwMzM3Nw==", "bodyText": "github won't let me put this comment on line 254 but classFileLocation --> classPathEntry\ncontainingClassFile should probably be targetClassFile", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453003377", "createdAt": "2020-07-10T18:24:12Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -256,18 +257,21 @@ private boolean problemFilter(Map.Entry<SymbolProblem, ClassFile> entry) {\n \n       if (!isClassAccessibleFrom(targetJavaClass, sourceClassName)) {\n         return Optional.of(\n-            new SymbolProblem(symbol, ErrorType.INACCESSIBLE_CLASS, containingClassFile));\n+            new LinkageProblem(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3daa4341e3490abd1ae346c00ffb2547511ad1"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNDQ2MQ==", "bodyText": "To me it feels like the natural order is\nsourceClass\ntargetClass\ntargetSymbol\nand the type should be a subclass of LinkageProblem", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453004461", "createdAt": "2020-07-10T18:26:32Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -300,28 +305,30 @@ private boolean problemFilter(Map.Entry<SymbolProblem, ClassFile> entry) {\n \n       // The class is in class path but the symbol is not found\n       return Optional.of(\n-          new SymbolProblem(symbol, ErrorType.SYMBOL_NOT_FOUND, containingClassFile));\n+          new LinkageProblem(\n+              symbol, ErrorType.SYMBOL_NOT_FOUND, containingClassFile, sourceClassFile));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3daa4341e3490abd1ae346c00ffb2547511ad1"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNDg0Mw==", "bodyText": "Here, if we define ClassNotFoundProblem then there's no need for the null third argument that doesn't apply", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453004843", "createdAt": "2020-07-10T18:27:21Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -300,28 +305,30 @@ private boolean problemFilter(Map.Entry<SymbolProblem, ClassFile> entry) {\n \n       // The class is in class path but the symbol is not found\n       return Optional.of(\n-          new SymbolProblem(symbol, ErrorType.SYMBOL_NOT_FOUND, containingClassFile));\n+          new LinkageProblem(\n+              symbol, ErrorType.SYMBOL_NOT_FOUND, containingClassFile, sourceClassFile));\n     } catch (ClassNotFoundException ex) {\n       if (classDumper.catchesLinkageErrorOnClass(sourceClassName)) {\n         return Optional.empty();\n       }\n       ClassSymbol classSymbol = new ClassSymbol(symbol.getClassBinaryName());\n-      return Optional.of(new SymbolProblem(classSymbol, ErrorType.CLASS_NOT_FOUND, null));\n+      return Optional.of(\n+          new LinkageProblem(classSymbol, ErrorType.CLASS_NOT_FOUND, null, sourceClassFile));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3daa4341e3490abd1ae346c00ffb2547511ad1"}, "originalPosition": 209}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNTEyNQ==", "bodyText": "{@link AbstractMethodError}s at", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453005125", "createdAt": "2020-07-10T18:27:56Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -300,28 +305,30 @@ private boolean problemFilter(Map.Entry<SymbolProblem, ClassFile> entry) {\n \n       // The class is in class path but the symbol is not found\n       return Optional.of(\n-          new SymbolProblem(symbol, ErrorType.SYMBOL_NOT_FOUND, containingClassFile));\n+          new LinkageProblem(\n+              symbol, ErrorType.SYMBOL_NOT_FOUND, containingClassFile, sourceClassFile));\n     } catch (ClassNotFoundException ex) {\n       if (classDumper.catchesLinkageErrorOnClass(sourceClassName)) {\n         return Optional.empty();\n       }\n       ClassSymbol classSymbol = new ClassSymbol(symbol.getClassBinaryName());\n-      return Optional.of(new SymbolProblem(classSymbol, ErrorType.CLASS_NOT_FOUND, null));\n+      return Optional.of(\n+          new LinkageProblem(classSymbol, ErrorType.CLASS_NOT_FOUND, null, sourceClassFile));\n     }\n   }\n \n   /**\n    * Returns the linkage errors for unimplemented methods in {@code classFile}. Such unimplemented\n    * methods manifest as {@link AbstractMethodError} in runtime.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3daa4341e3490abd1ae346c00ffb2547511ad1"}, "originalPosition": 215}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c6c5a9e21a1f9b42d53b2149dfba4c8a3b9676e", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/3c6c5a9e21a1f9b42d53b2149dfba4c8a3b9676e", "committedDate": "2020-07-10T19:56:30Z", "message": "LinkageProblem subclasses"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NjY3Mzg2", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#pullrequestreview-446667386", "createdAt": "2020-07-10T19:58:18Z", "commit": {"oid": "3c6c5a9e21a1f9b42d53b2149dfba4c8a3b9676e"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOTo1ODoxOFrOGwEBwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxOTo1OToxMVrOGwEDFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1MDgxNw==", "bodyText": "The format string usage is strange.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453050817", "createdAt": "2020-07-10T19:58:18Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/AbstractMethodProblem.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+/**\n+ * The referenced method is not implemented in the class but the class is declared to implement the\n+ * method. Such unimplemented methods manifest as {@link AbstractMethodError} in runtime.\n+ */\n+class AbstractMethodProblem extends IncompatibleLinkageProblem {\n+  AbstractMethodProblem(Symbol symbol, ClassFile sourceClass, ClassFile targetClass) {\n+    super(\"%s is not accessible\", symbol, sourceClass, targetClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c6c5a9e21a1f9b42d53b2149dfba4c8a3b9676e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1MTE1Ng==", "bodyText": "and both --> when both\nis present -> are present", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453051156", "createdAt": "2020-07-10T19:59:11Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/IncompatibleLinkageProblem.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import java.util.Objects;\n+\n+/**\n+ * LinkageProblem caused by an invalid reference and both source class and target class is present.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c6c5a9e21a1f9b42d53b2149dfba4c8a3b9676e"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c86c3455068bb899bedc642df13e793c299d9b89", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c86c3455068bb899bedc642df13e793c299d9b89", "committedDate": "2020-07-10T20:14:38Z", "message": "ErrorType removed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4753cba55e7ee3193224cffb9734a995d108f8b", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c4753cba55e7ee3193224cffb9734a995d108f8b", "committedDate": "2020-07-10T20:28:20Z", "message": "format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "737e6f908dfe47bcff5026f32cc56434dd9e2c51", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/737e6f908dfe47bcff5026f32cc56434dd9e2c51", "committedDate": "2020-07-10T20:33:11Z", "message": "Argument reordering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb77ca97e2e7013003447f7bc9d962b60a3a6ebe", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/eb77ca97e2e7013003447f7bc9d962b60a3a6ebe", "committedDate": "2020-07-10T20:33:54Z", "message": "Format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c01fd4d8e92a847a5fb950f20cbbde0be20f6f45", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c01fd4d8e92a847a5fb950f20cbbde0be20f6f45", "committedDate": "2020-07-10T21:16:18Z", "message": "Fixed visibility"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce1bf0a04c03a1bb275524ee1cd7aef8f78196f9", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/ce1bf0a04c03a1bb275524ee1cd7aef8f78196f9", "committedDate": "2020-07-10T22:30:43Z", "message": "Updated LinkageProblem usage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2NjcxMzk1", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#pullrequestreview-446671395", "createdAt": "2020-07-10T20:05:33Z", "commit": {"oid": "4a3daa4341e3490abd1ae346c00ffb2547511ad1"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDowNTozM1rOGwEN0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDoxNTozMVrOGwEcvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1MzkwNQ==", "bodyText": "Now this constructor is package-private.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453053905", "createdAt": "2020-07-10T20:05:33Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -0,0 +1,167 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.ListMultimap;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Multimaps;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import javax.annotation.Nullable;\n+\n+/**\n+ * A linkage error.\n+ *\n+ * @see <a href=\"https://jlbp.dev/glossary.html#linkage-error\">Java Dependency Glossary: Linkage\n+ *     Error</a>\n+ */\n+public final class LinkageProblem {\n+\n+  private final ErrorType errorType;\n+  private final Symbol symbol;\n+  private final ClassFile containingClass;\n+  private final ClassFile sourceClass;\n+\n+  @VisibleForTesting\n+  public LinkageProblem(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjg1NDkwNA=="}, "originalCommit": {"oid": "28269c9d3ee138fa48d7c461eb3523d8f6551554"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1NDQ1MA==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453054450", "createdAt": "2020-07-10T20:06:57Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/IncompatibleLinkageProblem.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import java.util.Objects;\n+\n+/**\n+ * LinkageProblem caused by an invalid reference and both source class and target class is present.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1MTE1Ng=="}, "originalCommit": {"oid": "3c6c5a9e21a1f9b42d53b2149dfba4c8a3b9676e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1NDc1MQ==", "bodyText": "Reverted to \" is not accessible\".", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453054751", "createdAt": "2020-07-10T20:07:41Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/AbstractMethodProblem.java", "diffHunk": "@@ -0,0 +1,27 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+/**\n+ * The referenced method is not implemented in the class but the class is declared to implement the\n+ * method. Such unimplemented methods manifest as {@link AbstractMethodError} in runtime.\n+ */\n+class AbstractMethodProblem extends IncompatibleLinkageProblem {\n+  AbstractMethodProblem(Symbol symbol, ClassFile sourceClass, ClassFile targetClass) {\n+    super(\"%s is not accessible\", symbol, sourceClass, targetClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1MDgxNw=="}, "originalCommit": {"oid": "3c6c5a9e21a1f9b42d53b2149dfba4c8a3b9676e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1NjA2OA==", "bodyText": "No, it's at most one.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453056068", "createdAt": "2020-07-10T20:11:23Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -238,7 +238,8 @@ private boolean problemFilter(Map.Entry<SymbolProblem, ClassFile> entry) {\n    *     Virtual Machine Specification: 5.4.3.4. Interface Method Resolution</a>\n    */\n   @VisibleForTesting\n-  Optional<SymbolProblem> findSymbolProblem(ClassFile classFile, MethodSymbol symbol) {\n+  Optional<LinkageProblem> findLinkageProblem(\n+      ClassFile classFile, MethodSymbol symbol, ClassFile sourceClassFile) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwMTI5Mw=="}, "originalCommit": {"oid": "4a3daa4341e3490abd1ae346c00ffb2547511ad1"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1NjY2Mw==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453056663", "createdAt": "2020-07-10T20:12:47Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -256,18 +257,21 @@ private boolean problemFilter(Map.Entry<SymbolProblem, ClassFile> entry) {\n \n       if (!isClassAccessibleFrom(targetJavaClass, sourceClassName)) {\n         return Optional.of(\n-            new SymbolProblem(symbol, ErrorType.INACCESSIBLE_CLASS, containingClassFile));\n+            new LinkageProblem(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwMzM3Nw=="}, "originalCommit": {"oid": "4a3daa4341e3490abd1ae346c00ffb2547511ad1"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1Njg1Mw==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453056853", "createdAt": "2020-07-10T20:13:16Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -300,28 +305,30 @@ private boolean problemFilter(Map.Entry<SymbolProblem, ClassFile> entry) {\n \n       // The class is in class path but the symbol is not found\n       return Optional.of(\n-          new SymbolProblem(symbol, ErrorType.SYMBOL_NOT_FOUND, containingClassFile));\n+          new LinkageProblem(\n+              symbol, ErrorType.SYMBOL_NOT_FOUND, containingClassFile, sourceClassFile));\n     } catch (ClassNotFoundException ex) {\n       if (classDumper.catchesLinkageErrorOnClass(sourceClassName)) {\n         return Optional.empty();\n       }\n       ClassSymbol classSymbol = new ClassSymbol(symbol.getClassBinaryName());\n-      return Optional.of(new SymbolProblem(classSymbol, ErrorType.CLASS_NOT_FOUND, null));\n+      return Optional.of(\n+          new LinkageProblem(classSymbol, ErrorType.CLASS_NOT_FOUND, null, sourceClassFile));\n     }\n   }\n \n   /**\n    * Returns the linkage errors for unimplemented methods in {@code classFile}. Such unimplemented\n    * methods manifest as {@link AbstractMethodError} in runtime.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNTEyNQ=="}, "originalCommit": {"oid": "4a3daa4341e3490abd1ae346c00ffb2547511ad1"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1NzcyNQ==", "bodyText": "Now ErrorType has been removed and SymbolProblem's subclasses replaced the role.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453057725", "createdAt": "2020-07-10T20:15:31Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -300,28 +305,30 @@ private boolean problemFilter(Map.Entry<SymbolProblem, ClassFile> entry) {\n \n       // The class is in class path but the symbol is not found\n       return Optional.of(\n-          new SymbolProblem(symbol, ErrorType.SYMBOL_NOT_FOUND, containingClassFile));\n+          new LinkageProblem(\n+              symbol, ErrorType.SYMBOL_NOT_FOUND, containingClassFile, sourceClassFile));\n     } catch (ClassNotFoundException ex) {\n       if (classDumper.catchesLinkageErrorOnClass(sourceClassName)) {\n         return Optional.empty();\n       }\n       ClassSymbol classSymbol = new ClassSymbol(symbol.getClassBinaryName());\n-      return Optional.of(new SymbolProblem(classSymbol, ErrorType.CLASS_NOT_FOUND, null));\n+      return Optional.of(\n+          new LinkageProblem(classSymbol, ErrorType.CLASS_NOT_FOUND, null, sourceClassFile));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzAwNDg0Mw=="}, "originalCommit": {"oid": "4a3daa4341e3490abd1ae346c00ffb2547511ad1"}, "originalPosition": 209}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5d244198c178f8182fee6c6fcb0f90a4cbd4d5d", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/a5d244198c178f8182fee6c6fcb0f90a4cbd4d5d", "committedDate": "2020-07-12T12:58:56Z", "message": "Merge remote-tracking branch 'origin/master' into linkage-problem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aba62a6015ac2237bcd612c7adb53844921af892", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/aba62a6015ac2237bcd612c7adb53844921af892", "committedDate": "2020-07-13T02:37:37Z", "message": "Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/e9b354d50cb645c1bdc94b0069370d363205754e", "committedDate": "2020-07-13T04:33:08Z", "message": "Fixed accessor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb9a736994372bd9db872736f3b98e997532b79c", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/cb9a736994372bd9db872736f3b98e997532b79c", "committedDate": "2020-07-13T05:50:37Z", "message": "javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MTc2MTUy", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#pullrequestreview-447176152", "createdAt": "2020-07-13T11:45:37Z", "commit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMTo0NTozN1rOGwlDEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMjowMTo1NVrOGwlh5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5MTgyNQ==", "bodyText": "SymbolProblem --> LinkageProblem", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453591825", "createdAt": "2020-07-13T11:45:37Z", "author": {"login": "elharo"}, "path": "dashboard/src/main/resources/templates/macros.ftl", "diffHunk": "@@ -8,10 +8,11 @@\n   <#return plural?string(pluralNoun, singularNoun)>\n </#function>\n \n-<#macro formatJarLinkageReport classPathEntry problemsWithClass classPathResult dependencyPathRootCauses>\n-  <!-- problemsWithClass: ImmutableSetMultimap<SymbolProblem, String> converted to\n-    ImmutableMap<SymbolProblem, Collection<String>> to get key and set of values in Freemarker -->\n-  <#assign problemsToClasses = problemsWithClass.asMap() />\n+<#macro formatJarLinkageReport classPathEntry linkageProblems classPathResult\n+    dependencyPathRootCauses>\n+  <!-- problemsToClasses: ImmutableMap<SymbolProblem, ImmutableList<String>> to get key and set of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5MjE2Mg==", "bodyText": "in runtime --> at runtime.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453592162", "createdAt": "2020-07-13T11:46:15Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/AbstractMethodProblem.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+/**\n+ * The referenced {@code methodSymbol} is not implemented in the {@code targetClass} but the class\n+ * is declared to implement the method by {@code sourceClass}. Such unimplemented methods manifest\n+ * as {@link AbstractMethodError}s in runtime.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5MzY1OA==", "bodyText": "writeXmlEvents --> writeLinkageProblem", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453593658", "createdAt": "2020-07-13T11:49:31Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFiles.java", "diffHunk": "@@ -192,17 +190,16 @@ private static void insertIndent(InputStream inputStream, OutputStream outputStr\n     indentTransformer.transform(new StreamSource(inputStream), new StreamResult(outputStream));\n   }\n \n-  private static void writeXmlEvents(\n-      XMLEventWriter writer, SymbolProblem symbolProblem, ClassFile classFile)\n+  private static void writeXmlEvents(XMLEventWriter writer, LinkageProblem linkageProblem)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5MzkzMw==", "bodyText": "different package than the target class", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453593933", "createdAt": "2020-07-13T11:50:07Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblem.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+/**\n+ * The {@code classSymbol} is inaccessible to the {@code sourceClass} as per {@code sourceClass}'s\n+ * definition of the class symbol.\n+ *\n+ * <p>If the source class is in a different package, the class or one of its enclosing types is not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5NDE3OQ==", "bodyText": "different package than the target class", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453594179", "createdAt": "2020-07-13T11:50:38Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/InaccessibleMemberProblem.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+/**\n+ * The {@code symbol} (method or field) defined in {@code targetClass} is inaccessible to the {@code\n+ * sourceClass}.\n+ *\n+ * <p>If the source class is in a different package, the member is not public. If the source is in", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5NDM0Nw==", "bodyText": "class is private --> member is private", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453594347", "createdAt": "2020-07-13T11:51:00Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/InaccessibleMemberProblem.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+/**\n+ * The {@code symbol} (method or field) defined in {@code targetClass} is inaccessible to the {@code\n+ * sourceClass}.\n+ *\n+ * <p>If the source class is in a different package, the member is not public. If the source is in\n+ * the same package, the class is private. If the source is a subclass of the target class, the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5NDc0NA==", "bodyText": "I don't see why the second case is breaking. I'm probably missing something here, but if you can explain it to me offline, it would helpful. Thanks.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453594744", "createdAt": "2020-07-13T11:51:57Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/IncompatibleClassChangeProblem.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+/**\n+ * The {@code symbol} (class or interface) defined in {@code targetClass} is not binary-compatible\n+ * with the {@code sourceClass}.\n+ *\n+ * <p>An example case of breaking binary-compatibility is when a superclass changes a method to\n+ * {@code final} and a subclass is still overriding the method. Another example is when there is a\n+ * method call to an interface and the interface is changed to a class with the same name.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5NTU5Ng==", "bodyText": "if block doesn't seem needed here", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453595596", "createdAt": "2020-07-13T11:53:52Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -136,28 +133,29 @@ private LinkageChecker(\n \n   /**\n    * Searches the classpath for linkage errors.\n-   * \n-   * @return {@link SymbolProblem}s found in the class path and referencing classes\n+   *\n+   * @return {@link LinkageProblem}s found in the class path and referencing classes\n    * @throws IOException I/O error reading files in the classpath\n    */\n-  public ImmutableSetMultimap<SymbolProblem, ClassFile> findSymbolProblems() throws IOException {\n-    // Having Problem in key will dedup SymbolProblems\n-    ImmutableSetMultimap.Builder<SymbolProblem, ClassFile> problemToClass =\n-        ImmutableSetMultimap.builder();\n-    \n+  public ImmutableSet<LinkageProblem> findLinkageProblems() throws IOException {\n+    ImmutableSet.Builder<LinkageProblem> problemToClass = ImmutableSet.builder();\n+\n+    // This sourceClassFile is a source of references to other symbols.\n     for (ClassFile classFile : symbolReferences.getClassFiles()) {\n       ImmutableSet<ClassSymbol> classSymbols = symbolReferences.getClassSymbols(classFile);\n-\n       for (ClassSymbol classSymbol : classSymbols) {\n         if (classSymbol instanceof SuperClassSymbol) {\n-          ImmutableList<SymbolProblem> problems =\n-              findAbstractParentProblems(classFile, (SuperClassSymbol) classSymbol);\n-          if (!problems.isEmpty()) {\n-            String superClassName = classSymbol.getClassBinaryName();\n-            ClassPathEntry superClassLocation = classDumper.findClassLocation(superClassName);\n+          String superClassName = classSymbol.getClassBinaryName();\n+          ClassPathEntry superClassLocation = classDumper.findClassLocation(superClassName);\n+          if (superClassLocation != null) {\n             ClassFile superClassFile = new ClassFile(superClassLocation, superClassName);\n-            for (SymbolProblem problem : problems) {\n-              problemToClass.put(problem, superClassFile);\n+            ImmutableList<LinkageProblem> problems =\n+                findAbstractParentProblems(\n+                    classFile, (SuperClassSymbol) classSymbol, superClassFile);\n+            if (!problems.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5NTcyMg==", "bodyText": "if block isn't needed", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453595722", "createdAt": "2020-07-13T11:54:08Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -167,19 +165,22 @@ private LinkageChecker(\n         String classFileName = classDumper.getFileName(classBinaryName);\n         if (!classFileNames.contains(classFileName)) {\n           if (classSymbol instanceof InterfaceSymbol) {\n-            ImmutableList<SymbolProblem> problems =\n-                findInterfaceProblems(classFile, (InterfaceSymbol) classSymbol);\n-            if (!problems.isEmpty()) {\n-              String interfaceName = classSymbol.getClassBinaryName();\n-              ClassPathEntry interfaceLocation = classDumper.findClassLocation(interfaceName);\n+            String interfaceName = classSymbol.getClassBinaryName();\n+            ClassPathEntry interfaceLocation = classDumper.findClassLocation(interfaceName);\n+            if (interfaceLocation != null) {\n               ClassFile interfaceClassFile = new ClassFile(interfaceLocation, interfaceName);\n-              for (SymbolProblem problem : problems) {\n-                problemToClass.put(problem, interfaceClassFile);\n+              ImmutableList<LinkageProblem> problems =\n+                  findInterfaceProblems(\n+                      classFile, (InterfaceSymbol) classSymbol, interfaceClassFile);\n+              if (!problems.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5NjQwMg==", "bodyText": "weird that this is filtering after building. Could you simply not add the elements we don't want in the first place.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453596402", "createdAt": "2020-07-13T11:55:28Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -205,26 +206,25 @@ private LinkageChecker(\n         String classBinaryName = fieldSymbol.getClassBinaryName();\n         String classFileName = classDumper.getFileName(classBinaryName);\n         if (!classFileNames.contains(classFileName)) {\n-          findSymbolProblem(classFile, fieldSymbol)\n-              .ifPresent(problem -> problemToClass.put(problem, classFile.topLevelClassFile()));\n+          findLinkageProblem(classFile, fieldSymbol, classFile.topLevelClassFile())\n+              .ifPresent(problemToClass::add);\n         }\n       }\n     }\n \n     // Filter classes in whitelist\n-    SetMultimap<SymbolProblem, ClassFile> filteredMap =\n-        Multimaps.filterEntries(problemToClass.build(), this::problemFilter);\n-    return ImmutableSetMultimap.copyOf(filteredMap);\n+    ImmutableSet<LinkageProblem> filteredMap =\n+        problemToClass.build().stream().filter(this::problemFilter).collect(toImmutableSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5NzY1Mg==", "bodyText": "toString() can be inferred here", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453597652", "createdAt": "2020-07-13T11:57:51Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.ListMultimap;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Multimaps;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * A linkage error describing an invalid reference from {@code sourceClass} to {@code symbol}.\n+ *\n+ * @see <a href=\"https://jlbp.dev/glossary.html#linkage-error\">Java Dependency Glossary: Linkage\n+ *     Error</a>\n+ */\n+public abstract class LinkageProblem {\n+\n+  private final Symbol symbol;\n+  private final ClassFile sourceClass;\n+  private final String symbolProblemMessage;\n+\n+  /**\n+   * A linkage error describing an invalid reference.\n+   *\n+   * @param symbolProblemMessage human-friendly description of this linkage error. Used in\n+   *     conjunction with {@code symbol}, this value explains why we consider the reference to\n+   *     {@code symbol} as a linkage error.\n+   * @param sourceClass the source of the invalid reference.\n+   * @param symbol the target of the invalid reference\n+   */\n+  LinkageProblem(String symbolProblemMessage, ClassFile sourceClass, Symbol symbol) {\n+    this.symbolProblemMessage = Preconditions.checkNotNull(symbolProblemMessage);\n+    Preconditions.checkNotNull(symbol);\n+\n+    // After finding symbol problem, there is no need to have SuperClassSymbol over ClassSymbol.\n+    this.symbol =\n+        symbol instanceof SuperClassSymbol ? new ClassSymbol(symbol.getClassBinaryName()) : symbol;\n+    this.sourceClass = Preconditions.checkNotNull(sourceClass);\n+  }\n+\n+  /** Returns the target symbol that was not resolved. */\n+  public Symbol getSymbol() {\n+    return symbol;\n+  }\n+\n+  /** Returns the source of the invalid reference which this linkage error represents. */\n+  public ClassFile getSourceClass() {\n+    return sourceClass;\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    }\n+    if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+    LinkageProblem that = (LinkageProblem) other;\n+    return symbol.equals(that.symbol) && Objects.equals(sourceClass, that.sourceClass);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(symbol, sourceClass);\n+  }\n+\n+  @Override\n+  public final String toString() {\n+    return formatSymbolProblem() + \" referenced by \" + sourceClass;\n+  }\n+\n+  /**\n+   * Returns the description of the problem on the {@code symbol}. This description does not include\n+   * the {@code sourceClass}. This value is useful when grouping {@link LinkageProblem}s by their\n+   * {@code symbol}s.\n+   */\n+  public String formatSymbolProblem() {\n+    return symbol.toString() + \" \" + symbolProblemMessage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5OTAyMg==", "bodyText": "Feels like another instance of using a data structure to stand in for a more specific type. Also feels very specific to one use case. Perhaps the Map can be pushed into the class so instead there's a method that returns the source classes given a linkage problem.\nAlso, I expect Set or Collection fits better here than List unless order is significant for some reason.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453599022", "createdAt": "2020-07-13T12:00:25Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.ListMultimap;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Multimaps;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * A linkage error describing an invalid reference from {@code sourceClass} to {@code symbol}.\n+ *\n+ * @see <a href=\"https://jlbp.dev/glossary.html#linkage-error\">Java Dependency Glossary: Linkage\n+ *     Error</a>\n+ */\n+public abstract class LinkageProblem {\n+\n+  private final Symbol symbol;\n+  private final ClassFile sourceClass;\n+  private final String symbolProblemMessage;\n+\n+  /**\n+   * A linkage error describing an invalid reference.\n+   *\n+   * @param symbolProblemMessage human-friendly description of this linkage error. Used in\n+   *     conjunction with {@code symbol}, this value explains why we consider the reference to\n+   *     {@code symbol} as a linkage error.\n+   * @param sourceClass the source of the invalid reference.\n+   * @param symbol the target of the invalid reference\n+   */\n+  LinkageProblem(String symbolProblemMessage, ClassFile sourceClass, Symbol symbol) {\n+    this.symbolProblemMessage = Preconditions.checkNotNull(symbolProblemMessage);\n+    Preconditions.checkNotNull(symbol);\n+\n+    // After finding symbol problem, there is no need to have SuperClassSymbol over ClassSymbol.\n+    this.symbol =\n+        symbol instanceof SuperClassSymbol ? new ClassSymbol(symbol.getClassBinaryName()) : symbol;\n+    this.sourceClass = Preconditions.checkNotNull(sourceClass);\n+  }\n+\n+  /** Returns the target symbol that was not resolved. */\n+  public Symbol getSymbol() {\n+    return symbol;\n+  }\n+\n+  /** Returns the source of the invalid reference which this linkage error represents. */\n+  public ClassFile getSourceClass() {\n+    return sourceClass;\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    }\n+    if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+    LinkageProblem that = (LinkageProblem) other;\n+    return symbol.equals(that.symbol) && Objects.equals(sourceClass, that.sourceClass);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(symbol, sourceClass);\n+  }\n+\n+  @Override\n+  public final String toString() {\n+    return formatSymbolProblem() + \" referenced by \" + sourceClass;\n+  }\n+\n+  /**\n+   * Returns the description of the problem on the {@code symbol}. This description does not include\n+   * the {@code sourceClass}. This value is useful when grouping {@link LinkageProblem}s by their\n+   * {@code symbol}s.\n+   */\n+  public String formatSymbolProblem() {\n+    return symbol.toString() + \" \" + symbolProblemMessage;\n+  }\n+\n+  /** Returns mapping from symbol problem description to the names of the source classes. */\n+  public static ImmutableMap<String, ImmutableList<String>> groupBySymbolProblem(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5OTcxOQ==", "bodyText": "symbol --> linkage?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453599719", "createdAt": "2020-07-13T12:01:55Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.ListMultimap;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Multimaps;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * A linkage error describing an invalid reference from {@code sourceClass} to {@code symbol}.\n+ *\n+ * @see <a href=\"https://jlbp.dev/glossary.html#linkage-error\">Java Dependency Glossary: Linkage\n+ *     Error</a>\n+ */\n+public abstract class LinkageProblem {\n+\n+  private final Symbol symbol;\n+  private final ClassFile sourceClass;\n+  private final String symbolProblemMessage;\n+\n+  /**\n+   * A linkage error describing an invalid reference.\n+   *\n+   * @param symbolProblemMessage human-friendly description of this linkage error. Used in\n+   *     conjunction with {@code symbol}, this value explains why we consider the reference to\n+   *     {@code symbol} as a linkage error.\n+   * @param sourceClass the source of the invalid reference.\n+   * @param symbol the target of the invalid reference\n+   */\n+  LinkageProblem(String symbolProblemMessage, ClassFile sourceClass, Symbol symbol) {\n+    this.symbolProblemMessage = Preconditions.checkNotNull(symbolProblemMessage);\n+    Preconditions.checkNotNull(symbol);\n+\n+    // After finding symbol problem, there is no need to have SuperClassSymbol over ClassSymbol.\n+    this.symbol =\n+        symbol instanceof SuperClassSymbol ? new ClassSymbol(symbol.getClassBinaryName()) : symbol;\n+    this.sourceClass = Preconditions.checkNotNull(sourceClass);\n+  }\n+\n+  /** Returns the target symbol that was not resolved. */\n+  public Symbol getSymbol() {\n+    return symbol;\n+  }\n+\n+  /** Returns the source of the invalid reference which this linkage error represents. */\n+  public ClassFile getSourceClass() {\n+    return sourceClass;\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    }\n+    if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+    LinkageProblem that = (LinkageProblem) other;\n+    return symbol.equals(that.symbol) && Objects.equals(sourceClass, that.sourceClass);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(symbol, sourceClass);\n+  }\n+\n+  @Override\n+  public final String toString() {\n+    return formatSymbolProblem() + \" referenced by \" + sourceClass;\n+  }\n+\n+  /**\n+   * Returns the description of the problem on the {@code symbol}. This description does not include\n+   * the {@code sourceClass}. This value is useful when grouping {@link LinkageProblem}s by their\n+   * {@code symbol}s.\n+   */\n+  public String formatSymbolProblem() {\n+    return symbol.toString() + \" \" + symbolProblemMessage;\n+  }\n+\n+  /** Returns mapping from symbol problem description to the names of the source classes. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 103}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64aee2ea3236f76d0cd35cf8ca4e0a3627fe91d6", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/64aee2ea3236f76d0cd35cf8ca4e0a3627fe91d6", "committedDate": "2020-07-13T13:01:58Z", "message": "Applied review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "725add2d0c84ba0a827eb2e7a419696e41e8c6ee", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/725add2d0c84ba0a827eb2e7a419696e41e8c6ee", "committedDate": "2020-07-13T13:04:21Z", "message": "Format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "32c0314ba2dfc06b12d7b2968d0a78a5441ae24d", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/32c0314ba2dfc06b12d7b2968d0a78a5441ae24d", "committedDate": "2020-07-13T13:20:22Z", "message": "at runtime"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MTk4MjUw", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#pullrequestreview-447198250", "createdAt": "2020-07-13T12:20:40Z", "commit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMjoyMDo0MFrOGwmGWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMjo1NjoyMFrOGwnTyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYwOTA0OQ==", "bodyText": "Fixed.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453609049", "createdAt": "2020-07-13T12:20:40Z", "author": {"login": "suztomo"}, "path": "dashboard/src/main/resources/templates/macros.ftl", "diffHunk": "@@ -8,10 +8,11 @@\n   <#return plural?string(pluralNoun, singularNoun)>\n </#function>\n \n-<#macro formatJarLinkageReport classPathEntry problemsWithClass classPathResult dependencyPathRootCauses>\n-  <!-- problemsWithClass: ImmutableSetMultimap<SymbolProblem, String> converted to\n-    ImmutableMap<SymbolProblem, Collection<String>> to get key and set of values in Freemarker -->\n-  <#assign problemsToClasses = problemsWithClass.asMap() />\n+<#macro formatJarLinkageReport classPathEntry linkageProblems classPathResult\n+    dependencyPathRootCauses>\n+  <!-- problemsToClasses: ImmutableMap<SymbolProblem, ImmutableList<String>> to get key and set of", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5MTgyNQ=="}, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYwOTE5Mw==", "bodyText": "Fixed.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453609193", "createdAt": "2020-07-13T12:20:59Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/AbstractMethodProblem.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+/**\n+ * The referenced {@code methodSymbol} is not implemented in the {@code targetClass} but the class\n+ * is declared to implement the method by {@code sourceClass}. Such unimplemented methods manifest\n+ * as {@link AbstractMethodError}s in runtime.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5MjE2Mg=="}, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYwOTY4MA==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453609680", "createdAt": "2020-07-13T12:21:54Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFiles.java", "diffHunk": "@@ -192,17 +190,16 @@ private static void insertIndent(InputStream inputStream, OutputStream outputStr\n     indentTransformer.transform(new StreamSource(inputStream), new StreamResult(outputStream));\n   }\n \n-  private static void writeXmlEvents(\n-      XMLEventWriter writer, SymbolProblem symbolProblem, ClassFile classFile)\n+  private static void writeXmlEvents(XMLEventWriter writer, LinkageProblem linkageProblem)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5MzY1OA=="}, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYxMDAwMA==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453610000", "createdAt": "2020-07-13T12:22:32Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/InaccessibleClassProblem.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+/**\n+ * The {@code classSymbol} is inaccessible to the {@code sourceClass} as per {@code sourceClass}'s\n+ * definition of the class symbol.\n+ *\n+ * <p>If the source class is in a different package, the class or one of its enclosing types is not", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5MzkzMw=="}, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYxMDI2OA==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453610268", "createdAt": "2020-07-13T12:23:00Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/InaccessibleMemberProblem.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+/**\n+ * The {@code symbol} (method or field) defined in {@code targetClass} is inaccessible to the {@code\n+ * sourceClass}.\n+ *\n+ * <p>If the source class is in a different package, the member is not public. If the source is in", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5NDE3OQ=="}, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYxMDQ1Nw==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453610457", "createdAt": "2020-07-13T12:23:28Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/InaccessibleMemberProblem.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+/**\n+ * The {@code symbol} (method or field) defined in {@code targetClass} is inaccessible to the {@code\n+ * sourceClass}.\n+ *\n+ * <p>If the source class is in a different package, the member is not public. If the source is in\n+ * the same package, the class is private. If the source is a subclass of the target class, the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5NDM0Nw=="}, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYxMjQwNg==", "bodyText": "It's \"If C is not an interface, interface method resolution throws an IncompatibleClassChangeError.\"\nhttps://docs.oracle.com/javase/specs/jvms/se8/html/jvms-5.html#jvms-5.4.3.4", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453612406", "createdAt": "2020-07-13T12:27:07Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/IncompatibleClassChangeProblem.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+/**\n+ * The {@code symbol} (class or interface) defined in {@code targetClass} is not binary-compatible\n+ * with the {@code sourceClass}.\n+ *\n+ * <p>An example case of breaking binary-compatibility is when a superclass changes a method to\n+ * {@code final} and a subclass is still overriding the method. Another example is when there is a\n+ * method call to an interface and the interface is changed to a class with the same name.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5NDc0NA=="}, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYxMzA3NQ==", "bodyText": "Removed .toString().", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453613075", "createdAt": "2020-07-13T12:28:25Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.ListMultimap;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Multimaps;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * A linkage error describing an invalid reference from {@code sourceClass} to {@code symbol}.\n+ *\n+ * @see <a href=\"https://jlbp.dev/glossary.html#linkage-error\">Java Dependency Glossary: Linkage\n+ *     Error</a>\n+ */\n+public abstract class LinkageProblem {\n+\n+  private final Symbol symbol;\n+  private final ClassFile sourceClass;\n+  private final String symbolProblemMessage;\n+\n+  /**\n+   * A linkage error describing an invalid reference.\n+   *\n+   * @param symbolProblemMessage human-friendly description of this linkage error. Used in\n+   *     conjunction with {@code symbol}, this value explains why we consider the reference to\n+   *     {@code symbol} as a linkage error.\n+   * @param sourceClass the source of the invalid reference.\n+   * @param symbol the target of the invalid reference\n+   */\n+  LinkageProblem(String symbolProblemMessage, ClassFile sourceClass, Symbol symbol) {\n+    this.symbolProblemMessage = Preconditions.checkNotNull(symbolProblemMessage);\n+    Preconditions.checkNotNull(symbol);\n+\n+    // After finding symbol problem, there is no need to have SuperClassSymbol over ClassSymbol.\n+    this.symbol =\n+        symbol instanceof SuperClassSymbol ? new ClassSymbol(symbol.getClassBinaryName()) : symbol;\n+    this.sourceClass = Preconditions.checkNotNull(sourceClass);\n+  }\n+\n+  /** Returns the target symbol that was not resolved. */\n+  public Symbol getSymbol() {\n+    return symbol;\n+  }\n+\n+  /** Returns the source of the invalid reference which this linkage error represents. */\n+  public ClassFile getSourceClass() {\n+    return sourceClass;\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    }\n+    if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+    LinkageProblem that = (LinkageProblem) other;\n+    return symbol.equals(that.symbol) && Objects.equals(sourceClass, that.sourceClass);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(symbol, sourceClass);\n+  }\n+\n+  @Override\n+  public final String toString() {\n+    return formatSymbolProblem() + \" referenced by \" + sourceClass;\n+  }\n+\n+  /**\n+   * Returns the description of the problem on the {@code symbol}. This description does not include\n+   * the {@code sourceClass}. This value is useful when grouping {@link LinkageProblem}s by their\n+   * {@code symbol}s.\n+   */\n+  public String formatSymbolProblem() {\n+    return symbol.toString() + \" \" + symbolProblemMessage;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5NzY1Mg=="}, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYxMzI1OA==", "bodyText": "It's symbol problem as it's return value is formatSymbolProblem().", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453613258", "createdAt": "2020-07-13T12:28:46Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.ListMultimap;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Multimaps;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * A linkage error describing an invalid reference from {@code sourceClass} to {@code symbol}.\n+ *\n+ * @see <a href=\"https://jlbp.dev/glossary.html#linkage-error\">Java Dependency Glossary: Linkage\n+ *     Error</a>\n+ */\n+public abstract class LinkageProblem {\n+\n+  private final Symbol symbol;\n+  private final ClassFile sourceClass;\n+  private final String symbolProblemMessage;\n+\n+  /**\n+   * A linkage error describing an invalid reference.\n+   *\n+   * @param symbolProblemMessage human-friendly description of this linkage error. Used in\n+   *     conjunction with {@code symbol}, this value explains why we consider the reference to\n+   *     {@code symbol} as a linkage error.\n+   * @param sourceClass the source of the invalid reference.\n+   * @param symbol the target of the invalid reference\n+   */\n+  LinkageProblem(String symbolProblemMessage, ClassFile sourceClass, Symbol symbol) {\n+    this.symbolProblemMessage = Preconditions.checkNotNull(symbolProblemMessage);\n+    Preconditions.checkNotNull(symbol);\n+\n+    // After finding symbol problem, there is no need to have SuperClassSymbol over ClassSymbol.\n+    this.symbol =\n+        symbol instanceof SuperClassSymbol ? new ClassSymbol(symbol.getClassBinaryName()) : symbol;\n+    this.sourceClass = Preconditions.checkNotNull(sourceClass);\n+  }\n+\n+  /** Returns the target symbol that was not resolved. */\n+  public Symbol getSymbol() {\n+    return symbol;\n+  }\n+\n+  /** Returns the source of the invalid reference which this linkage error represents. */\n+  public ClassFile getSourceClass() {\n+    return sourceClass;\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    }\n+    if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+    LinkageProblem that = (LinkageProblem) other;\n+    return symbol.equals(that.symbol) && Objects.equals(sourceClass, that.sourceClass);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(symbol, sourceClass);\n+  }\n+\n+  @Override\n+  public final String toString() {\n+    return formatSymbolProblem() + \" referenced by \" + sourceClass;\n+  }\n+\n+  /**\n+   * Returns the description of the problem on the {@code symbol}. This description does not include\n+   * the {@code sourceClass}. This value is useful when grouping {@link LinkageProblem}s by their\n+   * {@code symbol}s.\n+   */\n+  public String formatSymbolProblem() {\n+    return symbol.toString() + \" \" + symbolProblemMessage;\n+  }\n+\n+  /** Returns mapping from symbol problem description to the names of the source classes. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5OTcxOQ=="}, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYyMTA4Ng==", "bodyText": "I don't think a LinkageProblem instance should hold multiple source classes. If that map (or set) is inside LinkageProblem class, it makes LinkageProblems always grouped by the target symbols. When rendering symbol problems, it's not always the case; the dashboard groups linkage errors by the source source class's jar first and then groups them by target symbols. Also, the nested structure makes difficult to find new linkage errors; without the that map inside LinkageProblem, it can just use Sets.difference(). Grouping linkage errors by source class or target symbols is just a presentation (in groupBySymbolProblem's case, it's for the dashboard). Linkage errors' data type should not dictate that grouping. We should keeping the structure flat and group them when necessary.\nUpdated to ImmutableSet as I don't need duplicate. We need (ImmutableSet's) deterministic ordering for the assertions in the linkage error output in tests.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453621086", "createdAt": "2020-07-13T12:43:13Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.base.Preconditions;\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableListMultimap;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.ListMultimap;\n+import com.google.common.collect.Maps;\n+import com.google.common.collect.Multimaps;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * A linkage error describing an invalid reference from {@code sourceClass} to {@code symbol}.\n+ *\n+ * @see <a href=\"https://jlbp.dev/glossary.html#linkage-error\">Java Dependency Glossary: Linkage\n+ *     Error</a>\n+ */\n+public abstract class LinkageProblem {\n+\n+  private final Symbol symbol;\n+  private final ClassFile sourceClass;\n+  private final String symbolProblemMessage;\n+\n+  /**\n+   * A linkage error describing an invalid reference.\n+   *\n+   * @param symbolProblemMessage human-friendly description of this linkage error. Used in\n+   *     conjunction with {@code symbol}, this value explains why we consider the reference to\n+   *     {@code symbol} as a linkage error.\n+   * @param sourceClass the source of the invalid reference.\n+   * @param symbol the target of the invalid reference\n+   */\n+  LinkageProblem(String symbolProblemMessage, ClassFile sourceClass, Symbol symbol) {\n+    this.symbolProblemMessage = Preconditions.checkNotNull(symbolProblemMessage);\n+    Preconditions.checkNotNull(symbol);\n+\n+    // After finding symbol problem, there is no need to have SuperClassSymbol over ClassSymbol.\n+    this.symbol =\n+        symbol instanceof SuperClassSymbol ? new ClassSymbol(symbol.getClassBinaryName()) : symbol;\n+    this.sourceClass = Preconditions.checkNotNull(sourceClass);\n+  }\n+\n+  /** Returns the target symbol that was not resolved. */\n+  public Symbol getSymbol() {\n+    return symbol;\n+  }\n+\n+  /** Returns the source of the invalid reference which this linkage error represents. */\n+  public ClassFile getSourceClass() {\n+    return sourceClass;\n+  }\n+\n+  @Override\n+  public boolean equals(Object other) {\n+    if (this == other) {\n+      return true;\n+    }\n+    if (other == null || getClass() != other.getClass()) {\n+      return false;\n+    }\n+    LinkageProblem that = (LinkageProblem) other;\n+    return symbol.equals(that.symbol) && Objects.equals(sourceClass, that.sourceClass);\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    return Objects.hash(symbol, sourceClass);\n+  }\n+\n+  @Override\n+  public final String toString() {\n+    return formatSymbolProblem() + \" referenced by \" + sourceClass;\n+  }\n+\n+  /**\n+   * Returns the description of the problem on the {@code symbol}. This description does not include\n+   * the {@code sourceClass}. This value is useful when grouping {@link LinkageProblem}s by their\n+   * {@code symbol}s.\n+   */\n+  public String formatSymbolProblem() {\n+    return symbol.toString() + \" \" + symbolProblemMessage;\n+  }\n+\n+  /** Returns mapping from symbol problem description to the names of the source classes. */\n+  public static ImmutableMap<String, ImmutableList<String>> groupBySymbolProblem(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5OTAyMg=="}, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYyMzQ0OQ==", "bodyText": "Good catch. Fixed.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453623449", "createdAt": "2020-07-13T12:47:10Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -136,28 +133,29 @@ private LinkageChecker(\n \n   /**\n    * Searches the classpath for linkage errors.\n-   * \n-   * @return {@link SymbolProblem}s found in the class path and referencing classes\n+   *\n+   * @return {@link LinkageProblem}s found in the class path and referencing classes\n    * @throws IOException I/O error reading files in the classpath\n    */\n-  public ImmutableSetMultimap<SymbolProblem, ClassFile> findSymbolProblems() throws IOException {\n-    // Having Problem in key will dedup SymbolProblems\n-    ImmutableSetMultimap.Builder<SymbolProblem, ClassFile> problemToClass =\n-        ImmutableSetMultimap.builder();\n-    \n+  public ImmutableSet<LinkageProblem> findLinkageProblems() throws IOException {\n+    ImmutableSet.Builder<LinkageProblem> problemToClass = ImmutableSet.builder();\n+\n+    // This sourceClassFile is a source of references to other symbols.\n     for (ClassFile classFile : symbolReferences.getClassFiles()) {\n       ImmutableSet<ClassSymbol> classSymbols = symbolReferences.getClassSymbols(classFile);\n-\n       for (ClassSymbol classSymbol : classSymbols) {\n         if (classSymbol instanceof SuperClassSymbol) {\n-          ImmutableList<SymbolProblem> problems =\n-              findAbstractParentProblems(classFile, (SuperClassSymbol) classSymbol);\n-          if (!problems.isEmpty()) {\n-            String superClassName = classSymbol.getClassBinaryName();\n-            ClassPathEntry superClassLocation = classDumper.findClassLocation(superClassName);\n+          String superClassName = classSymbol.getClassBinaryName();\n+          ClassPathEntry superClassLocation = classDumper.findClassLocation(superClassName);\n+          if (superClassLocation != null) {\n             ClassFile superClassFile = new ClassFile(superClassLocation, superClassName);\n-            for (SymbolProblem problem : problems) {\n-              problemToClass.put(problem, superClassFile);\n+            ImmutableList<LinkageProblem> problems =\n+                findAbstractParentProblems(\n+                    classFile, (SuperClassSymbol) classSymbol, superClassFile);\n+            if (!problems.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5NTU5Ng=="}, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYyMzYwNw==", "bodyText": "Fixed.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453623607", "createdAt": "2020-07-13T12:47:27Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -167,19 +165,22 @@ private LinkageChecker(\n         String classFileName = classDumper.getFileName(classBinaryName);\n         if (!classFileNames.contains(classFileName)) {\n           if (classSymbol instanceof InterfaceSymbol) {\n-            ImmutableList<SymbolProblem> problems =\n-                findInterfaceProblems(classFile, (InterfaceSymbol) classSymbol);\n-            if (!problems.isEmpty()) {\n-              String interfaceName = classSymbol.getClassBinaryName();\n-              ClassPathEntry interfaceLocation = classDumper.findClassLocation(interfaceName);\n+            String interfaceName = classSymbol.getClassBinaryName();\n+            ClassPathEntry interfaceLocation = classDumper.findClassLocation(interfaceName);\n+            if (interfaceLocation != null) {\n               ClassFile interfaceClassFile = new ClassFile(interfaceLocation, interfaceName);\n-              for (SymbolProblem problem : problems) {\n-                problemToClass.put(problem, interfaceClassFile);\n+              ImmutableList<LinkageProblem> problems =\n+                  findInterfaceProblems(\n+                      classFile, (InterfaceSymbol) classSymbol, interfaceClassFile);\n+              if (!problems.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5NTcyMg=="}, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzYyODg3NA==", "bodyText": "That would duplicate if (problemFilter(linkageProblem)) { problemToClass.add... } every time LinkageProblem is created.\nBy filtering the linkage problems at the end, we're reducing the scattered piece of code into one place.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453628874", "createdAt": "2020-07-13T12:56:20Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -205,26 +206,25 @@ private LinkageChecker(\n         String classBinaryName = fieldSymbol.getClassBinaryName();\n         String classFileName = classDumper.getFileName(classBinaryName);\n         if (!classFileNames.contains(classFileName)) {\n-          findSymbolProblem(classFile, fieldSymbol)\n-              .ifPresent(problem -> problemToClass.put(problem, classFile.topLevelClassFile()));\n+          findLinkageProblem(classFile, fieldSymbol, classFile.topLevelClassFile())\n+              .ifPresent(problemToClass::add);\n         }\n       }\n     }\n \n     // Filter classes in whitelist\n-    SetMultimap<SymbolProblem, ClassFile> filteredMap =\n-        Multimaps.filterEntries(problemToClass.build(), this::problemFilter);\n-    return ImmutableSetMultimap.copyOf(filteredMap);\n+    ImmutableSet<LinkageProblem> filteredMap =\n+        problemToClass.build().stream().filter(this::problemFilter).collect(toImmutableSet());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU5NjQwMg=="}, "originalCommit": {"oid": "e9b354d50cb645c1bdc94b0069370d363205754e"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MzA0MTE2", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#pullrequestreview-447304116", "createdAt": "2020-07-13T14:28:47Z", "commit": {"oid": "32c0314ba2dfc06b12d7b2968d0a78a5441ae24d"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNDoyODo0N1rOGwrFng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNDozNTozN1rOGwrZIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY5MDc4Mg==", "bodyText": "count --> counts", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453690782", "createdAt": "2020-07-13T14:28:47Z", "author": {"login": "elharo"}, "path": "dashboard/src/main/java/com/google/cloud/tools/opensource/dashboard/DashboardMain.java", "diffHunk": "@@ -357,24 +355,31 @@ private static ArtifactResults generateArtifactReport(\n           collectLatestVersions(globalDependencies), transitiveDependencies);\n \n       long totalLinkageErrorCount =\n-          symbolProblemTable.values().stream()\n-              .flatMap(problemToClasses -> problemToClasses.keySet().stream())\n-              .distinct()\n+          linkageProblemTable.values().stream()\n+              .flatMap(problemToClasses -> problemToClasses.stream().map(LinkageProblem::getSymbol))\n+              .distinct() // The dashboard count linkage errors by the symbols", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32c0314ba2dfc06b12d7b2968d0a78a5441ae24d"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY5MTk3Mg==", "bodyText": "<!-- should be <#--", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453691972", "createdAt": "2020-07-13T14:30:23Z", "author": {"login": "elharo"}, "path": "dashboard/src/main/resources/templates/macros.ftl", "diffHunk": "@@ -8,10 +8,11 @@\n   <#return plural?string(pluralNoun, singularNoun)>\n </#function>\n \n-<#macro formatJarLinkageReport classPathEntry problemsWithClass classPathResult dependencyPathRootCauses>\n-  <!-- problemsWithClass: ImmutableSetMultimap<SymbolProblem, String> converted to\n-    ImmutableMap<SymbolProblem, Collection<String>> to get key and set of values in Freemarker -->\n-  <#assign problemsToClasses = problemsWithClass.asMap() />\n+<#macro formatJarLinkageReport classPathEntry linkageProblems classPathResult\n+    dependencyPathRootCauses>\n+  <!-- problemsToClasses: ImmutableMap<LinkageProblem, ImmutableList<String>> to get key and set of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32c0314ba2dfc06b12d7b2968d0a78a5441ae24d"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY5Mjg5Mw==", "bodyText": "string --> strings\nuse <#-- to start a Freemarker comment", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453692893", "createdAt": "2020-07-13T14:31:36Z", "author": {"login": "elharo"}, "path": "dashboard/src/main/resources/templates/macros.ftl", "diffHunk": "@@ -46,6 +40,15 @@\n       </#list>\n     </ul>\n   </#list>\n+  <#assign jarsInProblem = {} >\n+  <#list linkageProblems as problem>\n+    <#if (problem.getTargetClass())?? >\n+      <#assign targetClassPathEntry = problem.getTargetClass().getClassPathEntry() />\n+      <!-- Freemarker's hash requires its keys to be string.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32c0314ba2dfc06b12d7b2968d0a78a5441ae24d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY5MzcyNQ==", "bodyText": "String.format seems like overkill here", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453693725", "createdAt": "2020-07-13T14:32:44Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/IncompatibleLinkageProblem.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A {@link LinkageProblem} caused by an invalid reference when both {@code sourceClass} and {@code\n+ * targetClass} are present in the class path.\n+ */\n+public abstract class IncompatibleLinkageProblem extends LinkageProblem {\n+  private final ClassFile targetClass;\n+\n+  IncompatibleLinkageProblem(\n+      String symbolProblemMessage, ClassFile sourceClass, ClassFile targetClass, Symbol symbol) {\n+    super(symbolProblemMessage, sourceClass, symbol);\n+    this.targetClass = targetClass;\n+  }\n+\n+  @Override\n+  public String formatSymbolProblem() {\n+    String jarInfo =\n+        targetClass != null ? String.format(\"(%s) \", targetClass.getClassPathEntry()) : \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32c0314ba2dfc06b12d7b2968d0a78a5441ae24d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY5NTc3OQ==", "bodyText": "if blocks testing subtypes suggests there's a missed opportunity to use polymorphism. Could the logic of each if block be pushed into a method in ClassSymbol and its subtypes instead?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453695779", "createdAt": "2020-07-13T14:35:37Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -136,28 +133,27 @@ private LinkageChecker(\n \n   /**\n    * Searches the classpath for linkage errors.\n-   * \n-   * @return {@link SymbolProblem}s found in the class path and referencing classes\n+   *\n+   * @return {@link LinkageProblem}s found in the class path and referencing classes\n    * @throws IOException I/O error reading files in the classpath\n    */\n-  public ImmutableSetMultimap<SymbolProblem, ClassFile> findSymbolProblems() throws IOException {\n-    // Having Problem in key will dedup SymbolProblems\n-    ImmutableSetMultimap.Builder<SymbolProblem, ClassFile> problemToClass =\n-        ImmutableSetMultimap.builder();\n-    \n+  public ImmutableSet<LinkageProblem> findLinkageProblems() throws IOException {\n+    ImmutableSet.Builder<LinkageProblem> problemToClass = ImmutableSet.builder();\n+\n+    // This sourceClassFile is a source of references to other symbols.\n     for (ClassFile classFile : symbolReferences.getClassFiles()) {\n       ImmutableSet<ClassSymbol> classSymbols = symbolReferences.getClassSymbols(classFile);\n-\n       for (ClassSymbol classSymbol : classSymbols) {\n         if (classSymbol instanceof SuperClassSymbol) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32c0314ba2dfc06b12d7b2968d0a78a5441ae24d"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43f134f9fb67b9f0f7dc1360d00a2e070b946132", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/43f134f9fb67b9f0f7dc1360d00a2e070b946132", "committedDate": "2020-07-13T16:49:24Z", "message": "Applied review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NDE4MzAw", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#pullrequestreview-447418300", "createdAt": "2020-07-13T16:39:14Z", "commit": {"oid": "32c0314ba2dfc06b12d7b2968d0a78a5441ae24d"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjozOToxNFrOGwwrbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxNjo0ODo1NFrOGwxCVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc4MjM4Mw==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453782383", "createdAt": "2020-07-13T16:39:14Z", "author": {"login": "suztomo"}, "path": "dashboard/src/main/java/com/google/cloud/tools/opensource/dashboard/DashboardMain.java", "diffHunk": "@@ -357,24 +355,31 @@ private static ArtifactResults generateArtifactReport(\n           collectLatestVersions(globalDependencies), transitiveDependencies);\n \n       long totalLinkageErrorCount =\n-          symbolProblemTable.values().stream()\n-              .flatMap(problemToClasses -> problemToClasses.keySet().stream())\n-              .distinct()\n+          linkageProblemTable.values().stream()\n+              .flatMap(problemToClasses -> problemToClasses.stream().map(LinkageProblem::getSymbol))\n+              .distinct() // The dashboard count linkage errors by the symbols", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY5MDc4Mg=="}, "originalCommit": {"oid": "32c0314ba2dfc06b12d7b2968d0a78a5441ae24d"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc4MjYxNA==", "bodyText": "Fixed.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453782614", "createdAt": "2020-07-13T16:39:35Z", "author": {"login": "suztomo"}, "path": "dashboard/src/main/resources/templates/macros.ftl", "diffHunk": "@@ -46,6 +40,15 @@\n       </#list>\n     </ul>\n   </#list>\n+  <#assign jarsInProblem = {} >\n+  <#list linkageProblems as problem>\n+    <#if (problem.getTargetClass())?? >\n+      <#assign targetClassPathEntry = problem.getTargetClass().getClassPathEntry() />\n+      <!-- Freemarker's hash requires its keys to be string.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY5Mjg5Mw=="}, "originalCommit": {"oid": "32c0314ba2dfc06b12d7b2968d0a78a5441ae24d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc4MzU4OQ==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453783589", "createdAt": "2020-07-13T16:41:06Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/IncompatibleLinkageProblem.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import java.util.Objects;\n+\n+/**\n+ * A {@link LinkageProblem} caused by an invalid reference when both {@code sourceClass} and {@code\n+ * targetClass} are present in the class path.\n+ */\n+public abstract class IncompatibleLinkageProblem extends LinkageProblem {\n+  private final ClassFile targetClass;\n+\n+  IncompatibleLinkageProblem(\n+      String symbolProblemMessage, ClassFile sourceClass, ClassFile targetClass, Symbol symbol) {\n+    super(symbolProblemMessage, sourceClass, symbol);\n+    this.targetClass = targetClass;\n+  }\n+\n+  @Override\n+  public String formatSymbolProblem() {\n+    String jarInfo =\n+        targetClass != null ? String.format(\"(%s) \", targetClass.getClassPathEntry()) : \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY5MzcyNQ=="}, "originalCommit": {"oid": "32c0314ba2dfc06b12d7b2968d0a78a5441ae24d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mzc4ODI0Ng==", "bodyText": "Created an issue for your idea. #1529, as I feel worried that this PR is getting too many changes to finish, beyond \"LinkageProblem class to replace Multimap<SymbolProblem, ClassFile>\"", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#discussion_r453788246", "createdAt": "2020-07-13T16:48:54Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -136,28 +133,27 @@ private LinkageChecker(\n \n   /**\n    * Searches the classpath for linkage errors.\n-   * \n-   * @return {@link SymbolProblem}s found in the class path and referencing classes\n+   *\n+   * @return {@link LinkageProblem}s found in the class path and referencing classes\n    * @throws IOException I/O error reading files in the classpath\n    */\n-  public ImmutableSetMultimap<SymbolProblem, ClassFile> findSymbolProblems() throws IOException {\n-    // Having Problem in key will dedup SymbolProblems\n-    ImmutableSetMultimap.Builder<SymbolProblem, ClassFile> problemToClass =\n-        ImmutableSetMultimap.builder();\n-    \n+  public ImmutableSet<LinkageProblem> findLinkageProblems() throws IOException {\n+    ImmutableSet.Builder<LinkageProblem> problemToClass = ImmutableSet.builder();\n+\n+    // This sourceClassFile is a source of references to other symbols.\n     for (ClassFile classFile : symbolReferences.getClassFiles()) {\n       ImmutableSet<ClassSymbol> classSymbols = symbolReferences.getClassSymbols(classFile);\n-\n       for (ClassSymbol classSymbol : classSymbols) {\n         if (classSymbol instanceof SuperClassSymbol) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY5NTc3OQ=="}, "originalCommit": {"oid": "32c0314ba2dfc06b12d7b2968d0a78a5441ae24d"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3NDkzMzI2", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1523#pullrequestreview-447493326", "createdAt": "2020-07-13T18:23:06Z", "commit": {"oid": "43f134f9fb67b9f0f7dc1360d00a2e070b946132"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b58bd9daf0e45f50c4b4e40f3d3f602b07cf08f5", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/b58bd9daf0e45f50c4b4e40f3d3f602b07cf08f5", "committedDate": "2020-07-13T19:17:50Z", "message": "Merge branch 'master' into linkage-problem"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 248, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}