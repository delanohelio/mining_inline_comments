{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0OTM4NzE3", "number": 1315, "title": "LinkageCheckerMain and LinkageCheckerRule to support exclusion filter file option", "bodyText": "LinkageCheckerMain and LinkageCheckerRule to support exclusion filter file option.\nFixes #1274 .", "createdAt": "2020-03-27T19:42:55Z", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315", "merged": true, "mergeCommit": {"oid": "1632da62bbc1bc08681b2451beb605f1596dba96"}, "closed": true, "closedAt": "2020-03-30T18:53:00Z", "author": {"login": "suztomo"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcR2Cj-AH2gAyMzk0OTM4NzE3OjNjNzRmNzZjYmM3ZGFhYzRmNWZmYmFlM2YwY2U2ZjRkMjdmMWYzYzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcSyy2jgH2gAyMzk0OTM4NzE3OjcwNDBkN2I5MjE3ZjNjMjZiN2ExMzhjMDUyZTI5OWM3Y2QwYWU1MWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3c74f76cbc7daac4f5ffbae3f0ce6f4d27f1f3c0", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/3c74f76cbc7daac4f5ffbae3f0ce6f4d27f1f3c0", "committedDate": "2020-03-27T19:40:28Z", "message": "Linkage Checker to support exclusion-filter-file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f30156e50abe3f835b8478e8ada07b6de6c07f8", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/0f30156e50abe3f835b8478e8ada07b6de6c07f8", "committedDate": "2020-03-27T19:41:44Z", "message": "setExclusionFilterFile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80f9b124b01e036ca4470605f9814e1840c8a6e1", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/80f9b124b01e036ca4470605f9814e1840c8a6e1", "committedDate": "2020-03-27T20:01:49Z", "message": "format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMTY0MDQw", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#pullrequestreview-383164040", "createdAt": "2020-03-27T20:01:56Z", "commit": {"oid": "0f30156e50abe3f835b8478e8ada07b6de6c07f8"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDowMTo1NlrOF9AIYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMDowMjozNVrOF9AJZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwOTYwMg==", "bodyText": "\"JAR files to find linkage errors in\"", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r399509602", "createdAt": "2020-03-27T20:01:56Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -63,8 +65,23 @@ public ClassReferenceGraph getClassReferenceGraph() {\n     return classReferenceGraph;\n   }\n \n+  @VisibleForTesting\n+  static LinkageChecker create(List<ClassPathEntry> classPath) throws IOException {\n+    return create(classPath, ImmutableSet.copyOf(classPath), null);\n+  }\n+\n+  /**\n+   * Returns Linkage Checker for {@code classPath}.\n+   *\n+   * @param classPath List of JAR files to find linkage errrors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f30156e50abe3f835b8478e8ada07b6de6c07f8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwOTY5Mw==", "bodyText": "List of JAR --> JAR", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r399509693", "createdAt": "2020-03-27T20:02:11Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -63,8 +65,23 @@ public ClassReferenceGraph getClassReferenceGraph() {\n     return classReferenceGraph;\n   }\n \n+  @VisibleForTesting\n+  static LinkageChecker create(List<ClassPathEntry> classPath) throws IOException {\n+    return create(classPath, ImmutableSet.copyOf(classPath), null);\n+  }\n+\n+  /**\n+   * Returns Linkage Checker for {@code classPath}.\n+   *\n+   * @param classPath List of JAR files to find linkage errrors\n+   * @param entryPoints List of JAR files to define entry point classes in reachability.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f30156e50abe3f835b8478e8ada07b6de6c07f8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwOTg2Mw==", "bodyText": "exclusion file to suppress linkage errors.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r399509863", "createdAt": "2020-03-27T20:02:35Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -63,8 +65,23 @@ public ClassReferenceGraph getClassReferenceGraph() {\n     return classReferenceGraph;\n   }\n \n+  @VisibleForTesting\n+  static LinkageChecker create(List<ClassPathEntry> classPath) throws IOException {\n+    return create(classPath, ImmutableSet.copyOf(classPath), null);\n+  }\n+\n+  /**\n+   * Returns Linkage Checker for {@code classPath}.\n+   *\n+   * @param classPath List of JAR files to find linkage errrors\n+   * @param entryPoints List of JAR files to define entry point classes in reachability.\n+   * @param exclusionFile Exclusion file to filter out linkage errors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f30156e50abe3f835b8478e8ada07b6de6c07f8"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b26b919abdd410fe1c27e3edb2d2699518a6403", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/4b26b919abdd410fe1c27e3edb2d2699518a6403", "committedDate": "2020-03-27T21:40:34Z", "message": "Applied review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMjE0NTk5", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#pullrequestreview-383214599", "createdAt": "2020-03-27T21:37:56Z", "commit": {"oid": "80f9b124b01e036ca4470605f9814e1840c8a6e1"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMTozNzo1NlrOF9CmHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QyMTozODowM1rOF9CmSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU0OTk4Mw==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r399549983", "createdAt": "2020-03-27T21:37:56Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -63,8 +65,23 @@ public ClassReferenceGraph getClassReferenceGraph() {\n     return classReferenceGraph;\n   }\n \n+  @VisibleForTesting\n+  static LinkageChecker create(List<ClassPathEntry> classPath) throws IOException {\n+    return create(classPath, ImmutableSet.copyOf(classPath), null);\n+  }\n+\n+  /**\n+   * Returns Linkage Checker for {@code classPath}.\n+   *\n+   * @param classPath List of JAR files to find linkage errrors\n+   * @param entryPoints List of JAR files to define entry point classes in reachability.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwOTY5Mw=="}, "originalCommit": {"oid": "0f30156e50abe3f835b8478e8ada07b6de6c07f8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1MDAwMg==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r399550002", "createdAt": "2020-03-27T21:37:58Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -63,8 +65,23 @@ public ClassReferenceGraph getClassReferenceGraph() {\n     return classReferenceGraph;\n   }\n \n+  @VisibleForTesting\n+  static LinkageChecker create(List<ClassPathEntry> classPath) throws IOException {\n+    return create(classPath, ImmutableSet.copyOf(classPath), null);\n+  }\n+\n+  /**\n+   * Returns Linkage Checker for {@code classPath}.\n+   *\n+   * @param classPath List of JAR files to find linkage errrors\n+   * @param entryPoints List of JAR files to define entry point classes in reachability.\n+   * @param exclusionFile Exclusion file to filter out linkage errors.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwOTg2Mw=="}, "originalCommit": {"oid": "0f30156e50abe3f835b8478e8ada07b6de6c07f8"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTU1MDAyNQ==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r399550025", "createdAt": "2020-03-27T21:38:03Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -63,8 +65,23 @@ public ClassReferenceGraph getClassReferenceGraph() {\n     return classReferenceGraph;\n   }\n \n+  @VisibleForTesting\n+  static LinkageChecker create(List<ClassPathEntry> classPath) throws IOException {\n+    return create(classPath, ImmutableSet.copyOf(classPath), null);\n+  }\n+\n+  /**\n+   * Returns Linkage Checker for {@code classPath}.\n+   *\n+   * @param classPath List of JAR files to find linkage errrors", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUwOTYwMg=="}, "originalCommit": {"oid": "0f30156e50abe3f835b8478e8ada07b6de6c07f8"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzOTY1NDkz", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#pullrequestreview-383965493", "createdAt": "2020-03-30T15:21:32Z", "commit": {"oid": "4b26b919abdd410fe1c27e3edb2d2699518a6403"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNToyMTozMlrOF9vDcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNToyNzo1OVrOF9vXwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI3ODM4NA==", "bodyText": "Might be worth having an overloaded method to avoid the null argument.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400278384", "createdAt": "2020-03-30T15:21:32Z", "author": {"login": "elharo"}, "path": "boms/integration-tests/src/test/java/com/google/cloud/MaximumLinkageErrorsTest.java", "diffHunk": "@@ -50,8 +50,8 @@ public void testForNewLinkageErrors()\n     Bom bom = RepositoryUtility.readBom(bomFile);\n \n     ImmutableSetMultimap<SymbolProblem, ClassFile> oldProblems =\n-        LinkageChecker.create(baseline).findSymbolProblems();\n-    LinkageChecker checker = LinkageChecker.create(bom);\n+        LinkageChecker.create(baseline, null).findSymbolProblems();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b26b919abdd410fe1c27e3edb2d2699518a6403"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI3OTc4Ng==", "bodyText": "rule --> rule file.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400279786", "createdAt": "2020-03-30T15:23:08Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExcludedErrors.java", "diffHunk": "@@ -36,8 +42,12 @@ static ExcludedErrors create() throws IOException {\n       ImmutableList<LinkageErrorMatcher> defaultMatchers =\n           ExclusionFileParser.parse(defaultRuleUrl);\n       exclusionMatchers.addAll(defaultMatchers);\n+\n+      if (exclusionFile != null) {\n+        exclusionMatchers.addAll(ExclusionFileParser.parse(exclusionFile));\n+      }\n     } catch (SAXException | VerifierConfigurationException ex) {\n-      throw new IOException(\"Could not read default exclusion rule\", ex);\n+      throw new IOException(\"Could not read exclusion rule\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b26b919abdd410fe1c27e3edb2d2699518a6403"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI4MTUxMg==", "bodyText": "JAR files that are entry points for reachability analysis", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400281512", "createdAt": "2020-03-30T15:25:16Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -63,8 +65,23 @@ public ClassReferenceGraph getClassReferenceGraph() {\n     return classReferenceGraph;\n   }\n \n+  @VisibleForTesting\n+  static LinkageChecker create(List<ClassPathEntry> classPath) throws IOException {\n+    return create(classPath, ImmutableSet.copyOf(classPath), null);\n+  }\n+\n+  /**\n+   * Returns Linkage Checker for {@code classPath}.\n+   *\n+   * @param classPath JAR files to find linkage errors in\n+   * @param entryPoints JAR files to define entry point classes in reachability", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b26b919abdd410fe1c27e3edb2d2699518a6403"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI4MjY5Mw==", "bodyText": "this is called exclusion file elsewhere.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400282693", "createdAt": "2020-03-30T15:26:51Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArguments.java", "diffHunk": "@@ -160,7 +161,15 @@ private static Options configureOptions() {\n             .desc(\"Show usage instructions\")\n             .build();\n     options.addOption(help);\n-    \n+\n+    Option exclusionFile =\n+        Option.builder(\"e\")\n+            .longOpt(\"exclude-filter-file\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b26b919abdd410fe1c27e3edb2d2699518a6403"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI4MzQ1OQ==", "bodyText": "Command", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400283459", "createdAt": "2020-03-30T15:27:49Z", "author": {"login": "elharo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArgumentsTest.java", "diffHunk": "@@ -158,4 +159,19 @@ public void testReadCommandLine_reportOnlyReachableOn() throws ParseException {\n \n     Truth.assertThat(parsedArguments.getReportOnlyReachable()).isTrue();\n   }\n+\n+  @Test\n+  public void testReadCommnadLine_exclusionFile() throws ParseException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b26b919abdd410fe1c27e3edb2d2699518a6403"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI4MzU4NQ==", "bodyText": "Command", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400283585", "createdAt": "2020-03-30T15:27:59Z", "author": {"login": "elharo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArgumentsTest.java", "diffHunk": "@@ -158,4 +159,19 @@ public void testReadCommandLine_reportOnlyReachableOn() throws ParseException {\n \n     Truth.assertThat(parsedArguments.getReportOnlyReachable()).isTrue();\n   }\n+\n+  @Test\n+  public void testReadCommnadLine_exclusionFile() throws ParseException {\n+    LinkageCheckerArguments parsedArguments =\n+        LinkageCheckerArguments.readCommandLine(\"-j\", \"dummy.jar\", \"-e\", \"foo/exclusion.xml\");\n+    Path exclusionFile = parsedArguments.getExclusionFile();\n+    Assert.assertEquals(Paths.get(\"foo/exclusion.xml\"), exclusionFile);\n+  }\n+\n+  @Test\n+  public void testReadCommnadLine_exclusionFile_unspecified() throws ParseException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b26b919abdd410fe1c27e3edb2d2699518a6403"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec8813daa541b8b15f3df5e0e25a4249906d0570", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/ec8813daa541b8b15f3df5e0e25a4249906d0570", "committedDate": "2020-03-30T17:10:20Z", "message": "Applied review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MDQ2MDg1", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#pullrequestreview-384046085", "createdAt": "2020-03-30T16:51:00Z", "commit": {"oid": "4b26b919abdd410fe1c27e3edb2d2699518a6403"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNjo1MTowMFrOF9y_1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzoxMDoxM1rOF9zvgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0Mjk5OA==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400342998", "createdAt": "2020-03-30T16:51:00Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArgumentsTest.java", "diffHunk": "@@ -158,4 +159,19 @@ public void testReadCommandLine_reportOnlyReachableOn() throws ParseException {\n \n     Truth.assertThat(parsedArguments.getReportOnlyReachable()).isTrue();\n   }\n+\n+  @Test\n+  public void testReadCommnadLine_exclusionFile() throws ParseException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI4MzQ1OQ=="}, "originalCommit": {"oid": "4b26b919abdd410fe1c27e3edb2d2699518a6403"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0MzA1Nw==", "bodyText": "Fixed", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400343057", "createdAt": "2020-03-30T16:51:06Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArgumentsTest.java", "diffHunk": "@@ -158,4 +159,19 @@ public void testReadCommandLine_reportOnlyReachableOn() throws ParseException {\n \n     Truth.assertThat(parsedArguments.getReportOnlyReachable()).isTrue();\n   }\n+\n+  @Test\n+  public void testReadCommnadLine_exclusionFile() throws ParseException {\n+    LinkageCheckerArguments parsedArguments =\n+        LinkageCheckerArguments.readCommandLine(\"-j\", \"dummy.jar\", \"-e\", \"foo/exclusion.xml\");\n+    Path exclusionFile = parsedArguments.getExclusionFile();\n+    Assert.assertEquals(Paths.get(\"foo/exclusion.xml\"), exclusionFile);\n+  }\n+\n+  @Test\n+  public void testReadCommnadLine_exclusionFile_unspecified() throws ParseException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI4MzU4NQ=="}, "originalCommit": {"oid": "4b26b919abdd410fe1c27e3edb2d2699518a6403"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0Mzg1Mg==", "bodyText": "Updated to `exclusion-file'", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400343852", "createdAt": "2020-03-30T16:52:19Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerArguments.java", "diffHunk": "@@ -160,7 +161,15 @@ private static Options configureOptions() {\n             .desc(\"Show usage instructions\")\n             .build();\n     options.addOption(help);\n-    \n+\n+    Option exclusionFile =\n+        Option.builder(\"e\")\n+            .longOpt(\"exclude-filter-file\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI4MjY5Mw=="}, "originalCommit": {"oid": "4b26b919abdd410fe1c27e3edb2d2699518a6403"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0NzQ2Mw==", "bodyText": "Updated to JAR files to specify entry point classes in reachability. The reachability analysis is on classes, not JAR files. If you think of a better word than define or specify, let me know.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400347463", "createdAt": "2020-03-30T16:57:46Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -63,8 +65,23 @@ public ClassReferenceGraph getClassReferenceGraph() {\n     return classReferenceGraph;\n   }\n \n+  @VisibleForTesting\n+  static LinkageChecker create(List<ClassPathEntry> classPath) throws IOException {\n+    return create(classPath, ImmutableSet.copyOf(classPath), null);\n+  }\n+\n+  /**\n+   * Returns Linkage Checker for {@code classPath}.\n+   *\n+   * @param classPath JAR files to find linkage errors in\n+   * @param entryPoints JAR files to define entry point classes in reachability", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI4MTUxMg=="}, "originalCommit": {"oid": "4b26b919abdd410fe1c27e3edb2d2699518a6403"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM0OTMyNA==", "bodyText": "This big try-catch is split  into two: one for default exclusion rule and the other for the argument.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400349324", "createdAt": "2020-03-30T17:00:31Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExcludedErrors.java", "diffHunk": "@@ -36,8 +42,12 @@ static ExcludedErrors create() throws IOException {\n       ImmutableList<LinkageErrorMatcher> defaultMatchers =\n           ExclusionFileParser.parse(defaultRuleUrl);\n       exclusionMatchers.addAll(defaultMatchers);\n+\n+      if (exclusionFile != null) {\n+        exclusionMatchers.addAll(ExclusionFileParser.parse(exclusionFile));\n+      }\n     } catch (SAXException | VerifierConfigurationException ex) {\n-      throw new IOException(\"Could not read default exclusion rule\", ex);\n+      throw new IOException(\"Could not read exclusion rule\", ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI3OTc4Ng=="}, "originalCommit": {"oid": "4b26b919abdd410fe1c27e3edb2d2699518a6403"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1MzM2OQ==", "bodyText": "Created overloaded method.\nWhat do you think about applying builder pattern? Created #1321", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400353369", "createdAt": "2020-03-30T17:07:13Z", "author": {"login": "suztomo"}, "path": "boms/integration-tests/src/test/java/com/google/cloud/MaximumLinkageErrorsTest.java", "diffHunk": "@@ -50,8 +50,8 @@ public void testForNewLinkageErrors()\n     Bom bom = RepositoryUtility.readBom(bomFile);\n \n     ImmutableSetMultimap<SymbolProblem, ClassFile> oldProblems =\n-        LinkageChecker.create(baseline).findSymbolProblems();\n-    LinkageChecker checker = LinkageChecker.create(bom);\n+        LinkageChecker.create(baseline, null).findSymbolProblems();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI3ODM4NA=="}, "originalCommit": {"oid": "4b26b919abdd410fe1c27e3edb2d2699518a6403"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM1NTIwMQ==", "bodyText": "Madd LinkageChecker.create(classPath) public; the dashboard does not use reachability analysis or exclusion files.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400355201", "createdAt": "2020-03-30T17:10:13Z", "author": {"login": "suztomo"}, "path": "dashboard/src/main/java/com/google/cloud/tools/opensource/dashboard/DashboardMain.java", "diffHunk": "@@ -190,7 +190,7 @@ private static Path generate(Bom bom) throws IOException, TemplateException, URI\n     List<ClassPathEntry> artifactJarsInBom = classpath.subList(0, managedDependencies.size());\n     ImmutableSet<ClassPathEntry> entryPoints = ImmutableSet.copyOf(artifactJarsInBom);\n \n-    LinkageChecker linkageChecker = LinkageChecker.create(classpath, entryPoints);\n+    LinkageChecker linkageChecker = LinkageChecker.create(classpath, entryPoints, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b26b919abdd410fe1c27e3edb2d2699518a6403"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35c428cd661fef81ea2cc0486f09345212f62bb3", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/35c428cd661fef81ea2cc0486f09345212f62bb3", "committedDate": "2020-03-30T17:13:41Z", "message": "Merge remote-tracking branch 'origin/master' into i1274"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MTExNDQ4", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#pullrequestreview-384111448", "createdAt": "2020-03-30T18:15:49Z", "commit": {"oid": "35c428cd661fef81ea2cc0486f09345212f62bb3"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODoxNTo0OVrOF92R0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODoxNTo0OVrOF92R0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM5Njc1Mw==", "bodyText": "for --> from", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1315#discussion_r400396753", "createdAt": "2020-03-30T18:15:49Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExcludedErrors.java", "diffHunk": "@@ -19,13 +19,19 @@\n import com.google.common.collect.ImmutableList;\n import java.io.IOException;\n import java.net.URL;\n+import java.nio.file.Path;\n+import javax.annotation.Nullable;\n import org.iso_relax.verifier.VerifierConfigurationException;\n import org.xml.sax.SAXException;\n \n class ExcludedErrors {\n   private final ImmutableList<LinkageErrorMatcher> exclusionMatchers;\n \n-  static ExcludedErrors create() throws IOException {\n+  /**\n+   * Creates exclusion matchers for {@code exclusionFile} with default rules. If {@code", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35c428cd661fef81ea2cc0486f09345212f62bb3"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7040d7b9217f3c26b7a138c052e299c7cd0ae51c", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/7040d7b9217f3c26b7a138c052e299c7cd0ae51c", "committedDate": "2020-03-30T18:27:31Z", "message": "creates matchers 'from' file"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 318, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}