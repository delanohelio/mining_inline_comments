{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NTcxMTYw", "number": 1604, "title": "Proper error message for AbstractMethodProblem and correct source and target", "bodyText": "Fixes #1603\n\nEnhancement on wording on AbstractMethodProblem. This focus on the error against the implementation class aligns how IDE shows errors for them.\nThe source and target are now properly set. The implementation class is the source of the references and the interfaces or abstract classes are the targets.\n\nExample Message\nUsing guava-jdk5 and guava:27.1-android's incompatibility:\nNormally, we report linkage errros grouped by targets:\n(Target Class X) having problem XXX. referenced by\n   (Source Class A)\n   (Source Class B)\n\nBefore this change:\n(com.google.guava:guava-jdk5:13.0) com.google.common.util.concurrent.RateLimiter$Bursty's method doGetRate() is not implemented in the class;    # Implementing Class\n  referenced by 1 class file\n    com.google.common.util.concurrent.RateLimiter (com.google.guava:guava:27.1-android). # Interface\n\nAfter this change, we do not group AbstractMethodProblem\ncom.google.common.util.concurrent.RateLimiter$Bursty (in com.google.api:gax-grpc:1.38.0) does not implement doGetRate(),\nrequired by com.google.common.util.concurrent.RateLimiter (in com.google.guava:guava:27.1-android)", "createdAt": "2020-08-18T15:24:50Z", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604", "merged": true, "mergeCommit": {"oid": "ef3eaeca865312cfe0f07be5255b8fd191b7b0bb"}, "closed": true, "closedAt": "2020-08-24T15:09:28Z", "author": {"login": "suztomo"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAIrCWgH2gAyNDY5NTcxMTYwOmU1Mzk3Mjc1NTBkZDFiYWFkYTNmN2U5MzhkODU3Y2ViODM1MGM1ZWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCDbHagFqTQ3MzUzNDQ3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e539727550dd1baada3f7e938d857ceb8350c5eb", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/e539727550dd1baada3f7e938d857ceb8350c5eb", "committedDate": "2020-08-18T15:23:29Z", "message": "Changed source and target"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NTY3Mjgy", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#pullrequestreview-469567282", "createdAt": "2020-08-18T15:25:08Z", "commit": {"oid": "e539727550dd1baada3f7e938d857ceb8350c5eb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToyNTowOFrOHCZ0uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToyNTowOFrOHCZ0uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI4MjI5Nw==", "bodyText": "???", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r472282297", "createdAt": "2020-08-18T15:25:08Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMainIntegrationTest.java", "diffHunk": "@@ -131,7 +131,7 @@ public void testBom()\n       LinkageCheckerMain.main(new String[] {\"-b\", \"com.google.cloud:libraries-bom:1.0.0\"});\n       fail(\"LinkageCheckerMain should throw LinkageCheckResultException upon errors\");\n     } catch (LinkageCheckResultException expected) {\n-      assertEquals(\"Found 800 linkage errors\", expected.getMessage());\n+      assertEquals(\"Found 801 linkage errors\", expected.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e539727550dd1baada3f7e938d857ceb8350c5eb"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc13943d70a8a34b6334cd6dd86d11848b92d72a", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/dc13943d70a8a34b6334cd6dd86d11848b92d72a", "committedDate": "2020-08-18T15:36:52Z", "message": "subclass"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ece9adac1995e50d807c80da272c50de23033b0", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/9ece9adac1995e50d807c80da272c50de23033b0", "committedDate": "2020-08-19T18:00:30Z", "message": "Proper message for AbstractMethodProblem"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNzE1MDYx", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#pullrequestreview-470715061", "createdAt": "2020-08-19T18:04:44Z", "commit": {"oid": "9ece9adac1995e50d807c80da272c50de23033b0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODowNDo0NFrOHDTVuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODowNDo0NFrOHDTVuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIyNDYzMw==", "bodyText": "When printing linkage problems, we group them by symbols with \"... referenced by ...\" format. With this PR, AbstractMethodProblem are printed without the grouping.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r473224633", "createdAt": "2020-08-19T18:04:44Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -150,9 +150,21 @@ public String formatSymbolProblem() {\n   public static String formatLinkageProblems(Set<LinkageProblem> linkageProblems) {\n     StringBuilder output = new StringBuilder();\n \n+    // Not to group AbstractMethodProblems by symbols because they do not fit in the\n+    // \"... referenced by ...\" format.\n+    ImmutableSet.Builder<AbstractMethodProblem> abstractMethodProblems = ImmutableSet.builder();\n+    ImmutableSet.Builder<LinkageProblem> problemsToGroupBySymbols = ImmutableSet.builder();\n+    for (LinkageProblem linkageProblem : linkageProblems) {\n+      if (linkageProblem instanceof AbstractMethodProblem) {\n+        abstractMethodProblems.add((AbstractMethodProblem) linkageProblem);\n+      } else {\n+        problemsToGroupBySymbols.add(linkageProblem);\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ece9adac1995e50d807c80da272c50de23033b0"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNzE5NTI1", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#pullrequestreview-470719525", "createdAt": "2020-08-19T18:11:26Z", "commit": {"oid": "9ece9adac1995e50d807c80da272c50de23033b0"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNzE1NjE0", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#pullrequestreview-470715614", "createdAt": "2020-08-19T18:05:32Z", "commit": {"oid": "9ece9adac1995e50d807c80da272c50de23033b0"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODowNTozMlrOHDTXgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODowODoyMlrOHDTdkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIyNTA5MQ==", "bodyText": "toString would print the class name too, which was unnecessary for showing AbstractMethodProblem's toString.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r473225091", "createdAt": "2020-08-19T18:05:32Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/MethodSymbol.java", "diffHunk": "@@ -94,4 +94,11 @@ public String toString() {\n         + \"'s method \"\n         + signature;\n   }\n+\n+  /** Returns the method name with its signature. */\n+  public String getMethodNameWithSignature() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ece9adac1995e50d807c80da272c50de23033b0"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIyNTUwMQ==", "bodyText": "This is the enhancement.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r473225501", "createdAt": "2020-08-19T18:06:10Z", "author": {"login": "suztomo"}, "path": "enforcer-rules/src/it/abstract-method-errors/verify.groovy", "diffHunk": "@@ -0,0 +1,10 @@\n+def buildLog = new File(basedir, \"build.log\").text.replaceAll(\"\\\\r\\\\n\", \"\\n\")\n+\n+assert buildLog.contains('''\\\n+com.google.api.gax.grpc.InstantiatingGrpcChannelProvider (in com.google.api:gax-grpc:1.38.0) does not implement com.google.api.gax.rpc.TransportChannelProvider withCredentials(com.google.auth.Credentials), required by com.google.api.gax.rpc.TransportChannelProvider (in com.google.api:gax:1.48.0)\n+  Cause:\n+    Dependency conflict: com.google.api:gax:1.48.0 defines incompatible version of com.google.api.gax.rpc.TransportChannelProvider but com.google.api:gax:1.38.0 defines compatible one.\n+      selected: com.google.cloud.tools.opensource:abstract-method-error-example:jar:1.0-SNAPSHOT / com.google.api:gax:1.48.0 (compile)\n+      unselected: com.google.cloud.tools.opensource:abstract-method-error-example:jar:1.0-SNAPSHOT / com.google.api:gax-grpc:1.38.0 (compile) / com.google.api:gax:1.38.0 (compile)''')\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ece9adac1995e50d807c80da272c50de23033b0"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIyNjY0MA==", "bodyText": "Switching source and target. Now implementation class is source because it references the interface.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r473226640", "createdAt": "2020-08-19T18:08:22Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/AbstractMethodProblem.java", "diffHunk": "@@ -17,12 +17,29 @@\n package com.google.cloud.tools.opensource.classpath;\n \n /**\n- * The referenced {@code methodSymbol} is not implemented in the {@code targetClass} but the class\n- * is declared to implement the method by {@code sourceClass}. Such unimplemented methods manifest\n+ * The referenced {@code methodSymbol} is not implemented in the {@code sourceClass} but the class\n+ * is declared to implement the method by {@code targetClass}. Such unimplemented methods manifest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ece9adac1995e50d807c80da272c50de23033b0"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06bbb52303079c76de250c6e4aef409986bfc38d", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/06bbb52303079c76de250c6e4aef409986bfc38d", "committedDate": "2020-08-19T18:23:58Z", "message": "implementationClass and interfaceOrAbstractClass"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8521e7d33a2aca170d2f5f1eb6ffc42082ddc885", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/8521e7d33a2aca170d2f5f1eb6ffc42082ddc885", "committedDate": "2020-08-19T18:25:19Z", "message": "Merge remote-tracking branch 'origin/master' into interface_reference_backwards"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNzI5Nzgy", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#pullrequestreview-470729782", "createdAt": "2020-08-19T18:26:35Z", "commit": {"oid": "06bbb52303079c76de250c6e4aef409986bfc38d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODoyNjozNVrOHDUDLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxODoyNjozNVrOHDUDLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIzNjI2OA==", "bodyText": "active voice: {@code implementationClass} does not implement the abstract method {@code methodSymbol} declared by {@code interfaceOrAbstractClass}", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r473236268", "createdAt": "2020-08-19T18:26:35Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/AbstractMethodProblem.java", "diffHunk": "@@ -17,15 +17,22 @@\n package com.google.cloud.tools.opensource.classpath;\n \n /**\n- * The referenced {@code methodSymbol} is not implemented in the {@code sourceClass} but the class\n- * is declared to implement the method by {@code targetClass}. Such unimplemented methods manifest\n- * as {@link AbstractMethodError}s at runtime.\n+ * The referenced {@code methodSymbol} is not implemented in the {@code implementationClass} but the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06bbb52303079c76de250c6e4aef409986bfc38d"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "187324d0d7cb2983b639967bcc4221ae111008b4", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/187324d0d7cb2983b639967bcc4221ae111008b4", "committedDate": "2020-08-19T19:34:18Z", "message": "Javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84f32b54f1f311651ff743173d8ac2a63c025db5", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/84f32b54f1f311651ff743173d8ac2a63c025db5", "committedDate": "2020-08-19T19:56:26Z", "message": "Fixed dashboard test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fd5c6f7506501369c8576200871dfb1ec9eecf8", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/0fd5c6f7506501369c8576200871dfb1ec9eecf8", "committedDate": "2020-08-19T20:47:24Z", "message": "Enhanced Javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwOTMwMzcy", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#pullrequestreview-470930372", "createdAt": "2020-08-19T20:48:45Z", "commit": {"oid": "0fd5c6f7506501369c8576200871dfb1ec9eecf8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDo0ODo0NVrOHDYh7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDo0ODo0NVrOHDYh7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMwOTY3Ng==", "bodyText": "@marquiswang I updated the javadoc to clarify implementationClass is the source and interfaceOrAbstractClass is the target of the reference.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r473309676", "createdAt": "2020-08-19T20:48:45Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/AbstractMethodProblem.java", "diffHunk": "@@ -17,12 +17,36 @@\n package com.google.cloud.tools.opensource.classpath;\n \n /**\n- * The referenced {@code methodSymbol} is not implemented in the {@code targetClass} but the class\n- * is declared to implement the method by {@code sourceClass}. Such unimplemented methods manifest\n- * as {@link AbstractMethodError}s at runtime.\n+ * {@code implementationClass} (the source of an invalid reference) does not implement the abstract\n+ * method {@code methodSymbol} declared by {@code interfaceOrAbstractClass} (the target of the\n+ * reference). Such unimplemented methods manifest as {@link AbstractMethodError}s at runtime.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fd5c6f7506501369c8576200871dfb1ec9eecf8"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c77ba161ecf00cc59fc6e8048721d11eed20134c", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c77ba161ecf00cc59fc6e8048721d11eed20134c", "committedDate": "2020-08-19T20:49:47Z", "message": "subclass -> implementing class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "837cc0fbe479737ad3aa57e00f20eeea02087b7e", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/837cc0fbe479737ad3aa57e00f20eeea02087b7e", "committedDate": "2020-08-20T14:20:59Z", "message": "implemented -> does not exist"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxOTAxNDA2", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#pullrequestreview-471901406", "createdAt": "2020-08-20T19:04:10Z", "commit": {"oid": "837cc0fbe479737ad3aa57e00f20eeea02087b7e"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTowNDoxMFrOHEPS5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTowNToxN1rOHEPVRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIwNjk1MA==", "bodyText": "This still doesn't work. I don't see how implementationClass is the \"source of an invalid reference.\" There simply is no invalid reference here. There is a problem but it is something else entirely. It is not a reference.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r474206950", "createdAt": "2020-08-20T19:04:10Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/AbstractMethodProblem.java", "diffHunk": "@@ -17,12 +17,36 @@\n package com.google.cloud.tools.opensource.classpath;\n \n /**\n- * The referenced {@code methodSymbol} is not implemented in the {@code targetClass} but the class\n- * is declared to implement the method by {@code sourceClass}. Such unimplemented methods manifest\n- * as {@link AbstractMethodError}s at runtime.\n+ * {@code implementationClass} (the source of an invalid reference) does not implement the abstract\n+ * method {@code methodSymbol} declared by {@code interfaceOrAbstractClass} (the target of the\n+ * reference). Such unimplemented methods manifest as {@link AbstractMethodError}s at runtime.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMwOTY3Ng=="}, "originalCommit": {"oid": "0fd5c6f7506501369c8576200871dfb1ec9eecf8"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIwNzE0NA==", "bodyText": "Not to --> Don't", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r474207144", "createdAt": "2020-08-20T19:04:36Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -150,9 +150,21 @@ public String formatSymbolProblem() {\n   public static String formatLinkageProblems(Set<LinkageProblem> linkageProblems) {\n     StringBuilder output = new StringBuilder();\n \n+    // Not to group AbstractMethodProblems by symbols because they do not fit in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "837cc0fbe479737ad3aa57e00f20eeea02087b7e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIwNzU1OQ==", "bodyText": "Fine, though it probably doesn't need to be public", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r474207559", "createdAt": "2020-08-20T19:05:17Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/MethodSymbol.java", "diffHunk": "@@ -94,4 +94,11 @@ public String toString() {\n         + \"'s method \"\n         + signature;\n   }\n+\n+  /** Returns the method name with its signature. */\n+  public String getMethodNameWithSignature() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIyNTA5MQ=="}, "originalCommit": {"oid": "9ece9adac1995e50d807c80da272c50de23033b0"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14a28ca7fc1c6c54962b45ae395dff7592ff0e4d", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/14a28ca7fc1c6c54962b45ae395dff7592ff0e4d", "committedDate": "2020-08-20T19:20:54Z", "message": "Added test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c27b3b38f23bc8cd1aea74a232f09e5941f461b9", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c27b3b38f23bc8cd1aea74a232f09e5941f461b9", "committedDate": "2020-08-20T19:21:57Z", "message": "Applied review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxOTA5OTY5", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#pullrequestreview-471909969", "createdAt": "2020-08-20T19:17:23Z", "commit": {"oid": "0fd5c6f7506501369c8576200871dfb1ec9eecf8"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOToxNzoyM1rOHEPtgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOToxODo1OVrOHEPwwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIxMzc2Mg==", "bodyText": "It is a reference. Implementation class references an interface via implements keyword or an abstract class via extends keyword. Implementation-wise, it's a reference embed in the constant pool section of a class file.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r474213762", "createdAt": "2020-08-20T19:17:23Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/AbstractMethodProblem.java", "diffHunk": "@@ -17,12 +17,36 @@\n package com.google.cloud.tools.opensource.classpath;\n \n /**\n- * The referenced {@code methodSymbol} is not implemented in the {@code targetClass} but the class\n- * is declared to implement the method by {@code sourceClass}. Such unimplemented methods manifest\n- * as {@link AbstractMethodError}s at runtime.\n+ * {@code implementationClass} (the source of an invalid reference) does not implement the abstract\n+ * method {@code methodSymbol} declared by {@code interfaceOrAbstractClass} (the target of the\n+ * reference). Such unimplemented methods manifest as {@link AbstractMethodError}s at runtime.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMwOTY3Ng=="}, "originalCommit": {"oid": "0fd5c6f7506501369c8576200871dfb1ec9eecf8"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIxNDMxNw==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r474214317", "createdAt": "2020-08-20T19:18:25Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -150,9 +150,21 @@ public String formatSymbolProblem() {\n   public static String formatLinkageProblems(Set<LinkageProblem> linkageProblems) {\n     StringBuilder output = new StringBuilder();\n \n+    // Not to group AbstractMethodProblems by symbols because they do not fit in the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIwNzE0NA=="}, "originalCommit": {"oid": "837cc0fbe479737ad3aa57e00f20eeea02087b7e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIxNDU5NA==", "bodyText": "Good catch. Removed public.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r474214594", "createdAt": "2020-08-20T19:18:59Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/MethodSymbol.java", "diffHunk": "@@ -94,4 +94,11 @@ public String toString() {\n         + \"'s method \"\n         + signature;\n   }\n+\n+  /** Returns the method name with its signature. */\n+  public String getMethodNameWithSignature() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIyNTA5MQ=="}, "originalCommit": {"oid": "9ece9adac1995e50d807c80da272c50de23033b0"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1596bf27ce95e1b75c339901f654c75dcddfceef", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/1596bf27ce95e1b75c339901f654c75dcddfceef", "committedDate": "2020-08-24T02:59:19Z", "message": "implementationClass is the source of the invalid symbolic reference"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMzczNzA2", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#pullrequestreview-473373706", "createdAt": "2020-08-24T11:22:10Z", "commit": {"oid": "1596bf27ce95e1b75c339901f654c75dcddfceef"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMToyMjoxMVrOHFgEXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTozMTowN1rOHFgW6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzMDMzMg==", "bodyText": "target class --> target\nreference --> symbolic reference\nor just delete the comment completely. It's not obviously helpful.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r475530332", "createdAt": "2020-08-24T11:22:11Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/AbstractMethodProblem.java", "diffHunk": "@@ -17,12 +17,39 @@\n package com.google.cloud.tools.opensource.classpath;\n \n /**\n- * The referenced {@code methodSymbol} is not implemented in the {@code targetClass} but the class\n- * is declared to implement the method by {@code sourceClass}. Such unimplemented methods manifest\n- * as {@link AbstractMethodError}s at runtime.\n+ * {@code implementationClass} does not implement the abstract method {@code methodSymbol} declared\n+ * by {@code interfaceOrAbstractClass}. Such unimplemented methods manifest as {@link\n+ * AbstractMethodError}s at runtime.\n  */\n final class AbstractMethodProblem extends LinkageProblem {\n-  AbstractMethodProblem(ClassFile sourceClass, ClassFile targetClass, MethodSymbol methodSymbol) {\n-    super(\"is not implemented in the class\", sourceClass, methodSymbol, targetClass);\n+  MethodSymbol methodSymbol;\n+\n+  AbstractMethodProblem(\n+      ClassFile implementationClass,\n+      ClassFile interfaceOrAbstractClass,\n+      MethodSymbol methodSymbol) {\n+\n+    // implementationClass is the source of the invalid symbolic reference, and\n+    // interfaceOrAbstractClass is the target class of the reference.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1596bf27ce95e1b75c339901f654c75dcddfceef"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzMDQ5Mg==", "bodyText": "target class --> target\nreference --> symbolic reference\nor just delete the comment completely. It's not obviously helpful.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r475530492", "createdAt": "2020-08-24T11:22:30Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/AbstractMethodProblem.java", "diffHunk": "@@ -17,12 +17,39 @@\n package com.google.cloud.tools.opensource.classpath;\n \n /**\n- * The referenced {@code methodSymbol} is not implemented in the {@code targetClass} but the class\n- * is declared to implement the method by {@code sourceClass}. Such unimplemented methods manifest\n- * as {@link AbstractMethodError}s at runtime.\n+ * {@code implementationClass} does not implement the abstract method {@code methodSymbol} declared\n+ * by {@code interfaceOrAbstractClass}. Such unimplemented methods manifest as {@link\n+ * AbstractMethodError}s at runtime.\n  */\n final class AbstractMethodProblem extends LinkageProblem {\n-  AbstractMethodProblem(ClassFile sourceClass, ClassFile targetClass, MethodSymbol methodSymbol) {\n-    super(\"is not implemented in the class\", sourceClass, methodSymbol, targetClass);\n+  MethodSymbol methodSymbol;\n+\n+  AbstractMethodProblem(\n+      ClassFile implementationClass,\n+      ClassFile interfaceOrAbstractClass,\n+      MethodSymbol methodSymbol) {\n+\n+    // implementationClass is the source of the invalid symbolic reference, and\n+    // interfaceOrAbstractClass is the target class of the reference.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1596bf27ce95e1b75c339901f654c75dcddfceef"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzMTQ2OQ==", "bodyText": "methodSymbol should be the second argument and interfaceOrAbstractClass the third to match the argument order in the superclass constructor.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r475531469", "createdAt": "2020-08-24T11:24:38Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/AbstractMethodProblem.java", "diffHunk": "@@ -17,12 +17,39 @@\n package com.google.cloud.tools.opensource.classpath;\n \n /**\n- * The referenced {@code methodSymbol} is not implemented in the {@code targetClass} but the class\n- * is declared to implement the method by {@code sourceClass}. Such unimplemented methods manifest\n- * as {@link AbstractMethodError}s at runtime.\n+ * {@code implementationClass} does not implement the abstract method {@code methodSymbol} declared\n+ * by {@code interfaceOrAbstractClass}. Such unimplemented methods manifest as {@link\n+ * AbstractMethodError}s at runtime.\n  */\n final class AbstractMethodProblem extends LinkageProblem {\n-  AbstractMethodProblem(ClassFile sourceClass, ClassFile targetClass, MethodSymbol methodSymbol) {\n-    super(\"is not implemented in the class\", sourceClass, methodSymbol, targetClass);\n+  MethodSymbol methodSymbol;\n+\n+  AbstractMethodProblem(\n+      ClassFile implementationClass,\n+      ClassFile interfaceOrAbstractClass,\n+      MethodSymbol methodSymbol) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1596bf27ce95e1b75c339901f654c75dcddfceef"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzMTgwMg==", "bodyText": "sourceClass -->  implementationClass", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r475531802", "createdAt": "2020-08-24T11:25:14Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/AbstractMethodProblem.java", "diffHunk": "@@ -17,12 +17,39 @@\n package com.google.cloud.tools.opensource.classpath;\n \n /**\n- * The referenced {@code methodSymbol} is not implemented in the {@code targetClass} but the class\n- * is declared to implement the method by {@code sourceClass}. Such unimplemented methods manifest\n- * as {@link AbstractMethodError}s at runtime.\n+ * {@code implementationClass} does not implement the abstract method {@code methodSymbol} declared\n+ * by {@code interfaceOrAbstractClass}. Such unimplemented methods manifest as {@link\n+ * AbstractMethodError}s at runtime.\n  */\n final class AbstractMethodProblem extends LinkageProblem {\n-  AbstractMethodProblem(ClassFile sourceClass, ClassFile targetClass, MethodSymbol methodSymbol) {\n-    super(\"is not implemented in the class\", sourceClass, methodSymbol, targetClass);\n+  MethodSymbol methodSymbol;\n+\n+  AbstractMethodProblem(\n+      ClassFile implementationClass,\n+      ClassFile interfaceOrAbstractClass,\n+      MethodSymbol methodSymbol) {\n+\n+    // implementationClass is the source of the invalid symbolic reference, and\n+    // interfaceOrAbstractClass is the target class of the reference.\n+    super(\n+        \" does not exist in the implementing class\",\n+        implementationClass,\n+        methodSymbol,\n+        interfaceOrAbstractClass);\n+    this.methodSymbol = methodSymbol;\n+  }\n+\n+  @Override\n+  public final String toString() {\n+    ClassFile sourceClass = getSourceClass();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1596bf27ce95e1b75c339901f654c75dcddfceef"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzMjE2NQ==", "bodyText": "targetClass --> interfaceOrAbstractClass, or perhaps supertype", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r475532165", "createdAt": "2020-08-24T11:26:03Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/AbstractMethodProblem.java", "diffHunk": "@@ -17,12 +17,39 @@\n package com.google.cloud.tools.opensource.classpath;\n \n /**\n- * The referenced {@code methodSymbol} is not implemented in the {@code targetClass} but the class\n- * is declared to implement the method by {@code sourceClass}. Such unimplemented methods manifest\n- * as {@link AbstractMethodError}s at runtime.\n+ * {@code implementationClass} does not implement the abstract method {@code methodSymbol} declared\n+ * by {@code interfaceOrAbstractClass}. Such unimplemented methods manifest as {@link\n+ * AbstractMethodError}s at runtime.\n  */\n final class AbstractMethodProblem extends LinkageProblem {\n-  AbstractMethodProblem(ClassFile sourceClass, ClassFile targetClass, MethodSymbol methodSymbol) {\n-    super(\"is not implemented in the class\", sourceClass, methodSymbol, targetClass);\n+  MethodSymbol methodSymbol;\n+\n+  AbstractMethodProblem(\n+      ClassFile implementationClass,\n+      ClassFile interfaceOrAbstractClass,\n+      MethodSymbol methodSymbol) {\n+\n+    // implementationClass is the source of the invalid symbolic reference, and\n+    // interfaceOrAbstractClass is the target class of the reference.\n+    super(\n+        \" does not exist in the implementing class\",\n+        implementationClass,\n+        methodSymbol,\n+        interfaceOrAbstractClass);\n+    this.methodSymbol = methodSymbol;\n+  }\n+\n+  @Override\n+  public final String toString() {\n+    ClassFile sourceClass = getSourceClass();\n+    ClassPathEntry sourceClassPathEntry = sourceClass.getClassPathEntry();\n+    ClassFile targetClass = getTargetClass();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1596bf27ce95e1b75c339901f654c75dcddfceef"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzMjYzOQ==", "bodyText": "interfaceOrAbstractClass could perhaps be named supertype instead since a class can have more than one supertype when interfaces are in play.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r475532639", "createdAt": "2020-08-24T11:27:08Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/AbstractMethodProblem.java", "diffHunk": "@@ -17,12 +17,39 @@\n package com.google.cloud.tools.opensource.classpath;\n \n /**\n- * The referenced {@code methodSymbol} is not implemented in the {@code targetClass} but the class\n- * is declared to implement the method by {@code sourceClass}. Such unimplemented methods manifest\n- * as {@link AbstractMethodError}s at runtime.\n+ * {@code implementationClass} does not implement the abstract method {@code methodSymbol} declared\n+ * by {@code interfaceOrAbstractClass}. Such unimplemented methods manifest as {@link\n+ * AbstractMethodError}s at runtime.\n  */\n final class AbstractMethodProblem extends LinkageProblem {\n-  AbstractMethodProblem(ClassFile sourceClass, ClassFile targetClass, MethodSymbol methodSymbol) {\n-    super(\"is not implemented in the class\", sourceClass, methodSymbol, targetClass);\n+  MethodSymbol methodSymbol;\n+\n+  AbstractMethodProblem(\n+      ClassFile implementationClass,\n+      ClassFile interfaceOrAbstractClass,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1596bf27ce95e1b75c339901f654c75dcddfceef"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzMzYzOA==", "bodyText": "Anytime I see instanceof I assume it can be replaced with polymorphism. This can be a single method in LinkageProblem.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r475533638", "createdAt": "2020-08-24T11:29:13Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/DependencyConflict.java", "diffHunk": "@@ -62,18 +62,35 @@ public DependencyPath getPathToSelectedArtifact() {\n   @Override\n   public String toString() {\n     Artifact selected = pathToSelectedArtifact.getLeaf();\n+    String selectedCoordinates = Artifacts.toCoordinates(selected);\n     Artifact unselected = pathToArtifactThruSource.getLeaf();\n-    return \"Dependency conflict: \"\n-        + Artifacts.toCoordinates(selected)\n-        + \" does not define \"\n-        + symbol\n-        + \" but \"\n-        + Artifacts.toCoordinates(unselected)\n-        + \" defines it.\\n\"\n-        + \"  selected: \"\n-        + pathToSelectedArtifact\n-        + \"\\n  unselected: \"\n-        + pathToArtifactThruSource;\n+    String unselectedCoordinates = Artifacts.toCoordinates(unselected);\n+\n+    if (linkageProblem instanceof AbstractMethodProblem) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1596bf27ce95e1b75c339901f654c75dcddfceef"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzNDI3OA==", "bodyText": "This is clearer. Thanks.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r475534278", "createdAt": "2020-08-24T11:30:10Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -310,15 +310,18 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n    * methods manifest as {@link AbstractMethodError}s at runtime.\n    */\n   private ImmutableList<LinkageProblem> findInterfaceProblems(\n-      ClassFile classFile, InterfaceSymbol interfaceSymbol, ClassFile sourceClassFile) {\n+      ClassFile interfaceClassFile,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1596bf27ce95e1b75c339901f654c75dcddfceef"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzNTA4Mw==", "bodyText": "There's probably a cleaner way to do this without instanceof.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r475535083", "createdAt": "2020-08-24T11:31:07Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -150,9 +150,21 @@ public String formatSymbolProblem() {\n   public static String formatLinkageProblems(Set<LinkageProblem> linkageProblems) {\n     StringBuilder output = new StringBuilder();\n \n+    // Don't group AbstractMethodProblems by symbols because they do not fit in the\n+    // \"... referenced by ...\" format.\n+    ImmutableSet.Builder<AbstractMethodProblem> abstractMethodProblems = ImmutableSet.builder();\n+    ImmutableSet.Builder<LinkageProblem> problemsToGroupBySymbols = ImmutableSet.builder();\n+    for (LinkageProblem linkageProblem : linkageProblems) {\n+      if (linkageProblem instanceof AbstractMethodProblem) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1596bf27ce95e1b75c339901f654c75dcddfceef"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "769cfc41fb89c5dde64ada3504513dbb9aab09d1", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/769cfc41fb89c5dde64ada3504513dbb9aab09d1", "committedDate": "2020-08-24T13:14:37Z", "message": "Merge remote-tracking branch 'origin/master' into interface_reference_backwards"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e07c61006ce1f76bf60a226b9d94e49adfa128f", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/5e07c61006ce1f76bf60a226b9d94e49adfa128f", "committedDate": "2020-08-24T13:23:23Z", "message": "Applied review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNDUyOTcw", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#pullrequestreview-473452970", "createdAt": "2020-08-24T13:16:09Z", "commit": {"oid": "1596bf27ce95e1b75c339901f654c75dcddfceef"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzoxNjoxMFrOHFjzRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzoyNDoxNlrOHFkGxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU5MTQ5Mw==", "bodyText": "Updated to supertype", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r475591493", "createdAt": "2020-08-24T13:16:10Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/AbstractMethodProblem.java", "diffHunk": "@@ -17,12 +17,39 @@\n package com.google.cloud.tools.opensource.classpath;\n \n /**\n- * The referenced {@code methodSymbol} is not implemented in the {@code targetClass} but the class\n- * is declared to implement the method by {@code sourceClass}. Such unimplemented methods manifest\n- * as {@link AbstractMethodError}s at runtime.\n+ * {@code implementationClass} does not implement the abstract method {@code methodSymbol} declared\n+ * by {@code interfaceOrAbstractClass}. Such unimplemented methods manifest as {@link\n+ * AbstractMethodError}s at runtime.\n  */\n final class AbstractMethodProblem extends LinkageProblem {\n-  AbstractMethodProblem(ClassFile sourceClass, ClassFile targetClass, MethodSymbol methodSymbol) {\n-    super(\"is not implemented in the class\", sourceClass, methodSymbol, targetClass);\n+  MethodSymbol methodSymbol;\n+\n+  AbstractMethodProblem(\n+      ClassFile implementationClass,\n+      ClassFile interfaceOrAbstractClass,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzMjYzOQ=="}, "originalCommit": {"oid": "1596bf27ce95e1b75c339901f654c75dcddfceef"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU5MTkzNA==", "bodyText": "Nice idea. Moved methodSymbol.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r475591934", "createdAt": "2020-08-24T13:16:49Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/AbstractMethodProblem.java", "diffHunk": "@@ -17,12 +17,39 @@\n package com.google.cloud.tools.opensource.classpath;\n \n /**\n- * The referenced {@code methodSymbol} is not implemented in the {@code targetClass} but the class\n- * is declared to implement the method by {@code sourceClass}. Such unimplemented methods manifest\n- * as {@link AbstractMethodError}s at runtime.\n+ * {@code implementationClass} does not implement the abstract method {@code methodSymbol} declared\n+ * by {@code interfaceOrAbstractClass}. Such unimplemented methods manifest as {@link\n+ * AbstractMethodError}s at runtime.\n  */\n final class AbstractMethodProblem extends LinkageProblem {\n-  AbstractMethodProblem(ClassFile sourceClass, ClassFile targetClass, MethodSymbol methodSymbol) {\n-    super(\"is not implemented in the class\", sourceClass, methodSymbol, targetClass);\n+  MethodSymbol methodSymbol;\n+\n+  AbstractMethodProblem(\n+      ClassFile implementationClass,\n+      ClassFile interfaceOrAbstractClass,\n+      MethodSymbol methodSymbol) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzMTQ2OQ=="}, "originalCommit": {"oid": "1596bf27ce95e1b75c339901f654c75dcddfceef"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU5MjUwOQ==", "bodyText": "Updated. I keep this comment as I'm likely to forget our discussion.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r475592509", "createdAt": "2020-08-24T13:17:47Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/AbstractMethodProblem.java", "diffHunk": "@@ -17,12 +17,39 @@\n package com.google.cloud.tools.opensource.classpath;\n \n /**\n- * The referenced {@code methodSymbol} is not implemented in the {@code targetClass} but the class\n- * is declared to implement the method by {@code sourceClass}. Such unimplemented methods manifest\n- * as {@link AbstractMethodError}s at runtime.\n+ * {@code implementationClass} does not implement the abstract method {@code methodSymbol} declared\n+ * by {@code interfaceOrAbstractClass}. Such unimplemented methods manifest as {@link\n+ * AbstractMethodError}s at runtime.\n  */\n final class AbstractMethodProblem extends LinkageProblem {\n-  AbstractMethodProblem(ClassFile sourceClass, ClassFile targetClass, MethodSymbol methodSymbol) {\n-    super(\"is not implemented in the class\", sourceClass, methodSymbol, targetClass);\n+  MethodSymbol methodSymbol;\n+\n+  AbstractMethodProblem(\n+      ClassFile implementationClass,\n+      ClassFile interfaceOrAbstractClass,\n+      MethodSymbol methodSymbol) {\n+\n+    // implementationClass is the source of the invalid symbolic reference, and\n+    // interfaceOrAbstractClass is the target class of the reference.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzMDMzMg=="}, "originalCommit": {"oid": "1596bf27ce95e1b75c339901f654c75dcddfceef"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU5MzI5Nw==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r475593297", "createdAt": "2020-08-24T13:19:05Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/AbstractMethodProblem.java", "diffHunk": "@@ -17,12 +17,39 @@\n package com.google.cloud.tools.opensource.classpath;\n \n /**\n- * The referenced {@code methodSymbol} is not implemented in the {@code targetClass} but the class\n- * is declared to implement the method by {@code sourceClass}. Such unimplemented methods manifest\n- * as {@link AbstractMethodError}s at runtime.\n+ * {@code implementationClass} does not implement the abstract method {@code methodSymbol} declared\n+ * by {@code interfaceOrAbstractClass}. Such unimplemented methods manifest as {@link\n+ * AbstractMethodError}s at runtime.\n  */\n final class AbstractMethodProblem extends LinkageProblem {\n-  AbstractMethodProblem(ClassFile sourceClass, ClassFile targetClass, MethodSymbol methodSymbol) {\n-    super(\"is not implemented in the class\", sourceClass, methodSymbol, targetClass);\n+  MethodSymbol methodSymbol;\n+\n+  AbstractMethodProblem(\n+      ClassFile implementationClass,\n+      ClassFile interfaceOrAbstractClass,\n+      MethodSymbol methodSymbol) {\n+\n+    // implementationClass is the source of the invalid symbolic reference, and\n+    // interfaceOrAbstractClass is the target class of the reference.\n+    super(\n+        \" does not exist in the implementing class\",\n+        implementationClass,\n+        methodSymbol,\n+        interfaceOrAbstractClass);\n+    this.methodSymbol = methodSymbol;\n+  }\n+\n+  @Override\n+  public final String toString() {\n+    ClassFile sourceClass = getSourceClass();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzMTgwMg=="}, "originalCommit": {"oid": "1596bf27ce95e1b75c339901f654c75dcddfceef"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU5MzM2Ng==", "bodyText": "Updated this to supertype.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r475593366", "createdAt": "2020-08-24T13:19:11Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/AbstractMethodProblem.java", "diffHunk": "@@ -17,12 +17,39 @@\n package com.google.cloud.tools.opensource.classpath;\n \n /**\n- * The referenced {@code methodSymbol} is not implemented in the {@code targetClass} but the class\n- * is declared to implement the method by {@code sourceClass}. Such unimplemented methods manifest\n- * as {@link AbstractMethodError}s at runtime.\n+ * {@code implementationClass} does not implement the abstract method {@code methodSymbol} declared\n+ * by {@code interfaceOrAbstractClass}. Such unimplemented methods manifest as {@link\n+ * AbstractMethodError}s at runtime.\n  */\n final class AbstractMethodProblem extends LinkageProblem {\n-  AbstractMethodProblem(ClassFile sourceClass, ClassFile targetClass, MethodSymbol methodSymbol) {\n-    super(\"is not implemented in the class\", sourceClass, methodSymbol, targetClass);\n+  MethodSymbol methodSymbol;\n+\n+  AbstractMethodProblem(\n+      ClassFile implementationClass,\n+      ClassFile interfaceOrAbstractClass,\n+      MethodSymbol methodSymbol) {\n+\n+    // implementationClass is the source of the invalid symbolic reference, and\n+    // interfaceOrAbstractClass is the target class of the reference.\n+    super(\n+        \" does not exist in the implementing class\",\n+        implementationClass,\n+        methodSymbol,\n+        interfaceOrAbstractClass);\n+    this.methodSymbol = methodSymbol;\n+  }\n+\n+  @Override\n+  public final String toString() {\n+    ClassFile sourceClass = getSourceClass();\n+    ClassPathEntry sourceClassPathEntry = sourceClass.getClassPathEntry();\n+    ClassFile targetClass = getTargetClass();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzMjE2NQ=="}, "originalCommit": {"oid": "1596bf27ce95e1b75c339901f654c75dcddfceef"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU5NjQ4Ng==", "bodyText": "I'm feeling that's unnecessary abstraction to remove just one if-statement. Let me try what it looks like.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r475596486", "createdAt": "2020-08-24T13:24:16Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/DependencyConflict.java", "diffHunk": "@@ -62,18 +62,35 @@ public DependencyPath getPathToSelectedArtifact() {\n   @Override\n   public String toString() {\n     Artifact selected = pathToSelectedArtifact.getLeaf();\n+    String selectedCoordinates = Artifacts.toCoordinates(selected);\n     Artifact unselected = pathToArtifactThruSource.getLeaf();\n-    return \"Dependency conflict: \"\n-        + Artifacts.toCoordinates(selected)\n-        + \" does not define \"\n-        + symbol\n-        + \" but \"\n-        + Artifacts.toCoordinates(unselected)\n-        + \" defines it.\\n\"\n-        + \"  selected: \"\n-        + pathToSelectedArtifact\n-        + \"\\n  unselected: \"\n-        + pathToArtifactThruSource;\n+    String unselectedCoordinates = Artifacts.toCoordinates(unselected);\n+\n+    if (linkageProblem instanceof AbstractMethodProblem) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzMzYzOA=="}, "originalCommit": {"oid": "1596bf27ce95e1b75c339901f654c75dcddfceef"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2abad19662f621149d9d0d82d974c9930c8328c", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/a2abad19662f621149d9d0d82d974c9930c8328c", "committedDate": "2020-08-24T13:41:06Z", "message": "polymorphism"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNTA4NzU2", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#pullrequestreview-473508756", "createdAt": "2020-08-24T13:50:35Z", "commit": {"oid": "a2abad19662f621149d9d0d82d974c9930c8328c"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzo1MDozNVrOHFlpuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDowMToyMVrOHFmc3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYyMTgxOQ==", "bodyText": "AbstractMethodProblem overrides describe method.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r475621819", "createdAt": "2020-08-24T13:50:35Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/DependencyConflict.java", "diffHunk": "@@ -61,19 +61,7 @@ public DependencyPath getPathToSelectedArtifact() {\n \n   @Override\n   public String toString() {\n-    Artifact selected = pathToSelectedArtifact.getLeaf();\n-    Artifact unselected = pathToArtifactThruSource.getLeaf();\n-    return \"Dependency conflict: \"\n-        + Artifacts.toCoordinates(selected)\n-        + \" does not define \"\n-        + symbol\n-        + \" but \"\n-        + Artifacts.toCoordinates(unselected)\n-        + \" defines it.\\n\"\n-        + \"  selected: \"\n-        + pathToSelectedArtifact\n-        + \"\\n  unselected: \"\n-        + pathToArtifactThruSource;\n+    return linkageProblem.describe(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2abad19662f621149d9d0d82d974c9930c8328c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYyNDc3Mg==", "bodyText": "I thought about that but couldn't find a good one. My assessment is that we cannot remove this by polymorphism because we need to group multiple instances of LinkageProblems. Changing individual behavior does not help.\nAt best it would be LinkageProblem.isAbstractMethod() or a different name.\nI welcome your suggestion if any.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r475624772", "createdAt": "2020-08-24T13:53:09Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -150,9 +150,21 @@ public String formatSymbolProblem() {\n   public static String formatLinkageProblems(Set<LinkageProblem> linkageProblems) {\n     StringBuilder output = new StringBuilder();\n \n+    // Don't group AbstractMethodProblems by symbols because they do not fit in the\n+    // \"... referenced by ...\" format.\n+    ImmutableSet.Builder<AbstractMethodProblem> abstractMethodProblems = ImmutableSet.builder();\n+    ImmutableSet.Builder<LinkageProblem> problemsToGroupBySymbols = ImmutableSet.builder();\n+    for (LinkageProblem linkageProblem : linkageProblems) {\n+      if (linkageProblem instanceof AbstractMethodProblem) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzNTA4Mw=="}, "originalCommit": {"oid": "1596bf27ce95e1b75c339901f654c75dcddfceef"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzNDkwOQ==", "bodyText": "In the dashboard for libraries-bom 1.0.0, guava-jdk5 was appearing twice, because it involves both source and target.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r475634909", "createdAt": "2020-08-24T14:01:21Z", "author": {"login": "suztomo"}, "path": "dashboard/src/main/resources/templates/macros.ftl", "diffHunk": "@@ -52,7 +52,9 @@\n   <#list jarsInProblem?values as jarInProblem>\n     <@showDependencyPath dependencyPathRootCauses classPathResult jarInProblem />\n   </#list>\n-  <@showDependencyPath dependencyPathRootCauses classPathResult classPathEntry />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2abad19662f621149d9d0d82d974c9930c8328c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczNTM0NDcy", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#pullrequestreview-473534472", "createdAt": "2020-08-24T14:19:08Z", "commit": {"oid": "a2abad19662f621149d9d0d82d974c9930c8328c"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoxOTowOFrOHFnMCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDoyNDowN1rOHFnZUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY0Njk4NQ==", "bodyText": "It's consistent that we have a space at the beginning and not at the end of the first argument. Something to look at later, not in this PR.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r475646985", "createdAt": "2020-08-24T14:19:08Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/AbstractMethodProblem.java", "diffHunk": "@@ -25,16 +29,12 @@\n   MethodSymbol methodSymbol;\n \n   AbstractMethodProblem(\n-      ClassFile implementationClass,\n-      MethodSymbol methodSymbol, ClassFile supertype) {\n+      ClassFile implementationClass, MethodSymbol methodSymbol, ClassFile supertype) {\n \n     // implementationClass is the source of the invalid symbolic reference, and supertype is the\n     // target of the symbolic reference.\n     super(\n-        \" does not exist in the implementing class\",\n-        implementationClass,\n-        methodSymbol,\n-        supertype);\n+        \" does not exist in the implementing class\", implementationClass, methodSymbol, supertype);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2abad19662f621149d9d0d82d974c9930c8328c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY1MDM4NA==", "bodyText": "It might require some reorganizing of how and where we group things. This is OK for now. I'll take a look at this when I get a minute.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1604#discussion_r475650384", "createdAt": "2020-08-24T14:24:07Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageProblem.java", "diffHunk": "@@ -150,9 +150,21 @@ public String formatSymbolProblem() {\n   public static String formatLinkageProblems(Set<LinkageProblem> linkageProblems) {\n     StringBuilder output = new StringBuilder();\n \n+    // Don't group AbstractMethodProblems by symbols because they do not fit in the\n+    // \"... referenced by ...\" format.\n+    ImmutableSet.Builder<AbstractMethodProblem> abstractMethodProblems = ImmutableSet.builder();\n+    ImmutableSet.Builder<LinkageProblem> problemsToGroupBySymbols = ImmutableSet.builder();\n+    for (LinkageProblem linkageProblem : linkageProblems) {\n+      if (linkageProblem instanceof AbstractMethodProblem) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzNTA4Mw=="}, "originalCommit": {"oid": "1596bf27ce95e1b75c339901f654c75dcddfceef"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1400, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}