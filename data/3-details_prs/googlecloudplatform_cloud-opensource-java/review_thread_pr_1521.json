{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2MzE0Mzcw", "number": 1521, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzozOTo1OVrOEMlzmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzoxNDowN1rOEM_BkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNjM3Nzg1OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/Artifacts.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzozOTo1OVrOGuynaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQxNzozOTo1OVrOGuynaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTcxNjk2OQ==", "bodyText": "Good to know intern().", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1521#discussion_r451716969", "createdAt": "2020-07-08T17:39:59Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/Artifacts.java", "diffHunk": "@@ -31,11 +31,12 @@ private Artifacts() {\n    * packaging are not included.\n    */\n   public static String toCoordinates(Artifact artifact) {\n-    return artifact.getGroupId() + \":\" + artifact.getArtifactId() + \":\" + artifact.getVersion();\n+    return (artifact.getGroupId() + \":\" + artifact.getArtifactId() + \":\" + artifact.getVersion())\n+        .intern();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e73cac0d23a682865d3ad88a570e6786099af7e1"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDQ5MzAxOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzowOTozOFrOGvaSGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzo0NjozNFrOGvbjAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM2Njg3Mw==", "bodyText": "remove this comment", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1521#discussion_r452366873", "createdAt": "2020-07-09T17:09:38Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java", "diffHunk": "@@ -54,15 +54,22 @@ public ClassPathBuilder(DependencyGraphBuilder dependencyGraphBuilder) {\n    * closest\" strategy follows Maven's dependency mediation.\n    *\n    * @param artifacts the first artifacts that appear in the classpath, in order\n+   * @param full if true all optional dependencies and their transitive dependencies are\n+   *     included. If false, optional dependencies are not included.\n    */\n-  public ClassPathResult resolve(List<Artifact> artifacts) {\n-\n+  public ClassPathResult resolve(List<Artifact> artifacts, boolean full) {\n     LinkedListMultimap<ClassPathEntry, DependencyPath> multimap = LinkedListMultimap.create();\n     if (artifacts.isEmpty()) {\n       return new ClassPathResult(multimap, ImmutableList.of());\n     }\n     // dependencyGraph holds multiple versions for one artifact key (groupId:artifactId)\n-    DependencyGraph result = dependencyGraphBuilder.buildFullDependencyGraph(artifacts);\n+    //DependencyGraph result = dependencyGraphBuilder.buildFullDependencyGraph(artifacts);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdcd3cd00b131acc50e18296e7441a027f9dca41"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4NzU4Nw==", "bodyText": "done", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1521#discussion_r452387587", "createdAt": "2020-07-09T17:46:34Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java", "diffHunk": "@@ -54,15 +54,22 @@ public ClassPathBuilder(DependencyGraphBuilder dependencyGraphBuilder) {\n    * closest\" strategy follows Maven's dependency mediation.\n    *\n    * @param artifacts the first artifacts that appear in the classpath, in order\n+   * @param full if true all optional dependencies and their transitive dependencies are\n+   *     included. If false, optional dependencies are not included.\n    */\n-  public ClassPathResult resolve(List<Artifact> artifacts) {\n-\n+  public ClassPathResult resolve(List<Artifact> artifacts, boolean full) {\n     LinkedListMultimap<ClassPathEntry, DependencyPath> multimap = LinkedListMultimap.create();\n     if (artifacts.isEmpty()) {\n       return new ClassPathResult(multimap, ImmutableList.of());\n     }\n     // dependencyGraph holds multiple versions for one artifact key (groupId:artifactId)\n-    DependencyGraph result = dependencyGraphBuilder.buildFullDependencyGraph(artifacts);\n+    //DependencyGraph result = dependencyGraphBuilder.buildFullDependencyGraph(artifacts);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM2Njg3Mw=="}, "originalCommit": {"oid": "cdcd3cd00b131acc50e18296e7441a027f9dca41"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDUwNzE0OnYy", "diffSide": "RIGHT", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/MemoryUsageTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzoxMzoyMlrOGvaatg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxOTozMDowMFrOGve5lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM2OTA3OA==", "bodyText": "Do you still need this test?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1521#discussion_r452369078", "createdAt": "2020-07-09T17:13:22Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/MemoryUsageTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.artifact.DefaultArtifact;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class MemoryUsageTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdcd3cd00b131acc50e18296e7441a027f9dca41"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4ODQ5OQ==", "bodyText": "I'm not sure. What do you think? I think we need something like this, though perhaps I should cut pieces of it, or move it to a manual test. Then again, it would be nice to notice if we do something that increases the size past what Java can handle.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1521#discussion_r452388499", "createdAt": "2020-07-09T17:48:23Z", "author": {"login": "elharo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/MemoryUsageTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.artifact.DefaultArtifact;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class MemoryUsageTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM2OTA3OA=="}, "originalCommit": {"oid": "cdcd3cd00b131acc50e18296e7441a027f9dca41"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ0MjUxOQ==", "bodyText": "I think we need just one test in ClassPathBuilder to ensure that ClassPathBuildet can resolve the class path of the hcatalog artifact.\nI don\u2019t think we need assertions on JVM heap size or the debug output.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1521#discussion_r452442519", "createdAt": "2020-07-09T19:30:00Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/MemoryUsageTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.artifact.DefaultArtifact;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class MemoryUsageTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM2OTA3OA=="}, "originalCommit": {"oid": "cdcd3cd00b131acc50e18296e7441a027f9dca41"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMDUwOTYwOnYy", "diffSide": "RIGHT", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/MemoryUsageTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzoxNDowN1rOGvacVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxNzo0ODozMFrOGvbm0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM2OTQ5Mw==", "bodyText": "The check complains about this function.\n[ERROR] /Volumes/BuildData/tmpfs/src/github/cloud-opensource-java/dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/MemoryUsageTest.java:[57,14] error: [JUnit4TestNotRun] This looks like a test method but is not run; please add @Test and @Ignore, or, if this is a helper method, reduce its visibility.\n    (see https://errorprone.info/bugpattern/JUnit4TestNotRun)\n  Did you mean '@Test public void testBeamZetaSqlOutOfMemoryError() {' or '@Test @Ignore public void testBeamZetaSqlOutOfMemoryError() {' or 'private void testBeamZetaSqlOutOfMemoryError() {'?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1521#discussion_r452369493", "createdAt": "2020-07-09T17:14:07Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/MemoryUsageTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.artifact.DefaultArtifact;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class MemoryUsageTest {\n+  private ClassPathBuilder classPathBuilder = new ClassPathBuilder();\n+  \n+  @Before\n+  public void setUp() {\n+    System.gc();\n+  }\n+  \n+  @Test\n+  public void testBeamCatalogOutOfMemoryError() {\n+    long before = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();\n+    String coords = \"org.apache.beam:beam-sdks-java-io-hcatalog:2.19.0\";\n+    \n+    Artifact catalog = new DefaultArtifact(coords);\n+    try {\n+      ClassPathResult result = classPathBuilder.resolve(ImmutableList.of(catalog), false);\n+      long after = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();\n+      double mb = (after - before) / (1024.0 * 1024.0);\n+      System.err.println(\"Memory used: \" + mb + \"MB\");      \n+      \n+      assertNotNull(result);\n+    } catch (OutOfMemoryError failure) {\n+      failure.printStackTrace();\n+      fail(\"Ran out of memory\");\n+    } finally {\n+      System.gc();      \n+    }\n+  }\n+  \n+  public void testBeamZetaSqlOutOfMemoryError() {    ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdcd3cd00b131acc50e18296e7441a027f9dca41"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM4ODU2MA==", "bodyText": "fixed", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1521#discussion_r452388560", "createdAt": "2020-07-09T17:48:30Z", "author": {"login": "elharo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/MemoryUsageTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.fail;\n+\n+import com.google.common.collect.ImmutableList;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.artifact.DefaultArtifact;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class MemoryUsageTest {\n+  private ClassPathBuilder classPathBuilder = new ClassPathBuilder();\n+  \n+  @Before\n+  public void setUp() {\n+    System.gc();\n+  }\n+  \n+  @Test\n+  public void testBeamCatalogOutOfMemoryError() {\n+    long before = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();\n+    String coords = \"org.apache.beam:beam-sdks-java-io-hcatalog:2.19.0\";\n+    \n+    Artifact catalog = new DefaultArtifact(coords);\n+    try {\n+      ClassPathResult result = classPathBuilder.resolve(ImmutableList.of(catalog), false);\n+      long after = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();\n+      double mb = (after - before) / (1024.0 * 1024.0);\n+      System.err.println(\"Memory used: \" + mb + \"MB\");      \n+      \n+      assertNotNull(result);\n+    } catch (OutOfMemoryError failure) {\n+      failure.printStackTrace();\n+      fail(\"Ran out of memory\");\n+    } finally {\n+      System.gc();      \n+    }\n+  }\n+  \n+  public void testBeamZetaSqlOutOfMemoryError() {    ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjM2OTQ5Mw=="}, "originalCommit": {"oid": "cdcd3cd00b131acc50e18296e7441a027f9dca41"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2634, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}