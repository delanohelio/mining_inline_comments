{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1MDg0MjUx", "number": 1318, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMTozNTozMVrODsfB-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoxMjozNlrODuKbOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3OTcyMzQ2OnYy", "diffSide": "RIGHT", "path": "linkage-monitor/src/test/java/com/google/cloud/tools/dependencies/linkagemonitor/LinkageMonitorTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwMTozNTozMVrOF9XMlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNDo0Mjo0NlrOF9tK2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg4NzUxMQ==", "bodyText": "Before: 2 lines with 2 variables\nAfter: 6 lines with 4 variables\nI see the before is better.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1318#discussion_r399887511", "createdAt": "2020-03-30T01:35:31Z", "author": {"login": "suztomo"}, "path": "linkage-monitor/src/test/java/com/google/cloud/tools/dependencies/linkagemonitor/LinkageMonitorTest.java", "diffHunk": "@@ -96,23 +115,17 @@ public void testBomSnapshot()\n         .inOrder();\n   }\n \n-  private final SymbolProblem classNotFoundProblem =\n-      new SymbolProblem(new ClassSymbol(\"java.lang.Integer\"), ErrorType.CLASS_NOT_FOUND, null);\n-  private final SymbolProblem methodNotFoundProblem =\n-      new SymbolProblem(\n-          new MethodSymbol(\n-              \"io.grpc.protobuf.ProtoUtils\",\n-              \"marshaller\",\n-              \"(Lcom/google/protobuf/Message;)Lio/grpc/MethodDescriptor$Marshaller;\",\n-              false),\n-          ErrorType.SYMBOL_NOT_FOUND,\n-          new ClassFile(ClassPathEntry.of(\"foo:b:1.0.0\", \"foo/b-1.0.0.jar\"), \"java.lang.Object\"));\n-\n   @Test\n   public void generateMessageForNewError() {\n     Set<SymbolProblem> baselineProblems = ImmutableSet.of(classNotFoundProblem);\n-    ClassPathEntry jarA = ClassPathEntry.of(\"foo:a:1.2.3\", \"foo/a-1.2.3.jar\");\n-    ClassPathEntry jarB = ClassPathEntry.of(\"foo:b:1.0.0\", \"foo/b-1.0.0.jar\");\n+    \n+    Artifact artifactA = new DefaultArtifact(\"foo:a:1.2.3\")\n+        .setFile(new File(\"foo/a-1.2.3.jar\"));\n+    Artifact artifactB = new DefaultArtifact(\"foo:b:1.0.0\")\n+        .setFile(new File(\"foo/b-1.0.0.jar\"));\n+    \n+    ClassPathEntry jarA = new ClassPathEntry(artifactA);\n+    ClassPathEntry jarB = new ClassPathEntry(artifactB);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "64858d42ceeec58e020db9e9245d961ff7781b97"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExNzEyMQ==", "bodyText": "Arguably we don't have the right constructors yet. However the model code seems to be OK with this, and it's nice to keep the tests as close to the model code as reasonable. But my main goal is to remove a method that's only needed for testing. That's always a good thing.\nCould this become a test utility? Perhaps. Or we could use test fixtures to avoid duplicating code for object creation.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1318#discussion_r400117121", "createdAt": "2020-03-30T11:25:38Z", "author": {"login": "elharo"}, "path": "linkage-monitor/src/test/java/com/google/cloud/tools/dependencies/linkagemonitor/LinkageMonitorTest.java", "diffHunk": "@@ -96,23 +115,17 @@ public void testBomSnapshot()\n         .inOrder();\n   }\n \n-  private final SymbolProblem classNotFoundProblem =\n-      new SymbolProblem(new ClassSymbol(\"java.lang.Integer\"), ErrorType.CLASS_NOT_FOUND, null);\n-  private final SymbolProblem methodNotFoundProblem =\n-      new SymbolProblem(\n-          new MethodSymbol(\n-              \"io.grpc.protobuf.ProtoUtils\",\n-              \"marshaller\",\n-              \"(Lcom/google/protobuf/Message;)Lio/grpc/MethodDescriptor$Marshaller;\",\n-              false),\n-          ErrorType.SYMBOL_NOT_FOUND,\n-          new ClassFile(ClassPathEntry.of(\"foo:b:1.0.0\", \"foo/b-1.0.0.jar\"), \"java.lang.Object\"));\n-\n   @Test\n   public void generateMessageForNewError() {\n     Set<SymbolProblem> baselineProblems = ImmutableSet.of(classNotFoundProblem);\n-    ClassPathEntry jarA = ClassPathEntry.of(\"foo:a:1.2.3\", \"foo/a-1.2.3.jar\");\n-    ClassPathEntry jarB = ClassPathEntry.of(\"foo:b:1.0.0\", \"foo/b-1.0.0.jar\");\n+    \n+    Artifact artifactA = new DefaultArtifact(\"foo:a:1.2.3\")\n+        .setFile(new File(\"foo/a-1.2.3.jar\"));\n+    Artifact artifactB = new DefaultArtifact(\"foo:b:1.0.0\")\n+        .setFile(new File(\"foo/b-1.0.0.jar\"));\n+    \n+    ClassPathEntry jarA = new ClassPathEntry(artifactA);\n+    ClassPathEntry jarB = new ClassPathEntry(artifactB);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg4NzUxMQ=="}, "originalCommit": {"oid": "64858d42ceeec58e020db9e9245d961ff7781b97"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDI0NzUxNA==", "bodyText": "I agree that the removal of the test-only method is a good thing if the lost benefit is minimal.\n\nCould this become a test utility? Perhaps.\n\nWould you implement this of() as a test utility?\nI haven't thought about setting up test fixtures for the test cases. If you think that's even better, I'm interested in what it looks like.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1318#discussion_r400247514", "createdAt": "2020-03-30T14:42:46Z", "author": {"login": "suztomo"}, "path": "linkage-monitor/src/test/java/com/google/cloud/tools/dependencies/linkagemonitor/LinkageMonitorTest.java", "diffHunk": "@@ -96,23 +115,17 @@ public void testBomSnapshot()\n         .inOrder();\n   }\n \n-  private final SymbolProblem classNotFoundProblem =\n-      new SymbolProblem(new ClassSymbol(\"java.lang.Integer\"), ErrorType.CLASS_NOT_FOUND, null);\n-  private final SymbolProblem methodNotFoundProblem =\n-      new SymbolProblem(\n-          new MethodSymbol(\n-              \"io.grpc.protobuf.ProtoUtils\",\n-              \"marshaller\",\n-              \"(Lcom/google/protobuf/Message;)Lio/grpc/MethodDescriptor$Marshaller;\",\n-              false),\n-          ErrorType.SYMBOL_NOT_FOUND,\n-          new ClassFile(ClassPathEntry.of(\"foo:b:1.0.0\", \"foo/b-1.0.0.jar\"), \"java.lang.Object\"));\n-\n   @Test\n   public void generateMessageForNewError() {\n     Set<SymbolProblem> baselineProblems = ImmutableSet.of(classNotFoundProblem);\n-    ClassPathEntry jarA = ClassPathEntry.of(\"foo:a:1.2.3\", \"foo/a-1.2.3.jar\");\n-    ClassPathEntry jarB = ClassPathEntry.of(\"foo:b:1.0.0\", \"foo/b-1.0.0.jar\");\n+    \n+    Artifact artifactA = new DefaultArtifact(\"foo:a:1.2.3\")\n+        .setFile(new File(\"foo/a-1.2.3.jar\"));\n+    Artifact artifactB = new DefaultArtifact(\"foo:b:1.0.0\")\n+        .setFile(new File(\"foo/b-1.0.0.jar\"));\n+    \n+    ClassPathEntry jarA = new ClassPathEntry(artifactA);\n+    ClassPathEntry jarB = new ClassPathEntry(artifactB);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTg4NzUxMQ=="}, "originalCommit": {"oid": "64858d42ceeec58e020db9e9245d961ff7781b97"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzMxODk4OnYy", "diffSide": "LEFT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathEntry.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoxMjozNlrOGAA0cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QwMDoxMjozNlrOGAA0cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2NjYxMA==", "bodyText": "This is a normal factory method. Nothing special for tests.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1318#discussion_r402666610", "createdAt": "2020-04-03T00:12:36Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathEntry.java", "diffHunk": "@@ -95,12 +92,6 @@ public String toString() {\n     }\n   }\n \n-  @VisibleForTesting\n-  public static ClassPathEntry of(String coordinates, String filePath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "804785eab93754a71c821a20f01ecf7e13c99f7e"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2692, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}