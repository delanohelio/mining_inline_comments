{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMDIwNjA1", "number": 1637, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODowMjo0M1rOEhy0WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMToxMjoyNFrOEh3FEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODcxMDY1OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODowMjo0M1rOHPTt2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODowMjo0M1rOHPTt2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMzcyMA==", "bodyText": "This is public because the enforcer rule calls this method.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1637#discussion_r485813720", "createdAt": "2020-09-09T18:02:43Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassPathBuilder.java", "diffHunk": "@@ -59,11 +61,31 @@ public ClassPathBuilder(DependencyGraphBuilder dependencyGraphBuilder) {\n    */\n   public ClassPathResult resolve(List<Artifact> artifacts, boolean full) {\n     // dependencyGraph holds multiple versions for one artifact key (groupId:artifactId)\n+    return resolve(artifacts, full, null);\n+  }\n+\n+  /**\n+   * Builds a classpath from the transitive dependency graph from {@code artifacts}. If {@code\n+   * mavenProject} is not null, it uses the project's settings to resolve the artifacts.\n+   *\n+   * <p>When there are multiple versions of an artifact in the dependency tree, the closest to the\n+   * root in breadth-first order is picked up. This \"pick closest\" strategy follows Maven's\n+   * dependency mediation.\n+   *\n+   * @param artifacts the first artifacts that appear in the classpath, in order\n+   * @param mavenProject Maven project configuration for the artifact resolution. Non-null iff it's\n+   *     called by the Maven enforcer rule.\n+   * @param full if true all optional dependencies and their transitive dependencies are included.\n+   *     If false, optional dependencies are not included.\n+   */\n+  public ClassPathResult resolve(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffdbc8e73122c5830c46cc51669fc43000366216"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODcxMTgzOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODowMzowNVrOHPTunA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODowMzowNVrOHPTunA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMzkxNg==", "bodyText": "This is the motivation of this PR.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1637#discussion_r485813916", "createdAt": "2020-09-09T18:03:05Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -108,8 +112,15 @@ private DependencyNode resolveCompileTimeDependencies(\n     } else {\n       collectRequest.setDependencies(dependencyList);\n     }\n-    for (RemoteRepository repository : repositories) {\n-      collectRequest.addRepository(repository);\n+    if (mavenProject != null) {\n+      // Read the `repositories` section in the pom.xml when the Maven enforcer rule is running\n+      for (RemoteRepository repository : mavenProject.getRemoteProjectRepositories()) {\n+        collectRequest.addRepository(repository);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffdbc8e73122c5830c46cc51669fc43000366216"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODcxNDk4OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODowNDowNFrOHPTwpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODowNDowNFrOHPTwpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxNDQzOA==", "bodyText": "i moved these \"In the event of I/O errors\" sentences out from the description of the resulting dependency graphs.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1637#discussion_r485814438", "createdAt": "2020-09-09T18:04:04Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -122,49 +133,97 @@ private DependencyNode resolveCompileTimeDependencies(\n \n   /**\n    * Finds the full compile time, transitive dependency graph including duplicates, conflicting\n-   * versions, and provided and optional dependencies. In the event of I/O errors, missing\n-   * artifacts, and other problems, it can return an incomplete graph. Each node's dependencies are\n-   * resolved recursively. The scope of a dependency does not affect the scope of its children's\n+   * versions, and provided and optional dependencies. Each node's dependencies are resolved\n+   * recursively. The scope of a dependency does not affect the scope of its children's\n    * dependencies. Provided and optional dependencies are not treated differently than any other\n    * dependency.\n    *\n+   * <p>In the event of I/O errors, missing artifacts, and other problems, it can return an\n+   * incomplete graph.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffdbc8e73122c5830c46cc51669fc43000366216"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODcxOTk3OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODowNTozMVrOHPTzzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODowNTozMVrOHPTzzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxNTI0NA==", "bodyText": "The description of the resulting dependency graph is moved to the 1st paragraph of this Javadoc, keeping \"In the event of I/O errors, ...\" sentence to the bottom.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1637#discussion_r485815244", "createdAt": "2020-09-09T18:05:31Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -122,49 +133,97 @@ private DependencyNode resolveCompileTimeDependencies(\n \n   /**\n    * Finds the full compile time, transitive dependency graph including duplicates, conflicting\n-   * versions, and provided and optional dependencies. In the event of I/O errors, missing\n-   * artifacts, and other problems, it can return an incomplete graph. Each node's dependencies are\n-   * resolved recursively. The scope of a dependency does not affect the scope of its children's\n+   * versions, and provided and optional dependencies. Each node's dependencies are resolved\n+   * recursively. The scope of a dependency does not affect the scope of its children's\n    * dependencies. Provided and optional dependencies are not treated differently than any other\n    * dependency.\n    *\n+   * <p>In the event of I/O errors, missing artifacts, and other problems, it can return an\n+   * incomplete graph.\n+   *\n    * @param artifacts Maven artifacts whose dependencies to retrieve\n    * @return dependency graph representing the tree of Maven artifacts\n    */\n   public DependencyGraph buildFullDependencyGraph(List<Artifact> artifacts) {\n+    return buildFullDependencyGraph(artifacts, null);\n+  }\n+\n+  /**\n+   * Finds the full compile time, transitive dependency graph including duplicates, conflicting\n+   * versions, and provided and optional dependencies. Each node's dependencies are resolved\n+   * recursively. The scope of a dependency does not affect the scope of its children's\n+   * dependencies. Provided and optional dependencies are not treated differently than any other\n+   * dependency.\n+   *\n+   * <p>It uses Maven project configuration for the artifact resolution if {@code mavenProject} is\n+   * not null.\n+   *\n+   * <p>In the event of I/O errors, missing artifacts, and other problems, it can return an\n+   * incomplete graph.\n+   *\n+   * @param artifacts Maven artifacts whose dependencies to retrieve\n+   * @param mavenProject Maven project configuration for the artifact resolution\n+   * @return dependency graph representing the tree of Maven artifacts\n+   */\n+  public DependencyGraph buildFullDependencyGraph(\n+      List<Artifact> artifacts, @Nullable MavenProject mavenProject) {\n     ImmutableList<DependencyNode> dependencyNodes =\n         artifacts.stream().map(DefaultDependencyNode::new).collect(toImmutableList());\n     DefaultRepositorySystemSession session = RepositoryUtility.newSessionForFullDependency(system);\n-    return buildDependencyGraph(dependencyNodes, session);\n+    return buildDependencyGraph(dependencyNodes, session, mavenProject);\n   }\n-  \n+\n   /**\n    * Finds the full compile time, transitive dependency graph including duplicates and conflicting\n-   * versions, but not optional dependencies. In the event of I/O errors, missing\n-   * artifacts, and other problems, it can return an incomplete graph. Each node's dependencies are\n-   * resolved recursively. The scope of a dependency does not affect the scope of its children's\n-   * dependencies.\n+   * versions, but not optional dependencies. Each node's dependencies are resolved recursively. The\n+   * scope of a dependency does not affect the scope of its children's dependencies.\n+   *\n+   * <p>It uses Maven project configuration for the artifact resolution if {@code mavenProject} is\n+   * not null.\n+   *\n+   * <p>In the event of I/O errors, missing artifacts, and other problems, it can return an\n+   * incomplete graph.\n    *\n    * @param artifacts Maven artifacts whose dependencies to retrieve\n+   * @param mavenProject Maven project configuration for the artifact resolution\n    * @return dependency graph representing the tree of Maven artifacts\n    */\n-  public DependencyGraph buildVerboseDependencyGraph(List<Artifact> artifacts) {\n+  public DependencyGraph buildVerboseDependencyGraph(\n+      List<Artifact> artifacts, @Nullable MavenProject mavenProject) {\n     ImmutableList<DependencyNode> dependencyNodes =\n         artifacts.stream().map(DefaultDependencyNode::new).collect(toImmutableList());\n-    DefaultRepositorySystemSession session =\n-        RepositoryUtility.newSessionForVerboseListDependency(system);\n-    return buildDependencyGraph(dependencyNodes, session);\n+    DefaultRepositorySystemSession session = RepositoryUtility.newSessionForFullDependency(system);\n+    return buildDependencyGraph(dependencyNodes, session, mavenProject);\n   }\n-  \n+\n+  /**\n+   * Finds the full compile time, transitive dependency graph including duplicates and conflicting\n+   * versions, but not optional dependencies. Each node's dependencies are resolved recursively. The\n+   * scope of a dependency does not affect the scope of its children's dependencies.\n+   *\n+   * <p>In the event of I/O errors, missing artifacts, and other problems, it can return an\n+   * incomplete graph.\n+   *\n+   * @param artifacts Maven artifacts whose dependencies to retrieve\n+   * @return dependency graph representing the tree of Maven artifacts\n+   */\n+  public DependencyGraph buildVerboseDependencyGraph(List<Artifact> artifacts) {\n+    return buildVerboseDependencyGraph(artifacts, null);\n+  }\n+\n   /**\n    * Finds the full compile time, transitive dependency graph including conflicting versions and\n    * provided dependencies. This includes direct optional dependencies of the root node but not\n-   * optional dependencies of transitive dependencies.\n+   * optional dependencies of transitive dependencies. Each node's dependencies are resolved\n+   * recursively. The scope of a dependency does not affect the scope of its children's\n+   * dependencies. Provided and optional dependencies are not treated differently than any other\n+   * dependency.\n+   *\n+   * <p>It uses Maven project configuration for the artifact resolution if {@code mavenProject} is\n+   * not null.\n    *\n    * <p>In the event of I/O errors, missing artifacts, and other problems, it can return an\n-   * incomplete graph. Each node's dependencies are resolved recursively. The scope of a dependency\n-   * does not affect the scope of its children's dependencies. Provided and optional dependencies\n-   * are not treated differently than any other dependency.\n+   * incomplete graph.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffdbc8e73122c5830c46cc51669fc43000366216"}, "originalPosition": 162}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODcyNTIzOnYy", "diffSide": "RIGHT", "path": "enforcer-rules/src/it/bom-project-using-spring-repository/verify.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODowNzoxMFrOHPT3Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODowNzoxMFrOHPT3Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxNjA4Mg==", "bodyText": "This is the effect of the PR. Now the enforcer rule can resolve this artifact that does not exist in Maven Central.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1637#discussion_r485816082", "createdAt": "2020-09-09T18:07:10Z", "author": {"login": "suztomo"}, "path": "enforcer-rules/src/it/bom-project-using-spring-repository/verify.groovy", "diffHunk": "@@ -0,0 +1,16 @@\n+def buildLog = new File(basedir, \"build.log\")\r\n+\r\n+// Profile \"spring\" should set the Spring Milestones repository, which has this reactor-bom.\r\n+assert !buildLog.text.contains(\r\n+    \"Could not find artifact io.projectreactor:reactor-bom:pom:2020.0.0-M2 in central\")\r\n+\r\n+// io.projectreactor.netty:reactor-netty:jar:1.0.0-M2 is in the reactor-bom. It's available in\r\n+// Spring Milestones repository:\r\n+// https://repo.spring.io/milestone/io/projectreactor/netty/reactor-netty/1.0.0-M2/\r\n+assert !buildLog.text.contains(\r\n+    \"io.projectreactor.netty:reactor-netty:jar:1.0.0-M2 was not resolved\")\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffdbc8e73122c5830c46cc51669fc43000366216"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODgxNzk2OnYy", "diffSide": "RIGHT", "path": "enforcer-rules/README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODozNDowNFrOHPUwGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMToxMTowOVrOHPadZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzMDY4MQ==", "bodyText": ", use", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1637#discussion_r485830681", "createdAt": "2020-09-09T18:34:04Z", "author": {"login": "elharo"}, "path": "enforcer-rules/README.md", "diffHunk": "@@ -17,4 +17,12 @@ $ mvn verify\n Listening for transport dt_socket at address: 5005\n ```\n \n+When you debug one of the integration tests in the \"src/it\" directory. Use the following", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0ce0b1019e79ea4d02a9917819b4fc80bba0cae"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNDE5OA==", "bodyText": "Fixed.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1637#discussion_r485924198", "createdAt": "2020-09-09T21:11:09Z", "author": {"login": "suztomo"}, "path": "enforcer-rules/README.md", "diffHunk": "@@ -17,4 +17,12 @@ $ mvn verify\n Listening for transport dt_socket at address: 5005\n ```\n \n+When you debug one of the integration tests in the \"src/it\" directory. Use the following", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgzMDY4MQ=="}, "originalCommit": {"oid": "b0ce0b1019e79ea4d02a9917819b4fc80bba0cae"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTQwODgyOnYy", "diffSide": "RIGHT", "path": "enforcer-rules/src/main/java/com/google/cloud/tools/dependencies/enforcer/LinkageCheckerRule.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMToxMjoyNFrOHPaf6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQyMToxMjoyNFrOHPaf6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTkyNDg0Mg==", "bodyText": "We can configure DependencyGraphBuilder to use repositories. (I was forgetting about this feature when I passed MavenProject)", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1637#discussion_r485924842", "createdAt": "2020-09-09T21:12:24Z", "author": {"login": "suztomo"}, "path": "enforcer-rules/src/main/java/com/google/cloud/tools/dependencies/enforcer/LinkageCheckerRule.java", "diffHunk": "@@ -142,6 +144,13 @@ public void execute(@Nonnull EnforcerRuleHelper helper) throws EnforcerRuleExcep\n       MojoExecution execution = (MojoExecution) helper.evaluate(\"${mojoExecution}\");\n       RepositorySystemSession repositorySystemSession = session.getRepositorySession();\n \n+      ImmutableList<String> repositoryUrls =\n+          project.getRemoteProjectRepositories().stream()\n+              .map(RemoteRepository::getUrl)\n+              .collect(toImmutableList());\n+      DependencyGraphBuilder dependencyGraphBuilder = new DependencyGraphBuilder(repositoryUrls);\n+      classPathBuilder = new ClassPathBuilder(dependencyGraphBuilder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83517c68b2892b0b3a3d1b824e4ee6c1bf9e959b"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2532, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}