{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMTE4MjEy", "number": 1090, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODo1NjowNlrODWVoEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMDoyMjo0OVrODWW_EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzQ5NTg3OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QxODo1NjowNlrOFbCmGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMDoxNDowOVrOFbElLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5ODM5Mw==", "bodyText": "so we'll still die on these sorts of corrupt jar files? Is that what we want? Perhaps whoever calls this method should handle the IOExceptions that arise here.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1090#discussion_r363898393", "createdAt": "2020-01-07T18:56:06Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -395,7 +400,16 @@ Path findClassLocation(String className) {\n         javaClasses.add(javaClass);\n       } catch (ClassNotFoundException ex) {\n         // We couldn't find the class in the jar file where we found it.\n-        throw new IOException(\"Corrupt jar file \" + jar + \"; could not load \" + classFileName, ex);\n+        Throwable cause = ex.getCause();\n+        if (cause != null && cause instanceof IOException) {\n+          // Skip unexpected files (such as a lock file) included in JAR file\n+          // https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/1048 was caused\n+          // by an IOException\n+          corruptedClassFileNames.add(classFileName);\n+        } else {\n+          throw new IOException(\n+              \"Corrupt jar file \" + jar + \"; could not load \" + classFileName, ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1f22e37b168faa520d5e847781d3ffa7205b885"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkyNjIzMQ==", "bodyText": "That's a nice idea. Now findSymbolReferences catches the exception.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1090#discussion_r363926231", "createdAt": "2020-01-07T20:02:24Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -395,7 +400,16 @@ Path findClassLocation(String className) {\n         javaClasses.add(javaClass);\n       } catch (ClassNotFoundException ex) {\n         // We couldn't find the class in the jar file where we found it.\n-        throw new IOException(\"Corrupt jar file \" + jar + \"; could not load \" + classFileName, ex);\n+        Throwable cause = ex.getCause();\n+        if (cause != null && cause instanceof IOException) {\n+          // Skip unexpected files (such as a lock file) included in JAR file\n+          // https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/1048 was caused\n+          // by an IOException\n+          corruptedClassFileNames.add(classFileName);\n+        } else {\n+          throw new IOException(\n+              \"Corrupt jar file \" + jar + \"; could not load \" + classFileName, ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5ODM5Mw=="}, "originalCommit": {"oid": "a1f22e37b168faa520d5e847781d3ffa7205b885"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkzMDkyNA==", "bodyText": "I found the problem of catching IOException at the caller; it would skip all valid classes in the JAR file.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1090#discussion_r363930924", "createdAt": "2020-01-07T20:14:09Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -395,7 +400,16 @@ Path findClassLocation(String className) {\n         javaClasses.add(javaClass);\n       } catch (ClassNotFoundException ex) {\n         // We couldn't find the class in the jar file where we found it.\n-        throw new IOException(\"Corrupt jar file \" + jar + \"; could not load \" + classFileName, ex);\n+        Throwable cause = ex.getCause();\n+        if (cause != null && cause instanceof IOException) {\n+          // Skip unexpected files (such as a lock file) included in JAR file\n+          // https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/1048 was caused\n+          // by an IOException\n+          corruptedClassFileNames.add(classFileName);\n+        } else {\n+          throw new IOException(\n+              \"Corrupt jar file \" + jar + \"; could not load \" + classFileName, ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzg5ODM5Mw=="}, "originalCommit": {"oid": "a1f22e37b168faa520d5e847781d3ffa7205b885"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzY4NDM1OnYy", "diffSide": "LEFT", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassDumperTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMDowODowMFrOFbEcQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMDowODowMFrOFbEcQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkyODY0MA==", "bodyText": "This was exceeding 100 char limit.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1090#discussion_r363928640", "createdAt": "2020-01-07T20:08:00Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassDumperTest.java", "diffHunk": "@@ -313,7 +314,8 @@ public void testIsUnusedClassSymbolReference_classSymbolReferenceNotFound()\n             ImmutableList.of(absolutePathOfResource(\"testdata/conscrypt-openjdk-uber-1.4.2.jar\")));\n \n     try {\n-      classDumper.isUnusedClassSymbolReference(\"org.conscrypt.Conscrypt\", new ClassSymbol(\"dummy.NoSuchClass\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ada8f63154133e8bee16eefbf551ef7808ed6b5"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzcxNzI1OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMDoyMjoxMlrOFbExDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxODo0Njo1OFrOFhI0LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkzMzk2Nw==", "bodyText": "could we bubble the ClassFormatException instead? This isn't really an IO error.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1090#discussion_r363933967", "createdAt": "2020-01-07T20:22:12Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -395,7 +400,7 @@ Path findClassLocation(String className) {\n         javaClasses.add(javaClass);\n       } catch (ClassNotFoundException ex) {\n         // We couldn't find the class in the jar file where we found it.\n-        throw new IOException(\"Corrupt jar file \" + jar + \"; could not load \" + classFileName, ex);\n+        corruptedClassFileNames.add(classFileName);\n       } catch (ClassFormatException ex) {\n         // We couldn't load the class from the jar file where we found it.\n         throw new IOException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffa1e105c8177b20d2dab34d6040a145b8283f78"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkzNTc5NQ==", "bodyText": "Yes, removed the catch clause.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1090#discussion_r363935795", "createdAt": "2020-01-07T20:27:04Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -395,7 +400,7 @@ Path findClassLocation(String className) {\n         javaClasses.add(javaClass);\n       } catch (ClassNotFoundException ex) {\n         // We couldn't find the class in the jar file where we found it.\n-        throw new IOException(\"Corrupt jar file \" + jar + \"; could not load \" + classFileName, ex);\n+        corruptedClassFileNames.add(classFileName);\n       } catch (ClassFormatException ex) {\n         // We couldn't load the class from the jar file where we found it.\n         throw new IOException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkzMzk2Nw=="}, "originalCommit": {"oid": "ffa1e105c8177b20d2dab34d6040a145b8283f78"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI5MTc1Ng==", "bodyText": "It turned out that this change causes #1142.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1090#discussion_r370291756", "createdAt": "2020-01-23T18:46:58Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ClassDumper.java", "diffHunk": "@@ -395,7 +400,7 @@ Path findClassLocation(String className) {\n         javaClasses.add(javaClass);\n       } catch (ClassNotFoundException ex) {\n         // We couldn't find the class in the jar file where we found it.\n-        throw new IOException(\"Corrupt jar file \" + jar + \"; could not load \" + classFileName, ex);\n+        corruptedClassFileNames.add(classFileName);\n       } catch (ClassFormatException ex) {\n         // We couldn't load the class from the jar file where we found it.\n         throw new IOException(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkzMzk2Nw=="}, "originalCommit": {"oid": "ffa1e105c8177b20d2dab34d6040a145b8283f78"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NzcxODU2OnYy", "diffSide": "RIGHT", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassDumperTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMDoyMjo0OVrOFbEx6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMDoyMjo0OVrOFbEx6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzkzNDE4NQ==", "bodyText": "This asserts that ClassDumper loads valid class files from the JAR file even if some of the content are invalid files.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1090#discussion_r363934185", "createdAt": "2020-01-07T20:22:49Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/classpath/ClassDumperTest.java", "diffHunk": "@@ -364,4 +366,26 @@ public void testFindSymbolReferences_overLappingClass() throws IOException, Repo\n             new ClassFile(\n                 sisuGuicePath, \"com.google.inject.internal.InjectorImpl$BindingsMultimap\"));\n   }\n+\n+  @Test\n+  public void testListClasses_unexpectedNonClassFile() throws RepositoryException, IOException {\n+    // com.amazonaws:amazon-kinesis-client:1.13.0 contains an unexpected lock file\n+    // /unison/com/e007f77498fd27177e2ea931a06dcf50/unison/tmp/amazonaws/services/kinesis/leases/impl/LeaseTaker.class\n+    // https://github.com/awslabs/amazon-kinesis-client/issues/654\n+    Artifact kinesisClient = new DefaultArtifact(\"com.amazonaws:amazon-kinesis-client:1.13.0\");\n+    List<Path> paths = ClassPathBuilder.artifactsToClasspath(ImmutableList.of(kinesisClient));\n+    ClassDumper classDumper = ClassDumper.create(paths);\n+    Path kinesisJar = paths.get(0);\n+\n+    // This should not raise IOException\n+    SymbolReferenceMaps symbolReferences = classDumper.findSymbolReferences();\n+    assertNotNull(symbolReferences);\n+\n+    Truth.assertWithMessage(\"Invalid files should not stop loading valid class files\")\n+        .that(symbolReferences.getClassToClassSymbols().keySet())\n+        .comparingElementsUsing(\n+            Correspondence.transforming(\n+                (ClassFile classFile) -> classFile.getJar(), \"is in the JAR file\"))\n+        .contains(kinesisJar);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffa1e105c8177b20d2dab34d6040a145b8283f78"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2852, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}