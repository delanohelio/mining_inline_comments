{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1NTA0MDk1", "number": 1648, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzozMTozMlrOEjIK2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo0MDo0M1rOEjIkng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjY5NDY0OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzozMTozMlrOHRT9Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjowODozMFrOHRcXJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxNDc2Mg==", "bodyText": "It's unused. I see Problem.writeExclusionFile takes care of this.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1648#discussion_r487914762", "createdAt": "2020-09-14T13:31:32Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -150,16 +187,14 @@ public static void main(String[] arguments)\n               .collect(toImmutableSet());\n     }\n \n-    // TODO this should be a separate method; not part of findLinkageProblems\n-    Path outputExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n-    if (outputExclusionFile != null) {\n-      ExclusionFiles.write(outputExclusionFile, linkageProblems);\n-      System.out.println(\"Wrote the linkage errors as exclusion file: \" + outputExclusionFile);\n-      \n-      // TODO why do we return an empty set here?\n-      return ImmutableSet.of();\n-    }\n-\n     return linkageProblems;\n   }\n+  \n+  private static void writeExclusionFile(Path outputExclusionFile,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88612a145265c3e84008f2ca719beb72795f365"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA1MjUxNw==", "bodyText": "removed", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1648#discussion_r488052517", "createdAt": "2020-09-14T16:08:30Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -150,16 +187,14 @@ public static void main(String[] arguments)\n               .collect(toImmutableSet());\n     }\n \n-    // TODO this should be a separate method; not part of findLinkageProblems\n-    Path outputExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n-    if (outputExclusionFile != null) {\n-      ExclusionFiles.write(outputExclusionFile, linkageProblems);\n-      System.out.println(\"Wrote the linkage errors as exclusion file: \" + outputExclusionFile);\n-      \n-      // TODO why do we return an empty set here?\n-      return ImmutableSet.of();\n-    }\n-\n     return linkageProblems;\n   }\n+  \n+  private static void writeExclusionFile(Path outputExclusionFile,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxNDc2Mg=="}, "originalCommit": {"oid": "a88612a145265c3e84008f2ca719beb72795f365"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjcxNjgzOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzozNDozN1rOHRUJ2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNjowODowOVrOHRcWDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxODA0MQ==", "bodyText": "\"All output happens here\"? The input happens at checkJarFiles and checkArtifacts.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1648#discussion_r487918041", "createdAt": "2020-09-14T13:34:37Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -60,25 +60,73 @@ public static void main(String[] arguments)\n         // If JAR files are specified, it's empty.\n         ImmutableList<Artifact> artifacts = linkageCheckerArguments.getArtifacts();\n \n-        ImmutableSet<LinkageProblem> linkageProblems =\n+        Problems problems =\n             artifacts.isEmpty()\n                 ? checkJarFiles(linkageCheckerArguments)\n                 : checkArtifacts(linkageCheckerArguments);\n-        if (!linkageProblems.isEmpty()) {\n-          System.out.println(\n-              \"For the details of the linkage errors, see \"\n-                  + \"https://github.com/GoogleCloudPlatform/cloud-opensource-java/wiki/Linkage-Checker-Messages\");\n-          // Throwing an exception is more test-friendly compared with System.exit(1). The latter\n-          // abruptly stops test execution.\n-          throw new LinkageCheckResultException(linkageProblems.size());\n+\n+        Path outputExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n+        // All I/O happens here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88612a145265c3e84008f2ca719beb72795f365"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA1MjIzOQ==", "bodyText": "removed", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1648#discussion_r488052239", "createdAt": "2020-09-14T16:08:09Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -60,25 +60,73 @@ public static void main(String[] arguments)\n         // If JAR files are specified, it's empty.\n         ImmutableList<Artifact> artifacts = linkageCheckerArguments.getArtifacts();\n \n-        ImmutableSet<LinkageProblem> linkageProblems =\n+        Problems problems =\n             artifacts.isEmpty()\n                 ? checkJarFiles(linkageCheckerArguments)\n                 : checkArtifacts(linkageCheckerArguments);\n-        if (!linkageProblems.isEmpty()) {\n-          System.out.println(\n-              \"For the details of the linkage errors, see \"\n-                  + \"https://github.com/GoogleCloudPlatform/cloud-opensource-java/wiki/Linkage-Checker-Messages\");\n-          // Throwing an exception is more test-friendly compared with System.exit(1). The latter\n-          // abruptly stops test execution.\n-          throw new LinkageCheckResultException(linkageProblems.size());\n+\n+        Path outputExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n+        // All I/O happens here", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkxODA0MQ=="}, "originalCommit": {"oid": "a88612a145265c3e84008f2ca719beb72795f365"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mjc0Njk2OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzozODo0N1rOHRUbCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzozODo0N1rOHRUbCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkyMjQ0Mg==", "bodyText": "This check looks good. I feel the similarity with curl -o <filename>. If we chose to write the output to the file, it does not print the information on console.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1648#discussion_r487922442", "createdAt": "2020-09-14T13:38:47Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -60,25 +60,73 @@ public static void main(String[] arguments)\n         // If JAR files are specified, it's empty.\n         ImmutableList<Artifact> artifacts = linkageCheckerArguments.getArtifacts();\n \n-        ImmutableSet<LinkageProblem> linkageProblems =\n+        Problems problems =\n             artifacts.isEmpty()\n                 ? checkJarFiles(linkageCheckerArguments)\n                 : checkArtifacts(linkageCheckerArguments);\n-        if (!linkageProblems.isEmpty()) {\n-          System.out.println(\n-              \"For the details of the linkage errors, see \"\n-                  + \"https://github.com/GoogleCloudPlatform/cloud-opensource-java/wiki/Linkage-Checker-Messages\");\n-          // Throwing an exception is more test-friendly compared with System.exit(1). The latter\n-          // abruptly stops test execution.\n-          throw new LinkageCheckResultException(linkageProblems.size());\n+\n+        Path outputExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n+        // All I/O happens here\n+        if (!problems.linkageProblems.isEmpty()) {\n+          // TODO really uncertain about this check. Whether to write an exclusion file is\n+          // a separate issue from whether to print the linkage problems.\n+          if (outputExclusionFile == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88612a145265c3e84008f2ca719beb72795f365"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mjc2MDYyOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo0MDo0M1rOHRUi-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo0MDo0M1rOHRUi-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkyNDQ3NA==", "bodyText": "I like this abstraction of getting the result regardless of the output.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1648#discussion_r487924474", "createdAt": "2020-09-14T13:40:43Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageCheckerMain.java", "diffHunk": "@@ -60,25 +60,73 @@ public static void main(String[] arguments)\n         // If JAR files are specified, it's empty.\n         ImmutableList<Artifact> artifacts = linkageCheckerArguments.getArtifacts();\n \n-        ImmutableSet<LinkageProblem> linkageProblems =\n+        Problems problems =\n             artifacts.isEmpty()\n                 ? checkJarFiles(linkageCheckerArguments)\n                 : checkArtifacts(linkageCheckerArguments);\n-        if (!linkageProblems.isEmpty()) {\n-          System.out.println(\n-              \"For the details of the linkage errors, see \"\n-                  + \"https://github.com/GoogleCloudPlatform/cloud-opensource-java/wiki/Linkage-Checker-Messages\");\n-          // Throwing an exception is more test-friendly compared with System.exit(1). The latter\n-          // abruptly stops test execution.\n-          throw new LinkageCheckResultException(linkageProblems.size());\n+\n+        Path outputExclusionFile = linkageCheckerArguments.getOutputExclusionFile();\n+        // All I/O happens here\n+        if (!problems.linkageProblems.isEmpty()) {\n+          // TODO really uncertain about this check. Whether to write an exclusion file is\n+          // a separate issue from whether to print the linkage problems.\n+          if (outputExclusionFile == null) {\n+            problems.print();\n+            // Throwing an exception is more test-friendly than System.exit(1). The latter\n+            // abruptly stops test execution.\n+            throw new LinkageCheckResultException(problems.linkageProblems.size());\n+          } else {\n+            problems.writeExclusionFile(outputExclusionFile);\n+          }\n         }\n       }\n     } catch (ParseException ex) {\n       System.err.println(ex.getMessage());\n     }\n   }\n+  \n+  // output from a check\n+  private static final class Problems { \n+    \n+    private final ImmutableList<ArtifactProblem> artifactProblems;\n+    private final ImmutableSet<LinkageProblem> linkageProblems;\n+    private final ClassPathResult classPathResult;\n+\n+    private Problems(\n+        ImmutableSet<LinkageProblem> linkageProblems,\n+        ImmutableList<ArtifactProblem> artifactProblems,\n+        ClassPathResult classPathResult) {\n+      this.artifactProblems = artifactProblems;\n+      this.linkageProblems = linkageProblems;\n+      this.classPathResult = classPathResult;\n+    }\n \n-  private static ImmutableSet<LinkageProblem> checkJarFiles(\n+    private Problems(ImmutableSet<LinkageProblem> linkageProblems) {\n+      this.linkageProblems = linkageProblems;\n+      this.artifactProblems = ImmutableList.of();\n+      this.classPathResult = null;\n+    }\n+    \n+    void print() {\n+      System.out.println(LinkageProblem.formatLinkageProblems(\n+          linkageProblems, classPathResult));\n+      if (!artifactProblems.isEmpty()) {\n+        System.out.println(\"\\n\");\n+        System.out.println(ArtifactProblem.formatProblems(artifactProblems));\n+      }\n+      System.out.println(\n+          \"For the details of the linkage errors, see \"\n+              + \"https://github.com/GoogleCloudPlatform/cloud-opensource-java/wiki/Linkage-Checker-Messages\");\n+    }\n+    \n+    void writeExclusionFile(Path path) throws IOException, XMLStreamException, TransformerException {\n+      ExclusionFiles.write(path, linkageProblems);\n+      System.out.println(\"Wrote the linkage errors as exclusion file: \" + path);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88612a145265c3e84008f2ca719beb72795f365"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2541, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}