{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MTkzODM0", "number": 1629, "title": "ReturnTypeChangedProblem", "bodyText": "Fixes #1628", "createdAt": "2020-09-01T16:18:38Z", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629", "merged": true, "mergeCommit": {"oid": "b2269848b2f00dc13ea8f0f1258de89a54e59b94"}, "closed": true, "closedAt": "2020-09-03T17:01:57Z", "author": {"login": "suztomo"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEp2FhgH2gAyNDc3MTkzODM0OjVkMzY2MTlmMTYwYTRhMTJhY2QwMGU5NmI1MzlmY2U5MmFlNTk4MDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdFTGrkgFqTQ4MjAwNTYwNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5d36619f160a4a12acd00e96b539fce92ae59804", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/5d36619f160a4a12acd00e96b539fce92ae59804", "committedDate": "2020-09-01T16:18:07Z", "message": "MethodWithReturnTypeNotFoundProblem"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5OTI4MjM5", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#pullrequestreview-479928239", "createdAt": "2020-09-01T16:37:00Z", "commit": {"oid": "5d36619f160a4a12acd00e96b539fce92ae59804"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNjozNzowMFrOHK_KeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNjozOTowN1rOHK_PZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4MjY4MA==", "bodyText": "actualSignature", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481282680", "createdAt": "2020-09-01T16:37:00Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -274,20 +274,40 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n           Iterables.concat(\n               getClassHierarchy(targetJavaClass),\n               Arrays.asList(targetJavaClass.getAllInterfaces()));\n+\n+      boolean methodWithDifferentReturnTypeFound = false;\n       for (JavaClass javaClass : typesToCheck) {\n         for (Method method : javaClass.getMethods()) {\n-          if (method.getName().equals(methodName)\n-              && method.getSignature().equals(symbol.getDescriptor())) {\n-            if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n-              return Optional.of(\n-                  new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+          if (method.getName().equals(methodName)) {\n+            String signatureInTargetClass = method.getSignature();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d36619f160a4a12acd00e96b539fce92ae59804"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4Mjc3OQ==", "bodyText": "expectedSignature", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481282779", "createdAt": "2020-09-01T16:37:12Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -274,20 +274,40 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n           Iterables.concat(\n               getClassHierarchy(targetJavaClass),\n               Arrays.asList(targetJavaClass.getAllInterfaces()));\n+\n+      boolean methodWithDifferentReturnTypeFound = false;\n       for (JavaClass javaClass : typesToCheck) {\n         for (Method method : javaClass.getMethods()) {\n-          if (method.getName().equals(methodName)\n-              && method.getSignature().equals(symbol.getDescriptor())) {\n-            if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n-              return Optional.of(\n-                  new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+          if (method.getName().equals(methodName)) {\n+            String signatureInTargetClass = method.getSignature();\n+            String signatureLookingFor = symbol.getDescriptor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d36619f160a4a12acd00e96b539fce92ae59804"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4MzEwMA==", "bodyText": "\"another supertype\" or \"other supertypes\"", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481283100", "createdAt": "2020-09-01T16:37:44Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -274,20 +274,40 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n           Iterables.concat(\n               getClassHierarchy(targetJavaClass),\n               Arrays.asList(targetJavaClass.getAllInterfaces()));\n+\n+      boolean methodWithDifferentReturnTypeFound = false;\n       for (JavaClass javaClass : typesToCheck) {\n         for (Method method : javaClass.getMethods()) {\n-          if (method.getName().equals(methodName)\n-              && method.getSignature().equals(symbol.getDescriptor())) {\n-            if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n-              return Optional.of(\n-                  new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+          if (method.getName().equals(methodName)) {\n+            String signatureInTargetClass = method.getSignature();\n+            String signatureLookingFor = symbol.getDescriptor();\n+            if (signatureInTargetClass.equals(signatureLookingFor)) {\n+              if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n+                return Optional.of(\n+                    new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+              }\n+              // The method is found and accessible. Returning no error.\n+              return Optional.empty();\n+            } else {\n+              String argumentTypeInTarget = parseArgumentTypeParts(signatureInTargetClass);\n+              String argumentTypeLookingFor = parseArgumentTypeParts(signatureLookingFor);\n+              if (argumentTypeInTarget.equals(argumentTypeLookingFor)) {\n+                // Not returning result yet, because there can be other supertype that has the exact", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d36619f160a4a12acd00e96b539fce92ae59804"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4MzQwOQ==", "bodyText": "returnTypeChanged", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481283409", "createdAt": "2020-09-01T16:38:12Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -274,20 +274,40 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n           Iterables.concat(\n               getClassHierarchy(targetJavaClass),\n               Arrays.asList(targetJavaClass.getAllInterfaces()));\n+\n+      boolean methodWithDifferentReturnTypeFound = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d36619f160a4a12acd00e96b539fce92ae59804"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTI4Mzk0Mg==", "bodyText": "ReturnTypeChangedProblem", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481283942", "createdAt": "2020-09-01T16:39:07Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/MethodWithReturnTypeNotFoundProblem.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The {@code sourceClass} references the {@code methodSymbol}, but the {@code\n+ * methodSymbol.getClassBinaryName} has the method with different return type.\n+ */\n+class MethodWithReturnTypeNotFoundProblem extends LinkageProblem {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d36619f160a4a12acd00e96b539fce92ae59804"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09d50fc0ce4b04f8282c251091c85d50a95771ff", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/09d50fc0ce4b04f8282c251091c85d50a95771ff", "committedDate": "2020-09-01T16:48:19Z", "message": "Applied review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc188724b18d4a4edf3b1877f01d54217e570ee5", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/bc188724b18d4a4edf3b1877f01d54217e570ee5", "committedDate": "2020-09-01T16:50:29Z", "message": "Format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5OTcwNDEx", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#pullrequestreview-479970411", "createdAt": "2020-09-01T17:33:38Z", "commit": {"oid": "bc188724b18d4a4edf3b1877f01d54217e570ee5"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozMzozOFrOHLBMPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNzozNDowOVrOHLBNYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNTkwMw==", "bodyText": "actualArgumentType", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481315903", "createdAt": "2020-09-01T17:33:38Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -274,20 +274,39 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n           Iterables.concat(\n               getClassHierarchy(targetJavaClass),\n               Arrays.asList(targetJavaClass.getAllInterfaces()));\n+\n+      boolean returnTypeChanged = false;\n       for (JavaClass javaClass : typesToCheck) {\n         for (Method method : javaClass.getMethods()) {\n-          if (method.getName().equals(methodName)\n-              && method.getSignature().equals(symbol.getDescriptor())) {\n-            if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n-              return Optional.of(\n-                  new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+          if (method.getName().equals(methodName)) {\n+            String actualSignature = method.getSignature();\n+            String expectedSignature = symbol.getDescriptor();\n+            if (actualSignature.equals(expectedSignature)) {\n+              if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n+                return Optional.of(\n+                    new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+              }\n+              // The method is found and accessible. Returning no error.\n+              return Optional.empty();\n+            } else {\n+              String argumentTypeInTarget = parseArgumentTypeParts(actualSignature);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc188724b18d4a4edf3b1877f01d54217e570ee5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNjAxMA==", "bodyText": "expectedArgumentType", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481316010", "createdAt": "2020-09-01T17:33:49Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -274,20 +274,39 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n           Iterables.concat(\n               getClassHierarchy(targetJavaClass),\n               Arrays.asList(targetJavaClass.getAllInterfaces()));\n+\n+      boolean returnTypeChanged = false;\n       for (JavaClass javaClass : typesToCheck) {\n         for (Method method : javaClass.getMethods()) {\n-          if (method.getName().equals(methodName)\n-              && method.getSignature().equals(symbol.getDescriptor())) {\n-            if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n-              return Optional.of(\n-                  new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+          if (method.getName().equals(methodName)) {\n+            String actualSignature = method.getSignature();\n+            String expectedSignature = symbol.getDescriptor();\n+            if (actualSignature.equals(expectedSignature)) {\n+              if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n+                return Optional.of(\n+                    new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+              }\n+              // The method is found and accessible. Returning no error.\n+              return Optional.empty();\n+            } else {\n+              String argumentTypeInTarget = parseArgumentTypeParts(actualSignature);\n+              String argumentTypeLookingFor = parseArgumentTypeParts(expectedSignature);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc188724b18d4a4edf3b1877f01d54217e570ee5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNjE5NQ==", "bodyText": "matches", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481316195", "createdAt": "2020-09-01T17:34:09Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -274,20 +274,39 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n           Iterables.concat(\n               getClassHierarchy(targetJavaClass),\n               Arrays.asList(targetJavaClass.getAllInterfaces()));\n+\n+      boolean returnTypeChanged = false;\n       for (JavaClass javaClass : typesToCheck) {\n         for (Method method : javaClass.getMethods()) {\n-          if (method.getName().equals(methodName)\n-              && method.getSignature().equals(symbol.getDescriptor())) {\n-            if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n-              return Optional.of(\n-                  new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+          if (method.getName().equals(methodName)) {\n+            String actualSignature = method.getSignature();\n+            String expectedSignature = symbol.getDescriptor();\n+            if (actualSignature.equals(expectedSignature)) {\n+              if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n+                return Optional.of(\n+                    new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+              }\n+              // The method is found and accessible. Returning no error.\n+              return Optional.empty();\n+            } else {\n+              String argumentTypeInTarget = parseArgumentTypeParts(actualSignature);\n+              String argumentTypeLookingFor = parseArgumentTypeParts(expectedSignature);\n+              if (argumentTypeInTarget.equals(argumentTypeLookingFor)) {\n+                // Not returning result yet, because there can be another supertype that has the\n+                // exact method that match the name, argument types, and return type.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc188724b18d4a4edf3b1877f01d54217e570ee5"}, "originalPosition": 28}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0dfcf44f357cee014ca75bbcf3096b320ec478f", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/d0dfcf44f357cee014ca75bbcf3096b320ec478f", "committedDate": "2020-09-01T18:40:43Z", "message": "Merge remote-tracking branch 'origin/master' into MethodWithReturnTypeNotFoundProblem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fabd0509e55a5b75ed160b7545666c65a536ffe2", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/fabd0509e55a5b75ed160b7545666c65a536ffe2", "committedDate": "2020-09-01T18:46:04Z", "message": "ReturnTypeChangedProblem to have actual return type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56c35a35559c4a00ea0b5a5ec88e01a4892e6e7b", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/56c35a35559c4a00ea0b5a5ec88e01a4892e6e7b", "committedDate": "2020-09-01T18:47:44Z", "message": "format"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDIwNTQ1", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#pullrequestreview-480020545", "createdAt": "2020-09-01T18:45:13Z", "commit": {"oid": "bc188724b18d4a4edf3b1877f01d54217e570ee5"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0NToxM1rOHLDmbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0ODozMVrOHLDtiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NTM3NQ==", "bodyText": "Updated", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481355375", "createdAt": "2020-09-01T18:45:13Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -274,20 +274,39 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n           Iterables.concat(\n               getClassHierarchy(targetJavaClass),\n               Arrays.asList(targetJavaClass.getAllInterfaces()));\n+\n+      boolean returnTypeChanged = false;\n       for (JavaClass javaClass : typesToCheck) {\n         for (Method method : javaClass.getMethods()) {\n-          if (method.getName().equals(methodName)\n-              && method.getSignature().equals(symbol.getDescriptor())) {\n-            if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n-              return Optional.of(\n-                  new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+          if (method.getName().equals(methodName)) {\n+            String actualSignature = method.getSignature();\n+            String expectedSignature = symbol.getDescriptor();\n+            if (actualSignature.equals(expectedSignature)) {\n+              if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n+                return Optional.of(\n+                    new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+              }\n+              // The method is found and accessible. Returning no error.\n+              return Optional.empty();\n+            } else {\n+              String argumentTypeInTarget = parseArgumentTypeParts(actualSignature);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNTkwMw=="}, "originalCommit": {"oid": "bc188724b18d4a4edf3b1877f01d54217e570ee5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NTQxNg==", "bodyText": "Updated", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481355416", "createdAt": "2020-09-01T18:45:17Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -274,20 +274,39 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n           Iterables.concat(\n               getClassHierarchy(targetJavaClass),\n               Arrays.asList(targetJavaClass.getAllInterfaces()));\n+\n+      boolean returnTypeChanged = false;\n       for (JavaClass javaClass : typesToCheck) {\n         for (Method method : javaClass.getMethods()) {\n-          if (method.getName().equals(methodName)\n-              && method.getSignature().equals(symbol.getDescriptor())) {\n-            if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n-              return Optional.of(\n-                  new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+          if (method.getName().equals(methodName)) {\n+            String actualSignature = method.getSignature();\n+            String expectedSignature = symbol.getDescriptor();\n+            if (actualSignature.equals(expectedSignature)) {\n+              if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n+                return Optional.of(\n+                    new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+              }\n+              // The method is found and accessible. Returning no error.\n+              return Optional.empty();\n+            } else {\n+              String argumentTypeInTarget = parseArgumentTypeParts(actualSignature);\n+              String argumentTypeLookingFor = parseArgumentTypeParts(expectedSignature);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNjAxMA=="}, "originalCommit": {"oid": "bc188724b18d4a4edf3b1877f01d54217e570ee5"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NTUzMw==", "bodyText": "Fixed.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481355533", "createdAt": "2020-09-01T18:45:30Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -274,20 +274,39 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n           Iterables.concat(\n               getClassHierarchy(targetJavaClass),\n               Arrays.asList(targetJavaClass.getAllInterfaces()));\n+\n+      boolean returnTypeChanged = false;\n       for (JavaClass javaClass : typesToCheck) {\n         for (Method method : javaClass.getMethods()) {\n-          if (method.getName().equals(methodName)\n-              && method.getSignature().equals(symbol.getDescriptor())) {\n-            if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n-              return Optional.of(\n-                  new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+          if (method.getName().equals(methodName)) {\n+            String actualSignature = method.getSignature();\n+            String expectedSignature = symbol.getDescriptor();\n+            if (actualSignature.equals(expectedSignature)) {\n+              if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n+                return Optional.of(\n+                    new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+              }\n+              // The method is found and accessible. Returning no error.\n+              return Optional.empty();\n+            } else {\n+              String argumentTypeInTarget = parseArgumentTypeParts(actualSignature);\n+              String argumentTypeLookingFor = parseArgumentTypeParts(expectedSignature);\n+              if (argumentTypeInTarget.equals(argumentTypeLookingFor)) {\n+                // Not returning result yet, because there can be another supertype that has the\n+                // exact method that match the name, argument types, and return type.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTMxNjE5NQ=="}, "originalCommit": {"oid": "bc188724b18d4a4edf3b1877f01d54217e570ee5"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NzE5NQ==", "bodyText": "Now it tells the actual type.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481357195", "createdAt": "2020-09-01T18:48:31Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ReturnTypeChangedProblem.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The {@code sourceClass} references the {@code methodSymbol}, but the {@code\n+ * methodSymbol.getClassBinaryName} has the method with a different return type {@code\n+ * actualTypeName}.\n+ */\n+class ReturnTypeChangedProblem extends LinkageProblem {\n+  public ReturnTypeChangedProblem(\n+      ClassFile sourceClass,\n+      @Nullable ClassFile targetClass,\n+      MethodSymbol expectedMethodSymbol,\n+      String actualTypeName) {\n+    super(\n+        \"is not found. The expected return type does not match actual type \" + actualTypeName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56c35a35559c4a00ea0b5a5ec88e01a4892e6e7b"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDIzMzAx", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#pullrequestreview-480023301", "createdAt": "2020-09-01T18:49:05Z", "commit": {"oid": "56c35a35559c4a00ea0b5a5ec88e01a4892e6e7b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0OTowNVrOHLDusw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo1MDozM1rOHLDx1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NzQ5MQ==", "bodyText": "non-public", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481357491", "createdAt": "2020-09-01T18:49:05Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ReturnTypeChangedProblem.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The {@code sourceClass} references the {@code methodSymbol}, but the {@code\n+ * methodSymbol.getClassBinaryName} has the method with a different return type {@code\n+ * actualTypeName}.\n+ */\n+class ReturnTypeChangedProblem extends LinkageProblem {\n+  public ReturnTypeChangedProblem(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56c35a35559c4a00ea0b5a5ec88e01a4892e6e7b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NzgxNA==", "bodyText": "match the", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481357814", "createdAt": "2020-09-01T18:49:43Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ReturnTypeChangedProblem.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The {@code sourceClass} references the {@code methodSymbol}, but the {@code\n+ * methodSymbol.getClassBinaryName} has the method with a different return type {@code\n+ * actualTypeName}.\n+ */\n+class ReturnTypeChangedProblem extends LinkageProblem {\n+  public ReturnTypeChangedProblem(\n+      ClassFile sourceClass,\n+      @Nullable ClassFile targetClass,\n+      MethodSymbol expectedMethodSymbol,\n+      String actualTypeName) {\n+    super(\n+        \"is not found. The expected return type does not match actual type \" + actualTypeName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56c35a35559c4a00ea0b5a5ec88e01a4892e6e7b"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1ODI5Mw==", "bodyText": "{@code methodSymbol} does not exist below. {@code expectedMethodSymbol} perhaps?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481358293", "createdAt": "2020-09-01T18:50:33Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ReturnTypeChangedProblem.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The {@code sourceClass} references the {@code methodSymbol}, but the {@code", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56c35a35559c4a00ea0b5a5ec88e01a4892e6e7b"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f07a95784c1c46366ed2cb428cd80828d58d566", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/6f07a95784c1c46366ed2cb428cd80828d58d566", "committedDate": "2020-09-01T18:54:21Z", "message": "Applied review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwMDI5MDg1", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#pullrequestreview-480029085", "createdAt": "2020-09-01T18:53:45Z", "commit": {"oid": "56c35a35559c4a00ea0b5a5ec88e01a4892e6e7b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo1Mzo0NlrOHLD54Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo1Mzo1N1rOHLD7Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2MDM1Mw==", "bodyText": "Fixed.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481360353", "createdAt": "2020-09-01T18:53:46Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ReturnTypeChangedProblem.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The {@code sourceClass} references the {@code methodSymbol}, but the {@code", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1ODI5Mw=="}, "originalCommit": {"oid": "56c35a35559c4a00ea0b5a5ec88e01a4892e6e7b"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2MDQzNA==", "bodyText": "Fixed.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481360434", "createdAt": "2020-09-01T18:53:49Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ReturnTypeChangedProblem.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The {@code sourceClass} references the {@code methodSymbol}, but the {@code\n+ * methodSymbol.getClassBinaryName} has the method with a different return type {@code\n+ * actualTypeName}.\n+ */\n+class ReturnTypeChangedProblem extends LinkageProblem {\n+  public ReturnTypeChangedProblem(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NzQ5MQ=="}, "originalCommit": {"oid": "56c35a35559c4a00ea0b5a5ec88e01a4892e6e7b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2MDY1OQ==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r481360659", "createdAt": "2020-09-01T18:53:57Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ReturnTypeChangedProblem.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The {@code sourceClass} references the {@code methodSymbol}, but the {@code\n+ * methodSymbol.getClassBinaryName} has the method with a different return type {@code\n+ * actualTypeName}.\n+ */\n+class ReturnTypeChangedProblem extends LinkageProblem {\n+  public ReturnTypeChangedProblem(\n+      ClassFile sourceClass,\n+      @Nullable ClassFile targetClass,\n+      MethodSymbol expectedMethodSymbol,\n+      String actualTypeName) {\n+    super(\n+        \"is not found. The expected return type does not match actual type \" + actualTypeName,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NzgxNA=="}, "originalCommit": {"oid": "56c35a35559c4a00ea0b5a5ec88e01a4892e6e7b"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxMzExMTQ0", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#pullrequestreview-481311144", "createdAt": "2020-09-02T21:23:58Z", "commit": {"oid": "6f07a95784c1c46366ed2cb428cd80828d58d566"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMToyMzo1OFrOHMIpHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMToyMzo1OFrOHMIpHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ4NjU1Nw==", "bodyText": "This has been moved to line 290.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r482486557", "createdAt": "2020-09-02T21:23:58Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -274,20 +275,41 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n           Iterables.concat(\n               getClassHierarchy(targetJavaClass),\n               Arrays.asList(targetJavaClass.getAllInterfaces()));\n+\n+      String changedReturnTypeName = null;\n       for (JavaClass javaClass : typesToCheck) {\n         for (Method method : javaClass.getMethods()) {\n-          if (method.getName().equals(methodName)\n-              && method.getSignature().equals(symbol.getDescriptor())) {\n-            if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n-              return Optional.of(\n-                  new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+          if (method.getName().equals(methodName)) {\n+            String actualSignature = method.getSignature();\n+            String expectedSignature = symbol.getDescriptor();\n+            if (actualSignature.equals(expectedSignature)) {\n+              if (!isMemberAccessibleFrom(javaClass, method, sourceClassName)) {\n+                return Optional.of(\n+                    new InaccessibleMemberProblem(sourceClassFile, targetClassFile, symbol));\n+              }\n+              // The method is found and accessible. Returning no error.\n+              return Optional.empty();\n+            } else {\n+              String actualArgumentType = parseArgumentTypeParts(actualSignature);\n+              String expectedArgumentType = parseArgumentTypeParts(expectedSignature);\n+              if (actualArgumentType.equals(expectedArgumentType)) {\n+                // Not returning result yet, because there can be another supertype that has the\n+                // exact method that matches the name, argument types, and return type.\n+                changedReturnTypeName = Utility.methodSignatureReturnType(actualSignature);\n+              }\n             }\n-            // The method is found and accessible. Returning no error.\n-            return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f07a95784c1c46366ed2cb428cd80828d58d566"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxODcwNDUw", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#pullrequestreview-481870450", "createdAt": "2020-09-03T14:01:59Z", "commit": {"oid": "6f07a95784c1c46366ed2cb428cd80828d58d566"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDowMjowMFrOHMoFpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDowMzo0NFrOHMoKSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwMTc2NQ==", "bodyText": "changedReturnTypeName --> changedReturnType", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r483001765", "createdAt": "2020-09-03T14:02:00Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -274,20 +275,41 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n           Iterables.concat(\n               getClassHierarchy(targetJavaClass),\n               Arrays.asList(targetJavaClass.getAllInterfaces()));\n+\n+      String changedReturnTypeName = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f07a95784c1c46366ed2cb428cd80828d58d566"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwMjk1NA==", "bodyText": "actualTypeName --> actualType", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r483002954", "createdAt": "2020-09-03T14:03:44Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ReturnTypeChangedProblem.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The {@code sourceClass} references the {@code expectedMethodSymbol}, but the {@code\n+ * expectedMethodSymbol.getClassBinaryName} has the method with a different return type ({@code\n+ * actualTypeName}).\n+ */\n+class ReturnTypeChangedProblem extends LinkageProblem {\n+  ReturnTypeChangedProblem(\n+      ClassFile sourceClass,\n+      @Nullable ClassFile targetClass,\n+      MethodSymbol expectedMethodSymbol,\n+      String actualTypeName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6f07a95784c1c46366ed2cb428cd80828d58d566"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5de2e94a79249389f3daf2e95ed6c29b7bc2e1fa", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/5de2e94a79249389f3daf2e95ed6c29b7bc2e1fa", "committedDate": "2020-09-03T14:30:31Z", "message": "Applied review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxODk3Mzk0", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#pullrequestreview-481897394", "createdAt": "2020-09-03T14:28:58Z", "commit": {"oid": "6f07a95784c1c46366ed2cb428cd80828d58d566"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDoyODo1OFrOHMpTOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNDoyOTo0M1rOHMpVew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMTYyNQ==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r483021625", "createdAt": "2020-09-03T14:28:58Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ReturnTypeChangedProblem.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import javax.annotation.Nullable;\n+\n+/**\n+ * The {@code sourceClass} references the {@code expectedMethodSymbol}, but the {@code\n+ * expectedMethodSymbol.getClassBinaryName} has the method with a different return type ({@code\n+ * actualTypeName}).\n+ */\n+class ReturnTypeChangedProblem extends LinkageProblem {\n+  ReturnTypeChangedProblem(\n+      ClassFile sourceClass,\n+      @Nullable ClassFile targetClass,\n+      MethodSymbol expectedMethodSymbol,\n+      String actualTypeName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwMjk1NA=="}, "originalCommit": {"oid": "6f07a95784c1c46366ed2cb428cd80828d58d566"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAyMjIwMw==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r483022203", "createdAt": "2020-09-03T14:29:43Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -274,20 +275,41 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n           Iterables.concat(\n               getClassHierarchy(targetJavaClass),\n               Arrays.asList(targetJavaClass.getAllInterfaces()));\n+\n+      String changedReturnTypeName = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzAwMTc2NQ=="}, "originalCommit": {"oid": "6f07a95784c1c46366ed2cb428cd80828d58d566"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxOTYwOTg1", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#pullrequestreview-481960985", "createdAt": "2020-09-03T15:33:21Z", "commit": {"oid": "5de2e94a79249389f3daf2e95ed6c29b7bc2e1fa"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTozMzoyMVrOHMsQTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxNTozMzo1MlrOHMsRuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3MDAzMQ==", "bodyText": "I don't follow this comment. This is an identity transformation?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r483070031", "createdAt": "2020-09-03T15:33:21Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -304,6 +326,13 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n     }\n   }\n \n+  /** Returns the argument type parts from {@code methodDescriptor}. */\n+  private static String parseArgumentTypeParts(String methodDescriptor) {\n+    // E.g., '(Ljava/lang/String;)V' => '(Ljava/lang/String;)'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5de2e94a79249389f3daf2e95ed6c29b7bc2e1fa"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzA3MDM5Mg==", "bodyText": "would this somehow be different from parseArgumentTypes?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#discussion_r483070392", "createdAt": "2020-09-03T15:33:52Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageChecker.java", "diffHunk": "@@ -304,6 +326,13 @@ private boolean problemFilter(LinkageProblem linkageProblem) {\n     }\n   }\n \n+  /** Returns the argument type parts from {@code methodDescriptor}. */\n+  private static String parseArgumentTypeParts(String methodDescriptor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5de2e94a79249389f3daf2e95ed6c29b7bc2e1fa"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9f2a62f16396e2bf1ffc1392e576f49f33abfc0", "author": {"user": {"login": "suztomo", "name": "Tomo Suzuki"}}, "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/commit/c9f2a62f16396e2bf1ffc1392e576f49f33abfc0", "committedDate": "2020-09-03T16:02:35Z", "message": "Applied review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgyMDA1NjA1", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1629#pullrequestreview-482005605", "createdAt": "2020-09-03T16:22:21Z", "commit": {"oid": "c9f2a62f16396e2bf1ffc1392e576f49f33abfc0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1420, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}