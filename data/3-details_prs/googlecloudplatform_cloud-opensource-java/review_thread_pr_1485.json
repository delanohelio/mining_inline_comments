{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MDkyMTMz", "number": 1485, "reviewThreads": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDozODoyM1rOEIICSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoyNjowOVrOEQyJyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTU1NzIwOnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDozODoyM1rOGn5qpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDozODoyM1rOGn5qpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ5MjQ1Mg==", "bodyText": "2.6", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r444492452", "createdAt": "2020-06-23T20:38:23Z", "author": {"login": "elharo"}, "path": "verboseTree-maven-plugin/pom.xml", "diffHunk": "@@ -73,7 +73,12 @@\n     <dependency>\n       <groupId>commons-io</groupId>\n       <artifactId>commons-io</artifactId>\n-      <version>2.6</version>\n+      <version>2.2</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "481844ab2f9be8aaf8205389e430a34cf83cee30"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTYxMTY2OnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/it/graphBuilder/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDo1NDoyMlrOGn6Odw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDo1NDoyMlrOGn6Odw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUwMTYyMw==", "bodyText": "I doubt you need this.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r444501623", "createdAt": "2020-06-23T20:54:22Z", "author": {"login": "elharo"}, "path": "verboseTree-maven-plugin/src/it/graphBuilder/pom.xml", "diffHunk": "@@ -0,0 +1,103 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>org.apache.maven.its.dependency</groupId>\n+  <artifactId>graphBuilder</artifactId>\n+  <version>1.0-SNAPSHOT</version>\n+\n+  <name>GraphBuilderTest</name>\n+  <description>\n+    Tests the graphBuilder logic\n+  </description>\n+\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+  </properties>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>org.apache.maven</groupId>\n+        <artifactId>maven-model</artifactId>\n+        <version>2.0.5</version>\n+        <scope>test</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.maven</groupId>\n+      <artifactId>maven-project</artifactId>\n+      <version>2.0.6</version>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.apache.maven</groupId>\n+          <artifactId>maven-artifact</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.maven</groupId>\n+      <artifactId>maven-profile</artifactId>\n+      <version>2.0.4</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.maven</groupId>\n+      <artifactId>maven-model</artifactId>\n+      <version>2.0.7</version>\n+      <scope>runtime</scope>\n+    </dependency>\n+    <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "481844ab2f9be8aaf8205389e430a34cf83cee30"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTYxNjE1OnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDo1NToyMFrOGn6RxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDo1NToyMFrOGn6RxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUwMjQ2OA==", "bodyText": "uncomment this", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r444502468", "createdAt": "2020-06-23T20:55:20Z", "author": {"login": "elharo"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -39,12 +57,118 @@\n     @Parameter( defaultValue = \"${session}\", readonly = true, required = true )\n     protected MavenSession session;\n \n+    @Parameter\n+    private String outputFile;\n+\n+    @Component\n+    private ProjectDependenciesResolver resolver;\n+\n+    // replace Component with sisu guice named or singleton annotation\n     @Component\n     private ArtifactHandlerManager artifactHandlerManager;\n \n+    private SerializeGraph serializer;\n+\n+    private DependencyNode rootNode;\n+\n+    @Parameter( defaultValue = \"${repositorySystemSession}\" )\n+    private RepositorySystemSession repositorySystemSession;\n+\n     public void execute() throws MojoExecutionException\n     {\n         getLog().info( project.getArtifactId() );\n+        getLog().info( session.toString() );\n+\n+        try\n+        {\n+            rootNode = buildDependencyGraph();\n+        }\n+        catch ( Exception e )\n+        {\n+            // ToDo: Better error message and Exception type\n+            e.printStackTrace();\n+        }\n+\n+        // ToDo: if outputFile not null write to outputFile\n+        File file = new File( project.getBasedir().getAbsolutePath().replace( '\\\\', '/' ) + \"/target/tree.txt\" );\n+        /*SerializeGraph serializer = new SerializeGraph();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "481844ab2f9be8aaf8205389e430a34cf83cee30"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTYxODY0OnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDo1NTo1MlrOGn6TlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDo1NTo1MlrOGn6TlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUwMjkzMg==", "bodyText": "catch NullPointerException here too?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r444502932", "createdAt": "2020-06-23T20:55:52Z", "author": {"login": "elharo"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -39,12 +57,118 @@\n     @Parameter( defaultValue = \"${session}\", readonly = true, required = true )\n     protected MavenSession session;\n \n+    @Parameter\n+    private String outputFile;\n+\n+    @Component\n+    private ProjectDependenciesResolver resolver;\n+\n+    // replace Component with sisu guice named or singleton annotation\n     @Component\n     private ArtifactHandlerManager artifactHandlerManager;\n \n+    private SerializeGraph serializer;\n+\n+    private DependencyNode rootNode;\n+\n+    @Parameter( defaultValue = \"${repositorySystemSession}\" )\n+    private RepositorySystemSession repositorySystemSession;\n+\n     public void execute() throws MojoExecutionException\n     {\n         getLog().info( project.getArtifactId() );\n+        getLog().info( session.toString() );\n+\n+        try\n+        {\n+            rootNode = buildDependencyGraph();\n+        }\n+        catch ( Exception e )\n+        {\n+            // ToDo: Better error message and Exception type\n+            e.printStackTrace();\n+        }\n+\n+        // ToDo: if outputFile not null write to outputFile\n+        File file = new File( project.getBasedir().getAbsolutePath().replace( '\\\\', '/' ) + \"/target/tree.txt\" );\n+        /*SerializeGraph serializer = new SerializeGraph();\n+        String serialized = serializer.serialize( rootNode );*/\n+        try\n+        {\n+            write( file, rootNode.toString() + rootNode.getChildren().get( 0 ).getDependency().getScope() );\n+            /*write( file, \"why\" + rootNode.toString() + \" \" + rootNode.getChildren().get( 0 ).toString()\n+            + \" \" + rootNode.getChildren().get( 1 ).toString() + \"\\n\" +\n+                    rootNode.getChildren().get( 2 ).toString() + \" \" + rootNode.getChildren().get( 3 ).toString()\n+            + \" \" + rootNode.getChildren().get( 0 ).getChildren().size()\n+                    + \" \" + rootNode.getChildren().get( 1 ).getChildren().size()\n+                    + \" \" + rootNode.getChildren().get( 2 ).getChildren().size()\n+                    + \" \" + rootNode.getChildren().get( 3 ).getChildren().size());*/\n+            // write(file, serialized);\n+        }\n+        catch ( IOException e )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "481844ab2f9be8aaf8205389e430a34cf83cee30"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTYyMTE5OnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMDo1NjoyNVrOGn6VgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDowOTowN1rOGoT1mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUwMzQyNQ==", "bodyText": "change this to a more specific exception", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r444503425", "createdAt": "2020-06-23T20:56:25Z", "author": {"login": "elharo"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -39,12 +57,118 @@\n     @Parameter( defaultValue = \"${session}\", readonly = true, required = true )\n     protected MavenSession session;\n \n+    @Parameter\n+    private String outputFile;\n+\n+    @Component\n+    private ProjectDependenciesResolver resolver;\n+\n+    // replace Component with sisu guice named or singleton annotation\n     @Component\n     private ArtifactHandlerManager artifactHandlerManager;\n \n+    private SerializeGraph serializer;\n+\n+    private DependencyNode rootNode;\n+\n+    @Parameter( defaultValue = \"${repositorySystemSession}\" )\n+    private RepositorySystemSession repositorySystemSession;\n+\n     public void execute() throws MojoExecutionException\n     {\n         getLog().info( project.getArtifactId() );\n+        getLog().info( session.toString() );\n+\n+        try\n+        {\n+            rootNode = buildDependencyGraph();\n+        }\n+        catch ( Exception e )\n+        {\n+            // ToDo: Better error message and Exception type\n+            e.printStackTrace();\n+        }\n+\n+        // ToDo: if outputFile not null write to outputFile\n+        File file = new File( project.getBasedir().getAbsolutePath().replace( '\\\\', '/' ) + \"/target/tree.txt\" );\n+        /*SerializeGraph serializer = new SerializeGraph();\n+        String serialized = serializer.serialize( rootNode );*/\n+        try\n+        {\n+            write( file, rootNode.toString() + rootNode.getChildren().get( 0 ).getDependency().getScope() );\n+            /*write( file, \"why\" + rootNode.toString() + \" \" + rootNode.getChildren().get( 0 ).toString()\n+            + \" \" + rootNode.getChildren().get( 1 ).toString() + \"\\n\" +\n+                    rootNode.getChildren().get( 2 ).toString() + \" \" + rootNode.getChildren().get( 3 ).toString()\n+            + \" \" + rootNode.getChildren().get( 0 ).getChildren().size()\n+                    + \" \" + rootNode.getChildren().get( 1 ).getChildren().size()\n+                    + \" \" + rootNode.getChildren().get( 2 ).getChildren().size()\n+                    + \" \" + rootNode.getChildren().get( 3 ).getChildren().size());*/\n+            // write(file, serialized);\n+        }\n+        catch ( IOException e )\n+        {\n+            e.printStackTrace();\n+            getLog().error( \"Failed to write to file:\" + file.getAbsolutePath() );\n+        }\n+    }\n+\n+    public DependencyNode buildDependencyGraph() throws Exception\n+    {\n+        // adapting the dependency-plugin code\n+        ProjectBuildingRequest buildingRequest =\n+                new DefaultProjectBuildingRequest( session.getProjectBuildingRequest() );\n+\n+        buildingRequest.setProject( project );\n+\n+        // need to configure the repositorySystemSession\n+\n+        // dependency plugin code that isn't needed below\n+        // dependencyGraphBuilder.buildDependencyGraph( buildingRequest, artifactFilter, reactorProjects );\n+\n+        // now adapting the dependency-tree defaultDependencyGraphBuilder and maven31Code\n+\n+        final DependencyResolutionRequest request = new DefaultDependencyResolutionRequest();\n+        request.setMavenProject( project );\n+        request.setRepositorySession( session.getRepositorySession() );\n+        // request.setRepositorySession( repositorySystemSession );\n+\n+        final DependencyResolutionResult result = resolveDependencies( request, null );\n+        DependencyNode graphRoot = result.getDependencyGraph();\n+\n+\n+        return graphRoot;\n+    }\n+\n+\n+    public DependencyNode getDependencyGraph()\n+    {\n+        return rootNode;\n+    }\n+\n+\n+    private DependencyResolutionResult resolveDependencies( DependencyResolutionRequest request,\n+                                                            Collection<MavenProject> reactorProjects )\n+            throws Exception\n+    {\n+        try\n+        {\n+            return resolver.resolve( request );\n+        }\n+        catch ( DependencyResolutionException e )\n+        {\n+            if ( reactorProjects == null )\n+            {\n+                throw new Exception( \"Could not resolve following dependencies: \"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "481844ab2f9be8aaf8205389e430a34cf83cee30"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUyMDUyOQ==", "bodyText": "Should I copy the DependencyGraphBuilderException in the maven-dependency-tree plugin and use that?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r444520529", "createdAt": "2020-06-23T21:31:27Z", "author": {"login": "ian-lavallee"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -39,12 +57,118 @@\n     @Parameter( defaultValue = \"${session}\", readonly = true, required = true )\n     protected MavenSession session;\n \n+    @Parameter\n+    private String outputFile;\n+\n+    @Component\n+    private ProjectDependenciesResolver resolver;\n+\n+    // replace Component with sisu guice named or singleton annotation\n     @Component\n     private ArtifactHandlerManager artifactHandlerManager;\n \n+    private SerializeGraph serializer;\n+\n+    private DependencyNode rootNode;\n+\n+    @Parameter( defaultValue = \"${repositorySystemSession}\" )\n+    private RepositorySystemSession repositorySystemSession;\n+\n     public void execute() throws MojoExecutionException\n     {\n         getLog().info( project.getArtifactId() );\n+        getLog().info( session.toString() );\n+\n+        try\n+        {\n+            rootNode = buildDependencyGraph();\n+        }\n+        catch ( Exception e )\n+        {\n+            // ToDo: Better error message and Exception type\n+            e.printStackTrace();\n+        }\n+\n+        // ToDo: if outputFile not null write to outputFile\n+        File file = new File( project.getBasedir().getAbsolutePath().replace( '\\\\', '/' ) + \"/target/tree.txt\" );\n+        /*SerializeGraph serializer = new SerializeGraph();\n+        String serialized = serializer.serialize( rootNode );*/\n+        try\n+        {\n+            write( file, rootNode.toString() + rootNode.getChildren().get( 0 ).getDependency().getScope() );\n+            /*write( file, \"why\" + rootNode.toString() + \" \" + rootNode.getChildren().get( 0 ).toString()\n+            + \" \" + rootNode.getChildren().get( 1 ).toString() + \"\\n\" +\n+                    rootNode.getChildren().get( 2 ).toString() + \" \" + rootNode.getChildren().get( 3 ).toString()\n+            + \" \" + rootNode.getChildren().get( 0 ).getChildren().size()\n+                    + \" \" + rootNode.getChildren().get( 1 ).getChildren().size()\n+                    + \" \" + rootNode.getChildren().get( 2 ).getChildren().size()\n+                    + \" \" + rootNode.getChildren().get( 3 ).getChildren().size());*/\n+            // write(file, serialized);\n+        }\n+        catch ( IOException e )\n+        {\n+            e.printStackTrace();\n+            getLog().error( \"Failed to write to file:\" + file.getAbsolutePath() );\n+        }\n+    }\n+\n+    public DependencyNode buildDependencyGraph() throws Exception\n+    {\n+        // adapting the dependency-plugin code\n+        ProjectBuildingRequest buildingRequest =\n+                new DefaultProjectBuildingRequest( session.getProjectBuildingRequest() );\n+\n+        buildingRequest.setProject( project );\n+\n+        // need to configure the repositorySystemSession\n+\n+        // dependency plugin code that isn't needed below\n+        // dependencyGraphBuilder.buildDependencyGraph( buildingRequest, artifactFilter, reactorProjects );\n+\n+        // now adapting the dependency-tree defaultDependencyGraphBuilder and maven31Code\n+\n+        final DependencyResolutionRequest request = new DefaultDependencyResolutionRequest();\n+        request.setMavenProject( project );\n+        request.setRepositorySession( session.getRepositorySession() );\n+        // request.setRepositorySession( repositorySystemSession );\n+\n+        final DependencyResolutionResult result = resolveDependencies( request, null );\n+        DependencyNode graphRoot = result.getDependencyGraph();\n+\n+\n+        return graphRoot;\n+    }\n+\n+\n+    public DependencyNode getDependencyGraph()\n+    {\n+        return rootNode;\n+    }\n+\n+\n+    private DependencyResolutionResult resolveDependencies( DependencyResolutionRequest request,\n+                                                            Collection<MavenProject> reactorProjects )\n+            throws Exception\n+    {\n+        try\n+        {\n+            return resolver.resolve( request );\n+        }\n+        catch ( DependencyResolutionException e )\n+        {\n+            if ( reactorProjects == null )\n+            {\n+                throw new Exception( \"Could not resolve following dependencies: \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUwMzQyNQ=="}, "originalCommit": {"oid": "481844ab2f9be8aaf8205389e430a34cf83cee30"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyMTI0Mw==", "bodyText": "DependencyResolutionException is probably what you need here", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r444921243", "createdAt": "2020-06-24T14:09:07Z", "author": {"login": "elharo"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -39,12 +57,118 @@\n     @Parameter( defaultValue = \"${session}\", readonly = true, required = true )\n     protected MavenSession session;\n \n+    @Parameter\n+    private String outputFile;\n+\n+    @Component\n+    private ProjectDependenciesResolver resolver;\n+\n+    // replace Component with sisu guice named or singleton annotation\n     @Component\n     private ArtifactHandlerManager artifactHandlerManager;\n \n+    private SerializeGraph serializer;\n+\n+    private DependencyNode rootNode;\n+\n+    @Parameter( defaultValue = \"${repositorySystemSession}\" )\n+    private RepositorySystemSession repositorySystemSession;\n+\n     public void execute() throws MojoExecutionException\n     {\n         getLog().info( project.getArtifactId() );\n+        getLog().info( session.toString() );\n+\n+        try\n+        {\n+            rootNode = buildDependencyGraph();\n+        }\n+        catch ( Exception e )\n+        {\n+            // ToDo: Better error message and Exception type\n+            e.printStackTrace();\n+        }\n+\n+        // ToDo: if outputFile not null write to outputFile\n+        File file = new File( project.getBasedir().getAbsolutePath().replace( '\\\\', '/' ) + \"/target/tree.txt\" );\n+        /*SerializeGraph serializer = new SerializeGraph();\n+        String serialized = serializer.serialize( rootNode );*/\n+        try\n+        {\n+            write( file, rootNode.toString() + rootNode.getChildren().get( 0 ).getDependency().getScope() );\n+            /*write( file, \"why\" + rootNode.toString() + \" \" + rootNode.getChildren().get( 0 ).toString()\n+            + \" \" + rootNode.getChildren().get( 1 ).toString() + \"\\n\" +\n+                    rootNode.getChildren().get( 2 ).toString() + \" \" + rootNode.getChildren().get( 3 ).toString()\n+            + \" \" + rootNode.getChildren().get( 0 ).getChildren().size()\n+                    + \" \" + rootNode.getChildren().get( 1 ).getChildren().size()\n+                    + \" \" + rootNode.getChildren().get( 2 ).getChildren().size()\n+                    + \" \" + rootNode.getChildren().get( 3 ).getChildren().size());*/\n+            // write(file, serialized);\n+        }\n+        catch ( IOException e )\n+        {\n+            e.printStackTrace();\n+            getLog().error( \"Failed to write to file:\" + file.getAbsolutePath() );\n+        }\n+    }\n+\n+    public DependencyNode buildDependencyGraph() throws Exception\n+    {\n+        // adapting the dependency-plugin code\n+        ProjectBuildingRequest buildingRequest =\n+                new DefaultProjectBuildingRequest( session.getProjectBuildingRequest() );\n+\n+        buildingRequest.setProject( project );\n+\n+        // need to configure the repositorySystemSession\n+\n+        // dependency plugin code that isn't needed below\n+        // dependencyGraphBuilder.buildDependencyGraph( buildingRequest, artifactFilter, reactorProjects );\n+\n+        // now adapting the dependency-tree defaultDependencyGraphBuilder and maven31Code\n+\n+        final DependencyResolutionRequest request = new DefaultDependencyResolutionRequest();\n+        request.setMavenProject( project );\n+        request.setRepositorySession( session.getRepositorySession() );\n+        // request.setRepositorySession( repositorySystemSession );\n+\n+        final DependencyResolutionResult result = resolveDependencies( request, null );\n+        DependencyNode graphRoot = result.getDependencyGraph();\n+\n+\n+        return graphRoot;\n+    }\n+\n+\n+    public DependencyNode getDependencyGraph()\n+    {\n+        return rootNode;\n+    }\n+\n+\n+    private DependencyResolutionResult resolveDependencies( DependencyResolutionRequest request,\n+                                                            Collection<MavenProject> reactorProjects )\n+            throws Exception\n+    {\n+        try\n+        {\n+            return resolver.resolve( request );\n+        }\n+        catch ( DependencyResolutionException e )\n+        {\n+            if ( reactorProjects == null )\n+            {\n+                throw new Exception( \"Could not resolve following dependencies: \"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDUwMzQyNQ=="}, "originalCommit": {"oid": "481844ab2f9be8aaf8205389e430a34cf83cee30"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjI0ODc3OnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDowNzo1MlrOGoTyYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDowNzo1MlrOGoTyYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyMDQxNg==", "bodyText": "you should almost never have to catch a generic Exception. See Chapter 10 of Effective Java.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r444920416", "createdAt": "2020-06-24T14:07:52Z", "author": {"login": "elharo"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -39,12 +58,119 @@\n     @Parameter( defaultValue = \"${session}\", readonly = true, required = true )\n     protected MavenSession session;\n \n+    @Parameter\n+    private String outputFile;\n+\n+    @Component\n+    private ProjectDependenciesResolver resolver;\n+\n+    // replace Component with sisu guice named or singleton annotation\n     @Component\n     private ArtifactHandlerManager artifactHandlerManager;\n \n+    private SerializeGraph serializer;\n+\n+    private DependencyNode rootNode;\n+\n+    @Parameter( defaultValue = \"${repositorySystemSession}\" )\n+    private RepositorySystemSession repositorySystemSession;\n+\n     public void execute() throws MojoExecutionException\n     {\n         getLog().info( project.getArtifactId() );\n+        getLog().info( session.toString() );\n+\n+        try\n+        {\n+            rootNode = buildDependencyGraph();\n+        }\n+        catch ( Exception e )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e7035d0f4eb974230062ed634eb5e50a4268235"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjI2MjI2OnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/test/java/org/apache/maven/dependency/graph/DependencyGraphBuilderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoxMTowMFrOGoT60Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoxMTowMFrOGoT60Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyMjU3Nw==", "bodyText": "try not to include commented code in PRs. It all needs to be removed or uncommented before this can be merged.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r444922577", "createdAt": "2020-06-24T14:11:00Z", "author": {"login": "elharo"}, "path": "verboseTree-maven-plugin/src/test/java/org/apache/maven/dependency/graph/DependencyGraphBuilderTest.java", "diffHunk": "@@ -17,14 +17,23 @@\n \n package org.apache.maven.dependency.graph;\n \n-import org.apache.maven.artifact.Artifact;\n-import org.apache.maven.artifact.DefaultArtifact;\n+import org.apache.maven.artifact.handler.ArtifactHandler;\n+import org.apache.maven.artifact.handler.DefaultArtifactHandler;\n import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n import org.apache.maven.execution.MavenSession;\n import org.apache.maven.plugin.testing.AbstractMojoTestCase;\n import org.apache.maven.project.MavenProject;\n import org.eclipse.aether.DefaultRepositorySystemSession;\n+// doesn't work with maven project import org.eclipse.aether.artifact.Artifact;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e7035d0f4eb974230062ed634eb5e50a4268235"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjI2Njg4OnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/tree.txt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoxMjowNVrOGoT94Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoxMjowNVrOGoT94Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkyMzM2MQ==", "bodyText": "Let's try and get the locally specific paths out of this PR.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r444923361", "createdAt": "2020-06-24T14:12:05Z", "author": {"login": "elharo"}, "path": "verboseTree-maven-plugin/tree.txt", "diffHunk": "@@ -0,0 +1 @@\n+:\\Users\\ianla\\Maven\\cloud-opensource-java\\verboseTree-maven-plugin", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e7035d0f4eb974230062ed634eb5e50a4268235"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzgzMTkzOnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/RepositoryUtility.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDozNDozM1rOGpK04Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDozNDozM1rOGpK04Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMjE3Nw==", "bodyText": "needs more space", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r445822177", "createdAt": "2020-06-25T20:34:33Z", "author": {"login": "elharo"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/RepositoryUtility.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+import org.apache.maven.execution.DefaultMavenExecutionRequest;\n+import org.apache.maven.execution.MavenExecutionRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.ProjectBuilder;\n+import org.apache.maven.project.ProjectBuildingException;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.project.ProjectBuildingResult;\n+import org.apache.maven.repository.internal.MavenRepositorySystemUtils;\n+import org.codehaus.plexus.ContainerConfiguration;\n+import org.codehaus.plexus.DefaultContainerConfiguration;\n+import org.codehaus.plexus.DefaultPlexusContainer;\n+import org.codehaus.plexus.PlexusConstants;\n+import org.codehaus.plexus.PlexusContainer;\n+import org.codehaus.plexus.PlexusContainerException;\n+import org.codehaus.plexus.classworlds.ClassWorld;\n+import org.codehaus.plexus.component.repository.exception.ComponentLookupException;\n+import org.eclipse.aether.DefaultRepositorySystemSession;\n+import org.eclipse.aether.RepositorySystem;\n+import org.eclipse.aether.RepositorySystemSession;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.artifact.DefaultArtifact;\n+import org.eclipse.aether.collection.DependencySelector;\n+import org.eclipse.aether.connector.basic.BasicRepositoryConnectorFactory;\n+import org.eclipse.aether.impl.DefaultServiceLocator;\n+import org.eclipse.aether.repository.LocalRepository;\n+import org.eclipse.aether.repository.RemoteRepository;\n+import org.eclipse.aether.resolution.VersionRangeRequest;\n+import org.eclipse.aether.resolution.VersionRangeResolutionException;\n+import org.eclipse.aether.resolution.VersionRangeResult;\n+import org.eclipse.aether.spi.connector.RepositoryConnectorFactory;\n+import org.eclipse.aether.spi.connector.transport.TransporterFactory;\n+import org.eclipse.aether.transport.file.FileTransporterFactory;\n+import org.eclipse.aether.transport.http.HttpTransporterFactory;\n+import org.eclipse.aether.util.graph.selector.AndDependencySelector;\n+import org.eclipse.aether.util.graph.selector.ExclusionDependencySelector;\n+import org.eclipse.aether.util.graph.selector.OptionalDependencySelector;\n+import org.eclipse.aether.util.graph.selector.ScopeDependencySelector;\n+import org.eclipse.aether.util.graph.transformer.ChainedDependencyGraphTransformer;\n+import org.eclipse.aether.util.graph.transformer.JavaDependencyContextRefiner;\n+import org.eclipse.aether.version.Version;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+\n+/**\n+ * Aether initialization. This is based on Apache Maven Resolver 1.4.2 or later.\n+ * There are many other versions of Aether from Sonatype and the Eclipse\n+ * Project, but this is the current one.\n+ */\n+public final class RepositoryUtility\n+{\n+\n+  public static final RemoteRepository CENTRAL = new RemoteRepository.Builder( \"central\", \"default\",\n+          \"https://repo1.maven.org/maven2/\" ).build();\n+\n+  // DefaultTransporterProvider.newTransporter checks these transporters\n+  private static final Set<String> ALLOWED_REPOSITORY_URL_SCHEMES = new HashSet<String>(\n+          Arrays.asList( \"file\", \"http\", \"https\" ) );\n+\n+  private RepositoryUtility() {}\n+\n+  /**\n+   * Creates a new system configured for file and HTTP repository resolution.\n+   */\n+  public static RepositorySystem newRepositorySystem() {\n+    DefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();\n+    locator.addService(RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class);\n+    locator.addService(TransporterFactory.class, FileTransporterFactory.class);\n+    locator.addService(TransporterFactory.class, HttpTransporterFactory.class);\n+  \n+    return locator.getService(RepositorySystem.class);\n+  }\n+\n+  //@VisibleForTesting\n+  static DefaultRepositorySystemSession createDefaultRepositorySystemSession(\n+      RepositorySystem system) {\n+    DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n+    LocalRepository localRepository = new LocalRepository(findLocalRepository());\n+    session.setLocalRepositoryManager(system.newLocalRepositoryManager(session, localRepository));\n+    return session;\n+  }\n+\n+  /**\n+   * Opens a new Maven repository session that looks for the local repository in the\n+   * customary ~/.m2 directory. If not found, it creates an initially empty repository in\n+   * a temporary location.\n+   */\n+  public static DefaultRepositorySystemSession newSession(RepositorySystem system) {\n+    DefaultRepositorySystemSession session = createDefaultRepositorySystemSession(system);\n+    return session;\n+  }\n+\n+  /**\n+   * Open a new Maven repository session for full dependency graph resolution.\n+   *\n+   * @see {@link DependencyGraphBuilder}\n+   */\n+  static DefaultRepositorySystemSession newSessionForFullDependency(RepositorySystem system) {\n+    // This combination of DependencySelector comes from the default specified in\n+    // `MavenRepositorySystemUtils.newSession`.\n+    // LinkageChecker needs to include 'provided'-scope and optional dependencies.\n+    DependencySelector dependencySelector =\n+        new AndDependencySelector(\n+            // ScopeDependencySelector takes exclusions. 'Provided' scope is not here to avoid\n+            // false positive in LinkageChecker.\n+            new ScopeDependencySelector(\"test\"),\n+            new ExclusionDependencySelector(),\n+            new FilteringZipDependencySelector());\n+    \n+    return newSession(system, dependencySelector);\n+  }\n+\n+  private static DefaultRepositorySystemSession newSession(\n+      RepositorySystem system, DependencySelector dependencySelector) {\n+    DefaultRepositorySystemSession session = createDefaultRepositorySystemSession(system);\n+    session.setDependencySelector(dependencySelector);\n+\n+    // By default, Maven's MavenRepositorySystemUtils.newSession() returns a session with\n+    // ChainedDependencyGraphTransformer(ConflictResolver(...), JavaDependencyContextRefiner()).\n+    // Because the full dependency graph does not resolve conflicts of versions, this session does\n+    // not use ConflictResolver.\n+    session.setDependencyGraphTransformer(\n+        new ChainedDependencyGraphTransformer(\n+            new CycleBreakerGraphTransformer(), // Avoids StackOverflowError\n+            new JavaDependencyContextRefiner()));\n+\n+    // No dependency management in the full dependency graph\n+    session.setDependencyManager(null);\n+\n+    return session;\n+  }\n+  \n+  static DefaultRepositorySystemSession newSessionForVerboseDependency(RepositorySystem system) {\n+    DependencySelector dependencySelector =\n+        new AndDependencySelector(\n+            // ScopeDependencySelector takes exclusions. 'Provided' scope is not here to avoid\n+            // false positive in LinkageChecker.\n+            new ScopeDependencySelector(\"test\"),\n+            new OptionalDependencySelector(),\n+            new ExclusionDependencySelector(),\n+            new FilteringZipDependencySelector());\n+    \n+    return newSession(system, dependencySelector);\n+  }\n+\n+  private static String findLocalRepository() {\n+    // TODO is there Maven code for this?\n+    Path home = Paths.get(System.getProperty(\"user.home\"));\n+    Path localRepo = home.resolve(\".m2\").resolve(\"repository\");\n+    if (Files.isDirectory(localRepo)) {\n+      return localRepo.toAbsolutePath().toString();\n+    } else {\n+      return makeTemporaryLocalRepository(); \n+   }\n+  }\n+\n+  private static String makeTemporaryLocalRepository() {\n+    try {\n+      File temporaryDirectory = Files.createTempDirectory(\"m2\").toFile();\n+      temporaryDirectory.deleteOnExit();\n+      return temporaryDirectory.getAbsolutePath();\n+    } catch (IOException ex) {\n+      return null;\n+    }\n+  }\n+\n+  static MavenProject createMavenProject(Path pomFile, RepositorySystemSession session)\n+      throws MavenRepositoryException {\n+    // MavenCli's way to instantiate PlexusContainer\n+    ClassWorld classWorld =\n+        new ClassWorld(\"plexus.core\", Thread.currentThread().getContextClassLoader());\n+    ContainerConfiguration containerConfiguration =\n+        new DefaultContainerConfiguration()\n+            .setClassWorld(classWorld)\n+            .setRealm(classWorld.getClassRealm(\"plexus.core\"))\n+            .setClassPathScanning(PlexusConstants.SCANNING_INDEX)\n+            .setAutoWiring(true)\n+            .setJSR250Lifecycle(true)\n+            .setName(\"linkage-checker\");\n+    try {\n+      PlexusContainer container = new DefaultPlexusContainer(containerConfiguration);\n+\n+      MavenExecutionRequest mavenExecutionRequest = new DefaultMavenExecutionRequest();\n+      ProjectBuildingRequest projectBuildingRequest =\n+          mavenExecutionRequest.getProjectBuildingRequest();\n+\n+      projectBuildingRequest.setRepositorySession(session);\n+\n+      // Profile activation needs properties such as JDK version\n+      Properties properties = new Properties(); // allowing duplicate entries\n+      properties.putAll(projectBuildingRequest.getSystemProperties());\n+      properties.putAll(OsProperties.detectOsProperties());\n+      properties.putAll(System.getProperties());\n+      projectBuildingRequest.setSystemProperties(properties);\n+\n+      ProjectBuilder projectBuilder = container.lookup(ProjectBuilder.class);\n+      ProjectBuildingResult projectBuildingResult =\n+          projectBuilder.build(pomFile.toFile(), projectBuildingRequest);\n+      return projectBuildingResult.getProject();\n+    } catch (PlexusContainerException | ComponentLookupException | ProjectBuildingException ex) {\n+      throw new MavenRepositoryException(ex);\n+    }\n+  }\n+\n+  /**\n+   * Returns Maven repository specified as {@code mavenRepositoryUrl}, after validating the syntax\n+   * of the URL.\n+   *\n+   * @throws IllegalArgumentException if the URL is malformed for a Maven repository\n+   */\n+  public static RemoteRepository mavenRepositoryFromUrl(String mavenRepositoryUrl) {\n+    try {\n+      // Because the protocol is not an empty string (checked below), this URI is absolute.\n+      new URI(mavenRepositoryUrl);\n+    } catch (URISyntaxException ex) {\n+      throw new IllegalArgumentException(\"Invalid URL syntax: \" + mavenRepositoryUrl);\n+    }\n+\n+    RemoteRepository repository =\n+        new RemoteRepository.Builder(null, \"default\", mavenRepositoryUrl).build();\n+\n+    /*checkArgument(\n+        ALLOWED_REPOSITORY_URL_SCHEMES.contains(repository.getProtocol()),\n+        \"Scheme: '%s' is not in %s\",\n+        repository.getProtocol(),\n+        ALLOWED_REPOSITORY_URL_SCHEMES);*/\n+    return repository;\n+  }\n+\n+  private static VersionRangeResult findVersionRange(\n+      RepositorySystem repositorySystem,\n+      RepositorySystemSession session,\n+      String groupId,\n+      String artifactId)\n+      throws MavenRepositoryException {\n+\n+    Artifact artifactWithVersionRange = new DefaultArtifact(groupId, artifactId, null, \"(0,]\");\n+    VersionRangeRequest request =\n+        new VersionRangeRequest(\n+            artifactWithVersionRange, Arrays.asList( RepositoryUtility.CENTRAL ), null);\n+\n+    try {\n+      return repositorySystem.resolveVersionRange(session, request);\n+    } catch (VersionRangeResolutionException ex) {\n+      throw new MavenRepositoryException(ex);\n+    }\n+  }\n+\n+  /** Returns the highest version for {@code groupId:artifactId} in {@code repositorySystem}. */\n+  //@VisibleForTesting\n+  static String findHighestVersion(\n+      RepositorySystem repositorySystem,\n+      RepositorySystemSession session,\n+      String groupId,\n+      String artifactId)\n+      throws MavenRepositoryException {\n+    return findVersionRange(repositorySystem, session, groupId, artifactId)\n+        .getHighestVersion()\n+        .toString();\n+  }\n+\n+  /**\n+   * Returns list of versions available for {@code groupId:artifactId} in {@code repositorySystem}.\n+   * The returned list is in ascending order with regard to {@link\n+   * org.eclipse.aether.util.version.GenericVersionScheme}; the highest version comes at last.\n+   */\n+  public static List<String> findVersions(\n+      RepositorySystem repositorySystem, String groupId, String artifactId)\n+      throws MavenRepositoryException {\n+    RepositorySystemSession session = RepositoryUtility.newSession(repositorySystem);\n+    // getVersions returns a list in ascending order\n+    List<Version> versions = new ArrayList<Version>();\n+    List<String> versionStrings = new ArrayList<String>();\n+\n+    versions = findVersionRange(repositorySystem, session, groupId, artifactId).getVersions();\n+\n+    for(Version version : versions)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8dc900f9eef135d47c373df78ac0e5a73423bd3"}, "originalPosition": 307}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzgzMjgzOnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/RepositoryUtility.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDozNDo0NlrOGpK1Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDozNDo0NlrOGpK1Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMjMwNg==", "bodyText": "delete the comment", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r445822306", "createdAt": "2020-06-25T20:34:46Z", "author": {"login": "elharo"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/RepositoryUtility.java", "diffHunk": "@@ -0,0 +1,332 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+import org.apache.maven.execution.DefaultMavenExecutionRequest;\n+import org.apache.maven.execution.MavenExecutionRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.ProjectBuilder;\n+import org.apache.maven.project.ProjectBuildingException;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.project.ProjectBuildingResult;\n+import org.apache.maven.repository.internal.MavenRepositorySystemUtils;\n+import org.codehaus.plexus.ContainerConfiguration;\n+import org.codehaus.plexus.DefaultContainerConfiguration;\n+import org.codehaus.plexus.DefaultPlexusContainer;\n+import org.codehaus.plexus.PlexusConstants;\n+import org.codehaus.plexus.PlexusContainer;\n+import org.codehaus.plexus.PlexusContainerException;\n+import org.codehaus.plexus.classworlds.ClassWorld;\n+import org.codehaus.plexus.component.repository.exception.ComponentLookupException;\n+import org.eclipse.aether.DefaultRepositorySystemSession;\n+import org.eclipse.aether.RepositorySystem;\n+import org.eclipse.aether.RepositorySystemSession;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.artifact.DefaultArtifact;\n+import org.eclipse.aether.collection.DependencySelector;\n+import org.eclipse.aether.connector.basic.BasicRepositoryConnectorFactory;\n+import org.eclipse.aether.impl.DefaultServiceLocator;\n+import org.eclipse.aether.repository.LocalRepository;\n+import org.eclipse.aether.repository.RemoteRepository;\n+import org.eclipse.aether.resolution.VersionRangeRequest;\n+import org.eclipse.aether.resolution.VersionRangeResolutionException;\n+import org.eclipse.aether.resolution.VersionRangeResult;\n+import org.eclipse.aether.spi.connector.RepositoryConnectorFactory;\n+import org.eclipse.aether.spi.connector.transport.TransporterFactory;\n+import org.eclipse.aether.transport.file.FileTransporterFactory;\n+import org.eclipse.aether.transport.http.HttpTransporterFactory;\n+import org.eclipse.aether.util.graph.selector.AndDependencySelector;\n+import org.eclipse.aether.util.graph.selector.ExclusionDependencySelector;\n+import org.eclipse.aether.util.graph.selector.OptionalDependencySelector;\n+import org.eclipse.aether.util.graph.selector.ScopeDependencySelector;\n+import org.eclipse.aether.util.graph.transformer.ChainedDependencyGraphTransformer;\n+import org.eclipse.aether.util.graph.transformer.JavaDependencyContextRefiner;\n+import org.eclipse.aether.version.Version;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+\n+/**\n+ * Aether initialization. This is based on Apache Maven Resolver 1.4.2 or later.\n+ * There are many other versions of Aether from Sonatype and the Eclipse\n+ * Project, but this is the current one.\n+ */\n+public final class RepositoryUtility\n+{\n+\n+  public static final RemoteRepository CENTRAL = new RemoteRepository.Builder( \"central\", \"default\",\n+          \"https://repo1.maven.org/maven2/\" ).build();\n+\n+  // DefaultTransporterProvider.newTransporter checks these transporters\n+  private static final Set<String> ALLOWED_REPOSITORY_URL_SCHEMES = new HashSet<String>(\n+          Arrays.asList( \"file\", \"http\", \"https\" ) );\n+\n+  private RepositoryUtility() {}\n+\n+  /**\n+   * Creates a new system configured for file and HTTP repository resolution.\n+   */\n+  public static RepositorySystem newRepositorySystem() {\n+    DefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();\n+    locator.addService(RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class);\n+    locator.addService(TransporterFactory.class, FileTransporterFactory.class);\n+    locator.addService(TransporterFactory.class, HttpTransporterFactory.class);\n+  \n+    return locator.getService(RepositorySystem.class);\n+  }\n+\n+  //@VisibleForTesting\n+  static DefaultRepositorySystemSession createDefaultRepositorySystemSession(\n+      RepositorySystem system) {\n+    DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n+    LocalRepository localRepository = new LocalRepository(findLocalRepository());\n+    session.setLocalRepositoryManager(system.newLocalRepositoryManager(session, localRepository));\n+    return session;\n+  }\n+\n+  /**\n+   * Opens a new Maven repository session that looks for the local repository in the\n+   * customary ~/.m2 directory. If not found, it creates an initially empty repository in\n+   * a temporary location.\n+   */\n+  public static DefaultRepositorySystemSession newSession(RepositorySystem system) {\n+    DefaultRepositorySystemSession session = createDefaultRepositorySystemSession(system);\n+    return session;\n+  }\n+\n+  /**\n+   * Open a new Maven repository session for full dependency graph resolution.\n+   *\n+   * @see {@link DependencyGraphBuilder}\n+   */\n+  static DefaultRepositorySystemSession newSessionForFullDependency(RepositorySystem system) {\n+    // This combination of DependencySelector comes from the default specified in\n+    // `MavenRepositorySystemUtils.newSession`.\n+    // LinkageChecker needs to include 'provided'-scope and optional dependencies.\n+    DependencySelector dependencySelector =\n+        new AndDependencySelector(\n+            // ScopeDependencySelector takes exclusions. 'Provided' scope is not here to avoid\n+            // false positive in LinkageChecker.\n+            new ScopeDependencySelector(\"test\"),\n+            new ExclusionDependencySelector(),\n+            new FilteringZipDependencySelector());\n+    \n+    return newSession(system, dependencySelector);\n+  }\n+\n+  private static DefaultRepositorySystemSession newSession(\n+      RepositorySystem system, DependencySelector dependencySelector) {\n+    DefaultRepositorySystemSession session = createDefaultRepositorySystemSession(system);\n+    session.setDependencySelector(dependencySelector);\n+\n+    // By default, Maven's MavenRepositorySystemUtils.newSession() returns a session with\n+    // ChainedDependencyGraphTransformer(ConflictResolver(...), JavaDependencyContextRefiner()).\n+    // Because the full dependency graph does not resolve conflicts of versions, this session does\n+    // not use ConflictResolver.\n+    session.setDependencyGraphTransformer(\n+        new ChainedDependencyGraphTransformer(\n+            new CycleBreakerGraphTransformer(), // Avoids StackOverflowError\n+            new JavaDependencyContextRefiner()));\n+\n+    // No dependency management in the full dependency graph\n+    session.setDependencyManager(null);\n+\n+    return session;\n+  }\n+  \n+  static DefaultRepositorySystemSession newSessionForVerboseDependency(RepositorySystem system) {\n+    DependencySelector dependencySelector =\n+        new AndDependencySelector(\n+            // ScopeDependencySelector takes exclusions. 'Provided' scope is not here to avoid\n+            // false positive in LinkageChecker.\n+            new ScopeDependencySelector(\"test\"),\n+            new OptionalDependencySelector(),\n+            new ExclusionDependencySelector(),\n+            new FilteringZipDependencySelector());\n+    \n+    return newSession(system, dependencySelector);\n+  }\n+\n+  private static String findLocalRepository() {\n+    // TODO is there Maven code for this?\n+    Path home = Paths.get(System.getProperty(\"user.home\"));\n+    Path localRepo = home.resolve(\".m2\").resolve(\"repository\");\n+    if (Files.isDirectory(localRepo)) {\n+      return localRepo.toAbsolutePath().toString();\n+    } else {\n+      return makeTemporaryLocalRepository(); \n+   }\n+  }\n+\n+  private static String makeTemporaryLocalRepository() {\n+    try {\n+      File temporaryDirectory = Files.createTempDirectory(\"m2\").toFile();\n+      temporaryDirectory.deleteOnExit();\n+      return temporaryDirectory.getAbsolutePath();\n+    } catch (IOException ex) {\n+      return null;\n+    }\n+  }\n+\n+  static MavenProject createMavenProject(Path pomFile, RepositorySystemSession session)\n+      throws MavenRepositoryException {\n+    // MavenCli's way to instantiate PlexusContainer\n+    ClassWorld classWorld =\n+        new ClassWorld(\"plexus.core\", Thread.currentThread().getContextClassLoader());\n+    ContainerConfiguration containerConfiguration =\n+        new DefaultContainerConfiguration()\n+            .setClassWorld(classWorld)\n+            .setRealm(classWorld.getClassRealm(\"plexus.core\"))\n+            .setClassPathScanning(PlexusConstants.SCANNING_INDEX)\n+            .setAutoWiring(true)\n+            .setJSR250Lifecycle(true)\n+            .setName(\"linkage-checker\");\n+    try {\n+      PlexusContainer container = new DefaultPlexusContainer(containerConfiguration);\n+\n+      MavenExecutionRequest mavenExecutionRequest = new DefaultMavenExecutionRequest();\n+      ProjectBuildingRequest projectBuildingRequest =\n+          mavenExecutionRequest.getProjectBuildingRequest();\n+\n+      projectBuildingRequest.setRepositorySession(session);\n+\n+      // Profile activation needs properties such as JDK version\n+      Properties properties = new Properties(); // allowing duplicate entries\n+      properties.putAll(projectBuildingRequest.getSystemProperties());\n+      properties.putAll(OsProperties.detectOsProperties());\n+      properties.putAll(System.getProperties());\n+      projectBuildingRequest.setSystemProperties(properties);\n+\n+      ProjectBuilder projectBuilder = container.lookup(ProjectBuilder.class);\n+      ProjectBuildingResult projectBuildingResult =\n+          projectBuilder.build(pomFile.toFile(), projectBuildingRequest);\n+      return projectBuildingResult.getProject();\n+    } catch (PlexusContainerException | ComponentLookupException | ProjectBuildingException ex) {\n+      throw new MavenRepositoryException(ex);\n+    }\n+  }\n+\n+  /**\n+   * Returns Maven repository specified as {@code mavenRepositoryUrl}, after validating the syntax\n+   * of the URL.\n+   *\n+   * @throws IllegalArgumentException if the URL is malformed for a Maven repository\n+   */\n+  public static RemoteRepository mavenRepositoryFromUrl(String mavenRepositoryUrl) {\n+    try {\n+      // Because the protocol is not an empty string (checked below), this URI is absolute.\n+      new URI(mavenRepositoryUrl);\n+    } catch (URISyntaxException ex) {\n+      throw new IllegalArgumentException(\"Invalid URL syntax: \" + mavenRepositoryUrl);\n+    }\n+\n+    RemoteRepository repository =\n+        new RemoteRepository.Builder(null, \"default\", mavenRepositoryUrl).build();\n+\n+    /*checkArgument(\n+        ALLOWED_REPOSITORY_URL_SCHEMES.contains(repository.getProtocol()),\n+        \"Scheme: '%s' is not in %s\",\n+        repository.getProtocol(),\n+        ALLOWED_REPOSITORY_URL_SCHEMES);*/\n+    return repository;\n+  }\n+\n+  private static VersionRangeResult findVersionRange(\n+      RepositorySystem repositorySystem,\n+      RepositorySystemSession session,\n+      String groupId,\n+      String artifactId)\n+      throws MavenRepositoryException {\n+\n+    Artifact artifactWithVersionRange = new DefaultArtifact(groupId, artifactId, null, \"(0,]\");\n+    VersionRangeRequest request =\n+        new VersionRangeRequest(\n+            artifactWithVersionRange, Arrays.asList( RepositoryUtility.CENTRAL ), null);\n+\n+    try {\n+      return repositorySystem.resolveVersionRange(session, request);\n+    } catch (VersionRangeResolutionException ex) {\n+      throw new MavenRepositoryException(ex);\n+    }\n+  }\n+\n+  /** Returns the highest version for {@code groupId:artifactId} in {@code repositorySystem}. */\n+  //@VisibleForTesting\n+  static String findHighestVersion(\n+      RepositorySystem repositorySystem,\n+      RepositorySystemSession session,\n+      String groupId,\n+      String artifactId)\n+      throws MavenRepositoryException {\n+    return findVersionRange(repositorySystem, session, groupId, artifactId)\n+        .getHighestVersion()\n+        .toString();\n+  }\n+\n+  /**\n+   * Returns list of versions available for {@code groupId:artifactId} in {@code repositorySystem}.\n+   * The returned list is in ascending order with regard to {@link\n+   * org.eclipse.aether.util.version.GenericVersionScheme}; the highest version comes at last.\n+   */\n+  public static List<String> findVersions(\n+      RepositorySystem repositorySystem, String groupId, String artifactId)\n+      throws MavenRepositoryException {\n+    RepositorySystemSession session = RepositoryUtility.newSession(repositorySystem);\n+    // getVersions returns a list in ascending order\n+    List<Version> versions = new ArrayList<Version>();\n+    List<String> versionStrings = new ArrayList<String>();\n+\n+    versions = findVersionRange(repositorySystem, session, groupId, artifactId).getVersions();\n+\n+    for(Version version : versions)\n+    {\n+      versionStrings.add( version.toString() );\n+    }\n+\n+    return versionStrings;\n+\n+    /* above code replaces non Java 7 code:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8dc900f9eef135d47c373df78ac0e5a73423bd3"}, "originalPosition": 314}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzgzMzkwOnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/SerializeGraph.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDozNTowNFrOGpK2EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMDozNTowNFrOGpK2EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTgyMjQ4MA==", "bodyText": "more space", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r445822480", "createdAt": "2020-06-25T20:35:04Z", "author": {"login": "elharo"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/SerializeGraph.java", "diffHunk": "@@ -49,6 +49,12 @@ public String serialize( DependencyNode root )\n     private static String getDependencyCoordinate( DependencyNode node )\n     {\n         Artifact artifact = node.getArtifact();\n+        if(node.getDependency() == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8dc900f9eef135d47c373df78ac0e5a73423bd3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzM0MDYxOnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/CycleBreakerGraphTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDozNzoyOVrOGqhSdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDozNzoyOVrOGqhSdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzODc3Mg==", "bodyText": "remove this line", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r447238772", "createdAt": "2020-06-29T20:37:29Z", "author": {"login": "elharo"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/CycleBreakerGraphTransformer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+import org.eclipse.aether.RepositoryException;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.collection.DependencyGraphTransformationContext;\n+import org.eclipse.aether.collection.DependencyGraphTransformer;\n+import org.eclipse.aether.graph.DependencyNode;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.IdentityHashMap;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Transforms a dependency graph so that it will not contain cycles.\n+ *\n+ * <p>A cycle in a dependency graph is a situation where a path to a node from the root contains the\n+ * same node. For example, jaxen 1.1-beta-6 is known to have cycle with dom4j 1.6.1.\n+ */\n+final class CycleBreakerGraphTransformer implements DependencyGraphTransformer {\n+\n+  private final Set<DependencyNode> visitedNodes =\n+      Collections.newSetFromMap(new IdentityHashMap<DependencyNode, Boolean>());\n+\n+  @Override\n+  public DependencyNode transformGraph(\n+      DependencyNode dependencyNode, DependencyGraphTransformationContext context)\n+      throws RepositoryException {\n+\n+    removeCycle(null, dependencyNode, new HashSet<Artifact>());\n+    return dependencyNode;\n+  }\n+\n+  private void removeCycle(DependencyNode parent, DependencyNode node, Set<Artifact> ancestors) {\n+    Artifact artifact = node.getArtifact();\n+\n+    if (ancestors.contains(artifact)) { // Set (rather than List) gives O(1) lookup here\n+      // parent is not null when ancestors is not empty\n+      removeChildFromParent(node, parent);\n+      return;\n+    }\n+\n+    if (shouldVisitChildren(node)) {\n+      ancestors.add(artifact);\n+      for (DependencyNode child : node.getChildren()) {\n+        removeCycle(node, child, ancestors);\n+      }\n+      ancestors.remove(artifact);\n+    }\n+  }\n+\n+  /** Returns true if {@code node} is not visited yet and marks the node as visited. */\n+  //@VisibleForTesting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2728d1993c4f83615db9f6218a8531ae88c8b697"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzM0MTU3OnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/CycleBreakerGraphTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDozNzo0NlrOGqhTBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDozNzo0NlrOGqhTBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzODkxNw==", "bodyText": "will --> does (use present tense)", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r447238917", "createdAt": "2020-06-29T20:37:46Z", "author": {"login": "elharo"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/CycleBreakerGraphTransformer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+import org.eclipse.aether.RepositoryException;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.collection.DependencyGraphTransformationContext;\n+import org.eclipse.aether.collection.DependencyGraphTransformer;\n+import org.eclipse.aether.graph.DependencyNode;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.IdentityHashMap;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Transforms a dependency graph so that it will not contain cycles.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2728d1993c4f83615db9f6218a8531ae88c8b697"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzM0MjExOnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/CycleBreakerGraphTransformer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDozNzo1NlrOGqhTWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDozNzo1NlrOGqhTWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzOTAwMw==", "bodyText": "space after if", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r447239003", "createdAt": "2020-06-29T20:37:56Z", "author": {"login": "elharo"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/CycleBreakerGraphTransformer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+import org.eclipse.aether.RepositoryException;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.collection.DependencyGraphTransformationContext;\n+import org.eclipse.aether.collection.DependencyGraphTransformer;\n+import org.eclipse.aether.graph.DependencyNode;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.IdentityHashMap;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * Transforms a dependency graph so that it will not contain cycles.\n+ *\n+ * <p>A cycle in a dependency graph is a situation where a path to a node from the root contains the\n+ * same node. For example, jaxen 1.1-beta-6 is known to have cycle with dom4j 1.6.1.\n+ */\n+final class CycleBreakerGraphTransformer implements DependencyGraphTransformer {\n+\n+  private final Set<DependencyNode> visitedNodes =\n+      Collections.newSetFromMap(new IdentityHashMap<DependencyNode, Boolean>());\n+\n+  @Override\n+  public DependencyNode transformGraph(\n+      DependencyNode dependencyNode, DependencyGraphTransformationContext context)\n+      throws RepositoryException {\n+\n+    removeCycle(null, dependencyNode, new HashSet<Artifact>());\n+    return dependencyNode;\n+  }\n+\n+  private void removeCycle(DependencyNode parent, DependencyNode node, Set<Artifact> ancestors) {\n+    Artifact artifact = node.getArtifact();\n+\n+    if (ancestors.contains(artifact)) { // Set (rather than List) gives O(1) lookup here\n+      // parent is not null when ancestors is not empty\n+      removeChildFromParent(node, parent);\n+      return;\n+    }\n+\n+    if (shouldVisitChildren(node)) {\n+      ancestors.add(artifact);\n+      for (DependencyNode child : node.getChildren()) {\n+        removeCycle(node, child, ancestors);\n+      }\n+      ancestors.remove(artifact);\n+    }\n+  }\n+\n+  /** Returns true if {@code node} is not visited yet and marks the node as visited. */\n+  //@VisibleForTesting\n+  boolean shouldVisitChildren(DependencyNode node) {\n+    return visitedNodes.add(node);\n+  }\n+\n+  private static void removeChildFromParent(DependencyNode child, DependencyNode parent) {\n+    List<DependencyNode> filteredChildren = new ArrayList<DependencyNode>();\n+\n+    for(DependencyNode node : parent.getChildren() )\n+    {\n+      if( node != child )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2728d1993c4f83615db9f6218a8531ae88c8b697"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzM0MzQxOnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDozODoxNlrOGqhUJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDozODoxNlrOGqhUJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzOTIwNw==", "bodyText": "remove", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r447239207", "createdAt": "2020-06-29T20:38:16Z", "author": {"login": "elharo"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -39,12 +79,220 @@\n     @Parameter( defaultValue = \"${session}\", readonly = true, required = true )\n     protected MavenSession session;\n \n-    @Component\n+    @Parameter\n+    private String outputFile;\n+\n+    @Inject\n+    private ProjectDependenciesResolver resolver;\n+\n+    @Inject\n     private ArtifactHandlerManager artifactHandlerManager;\n \n+    private SerializeGraph serializer;\n+\n+    private DependencyNode rootNode;\n+\n+    private static final RepositorySystem system = RepositoryUtility.newRepositorySystem();\n+\n+    /** Maven repositories to use when resolving dependencies. */\n+    private final List<RemoteRepository> repositories;\n+    private Path localRepository;\n+\n+    public DependencyGraphBuilder() {\n+        this( Arrays.asList( CENTRAL.getUrl() ) );\n+    }\n+\n+\n+    static {\n+        for ( Map.Entry<String, String> entry : OsProperties.detectOsProperties().entrySet() )\n+        {\n+            System.setProperty( entry.getKey(), entry.getValue() );\n+        }\n+    }\n+\n+    /**\n+     * @param mavenRepositoryUrls remote Maven repositories to search for dependencies\n+     * @throws IllegalArgumentException if a URL is malformed or does not have an allowed scheme\n+     */\n+    public DependencyGraphBuilder(Iterable<String> mavenRepositoryUrls) {\n+        List<RemoteRepository> repositoryList = new ArrayList<RemoteRepository>();\n+        for (String mavenRepositoryUrl : mavenRepositoryUrls) {\n+            RemoteRepository repository = mavenRepositoryFromUrl(mavenRepositoryUrl);\n+            repositoryList.add(repository);\n+        }\n+        this.repositories = repositoryList;\n+    }\n+\n+    @Parameter( defaultValue = \"${repositorySystemSession}\" )\n+    private RepositorySystemSession repositorySystemSession;\n+\n+    /**\n+     * Enable temporary repositories for tests.\n+     */\n+    //@VisibleForTesting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2728d1993c4f83615db9f6218a8531ae88c8b697"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzM0NTE1OnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDozODo0OVrOGqhVXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDozODo0OVrOGqhVXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzIzOTUxNg==", "bodyText": "space before List", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r447239516", "createdAt": "2020-06-29T20:38:49Z", "author": {"login": "elharo"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -39,12 +79,220 @@\n     @Parameter( defaultValue = \"${session}\", readonly = true, required = true )\n     protected MavenSession session;\n \n-    @Component\n+    @Parameter\n+    private String outputFile;\n+\n+    @Inject\n+    private ProjectDependenciesResolver resolver;\n+\n+    @Inject\n     private ArtifactHandlerManager artifactHandlerManager;\n \n+    private SerializeGraph serializer;\n+\n+    private DependencyNode rootNode;\n+\n+    private static final RepositorySystem system = RepositoryUtility.newRepositorySystem();\n+\n+    /** Maven repositories to use when resolving dependencies. */\n+    private final List<RemoteRepository> repositories;\n+    private Path localRepository;\n+\n+    public DependencyGraphBuilder() {\n+        this( Arrays.asList( CENTRAL.getUrl() ) );\n+    }\n+\n+\n+    static {\n+        for ( Map.Entry<String, String> entry : OsProperties.detectOsProperties().entrySet() )\n+        {\n+            System.setProperty( entry.getKey(), entry.getValue() );\n+        }\n+    }\n+\n+    /**\n+     * @param mavenRepositoryUrls remote Maven repositories to search for dependencies\n+     * @throws IllegalArgumentException if a URL is malformed or does not have an allowed scheme\n+     */\n+    public DependencyGraphBuilder(Iterable<String> mavenRepositoryUrls) {\n+        List<RemoteRepository> repositoryList = new ArrayList<RemoteRepository>();\n+        for (String mavenRepositoryUrl : mavenRepositoryUrls) {\n+            RemoteRepository repository = mavenRepositoryFromUrl(mavenRepositoryUrl);\n+            repositoryList.add(repository);\n+        }\n+        this.repositories = repositoryList;\n+    }\n+\n+    @Parameter( defaultValue = \"${repositorySystemSession}\" )\n+    private RepositorySystemSession repositorySystemSession;\n+\n+    /**\n+     * Enable temporary repositories for tests.\n+     */\n+    //@VisibleForTesting\n+    void setLocalRepository(Path localRepository) {\n+        this.localRepository = localRepository;\n+    }\n+\n     public void execute() throws MojoExecutionException\n     {\n-        getLog().info( project.getArtifactId() );\n+        // ToDo: if outputFile not null write to outputFile\n+        File file = new File( project.getBasedir().getAbsolutePath().replace( '\\\\', '/' ) + \"/target/tree.txt\" );\n+\n+        List<Artifact> artifacts = new ArrayList<Artifact>();\n+        Set<org.apache.maven.artifact.Artifact> artifactSet = session.getCurrentProject().getArtifacts() ;\n+\n+        for( org.apache.maven.artifact.Artifact artifact : artifactSet )\n+        {\n+            Artifact newArtifact = new DefaultArtifact( artifact.getGroupId(), artifact.getArtifactId(),\n+                    artifact.getClassifier(), artifact.getType(), artifact.getVersion());\n+            newArtifact.setFile( artifact.getFile() );\n+            artifacts.add( newArtifact );\n+        }\n+\n+        Model model = project.getModel();\n+        Dependency rootDependency = new Dependency( new DefaultArtifact( model.getGroupId(),\n+                model.getArtifactId(), model.getPackaging(), model.getVersion()), \"\" );\n+\n+        rootNode = buildFullDependencyGraph( artifacts, rootDependency );\n+        // rootNode is given compile Scope by default but should not have a scope\n+        rootNode.setScope( null );\n+\n+        SerializeGraph serializer = new SerializeGraph();\n+        String serialized = serializer.serialize( rootNode );\n+\n+        try\n+        {\n+            write( file, serialized );\n+        }\n+        catch ( IOException e )\n+        {\n+            e.printStackTrace();\n+            getLog().error( \"Failed to write to file:\" + file.getAbsolutePath() );\n+        }\n+    }\n+\n+    private DependencyNode resolveCompileTimeDependencies(\n+            List<DependencyNode> dependencyNodes, DefaultRepositorySystemSession session, Dependency root)\n+            throws org.eclipse.aether.resolution.DependencyResolutionException\n+    {\n+        List<Dependency> dependencyList = new ArrayList<Dependency>();\n+\n+        for (DependencyNode dependencyNode : dependencyNodes) {\n+            Dependency dependency = dependencyNode.getDependency();\n+            if (dependency == null) {\n+                // Root DependencyNode has null dependency field.\n+                dependencyList.add(new Dependency(dependencyNode.getArtifact(), \"compile\"));\n+            } else {\n+                // The dependency field carries exclusions\n+                dependencyList.add(dependency.setScope(\"compile\"));\n+            }\n+        }\n+\n+        if (localRepository != null) {\n+            LocalRepository local = new LocalRepository(localRepository.toAbsolutePath().toString());\n+            session.setLocalRepositoryManager(system.newLocalRepositoryManager(session, local));\n+        }\n+\n+        CollectRequest collectRequest = new CollectRequest();\n+\n+        collectRequest.setRoot( dependencyList.get( 0 ) );\n+        if (dependencyList.size() != 1) {\n+            // With setRoot, the result includes dependencies with `optional:true` or `provided`\n+            // collectRequest.setRoot(dependencyList.get(0));\n+            collectRequest.setDependencies(dependencyList);\n+        } else {\n+            collectRequest.setDependencies(dependencyList);\n+        }\n+        for ( RemoteRepository repository : repositories) {\n+            collectRequest.addRepository(repository);\n+        }\n+        DependencyRequest dependencyRequest = new DependencyRequest();\n+        dependencyRequest.setCollectRequest(collectRequest);\n+         // dependencyRequest.setRoot(  );\n+\n+        // resolveDependencies equals to calling both collectDependencies (build dependency tree) and\n+        // resolveArtifacts (download JAR files).\n+        DependencyResult dependencyResult = system.resolveDependencies(session, dependencyRequest);\n+        return dependencyResult.getRoot();\n+    }\n+\n+    /**\n+     * Finds the full compile time, transitive dependency graph including duplicates, conflicting\n+     * versions, and provided and optional dependencies. In the event of I/O errors, missing\n+     * artifacts, and other problems, it can return an incomplete graph. Each node's dependencies are\n+     * resolved recursively. The scope of a dependency does not affect the scope of its children's\n+     * dependencies. Provided and optional dependencies are not treated differently than any other\n+     * dependency.\n+     *\n+     * @param artifacts Maven artifacts whose dependencies to retrieve\n+     * @return dependency graph representing the tree of Maven artifacts\n+     */\n+    public DependencyNode buildFullDependencyGraph(List<Artifact> artifacts, Dependency root ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2728d1993c4f83615db9f6218a8531ae88c8b697"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzM0OTc1OnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/test/java/org/apache/maven/dependency/graph/DependencyGraphBuilderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDo0MDowOFrOGqhYOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMDo0MDowOFrOGqhYOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI0MDI1MA==", "bodyText": "remove this", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r447240250", "createdAt": "2020-06-29T20:40:08Z", "author": {"login": "elharo"}, "path": "verboseTree-maven-plugin/src/test/java/org/apache/maven/dependency/graph/DependencyGraphBuilderTest.java", "diffHunk": "@@ -67,7 +71,70 @@ protected void setUp() throws Exception\n     @Test\n     public void testGetBuildingRequestTestEnvironment() throws Exception\n     {\n+        /*super.setUp();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2728d1993c4f83615db9f6218a8531ae88c8b697"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTQ0MjgxOnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/it/graphBuilder/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo1Mjo0M1rOGrIAGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo1Mjo0M1rOGrIAGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3MzA1MA==", "bodyText": "uncomment or remove", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r447873050", "createdAt": "2020-06-30T17:52:43Z", "author": {"login": "elharo"}, "path": "verboseTree-maven-plugin/src/it/graphBuilder/pom.xml", "diffHunk": "@@ -0,0 +1,98 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Licensed to the Apache Software Foundation (ASF) under one\n+  ~ or more contributor license agreements.  See the NOTICE file\n+  ~ distributed with this work for additional information\n+  ~ regarding copyright ownership.  The ASF licenses this file\n+  ~ to you under the Apache License, Version 2.0 (the\n+  ~ \"License\"); you may not use this file except in compliance\n+  ~ with the License.  You may obtain a copy of the License at\n+  ~\n+  ~   http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing,\n+  ~ software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+  ~ KIND, either express or implied.  See the License for the\n+  ~ specific language governing permissions and limitations\n+  ~ under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>org.apache.maven.its.dependency</groupId>\n+  <artifactId>graphBuilder</artifactId>\n+  <version>1.0-SNAPSHOT</version>\n+\n+  <name>GraphBuilderTest</name>\n+  <description>\n+    Tests the graphBuilder logic\n+  </description>\n+\n+  <properties>\n+    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n+  </properties>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>org.apache.maven</groupId>\n+        <artifactId>maven-model</artifactId>\n+        <version>2.0.5</version>\n+        <scope>test</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.maven</groupId>\n+      <artifactId>maven-project</artifactId>\n+      <version>2.0.6</version>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.apache.maven</groupId>\n+          <artifactId>maven-artifact</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.maven</groupId>\n+      <artifactId>maven-profile</artifactId>\n+      <version>2.0.4</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.maven</groupId>\n+      <artifactId>maven-model</artifactId>\n+      <version>2.0.7</version>\n+      <scope>runtime</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <pluginManagement>\n+      <plugins>\n+        <plugin>\n+          <groupId>@project.groupId@</groupId>\n+          <artifactId>@project.artifactId@</artifactId>\n+          <version>@project.version@</version>\n+          <!--<groupId>org.example</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94a634fa047233bde649149787c4efb4b6b19a1c"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MTQ0NTUwOnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo1MzoyOFrOGrIBxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNzo1MzoyOFrOGrIBxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzg3MzQ3OA==", "bodyText": "remove", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r447873478", "createdAt": "2020-06-30T17:53:28Z", "author": {"login": "elharo"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -39,14 +74,206 @@\n     @Parameter( defaultValue = \"${session}\", readonly = true, required = true )\n     protected MavenSession session;\n \n-    @Component\n+    @Parameter( defaultValue = \"${repositorySystemSession}\" )\n+    private RepositorySystemSession repositorySystemSession;\n+\n+    @Parameter\n+    private String outputFile;\n+\n+    @Inject\n+    private ProjectDependenciesResolver resolver;\n+\n+    @Inject\n     private ArtifactHandlerManager artifactHandlerManager;\n \n+    private SerializeGraph serializer;\n+\n+    private DependencyNode rootNode;\n+\n+    private static final RepositorySystem system = RepositoryUtility.newRepositorySystem();\n+\n+    /**\n+     * Maven repositories to use when resolving dependencies.\n+     */\n+    private final List<RemoteRepository> repositories;\n+    private Path localRepository;\n+\n+    public DependencyGraphBuilder()\n+    {\n+        this( Arrays.asList( CENTRAL.getUrl() ) );\n+    }\n+\n+    static\n+    {\n+        for ( Map.Entry<String, String> entry : OsProperties.detectOsProperties().entrySet() )\n+        {\n+            System.setProperty( entry.getKey(), entry.getValue() );\n+        }\n+    }\n+\n+    /**\n+     * @param mavenRepositoryUrls remote Maven repositories to search for dependencies\n+     * @throws IllegalArgumentException if a URL is malformed or does not have an allowed scheme\n+     */\n+    public DependencyGraphBuilder( Iterable<String> mavenRepositoryUrls )\n+    {\n+        List<RemoteRepository> repositoryList = new ArrayList<RemoteRepository>();\n+        for ( String mavenRepositoryUrl : mavenRepositoryUrls )\n+        {\n+            RemoteRepository repository = mavenRepositoryFromUrl( mavenRepositoryUrl );\n+            repositoryList.add( repository );\n+        }\n+        this.repositories = repositoryList;\n+    }\n+\n     public void execute() throws MojoExecutionException\n     {\n-        getLog().info( project.getArtifactId() );\n+        File file = new File( project.getBasedir().getAbsolutePath().replace( '\\\\', '/' ) + \"/target/tree.txt\" );\n+\n+        List<Artifact> artifacts = new ArrayList<Artifact>();\n+        Set<org.apache.maven.artifact.Artifact> artifactSet = session.getCurrentProject().getArtifacts();\n+\n+        for ( org.apache.maven.artifact.Artifact artifact : artifactSet )\n+        {\n+            Artifact newArtifact = new DefaultArtifact( artifact.getGroupId(), artifact.getArtifactId(),\n+                    artifact.getClassifier(), artifact.getType(), artifact.getVersion() );\n+            newArtifact.setFile( artifact.getFile() );\n+            artifacts.add( newArtifact );\n+        }\n+\n+        Model model = project.getModel();\n+        Dependency rootDependency = new Dependency(\n+                new DefaultArtifact( model.getGroupId(), model.getArtifactId(), model.getPackaging(),\n+                        model.getVersion() ), \"\" );\n+\n+        rootNode = buildFullDependencyGraph( artifacts, rootDependency );\n+        // rootNode is given compile Scope by default but should not have a scope\n+        rootNode.setScope( null );\n+\n+        SerializeGraph serializer = new SerializeGraph();\n+        String serialized = serializer.serialize( rootNode );\n+\n+        try\n+        {\n+            write( file, serialized );\n+        }\n+        catch ( IOException e )\n+        {\n+            e.printStackTrace();\n+            getLog().error( \"Failed to write to file:\" + file.getAbsolutePath() );\n+        }\n+    }\n+\n+    private DependencyNode resolveCompileTimeDependencies( List<DependencyNode> dependencyNodes,\n+                                                           DefaultRepositorySystemSession session,\n+                                                           Dependency root )\n+            throws org.eclipse.aether.resolution.DependencyResolutionException\n+    {\n+        List<Dependency> dependencyList = new ArrayList<Dependency>();\n+\n+        for ( DependencyNode dependencyNode : dependencyNodes )\n+        {\n+            Dependency dependency = dependencyNode.getDependency();\n+            if ( dependency == null )\n+            {\n+                // Root DependencyNode has null dependency field.\n+                dependencyList.add( new Dependency( dependencyNode.getArtifact(), \"compile\" ) );\n+            }\n+            else\n+            {\n+                // The dependency field carries exclusions\n+                dependencyList.add( dependency.setScope( \"compile\" ) );\n+            }\n+        }\n+\n+        if ( localRepository != null )\n+        {\n+            LocalRepository local = new LocalRepository( localRepository.toAbsolutePath().toString() );\n+            session.setLocalRepositoryManager( system.newLocalRepositoryManager( session, local ) );\n+        }\n+\n+        CollectRequest collectRequest = new CollectRequest();\n+\n+        collectRequest.setRoot( dependencyList.get( 0 ) );\n+        if ( dependencyList.size() != 1 )\n+        {\n+            // With setRoot, the result includes dependencies with `optional:true` or `provided`\n+            // collectRequest.setRoot(dependencyList.get(0));\n+            collectRequest.setDependencies( dependencyList );\n+        }\n+        else\n+        {\n+            collectRequest.setDependencies( dependencyList );\n+        }\n+        for ( RemoteRepository repository : repositories )\n+        {\n+            collectRequest.addRepository( repository );\n+        }\n+        DependencyRequest dependencyRequest = new DependencyRequest();\n+        dependencyRequest.setCollectRequest( collectRequest );\n+        // dependencyRequest.setRoot(  );\n+\n+        // resolveDependencies equals to calling both collectDependencies (build dependency tree) and\n+        // resolveArtifacts (download JAR files).\n+        DependencyResult dependencyResult = system.resolveDependencies( session, dependencyRequest );\n+        return dependencyResult.getRoot();\n     }\n \n+    /**\n+     * Finds the full compile time, transitive dependency graph including duplicates, conflicting versions, and provided\n+     * and optional dependencies. In the event of I/O errors, missing artifacts, and other problems, it can return an\n+     * incomplete graph. Each node's dependencies are resolved recursively. The scope of a dependency does not affect\n+     * the scope of its children's dependencies. Provided and optional dependencies are not treated differently than any\n+     * other dependency.\n+     *\n+     * @param artifacts Maven artifacts whose dependencies to retrieve\n+     * @return dependency graph representing the tree of Maven artifacts\n+     */\n+    public DependencyNode buildFullDependencyGraph( List<Artifact> artifacts, Dependency root )\n+    {\n+        List<DependencyNode> dependencyNodes = new ArrayList<DependencyNode>();\n+        dependencyNodes.add( new DefaultDependencyNode( root ) );\n+\n+        for ( Artifact artifact : artifacts )\n+        {\n+            dependencyNodes.add( new DefaultDependencyNode( artifact ) );\n+        }\n+        DefaultRepositorySystemSession session = RepositoryUtility.newSessionForFullDependency( system );\n+        return buildDependencyGraph( dependencyNodes, session, root );\n+    }\n+\n+    private DependencyNode buildDependencyGraph( List<DependencyNode> dependencyNodes,\n+                                                 DefaultRepositorySystemSession session, Dependency root )\n+    {\n+        try\n+        {\n+            return resolveCompileTimeDependencies( dependencyNodes, session, root );\n+        }\n+        catch ( org.eclipse.aether.resolution.DependencyResolutionException ex )\n+        {\n+            DependencyResult result = ex.getResult();\n+            DependencyNode graph = result.getRoot();\n+\n+            for ( ArtifactResult artifactResult : result.getArtifactResults() )\n+            {\n+                Artifact resolvedArtifact = artifactResult.getArtifact();\n+\n+                if ( resolvedArtifact == null )\n+                {\n+                    Artifact requestedArtifact = artifactResult.getRequest().getArtifact();\n+                    // ToDo: (may not be needed) graph.addUnresolvableArtifactProblem(requestedArtifact);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94a634fa047233bde649149787c4efb4b6b19a1c"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDMwNzA0OnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoxNToyN1rOG1IJFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoyOTowM1rOG1IlrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2MTExMQ==", "bodyText": "Why is this a field? Looks like it could be a local variable.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r458361111", "createdAt": "2020-07-21T20:15:27Z", "author": {"login": "elharo"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -39,14 +75,242 @@\n     @Parameter( defaultValue = \"${session}\", readonly = true, required = true )\n     protected MavenSession session;\n \n-    @Component\n+    @Parameter( defaultValue = \"${repositorySystemSession}\" )\n+    private RepositorySystemSession repositorySystemSession;\n+\n+    @Parameter\n+    private String outputFile;\n+\n+    @Inject\n+    private ProjectDependenciesResolver resolver;\n+\n+    @Inject\n     private ArtifactHandlerManager artifactHandlerManager;\n \n+    private SerializeGraph serializer;\n+\n+    private DependencyNode rootNode;\n+\n+    private static final RepositorySystem system = RepositoryUtility.newRepositorySystem();\n+\n+    /**\n+     * Maven repositories to use when resolving dependencies.\n+     */\n+    private final List<RemoteRepository> repositories;\n+    private Path localRepository;\n+\n+    public DependencyGraphBuilder()\n+    {\n+        this( Arrays.asList( CENTRAL.getUrl() ) );\n+    }\n+\n+    static\n+    {\n+        for ( Map.Entry<String, String> entry : OsProperties.detectOsProperties().entrySet() )\n+        {\n+            System.setProperty( entry.getKey(), entry.getValue() );\n+        }\n+    }\n+\n+    /**\n+     * @param mavenRepositoryUrls remote Maven repositories to search for dependencies\n+     * @throws IllegalArgumentException if a URL is malformed or does not have an allowed scheme\n+     */\n+    public DependencyGraphBuilder( Iterable<String> mavenRepositoryUrls )\n+    {\n+        List<RemoteRepository> repositoryList = new ArrayList<RemoteRepository>();\n+        for ( String mavenRepositoryUrl : mavenRepositoryUrls )\n+        {\n+            RemoteRepository repository = mavenRepositoryFromUrl( mavenRepositoryUrl );\n+            repositoryList.add( repository );\n+        }\n+        this.repositories = repositoryList;\n+    }\n+\n     public void execute() throws MojoExecutionException\n     {\n-        getLog().info( project.getArtifactId() );\n+        File file = new File( project.getBasedir().getAbsolutePath().replace( '\\\\', '/' ) + \"/target/tree.txt\" );\n+\n+        List<org.apache.maven.model.Dependency> dependencies = project.getDependencies();\n+\n+        rootNode = buildFullDependencyGraph( dependencies );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde50a2eaf7e4edbdb5efc95fa062d50878e8685"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2ODQyOQ==", "bodyText": "In the maven-dependency-plugin version of this code it's a field because there's a method to return the graph so I left it like that. I can change it though.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r458368429", "createdAt": "2020-07-21T20:29:03Z", "author": {"login": "ian-lavallee"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -39,14 +75,242 @@\n     @Parameter( defaultValue = \"${session}\", readonly = true, required = true )\n     protected MavenSession session;\n \n-    @Component\n+    @Parameter( defaultValue = \"${repositorySystemSession}\" )\n+    private RepositorySystemSession repositorySystemSession;\n+\n+    @Parameter\n+    private String outputFile;\n+\n+    @Inject\n+    private ProjectDependenciesResolver resolver;\n+\n+    @Inject\n     private ArtifactHandlerManager artifactHandlerManager;\n \n+    private SerializeGraph serializer;\n+\n+    private DependencyNode rootNode;\n+\n+    private static final RepositorySystem system = RepositoryUtility.newRepositorySystem();\n+\n+    /**\n+     * Maven repositories to use when resolving dependencies.\n+     */\n+    private final List<RemoteRepository> repositories;\n+    private Path localRepository;\n+\n+    public DependencyGraphBuilder()\n+    {\n+        this( Arrays.asList( CENTRAL.getUrl() ) );\n+    }\n+\n+    static\n+    {\n+        for ( Map.Entry<String, String> entry : OsProperties.detectOsProperties().entrySet() )\n+        {\n+            System.setProperty( entry.getKey(), entry.getValue() );\n+        }\n+    }\n+\n+    /**\n+     * @param mavenRepositoryUrls remote Maven repositories to search for dependencies\n+     * @throws IllegalArgumentException if a URL is malformed or does not have an allowed scheme\n+     */\n+    public DependencyGraphBuilder( Iterable<String> mavenRepositoryUrls )\n+    {\n+        List<RemoteRepository> repositoryList = new ArrayList<RemoteRepository>();\n+        for ( String mavenRepositoryUrl : mavenRepositoryUrls )\n+        {\n+            RemoteRepository repository = mavenRepositoryFromUrl( mavenRepositoryUrl );\n+            repositoryList.add( repository );\n+        }\n+        this.repositories = repositoryList;\n+    }\n+\n     public void execute() throws MojoExecutionException\n     {\n-        getLog().info( project.getArtifactId() );\n+        File file = new File( project.getBasedir().getAbsolutePath().replace( '\\\\', '/' ) + \"/target/tree.txt\" );\n+\n+        List<org.apache.maven.model.Dependency> dependencies = project.getDependencies();\n+\n+        rootNode = buildFullDependencyGraph( dependencies );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2MTExMQ=="}, "originalCommit": {"oid": "dde50a2eaf7e4edbdb5efc95fa062d50878e8685"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDMyMTc4OnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoxOTo0OFrOG1ISKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoxOTo0OFrOG1ISKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2MzQzNA==", "bodyText": "Get rid of the 'for now'?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r458363434", "createdAt": "2020-07-21T20:19:48Z", "author": {"login": "bimargulies-google"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -17,19 +17,55 @@\n \n package org.apache.maven.dependency.graph;\n \n+import com.google.inject.Inject;\n import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n import org.apache.maven.execution.MavenSession;\n+import org.apache.maven.model.Model;\n import org.apache.maven.plugin.AbstractMojo;\n import org.apache.maven.plugin.MojoExecutionException;\n-import org.apache.maven.plugins.annotations.Component;\n import org.apache.maven.plugins.annotations.Mojo;\n import org.apache.maven.plugins.annotations.Parameter;\n+import org.apache.maven.plugins.annotations.ResolutionScope;\n+import org.apache.maven.project.DependencyResolutionException;\n+import org.apache.maven.project.DependencyResolutionRequest;\n+import org.apache.maven.project.DependencyResolutionResult;\n import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.ProjectDependenciesResolver;\n+import org.eclipse.aether.DefaultRepositorySystemSession;\n+import org.eclipse.aether.RepositorySystem;\n+import org.eclipse.aether.RepositorySystemSession;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.artifact.DefaultArtifact;\n+import org.eclipse.aether.collection.CollectRequest;\n+import org.eclipse.aether.graph.DefaultDependencyNode;\n+import org.eclipse.aether.graph.Dependency;\n+import org.eclipse.aether.graph.DependencyNode;\n+import org.eclipse.aether.repository.LocalRepository;\n+import org.eclipse.aether.repository.RemoteRepository;\n+import org.eclipse.aether.resolution.ArtifactResult;\n+import org.eclipse.aether.resolution.DependencyRequest;\n+import org.eclipse.aether.resolution.DependencyResult;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import static org.apache.commons.io.FileUtils.write;\n+import static org.apache.maven.dependency.graph.RepositoryUtility.CENTRAL;\n+import static org.apache.maven.dependency.graph.RepositoryUtility.mavenRepositoryFromUrl;\n \n /**\n- * Gets the Project Building Request\n+ * Builds the DependencyGraph and for now outputs a text version of the dependency tree to a file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde50a2eaf7e4edbdb5efc95fa062d50878e8685"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDMyNDQxOnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoyMDozNFrOG1ITyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMjo0MDozMlrOG1MW2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2Mzg0OQ==", "bodyText": "Is the slash change enough? Do you need to use the canonicalization in Files? Drive letters?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r458363849", "createdAt": "2020-07-21T20:20:34Z", "author": {"login": "bimargulies-google"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -39,14 +75,242 @@\n     @Parameter( defaultValue = \"${session}\", readonly = true, required = true )\n     protected MavenSession session;\n \n-    @Component\n+    @Parameter( defaultValue = \"${repositorySystemSession}\" )\n+    private RepositorySystemSession repositorySystemSession;\n+\n+    @Parameter\n+    private String outputFile;\n+\n+    @Inject\n+    private ProjectDependenciesResolver resolver;\n+\n+    @Inject\n     private ArtifactHandlerManager artifactHandlerManager;\n \n+    private SerializeGraph serializer;\n+\n+    private DependencyNode rootNode;\n+\n+    private static final RepositorySystem system = RepositoryUtility.newRepositorySystem();\n+\n+    /**\n+     * Maven repositories to use when resolving dependencies.\n+     */\n+    private final List<RemoteRepository> repositories;\n+    private Path localRepository;\n+\n+    public DependencyGraphBuilder()\n+    {\n+        this( Arrays.asList( CENTRAL.getUrl() ) );\n+    }\n+\n+    static\n+    {\n+        for ( Map.Entry<String, String> entry : OsProperties.detectOsProperties().entrySet() )\n+        {\n+            System.setProperty( entry.getKey(), entry.getValue() );\n+        }\n+    }\n+\n+    /**\n+     * @param mavenRepositoryUrls remote Maven repositories to search for dependencies\n+     * @throws IllegalArgumentException if a URL is malformed or does not have an allowed scheme\n+     */\n+    public DependencyGraphBuilder( Iterable<String> mavenRepositoryUrls )\n+    {\n+        List<RemoteRepository> repositoryList = new ArrayList<RemoteRepository>();\n+        for ( String mavenRepositoryUrl : mavenRepositoryUrls )\n+        {\n+            RemoteRepository repository = mavenRepositoryFromUrl( mavenRepositoryUrl );\n+            repositoryList.add( repository );\n+        }\n+        this.repositories = repositoryList;\n+    }\n+\n     public void execute() throws MojoExecutionException\n     {\n-        getLog().info( project.getArtifactId() );\n+        File file = new File( project.getBasedir().getAbsolutePath().replace( '\\\\', '/' ) + \"/target/tree.txt\" );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde50a2eaf7e4edbdb5efc95fa062d50878e8685"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODQzMDE2OA==", "bodyText": "The slash change seems to work. I think it gets the drive letters automatically from getAbsolutePath, what scenario could cause this to fail?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r458430168", "createdAt": "2020-07-21T22:40:32Z", "author": {"login": "ian-lavallee"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/DependencyGraphBuilder.java", "diffHunk": "@@ -39,14 +75,242 @@\n     @Parameter( defaultValue = \"${session}\", readonly = true, required = true )\n     protected MavenSession session;\n \n-    @Component\n+    @Parameter( defaultValue = \"${repositorySystemSession}\" )\n+    private RepositorySystemSession repositorySystemSession;\n+\n+    @Parameter\n+    private String outputFile;\n+\n+    @Inject\n+    private ProjectDependenciesResolver resolver;\n+\n+    @Inject\n     private ArtifactHandlerManager artifactHandlerManager;\n \n+    private SerializeGraph serializer;\n+\n+    private DependencyNode rootNode;\n+\n+    private static final RepositorySystem system = RepositoryUtility.newRepositorySystem();\n+\n+    /**\n+     * Maven repositories to use when resolving dependencies.\n+     */\n+    private final List<RemoteRepository> repositories;\n+    private Path localRepository;\n+\n+    public DependencyGraphBuilder()\n+    {\n+        this( Arrays.asList( CENTRAL.getUrl() ) );\n+    }\n+\n+    static\n+    {\n+        for ( Map.Entry<String, String> entry : OsProperties.detectOsProperties().entrySet() )\n+        {\n+            System.setProperty( entry.getKey(), entry.getValue() );\n+        }\n+    }\n+\n+    /**\n+     * @param mavenRepositoryUrls remote Maven repositories to search for dependencies\n+     * @throws IllegalArgumentException if a URL is malformed or does not have an allowed scheme\n+     */\n+    public DependencyGraphBuilder( Iterable<String> mavenRepositoryUrls )\n+    {\n+        List<RemoteRepository> repositoryList = new ArrayList<RemoteRepository>();\n+        for ( String mavenRepositoryUrl : mavenRepositoryUrls )\n+        {\n+            RemoteRepository repository = mavenRepositoryFromUrl( mavenRepositoryUrl );\n+            repositoryList.add( repository );\n+        }\n+        this.repositories = repositoryList;\n+    }\n+\n     public void execute() throws MojoExecutionException\n     {\n-        getLog().info( project.getArtifactId() );\n+        File file = new File( project.getBasedir().getAbsolutePath().replace( '\\\\', '/' ) + \"/target/tree.txt\" );", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2Mzg0OQ=="}, "originalCommit": {"oid": "dde50a2eaf7e4edbdb5efc95fa062d50878e8685"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDMyNzA3OnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/FilteringZipDependencySelector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoyMToyNVrOG1IVcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoyMToyNVrOG1IVcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2NDI3Mw==", "bodyText": "Is zip really the only possible wrong thing?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r458364273", "createdAt": "2020-07-21T20:21:25Z", "author": {"login": "bimargulies-google"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/FilteringZipDependencySelector.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2019 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.collection.DependencyCollectionContext;\n+import org.eclipse.aether.collection.DependencySelector;\n+import org.eclipse.aether.graph.Dependency;\n+\n+import java.util.Map;\n+\n+/**\n+ * Excludes artifacts with {@code zip} type.\n+ */\n+public final class FilteringZipDependencySelector implements DependencySelector\n+{\n+    // To exclude log4j-api-java9:zip:2.11.1, which is not published.\n+    // https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/339\n+\n+    @Override\n+    public boolean selectDependency( Dependency dependency )\n+    {\n+        Artifact artifact = dependency.getArtifact();\n+        Map<String, String> properties = artifact.getProperties();\n+        // Because LinkageChecker only checks jar file, zip files are not needed\n+        return !\"zip\".equals( properties.get( \"type\" ) );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde50a2eaf7e4edbdb5efc95fa062d50878e8685"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDMzMDExOnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/OsProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoyMjoxOVrOG1IXSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoyMjoxOVrOG1IXSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2NDc0NA==", "bodyText": "I'm surprised that this isn't somewhere you could pull it in from, but I can't tell you where to get it from.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r458364744", "createdAt": "2020-07-21T20:22:19Z", "author": {"login": "bimargulies-google"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/OsProperties.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+\n+import java.util.HashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+\n+/**\n+ * Platform-dependent project properties normalized from ${os.name} and ${os.arch}. Netty uses these to select\n+ * system-specific dependencies through the\n+ * <a href='https://github.com/trustin/os-maven-plugin'>os-maven-plugin</a>.\n+ */\n+public class OsProperties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde50a2eaf7e4edbdb5efc95fa062d50878e8685"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDMzMzQxOnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/SerializeGraph.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoyMzoxNFrOG1IZNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoyMzoxNFrOG1IZNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2NTIzOQ==", "bodyText": "This object can't be used in parallel, correct? Worth documenting.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r458365239", "createdAt": "2020-07-21T20:23:14Z", "author": {"login": "elharo"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/SerializeGraph.java", "diffHunk": "@@ -36,24 +39,56 @@\n     private static final String LINE_START_LAST_CHILD = \"\\\\- \";\n     private static final String LINE_START_CHILD = \"+- \";\n \n-    private final Map<DependencyNode, Boolean> visitedNodes = new IdentityHashMap<DependencyNode, Boolean>( 512 );\n-    private final Set<String> coordinateStrings =  new HashSet<String>();\n-    private final Map<String, String> coordinateVersionMap = new HashMap<String, String>();\n-    private StringBuilder builder = new StringBuilder();\n+    private Set<String> coordinateStrings;\n+    private Map<String, String> coordinateVersionMap;\n+    private Map<DependencyNode, String> nodeErrors;\n+    private StringBuilder builder;\n \n     public String serialize( DependencyNode root )\n     {\n-        return dfs( root, \"\" ).toString();\n+        coordinateStrings = new HashSet<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde50a2eaf7e4edbdb5efc95fa062d50878e8685"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDM0MTY4OnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/RepositoryUtility.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoyNToyOVrOG1IeSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoyNToyOVrOG1IeSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2NjUzOQ==", "bodyText": "I would expect this to return the version object and the caller to apply toString.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r458366539", "createdAt": "2020-07-21T20:25:29Z", "author": {"login": "bimargulies-google"}, "path": "verboseTree-maven-plugin/src/main/java/org/apache/maven/dependency/graph/RepositoryUtility.java", "diffHunk": "@@ -0,0 +1,326 @@\n+/*\n+ * Copyright 2018 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.maven.dependency.graph;\n+\n+import org.apache.maven.execution.DefaultMavenExecutionRequest;\n+import org.apache.maven.execution.MavenExecutionRequest;\n+import org.apache.maven.project.MavenProject;\n+import org.apache.maven.project.ProjectBuilder;\n+import org.apache.maven.project.ProjectBuildingException;\n+import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.project.ProjectBuildingResult;\n+import org.apache.maven.repository.internal.MavenRepositorySystemUtils;\n+import org.codehaus.plexus.ContainerConfiguration;\n+import org.codehaus.plexus.DefaultContainerConfiguration;\n+import org.codehaus.plexus.DefaultPlexusContainer;\n+import org.codehaus.plexus.PlexusConstants;\n+import org.codehaus.plexus.PlexusContainer;\n+import org.codehaus.plexus.PlexusContainerException;\n+import org.codehaus.plexus.classworlds.ClassWorld;\n+import org.codehaus.plexus.component.repository.exception.ComponentLookupException;\n+import org.eclipse.aether.DefaultRepositorySystemSession;\n+import org.eclipse.aether.RepositorySystem;\n+import org.eclipse.aether.RepositorySystemSession;\n+import org.eclipse.aether.artifact.Artifact;\n+import org.eclipse.aether.artifact.DefaultArtifact;\n+import org.eclipse.aether.collection.DependencySelector;\n+import org.eclipse.aether.connector.basic.BasicRepositoryConnectorFactory;\n+import org.eclipse.aether.impl.DefaultServiceLocator;\n+import org.eclipse.aether.repository.LocalRepository;\n+import org.eclipse.aether.repository.RemoteRepository;\n+import org.eclipse.aether.resolution.VersionRangeRequest;\n+import org.eclipse.aether.resolution.VersionRangeResolutionException;\n+import org.eclipse.aether.resolution.VersionRangeResult;\n+import org.eclipse.aether.spi.connector.RepositoryConnectorFactory;\n+import org.eclipse.aether.spi.connector.transport.TransporterFactory;\n+import org.eclipse.aether.transport.file.FileTransporterFactory;\n+import org.eclipse.aether.transport.http.HttpTransporterFactory;\n+import org.eclipse.aether.util.graph.selector.AndDependencySelector;\n+import org.eclipse.aether.util.graph.selector.ExclusionDependencySelector;\n+import org.eclipse.aether.util.graph.selector.OptionalDependencySelector;\n+import org.eclipse.aether.util.graph.selector.ScopeDependencySelector;\n+import org.eclipse.aether.util.graph.transformer.ChainedDependencyGraphTransformer;\n+import org.eclipse.aether.util.graph.transformer.JavaDependencyContextRefiner;\n+import org.eclipse.aether.version.Version;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+\n+/**\n+ * Aether initialization. This is based on Apache Maven Resolver 1.4.2 or later. There are many other versions of Aether\n+ * from Sonatype and the Eclipse Project, but this is the current one.\n+ */\n+public final class RepositoryUtility\n+{\n+\n+    public static final RemoteRepository CENTRAL = new RemoteRepository.Builder( \"central\", \"default\",\n+            \"https://repo1.maven.org/maven2/\" ).build();\n+\n+    // DefaultTransporterProvider.newTransporter checks these transporters\n+    private static final Set<String> ALLOWED_REPOSITORY_URL_SCHEMES = new HashSet<String>(\n+            Arrays.asList( \"file\", \"http\", \"https\" ) );\n+\n+    private RepositoryUtility()\n+    {\n+    }\n+\n+    /**\n+     * Creates a new system configured for file and HTTP repository resolution.\n+     */\n+    public static RepositorySystem newRepositorySystem()\n+    {\n+        DefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();\n+        locator.addService( RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class );\n+        locator.addService( TransporterFactory.class, FileTransporterFactory.class );\n+        locator.addService( TransporterFactory.class, HttpTransporterFactory.class );\n+\n+        return locator.getService( RepositorySystem.class );\n+    }\n+\n+    //@VisibleForTesting\n+    static DefaultRepositorySystemSession createDefaultRepositorySystemSession( RepositorySystem system )\n+    {\n+        DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();\n+        LocalRepository localRepository = new LocalRepository( findLocalRepository() );\n+        session.setLocalRepositoryManager( system.newLocalRepositoryManager( session, localRepository ) );\n+        return session;\n+    }\n+\n+    /**\n+     * Opens a new Maven repository session that looks for the local repository in the customary ~/.m2 directory. If not\n+     * found, it creates an initially empty repository in a temporary location.\n+     */\n+    public static DefaultRepositorySystemSession newSession( RepositorySystem system )\n+    {\n+        DefaultRepositorySystemSession session = createDefaultRepositorySystemSession( system );\n+        return session;\n+    }\n+\n+    /**\n+     * Open a new Maven repository session for full dependency graph resolution.\n+     *\n+     * @see {@link DependencyGraphBuilder}\n+     */\n+    static DefaultRepositorySystemSession newSessionForFullDependency( RepositorySystem system )\n+    {\n+        // This combination of DependencySelector comes from the default specified in\n+        // `MavenRepositorySystemUtils.newSession`.\n+        // LinkageChecker needs to include 'provided'-scope and optional dependencies.\n+        DependencySelector dependencySelector = new AndDependencySelector(\n+                // ScopeDependencySelector takes exclusions. 'Provided' scope is not here to avoid\n+                // false positive in LinkageChecker.\n+                new ScopeDependencySelector(), // removed \"test\" parameter\n+                new ExclusionDependencySelector(), new FilteringZipDependencySelector() );\n+\n+        return newSession( system, dependencySelector );\n+    }\n+\n+    private static DefaultRepositorySystemSession newSession( RepositorySystem system,\n+                                                              DependencySelector dependencySelector )\n+    {\n+        DefaultRepositorySystemSession session = createDefaultRepositorySystemSession( system );\n+        session.setDependencySelector( dependencySelector );\n+\n+        // By default, Maven's MavenRepositorySystemUtils.newSession() returns a session with\n+        // ChainedDependencyGraphTransformer(ConflictResolver(...), JavaDependencyContextRefiner()).\n+        // Because the full dependency graph does not resolve conflicts of versions, this session does\n+        // not use ConflictResolver.\n+        session.setDependencyGraphTransformer(\n+                new ChainedDependencyGraphTransformer( new CycleBreakerGraphTransformer(), // Avoids StackOverflowError\n+                        new JavaDependencyContextRefiner() ) );\n+\n+        // No dependency management in the full dependency graph\n+        session.setDependencyManager( null );\n+\n+        return session;\n+    }\n+\n+    static DefaultRepositorySystemSession newSessionForVerboseDependency( RepositorySystem system )\n+    {\n+        DependencySelector dependencySelector = new AndDependencySelector(\n+                // ScopeDependencySelector takes exclusions. 'Provided' scope is not here to avoid\n+                // false positive in LinkageChecker.\n+                new ScopeDependencySelector(), // removed \"test\" parameter\n+                new OptionalDependencySelector(), new ExclusionDependencySelector(),\n+                new FilteringZipDependencySelector() );\n+\n+        return newSession( system, dependencySelector );\n+    }\n+\n+    private static String findLocalRepository()\n+    {\n+        // TODO is there Maven code for this?\n+        Path home = Paths.get( System.getProperty( \"user.home\" ) );\n+        Path localRepo = home.resolve( \".m2\" ).resolve( \"repository\" );\n+        if ( Files.isDirectory( localRepo ) )\n+        {\n+            return localRepo.toAbsolutePath().toString();\n+        }\n+        else\n+        {\n+            return makeTemporaryLocalRepository();\n+        }\n+    }\n+\n+    private static String makeTemporaryLocalRepository()\n+    {\n+        try\n+        {\n+            File temporaryDirectory = Files.createTempDirectory( \"m2\" ).toFile();\n+            temporaryDirectory.deleteOnExit();\n+            return temporaryDirectory.getAbsolutePath();\n+        }\n+        catch ( IOException ex )\n+        {\n+            return null;\n+        }\n+    }\n+\n+    static MavenProject createMavenProject( Path pomFile, RepositorySystemSession session )\n+            throws MavenRepositoryException\n+    {\n+        // MavenCli's way to instantiate PlexusContainer\n+        ClassWorld classWorld = new ClassWorld( \"plexus.core\", Thread.currentThread().getContextClassLoader() );\n+        ContainerConfiguration containerConfiguration = new DefaultContainerConfiguration().setClassWorld(\n+                classWorld ).setRealm( classWorld.getClassRealm( \"plexus.core\" ) ).setClassPathScanning(\n+                PlexusConstants.SCANNING_INDEX ).setAutoWiring( true ).setJSR250Lifecycle( true ).setName(\n+                \"linkage-checker\" );\n+        try\n+        {\n+            PlexusContainer container = new DefaultPlexusContainer( containerConfiguration );\n+\n+            MavenExecutionRequest mavenExecutionRequest = new DefaultMavenExecutionRequest();\n+            ProjectBuildingRequest projectBuildingRequest = mavenExecutionRequest.getProjectBuildingRequest();\n+\n+            projectBuildingRequest.setRepositorySession( session );\n+\n+            // Profile activation needs properties such as JDK version\n+            Properties properties = new Properties(); // allowing duplicate entries\n+            properties.putAll( projectBuildingRequest.getSystemProperties() );\n+            properties.putAll( OsProperties.detectOsProperties() );\n+            properties.putAll( System.getProperties() );\n+            projectBuildingRequest.setSystemProperties( properties );\n+\n+            ProjectBuilder projectBuilder = container.lookup( ProjectBuilder.class );\n+            ProjectBuildingResult projectBuildingResult = projectBuilder.build( pomFile.toFile(),\n+                    projectBuildingRequest );\n+            return projectBuildingResult.getProject();\n+        }\n+        catch ( PlexusContainerException | ComponentLookupException | ProjectBuildingException ex )\n+        {\n+            throw new MavenRepositoryException( ex );\n+        }\n+    }\n+\n+    /**\n+     * Returns Maven repository specified as {@code mavenRepositoryUrl}, after validating the syntax of the URL.\n+     *\n+     * @throws IllegalArgumentException if the URL is malformed for a Maven repository\n+     */\n+    public static RemoteRepository mavenRepositoryFromUrl( String mavenRepositoryUrl )\n+    {\n+        try\n+        {\n+            // Because the protocol is not an empty string (checked below), this URI is absolute.\n+            new URI( mavenRepositoryUrl );\n+        }\n+        catch ( URISyntaxException ex )\n+        {\n+            throw new IllegalArgumentException( \"Invalid URL syntax: \" + mavenRepositoryUrl );\n+        }\n+\n+        RemoteRepository repository = new RemoteRepository.Builder( null, \"default\", mavenRepositoryUrl ).build();\n+\n+        return repository;\n+    }\n+\n+    private static VersionRangeResult findVersionRange( RepositorySystem repositorySystem,\n+                                                        RepositorySystemSession session,\n+                                                        String groupId, String artifactId )\n+            throws MavenRepositoryException\n+    {\n+\n+        Artifact artifactWithVersionRange = new DefaultArtifact( groupId, artifactId, null, \"(0,]\" );\n+        VersionRangeRequest request = new VersionRangeRequest( artifactWithVersionRange,\n+                Arrays.asList( RepositoryUtility.CENTRAL ), null );\n+\n+        try\n+        {\n+            return repositorySystem.resolveVersionRange( session, request );\n+        }\n+        catch ( VersionRangeResolutionException ex )\n+        {\n+            throw new MavenRepositoryException( ex );\n+        }\n+    }\n+\n+    /**\n+     * Returns the highest version for {@code groupId:artifactId} in {@code repositorySystem}.\n+     */\n+    static String findHighestVersion( RepositorySystem repositorySystem, RepositorySystemSession session,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde50a2eaf7e4edbdb5efc95fa062d50878e8685"}, "originalPosition": 286}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MDM0Mzc5OnYy", "diffSide": "RIGHT", "path": "verboseTree-maven-plugin/src/test/resources/tree-test/plugin-config.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoyNjowOVrOG1IfqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQyMDoyNjowOVrOG1IfqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM2Njg4OQ==", "bodyText": "supply newline.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1485#discussion_r458366889", "createdAt": "2020-07-21T20:26:09Z", "author": {"login": "bimargulies-google"}, "path": "verboseTree-maven-plugin/src/test/resources/tree-test/plugin-config.xml", "diffHunk": "@@ -0,0 +1,38 @@\n+<!--\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License. \n+ *\n+-->\n+<project>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <artifactId>verboseTree-maven-plugin</artifactId>\n+          <configuration>\n+            <project implementation=\"org.apache.maven.plugin.testing.stubs.MavenProjectStub\"/>\n+          </configuration>\n+      </plugin>\n+    </plugins>\n+  </build>\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.maven</groupId>\n+      <artifactId>maven-artifact</artifactId>\n+      <version>2.0.4</version>\n+    </dependency>\n+  </dependencies>\n+</project>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dde50a2eaf7e4edbdb5efc95fa062d50878e8685"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2612, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}