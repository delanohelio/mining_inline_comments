{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMTUyNTAw", "number": 1269, "reviewThreads": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo0MTo1NFrODk03Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOToxNDoyMVrODmbdPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTQxNDU0OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo0MTo1NFrOFxXj6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMTo0MTo1NFrOFxXj6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzMxMDU3MA==", "bodyText": "This part does not work with Windows.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r387310570", "createdAt": "2020-03-03T21:41:54Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileParser.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayDeque;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.parsers.SAXParser;\n+import javax.xml.parsers.SAXParserFactory;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/** Parser for Linkage Checker exclusion files. */\n+class ExclusionFileParser {\n+\n+  static ImmutableList<LinkageErrorMatcher> parse(Path exclusionFile)\n+      throws ParserConfigurationException, SAXException, IOException {\n+    SAXParserFactory spf = SAXParserFactory.newInstance();\n+    spf.setNamespaceAware(true);\n+    SAXParser saxParser = spf.newSAXParser();\n+\n+    XMLReader xmlReader = saxParser.getXMLReader();\n+    LinkageErrorMatcherHandler handler = new LinkageErrorMatcherHandler();\n+    xmlReader.setContentHandler(handler);\n+    xmlReader.parse(\"file://\" + exclusionFile);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "776d0718892e7ad7c5d8ef01489c152e58e5706e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjQyMTM3OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjoyNTo0MVrOFx0SvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzoxNzozNFrOFx2QqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4MTMwOA==", "bodyText": "Optional, and maybe not in this PR: writing an XSD, RELAX NG schema, or DTD can be an effective way to document this and si sometimes helpful in runtime validation.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r387781308", "createdAt": "2020-03-04T16:25:41Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileParser.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.DefaultHandler;\n+import org.xml.sax.helpers.XMLReaderFactory;\n+\n+/**\n+ * Parser for Linkage Checker exclusion files.\n+ *\n+ * <p>The exclusion file for Linkage Checker is an XML file. Its top-level element is\n+ * LinkageCheckerFilter. The XML file contains the following structure:\n+ *\n+ * <ul>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27f9d378ac7501043d8b987db3ded8cf06ae5e9f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgxMzU0NA==", "bodyText": "Nice idea. Created #1277", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r387813544", "createdAt": "2020-03-04T17:17:34Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileParser.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.DefaultHandler;\n+import org.xml.sax.helpers.XMLReaderFactory;\n+\n+/**\n+ * Parser for Linkage Checker exclusion files.\n+ *\n+ * <p>The exclusion file for Linkage Checker is an XML file. Its top-level element is\n+ * LinkageCheckerFilter. The XML file contains the following structure:\n+ *\n+ * <ul>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4MTMwOA=="}, "originalCommit": {"oid": "27f9d378ac7501043d8b987db3ded8cf06ae5e9f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjQyNzcwOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjoyNzoxMlrOFx0WsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzoxNzo0NVrOFx2REw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4MjMyMA==", "bodyText": "Outer classes are easier to follow and reason about.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r387782320", "createdAt": "2020-03-04T16:27:12Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileParser.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.DefaultHandler;\n+import org.xml.sax.helpers.XMLReaderFactory;\n+\n+/**\n+ * Parser for Linkage Checker exclusion files.\n+ *\n+ * <p>The exclusion file for Linkage Checker is an XML file. Its top-level element is\n+ * LinkageCheckerFilter. The XML file contains the following structure:\n+ *\n+ * <ul>\n+ *   <li>A LinkageCheckerFilter element has zero or more LinkageError elements.\n+ *   <li>A LinkageError element has at least one of Target element and Source element.\n+ *   <li>A Target element has Package, Class, Method, and Field elements. A Source element has\n+ *       Artifact, Package, and Class elements.\n+ *   <li>Method and Field elements have \u201cclassName\u201d attribute.\n+ * </ul>\n+ *\n+ * <p>Each type of the element works as a corresponding matcher, such as LinkageErrorMatcher for a\n+ * LinkageError element and SourceMatcher for Source element. Given a linkage error, they work as\n+ * below:\n+ *\n+ * <ul>\n+ *   <li>A LinkageErrorMatcher matches when all of its child elements match the linkage error.\n+ *   <li>A SourceMatcher matches a linkage error when the source class of the error matches one of\n+ *       its child elements.\n+ *   <li>A TargetMatcher matches a linkage error when the target symbol (class, method, or field) of\n+ *       the error matches one of its child elements.\n+ *   <li>A PackageMatcher matches the classes that have Java package specified by its name field.\n+ *       Prefix to specify child packages.\n+ *   <li>A ClassMatcher matches the class specified by its name attribute. ArtifactMatcher,\n+ *       PackageMatcher, and ClassMatcher also match methods and fields on their matching classes.\n+ *   <li>A MethodMatcher matches method symbol specified by className and name attribute.\n+ *   <li>A FieldMatcher matches field symbol specified by className and name attribute.\n+ * </ul>\n+ */\n+class ExclusionFileParser {\n+\n+  static ImmutableList<LinkageErrorMatcher> parse(Path exclusionFile)\n+      throws SAXException, IOException {\n+\n+    XMLReader xmlReader = XMLReaderFactory.createXMLReader();\n+    LinkageErrorMatcherHandler handler = new LinkageErrorMatcherHandler();\n+    xmlReader.setContentHandler(handler);\n+\n+    InputSource inputSource = new InputSource(new FileInputStream(exclusionFile.toFile()));\n+    xmlReader.parse(inputSource);\n+    return handler.getMatchers();\n+  }\n+\n+  private static class LinkageErrorMatcherHandler extends DefaultHandler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27f9d378ac7501043d8b987db3ded8cf06ae5e9f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgxMzY1MQ==", "bodyText": "Moved this to an independent class.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r387813651", "createdAt": "2020-03-04T17:17:45Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileParser.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.DefaultHandler;\n+import org.xml.sax.helpers.XMLReaderFactory;\n+\n+/**\n+ * Parser for Linkage Checker exclusion files.\n+ *\n+ * <p>The exclusion file for Linkage Checker is an XML file. Its top-level element is\n+ * LinkageCheckerFilter. The XML file contains the following structure:\n+ *\n+ * <ul>\n+ *   <li>A LinkageCheckerFilter element has zero or more LinkageError elements.\n+ *   <li>A LinkageError element has at least one of Target element and Source element.\n+ *   <li>A Target element has Package, Class, Method, and Field elements. A Source element has\n+ *       Artifact, Package, and Class elements.\n+ *   <li>Method and Field elements have \u201cclassName\u201d attribute.\n+ * </ul>\n+ *\n+ * <p>Each type of the element works as a corresponding matcher, such as LinkageErrorMatcher for a\n+ * LinkageError element and SourceMatcher for Source element. Given a linkage error, they work as\n+ * below:\n+ *\n+ * <ul>\n+ *   <li>A LinkageErrorMatcher matches when all of its child elements match the linkage error.\n+ *   <li>A SourceMatcher matches a linkage error when the source class of the error matches one of\n+ *       its child elements.\n+ *   <li>A TargetMatcher matches a linkage error when the target symbol (class, method, or field) of\n+ *       the error matches one of its child elements.\n+ *   <li>A PackageMatcher matches the classes that have Java package specified by its name field.\n+ *       Prefix to specify child packages.\n+ *   <li>A ClassMatcher matches the class specified by its name attribute. ArtifactMatcher,\n+ *       PackageMatcher, and ClassMatcher also match methods and fields on their matching classes.\n+ *   <li>A MethodMatcher matches method symbol specified by className and name attribute.\n+ *   <li>A FieldMatcher matches field symbol specified by className and name attribute.\n+ * </ul>\n+ */\n+class ExclusionFileParser {\n+\n+  static ImmutableList<LinkageErrorMatcher> parse(Path exclusionFile)\n+      throws SAXException, IOException {\n+\n+    XMLReader xmlReader = XMLReaderFactory.createXMLReader();\n+    LinkageErrorMatcherHandler handler = new LinkageErrorMatcherHandler();\n+    xmlReader.setContentHandler(handler);\n+\n+    InputSource inputSource = new InputSource(new FileInputStream(exclusionFile.toFile()));\n+    xmlReader.parse(inputSource);\n+    return handler.getMatchers();\n+  }\n+\n+  private static class LinkageErrorMatcherHandler extends DefaultHandler {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4MjMyMA=="}, "originalCommit": {"oid": "27f9d378ac7501043d8b987db3ded8cf06ae5e9f"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjQzMzg0OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjoyODo0MVrOFx0alg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzozMDo0MlrOFx2uHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4MzMxOA==", "bodyText": "you can check that the namespace is empty before the switch statement and error or ignore if it isn't", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r387783318", "createdAt": "2020-03-04T16:28:41Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileParser.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.DefaultHandler;\n+import org.xml.sax.helpers.XMLReaderFactory;\n+\n+/**\n+ * Parser for Linkage Checker exclusion files.\n+ *\n+ * <p>The exclusion file for Linkage Checker is an XML file. Its top-level element is\n+ * LinkageCheckerFilter. The XML file contains the following structure:\n+ *\n+ * <ul>\n+ *   <li>A LinkageCheckerFilter element has zero or more LinkageError elements.\n+ *   <li>A LinkageError element has at least one of Target element and Source element.\n+ *   <li>A Target element has Package, Class, Method, and Field elements. A Source element has\n+ *       Artifact, Package, and Class elements.\n+ *   <li>Method and Field elements have \u201cclassName\u201d attribute.\n+ * </ul>\n+ *\n+ * <p>Each type of the element works as a corresponding matcher, such as LinkageErrorMatcher for a\n+ * LinkageError element and SourceMatcher for Source element. Given a linkage error, they work as\n+ * below:\n+ *\n+ * <ul>\n+ *   <li>A LinkageErrorMatcher matches when all of its child elements match the linkage error.\n+ *   <li>A SourceMatcher matches a linkage error when the source class of the error matches one of\n+ *       its child elements.\n+ *   <li>A TargetMatcher matches a linkage error when the target symbol (class, method, or field) of\n+ *       the error matches one of its child elements.\n+ *   <li>A PackageMatcher matches the classes that have Java package specified by its name field.\n+ *       Prefix to specify child packages.\n+ *   <li>A ClassMatcher matches the class specified by its name attribute. ArtifactMatcher,\n+ *       PackageMatcher, and ClassMatcher also match methods and fields on their matching classes.\n+ *   <li>A MethodMatcher matches method symbol specified by className and name attribute.\n+ *   <li>A FieldMatcher matches field symbol specified by className and name attribute.\n+ * </ul>\n+ */\n+class ExclusionFileParser {\n+\n+  static ImmutableList<LinkageErrorMatcher> parse(Path exclusionFile)\n+      throws SAXException, IOException {\n+\n+    XMLReader xmlReader = XMLReaderFactory.createXMLReader();\n+    LinkageErrorMatcherHandler handler = new LinkageErrorMatcherHandler();\n+    xmlReader.setContentHandler(handler);\n+\n+    InputSource inputSource = new InputSource(new FileInputStream(exclusionFile.toFile()));\n+    xmlReader.parse(inputSource);\n+    return handler.getMatchers();\n+  }\n+\n+  private static class LinkageErrorMatcherHandler extends DefaultHandler {\n+\n+    private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+    private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+    ImmutableList<LinkageErrorMatcher> getMatchers() {\n+      return matchers.build();\n+    }\n+\n+    @Override\n+    public void startDocument() {\n+      matchers = ImmutableList.builder();\n+    }\n+\n+    private void addMatcherToTop(Object child) throws SAXException {\n+      SymbolProblemMatcher parent = stack.peek();\n+      if (parent instanceof SourceMatcher && child instanceof SymbolProblemSourceMatcher) {\n+        ((SourceMatcher) parent).addMatcher((SymbolProblemSourceMatcher) child);\n+      } else if (parent instanceof TargetMatcher && child instanceof SymbolProblemTargetMatcher) {\n+        ((TargetMatcher) parent).addMatcher((SymbolProblemTargetMatcher) child);\n+      } else {\n+        throw new SAXException(\n+            \"Unexpected parent-child relationship. Parent:\" + parent + \", child:\" + child);\n+      }\n+    }\n+\n+    @Override\n+    public void startElement(\n+        String namespaceURI, String localName, String qName, Attributes attributes)\n+        throws SAXException {\n+      switch (localName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27f9d378ac7501043d8b987db3ded8cf06ae5e9f"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyMTA4NQ==", "bodyText": "Added that check to throw an error if namespaceURI is not empty.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r387821085", "createdAt": "2020-03-04T17:30:42Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileParser.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.DefaultHandler;\n+import org.xml.sax.helpers.XMLReaderFactory;\n+\n+/**\n+ * Parser for Linkage Checker exclusion files.\n+ *\n+ * <p>The exclusion file for Linkage Checker is an XML file. Its top-level element is\n+ * LinkageCheckerFilter. The XML file contains the following structure:\n+ *\n+ * <ul>\n+ *   <li>A LinkageCheckerFilter element has zero or more LinkageError elements.\n+ *   <li>A LinkageError element has at least one of Target element and Source element.\n+ *   <li>A Target element has Package, Class, Method, and Field elements. A Source element has\n+ *       Artifact, Package, and Class elements.\n+ *   <li>Method and Field elements have \u201cclassName\u201d attribute.\n+ * </ul>\n+ *\n+ * <p>Each type of the element works as a corresponding matcher, such as LinkageErrorMatcher for a\n+ * LinkageError element and SourceMatcher for Source element. Given a linkage error, they work as\n+ * below:\n+ *\n+ * <ul>\n+ *   <li>A LinkageErrorMatcher matches when all of its child elements match the linkage error.\n+ *   <li>A SourceMatcher matches a linkage error when the source class of the error matches one of\n+ *       its child elements.\n+ *   <li>A TargetMatcher matches a linkage error when the target symbol (class, method, or field) of\n+ *       the error matches one of its child elements.\n+ *   <li>A PackageMatcher matches the classes that have Java package specified by its name field.\n+ *       Prefix to specify child packages.\n+ *   <li>A ClassMatcher matches the class specified by its name attribute. ArtifactMatcher,\n+ *       PackageMatcher, and ClassMatcher also match methods and fields on their matching classes.\n+ *   <li>A MethodMatcher matches method symbol specified by className and name attribute.\n+ *   <li>A FieldMatcher matches field symbol specified by className and name attribute.\n+ * </ul>\n+ */\n+class ExclusionFileParser {\n+\n+  static ImmutableList<LinkageErrorMatcher> parse(Path exclusionFile)\n+      throws SAXException, IOException {\n+\n+    XMLReader xmlReader = XMLReaderFactory.createXMLReader();\n+    LinkageErrorMatcherHandler handler = new LinkageErrorMatcherHandler();\n+    xmlReader.setContentHandler(handler);\n+\n+    InputSource inputSource = new InputSource(new FileInputStream(exclusionFile.toFile()));\n+    xmlReader.parse(inputSource);\n+    return handler.getMatchers();\n+  }\n+\n+  private static class LinkageErrorMatcherHandler extends DefaultHandler {\n+\n+    private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+    private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+    ImmutableList<LinkageErrorMatcher> getMatchers() {\n+      return matchers.build();\n+    }\n+\n+    @Override\n+    public void startDocument() {\n+      matchers = ImmutableList.builder();\n+    }\n+\n+    private void addMatcherToTop(Object child) throws SAXException {\n+      SymbolProblemMatcher parent = stack.peek();\n+      if (parent instanceof SourceMatcher && child instanceof SymbolProblemSourceMatcher) {\n+        ((SourceMatcher) parent).addMatcher((SymbolProblemSourceMatcher) child);\n+      } else if (parent instanceof TargetMatcher && child instanceof SymbolProblemTargetMatcher) {\n+        ((TargetMatcher) parent).addMatcher((SymbolProblemTargetMatcher) child);\n+      } else {\n+        throw new SAXException(\n+            \"Unexpected parent-child relationship. Parent:\" + parent + \", child:\" + child);\n+      }\n+    }\n+\n+    @Override\n+    public void startElement(\n+        String namespaceURI, String localName, String qName, Attributes attributes)\n+        throws SAXException {\n+      switch (localName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4MzMxOA=="}, "originalCommit": {"oid": "27f9d378ac7501043d8b987db3ded8cf06ae5e9f"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjQzODg4OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjoyOTo0MFrOFx0dhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzozMTo1M1rOFx2wzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4NDA3MQ==", "bodyText": "watch for namespaces", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r387784071", "createdAt": "2020-03-04T16:29:40Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileParser.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.DefaultHandler;\n+import org.xml.sax.helpers.XMLReaderFactory;\n+\n+/**\n+ * Parser for Linkage Checker exclusion files.\n+ *\n+ * <p>The exclusion file for Linkage Checker is an XML file. Its top-level element is\n+ * LinkageCheckerFilter. The XML file contains the following structure:\n+ *\n+ * <ul>\n+ *   <li>A LinkageCheckerFilter element has zero or more LinkageError elements.\n+ *   <li>A LinkageError element has at least one of Target element and Source element.\n+ *   <li>A Target element has Package, Class, Method, and Field elements. A Source element has\n+ *       Artifact, Package, and Class elements.\n+ *   <li>Method and Field elements have \u201cclassName\u201d attribute.\n+ * </ul>\n+ *\n+ * <p>Each type of the element works as a corresponding matcher, such as LinkageErrorMatcher for a\n+ * LinkageError element and SourceMatcher for Source element. Given a linkage error, they work as\n+ * below:\n+ *\n+ * <ul>\n+ *   <li>A LinkageErrorMatcher matches when all of its child elements match the linkage error.\n+ *   <li>A SourceMatcher matches a linkage error when the source class of the error matches one of\n+ *       its child elements.\n+ *   <li>A TargetMatcher matches a linkage error when the target symbol (class, method, or field) of\n+ *       the error matches one of its child elements.\n+ *   <li>A PackageMatcher matches the classes that have Java package specified by its name field.\n+ *       Prefix to specify child packages.\n+ *   <li>A ClassMatcher matches the class specified by its name attribute. ArtifactMatcher,\n+ *       PackageMatcher, and ClassMatcher also match methods and fields on their matching classes.\n+ *   <li>A MethodMatcher matches method symbol specified by className and name attribute.\n+ *   <li>A FieldMatcher matches field symbol specified by className and name attribute.\n+ * </ul>\n+ */\n+class ExclusionFileParser {\n+\n+  static ImmutableList<LinkageErrorMatcher> parse(Path exclusionFile)\n+      throws SAXException, IOException {\n+\n+    XMLReader xmlReader = XMLReaderFactory.createXMLReader();\n+    LinkageErrorMatcherHandler handler = new LinkageErrorMatcherHandler();\n+    xmlReader.setContentHandler(handler);\n+\n+    InputSource inputSource = new InputSource(new FileInputStream(exclusionFile.toFile()));\n+    xmlReader.parse(inputSource);\n+    return handler.getMatchers();\n+  }\n+\n+  private static class LinkageErrorMatcherHandler extends DefaultHandler {\n+\n+    private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+    private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+    ImmutableList<LinkageErrorMatcher> getMatchers() {\n+      return matchers.build();\n+    }\n+\n+    @Override\n+    public void startDocument() {\n+      matchers = ImmutableList.builder();\n+    }\n+\n+    private void addMatcherToTop(Object child) throws SAXException {\n+      SymbolProblemMatcher parent = stack.peek();\n+      if (parent instanceof SourceMatcher && child instanceof SymbolProblemSourceMatcher) {\n+        ((SourceMatcher) parent).addMatcher((SymbolProblemSourceMatcher) child);\n+      } else if (parent instanceof TargetMatcher && child instanceof SymbolProblemTargetMatcher) {\n+        ((TargetMatcher) parent).addMatcher((SymbolProblemTargetMatcher) child);\n+      } else {\n+        throw new SAXException(\n+            \"Unexpected parent-child relationship. Parent:\" + parent + \", child:\" + child);\n+      }\n+    }\n+\n+    @Override\n+    public void startElement(\n+        String namespaceURI, String localName, String qName, Attributes attributes)\n+        throws SAXException {\n+      switch (localName) {\n+        case \"LinkageCheckerFilter\":\n+          break;\n+        case \"LinkageError\":\n+          stack.push(new LinkageErrorMatcher());\n+          break;\n+        case \"Source\":\n+          SourceMatcher sourceMatcher = new SourceMatcher();\n+          ((LinkageErrorMatcher) stack.peek()).setSourceMatcher(sourceMatcher);\n+          stack.push(sourceMatcher);\n+          break;\n+        case \"Target\":\n+          TargetMatcher targetMatcher = new TargetMatcher();\n+          ((LinkageErrorMatcher) stack.peek()).setTargetMatcher(targetMatcher);\n+          stack.push(targetMatcher);\n+          break;\n+        case \"Package\":\n+          PackageMatcher packageMatcher = new PackageMatcher(attributes.getValue(\"name\"));\n+          addMatcherToTop(packageMatcher);\n+          break;\n+        case \"Class\":\n+          String classNameOnClass = attributes.getValue(\"name\");\n+          ClassMatcher classMatcher = new ClassMatcher(classNameOnClass);\n+          addMatcherToTop(classMatcher);\n+          break;\n+        case \"Method\":\n+          String classNameOnMethod = attributes.getValue(\"className\");\n+          MethodMatcher methodMatcher =\n+              new MethodMatcher(classNameOnMethod, attributes.getValue(\"name\"));\n+          addMatcherToTop(methodMatcher);\n+          break;\n+        case \"Field\":\n+          String classNameOnField = attributes.getValue(\"className\");\n+          FieldMatcher fieldMatcher =\n+              new FieldMatcher(classNameOnField, attributes.getValue(\"name\"));\n+          addMatcherToTop(fieldMatcher);\n+          break;\n+        default:\n+          throw new SAXException(\"Unknown tag \" + localName);\n+      }\n+    }\n+\n+    @Override\n+    public void endElement(String uri, String localName, String qName) throws SAXException {\n+      SymbolProblemMatcher poppedMatcher;\n+      switch (localName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27f9d378ac7501043d8b987db3ded8cf06ae5e9f"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyMTc3NA==", "bodyText": "Added that check.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r387821774", "createdAt": "2020-03-04T17:31:53Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileParser.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.InputSource;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.XMLReader;\n+import org.xml.sax.helpers.DefaultHandler;\n+import org.xml.sax.helpers.XMLReaderFactory;\n+\n+/**\n+ * Parser for Linkage Checker exclusion files.\n+ *\n+ * <p>The exclusion file for Linkage Checker is an XML file. Its top-level element is\n+ * LinkageCheckerFilter. The XML file contains the following structure:\n+ *\n+ * <ul>\n+ *   <li>A LinkageCheckerFilter element has zero or more LinkageError elements.\n+ *   <li>A LinkageError element has at least one of Target element and Source element.\n+ *   <li>A Target element has Package, Class, Method, and Field elements. A Source element has\n+ *       Artifact, Package, and Class elements.\n+ *   <li>Method and Field elements have \u201cclassName\u201d attribute.\n+ * </ul>\n+ *\n+ * <p>Each type of the element works as a corresponding matcher, such as LinkageErrorMatcher for a\n+ * LinkageError element and SourceMatcher for Source element. Given a linkage error, they work as\n+ * below:\n+ *\n+ * <ul>\n+ *   <li>A LinkageErrorMatcher matches when all of its child elements match the linkage error.\n+ *   <li>A SourceMatcher matches a linkage error when the source class of the error matches one of\n+ *       its child elements.\n+ *   <li>A TargetMatcher matches a linkage error when the target symbol (class, method, or field) of\n+ *       the error matches one of its child elements.\n+ *   <li>A PackageMatcher matches the classes that have Java package specified by its name field.\n+ *       Prefix to specify child packages.\n+ *   <li>A ClassMatcher matches the class specified by its name attribute. ArtifactMatcher,\n+ *       PackageMatcher, and ClassMatcher also match methods and fields on their matching classes.\n+ *   <li>A MethodMatcher matches method symbol specified by className and name attribute.\n+ *   <li>A FieldMatcher matches field symbol specified by className and name attribute.\n+ * </ul>\n+ */\n+class ExclusionFileParser {\n+\n+  static ImmutableList<LinkageErrorMatcher> parse(Path exclusionFile)\n+      throws SAXException, IOException {\n+\n+    XMLReader xmlReader = XMLReaderFactory.createXMLReader();\n+    LinkageErrorMatcherHandler handler = new LinkageErrorMatcherHandler();\n+    xmlReader.setContentHandler(handler);\n+\n+    InputSource inputSource = new InputSource(new FileInputStream(exclusionFile.toFile()));\n+    xmlReader.parse(inputSource);\n+    return handler.getMatchers();\n+  }\n+\n+  private static class LinkageErrorMatcherHandler extends DefaultHandler {\n+\n+    private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+    private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+    ImmutableList<LinkageErrorMatcher> getMatchers() {\n+      return matchers.build();\n+    }\n+\n+    @Override\n+    public void startDocument() {\n+      matchers = ImmutableList.builder();\n+    }\n+\n+    private void addMatcherToTop(Object child) throws SAXException {\n+      SymbolProblemMatcher parent = stack.peek();\n+      if (parent instanceof SourceMatcher && child instanceof SymbolProblemSourceMatcher) {\n+        ((SourceMatcher) parent).addMatcher((SymbolProblemSourceMatcher) child);\n+      } else if (parent instanceof TargetMatcher && child instanceof SymbolProblemTargetMatcher) {\n+        ((TargetMatcher) parent).addMatcher((SymbolProblemTargetMatcher) child);\n+      } else {\n+        throw new SAXException(\n+            \"Unexpected parent-child relationship. Parent:\" + parent + \", child:\" + child);\n+      }\n+    }\n+\n+    @Override\n+    public void startElement(\n+        String namespaceURI, String localName, String qName, Attributes attributes)\n+        throws SAXException {\n+      switch (localName) {\n+        case \"LinkageCheckerFilter\":\n+          break;\n+        case \"LinkageError\":\n+          stack.push(new LinkageErrorMatcher());\n+          break;\n+        case \"Source\":\n+          SourceMatcher sourceMatcher = new SourceMatcher();\n+          ((LinkageErrorMatcher) stack.peek()).setSourceMatcher(sourceMatcher);\n+          stack.push(sourceMatcher);\n+          break;\n+        case \"Target\":\n+          TargetMatcher targetMatcher = new TargetMatcher();\n+          ((LinkageErrorMatcher) stack.peek()).setTargetMatcher(targetMatcher);\n+          stack.push(targetMatcher);\n+          break;\n+        case \"Package\":\n+          PackageMatcher packageMatcher = new PackageMatcher(attributes.getValue(\"name\"));\n+          addMatcherToTop(packageMatcher);\n+          break;\n+        case \"Class\":\n+          String classNameOnClass = attributes.getValue(\"name\");\n+          ClassMatcher classMatcher = new ClassMatcher(classNameOnClass);\n+          addMatcherToTop(classMatcher);\n+          break;\n+        case \"Method\":\n+          String classNameOnMethod = attributes.getValue(\"className\");\n+          MethodMatcher methodMatcher =\n+              new MethodMatcher(classNameOnMethod, attributes.getValue(\"name\"));\n+          addMatcherToTop(methodMatcher);\n+          break;\n+        case \"Field\":\n+          String classNameOnField = attributes.getValue(\"className\");\n+          FieldMatcher fieldMatcher =\n+              new FieldMatcher(classNameOnField, attributes.getValue(\"name\"));\n+          addMatcherToTop(fieldMatcher);\n+          break;\n+        default:\n+          throw new SAXException(\"Unknown tag \" + localName);\n+      }\n+    }\n+\n+    @Override\n+    public void endElement(String uri, String localName, String qName) throws SAXException {\n+      SymbolProblemMatcher poppedMatcher;\n+      switch (localName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4NDA3MQ=="}, "originalCommit": {"oid": "27f9d378ac7501043d8b987db3ded8cf06ae5e9f"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjQ0NjIzOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/PackageMatcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjozMToxNFrOFx0iHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzozNjo0N1rOFx27Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4NTI0Nw==", "bodyText": "Does startsWith work here or do we need a period or forward slash at the end to avoid accidental matches?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r387785247", "createdAt": "2020-03-04T16:31:14Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/PackageMatcher.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Matcher on the classes of a package and its subpackages.\n+ *\n+ * <p>For example, {@code PackageMatcher(\"com.google\")} matches {@code com.google.Foo} class as well\n+ * as {@code com.google.cloud.Bar}.\n+ */\n+class PackageMatcher implements SymbolProblemTargetMatcher, SymbolProblemSourceMatcher {\n+\n+  private final String packageName;\n+\n+  PackageMatcher(String packageName) {\n+    this.packageName = checkNotNull(packageName);\n+  }\n+\n+  @Override\n+  public boolean match(Symbol problem) {\n+    return problem.getClassBinaryName().startsWith(packageName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27f9d378ac7501043d8b987db3ded8cf06ae5e9f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyNDQ4Mw==", "bodyText": "Updated the logic. \"com.ab\" should not match \"com.abcd\" here. Added test testParse_targetPackage_unmatch.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r387824483", "createdAt": "2020-03-04T17:36:47Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/PackageMatcher.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+/**\n+ * Matcher on the classes of a package and its subpackages.\n+ *\n+ * <p>For example, {@code PackageMatcher(\"com.google\")} matches {@code com.google.Foo} class as well\n+ * as {@code com.google.cloud.Bar}.\n+ */\n+class PackageMatcher implements SymbolProblemTargetMatcher, SymbolProblemSourceMatcher {\n+\n+  private final String packageName;\n+\n+  PackageMatcher(String packageName) {\n+    this.packageName = checkNotNull(packageName);\n+  }\n+\n+  @Override\n+  public boolean match(Symbol problem) {\n+    return problem.getClassBinaryName().startsWith(packageName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4NTI0Nw=="}, "originalCommit": {"oid": "27f9d378ac7501043d8b987db3ded8cf06ae5e9f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjQ1NDM5OnYy", "diffSide": "RIGHT", "path": "dependencies/src/test/resources/exclusion-sample-rules/linkage-checker-sample-exclusion-rule.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjozMzoxNFrOFx0nXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzozNzowNVrOFx28Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4NjU4OA==", "bodyText": "can target come after source too?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r387786588", "createdAt": "2020-03-04T16:33:14Z", "author": {"login": "elharo"}, "path": "dependencies/src/test/resources/exclusion-sample-rules/linkage-checker-sample-exclusion-rule.xml", "diffHunk": "@@ -0,0 +1,25 @@\n+<LinkageCheckerFilter>\n+  <LinkageError>\n+    <Source>\n+      <Class name=\"reactor.core.publisher.Traces\" />\n+    </Source>\n+  </LinkageError>\n+  <LinkageError>\n+    <Target>\n+      <Package name=\"jdk.vm.ci\" />\n+    </Target>\n+    <Source>\n+      <Package name=\"com.oracle.svm\" />\n+      <Package name=\"com.oracle.graal\" />\n+      <Package name=\"org.graalvm\" />\n+    </Source>\n+  </LinkageError>\n+  <LinkageError>\n+    <Target>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27f9d378ac7501043d8b987db3ded8cf06ae5e9f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyNDY1NA==", "bodyText": "Yes, the order does not matter.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r387824654", "createdAt": "2020-03-04T17:37:05Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/resources/exclusion-sample-rules/linkage-checker-sample-exclusion-rule.xml", "diffHunk": "@@ -0,0 +1,25 @@\n+<LinkageCheckerFilter>\n+  <LinkageError>\n+    <Source>\n+      <Class name=\"reactor.core.publisher.Traces\" />\n+    </Source>\n+  </LinkageError>\n+  <LinkageError>\n+    <Target>\n+      <Package name=\"jdk.vm.ci\" />\n+    </Target>\n+    <Source>\n+      <Package name=\"com.oracle.svm\" />\n+      <Package name=\"com.oracle.graal\" />\n+      <Package name=\"org.graalvm\" />\n+    </Source>\n+  </LinkageError>\n+  <LinkageError>\n+    <Target>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4NjU4OA=="}, "originalCommit": {"oid": "27f9d378ac7501043d8b987db3ded8cf06ae5e9f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjQ2MTg2OnYy", "diffSide": "RIGHT", "path": "dependencies/src/test/resources/exclusion-sample-rules/target-one-match.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjozNTowNVrOFx0sLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNDo1ODowNVrOFy7qWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4NzgyMw==", "bodyText": "There's a combinatorial explosion here: every source class against every target method/field. Perhaps each target should have at most one source and at most one target and each target can have exactly one child.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r387787823", "createdAt": "2020-03-04T16:35:05Z", "author": {"login": "elharo"}, "path": "dependencies/src/test/resources/exclusion-sample-rules/target-one-match.xml", "diffHunk": "@@ -0,0 +1,12 @@\n+<LinkageCheckerFilter>\n+  <LinkageError>\n+    <Target>\n+      <Method className=\"com.google.Foo\" name=\"methodA\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27f9d378ac7501043d8b987db3ded8cf06ae5e9f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyNzc2OA==", "bodyText": "Created a followup on the restriction to avoid combinational explosion.\n#1278", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r387827768", "createdAt": "2020-03-04T17:42:49Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/resources/exclusion-sample-rules/target-one-match.xml", "diffHunk": "@@ -0,0 +1,12 @@\n+<LinkageCheckerFilter>\n+  <LinkageError>\n+    <Target>\n+      <Method className=\"com.google.Foo\" name=\"methodA\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4NzgyMw=="}, "originalCommit": {"oid": "27f9d378ac7501043d8b987db3ded8cf06ae5e9f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk1MDYxNw==", "bodyText": "This is not really followup eligible. We need to get this right in the design now, not fix it later.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r388950617", "createdAt": "2020-03-06T14:58:05Z", "author": {"login": "elharo"}, "path": "dependencies/src/test/resources/exclusion-sample-rules/target-one-match.xml", "diffHunk": "@@ -0,0 +1,12 @@\n+<LinkageCheckerFilter>\n+  <LinkageError>\n+    <Target>\n+      <Method className=\"com.google.Foo\" name=\"methodA\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4NzgyMw=="}, "originalCommit": {"oid": "27f9d378ac7501043d8b987db3ded8cf06ae5e9f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMjQ2MzUwOnYy", "diffSide": "RIGHT", "path": "dependencies/src/test/resources/exclusion-sample-rules/target-package.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjozNToyOVrOFx0tMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzo0MzozM1rOFx3J1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4ODA4MQ==", "bodyText": "does this include subclasses?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r387788081", "createdAt": "2020-03-04T16:35:29Z", "author": {"login": "elharo"}, "path": "dependencies/src/test/resources/exclusion-sample-rules/target-package.xml", "diffHunk": "@@ -0,0 +1,7 @@\n+<LinkageCheckerFilter>\n+  <LinkageError>\n+    <Target>\n+      <Package name=\"com.google\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "27f9d378ac7501043d8b987db3ded8cf06ae5e9f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgyODE4MA==", "bodyText": "Yes, it includes subpackages, as we do in the special cases in Linkage Checker", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r387828180", "createdAt": "2020-03-04T17:43:33Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/resources/exclusion-sample-rules/target-package.xml", "diffHunk": "@@ -0,0 +1,7 @@\n+<LinkageCheckerFilter>\n+  <LinkageError>\n+    <Target>\n+      <Package name=\"com.google\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc4ODA4MQ=="}, "originalCommit": {"oid": "27f9d378ac7501043d8b987db3ded8cf06ae5e9f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTg3NDYxOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNDo1MTozOFrOFy7aGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOTozMDoxM1rOFzEsAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk0NjQ1Nw==", "bodyText": "It is unclear what this stack does or how it works. Some comments would be helpful.\nIt might be that stack is not the best data structure here. A custom class might work better.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r388946457", "createdAt": "2020-03-06T14:51:38Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7523845b98ddd587355dd2dce3b1773b1693b709"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5ODQ5OQ==", "bodyText": "Added javadoc to the stack. (Let me know if you think a custom class can express this better than stack.)", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389098499", "createdAt": "2020-03-06T19:30:13Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk0NjQ1Nw=="}, "originalCommit": {"oid": "7523845b98ddd587355dd2dce3b1773b1693b709"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwOTg4MzY2OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxNDo1Mzo0NVrOFy7fgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOToyNjowMlrOFzEksw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk0Nzg0MQ==", "bodyText": "It looks like the fields are half reusable and half not. Do you intend a single handler to be used to parse more than one document or not? Either way and make sure to document this and either:\nThrow an IllegalStateException the second time startDocument is called\nor\nreset all fields in startDocument", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r388947841", "createdAt": "2020-03-06T14:53:45Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {\n+    return matchers.build();\n+  }\n+\n+  @Override\n+  public void startDocument() {\n+    matchers = ImmutableList.builder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7523845b98ddd587355dd2dce3b1773b1693b709"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTA5NjYyNw==", "bodyText": "Added IllegalStateException and Javadoc.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389096627", "createdAt": "2020-03-06T19:26:02Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {\n+    return matchers.build();\n+  }\n+\n+  @Override\n+  public void startDocument() {\n+    matchers = ImmutableList.builder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODk0Nzg0MQ=="}, "originalCommit": {"oid": "7523845b98ddd587355dd2dce3b1773b1693b709"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxMDg2NDg0OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQxOTo0MDozNVrOFzFDkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDoyOToyOFrOFzq-5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwNDUzMA==", "bodyText": "More validation in XML structure is to be done at #1277", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389104530", "createdAt": "2020-03-06T19:40:35Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/**\n+ * Handler for Linkage Checker exclusion XML files.\n+ *\n+ * <p>An instance of this class can process one document and cannot be reused for other documents.\n+ */\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  /**\n+   * Stack to hold the ancestors of the XML element in {@link #startElement(String, String, String,\n+   * Attributes)}.\n+   */\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {\n+    return matchers.build();\n+  }\n+\n+  @Override\n+  public void startDocument() {\n+    if (matchers != null) {\n+      throw new IllegalStateException(\"This handler started reading document already\");\n+    }\n+    matchers = ImmutableList.builder();\n+  }\n+\n+  private void addMatcherToTop(Object child) throws SAXException {\n+    SymbolProblemMatcher parent = stack.peek();\n+    if (parent instanceof SourceMatcher && child instanceof SymbolProblemSourceMatcher) {\n+      ((SourceMatcher) parent).setMatcher((SymbolProblemSourceMatcher) child);\n+    } else if (parent instanceof TargetMatcher && child instanceof SymbolProblemTargetMatcher) {\n+      ((TargetMatcher) parent).setMatcher((SymbolProblemTargetMatcher) child);\n+    } else {\n+      throw new SAXException(\n+          \"Unexpected parent-child relationship. Parent:\" + parent + \", child:\" + child);\n+    }\n+  }\n+\n+  @Override\n+  public void startElement(\n+      String namespaceURI, String localName, String qName, Attributes attributes)\n+      throws SAXException {\n+    if (!namespaceURI.isEmpty()) {\n+      throw new SAXException(\"The exclusion rule does not support XML namespace\");\n+    }\n+    switch (localName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a2dc6eeed9cf9f053c40f6a0609afccab1f9d76"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyNDUyOA==", "bodyText": "I'd suggest that as documentation, not as part of the processing chain.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389624528", "createdAt": "2020-03-09T12:19:31Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/**\n+ * Handler for Linkage Checker exclusion XML files.\n+ *\n+ * <p>An instance of this class can process one document and cannot be reused for other documents.\n+ */\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  /**\n+   * Stack to hold the ancestors of the XML element in {@link #startElement(String, String, String,\n+   * Attributes)}.\n+   */\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {\n+    return matchers.build();\n+  }\n+\n+  @Override\n+  public void startDocument() {\n+    if (matchers != null) {\n+      throw new IllegalStateException(\"This handler started reading document already\");\n+    }\n+    matchers = ImmutableList.builder();\n+  }\n+\n+  private void addMatcherToTop(Object child) throws SAXException {\n+    SymbolProblemMatcher parent = stack.peek();\n+    if (parent instanceof SourceMatcher && child instanceof SymbolProblemSourceMatcher) {\n+      ((SourceMatcher) parent).setMatcher((SymbolProblemSourceMatcher) child);\n+    } else if (parent instanceof TargetMatcher && child instanceof SymbolProblemTargetMatcher) {\n+      ((TargetMatcher) parent).setMatcher((SymbolProblemTargetMatcher) child);\n+    } else {\n+      throw new SAXException(\n+          \"Unexpected parent-child relationship. Parent:\" + parent + \", child:\" + child);\n+    }\n+  }\n+\n+  @Override\n+  public void startElement(\n+      String namespaceURI, String localName, String qName, Attributes attributes)\n+      throws SAXException {\n+    if (!namespaceURI.isEmpty()) {\n+      throw new SAXException(\"The exclusion rule does not support XML namespace\");\n+    }\n+    switch (localName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwNDUzMA=="}, "originalCommit": {"oid": "9a2dc6eeed9cf9f053c40f6a0609afccab1f9d76"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyNTkyNQ==", "bodyText": "Started writing https://github.com/GoogleCloudPlatform/cloud-opensource-java/wiki/Linkage-Checker-Exclusion-File", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389725925", "createdAt": "2020-03-09T14:29:28Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/**\n+ * Handler for Linkage Checker exclusion XML files.\n+ *\n+ * <p>An instance of this class can process one document and cannot be reused for other documents.\n+ */\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  /**\n+   * Stack to hold the ancestors of the XML element in {@link #startElement(String, String, String,\n+   * Attributes)}.\n+   */\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {\n+    return matchers.build();\n+  }\n+\n+  @Override\n+  public void startDocument() {\n+    if (matchers != null) {\n+      throw new IllegalStateException(\"This handler started reading document already\");\n+    }\n+    matchers = ImmutableList.builder();\n+  }\n+\n+  private void addMatcherToTop(Object child) throws SAXException {\n+    SymbolProblemMatcher parent = stack.peek();\n+    if (parent instanceof SourceMatcher && child instanceof SymbolProblemSourceMatcher) {\n+      ((SourceMatcher) parent).setMatcher((SymbolProblemSourceMatcher) child);\n+    } else if (parent instanceof TargetMatcher && child instanceof SymbolProblemTargetMatcher) {\n+      ((TargetMatcher) parent).setMatcher((SymbolProblemTargetMatcher) child);\n+    } else {\n+      throw new SAXException(\n+          \"Unexpected parent-child relationship. Parent:\" + parent + \", child:\" + child);\n+    }\n+  }\n+\n+  @Override\n+  public void startElement(\n+      String namespaceURI, String localName, String qName, Attributes attributes)\n+      throws SAXException {\n+    if (!namespaceURI.isEmpty()) {\n+      throw new SAXException(\"The exclusion rule does not support XML namespace\");\n+    }\n+    switch (localName) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTEwNDUzMA=="}, "originalCommit": {"oid": "9a2dc6eeed9cf9f053c40f6a0609afccab1f9d76"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDQ1NDMzOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjoxNToxNFrOFzkrSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDoxMDoxNFrOFzqFMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMjYwMQ==", "bodyText": "Is the order of the matchers significant?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389622601", "createdAt": "2020-03-09T12:15:14Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/**\n+ * Handler for Linkage Checker exclusion XML files.\n+ *\n+ * <p>An instance of this class can process one document and cannot be reused for other documents.\n+ */\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  /**\n+   * Stack to hold the ancestors of the XML element in {@link #startElement(String, String, String,\n+   * Attributes)}.\n+   */\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a2dc6eeed9cf9f053c40f6a0609afccab1f9d76"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxMTE1Mg==", "bodyText": "The order matters to detect unused exclusion rules.\n#1275", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389711152", "createdAt": "2020-03-09T14:10:14Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/**\n+ * Handler for Linkage Checker exclusion XML files.\n+ *\n+ * <p>An instance of this class can process one document and cannot be reused for other documents.\n+ */\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  /**\n+   * Stack to hold the ancestors of the XML element in {@link #startElement(String, String, String,\n+   * Attributes)}.\n+   */\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMjYwMQ=="}, "originalCommit": {"oid": "9a2dc6eeed9cf9f053c40f6a0609afccab1f9d76"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDQ2MDc0OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjoxNzozNFrOFzkvQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDoxNDo0OFrOFzqWxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMzYxOA==", "bodyText": "Why is the argument type Object? It seems this could be more specific.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389623618", "createdAt": "2020-03-09T12:17:34Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/**\n+ * Handler for Linkage Checker exclusion XML files.\n+ *\n+ * <p>An instance of this class can process one document and cannot be reused for other documents.\n+ */\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  /**\n+   * Stack to hold the ancestors of the XML element in {@link #startElement(String, String, String,\n+   * Attributes)}.\n+   */\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {\n+    return matchers.build();\n+  }\n+\n+  @Override\n+  public void startDocument() {\n+    if (matchers != null) {\n+      throw new IllegalStateException(\"This handler started reading document already\");\n+    }\n+    matchers = ImmutableList.builder();\n+  }\n+\n+  private void addMatcherToTop(Object child) throws SAXException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a2dc6eeed9cf9f053c40f6a0609afccab1f9d76"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxNTY1NA==", "bodyText": "Good catch. It's SymbolProblemTargetMatcher interface. Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389715654", "createdAt": "2020-03-09T14:14:48Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/**\n+ * Handler for Linkage Checker exclusion XML files.\n+ *\n+ * <p>An instance of this class can process one document and cannot be reused for other documents.\n+ */\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  /**\n+   * Stack to hold the ancestors of the XML element in {@link #startElement(String, String, String,\n+   * Attributes)}.\n+   */\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {\n+    return matchers.build();\n+  }\n+\n+  @Override\n+  public void startDocument() {\n+    if (matchers != null) {\n+      throw new IllegalStateException(\"This handler started reading document already\");\n+    }\n+    matchers = ImmutableList.builder();\n+  }\n+\n+  private void addMatcherToTop(Object child) throws SAXException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyMzYxOA=="}, "originalCommit": {"oid": "9a2dc6eeed9cf9f053c40f6a0609afccab1f9d76"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDQ2NDEzOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjoxODo0NFrOFzkxdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDoxOTowNFrOFzqifw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyNDE4MA==", "bodyText": "Suggest changing message to \"unrecognized element: \" + qName + \" in namespace \" + namespaceURI", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389624180", "createdAt": "2020-03-09T12:18:44Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/**\n+ * Handler for Linkage Checker exclusion XML files.\n+ *\n+ * <p>An instance of this class can process one document and cannot be reused for other documents.\n+ */\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  /**\n+   * Stack to hold the ancestors of the XML element in {@link #startElement(String, String, String,\n+   * Attributes)}.\n+   */\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {\n+    return matchers.build();\n+  }\n+\n+  @Override\n+  public void startDocument() {\n+    if (matchers != null) {\n+      throw new IllegalStateException(\"This handler started reading document already\");\n+    }\n+    matchers = ImmutableList.builder();\n+  }\n+\n+  private void addMatcherToTop(Object child) throws SAXException {\n+    SymbolProblemMatcher parent = stack.peek();\n+    if (parent instanceof SourceMatcher && child instanceof SymbolProblemSourceMatcher) {\n+      ((SourceMatcher) parent).setMatcher((SymbolProblemSourceMatcher) child);\n+    } else if (parent instanceof TargetMatcher && child instanceof SymbolProblemTargetMatcher) {\n+      ((TargetMatcher) parent).setMatcher((SymbolProblemTargetMatcher) child);\n+    } else {\n+      throw new SAXException(\n+          \"Unexpected parent-child relationship. Parent:\" + parent + \", child:\" + child);\n+    }\n+  }\n+\n+  @Override\n+  public void startElement(\n+      String namespaceURI, String localName, String qName, Attributes attributes)\n+      throws SAXException {\n+    if (!namespaceURI.isEmpty()) {\n+      throw new SAXException(\"The exclusion rule does not support XML namespace\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a2dc6eeed9cf9f053c40f6a0609afccab1f9d76"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxODY1NQ==", "bodyText": "Nice. Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389718655", "createdAt": "2020-03-09T14:19:04Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/**\n+ * Handler for Linkage Checker exclusion XML files.\n+ *\n+ * <p>An instance of this class can process one document and cannot be reused for other documents.\n+ */\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  /**\n+   * Stack to hold the ancestors of the XML element in {@link #startElement(String, String, String,\n+   * Attributes)}.\n+   */\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {\n+    return matchers.build();\n+  }\n+\n+  @Override\n+  public void startDocument() {\n+    if (matchers != null) {\n+      throw new IllegalStateException(\"This handler started reading document already\");\n+    }\n+    matchers = ImmutableList.builder();\n+  }\n+\n+  private void addMatcherToTop(Object child) throws SAXException {\n+    SymbolProblemMatcher parent = stack.peek();\n+    if (parent instanceof SourceMatcher && child instanceof SymbolProblemSourceMatcher) {\n+      ((SourceMatcher) parent).setMatcher((SymbolProblemSourceMatcher) child);\n+    } else if (parent instanceof TargetMatcher && child instanceof SymbolProblemTargetMatcher) {\n+      ((TargetMatcher) parent).setMatcher((SymbolProblemTargetMatcher) child);\n+    } else {\n+      throw new SAXException(\n+          \"Unexpected parent-child relationship. Parent:\" + parent + \", child:\" + child);\n+    }\n+  }\n+\n+  @Override\n+  public void startElement(\n+      String namespaceURI, String localName, String qName, Attributes attributes)\n+      throws SAXException {\n+    if (!namespaceURI.isEmpty()) {\n+      throw new SAXException(\"The exclusion rule does not support XML namespace\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyNDE4MA=="}, "originalCommit": {"oid": "9a2dc6eeed9cf9f053c40f6a0609afccab1f9d76"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDQ2NDkwOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjoxOTowMlrOFzkx5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDoxNzozOVrOFzqepQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyNDI5Mw==", "bodyText": "namespaceUri\nqualifiedName", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389624293", "createdAt": "2020-03-09T12:19:02Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/**\n+ * Handler for Linkage Checker exclusion XML files.\n+ *\n+ * <p>An instance of this class can process one document and cannot be reused for other documents.\n+ */\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  /**\n+   * Stack to hold the ancestors of the XML element in {@link #startElement(String, String, String,\n+   * Attributes)}.\n+   */\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {\n+    return matchers.build();\n+  }\n+\n+  @Override\n+  public void startDocument() {\n+    if (matchers != null) {\n+      throw new IllegalStateException(\"This handler started reading document already\");\n+    }\n+    matchers = ImmutableList.builder();\n+  }\n+\n+  private void addMatcherToTop(Object child) throws SAXException {\n+    SymbolProblemMatcher parent = stack.peek();\n+    if (parent instanceof SourceMatcher && child instanceof SymbolProblemSourceMatcher) {\n+      ((SourceMatcher) parent).setMatcher((SymbolProblemSourceMatcher) child);\n+    } else if (parent instanceof TargetMatcher && child instanceof SymbolProblemTargetMatcher) {\n+      ((TargetMatcher) parent).setMatcher((SymbolProblemTargetMatcher) child);\n+    } else {\n+      throw new SAXException(\n+          \"Unexpected parent-child relationship. Parent:\" + parent + \", child:\" + child);\n+    }\n+  }\n+\n+  @Override\n+  public void startElement(\n+      String namespaceURI, String localName, String qName, Attributes attributes)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a2dc6eeed9cf9f053c40f6a0609afccab1f9d76"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcxNzY2OQ==", "bodyText": "Fixed.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389717669", "createdAt": "2020-03-09T14:17:39Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/**\n+ * Handler for Linkage Checker exclusion XML files.\n+ *\n+ * <p>An instance of this class can process one document and cannot be reused for other documents.\n+ */\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  /**\n+   * Stack to hold the ancestors of the XML element in {@link #startElement(String, String, String,\n+   * Attributes)}.\n+   */\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {\n+    return matchers.build();\n+  }\n+\n+  @Override\n+  public void startDocument() {\n+    if (matchers != null) {\n+      throw new IllegalStateException(\"This handler started reading document already\");\n+    }\n+    matchers = ImmutableList.builder();\n+  }\n+\n+  private void addMatcherToTop(Object child) throws SAXException {\n+    SymbolProblemMatcher parent = stack.peek();\n+    if (parent instanceof SourceMatcher && child instanceof SymbolProblemSourceMatcher) {\n+      ((SourceMatcher) parent).setMatcher((SymbolProblemSourceMatcher) child);\n+    } else if (parent instanceof TargetMatcher && child instanceof SymbolProblemTargetMatcher) {\n+      ((TargetMatcher) parent).setMatcher((SymbolProblemTargetMatcher) child);\n+    } else {\n+      throw new SAXException(\n+          \"Unexpected parent-child relationship. Parent:\" + parent + \", child:\" + child);\n+    }\n+  }\n+\n+  @Override\n+  public void startElement(\n+      String namespaceURI, String localName, String qName, Attributes attributes)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyNDI5Mw=="}, "originalCommit": {"oid": "9a2dc6eeed9cf9f053c40f6a0609afccab1f9d76"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDQ3MDEwOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjoyMDo1M1rOFzk1Hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDozMDo1MlrOFzrCuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyNTExOQ==", "bodyText": "It's OK and arguably better to simply ignore unrecongized elements.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389625119", "createdAt": "2020-03-09T12:20:53Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/**\n+ * Handler for Linkage Checker exclusion XML files.\n+ *\n+ * <p>An instance of this class can process one document and cannot be reused for other documents.\n+ */\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  /**\n+   * Stack to hold the ancestors of the XML element in {@link #startElement(String, String, String,\n+   * Attributes)}.\n+   */\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {\n+    return matchers.build();\n+  }\n+\n+  @Override\n+  public void startDocument() {\n+    if (matchers != null) {\n+      throw new IllegalStateException(\"This handler started reading document already\");\n+    }\n+    matchers = ImmutableList.builder();\n+  }\n+\n+  private void addMatcherToTop(Object child) throws SAXException {\n+    SymbolProblemMatcher parent = stack.peek();\n+    if (parent instanceof SourceMatcher && child instanceof SymbolProblemSourceMatcher) {\n+      ((SourceMatcher) parent).setMatcher((SymbolProblemSourceMatcher) child);\n+    } else if (parent instanceof TargetMatcher && child instanceof SymbolProblemTargetMatcher) {\n+      ((TargetMatcher) parent).setMatcher((SymbolProblemTargetMatcher) child);\n+    } else {\n+      throw new SAXException(\n+          \"Unexpected parent-child relationship. Parent:\" + parent + \", child:\" + child);\n+    }\n+  }\n+\n+  @Override\n+  public void startElement(\n+      String namespaceURI, String localName, String qName, Attributes attributes)\n+      throws SAXException {\n+    if (!namespaceURI.isEmpty()) {\n+      throw new SAXException(\"The exclusion rule does not support XML namespace\");\n+    }\n+    switch (localName) {\n+      case \"LinkageCheckerFilter\":\n+        break;\n+      case \"LinkageError\":\n+        stack.push(new LinkageErrorMatcher());\n+        break;\n+      case \"Source\":\n+        SourceMatcher sourceMatcher = new SourceMatcher();\n+        ((LinkageErrorMatcher) stack.peek()).setSourceMatcher(sourceMatcher);\n+        stack.push(sourceMatcher);\n+        break;\n+      case \"Target\":\n+        TargetMatcher targetMatcher = new TargetMatcher();\n+        ((LinkageErrorMatcher) stack.peek()).setTargetMatcher(targetMatcher);\n+        stack.push(targetMatcher);\n+        break;\n+      case \"Package\":\n+        PackageMatcher packageMatcher = new PackageMatcher(attributes.getValue(\"name\"));\n+        addMatcherToTop(packageMatcher);\n+        break;\n+      case \"Class\":\n+        String classNameOnClass = attributes.getValue(\"name\");\n+        ClassMatcher classMatcher = new ClassMatcher(classNameOnClass);\n+        addMatcherToTop(classMatcher);\n+        break;\n+      case \"Method\":\n+        String classNameOnMethod = attributes.getValue(\"className\");\n+        MethodMatcher methodMatcher =\n+            new MethodMatcher(classNameOnMethod, attributes.getValue(\"name\"));\n+        addMatcherToTop(methodMatcher);\n+        break;\n+      case \"Field\":\n+        String classNameOnField = attributes.getValue(\"className\");\n+        FieldMatcher fieldMatcher = new FieldMatcher(classNameOnField, attributes.getValue(\"name\"));\n+        addMatcherToTop(fieldMatcher);\n+        break;\n+      default:\n+        throw new SAXException(\"Unknown tag \" + localName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a2dc6eeed9cf9f053c40f6a0609afccab1f9d76"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyNjkwNA==", "bodyText": "I prefer to show errors for unrecognized elements. The errors help to detect typos.\nMore validation will be done in #1277", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389726904", "createdAt": "2020-03-09T14:30:52Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/**\n+ * Handler for Linkage Checker exclusion XML files.\n+ *\n+ * <p>An instance of this class can process one document and cannot be reused for other documents.\n+ */\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  /**\n+   * Stack to hold the ancestors of the XML element in {@link #startElement(String, String, String,\n+   * Attributes)}.\n+   */\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {\n+    return matchers.build();\n+  }\n+\n+  @Override\n+  public void startDocument() {\n+    if (matchers != null) {\n+      throw new IllegalStateException(\"This handler started reading document already\");\n+    }\n+    matchers = ImmutableList.builder();\n+  }\n+\n+  private void addMatcherToTop(Object child) throws SAXException {\n+    SymbolProblemMatcher parent = stack.peek();\n+    if (parent instanceof SourceMatcher && child instanceof SymbolProblemSourceMatcher) {\n+      ((SourceMatcher) parent).setMatcher((SymbolProblemSourceMatcher) child);\n+    } else if (parent instanceof TargetMatcher && child instanceof SymbolProblemTargetMatcher) {\n+      ((TargetMatcher) parent).setMatcher((SymbolProblemTargetMatcher) child);\n+    } else {\n+      throw new SAXException(\n+          \"Unexpected parent-child relationship. Parent:\" + parent + \", child:\" + child);\n+    }\n+  }\n+\n+  @Override\n+  public void startElement(\n+      String namespaceURI, String localName, String qName, Attributes attributes)\n+      throws SAXException {\n+    if (!namespaceURI.isEmpty()) {\n+      throw new SAXException(\"The exclusion rule does not support XML namespace\");\n+    }\n+    switch (localName) {\n+      case \"LinkageCheckerFilter\":\n+        break;\n+      case \"LinkageError\":\n+        stack.push(new LinkageErrorMatcher());\n+        break;\n+      case \"Source\":\n+        SourceMatcher sourceMatcher = new SourceMatcher();\n+        ((LinkageErrorMatcher) stack.peek()).setSourceMatcher(sourceMatcher);\n+        stack.push(sourceMatcher);\n+        break;\n+      case \"Target\":\n+        TargetMatcher targetMatcher = new TargetMatcher();\n+        ((LinkageErrorMatcher) stack.peek()).setTargetMatcher(targetMatcher);\n+        stack.push(targetMatcher);\n+        break;\n+      case \"Package\":\n+        PackageMatcher packageMatcher = new PackageMatcher(attributes.getValue(\"name\"));\n+        addMatcherToTop(packageMatcher);\n+        break;\n+      case \"Class\":\n+        String classNameOnClass = attributes.getValue(\"name\");\n+        ClassMatcher classMatcher = new ClassMatcher(classNameOnClass);\n+        addMatcherToTop(classMatcher);\n+        break;\n+      case \"Method\":\n+        String classNameOnMethod = attributes.getValue(\"className\");\n+        MethodMatcher methodMatcher =\n+            new MethodMatcher(classNameOnMethod, attributes.getValue(\"name\"));\n+        addMatcherToTop(methodMatcher);\n+        break;\n+      case \"Field\":\n+        String classNameOnField = attributes.getValue(\"className\");\n+        FieldMatcher fieldMatcher = new FieldMatcher(classNameOnField, attributes.getValue(\"name\"));\n+        addMatcherToTop(fieldMatcher);\n+        break;\n+      default:\n+        throw new SAXException(\"Unknown tag \" + localName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyNTExOQ=="}, "originalCommit": {"oid": "9a2dc6eeed9cf9f053c40f6a0609afccab1f9d76"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNDQ3MzQ0OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/MethodMatcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxMjoyMjowMVrOFzk3DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDozMzo0NVrOFzrKUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyNTYxMw==", "bodyText": "final", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389625613", "createdAt": "2020-03-09T12:22:01Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/MethodMatcher.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+/** Matcher on method symbols. */\n+class MethodMatcher implements SymbolProblemTargetMatcher {\n+\n+  private String className;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a2dc6eeed9cf9f053c40f6a0609afccab1f9d76"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTcyODg1MA==", "bodyText": "Updated.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389728850", "createdAt": "2020-03-09T14:33:45Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/MethodMatcher.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+/** Matcher on method symbols. */\n+class MethodMatcher implements SymbolProblemTargetMatcher {\n+\n+  private String className;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTYyNTYxMw=="}, "originalCommit": {"oid": "9a2dc6eeed9cf9f053c40f6a0609afccab1f9d76"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTE5MTgxOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo1MjowOVrOFzr7Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTo0NDozNVrOFzuKHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0MTM0Nw==", "bodyText": "This is an awful lot of casting and instanceof, and it makes me wonder if we're not taking advantage of polymorphism where we could, or perhaps we don't have quite the right class hierarchy.\nIs there perhaps some way SymbolProblemMatcher.setMatcher could simply work when it's passed any instance of SymbolProblemTargetMatcher?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389741347", "createdAt": "2020-03-09T14:52:09Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/**\n+ * Handler for Linkage Checker exclusion XML files.\n+ *\n+ * <p>An instance of this class can process one document and cannot be reused for other documents.\n+ */\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  /**\n+   * Stack to hold the ancestors of the XML element in {@link #startElement(String, String, String,\n+   * Attributes)}.\n+   */\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {\n+    return matchers.build();\n+  }\n+\n+  @Override\n+  public void startDocument() {\n+    if (matchers != null) {\n+      throw new IllegalStateException(\"This handler started reading document already\");\n+    }\n+    matchers = ImmutableList.builder();\n+  }\n+\n+  /** Adds {@code child} to the parent matcher that is at the top of the {@link #stack}. */\n+  private void addMatcherToParent(SymbolProblemTargetMatcher child) throws SAXException {\n+    SymbolProblemMatcher parent = stack.peek();\n+    if (parent instanceof SourceMatcher && child instanceof SymbolProblemSourceMatcher) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63f571cfc890d7b0096bbb91833f025e7dd4786f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0OTg4Ng==", "bodyText": "SymbolProblemMatcher.setMatcher could simply work when it's passed any instance of SymbolProblemTargetMatcher?\n\nNo, SourceMatcher cannot take FieldMatcher. I replaced the stack and this function with the two variables linkageErrorMatcher and symbolProblemMatcher. Now the logic is much simpler. Does this look good now?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389749886", "createdAt": "2020-03-09T15:04:00Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/**\n+ * Handler for Linkage Checker exclusion XML files.\n+ *\n+ * <p>An instance of this class can process one document and cannot be reused for other documents.\n+ */\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  /**\n+   * Stack to hold the ancestors of the XML element in {@link #startElement(String, String, String,\n+   * Attributes)}.\n+   */\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {\n+    return matchers.build();\n+  }\n+\n+  @Override\n+  public void startDocument() {\n+    if (matchers != null) {\n+      throw new IllegalStateException(\"This handler started reading document already\");\n+    }\n+    matchers = ImmutableList.builder();\n+  }\n+\n+  /** Adds {@code child} to the parent matcher that is at the top of the {@link #stack}. */\n+  private void addMatcherToParent(SymbolProblemTargetMatcher child) throws SAXException {\n+    SymbolProblemMatcher parent = stack.peek();\n+    if (parent instanceof SourceMatcher && child instanceof SymbolProblemSourceMatcher) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0MTM0Nw=="}, "originalCommit": {"oid": "63f571cfc890d7b0096bbb91833f025e7dd4786f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc3Nzk0OQ==", "bodyText": "SymbolProblemMatcher's addChild now may be the one you mentioned above:\n  default void addChild(SymbolProblemTargetMatcher child) {\n    throw new IllegalStateException(\"This element is not supposed to take child element\");\n  }", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389777949", "createdAt": "2020-03-09T15:44:35Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/**\n+ * Handler for Linkage Checker exclusion XML files.\n+ *\n+ * <p>An instance of this class can process one document and cannot be reused for other documents.\n+ */\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  /**\n+   * Stack to hold the ancestors of the XML element in {@link #startElement(String, String, String,\n+   * Attributes)}.\n+   */\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {\n+    return matchers.build();\n+  }\n+\n+  @Override\n+  public void startDocument() {\n+    if (matchers != null) {\n+      throw new IllegalStateException(\"This handler started reading document already\");\n+    }\n+    matchers = ImmutableList.builder();\n+  }\n+\n+  /** Adds {@code child} to the parent matcher that is at the top of the {@link #stack}. */\n+  private void addMatcherToParent(SymbolProblemTargetMatcher child) throws SAXException {\n+    SymbolProblemMatcher parent = stack.peek();\n+    if (parent instanceof SourceMatcher && child instanceof SymbolProblemSourceMatcher) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0MTM0Nw=="}, "originalCommit": {"oid": "63f571cfc890d7b0096bbb91833f025e7dd4786f"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTE5OTgxOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo1Mzo1NlrOFzsAUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTowNTowMlrOFzsfWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0MjY3Mw==", "bodyText": "I don't think this case can happen, given that this case would have been detected already unless the document is malformed, in which case you'll also have errored out before this is called.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389742673", "createdAt": "2020-03-09T14:53:56Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/**\n+ * Handler for Linkage Checker exclusion XML files.\n+ *\n+ * <p>An instance of this class can process one document and cannot be reused for other documents.\n+ */\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  /**\n+   * Stack to hold the ancestors of the XML element in {@link #startElement(String, String, String,\n+   * Attributes)}.\n+   */\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {\n+    return matchers.build();\n+  }\n+\n+  @Override\n+  public void startDocument() {\n+    if (matchers != null) {\n+      throw new IllegalStateException(\"This handler started reading document already\");\n+    }\n+    matchers = ImmutableList.builder();\n+  }\n+\n+  /** Adds {@code child} to the parent matcher that is at the top of the {@link #stack}. */\n+  private void addMatcherToParent(SymbolProblemTargetMatcher child) throws SAXException {\n+    SymbolProblemMatcher parent = stack.peek();\n+    if (parent instanceof SourceMatcher && child instanceof SymbolProblemSourceMatcher) {\n+      ((SourceMatcher) parent).setMatcher((SymbolProblemSourceMatcher) child);\n+    } else if (parent instanceof TargetMatcher) {\n+      ((TargetMatcher) parent).setMatcher(child);\n+    } else {\n+      throw new SAXException(\n+          \"Unexpected parent-child relationship. Parent:\" + parent + \", child:\" + child);\n+    }\n+  }\n+\n+  @Override\n+  public void startElement(\n+      String namespaceUri, String localName, String qualifiedName, Attributes attributes)\n+      throws SAXException {\n+    if (!namespaceUri.isEmpty()) {\n+      throw new SAXException(\n+          \"unrecognized element: \" + qualifiedName + \" in namespace \" + namespaceUri);\n+    }\n+    switch (localName) {\n+      case \"LinkageCheckerFilter\":\n+        break;\n+      case \"LinkageError\":\n+        stack.push(new LinkageErrorMatcher());\n+        break;\n+      case \"Source\":\n+        SourceMatcher sourceMatcher = new SourceMatcher();\n+        ((LinkageErrorMatcher) stack.peek()).setSourceMatcher(sourceMatcher);\n+        stack.push(sourceMatcher);\n+        break;\n+      case \"Target\":\n+        TargetMatcher targetMatcher = new TargetMatcher();\n+        ((LinkageErrorMatcher) stack.peek()).setTargetMatcher(targetMatcher);\n+        stack.push(targetMatcher);\n+        break;\n+      case \"Package\":\n+        PackageMatcher packageMatcher = new PackageMatcher(attributes.getValue(\"name\"));\n+        addMatcherToParent(packageMatcher);\n+        break;\n+      case \"Class\":\n+        String classNameOnClass = attributes.getValue(\"name\");\n+        ClassMatcher classMatcher = new ClassMatcher(classNameOnClass);\n+        addMatcherToParent(classMatcher);\n+        break;\n+      case \"Method\":\n+        String classNameOnMethod = attributes.getValue(\"className\");\n+        MethodMatcher methodMatcher =\n+            new MethodMatcher(classNameOnMethod, attributes.getValue(\"name\"));\n+        addMatcherToParent(methodMatcher);\n+        break;\n+      case \"Field\":\n+        String classNameOnField = attributes.getValue(\"className\");\n+        FieldMatcher fieldMatcher = new FieldMatcher(classNameOnField, attributes.getValue(\"name\"));\n+        addMatcherToParent(fieldMatcher);\n+        break;\n+      default:\n+        throw new SAXException(\"Unknown tag \" + localName);\n+    }\n+  }\n+\n+  @Override\n+  public void endElement(String namespaceUri, String localName, String qualifiedName)\n+      throws SAXException {\n+    SymbolProblemMatcher poppedMatcher;\n+    if (!namespaceUri.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63f571cfc890d7b0096bbb91833f025e7dd4786f"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc1MDYxOQ==", "bodyText": "Removed this check in endElement.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389750619", "createdAt": "2020-03-09T15:05:02Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/**\n+ * Handler for Linkage Checker exclusion XML files.\n+ *\n+ * <p>An instance of this class can process one document and cannot be reused for other documents.\n+ */\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  /**\n+   * Stack to hold the ancestors of the XML element in {@link #startElement(String, String, String,\n+   * Attributes)}.\n+   */\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {\n+    return matchers.build();\n+  }\n+\n+  @Override\n+  public void startDocument() {\n+    if (matchers != null) {\n+      throw new IllegalStateException(\"This handler started reading document already\");\n+    }\n+    matchers = ImmutableList.builder();\n+  }\n+\n+  /** Adds {@code child} to the parent matcher that is at the top of the {@link #stack}. */\n+  private void addMatcherToParent(SymbolProblemTargetMatcher child) throws SAXException {\n+    SymbolProblemMatcher parent = stack.peek();\n+    if (parent instanceof SourceMatcher && child instanceof SymbolProblemSourceMatcher) {\n+      ((SourceMatcher) parent).setMatcher((SymbolProblemSourceMatcher) child);\n+    } else if (parent instanceof TargetMatcher) {\n+      ((TargetMatcher) parent).setMatcher(child);\n+    } else {\n+      throw new SAXException(\n+          \"Unexpected parent-child relationship. Parent:\" + parent + \", child:\" + child);\n+    }\n+  }\n+\n+  @Override\n+  public void startElement(\n+      String namespaceUri, String localName, String qualifiedName, Attributes attributes)\n+      throws SAXException {\n+    if (!namespaceUri.isEmpty()) {\n+      throw new SAXException(\n+          \"unrecognized element: \" + qualifiedName + \" in namespace \" + namespaceUri);\n+    }\n+    switch (localName) {\n+      case \"LinkageCheckerFilter\":\n+        break;\n+      case \"LinkageError\":\n+        stack.push(new LinkageErrorMatcher());\n+        break;\n+      case \"Source\":\n+        SourceMatcher sourceMatcher = new SourceMatcher();\n+        ((LinkageErrorMatcher) stack.peek()).setSourceMatcher(sourceMatcher);\n+        stack.push(sourceMatcher);\n+        break;\n+      case \"Target\":\n+        TargetMatcher targetMatcher = new TargetMatcher();\n+        ((LinkageErrorMatcher) stack.peek()).setTargetMatcher(targetMatcher);\n+        stack.push(targetMatcher);\n+        break;\n+      case \"Package\":\n+        PackageMatcher packageMatcher = new PackageMatcher(attributes.getValue(\"name\"));\n+        addMatcherToParent(packageMatcher);\n+        break;\n+      case \"Class\":\n+        String classNameOnClass = attributes.getValue(\"name\");\n+        ClassMatcher classMatcher = new ClassMatcher(classNameOnClass);\n+        addMatcherToParent(classMatcher);\n+        break;\n+      case \"Method\":\n+        String classNameOnMethod = attributes.getValue(\"className\");\n+        MethodMatcher methodMatcher =\n+            new MethodMatcher(classNameOnMethod, attributes.getValue(\"name\"));\n+        addMatcherToParent(methodMatcher);\n+        break;\n+      case \"Field\":\n+        String classNameOnField = attributes.getValue(\"className\");\n+        FieldMatcher fieldMatcher = new FieldMatcher(classNameOnField, attributes.getValue(\"name\"));\n+        addMatcherToParent(fieldMatcher);\n+        break;\n+      default:\n+        throw new SAXException(\"Unknown tag \" + localName);\n+    }\n+  }\n+\n+  @Override\n+  public void endElement(String namespaceUri, String localName, String qualifiedName)\n+      throws SAXException {\n+    SymbolProblemMatcher poppedMatcher;\n+    if (!namespaceUri.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0MjY3Mw=="}, "originalCommit": {"oid": "63f571cfc890d7b0096bbb91833f025e7dd4786f"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTIwMjMyOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo1NDozMFrOFzsB6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTowNTo1OFrOFzsh3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0MzA4MA==", "bodyText": "I'm not sure this case is reachable either", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389743080", "createdAt": "2020-03-09T14:54:30Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/**\n+ * Handler for Linkage Checker exclusion XML files.\n+ *\n+ * <p>An instance of this class can process one document and cannot be reused for other documents.\n+ */\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  /**\n+   * Stack to hold the ancestors of the XML element in {@link #startElement(String, String, String,\n+   * Attributes)}.\n+   */\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {\n+    return matchers.build();\n+  }\n+\n+  @Override\n+  public void startDocument() {\n+    if (matchers != null) {\n+      throw new IllegalStateException(\"This handler started reading document already\");\n+    }\n+    matchers = ImmutableList.builder();\n+  }\n+\n+  /** Adds {@code child} to the parent matcher that is at the top of the {@link #stack}. */\n+  private void addMatcherToParent(SymbolProblemTargetMatcher child) throws SAXException {\n+    SymbolProblemMatcher parent = stack.peek();\n+    if (parent instanceof SourceMatcher && child instanceof SymbolProblemSourceMatcher) {\n+      ((SourceMatcher) parent).setMatcher((SymbolProblemSourceMatcher) child);\n+    } else if (parent instanceof TargetMatcher) {\n+      ((TargetMatcher) parent).setMatcher(child);\n+    } else {\n+      throw new SAXException(\n+          \"Unexpected parent-child relationship. Parent:\" + parent + \", child:\" + child);\n+    }\n+  }\n+\n+  @Override\n+  public void startElement(\n+      String namespaceUri, String localName, String qualifiedName, Attributes attributes)\n+      throws SAXException {\n+    if (!namespaceUri.isEmpty()) {\n+      throw new SAXException(\n+          \"unrecognized element: \" + qualifiedName + \" in namespace \" + namespaceUri);\n+    }\n+    switch (localName) {\n+      case \"LinkageCheckerFilter\":\n+        break;\n+      case \"LinkageError\":\n+        stack.push(new LinkageErrorMatcher());\n+        break;\n+      case \"Source\":\n+        SourceMatcher sourceMatcher = new SourceMatcher();\n+        ((LinkageErrorMatcher) stack.peek()).setSourceMatcher(sourceMatcher);\n+        stack.push(sourceMatcher);\n+        break;\n+      case \"Target\":\n+        TargetMatcher targetMatcher = new TargetMatcher();\n+        ((LinkageErrorMatcher) stack.peek()).setTargetMatcher(targetMatcher);\n+        stack.push(targetMatcher);\n+        break;\n+      case \"Package\":\n+        PackageMatcher packageMatcher = new PackageMatcher(attributes.getValue(\"name\"));\n+        addMatcherToParent(packageMatcher);\n+        break;\n+      case \"Class\":\n+        String classNameOnClass = attributes.getValue(\"name\");\n+        ClassMatcher classMatcher = new ClassMatcher(classNameOnClass);\n+        addMatcherToParent(classMatcher);\n+        break;\n+      case \"Method\":\n+        String classNameOnMethod = attributes.getValue(\"className\");\n+        MethodMatcher methodMatcher =\n+            new MethodMatcher(classNameOnMethod, attributes.getValue(\"name\"));\n+        addMatcherToParent(methodMatcher);\n+        break;\n+      case \"Field\":\n+        String classNameOnField = attributes.getValue(\"className\");\n+        FieldMatcher fieldMatcher = new FieldMatcher(classNameOnField, attributes.getValue(\"name\"));\n+        addMatcherToParent(fieldMatcher);\n+        break;\n+      default:\n+        throw new SAXException(\"Unknown tag \" + localName);\n+    }\n+  }\n+\n+  @Override\n+  public void endElement(String namespaceUri, String localName, String qualifiedName)\n+      throws SAXException {\n+    SymbolProblemMatcher poppedMatcher;\n+    if (!namespaceUri.isEmpty()) {\n+      throw new SAXException(\n+          \"unrecognized element: \" + qualifiedName + \" in namespace \" + namespaceUri);\n+    }\n+    switch (localName) {\n+      case \"Source\":\n+      case \"Target\":\n+        poppedMatcher = stack.pop();\n+        if (!(poppedMatcher instanceof TargetMatcher)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63f571cfc890d7b0096bbb91833f025e7dd4786f"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc1MTI2Mw==", "bodyText": "Removed endElement altogether.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389751263", "createdAt": "2020-03-09T15:05:58Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/**\n+ * Handler for Linkage Checker exclusion XML files.\n+ *\n+ * <p>An instance of this class can process one document and cannot be reused for other documents.\n+ */\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  /**\n+   * Stack to hold the ancestors of the XML element in {@link #startElement(String, String, String,\n+   * Attributes)}.\n+   */\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {\n+    return matchers.build();\n+  }\n+\n+  @Override\n+  public void startDocument() {\n+    if (matchers != null) {\n+      throw new IllegalStateException(\"This handler started reading document already\");\n+    }\n+    matchers = ImmutableList.builder();\n+  }\n+\n+  /** Adds {@code child} to the parent matcher that is at the top of the {@link #stack}. */\n+  private void addMatcherToParent(SymbolProblemTargetMatcher child) throws SAXException {\n+    SymbolProblemMatcher parent = stack.peek();\n+    if (parent instanceof SourceMatcher && child instanceof SymbolProblemSourceMatcher) {\n+      ((SourceMatcher) parent).setMatcher((SymbolProblemSourceMatcher) child);\n+    } else if (parent instanceof TargetMatcher) {\n+      ((TargetMatcher) parent).setMatcher(child);\n+    } else {\n+      throw new SAXException(\n+          \"Unexpected parent-child relationship. Parent:\" + parent + \", child:\" + child);\n+    }\n+  }\n+\n+  @Override\n+  public void startElement(\n+      String namespaceUri, String localName, String qualifiedName, Attributes attributes)\n+      throws SAXException {\n+    if (!namespaceUri.isEmpty()) {\n+      throw new SAXException(\n+          \"unrecognized element: \" + qualifiedName + \" in namespace \" + namespaceUri);\n+    }\n+    switch (localName) {\n+      case \"LinkageCheckerFilter\":\n+        break;\n+      case \"LinkageError\":\n+        stack.push(new LinkageErrorMatcher());\n+        break;\n+      case \"Source\":\n+        SourceMatcher sourceMatcher = new SourceMatcher();\n+        ((LinkageErrorMatcher) stack.peek()).setSourceMatcher(sourceMatcher);\n+        stack.push(sourceMatcher);\n+        break;\n+      case \"Target\":\n+        TargetMatcher targetMatcher = new TargetMatcher();\n+        ((LinkageErrorMatcher) stack.peek()).setTargetMatcher(targetMatcher);\n+        stack.push(targetMatcher);\n+        break;\n+      case \"Package\":\n+        PackageMatcher packageMatcher = new PackageMatcher(attributes.getValue(\"name\"));\n+        addMatcherToParent(packageMatcher);\n+        break;\n+      case \"Class\":\n+        String classNameOnClass = attributes.getValue(\"name\");\n+        ClassMatcher classMatcher = new ClassMatcher(classNameOnClass);\n+        addMatcherToParent(classMatcher);\n+        break;\n+      case \"Method\":\n+        String classNameOnMethod = attributes.getValue(\"className\");\n+        MethodMatcher methodMatcher =\n+            new MethodMatcher(classNameOnMethod, attributes.getValue(\"name\"));\n+        addMatcherToParent(methodMatcher);\n+        break;\n+      case \"Field\":\n+        String classNameOnField = attributes.getValue(\"className\");\n+        FieldMatcher fieldMatcher = new FieldMatcher(classNameOnField, attributes.getValue(\"name\"));\n+        addMatcherToParent(fieldMatcher);\n+        break;\n+      default:\n+        throw new SAXException(\"Unknown tag \" + localName);\n+    }\n+  }\n+\n+  @Override\n+  public void endElement(String namespaceUri, String localName, String qualifiedName)\n+      throws SAXException {\n+    SymbolProblemMatcher poppedMatcher;\n+    if (!namespaceUri.isEmpty()) {\n+      throw new SAXException(\n+          \"unrecognized element: \" + qualifiedName + \" in namespace \" + namespaceUri);\n+    }\n+    switch (localName) {\n+      case \"Source\":\n+      case \"Target\":\n+        poppedMatcher = stack.pop();\n+        if (!(poppedMatcher instanceof TargetMatcher)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0MzA4MA=="}, "originalCommit": {"oid": "63f571cfc890d7b0096bbb91833f025e7dd4786f"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTIwNzY1OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNDo1NTo0M1rOFzsFWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNTowNjo1N1rOFzskcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0Mzk2MQ==", "bodyText": "!stack.isEmpty()", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389743961", "createdAt": "2020-03-09T14:55:43Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/**\n+ * Handler for Linkage Checker exclusion XML files.\n+ *\n+ * <p>An instance of this class can process one document and cannot be reused for other documents.\n+ */\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  /**\n+   * Stack to hold the ancestors of the XML element in {@link #startElement(String, String, String,\n+   * Attributes)}.\n+   */\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {\n+    return matchers.build();\n+  }\n+\n+  @Override\n+  public void startDocument() {\n+    if (matchers != null) {\n+      throw new IllegalStateException(\"This handler started reading document already\");\n+    }\n+    matchers = ImmutableList.builder();\n+  }\n+\n+  /** Adds {@code child} to the parent matcher that is at the top of the {@link #stack}. */\n+  private void addMatcherToParent(SymbolProblemTargetMatcher child) throws SAXException {\n+    SymbolProblemMatcher parent = stack.peek();\n+    if (parent instanceof SourceMatcher && child instanceof SymbolProblemSourceMatcher) {\n+      ((SourceMatcher) parent).setMatcher((SymbolProblemSourceMatcher) child);\n+    } else if (parent instanceof TargetMatcher) {\n+      ((TargetMatcher) parent).setMatcher(child);\n+    } else {\n+      throw new SAXException(\n+          \"Unexpected parent-child relationship. Parent:\" + parent + \", child:\" + child);\n+    }\n+  }\n+\n+  @Override\n+  public void startElement(\n+      String namespaceUri, String localName, String qualifiedName, Attributes attributes)\n+      throws SAXException {\n+    if (!namespaceUri.isEmpty()) {\n+      throw new SAXException(\n+          \"unrecognized element: \" + qualifiedName + \" in namespace \" + namespaceUri);\n+    }\n+    switch (localName) {\n+      case \"LinkageCheckerFilter\":\n+        break;\n+      case \"LinkageError\":\n+        stack.push(new LinkageErrorMatcher());\n+        break;\n+      case \"Source\":\n+        SourceMatcher sourceMatcher = new SourceMatcher();\n+        ((LinkageErrorMatcher) stack.peek()).setSourceMatcher(sourceMatcher);\n+        stack.push(sourceMatcher);\n+        break;\n+      case \"Target\":\n+        TargetMatcher targetMatcher = new TargetMatcher();\n+        ((LinkageErrorMatcher) stack.peek()).setTargetMatcher(targetMatcher);\n+        stack.push(targetMatcher);\n+        break;\n+      case \"Package\":\n+        PackageMatcher packageMatcher = new PackageMatcher(attributes.getValue(\"name\"));\n+        addMatcherToParent(packageMatcher);\n+        break;\n+      case \"Class\":\n+        String classNameOnClass = attributes.getValue(\"name\");\n+        ClassMatcher classMatcher = new ClassMatcher(classNameOnClass);\n+        addMatcherToParent(classMatcher);\n+        break;\n+      case \"Method\":\n+        String classNameOnMethod = attributes.getValue(\"className\");\n+        MethodMatcher methodMatcher =\n+            new MethodMatcher(classNameOnMethod, attributes.getValue(\"name\"));\n+        addMatcherToParent(methodMatcher);\n+        break;\n+      case \"Field\":\n+        String classNameOnField = attributes.getValue(\"className\");\n+        FieldMatcher fieldMatcher = new FieldMatcher(classNameOnField, attributes.getValue(\"name\"));\n+        addMatcherToParent(fieldMatcher);\n+        break;\n+      default:\n+        throw new SAXException(\"Unknown tag \" + localName);\n+    }\n+  }\n+\n+  @Override\n+  public void endElement(String namespaceUri, String localName, String qualifiedName)\n+      throws SAXException {\n+    SymbolProblemMatcher poppedMatcher;\n+    if (!namespaceUri.isEmpty()) {\n+      throw new SAXException(\n+          \"unrecognized element: \" + qualifiedName + \" in namespace \" + namespaceUri);\n+    }\n+    switch (localName) {\n+      case \"Source\":\n+      case \"Target\":\n+        poppedMatcher = stack.pop();\n+        if (!(poppedMatcher instanceof TargetMatcher)\n+            && !(poppedMatcher instanceof SourceMatcher)) {\n+          throw new SAXException(\"Unexpected matcher in stack\");\n+        }\n+        break;\n+      case \"LinkageError\":\n+        poppedMatcher = stack.pop();\n+        if (!(poppedMatcher instanceof LinkageErrorMatcher)) {\n+          throw new SAXException(\"Unexpected stack status after reading LinkageError element\");\n+        }\n+        matchers.add((LinkageErrorMatcher) poppedMatcher);\n+    }\n+  }\n+\n+  @Override\n+  public void endDocument() throws SAXException {\n+    if (stack.size() != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63f571cfc890d7b0096bbb91833f025e7dd4786f"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc1MTkyMA==", "bodyText": "Good catch. But endDocument is no longer needed.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389751920", "createdAt": "2020-03-09T15:06:57Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/ExclusionFileHandler.java", "diffHunk": "@@ -0,0 +1,146 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+import com.google.common.collect.ImmutableList;\n+import java.util.ArrayDeque;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.DefaultHandler;\n+\n+/**\n+ * Handler for Linkage Checker exclusion XML files.\n+ *\n+ * <p>An instance of this class can process one document and cannot be reused for other documents.\n+ */\n+class ExclusionFileHandler extends DefaultHandler {\n+\n+  /**\n+   * Stack to hold the ancestors of the XML element in {@link #startElement(String, String, String,\n+   * Attributes)}.\n+   */\n+  private ArrayDeque<SymbolProblemMatcher> stack = new ArrayDeque<>();\n+\n+  private ImmutableList.Builder<LinkageErrorMatcher> matchers;\n+\n+  ImmutableList<LinkageErrorMatcher> getMatchers() {\n+    return matchers.build();\n+  }\n+\n+  @Override\n+  public void startDocument() {\n+    if (matchers != null) {\n+      throw new IllegalStateException(\"This handler started reading document already\");\n+    }\n+    matchers = ImmutableList.builder();\n+  }\n+\n+  /** Adds {@code child} to the parent matcher that is at the top of the {@link #stack}. */\n+  private void addMatcherToParent(SymbolProblemTargetMatcher child) throws SAXException {\n+    SymbolProblemMatcher parent = stack.peek();\n+    if (parent instanceof SourceMatcher && child instanceof SymbolProblemSourceMatcher) {\n+      ((SourceMatcher) parent).setMatcher((SymbolProblemSourceMatcher) child);\n+    } else if (parent instanceof TargetMatcher) {\n+      ((TargetMatcher) parent).setMatcher(child);\n+    } else {\n+      throw new SAXException(\n+          \"Unexpected parent-child relationship. Parent:\" + parent + \", child:\" + child);\n+    }\n+  }\n+\n+  @Override\n+  public void startElement(\n+      String namespaceUri, String localName, String qualifiedName, Attributes attributes)\n+      throws SAXException {\n+    if (!namespaceUri.isEmpty()) {\n+      throw new SAXException(\n+          \"unrecognized element: \" + qualifiedName + \" in namespace \" + namespaceUri);\n+    }\n+    switch (localName) {\n+      case \"LinkageCheckerFilter\":\n+        break;\n+      case \"LinkageError\":\n+        stack.push(new LinkageErrorMatcher());\n+        break;\n+      case \"Source\":\n+        SourceMatcher sourceMatcher = new SourceMatcher();\n+        ((LinkageErrorMatcher) stack.peek()).setSourceMatcher(sourceMatcher);\n+        stack.push(sourceMatcher);\n+        break;\n+      case \"Target\":\n+        TargetMatcher targetMatcher = new TargetMatcher();\n+        ((LinkageErrorMatcher) stack.peek()).setTargetMatcher(targetMatcher);\n+        stack.push(targetMatcher);\n+        break;\n+      case \"Package\":\n+        PackageMatcher packageMatcher = new PackageMatcher(attributes.getValue(\"name\"));\n+        addMatcherToParent(packageMatcher);\n+        break;\n+      case \"Class\":\n+        String classNameOnClass = attributes.getValue(\"name\");\n+        ClassMatcher classMatcher = new ClassMatcher(classNameOnClass);\n+        addMatcherToParent(classMatcher);\n+        break;\n+      case \"Method\":\n+        String classNameOnMethod = attributes.getValue(\"className\");\n+        MethodMatcher methodMatcher =\n+            new MethodMatcher(classNameOnMethod, attributes.getValue(\"name\"));\n+        addMatcherToParent(methodMatcher);\n+        break;\n+      case \"Field\":\n+        String classNameOnField = attributes.getValue(\"className\");\n+        FieldMatcher fieldMatcher = new FieldMatcher(classNameOnField, attributes.getValue(\"name\"));\n+        addMatcherToParent(fieldMatcher);\n+        break;\n+      default:\n+        throw new SAXException(\"Unknown tag \" + localName);\n+    }\n+  }\n+\n+  @Override\n+  public void endElement(String namespaceUri, String localName, String qualifiedName)\n+      throws SAXException {\n+    SymbolProblemMatcher poppedMatcher;\n+    if (!namespaceUri.isEmpty()) {\n+      throw new SAXException(\n+          \"unrecognized element: \" + qualifiedName + \" in namespace \" + namespaceUri);\n+    }\n+    switch (localName) {\n+      case \"Source\":\n+      case \"Target\":\n+        poppedMatcher = stack.pop();\n+        if (!(poppedMatcher instanceof TargetMatcher)\n+            && !(poppedMatcher instanceof SourceMatcher)) {\n+          throw new SAXException(\"Unexpected matcher in stack\");\n+        }\n+        break;\n+      case \"LinkageError\":\n+        poppedMatcher = stack.pop();\n+        if (!(poppedMatcher instanceof LinkageErrorMatcher)) {\n+          throw new SAXException(\"Unexpected stack status after reading LinkageError element\");\n+        }\n+        matchers.add((LinkageErrorMatcher) poppedMatcher);\n+    }\n+  }\n+\n+  @Override\n+  public void endDocument() throws SAXException {\n+    if (stack.size() != 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc0Mzk2MQ=="}, "originalCommit": {"oid": "63f571cfc890d7b0096bbb91833f025e7dd4786f"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNTQ5NTcxOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageErrorMatcher.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNjowMjo0MFrOFzu58A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxNzoxMDozNVrOFzxkYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc5MDE5Mg==", "bodyText": "all of --> all\nCan there be null matchers?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389790192", "createdAt": "2020-03-09T16:02:40Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageErrorMatcher.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+/** Matcher for linkage errors. A linkage error has a target symbol and a source class file. */\n+class LinkageErrorMatcher implements SymbolProblemMatcher {\n+\n+  /** Matcher for the source class of the linkage error */\n+  private SourceMatcher sourceMatcher;\n+\n+  /** Matcher for the target symbol of the linkage error */\n+  private TargetMatcher targetMatcher;\n+\n+  void setSourceMatcher(SourceMatcher sourceMatcher) {\n+    this.sourceMatcher = sourceMatcher;\n+  }\n+\n+  void setTargetMatcher(TargetMatcher targetMatcher) {\n+    this.targetMatcher = targetMatcher;\n+  }\n+\n+  /**\n+   * Returns true if all of non-null matchers of {@link #sourceMatcher} and {@link #targetMatcher}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cde15fd667bc1837a022829c27bca502f4d541c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzMzUzOA==", "bodyText": "No NullMatcher but sourceMatcher or targetMatcher field can be null.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389833538", "createdAt": "2020-03-09T17:10:08Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageErrorMatcher.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+/** Matcher for linkage errors. A linkage error has a target symbol and a source class file. */\n+class LinkageErrorMatcher implements SymbolProblemMatcher {\n+\n+  /** Matcher for the source class of the linkage error */\n+  private SourceMatcher sourceMatcher;\n+\n+  /** Matcher for the target symbol of the linkage error */\n+  private TargetMatcher targetMatcher;\n+\n+  void setSourceMatcher(SourceMatcher sourceMatcher) {\n+    this.sourceMatcher = sourceMatcher;\n+  }\n+\n+  void setTargetMatcher(TargetMatcher targetMatcher) {\n+    this.targetMatcher = targetMatcher;\n+  }\n+\n+  /**\n+   * Returns true if all of non-null matchers of {@link #sourceMatcher} and {@link #targetMatcher}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc5MDE5Mg=="}, "originalCommit": {"oid": "9cde15fd667bc1837a022829c27bca502f4d541c"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTgzMzgyNg==", "bodyText": "Removed \"of\" in \"all of\"", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389833826", "createdAt": "2020-03-09T17:10:35Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageErrorMatcher.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 Google LLC.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.google.cloud.tools.opensource.classpath;\n+\n+/** Matcher for linkage errors. A linkage error has a target symbol and a source class file. */\n+class LinkageErrorMatcher implements SymbolProblemMatcher {\n+\n+  /** Matcher for the source class of the linkage error */\n+  private SourceMatcher sourceMatcher;\n+\n+  /** Matcher for the target symbol of the linkage error */\n+  private TargetMatcher targetMatcher;\n+\n+  void setSourceMatcher(SourceMatcher sourceMatcher) {\n+    this.sourceMatcher = sourceMatcher;\n+  }\n+\n+  void setTargetMatcher(TargetMatcher targetMatcher) {\n+    this.targetMatcher = targetMatcher;\n+  }\n+\n+  /**\n+   * Returns true if all of non-null matchers of {@link #sourceMatcher} and {@link #targetMatcher}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTc5MDE5Mg=="}, "originalCommit": {"oid": "9cde15fd667bc1837a022829c27bca502f4d541c"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjIyMzM0OnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageErrorMatcher.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOToxNDoyMVrOFz16bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDoyMDo0NVrOFz3-Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwNTAwNg==", "bodyText": "There can be multiple source matchers and multiple target matchers? Or at most one of each?", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389905006", "createdAt": "2020-03-09T19:14:21Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageErrorMatcher.java", "diffHunk": "@@ -16,26 +16,31 @@\n \n package com.google.cloud.tools.opensource.classpath;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import javax.annotation.Nullable;\n+\n /** Matcher for linkage errors. A linkage error has a target symbol and a source class file. */\n class LinkageErrorMatcher implements SymbolProblemMatcher {\n \n-  /** Matcher for the source class of the linkage error */\n+  /** Matcher for the source class of the linkage error. Null if no Source element. */\n+  @Nullable\n   private SourceMatcher sourceMatcher;\n \n-  /** Matcher for the target symbol of the linkage error */\n+  /** Matcher for the target symbol of the linkage error. Null if no Target element. */\n+  @Nullable\n   private TargetMatcher targetMatcher;\n \n   void setSourceMatcher(SourceMatcher sourceMatcher) {\n-    this.sourceMatcher = sourceMatcher;\n+    this.sourceMatcher = checkNotNull(sourceMatcher);\n   }\n \n   void setTargetMatcher(TargetMatcher targetMatcher) {\n-    this.targetMatcher = targetMatcher;\n+    this.targetMatcher = checkNotNull(targetMatcher);\n   }\n \n   /**\n-   * Returns true if all of non-null matchers of {@link #sourceMatcher} and {@link #targetMatcher}\n-   * match.\n+   * Returns true if all non-null {@link #sourceMatcher} and {@link #targetMatcher} match.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec964d6962500db1be1c5df3c49b4c9286802d91"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxNjk4Ng==", "bodyText": "At most one of each.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389916986", "createdAt": "2020-03-09T19:38:10Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageErrorMatcher.java", "diffHunk": "@@ -16,26 +16,31 @@\n \n package com.google.cloud.tools.opensource.classpath;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import javax.annotation.Nullable;\n+\n /** Matcher for linkage errors. A linkage error has a target symbol and a source class file. */\n class LinkageErrorMatcher implements SymbolProblemMatcher {\n \n-  /** Matcher for the source class of the linkage error */\n+  /** Matcher for the source class of the linkage error. Null if no Source element. */\n+  @Nullable\n   private SourceMatcher sourceMatcher;\n \n-  /** Matcher for the target symbol of the linkage error */\n+  /** Matcher for the target symbol of the linkage error. Null if no Target element. */\n+  @Nullable\n   private TargetMatcher targetMatcher;\n \n   void setSourceMatcher(SourceMatcher sourceMatcher) {\n-    this.sourceMatcher = sourceMatcher;\n+    this.sourceMatcher = checkNotNull(sourceMatcher);\n   }\n \n   void setTargetMatcher(TargetMatcher targetMatcher) {\n-    this.targetMatcher = targetMatcher;\n+    this.targetMatcher = checkNotNull(targetMatcher);\n   }\n \n   /**\n-   * Returns true if all of non-null matchers of {@link #sourceMatcher} and {@link #targetMatcher}\n-   * match.\n+   * Returns true if all non-null {@link #sourceMatcher} and {@link #targetMatcher} match.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwNTAwNg=="}, "originalCommit": {"oid": "ec964d6962500db1be1c5df3c49b4c9286802d91"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxOTI0NQ==", "bodyText": "That's not quite clear from the test. Perhaps something like \"\n\nReturns true if sourceMatcher matches \"if present and the target matcher matches if present.\"", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389919245", "createdAt": "2020-03-09T19:42:45Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageErrorMatcher.java", "diffHunk": "@@ -16,26 +16,31 @@\n \n package com.google.cloud.tools.opensource.classpath;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import javax.annotation.Nullable;\n+\n /** Matcher for linkage errors. A linkage error has a target symbol and a source class file. */\n class LinkageErrorMatcher implements SymbolProblemMatcher {\n \n-  /** Matcher for the source class of the linkage error */\n+  /** Matcher for the source class of the linkage error. Null if no Source element. */\n+  @Nullable\n   private SourceMatcher sourceMatcher;\n \n-  /** Matcher for the target symbol of the linkage error */\n+  /** Matcher for the target symbol of the linkage error. Null if no Target element. */\n+  @Nullable\n   private TargetMatcher targetMatcher;\n \n   void setSourceMatcher(SourceMatcher sourceMatcher) {\n-    this.sourceMatcher = sourceMatcher;\n+    this.sourceMatcher = checkNotNull(sourceMatcher);\n   }\n \n   void setTargetMatcher(TargetMatcher targetMatcher) {\n-    this.targetMatcher = targetMatcher;\n+    this.targetMatcher = checkNotNull(targetMatcher);\n   }\n \n   /**\n-   * Returns true if all of non-null matchers of {@link #sourceMatcher} and {@link #targetMatcher}\n-   * match.\n+   * Returns true if all non-null {@link #sourceMatcher} and {@link #targetMatcher} match.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwNTAwNg=="}, "originalCommit": {"oid": "ec964d6962500db1be1c5df3c49b4c9286802d91"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkzODY5MQ==", "bodyText": "Updated. The validation for XML structure is to be done in #1277", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1269#discussion_r389938691", "createdAt": "2020-03-09T20:20:45Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/classpath/LinkageErrorMatcher.java", "diffHunk": "@@ -16,26 +16,31 @@\n \n package com.google.cloud.tools.opensource.classpath;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n+import javax.annotation.Nullable;\n+\n /** Matcher for linkage errors. A linkage error has a target symbol and a source class file. */\n class LinkageErrorMatcher implements SymbolProblemMatcher {\n \n-  /** Matcher for the source class of the linkage error */\n+  /** Matcher for the source class of the linkage error. Null if no Source element. */\n+  @Nullable\n   private SourceMatcher sourceMatcher;\n \n-  /** Matcher for the target symbol of the linkage error */\n+  /** Matcher for the target symbol of the linkage error. Null if no Target element. */\n+  @Nullable\n   private TargetMatcher targetMatcher;\n \n   void setSourceMatcher(SourceMatcher sourceMatcher) {\n-    this.sourceMatcher = sourceMatcher;\n+    this.sourceMatcher = checkNotNull(sourceMatcher);\n   }\n \n   void setTargetMatcher(TargetMatcher targetMatcher) {\n-    this.targetMatcher = targetMatcher;\n+    this.targetMatcher = checkNotNull(targetMatcher);\n   }\n \n   /**\n-   * Returns true if all of non-null matchers of {@link #sourceMatcher} and {@link #targetMatcher}\n-   * match.\n+   * Returns true if all non-null {@link #sourceMatcher} and {@link #targetMatcher} match.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkwNTAwNg=="}, "originalCommit": {"oid": "ec964d6962500db1be1c5df3c49b4c9286802d91"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2849, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}