{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzNjgxNjEx", "number": 1469, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMzo1NDoxMlrOEFEScA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDowMTo0MlrOEFEeZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzQ4NTkyOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMzo1NDoxMlrOGjE1Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDo0Mzo1MFrOGjGpzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQzMjQ2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n               * provided dependencies. t does includes direct optional dependencies of the root node but not\n          \n          \n            \n               * provided dependencies. It does include direct optional dependencies of the root node but not", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1469#discussion_r439432467", "createdAt": "2020-06-12T13:54:12Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -137,6 +137,25 @@ public DependencyGraph buildFullDependencyGraph(List<Artifact> artifacts) {\n     DefaultRepositorySystemSession session = RepositoryUtility.newSessionForFullDependency(system);\n     return buildDependencyGraph(dependencyNodes, session);\n   }\n+  \n+  /**\n+   * Finds the full compile time, transitive dependency graph including conflicting versions and\n+   * provided dependencies. t does includes direct optional dependencies of the root node but not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89410742ed5716b272dbbb0304917d8bf72316ed"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ2MjM0OQ==", "bodyText": "fixed", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1469#discussion_r439462349", "createdAt": "2020-06-12T14:43:50Z", "author": {"login": "elharo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -137,6 +137,25 @@ public DependencyGraph buildFullDependencyGraph(List<Artifact> artifacts) {\n     DefaultRepositorySystemSession session = RepositoryUtility.newSessionForFullDependency(system);\n     return buildDependencyGraph(dependencyNodes, session);\n   }\n+  \n+  /**\n+   * Finds the full compile time, transitive dependency graph including conflicting versions and\n+   * provided dependencies. t does includes direct optional dependencies of the root node but not", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQzMjQ2Nw=="}, "originalCommit": {"oid": "89410742ed5716b272dbbb0304917d8bf72316ed"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzUwMzYxOnYy", "diffSide": "RIGHT", "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMzo1ODoxN1rOGjFASw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxMzo1ODoxN1rOGjFASw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQzNTMzOQ==", "bodyText": "I feel \"verbose\" sounds strange. But I don't think of better one. Good for now.", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1469#discussion_r439435339", "createdAt": "2020-06-12T13:58:17Z", "author": {"login": "suztomo"}, "path": "dependencies/src/main/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilder.java", "diffHunk": "@@ -137,6 +137,25 @@ public DependencyGraph buildFullDependencyGraph(List<Artifact> artifacts) {\n     DefaultRepositorySystemSession session = RepositoryUtility.newSessionForFullDependency(system);\n     return buildDependencyGraph(dependencyNodes, session);\n   }\n+  \n+  /**\n+   * Finds the full compile time, transitive dependency graph including conflicting versions and\n+   * provided dependencies. t does includes direct optional dependencies of the root node but not\n+   * optional dependencies of transitive dependencies.\n+   *\n+   * <p>In the event of I/O errors, missing artifacts, and other problems, it can return an\n+   * incomplete graph. Each node's dependencies are resolved recursively. The scope of a dependency\n+   * does not affect the scope of its children's dependencies. Provided and optional dependencies\n+   * are not treated differently than any other dependency.\n+   *\n+   * @param dependency the root\n+   * @return the graph as built by Maven before dependency mediation\n+   */\n+  DependencyGraph buildVerboseDependencyGraph(Dependency dependency) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89410742ed5716b272dbbb0304917d8bf72316ed"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNzUxNjU1OnYy", "diffSide": "RIGHT", "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilderTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDowMTo0MlrOGjFI2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQxNDo0NTo0MFrOGjGt5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQzNzUzMQ==", "bodyText": "Truth.assertThat(paths).containsNoDuplicates();", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1469#discussion_r439437531", "createdAt": "2020-06-12T14:01:42Z", "author": {"login": "suztomo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilderTest.java", "diffHunk": "@@ -115,6 +131,22 @@ public void testGetCompleteDependencies() {\n     int guavaCount = countArtifactId(graph, \"guava\");\n     Assert.assertEquals(29, guavaCount);\n   }\n+  \n+  @Test\n+  public void testGetVerboseDependencies() {\n+    Dependency dependency = new Dependency(datastore, \"compile\");\n+    DependencyGraph graph = dependencyGraphBuilder.buildVerboseDependencyGraph(dependency);\n+    List<DependencyPath> paths = graph.list();\n+    Assert.assertTrue(paths.size() > 10);\n+\n+    // verify we didn't double count anything\n+    HashSet<DependencyPath> noDups = new HashSet<>(paths);\n+    Assert.assertEquals(paths.size(), noDups.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89410742ed5716b272dbbb0304917d8bf72316ed"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQ2MzM5OA==", "bodyText": "neat, done", "url": "https://github.com/GoogleCloudPlatform/cloud-opensource-java/pull/1469#discussion_r439463398", "createdAt": "2020-06-12T14:45:40Z", "author": {"login": "elharo"}, "path": "dependencies/src/test/java/com/google/cloud/tools/opensource/dependencies/DependencyGraphBuilderTest.java", "diffHunk": "@@ -115,6 +131,22 @@ public void testGetCompleteDependencies() {\n     int guavaCount = countArtifactId(graph, \"guava\");\n     Assert.assertEquals(29, guavaCount);\n   }\n+  \n+  @Test\n+  public void testGetVerboseDependencies() {\n+    Dependency dependency = new Dependency(datastore, \"compile\");\n+    DependencyGraph graph = dependencyGraphBuilder.buildVerboseDependencyGraph(dependency);\n+    List<DependencyPath> paths = graph.list();\n+    Assert.assertTrue(paths.size() > 10);\n+\n+    // verify we didn't double count anything\n+    HashSet<DependencyPath> noDups = new HashSet<>(paths);\n+    Assert.assertEquals(paths.size(), noDups.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTQzNzUzMQ=="}, "originalCommit": {"oid": "89410742ed5716b272dbbb0304917d8bf72316ed"}, "originalPosition": 58}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2601, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}