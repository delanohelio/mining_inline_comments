{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MjA1MTM3", "number": 9095, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNzozNDozOVrOEUItdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNzozNjowMlrOEUIvIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTQ5Njg2OnYy", "diffSide": "RIGHT", "path": "modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNzozNDozOVrOG6QecQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNzozNDozOVrOG6QecQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc0MDUyOQ==", "bodyText": "Assert that the pattern only matches starting with.", "url": "https://github.com/mulesoft/mule/pull/9095#discussion_r463740529", "createdAt": "2020-07-31T17:34:39Z", "author": {"login": "nicomz"}, "path": "modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java", "diffHunk": "@@ -54,9 +57,10 @@\n       getBoolean(AVOID_DISPOSE_ORACLE_THREADS_PROPERTY_NAME);\n \n   public static final String DIAGNOSABILITY_BEAN_NAME = \"diagnosability\";\n-  public static final String ORACLE_DRIVER_TIMER_THREAD_NAME = \"Timer-\";\n   public static final String ORACLE_DRIVER_TIMER_THREAD_CLASS_NAME = \"TimerThread\";\n-  private final transient Logger logger = LoggerFactory.getLogger(getClass());\n+  public static final String COMPOSITE_CLASS_LOADER_CLASS_NAME = \"CompositeClassLoader\";\n+  public static final Pattern ORACLE_DRIVER_TIMER_THREAD_PATTERN = Pattern.compile(\"Timer-\\\\d+\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4da4746ea40026d1e0a5e364d749ed7fe796a63f"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTUwMTE0OnYy", "diffSide": "RIGHT", "path": "modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNzozNjowMlrOG6QhCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNzozNjowMlrOG6QhCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzc0MTE5Mw==", "bodyText": "Please put this outside the loop.", "url": "https://github.com/mulesoft/mule/pull/9095#discussion_r463741193", "createdAt": "2020-07-31T17:36:02Z", "author": {"login": "nicomz"}, "path": "modules/artifact/src/main/java/org/mule/module/artifact/classloader/JdbcResourceReleaser.java", "diffHunk": "@@ -293,52 +297,78 @@ private void disposeOracleDriverThreads() {\n \n       /* IMPORTANT: this is done to avoid metaspace OOM caused by oracle driver\n       thread leak. This is only meant to stop TimerThread threads spawned\n-      by oracle driver's HAManger class. This timer cannot be fetched\n+      by oracle driver's HAManager class. This timer cannot be fetched\n       by reflection because, in order to do so, other oracle dependencies\n       would be required.\n       * */\n       for (Thread thread : threads) {\n-        if (isThreadApplicationTimerThread(thread)) {\n+        if (isOracleTimerThread(thread)) {\n           try {\n             thread.stop();\n             thread.interrupt();\n           } catch (Throwable e) {\n             logger\n-                .debug(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\",\n-                       e);\n+                .warn(\"An error occurred trying to close the '\" + thread.getName() + \"' Thread. This might cause memory leaks.\",\n+                      e);\n           }\n         }\n       }\n     } catch (Exception e) {\n-      logger.debug(e.getMessage());\n+      logger.error(\"An exception occurred while attempting to dispose of oracle timer threads: {}\", e.getMessage());\n     }\n   }\n \n-  private boolean isThreadApplicationTimerThread(Thread thread) {\n+  private boolean isOracleTimerThread(Thread thread) {\n+    ClassLoader undeployedArtifactClassLoader = this.getClass().getClassLoader();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4da4746ea40026d1e0a5e364d749ed7fe796a63f"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4850, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}