{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxODgwMDUz", "number": 9735, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyNjozM1rOE5qW6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyODo0MVrOE5qZow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODk4MjgyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/rx/FluxSinkRecorder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyNjozM1rOH0QEHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyNjozM1rOH0QEHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MTE5Nw==", "bodyText": "move to MuleSystemProperties and document properly.", "url": "https://github.com/mulesoft/mule/pull/9735#discussion_r524551197", "createdAt": "2020-11-16T20:26:33Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/rx/FluxSinkRecorder.java", "diffHunk": "@@ -23,8 +27,14 @@\n  */\n public class FluxSinkRecorder<T> implements Consumer<FluxSink<T>> {\n \n+  private static final Logger LOGGER = getLogger(FluxSinkRecorder.class);\n+\n   private volatile FluxSinkRecorderDelegate<T> delegate = new NotYetAcceptedDelegate<>();\n \n+  private static final boolean PRINT_STACK_TRACE_ON_DROP =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77ae9539462cba877600d32a13f6b61bb5f1ff89"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODk4NTY4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/rx/FluxSinkRecorder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyNzoxOVrOH0QF2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyNzoxOVrOH0QF2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MTY0MA==", "bodyText": "make volatile and synchronize access", "url": "https://github.com/mulesoft/mule/pull/9735#discussion_r524551640", "createdAt": "2020-11-16T20:27:19Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/rx/FluxSinkRecorder.java", "diffHunk": "@@ -23,8 +27,14 @@\n  */\n public class FluxSinkRecorder<T> implements Consumer<FluxSink<T>> {\n \n+  private static final Logger LOGGER = getLogger(FluxSinkRecorder.class);\n+\n   private volatile FluxSinkRecorderDelegate<T> delegate = new NotYetAcceptedDelegate<>();\n \n+  private static final boolean PRINT_STACK_TRACE_ON_DROP =\n+      getBoolean(SYSTEM_PROPERTY_PREFIX + \"fluxSinkRecorder.printCompletionStackTraceOnDrop\");\n+  private String completionStackTrace = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77ae9539462cba877600d32a13f6b61bb5f1ff89"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODk4OTc5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/util/rx/RxUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyODo0MVrOH0QIfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDoyODo0MVrOH0QIfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU1MjMxNw==", "bodyText": "add some context to the logged line to know where it came from. Also, in the case of graceful shutdown timeout, there is already a WARN being logged and this one may be redundant.", "url": "https://github.com/mulesoft/mule/pull/9735#discussion_r524552317", "createdAt": "2020-11-16T20:28:41Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/util/rx/RxUtils.java", "diffHunk": "@@ -200,8 +200,11 @@\n \n     return doPropagateCompletion(upstream, downstream, transformer,\n                                  new AtomicInteger(0), completer, errorForwarder,\n-                                 () -> delayedExecutor.schedule(() -> completer.runOnce(), completionTimeoutMillis,\n-                                                                MILLISECONDS));\n+                                 () -> delayedExecutor.schedule(() -> {\n+                                   LOGGER.warn(\"Calling completer after {} milliseconds\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77ae9539462cba877600d32a13f6b61bb5f1ff89"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4626, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}