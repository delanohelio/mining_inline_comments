{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NjAzNDQw", "number": 9693, "title": "MULE-18631: Need to be able to set a limit on the number of events to be pushed per poll where N >= 1", "bodyText": "", "createdAt": "2020-11-10T16:17:12Z", "url": "https://github.com/mulesoft/mule/pull/9693", "merged": true, "mergeCommit": {"oid": "83d46ead6204e4e0849d4f9fb62a089332d134ef"}, "closed": true, "closedAt": "2020-11-12T21:27:11Z", "author": {"login": "ndinu"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdaz6nfgH2gAyNTE4NjAzNDQwOjgyOGFiMDE3YjU1MmIxZDU2MWE4MWMxMGFkOWQ0ZTViNWZhNWU2MWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdb4hGtAFqTUyOTQ2ODgzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "828ab017b552b1d561a81c10ad9d4e5b5fa5e61c", "author": {"user": {"login": "ndinu", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/828ab017b552b1d561a81c10ad9d4e5b5fa5e61c", "committedDate": "2020-11-09T12:28:27Z", "message": "progress"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cffbb8dc3a63df5c2944c527a856a3b016a4caf3", "author": {"user": {"login": "ndinu", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/cffbb8dc3a63df5c2944c527a856a3b016a4caf3", "committedDate": "2020-11-10T14:43:11Z", "message": "tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "301094098e41c715226787cee125d0fcab7ea1c5", "author": {"user": {"login": "ndinu", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/301094098e41c715226787cee125d0fcab7ea1c5", "committedDate": "2020-11-10T16:08:51Z", "message": "self review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NTcyNTA1", "url": "https://github.com/mulesoft/mule/pull/9693#pullrequestreview-527572505", "createdAt": "2020-11-10T20:15:33Z", "commit": {"oid": "301094098e41c715226787cee125d0fcab7ea1c5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoxNTozM1rOHwt_fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoxNTozM1rOHwt_fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0NzIzMA==", "bodyText": "Is it possible to test that this fails because the limit is not greater than one?", "url": "https://github.com/mulesoft/mule/pull/9693#discussion_r520847230", "createdAt": "2020-11-10T20:15:33Z", "author": {"login": "Bardammu"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/NegativePollingSourceLimitingTestCase.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.test.module.extension.source;\n+\n+import static java.util.Arrays.asList;\n+import static org.mule.runtime.api.util.MuleSystemProperties.ENABLE_SDK_POLLING_SOURCE_LIMIT;\n+\n+import org.junit.ClassRule;\n+import org.junit.runners.Parameterized;\n+\n+import org.mule.tck.junit4.rule.SystemProperty;\n+import org.mule.test.module.extension.InvalidExtensionConfigTestCase;\n+import org.mule.test.runner.RunnerDelegateTo;\n+\n+import java.util.Collection;\n+\n+@RunnerDelegateTo(Parameterized.class)\n+public class NegativePollingSourceLimitingTestCase extends InvalidExtensionConfigTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "301094098e41c715226787cee125d0fcab7ea1c5"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NTcyNjcw", "url": "https://github.com/mulesoft/mule/pull/9693#pullrequestreview-527572670", "createdAt": "2020-11-10T20:15:45Z", "commit": {"oid": "301094098e41c715226787cee125d0fcab7ea1c5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoxNTo0NVrOHwt_4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoxNTo0NVrOHwt_4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0NzMzMQ==", "bodyText": "Do you think we should add a Javadoc for this?", "url": "https://github.com/mulesoft/mule/pull/9693#discussion_r520847331", "createdAt": "2020-11-10T20:15:45Z", "author": {"login": "Bardammu"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/WatermarkStatus.java", "diffHunk": "@@ -0,0 +1,11 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.source.poll;\n+\n+public enum WatermarkStatus {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "301094098e41c715226787cee125d0fcab7ea1c5"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NTc0Mzgx", "url": "https://github.com/mulesoft/mule/pull/9693#pullrequestreview-527574381", "createdAt": "2020-11-10T20:18:06Z", "commit": {"oid": "301094098e41c715226787cee125d0fcab7ea1c5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoxODowNlrOHwuEyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoxODowNlrOHwuEyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg0ODU4NQ==", "bodyText": "This can be static too", "url": "https://github.com/mulesoft/mule/pull/9693#discussion_r520848585", "createdAt": "2020-11-10T20:18:06Z", "author": {"login": "Bardammu"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/api/loader/AbstractJavaExtensionModelLoader.java", "diffHunk": "@@ -86,6 +88,7 @@\n public class AbstractJavaExtensionModelLoader extends ExtensionModelLoader {\n \n   private static final boolean IGNORE_DISABLED = getProperty(DISABLE_SDK_IGNORE_COMPONENT) != null;\n+  private final boolean ENABLE_POLLING_SOURCE_LIMIT = getProperty(ENABLE_SDK_POLLING_SOURCE_LIMIT) != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "301094098e41c715226787cee125d0fcab7ea1c5"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8e82bd8d13c31817fca9e94dfdf6303a052497d", "author": {"user": {"login": "ndinu", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/f8e82bd8d13c31817fca9e94dfdf6303a052497d", "committedDate": "2020-11-10T20:53:23Z", "message": "Adds requested changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03154672d01c616ff88710506afe93b4910baae5", "author": {"user": {"login": "ndinu", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/03154672d01c616ff88710506afe93b4910baae5", "committedDate": "2020-11-11T04:43:39Z", "message": "Adds requested changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c4885ed965740b83b9c96e374e3bd5b6c289fe0", "author": {"user": {"login": "ndinu", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/6c4885ed965740b83b9c96e374e3bd5b6c289fe0", "committedDate": "2020-11-11T13:14:48Z", "message": "Fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MTc5MDMy", "url": "https://github.com/mulesoft/mule/pull/9693#pullrequestreview-528179032", "createdAt": "2020-11-11T13:39:52Z", "commit": {"oid": "6c4885ed965740b83b9c96e374e3bd5b6c289fe0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzozOTo1MlrOHxNi3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxMzozOTo1MlrOHxNi3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM2NDE4OA==", "bodyText": "Why retrieve if the value is not used? Did you leave this line by accident?", "url": "https://github.com/mulesoft/mule/pull/9693#discussion_r521364188", "createdAt": "2020-11-11T13:39:52Z", "author": {"login": "SebaElizalde"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -522,6 +582,28 @@ private void updateWatermark(Serializable value, Comparator comparator) {\n     }\n   }\n \n+  private void updateWatermark(Serializable value, Comparator comparator) throws ObjectStoreException {\n+    if (watermarkObjectStore.contains(WATERMARK_ITEM_OS_KEY)) {\n+      Serializable currentValue = watermarkObjectStore.retrieve(WATERMARK_ITEM_OS_KEY);\n+      if (compareWatermarks(currentValue, value, comparator) >= 0) {\n+        return;\n+      }\n+      watermarkObjectStore.remove(WATERMARK_ITEM_OS_KEY);\n+    }\n+\n+    updateRecentlyProcessedIds();\n+    watermarkObjectStore.store(WATERMARK_ITEM_OS_KEY, value);\n+  }\n+\n+  private void setCurrentWatermarkAsMinimumRejectWatermark(Serializable minimumRejectedByLimitPassingWatermark)\n+      throws ObjectStoreException {\n+    if (watermarkObjectStore.contains(WATERMARK_ITEM_OS_KEY)) {\n+      watermarkObjectStore.retrieve(WATERMARK_ITEM_OS_KEY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c4885ed965740b83b9c96e374e3bd5b6c289fe0"}, "originalPosition": 375}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db960a6a6a2e3d660e368abb6ed6abdcdd796411", "author": {"user": {"login": "ndinu", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/db960a6a6a2e3d660e368abb6ed6abdcdd796411", "committedDate": "2020-11-11T14:07:36Z", "message": "remove unnecesary line"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MjIwNDc0", "url": "https://github.com/mulesoft/mule/pull/9693#pullrequestreview-528220474", "createdAt": "2020-11-11T14:28:12Z", "commit": {"oid": "db960a6a6a2e3d660e368abb6ed6abdcdd796411"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4NDkzNTAz", "url": "https://github.com/mulesoft/mule/pull/9693#pullrequestreview-528493503", "createdAt": "2020-11-11T20:01:46Z", "commit": {"oid": "db960a6a6a2e3d660e368abb6ed6abdcdd796411"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDowMTo0NlrOHxcTMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQyMDoxNDo0NVrOHxcsvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwNTkzNg==", "bodyText": "I know this is unrelated to this change, but we need to review what's this sequence number for and why simply 10... These magic numbers are super fragile. Meanwhile, put this into a constant", "url": "https://github.com/mulesoft/mule/pull/9693#discussion_r521605936", "createdAt": "2020-11-11T20:01:46Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/PollingSourceDeclarationEnricher.java", "diffHunk": "@@ -60,26 +71,47 @@ protected void onSource(SourceDeclaration source) {\n \n             source.setRunsOnPrimaryNodeOnly(true);\n \n-            ParameterDeclaration parameter = new ParameterDeclaration(SCHEDULING_STRATEGY_PARAMETER_NAME);\n-            parameter.setDescription(SCHEDULING_STRATEGY_PARAMETER_DESCRIPTION);\n-            parameter.setRequired(true);\n-            parameter.setType(loader.load(SchedulingStrategy.class), false);\n-            parameter.setExpressionSupport(NOT_SUPPORTED);\n-            parameter.addModelProperty(new InfrastructureParameterModelProperty(10));\n-            parameter.addModelProperty(new QNameModelProperty(new QName(CORE_NAMESPACE, SCHEDULING_STRATEGY_ELEMENT_IDENTIFIER,\n-                                                                        CORE_PREFIX)));\n-            parameter.setDslConfiguration(ParameterDslConfiguration.builder()\n-                .allowsInlineDefinition(true)\n-                .allowsReferences(false)\n-                .allowTopLevelDefinition(false)\n-                .build());\n-\n             thereArePollingSources.set(true);\n \n-            source.getParameterGroup(DEFAULT_GROUP_NAME).addParameter(parameter);\n+            source.getParameterGroup(DEFAULT_GROUP_NAME).addParameter(declareSchedulingStrategyParameter(loader));\n+\n+            if (isPollingSourceLimitEnabled(extensionLoadingContext)) {\n+              source.getParameterGroup(DEFAULT_GROUP_NAME).addParameter(declarePollingSourceLimitParameter());\n+            }\n           }\n         });\n       }\n+\n+      private ParameterDeclaration declarePollingSourceLimitParameter() {\n+        ParameterDeclaration parameter = new ParameterDeclaration(POLLING_SOURCE_LIMIT_PARAMETER_NAME);\n+        parameter.setDescription(POLLING_SOURCE_LIMIT_PARAMETER_DESCRIPTION);\n+        parameter.setRequired(false);\n+        parameter.setType(BaseTypeBuilder.create(JAVA).numberType().integer().range(1, null).build(), false);\n+        parameter.setExpressionSupport(NOT_SUPPORTED);\n+        parameter.addModelProperty(new SyntheticModelModelProperty());\n+        parameter.addModelProperty(new SinceMuleVersionModelProperty(POLLING_SOURCE_LIMIT_MULE_VERSION));\n+        parameter.setLayoutModel(LayoutModel.builder().tabName(ADVANCED_TAB).build());\n+\n+        return parameter;\n+      }\n+\n+      private ParameterDeclaration declareSchedulingStrategyParameter(ClassTypeLoader loader) {\n+        ParameterDeclaration parameter = new ParameterDeclaration(SCHEDULING_STRATEGY_PARAMETER_NAME);\n+        parameter.setDescription(SCHEDULING_STRATEGY_PARAMETER_DESCRIPTION);\n+        parameter.setRequired(true);\n+        parameter.setType(loader.load(SchedulingStrategy.class), false);\n+        parameter.setExpressionSupport(NOT_SUPPORTED);\n+        parameter.addModelProperty(new InfrastructureParameterModelProperty(10));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db960a6a6a2e3d660e368abb6ed6abdcdd796411"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwNjYyNQ==", "bodyText": "IllegalArgumentException", "url": "https://github.com/mulesoft/mule/pull/9693#discussion_r521606625", "createdAt": "2020-11-11T20:03:07Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/SourceConfigurer.java", "diffHunk": "@@ -152,4 +155,19 @@ public Source build(ValueResolvingContext context) throws MuleException {\n       }\n     }\n   }\n+\n+  private int resolverMaxItemsPerPoll(ResolverSet resolverSet, ValueResolvingContext context, CoreEvent event)\n+      throws MuleException {\n+    ValueResolver<?> valueResolver = resolverSet.getResolvers().get(POLLING_SOURCE_LIMIT_PARAMETER_NAME);\n+    if (valueResolver == null) {\n+      return Integer.MAX_VALUE;\n+    } else {\n+      int maxItemsPerPoll = (Integer) valueResolver.resolve(context);\n+      if (maxItemsPerPoll < 1) {\n+        throw new IllegalStateException(format(\"The %s parameter must have a value greater than 1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db960a6a6a2e3d660e368abb6ed6abdcdd796411"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxMDIzMg==", "bodyText": "isn't this change actually tackling the watermark issues rather than implementing the limit thing? If the answer is yes, then split into different PRs", "url": "https://github.com/mulesoft/mule/pull/9693#discussion_r521610232", "createdAt": "2020-11-11T20:10:12Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -253,25 +269,113 @@ public PollItemStatus accept(Consumer<PollItem<T, A>> consumer) {\n \n       pollItem.validate();\n \n-      PollItemStatus status;\n+      PollItemStatus status = ACCEPTED;\n+      boolean currentPollItemLimitApplied = false;\n       if (!acquireItem(pollItem, callbackContext)) {\n         status = ALREADY_IN_PROCESS;\n-      } else if (!passesWatermark(pollItem)) {\n-        status = FILTERED_BY_WATERMARK;\n-      } else if (isRequestedToStop()) {\n-        status = SOURCE_STOPPING;\n       } else {\n-        sourceCallback.handle(pollItem.getResult(), callbackContext);\n-        status = ACCEPTED;\n+        WatermarkStatus watermarkStatus = passesWatermark(pollItem);\n+        if (watermarkStatus == REJECT) {\n+          status = FILTERED_BY_WATERMARK;\n+        } else if (isRequestedToStop()) {\n+          status = SOURCE_STOPPING;\n+        } else if (currentPollItems < maxItemsPerPoll) {\n+          currentPollItems++;\n+          sourceCallback.handle(pollItem.getResult(), callbackContext);\n+          saveWatermarkValue(watermarkStatus, pollItem);\n+        } else {\n+          currentPollItemLimitApplied = true;\n+          processLimitApplied(watermarkStatus, pollItem);\n+        }\n       }\n \n-      if (status != ACCEPTED) {\n+      if (status != ACCEPTED || currentPollItemLimitApplied) {\n         rejectItem(pollItem.getResult(), callbackContext);\n       }\n \n       return status;\n     }\n \n+    private void processLimitApplied(WatermarkStatus watermarkStatus, DefaultPollItem pollItem) {\n+      Serializable itemWatermark = pollItem.getWatermark().orElse(null);\n+      if (itemWatermark == null || watermarkStatus != PASSED) {\n+        return;\n+      }\n+      if (minimumRejectedByLimitPassingWatermark == null ||\n+          compareWatermarks(itemWatermark, minimumRejectedByLimitPassingWatermark, watermarkComparator) < 0) {\n+        LOGGER.debug(\"An item that passed all previous validations is being rejected by the poll limit and its watermark\" +\n+            \"value will be stored so that is processed on future polls if sent for processing.\");\n+        minimumRejectedByLimitPassingWatermark = itemWatermark;\n+      }\n+    }\n+\n+    private void saveWatermarkValue(WatermarkStatus watermarkStatus, DefaultPollItem pollItem) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db960a6a6a2e3d660e368abb6ed6abdcdd796411"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYxMjQ3Nw==", "bodyText": "why a new source for this? It'd be great to test it with an existing one since the real use case is injecting this functionality into existing sources", "url": "https://github.com/mulesoft/mule/pull/9693#discussion_r521612477", "createdAt": "2020-11-11T20:14:45Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/petstore-extension/src/main/java/org/mule/test/petstore/extension/PetAdoptionLimitingSource.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.test.petstore.extension;\n+\n+import static org.mule.runtime.extension.api.annotation.param.MediaType.TEXT_PLAIN;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.extension.api.annotation.metadata.MetadataScope;\n+import org.mule.runtime.extension.api.annotation.param.MediaType;\n+import org.mule.runtime.extension.api.annotation.param.Parameter;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.PollContext;\n+import org.mule.runtime.extension.api.runtime.source.PollingSource;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallbackContext;\n+\n+import java.util.List;\n+\n+@MetadataScope(outputResolver = PollingSourceMetadataResolver.class)\n+@MediaType(TEXT_PLAIN)\n+public class PetAdoptionLimitingSource extends PollingSource<String, Integer> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db960a6a6a2e3d660e368abb6ed6abdcdd796411"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc96f935498addee0e77befea692693f7bba6aa2", "author": {"user": {"login": "ndinu", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/fc96f935498addee0e77befea692693f7bba6aa2", "committedDate": "2020-11-12T04:18:12Z", "message": "Adds requested changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NDY4ODM3", "url": "https://github.com/mulesoft/mule/pull/9693#pullrequestreview-529468837", "createdAt": "2020-11-12T20:24:02Z", "commit": {"oid": "fc96f935498addee0e77befea692693f7bba6aa2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1057, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}