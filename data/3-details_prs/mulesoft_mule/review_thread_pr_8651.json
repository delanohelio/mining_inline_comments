{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MjIyMTA2", "number": 8651, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjoyOToyNVrODgctcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoyOTozNlrODgdwww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzUxNDA4OnYy", "diffSide": "RIGHT", "path": "tests/unit/src/main/java/org/mule/tck/processor/ContextPropagationChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjoyOToyNVrOFqqRCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjoyOToyNVrOFqqRCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3NzAwMw==", "bodyText": "jdoc", "url": "https://github.com/mulesoft/mule/pull/8651#discussion_r380277003", "createdAt": "2020-02-17T16:29:25Z", "author": {"login": "fsgonz"}, "path": "tests/unit/src/main/java/org/mule/tck/processor/ContextPropagationChecker.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.tck.processor;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.fail;\n+import static reactor.core.publisher.Flux.from;\n+import static reactor.core.publisher.Mono.subscriberContext;\n+\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.core.api.event.CoreEvent;\n+import org.mule.runtime.core.api.processor.Processor;\n+\n+import java.util.function.Function;\n+\n+import org.reactivestreams.Publisher;\n+\n+import reactor.util.context.Context;\n+\n+public class ContextPropagationChecker implements Processor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0985cbd912d7e884b46ca4b3548f8fe5e532bee4"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzUxODEzOnYy", "diffSide": "RIGHT", "path": "tests/unit/src/main/java/org/mule/tck/processor/ContextPropagationChecker.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjozMDoyOFrOFqqTYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjozMDoyOFrOFqqTYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI3NzYwMg==", "bodyText": "use a constant", "url": "https://github.com/mulesoft/mule/pull/8651#discussion_r380277602", "createdAt": "2020-02-17T16:30:28Z", "author": {"login": "fsgonz"}, "path": "tests/unit/src/main/java/org/mule/tck/processor/ContextPropagationChecker.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.tck.processor;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.fail;\n+import static reactor.core.publisher.Flux.from;\n+import static reactor.core.publisher.Mono.subscriberContext;\n+\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.core.api.event.CoreEvent;\n+import org.mule.runtime.core.api.processor.Processor;\n+\n+import java.util.function.Function;\n+\n+import org.reactivestreams.Publisher;\n+\n+import reactor.util.context.Context;\n+\n+public class ContextPropagationChecker implements Processor {\n+\n+  @Override\n+  public CoreEvent process(CoreEvent event) throws MuleException {\n+    fail(\"Need `apply` to be called instead of `process`.\");\n+    return event;\n+  }\n+\n+  @Override\n+  public Publisher<CoreEvent> apply(Publisher<CoreEvent> publisher) {\n+    return subscriberContext()\n+        .flatMapMany(ctx -> from(publisher)\n+            .doOnNext(e -> assertThat(ctx.getOrEmpty(\"ctxPropagated\").orElse(false), is(true))));\n+  }\n+\n+  public Function<Context, Context> contextPropagationFlag() {\n+    return ctx -> ctx.put(\"ctxPropagated\", true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0985cbd912d7e884b46ca4b3548f8fe5e532bee4"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzYzNDQwOnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/exception/OnErrorPropagateHandlerTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowODo1NFrOFqrYhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzowODo1NFrOFqrYhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5NTMwMQ==", "bodyText": "verify that the throwRef.get() is the appropriate mock exception.", "url": "https://github.com/mulesoft/mule/pull/8651#discussion_r380295301", "createdAt": "2020-02-17T17:08:54Z", "author": {"login": "fsgonz"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/exception/OnErrorPropagateHandlerTestCase.java", "diffHunk": "@@ -221,6 +231,29 @@ public void testMessageToStringNotCalledOnFailure() throws Exception {\n     onErrorPropagateHandler.handleException(mockException, muleEvent);\n   }\n \n+  @Test\n+  public void subscriberContextPropagation() throws MuleException {\n+    final ContextPropagationChecker contextPropagationChecker = new ContextPropagationChecker();\n+\n+    onErrorPropagateHandler\n+        .setMessageProcessors(singletonList(contextPropagationChecker));\n+\n+    initialiseIfNeeded(onErrorPropagateHandler, muleContext);\n+\n+    AtomicReference<Throwable> thownRef = new AtomicReference<>();\n+    final Consumer<Exception> router = onErrorPropagateHandler\n+        .router(pub -> Flux.from(pub)\n+            .subscriberContext(contextPropagationChecker.contextPropagationFlag()),\n+                e -> {\n+                },\n+                t -> thownRef.set(t));\n+\n+    when(mockException.getEvent()).thenReturn(muleEvent);\n+    router.accept(mockException);\n+\n+    assertThat(thownRef.get().getCause(), not(instanceOf(AssertionError.class)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0985cbd912d7e884b46ca4b3548f8fe5e532bee4"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzY1MTY3OnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/processor/AsyncDelegateMessageProcessorTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoxNTozNlrOFqri6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoxNTozNlrOFqri6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI5Nzk2MQ==", "bodyText": "Add a comment indicating why this was left (subscriber context is not propagated in the case of async)", "url": "https://github.com/mulesoft/mule/pull/8651#discussion_r380297961", "createdAt": "2020-02-17T17:15:36Z", "author": {"login": "fsgonz"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/processor/AsyncDelegateMessageProcessorTestCase.java", "diffHunk": "@@ -145,6 +150,26 @@ public void processWithTx() throws Exception {\n     }\n   }\n \n+  @Test\n+  @Ignore(\"Does this case actually make sense?\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0985cbd912d7e884b46ca4b3548f8fe5e532bee4"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzY4NjQzOnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/routing/ChoiceRouterTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoyOTozNlrOFqr3vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNzoyOTozNlrOFqr3vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMwMzI5Mg==", "bodyText": "duplicated code. Maybe this assertion should be unified. Verify if this can be done in all the tests.", "url": "https://github.com/mulesoft/mule/pull/8651#discussion_r380303292", "createdAt": "2020-02-17T17:29:36Z", "author": {"login": "fsgonz"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/routing/ChoiceRouterTestCase.java", "diffHunk": "@@ -144,6 +149,39 @@ public void failingRoute() throws Exception {\n     process(choiceRouter, zapEvent());\n   }\n \n+  @Test\n+  public void subscriberContextPropagation() throws MuleException {\n+    final ContextPropagationChecker contextPropagationChecker = new ContextPropagationChecker();\n+\n+    MessageProcessorChain mp = newChain(empty(), contextPropagationChecker);\n+    choiceRouter.addRoute(payloadZapExpression(), mp);\n+    initialise();\n+\n+    final CoreEvent result = just(zapEvent())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0985cbd912d7e884b46ca4b3548f8fe5e532bee4"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 99, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}