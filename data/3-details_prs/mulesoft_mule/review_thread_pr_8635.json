{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyMTE1MjU5", "number": 8635, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoxNDo1NVrODeCJuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTowOTozNlrODe9ksw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODE5MTI5OnYy", "diffSide": "RIGHT", "path": "modules/extensions-spring-support/src/test/resources/reconnection-config.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoxNDo1NVrOFm-SOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoxNDo1NVrOFm-SOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMDY4MA==", "bodyText": "you can't remove the withErrorType parameter. Otherwise you're tweaking the test to be green rather than fixing the issue.", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r376410680", "createdAt": "2020-02-07T14:14:55Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-spring-support/src/test/resources/reconnection-config.xml", "diffHunk": "@@ -32,7 +32,11 @@\n     </flow>\n \n     <flow name=\"stickyPagedOperation\">\n-        <reconnection:sticky-paged-operation failOn=\"#[payload]\" withErrorType=\"#[vars.errorType]\" config-ref=\"reconnection_Config\"/>\n+        <reconnection:sticky-paged-operation failOn=\"#[payload]\" config-ref=\"reconnection_Config\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f025f66b1dc381a51ca825b22f5741c3231be10e"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODE5NDEzOnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoxNTo0MlrOFm-T6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoxNTo0MlrOFm-T6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMTExMg==", "bodyText": "rename to actualConnectionSupplier or some other name that better reveals the intent", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r376411112", "createdAt": "2020-02-07T14:15:42Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "diffHunk": "@@ -37,26 +39,29 @@\n  */\n public final class PagingProviderProducer<T> implements Producer<List<T>> {\n \n+  private static final Logger LOGGER = LoggerFactory.getLogger(PagingProviderProducer.class);\n+\n   public static final String COULD_NOT_OBTAIN_A_CONNECTION = \"Could not obtain a connection for the configuration\";\n   public static final String COULD_NOT_CREATE_A_CONNECTION_SUPPLIER =\n       \"Could not obtain a connection supplier for the configuration\";\n   public static final String COULD_NOT_CLOSE_PAGING_PROVIDER = \"Could not close the Paging Provider\";\n   public static final String COULD_NOT_EXECUTE = \"Could not execute operation with connection\";\n   private PagingProvider<Object, T> delegate;\n   private final ConfigurationInstance config;\n-  private final ExtensionConnectionSupplier connectionSupplier;\n+  private final ExtensionConnectionSupplier extensionConnectionSupplier;\n   private final ExecutionContextAdapter executionContext;\n   private final ConnectionSupplierFactory connectionSupplierFactory;\n+  private ConnectionSupplier connectionSupplier;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f025f66b1dc381a51ca825b22f5741c3231be10e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODIwNTYwOnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoxOTowMlrOFm-a-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoxOTowMlrOFm-a-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMjkyMA==", "bodyText": "still not fixed. If this fails, the original exception get swallowed", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r376412920", "createdAt": "2020-02-07T14:19:02Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "diffHunk": "@@ -87,30 +92,34 @@ public int getSize() {\n    * @return\n    */\n   private <R> R performWithConnection(Function<Object, R> function) {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n+    connectionSupplier = getConnectionSupplier();\n     Object connection = getConnection(connectionSupplier);\n     try {\n       R result = function.apply(connection);\n       connectionSupplier.close();\n       return result;\n     } catch (Exception e) {\n       if (isFirstPage) {\n-        closeDelegate(connection);\n+        silentlyCloseDelegate(connection);\n       }\n       extractConnectionException(e).ifPresent(ex -> connectionSupplier.invalidateConnection());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f025f66b1dc381a51ca825b22f5741c3231be10e"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODIwNzkwOnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoxOTozNlrOFm-cSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoxOTozNlrOFm-cSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMzI1Ng==", "bodyText": "use org.mule.runtime.core.internal.util.FunctionalUtils#safely(T, org.mule.runtime.core.api.util.func.CheckedConsumer<T>, java.util.function.Consumer<java.lang.Exception>) instead", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r376413256", "createdAt": "2020-02-07T14:19:36Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "diffHunk": "@@ -87,30 +92,34 @@ public int getSize() {\n    * @return\n    */\n   private <R> R performWithConnection(Function<Object, R> function) {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n+    connectionSupplier = getConnectionSupplier();\n     Object connection = getConnection(connectionSupplier);\n     try {\n       R result = function.apply(connection);\n       connectionSupplier.close();\n       return result;\n     } catch (Exception e) {\n       if (isFirstPage) {\n-        closeDelegate(connection);\n+        silentlyCloseDelegate(connection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f025f66b1dc381a51ca825b22f5741c3231be10e"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODIwOTQ3OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoyMDowM1rOFm-dLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDo0ODowNVrOFm_YOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMzQ4Ng==", "bodyText": "safely()", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r376413486", "createdAt": "2020-02-07T14:20:03Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "diffHunk": "@@ -87,30 +92,34 @@ public int getSize() {\n    * @return\n    */\n   private <R> R performWithConnection(Function<Object, R> function) {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n+    connectionSupplier = getConnectionSupplier();\n     Object connection = getConnection(connectionSupplier);\n     try {\n       R result = function.apply(connection);\n       connectionSupplier.close();\n       return result;\n     } catch (Exception e) {\n       if (isFirstPage) {\n-        closeDelegate(connection);\n+        silentlyCloseDelegate(connection);\n       }\n       extractConnectionException(e).ifPresent(ex -> connectionSupplier.invalidateConnection());\n-      throw new MuleRuntimeException(createStaticMessage(COULD_NOT_EXECUTE), e);\n+      throw e;\n     }\n   }\n \n   /**\n    * Closes the delegate\n    */\n   @Override\n-  public void close() throws IOException {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n-    closeDelegate(getConnection(connectionSupplier));\n-    connectionSupplier.close();\n-    connectionSupplierFactory.dispose();\n+  public void close() {\n+    try {\n+      delegate.close(connectionSupplier.getConnection());\n+    } catch (Exception e) {\n+      throw new MuleRuntimeException(createStaticMessage(COULD_NOT_OBTAIN_A_CONNECTION), e);\n+    } finally {\n+      connectionSupplier.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f025f66b1dc381a51ca825b22f5741c3231be10e"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyODYwMA==", "bodyText": "see comment above", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r376428600", "createdAt": "2020-02-07T14:48:05Z", "author": {"login": "SebaElizalde"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "diffHunk": "@@ -87,30 +92,34 @@ public int getSize() {\n    * @return\n    */\n   private <R> R performWithConnection(Function<Object, R> function) {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n+    connectionSupplier = getConnectionSupplier();\n     Object connection = getConnection(connectionSupplier);\n     try {\n       R result = function.apply(connection);\n       connectionSupplier.close();\n       return result;\n     } catch (Exception e) {\n       if (isFirstPage) {\n-        closeDelegate(connection);\n+        silentlyCloseDelegate(connection);\n       }\n       extractConnectionException(e).ifPresent(ex -> connectionSupplier.invalidateConnection());\n-      throw new MuleRuntimeException(createStaticMessage(COULD_NOT_EXECUTE), e);\n+      throw e;\n     }\n   }\n \n   /**\n    * Closes the delegate\n    */\n   @Override\n-  public void close() throws IOException {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n-    closeDelegate(getConnection(connectionSupplier));\n-    connectionSupplier.close();\n-    connectionSupplierFactory.dispose();\n+  public void close() {\n+    try {\n+      delegate.close(connectionSupplier.getConnection());\n+    } catch (Exception e) {\n+      throw new MuleRuntimeException(createStaticMessage(COULD_NOT_OBTAIN_A_CONNECTION), e);\n+    } finally {\n+      connectionSupplier.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMzQ4Ng=="}, "originalCommit": {"oid": "f025f66b1dc381a51ca825b22f5741c3231be10e"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODIxMTAyOnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoyMDoyOVrOFm-eFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNzowOTo1N1rOFnEDvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMzcxNg==", "bodyText": "log any potential failures in this block, and continue", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r376413716", "createdAt": "2020-02-07T14:20:29Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "diffHunk": "@@ -87,30 +92,34 @@ public int getSize() {\n    * @return\n    */\n   private <R> R performWithConnection(Function<Object, R> function) {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n+    connectionSupplier = getConnectionSupplier();\n     Object connection = getConnection(connectionSupplier);\n     try {\n       R result = function.apply(connection);\n       connectionSupplier.close();\n       return result;\n     } catch (Exception e) {\n       if (isFirstPage) {\n-        closeDelegate(connection);\n+        silentlyCloseDelegate(connection);\n       }\n       extractConnectionException(e).ifPresent(ex -> connectionSupplier.invalidateConnection());\n-      throw new MuleRuntimeException(createStaticMessage(COULD_NOT_EXECUTE), e);\n+      throw e;\n     }\n   }\n \n   /**\n    * Closes the delegate\n    */\n   @Override\n-  public void close() throws IOException {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n-    closeDelegate(getConnection(connectionSupplier));\n-    connectionSupplier.close();\n-    connectionSupplierFactory.dispose();\n+  public void close() {\n+    try {\n+      delegate.close(connectionSupplier.getConnection());\n+    } catch (Exception e) {\n+      throw new MuleRuntimeException(createStaticMessage(COULD_NOT_OBTAIN_A_CONNECTION), e);\n+    } finally {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f025f66b1dc381a51ca825b22f5741c3231be10e"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyNzY4Mg==", "bodyText": "public void close() throws IOException {\n    ConnectionSupplier connectionSupplier = null;\n    try {\n      connectionSupplier = connectionSupplierFactory.getConnectionSupplier();\n      delegate.close(connectionSupplier.getConnection());\n    } catch (Exception e) {\n      throw new MuleRuntimeException(createStaticMessage(COULD_NOT_OBTAIN_A_CONNECTION), e);\n    } finally {\n      if (connectionSupplier != null) {\n        connectionSupplier.close();\n      }\n      connectionSupplierFactory.dispose();\n    }\n}\n\nThat was the original code, before the other PR. Logging failures would be breaking backwards, right?", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r376427682", "createdAt": "2020-02-07T14:46:25Z", "author": {"login": "SebaElizalde"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "diffHunk": "@@ -87,30 +92,34 @@ public int getSize() {\n    * @return\n    */\n   private <R> R performWithConnection(Function<Object, R> function) {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n+    connectionSupplier = getConnectionSupplier();\n     Object connection = getConnection(connectionSupplier);\n     try {\n       R result = function.apply(connection);\n       connectionSupplier.close();\n       return result;\n     } catch (Exception e) {\n       if (isFirstPage) {\n-        closeDelegate(connection);\n+        silentlyCloseDelegate(connection);\n       }\n       extractConnectionException(e).ifPresent(ex -> connectionSupplier.invalidateConnection());\n-      throw new MuleRuntimeException(createStaticMessage(COULD_NOT_EXECUTE), e);\n+      throw e;\n     }\n   }\n \n   /**\n    * Closes the delegate\n    */\n   @Override\n-  public void close() throws IOException {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n-    closeDelegate(getConnection(connectionSupplier));\n-    connectionSupplier.close();\n-    connectionSupplierFactory.dispose();\n+  public void close() {\n+    try {\n+      delegate.close(connectionSupplier.getConnection());\n+    } catch (Exception e) {\n+      throw new MuleRuntimeException(createStaticMessage(COULD_NOT_OBTAIN_A_CONNECTION), e);\n+    } finally {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMzcxNg=="}, "originalCommit": {"oid": "f025f66b1dc381a51ca825b22f5741c3231be10e"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjUwNTI3OA==", "bodyText": "ok, yes. You're right", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r376505278", "createdAt": "2020-02-07T17:09:57Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "diffHunk": "@@ -87,30 +92,34 @@ public int getSize() {\n    * @return\n    */\n   private <R> R performWithConnection(Function<Object, R> function) {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n+    connectionSupplier = getConnectionSupplier();\n     Object connection = getConnection(connectionSupplier);\n     try {\n       R result = function.apply(connection);\n       connectionSupplier.close();\n       return result;\n     } catch (Exception e) {\n       if (isFirstPage) {\n-        closeDelegate(connection);\n+        silentlyCloseDelegate(connection);\n       }\n       extractConnectionException(e).ifPresent(ex -> connectionSupplier.invalidateConnection());\n-      throw new MuleRuntimeException(createStaticMessage(COULD_NOT_EXECUTE), e);\n+      throw e;\n     }\n   }\n \n   /**\n    * Closes the delegate\n    */\n   @Override\n-  public void close() throws IOException {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n-    closeDelegate(getConnection(connectionSupplier));\n-    connectionSupplier.close();\n-    connectionSupplierFactory.dispose();\n+  public void close() {\n+    try {\n+      delegate.close(connectionSupplier.getConnection());\n+    } catch (Exception e) {\n+      throw new MuleRuntimeException(createStaticMessage(COULD_NOT_OBTAIN_A_CONNECTION), e);\n+    } finally {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxMzcxNg=="}, "originalCommit": {"oid": "f025f66b1dc381a51ca825b22f5741c3231be10e"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzk5NTY3OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTo1OToyOVrOFnzoxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTo1OToyOVrOFnzoxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI4NDgwNw==", "bodyText": "what you're closing thing is not a buffer", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r377284807", "createdAt": "2020-02-10T19:59:29Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "diffHunk": "@@ -87,30 +91,37 @@ public int getSize() {\n    * @return\n    */\n   private <R> R performWithConnection(Function<Object, R> function) {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n-    Object connection = getConnection(connectionSupplier);\n+    actualConnectionSupplier = getActualConnectionSupplier();\n+    Object connection = getConnection(actualConnectionSupplier);\n     try {\n       R result = function.apply(connection);\n-      connectionSupplier.close();\n+      actualConnectionSupplier.close();\n       return result;\n-    } catch (Exception e) {\n+    } catch (Exception exception) {\n       if (isFirstPage) {\n-        closeDelegate(connection);\n+        safely(() -> delegate.close(connection), e -> LOGGER.debug(\"Found exception closing buffer\", e));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6ba9068e06dfc6e7af2e1ba19a20de37e0888e4"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzk5OTIwOnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDowMDo0MFrOFnzq_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDowMDo0MFrOFnzq_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI4NTM3NQ==", "bodyText": "if there's no actual connection supplier then do nothing. You're opening a connection for the sole purpose of closing it", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r377285375", "createdAt": "2020-02-10T20:00:40Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "diffHunk": "@@ -87,30 +91,37 @@ public int getSize() {\n    * @return\n    */\n   private <R> R performWithConnection(Function<Object, R> function) {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n-    Object connection = getConnection(connectionSupplier);\n+    actualConnectionSupplier = getActualConnectionSupplier();\n+    Object connection = getConnection(actualConnectionSupplier);\n     try {\n       R result = function.apply(connection);\n-      connectionSupplier.close();\n+      actualConnectionSupplier.close();\n       return result;\n-    } catch (Exception e) {\n+    } catch (Exception exception) {\n       if (isFirstPage) {\n-        closeDelegate(connection);\n+        safely(() -> delegate.close(connection), e -> LOGGER.debug(\"Found exception closing buffer\", e));\n       }\n-      extractConnectionException(e).ifPresent(ex -> connectionSupplier.invalidateConnection());\n-      throw new MuleRuntimeException(createStaticMessage(COULD_NOT_EXECUTE), e);\n+      extractConnectionException(exception).ifPresent(ex -> actualConnectionSupplier.invalidateConnection());\n+      throw exception;\n     }\n   }\n \n   /**\n    * Closes the delegate\n    */\n   @Override\n-  public void close() throws IOException {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n-    closeDelegate(getConnection(connectionSupplier));\n-    connectionSupplier.close();\n-    connectionSupplierFactory.dispose();\n+  public void close() {\n+    try {\n+      if (actualConnectionSupplier == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6ba9068e06dfc6e7af2e1ba19a20de37e0888e4"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzM4MDE2OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODoxODoxM1rOFoTy5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTowOTo1NFrOFoZLjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxMTY4Ng==", "bodyText": "We are closing the connectionSupplier here, so no need to save it in a variable and close it later on the close() method.", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r377811686", "createdAt": "2020-02-11T18:18:13Z", "author": {"login": "SebaElizalde"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "diffHunk": "@@ -93,24 +96,32 @@ public int getSize() {\n       R result = function.apply(connection);\n       connectionSupplier.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1d92b1705bd989a6040a20e720d57089d632ed"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5OTkxNw==", "bodyText": "finally", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r377899917", "createdAt": "2020-02-11T21:09:54Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "diffHunk": "@@ -93,24 +96,32 @@ public int getSize() {\n       R result = function.apply(connection);\n       connectionSupplier.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxMTY4Ng=="}, "originalCommit": {"oid": "4d1d92b1705bd989a6040a20e720d57089d632ed"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzkyNjkxOnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTowOTozNlrOFoZK-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMTowOTozNlrOFoZK-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg5OTc2OA==", "bodyText": "safely", "url": "https://github.com/mulesoft/mule/pull/8635#discussion_r377899768", "createdAt": "2020-02-11T21:09:36Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/streaming/PagingProviderProducer.java", "diffHunk": "@@ -93,24 +96,32 @@ public int getSize() {\n       R result = function.apply(connection);\n       connectionSupplier.close();\n       return result;\n-    } catch (Exception e) {\n+    } catch (Exception exception) {\n       if (isFirstPage) {\n-        closeDelegate(connection);\n+        safely(() -> delegate.close(connection), e -> LOGGER.debug(\"Found exception closing paging provider\", e));\n       }\n-      extractConnectionException(e).ifPresent(ex -> connectionSupplier.invalidateConnection());\n-      throw new MuleRuntimeException(createStaticMessage(COULD_NOT_EXECUTE), e);\n+      extractConnectionException(exception).ifPresent(ex -> connectionSupplier.invalidateConnection());\n+      throw exception;\n     }\n   }\n \n   /**\n    * Closes the delegate\n    */\n   @Override\n-  public void close() throws IOException {\n-    ConnectionSupplier connectionSupplier = getConnectionSupplier();\n-    closeDelegate(getConnection(connectionSupplier));\n-    connectionSupplier.close();\n-    connectionSupplierFactory.dispose();\n+  public void close() {\n+    ConnectionSupplier connectionSupplier = null;\n+    try {\n+      connectionSupplier = connectionSupplierFactory.getConnectionSupplier();\n+      delegate.close(connectionSupplier.getConnection());\n+    } catch (Exception e) {\n+      throw new MuleRuntimeException(createStaticMessage(COULD_NOT_OBTAIN_A_CONNECTION), e);\n+    } finally {\n+      if (connectionSupplier != null) {\n+        connectionSupplier.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d1d92b1705bd989a6040a20e720d57089d632ed"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 167, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}