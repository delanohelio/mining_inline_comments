{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNzQ4NDQz", "number": 8794, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODozNDoyMlrODyMc1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODozNDoyMlrODyMc1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzOTU5MzgzOnYy", "diffSide": "RIGHT", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODozNDoyMlrOGGGe_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxODo0MDowNFrOGGGsoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1MDg3Ng==", "bodyText": "Why is this? I think that the functional approach is better.", "url": "https://github.com/mulesoft/mule/pull/8794#discussion_r409050876", "createdAt": "2020-04-15T18:34:22Z", "author": {"login": "lucianoRM"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java", "diffHunk": "@@ -466,9 +466,9 @@ private void registerErrorMappings(SpringComponentModel componentModel, Set<Stri\n         ComponentIdentifier source = parameters.containsKey(SOURCE_TYPE)\n             ? buildFromStringRepresentation(parameters.get(SOURCE_TYPE)) : ANY;\n \n-        muleContext.getErrorTypeRepository()\n-            .lookupErrorType(source)\n-            .orElseThrow(() -> new MuleRuntimeException(createStaticMessage(\"Could not find error '%s'.\", source)));\n+        if (!muleContext.getErrorTypeRepository().lookupErrorType(source).isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32a76100a533c9751891a35bf618f235a3b59443"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1MTkyOA==", "bodyText": "https://wiki.sei.cmu.edu/confluence/display/java/EXP00-J.+Do+not+ignore+values+returned+by+methods", "url": "https://github.com/mulesoft/mule/pull/8794#discussion_r409051928", "createdAt": "2020-04-15T18:36:00Z", "author": {"login": "gsfernandes"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java", "diffHunk": "@@ -466,9 +466,9 @@ private void registerErrorMappings(SpringComponentModel componentModel, Set<Stri\n         ComponentIdentifier source = parameters.containsKey(SOURCE_TYPE)\n             ? buildFromStringRepresentation(parameters.get(SOURCE_TYPE)) : ANY;\n \n-        muleContext.getErrorTypeRepository()\n-            .lookupErrorType(source)\n-            .orElseThrow(() -> new MuleRuntimeException(createStaticMessage(\"Could not find error '%s'.\", source)));\n+        if (!muleContext.getErrorTypeRepository().lookupErrorType(source).isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1MDg3Ng=="}, "originalCommit": {"oid": "32a76100a533c9751891a35bf618f235a3b59443"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1MzE0NA==", "bodyText": "'Return values from functions without side effects should not be ignored'\nWhen the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either the function call is useless and should be dropped or the source code doesn't behave as expected.", "url": "https://github.com/mulesoft/mule/pull/8794#discussion_r409053144", "createdAt": "2020-04-15T18:38:02Z", "author": {"login": "gsfernandes"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java", "diffHunk": "@@ -466,9 +466,9 @@ private void registerErrorMappings(SpringComponentModel componentModel, Set<Stri\n         ComponentIdentifier source = parameters.containsKey(SOURCE_TYPE)\n             ? buildFromStringRepresentation(parameters.get(SOURCE_TYPE)) : ANY;\n \n-        muleContext.getErrorTypeRepository()\n-            .lookupErrorType(source)\n-            .orElseThrow(() -> new MuleRuntimeException(createStaticMessage(\"Could not find error '%s'.\", source)));\n+        if (!muleContext.getErrorTypeRepository().lookupErrorType(source).isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1MDg3Ng=="}, "originalCommit": {"oid": "32a76100a533c9751891a35bf618f235a3b59443"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1MzY0NA==", "bodyText": "There is another way to still get the functional approach but makes code more unreadable.", "url": "https://github.com/mulesoft/mule/pull/8794#discussion_r409053644", "createdAt": "2020-04-15T18:38:50Z", "author": {"login": "gsfernandes"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java", "diffHunk": "@@ -466,9 +466,9 @@ private void registerErrorMappings(SpringComponentModel componentModel, Set<Stri\n         ComponentIdentifier source = parameters.containsKey(SOURCE_TYPE)\n             ? buildFromStringRepresentation(parameters.get(SOURCE_TYPE)) : ANY;\n \n-        muleContext.getErrorTypeRepository()\n-            .lookupErrorType(source)\n-            .orElseThrow(() -> new MuleRuntimeException(createStaticMessage(\"Could not find error '%s'.\", source)));\n+        if (!muleContext.getErrorTypeRepository().lookupErrorType(source).isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1MDg3Ng=="}, "originalCommit": {"oid": "32a76100a533c9751891a35bf618f235a3b59443"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1NDM2OQ==", "bodyText": "ok, make sense.", "url": "https://github.com/mulesoft/mule/pull/8794#discussion_r409054369", "createdAt": "2020-04-15T18:40:04Z", "author": {"login": "lucianoRM"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java", "diffHunk": "@@ -466,9 +466,9 @@ private void registerErrorMappings(SpringComponentModel componentModel, Set<Stri\n         ComponentIdentifier source = parameters.containsKey(SOURCE_TYPE)\n             ? buildFromStringRepresentation(parameters.get(SOURCE_TYPE)) : ANY;\n \n-        muleContext.getErrorTypeRepository()\n-            .lookupErrorType(source)\n-            .orElseThrow(() -> new MuleRuntimeException(createStaticMessage(\"Could not find error '%s'.\", source)));\n+        if (!muleContext.getErrorTypeRepository().lookupErrorType(source).isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwOTA1MDg3Ng=="}, "originalCommit": {"oid": "32a76100a533c9751891a35bf618f235a3b59443"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4989, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}