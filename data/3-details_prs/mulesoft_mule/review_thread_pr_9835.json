{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MjU5ODUy", "number": 9835, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDoxMDoxMVrOFDfxNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDoxMjoyN1rOFDf1jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjEwNTUwOnYy", "diffSide": "RIGHT", "path": "modules/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/artifact/metadata/MetadataKeyDeclarationResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDoxMDoxMVrOIDLETQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDoxMDoxMVrOIDLETQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5Nzk2NQ==", "bodyText": "static import", "url": "https://github.com/mulesoft/mule/pull/9835#discussion_r540197965", "createdAt": "2020-12-10T14:10:11Z", "author": {"login": "lucianoRM"}, "path": "modules/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/artifact/metadata/MetadataKeyDeclarationResolver.java", "diffHunk": "@@ -43,20 +50,34 @@\n  */\n public class MetadataKeyDeclarationResolver {\n \n+  private static final Logger LOGGER = LoggerFactory.getLogger(MetadataKeyDeclarationResolver.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5666005d53c6d873c2565f52f60644426d6bdd"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MjExNjYwOnYy", "diffSide": "RIGHT", "path": "modules/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/artifact/metadata/MetadataKeyDeclarationResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDoxMjoyN1rOIDLLFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNDoxNToyM1rOIDLTjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5OTcwMA==", "bodyText": "why this validation? When is the expressionManager going to be null? and why shouldn't we fail if that is the case?", "url": "https://github.com/mulesoft/mule/pull/9835#discussion_r540199700", "createdAt": "2020-12-10T14:12:27Z", "author": {"login": "lucianoRM"}, "path": "modules/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/artifact/metadata/MetadataKeyDeclarationResolver.java", "diffHunk": "@@ -68,15 +89,31 @@ public MetadataKeyResult resolveKeyResult() {\n     Map<String, String> keyPartValues =\n         getMetadataKeyPartsValuesFromComponentDeclaration(componentElementDeclaration, componentModel);\n     for (MetadataKeyInfo keyInfo : keyPartModelsInfo) {\n-      String id;\n+      String id = null;\n+      boolean isNullValue = false;\n       if (keyPartValues.containsKey(keyInfo.parameterModel.getName())) {\n         id = keyPartValues.get(keyInfo.parameterModel.getName());\n+        isNullValue = id == null;\n+      } else if (!partialKey && keyInfo.parameterModel.getDefaultValue() != null) {\n+        String defaultValue = keyInfo.parameterModel.getDefaultValue().toString();\n+        if (expressionManager != null && isExpression(defaultValue)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d5666005d53c6d873c2565f52f60644426d6bdd"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDIwMTg2OQ==", "bodyText": "We use this resolver from MTS to validate that the key is \"complete\" before calling Runtime. So, on that scenario we won't need to resolve the expression.", "url": "https://github.com/mulesoft/mule/pull/9835#discussion_r540201869", "createdAt": "2020-12-10T14:15:23Z", "author": {"login": "gsfernandes"}, "path": "modules/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/artifact/metadata/MetadataKeyDeclarationResolver.java", "diffHunk": "@@ -68,15 +89,31 @@ public MetadataKeyResult resolveKeyResult() {\n     Map<String, String> keyPartValues =\n         getMetadataKeyPartsValuesFromComponentDeclaration(componentElementDeclaration, componentModel);\n     for (MetadataKeyInfo keyInfo : keyPartModelsInfo) {\n-      String id;\n+      String id = null;\n+      boolean isNullValue = false;\n       if (keyPartValues.containsKey(keyInfo.parameterModel.getName())) {\n         id = keyPartValues.get(keyInfo.parameterModel.getName());\n+        isNullValue = id == null;\n+      } else if (!partialKey && keyInfo.parameterModel.getDefaultValue() != null) {\n+        String defaultValue = keyInfo.parameterModel.getDefaultValue().toString();\n+        if (expressionManager != null && isExpression(defaultValue)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDE5OTcwMA=="}, "originalCommit": {"oid": "4d5666005d53c6d873c2565f52f60644426d6bdd"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4573, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}