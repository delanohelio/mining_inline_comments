{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MjczNjgy", "number": 8655, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODo0ODowNVrODgexfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODo0ODozNlrODgex3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mzg1MjE1OnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/source/polling/DefaultSchedulerMessageSourceTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODo0ODowNVrOFqtZTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMDowMDoyN1rOFquodw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyODI3MQ==", "bodyText": "make this test parameterized and use a rule for the system property", "url": "https://github.com/mulesoft/mule/pull/8655#discussion_r380328271", "createdAt": "2020-02-17T18:48:05Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/source/polling/DefaultSchedulerMessageSourceTestCase.java", "diffHunk": "@@ -75,48 +89,51 @@ public void setUp() throws Exception {\n \n   @Test\n   public void simplePoll() throws Exception {\n-\n-    DefaultSchedulerMessageSource schedulerMessageSource = createMessageSource();\n-\n-    SensingNullMessageProcessor flow = getSensingNullMessageProcessor();\n-    schedulerMessageSource.setListener(flow);\n-    schedulerMessageSource.setAnnotations(singletonMap(LOCATION_KEY, TEST_CONNECTOR_LOCATION));\n-\n-    doAnswer(invocationOnMock -> {\n-      CoreEvent inputEvent = invocationOnMock.getArgument(0);\n-      flow.process(inputEvent);\n-      return null;\n-    }).when(sourcePolicy).process(any(CoreEvent.class), any(), any());\n-\n-    schedulerMessageSource.trigger();\n-    new PollingProber(RECEIVE_TIMEOUT, 100).check(new Probe() {\n+    pollAndAssertWith(p -> new PollingProber(RECEIVE_TIMEOUT, 100).check(new Probe() {\n \n       @Override\n       public boolean isSatisfied() {\n-        return flow.event != null;\n+        return p.event != null;\n       }\n \n       @Override\n       public String describeFailure() {\n         return \"flow event never set by the source flow\";\n       }\n-    });\n+    }));\n   }\n \n   @Test\n-  public void disposeScheduler() throws Exception {\n-    SchedulerService schedulerService = muleContext.getSchedulerService();\n-    reset(schedulerService);\n+  @Description(\"Verifies that no events are processed when the scheduler is disabled\")\n+  @Issue(\"MULE-18063\")\n+  public void simplePollDisabledWithScheduler() throws Exception {\n+    String wasDisabled = setProperty(MULE_DISABLE_SCHEDULERS, \"true\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a91c8786cb21862e12b64f9f52fe73d8cce24d4"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM0ODUzNQ==", "bodyText": "Done.  I split this TestCase in two to make one of them parameterized.", "url": "https://github.com/mulesoft/mule/pull/8655#discussion_r380348535", "createdAt": "2020-02-17T20:00:27Z", "author": {"login": "szaffarano"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/source/polling/DefaultSchedulerMessageSourceTestCase.java", "diffHunk": "@@ -75,48 +89,51 @@ public void setUp() throws Exception {\n \n   @Test\n   public void simplePoll() throws Exception {\n-\n-    DefaultSchedulerMessageSource schedulerMessageSource = createMessageSource();\n-\n-    SensingNullMessageProcessor flow = getSensingNullMessageProcessor();\n-    schedulerMessageSource.setListener(flow);\n-    schedulerMessageSource.setAnnotations(singletonMap(LOCATION_KEY, TEST_CONNECTOR_LOCATION));\n-\n-    doAnswer(invocationOnMock -> {\n-      CoreEvent inputEvent = invocationOnMock.getArgument(0);\n-      flow.process(inputEvent);\n-      return null;\n-    }).when(sourcePolicy).process(any(CoreEvent.class), any(), any());\n-\n-    schedulerMessageSource.trigger();\n-    new PollingProber(RECEIVE_TIMEOUT, 100).check(new Probe() {\n+    pollAndAssertWith(p -> new PollingProber(RECEIVE_TIMEOUT, 100).check(new Probe() {\n \n       @Override\n       public boolean isSatisfied() {\n-        return flow.event != null;\n+        return p.event != null;\n       }\n \n       @Override\n       public String describeFailure() {\n         return \"flow event never set by the source flow\";\n       }\n-    });\n+    }));\n   }\n \n   @Test\n-  public void disposeScheduler() throws Exception {\n-    SchedulerService schedulerService = muleContext.getSchedulerService();\n-    reset(schedulerService);\n+  @Description(\"Verifies that no events are processed when the scheduler is disabled\")\n+  @Issue(\"MULE-18063\")\n+  public void simplePollDisabledWithScheduler() throws Exception {\n+    String wasDisabled = setProperty(MULE_DISABLE_SCHEDULERS, \"true\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyODI3MQ=="}, "originalCommit": {"oid": "4a91c8786cb21862e12b64f9f52fe73d8cce24d4"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Mzg1MzA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/source/scheduler/DefaultSchedulerMessageSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODo0ODozNlrOFqtZ2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODo0ODozNlrOFqtZ2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMyODQwOQ==", "bodyText": "make this static and read the value on initialization", "url": "https://github.com/mulesoft/mule/pull/8655#discussion_r380328409", "createdAt": "2020-02-17T18:48:36Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/source/scheduler/DefaultSchedulerMessageSource.java", "diffHunk": "@@ -63,6 +66,7 @@\n \n   private final PeriodicScheduler scheduler;\n   private final boolean disallowConcurrentExecution;\n+  private final boolean disabled;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a91c8786cb21862e12b64f9f52fe73d8cce24d4"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 103, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}