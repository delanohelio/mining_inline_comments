{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxODM4ODk4", "number": 9245, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzozNzowN1rOEbcRMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzo0Njo0NVrOEbceVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjEwMTYyOnYy", "diffSide": "RIGHT", "path": "modules/tooling-support-parent/functional-tests/src/test/java/org/mule/runtime/module/tooling/ConnectivityTestingTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzozNzowN1rOHFX_AA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzozNzowN1rOHFX_AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM5Nzg4OA==", "bodyText": "Be sure to change this is you modify the message from the other PR", "url": "https://github.com/mulesoft/mule/pull/9245#discussion_r475397888", "createdAt": "2020-08-24T07:37:07Z", "author": {"login": "lucianoRM"}, "path": "modules/tooling-support-parent/functional-tests/src/test/java/org/mule/runtime/module/tooling/ConnectivityTestingTestCase.java", "diffHunk": "@@ -46,7 +46,7 @@ public void testConnectionWrongConfigurationName() {\n     ConnectionValidationResult connectionValidationResult = session.testConnection(\"invalidConfigName\");\n     assertThat(connectionValidationResult.isValid(), equalTo(false));\n     assertThat(connectionValidationResult.getMessage(),\n-               equalTo(\"Could not find a connection provider for configuration: 'invalidConfigName'\"));\n+               equalTo(\"Could not perform test connection for configuration: 'invalidConfigName' due to a connection provider is not defined\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2396a89367ee621744db0ec30dc4af2ff5251fb7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjEyODEyOnYy", "diffSide": "RIGHT", "path": "modules/tooling-support-parent/test-extension/src/test/java/org/mule/runtime/module/tooling/TestExtensionDeclarationUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzo0NDozOVrOHFYOLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDowNTowMVrOHFmmvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQwMTc3Mg==", "bodyText": "I wouldn't add this type of methods here. In any case, add a method that accepts the configName you want to use.\nBut this one seems too specific for the test case you are trying.\nAt least the idea of this class, was to provide an easy way to declare all elements of the TestExtension. But not to test different cases. That should be the concern of the user class", "url": "https://github.com/mulesoft/mule/pull/9245#discussion_r475401772", "createdAt": "2020-08-24T07:44:39Z", "author": {"login": "lucianoRM"}, "path": "modules/tooling-support-parent/test-extension/src/test/java/org/mule/runtime/module/tooling/TestExtensionDeclarationUtils.java", "diffHunk": "@@ -310,15 +323,36 @@ public static OperationElementDeclaration multiLevelShowInDslGroupOPDeclaration(\n     if (country != null) {\n       parameterGroupElementDeclarer.withParameter(\"country\", ParameterSimpleValue.of(country));\n     }\n+    if (city != null) {\n+      parameterGroupElementDeclarer.withParameter(\"city\", ParameterSimpleValue.of(city));\n+    }\n \n-    if (continent != null || country != null) {\n+    if (continent != null || country != null || city != null) {\n       elementDeclarer.withParameterGroup(parameterGroupElementDeclarer.getDeclaration());\n     }\n     return elementDeclarer.getDeclaration();\n+\n   }\n \n   public static ComponentElementDeclaration<?> invalidComponentDeclaration() {\n     return TEST_EXTENSION_DECLARER.newConstruct(\"invalid\").getDeclaration();\n   }\n \n+  public static ComponentElementDeclaration<?> componentDeclarationWrongConfigRef() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2396a89367ee621744db0ec30dc4af2ff5251fb7"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzNzQzNg==", "bodyText": "Ok, I will change it.", "url": "https://github.com/mulesoft/mule/pull/9245#discussion_r475637436", "createdAt": "2020-08-24T14:05:01Z", "author": {"login": "gsfernandes"}, "path": "modules/tooling-support-parent/test-extension/src/test/java/org/mule/runtime/module/tooling/TestExtensionDeclarationUtils.java", "diffHunk": "@@ -310,15 +323,36 @@ public static OperationElementDeclaration multiLevelShowInDslGroupOPDeclaration(\n     if (country != null) {\n       parameterGroupElementDeclarer.withParameter(\"country\", ParameterSimpleValue.of(country));\n     }\n+    if (city != null) {\n+      parameterGroupElementDeclarer.withParameter(\"city\", ParameterSimpleValue.of(city));\n+    }\n \n-    if (continent != null || country != null) {\n+    if (continent != null || country != null || city != null) {\n       elementDeclarer.withParameterGroup(parameterGroupElementDeclarer.getDeclaration());\n     }\n     return elementDeclarer.getDeclaration();\n+\n   }\n \n   public static ComponentElementDeclaration<?> invalidComponentDeclaration() {\n     return TEST_EXTENSION_DECLARER.newConstruct(\"invalid\").getDeclaration();\n   }\n \n+  public static ComponentElementDeclaration<?> componentDeclarationWrongConfigRef() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQwMTc3Mg=="}, "originalCommit": {"oid": "2396a89367ee621744db0ec30dc4af2ff5251fb7"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjEzNTI3OnYy", "diffSide": "RIGHT", "path": "modules/tooling-support-parent/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/config/InternalDeclarationSession.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNzo0Njo0NVrOHFYSPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDowMDozMFrOHFmZDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQwMjgxNA==", "bodyText": "artifactHelper is  being initialized once any of these 3 lazyValues are. That should not be a problem but maybe it would be better for them to accept LazyValue ?", "url": "https://github.com/mulesoft/mule/pull/9245#discussion_r475402814", "createdAt": "2020-08-24T07:46:45Z", "author": {"login": "lucianoRM"}, "path": "modules/tooling-support-parent/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/config/InternalDeclarationSession.java", "diffHunk": "@@ -100,215 +63,129 @@\n   @Inject\n   private ExpressionManager expressionManager;\n \n-  private LazyValue<ArtifactHelper> artifactHelperLazyValue;\n+  private final LazyValue<ArtifactHelper> artifactHelperLazyValue;\n+  private final LazyValue<ValueProviderExecutor> valueProviderExecutorLazyValue;\n+  private final LazyValue<MetadataKeysExecutor> metadataKeysExecutorLazyValue;\n+  private final LazyValue<MetadataComponentExecutor> metadataComponentExecutorLazyValue;\n \n   InternalDeclarationSession(ArtifactDeclaration artifactDeclaration) {\n     this.artifactHelperLazyValue =\n         new LazyValue<>(() -> new ArtifactHelper(extensionManager, componentLocator, artifactDeclaration));\n+    this.valueProviderExecutorLazyValue =\n+        new LazyValue<>(() -> new ValueProviderExecutor(muleContext, connectionManager, expressionManager, reflectionCache,\n+                                                        artifactHelper()));\n+    this.metadataKeysExecutorLazyValue =\n+        new LazyValue<>(() -> new MetadataKeysExecutor(connectionManager, reflectionCache, artifactHelper()));\n+    this.metadataComponentExecutorLazyValue =\n+        new LazyValue<>(() -> new MetadataComponentExecutor(connectionManager, reflectionCache, artifactHelper()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2396a89367ee621744db0ec30dc4af2ff5251fb7"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzMzkzMg==", "bodyText": "Actually the artifactHelper is used before to validate extension model from declaration so at the point the executor is used the artifactHelper is already initialized.", "url": "https://github.com/mulesoft/mule/pull/9245#discussion_r475633932", "createdAt": "2020-08-24T14:00:30Z", "author": {"login": "gsfernandes"}, "path": "modules/tooling-support-parent/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/config/InternalDeclarationSession.java", "diffHunk": "@@ -100,215 +63,129 @@\n   @Inject\n   private ExpressionManager expressionManager;\n \n-  private LazyValue<ArtifactHelper> artifactHelperLazyValue;\n+  private final LazyValue<ArtifactHelper> artifactHelperLazyValue;\n+  private final LazyValue<ValueProviderExecutor> valueProviderExecutorLazyValue;\n+  private final LazyValue<MetadataKeysExecutor> metadataKeysExecutorLazyValue;\n+  private final LazyValue<MetadataComponentExecutor> metadataComponentExecutorLazyValue;\n \n   InternalDeclarationSession(ArtifactDeclaration artifactDeclaration) {\n     this.artifactHelperLazyValue =\n         new LazyValue<>(() -> new ArtifactHelper(extensionManager, componentLocator, artifactDeclaration));\n+    this.valueProviderExecutorLazyValue =\n+        new LazyValue<>(() -> new ValueProviderExecutor(muleContext, connectionManager, expressionManager, reflectionCache,\n+                                                        artifactHelper()));\n+    this.metadataKeysExecutorLazyValue =\n+        new LazyValue<>(() -> new MetadataKeysExecutor(connectionManager, reflectionCache, artifactHelper()));\n+    this.metadataComponentExecutorLazyValue =\n+        new LazyValue<>(() -> new MetadataComponentExecutor(connectionManager, reflectionCache, artifactHelper()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQwMjgxNA=="}, "originalCommit": {"oid": "2396a89367ee621744db0ec30dc4af2ff5251fb7"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4832, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}