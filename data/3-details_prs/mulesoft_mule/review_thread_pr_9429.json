{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NDE3MTM0", "number": 9429, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNToxMDozOVrOEkln2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDo0MjoyN1rOEk_-lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODAwNjAzOnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/metadata/MetadataKeysDelegate.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNToxMDozOVrOHTnZDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNToxMDozOVrOHTnZDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMzMDM4Mg==", "bodyText": "Unify with the definition of the variable\nSet<MetadataKey> metadataKeys = context instanceOf ConnectionProviderAwareMetadaContext...", "url": "https://github.com/mulesoft/mule/pull/9429#discussion_r490330382", "createdAt": "2020-09-17T15:10:39Z", "author": {"login": "gabrieldalborgo"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/metadata/MetadataKeysDelegate.java", "diffHunk": "@@ -85,11 +87,11 @@\n     try {\n       final Map<Integer, ParameterModel> partsByOrder = getPartOrderMapping(keyParts);\n       Set<MetadataKey> metadataKeys;\n-      if (keyResolver instanceof PartialTypeKeysResolver && hasInitialLevel(partialKey, partsByOrder, reflectionCache)) {\n-        metadataKeys = singleton(((PartialTypeKeysResolver) keyResolver).resolveChilds(context, partialKey));\n-      } else {\n-        metadataKeys = keyResolver.getKeys(context);\n-      }\n+\n+      metadataKeys = context instanceof ConnectionProviderAwareMetadataContext", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97cde479d35d9726aef4c6337e470ca85d79ef89"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjI5OTg1OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/metadata/ConnectionProviderAwareMetadataContext.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDozNjo0OFrOHUP56g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNToyNToyMFrOHURxPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5NDE1NA==", "bodyText": "why 4.3.1?", "url": "https://github.com/mulesoft/mule/pull/9429#discussion_r490994154", "createdAt": "2020-09-18T14:36:48Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/metadata/ConnectionProviderAwareMetadataContext.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.metadata;\n+\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.metadata.MetadataContext;\n+\n+import java.util.Optional;\n+\n+/**\n+ * A {@link MetadataContext} which is aware of the {@link ConnectionProvider} used to provide its connection.\n+ *\n+ * @since 4.4.0, 4.3.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc28d2062fc835a17173811a8cf2fba2c74fde94"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAyMDcyNA==", "bodyText": "This should be cherry-picked to solve this issue for 4.3.x versions. If we decide that that is not necessary, we can add it only in 4.4.0.", "url": "https://github.com/mulesoft/mule/pull/9429#discussion_r491020724", "createdAt": "2020-09-18T15:18:36Z", "author": {"login": "ndinu"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/metadata/ConnectionProviderAwareMetadataContext.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.metadata;\n+\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.metadata.MetadataContext;\n+\n+import java.util.Optional;\n+\n+/**\n+ * A {@link MetadataContext} which is aware of the {@link ConnectionProvider} used to provide its connection.\n+ *\n+ * @since 4.4.0, 4.3.1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5NDE1NA=="}, "originalCommit": {"oid": "dc28d2062fc835a17173811a8cf2fba2c74fde94"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAyMTcxNg==", "bodyText": "the bug cannot be reproduced without OCS, which will only be available with 4.4.0", "url": "https://github.com/mulesoft/mule/pull/9429#discussion_r491021716", "createdAt": "2020-09-18T15:20:15Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/metadata/ConnectionProviderAwareMetadataContext.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.metadata;\n+\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.metadata.MetadataContext;\n+\n+import java.util.Optional;\n+\n+/**\n+ * A {@link MetadataContext} which is aware of the {@link ConnectionProvider} used to provide its connection.\n+ *\n+ * @since 4.4.0, 4.3.1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5NDE1NA=="}, "originalCommit": {"oid": "dc28d2062fc835a17173811a8cf2fba2c74fde94"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAyNDcwMw==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/mulesoft/mule/pull/9429#discussion_r491024703", "createdAt": "2020-09-18T15:25:20Z", "author": {"login": "ndinu"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/metadata/ConnectionProviderAwareMetadataContext.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.metadata;\n+\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.metadata.MetadataContext;\n+\n+import java.util.Optional;\n+\n+/**\n+ * A {@link MetadataContext} which is aware of the {@link ConnectionProvider} used to provide its connection.\n+ *\n+ * @since 4.4.0, 4.3.1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5NDE1NA=="}, "originalCommit": {"oid": "dc28d2062fc835a17173811a8cf2fba2c74fde94"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjMwMDk2OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/metadata/ConnectionProviderAwareMetadataContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDozNzowNFrOHUP6jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNToyMDo0M1rOHURmxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5NDMxNw==", "bodyText": "why the specialization intstead of adding this to the general metadataContext ?", "url": "https://github.com/mulesoft/mule/pull/9429#discussion_r490994317", "createdAt": "2020-09-18T14:37:04Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/metadata/ConnectionProviderAwareMetadataContext.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.metadata;\n+\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.metadata.MetadataContext;\n+\n+import java.util.Optional;\n+\n+/**\n+ * A {@link MetadataContext} which is aware of the {@link ConnectionProvider} used to provide its connection.\n+ *\n+ * @since 4.4.0, 4.3.1\n+ */\n+public interface ConnectionProviderAwareMetadataContext extends MetadataContext {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc28d2062fc835a17173811a8cf2fba2c74fde94"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAyMjAyMQ==", "bodyText": "MetadataContext is an api interface that developers use when resolving metadata. We don't want them to access to the instance of the connection provider. This ConnectionProviderAwareMetadataContext is an internal interface.", "url": "https://github.com/mulesoft/mule/pull/9429#discussion_r491022021", "createdAt": "2020-09-18T15:20:43Z", "author": {"login": "ndinu"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/metadata/ConnectionProviderAwareMetadataContext.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.metadata;\n+\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.metadata.MetadataContext;\n+\n+import java.util.Optional;\n+\n+/**\n+ * A {@link MetadataContext} which is aware of the {@link ConnectionProvider} used to provide its connection.\n+ *\n+ * @since 4.4.0, 4.3.1\n+ */\n+public interface ConnectionProviderAwareMetadataContext extends MetadataContext {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5NDMxNw=="}, "originalCommit": {"oid": "dc28d2062fc835a17173811a8cf2fba2c74fde94"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjMxNzAwOnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/metadata/MetadataKeysDelegate.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDo0MDo0NlrOHUQEMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNToyMjo1NlrOHURr0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5Njc4NA==", "bodyText": "this ternary construct is all over the place. Generalize it more.", "url": "https://github.com/mulesoft/mule/pull/9429#discussion_r490996784", "createdAt": "2020-09-18T14:40:46Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/metadata/MetadataKeysDelegate.java", "diffHunk": "@@ -84,12 +86,11 @@\n \n     try {\n       final Map<Integer, ParameterModel> partsByOrder = getPartOrderMapping(keyParts);\n-      Set<MetadataKey> metadataKeys;\n-      if (keyResolver instanceof PartialTypeKeysResolver && hasInitialLevel(partialKey, partsByOrder, reflectionCache)) {\n-        metadataKeys = singleton(((PartialTypeKeysResolver) keyResolver).resolveChilds(context, partialKey));\n-      } else {\n-        metadataKeys = keyResolver.getKeys(context);\n-      }\n+      Set<MetadataKey> metadataKeys = context instanceof ConnectionProviderAwareMetadataContext\n+          ? getWithTokenRefreshIfNecessary(((ConnectionProviderAwareMetadataContext) context).getConnectionProvider()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc28d2062fc835a17173811a8cf2fba2c74fde94"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAyMzMxNQ==", "bodyText": "Do you mean like having a util method that receives the context and a supplier and have this instanceof logic there?", "url": "https://github.com/mulesoft/mule/pull/9429#discussion_r491023315", "createdAt": "2020-09-18T15:22:56Z", "author": {"login": "ndinu"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/metadata/MetadataKeysDelegate.java", "diffHunk": "@@ -84,12 +86,11 @@\n \n     try {\n       final Map<Integer, ParameterModel> partsByOrder = getPartOrderMapping(keyParts);\n-      Set<MetadataKey> metadataKeys;\n-      if (keyResolver instanceof PartialTypeKeysResolver && hasInitialLevel(partialKey, partsByOrder, reflectionCache)) {\n-        metadataKeys = singleton(((PartialTypeKeysResolver) keyResolver).resolveChilds(context, partialKey));\n-      } else {\n-        metadataKeys = keyResolver.getKeys(context);\n-      }\n+      Set<MetadataKey> metadataKeys = context instanceof ConnectionProviderAwareMetadataContext\n+          ? getWithTokenRefreshIfNecessary(((ConnectionProviderAwareMetadataContext) context).getConnectionProvider()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5Njc4NA=="}, "originalCommit": {"oid": "dc28d2062fc835a17173811a8cf2fba2c74fde94"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjMyMTAyOnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/connectivity/oauth/ExtensionsOAuthUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDo0MTo0NFrOHUQGqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDo0MTo0NFrOHUQGqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5NzQxOQ==", "bodyText": "jdoc", "url": "https://github.com/mulesoft/mule/pull/9429#discussion_r490997419", "createdAt": "2020-09-18T14:41:44Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/connectivity/oauth/ExtensionsOAuthUtils.java", "diffHunk": "@@ -92,9 +94,12 @@ public static ClientCredentialsLocation toCredentialsLocation(CredentialsPlaceme\n \n   public static OAuthConnectionProviderWrapper getOAuthConnectionProvider(ExecutionContextAdapter operationContext) {\n     ConfigurationInstance config = ((ConfigurationInstance) operationContext.getConfiguration().get());\n-    ConnectionProvider provider =\n-        unwrapProviderWrapper(config.getConnectionProvider().get(), OAuthConnectionProviderWrapper.class);\n-    return provider instanceof OAuthConnectionProviderWrapper ? (OAuthConnectionProviderWrapper) provider : null;\n+    return getOAuthConnectionProvider(config.getConnectionProvider().get());\n+  }\n+\n+  public static OAuthConnectionProviderWrapper getOAuthConnectionProvider(ConnectionProvider provider) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc28d2062fc835a17173811a8cf2fba2c74fde94"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjMyNDA1OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/connectivity/oauth/ExtensionsOAuthUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDo0MjoyN1rOHUQIkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDo0MjoyN1rOHUQIkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk5NzkwNQ==", "bodyText": "add jdoc and rename to withRefreshToken", "url": "https://github.com/mulesoft/mule/pull/9429#discussion_r490997905", "createdAt": "2020-09-18T14:42:27Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/connectivity/oauth/ExtensionsOAuthUtils.java", "diffHunk": "@@ -195,19 +200,57 @@ public static OAuthConnectionProviderWrapper getOAuthConnectionProvider(Executio\n     }\n   }\n \n+  public static <T> T getWithTokenRefreshIfNecessary(ConnectionProvider connectionProvider, CheckedSupplier<T> supplier)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc28d2062fc835a17173811a8cf2fba2c74fde94"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4716, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}