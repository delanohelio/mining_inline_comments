{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NjM5OTMw", "number": 9786, "title": "MULE-18976: Implement Feature Flagging ", "bodyText": "", "createdAt": "2020-11-25T18:59:01Z", "url": "https://github.com/mulesoft/mule/pull/9786", "merged": true, "mergeCommit": {"oid": "b7e9ecfdee6c1cf0d46a6be721d8c11f47eacfe6"}, "closed": true, "closedAt": "2020-11-26T20:06:47Z", "author": {"login": "szaffarano"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdgCkNFAH2gAyNTI3NjM5OTMwOjgxZWJjODFmZTc3ZDMwNTI5ZDY1YTRmYjVhYzAxZTljMTAyMDZjOGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdgWzLAgFqTUzOTQ5Mjg3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "81ebc81fe77d30529d65a4fb5ac01e9c10206c8c", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/81ebc81fe77d30529d65a4fb5ac01e9c10206c8c", "committedDate": "2020-11-25T18:22:10Z", "message": "Initial commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f208d1c66319072e9d5916afa6d14cd810c56572", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/f208d1c66319072e9d5916afa6d14cd810c56572", "committedDate": "2020-11-25T18:22:10Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8aac31e170e2b8af371ff53f3215b3db54e88bae", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/8aac31e170e2b8af371ff53f3215b3db54e88bae", "committedDate": "2020-11-25T18:22:10Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ae76dcc15287cb8634894301bdedf4c9c374efb", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/8ae76dcc15287cb8634894301bdedf4c9c374efb", "committedDate": "2020-11-25T18:22:10Z", "message": "Adjust some details"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8743016da5f8921abfa9968a7ccfba61cb3abab5", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/8743016da5f8921abfa9968a7ccfba61cb3abab5", "committedDate": "2020-11-25T18:22:11Z", "message": "Adapt tests to changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52e65d8422df900edc7a3896afd8f804c3d71fa4", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/52e65d8422df900edc7a3896afd8f804c3d71fa4", "committedDate": "2020-11-25T18:46:58Z", "message": "Remove unused import"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c52493f24fff80bbdf0be04f2080ce6b183470c2", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/c52493f24fff80bbdf0be04f2080ce6b183470c2", "committedDate": "2020-11-25T18:56:23Z", "message": "Add javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f830faf2040b9f6bad358db8ca070d48f6cc233", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/3f830faf2040b9f6bad358db8ca070d48f6cc233", "committedDate": "2020-11-25T23:13:09Z", "message": "Add default constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/fc85eb52b725be4d8b231530e378fb949c24e383", "committedDate": "2020-11-26T09:32:11Z", "message": "Fix petstore tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NDczMzkx", "url": "https://github.com/mulesoft/mule/pull/9786#pullrequestreview-539473391", "createdAt": "2020-11-26T17:12:11Z", "commit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxMjoxMlrOH6jIhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxMzoxOFrOH6jKeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NTA3OA==", "bodyText": "allure", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531155078", "createdAt": "2020-11-26T17:12:12Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistryTestCase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.api.config;\n+\n+import static java.lang.String.format;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.is;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.tck.size.SmallTest;\n+\n+@SmallTest\n+public class FeatureFlaggingRegistryTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NTE2MQ==", "bodyText": "allure", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531155161", "createdAt": "2020-11-26T17:12:24Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/config/DefaultFeatureFlaggingServiceTestCase.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.internal.config;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.core.api.config.FeatureFlaggingService;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import static java.lang.String.format;\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+@RunWith(Parameterized.class)\n+public class DefaultFeatureFlaggingServiceTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NTU3Nw==", "bodyText": "will this be cherrypicked?", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531155577", "createdAt": "2020-11-26T17:13:18Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.api.config;\n+\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.core.api.MuleContext;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Predicate;\n+\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static java.util.Collections.unmodifiableMap;\n+import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n+\n+/**\n+ * Service used to register feature flags which will be evaluated at deployment time. For example:\n+ * \n+ * <code>\n+ *     // register a feature always \"on\"\n+ *     FeatureFlaggingRegistry.getInstance().registerFeature(\"some feature\", c -> true);\n+ * </code>\n+ * \n+ * <code>\n+ *    &#64;Inject\n+ *    &#64;Named(FEATURE_FLAGGING_SERVICE_KEY)\n+ *    private FeatureFlaggingService featureFlaggingService;\n+ *    // ....\n+ *    \n+ *    if (featureFlaggingService.isEnabled(\"some feature\")) {\n+ *        // ...\n+ *    }\n+ * </code>\n+ * \n+ * @see FeatureFlaggingRegistry\n+ * @since 4.4.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NDc0ODc4", "url": "https://github.com/mulesoft/mule/pull/9786#pullrequestreview-539474878", "createdAt": "2020-11-26T17:15:06Z", "commit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxNTowNlrOH6jNsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoyMDozOVrOH6jW-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NjQwMg==", "bodyText": "add javadoc", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531156402", "createdAt": "2020-11-26T17:15:06Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingService.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.api.config;\n+\n+/**\n+ * This service exposes the features that were flagged based on the configurations registered through the\n+ * {@link FeatureFlaggingRegistry}. These configurations will be evaluated when an application is deployed, which means that each\n+ * application will have its own set of flags independently of the rest of the applications deployed in a given runtime.\n+ * \n+ * @see FeatureFlaggingRegistry\n+ * @since 4.4.0\n+ */\n+public interface FeatureFlaggingService {\n+\n+  String FEATURE_FLAGGING_SERVICE_KEY = \"core.featureFlaggingService\";\n+\n+  boolean isEnabled(String feature);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NzI3Nw==", "bodyText": "javadoc", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531157277", "createdAt": "2020-11-26T17:17:08Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.api.config;\n+\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.core.api.MuleContext;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Predicate;\n+\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static java.util.Collections.unmodifiableMap;\n+import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n+\n+/**\n+ * Service used to register feature flags which will be evaluated at deployment time. For example:\n+ * \n+ * <code>\n+ *     // register a feature always \"on\"\n+ *     FeatureFlaggingRegistry.getInstance().registerFeature(\"some feature\", c -> true);\n+ * </code>\n+ * \n+ * <code>\n+ *    &#64;Inject\n+ *    &#64;Named(FEATURE_FLAGGING_SERVICE_KEY)\n+ *    private FeatureFlaggingService featureFlaggingService;\n+ *    // ....\n+ *    \n+ *    if (featureFlaggingService.isEnabled(\"some feature\")) {\n+ *        // ...\n+ *    }\n+ * </code>\n+ * \n+ * @see FeatureFlaggingRegistry\n+ * @since 4.4.0\n+ */\n+public class FeatureFlaggingRegistry {\n+\n+  private final Map<String, Predicate<MuleContext>> configurations = new ConcurrentHashMap<>();\n+\n+  private static final FeatureFlaggingRegistry INSTANCE = new FeatureFlaggingRegistry();\n+\n+  public static final FeatureFlaggingRegistry getInstance() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NzMwMg==", "bodyText": "javadoc", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531157302", "createdAt": "2020-11-26T17:17:11Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.api.config;\n+\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.core.api.MuleContext;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Predicate;\n+\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static java.util.Collections.unmodifiableMap;\n+import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n+\n+/**\n+ * Service used to register feature flags which will be evaluated at deployment time. For example:\n+ * \n+ * <code>\n+ *     // register a feature always \"on\"\n+ *     FeatureFlaggingRegistry.getInstance().registerFeature(\"some feature\", c -> true);\n+ * </code>\n+ * \n+ * <code>\n+ *    &#64;Inject\n+ *    &#64;Named(FEATURE_FLAGGING_SERVICE_KEY)\n+ *    private FeatureFlaggingService featureFlaggingService;\n+ *    // ....\n+ *    \n+ *    if (featureFlaggingService.isEnabled(\"some feature\")) {\n+ *        // ...\n+ *    }\n+ * </code>\n+ * \n+ * @see FeatureFlaggingRegistry\n+ * @since 4.4.0\n+ */\n+public class FeatureFlaggingRegistry {\n+\n+  private final Map<String, Predicate<MuleContext>> configurations = new ConcurrentHashMap<>();\n+\n+  private static final FeatureFlaggingRegistry INSTANCE = new FeatureFlaggingRegistry();\n+\n+  public static final FeatureFlaggingRegistry getInstance() {\n+    return INSTANCE;\n+  }\n+\n+  private FeatureFlaggingRegistry() {}\n+\n+  public void registerFeature(String feature, Predicate<MuleContext> condition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NzMzMg==", "bodyText": "javadoc", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531157332", "createdAt": "2020-11-26T17:17:15Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.api.config;\n+\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.core.api.MuleContext;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Predicate;\n+\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static java.util.Collections.unmodifiableMap;\n+import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n+\n+/**\n+ * Service used to register feature flags which will be evaluated at deployment time. For example:\n+ * \n+ * <code>\n+ *     // register a feature always \"on\"\n+ *     FeatureFlaggingRegistry.getInstance().registerFeature(\"some feature\", c -> true);\n+ * </code>\n+ * \n+ * <code>\n+ *    &#64;Inject\n+ *    &#64;Named(FEATURE_FLAGGING_SERVICE_KEY)\n+ *    private FeatureFlaggingService featureFlaggingService;\n+ *    // ....\n+ *    \n+ *    if (featureFlaggingService.isEnabled(\"some feature\")) {\n+ *        // ...\n+ *    }\n+ * </code>\n+ * \n+ * @see FeatureFlaggingRegistry\n+ * @since 4.4.0\n+ */\n+public class FeatureFlaggingRegistry {\n+\n+  private final Map<String, Predicate<MuleContext>> configurations = new ConcurrentHashMap<>();\n+\n+  private static final FeatureFlaggingRegistry INSTANCE = new FeatureFlaggingRegistry();\n+\n+  public static final FeatureFlaggingRegistry getInstance() {\n+    return INSTANCE;\n+  }\n+\n+  private FeatureFlaggingRegistry() {}\n+\n+  public void registerFeature(String feature, Predicate<MuleContext> condition) {\n+    if (isNullOrEmpty(feature)) {\n+      throw new MuleRuntimeException(createStaticMessage(\"Invalid feature name\"));\n+    }\n+\n+    if (condition == null) {\n+      throw new MuleRuntimeException(createStaticMessage(\"Error registering %s: condition must not be null\", feature));\n+    }\n+\n+    Predicate<MuleContext> added = configurations.putIfAbsent(feature, condition);\n+    if (added != null) {\n+      throw new MuleRuntimeException(createStaticMessage(\"Feature %s already registered\", feature));\n+    }\n+  }\n+\n+  public Map<String, Predicate<MuleContext>> getFeatureConfigurations() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NzUwNw==", "bodyText": "javadoc. Is this just for test?", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531157507", "createdAt": "2020-11-26T17:17:35Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.api.config;\n+\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.core.api.MuleContext;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Predicate;\n+\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static java.util.Collections.unmodifiableMap;\n+import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n+\n+/**\n+ * Service used to register feature flags which will be evaluated at deployment time. For example:\n+ * \n+ * <code>\n+ *     // register a feature always \"on\"\n+ *     FeatureFlaggingRegistry.getInstance().registerFeature(\"some feature\", c -> true);\n+ * </code>\n+ * \n+ * <code>\n+ *    &#64;Inject\n+ *    &#64;Named(FEATURE_FLAGGING_SERVICE_KEY)\n+ *    private FeatureFlaggingService featureFlaggingService;\n+ *    // ....\n+ *    \n+ *    if (featureFlaggingService.isEnabled(\"some feature\")) {\n+ *        // ...\n+ *    }\n+ * </code>\n+ * \n+ * @see FeatureFlaggingRegistry\n+ * @since 4.4.0\n+ */\n+public class FeatureFlaggingRegistry {\n+\n+  private final Map<String, Predicate<MuleContext>> configurations = new ConcurrentHashMap<>();\n+\n+  private static final FeatureFlaggingRegistry INSTANCE = new FeatureFlaggingRegistry();\n+\n+  public static final FeatureFlaggingRegistry getInstance() {\n+    return INSTANCE;\n+  }\n+\n+  private FeatureFlaggingRegistry() {}\n+\n+  public void registerFeature(String feature, Predicate<MuleContext> condition) {\n+    if (isNullOrEmpty(feature)) {\n+      throw new MuleRuntimeException(createStaticMessage(\"Invalid feature name\"));\n+    }\n+\n+    if (condition == null) {\n+      throw new MuleRuntimeException(createStaticMessage(\"Error registering %s: condition must not be null\", feature));\n+    }\n+\n+    Predicate<MuleContext> added = configurations.putIfAbsent(feature, condition);\n+    if (added != null) {\n+      throw new MuleRuntimeException(createStaticMessage(\"Feature %s already registered\", feature));\n+    }\n+  }\n+\n+  public Map<String, Predicate<MuleContext>> getFeatureConfigurations() {\n+    return unmodifiableMap(configurations);\n+  }\n+\n+  protected void clearFeatureConfigurations() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1Nzc2MA==", "bodyText": "keep these lines separated with <p>", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531157760", "createdAt": "2020-11-26T17:18:15Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/api/config/MuleConfiguration.java", "diffHunk": "@@ -7,15 +7,18 @@\n package org.mule.runtime.core.api.config;\n \n import org.mule.api.annotation.NoImplement;\n+import org.mule.runtime.api.meta.MuleVersion;\n import org.mule.runtime.api.serialization.ObjectSerializer;\n import org.mule.runtime.core.api.MuleContext;\n import org.mule.runtime.core.api.construct.Flow;\n import org.mule.runtime.core.api.processor.strategy.ProcessingStrategy;\n import org.mule.runtime.core.api.processor.strategy.ProcessingStrategyFactory;\n \n+import java.util.Optional;\n+\n /**\n- * Configuration info. which can be set when creating the MuleContext but becomes immutable after startup.\n- * TODO MULE-13121 Cleanup MuleConfiguration removing redundant config in Mule 4\n+ * Configuration info. which can be set when creating the MuleContext but becomes immutable after startup. TODO MULE-13121 Cleanup", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1ODc3OA==", "bodyText": "static import", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531158778", "createdAt": "2020-11-26T17:20:39Z", "author": {"login": "elrodro83"}, "path": "tests/test-extensions/petstore-extension/src/main/java/org/mule/test/petstore/extension/PetStoreOperations.java", "diffHunk": "@@ -70,6 +89,14 @@ public String echoWithSignature(String message) {\n     return message + \" echoed by Petstore\";\n   }\n \n+  @MediaType(TEXT_PLAIN)\n+  public String featureFlaggedEcho(String message) {\n+    if (ffService.isEnabled(LEGACY_BEHAVIOUR)) {\n+      return String.format(\"%s [old way]\", message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ce2acdac7c9a87224525ae3b940581db1b4bd06", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/8ce2acdac7c9a87224525ae3b940581db1b4bd06", "committedDate": "2020-11-26T17:50:28Z", "message": "Add allure annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8b4582e5d7181c4033215ef316d4bfd3055aef4", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/c8b4582e5d7181c4033215ef316d4bfd3055aef4", "committedDate": "2020-11-26T17:51:12Z", "message": "Add javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac613e296dac362acf1b9d0351a035cd269daec0", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/ac613e296dac362acf1b9d0351a035cd269daec0", "committedDate": "2020-11-26T17:51:33Z", "message": "Correct javadoct after code format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3902992b7e5963b18df755a9a48187d5c59b0a3c", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/3902992b7e5963b18df755a9a48187d5c59b0a3c", "committedDate": "2020-11-26T17:51:57Z", "message": "Add static import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NDkyNDAw", "url": "https://github.com/mulesoft/mule/pull/9786#pullrequestreview-539492400", "createdAt": "2020-11-26T17:55:19Z", "commit": {"oid": "3902992b7e5963b18df755a9a48187d5c59b0a3c"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a904741f787e0d887c189890c8b6edc702c33b01", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/a904741f787e0d887c189890c8b6edc702c33b01", "committedDate": "2020-11-26T17:55:46Z", "message": "Correct typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5NDkyODc2", "url": "https://github.com/mulesoft/mule/pull/9786#pullrequestreview-539492876", "createdAt": "2020-11-26T17:56:37Z", "commit": {"oid": "a904741f787e0d887c189890c8b6edc702c33b01"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1002, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}