{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5NTI1MzAx", "number": 9442, "title": "MULE-18566: Migrate test:life-cycle-* components so that they use an SDK extension", "bodyText": "", "createdAt": "2020-09-18T20:26:54Z", "url": "https://github.com/mulesoft/mule/pull/9442", "merged": true, "mergeCommit": {"oid": "3d890ccba130b7564e4466fbb91d89e9939980ce"}, "closed": true, "closedAt": "2020-09-22T20:36:17Z", "author": {"login": "eze210"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdKLt7cAFqTQ5MTc2MTQzNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLcSBrAFqTQ5MzczNjAzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNzYxNDM2", "url": "https://github.com/mulesoft/mule/pull/9442#pullrequestreview-491761436", "createdAt": "2020-09-18T20:28:03Z", "commit": {"oid": "e597149279f41e12b32b58bac9e012a5bb827935"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDoyODowM1rOHUa7eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDozNDo0MFrOHUbGuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NDc3OA==", "bodyText": "add javadocs", "url": "https://github.com/mulesoft/mule/pull/9442#discussion_r491174778", "createdAt": "2020-09-18T20:28:03Z", "author": {"login": "elrodro83"}, "path": "tests/test-components/src/main/java/org/mule/tests/api/LifecycleTracker.java", "diffHunk": "@@ -0,0 +1,12 @@\n+package org.mule.tests.api;\n+\n+import org.mule.runtime.api.lifecycle.Disposable;\n+import org.mule.runtime.api.lifecycle.Initialisable;\n+import org.mule.runtime.core.api.context.MuleContextAware;\n+\n+import java.util.List;\n+\n+public interface LifecycleTracker extends Initialisable, Disposable, MuleContextAware {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e597149279f41e12b32b58bac9e012a5bb827935"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NTA2NA==", "bodyText": "is the formatter being applied here?", "url": "https://github.com/mulesoft/mule/pull/9442#discussion_r491175064", "createdAt": "2020-09-18T20:28:42Z", "author": {"login": "elrodro83"}, "path": "tests/test-components/src/main/java/org/mule/tests/api/LifecycleTrackerConfiguration.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.tests.api;\n+\n+import org.mule.runtime.api.component.Component;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.core.api.MuleContext;\n+import org.mule.runtime.extension.api.annotation.Configuration;\n+import org.mule.runtime.extension.api.annotation.Operations;\n+import org.mule.runtime.extension.api.annotation.param.RefName;\n+import org.mule.runtime.extension.api.annotation.Sources;\n+import org.mule.tests.internal.BaseLifecycleTracker;\n+import org.mule.tests.internal.LifecycleTrackerOperations;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Configuration(name = \"lifecycleTrackerConfig\")\n+@Operations({LifecycleTrackerOperations.class})\n+@Sources(LifecycleTrackerSource.class)\n+public class LifecycleTrackerConfiguration extends BaseLifecycleTracker {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e597149279f41e12b32b58bac9e012a5bb827935"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NjE2OQ==", "bodyText": "why use String.contains here? aren't the operation names a short list already?", "url": "https://github.com/mulesoft/mule/pull/9442#discussion_r491176169", "createdAt": "2020-09-18T20:31:11Z", "author": {"login": "elrodro83"}, "path": "tests/test-components/src/main/java/org/mule/tests/api/LifecycleTrackerEnricher.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.tests.api;\n+\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.disposeIfNeeded;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.initialiseIfNeeded;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.startIfNeeded;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.stopIfNeeded;\n+import static org.slf4j.LoggerFactory.getLogger;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.api.meta.model.ComponentModel;\n+import org.mule.runtime.api.meta.model.declaration.fluent.OperationDeclaration;\n+import org.mule.runtime.core.api.MuleContext;\n+import org.mule.runtime.extension.api.loader.DeclarationEnricher;\n+import org.mule.runtime.extension.api.loader.ExtensionLoadingContext;\n+import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutor;\n+import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutorFactory;\n+import org.mule.runtime.extension.api.runtime.operation.ExecutionContext;\n+import org.mule.runtime.module.extension.api.loader.java.property.CompletableComponentExecutorModelProperty;\n+import org.mule.tests.internal.BaseLifecycleTracker;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+\n+public class LifecycleTrackerEnricher implements DeclarationEnricher {\n+\n+    @Override\n+    public void enrich(ExtensionLoadingContext extensionLoadingContext) {\n+        extensionLoadingContext.getExtensionDeclarer().getDeclaration().getOperations().forEach(operation -> {\n+            if (operation.getName().contains(\"lifecycleTracker\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e597149279f41e12b32b58bac9e012a5bb827935"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NjIyNA==", "bodyText": "same as above", "url": "https://github.com/mulesoft/mule/pull/9442#discussion_r491176224", "createdAt": "2020-09-18T20:31:19Z", "author": {"login": "elrodro83"}, "path": "tests/test-components/src/main/java/org/mule/tests/api/LifecycleTrackerEnricher.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.tests.api;\n+\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.disposeIfNeeded;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.initialiseIfNeeded;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.startIfNeeded;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.stopIfNeeded;\n+import static org.slf4j.LoggerFactory.getLogger;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.api.meta.model.ComponentModel;\n+import org.mule.runtime.api.meta.model.declaration.fluent.OperationDeclaration;\n+import org.mule.runtime.core.api.MuleContext;\n+import org.mule.runtime.extension.api.loader.DeclarationEnricher;\n+import org.mule.runtime.extension.api.loader.ExtensionLoadingContext;\n+import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutor;\n+import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutorFactory;\n+import org.mule.runtime.extension.api.runtime.operation.ExecutionContext;\n+import org.mule.runtime.module.extension.api.loader.java.property.CompletableComponentExecutorModelProperty;\n+import org.mule.tests.internal.BaseLifecycleTracker;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+\n+public class LifecycleTrackerEnricher implements DeclarationEnricher {\n+\n+    @Override\n+    public void enrich(ExtensionLoadingContext extensionLoadingContext) {\n+        extensionLoadingContext.getExtensionDeclarer().getDeclaration().getOperations().forEach(operation -> {\n+            if (operation.getName().contains(\"lifecycleTracker\")) {\n+                boolean shouldCheckPhase = operation.getName().contains(\"Check\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e597149279f41e12b32b58bac9e012a5bb827935"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3Njk3Nw==", "bodyText": "this oldFactory comes from an Optional already, use map/orElse here instead of if", "url": "https://github.com/mulesoft/mule/pull/9442#discussion_r491176977", "createdAt": "2020-09-18T20:33:00Z", "author": {"login": "elrodro83"}, "path": "tests/test-components/src/main/java/org/mule/tests/api/LifecycleTrackerEnricher.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.tests.api;\n+\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.disposeIfNeeded;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.initialiseIfNeeded;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.startIfNeeded;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.stopIfNeeded;\n+import static org.slf4j.LoggerFactory.getLogger;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.api.meta.model.ComponentModel;\n+import org.mule.runtime.api.meta.model.declaration.fluent.OperationDeclaration;\n+import org.mule.runtime.core.api.MuleContext;\n+import org.mule.runtime.extension.api.loader.DeclarationEnricher;\n+import org.mule.runtime.extension.api.loader.ExtensionLoadingContext;\n+import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutor;\n+import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutorFactory;\n+import org.mule.runtime.extension.api.runtime.operation.ExecutionContext;\n+import org.mule.runtime.module.extension.api.loader.java.property.CompletableComponentExecutorModelProperty;\n+import org.mule.tests.internal.BaseLifecycleTracker;\n+\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+\n+public class LifecycleTrackerEnricher implements DeclarationEnricher {\n+\n+    @Override\n+    public void enrich(ExtensionLoadingContext extensionLoadingContext) {\n+        extensionLoadingContext.getExtensionDeclarer().getDeclaration().getOperations().forEach(operation -> {\n+            if (operation.getName().contains(\"lifecycleTracker\")) {\n+                boolean shouldCheckPhase = operation.getName().contains(\"Check\");\n+                CompletableComponentExecutorFactory executorFactory = getExecutorFactory(operation, shouldCheckPhase);\n+                operation.addModelProperty(new CompletableComponentExecutorModelProperty(executorFactory));\n+            }\n+        });\n+    }\n+\n+    private CompletableComponentExecutorFactory getExecutorFactory(OperationDeclaration operation, boolean shouldCheckPhase) {\n+        Optional<CompletableComponentExecutorModelProperty> executorModelProperty = operation.getModelProperty(CompletableComponentExecutorModelProperty.class);\n+        CompletableComponentExecutorFactory<ComponentModel> oldFactory = executorModelProperty.map(CompletableComponentExecutorModelProperty::getExecutorFactory).orElse(null);\n+        return (componentModel, map) -> {\n+            CompletableComponentExecutor<ComponentModel> delegateExecutor = null;\n+            if (oldFactory != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e597149279f41e12b32b58bac9e012a5bb827935"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE3NzY1OQ==", "bodyText": "remove empty lines", "url": "https://github.com/mulesoft/mule/pull/9442#discussion_r491177659", "createdAt": "2020-09-18T20:34:40Z", "author": {"login": "elrodro83"}, "path": "tests/test-components/src/main/java/org/mule/tests/api/pojos/LifecycleObject.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.tests.api.pojos;\n+\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.lifecycle.Disposable;\n+import org.mule.runtime.api.lifecycle.Initialisable;\n+import org.mule.runtime.api.lifecycle.InitialisationException;\n+import org.mule.runtime.api.lifecycle.Startable;\n+import org.mule.runtime.api.lifecycle.Stoppable;\n+import org.mule.runtime.core.api.MuleContext;\n+import org.mule.runtime.extension.api.annotation.dsl.xml.TypeDsl;\n+import org.mule.runtime.extension.api.annotation.param.Optional;\n+import org.mule.runtime.extension.api.annotation.param.Parameter;\n+import org.mule.runtime.extension.api.annotation.param.RefName;\n+import org.mule.tests.api.LifecycleTrackerRegistry;\n+import org.mule.tests.internal.BaseLifecycleTracker;\n+\n+import javax.inject.Inject;\n+\n+@TypeDsl(allowTopLevelDefinition = true)\n+public class LifecycleObject extends BaseLifecycleTracker {\n+\n+    @Inject\n+    private LifecycleTrackerRegistry registry;\n+\n+    @RefName\n+    private String name;\n+\n+    @Optional\n+    @Parameter\n+    private String failurePhase;\n+\n+    @Optional\n+    @Parameter\n+    private String otherLifecycleObject;\n+\n+    public LifecycleObject() {\n+        super(false);\n+    }\n+\n+    @Override\n+    protected void onSetMuleContext(MuleContext muleContext) {\n+        addTrackingDataToRegistry(name);\n+        failIfNeeded(\"setMuleContext\");\n+    }\n+\n+    @Override\n+    protected void onInit(MuleContext muleContext) throws InitialisationException {\n+        failIfNeeded(Initialisable.PHASE_NAME);\n+    }\n+\n+    @Override\n+    protected void onStart() throws MuleException {\n+        failIfNeeded(Startable.PHASE_NAME);\n+    }\n+\n+    @Override\n+    protected void onStop() throws MuleException {\n+        failIfNeeded(Stoppable.PHASE_NAME);\n+    }\n+\n+    @Override\n+    protected void onDispose() {\n+        failIfNeeded(Disposable.PHASE_NAME);\n+    }\n+\n+\n+\n+    private void failIfNeeded(String phase) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e597149279f41e12b32b58bac9e012a5bb827935"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNzk1NDQw", "url": "https://github.com/mulesoft/mule/pull/9442#pullrequestreview-491795440", "createdAt": "2020-09-18T21:39:21Z", "commit": {"oid": "eab93ce5e5dbc30130a79fc9280300c4bbdfe9f9"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "668ae6d43ca94a18531f5eb51839f4e87d74d7b2", "author": {"user": {"login": "eze210", "name": "Ezequiel Werner"}}, "url": "https://github.com/mulesoft/mule/commit/668ae6d43ca94a18531f5eb51839f4e87d74d7b2", "committedDate": "2020-09-22T15:30:34Z", "message": "enricher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a34f1f7b6b48ab3d3679bdf09b512eb38b9a628c", "author": {"user": {"login": "eze210", "name": "Ezequiel Werner"}}, "url": "https://github.com/mulesoft/mule/commit/a34f1f7b6b48ab3d3679bdf09b512eb38b9a628c", "committedDate": "2020-09-22T15:30:34Z", "message": "working tracker"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a544585d901264494196d7205f5438a3dc115cc7", "author": {"user": {"login": "eze210", "name": "Ezequiel Werner"}}, "url": "https://github.com/mulesoft/mule/commit/a544585d901264494196d7205f5438a3dc115cc7", "committedDate": "2020-09-22T15:30:34Z", "message": "remove"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97287c6a9c4181b5f98c8a1505f1c7d1680c574f", "author": {"user": {"login": "eze210", "name": "Ezequiel Werner"}}, "url": "https://github.com/mulesoft/mule/commit/97287c6a9c4181b5f98c8a1505f1c7d1680c574f", "committedDate": "2020-09-22T15:30:34Z", "message": "source and scope"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1765a687edd9e45e587544ac2477eff06ef263be", "author": {"user": {"login": "eze210", "name": "Ezequiel Werner"}}, "url": "https://github.com/mulesoft/mule/commit/1765a687edd9e45e587544ac2477eff06ef263be", "committedDate": "2020-09-22T15:30:34Z", "message": "remove"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dccf7b367fd3ab8372a0e39d91b724e6e765f6b", "author": {"user": {"login": "eze210", "name": "Ezequiel Werner"}}, "url": "https://github.com/mulesoft/mule/commit/7dccf7b367fd3ab8372a0e39d91b724e6e765f6b", "committedDate": "2020-09-22T15:30:34Z", "message": "remove"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d694d51a99a531711fa64b41514caa2ec6dd130a", "author": {"user": {"login": "eze210", "name": "Ezequiel Werner"}}, "url": "https://github.com/mulesoft/mule/commit/d694d51a99a531711fa64b41514caa2ec6dd130a", "committedDate": "2020-09-22T15:30:34Z", "message": "lifecycle object"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5aae5584a5357536866c492b89c4e819a9e91efc", "author": {"user": {"login": "eze210", "name": "Ezequiel Werner"}}, "url": "https://github.com/mulesoft/mule/commit/5aae5584a5357536866c492b89c4e819a9e91efc", "committedDate": "2020-09-22T15:30:34Z", "message": "builder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5de750d8a59b49d6c299d327ece13f10ec5c4b0", "author": {"user": {"login": "eze210", "name": "Ezequiel Werner"}}, "url": "https://github.com/mulesoft/mule/commit/b5de750d8a59b49d6c299d327ece13f10ec5c4b0", "committedDate": "2020-09-22T15:30:34Z", "message": "Apply format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "98029a5d208918b6d779cb0a4e591798014c6b48", "author": {"user": {"login": "eze210", "name": "Ezequiel Werner"}}, "url": "https://github.com/mulesoft/mule/commit/98029a5d208918b6d779cb0a4e591798014c6b48", "committedDate": "2020-09-22T15:30:34Z", "message": "optionals refactor, add javadoc in interface and base class, add comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eab93ce5e5dbc30130a79fc9280300c4bbdfe9f9", "author": {"user": {"login": "eze210", "name": "Ezequiel Werner"}}, "url": "https://github.com/mulesoft/mule/commit/eab93ce5e5dbc30130a79fc9280300c4bbdfe9f9", "committedDate": "2020-09-18T21:32:11Z", "message": "optionals refactor, add javadoc in interface and base class, add comments"}, "afterCommit": {"oid": "98029a5d208918b6d779cb0a4e591798014c6b48", "author": {"user": {"login": "eze210", "name": "Ezequiel Werner"}}, "url": "https://github.com/mulesoft/mule/commit/98029a5d208918b6d779cb0a4e591798014c6b48", "committedDate": "2020-09-22T15:30:34Z", "message": "optionals refactor, add javadoc in interface and base class, add comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNzM2MDMx", "url": "https://github.com/mulesoft/mule/pull/9442#pullrequestreview-493736031", "createdAt": "2020-09-22T18:27:26Z", "commit": {"oid": "98029a5d208918b6d779cb0a4e591798014c6b48"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1213, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}