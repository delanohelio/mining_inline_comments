{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NzcxMzQw", "number": 9200, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODowMDoyNFrOEYK_Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOToyMjozNlrOEYM49w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzgxMjcxOnYy", "diffSide": "RIGHT", "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/nb/NonBlockingOperationsTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODowMDoyNFrOHAXYVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODowMDoyNFrOHAXYVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE0NTEwOQ==", "bodyText": "add proper issue", "url": "https://github.com/mulesoft/mule/pull/9200#discussion_r470145109", "createdAt": "2020-08-13T18:00:24Z", "author": {"login": "elrodro83"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/nb/NonBlockingOperationsTestCase.java", "diffHunk": "@@ -68,7 +68,11 @@ public void failingNonBlockingConnectedOperationThrownInsteadOfCallback() throws\n   @Test\n   public void failingNonBlockingConnectedOperation() throws Exception {\n     expectedException.expectFailingComponent(is(locator\n-        .find(Location.builder().globalName(\"fireMissile\").addProcessorsPart().addIndexPart(1).build()).get()));\n+        .find(Location.builder().globalName(\"fireMissile\").addProcessorsPart()\n+            // TODO MULE-XXXXX adjust accordingly", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb5db839ccb5af0fbef35ed528bb24ed0e6222bd"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODEyNDcxOnYy", "diffSide": "RIGHT", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ComponentModelReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOToyMjozNlrOHAaTZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOToyMjozNlrOHAaTZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5Mjk5OA==", "bodyText": "Remove necessary code", "url": "https://github.com/mulesoft/mule/pull/9200#discussion_r470192998", "createdAt": "2020-08-13T19:22:36Z", "author": {"login": "mlischetti"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/model/ComponentModelReader.java", "diffHunk": "@@ -34,38 +40,83 @@ public ComponentModelReader(ConfigurationPropertiesResolver configurationPropert\n     this.configurationPropertiesResolver = configurationPropertiesResolver;\n   }\n \n-  public ComponentAst extractComponentDefinitionModel(ConfigLine configLine, String configFileName) {\n+  public void extractComponentDefinitionModel(ConfigLine configLine, String configFileName,\n+                                              ComponentAstBuilder componentAstBuilder) {\n \n     String namespace = configLine.getNamespace() == null ? CORE_PREFIX : configLine.getNamespace();\n     String namespaceUri = configLine.getNamespaceUri() == null ? DslConstants.CORE_NAMESPACE : configLine.getNamespaceUri();\n-    ComponentModel.Builder builder = new ComponentModel.Builder()\n-        .setIdentifier(builder()\n-            .namespace(namespace)\n-            .namespaceUri(namespaceUri)\n-            .name(configLine.getIdentifier())\n-            .build())\n-        .setTextContent(resolveValueIfIsPlaceHolder(configLine.getTextContent()))\n-        .setConfigFileName(configFileName)\n-        .setLineNumber(configLine.getLineNumber())\n+\n+    ComponentMetadataAst.Builder metadataBuilder = ComponentMetadataAst.builder()\n+        .setFileName(configFileName)\n+        .setStartLine(configLine.getLineNumber())\n+        .setEndLine(configLine.getLineNumber())\n         .setStartColumn(configLine.getStartColumn())\n+        .setEndColumn(configLine.getStartColumn())\n         .setSourceCode(configLine.getSourceCode());\n-\n     configLine.getCustomAttributes()\n         .forEach((key, value) -> {\n-          builder.addCustomAttribute(key, value);\n+          QName qname = QName.valueOf(key);\n+\n+          if (isEmpty(qname.getNamespaceURI()) || NS_MULE_PARSER_METADATA.equals(qname.getNamespaceURI())) {\n+            metadataBuilder.putParserAttribute(qname.getLocalPart(), value);\n+          } else {\n+            metadataBuilder.putDocAttribute(qname.toString(), value.toString());\n+            if (NS_MULE_DOCUMENTATION.equals(qname.getNamespaceURI())) {\n+              // This is added for compatibility, since in previous versions the doc attributes were looked up without the\n+              // namespace.\n+              metadataBuilder.putDocAttribute(qname.getLocalPart(), value.toString());\n+            }\n+          }\n         });\n \n+    componentAstBuilder.withIdentifier(builder()\n+        .namespace(namespace)\n+        .namespaceUri(namespaceUri)\n+        .name(configLine.getIdentifier())\n+        .build())\n+        .withMetadata(metadataBuilder.build());\n+\n+    if (isNotBlank(configLine.getTextContent())) {\n+      componentAstBuilder.withRawParameter(BODY_RAW_PARAM_NAME, resolveValueIfIsPlaceHolder(configLine.getTextContent()));\n+    }\n+\n     for (SimpleConfigAttribute simpleConfigAttribute : configLine.getConfigAttributes().values()) {\n-      builder.addParameter(simpleConfigAttribute.getName(), resolveValueIfIsPlaceHolder(simpleConfigAttribute.getValue()),\n-                           simpleConfigAttribute.isValueFromSchema());\n+      componentAstBuilder.withRawParameter(simpleConfigAttribute.getName(),\n+                                           resolveValueIfIsPlaceHolder(simpleConfigAttribute.getValue()));\n     }\n \n-    List<ComponentAst> componentModels = configLine.getChildren().stream()\n-        .map(childConfigLine -> extractComponentDefinitionModel(childConfigLine, configFileName))\n-        .collect(toList());\n-    componentModels.stream()\n-        .forEach(componentDefinitionModel -> builder.addChildComponentModel((ComponentModel) componentDefinitionModel));\n-    return builder.build();\n+    // ComponentModel.Builder builder = new ComponentModel.Builder()\n+    // .setIdentifier(builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb5db839ccb5af0fbef35ed528bb24ed0e6222bd"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4811, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}