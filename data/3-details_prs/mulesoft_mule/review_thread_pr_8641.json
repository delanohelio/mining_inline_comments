{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMzk1NTg4", "number": 8641, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMjo1NzozNFrODeyu2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzoxMTowN1rODey-1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjE1MDY0OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMjo1NzozNFrOFoH7iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMjo1NzozNFrOFoH7iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxNzI5MQ==", "bodyText": "extract this version to a constant and add it as dependency managemnt", "url": "https://github.com/mulesoft/mule/pull/8641#discussion_r377617291", "createdAt": "2020-02-11T12:57:34Z", "author": {"login": "elrodro83"}, "path": "modules/extensions-support/pom.xml", "diffHunk": "@@ -73,6 +73,12 @@\n             <groupId>io.projectreactor</groupId>\n             <artifactId>reactor-core</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>net.bytebuddy</groupId>\n+            <artifactId>byte-buddy</artifactId>\n+            <version>1.10.7</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f327d802f845db4e9e023b934928112a0e922e8"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjE1Mzg1OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/exception/SdkMethodInvocationException.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMjo1ODoyN1rOFoH9Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMjo1ODoyN1rOFoH9Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxNzc0Mg==", "bodyText": "add serialVersion uuid", "url": "https://github.com/mulesoft/mule/pull/8641#discussion_r377617742", "createdAt": "2020-02-11T12:58:27Z", "author": {"login": "elrodro83"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/exception/SdkMethodInvocationException.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.exception;\n+\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+\n+/**\n+ * Signals that the SDK invoked an extension's method which threw an exception. The exception thrown will be available as\n+ * the cause.\n+ * <p>\n+ * Because this is a {@link MuleRuntimeException}, it will not automatically fill the stack trace, providing a performance\n+ * boost.\n+ *\n+ * @since 4.3.0\n+ */\n+public class SdkMethodInvocationException extends MuleRuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f327d802f845db4e9e023b934928112a0e922e8"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjE1NjQ2OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/exception/SdkMethodInvocationException.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMjo1OToxNVrOFoH-4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDoyOToxNlrOFoLBNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxODE0Nw==", "bodyText": "this is true also for MuleException. Did you make it a MuleRuntimeException because of this or do you actually need this to be a runtime exception?", "url": "https://github.com/mulesoft/mule/pull/8641#discussion_r377618147", "createdAt": "2020-02-11T12:59:15Z", "author": {"login": "elrodro83"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/exception/SdkMethodInvocationException.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.exception;\n+\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+\n+/**\n+ * Signals that the SDK invoked an extension's method which threw an exception. The exception thrown will be available as\n+ * the cause.\n+ * <p>\n+ * Because this is a {@link MuleRuntimeException}, it will not automatically fill the stack trace, providing a performance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f327d802f845db4e9e023b934928112a0e922e8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2Nzg5Mg==", "bodyText": "I need it to be a Runtime one", "url": "https://github.com/mulesoft/mule/pull/8641#discussion_r377667892", "createdAt": "2020-02-11T14:29:16Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/exception/SdkMethodInvocationException.java", "diffHunk": "@@ -0,0 +1,25 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.exception;\n+\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+\n+/**\n+ * Signals that the SDK invoked an extension's method which threw an exception. The exception thrown will be available as\n+ * the cause.\n+ * <p>\n+ * Because this is a {@link MuleRuntimeException}, it will not automatically fill the stack trace, providing a performance", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxODE0Nw=="}, "originalCommit": {"oid": "1f327d802f845db4e9e023b934928112a0e922e8"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjE1NzI1OnYy", "diffSide": "LEFT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/exception/TooManyConfigsException.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMjo1OTozNFrOFoH_aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDoyNDoxNlrOFoK0wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxODI4MA==", "bodyText": "is this removal related to this change?", "url": "https://github.com/mulesoft/mule/pull/8641#discussion_r377618280", "createdAt": "2020-02-11T12:59:34Z", "author": {"login": "elrodro83"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/exception/TooManyConfigsException.java", "diffHunk": "@@ -1,45 +0,0 @@\n-/*\n- * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n- * The software in this package is published under the terms of the CPAL v1.0\n- * license, a copy of which has been included with this distribution in the\n- * LICENSE.txt file.\n- */\n-package org.mule.runtime.module.extension.internal.runtime.exception;\n-\n-import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n-import org.mule.runtime.api.exception.MuleRuntimeException;\n-import org.mule.runtime.api.meta.model.ExtensionModel;\n-import org.mule.runtime.api.meta.model.config.ConfigurationModel;\n-\n-/**\n- * Exception to signal that too many configs are eligible for executing a component and thus the user should manually select one\n- *\n- * @since 4.0\n- */\n-public class TooManyConfigsException extends MuleRuntimeException {\n-\n-  private final ExtensionModel extensionModel;\n-  private final ConfigurationModel configurationModel;\n-  private final int configsCount;\n-\n-  public TooManyConfigsException(String message, ExtensionModel extensionModel, ConfigurationModel configurationModel,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f327d802f845db4e9e023b934928112a0e922e8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NDcwNA==", "bodyText": "no. It was dead code I came by", "url": "https://github.com/mulesoft/mule/pull/8641#discussion_r377664704", "createdAt": "2020-02-11T14:24:16Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/exception/TooManyConfigsException.java", "diffHunk": "@@ -1,45 +0,0 @@\n-/*\n- * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n- * The software in this package is published under the terms of the CPAL v1.0\n- * license, a copy of which has been included with this distribution in the\n- * LICENSE.txt file.\n- */\n-package org.mule.runtime.module.extension.internal.runtime.exception;\n-\n-import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n-import org.mule.runtime.api.exception.MuleRuntimeException;\n-import org.mule.runtime.api.meta.model.ExtensionModel;\n-import org.mule.runtime.api.meta.model.config.ConfigurationModel;\n-\n-/**\n- * Exception to signal that too many configs are eligible for executing a component and thus the user should manually select one\n- *\n- * @since 4.0\n- */\n-public class TooManyConfigsException extends MuleRuntimeException {\n-\n-  private final ExtensionModel extensionModel;\n-  private final ConfigurationModel configurationModel;\n-  private final int configsCount;\n-\n-  public TooManyConfigsException(String message, ExtensionModel extensionModel, ConfigurationModel configurationModel,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxODI4MA=="}, "originalCommit": {"oid": "1f327d802f845db4e9e023b934928112a0e922e8"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjE3MjQ0OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/GeneratedClass.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzowNDo0M1rOFoIIsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNTowMToyN1rOFoMVZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyMDY1Ng==", "bodyText": "the file should only be generated if a certain troubleshooting flag is enabled", "url": "https://github.com/mulesoft/mule/pull/8641#discussion_r377620656", "createdAt": "2020-02-11T13:04:43Z", "author": {"login": "elrodro83"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/GeneratedClass.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.execution;\n+\n+import java.io.File;\n+\n+/**\n+ * Represents a class that was dynamically generated at runtime\n+ *\n+ * @param <T> the generic type of the generated class\n+ * @since 4.3.0\n+ */\n+public final class GeneratedClass<T> {\n+\n+  private final Class<T> generatedClass;\n+  private final File byteCodeFile;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f327d802f845db4e9e023b934928112a0e922e8"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NTI3NQ==", "bodyText": "The underlying classloader is an URLClassLoader. How can you load the class otherwise?", "url": "https://github.com/mulesoft/mule/pull/8641#discussion_r377665275", "createdAt": "2020-02-11T14:25:07Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/GeneratedClass.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.execution;\n+\n+import java.io.File;\n+\n+/**\n+ * Represents a class that was dynamically generated at runtime\n+ *\n+ * @param <T> the generic type of the generated class\n+ * @since 4.3.0\n+ */\n+public final class GeneratedClass<T> {\n+\n+  private final Class<T> generatedClass;\n+  private final File byteCodeFile;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyMDY1Ng=="}, "originalCommit": {"oid": "1f327d802f845db4e9e023b934928112a0e922e8"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY4OTQ0Ng==", "bodyText": "good point", "url": "https://github.com/mulesoft/mule/pull/8641#discussion_r377689446", "createdAt": "2020-02-11T15:01:27Z", "author": {"login": "elrodro83"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/GeneratedClass.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.execution;\n+\n+import java.io.File;\n+\n+/**\n+ * Represents a class that was dynamically generated at runtime\n+ *\n+ * @param <T> the generic type of the generated class\n+ * @since 4.3.0\n+ */\n+public final class GeneratedClass<T> {\n+\n+  private final Class<T> generatedClass;\n+  private final File byteCodeFile;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyMDY1Ng=="}, "originalCommit": {"oid": "1f327d802f845db4e9e023b934928112a0e922e8"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjE3MzU1OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/GeneratedInstance.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzowNTowOFrOFoIJZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDoyNToyMVrOFoK3jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyMDgzNw==", "bodyText": "what's the point of this?", "url": "https://github.com/mulesoft/mule/pull/8641#discussion_r377620837", "createdAt": "2020-02-11T13:05:08Z", "author": {"login": "elrodro83"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/GeneratedInstance.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.execution;\n+\n+/**\n+ * Represents an instance of a {@link GeneratedClass}\n+ *\n+ * @param <T> the generic type of the generated instance\n+ * @since 4.3.0\n+ */\n+public final class GeneratedInstance<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f327d802f845db4e9e023b934928112a0e922e8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NTQyMA==", "bodyText": "being able to write the test case :)", "url": "https://github.com/mulesoft/mule/pull/8641#discussion_r377665420", "createdAt": "2020-02-11T14:25:21Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/GeneratedInstance.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.execution;\n+\n+/**\n+ * Represents an instance of a {@link GeneratedClass}\n+ *\n+ * @param <T> the generic type of the generated instance\n+ * @since 4.3.0\n+ */\n+public final class GeneratedInstance<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyMDgzNw=="}, "originalCommit": {"oid": "1f327d802f845db4e9e023b934928112a0e922e8"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjE4NjY1OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/executor/MethodExecutorGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzowOTozMFrOFoIRqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNDoyNTo0N1rOFoK4lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyMjk1NA==", "bodyText": "this seems to be called concurrently. Replace the map with a ConcurrentHashMap", "url": "https://github.com/mulesoft/mule/pull/8641#discussion_r377622954", "createdAt": "2020-02-11T13:09:30Z", "author": {"login": "elrodro83"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/executor/MethodExecutorGenerator.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.execution.executor;\n+\n+import static java.lang.System.identityHashCode;\n+import static java.util.Arrays.asList;\n+import static net.bytebuddy.description.modifier.FieldManifestation.FINAL;\n+import static net.bytebuddy.description.modifier.Visibility.PRIVATE;\n+import static net.bytebuddy.description.modifier.Visibility.PUBLIC;\n+import static net.bytebuddy.description.type.TypeDescription.Generic.Builder.parameterizedType;\n+import static net.bytebuddy.dynamic.loading.ClassLoadingStrategy.Default.INJECTION;\n+import static net.bytebuddy.dynamic.scaffold.subclass.ConstructorStrategy.Default.NO_CONSTRUCTORS;\n+import static net.bytebuddy.implementation.bytecode.member.FieldAccess.forField;\n+import static net.bytebuddy.implementation.bytecode.member.MethodReturn.VOID;\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n+import static org.mule.runtime.core.api.util.FileUtils.TEMP_DIR;\n+\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.core.internal.util.CompositeClassLoader;\n+import org.mule.runtime.extension.api.runtime.operation.ExecutionContext;\n+import org.mule.runtime.module.extension.internal.runtime.execution.ArgumentResolverDelegate;\n+import org.mule.runtime.module.extension.internal.runtime.execution.GeneratedClass;\n+import org.mule.runtime.module.extension.internal.runtime.execution.GeneratedInstance;\n+import org.mule.runtime.module.extension.internal.runtime.resolver.ArgumentResolver;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Parameter;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import net.bytebuddy.ByteBuddy;\n+import net.bytebuddy.description.field.FieldDescription;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription.ForLoadedType;\n+import net.bytebuddy.dynamic.DynamicType;\n+import net.bytebuddy.dynamic.DynamicType.Builder.MethodDefinition.ParameterDefinition.Annotatable;\n+import net.bytebuddy.dynamic.DynamicType.Unloaded;\n+import net.bytebuddy.dynamic.scaffold.InstrumentedType;\n+import net.bytebuddy.implementation.Implementation;\n+import net.bytebuddy.implementation.MethodCall;\n+import net.bytebuddy.implementation.MethodCall.ArgumentLoader;\n+import net.bytebuddy.implementation.bytecode.ByteCodeAppender;\n+import net.bytebuddy.implementation.bytecode.StackManipulation;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.implementation.bytecode.member.FieldAccess;\n+import net.bytebuddy.implementation.bytecode.member.MethodInvocation;\n+import net.bytebuddy.implementation.bytecode.member.MethodVariableAccess;\n+\n+/**\n+ * Uses bytecode manipulation to dynamically generate {@link MethodExecutor} classes that invoke a given method.\n+ *\n+ * @since 4.3.0\n+ */\n+public class MethodExecutorGenerator {\n+\n+  private static final String TARGET_INSTANCE_FIELD_NAME = \"__targetInstance\";\n+  private final Map<String, GeneratedClass<MethodExecutor>> executorClasses = new HashMap<>();\n+  private final int instanceId = identityHashCode(this);\n+\n+  /**\n+   * Creates a {@link GeneratedInstance} pointing to a dynamic {@link MethodExecutor} that executes the given {@code method}.\n+   * <p>\n+   * Each invocation to this method will return a new {@link GeneratedInstance} pointing to unique instances. However, all\n+   * invocations pointing to the same {@code method} will share the same underlying {@link GeneratedClass}\n+   *\n+   * @param targetInstance           the instance on which the method is to be executed\n+   * @param method                   the method to be invoked\n+   * @param argumentResolverDelegate the {@link ArgumentResolverDelegate} that provides the {@link ArgumentResolver resolvers}\n+   * @return a {@link GeneratedInstance}\n+   * @throws Exception if the instance cannot be generated\n+   */\n+  public GeneratedInstance<MethodExecutor> generate(Object targetInstance,\n+                                                    Method method,\n+                                                    ArgumentResolverDelegate argumentResolverDelegate)\n+      throws Exception {\n+\n+    GeneratedClass<MethodExecutor> generatedClass = getExecutorClass(method, targetInstance);\n+    List<Object> args = new ArrayList<>();\n+    args.add(targetInstance);\n+    args.addAll(asList(argumentResolverDelegate.getArgumentResolvers()));\n+\n+    MethodExecutor instance = (MethodExecutor) generatedClass.getGeneratedClass().getConstructors()[0]\n+        .newInstance(args.toArray(new Object[args.size()]));\n+\n+    return new GeneratedInstance<>(instance, generatedClass);\n+  }\n+\n+  private GeneratedClass<MethodExecutor> getExecutorClass(Method method, Object targetInstance) {\n+    String generatorName = getGeneratorName(method);\n+    return executorClasses.computeIfAbsent(generatorName, key -> generateExecutorClass(key, method, targetInstance));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f327d802f845db4e9e023b934928112a0e922e8"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzY2NTY4Ng==", "bodyText": "no. This is not called concurrently. But I will do the change anyway just in case", "url": "https://github.com/mulesoft/mule/pull/8641#discussion_r377665686", "createdAt": "2020-02-11T14:25:47Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/executor/MethodExecutorGenerator.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.execution.executor;\n+\n+import static java.lang.System.identityHashCode;\n+import static java.util.Arrays.asList;\n+import static net.bytebuddy.description.modifier.FieldManifestation.FINAL;\n+import static net.bytebuddy.description.modifier.Visibility.PRIVATE;\n+import static net.bytebuddy.description.modifier.Visibility.PUBLIC;\n+import static net.bytebuddy.description.type.TypeDescription.Generic.Builder.parameterizedType;\n+import static net.bytebuddy.dynamic.loading.ClassLoadingStrategy.Default.INJECTION;\n+import static net.bytebuddy.dynamic.scaffold.subclass.ConstructorStrategy.Default.NO_CONSTRUCTORS;\n+import static net.bytebuddy.implementation.bytecode.member.FieldAccess.forField;\n+import static net.bytebuddy.implementation.bytecode.member.MethodReturn.VOID;\n+import static net.bytebuddy.matcher.ElementMatchers.isConstructor;\n+import static net.bytebuddy.matcher.ElementMatchers.named;\n+import static net.bytebuddy.matcher.ElementMatchers.takesArguments;\n+import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n+import static org.mule.runtime.core.api.util.FileUtils.TEMP_DIR;\n+\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.core.internal.util.CompositeClassLoader;\n+import org.mule.runtime.extension.api.runtime.operation.ExecutionContext;\n+import org.mule.runtime.module.extension.internal.runtime.execution.ArgumentResolverDelegate;\n+import org.mule.runtime.module.extension.internal.runtime.execution.GeneratedClass;\n+import org.mule.runtime.module.extension.internal.runtime.execution.GeneratedInstance;\n+import org.mule.runtime.module.extension.internal.runtime.resolver.ArgumentResolver;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Parameter;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import net.bytebuddy.ByteBuddy;\n+import net.bytebuddy.description.field.FieldDescription;\n+import net.bytebuddy.description.method.MethodDescription;\n+import net.bytebuddy.description.type.TypeDescription.ForLoadedType;\n+import net.bytebuddy.dynamic.DynamicType;\n+import net.bytebuddy.dynamic.DynamicType.Builder.MethodDefinition.ParameterDefinition.Annotatable;\n+import net.bytebuddy.dynamic.DynamicType.Unloaded;\n+import net.bytebuddy.dynamic.scaffold.InstrumentedType;\n+import net.bytebuddy.implementation.Implementation;\n+import net.bytebuddy.implementation.MethodCall;\n+import net.bytebuddy.implementation.MethodCall.ArgumentLoader;\n+import net.bytebuddy.implementation.bytecode.ByteCodeAppender;\n+import net.bytebuddy.implementation.bytecode.StackManipulation;\n+import net.bytebuddy.implementation.bytecode.assign.Assigner;\n+import net.bytebuddy.implementation.bytecode.member.FieldAccess;\n+import net.bytebuddy.implementation.bytecode.member.MethodInvocation;\n+import net.bytebuddy.implementation.bytecode.member.MethodVariableAccess;\n+\n+/**\n+ * Uses bytecode manipulation to dynamically generate {@link MethodExecutor} classes that invoke a given method.\n+ *\n+ * @since 4.3.0\n+ */\n+public class MethodExecutorGenerator {\n+\n+  private static final String TARGET_INSTANCE_FIELD_NAME = \"__targetInstance\";\n+  private final Map<String, GeneratedClass<MethodExecutor>> executorClasses = new HashMap<>();\n+  private final int instanceId = identityHashCode(this);\n+\n+  /**\n+   * Creates a {@link GeneratedInstance} pointing to a dynamic {@link MethodExecutor} that executes the given {@code method}.\n+   * <p>\n+   * Each invocation to this method will return a new {@link GeneratedInstance} pointing to unique instances. However, all\n+   * invocations pointing to the same {@code method} will share the same underlying {@link GeneratedClass}\n+   *\n+   * @param targetInstance           the instance on which the method is to be executed\n+   * @param method                   the method to be invoked\n+   * @param argumentResolverDelegate the {@link ArgumentResolverDelegate} that provides the {@link ArgumentResolver resolvers}\n+   * @return a {@link GeneratedInstance}\n+   * @throws Exception if the instance cannot be generated\n+   */\n+  public GeneratedInstance<MethodExecutor> generate(Object targetInstance,\n+                                                    Method method,\n+                                                    ArgumentResolverDelegate argumentResolverDelegate)\n+      throws Exception {\n+\n+    GeneratedClass<MethodExecutor> generatedClass = getExecutorClass(method, targetInstance);\n+    List<Object> args = new ArrayList<>();\n+    args.add(targetInstance);\n+    args.addAll(asList(argumentResolverDelegate.getArgumentResolvers()));\n+\n+    MethodExecutor instance = (MethodExecutor) generatedClass.getGeneratedClass().getConstructors()[0]\n+        .newInstance(args.toArray(new Object[args.size()]));\n+\n+    return new GeneratedInstance<>(instance, generatedClass);\n+  }\n+\n+  private GeneratedClass<MethodExecutor> getExecutorClass(Method method, Object targetInstance) {\n+    String generatorName = getGeneratorName(method);\n+    return executorClasses.computeIfAbsent(generatorName, key -> generateExecutorClass(key, method, targetInstance));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyMjk1NA=="}, "originalCommit": {"oid": "1f327d802f845db4e9e023b934928112a0e922e8"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNjE5MTU2OnYy", "diffSide": "RIGHT", "path": "tests/performance/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzoxMTowN1rOFoIUiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMzoxMTowN1rOFoIUiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYyMzY5MQ==", "bodyText": "constant", "url": "https://github.com/mulesoft/mule/pull/8641#discussion_r377623691", "createdAt": "2020-02-11T13:11:07Z", "author": {"login": "elrodro83"}, "path": "tests/performance/pom.xml", "diffHunk": "@@ -54,6 +54,11 @@\n     </build>\n \n     <dependencies>\n+        <dependency>\n+            <groupId>net.bytebuddy</groupId>\n+            <artifactId>byte-buddy</artifactId>\n+            <version>1.10.7</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1f327d802f845db4e9e023b934928112a0e922e8"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 90, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}