{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3MjczNDkz", "number": 8818, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjo0NzowNFrOD1wePw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjo0NzoyNlrOD1wewA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3Njk1Mjk1OnYy", "diffSide": "RIGHT", "path": "transports/http/src/test/java/org/mule/transport/http/functional/HttpServerStopTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjo0NzowNFrOGLWCag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjo0NzowNFrOGLWCag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU0ODU4Ng==", "bodyText": "use constants.", "url": "https://github.com/mulesoft/mule/pull/8818#discussion_r414548586", "createdAt": "2020-04-24T12:47:04Z", "author": {"login": "fsgonz"}, "path": "transports/http/src/test/java/org/mule/transport/http/functional/HttpServerStopTestCase.java", "diffHunk": "@@ -35,31 +41,93 @@ protected String getConfigFile()\n         return \"http-listener-stop.xml\";\n     }\n \n+    @After\n+    public void startMuleContextIfStopped() throws MuleException\n+    {\n+        if (muleContext.isStopped())\n+        {\n+            muleContext.start();\n+        }\n+    }\n+\n     @Test\n     public void closeClientConnectionsWhenServerIsStopped() throws IOException, MuleException\n     {\n-        try (Socket clientSocket = new Socket(\"localhost\", dynamicPort.getNumber()))\n+        try (Socket idlePersistentConnection = generateIdlePersistentConnection())\n         {\n-            assertThat(clientSocket.isConnected(), is(true));\n+            muleContext.stop();\n+            muleContext.start();\n \n-            sendRequest(clientSocket);\n-            assertResponse(getResponse(clientSocket), true);\n+            sendRequest(idlePersistentConnection, \"/path\");\n+            assertResponse(getResponse(idlePersistentConnection), false);\n+        }\n+    }\n+\n+    @Test\n+    public void requestInflightDuringShutdownIsRespondedIncludingConnectionCloseHeader() throws IOException, InterruptedException, MuleException\n+    {\n+        Thread stopper = new MuleContextStopper();\n+        try (Socket slowRequestConnection = new Socket(\"localhost\", dynamicPort.getNumber()))\n+        {\n+            sendRequest(slowRequestConnection, \"/slow\");\n \n-            sendRequest(clientSocket);\n-            assertResponse(getResponse(clientSocket), true);\n+            // Give some time to the listener to parse the request and start an event, and stop mule in parallel.\n+            sleep(100);\n+            stopper.start();\n \n-            muleContext.stop();\n-            muleContext.start();\n+            // Response is ok, but connection close header is added.\n+            String slowRequestResponse = getResponse(slowRequestConnection);\n+            assertResponse(slowRequestResponse, true);\n+            assertThat(slowRequestResponse, containsString(\"Connection: close\"));\n+        }\n+        finally\n+        {\n+            stopper.join();\n+        }\n+    }\n+\n+    @Test\n+    public void closeIdleConnectionsWhenServerIsStoppedWhileThereIsAnInflightRequest() throws IOException, MuleException, InterruptedException\n+    {\n+        Thread stopper = new MuleContextStopper();\n+        try (Socket idlePersistentConnection = generateIdlePersistentConnection())\n+        {\n+            try (Socket slowRequestConnection = new Socket(\"localhost\", dynamicPort.getNumber()))\n+            {\n+                sendRequest(slowRequestConnection, \"/slow\");\n+\n+                // Give some time to the listener to parse the request and start an event, and stop mule in parallel.\n+                sleep(100);\n+                stopper.start();\n \n-            sendRequest(clientSocket);\n-            assertResponse(getResponse(clientSocket), false);\n+                // The first connection is closed before the second finishes processing.\n+                new PollingProber(300, 50).check(new ConnectionClosedProbe(idlePersistentConnection));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e752acd9873bdccafc577b1393182dee0aa1170"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3Njk1NDI0OnYy", "diffSide": "RIGHT", "path": "transports/http/src/test/java/org/mule/transport/http/functional/HttpServerStopTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjo0NzoyNlrOGLWDRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjo0NzoyNlrOGLWDRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU0ODgwNA==", "bodyText": "use constants for the path.", "url": "https://github.com/mulesoft/mule/pull/8818#discussion_r414548804", "createdAt": "2020-04-24T12:47:26Z", "author": {"login": "fsgonz"}, "path": "transports/http/src/test/java/org/mule/transport/http/functional/HttpServerStopTestCase.java", "diffHunk": "@@ -35,31 +41,93 @@ protected String getConfigFile()\n         return \"http-listener-stop.xml\";\n     }\n \n+    @After\n+    public void startMuleContextIfStopped() throws MuleException\n+    {\n+        if (muleContext.isStopped())\n+        {\n+            muleContext.start();\n+        }\n+    }\n+\n     @Test\n     public void closeClientConnectionsWhenServerIsStopped() throws IOException, MuleException\n     {\n-        try (Socket clientSocket = new Socket(\"localhost\", dynamicPort.getNumber()))\n+        try (Socket idlePersistentConnection = generateIdlePersistentConnection())\n         {\n-            assertThat(clientSocket.isConnected(), is(true));\n+            muleContext.stop();\n+            muleContext.start();\n \n-            sendRequest(clientSocket);\n-            assertResponse(getResponse(clientSocket), true);\n+            sendRequest(idlePersistentConnection, \"/path\");\n+            assertResponse(getResponse(idlePersistentConnection), false);\n+        }\n+    }\n+\n+    @Test\n+    public void requestInflightDuringShutdownIsRespondedIncludingConnectionCloseHeader() throws IOException, InterruptedException, MuleException\n+    {\n+        Thread stopper = new MuleContextStopper();\n+        try (Socket slowRequestConnection = new Socket(\"localhost\", dynamicPort.getNumber()))\n+        {\n+            sendRequest(slowRequestConnection, \"/slow\");\n \n-            sendRequest(clientSocket);\n-            assertResponse(getResponse(clientSocket), true);\n+            // Give some time to the listener to parse the request and start an event, and stop mule in parallel.\n+            sleep(100);\n+            stopper.start();\n \n-            muleContext.stop();\n-            muleContext.start();\n+            // Response is ok, but connection close header is added.\n+            String slowRequestResponse = getResponse(slowRequestConnection);\n+            assertResponse(slowRequestResponse, true);\n+            assertThat(slowRequestResponse, containsString(\"Connection: close\"));\n+        }\n+        finally\n+        {\n+            stopper.join();\n+        }\n+    }\n+\n+    @Test\n+    public void closeIdleConnectionsWhenServerIsStoppedWhileThereIsAnInflightRequest() throws IOException, MuleException, InterruptedException\n+    {\n+        Thread stopper = new MuleContextStopper();\n+        try (Socket idlePersistentConnection = generateIdlePersistentConnection())\n+        {\n+            try (Socket slowRequestConnection = new Socket(\"localhost\", dynamicPort.getNumber()))\n+            {\n+                sendRequest(slowRequestConnection, \"/slow\");\n+\n+                // Give some time to the listener to parse the request and start an event, and stop mule in parallel.\n+                sleep(100);\n+                stopper.start();\n \n-            sendRequest(clientSocket);\n-            assertResponse(getResponse(clientSocket), false);\n+                // The first connection is closed before the second finishes processing.\n+                new PollingProber(300, 50).check(new ConnectionClosedProbe(idlePersistentConnection));\n+            }\n+        }\n+        finally\n+        {\n+            stopper.join();\n         }\n     }\n \n-    private void sendRequest(Socket socket) throws IOException\n+    private Socket generateIdlePersistentConnection() throws IOException\n+    {\n+        Socket socket = new Socket(\"localhost\", dynamicPort.getNumber());\n+        assertThat(socket.isConnected(), is(true));\n+\n+        sendRequest(socket, \"/path\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e752acd9873bdccafc577b1393182dee0aa1170"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}