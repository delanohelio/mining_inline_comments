{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI4NzMyMjA0", "number": 9802, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzo1OTo0NFrOE_vglw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODowNTo1MVrOE_vqNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1Mjc0MTM1OnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/construct/DefaultFlowTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzo1OTo0NFrOH9na-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzo1OTo0NFrOH9na-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3MTA2NA==", "bodyText": "static import", "url": "https://github.com/mulesoft/mule/pull/9802#discussion_r534371064", "createdAt": "2020-12-02T17:59:44Z", "author": {"login": "eze210"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/construct/DefaultFlowTestCase.java", "diffHunk": "@@ -147,6 +157,11 @@ protected AbstractFlowConstruct getStoppedFlowConstruct() throws Exception {\n     return stoppedFlow;\n   }\n \n+  @Before\n+  public void before() {\n+    executor = Executors.newSingleThreadExecutor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43b7516b5fbd2c6b8f865dd88bed10d143f87473"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1Mjc0ODI1OnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/construct/DefaultFlowTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODowMToyMlrOH9nfNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODowMToyMlrOH9nfNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3MjE1MQ==", "bodyText": "remove extra blanks", "url": "https://github.com/mulesoft/mule/pull/9802#discussion_r534372151", "createdAt": "2020-12-02T18:01:22Z", "author": {"login": "eze210"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/construct/DefaultFlowTestCase.java", "diffHunk": "@@ -503,7 +520,30 @@ public void doNotExecuteOnErrorContinueDefinedOutsideTheFlow() throws MuleExcept\n     assertThat(nonExpectedError.get(), is(false));\n   }\n \n-  private void startFlow() throws InitialisationException, MuleException {\n+  @Test\n+  @Issue(\"MULE-18873\")\n+  public void flowInsideProcessWithChildContextMustNotDropEvents()\n+      throws MuleException, ExecutionException, InterruptedException {\n+    CoreEvent testEvent = testEvent();\n+    flow = (DefaultFlow) Flow.builder(FLOW_NAME, muleContext)\n+        .source(flow.getSource())\n+        .processors(singletonList(new BlockMessageProcessor()))\n+        .processingStrategyFactory(new ProactorStreamEmitterProcessingStrategyFactory())\n+        .build();\n+    startFlow();\n+    Flux<CoreEvent> flowProcessing = Flux\n+        .from(MessageProcessors.processWithChildContext(testEvent, flow, Optional.of(from(FLOW_NAME))));\n+    Future validation = executor.submit(() -> StepVerifier.create(flowProcessing)\n+        .expectNext(testEvent)\n+        .expectComplete()\n+        .verifyThenAssertThat()\n+        .hasNotDroppedElements());\n+    validation.get();\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43b7516b5fbd2c6b8f865dd88bed10d143f87473"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1Mjc1MjIyOnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/construct/DefaultFlowTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODowMjoyMlrOH9nhmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjoxNjozNlrOH9wb6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3Mjc2Mg==", "bodyText": "Isn't it possible to use a Latch?", "url": "https://github.com/mulesoft/mule/pull/9802#discussion_r534372762", "createdAt": "2020-12-02T18:02:22Z", "author": {"login": "eze210"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/construct/DefaultFlowTestCase.java", "diffHunk": "@@ -524,4 +564,18 @@ public CoreEvent process(CoreEvent event) throws MuleException {\n           });\n     }\n   }\n+\n+  public static class BlockMessageProcessor extends AbstractComponent implements Processor {\n+\n+    @Override\n+    public CoreEvent process(CoreEvent event) throws MuleException {\n+      return sleepFor(event, muleContext.getConfiguration().getShutdownTimeout() * 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43b7516b5fbd2c6b8f865dd88bed10d143f87473"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUxODc2Mw==", "bodyText": "Discussed offline, but short answer is that a latch has no use for this test case (we just couldn't know when such latch should be released)", "url": "https://github.com/mulesoft/mule/pull/9802#discussion_r534518763", "createdAt": "2020-12-02T22:16:36Z", "author": {"login": "IvanAndresFritzler"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/construct/DefaultFlowTestCase.java", "diffHunk": "@@ -524,4 +564,18 @@ public CoreEvent process(CoreEvent event) throws MuleException {\n           });\n     }\n   }\n+\n+  public static class BlockMessageProcessor extends AbstractComponent implements Processor {\n+\n+    @Override\n+    public CoreEvent process(CoreEvent event) throws MuleException {\n+      return sleepFor(event, muleContext.getConfiguration().getShutdownTimeout() * 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3Mjc2Mg=="}, "originalCommit": {"oid": "43b7516b5fbd2c6b8f865dd88bed10d143f87473"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1Mjc1ODI2OnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/construct/DefaultFlowTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODowMzo1N1rOH9nlQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODowMzo1N1rOH9nlQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3MzY5Nw==", "bodyText": "static import", "url": "https://github.com/mulesoft/mule/pull/9802#discussion_r534373697", "createdAt": "2020-12-02T18:03:57Z", "author": {"login": "eze210"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/construct/DefaultFlowTestCase.java", "diffHunk": "@@ -503,7 +520,30 @@ public void doNotExecuteOnErrorContinueDefinedOutsideTheFlow() throws MuleExcept\n     assertThat(nonExpectedError.get(), is(false));\n   }\n \n-  private void startFlow() throws InitialisationException, MuleException {\n+  @Test\n+  @Issue(\"MULE-18873\")\n+  public void flowInsideProcessWithChildContextMustNotDropEvents()\n+      throws MuleException, ExecutionException, InterruptedException {\n+    CoreEvent testEvent = testEvent();\n+    flow = (DefaultFlow) Flow.builder(FLOW_NAME, muleContext)\n+        .source(flow.getSource())\n+        .processors(singletonList(new BlockMessageProcessor()))\n+        .processingStrategyFactory(new ProactorStreamEmitterProcessingStrategyFactory())\n+        .build();\n+    startFlow();\n+    Flux<CoreEvent> flowProcessing = Flux\n+        .from(MessageProcessors.processWithChildContext(testEvent, flow, Optional.of(from(FLOW_NAME))));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43b7516b5fbd2c6b8f865dd88bed10d143f87473"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1Mjc2NTk3OnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/construct/DefaultFlowTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxODowNTo1MVrOH9np3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjoxODozNFrOH9wfTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3NDg3OQ==", "bodyText": "Is the executor needed? What do you think about directly this?\nStepVerifier.create(flowProcessing)\n        .expectNext(testEvent)\n        .expectComplete()\n        .verifyThenAssertThat()\n        .hasNotDroppedElements();", "url": "https://github.com/mulesoft/mule/pull/9802#discussion_r534374879", "createdAt": "2020-12-02T18:05:51Z", "author": {"login": "eze210"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/construct/DefaultFlowTestCase.java", "diffHunk": "@@ -503,7 +520,30 @@ public void doNotExecuteOnErrorContinueDefinedOutsideTheFlow() throws MuleExcept\n     assertThat(nonExpectedError.get(), is(false));\n   }\n \n-  private void startFlow() throws InitialisationException, MuleException {\n+  @Test\n+  @Issue(\"MULE-18873\")\n+  public void flowInsideProcessWithChildContextMustNotDropEvents()\n+      throws MuleException, ExecutionException, InterruptedException {\n+    CoreEvent testEvent = testEvent();\n+    flow = (DefaultFlow) Flow.builder(FLOW_NAME, muleContext)\n+        .source(flow.getSource())\n+        .processors(singletonList(new BlockMessageProcessor()))\n+        .processingStrategyFactory(new ProactorStreamEmitterProcessingStrategyFactory())\n+        .build();\n+    startFlow();\n+    Flux<CoreEvent> flowProcessing = Flux\n+        .from(MessageProcessors.processWithChildContext(testEvent, flow, Optional.of(from(FLOW_NAME))));\n+    Future validation = executor.submit(() -> StepVerifier.create(flowProcessing)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43b7516b5fbd2c6b8f865dd88bed10d143f87473"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUxOTYzMA==", "bodyText": "No needed at all (was a residue of trying to see if a latch could be used)", "url": "https://github.com/mulesoft/mule/pull/9802#discussion_r534519630", "createdAt": "2020-12-02T22:18:34Z", "author": {"login": "IvanAndresFritzler"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/construct/DefaultFlowTestCase.java", "diffHunk": "@@ -503,7 +520,30 @@ public void doNotExecuteOnErrorContinueDefinedOutsideTheFlow() throws MuleExcept\n     assertThat(nonExpectedError.get(), is(false));\n   }\n \n-  private void startFlow() throws InitialisationException, MuleException {\n+  @Test\n+  @Issue(\"MULE-18873\")\n+  public void flowInsideProcessWithChildContextMustNotDropEvents()\n+      throws MuleException, ExecutionException, InterruptedException {\n+    CoreEvent testEvent = testEvent();\n+    flow = (DefaultFlow) Flow.builder(FLOW_NAME, muleContext)\n+        .source(flow.getSource())\n+        .processors(singletonList(new BlockMessageProcessor()))\n+        .processingStrategyFactory(new ProactorStreamEmitterProcessingStrategyFactory())\n+        .build();\n+    startFlow();\n+    Flux<CoreEvent> flowProcessing = Flux\n+        .from(MessageProcessors.processWithChildContext(testEvent, flow, Optional.of(from(FLOW_NAME))));\n+    Future validation = executor.submit(() -> StepVerifier.create(flowProcessing)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM3NDg3OQ=="}, "originalCommit": {"oid": "43b7516b5fbd2c6b8f865dd88bed10d143f87473"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4563, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}