{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMDAyNjY5", "number": 9368, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDoxMzozN1rOEhsY_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDoxMzozN1rOEhsY_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzY1NzU2OnYy", "diffSide": "RIGHT", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/api/dsl/model/metadata/DeclarationBasedValueProviderCacheIdGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDoxMzozN1rOHPJcQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNDoxNTozN1rOHPJiVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY0NTM3OA==", "bodyText": "How about another interface that extends ValueProviderCacheIdGenerator and provides this capability?", "url": "https://github.com/mulesoft/mule/pull/9368#discussion_r485645378", "createdAt": "2020-09-09T14:13:37Z", "author": {"login": "gsfernandes"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/api/dsl/model/metadata/DeclarationBasedValueProviderCacheIdGenerator.java", "diffHunk": "@@ -25,13 +25,26 @@ public DeclarationBasedValueProviderCacheIdGenerator(DslResolvingContext context\n                                                        ComponentLocator<ElementDeclaration> locator) {\n     this.elementModelFactory = DslElementModelFactory.getDefault(context);\n     this.delegate = new DslElementBasedValueProviderCacheIdGenerator(\n-                                                                     l -> locator.get(l)\n-                                                                         .map(e -> elementModelFactory.create(e).orElse(null)));\n+            l -> locator.get(l)\n+                    .map(e -> elementModelFactory.create(e).orElse(null)));\n   }\n \n   @Override\n   public Optional<ValueProviderCacheId> getIdForResolvedValues(ElementDeclaration containerComponent, String parameterName) {\n     checkArgument(containerComponent != null, \"Cannot generate a Cache Key for a 'null' component\");\n     return elementModelFactory.create(containerComponent).flatMap(dsl -> delegate.getIdForResolvedValues(dsl, parameterName));\n   }\n+\n+  //This method was added so that it can be called by reflection and we can keep the logic on how\n+  //the ValueProviderCacheId is generated for configs and connections in one place, without changing the\n+  //ValueProviderCacheIdGenerator API.\n+  //I could not come with a better solution that does not involve refactoring of the whole API. Having\n+  //said that, we have encountered multiple scenarios where we are needing more information than the\n+  //currently provided by the ValueProviderCacheId (Hierarchical info for example). Meaning that we should\n+  //consider refactoring this in the future to make things simpler. MULE-18743\n+  private Optional<ValueProviderCacheId> getIdForDependency(ElementDeclaration elementDeclaration) {\n+    return elementModelFactory.create(elementDeclaration).flatMap(delegate::resolveIdForInjectedElement);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "523469066a72f016dc69517f6719cc7d40b6a95e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY0NjkzNQ==", "bodyText": "I thought about that, but all this is in a .api. package and we need it to be api in order to access it from Tooling. Would that be ok?", "url": "https://github.com/mulesoft/mule/pull/9368#discussion_r485646935", "createdAt": "2020-09-09T14:15:37Z", "author": {"login": "lucianoRM"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/api/dsl/model/metadata/DeclarationBasedValueProviderCacheIdGenerator.java", "diffHunk": "@@ -25,13 +25,26 @@ public DeclarationBasedValueProviderCacheIdGenerator(DslResolvingContext context\n                                                        ComponentLocator<ElementDeclaration> locator) {\n     this.elementModelFactory = DslElementModelFactory.getDefault(context);\n     this.delegate = new DslElementBasedValueProviderCacheIdGenerator(\n-                                                                     l -> locator.get(l)\n-                                                                         .map(e -> elementModelFactory.create(e).orElse(null)));\n+            l -> locator.get(l)\n+                    .map(e -> elementModelFactory.create(e).orElse(null)));\n   }\n \n   @Override\n   public Optional<ValueProviderCacheId> getIdForResolvedValues(ElementDeclaration containerComponent, String parameterName) {\n     checkArgument(containerComponent != null, \"Cannot generate a Cache Key for a 'null' component\");\n     return elementModelFactory.create(containerComponent).flatMap(dsl -> delegate.getIdForResolvedValues(dsl, parameterName));\n   }\n+\n+  //This method was added so that it can be called by reflection and we can keep the logic on how\n+  //the ValueProviderCacheId is generated for configs and connections in one place, without changing the\n+  //ValueProviderCacheIdGenerator API.\n+  //I could not come with a better solution that does not involve refactoring of the whole API. Having\n+  //said that, we have encountered multiple scenarios where we are needing more information than the\n+  //currently provided by the ValueProviderCacheId (Hierarchical info for example). Meaning that we should\n+  //consider refactoring this in the future to make things simpler. MULE-18743\n+  private Optional<ValueProviderCacheId> getIdForDependency(ElementDeclaration elementDeclaration) {\n+    return elementModelFactory.create(elementDeclaration).flatMap(delegate::resolveIdForInjectedElement);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTY0NTM3OA=="}, "originalCommit": {"oid": "523469066a72f016dc69517f6719cc7d40b6a95e"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4768, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}