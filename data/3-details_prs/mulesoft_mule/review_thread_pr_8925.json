{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0ODEyNDgx", "number": 8925, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzowNjo1MFrOEF7bkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzowNjo1MFrOEF7bkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjUyMDQ4OnYy", "diffSide": "RIGHT", "path": "modules/deployment-model-impl/src/main/java/org/mule/runtime/module/deployment/impl/internal/policy/DefaultPolicyTemplateFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzowNjo1MFrOGkaYHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzowNjo1MFrOGkaYHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgzNDA3OA==", "bodyText": "Remove unused parameters: application, descriptor and policyClassLoader", "url": "https://github.com/mulesoft/mule/pull/8925#discussion_r440834078", "createdAt": "2020-06-16T13:06:50Z", "author": {"login": "mlischetti"}, "path": "modules/deployment-model-impl/src/main/java/org/mule/runtime/module/deployment/impl/internal/policy/DefaultPolicyTemplateFactory.java", "diffHunk": "@@ -62,51 +62,64 @@ public DefaultPolicyTemplateFactory(PolicyTemplateClassLoaderBuilderFactory poli\n \n   @Override\n   public PolicyTemplate createArtifact(Application application, PolicyTemplateDescriptor descriptor) {\n+    MuleDeployableArtifactClassLoader ownPolicyClassLoader;\n     MuleDeployableArtifactClassLoader policyClassLoader;\n \n-    List<ArtifactPluginDescriptor> resolvedPolicyPluginsDescriptors = resolvePolicyPluginDescriptors(application, descriptor);\n+    final List<ArtifactPluginDescriptor> resolvedPolicyPluginsDescriptors =\n+        resolvePolicyPluginDescriptors(application, descriptor);\n+    final List<ArtifactPluginDescriptor> ownResolvedPluginDescriptors =\n+        pluginDependenciesResolver.resolve(emptySet(), new ArrayList<>(descriptor.getPlugins()), false);\n \n     try {\n+      ownPolicyClassLoader = policyTemplateClassLoaderBuilderFactory.createArtifactClassLoaderBuilder()\n+          .addArtifactPluginDescriptors(ownResolvedPluginDescriptors\n+              .toArray(new ArtifactPluginDescriptor[ownResolvedPluginDescriptors.size()]))\n+          .setParentClassLoader(application.getRegionClassLoader()).setArtifactDescriptor(descriptor).build();\n+\n+      // This classloader needs to be created after ownPolicyClassLoader so its inner classloaders override the entries in the\n+      // ClassLoaderRepository for the application\n       policyClassLoader = policyTemplateClassLoaderBuilderFactory.createArtifactClassLoaderBuilder()\n           .addArtifactPluginDescriptors(resolvedPolicyPluginsDescriptors\n               .toArray(new ArtifactPluginDescriptor[resolvedPolicyPluginsDescriptors.size()]))\n           .setParentClassLoader(application.getRegionClassLoader()).setArtifactDescriptor(descriptor).build();\n     } catch (IOException e) {\n       throw new PolicyTemplateCreationException(createPolicyTemplateCreationErrorMessage(descriptor.getName()), e);\n     }\n+\n     application.getRegionClassLoader().addClassLoader(policyClassLoader, NULL_CLASSLOADER_FILTER);\n \n     List<ArtifactPlugin> artifactPlugins = createArtifactPluginList(policyClassLoader, resolvedPolicyPluginsDescriptors);\n+\n+    validateArtifactLicense(policyClassLoader.getClassLoader(), artifactPlugins, licenseValidator);\n+\n     return new DefaultPolicyTemplate(policyClassLoader.getArtifactId(), descriptor, policyClassLoader,\n                                      artifactPlugins,\n-                                     resolveOwnArtifactPlugins(application, descriptor, policyClassLoader, artifactPlugins));\n+                                     resolveOwnArtifactPlugins(application, descriptor, policyClassLoader, artifactPlugins,\n+                                                               ownResolvedPluginDescriptors, ownPolicyClassLoader));\n   }\n \n   // Need all the plugins that the policy itself depends on, while keeping a relationship with the appropriate classloader.\n   private List<ArtifactPlugin> resolveOwnArtifactPlugins(Application application, PolicyTemplateDescriptor descriptor,\n                                                          MuleDeployableArtifactClassLoader policyClassLoader,\n-                                                         List<ArtifactPlugin> artifactPlugins) {\n+                                                         List<ArtifactPlugin> artifactPlugins,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e650e289ad91ef792f4de8a374fea7b1a8ab72c"}, "originalPosition": 46}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4940, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}