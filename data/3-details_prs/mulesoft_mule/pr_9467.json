{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0MTgwODUy", "number": 9467, "title": "CMTS-91: Improve ValueProvider caching with providerId information", "bodyText": "", "createdAt": "2020-09-28T14:24:51Z", "url": "https://github.com/mulesoft/mule/pull/9467", "merged": true, "mergeCommit": {"oid": "0d4da12a31dff45b75e4ada9eb3201ba96cc0255"}, "closed": true, "closedAt": "2020-10-06T15:23:23Z", "author": {"login": "gsfernandes"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNnDITAFqTQ5ODM5NzI4Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdP3tRyAFqTUwMjg5NDU2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4Mzk3Mjg2", "url": "https://github.com/mulesoft/mule/pull/9467#pullrequestreview-498397286", "createdAt": "2020-09-29T12:07:23Z", "commit": {"oid": "567bd48967ef86c5a5b97f41544e1aabece42f1c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjowNzoyM1rOHZp5dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxMjowNzoyM1rOHZp5dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjY2MjkwMg==", "bodyText": "We should test that 2 different operations with the same value providerId and same values, return the same hash", "url": "https://github.com/mulesoft/mule/pull/9467#discussion_r496662902", "createdAt": "2020-09-29T12:07:23Z", "author": {"login": "lucianoRM"}, "path": "modules/spring-config/src/test/java/org/mule/runtime/config/dsl/model/ValueProviderCacheIdGeneratorTestCase.java", "diffHunk": "@@ -400,13 +399,24 @@ public void differentConfigsWithSameParameterGetDifferentHash() throws Exception\n   }\n \n   @Test\n-  public void differentValueProviderNameGetsDifferentHash() throws Exception {\n+  public void differentValueProviderNameGetsSameHash() throws Exception {\n     ArtifactDeclaration app = getBaseApp();\n     when(valueProviderModel.requiresConnection()).thenReturn(true);\n     when(valueProviderModel.requiresConfiguration()).thenReturn(true);\n     Optional<ValueProviderCacheId> opId1 = computeIdFor(app, OPERATION_LOCATION, PROVIDED_PARAMETER_NAME);\n     when(valueProviderModel.getProviderName()).thenReturn(\"newValueProviderName\");\n     Optional<ValueProviderCacheId> opId2 = computeIdFor(app, OPERATION_LOCATION, PROVIDED_PARAMETER_NAME);\n+    checkIdsAreEqual(opId1, opId2);\n+  }\n+\n+  @Test\n+  public void differentValueProviderIdGetsDifferentHash() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "567bd48967ef86c5a5b97f41544e1aabece42f1c"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "031d1595b7cfeb3214cbddfb1f0f9aeca0060f1c", "author": {"user": {"login": "gsfernandes", "name": "Guillermo Fernandes"}}, "url": "https://github.com/mulesoft/mule/commit/031d1595b7cfeb3214cbddfb1f0f9aeca0060f1c", "committedDate": "2020-10-05T13:46:25Z", "message": "CMTS-91: Improve ValueProvider caching with providerId information"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdbc930783f4ba6701405a9600a46ad5d4ab7be9", "author": {"user": {"login": "gsfernandes", "name": "Guillermo Fernandes"}}, "url": "https://github.com/mulesoft/mule/commit/cdbc930783f4ba6701405a9600a46ad5d4ab7be9", "committedDate": "2020-10-05T13:46:25Z", "message": "Reuse logic to enrich values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e42c255fb77fa613b7d07bf3812438d1f3d52823", "author": {"user": {"login": "gsfernandes", "name": "Guillermo Fernandes"}}, "url": "https://github.com/mulesoft/mule/commit/e42c255fb77fa613b7d07bf3812438d1f3d52823", "committedDate": "2020-10-05T16:32:31Z", "message": "PR feedback, adding namespace as part of keyId"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "567bd48967ef86c5a5b97f41544e1aabece42f1c", "author": {"user": {"login": "gsfernandes", "name": "Guillermo Fernandes"}}, "url": "https://github.com/mulesoft/mule/commit/567bd48967ef86c5a5b97f41544e1aabece42f1c", "committedDate": "2020-09-28T15:50:53Z", "message": "Reuse logic to enrich values"}, "afterCommit": {"oid": "e42c255fb77fa613b7d07bf3812438d1f3d52823", "author": {"user": {"login": "gsfernandes", "name": "Guillermo Fernandes"}}, "url": "https://github.com/mulesoft/mule/commit/e42c255fb77fa613b7d07bf3812438d1f3d52823", "committedDate": "2020-10-05T16:32:31Z", "message": "PR feedback, adding namespace as part of keyId"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b50049d527484dedf89ba14a50ecea7305e28f9e", "author": {"user": {"login": "gsfernandes", "name": "Guillermo Fernandes"}}, "url": "https://github.com/mulesoft/mule/commit/b50049d527484dedf89ba14a50ecea7305e28f9e", "committedDate": "2020-10-05T21:08:21Z", "message": "Fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyNzMwNzYw", "url": "https://github.com/mulesoft/mule/pull/9467#pullrequestreview-502730760", "createdAt": "2020-10-06T09:03:19Z", "commit": {"oid": "b50049d527484dedf89ba14a50ecea7305e28f9e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyODk0NTY3", "url": "https://github.com/mulesoft/mule/pull/9467#pullrequestreview-502894567", "createdAt": "2020-10-06T12:39:55Z", "commit": {"oid": "b50049d527484dedf89ba14a50ecea7305e28f9e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMjozOTo1NVrOHdEVsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxMjozOTo1NVrOHdEVsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDI0MTg0MA==", "bodyText": "only the namespace and if not present the id? You are assuming that if the namespace is not present, then the id should be the identifier right?", "url": "https://github.com/mulesoft/mule/pull/9467#discussion_r500241840", "createdAt": "2020-10-06T12:39:55Z", "author": {"login": "lucianoRM"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/api/dsl/model/metadata/DslElementBasedValueProviderCacheIdGenerator.java", "diffHunk": "@@ -101,24 +103,32 @@ public DslElementBasedValueProviderCacheIdGenerator(ComponentLocator<DslElementM\n                                                                  Map<String, ParameterModelInformation> parameterModelsInformation) {\n     List<ValueProviderCacheId> parts = new LinkedList<>();\n \n-    parts.add(resolveValueProviderId(valueProviderModel));\n     parts.addAll(resolveActingParameterIds(valueProviderModel, parameterModelsInformation));\n+    parts.add(resolveValueProviderId(valueProviderModel));\n+    parts.add(aValueProviderCacheId(fromElementWithName(VALUE_PROVIDER).withHashValueFrom(VALUE_PROVIDER)));\n \n     String id = resolveDslTag(containerComponent).orElse(getSourceElementName(containerComponent));\n-    return of(aValueProviderCacheId(fromElementWithName(id).withHashValueFrom(id).containing(parts)));\n+    return of(aValueProviderCacheId(fromElementWithName(id)\n+        .withHashValueFrom(resolveDslTagNamespace(containerComponent).orElse(id)).containing(parts)));\n   }\n \n   private Optional<ValueProviderCacheId> resolveForComponentModel(DslElementModel<?> containerComponent,\n                                                                   ValueProviderModel valueProviderModel,\n                                                                   Map<String, ParameterModelInformation> parameterModelsInformation) {\n     List<ValueProviderCacheId> parts = new LinkedList<>();\n \n-    parts.add(resolveValueProviderId(valueProviderModel));\n     parts.addAll(resolveActingParameterIds(valueProviderModel, parameterModelsInformation));\n     parts.addAll(resolveIdForInjectedElements(containerComponent, valueProviderModel));\n+    parts.add(resolveValueProviderId(valueProviderModel));\n+    parts.add(aValueProviderCacheId(fromElementWithName(VALUE_PROVIDER).withHashValueFrom(VALUE_PROVIDER)));\n \n     String id = resolveDslTag(containerComponent).orElse(getSourceElementName(containerComponent));\n-    return of(aValueProviderCacheId(fromElementWithName(id).withHashValueFrom(id).containing(parts)));\n+    return of(aValueProviderCacheId(fromElementWithName(id)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b50049d527484dedf89ba14a50ecea7305e28f9e"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1238, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}