{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxOTU3NTkw", "number": 9736, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTowNjoxN1rOE5rZ3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzowNToyMlrOE6AbxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4OTE1NDIwOnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTowNjoxN1rOH0R0PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMTowNjoxN1rOH0R0PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDU3OTkwMQ==", "bodyText": "Comment from @Bardammu :\n\"We can try to retrieve all the values of recentlyProcessedIds and then call contains for each key. In this way, we avoid making a request for each key to OSv2.\nNot in this PR, it's something we should think about.\"", "url": "https://github.com/mulesoft/mule/pull/9736#discussion_r524579901", "createdAt": "2020-11-16T21:06:17Z", "author": {"login": "SebaElizalde"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -603,14 +607,19 @@ private void setCurrentWatermarkAsMinimumRejectWatermark(Serializable minimumRej\n     watermarkObjectStore.store(WATERMARK_ITEM_OS_KEY, minimumRejectedByLimitPassingWatermark);\n   }\n \n-  private void updateRecentlyProcessedIds() throws ObjectStoreException {\n+  private void updateRecentlyProcessedIds(boolean clearRecentlyProcessed) throws ObjectStoreException {\n     Lock osClearingLock = lockFactory.createLock(UPDATE_PROCESSED_LOCK);\n     try {\n       osClearingLock.lock();\n       List<String> strings = idsOnUpdatedWatermark.allKeys();\n-      recentlyProcessedIds.clear();\n+      if (clearRecentlyProcessed) {\n+        recentlyProcessedIds.clear();\n+      }\n       strings.forEach(key -> {\n         try {\n+          if (!clearRecentlyProcessed && recentlyProcessedIds.contains(key)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f55324d34bea542fa43d0f025676afb17c2aad7"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjUwMTE1OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjozODozMlrOH0y66g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjozODozMlrOH0y66g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyMjI4Mg==", "bodyText": "Why are these changes necesary? Can't we just skip this step if the source is stopping?", "url": "https://github.com/mulesoft/mule/pull/9736#discussion_r525122282", "createdAt": "2020-11-17T12:38:32Z", "author": {"login": "ndinu"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -603,14 +607,19 @@ private void setCurrentWatermarkAsMinimumRejectWatermark(Serializable minimumRej\n     watermarkObjectStore.store(WATERMARK_ITEM_OS_KEY, minimumRejectedByLimitPassingWatermark);\n   }\n \n-  private void updateRecentlyProcessedIds() throws ObjectStoreException {\n+  private void updateRecentlyProcessedIds(boolean clearRecentlyProcessed) throws ObjectStoreException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f55324d34bea542fa43d0f025676afb17c2aad7"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjUwNTc4OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjozOTo1MVrOH0y93Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjozOTo1MVrOH0y93Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyMzAzNw==", "bodyText": "where does the need of doing this comes from? I though that if the source was stopping we could skip this.", "url": "https://github.com/mulesoft/mule/pull/9736#discussion_r525123037", "createdAt": "2020-11-17T12:39:51Z", "author": {"login": "ndinu"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -200,9 +200,13 @@ private void poll(SourceCallback<T, A> sourceCallback) {\n       DefaultPollContext pollContext = new DefaultPollContext(sourceCallback, getCurrentWatermark(), getUpdatedWatermark());\n       try {\n         delegate.poll(pollContext);\n-        pollContext.getUpdatedWatermark()\n-            .ifPresent(w -> updateWatermark(w, pollContext.getWatermarkComparator(),\n-                                            pollContext.getMinimumRejectedByLimitPassingWatermark().orElse(null)));\n+        if (isRequestedToStop()) {\n+          updateRecentlyProcessedIds(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f55324d34bea542fa43d0f025676afb17c2aad7"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjUzMTYxOnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/petstore-extension/src/main/java/org/mule/test/petstore/extension/WatermarkingPetAdoptionSource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMjo0Njo1N1rOH0zNrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNzo0OToxMVrOH1Bo2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyNzA4NQ==", "bodyText": "Should the default for this mean, never await? so that we do not affect existing tests.", "url": "https://github.com/mulesoft/mule/pull/9736#discussion_r525127085", "createdAt": "2020-11-17T12:46:57Z", "author": {"login": "ndinu"}, "path": "tests/test-extensions/petstore-extension/src/main/java/org/mule/test/petstore/extension/WatermarkingPetAdoptionSource.java", "diffHunk": "@@ -22,22 +22,22 @@\n import org.mule.runtime.extension.api.runtime.source.SourceCallbackContext;\n \n import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n \n @MetadataScope(outputResolver = PollingSourceMetadataResolver.class)\n @MediaType(TEXT_PLAIN)\n-public class WatermarkingPetAdoptionSource extends PollingSource<String, Void> {\n+public class WatermarkingPetAdoptionSource extends PollingSource<String, Integer> {\n \n-  public static int STARTED_POLLS;\n-  private int index;\n-  private int polls;\n+  private int pollCounter;\n+  private static int index = 0;\n+  private static boolean alreadyWaited = false;\n+  private static CountDownLatch continueLatch = new CountDownLatch(1);\n \n-  @Parameter\n-  @org.mule.runtime.extension.api.annotation.param.Optional(defaultValue = \"false\")\n-  protected boolean useWatermark;\n+  public static CountDownLatch beginLatch = new CountDownLatch(1);\n \n   @Parameter\n-  @org.mule.runtime.extension.api.annotation.param.Optional(defaultValue = \"false\")\n-  protected boolean idempotent;\n+  @org.mule.runtime.extension.api.annotation.param.Optional(defaultValue = \"0\")\n+  protected Integer awaitOnItem;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f55324d34bea542fa43d0f025676afb17c2aad7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTMyNDIyOQ==", "bodyText": "0 means never wait, I can set it to -1 to be more clear. Or start the count from 0 (that would be the first item) and make -1 default.", "url": "https://github.com/mulesoft/mule/pull/9736#discussion_r525324229", "createdAt": "2020-11-17T16:58:16Z", "author": {"login": "SebaElizalde"}, "path": "tests/test-extensions/petstore-extension/src/main/java/org/mule/test/petstore/extension/WatermarkingPetAdoptionSource.java", "diffHunk": "@@ -22,22 +22,22 @@\n import org.mule.runtime.extension.api.runtime.source.SourceCallbackContext;\n \n import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n \n @MetadataScope(outputResolver = PollingSourceMetadataResolver.class)\n @MediaType(TEXT_PLAIN)\n-public class WatermarkingPetAdoptionSource extends PollingSource<String, Void> {\n+public class WatermarkingPetAdoptionSource extends PollingSource<String, Integer> {\n \n-  public static int STARTED_POLLS;\n-  private int index;\n-  private int polls;\n+  private int pollCounter;\n+  private static int index = 0;\n+  private static boolean alreadyWaited = false;\n+  private static CountDownLatch continueLatch = new CountDownLatch(1);\n \n-  @Parameter\n-  @org.mule.runtime.extension.api.annotation.param.Optional(defaultValue = \"false\")\n-  protected boolean useWatermark;\n+  public static CountDownLatch beginLatch = new CountDownLatch(1);\n \n   @Parameter\n-  @org.mule.runtime.extension.api.annotation.param.Optional(defaultValue = \"false\")\n-  protected boolean idempotent;\n+  @org.mule.runtime.extension.api.annotation.param.Optional(defaultValue = \"0\")\n+  protected Integer awaitOnItem;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyNzA4NQ=="}, "originalCommit": {"oid": "0f55324d34bea542fa43d0f025676afb17c2aad7"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM2MzQxNw==", "bodyText": "\ud83d\udc4d I think it is ok the way it is.", "url": "https://github.com/mulesoft/mule/pull/9736#discussion_r525363417", "createdAt": "2020-11-17T17:49:11Z", "author": {"login": "ndinu"}, "path": "tests/test-extensions/petstore-extension/src/main/java/org/mule/test/petstore/extension/WatermarkingPetAdoptionSource.java", "diffHunk": "@@ -22,22 +22,22 @@\n import org.mule.runtime.extension.api.runtime.source.SourceCallbackContext;\n \n import java.util.List;\n+import java.util.concurrent.CountDownLatch;\n \n @MetadataScope(outputResolver = PollingSourceMetadataResolver.class)\n @MediaType(TEXT_PLAIN)\n-public class WatermarkingPetAdoptionSource extends PollingSource<String, Void> {\n+public class WatermarkingPetAdoptionSource extends PollingSource<String, Integer> {\n \n-  public static int STARTED_POLLS;\n-  private int index;\n-  private int polls;\n+  private int pollCounter;\n+  private static int index = 0;\n+  private static boolean alreadyWaited = false;\n+  private static CountDownLatch continueLatch = new CountDownLatch(1);\n \n-  @Parameter\n-  @org.mule.runtime.extension.api.annotation.param.Optional(defaultValue = \"false\")\n-  protected boolean useWatermark;\n+  public static CountDownLatch beginLatch = new CountDownLatch(1);\n \n   @Parameter\n-  @org.mule.runtime.extension.api.annotation.param.Optional(defaultValue = \"false\")\n-  protected boolean idempotent;\n+  @org.mule.runtime.extension.api.annotation.param.Optional(defaultValue = \"0\")\n+  protected Integer awaitOnItem;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEyNzA4NQ=="}, "originalCommit": {"oid": "0f55324d34bea542fa43d0f025676afb17c2aad7"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MjU5OTcyOnYy", "diffSide": "RIGHT", "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/PollingSourceRestartingTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxMzowNToyMlrOH0z3Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QyMDo1MjoxM1rOH1K_5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzNzcxOQ==", "bodyText": "Use constants for timeout and frequency", "url": "https://github.com/mulesoft/mule/pull/9736#discussion_r525137719", "createdAt": "2020-11-17T13:05:22Z", "author": {"login": "ndinu"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/PollingSourceRestartingTestCase.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.test.module.extension.source;\n+\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.number.OrderingComparison.lessThanOrEqualTo;\n+import static org.mule.runtime.module.extension.internal.ExtensionProperties.ENABLE_POLLING_SOURCE_LIMIT_PARAMETER;\n+import static org.mule.tck.probe.PollingProber.check;\n+import static org.mule.tck.probe.PollingProber.checkNot;\n+import static org.mule.test.petstore.extension.WatermarkingPetAdoptionSource.beginLatch;\n+import static org.mule.test.petstore.extension.WatermarkingPetAdoptionSource.resetSource;\n+\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.lifecycle.Startable;\n+import org.mule.runtime.api.lifecycle.Stoppable;\n+import org.mule.runtime.api.util.MultiMap;\n+import org.mule.runtime.core.api.event.CoreEvent;\n+import org.mule.runtime.core.api.processor.Processor;\n+import org.mule.test.module.extension.AbstractExtensionFunctionalTestCase;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+public class PollingSourceRestartingTestCase extends AbstractExtensionFunctionalTestCase {\n+\n+  private static int PROBER_TIMEOUT = 30000;\n+  private static int CHECK_NOT_PROBER_TIMEOUT = 5000;\n+  private static int PROBER_FREQUENCY = 500;\n+\n+  protected static final Map<String, Object> EXTENSION_LOADER_CONTEXT_ADDITIONAL_PARAMS = new HashMap<String, Object>() {\n+\n+    {\n+      put(ENABLE_POLLING_SOURCE_LIMIT_PARAMETER, true);\n+    }\n+  };\n+\n+  protected static MultiMap<Integer, String> ADOPTIONS = new MultiMap<>();\n+\n+  public static class AdoptionProcessor implements Processor {\n+\n+    @Override\n+    public CoreEvent process(CoreEvent event) throws MuleException {\n+      String pet = (String) event.getMessage().getPayload().getValue();\n+      Integer poll = (Integer) event.getMessage().getAttributes().getValue();\n+      synchronized (ADOPTIONS) {\n+        ADOPTIONS.put(poll, pet);\n+      }\n+      return event;\n+    }\n+  }\n+\n+  @Override\n+  protected boolean mustRegenerateExtensionModels() {\n+    return true;\n+  }\n+\n+  @Override\n+  protected Map<String, Object> getExtensionLoaderContextAdditionalParameters() {\n+    return EXTENSION_LOADER_CONTEXT_ADDITIONAL_PARAMS;\n+  }\n+\n+  @Override\n+  protected String getConfigFile() {\n+    return \"polling-source-restarting-config.xml\";\n+  }\n+\n+  @Override\n+  protected void doTearDown() throws Exception {\n+    ADOPTIONS.clear();\n+    resetSource();\n+  }\n+\n+  @Test\n+  public void unprocessedItemsAreProcessedWhenSourceIsRestartedMidPoll() throws Exception {\n+    assertWatermarkingForStopStartScenario(asList(\"Anibal\", \"Barbara\", \"Colonel Meow\", \"Daphne\", \"Elsa\"),\n+                                           \"unprocessedItemsAreProcessedWhenSourceIsRestartedMidPoll\");\n+  }\n+\n+  @Test\n+  public void processedItemsWithSameWatermarkAreNotReprocessedWhenSourceIsRestartedMidPoll() throws Exception {\n+    assertWatermarkingForStopStartScenario(asList(\"Anibal\", \"Barbara\"),\n+                                           \"processedItemsWithSameWatermarkAreNotReprocessedWhenSourceIsRestartedMidPoll\");\n+  }\n+\n+  @Test\n+  public void processedItemsWithNewWatermarkAreReprocessedWhenSourceIsRestartedMidPoll() throws Exception {\n+    assertWatermarkingForStopStartScenario(asList(\"Anibal\", \"Barbara\", \"ANIBAL\", \"BARBARA\", \"Colonel Meow\"),\n+                                           \"processedItemsWithNewWatermarkAreReprocessedWhenSourceIsRestartedMidPoll\");\n+  }\n+\n+  @Test\n+  public void unprocessedItemsAreProcessedWhenSourceIsRestartedMidPollWithLimit() throws Exception {\n+    assertWatermarkingForStopStartScenario(asList(\"Anibal\", \"Barbara\", \"Colonel Meow\", \"Daphne\", \"Elsa\"),\n+                                           \"unprocessedItemsAreProcessedWhenSourceIsRestartedMidPollWithLimit\");\n+    assertLimitIsApplied(3);\n+  }\n+\n+  @Test\n+  public void processedItemsWithSameWatermarkAreNotReprocessedWhenSourceIsRestartedMidPollWithLimit() throws Exception {\n+    assertWatermarkingForStopStartScenario(asList(\"Anibal\", \"Barbara\"),\n+                                           \"processedItemsWithSameWatermarkAreNotReprocessedWhenSourceIsRestartedMidPollWithLimit\");\n+    assertLimitIsApplied(2);\n+  }\n+\n+  @Test\n+  public void processedItemsWithNewWatermarkAreReprocessedWhenSourceIsRestartedMidPollWithLimit() throws Exception {\n+    assertWatermarkingForStopStartScenario(asList(\"Anibal\", \"Barbara\", \"ANIBAL\", \"BARBARA\", \"Colonel Meow\"),\n+                                           \"processedItemsWithNewWatermarkAreReprocessedWhenSourceIsRestartedMidPollWithLimit\");\n+    assertLimitIsApplied(2);\n+  }\n+\n+  private void assertWatermarkingForStopStartScenario(List<String> expectedPets, String flowName) throws Exception {\n+    startFlow(flowName);\n+    beginLatch.await();\n+    stopFlow(flowName);\n+    check(5000, 1000, () -> getFlowConstruct(flowName).getLifecycleState().isStopped());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f55324d34bea542fa43d0f025676afb17c2aad7"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTUxNjc3NQ==", "bodyText": "\ud83d\ude22", "url": "https://github.com/mulesoft/mule/pull/9736#discussion_r525516775", "createdAt": "2020-11-17T20:52:13Z", "author": {"login": "ndinu"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/PollingSourceRestartingTestCase.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.test.module.extension.source;\n+\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.hamcrest.number.OrderingComparison.lessThanOrEqualTo;\n+import static org.mule.runtime.module.extension.internal.ExtensionProperties.ENABLE_POLLING_SOURCE_LIMIT_PARAMETER;\n+import static org.mule.tck.probe.PollingProber.check;\n+import static org.mule.tck.probe.PollingProber.checkNot;\n+import static org.mule.test.petstore.extension.WatermarkingPetAdoptionSource.beginLatch;\n+import static org.mule.test.petstore.extension.WatermarkingPetAdoptionSource.resetSource;\n+\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.lifecycle.Startable;\n+import org.mule.runtime.api.lifecycle.Stoppable;\n+import org.mule.runtime.api.util.MultiMap;\n+import org.mule.runtime.core.api.event.CoreEvent;\n+import org.mule.runtime.core.api.processor.Processor;\n+import org.mule.test.module.extension.AbstractExtensionFunctionalTestCase;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Test;\n+\n+public class PollingSourceRestartingTestCase extends AbstractExtensionFunctionalTestCase {\n+\n+  private static int PROBER_TIMEOUT = 30000;\n+  private static int CHECK_NOT_PROBER_TIMEOUT = 5000;\n+  private static int PROBER_FREQUENCY = 500;\n+\n+  protected static final Map<String, Object> EXTENSION_LOADER_CONTEXT_ADDITIONAL_PARAMS = new HashMap<String, Object>() {\n+\n+    {\n+      put(ENABLE_POLLING_SOURCE_LIMIT_PARAMETER, true);\n+    }\n+  };\n+\n+  protected static MultiMap<Integer, String> ADOPTIONS = new MultiMap<>();\n+\n+  public static class AdoptionProcessor implements Processor {\n+\n+    @Override\n+    public CoreEvent process(CoreEvent event) throws MuleException {\n+      String pet = (String) event.getMessage().getPayload().getValue();\n+      Integer poll = (Integer) event.getMessage().getAttributes().getValue();\n+      synchronized (ADOPTIONS) {\n+        ADOPTIONS.put(poll, pet);\n+      }\n+      return event;\n+    }\n+  }\n+\n+  @Override\n+  protected boolean mustRegenerateExtensionModels() {\n+    return true;\n+  }\n+\n+  @Override\n+  protected Map<String, Object> getExtensionLoaderContextAdditionalParameters() {\n+    return EXTENSION_LOADER_CONTEXT_ADDITIONAL_PARAMS;\n+  }\n+\n+  @Override\n+  protected String getConfigFile() {\n+    return \"polling-source-restarting-config.xml\";\n+  }\n+\n+  @Override\n+  protected void doTearDown() throws Exception {\n+    ADOPTIONS.clear();\n+    resetSource();\n+  }\n+\n+  @Test\n+  public void unprocessedItemsAreProcessedWhenSourceIsRestartedMidPoll() throws Exception {\n+    assertWatermarkingForStopStartScenario(asList(\"Anibal\", \"Barbara\", \"Colonel Meow\", \"Daphne\", \"Elsa\"),\n+                                           \"unprocessedItemsAreProcessedWhenSourceIsRestartedMidPoll\");\n+  }\n+\n+  @Test\n+  public void processedItemsWithSameWatermarkAreNotReprocessedWhenSourceIsRestartedMidPoll() throws Exception {\n+    assertWatermarkingForStopStartScenario(asList(\"Anibal\", \"Barbara\"),\n+                                           \"processedItemsWithSameWatermarkAreNotReprocessedWhenSourceIsRestartedMidPoll\");\n+  }\n+\n+  @Test\n+  public void processedItemsWithNewWatermarkAreReprocessedWhenSourceIsRestartedMidPoll() throws Exception {\n+    assertWatermarkingForStopStartScenario(asList(\"Anibal\", \"Barbara\", \"ANIBAL\", \"BARBARA\", \"Colonel Meow\"),\n+                                           \"processedItemsWithNewWatermarkAreReprocessedWhenSourceIsRestartedMidPoll\");\n+  }\n+\n+  @Test\n+  public void unprocessedItemsAreProcessedWhenSourceIsRestartedMidPollWithLimit() throws Exception {\n+    assertWatermarkingForStopStartScenario(asList(\"Anibal\", \"Barbara\", \"Colonel Meow\", \"Daphne\", \"Elsa\"),\n+                                           \"unprocessedItemsAreProcessedWhenSourceIsRestartedMidPollWithLimit\");\n+    assertLimitIsApplied(3);\n+  }\n+\n+  @Test\n+  public void processedItemsWithSameWatermarkAreNotReprocessedWhenSourceIsRestartedMidPollWithLimit() throws Exception {\n+    assertWatermarkingForStopStartScenario(asList(\"Anibal\", \"Barbara\"),\n+                                           \"processedItemsWithSameWatermarkAreNotReprocessedWhenSourceIsRestartedMidPollWithLimit\");\n+    assertLimitIsApplied(2);\n+  }\n+\n+  @Test\n+  public void processedItemsWithNewWatermarkAreReprocessedWhenSourceIsRestartedMidPollWithLimit() throws Exception {\n+    assertWatermarkingForStopStartScenario(asList(\"Anibal\", \"Barbara\", \"ANIBAL\", \"BARBARA\", \"Colonel Meow\"),\n+                                           \"processedItemsWithNewWatermarkAreReprocessedWhenSourceIsRestartedMidPollWithLimit\");\n+    assertLimitIsApplied(2);\n+  }\n+\n+  private void assertWatermarkingForStopStartScenario(List<String> expectedPets, String flowName) throws Exception {\n+    startFlow(flowName);\n+    beginLatch.await();\n+    stopFlow(flowName);\n+    check(5000, 1000, () -> getFlowConstruct(flowName).getLifecycleState().isStopped());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTEzNzcxOQ=="}, "originalCommit": {"oid": "0f55324d34bea542fa43d0f025676afb17c2aad7"}, "originalPosition": 127}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4629, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}