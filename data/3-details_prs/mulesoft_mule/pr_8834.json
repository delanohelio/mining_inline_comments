{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyOTk0Mzg3", "number": 8834, "title": "MULE-18375: Working fix", "bodyText": "", "createdAt": "2020-05-04T14:42:08Z", "url": "https://github.com/mulesoft/mule/pull/8834", "merged": true, "mergeCommit": {"oid": "df391d7db68338b835add38399147d3590bec3c1"}, "closed": true, "closedAt": "2020-06-11T23:22:28Z", "author": {"login": "balbifm"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABceAspzgFqTQwNTA1ODk5Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqRXtVgFqTQyOTExMjg1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MDU4OTky", "url": "https://github.com/mulesoft/mule/pull/8834#pullrequestreview-405058992", "createdAt": "2020-05-04T14:47:19Z", "commit": {"oid": "ec2d9354062856f3519a2656a09247630155c5d5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDo0NzoxOVrOGQDzVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNDo1MjowOVrOGQEBJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5MjY5NQ==", "bodyText": "this should happen in a finally clause. If another bug makes this method fail (let's say, somebody breaks OperationPolicyContext.from) , then the callback is never invoked and the process hungs, making it a painful to trace.", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r419492695", "createdAt": "2020-05-04T14:47:19Z", "author": {"login": "marianogonzalez"}, "path": "core/src/main/java/org/mule/runtime/core/internal/policy/CompositeOperationPolicy.java", "diffHunk": "@@ -248,20 +248,53 @@ public void process(CoreEvent operationEvent,\n \n     policySink.next(operationEventForPolicy(operationEvent,\n                                             operationExecutionFunction,\n-                                            parametersProcessor, callback));\n+                                            parametersProcessor,\n+                                            new CompositeOperationPolicyExecutorCallback(callback)));\n+  }\n+\n+  private static final class CompositeOperationPolicyExecutorCallback implements ExecutorCallback {\n+\n+    private final ExecutorCallback callback;\n+\n+    public CompositeOperationPolicyExecutorCallback(ExecutorCallback callback) {\n+      this.callback = callback;\n+    }\n+\n+    @Override\n+    public void complete(Object o) {\n+      callback.complete(o);\n+    }\n+\n+    @Override\n+    public void error(Throwable throwable) {\n+      if (throwable instanceof MessagingException) {\n+        CoreEvent event = ((MessagingException) throwable).getEvent();\n+        OperationPolicyContext context = OperationPolicyContext.from(event);\n+        // Restore original event if chain failed before or during operation\n+        if (!event.equals(context.getOriginalEvent()) && context.getNextOperationResponse() == null) {\n+          throwable = new MessagingException(context.getOriginalEvent(), ((MessagingException) throwable));\n+        }\n+      }\n+\n+      callback.error(throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec2d9354062856f3519a2656a09247630155c5d5"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5NTQzMg==", "bodyText": "This is a no-go. making an instanceof at the return delegate completely defeats its purpose. Also, this code is super fragile and will potentially break each time we add another return delegate. Also, this if is kind of repeating the return delegate business logic to begin with.\nFinally, creating lambda functions which carry contextual state is a performance problem. We need to avoid that", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r419495432", "createdAt": "2020-05-04T14:51:05Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -409,10 +416,55 @@ private void onEvent(CoreEvent event, ExecutorCallback executorCallback) {\n       };\n \n       if (location != null) {\n-        ((DefaultFlowCallStack) event.getFlowCallStack())\n-            .setCurrentProcessorPath(resolvedProcessorRepresentation);\n+        ((DefaultFlowCallStack) event.getFlowCallStack()).setCurrentProcessorPath(resolvedProcessorRepresentation);\n+\n+        Function<CoreEvent, CoreEvent> resultMapper = isTargetWithPolicies(event) ? (policyResult) -> {\n+          if (returnDelegate instanceof PayloadTargetReturnDelegate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec2d9354062856f3519a2656a09247630155c5d5"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5NTcxMQ==", "bodyText": "figure this out before attempting to merge", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r419495711", "createdAt": "2020-05-04T14:51:28Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -409,10 +416,55 @@ private void onEvent(CoreEvent event, ExecutorCallback executorCallback) {\n       };\n \n       if (location != null) {\n-        ((DefaultFlowCallStack) event.getFlowCallStack())\n-            .setCurrentProcessorPath(resolvedProcessorRepresentation);\n+        ((DefaultFlowCallStack) event.getFlowCallStack()).setCurrentProcessorPath(resolvedProcessorRepresentation);\n+\n+        Function<CoreEvent, CoreEvent> resultMapper = isTargetWithPolicies(event) ? (policyResult) -> {\n+          if (returnDelegate instanceof PayloadTargetReturnDelegate) {\n+            return CoreEvent.builder(event)\n+                .addVariable(target, policyResult.getMessage().getPayload())\n+                .build();\n+          } else {\n+            try (ExpressionLanguageSession session =\n+                expressionManager.openSession(getTargetBindingContext(policyResult.getMessage()))) {\n+              return CoreEvent.builder(event)\n+                  .addVariable(target, session.evaluate(targetValueCompiledExpression))\n+                  .build();\n+            }\n+          }\n+        } : identity();\n+\n+        ExecutorCallback effectiveCallback = new ExecutorCallback() {\n+\n+          @Override\n+          public void complete(Object o) {\n+            try {\n+              CoreEvent policyResult = resultMapper.apply((CoreEvent) o);\n+              executorCallback.complete(policyResult);\n+            } catch (Throwable t) {\n+              // WTF should I do here??", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec2d9354062856f3519a2656a09247630155c5d5"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5NTgzNA==", "bodyText": "resolve this", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r419495834", "createdAt": "2020-05-04T14:51:38Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -409,10 +416,55 @@ private void onEvent(CoreEvent event, ExecutorCallback executorCallback) {\n       };\n \n       if (location != null) {\n-        ((DefaultFlowCallStack) event.getFlowCallStack())\n-            .setCurrentProcessorPath(resolvedProcessorRepresentation);\n+        ((DefaultFlowCallStack) event.getFlowCallStack()).setCurrentProcessorPath(resolvedProcessorRepresentation);\n+\n+        Function<CoreEvent, CoreEvent> resultMapper = isTargetWithPolicies(event) ? (policyResult) -> {\n+          if (returnDelegate instanceof PayloadTargetReturnDelegate) {\n+            return CoreEvent.builder(event)\n+                .addVariable(target, policyResult.getMessage().getPayload())\n+                .build();\n+          } else {\n+            try (ExpressionLanguageSession session =\n+                expressionManager.openSession(getTargetBindingContext(policyResult.getMessage()))) {\n+              return CoreEvent.builder(event)\n+                  .addVariable(target, session.evaluate(targetValueCompiledExpression))\n+                  .build();\n+            }\n+          }\n+        } : identity();\n+\n+        ExecutorCallback effectiveCallback = new ExecutorCallback() {\n+\n+          @Override\n+          public void complete(Object o) {\n+            try {\n+              CoreEvent policyResult = resultMapper.apply((CoreEvent) o);\n+              executorCallback.complete(policyResult);\n+            } catch (Throwable t) {\n+              // WTF should I do here??\n+              executorCallback.error(t);\n+            }\n+          }\n+\n+          @Override\n+          public void error(Throwable throwable) {\n+            //            if (throwable instanceof MessagingException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec2d9354062856f3519a2656a09247630155c5d5"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTQ5NjIzMQ==", "bodyText": "no. This is a concern for the return delegate. Should not do this here", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r419496231", "createdAt": "2020-05-04T14:52:09Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -502,6 +555,8 @@ protected void doInitialise() throws InitialisationException {\n         throw new InitialisationException(createStaticMessage(\"Could not resolve transactional configuration\"), e, this);\n       }\n       returnDelegate = createReturnDelegate();\n+      valueReturnDelegate = getValueReturnDelegate();\n+      targetValueCompiledExpression = expressionManager.compile(targetValue, getTargetBindingContext(Message.of(\"\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec2d9354062856f3519a2656a09247630155c5d5"}, "originalPosition": 126}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70ff14d44902655532a3fa3c7b8049bf0e1652e6", "author": {"user": {"login": "balbifm", "name": "Federico Balbi"}}, "url": "https://github.com/mulesoft/mule/commit/70ff14d44902655532a3fa3c7b8049bf0e1652e6", "committedDate": "2020-06-01T19:48:22Z", "message": "Working fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2bf84646437c2320104cea08c39ddb894b7cd559", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/2bf84646437c2320104cea08c39ddb894b7cd559", "committedDate": "2020-06-08T17:32:27Z", "message": "Changes based on PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec2d9354062856f3519a2656a09247630155c5d5", "author": {"user": {"login": "balbifm", "name": "Federico Balbi"}}, "url": "https://github.com/mulesoft/mule/commit/ec2d9354062856f3519a2656a09247630155c5d5", "committedDate": "2020-05-04T02:51:58Z", "message": "Working fix"}, "afterCommit": {"oid": "2bf84646437c2320104cea08c39ddb894b7cd559", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/2bf84646437c2320104cea08c39ddb894b7cd559", "committedDate": "2020-06-08T17:32:27Z", "message": "Changes based on PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NDk0ODU4", "url": "https://github.com/mulesoft/mule/pull/8834#pullrequestreview-426494858", "createdAt": "2020-06-08T18:14:48Z", "commit": {"oid": "2bf84646437c2320104cea08c39ddb894b7cd559"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODoxNDo0OFrOGgqUfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODoxNDo0OFrOGgqUfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkwMDk5MQ==", "bodyText": "This is getting executed even when the Catch clausules above are executed", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r436900991", "createdAt": "2020-06-08T18:14:48Z", "author": {"login": "balbifm"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -411,8 +412,34 @@ private void onEvent(CoreEvent event, ExecutorCallback executorCallback) {\n       if (location != null) {\n         ((DefaultFlowCallStack) event.getFlowCallStack())\n             .pushCurrentProcessorPath(resolvedProcessorRepresentation);\n-        sdkInternalContext.getPolicyToApply(location, eventId)\n-            .process(event, operationExecutionFunction, () -> resolutionResult, location, executorCallback);\n+\n+        ExecutorCallback effectiveCallback = new ExecutorCallback() {\n+\n+          @Override\n+          public void complete(Object o) {\n+            CoreEvent policyResult = (CoreEvent) o;\n+            if (isTargetWithPolicies(event)) {\n+              try {\n+                ExecutionContextAdapter operationContext = createExecutionContext(event);\n+                policyResult = returnDelegate.asReturnValue(o, operationContext);\n+              } catch (MuleException e) {\n+                executorCallback.error(e);\n+              } catch (Throwable t) {\n+                executorCallback.error(unwrap(t));\n+              }\n+            }\n+\n+            executorCallback.complete(policyResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bf84646437c2320104cea08c39ddb894b7cd559"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f407093018fb9d2d747858adf3f4f986137b49e8", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/f407093018fb9d2d747858adf3f4f986137b49e8", "committedDate": "2020-06-08T18:32:11Z", "message": "Fix callback complete invocation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NTA2ODEx", "url": "https://github.com/mulesoft/mule/pull/8834#pullrequestreview-426506811", "createdAt": "2020-06-08T18:32:03Z", "commit": {"oid": "2bf84646437c2320104cea08c39ddb894b7cd559"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODozMjowM1rOGgq5-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODozMjowM1rOGgq5-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkxMDU4NA==", "bodyText": "shouldn't this be the only place where target is handled? Why do need to know if a policy is applied?", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r436910584", "createdAt": "2020-06-08T18:32:03Z", "author": {"login": "elrodro83"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -411,8 +412,34 @@ private void onEvent(CoreEvent event, ExecutorCallback executorCallback) {\n       if (location != null) {\n         ((DefaultFlowCallStack) event.getFlowCallStack())\n             .pushCurrentProcessorPath(resolvedProcessorRepresentation);\n-        sdkInternalContext.getPolicyToApply(location, eventId)\n-            .process(event, operationExecutionFunction, () -> resolutionResult, location, executorCallback);\n+\n+        ExecutorCallback effectiveCallback = new ExecutorCallback() {\n+\n+          @Override\n+          public void complete(Object o) {\n+            CoreEvent policyResult = (CoreEvent) o;\n+            if (isTargetWithPolicies(event)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bf84646437c2320104cea08c39ddb894b7cd559"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NTA5MzQ4", "url": "https://github.com/mulesoft/mule/pull/8834#pullrequestreview-426509348", "createdAt": "2020-06-08T18:35:39Z", "commit": {"oid": "f407093018fb9d2d747858adf3f4f986137b49e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODozNTozOVrOGgrBjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODozNTozOVrOGgrBjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkxMjUyNw==", "bodyText": "You need this on the else as well", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r436912527", "createdAt": "2020-06-08T18:35:39Z", "author": {"login": "balbifm"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -411,8 +412,33 @@ private void onEvent(CoreEvent event, ExecutorCallback executorCallback) {\n       if (location != null) {\n         ((DefaultFlowCallStack) event.getFlowCallStack())\n             .pushCurrentProcessorPath(resolvedProcessorRepresentation);\n-        sdkInternalContext.getPolicyToApply(location, eventId)\n-            .process(event, operationExecutionFunction, () -> resolutionResult, location, executorCallback);\n+\n+        ExecutorCallback effectiveCallback = new ExecutorCallback() {\n+\n+          @Override\n+          public void complete(Object o) {\n+            CoreEvent policyResult = (CoreEvent) o;\n+            if (isTargetWithPolicies(event)) {\n+              try {\n+                ExecutionContextAdapter operationContext = createExecutionContext(event);\n+                policyResult = returnDelegate.asReturnValue(o, operationContext);\n+                executorCallback.complete(policyResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f407093018fb9d2d747858adf3f4f986137b49e8"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "320f7d2e501e956105fc54adbb46da51d38c7fea", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/320f7d2e501e956105fc54adbb46da51d38c7fea", "committedDate": "2020-06-08T18:39:48Z", "message": "Fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d55e62ff6e0f81c04d47f574db81090b655933a", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/8d55e62ff6e0f81c04d47f574db81090b655933a", "committedDate": "2020-06-08T19:59:56Z", "message": "Make policies logic independent of target resolution"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NjA2MTI1", "url": "https://github.com/mulesoft/mule/pull/8834#pullrequestreview-426606125", "createdAt": "2020-06-08T20:43:51Z", "commit": {"oid": "8d55e62ff6e0f81c04d47f574db81090b655933a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDo0Mzo1MVrOGgvtkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMDo0NDo0OVrOGgvveg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4OTMzMQ==", "bodyText": "where is getValueReturnDelegate() defined?", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r436989331", "createdAt": "2020-06-08T20:43:51Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -502,6 +524,7 @@ protected void doInitialise() throws InitialisationException {\n         throw new InitialisationException(createStaticMessage(\"Could not resolve transactional configuration\"), e, this);\n       }\n       returnDelegate = createReturnDelegate();\n+      valueReturnDelegate = getValueReturnDelegate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d55e62ff6e0f81c04d47f574db81090b655933a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4OTQ1OQ==", "bodyText": "why do we need this instead of simply reusing the same returnDelegate? What's the difference?", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r436989459", "createdAt": "2020-06-08T20:44:06Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -226,6 +226,7 @@\n   protected ExecutionMediator executionMediator;\n   protected CompletableComponentExecutor componentExecutor;\n   protected ReturnDelegate returnDelegate;\n+  protected ReturnDelegate valueReturnDelegate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d55e62ff6e0f81c04d47f574db81090b655933a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4OTc4MA==", "bodyText": "complete or delete", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r436989780", "createdAt": "2020-06-08T20:44:45Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/operation/OperationMessageProcessorTestCase.java", "diffHunk": "@@ -413,6 +414,17 @@ public void executeWithPolicy() throws Exception {\n     verify(mockOperationPolicy).process(same(event), any(OperationExecutionFunction.class), any(), any(), any());\n   }\n \n+  @Test\n+  public void executeWithPolicyReturnsOperationResultOnTarget() throws Exception {\n+    // Assert return delegate only once", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d55e62ff6e0f81c04d47f574db81090b655933a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4OTgxOA==", "bodyText": "complete or delete", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r436989818", "createdAt": "2020-06-08T20:44:49Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/operation/OperationMessageProcessorTestCase.java", "diffHunk": "@@ -413,6 +414,17 @@ public void executeWithPolicy() throws Exception {\n     verify(mockOperationPolicy).process(same(event), any(OperationExecutionFunction.class), any(), any(), any());\n   }\n \n+  @Test\n+  public void executeWithPolicyReturnsOperationResultOnTarget() throws Exception {\n+    // Assert return delegate only once\n+    // fail(\"implemet\");\n+  }\n+\n+  @Test\n+  public void executeReturnsOperationResultButKeepsAttributes() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d55e62ff6e0f81c04d47f574db81090b655933a"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eed46d6702ff298a1e56e10b18c8e751b4a42069", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/eed46d6702ff298a1e56e10b18c8e751b4a42069", "committedDate": "2020-06-09T14:40:50Z", "message": "Some changes to improve performance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e5cc9fa52664294a2e9f637b63b0a76746b4124", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/5e5cc9fa52664294a2e9f637b63b0a76746b4124", "committedDate": "2020-06-09T14:44:41Z", "message": "Delete unimplemented tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MjMzMDYx", "url": "https://github.com/mulesoft/mule/pull/8834#pullrequestreview-427233061", "createdAt": "2020-06-09T14:50:38Z", "commit": {"oid": "5e5cc9fa52664294a2e9f637b63b0a76746b4124"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo1MDozOVrOGhN70Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo1OTowMFrOGhOVMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4NDQ5Nw==", "bodyText": "remove", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r437484497", "createdAt": "2020-06-09T14:50:39Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/operation/OperationMessageProcessorTestCase.java", "diffHunk": "@@ -17,6 +17,7 @@\n import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.CoreMatchers.sameInstance;\n import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.fail;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5cc9fa52664294a2e9f637b63b0a76746b4124"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4ODE2Ng==", "bodyText": "isn't this the other way around? if there are no policies, this is the callback wrapper that is used, and you're wrongfully changing the return delefate in this case", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r437488166", "createdAt": "2020-06-09T14:55:15Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -437,18 +441,62 @@ private void onEventSynchronous(CoreEvent event, ExecutorCallback executorCallba\n         prepareAndExecuteOperation(event, () -> callback, ctx);\n       };\n \n-      operationExecutionFunction.execute(resolutionResult, event, executorCallback);\n+      operationExecutionFunction.execute(resolutionResult, event,\n+                                         computeOperationReturnExecutionCallback(event, executorCallback));\n     } catch (Throwable t) {\n       executorCallback.error(unwrap(t));\n     }\n   }\n \n+  private ExecutorCallback computeOperationReturnExecutionCallback(CoreEvent event, ExecutorCallback delegateCallback) {\n+    return new ExecutorCallback() {\n+\n+      @Override\n+      public void complete(Object o) {\n+        ExecutionContextAdapter operationContext = null;\n+        CoreEvent originalEvent = null;\n+        try {\n+          if (returnDelegate instanceof ValueReturnDelegate) {\n+            delegateCallback.complete(o);\n+          } else {\n+            OperationExecutionParams operationExecutionParams =\n+                from(event).getOperationExecutionParams(getLocation(), event.getContext().getId());\n+\n+            if (operationExecutionParams != null) {\n+              operationContext =\n+                  operationExecutionParams.getExecutionContextAdapter();\n+              originalEvent = operationContext.getEvent();\n+              operationContext.changeEvent(event);\n+            } else {\n+              operationContext = createExecutionContext(event);\n+            }\n+\n+            delegateCallback.complete(returnDelegate.asReturnValue(o, operationContext));\n+          }\n+        } catch (MuleException e) {\n+          delegateCallback.error(e);\n+        } catch (Throwable t) {\n+          delegateCallback.error(unwrap(t));\n+        } finally {\n+          if (operationContext != null && originalEvent != null) {\n+            operationContext.changeEvent(originalEvent);\n+          }\n+        }\n+      }\n+\n+      @Override\n+      public void error(Throwable t) {\n+        delegateCallback.error(unwrap(t));\n+      }\n+    };\n+  }\n+\n   private ExecutorCallback mapped(ExecutorCallback callback, ExecutionContextAdapter<T> operationContext) {\n     return new ExecutorCallback() {\n \n       @Override\n       public void complete(Object value) {\n-        callback.complete(returnDelegate.asReturnValue(value, operationContext));\n+        callback.complete(valueReturnDelegate.asReturnValue(value, operationContext));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5cc9fa52664294a2e9f637b63b0a76746b4124"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ4ODk4OA==", "bodyText": "isn't this for the policy use case only? In that case, this name is misleading", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r437488988", "createdAt": "2020-06-09T14:56:17Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -437,18 +441,62 @@ private void onEventSynchronous(CoreEvent event, ExecutorCallback executorCallba\n         prepareAndExecuteOperation(event, () -> callback, ctx);\n       };\n \n-      operationExecutionFunction.execute(resolutionResult, event, executorCallback);\n+      operationExecutionFunction.execute(resolutionResult, event,\n+                                         computeOperationReturnExecutionCallback(event, executorCallback));\n     } catch (Throwable t) {\n       executorCallback.error(unwrap(t));\n     }\n   }\n \n+  private ExecutorCallback computeOperationReturnExecutionCallback(CoreEvent event, ExecutorCallback delegateCallback) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5cc9fa52664294a2e9f637b63b0a76746b4124"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5MDAyNQ==", "bodyText": "I would make a best effort to avoid this. This only makes sense in the particular policy use case you're targeting. This is wrong in any other use case. So either do this differently, or make it absolutely impossible for this method to be used in any other use case.", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r437490025", "createdAt": "2020-06-09T14:57:43Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -437,18 +441,62 @@ private void onEventSynchronous(CoreEvent event, ExecutorCallback executorCallba\n         prepareAndExecuteOperation(event, () -> callback, ctx);\n       };\n \n-      operationExecutionFunction.execute(resolutionResult, event, executorCallback);\n+      operationExecutionFunction.execute(resolutionResult, event,\n+                                         computeOperationReturnExecutionCallback(event, executorCallback));\n     } catch (Throwable t) {\n       executorCallback.error(unwrap(t));\n     }\n   }\n \n+  private ExecutorCallback computeOperationReturnExecutionCallback(CoreEvent event, ExecutorCallback delegateCallback) {\n+    return new ExecutorCallback() {\n+\n+      @Override\n+      public void complete(Object o) {\n+        ExecutionContextAdapter operationContext = null;\n+        CoreEvent originalEvent = null;\n+        try {\n+          if (returnDelegate instanceof ValueReturnDelegate) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5cc9fa52664294a2e9f637b63b0a76746b4124"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5MDY2MA==", "bodyText": "should this actually be mutable? @elrodro83 what say you?", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r437490660", "createdAt": "2020-06-09T14:58:35Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContext.java", "diffHunk": "@@ -199,5 +201,13 @@ public CoreEvent getOperationEvent() {\n     public ExecutorCallback getCallback() {\n       return callback;\n     }\n+\n+    public void setExecutionContextAdapter(ExecutionContextAdapter executionContextAdapter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e5cc9fa52664294a2e9f637b63b0a76746b4124"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5MDk5NA==", "bodyText": "this deserves a large javadoc explaining why", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r437490994", "createdAt": "2020-06-09T14:59:00Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -226,6 +226,7 @@\n   protected ExecutionMediator executionMediator;\n   protected CompletableComponentExecutor componentExecutor;\n   protected ReturnDelegate returnDelegate;\n+  protected ReturnDelegate valueReturnDelegate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4OTQ1OQ=="}, "originalCommit": {"oid": "8d55e62ff6e0f81c04d47f574db81090b655933a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MjUyOTg2", "url": "https://github.com/mulesoft/mule/pull/8834#pullrequestreview-427252986", "createdAt": "2020-06-09T15:04:16Z", "commit": {"oid": "5e5cc9fa52664294a2e9f637b63b0a76746b4124"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTowNDoxNlrOGhOkzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNTowNDoxNlrOGhOkzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ5NDk5MA==", "bodyText": "male it private, not protected", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r437494990", "createdAt": "2020-06-09T15:04:16Z", "author": {"login": "elrodro83"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -226,6 +226,7 @@\n   protected ExecutionMediator executionMediator;\n   protected CompletableComponentExecutor componentExecutor;\n   protected ReturnDelegate returnDelegate;\n+  protected ReturnDelegate valueReturnDelegate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjk4OTQ1OQ=="}, "originalCommit": {"oid": "8d55e62ff6e0f81c04d47f574db81090b655933a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4aa9ac39ab3c12c4a8901fe78a38aea357089e0e", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/4aa9ac39ab3c12c4a8901fe78a38aea357089e0e", "committedDate": "2020-06-09T17:33:15Z", "message": "Make some changes after PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9659d0d8030f36f9a534a9080fe53ff094f52c16", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/9659d0d8030f36f9a534a9080fe53ff094f52c16", "committedDate": "2020-06-09T20:00:27Z", "message": "Make OperationExecutionParams#executionContextAdapter immutable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66a3093010b9413f7cb1a4905e979e88cb4b3b8a", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/66a3093010b9413f7cb1a4905e979e88cb4b3b8a", "committedDate": "2020-06-10T16:03:05Z", "message": "Avoid multiple ExecutionContext creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e29b6cc0da4c3c4a94d4b42781760581483fa051", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/e29b6cc0da4c3c4a94d4b42781760581483fa051", "committedDate": "2020-06-11T01:47:17Z", "message": "Add TODOs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MDcwMTk4", "url": "https://github.com/mulesoft/mule/pull/8834#pullrequestreview-429070198", "createdAt": "2020-06-11T16:10:32Z", "commit": {"oid": "e29b6cc0da4c3c4a94d4b42781760581483fa051"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoxMDozM1rOGikpOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoxMTo1NFrOGiksqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNTE0NA==", "bodyText": "rephrase, and point to the fact that the piece of code we need is already in the ValueReturnDelegate, we just need to extract it", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r438905144", "createdAt": "2020-06-11T16:10:33Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -226,6 +227,18 @@\n   protected ExecutionMediator executionMediator;\n   protected CompletableComponentExecutor componentExecutor;\n   protected ReturnDelegate returnDelegate;\n+  /**\n+   * TODO: MULE-18483 When a policy is applied to an operation that has defined a target, it's necessary to wait until the policy\n+   * finishes to calculate the return value with {@link #returnDelegate}. But in this case, because of in order to execute the\n+   * rest of the policy we need to transform the {@link Result} returned by the operation into a {@link CoreEvent}, we use\n+   * {@link #valueReturnDelegate} as a helper class to do this transformation. It's used only when there is an operation that\n+   * defines a target, and at the same time, there are operation policies applied to it. Finally, when the policy finishes, the\n+   * proper {@link #returnDelegate} is executed.\n+   * <p>\n+   * It's an horrible solution, we only need a piece of code that transforms an {@link Object} into a {@link CoreEvent} and not a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29b6cc0da4c3c4a94d4b42781760581483fa051"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkwNjAyNQ==", "bodyText": "isTargetWithPolicies(event) is it really necessary to evaluate this method on every single invocation? Won't the value be constant? Cannot this be cached?", "url": "https://github.com/mulesoft/mule/pull/8834#discussion_r438906025", "createdAt": "2020-06-11T16:11:54Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -403,16 +416,21 @@ private void onEvent(CoreEvent event, ExecutorCallback executorCallback) {\n       final Map<String, Object> resolutionResult = sdkInternalContext.getResolutionResult(location, eventId);\n \n       OperationExecutionFunction operationExecutionFunction = (parameters, operationEvent, callback) -> {\n-        sdkInternalContext.setOperationExecutionParams(location, eventId, configuration, parameters, operationEvent, callback);\n+        setOperationExecutionParams(location, event, configuration, parameters, operationEvent, callback, ctx);\n \n         fluxSupplier.get().next(operationEvent);\n       };\n \n       if (location != null) {\n         ((DefaultFlowCallStack) event.getFlowCallStack())\n             .pushCurrentProcessorPath(resolvedProcessorRepresentation);\n-        sdkInternalContext.getPolicyToApply(location, eventId)\n-            .process(event, operationExecutionFunction, () -> resolutionResult, location, executorCallback);\n+\n+        ExecutorCallback effectiveCallback =\n+            isTargetWithPolicies(event) ? getExecutionCallbackForPolicyAndOperationWithTarget(event, executorCallback)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e29b6cc0da4c3c4a94d4b42781760581483fa051"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3051247327bb85671dbe505206efc22bbe60a698", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/3051247327bb85671dbe505206efc22bbe60a698", "committedDate": "2020-06-11T16:40:46Z", "message": "Clarify TODO"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MDk1NTYw", "url": "https://github.com/mulesoft/mule/pull/8834#pullrequestreview-429095560", "createdAt": "2020-06-11T16:42:26Z", "commit": {"oid": "3051247327bb85671dbe505206efc22bbe60a698"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5MTEyODU2", "url": "https://github.com/mulesoft/mule/pull/8834#pullrequestreview-429112856", "createdAt": "2020-06-11T17:05:11Z", "commit": {"oid": "3051247327bb85671dbe505206efc22bbe60a698"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 853, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}