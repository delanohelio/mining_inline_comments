{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyODY5MDQ3", "number": 9157, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDo1Mzo1MFrOEVkstA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDo1Mzo1MFrOEVkstA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDU2ODIwOnYy", "diffSide": "RIGHT", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/type/ApplicationModelTypeUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDo1Mzo1MFrOG8aOgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMTo0MDowMVrOG8bmTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5NzQ0MA==", "bodyText": "remove this unused method", "url": "https://github.com/mulesoft/mule/pull/9157#discussion_r465997440", "createdAt": "2020-08-05T20:53:50Z", "author": {"login": "elrodro83"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/type/ApplicationModelTypeUtils.java", "diffHunk": "@@ -283,22 +284,49 @@ public void visitUnion(UnionType unionType) {\n                       unionType.getTypes().forEach(type -> type.accept(this));\n                     }\n                   });\n-                } else if (isContent(paramModel)) {\n-                  nestedForId\n-                      .forEach(childComp -> componentModel\n-                          .setParameter(paramModel,\n-                                        new DefaultComponentParameterAst(trim(childComp.getTextContent()),\n-                                                                         () -> paramModel,\n-                                                                         childComp.getMetadata())));\n                 } else {\n-                  enrichComponentModels(componentModel, nestedComponents,\n-                                        of(paramSyntax),\n-                                        paramModel, extensionModelHelper);\n+                  paramModel.getType().accept(new MetadataTypeVisitor() {\n+\n+                    @Override\n+                    protected void defaultVisit(MetadataType metadataType) {\n+                      if (isContent(paramModel)) {\n+                        // If this is a Map for example, this has to be set using \n+                        // text content as this does not depend on the dsl.\n+                        addParameterUsingTextContent(componentModel, paramModel, nestedForId);\n+                      } else {\n+                        enrichComponentModels(componentModel, nestedComponents,\n+                                              of(paramSyntax),\n+                                              paramModel, extensionModelHelper);\n+                      }\n+                    }\n+\n+\n+                    @Override\n+                    public void visitSimpleType(SimpleType stringType) {\n+                      addParameterUsingTextContent(componentModel, paramModel, nestedForId);\n+                    }\n+\n+\n+                    private void addParameterUsingTextContent(ComponentModel componentModel, ParameterModel paramModel,\n+                                                              final Collection<ComponentModel> nestedForId) {\n+                      nestedForId\n+                          .forEach(childComp -> componentModel\n+                              .setParameter(paramModel,\n+                                            new DefaultComponentParameterAst(trim(childComp.getTextContent()),\n+                                                                             () -> paramModel,\n+                                                                             childComp.getMetadata())));\n+                    }\n+                  });\n                 }\n+\n               });\n         });\n   }\n \n+  private static boolean isSimpleMetadataType(ParameterModel paramModel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecedf8e097d34546ff1359e59131d37d542496d5"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxOTkxOA==", "bodyText": "Done", "url": "https://github.com/mulesoft/mule/pull/9157#discussion_r466019918", "createdAt": "2020-08-05T21:40:01Z", "author": {"login": "fsgonz"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/type/ApplicationModelTypeUtils.java", "diffHunk": "@@ -283,22 +284,49 @@ public void visitUnion(UnionType unionType) {\n                       unionType.getTypes().forEach(type -> type.accept(this));\n                     }\n                   });\n-                } else if (isContent(paramModel)) {\n-                  nestedForId\n-                      .forEach(childComp -> componentModel\n-                          .setParameter(paramModel,\n-                                        new DefaultComponentParameterAst(trim(childComp.getTextContent()),\n-                                                                         () -> paramModel,\n-                                                                         childComp.getMetadata())));\n                 } else {\n-                  enrichComponentModels(componentModel, nestedComponents,\n-                                        of(paramSyntax),\n-                                        paramModel, extensionModelHelper);\n+                  paramModel.getType().accept(new MetadataTypeVisitor() {\n+\n+                    @Override\n+                    protected void defaultVisit(MetadataType metadataType) {\n+                      if (isContent(paramModel)) {\n+                        // If this is a Map for example, this has to be set using \n+                        // text content as this does not depend on the dsl.\n+                        addParameterUsingTextContent(componentModel, paramModel, nestedForId);\n+                      } else {\n+                        enrichComponentModels(componentModel, nestedComponents,\n+                                              of(paramSyntax),\n+                                              paramModel, extensionModelHelper);\n+                      }\n+                    }\n+\n+\n+                    @Override\n+                    public void visitSimpleType(SimpleType stringType) {\n+                      addParameterUsingTextContent(componentModel, paramModel, nestedForId);\n+                    }\n+\n+\n+                    private void addParameterUsingTextContent(ComponentModel componentModel, ParameterModel paramModel,\n+                                                              final Collection<ComponentModel> nestedForId) {\n+                      nestedForId\n+                          .forEach(childComp -> componentModel\n+                              .setParameter(paramModel,\n+                                            new DefaultComponentParameterAst(trim(childComp.getTextContent()),\n+                                                                             () -> paramModel,\n+                                                                             childComp.getMetadata())));\n+                    }\n+                  });\n                 }\n+\n               });\n         });\n   }\n \n+  private static boolean isSimpleMetadataType(ParameterModel paramModel) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5NzQ0MA=="}, "originalCommit": {"oid": "ecedf8e097d34546ff1359e59131d37d542496d5"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4777, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}