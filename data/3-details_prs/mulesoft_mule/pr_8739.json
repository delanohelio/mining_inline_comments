{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NDk3MzM4", "number": 8739, "title": "MULE-18189: Race condition on sdk operations in scatter-gather routes", "bodyText": "", "createdAt": "2020-03-16T21:12:32Z", "url": "https://github.com/mulesoft/mule/pull/8739", "merged": true, "mergeCommit": {"oid": "34c79ed80e8dccbb7b83055a570e081d7936e7cf"}, "closed": true, "closedAt": "2020-03-17T01:26:26Z", "author": {"login": "elrodro83"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOUvsWgH2gAyMzg5NDk3MzM4OjRlMDBhYmJhOWQxZjgyZmExYmI4NWRiYzljZGY0YmEyMTUzMThlY2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOXR1TgFqTM3NTY2MDYwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4e00abba9d1f82fa1bb85dbc9cdf4ba215318ecf", "author": {"user": {"login": "elrodro83", "name": "Rodrigo Merino"}}, "url": "https://github.com/mulesoft/mule/commit/4e00abba9d1f82fa1bb85dbc9cdf4ba215318ecf", "committedDate": "2020-03-16T21:11:13Z", "message": "MULE-18189: Race condition on sdk operations in scatter-gather routes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NTg4Njg3", "url": "https://github.com/mulesoft/mule/pull/8739#pullrequestreview-375588687", "createdAt": "2020-03-16T21:16:59Z", "commit": {"oid": "4e00abba9d1f82fa1bb85dbc9cdf4ba215318ecf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMToxNzowMFrOF3GEGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQyMToyMTowNVrOF3GLBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNTM1Mg==", "bodyText": "IIRC, getLocation() was kind of expensive. Since already invoked in line 390, I would extract to a variable", "url": "https://github.com/mulesoft/mule/pull/8739#discussion_r393315352", "createdAt": "2020-03-16T21:17:00Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -378,20 +378,20 @@ private void onEvent(CoreEvent event, ExecutorCallback executorCallback) {\n     try {\n       SdkInternalContext sdkInternalContext = from(event);\n \n-      final Optional<ConfigurationInstance> configuration = sdkInternalContext.getConfiguration();\n-      final Map<String, Object> resolutionResult = sdkInternalContext.getResolutionResult();\n+      final Optional<ConfigurationInstance> configuration = sdkInternalContext.getConfiguration(getLocation());\n+      final Map<String, Object> resolutionResult = sdkInternalContext.getResolutionResult(getLocation());\n \n       OperationExecutionFunction operationExecutionFunction = (parameters, operationEvent, callback) -> {\n-        sdkInternalContext.setOperationExecutionParams(configuration, parameters, operationEvent, callback);\n+        sdkInternalContext.setOperationExecutionParams(getLocation(), configuration, parameters, operationEvent, callback);\n \n         fluxSupplier.get().next(operationEvent);\n       };\n \n       if (getLocation() != null) {\n         ((DefaultFlowCallStack) event.getFlowCallStack())\n             .setCurrentProcessorPath(resolvedProcessorRepresentation);\n-        sdkInternalContext.getPolicyToApply().process(event, operationExecutionFunction, () -> resolutionResult, getLocation(),\n-                                                      executorCallback);\n+        sdkInternalContext.getPolicyToApply(getLocation())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e00abba9d1f82fa1bb85dbc9cdf4ba215318ecf"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNTQ5MA==", "bodyText": "what if not present? Is NPE completely impossible here?", "url": "https://github.com/mulesoft/mule/pull/8739#discussion_r393315490", "createdAt": "2020-03-16T21:17:19Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -378,20 +378,20 @@ private void onEvent(CoreEvent event, ExecutorCallback executorCallback) {\n     try {\n       SdkInternalContext sdkInternalContext = from(event);\n \n-      final Optional<ConfigurationInstance> configuration = sdkInternalContext.getConfiguration();\n-      final Map<String, Object> resolutionResult = sdkInternalContext.getResolutionResult();\n+      final Optional<ConfigurationInstance> configuration = sdkInternalContext.getConfiguration(getLocation());\n+      final Map<String, Object> resolutionResult = sdkInternalContext.getResolutionResult(getLocation());\n \n       OperationExecutionFunction operationExecutionFunction = (parameters, operationEvent, callback) -> {\n-        sdkInternalContext.setOperationExecutionParams(configuration, parameters, operationEvent, callback);\n+        sdkInternalContext.setOperationExecutionParams(getLocation(), configuration, parameters, operationEvent, callback);\n \n         fluxSupplier.get().next(operationEvent);\n       };\n \n       if (getLocation() != null) {\n         ((DefaultFlowCallStack) event.getFlowCallStack())\n             .setCurrentProcessorPath(resolvedProcessorRepresentation);\n-        sdkInternalContext.getPolicyToApply().process(event, operationExecutionFunction, () -> resolutionResult, getLocation(),\n-                                                      executorCallback);\n+        sdkInternalContext.getPolicyToApply(getLocation())\n+            .process(event, operationExecutionFunction, () -> resolutionResult, getLocation(), executorCallback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e00abba9d1f82fa1bb85dbc9cdf4ba215318ecf"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNjEwMg==", "bodyText": "are you sure that ComponentLocatin#equals() is fast enough for SmallMap ?", "url": "https://github.com/mulesoft/mule/pull/8739#discussion_r393316102", "createdAt": "2020-03-16T21:18:46Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContext.java", "diffHunk": "@@ -46,62 +46,63 @@ public static SdkInternalContext from(CoreEvent event) {\n    * SDK components may be nested within each other, so some of the context must be kept separately for the component it belongs\n    * to.\n    */\n-  private final Deque<LocationSpecificSdkInternalContext> locationSpecificContext = new ArrayDeque<>();\n+  private final Map<ComponentLocation, LocationSpecificSdkInternalContext> locationSpecificContext = new SmallMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e00abba9d1f82fa1bb85dbc9cdf4ba215318ecf"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNjQyNg==", "bodyText": "same thing about getLocation(), here and in all the other occurrences below", "url": "https://github.com/mulesoft/mule/pull/8739#discussion_r393316426", "createdAt": "2020-03-16T21:19:32Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -405,11 +405,11 @@ private void onEventSynchronous(CoreEvent event, ExecutorCallback executorCallba\n     try {\n       SdkInternalContext sdkInternalContext = from(event);\n \n-      final Optional<ConfigurationInstance> configuration = sdkInternalContext.getConfiguration();\n-      final Map<String, Object> resolutionResult = sdkInternalContext.getResolutionResult();\n+      final Optional<ConfigurationInstance> configuration = sdkInternalContext.getConfiguration(getLocation());\n+      final Map<String, Object> resolutionResult = sdkInternalContext.getResolutionResult(getLocation());\n \n       OperationExecutionFunction operationExecutionFunction = (parameters, operationEvent, callback) -> {\n-        sdkInternalContext.setOperationExecutionParams(configuration, parameters, operationEvent, callback);\n+        sdkInternalContext.setOperationExecutionParams(getLocation(), configuration, parameters, operationEvent, callback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e00abba9d1f82fa1bb85dbc9cdf4ba215318ecf"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNzA1OQ==", "bodyText": "does this really reproduces the case you want to test? You are after all calling this is a pretty synchronous manner...", "url": "https://github.com/mulesoft/mule/pull/8739#discussion_r393317059", "createdAt": "2020-03-16T21:20:57Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContextTestCase.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.execution;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Optional.empty;\n+import static org.hamcrest.Matchers.contains;\n+import static org.junit.Assert.assertThat;\n+import static org.mule.runtime.dsl.api.component.config.DefaultComponentLocation.fromSingleComponent;\n+\n+import org.mule.runtime.api.component.location.ComponentLocation;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutor.ExecutorCallback;\n+import org.mule.tck.junit4.AbstractMuleTestCase;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.Test;\n+\n+import io.qameta.allure.Description;\n+import io.qameta.allure.Issue;\n+\n+public class SdkInternalContextTestCase extends AbstractMuleTestCase {\n+\n+  @Test\n+  @Issue(\"MULE-18189\")\n+  @Description(\"scatter-gather sends tha same event to different routes. In that case, the relationship of what context belongs to the operation on what route must be kept.\")\n+  public void contextSharedOnParallelRoutes() throws MuleException {\n+\n+    final SdkInternalContext ctx = new SdkInternalContext();\n+\n+    final ComponentLocation comp1 = fromSingleComponent(\"comp1\");\n+    final ComponentLocation comp2 = fromSingleComponent(\"comp2\");\n+\n+    final List<ComponentLocation> completedForComponents = new ArrayList<>();\n+\n+    pushContext(ctx, comp1, completedForComponents);\n+    pushContext(ctx, comp2, completedForComponents);\n+\n+    ctx.getOperationExecutionParams(comp1).getCallback().complete(comp1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e00abba9d1f82fa1bb85dbc9cdf4ba215318ecf"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzMxNzEyNQ==", "bodyText": "empty line", "url": "https://github.com/mulesoft/mule/pull/8739#discussion_r393317125", "createdAt": "2020-03-16T21:21:05Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContextTestCase.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.execution;\n+\n+import static java.util.Collections.emptyMap;\n+import static java.util.Optional.empty;\n+import static org.hamcrest.Matchers.contains;\n+import static org.junit.Assert.assertThat;\n+import static org.mule.runtime.dsl.api.component.config.DefaultComponentLocation.fromSingleComponent;\n+\n+import org.mule.runtime.api.component.location.ComponentLocation;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutor.ExecutorCallback;\n+import org.mule.tck.junit4.AbstractMuleTestCase;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.Test;\n+\n+import io.qameta.allure.Description;\n+import io.qameta.allure.Issue;\n+\n+public class SdkInternalContextTestCase extends AbstractMuleTestCase {\n+\n+  @Test\n+  @Issue(\"MULE-18189\")\n+  @Description(\"scatter-gather sends tha same event to different routes. In that case, the relationship of what context belongs to the operation on what route must be kept.\")\n+  public void contextSharedOnParallelRoutes() throws MuleException {\n+\n+    final SdkInternalContext ctx = new SdkInternalContext();\n+\n+    final ComponentLocation comp1 = fromSingleComponent(\"comp1\");\n+    final ComponentLocation comp2 = fromSingleComponent(\"comp2\");\n+\n+    final List<ComponentLocation> completedForComponents = new ArrayList<>();\n+\n+    pushContext(ctx, comp1, completedForComponents);\n+    pushContext(ctx, comp2, completedForComponents);\n+\n+    ctx.getOperationExecutionParams(comp1).getCallback().complete(comp1);\n+    ctx.getOperationExecutionParams(comp2).getCallback().complete(comp2);\n+\n+    assertThat(completedForComponents, contains(comp1, comp2));\n+  }\n+\n+  private void pushContext(final SdkInternalContext ctx, final ComponentLocation location,\n+                           final List<ComponentLocation> completedForComponents)\n+      throws MuleException {\n+    ctx.putContext(location);\n+    ctx.setOperationExecutionParams(location, empty(), emptyMap(), testEvent(), new ExecutorCallback() {\n+\n+      @Override\n+      public void complete(Object value) {\n+        completedForComponents.add(location);\n+      }\n+\n+      @Override\n+      public void error(Throwable e) {\n+        throw new MuleRuntimeException(e);\n+      }\n+    });\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e00abba9d1f82fa1bb85dbc9cdf4ba215318ecf"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c4a7d500fb38cb4c5252dd8e9090aeb74e13acb", "author": {"user": {"login": "elrodro83", "name": "Rodrigo Merino"}}, "url": "https://github.com/mulesoft/mule/commit/9c4a7d500fb38cb4c5252dd8e9090aeb74e13acb", "committedDate": "2020-03-16T21:26:26Z", "message": "review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ca9bab3dc488df807a3f07db67fb7b46bfdb766", "author": {"user": {"login": "elrodro83", "name": "Rodrigo Merino"}}, "url": "https://github.com/mulesoft/mule/commit/2ca9bab3dc488df807a3f07db67fb7b46bfdb766", "committedDate": "2020-03-16T21:45:32Z", "message": "more review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjA0MjYy", "url": "https://github.com/mulesoft/mule/pull/8739#pullrequestreview-375604262", "createdAt": "2020-03-16T21:46:48Z", "commit": {"oid": "2ca9bab3dc488df807a3f07db67fb7b46bfdb766"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c32a43017eca40c42cbed761ead8bf9a75334425", "author": {"user": {"login": "elrodro83", "name": "Rodrigo Merino"}}, "url": "https://github.com/mulesoft/mule/commit/c32a43017eca40c42cbed761ead8bf9a75334425", "committedDate": "2020-03-16T23:37:24Z", "message": "fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NjYwNjA0", "url": "https://github.com/mulesoft/mule/pull/8739#pullrequestreview-375660604", "createdAt": "2020-03-17T00:08:19Z", "commit": {"oid": "c32a43017eca40c42cbed761ead8bf9a75334425"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 944, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}