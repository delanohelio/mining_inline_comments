{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MjA2MjMz", "number": 9187, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzowNzowOFrOEXnlqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTozMjoyMFrOEYG5iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjAxMzIxOnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/util/message/ResultToMessageIteratorTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzowNzowOFrOG_gb2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzowNzowOFrOG_gb2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NDg4OA==", "bodyText": "i know this is a test, but this may be confusing if looking for examples of this. Can you pass a mock or new location for this?", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469244888", "createdAt": "2020-08-12T13:07:08Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/util/message/ResultToMessageIteratorTestCase.java", "diffHunk": "@@ -60,7 +60,7 @@ private ResultToMessageIterator createResultToMessageIterator() {\n     CursorProviderFactory cursorProviderFactory = mock(CursorProviderFactory.class);\n     BaseEventContext eventCtx = mock(BaseEventContext.class);\n \n-    return new ResultToMessageIterator(list.iterator(), cursorProviderFactory, eventCtx);\n+    return new ResultToMessageIterator(list.iterator(), cursorProviderFactory, eventCtx, eventCtx.getOriginatingLocation());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "755982048080ee28828ad8c06eb9e3a4981c1884"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjAyMzIyOnYy", "diffSide": "RIGHT", "path": "core/api-changes.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzowOTozNFrOG_gh1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzowOTozNFrOG_gh1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NjQyMQ==", "bodyText": "this shouldn't be needed, because the class is @NoExtend. Seems to be an issue in the validator, can you create a jira for that? Also, explain that situation in this justification.", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469246421", "createdAt": "2020-08-12T13:09:34Z", "author": {"login": "elrodro83"}, "path": "core/api-changes.json", "diffHunk": "@@ -2,6 +2,24 @@\n   \"4.4.0\": {\n     \"revapi\": {\n       \"ignore\": [\n+        {\n+          \"code\": \"java.method.finalMethodAddedToNonFinalClass\",\n+          \"new\": \"method java.lang.Object org.mule.runtime.core.api.streaming.bytes.factory.AbstractCursorStreamProviderFactory::of(org.mule.runtime.core.api.event.CoreEvent, java.io.InputStream, org.mule.runtime.api.component.location.ComponentLocation)\",\n+          \"package\": \"org.mule.runtime.core.api.streaming.bytes.factory\",\n+          \"classSimpleName\": \"AbstractCursorStreamProviderFactory\",\n+          \"methodName\": \"of\",\n+          \"elementKind\": \"method\",\n+          \"justification\": \"MULE-18634: Add new method to receive ComponentLocator\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "755982048080ee28828ad8c06eb9e3a4981c1884"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjAyNTM2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxMDowMVrOG_gjFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDowOToxOFrOG_jDDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0Njc0MQ==", "bodyText": "will this be backported?", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469246741", "createdAt": "2020-08-12T13:10:01Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java", "diffHunk": "@@ -24,15 +25,51 @@\n   /**\n    * Optionally creates a new {@link CursorProvider} to buffer the given {@code value}.\n    * <p>\n-   * Implementations might resolve that the given stream is/should not be buffered and thus\n-   * it will return the same given stream. In that case, the stream will be unaltered.\n+   * Implementations might resolve that the given stream is/should not be buffered and thus it will return the same given stream.\n+   * In that case, the stream will be unaltered.\n    *\n    * @param eventContext the context of the event on which buffering is talking place\n    * @param value the stream to be cursored\n+   * @param originatingLocation the {@link ComponentLocation} where the cursor was created\n    * @return A {@link CursorProvider} or the same given {@code inputStream}\n+   *\n+   * @since 4.4.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "755982048080ee28828ad8c06eb9e3a4981c1884"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4NzY5NQ==", "bodyText": "Done", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469287695", "createdAt": "2020-08-12T14:09:18Z", "author": {"login": "szaffarano"}, "path": "core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java", "diffHunk": "@@ -24,15 +25,51 @@\n   /**\n    * Optionally creates a new {@link CursorProvider} to buffer the given {@code value}.\n    * <p>\n-   * Implementations might resolve that the given stream is/should not be buffered and thus\n-   * it will return the same given stream. In that case, the stream will be unaltered.\n+   * Implementations might resolve that the given stream is/should not be buffered and thus it will return the same given stream.\n+   * In that case, the stream will be unaltered.\n    *\n    * @param eventContext the context of the event on which buffering is talking place\n    * @param value the stream to be cursored\n+   * @param originatingLocation the {@link ComponentLocation} where the cursor was created\n    * @return A {@link CursorProvider} or the same given {@code inputStream}\n+   *\n+   * @since 4.4.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0Njc0MQ=="}, "originalCommit": {"oid": "755982048080ee28828ad8c06eb9e3a4981c1884"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjAyNjUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxMDoxOFrOG_gjwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDoxMDowMlrOG_jE8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NjkxNA==", "bodyText": "indicate from which version on this is deprecated", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469246914", "createdAt": "2020-08-12T13:10:18Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java", "diffHunk": "@@ -24,15 +25,51 @@\n   /**\n    * Optionally creates a new {@link CursorProvider} to buffer the given {@code value}.\n    * <p>\n-   * Implementations might resolve that the given stream is/should not be buffered and thus\n-   * it will return the same given stream. In that case, the stream will be unaltered.\n+   * Implementations might resolve that the given stream is/should not be buffered and thus it will return the same given stream.\n+   * In that case, the stream will be unaltered.\n    *\n    * @param eventContext the context of the event on which buffering is talking place\n    * @param value the stream to be cursored\n+   * @param originatingLocation the {@link ComponentLocation} where the cursor was created\n    * @return A {@link CursorProvider} or the same given {@code inputStream}\n+   *\n+   * @since 4.4.0\n+   */\n+  Object of(EventContext eventContext, T value, ComponentLocation originatingLocation);\n+\n+  /**\n+   * Optionally creates a new {@link CursorProvider} to buffer the given {@code value}.\n+   * <p>\n+   * Implementations might resolve that the given stream is/should not be buffered and thus it will return the same given stream.\n+   * In that case, the stream will be unaltered.\n+   *\n+   * @param eventContext the context of the event on which buffering is talking place\n+   * @param value the stream to be cursored\n+   * @return A {@link CursorProvider} or the same given {@code inputStream}\n+   *\n+   * @deprecated use {@link #of(EventContext, Object, ComponentLocation)} instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "755982048080ee28828ad8c06eb9e3a4981c1884"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4ODE3OQ==", "bodyText": "done", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469288179", "createdAt": "2020-08-12T14:10:02Z", "author": {"login": "szaffarano"}, "path": "core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java", "diffHunk": "@@ -24,15 +25,51 @@\n   /**\n    * Optionally creates a new {@link CursorProvider} to buffer the given {@code value}.\n    * <p>\n-   * Implementations might resolve that the given stream is/should not be buffered and thus\n-   * it will return the same given stream. In that case, the stream will be unaltered.\n+   * Implementations might resolve that the given stream is/should not be buffered and thus it will return the same given stream.\n+   * In that case, the stream will be unaltered.\n    *\n    * @param eventContext the context of the event on which buffering is talking place\n    * @param value the stream to be cursored\n+   * @param originatingLocation the {@link ComponentLocation} where the cursor was created\n    * @return A {@link CursorProvider} or the same given {@code inputStream}\n+   *\n+   * @since 4.4.0\n+   */\n+  Object of(EventContext eventContext, T value, ComponentLocation originatingLocation);\n+\n+  /**\n+   * Optionally creates a new {@link CursorProvider} to buffer the given {@code value}.\n+   * <p>\n+   * Implementations might resolve that the given stream is/should not be buffered and thus it will return the same given stream.\n+   * In that case, the stream will be unaltered.\n+   *\n+   * @param eventContext the context of the event on which buffering is talking place\n+   * @param value the stream to be cursored\n+   * @return A {@link CursorProvider} or the same given {@code inputStream}\n+   *\n+   * @deprecated use {@link #of(EventContext, Object, ComponentLocation)} instead.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NjkxNA=="}, "originalCommit": {"oid": "755982048080ee28828ad8c06eb9e3a4981c1884"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjAyODMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxMDo0NFrOG_gk1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDowODozN1rOG_jBMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NzE4OA==", "bodyText": "why is this new method already deprecated?", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469247188", "createdAt": "2020-08-12T13:10:44Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java", "diffHunk": "@@ -24,15 +25,51 @@\n   /**\n    * Optionally creates a new {@link CursorProvider} to buffer the given {@code value}.\n    * <p>\n-   * Implementations might resolve that the given stream is/should not be buffered and thus\n-   * it will return the same given stream. In that case, the stream will be unaltered.\n+   * Implementations might resolve that the given stream is/should not be buffered and thus it will return the same given stream.\n+   * In that case, the stream will be unaltered.\n    *\n    * @param eventContext the context of the event on which buffering is talking place\n    * @param value the stream to be cursored\n+   * @param originatingLocation the {@link ComponentLocation} where the cursor was created\n    * @return A {@link CursorProvider} or the same given {@code inputStream}\n+   *\n+   * @since 4.4.0\n+   */\n+  Object of(EventContext eventContext, T value, ComponentLocation originatingLocation);\n+\n+  /**\n+   * Optionally creates a new {@link CursorProvider} to buffer the given {@code value}.\n+   * <p>\n+   * Implementations might resolve that the given stream is/should not be buffered and thus it will return the same given stream.\n+   * In that case, the stream will be unaltered.\n+   *\n+   * @param eventContext the context of the event on which buffering is talking place\n+   * @param value the stream to be cursored\n+   * @return A {@link CursorProvider} or the same given {@code inputStream}\n+   *\n+   * @deprecated use {@link #of(EventContext, Object, ComponentLocation)} instead.\n    */\n+  @Deprecated\n   Object of(EventContext eventContext, T value);\n \n+  /**\n+   * Optionally creates a new {@link CursorProvider} to buffer the given {@code value}.\n+   * <p>\n+   * Implementations might resolve that the given stream is/should not be buffered and thus it will return the same given stream.\n+   * In that case, the stream will be unaltered.\n+   *\n+   * @param event the event on which buffering is talking place\n+   * @param value the stream to be cursored\n+   * @param originatingLocation the {@link ComponentLocation} where the cursor was created\n+   * @return A {@link CursorProvider} or the same given {@code inputStream}\n+   *\n+   * @since 4.4.0\n+   *\n+   * @deprecated use {@link #of(EventContext, Object, ComponentLocation)} instead.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "755982048080ee28828ad8c06eb9e3a4981c1884"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4NzIxOA==", "bodyText": "I had to overload Object of(CoreEvent event, T value); to not to break backwards, which was already deprecated.", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469287218", "createdAt": "2020-08-12T14:08:37Z", "author": {"login": "szaffarano"}, "path": "core/src/main/java/org/mule/runtime/core/api/streaming/CursorProviderFactory.java", "diffHunk": "@@ -24,15 +25,51 @@\n   /**\n    * Optionally creates a new {@link CursorProvider} to buffer the given {@code value}.\n    * <p>\n-   * Implementations might resolve that the given stream is/should not be buffered and thus\n-   * it will return the same given stream. In that case, the stream will be unaltered.\n+   * Implementations might resolve that the given stream is/should not be buffered and thus it will return the same given stream.\n+   * In that case, the stream will be unaltered.\n    *\n    * @param eventContext the context of the event on which buffering is talking place\n    * @param value the stream to be cursored\n+   * @param originatingLocation the {@link ComponentLocation} where the cursor was created\n    * @return A {@link CursorProvider} or the same given {@code inputStream}\n+   *\n+   * @since 4.4.0\n+   */\n+  Object of(EventContext eventContext, T value, ComponentLocation originatingLocation);\n+\n+  /**\n+   * Optionally creates a new {@link CursorProvider} to buffer the given {@code value}.\n+   * <p>\n+   * Implementations might resolve that the given stream is/should not be buffered and thus it will return the same given stream.\n+   * In that case, the stream will be unaltered.\n+   *\n+   * @param eventContext the context of the event on which buffering is talking place\n+   * @param value the stream to be cursored\n+   * @return A {@link CursorProvider} or the same given {@code inputStream}\n+   *\n+   * @deprecated use {@link #of(EventContext, Object, ComponentLocation)} instead.\n    */\n+  @Deprecated\n   Object of(EventContext eventContext, T value);\n \n+  /**\n+   * Optionally creates a new {@link CursorProvider} to buffer the given {@code value}.\n+   * <p>\n+   * Implementations might resolve that the given stream is/should not be buffered and thus it will return the same given stream.\n+   * In that case, the stream will be unaltered.\n+   *\n+   * @param event the event on which buffering is talking place\n+   * @param value the stream to be cursored\n+   * @param originatingLocation the {@link ComponentLocation} where the cursor was created\n+   * @return A {@link CursorProvider} or the same given {@code inputStream}\n+   *\n+   * @since 4.4.0\n+   *\n+   * @deprecated use {@link #of(EventContext, Object, ComponentLocation)} instead.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0NzE4OA=="}, "originalCommit": {"oid": "755982048080ee28828ad8c06eb9e3a4981c1884"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjAzMTY5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/api/streaming/bytes/factory/AbstractCursorStreamProviderFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxMTozN1rOG_gm_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMzozMTo1M1rOG_2VPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0Nzc0MA==", "bodyText": "can you make the implementation null safe and pass no value instead of a wrong value for this case?", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469247740", "createdAt": "2020-08-12T13:11:37Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/api/streaming/bytes/factory/AbstractCursorStreamProviderFactory.java", "diffHunk": "@@ -48,23 +49,45 @@ protected AbstractCursorStreamProviderFactory(ByteBufferManager bufferManager, S\n     this.streamingManager = streamingManager;\n   }\n \n+  /**\n+   * {@inheritDoc}\n+   */\n   @Override\n-  public final Object of(EventContext eventContext, InputStream inputStream) {\n+  public final Object of(EventContext eventContext, InputStream inputStream, ComponentLocation originatingLocation) {\n     if (inputStream instanceof CursorStream) {\n       return streamingManager.manage(((CursorStream) inputStream).getProvider(), eventContext);\n     }\n \n-    Object value = resolve(inputStream, eventContext);\n+    Object value = resolve(inputStream, eventContext, originatingLocation);\n     if (value instanceof CursorStreamProvider) {\n       value = streamingManager.manage((CursorStreamProvider) value, eventContext);\n     }\n \n     return value;\n   }\n \n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public final Object of(EventContext eventContext, InputStream inputStream) {\n+    return of(eventContext, inputStream, eventContext.getOriginatingLocation());\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public final Object of(CoreEvent event, InputStream inputStream, ComponentLocation originatingLocation) {\n+    return of(getRoot(event.getContext()), inputStream, originatingLocation);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n   @Override\n   public final Object of(CoreEvent event, InputStream inputStream) {\n-    return of(getRoot(event.getContext()), inputStream);\n+    return of(getRoot(event.getContext()), inputStream, event.getContext().getOriginatingLocation());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "755982048080ee28828ad8c06eb9e3a4981c1884"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTYwMzY0NQ==", "bodyText": "Done.  It was already null safe (eg https://github.com/mulesoft/mule/blob/master/core-tests/src/test/java/org/mule/runtime/core/internal/streaming/AbstractTroubleshootCursorProviderTestCase.java#L66).  I changed those wrong values in all places.", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469603645", "createdAt": "2020-08-12T23:31:53Z", "author": {"login": "szaffarano"}, "path": "core/src/main/java/org/mule/runtime/core/api/streaming/bytes/factory/AbstractCursorStreamProviderFactory.java", "diffHunk": "@@ -48,23 +49,45 @@ protected AbstractCursorStreamProviderFactory(ByteBufferManager bufferManager, S\n     this.streamingManager = streamingManager;\n   }\n \n+  /**\n+   * {@inheritDoc}\n+   */\n   @Override\n-  public final Object of(EventContext eventContext, InputStream inputStream) {\n+  public final Object of(EventContext eventContext, InputStream inputStream, ComponentLocation originatingLocation) {\n     if (inputStream instanceof CursorStream) {\n       return streamingManager.manage(((CursorStream) inputStream).getProvider(), eventContext);\n     }\n \n-    Object value = resolve(inputStream, eventContext);\n+    Object value = resolve(inputStream, eventContext, originatingLocation);\n     if (value instanceof CursorStreamProvider) {\n       value = streamingManager.manage((CursorStreamProvider) value, eventContext);\n     }\n \n     return value;\n   }\n \n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public final Object of(EventContext eventContext, InputStream inputStream) {\n+    return of(eventContext, inputStream, eventContext.getOriginatingLocation());\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public final Object of(CoreEvent event, InputStream inputStream, ComponentLocation originatingLocation) {\n+    return of(getRoot(event.getContext()), inputStream, originatingLocation);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n   @Override\n   public final Object of(CoreEvent event, InputStream inputStream) {\n-    return of(getRoot(event.getContext()), inputStream);\n+    return of(getRoot(event.getContext()), inputStream, event.getContext().getOriginatingLocation());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0Nzc0MA=="}, "originalCommit": {"oid": "755982048080ee28828ad8c06eb9e3a4981c1884"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjAzNTEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/api/util/StreamingUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxMjoyOFrOG_gpDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxMjoyOFrOG_gpDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0ODI3MQ==", "bodyText": "can you make the implementation null safe and pass no value instead of a wrong value for this case?", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469248271", "createdAt": "2020-08-12T13:12:28Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/api/util/StreamingUtils.java", "diffHunk": "@@ -104,33 +105,73 @@ public CoreEvent handleException(Throwable throwable) {\n \n   /**\n    * If the {@code cursorProviderFactory} accepts the given {@code value}, then the result of invoking\n-   * {@link CursorProviderFactory#of(EventContext, Object)} is returned. Otherwise, the original {@code value} is.\n+   * {@link CursorProviderFactory#of(EventContext, Object, ComponentLocation)} is returned. Otherwise, the original {@code value} is.\n    *\n    * @param value                 a value which may be a repeatable streaming resource\n    * @param cursorProviderFactory a nullable {@link CursorStreamProviderFactory}\n    * @param eventContext          the root context of the event on which the {@code value} was generated\n+   * @param originatingLocation the {@link ComponentLocation} where the cursor was created\n    * @return the {@code value} or a {@link CursorProvider}\n+   *\n+   * @since 4.4.0\n    */\n   public static Object streamingContent(Object value, CursorProviderFactory cursorProviderFactory,\n-                                        EventContext eventContext) {\n+                                        EventContext eventContext, ComponentLocation originatingLocation) {\n     if (cursorProviderFactory != null && cursorProviderFactory.accepts(value)) {\n-      return cursorProviderFactory.of(eventContext, value);\n+      return cursorProviderFactory.of(eventContext, value, originatingLocation);\n     } else {\n       return value;\n     }\n   }\n \n   /**\n    * If the {@code cursorProviderFactory} accepts the given {@code value}, then the result of invoking\n-   * {@link CursorProviderFactory#of(EventContext, Object)} is returned. Otherwise, the original {@code value} is.\n+   * {@link CursorProviderFactory#of(EventContext, Object, ComponentLocation)} is returned. Otherwise, the original {@code value} is.\n+   *\n+   * @param value                 a value which may be a repeatable streaming resource\n+   * @param cursorProviderFactory a nullable {@link CursorStreamProviderFactory}\n+   * @param eventContext          the root context of the event on which the {@code value} was generated\n+   * @return the {@code value} or a {@link CursorProvider}\n+   * \n+   * @deprecated Use {@link #streamingContent(Object, CursorProviderFactory, EventContext, ComponentLocation)}\n+   */\n+  @Deprecated\n+  public static Object streamingContent(Object value, CursorProviderFactory cursorProviderFactory, EventContext eventContext) {\n+    return streamingContent(value, cursorProviderFactory, eventContext, eventContext.getOriginatingLocation());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "755982048080ee28828ad8c06eb9e3a4981c1884"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjAzODM3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/api/util/StreamingUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxMzoxNFrOG_gq_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxMzoxNFrOG_gq_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0ODc2NQ==", "bodyText": "can you make the implementation null safe and pass no value instead of a wrong value for this case?", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469248765", "createdAt": "2020-08-12T13:13:14Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/api/util/StreamingUtils.java", "diffHunk": "@@ -104,33 +105,73 @@ public CoreEvent handleException(Throwable throwable) {\n \n   /**\n    * If the {@code cursorProviderFactory} accepts the given {@code value}, then the result of invoking\n-   * {@link CursorProviderFactory#of(EventContext, Object)} is returned. Otherwise, the original {@code value} is.\n+   * {@link CursorProviderFactory#of(EventContext, Object, ComponentLocation)} is returned. Otherwise, the original {@code value} is.\n    *\n    * @param value                 a value which may be a repeatable streaming resource\n    * @param cursorProviderFactory a nullable {@link CursorStreamProviderFactory}\n    * @param eventContext          the root context of the event on which the {@code value} was generated\n+   * @param originatingLocation the {@link ComponentLocation} where the cursor was created\n    * @return the {@code value} or a {@link CursorProvider}\n+   *\n+   * @since 4.4.0\n    */\n   public static Object streamingContent(Object value, CursorProviderFactory cursorProviderFactory,\n-                                        EventContext eventContext) {\n+                                        EventContext eventContext, ComponentLocation originatingLocation) {\n     if (cursorProviderFactory != null && cursorProviderFactory.accepts(value)) {\n-      return cursorProviderFactory.of(eventContext, value);\n+      return cursorProviderFactory.of(eventContext, value, originatingLocation);\n     } else {\n       return value;\n     }\n   }\n \n   /**\n    * If the {@code cursorProviderFactory} accepts the given {@code value}, then the result of invoking\n-   * {@link CursorProviderFactory#of(EventContext, Object)} is returned. Otherwise, the original {@code value} is.\n+   * {@link CursorProviderFactory#of(EventContext, Object, ComponentLocation)} is returned. Otherwise, the original {@code value} is.\n+   *\n+   * @param value                 a value which may be a repeatable streaming resource\n+   * @param cursorProviderFactory a nullable {@link CursorStreamProviderFactory}\n+   * @param eventContext          the root context of the event on which the {@code value} was generated\n+   * @return the {@code value} or a {@link CursorProvider}\n+   * \n+   * @deprecated Use {@link #streamingContent(Object, CursorProviderFactory, EventContext, ComponentLocation)}\n+   */\n+  @Deprecated\n+  public static Object streamingContent(Object value, CursorProviderFactory cursorProviderFactory, EventContext eventContext) {\n+    return streamingContent(value, cursorProviderFactory, eventContext, eventContext.getOriginatingLocation());\n+  }\n+\n+  /**\n+   * If the {@code cursorProviderFactory} accepts the given {@code value}, then the result of invoking\n+   * {@link CursorProviderFactory#of(EventContext, Object, ComponentLocation)} is returned. Otherwise, the original {@code value} is.\n    *\n    * @param value                 a value which may be a repeatable streaming resource\n    * @param cursorProviderFactory a nullable {@link CursorStreamProviderFactory}\n    * @param event                 the event on which the {@code value} was generated\n+   * @param originatingLocation   the {@link ComponentLocation} where the cursor was created\n    * @return the {@code value} or a {@link CursorProvider}\n+   *\n+   * @since 4.4.0\n    */\n+  public static Object streamingContent(Object value, CursorProviderFactory cursorProviderFactory, CoreEvent event,\n+                                        ComponentLocation originatingLocation) {\n+    return streamingContent(value, cursorProviderFactory, getRoot(event.getContext()),\n+                            originatingLocation);\n+  }\n+\n+  /**\n+   * If the {@code cursorProviderFactory} accepts the given {@code value}, then the result of invoking\n+   * {@link CursorProviderFactory#of(EventContext, Object, ComponentLocation)} is returned. Otherwise, the original {@code value} is.\n+   *\n+   * @param value                 a value which may be a repeatable streaming resource\n+   * @param cursorProviderFactory a nullable {@link CursorStreamProviderFactory}\n+   * @param event                 the event on which the {@code value} was generated\n+   * @return the {@code value} or a {@link CursorProvider}\n+   *\n+   * @deprecated Use {@link #streamingContent(Object, CursorProviderFactory, EventContext, ComponentLocation)}\n+   */\n+  @Deprecated\n   public static Object streamingContent(Object value, CursorProviderFactory cursorProviderFactory, CoreEvent event) {\n-    return streamingContent(value, cursorProviderFactory, getRoot(event.getContext()));\n+    return streamingContent(value, cursorProviderFactory, event, event.getContext().getOriginatingLocation());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "755982048080ee28828ad8c06eb9e3a4981c1884"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjA0MTAwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/bytes/AbstractCursorStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxMzo1M1rOG_gsjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxMzo1M1rOG_gsjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0OTE2Nw==", "bodyText": "create a new exception class for this", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469249167", "createdAt": "2020-08-12T13:13:53Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/bytes/AbstractCursorStream.java", "diffHunk": "@@ -82,6 +87,9 @@ protected void assertNotDisposed() throws IOException {\n   @Override\n   public final void close() throws IOException {\n     if (!released) {\n+      if (trackCursorProviderClose) {\n+        closerResponsible = new Exception(\"Responsible for closing the stream.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "755982048080ee28828ad8c06eb9e3a4981c1884"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjA0MTcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/object/factory/AbstractCursorIteratorProviderFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxNDowMVrOG_gs8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxNDowMVrOG_gs8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0OTI2Nw==", "bodyText": "can you make the implementation null safe and pass no value instead of a wrong value for this case?", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469249267", "createdAt": "2020-08-12T13:14:01Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/object/factory/AbstractCursorIteratorProviderFactory.java", "diffHunk": "@@ -42,22 +43,41 @@ public AbstractCursorIteratorProviderFactory(StreamingManager streamingManager)\n    * {@inheritDoc}\n    */\n   @Override\n-  public final Object of(EventContext eventContext, Iterator iterator) {\n+  public final Object of(EventContext eventContext, Iterator iterator, ComponentLocation originatingLocation) {\n     if (iterator instanceof CursorIterator) {\n       return streamingManager.manage(((CursorIterator) iterator).getProvider(), eventContext);\n     }\n \n-    Object value = resolve(iterator, eventContext);\n+    Object value = resolve(iterator, eventContext, originatingLocation);\n     if (value instanceof CursorProvider) {\n       value = streamingManager.manage((CursorProvider) value, eventContext);\n     }\n \n     return value;\n   }\n \n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public final Object of(EventContext eventContext, Iterator iterator) {\n+    return of(eventContext, iterator, eventContext.getOriginatingLocation());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "755982048080ee28828ad8c06eb9e3a4981c1884"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjA0MTk2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/object/factory/AbstractCursorIteratorProviderFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxNDowNlrOG_gtFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxNDowNlrOG_gtFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0OTMwMw==", "bodyText": "can you make the implementation null safe and pass no value instead of a wrong value for this case?", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469249303", "createdAt": "2020-08-12T13:14:06Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/object/factory/AbstractCursorIteratorProviderFactory.java", "diffHunk": "@@ -42,22 +43,41 @@ public AbstractCursorIteratorProviderFactory(StreamingManager streamingManager)\n    * {@inheritDoc}\n    */\n   @Override\n-  public final Object of(EventContext eventContext, Iterator iterator) {\n+  public final Object of(EventContext eventContext, Iterator iterator, ComponentLocation originatingLocation) {\n     if (iterator instanceof CursorIterator) {\n       return streamingManager.manage(((CursorIterator) iterator).getProvider(), eventContext);\n     }\n \n-    Object value = resolve(iterator, eventContext);\n+    Object value = resolve(iterator, eventContext, originatingLocation);\n     if (value instanceof CursorProvider) {\n       value = streamingManager.manage((CursorProvider) value, eventContext);\n     }\n \n     return value;\n   }\n \n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public final Object of(EventContext eventContext, Iterator iterator) {\n+    return of(eventContext, iterator, eventContext.getOriginatingLocation());\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n+  @Override\n+  public final Object of(CoreEvent event, Iterator value, ComponentLocation originatingLocation) {\n+    return of(getRoot(event.getContext()), value, originatingLocation);\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   */\n   @Override\n-  public Object of(CoreEvent event, Iterator value) {\n-    return of(getRoot(event.getContext()), value);\n+  public final Object of(CoreEvent event, Iterator value) {\n+    return of(getRoot(event.getContext()), value, event.getContext().getOriginatingLocation());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "755982048080ee28828ad8c06eb9e3a4981c1884"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjA0MjYyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/util/message/MessageUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxNDoxN1rOG_gteg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxNDoxN1rOG_gteg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0OTQwMg==", "bodyText": "can you make the implementation null safe and pass no value instead of a wrong value for this case?", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469249402", "createdAt": "2020-08-12T13:14:17Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/util/message/MessageUtils.java", "diffHunk": "@@ -82,8 +85,10 @@ public static Message toMessage(Result result, CursorProviderFactory cursorProvi\n    * @param event Used for the case where a {@link CursorProvider} is created, register the one in it.\n    * @return a {@link Message}\n    */\n-  public static Message toMessage(Result result, CursorProviderFactory cursorProviderFactory, CoreEvent event) {\n-    return toMessage(result, cursorProviderFactory, ((BaseEventContext) event.getContext()).getRootContext());\n+  public static Message toMessage(Result result, CursorProviderFactory cursorProviderFactory, CoreEvent event,\n+                                  ComponentLocation originatingLocation) {\n+    return toMessage(result, cursorProviderFactory, ((BaseEventContext) event.getContext()).getRootContext(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "755982048080ee28828ad8c06eb9e3a4981c1884"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjA0NTAyOnYy", "diffSide": "RIGHT", "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/streaming/AbstractBytesStreamingExtensionTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxNDo0OFrOG_gu4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxNDo0OFrOG_gu4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI0OTc2MQ==", "bodyText": "i know this is a test, but this may be confusing if looking for examples of this. Can you pass a mock or new location for this?", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469249761", "createdAt": "2020-08-12T13:14:48Z", "author": {"login": "elrodro83"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/streaming/AbstractBytesStreamingExtensionTestCase.java", "diffHunk": "@@ -242,7 +242,8 @@ public void resolveCursorsFromObjectParams() throws Exception {\n \n     CursorStreamProvider provider = (CursorStreamProvider) flowRunner(\"objectToStream\")\n         .keepStreamsOpen()\n-        .withPayload(factory.of(testEvent().getContext(), new ByteArrayInputStream(data.getBytes())))\n+        .withPayload(factory.of(testEvent().getContext(), new ByteArrayInputStream(data.getBytes()),\n+                                testEvent().getContext().getOriginatingLocation()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "755982048080ee28828ad8c06eb9e3a4981c1884"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjA1MTA5OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/streaming/DefaultStreamingHelperTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxNjoxMlrOG_gydw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxMzoxNjoxMlrOG_gydw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI1MDY3OQ==", "bodyText": "i know this is a test, but this may be confusing if looking for examples of this. Can you pass a mock or new location for this?", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469250679", "createdAt": "2020-08-12T13:16:12Z", "author": {"login": "elrodro83"}, "path": "modules/extensions-support/src/test/java/org/mule/runtime/module/extension/internal/runtime/streaming/DefaultStreamingHelperTestCase.java", "diffHunk": "@@ -52,7 +52,8 @@ protected void doSetUp() throws Exception {\n     cursorProviderFactory =\n         new InMemoryCursorIteratorProviderFactory(InMemoryCursorIteratorConfig.getDefault(), streamingManager);\n     event = testEvent();\n-    streamingHelper = new DefaultStreamingHelper(cursorProviderFactory, streamingManager, event);\n+    streamingHelper =\n+        new DefaultStreamingHelper(cursorProviderFactory, streamingManager, event, event.getContext().getOriginatingLocation());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "755982048080ee28828ad8c06eb9e3a4981c1884"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjM4ODE3OnYy", "diffSide": "RIGHT", "path": "core/api-changes.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMjo0NDozOVrOHAJ1LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMjo0NDozOVrOHAJ1LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyMzExNg==", "bodyText": "explain why this doesn't break backwards compatibility, add a TODO to the created issue", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469923116", "createdAt": "2020-08-13T12:44:39Z", "author": {"login": "elrodro83"}, "path": "core/api-changes.json", "diffHunk": "@@ -2,6 +2,24 @@\n   \"4.4.0\": {\n     \"revapi\": {\n       \"ignore\": [\n+        {\n+          \"code\": \"java.method.finalMethodAddedToNonFinalClass\",\n+          \"new\": \"method java.lang.Object org.mule.runtime.core.api.streaming.bytes.factory.AbstractCursorStreamProviderFactory::of(org.mule.runtime.core.api.event.CoreEvent, java.io.InputStream, org.mule.runtime.api.component.location.ComponentLocation)\",\n+          \"package\": \"org.mule.runtime.core.api.streaming.bytes.factory\",\n+          \"classSimpleName\": \"AbstractCursorStreamProviderFactory\",\n+          \"methodName\": \"of\",\n+          \"elementKind\": \"method\",\n+          \"justification\": \"MULE-18634: Add new method to receive ComponentLocator\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a352799513c442e9e999339016b8cc8e226694"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjM5NTAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/ClosingCursorException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMjo0NjoyNFrOHAJ5YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMjo0NjoyNFrOHAJ5YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyNDE5Mw==", "bodyText": "this should extend either MuleRuntimeException or IOException", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469924193", "createdAt": "2020-08-13T12:46:24Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/ClosingCursorException.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.streaming;\n+\n+import org.mule.runtime.api.streaming.Cursor;\n+\n+/**\n+ * This {@link RuntimeException} is used for debugging purposes to track where a {@link Cursor} is closed.\n+ * \n+ * @since 4.4.0, 4.3.1\n+ */\n+public class ClosingCursorException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a352799513c442e9e999339016b8cc8e226694"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjQwMTYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/bytes/AbstractCursorStream.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMjo0ODoxMVrOHAJ9XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMjo0ODoxMVrOHAJ9XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkyNTIxMw==", "bodyText": "if ClosingCursorException  extended IOException you could throw it directly, avoiding the cost of creating a new exception", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r469925213", "createdAt": "2020-08-13T12:48:11Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/bytes/AbstractCursorStream.java", "diffHunk": "@@ -72,7 +78,7 @@ public CursorStreamProvider getProvider() {\n \n   protected void assertNotDisposed() throws IOException {\n     if (released) {\n-      throw new IOException(\"Stream is closed\");\n+      throw new IOException(\"Stream is closed\", closerResponsible);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a352799513c442e9e999339016b8cc8e226694"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzE0MzEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/util/message/MessageUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTozMjoyMFrOHAQ-9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTozMjoyMFrOHAQ-9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0MDMxMQ==", "bodyText": "this was on purpose because of performance, to avoid instantiating the lambda for each message built", "url": "https://github.com/mulesoft/mule/pull/9187#discussion_r470040311", "createdAt": "2020-08-13T15:32:20Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/util/message/MessageUtils.java", "diffHunk": "@@ -214,15 +214,12 @@ public static Message toMessage(Result<?, ?> result,\n   private static Message toMessage(Result<?, ?> result, DataType dataType, Object value) {\n     Message.Builder builder = Message.builder().payload(new TypedValue<>(value, dataType, result.getByteLength()));\n \n-    if (result.getAttributes().isPresent()) {\n-      Object att = result.getAttributes().get();\n-\n+    result.getAttributes().ifPresent(att -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05efc060c3030741716131e6b1c80a3da95be4ea"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4806, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}