{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNjg1MDg2", "number": 8576, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNToyMToyNVrODX4pOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNToyMToyNVrODX4pOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzcxODk2OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNToyMToyNVrOFdbQhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNToyMToyNVrOFdbQhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjM5OTYyMg==", "bodyText": "Potencial NPE if the map has no such entry", "url": "https://github.com/mulesoft/mule/pull/8576#discussion_r366399622", "createdAt": "2020-01-14T15:21:25Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContext.java", "diffHunk": "@@ -39,69 +41,122 @@ public static SdkInternalContext from(CoreEvent event) {\n     return (SdkInternalContext) ((InternalEvent) event).<SdkInternalContext>getSdkInternalContext();\n   }\n \n-  private OperationExecutionParams operationExecutionParams;\n+  /*\n+   * SDK components may be nested within each other, so some of the context must be kept separately for the component it belongs\n+   * to.\n+   */\n+  private final Map<String, LocationSpecificSdkInternalContext> locationSpecificContext = new SmallMap<>();\n \n   private Function<Context, Context> innerChainSubscriberContextMapping = identity();\n \n-  private Optional<ConfigurationInstance> configuration;\n-\n-  private Map<String, Object> resolutionResult;\n+  public void clearContextForLocation(ComponentLocation location) {\n+    locationSpecificContext.remove(resolveLocation(location));\n+  }\n \n-  private OperationPolicy policyToApply;\n+  public void setConfiguration(ComponentLocation location, Optional<ConfigurationInstance> configuration) {\n+    final LocationSpecificSdkInternalContext ctx = new LocationSpecificSdkInternalContext();\n+    ctx.setConfiguration(configuration);\n+    locationSpecificContext.put(resolveLocation(location), ctx);\n+  }\n \n-  /**\n-   * @return {@code true} if the policy to be applied is a no-op, {@code false} if a policy is actually applied.\n-   */\n-  public boolean isNoPolicyOperation() {\n-    return DefaultPolicyManager.isNoPolicyOperation(getPolicyToApply());\n+  public Optional<ConfigurationInstance> getConfiguration(ComponentLocation location) {\n+    return locationSpecificContext.get(resolveLocation(location)).getConfiguration();\n   }\n \n-  public OperationExecutionParams getOperationExecutionParams() {\n-    return operationExecutionParams;\n+  public void setOperationExecutionParams(ComponentLocation location, Optional<ConfigurationInstance> configuration,\n+                                          Map<String, Object> parameters, CoreEvent operationEvent, ExecutorCallback callback) {\n+    locationSpecificContext.get(resolveLocation(location)).setOperationExecutionParams(configuration, parameters, operationEvent,\n+                                                                                       callback);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bf9eb654e808f6c39caf12e370b91fa7a2639b7"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 126, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}