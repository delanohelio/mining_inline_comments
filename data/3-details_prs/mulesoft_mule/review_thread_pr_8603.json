{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2OTY5MDA2", "number": 8603, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMzozNzoxOFrODa4P3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDo0Njo0NVrODa5xJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NTExMTMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/context/notification/DefaultFlowCallStack.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMzozNzoxOFrOFiC3cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMzozNzoxOFrOFiC3cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI0Mjg2Nw==", "bodyText": "comment", "url": "https://github.com/mulesoft/mule/pull/8603#discussion_r371242867", "createdAt": "2020-01-27T13:37:18Z", "author": {"login": "JuLuzzi"}, "path": "core/src/main/java/org/mule/runtime/core/internal/context/notification/DefaultFlowCallStack.java", "diffHunk": "@@ -41,9 +41,8 @@ public DefaultFlowCallStack() {\n   }\n \n   private DefaultFlowCallStack(final Deque<FlowStackElement> innerStack) {\n-    synchronized (innerStack) {\n-      this.innerStack = new ArrayDeque<>(innerStack);\n-    }\n+    // this.innerStack = new ArrayDeque<>(innerStack);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d615c98c5ce48dd51311b148bec922c5186ee4"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NTIwNDkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/util/MessagingExceptionResolver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDowNTo0MlrOFiDvbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDowNTo0MlrOFiDvbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1NzE5Nw==", "bodyText": "comments", "url": "https://github.com/mulesoft/mule/pull/8603#discussion_r371257197", "createdAt": "2020-01-27T14:05:42Z", "author": {"login": "JuLuzzi"}, "path": "core/src/main/java/org/mule/runtime/core/internal/util/MessagingExceptionResolver.java", "diffHunk": "@@ -78,72 +80,104 @@ public MessagingException resolve(final MessagingException me, ErrorTypeLocator\n     }\n \n     Throwable root = rootCause.get().getFirst();\n-    ErrorType rootErrorType = rootCause.get().getSecond();\n     Component failingComponent = getFailingProcessor(me, root).orElse(component);\n \n-    ErrorType errorType = getErrorMappings(component)\n-        .stream()\n-        .filter(m -> m.match(rootErrorType))\n-        .findFirst()\n-        .map(ErrorMapping::getTarget)\n-        .orElse(rootErrorType);\n+    CoreEvent event = resolveEvent(me, root, resolveErrorType(rootCause.get().getSecond()));\n+    MessagingException result = resolveResultException(me, root, failingComponent, event);\n \n-    Error error = ErrorBuilder.builder(getMessagingExceptionCause(root)).errorType(errorType).build();\n-    CoreEvent event = CoreEvent.builder(me.getEvent()).error(error).build();\n+    propagateAlreadyLogged(me, result);\n+    return enrich(result, failingComponent, component, event, exceptionContextProviders);\n+  }\n \n+  private MessagingException resolveResultException(final MessagingException me, Throwable root, Component failingComponent,\n+                                                    CoreEvent event) {\n     MessagingException result;\n     if (root instanceof MessagingException) {\n       ((MessagingException) root).setProcessedEvent(event);\n       result = ((MessagingException) root);\n     } else {\n-      result = me instanceof FlowExecutionException ? new FlowExecutionException(event, root, failingComponent)\n+      result = me instanceof FlowExecutionException\n+          ? new FlowExecutionException(event, root, failingComponent)\n           : new MessagingException(event, root, failingComponent);\n     }\n-    propagateAlreadyLogged(me, result);\n-    return enrich(result, failingComponent, component, event, exceptionContextProviders);\n+    return result;\n   }\n \n-  private void propagateAlreadyLogged(MessagingException origin, MuleException result) {\n-    if (origin.getInfo().containsKey(INFO_ALREADY_LOGGED_KEY)) {\n-      result.addInfo(INFO_ALREADY_LOGGED_KEY, origin.getInfo().get(INFO_ALREADY_LOGGED_KEY));\n+  private CoreEvent resolveEvent(final MessagingException me, Throwable root, ErrorType errorType) {\n+    final Throwable messagingExceptionCause = getMessagingExceptionCause(root);\n+    // if (!me.getEvent()\n+    // .getError()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d615c98c5ce48dd51311b148bec922c5186ee4"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NTM2MDM2OnYy", "diffSide": "RIGHT", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/ApplicationModel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDo0Njo0NVrOFiFNvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDo0Njo0NVrOFiFNvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI4MTM0MA==", "bodyText": "comment", "url": "https://github.com/mulesoft/mule/pull/8603#discussion_r371281340", "createdAt": "2020-01-27T14:46:45Z", "author": {"login": "JuLuzzi"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/ApplicationModel.java", "diffHunk": "@@ -529,9 +529,11 @@ public String getDescription() {\n                                                                        OptionalInt.of(configLine.getLineNumber()),\n                                                                        OptionalInt.of(configLine.getStartColumn()));\n                   providerComponent.setAnnotations(ImmutableMap.<QName, Object>builder()\n-                      .put(AbstractComponent.LOCATION_KEY,\n+                      .put(LOCATION_KEY,\n                            new DefaultComponentLocation(of(componentIdentifier.getName()),\n                                                         singletonList(locationPart)))\n+\n+                      // beanAnnotations.put(REPRESENTATION_ANNOTATION_KEY, resolveProcessorRepresentation(artifactId, \"\", null));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d615c98c5ce48dd51311b148bec922c5186ee4"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 144, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}