{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNjYyODQ0", "number": 9459, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0ODoxNlrOEpdWSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo1MTozOVrOEpdbfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTA3OTEyOnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/classloading-extension/src/main/java/org/mule/test/classloading/ClassLoadingExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0ODoxNlrOHbIwPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxODoxODoyOFrOHbV7UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNzAyMQ==", "bodyText": "I would set the type resolver for a specific operation you want to modify, or create a new one.", "url": "https://github.com/mulesoft/mule/pull/9459#discussion_r498217021", "createdAt": "2020-10-01T12:48:16Z", "author": {"login": "ndinu"}, "path": "tests/test-extensions/classloading-extension/src/main/java/org/mule/test/classloading/ClassLoadingExtension.java", "diffHunk": "@@ -11,12 +11,14 @@\n import org.mule.runtime.extension.api.annotation.Extension;\n import org.mule.runtime.extension.api.annotation.connectivity.ConnectionProviders;\n import org.mule.runtime.extension.api.annotation.dsl.xml.Xml;\n+import org.mule.runtime.extension.api.annotation.metadata.MetadataScope;\n import org.mule.test.classloading.api.ClassLoadingHelper;\n \n @Extension(name = \"ClassLoading\")\n @Xml(prefix = \"classloading\")\n @ConnectionProviders({CLPoolingConnectionProvider.class, CLCachedConnectionProvider.class, CLNoneConnectionProvider.class})\n @Configurations(CLConfiguration.class)\n+@MetadataScope(keysResolver = CLKeysResolver.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "936ea50276cc3f93880b67c06f210dcb4427c521"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzMjg0OQ==", "bodyText": "This is needed for configs to be annotated with the KeysResolver annotation in the model. That then allows the following line to be called in the tests:\nmetadataService.getMetadataKeys(builder().globalName(\"none\").build());\nand that will trigger getting the metadata keys.", "url": "https://github.com/mulesoft/mule/pull/9459#discussion_r498432849", "createdAt": "2020-10-01T18:18:28Z", "author": {"login": "SebaElizalde"}, "path": "tests/test-extensions/classloading-extension/src/main/java/org/mule/test/classloading/ClassLoadingExtension.java", "diffHunk": "@@ -11,12 +11,14 @@\n import org.mule.runtime.extension.api.annotation.Extension;\n import org.mule.runtime.extension.api.annotation.connectivity.ConnectionProviders;\n import org.mule.runtime.extension.api.annotation.dsl.xml.Xml;\n+import org.mule.runtime.extension.api.annotation.metadata.MetadataScope;\n import org.mule.test.classloading.api.ClassLoadingHelper;\n \n @Extension(name = \"ClassLoading\")\n @Xml(prefix = \"classloading\")\n @ConnectionProviders({CLPoolingConnectionProvider.class, CLCachedConnectionProvider.class, CLNoneConnectionProvider.class})\n @Configurations(CLConfiguration.class)\n+@MetadataScope(keysResolver = CLKeysResolver.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNzAyMQ=="}, "originalCommit": {"oid": "936ea50276cc3f93880b67c06f210dcb4427c521"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTA4MjE3OnYy", "diffSide": "RIGHT", "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/classloading/ClassLoadingOnConnectionsTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0OTowOVrOHbIyOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0OTowOVrOHbIyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNzUyOQ==", "bodyText": "call the field metadataService", "url": "https://github.com/mulesoft/mule/pull/9459#discussion_r498217529", "createdAt": "2020-10-01T12:49:09Z", "author": {"login": "ndinu"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/classloading/ClassLoadingOnConnectionsTestCase.java", "diffHunk": "@@ -29,13 +34,18 @@\n import java.util.Map;\n import java.util.Set;\n \n+import javax.inject.Inject;\n+\n import org.hamcrest.Matcher;\n import org.hamcrest.core.StringContains;\n import org.junit.Rule;\n import org.junit.Test;\n \n public class ClassLoadingOnConnectionsTestCase extends AbstractExtensionFunctionalTestCase {\n \n+  @Inject\n+  private MetadataService metadataManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "936ea50276cc3f93880b67c06f210dcb4427c521"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTA4NDc3OnYy", "diffSide": "RIGHT", "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/classloading/ClassLoadingOnConnectionsTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo0OTo0NFrOHbIzxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxODoxNDo1N1rOHbVz3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNzkyNA==", "bodyText": "I don't feel that this test belongs in this class.", "url": "https://github.com/mulesoft/mule/pull/9459#discussion_r498217924", "createdAt": "2020-10-01T12:49:44Z", "author": {"login": "ndinu"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/classloading/ClassLoadingOnConnectionsTestCase.java", "diffHunk": "@@ -72,6 +82,12 @@ public void allOptionalParameterGroup() throws Exception {\n     verifyUsedClassLoaders(ALL_OPTIONAL_PARAMETER_GROUP);\n   }\n \n+  @Test\n+  public void operationWithMetadataResolver() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "936ea50276cc3f93880b67c06f210dcb4427c521"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzMDk0Mg==", "bodyText": "will refactor", "url": "https://github.com/mulesoft/mule/pull/9459#discussion_r498430942", "createdAt": "2020-10-01T18:14:57Z", "author": {"login": "SebaElizalde"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/classloading/ClassLoadingOnConnectionsTestCase.java", "diffHunk": "@@ -72,6 +82,12 @@ public void allOptionalParameterGroup() throws Exception {\n     verifyUsedClassLoaders(ALL_OPTIONAL_PARAMETER_GROUP);\n   }\n \n+  @Test\n+  public void operationWithMetadataResolver() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxNzkyNA=="}, "originalCommit": {"oid": "936ea50276cc3f93880b67c06f210dcb4427c521"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExOTA5MjQ2OnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/classloading-extension/src/main/java/org/mule/test/classloading/CLKeysResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxMjo1MTozOVrOHbI4cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQxODoxOToyMFrOHbV9Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxOTEyMw==", "bodyText": "If you are going to assert that the operation metadata key resolution and source metadata key resolution are using the correct class loader, I would make them use two different resolvers, and use the addClassLoader method with different values.", "url": "https://github.com/mulesoft/mule/pull/9459#discussion_r498219123", "createdAt": "2020-10-01T12:51:39Z", "author": {"login": "ndinu"}, "path": "tests/test-extensions/classloading-extension/src/main/java/org/mule/test/classloading/CLKeysResolver.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.test.classloading;\n+\n+import static org.mule.metadata.api.model.MetadataFormat.JAVA;\n+import static org.mule.test.classloading.api.ClassLoadingHelper.addClassLoader;\n+\n+import org.mule.metadata.api.builder.BaseTypeBuilder;\n+import org.mule.metadata.api.model.MetadataType;\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.metadata.MetadataContext;\n+import org.mule.runtime.api.metadata.MetadataKey;\n+import org.mule.runtime.api.metadata.MetadataKeyBuilder;\n+import org.mule.runtime.api.metadata.MetadataResolvingException;\n+import org.mule.runtime.api.metadata.resolving.OutputTypeResolver;\n+import org.mule.runtime.api.metadata.resolving.TypeKeysResolver;\n+\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+public class CLKeysResolver implements TypeKeysResolver, OutputTypeResolver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "936ea50276cc3f93880b67c06f210dcb4427c521"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzMDg1MA==", "bodyText": "They both end up calling the same method, so I don't feel like there is a need to distinguish between sources and operations by making 2 separate tests.", "url": "https://github.com/mulesoft/mule/pull/9459#discussion_r498430850", "createdAt": "2020-10-01T18:14:47Z", "author": {"login": "SebaElizalde"}, "path": "tests/test-extensions/classloading-extension/src/main/java/org/mule/test/classloading/CLKeysResolver.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.test.classloading;\n+\n+import static org.mule.metadata.api.model.MetadataFormat.JAVA;\n+import static org.mule.test.classloading.api.ClassLoadingHelper.addClassLoader;\n+\n+import org.mule.metadata.api.builder.BaseTypeBuilder;\n+import org.mule.metadata.api.model.MetadataType;\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.metadata.MetadataContext;\n+import org.mule.runtime.api.metadata.MetadataKey;\n+import org.mule.runtime.api.metadata.MetadataKeyBuilder;\n+import org.mule.runtime.api.metadata.MetadataResolvingException;\n+import org.mule.runtime.api.metadata.resolving.OutputTypeResolver;\n+import org.mule.runtime.api.metadata.resolving.TypeKeysResolver;\n+\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+public class CLKeysResolver implements TypeKeysResolver, OutputTypeResolver {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxOTEyMw=="}, "originalCommit": {"oid": "936ea50276cc3f93880b67c06f210dcb4427c521"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODQzMzMwMw==", "bodyText": "I think that calling the same method is an implementation detail, we should cover both cases.", "url": "https://github.com/mulesoft/mule/pull/9459#discussion_r498433303", "createdAt": "2020-10-01T18:19:20Z", "author": {"login": "ndinu"}, "path": "tests/test-extensions/classloading-extension/src/main/java/org/mule/test/classloading/CLKeysResolver.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.test.classloading;\n+\n+import static org.mule.metadata.api.model.MetadataFormat.JAVA;\n+import static org.mule.test.classloading.api.ClassLoadingHelper.addClassLoader;\n+\n+import org.mule.metadata.api.builder.BaseTypeBuilder;\n+import org.mule.metadata.api.model.MetadataType;\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.metadata.MetadataContext;\n+import org.mule.runtime.api.metadata.MetadataKey;\n+import org.mule.runtime.api.metadata.MetadataKeyBuilder;\n+import org.mule.runtime.api.metadata.MetadataResolvingException;\n+import org.mule.runtime.api.metadata.resolving.OutputTypeResolver;\n+import org.mule.runtime.api.metadata.resolving.TypeKeysResolver;\n+\n+import java.util.Set;\n+\n+import com.google.common.collect.ImmutableSet;\n+\n+public class CLKeysResolver implements TypeKeysResolver, OutputTypeResolver {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODIxOTEyMw=="}, "originalCommit": {"oid": "936ea50276cc3f93880b67c06f210dcb4427c521"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4735, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}