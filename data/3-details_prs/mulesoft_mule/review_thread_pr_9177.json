{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0ODE5MDcw", "number": 9177, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTowMzowMFrOEWWmBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjo0NTo0NVrOEXMY6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODc0MzExOnYy", "diffSide": "RIGHT", "path": "modules/tooling-support-parent/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/config/InternalDeclarationSession.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTowMzowMFrOG9nvsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTowMzowMFrOG9nvsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI2NzUwNw==", "bodyText": "We have already a reflectionCache as an instance field. We could use that one.", "url": "https://github.com/mulesoft/mule/pull/9177#discussion_r467267507", "createdAt": "2020-08-07T21:03:00Z", "author": {"login": "gsfernandes"}, "path": "modules/tooling-support-parent/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/config/InternalDeclarationSession.java", "diffHunk": "@@ -135,6 +140,24 @@ public ValueResult getValues(ParameterizedElementDeclaration component, String p\n     }\n   }\n \n+  @Override\n+  public MetadataResult<MetadataKeysContainer> getMetadataKeys(ComponentElementDeclaration component) {\n+    return artifactHelper()\n+        .findComponentModel(component)\n+        .map(cm -> {\n+          Optional<ConfigurationInstance> configurationInstance =\n+              ofNullable(component.getConfigRef()).flatMap(name -> artifactHelper().getConfigurationInstance(name));\n+          MetadataKey metadataKey = buildMetadataKey(cm, component);\n+          ClassLoader extensionClassLoader = getClassLoader(artifactHelper().getExtensionModel(component));\n+          return withContextClassLoader(extensionClassLoader, () -> {\n+            DefaultMetadataContext metadataContext = createMetadataContext(configurationInstance, extensionClassLoader);\n+            return new MetadataMediator<>(cm).getMetadataKeys(metadataContext, metadataKey, new ReflectionCache());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d91b686334be8a823b1ebefe02954b7ea689b654"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxODc0NTgwOnYy", "diffSide": "RIGHT", "path": "modules/tooling-support-parent/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/config/InternalDeclarationSession.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTowNDoxMFrOG9nxSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QyMTo1NDoyMVrOG9pp6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI2NzkxNQ==", "bodyText": "I would say that in this case it should be a failure as the only case for this orElse is if the componentModel is not present or found for the declaration. It would mean that they were trying to resolve keys for a component that is not defined in any of the extension models declared for the session :S", "url": "https://github.com/mulesoft/mule/pull/9177#discussion_r467267915", "createdAt": "2020-08-07T21:04:10Z", "author": {"login": "gsfernandes"}, "path": "modules/tooling-support-parent/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/config/InternalDeclarationSession.java", "diffHunk": "@@ -135,6 +140,24 @@ public ValueResult getValues(ParameterizedElementDeclaration component, String p\n     }\n   }\n \n+  @Override\n+  public MetadataResult<MetadataKeysContainer> getMetadataKeys(ComponentElementDeclaration component) {\n+    return artifactHelper()\n+        .findComponentModel(component)\n+        .map(cm -> {\n+          Optional<ConfigurationInstance> configurationInstance =\n+              ofNullable(component.getConfigRef()).flatMap(name -> artifactHelper().getConfigurationInstance(name));\n+          MetadataKey metadataKey = buildMetadataKey(cm, component);\n+          ClassLoader extensionClassLoader = getClassLoader(artifactHelper().getExtensionModel(component));\n+          return withContextClassLoader(extensionClassLoader, () -> {\n+            DefaultMetadataContext metadataContext = createMetadataContext(configurationInstance, extensionClassLoader);\n+            return new MetadataMediator<>(cm).getMetadataKeys(metadataContext, metadataKey, new ReflectionCache());\n+          });\n+        })\n+        .orElseGet(() -> MetadataResult.success(MetadataKeysContainerBuilder.getInstance()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d91b686334be8a823b1ebefe02954b7ea689b654"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI5ODc5Mw==", "bodyText": "Please review the same case for types. It should fail if component is not found", "url": "https://github.com/mulesoft/mule/pull/9177#discussion_r467298793", "createdAt": "2020-08-07T21:54:21Z", "author": {"login": "gsfernandes"}, "path": "modules/tooling-support-parent/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/config/InternalDeclarationSession.java", "diffHunk": "@@ -135,6 +140,24 @@ public ValueResult getValues(ParameterizedElementDeclaration component, String p\n     }\n   }\n \n+  @Override\n+  public MetadataResult<MetadataKeysContainer> getMetadataKeys(ComponentElementDeclaration component) {\n+    return artifactHelper()\n+        .findComponentModel(component)\n+        .map(cm -> {\n+          Optional<ConfigurationInstance> configurationInstance =\n+              ofNullable(component.getConfigRef()).flatMap(name -> artifactHelper().getConfigurationInstance(name));\n+          MetadataKey metadataKey = buildMetadataKey(cm, component);\n+          ClassLoader extensionClassLoader = getClassLoader(artifactHelper().getExtensionModel(component));\n+          return withContextClassLoader(extensionClassLoader, () -> {\n+            DefaultMetadataContext metadataContext = createMetadataContext(configurationInstance, extensionClassLoader);\n+            return new MetadataMediator<>(cm).getMetadataKeys(metadataContext, metadataKey, new ReflectionCache());\n+          });\n+        })\n+        .orElseGet(() -> MetadataResult.success(MetadataKeysContainerBuilder.getInstance()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzI2NzkxNQ=="}, "originalCommit": {"oid": "d91b686334be8a823b1ebefe02954b7ea689b654"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNzU1NjkwOnYy", "diffSide": "RIGHT", "path": "modules/tooling-support-parent/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/config/InternalDeclarationSession.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjo0NTo0NVrOG-2HSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMjo0NTo0NVrOG-2HSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU1MTQ5OQ==", "bodyText": "getMetadataKeyPartsValuesFromComponentDeclaration?", "url": "https://github.com/mulesoft/mule/pull/9177#discussion_r468551499", "createdAt": "2020-08-11T12:45:45Z", "author": {"login": "gsfernandes"}, "path": "modules/tooling-support-parent/tooling-support/src/main/java/org/mule/runtime/module/tooling/internal/config/InternalDeclarationSession.java", "diffHunk": "@@ -259,15 +273,13 @@ private MetadataKey buildMetadataKey(ComponentModel componentModel, ComponentEle\n         .collect(toList());\n   }\n \n-  private <T extends ComponentModel> Map<String, Object> getComponentElementDeclarationParameters(ComponentElementDeclaration componentElementDeclaration,\n-                                                                                                  T model) {\n-    Map<String, Object> parametersMap = new HashMap<>();\n+  private <T extends ComponentModel> Map<String, String> getParameterValues(ComponentElementDeclaration componentElementDeclaration,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "314066a77fbb8ec757c9eace61044dac1ef411dc"}, "originalPosition": 136}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4794, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}