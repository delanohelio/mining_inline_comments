{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMTAyMzQx", "number": 8566, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoyNzozMFrODXibGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTozOToyM1rODXqjlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDA3ODM0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/api/processor/strategy/ProcessingStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoyNzozMFrOFc4nbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoyNzozMFrOFc4nbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzMjA0NA==", "bodyText": "jdoc", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365832044", "createdAt": "2020-01-13T14:27:30Z", "author": {"login": "marianogonzalez"}, "path": "core/src/main/java/org/mule/runtime/core/api/processor/strategy/ProcessingStrategy.java", "diffHunk": "@@ -48,6 +48,10 @@ default void registerInternalSink(Publisher<CoreEvent> flux, String sinkRepresen\n     Flux.from(flux).subscribe();\n   }\n \n+  default Publisher<CoreEvent> registerInternalFlux(Publisher<CoreEvent> flux) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDA4MDA1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/policy/DefaultPolicyManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoyNzo1NlrOFc4oeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoyNzo1NlrOFc4oeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzMjMxNA==", "bodyText": "I would expose this through a getter", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365832314", "createdAt": "2020-01-13T14:27:56Z", "author": {"login": "marianogonzalez"}, "path": "core/src/main/java/org/mule/runtime/core/internal/policy/DefaultPolicyManager.java", "diffHunk": "@@ -61,7 +61,7 @@\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(DefaultPolicyManager.class);\n \n-  private static final OperationPolicy NO_POLICY_OPERATION =\n+  public static final OperationPolicy NO_POLICY_OPERATION =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDA4NDg5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/processor/AsyncDelegateMessageProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoyOTowNVrOFc4rNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDoyOTowNVrOFc4rNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzMzAxNA==", "bodyText": "this should be wrapped in FunctionalUtils.safely() so that if this fails, the rest is disposed correctly", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365833014", "createdAt": "2020-01-13T14:29:05Z", "author": {"login": "marianogonzalez"}, "path": "core/src/main/java/org/mule/runtime/core/internal/processor/AsyncDelegateMessageProcessor.java", "diffHunk": "@@ -192,15 +198,14 @@ public void start() throws MuleException {\n   public void stop() throws MuleException {\n     super.stop();\n     stopIfNeeded(delegate);\n-\n+    stopIfNeeded(backpressureHandler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDA5NjkxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/processor/AsyncDelegateMessageProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDozMjozNVrOFc4yUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDozMjozNVrOFc4yUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzNDgzMw==", "bodyText": "isn't this too much frequency?\nAlso:\na) isn't a busy wait preferable in cases of high throughput\nb) isn't a wait()/notify() approach preferable in most cases?", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365834833", "createdAt": "2020-01-13T14:32:35Z", "author": {"login": "marianogonzalez"}, "path": "core/src/main/java/org/mule/runtime/core/internal/processor/AsyncDelegateMessageProcessor.java", "diffHunk": "@@ -293,4 +309,57 @@ public void setMaxConcurrency(Integer maxConcurrency) {\n     // Lifecycle of inner objects is already handled by this class' lifecycle methods\n     return emptyList();\n   }\n+\n+  private static class QueueBackpressureHandler implements Startable, Stoppable {\n+\n+    private final BlockingQueue<CoreEvent> asyncQueue;\n+    private final SchedulerService schedulerService;\n+    private final Supplier<SchedulerConfig> schedulerConfigSupplier;\n+    private final String location;\n+    private final Consumer<CoreEvent> eventDispatcher;\n+\n+    private Scheduler queueDispatcherScheduler;\n+\n+    public QueueBackpressureHandler(SchedulerService schedulerService, Supplier<SchedulerConfig> schedulerConfigSupplier,\n+                                    Consumer<CoreEvent> eventDispatcher, String location) {\n+      this.schedulerService = schedulerService;\n+      this.schedulerConfigSupplier = schedulerConfigSupplier;\n+\n+      this.asyncQueue = new LinkedBlockingQueue<>();\n+      this.eventDispatcher = eventDispatcher;\n+\n+      this.location = location;\n+    }\n+\n+    public void handleBackpressure(CoreEvent event) {\n+      asyncQueue.offer(event);\n+    }\n+\n+    @Override\n+    public void start() {\n+      final SchedulerConfig schedulerConfig = schedulerConfigSupplier.get().withName(location + \" - queue dispatcher\");\n+      queueDispatcherScheduler = schedulerService.ioScheduler(schedulerConfig);\n+\n+      queueDispatcherScheduler.scheduleWithFixedDelay(() -> {\n+        try {\n+          final CoreEvent event = asyncQueue.peek();\n+          if (event != null) {\n+            eventDispatcher.accept(event);\n+            asyncQueue.remove(event);\n+          }\n+        } catch (FromFlowRejectedExecutionException free) {\n+          // nothing to do, a retry will come next\n+        }\n+      }, 0, 2, MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDA5OTIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/processor/strategy/AbstractProcessingStrategy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDozMzoxMlrOFc4zrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDo1ODoxM1rOFc5pOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzNTE4MA==", "bodyText": "weren't you going to actually increase the size of this buffer to reduce the error rate?", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365835180", "createdAt": "2020-01-13T14:33:12Z", "author": {"login": "marianogonzalez"}, "path": "core/src/main/java/org/mule/runtime/core/internal/processor/strategy/AbstractProcessingStrategy.java", "diffHunk": "@@ -144,7 +144,7 @@ public final BackPressureReason emit(CoreEvent event) {\n       long remainingCapacity = fluxSink.requestedFromDownstream();\n       if (remainingCapacity == 0) {\n         return EVENTS_ACCUMULATED;\n-      } else if (remainingCapacity > (bufferSize > CORES * 4 ? CORES : 0)) {\n+      } else if (remainingCapacity > (bufferSize > CORES * 2 ? CORES : 0)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg0ODg4OQ==", "bodyText": "no need to do that, this remained of a test i made, will revert it", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365848889", "createdAt": "2020-01-13T14:58:13Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/processor/strategy/AbstractProcessingStrategy.java", "diffHunk": "@@ -144,7 +144,7 @@ public final BackPressureReason emit(CoreEvent event) {\n       long remainingCapacity = fluxSink.requestedFromDownstream();\n       if (remainingCapacity == 0) {\n         return EVENTS_ACCUMULATED;\n-      } else if (remainingCapacity > (bufferSize > CORES * 4 ? CORES : 0)) {\n+      } else if (remainingCapacity > (bufferSize > CORES * 2 ? CORES : 0)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzNTE4MA=="}, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDEwMjMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/processor/strategy/ProactorStreamEmitterProcessingStrategyFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDozNDowNlrOFc41jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDozNDowNlrOFc41jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzNTY2Mg==", "bodyText": "remove", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365835662", "createdAt": "2020-01-13T14:34:06Z", "author": {"login": "marianogonzalez"}, "path": "core/src/main/java/org/mule/runtime/core/internal/processor/strategy/ProactorStreamEmitterProcessingStrategyFactory.java", "diffHunk": "@@ -161,6 +150,7 @@ public ReactiveProcessor onProcessor(ReactiveProcessor processor) {\n       }\n     }\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDEwODIxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/processor/strategy/ProactorStreamEmitterProcessingStrategyFactory.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDozNTo0NFrOFc44-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDo0MTozN1rOFdD6IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzNjUzOQ==", "bodyText": "this is shady.. this is assuming SDK behavior by testing an interface that any component can implement, not just the SDK. Is this wrong or the comment below should be updated?", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365836539", "createdAt": "2020-01-13T14:35:44Z", "author": {"login": "marianogonzalez"}, "path": "core/src/main/java/org/mule/runtime/core/internal/processor/strategy/ProactorStreamEmitterProcessingStrategyFactory.java", "diffHunk": "@@ -174,10 +164,7 @@ protected ReactiveProcessor proactor(ReactiveProcessor processor, ScheduledExecu\n         return publisher -> scheduleProcessor(processor, retryScheduler, from(publisher))\n             .subscriberContext(ctx -> ctx.put(PROCESSOR_SCHEDULER_CONTEXT_KEY, scheduler));\n       } else if (maxConcurrency == MAX_VALUE) {\n-        if (processor.getProcessingType() == CPU_INTENSIVE\n-            && (processor instanceof InterceptedReactiveProcessor)\n-            && SDK_OPERATION_CLASS != null\n-            && SDK_OPERATION_CLASS.isAssignableFrom(((InterceptedReactiveProcessor) processor).getProcessor().getClass())) {\n+        if (processor instanceof OperationInnerProcessor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxMjQ5Mw==", "bodyText": "OperationInnerProcessor is not API", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365912493", "createdAt": "2020-01-13T16:52:41Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/processor/strategy/ProactorStreamEmitterProcessingStrategyFactory.java", "diffHunk": "@@ -174,10 +164,7 @@ protected ReactiveProcessor proactor(ReactiveProcessor processor, ScheduledExecu\n         return publisher -> scheduleProcessor(processor, retryScheduler, from(publisher))\n             .subscriberContext(ctx -> ctx.put(PROCESSOR_SCHEDULER_CONTEXT_KEY, scheduler));\n       } else if (maxConcurrency == MAX_VALUE) {\n-        if (processor.getProcessingType() == CPU_INTENSIVE\n-            && (processor instanceof InterceptedReactiveProcessor)\n-            && SDK_OPERATION_CLASS != null\n-            && SDK_OPERATION_CLASS.isAssignableFrom(((InterceptedReactiveProcessor) processor).getProcessor().getClass())) {\n+        if (processor instanceof OperationInnerProcessor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzNjUzOQ=="}, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAxMDM4MA==", "bodyText": "but still, some other dev which doesn't have the full context could implement that interface and a problem could appear here", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r366010380", "createdAt": "2020-01-13T20:25:06Z", "author": {"login": "marianogonzalez"}, "path": "core/src/main/java/org/mule/runtime/core/internal/processor/strategy/ProactorStreamEmitterProcessingStrategyFactory.java", "diffHunk": "@@ -174,10 +164,7 @@ protected ReactiveProcessor proactor(ReactiveProcessor processor, ScheduledExecu\n         return publisher -> scheduleProcessor(processor, retryScheduler, from(publisher))\n             .subscriberContext(ctx -> ctx.put(PROCESSOR_SCHEDULER_CONTEXT_KEY, scheduler));\n       } else if (maxConcurrency == MAX_VALUE) {\n-        if (processor.getProcessingType() == CPU_INTENSIVE\n-            && (processor instanceof InterceptedReactiveProcessor)\n-            && SDK_OPERATION_CLASS != null\n-            && SDK_OPERATION_CLASS.isAssignableFrom(((InterceptedReactiveProcessor) processor).getProcessor().getClass())) {\n+        if (processor instanceof OperationInnerProcessor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzNjUzOQ=="}, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAxNzA1Ng==", "bodyText": "will add a note on the jdoc for OperationInnerProcessor", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r366017056", "createdAt": "2020-01-13T20:41:37Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/processor/strategy/ProactorStreamEmitterProcessingStrategyFactory.java", "diffHunk": "@@ -174,10 +164,7 @@ protected ReactiveProcessor proactor(ReactiveProcessor processor, ScheduledExecu\n         return publisher -> scheduleProcessor(processor, retryScheduler, from(publisher))\n             .subscriberContext(ctx -> ctx.put(PROCESSOR_SCHEDULER_CONTEXT_KEY, scheduler));\n       } else if (maxConcurrency == MAX_VALUE) {\n-        if (processor.getProcessingType() == CPU_INTENSIVE\n-            && (processor instanceof InterceptedReactiveProcessor)\n-            && SDK_OPERATION_CLASS != null\n-            && SDK_OPERATION_CLASS.isAssignableFrom(((InterceptedReactiveProcessor) processor).getProcessor().getClass())) {\n+        if (processor instanceof OperationInnerProcessor) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzNjUzOQ=="}, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDExNTQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/processor/strategy/StreamEmitterProcessingStrategyFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDozNzozOVrOFc49LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDozNzozOVrOFc49LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzNzYxMw==", "bodyText": "This method name is not really appropriate.. It seems to be more something like configureFlux or something like this.... Actually, if this were about configuring something internal, then it shouldn't return anything", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365837613", "createdAt": "2020-01-13T14:37:39Z", "author": {"login": "marianogonzalez"}, "path": "core/src/main/java/org/mule/runtime/core/internal/processor/strategy/StreamEmitterProcessingStrategyFactory.java", "diffHunk": "@@ -206,6 +207,13 @@ public void registerInternalSink(Publisher<CoreEvent> flux, String sinkRepresent\n       activeSinksCount.incrementAndGet();\n     }\n \n+    @Override\n+    public Publisher<CoreEvent> registerInternalFlux(Publisher<CoreEvent> flux) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDExOTg0OnYy", "diffSide": "RIGHT", "path": "modules/extensions-spring-support/src/test/resources/heisenberg-stateful-operation-config.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDozODo1NVrOFc4_zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjo1NzowNVrOFc9rOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzODI4NQ==", "bodyText": "\ud83d\udc37 \ud83d\udd19", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365838285", "createdAt": "2020-01-13T14:38:55Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-spring-support/src/test/resources/heisenberg-stateful-operation-config.xml", "diffHunk": "@@ -6,7 +6,7 @@\n                http://www.mulesoft.org/schema/mule/heisenberg http://www.mulesoft.org/schema/mule/heisenberg/current/mule-heisenberg.xsd\">\n \n     <heisenberg:config name=\"heisenberg\"\n-                       myName=\"#[mel:myName]\"\n+                       myName=\"#[vars.myName]\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxNDkzOA==", "bodyText": "it has to happen sometime...", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365914938", "createdAt": "2020-01-13T16:57:05Z", "author": {"login": "elrodro83"}, "path": "modules/extensions-spring-support/src/test/resources/heisenberg-stateful-operation-config.xml", "diffHunk": "@@ -6,7 +6,7 @@\n                http://www.mulesoft.org/schema/mule/heisenberg http://www.mulesoft.org/schema/mule/heisenberg/current/mule-heisenberg.xsd\">\n \n     <heisenberg:config name=\"heisenberg\"\n-                       myName=\"#[mel:myName]\"\n+                       myName=\"#[vars.myName]\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzODI4NQ=="}, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDEyMTc4OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContext.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDozOTozMFrOFc5BCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDozOTozMFrOFc5BCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzODYwMQ==", "bodyText": "jdoc", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365838601", "createdAt": "2020-01-13T14:39:30Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContext.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.execution;\n+\n+import static java.util.function.Function.identity;\n+\n+import org.mule.runtime.core.api.event.CoreEvent;\n+import org.mule.runtime.core.internal.message.EventInternalContext;\n+import org.mule.runtime.core.internal.policy.OperationPolicy;\n+import org.mule.runtime.extension.api.runtime.config.ConfigurationInstance;\n+import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutor.ExecutorCallback;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import reactor.util.context.Context;\n+\n+public class SdkInternalContext implements EventInternalContext<SdkInternalContext> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDEyNzQxOnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDo0MTowNFrOFc5ETg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjo1Nzo0NVrOFc9slQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzOTQzOA==", "bodyText": "don't you need to copy the execution params? Is it ok to make a copy in which the callbacks are all the same?", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365839438", "createdAt": "2020-01-13T14:41:04Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContext.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.execution;\n+\n+import static java.util.function.Function.identity;\n+\n+import org.mule.runtime.core.api.event.CoreEvent;\n+import org.mule.runtime.core.internal.message.EventInternalContext;\n+import org.mule.runtime.core.internal.policy.OperationPolicy;\n+import org.mule.runtime.extension.api.runtime.config.ConfigurationInstance;\n+import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutor.ExecutorCallback;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import reactor.util.context.Context;\n+\n+public class SdkInternalContext implements EventInternalContext<SdkInternalContext> {\n+\n+  private OperationExecutionParams operationExecutionParams;\n+\n+  private Function<Context, Context> innerChainSubscriberContextMapping = identity();\n+\n+  private Optional<ConfigurationInstance> configuration;\n+\n+  private Map<String, Object> resolutionResult;\n+\n+  private OperationPolicy policyToApply;\n+\n+  public OperationExecutionParams getOperationExecutionParams() {\n+    return operationExecutionParams;\n+  }\n+\n+  public void setOperationExecutionParams(Optional<ConfigurationInstance> configuration, Map<String, Object> parameters,\n+                                          CoreEvent operationEvent, ExecutorCallback callback) {\n+    this.operationExecutionParams = new OperationExecutionParams(configuration, parameters, operationEvent, callback);\n+  }\n+\n+  public Function<Context, Context> getInnerChainSubscriberContextMapping() {\n+    return innerChainSubscriberContextMapping;\n+  }\n+\n+  public void setInnerChainSubscriberContextMapping(Function<Context, Context> innerChainSubscriberContextMapping) {\n+    this.innerChainSubscriberContextMapping = innerChainSubscriberContextMapping;\n+  }\n+\n+  public Optional<ConfigurationInstance> getConfiguration() {\n+    return configuration;\n+  }\n+\n+  public void setConfiguration(Optional<ConfigurationInstance> configuration) {\n+    this.configuration = configuration;\n+  }\n+\n+  public Map<String, Object> getResolutionResult() {\n+    return resolutionResult;\n+  }\n+\n+  public void setResolutionResult(Map<String, Object> resolutionResult) {\n+    this.resolutionResult = resolutionResult;\n+  }\n+\n+  public OperationPolicy getPolicyToApply() {\n+    return policyToApply;\n+  }\n+\n+  public void setPolicyToApply(OperationPolicy policyToApply) {\n+    this.policyToApply = policyToApply;\n+  }\n+\n+  @Override\n+  public SdkInternalContext copy() {\n+    return this;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxNTI4NQ==", "bodyText": "this is the most consistent with the current behavior, where all internal parameters are just copied over.", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365915285", "createdAt": "2020-01-13T16:57:45Z", "author": {"login": "elrodro83"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/SdkInternalContext.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.execution;\n+\n+import static java.util.function.Function.identity;\n+\n+import org.mule.runtime.core.api.event.CoreEvent;\n+import org.mule.runtime.core.internal.message.EventInternalContext;\n+import org.mule.runtime.core.internal.policy.OperationPolicy;\n+import org.mule.runtime.extension.api.runtime.config.ConfigurationInstance;\n+import org.mule.runtime.extension.api.runtime.operation.CompletableComponentExecutor.ExecutorCallback;\n+\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Function;\n+\n+import reactor.util.context.Context;\n+\n+public class SdkInternalContext implements EventInternalContext<SdkInternalContext> {\n+\n+  private OperationExecutionParams operationExecutionParams;\n+\n+  private Function<Context, Context> innerChainSubscriberContextMapping = identity();\n+\n+  private Optional<ConfigurationInstance> configuration;\n+\n+  private Map<String, Object> resolutionResult;\n+\n+  private OperationPolicy policyToApply;\n+\n+  public OperationExecutionParams getOperationExecutionParams() {\n+    return operationExecutionParams;\n+  }\n+\n+  public void setOperationExecutionParams(Optional<ConfigurationInstance> configuration, Map<String, Object> parameters,\n+                                          CoreEvent operationEvent, ExecutorCallback callback) {\n+    this.operationExecutionParams = new OperationExecutionParams(configuration, parameters, operationEvent, callback);\n+  }\n+\n+  public Function<Context, Context> getInnerChainSubscriberContextMapping() {\n+    return innerChainSubscriberContextMapping;\n+  }\n+\n+  public void setInnerChainSubscriberContextMapping(Function<Context, Context> innerChainSubscriberContextMapping) {\n+    this.innerChainSubscriberContextMapping = innerChainSubscriberContextMapping;\n+  }\n+\n+  public Optional<ConfigurationInstance> getConfiguration() {\n+    return configuration;\n+  }\n+\n+  public void setConfiguration(Optional<ConfigurationInstance> configuration) {\n+    this.configuration = configuration;\n+  }\n+\n+  public Map<String, Object> getResolutionResult() {\n+    return resolutionResult;\n+  }\n+\n+  public void setResolutionResult(Map<String, Object> resolutionResult) {\n+    this.resolutionResult = resolutionResult;\n+  }\n+\n+  public OperationPolicy getPolicyToApply() {\n+    return policyToApply;\n+  }\n+\n+  public void setPolicyToApply(OperationPolicy policyToApply) {\n+    this.policyToApply = policyToApply;\n+  }\n+\n+  @Override\n+  public SdkInternalContext copy() {\n+    return this;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzOTQzOA=="}, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDEyOTgyOnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDo0MTo0NlrOFc5Fuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDo0MTo0NlrOFc5Fuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzOTgwMw==", "bodyText": "group all final fields together", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365839803", "createdAt": "2020-01-13T14:41:46Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -179,6 +197,15 @@\n   private String resolvedProcessorRepresentation;\n   private boolean initialised = false;\n \n+  private ProcessingStrategy processingStrategy;\n+  private boolean ownedProcessingStrategy = false;\n+  private FluxSinkSupplier<CoreEvent> fluxSupplier;\n+  private final Object fluxSupplierDisposeLock = new Object();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDEzMDIxOnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDo0MTo1MVrOFc5F7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDo0MTo1MVrOFc5F7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTgzOTg1NQ==", "bodyText": "group all final fields together", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365839855", "createdAt": "2020-01-13T14:41:51Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -179,6 +197,15 @@\n   private String resolvedProcessorRepresentation;\n   private boolean initialised = false;\n \n+  private ProcessingStrategy processingStrategy;\n+  private boolean ownedProcessingStrategy = false;\n+  private FluxSinkSupplier<CoreEvent> fluxSupplier;\n+  private final Object fluxSupplierDisposeLock = new Object();\n+\n+  private Scheduler outerFluxCompletionScheduler;\n+\n+  private final AtomicInteger activeOuterPublishersCount = new AtomicInteger(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDEzMTY0OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDo0MjoxNVrOFc5GzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDo0MjoxNVrOFc5GzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg0MDA3Nw==", "bodyText": "hasNestedChain", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365840077", "createdAt": "2020-01-13T14:42:15Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -161,6 +178,7 @@\n   private final RetryPolicyTemplate fallbackRetryPolicyTemplate = new NoRetryPolicyTemplate();\n \n   protected final ExtensionModel extensionModel;\n+  private final boolean hasChainNested;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDEzNzQ0OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDo0NDowMVrOFc5Kkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDo0NDowMVrOFc5Kkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg0MTA0Mg==", "bodyText": "add comments clarifying or extract to method with meaningful name, or both, or make a netflix documentary explaining this", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365841042", "createdAt": "2020-01-13T14:44:01Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -212,73 +246,89 @@ public CoreEvent process(CoreEvent event) throws MuleException {\n \n   @Override\n   public Publisher<CoreEvent> apply(Publisher<CoreEvent> publisher) {\n-    Flux<CoreEvent> flux = from(publisher)\n-        .flatMap(event -> subscriberContext().map(ctx -> addContextToEvent(event, ctx)));\n-\n-    if (isAsync()) {\n-      final BiFunction<Throwable, Object, Throwable> localOperatorErrorHook =\n-          getLocalOperatorErrorHook(this, errorTypeLocator, exceptionContextProviders);\n-      return flux\n-          // This flatMap allows the operation to run in parallel. The processing strategy relies on this\n-          // (ProactorStreamProcessingStrategy#proactor) to do some performance optimizations.\n-          .flatMap(event -> {\n-            // Force the error mapper from the chain to be used.\n-            // When using Mono.create with sink.error, the error mapper from the context is ignored, so it has to be\n-            // explicitly used here.\n-            DeferredMonoSinkExecutorCallback callback =\n-                new DeferredMonoSinkExecutorCallback<>(t -> localOperatorErrorHook.apply(t, event));\n-\n-            onEvent(event, callback);\n-\n-            return create(callback::setSink);\n-          });\n-    } else {\n-      return flux.handle((event, sink) -> {\n-        try {\n-          onEvent(event, new SynchronousSinkExecutorCallback(sink));\n-        } catch (Throwable t) {\n-          sink.error(unwrap(t));\n-        }\n-      });\n-    }\n+    final BiFunction<Throwable, Object, Throwable> localOperatorErrorHook =\n+        getLocalOperatorErrorHook(this, errorTypeLocator, exceptionContextProviders);\n+\n+    return subscriberContext()\n+        .flatMapMany(ctx -> {\n+          final FluxSinkRecorder<Either<Throwable, CoreEvent>> errorSwitchSinkSinkRef = new FluxSinkRecorder<>();\n+\n+          Flux<CoreEvent> transformed = from(propagateCompletion(from(publisher), create(errorSwitchSinkSinkRef)\n+              .map(result -> {\n+                return result.reduce(me -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 200}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDE0MDI0OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDo0NDo1MlrOFc5MTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDo0NDo1MlrOFc5MTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg0MTQ4Ng==", "bodyText": "turn this condition into a method in the SDK internal context", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365841486", "createdAt": "2020-01-13T14:44:52Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -212,73 +246,89 @@ public CoreEvent process(CoreEvent event) throws MuleException {\n \n   @Override\n   public Publisher<CoreEvent> apply(Publisher<CoreEvent> publisher) {\n-    Flux<CoreEvent> flux = from(publisher)\n-        .flatMap(event -> subscriberContext().map(ctx -> addContextToEvent(event, ctx)));\n-\n-    if (isAsync()) {\n-      final BiFunction<Throwable, Object, Throwable> localOperatorErrorHook =\n-          getLocalOperatorErrorHook(this, errorTypeLocator, exceptionContextProviders);\n-      return flux\n-          // This flatMap allows the operation to run in parallel. The processing strategy relies on this\n-          // (ProactorStreamProcessingStrategy#proactor) to do some performance optimizations.\n-          .flatMap(event -> {\n-            // Force the error mapper from the chain to be used.\n-            // When using Mono.create with sink.error, the error mapper from the context is ignored, so it has to be\n-            // explicitly used here.\n-            DeferredMonoSinkExecutorCallback callback =\n-                new DeferredMonoSinkExecutorCallback<>(t -> localOperatorErrorHook.apply(t, event));\n-\n-            onEvent(event, callback);\n-\n-            return create(callback::setSink);\n-          });\n-    } else {\n-      return flux.handle((event, sink) -> {\n-        try {\n-          onEvent(event, new SynchronousSinkExecutorCallback(sink));\n-        } catch (Throwable t) {\n-          sink.error(unwrap(t));\n-        }\n-      });\n-    }\n+    final BiFunction<Throwable, Object, Throwable> localOperatorErrorHook =\n+        getLocalOperatorErrorHook(this, errorTypeLocator, exceptionContextProviders);\n+\n+    return subscriberContext()\n+        .flatMapMany(ctx -> {\n+          final FluxSinkRecorder<Either<Throwable, CoreEvent>> errorSwitchSinkSinkRef = new FluxSinkRecorder<>();\n+\n+          Flux<CoreEvent> transformed = from(propagateCompletion(from(publisher), create(errorSwitchSinkSinkRef)\n+              .map(result -> {\n+                return result.reduce(me -> {\n+                  throw propagateWrappingFatal(me);\n+                }, response -> response);\n+              }), pub -> from(pub)\n+                  .map(event -> {\n+                    try {\n+                      return addContextToEvent(event, ctx);\n+                    } catch (MuleException t) {\n+                      throw propagateWrappingFatal(localOperatorErrorHook.apply(t, event));\n+                    }\n+                  })\n+                  .doOnNext(event -> {\n+                    final ExecutorCallback executorCallback = new ExecutorCallback() {\n+\n+                      @Override\n+                      public void error(Throwable e) {\n+                        // if `sink.error` is called here, it will cancel the flux altogether.\n+                        // That's why an `Either` is used here,\n+                        // so the error can be propagated afterwards in a way consistent with our expected error handling.\n+                        errorSwitchSinkSinkRef.next(left(\n+                                                         // Force the error mapper from the chain to be used.\n+                                                         // When using Mono.create with sink.error, the error mapper from the\n+                                                         // context is ignored, so it has to be explicitly used here.\n+                                                         localOperatorErrorHook.apply(e, event), CoreEvent.class));\n+                      }\n+\n+                      @Override\n+                      public void complete(Object value) {\n+                        errorSwitchSinkSinkRef.next(right(Throwable.class, (CoreEvent) value));\n+                      }\n+                    };\n+\n+                    if (!isAsync() && NO_POLICY_OPERATION\n+                        .equals(((SdkInternalContext) ((InternalEvent) event).<SdkInternalContext>getSdkInternalContext())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDE0MzUwOnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDo0NTo1MlrOFc5OVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDo0NTo1MlrOFc5OVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg0MjAwNg==", "bodyText": "extract to static method in org.mule.runtime.module.extension.api.util.MuleExtensionUtils", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365842006", "createdAt": "2020-01-13T14:45:52Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -212,73 +246,89 @@ public CoreEvent process(CoreEvent event) throws MuleException {\n \n   @Override\n   public Publisher<CoreEvent> apply(Publisher<CoreEvent> publisher) {\n-    Flux<CoreEvent> flux = from(publisher)\n-        .flatMap(event -> subscriberContext().map(ctx -> addContextToEvent(event, ctx)));\n-\n-    if (isAsync()) {\n-      final BiFunction<Throwable, Object, Throwable> localOperatorErrorHook =\n-          getLocalOperatorErrorHook(this, errorTypeLocator, exceptionContextProviders);\n-      return flux\n-          // This flatMap allows the operation to run in parallel. The processing strategy relies on this\n-          // (ProactorStreamProcessingStrategy#proactor) to do some performance optimizations.\n-          .flatMap(event -> {\n-            // Force the error mapper from the chain to be used.\n-            // When using Mono.create with sink.error, the error mapper from the context is ignored, so it has to be\n-            // explicitly used here.\n-            DeferredMonoSinkExecutorCallback callback =\n-                new DeferredMonoSinkExecutorCallback<>(t -> localOperatorErrorHook.apply(t, event));\n-\n-            onEvent(event, callback);\n-\n-            return create(callback::setSink);\n-          });\n-    } else {\n-      return flux.handle((event, sink) -> {\n-        try {\n-          onEvent(event, new SynchronousSinkExecutorCallback(sink));\n-        } catch (Throwable t) {\n-          sink.error(unwrap(t));\n-        }\n-      });\n-    }\n+    final BiFunction<Throwable, Object, Throwable> localOperatorErrorHook =\n+        getLocalOperatorErrorHook(this, errorTypeLocator, exceptionContextProviders);\n+\n+    return subscriberContext()\n+        .flatMapMany(ctx -> {\n+          final FluxSinkRecorder<Either<Throwable, CoreEvent>> errorSwitchSinkSinkRef = new FluxSinkRecorder<>();\n+\n+          Flux<CoreEvent> transformed = from(propagateCompletion(from(publisher), create(errorSwitchSinkSinkRef)\n+              .map(result -> {\n+                return result.reduce(me -> {\n+                  throw propagateWrappingFatal(me);\n+                }, response -> response);\n+              }), pub -> from(pub)\n+                  .map(event -> {\n+                    try {\n+                      return addContextToEvent(event, ctx);\n+                    } catch (MuleException t) {\n+                      throw propagateWrappingFatal(localOperatorErrorHook.apply(t, event));\n+                    }\n+                  })\n+                  .doOnNext(event -> {\n+                    final ExecutorCallback executorCallback = new ExecutorCallback() {\n+\n+                      @Override\n+                      public void error(Throwable e) {\n+                        // if `sink.error` is called here, it will cancel the flux altogether.\n+                        // That's why an `Either` is used here,\n+                        // so the error can be propagated afterwards in a way consistent with our expected error handling.\n+                        errorSwitchSinkSinkRef.next(left(\n+                                                         // Force the error mapper from the chain to be used.\n+                                                         // When using Mono.create with sink.error, the error mapper from the\n+                                                         // context is ignored, so it has to be explicitly used here.\n+                                                         localOperatorErrorHook.apply(e, event), CoreEvent.class));\n+                      }\n+\n+                      @Override\n+                      public void complete(Object value) {\n+                        errorSwitchSinkSinkRef.next(right(Throwable.class, (CoreEvent) value));\n+                      }\n+                    };\n+\n+                    if (!isAsync() && NO_POLICY_OPERATION\n+                        .equals(((SdkInternalContext) ((InternalEvent) event).<SdkInternalContext>getSdkInternalContext())\n+                            .getPolicyToApply())) {\n+                      onEventSynchronous(event, executorCallback, ctx);\n+                    } else {\n+                      onEvent(event, executorCallback);\n+                    }\n+                  }), () -> errorSwitchSinkSinkRef.complete(), t -> errorSwitchSinkSinkRef.error(t),\n+                                                                 muleContext.getConfiguration().getShutdownTimeout(),\n+                                                                 outerFluxCompletionScheduler));\n+\n+          if (publisher instanceof Flux && !ctx.getOrEmpty(WITHIN_PROCESS_TO_APPLY).isPresent()) {\n+            return transformed\n+                .doAfterTerminate(this::outerPublisherTerminated)\n+                .doOnSubscribe(s -> outerPublisherSubscribedTo());\n+          } else {\n+            // Certain features (ext client, batch, flow runner) use Mono, so we don't want to dispose the inner stuff after the\n+            // first event comes through\n+            return transformed;\n+          }\n+        });\n   }\n \n   private void onEvent(CoreEvent event, ExecutorCallback executorCallback) {\n     try {\n+      SdkInternalContext sdkInternalContext =\n+          ((SdkInternalContext) ((InternalEvent) event).<SdkInternalContext>getSdkInternalContext());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 258}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDE1MjM5OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDo0ODoxN1rOFc5TpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzowODoxNVrOFc-BaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg0MzM2NQ==", "bodyText": "where is this context cleared/replaced?", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365843365", "createdAt": "2020-01-13T14:48:17Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -369,15 +416,120 @@ protected void doInitialise() throws InitialisationException {\n       executionMediator = createExecutionMediator();\n       initialiseIfNeeded(componentExecutor, true, muleContext);\n \n-      if (getLocation() != null) {\n-        resolvedProcessorRepresentation =\n-            resolveProcessorRepresentation(muleContext.getConfiguration().getId(), getLocation().getLocation(), this);\n-      }\n+      resolvedProcessorRepresentation =\n+          resolveProcessorRepresentation(muleContext.getConfiguration().getId(), toString(), this);\n \n+      initProcessingStrategy();\n       initialised = true;\n     }\n   }\n \n+  private void initProcessingStrategy() throws InitialisationException {\n+    final Optional<ProcessingStrategy> processingStrategyFromRootContainer =\n+        getProcessingStrategy(componentLocator, getRootContainerLocation());\n+\n+    processingStrategy = processingStrategyFromRootContainer\n+        .orElseGet(() -> createDefaultProcessingStrategyFactory().create(muleContext, toString() + \".ps\"));\n+\n+    if (!processingStrategyFromRootContainer.isPresent()) {\n+      ownedProcessingStrategy = true;\n+      initialiseIfNeeded(processingStrategy);\n+    }\n+  }\n+\n+  private void startInnerFlux() {\n+    fluxSupplier = createRoundRobinFluxSupplier(p -> {\n+      final OperationInnerProcessor operationInnerProcessor = new OperationInnerProcessor() {\n+\n+        @Override\n+        public ProcessingType getProcessingType() {\n+          return getInnerProcessingType();\n+        }\n+\n+        @Override\n+        public Publisher<CoreEvent> apply(Publisher<CoreEvent> publisher) {\n+          return subscriberContext()\n+              .flatMapMany(ctx -> from(publisher)\n+                  .doOnNext(event -> prepareAndExecuteOperation(event,\n+                                                                () -> {\n+                                                                  OperationExecutionParams oep =\n+                                                                      ((SdkInternalContext) ((InternalEvent) event)\n+                                                                          .<SdkInternalContext>getSdkInternalContext())\n+                                                                              .getOperationExecutionParams();\n+                                                                  return oep.getCallback();\n+                                                                },\n+                                                                ctx)));\n+        }\n+\n+        @Override\n+        public boolean isAsync() {\n+          return ComponentMessageProcessor.this.isAsync();\n+        }\n+      };\n+\n+      final Flux<CoreEvent> transformed = from(p)\n+          .transform(processingStrategy.onProcessor(operationInnerProcessor))\n+          .onErrorContinue((t, event) -> LOGGER.error(\"Unhandler error in operation (\" + toString() + \") flux\",\n+                                                      t));\n+      return from(processingStrategy.registerInternalFlux(transformed));\n+    },\n+                                                getRuntime().availableProcessors());\n+  }\n+\n+  private CoreEvent addContextToEvent(CoreEvent event, Context ctx) throws MuleException {\n+    SdkInternalContext sdkInternalContext =\n+        (SdkInternalContext) ((InternalEvent) event).<SdkInternalContext>getSdkInternalContext();\n+    if (((InternalEvent) event).getSdkInternalContext() == null) {\n+      sdkInternalContext = new SdkInternalContext();\n+      ((InternalEvent) event).setSdkInternalContext(sdkInternalContext);\n+    }\n+\n+    if (hasChainNested\n+        && (ctx.hasKey(POLICY_NEXT_OPERATION) || ctx.hasKey(POLICY_IS_PROPAGATE_MESSAGE_TRANSFORMATIONS))) {\n+      sdkInternalContext.setInnerChainSubscriberContextMapping(innerChainCtx -> {\n+        if (ctx.hasKey(POLICY_NEXT_OPERATION)) {\n+          innerChainCtx = innerChainCtx.put(POLICY_NEXT_OPERATION, ctx.get(POLICY_NEXT_OPERATION));\n+        }\n+        if (ctx.hasKey(POLICY_IS_PROPAGATE_MESSAGE_TRANSFORMATIONS)) {\n+          innerChainCtx = innerChainCtx.put(POLICY_IS_PROPAGATE_MESSAGE_TRANSFORMATIONS,\n+                                            ctx.get(POLICY_IS_PROPAGATE_MESSAGE_TRANSFORMATIONS));\n+        }\n+        return innerChainCtx;\n+      });\n+    }\n+\n+    sdkInternalContext.setConfiguration(resolveConfiguration(event));\n+    final Map<String, Object> resolutionResult = getResolutionResult(event, sdkInternalContext.getConfiguration());\n+    sdkInternalContext.setResolutionResult(resolutionResult);\n+    sdkInternalContext.setPolicyToApply(getLocation() != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 456}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkyMDYxNw==", "bodyText": "this is create above in this method. Will add a clear for it", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365920617", "createdAt": "2020-01-13T17:08:15Z", "author": {"login": "elrodro83"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -369,15 +416,120 @@ protected void doInitialise() throws InitialisationException {\n       executionMediator = createExecutionMediator();\n       initialiseIfNeeded(componentExecutor, true, muleContext);\n \n-      if (getLocation() != null) {\n-        resolvedProcessorRepresentation =\n-            resolveProcessorRepresentation(muleContext.getConfiguration().getId(), getLocation().getLocation(), this);\n-      }\n+      resolvedProcessorRepresentation =\n+          resolveProcessorRepresentation(muleContext.getConfiguration().getId(), toString(), this);\n \n+      initProcessingStrategy();\n       initialised = true;\n     }\n   }\n \n+  private void initProcessingStrategy() throws InitialisationException {\n+    final Optional<ProcessingStrategy> processingStrategyFromRootContainer =\n+        getProcessingStrategy(componentLocator, getRootContainerLocation());\n+\n+    processingStrategy = processingStrategyFromRootContainer\n+        .orElseGet(() -> createDefaultProcessingStrategyFactory().create(muleContext, toString() + \".ps\"));\n+\n+    if (!processingStrategyFromRootContainer.isPresent()) {\n+      ownedProcessingStrategy = true;\n+      initialiseIfNeeded(processingStrategy);\n+    }\n+  }\n+\n+  private void startInnerFlux() {\n+    fluxSupplier = createRoundRobinFluxSupplier(p -> {\n+      final OperationInnerProcessor operationInnerProcessor = new OperationInnerProcessor() {\n+\n+        @Override\n+        public ProcessingType getProcessingType() {\n+          return getInnerProcessingType();\n+        }\n+\n+        @Override\n+        public Publisher<CoreEvent> apply(Publisher<CoreEvent> publisher) {\n+          return subscriberContext()\n+              .flatMapMany(ctx -> from(publisher)\n+                  .doOnNext(event -> prepareAndExecuteOperation(event,\n+                                                                () -> {\n+                                                                  OperationExecutionParams oep =\n+                                                                      ((SdkInternalContext) ((InternalEvent) event)\n+                                                                          .<SdkInternalContext>getSdkInternalContext())\n+                                                                              .getOperationExecutionParams();\n+                                                                  return oep.getCallback();\n+                                                                },\n+                                                                ctx)));\n+        }\n+\n+        @Override\n+        public boolean isAsync() {\n+          return ComponentMessageProcessor.this.isAsync();\n+        }\n+      };\n+\n+      final Flux<CoreEvent> transformed = from(p)\n+          .transform(processingStrategy.onProcessor(operationInnerProcessor))\n+          .onErrorContinue((t, event) -> LOGGER.error(\"Unhandler error in operation (\" + toString() + \") flux\",\n+                                                      t));\n+      return from(processingStrategy.registerInternalFlux(transformed));\n+    },\n+                                                getRuntime().availableProcessors());\n+  }\n+\n+  private CoreEvent addContextToEvent(CoreEvent event, Context ctx) throws MuleException {\n+    SdkInternalContext sdkInternalContext =\n+        (SdkInternalContext) ((InternalEvent) event).<SdkInternalContext>getSdkInternalContext();\n+    if (((InternalEvent) event).getSdkInternalContext() == null) {\n+      sdkInternalContext = new SdkInternalContext();\n+      ((InternalEvent) event).setSdkInternalContext(sdkInternalContext);\n+    }\n+\n+    if (hasChainNested\n+        && (ctx.hasKey(POLICY_NEXT_OPERATION) || ctx.hasKey(POLICY_IS_PROPAGATE_MESSAGE_TRANSFORMATIONS))) {\n+      sdkInternalContext.setInnerChainSubscriberContextMapping(innerChainCtx -> {\n+        if (ctx.hasKey(POLICY_NEXT_OPERATION)) {\n+          innerChainCtx = innerChainCtx.put(POLICY_NEXT_OPERATION, ctx.get(POLICY_NEXT_OPERATION));\n+        }\n+        if (ctx.hasKey(POLICY_IS_PROPAGATE_MESSAGE_TRANSFORMATIONS)) {\n+          innerChainCtx = innerChainCtx.put(POLICY_IS_PROPAGATE_MESSAGE_TRANSFORMATIONS,\n+                                            ctx.get(POLICY_IS_PROPAGATE_MESSAGE_TRANSFORMATIONS));\n+        }\n+        return innerChainCtx;\n+      });\n+    }\n+\n+    sdkInternalContext.setConfiguration(resolveConfiguration(event));\n+    final Map<String, Object> resolutionResult = getResolutionResult(event, sdkInternalContext.getConfiguration());\n+    sdkInternalContext.setResolutionResult(resolutionResult);\n+    sdkInternalContext.setPolicyToApply(getLocation() != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg0MzM2NQ=="}, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 456}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDE1ODI4OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDo0OTo1NVrOFc5XPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDo0OTo1NVrOFc5XPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg0NDI4Nw==", "bodyText": "add a clarifying comment about the inner chain processing type being the one that actually reflects the operation", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365844287", "createdAt": "2020-01-13T14:49:55Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/operation/ComponentMessageProcessor.java", "diffHunk": "@@ -666,8 +861,9 @@ protected ParameterValueResolver getParameterValueResolver() {\n     }\n   }\n \n-  @Override\n-  public abstract ProcessingType getProcessingType();\n+  public ProcessingType getInnerProcessingType() {\n+    return CPU_LITE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 566}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDE2Mjg2OnYy", "diffSide": "RIGHT", "path": "pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDo1MToxNFrOFc5aEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNDo1MToxNFrOFc5aEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg0NTAwOA==", "bodyText": "remove comment or make it multiline and explain when/how to enable", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r365845008", "createdAt": "2020-01-13T14:51:14Z", "author": {"login": "marianogonzalez"}, "path": "pom.xml", "diffHunk": "@@ -2004,6 +2007,13 @@\n             <properties>\n                 <vmtype>org.eclipse.jdt.internal.launching.macosx.MacOSXType</vmtype>\n             </properties>\n+        </profile>\n+        <profile>\n+            <id>yourkit-agent</id>\n+            <properties>\n+<!--                 <yourkit.agent.path>/Applications/YourKit-Java-Profiler-2019.8.app/Contents/Resources/bin/mac/libyjpagent.dylib</yourkit.agent.path> -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bce0c1a2597bb51b9a6bc3b05a504c3e32035e5"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTIwNTEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/api/processor/strategy/ProcessingStrategy.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDoyNDowMFrOFdDeNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDoyNDowMFrOFdDeNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAwOTkwOQ==", "bodyText": "is graceful shutdown a particular use case of this method or is the only and sole purpose of it? Depending on that, either change the jdoc or rename to something more specific", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r366009909", "createdAt": "2020-01-13T20:24:00Z", "author": {"login": "marianogonzalez"}, "path": "core/src/main/java/org/mule/runtime/core/api/processor/strategy/ProcessingStrategy.java", "diffHunk": "@@ -48,7 +48,14 @@ default void registerInternalSink(Publisher<CoreEvent> flux, String sinkRepresen\n     Flux.from(flux).subscribe();\n   }\n \n-  default Publisher<CoreEvent> registerInternalFlux(Publisher<CoreEvent> flux) {\n+  /**\n+   * For fluxes created outside of the main flux for a flow, have them accounted for in the processing strategy for a graceful", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba16df522b269413f0e4ea97dc3629e194b134e2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTIxNjEzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/processor/AsyncDelegateMessageProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDoyODoyN1rOFdDlCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMDozNTozMVrOFdDwTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAxMTY1OQ==", "bodyText": "why do we still need to keep this polling every 200 ms? If this tasks gets scheduled because of a brief high demand lapse, then this task will continue to run every 200ms without need. Can't we use a traditional single threaded wait/notify()?", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r366011659", "createdAt": "2020-01-13T20:28:27Z", "author": {"login": "marianogonzalez"}, "path": "core/src/main/java/org/mule/runtime/core/internal/processor/AsyncDelegateMessageProcessor.java", "diffHunk": "@@ -335,22 +341,36 @@ public void handleBackpressure(CoreEvent event) {\n       asyncQueue.offer(event);\n     }\n \n+    public void asyncTaskFinished() {\n+      if (scheduledDrain == null) {\n+        synchronized (this) {\n+          if (scheduledDrain == null) {\n+            scheduledDrain = queueDispatcherScheduler.schedule(() -> {\n+              while (asyncQueue.size() > 0) {\n+                try {\n+                  final CoreEvent event = asyncQueue.peek();\n+                  if (event != null) {\n+                    eventDispatcher.accept(event);\n+                    asyncQueue.remove(event);\n+                  }\n+                } catch (FromFlowRejectedExecutionException free) {\n+                  synchronized (this) {\n+                    scheduledDrain = null;\n+                  }\n+                  // nothing to do, a retry will come next\n+                  return;\n+                }\n+              }\n+            }, 200, MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f4c30643c83c801810e16370076b83edeba7ecb"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAxNDU0MQ==", "bodyText": "the thing is that the wait/notify mechanism will still keep a thread busy waiting for elements to arrive at the queue.\nWith this approach, this task is active only while it makes sense to poll the queue.", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r366014541", "createdAt": "2020-01-13T20:35:31Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/processor/AsyncDelegateMessageProcessor.java", "diffHunk": "@@ -335,22 +341,36 @@ public void handleBackpressure(CoreEvent event) {\n       asyncQueue.offer(event);\n     }\n \n+    public void asyncTaskFinished() {\n+      if (scheduledDrain == null) {\n+        synchronized (this) {\n+          if (scheduledDrain == null) {\n+            scheduledDrain = queueDispatcherScheduler.schedule(() -> {\n+              while (asyncQueue.size() > 0) {\n+                try {\n+                  final CoreEvent event = asyncQueue.peek();\n+                  if (event != null) {\n+                    eventDispatcher.accept(event);\n+                    asyncQueue.remove(event);\n+                  }\n+                } catch (FromFlowRejectedExecutionException free) {\n+                  synchronized (this) {\n+                    scheduledDrain = null;\n+                  }\n+                  // nothing to do, a retry will come next\n+                  return;\n+                }\n+              }\n+            }, 200, MILLISECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjAxMTY1OQ=="}, "originalCommit": {"oid": "5f4c30643c83c801810e16370076b83edeba7ecb"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTQxMDc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/processor/AsyncDelegateMessageProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTozOToyNFrOFdFdrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMTozOToyNFrOFdFdrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA0MjU0Mw==", "bodyText": "delete method then. Doesn't look like you're actually forced to implement Startable", "url": "https://github.com/mulesoft/mule/pull/8566#discussion_r366042543", "createdAt": "2020-01-13T21:39:24Z", "author": {"login": "marianogonzalez"}, "path": "core/src/main/java/org/mule/runtime/core/internal/processor/AsyncDelegateMessageProcessor.java", "diffHunk": "@@ -318,67 +317,61 @@ public void setMaxConcurrency(Integer maxConcurrency) {\n   private static class QueueBackpressureHandler implements Startable, Stoppable {\n \n     private final BlockingQueue<CoreEvent> asyncQueue;\n-    private final SchedulerService schedulerService;\n-    private final Supplier<SchedulerConfig> schedulerConfigSupplier;\n-    private final String location;\n     private final Consumer<CoreEvent> eventDispatcher;\n \n-    private Scheduler queueDispatcherScheduler;\n-    private volatile ScheduledFuture<?> scheduledDrain;\n+    private final LazyValue<Scheduler> queueDispatcherScheduler;\n \n     public QueueBackpressureHandler(SchedulerService schedulerService, Supplier<SchedulerConfig> schedulerConfigSupplier,\n                                     Consumer<CoreEvent> eventDispatcher, String location) {\n-      this.schedulerService = schedulerService;\n-      this.schedulerConfigSupplier = schedulerConfigSupplier;\n-\n       this.asyncQueue = new LinkedBlockingQueue<>();\n       this.eventDispatcher = eventDispatcher;\n \n-      this.location = location;\n+      this.queueDispatcherScheduler = new LazyValue(() -> {\n+        final SchedulerConfig schedulerConfig = schedulerConfigSupplier.get().withName(location + \" - queue dispatcher\")\n+            .withMaxConcurrentTasks(1);\n+        return schedulerService.customScheduler(schedulerConfig);\n+      });\n     }\n \n     public void handleBackpressure(CoreEvent event) {\n       asyncQueue.offer(event);\n-    }\n \n-    public void asyncTaskFinished() {\n-      if (scheduledDrain == null) {\n-        synchronized (this) {\n-          if (scheduledDrain == null) {\n-            scheduledDrain = queueDispatcherScheduler.schedule(() -> {\n-              while (asyncQueue.size() > 0) {\n-                try {\n-                  final CoreEvent event = asyncQueue.peek();\n-                  if (event != null) {\n-                    eventDispatcher.accept(event);\n-                    asyncQueue.remove(event);\n-                  }\n-                } catch (FromFlowRejectedExecutionException free) {\n-                  synchronized (this) {\n-                    scheduledDrain = null;\n-                  }\n-                  // nothing to do, a retry will come next\n-                  return;\n-                }\n+      synchronized (asyncQueue) {\n+        asyncQueue.notify();\n+      }\n+\n+      queueDispatcherScheduler.get().execute(() -> {\n+        while (!currentThread().isInterrupted()) {\n+          try {\n+            final CoreEvent queuedEvent = asyncQueue.peek();\n+            if (queuedEvent != null) {\n+              eventDispatcher.accept(queuedEvent);\n+              asyncQueue.remove(queuedEvent);\n+            } else {\n+              synchronized (asyncQueue) {\n+                asyncQueue.wait();\n               }\n-            }, 200, MILLISECONDS);\n+            }\n+          } catch (FromFlowRejectedExecutionException free) {\n+            // Nothing to do, let next iteration catch it.\n+            yield();\n+          } catch (InterruptedException e) {\n+            currentThread().interrupt();\n+            return;\n           }\n         }\n-      }\n+      });\n     }\n \n     @Override\n     public void start() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a85290dc01c5491ed4a43d8286d8f5ed3aaf2541"}, "originalPosition": 124}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 123, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}