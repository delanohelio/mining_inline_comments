{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNTIwNzYx", "number": 8625, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMzoyNDoyM1rODc-amw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODowNjozMFrODdx6JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzA5MzM5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/util/MessagingExceptionResolver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMzoyNDoyM1rOFlT2TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMzoyNDoyM1rOFlT2TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY2NjgyOA==", "bodyText": "handle this inside getExceptionsAsList(me), so adding unwanted elements to the list is avoided from the start", "url": "https://github.com/mulesoft/mule/pull/8625#discussion_r374666828", "createdAt": "2020-02-04T13:24:23Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/util/MessagingExceptionResolver.java", "diffHunk": "@@ -148,13 +149,18 @@ private void propagateAlreadyLogged(MessagingException origin, MuleException res\n         .findFirst();\n   }\n \n-  private List<Pair<Throwable, ErrorType>> collectErrors(Component obj, MessagingException me, ErrorTypeLocator locator) {\n+  private List<Pair<Throwable, ErrorType>> collectUnsuppressedErrors(Component obj, MessagingException me,\n+                                                                     ErrorTypeLocator locator) {\n     List<Pair<Throwable, ErrorType>> errors = new ArrayList<>(4);\n     final List<Throwable> exceptionsAsList = getExceptionsAsList(me);\n     for (Throwable e : exceptionsAsList) {\n-      ErrorType type = errorTypeFromException(obj, locator, e);\n-      if (!isUnknownMuleError(type) && !isCriticalMuleError(type)) {\n-        errors.add(new Pair<>(e, type));\n+      if (e instanceof SuppressedMuleException) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96d7f933e3003a452afae0c63b56a7af01654573"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTUyOTk3OnYy", "diffSide": "RIGHT", "path": "tests/unit/src/main/java/org/mule/functional/junit4/matchers/ClassNameMatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODowNjozMFrOFmk-CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxODo0NToxNFrOFmmH7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk5NTkxMw==", "bodyText": "where is this used? Also, the format is wrong", "url": "https://github.com/mulesoft/mule/pull/8625#discussion_r375995913", "createdAt": "2020-02-06T18:06:30Z", "author": {"login": "elrodro83"}, "path": "tests/unit/src/main/java/org/mule/functional/junit4/matchers/ClassNameMatcher.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.functional.junit4.matchers;\n+\n+import org.hamcrest.Description;\n+import org.hamcrest.Factory;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+\n+/**\n+ * Matcher to check the class name of an {@link Object}\n+ * @param <T> the type of {@link Object} to match\n+ */\n+public class ClassNameMatcher<T> extends TypeSafeMatcher<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13c251bc412e414b72ed73d29946e8142b674127"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjAxNDgyOA==", "bodyText": "Sorry for the unformatted code. It is used by our integration tests.", "url": "https://github.com/mulesoft/mule/pull/8625#discussion_r376014828", "createdAt": "2020-02-06T18:45:14Z", "author": {"login": "IvanAndresFritzler"}, "path": "tests/unit/src/main/java/org/mule/functional/junit4/matchers/ClassNameMatcher.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.functional.junit4.matchers;\n+\n+import org.hamcrest.Description;\n+import org.hamcrest.Factory;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+\n+/**\n+ * Matcher to check the class name of an {@link Object}\n+ * @param <T> the type of {@link Object} to match\n+ */\n+public class ClassNameMatcher<T> extends TypeSafeMatcher<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk5NTkxMw=="}, "originalCommit": {"oid": "13c251bc412e414b72ed73d29946e8142b674127"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 156, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}