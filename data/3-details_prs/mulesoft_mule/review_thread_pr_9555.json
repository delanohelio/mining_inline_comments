{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNDYzMjk4", "number": 9555, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozNDo0OVrOEulMOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozNDo1N1rOEulMig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mjc5MjkxOnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/management/stats/PayloadStatisticsTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozNDo0OVrOHjFbJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozNjowNVrOHjFgCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU1MTA3OQ==", "bodyText": "functionality", "url": "https://github.com/mulesoft/mule/pull/9555#discussion_r506551079", "createdAt": "2020-10-16T15:34:49Z", "author": {"login": "fsgonz"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/management/stats/PayloadStatisticsTestCase.java", "diffHunk": "@@ -766,6 +772,45 @@ public void flowProcessMediatorCollectionItems() throws Exception {\n     verify(sourcePolicy).process(any(), any(), any());\n   }\n \n+  @Test\n+  @Issue(\"MULE-18895\")\n+  @Description(\"Check that managing a decorator of a cursor provider returns the same instance instead of attempting to manage it again.\")\n+  public void managedProviderNotManagedTwice() throws MuleException {\n+    final DefaultStreamingManager streamingManager = new DefaultStreamingManager();\n+    initialiseIfNeeded(streamingManager, muleContext);\n+\n+    final ManagedCursorStreamProvider provider = mock(ManagedCursorStreamProvider.class);\n+    when(provider.isManaged()).thenCallRealMethod();\n+    final InputDecoratedCursorStreamProvider decoratedProvider =\n+        new InputDecoratedCursorStreamProvider(provider, decoratorFactory.componentDecoratorFactory(component1), CORR_ID);\n+\n+    final CursorProvider managed = streamingManager.manage(decoratedProvider, testEvent());\n+\n+    assertThat(managed, is(sameInstance(decoratedProvider)));\n+  }\n+\n+  @Test\n+  @Issue(\"MULE-18895\")\n+  @Description(\"Check that decorated cursors also are cursors so the fucntionality depending on instanceof is not affected.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da3332a8e5b071747dbd22de0581ee6a8921ac59"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU1MjMzMQ==", "bodyText": "so that", "url": "https://github.com/mulesoft/mule/pull/9555#discussion_r506552331", "createdAt": "2020-10-16T15:36:05Z", "author": {"login": "fsgonz"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/management/stats/PayloadStatisticsTestCase.java", "diffHunk": "@@ -766,6 +772,45 @@ public void flowProcessMediatorCollectionItems() throws Exception {\n     verify(sourcePolicy).process(any(), any(), any());\n   }\n \n+  @Test\n+  @Issue(\"MULE-18895\")\n+  @Description(\"Check that managing a decorator of a cursor provider returns the same instance instead of attempting to manage it again.\")\n+  public void managedProviderNotManagedTwice() throws MuleException {\n+    final DefaultStreamingManager streamingManager = new DefaultStreamingManager();\n+    initialiseIfNeeded(streamingManager, muleContext);\n+\n+    final ManagedCursorStreamProvider provider = mock(ManagedCursorStreamProvider.class);\n+    when(provider.isManaged()).thenCallRealMethod();\n+    final InputDecoratedCursorStreamProvider decoratedProvider =\n+        new InputDecoratedCursorStreamProvider(provider, decoratorFactory.componentDecoratorFactory(component1), CORR_ID);\n+\n+    final CursorProvider managed = streamingManager.manage(decoratedProvider, testEvent());\n+\n+    assertThat(managed, is(sameInstance(decoratedProvider)));\n+  }\n+\n+  @Test\n+  @Issue(\"MULE-18895\")\n+  @Description(\"Check that decorated cursors also are cursors so the fucntionality depending on instanceof is not affected.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU1MTA3OQ=="}, "originalCommit": {"oid": "da3332a8e5b071747dbd22de0581ee6a8921ac59"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3Mjc5MzcwOnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/management/stats/PayloadStatisticsTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozNDo1N1rOHjFbsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTozNDo1N1rOHjFbsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU1MTIxNg==", "bodyText": "functionality", "url": "https://github.com/mulesoft/mule/pull/9555#discussion_r506551216", "createdAt": "2020-10-16T15:34:57Z", "author": {"login": "fsgonz"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/management/stats/PayloadStatisticsTestCase.java", "diffHunk": "@@ -766,6 +772,45 @@ public void flowProcessMediatorCollectionItems() throws Exception {\n     verify(sourcePolicy).process(any(), any(), any());\n   }\n \n+  @Test\n+  @Issue(\"MULE-18895\")\n+  @Description(\"Check that managing a decorator of a cursor provider returns the same instance instead of attempting to manage it again.\")\n+  public void managedProviderNotManagedTwice() throws MuleException {\n+    final DefaultStreamingManager streamingManager = new DefaultStreamingManager();\n+    initialiseIfNeeded(streamingManager, muleContext);\n+\n+    final ManagedCursorStreamProvider provider = mock(ManagedCursorStreamProvider.class);\n+    when(provider.isManaged()).thenCallRealMethod();\n+    final InputDecoratedCursorStreamProvider decoratedProvider =\n+        new InputDecoratedCursorStreamProvider(provider, decoratorFactory.componentDecoratorFactory(component1), CORR_ID);\n+\n+    final CursorProvider managed = streamingManager.manage(decoratedProvider, testEvent());\n+\n+    assertThat(managed, is(sameInstance(decoratedProvider)));\n+  }\n+\n+  @Test\n+  @Issue(\"MULE-18895\")\n+  @Description(\"Check that decorated cursors also are cursors so the fucntionality depending on instanceof is not affected.\")\n+  public void managedCursorInputNotManagedTwice() throws MuleException {\n+    final InputStream stream = mock(CursorStream.class);\n+    final InputStream decorated =\n+        decoratorFactory.componentDecoratorFactory(component1).decorateInput(stream, CORR_ID);\n+\n+    assertThat(decorated, instanceOf(CursorStream.class));\n+  }\n+\n+  @Test\n+  @Issue(\"MULE-18895\")\n+  @Description(\"Check that decorated cursors also are cursors so the fucntionality depending on instanceof is not affected.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da3332a8e5b071747dbd22de0581ee6a8921ac59"}, "originalPosition": 73}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4691, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}