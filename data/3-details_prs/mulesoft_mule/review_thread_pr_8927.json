{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0ODEzNjQ0", "number": 8927, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTozNTo0MVrOEF_uHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0MDozM1rOEF_2ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzIyMzMzOnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/config/resolver/BasicTypesValueResolverFactoryTypeVisitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTozNTo0MVrOGkhUMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTozNTo0MVrOGkhUMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk0Nzc2Mw==", "bodyText": "BasicTypesValueResolverFactoryTypeVisitor -> BasicTypeValueResolverFactoryTypeVisitor", "url": "https://github.com/mulesoft/mule/pull/8927#discussion_r440947763", "createdAt": "2020-06-16T15:35:41Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/config/resolver/BasicTypesValueResolverFactoryTypeVisitor.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.config.resolver;\n+\n+import static java.lang.String.format;\n+\n+import org.mule.metadata.api.model.MetadataType;\n+import org.mule.metadata.api.visitor.BasicTypeMetadataVisitor;\n+import org.mule.metadata.api.visitor.MetadataTypeVisitor;\n+import org.mule.runtime.api.util.Reference;\n+import org.mule.runtime.module.extension.internal.runtime.resolver.StaticValueResolver;\n+import org.mule.runtime.module.extension.internal.runtime.resolver.TypeSafeValueResolverWrapper;\n+import org.mule.runtime.module.extension.internal.runtime.resolver.ValueResolver;\n+\n+import org.springframework.core.convert.ConversionService;\n+import org.springframework.core.convert.support.DefaultConversionService;\n+\n+/**\n+ * A {@link MetadataTypeVisitor} implementation that creates a {@link ValueResolver} instances depending on a parameter\n+ * {@link MetadataType} for basic types.\n+ *\n+ * @since 4.4, 4.3.1\n+ */\n+public class BasicTypesValueResolverFactoryTypeVisitor extends BasicTypeMetadataVisitor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8abb558b7951a3f557c59cff01915b507c2f367b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzIzNzQ4OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/executor/MethodExecutorGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTozOTowMlrOGkhd5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNjowNTo1MlrOGkipXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MDI0Ng==", "bodyText": "what's this for? Actually, if you look at usages, this parameter is just for testing as in any other situation it's always null .", "url": "https://github.com/mulesoft/mule/pull/8927#discussion_r440950246", "createdAt": "2020-06-16T15:39:02Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/executor/MethodExecutorGenerator.java", "diffHunk": "@@ -209,23 +221,25 @@ public ByteCodeAppender appender(Target implementationTarget) {\n \n         ).make();\n \n+    if (generatedByteCodeFile == null && LOGGER.isTraceEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8abb558b7951a3f557c59cff01915b507c2f367b"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2OTU2Nw==", "bodyText": "so that i can toggle this by setting the logger to TRACE", "url": "https://github.com/mulesoft/mule/pull/8927#discussion_r440969567", "createdAt": "2020-06-16T16:05:52Z", "author": {"login": "elrodro83"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/executor/MethodExecutorGenerator.java", "diffHunk": "@@ -209,23 +221,25 @@ public ByteCodeAppender appender(Target implementationTarget) {\n \n         ).make();\n \n+    if (generatedByteCodeFile == null && LOGGER.isTraceEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MDI0Ng=="}, "originalCommit": {"oid": "8abb558b7951a3f557c59cff01915b507c2f367b"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzIzODMyOnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/executor/MethodExecutorGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTozOToxMlrOGkhecg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTozOToxMlrOGkhecg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MDM4Ng==", "bodyText": "unconsistent use of DEBUG vs TRACING", "url": "https://github.com/mulesoft/mule/pull/8927#discussion_r440950386", "createdAt": "2020-06-16T15:39:12Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/execution/executor/MethodExecutorGenerator.java", "diffHunk": "@@ -209,23 +221,25 @@ public ByteCodeAppender appender(Target implementationTarget) {\n \n         ).make();\n \n+    if (generatedByteCodeFile == null && LOGGER.isTraceEnabled()) {\n+      generatedByteCodeFile = new File(executorName + \".class\");\n+    }\n     if (generatedByteCodeFile != null) {\n       try (FileOutputStream os = new FileOutputStream(generatedByteCodeFile)) {\n         os.write(byteBuddyMadeWrapper.getBytes());\n       } catch (IOException e) {\n-        throw new MuleRuntimeException(createStaticMessage(format(\n-                                                                  \"Could not store bytecode while generating a dynamic %s for method %s\",\n+        throw new MuleRuntimeException(createStaticMessage(format(\"Could not store bytecode while generating a dynamic %s for method %s\",\n                                                                   MethodExecutor.class, method.toString())),\n                                        e);\n       }\n+      LOGGER.debug(\"Generated class '{}' saved at '{}'\", executorName, generatedByteCodeFile.getAbsoluteFile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8abb558b7951a3f557c59cff01915b507c2f367b"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzI0NDc1OnYy", "diffSide": "RIGHT", "path": "modules/extensions-spring-support/src/main/java/org/mule/runtime/module/extension/internal/config/dsl/AbstractExtensionObjectFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0MDozM1rOGkhicA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0NDozNVrOGkht0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MTQwOA==", "bodyText": "what's this representation thing for? Wasn't the problem just about the wrong type of visitor being used?", "url": "https://github.com/mulesoft/mule/pull/8927#discussion_r440951408", "createdAt": "2020-06-16T15:40:33Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-spring-support/src/main/java/org/mule/runtime/module/extension/internal/config/dsl/AbstractExtensionObjectFactory.java", "diffHunk": "@@ -92,7 +92,8 @@ protected ParametersResolver getParametersResolver() {\n   }\n \n   private ParametersResolver parametersResolverFromValues(MuleContext muleContext) {\n-    return ParametersResolver.fromValues(parameters, muleContext, isLazyInitMode(properties), reflectionCache, expressionManager);\n+    return ParametersResolver.fromValues(parameters, muleContext, isLazyInitMode(properties), reflectionCache, expressionManager,\n+                                         this.getRepresentation());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8abb558b7951a3f557c59cff01915b507c2f367b"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1NDMyMQ==", "bodyText": "this is just for the WARN message being logged in the case the types have to be converted, to proivde infromation about where the parameter is defined.", "url": "https://github.com/mulesoft/mule/pull/8927#discussion_r440954321", "createdAt": "2020-06-16T15:44:35Z", "author": {"login": "elrodro83"}, "path": "modules/extensions-spring-support/src/main/java/org/mule/runtime/module/extension/internal/config/dsl/AbstractExtensionObjectFactory.java", "diffHunk": "@@ -92,7 +92,8 @@ protected ParametersResolver getParametersResolver() {\n   }\n \n   private ParametersResolver parametersResolverFromValues(MuleContext muleContext) {\n-    return ParametersResolver.fromValues(parameters, muleContext, isLazyInitMode(properties), reflectionCache, expressionManager);\n+    return ParametersResolver.fromValues(parameters, muleContext, isLazyInitMode(properties), reflectionCache, expressionManager,\n+                                         this.getRepresentation());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1MTQwOA=="}, "originalCommit": {"oid": "8abb558b7951a3f557c59cff01915b507c2f367b"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4943, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}