{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NzAyMDk4", "number": 8608, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMzozODozNVrODbOPQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMzozODozNVrODbOPQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5ODcxNDI0OnYy", "diffSide": "RIGHT", "path": "modules/launcher/src/main/java/org/mule/module/launcher/application/MuleApplicationClassLoaderFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMzozODozNVrOFilOuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMzozODozNVrOFilOuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgwNTg4MA==", "bodyText": "add a comment to clarify why we have to hook this up", "url": "https://github.com/mulesoft/mule/pull/8608#discussion_r371805880", "createdAt": "2020-01-28T13:38:35Z", "author": {"login": "gsfernandes"}, "path": "modules/launcher/src/main/java/org/mule/module/launcher/application/MuleApplicationClassLoaderFactory.java", "diffHunk": "@@ -48,19 +49,27 @@ public ArtifactClassLoader create(ApplicationDescriptor descriptor)\n             parent = domainClassLoaderRepository.getDomainClassLoader(domain).getClassLoader();\n         }\n         final Set<PluginDescriptor> plugins = descriptor.getPlugins();\n-        if (!plugins.isEmpty())\n+        if (plugins.isEmpty())\n         {\n-            // Re-assigns parent if there are shared plugin libraries\n-            URL[] pluginLibs = descriptor.getSharedPluginLibs();\n-            if (pluginLibs != null && pluginLibs.length != 0)\n-            {\n-                parent = new GoodCitizenClassLoader(pluginLibs, parent);\n-            }\n-\n-            // re-assign parent ref if any plugins deployed, will be used by the MuleAppCL\n-            parent = new MulePluginsClassLoader(parent, plugins);\n+            return new MuleApplicationClassLoader(descriptor.getName(), parent,\n+                    descriptor.getLoaderOverride(), nativeLibraryFinderFactory.create(descriptor.getName()));\n         }\n-\n-        return new MuleApplicationClassLoader(descriptor.getName(), parent, descriptor.getLoaderOverride(), nativeLibraryFinderFactory.create(descriptor.getName()));\n+        // Re-assigns parent if there are shared plugin libraries\n+        URL[] pluginLibs = descriptor.getSharedPluginLibs();\n+        if (pluginLibs != null && pluginLibs.length != 0)\n+        {\n+            parent = new GoodCitizenClassLoader(pluginLibs, parent);\n+        }\n+        // re-assign parent ref if any plugins deployed, will be used by the MuleAppCL\n+        final MulePluginsClassLoader parentPluginsClassLoader = new MulePluginsClassLoader(parent, plugins);\n+        MuleApplicationClassLoader appClassLoader =  new MuleApplicationClassLoader(descriptor.getName(), parentPluginsClassLoader,\n+                descriptor.getLoaderOverride(), nativeLibraryFinderFactory.create(descriptor.getName()));\n+        appClassLoader.addShutdownListener(new ShutdownListener() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ecad1e9ad844b0df8d627bf0e87f3d400cb16782"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 147, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}