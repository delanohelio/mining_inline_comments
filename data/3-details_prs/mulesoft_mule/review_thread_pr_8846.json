{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0ODA0NTg3", "number": 8846, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDowMTowOVrOD6ZmUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMjo1MDowM1rOD6oP8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTYzNDEwOnYy", "diffSide": "RIGHT", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/spring/ObjectFactoryClassRepository.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDowMTowOVrOGSOLxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QyMDowMTowOVrOGSOLxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTc1OTk0Mg==", "bodyText": "use a lamba", "url": "https://github.com/mulesoft/mule/pull/8846#discussion_r421759942", "createdAt": "2020-05-07T20:01:09Z", "author": {"login": "elrodro83"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/spring/ObjectFactoryClassRepository.java", "diffHunk": "@@ -34,16 +40,34 @@\n  */\n public class ObjectFactoryClassRepository {\n \n+  //This only works because the cache uses an identity hashCode() and equals() for keys when they are configured as weak.\n+  //(check com.github.benmanes.caffeine.cache.Caffeine.weakKeys javadoc)\n+  //If that is not the case, this will never work because we want to compare class loaders by instance.\n+  //The idea for this cache is to avoid the creation of multiple CompositeClassLoader s instances for the same delegates.\n+  //That is because CGLIB enhancer uses that classloader to define the enhanced class and every new instance loads\n+  //the same defined class over and over again, causing metaspace OOM in some scenarios.\n+  private final static LoadingCache<ClassLoader, ClassLoader> COMPOSITE_CL_CACHE = newBuilder()\n+      .weakKeys()\n+      .weakValues()\n+      .build(new CacheLoader<ClassLoader, ClassLoader>() {\n+\n+        @Nullable\n+        @Override\n+        public ClassLoader load(@NonNull ClassLoader key) throws Exception {\n+          return new CompositeClassLoader(ObjectFactoryClassRepository.class.getClassLoader(), key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91f731399a833cf33625f90367a48dbbdf9cd033"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyODAzNDQzOnYy", "diffSide": "RIGHT", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/spring/ObjectFactoryClassRepository.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMjo1MDowM1rOGSkafA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMjo1MDowM1rOGSkafA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjEyNDE1Ng==", "bodyText": "remove unused imports", "url": "https://github.com/mulesoft/mule/pull/8846#discussion_r422124156", "createdAt": "2020-05-08T12:50:03Z", "author": {"login": "elrodro83"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/dsl/spring/ObjectFactoryClassRepository.java", "diffHunk": "@@ -6,19 +6,25 @@\n  */\n package org.mule.runtime.config.internal.dsl.spring;\n \n+import static com.github.benmanes.caffeine.cache.Caffeine.newBuilder;\n import static net.sf.cglib.proxy.Enhancer.registerStaticCallbacks;\n import org.mule.runtime.core.internal.util.CompositeClassLoader;\n import org.mule.runtime.dsl.api.component.ComponentBuildingDefinition;\n import org.mule.runtime.dsl.api.component.ObjectFactory;\n import org.mule.runtime.dsl.api.component.ObjectTypeProvider;\n \n+import com.github.benmanes.caffeine.cache.CacheLoader;\n+import com.github.benmanes.caffeine.cache.LoadingCache;\n+\n import java.util.Optional;\n import java.util.function.Consumer;\n import java.util.function.Supplier;\n \n import net.sf.cglib.proxy.Callback;\n import net.sf.cglib.proxy.Enhancer;\n import net.sf.cglib.proxy.MethodInterceptor;\n+import org.checkerframework.checker.nullness.qual.NonNull;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "564976883b5af3ba0fa4ac25a26dc0ecd77f5176"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 29, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}