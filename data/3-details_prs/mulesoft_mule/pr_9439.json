{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5Mzk1NTE0", "number": 9439, "title": "MULE-18777: Multiple reconnections of a source must not occur at the same time", "bodyText": "", "createdAt": "2020-09-18T15:41:11Z", "url": "https://github.com/mulesoft/mule/pull/9439", "merged": true, "mergeCommit": {"oid": "e9157ea1f22f3cc6ed9d30d9fc31db62273b959c"}, "closed": true, "closedAt": "2020-09-29T20:40:04Z", "author": {"login": "gabrieldalborgo"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdKLQR-gFqTQ5MTc0NzU5MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNspTJgFqTQ5ODc3MzQ1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNzQ3NTkx", "url": "https://github.com/mulesoft/mule/pull/9439#pullrequestreview-491747591", "createdAt": "2020-09-18T20:03:02Z", "commit": {"oid": "2a0bf368b05fd2ee48b1d20616736da7e638089c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDowMzowMlrOHUaRTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDowMzoxMVrOHUaRiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2Mzk4Mw==", "bodyText": "why moving this from here to line 312? also, does the doOn vs doAfter change really fix the race condition or just makes it less likely?", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r491163983", "createdAt": "2020-09-18T20:03:02Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java", "diffHunk": "@@ -323,7 +323,6 @@ public void onException(ConnectionException exception) {\n     reconnectionAction\n         .doOnSuccess(v -> onReconnectionSuccessful())\n         .doOnError(this::onReconnectionFailed)\n-        .doAfterTerminate(() -> reconnecting.set(false))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a0bf368b05fd2ee48b1d20616736da7e638089c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2NDA0MA==", "bodyText": "where's the test case for this?", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r491164040", "createdAt": "2020-09-18T20:03:11Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java", "diffHunk": "@@ -309,7 +309,7 @@ public void onException(ConnectionException exception) {\n                 exception);\n \n     Mono<Void> reconnectionAction = sourceAdapter.getReconnectionAction(exception)\n-        .map(p -> from(retryPolicyTemplate.applyPolicy(p, retryScheduler)))\n+        .map(p -> from(retryPolicyTemplate.applyPolicy(p, retryScheduler)).doOnTerminate(() -> reconnecting.set(false)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a0bf368b05fd2ee48b1d20616736da7e638089c"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyODkwMjQ5", "url": "https://github.com/mulesoft/mule/pull/9439#pullrequestreview-492890249", "createdAt": "2020-09-21T18:50:25Z", "commit": {"oid": "85560d8b0bd71e096c2b29e6d38513979caf5880"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODo1MDoyNVrOHVeE1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODo1NDo1OFrOHVeOYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NDkwMA==", "bodyText": "don't swallow this exception", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r492274900", "createdAt": "2020-09-21T18:50:25Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();\n+\n+  private Scheduler scheduler;\n+\n+  private static final AtomicReference<Integer> countStartedSources = new AtomicReference<>(0);\n+\n+  private void delay(Long millis) {\n+    try {\n+      Thread.sleep(millis);\n+    } catch (InterruptedException e) {\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85560d8b0bd71e096c2b29e6d38513979caf5880"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NTI3NA==", "bodyText": "all tests in this class are flaky", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r492275274", "createdAt": "2020-09-21T18:51:07Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85560d8b0bd71e096c2b29e6d38513979caf5880"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NjE5OQ==", "bodyText": "Use AtomicInteger instead", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r492276199", "createdAt": "2020-09-21T18:52:49Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();\n+\n+  private Scheduler scheduler;\n+\n+  private static final AtomicReference<Integer> countStartedSources = new AtomicReference<>(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85560d8b0bd71e096c2b29e6d38513979caf5880"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NjQzOA==", "bodyText": "all tests in this class seem to be testing the implementation rather than behavior", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r492276438", "createdAt": "2020-09-21T18:53:18Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85560d8b0bd71e096c2b29e6d38513979caf5880"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NzM0NQ==", "bodyText": "this seems to be tackling a symptom rather than the root cause. What's the real problem been solved here? Moving this should have no effect, as no two reconnection tasks should be overlapping. If they do, then the bug is a prior race condition", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r492277345", "createdAt": "2020-09-21T18:54:58Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java", "diffHunk": "@@ -323,7 +323,6 @@ public void onException(ConnectionException exception) {\n     reconnectionAction\n         .doOnSuccess(v -> onReconnectionSuccessful())\n         .doOnError(this::onReconnectionFailed)\n-        .doAfterTerminate(() -> reconnecting.set(false))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2Mzk4Mw=="}, "originalCommit": {"oid": "2a0bf368b05fd2ee48b1d20616736da7e638089c"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "85560d8b0bd71e096c2b29e6d38513979caf5880", "author": {"user": {"login": "gabrieldalborgo", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/85560d8b0bd71e096c2b29e6d38513979caf5880", "committedDate": "2020-09-21T17:17:15Z", "message": "Add test"}, "afterCommit": {"oid": "d528d749478fc3c1a4beb38bda70e14198338d7a", "author": {"user": {"login": "gabrieldalborgo", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/d528d749478fc3c1a4beb38bda70e14198338d7a", "committedDate": "2020-09-21T20:43:25Z", "message": "Update reconnection extension models & schemas"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bdaed074a580c739d9d62b80df1c93bebb088d9", "author": {"user": {"login": "gabrieldalborgo", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/8bdaed074a580c739d9d62b80df1c93bebb088d9", "committedDate": "2020-09-23T12:01:48Z", "message": "Fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c61a4f2fe9ed3c0dcf3f6a99854c31c8d277b23", "author": {"user": {"login": "gabrieldalborgo", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/6c61a4f2fe9ed3c0dcf3f6a99854c31c8d277b23", "committedDate": "2020-09-23T12:01:48Z", "message": "Fix for reconnectable sources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "497d80c4dee1274be90104060c1dc77ed998deb9", "author": {"user": {"login": "gabrieldalborgo", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/497d80c4dee1274be90104060c1dc77ed998deb9", "committedDate": "2020-09-23T13:04:39Z", "message": "Update reconnection extension models & schemas"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "000358c376eb49e221debbc0f2f34d79bd499b38", "author": {"user": {"login": "gabrieldalborgo", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/000358c376eb49e221debbc0f2f34d79bd499b38", "committedDate": "2020-09-23T13:04:39Z", "message": "Revert \"Fix for reconnectable sources\"\n\nThis reverts commit 2a0bf368b05fd2ee48b1d20616736da7e638089c."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06d46a28bb98e1fda0db297df833304bc9a7b2e4", "author": {"user": {"login": "gabrieldalborgo", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/06d46a28bb98e1fda0db297df833304bc9a7b2e4", "committedDate": "2020-09-23T13:04:39Z", "message": "Revert \"Fix\"\n\nThis reverts commit 6b894cb9972073ca448670437bb061d4075176bf."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "875526fda20f21a9005425c005d3659042f74b1c", "author": {"user": {"login": "gabrieldalborgo", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/875526fda20f21a9005425c005d3659042f74b1c", "committedDate": "2020-09-23T13:04:39Z", "message": "Refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f7ae9a6c7c8d204cdd8e1fc4b0f04d7df89d4b1", "author": {"user": {"login": "gabrieldalborgo", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/2f7ae9a6c7c8d204cdd8e1fc4b0f04d7df89d4b1", "committedDate": "2020-09-23T13:04:39Z", "message": "Add test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2ce8a1c55513ff89bae1c1bcb9990f7da03f0b1e", "author": {"user": {"login": "gabrieldalborgo", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/2ce8a1c55513ff89bae1c1bcb9990f7da03f0b1e", "committedDate": "2020-09-22T20:32:25Z", "message": "Refactor"}, "afterCommit": {"oid": "2f7ae9a6c7c8d204cdd8e1fc4b0f04d7df89d4b1", "author": {"user": {"login": "gabrieldalborgo", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/2f7ae9a6c7c8d204cdd8e1fc4b0f04d7df89d4b1", "committedDate": "2020-09-23T13:04:39Z", "message": "Add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "389822214de31d1b516933efcf46e0733483d4db", "author": {"user": {"login": "gabrieldalborgo", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/389822214de31d1b516933efcf46e0733483d4db", "committedDate": "2020-09-23T20:08:26Z", "message": "Increase delay"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NTQ2ODI1", "url": "https://github.com/mulesoft/mule/pull/9439#pullrequestreview-495546825", "createdAt": "2020-09-24T13:04:02Z", "commit": {"oid": "389822214de31d1b516933efcf46e0733483d4db"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzowNDowMlrOHXZn1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzowODoyNFrOHXZzHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5OTA5NQ==", "bodyText": "I think we should make the test shorter, can we guarantee that the issue is fixed waiting less than 30 secs?", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494299095", "createdAt": "2020-09-24T13:04:02Z", "author": {"login": "ndinu"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/reconnection/ReconnectionTestCase.java", "diffHunk": "@@ -88,6 +89,23 @@ public void reconnectSource() throws Exception {\n     });\n   }\n \n+  @Test\n+  public void doNotStartSourceTwiceAfterExceptionOnReconnection() throws Exception {\n+    ((Startable) getFlowConstruct(\"otherReconnectForever\")).start();\n+    check(5000, 1000, () -> !capturedEvents.isEmpty());\n+    switchOtherFail();\n+\n+    checkNot(30000, 1000, () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "389822214de31d1b516933efcf46e0733483d4db"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwMTk4MQ==", "bodyText": "Does it need to wait this much?", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494301981", "createdAt": "2020-09-24T13:08:24Z", "author": {"login": "ndinu"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();\n+\n+  private Scheduler scheduler;\n+\n+  private static final AtomicInteger countStartedSources = new AtomicInteger(0);\n+\n+  @Override\n+  public void onStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    countStartedSources.accumulateAndGet(1, Integer::sum);\n+    delay(1000L);\n+    doStart(sourceCallback);\n+  }\n+\n+  private void doStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    ReconnectableConnection connection = connectionProvider.connect();\n+    this.scheduler = schedulerService.ioScheduler();\n+\n+    if (ReconnectableConnectionProvider.otherFail) {\n+      delay(10000L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "389822214de31d1b516933efcf46e0733483d4db"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NTY3MjE3", "url": "https://github.com/mulesoft/mule/pull/9439#pullrequestreview-495567217", "createdAt": "2020-09-24T13:26:07Z", "commit": {"oid": "389822214de31d1b516933efcf46e0733483d4db"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzoyNjowN1rOHXakkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzoyNjowN1rOHXakkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxNDY0Mg==", "bodyText": "Is there any way to also check that reconnection was triggered twice and simultaneously? From what I understand this test can also pass if only 1 reconnection is made (which is unlikely due to the Thread sleeps but could also happen if code is changed later on in the Extension Message Source).", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494314642", "createdAt": "2020-09-24T13:26:07Z", "author": {"login": "SebaElizalde"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/reconnection/ReconnectionTestCase.java", "diffHunk": "@@ -88,6 +89,23 @@ public void reconnectSource() throws Exception {\n     });\n   }\n \n+  @Test\n+  public void doNotStartSourceTwiceAfterExceptionOnReconnection() throws Exception {\n+    ((Startable) getFlowConstruct(\"otherReconnectForever\")).start();\n+    check(5000, 1000, () -> !capturedEvents.isEmpty());\n+    switchOtherFail();\n+\n+    checkNot(30000, 1000, () -> {\n+      synchronized (capturedEvents) {\n+        return capturedEvents.stream()\n+            .map(event -> (Integer) event.getMessage().getPayload().getValue())\n+            .filter(startedSources -> startedSources > 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "389822214de31d1b516933efcf46e0733483d4db"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461", "author": {"user": {"login": "gabrieldalborgo", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/2451d5a87fa8f4f82f145fdda9e53c7373910461", "committedDate": "2020-09-24T14:16:34Z", "message": "Changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11bac11e873808572fc11878fd2b99d93dd6a019", "author": {"user": {"login": "gabrieldalborgo", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/11bac11e873808572fc11878fd2b99d93dd6a019", "committedDate": "2020-09-24T19:42:55Z", "message": "Fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1ODc3NzI3", "url": "https://github.com/mulesoft/mule/pull/9439#pullrequestreview-495877727", "createdAt": "2020-09-24T19:13:15Z", "commit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "state": "DISMISSED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOToxMzoxNVrOHXpFiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOTozNjo1N1rOHXp1zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU1MjQ1OQ==", "bodyText": "we have a ton of interfaces like this already. Simply reuse ReactiveReconnectionCallback", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494552459", "createdAt": "2020-09-24T19:13:15Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java", "diffHunk": "@@ -581,6 +601,45 @@ public Object getWorkOwner() {\n     }\n   }\n \n+  private class WithCompletionCallback implements RetryCallback {\n+\n+    private final CompletionCallback completionCallback;\n+    private final RetryCallback delegate;\n+\n+    WithCompletionCallback(RetryCallback delegate, CompletionCallback completionCallback) {\n+      this.delegate = delegate;\n+      this.completionCallback = completionCallback;\n+    }\n+\n+    @Override\n+    public void doWork(RetryContext context) throws Exception {\n+      try {\n+        delegate.doWork(context);\n+        this.completionCallback.success();\n+      } catch (Exception ex) {\n+        this.completionCallback.error(ex);\n+        throw ex;\n+      }\n+    }\n+\n+    @Override\n+    public String getWorkDescription() {\n+      return delegate.getWorkDescription();\n+    }\n+\n+    @Override\n+    public Object getWorkOwner() {\n+      return delegate.getWorkOwner();\n+    }\n+  }\n+\n+  private interface CompletionCallback {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU1MzI0Mw==", "bodyText": "sleeps make this flaky. Use latches instead", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494553243", "createdAt": "2020-09-24T19:14:45Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();\n+\n+  private Scheduler scheduler;\n+\n+  private static final AtomicInteger countStartedSources = new AtomicInteger(0);\n+\n+  @Override\n+  public void onStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    countStartedSources.accumulateAndGet(1, Integer::sum);\n+    doStart(sourceCallback);\n+  }\n+\n+  private void doStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    ReconnectableConnection connection = connectionProvider.connect();\n+    this.scheduler = schedulerService.ioScheduler();\n+\n+    if (ReconnectableConnectionProvider.otherFail) {\n+      delay(1000L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU1Mzk4NA==", "bodyText": "why not simlpy addAndGet(-1) ?", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494553984", "createdAt": "2020-09-24T19:16:07Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();\n+\n+  private Scheduler scheduler;\n+\n+  private static final AtomicInteger countStartedSources = new AtomicInteger(0);\n+\n+  @Override\n+  public void onStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    countStartedSources.accumulateAndGet(1, Integer::sum);\n+    doStart(sourceCallback);\n+  }\n+\n+  private void doStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    ReconnectableConnection connection = connectionProvider.connect();\n+    this.scheduler = schedulerService.ioScheduler();\n+\n+    if (ReconnectableConnectionProvider.otherFail) {\n+      delay(1000L);\n+      sourceCallback.onConnectionException(new ConnectionException(new RuntimeException(), connection));\n+      ReconnectableConnectionProvider.otherFail = !ReconnectableConnectionProvider.otherFail;\n+      throw new RuntimeException(\"Fail starting source\");\n+    }\n+\n+    scheduleWithFixedDelay.set(this.scheduler.scheduleWithFixedDelay(() -> {\n+      if (ReconnectableConnectionProvider.otherFail) {\n+        sourceCallback.onConnectionException(new ConnectionException(new RuntimeException(), connection));\n+      } else {\n+        sourceCallback.handle(Result.<Integer, Void>builder().output(countStartedSources.get()).build());\n+      }\n+    }, 0, 1000, MILLISECONDS));\n+  }\n+\n+  @Override\n+  public void onStop() {\n+    countStartedSources.accumulateAndGet(-1, Integer::sum);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU1Nzg0Ng==", "bodyText": "why is this in an atomic reference? I don't see the need and you're taking no value out of it", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494557846", "createdAt": "2020-09-24T19:23:35Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2MDAxOA==", "bodyText": "= false", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494560018", "createdAt": "2020-09-24T19:27:46Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();\n+\n+  private Scheduler scheduler;\n+\n+  private static final AtomicInteger countStartedSources = new AtomicInteger(0);\n+\n+  @Override\n+  public void onStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    countStartedSources.accumulateAndGet(1, Integer::sum);\n+    doStart(sourceCallback);\n+  }\n+\n+  private void doStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    ReconnectableConnection connection = connectionProvider.connect();\n+    this.scheduler = schedulerService.ioScheduler();\n+\n+    if (ReconnectableConnectionProvider.otherFail) {\n+      delay(1000L);\n+      sourceCallback.onConnectionException(new ConnectionException(new RuntimeException(), connection));\n+      ReconnectableConnectionProvider.otherFail = !ReconnectableConnectionProvider.otherFail;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2MjA0Ng==", "bodyText": "addAndGet(1)", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494562046", "createdAt": "2020-09-24T19:31:25Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();\n+\n+  private Scheduler scheduler;\n+\n+  private static final AtomicInteger countStartedSources = new AtomicInteger(0);\n+\n+  @Override\n+  public void onStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    countStartedSources.accumulateAndGet(1, Integer::sum);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2MjkzMg==", "bodyText": "pushing and capturing an integer to the flow is probalby going to lead to a flaky test. Specially since you are using a source which fails exactly once every one a day and you're forcing a sleep which happens to be the exact half of the reconnection frequency.", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494562932", "createdAt": "2020-09-24T19:33:11Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();\n+\n+  private Scheduler scheduler;\n+\n+  private static final AtomicInteger countStartedSources = new AtomicInteger(0);\n+\n+  @Override\n+  public void onStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    countStartedSources.accumulateAndGet(1, Integer::sum);\n+    doStart(sourceCallback);\n+  }\n+\n+  private void doStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    ReconnectableConnection connection = connectionProvider.connect();\n+    this.scheduler = schedulerService.ioScheduler();\n+\n+    if (ReconnectableConnectionProvider.otherFail) {\n+      delay(1000L);\n+      sourceCallback.onConnectionException(new ConnectionException(new RuntimeException(), connection));\n+      ReconnectableConnectionProvider.otherFail = !ReconnectableConnectionProvider.otherFail;\n+      throw new RuntimeException(\"Fail starting source\");\n+    }\n+\n+    scheduleWithFixedDelay.set(this.scheduler.scheduleWithFixedDelay(() -> {\n+      if (ReconnectableConnectionProvider.otherFail) {\n+        sourceCallback.onConnectionException(new ConnectionException(new RuntimeException(), connection));\n+      } else {\n+        sourceCallback.handle(Result.<Integer, Void>builder().output(countStartedSources.get()).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2MzcyNg==", "bodyText": "use a more meaningful name", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494563726", "createdAt": "2020-09-24T19:34:46Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2Mzg4NQ==", "bodyText": "use a more meaningful name", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494563885", "createdAt": "2020-09-24T19:35:05Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/ReconnectableConnectionProvider.java", "diffHunk": "@@ -28,6 +28,7 @@\n public class ReconnectableConnectionProvider implements CachedConnectionProvider<ReconnectableConnection> {\n \n   public static volatile boolean fail;\n+  public static volatile boolean otherFail;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2NDU0NA==", "bodyText": "this test depends greatly on ReconnectableConnectionProvider.otherFail. The initial value of that flag should be set of doSetUp()", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494564544", "createdAt": "2020-09-24T19:36:27Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/reconnection/ReconnectionTestCase.java", "diffHunk": "@@ -88,6 +89,23 @@ public void reconnectSource() throws Exception {\n     });\n   }\n \n+  @Test\n+  public void doNotStartSourceTwiceAfterExceptionOnReconnection() throws Exception {\n+    ((Startable) getFlowConstruct(\"otherReconnectForever\")).start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2NDgxMg==", "bodyText": "meaninful name", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494564812", "createdAt": "2020-09-24T19:36:57Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/ReconnectionOperations.java", "diffHunk": "@@ -39,6 +40,10 @@ public void switchConnection() {\n     fail = !fail;\n   }\n \n+  public void switchOtherFail() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e336fcf133fae4f2048dfe9d19c79140e54cb260", "author": {"user": {"login": "gabrieldalborgo", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/e336fcf133fae4f2048dfe9d19c79140e54cb260", "committedDate": "2020-09-24T22:34:25Z", "message": "Requested changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8050160443e71801a4c2ffb1f1d7be245e424262", "author": {"user": {"login": "gabrieldalborgo", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/8050160443e71801a4c2ffb1f1d7be245e424262", "committedDate": "2020-09-28T13:55:28Z", "message": "Update extension model & schema"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ead0d8c135f76c567914b3c9bdee77050b24422", "author": {"user": {"login": "gabrieldalborgo", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/8ead0d8c135f76c567914b3c9bdee77050b24422", "committedDate": "2020-09-28T14:01:27Z", "message": "Remove unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "546747a492f17370653d0cbab2e6769f66e737ef", "author": {"user": {"login": "gabrieldalborgo", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/546747a492f17370653d0cbab2e6769f66e737ef", "committedDate": "2020-09-28T16:44:12Z", "message": "Use sleep at source test extension"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NTAyODM3", "url": "https://github.com/mulesoft/mule/pull/9439#pullrequestreview-498502837", "createdAt": "2020-09-29T14:01:10Z", "commit": {"oid": "546747a492f17370653d0cbab2e6769f66e737ef"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc7d81bb2c4cdb433e7941e25264e4cb045d945a", "author": {"user": {"login": "gabrieldalborgo", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/bc7d81bb2c4cdb433e7941e25264e4cb045d945a", "committedDate": "2020-09-29T17:29:03Z", "message": "Change test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NzM4NTYx", "url": "https://github.com/mulesoft/mule/pull/9439#pullrequestreview-498738561", "createdAt": "2020-09-29T17:52:27Z", "commit": {"oid": "bc7d81bb2c4cdb433e7941e25264e4cb045d945a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzo1MjoyN1rOHZ6LuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODowMTo1OFrOHZ6iBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkyOTcyMQ==", "bodyText": "use constants for the values.", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r496929721", "createdAt": "2020-09-29T17:52:27Z", "author": {"login": "fsgonz"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/reconnection/ReconnectionTestCase.java", "diffHunk": "@@ -88,6 +92,16 @@ public void reconnectSource() throws Exception {\n     });\n   }\n \n+  @Test\n+  public void doNotStartSourceTwiceAfterExceptionOnReconnection() throws Exception {\n+    ((Startable) getFlowConstruct(\"reconnectAfterFailure\")).start();\n+    check(5000, 1000, () -> !capturedEvents.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc7d81bb2c4cdb433e7941e25264e4cb045d945a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkzMDA3MQ==", "bodyText": "use constants for the values. Is there a reason why the checknot is different from the check (5000 vs 4000?)", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r496930071", "createdAt": "2020-09-29T17:53:04Z", "author": {"login": "fsgonz"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/reconnection/ReconnectionTestCase.java", "diffHunk": "@@ -88,6 +92,16 @@ public void reconnectSource() throws Exception {\n     });\n   }\n \n+  @Test\n+  public void doNotStartSourceTwiceAfterExceptionOnReconnection() throws Exception {\n+    ((Startable) getFlowConstruct(\"reconnectAfterFailure\")).start();\n+    check(5000, 1000, () -> !capturedEvents.isEmpty());\n+    FallibleReconnectableSource.fail = true;\n+    checkNot(4000, 500, () -> FallibleReconnectableSource.simultaneouslyStartedSources);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc7d81bb2c4cdb433e7941e25264e4cb045d945a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkzMDQxMg==", "bodyText": "add jdoc.", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r496930412", "createdAt": "2020-09-29T17:53:40Z", "author": {"login": "fsgonz"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/FallibleReconnectableSource.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.api.util.concurrent.Latch;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.inject.Inject;\n+\n+public class FallibleReconnectableSource extends Source<Void, Void> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc7d81bb2c4cdb433e7941e25264e4cb045d945a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkzNTQzMQ==", "bodyText": "Shouldn't this verify that there are two countedStartedSources simultaneously in the onStart instead of substracting in the onStop. What you need to verify is that the onStart is not executed again until the firs one ended.", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r496935431", "createdAt": "2020-09-29T18:01:58Z", "author": {"login": "fsgonz"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/FallibleReconnectableSource.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.api.util.concurrent.Latch;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.inject.Inject;\n+\n+public class FallibleReconnectableSource extends Source<Void, Void> {\n+\n+  public static volatile boolean fail = false;\n+  public static volatile boolean simultaneouslyStartedSources = false;\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private Scheduler scheduler;\n+  private ScheduledFuture<?> scheduleWithFixedDelay;\n+\n+  private static final AtomicInteger countStartedSources = new AtomicInteger(0);\n+  private static final Latch latch = new Latch();\n+\n+  @Override\n+  public void onStart(SourceCallback<Void, Void> sourceCallback) throws MuleException {\n+    if (countStartedSources.addAndGet(1) > 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc7d81bb2c4cdb433e7941e25264e4cb045d945a"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29b78fb10f9edb265c674a7a9f0dff6b2648b931", "author": {"user": {"login": "gabrieldalborgo", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/29b78fb10f9edb265c674a7a9f0dff6b2648b931", "committedDate": "2020-09-29T18:21:55Z", "message": "Requested changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NzcxNjY4", "url": "https://github.com/mulesoft/mule/pull/9439#pullrequestreview-498771668", "createdAt": "2020-09-29T18:36:41Z", "commit": {"oid": "29b78fb10f9edb265c674a7a9f0dff6b2648b931"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODozNjo0MVrOHZ7wpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODozNjo0MVrOHZ7wpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1NTU1Ng==", "bodyText": "Why make this fail again? In case you want to retry that a new reconnection triggers a new start on the source should this be a onConnectionException.", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r496955556", "createdAt": "2020-09-29T18:36:41Z", "author": {"login": "fsgonz"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/FallibleReconnectableSource.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.api.util.concurrent.Latch;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.inject.Inject;\n+\n+/**\n+ * This class represents a {@link Source} that can fail starting repeatedly and after all reconnect successfully.\n+ * Also keeps in track if multiple instances were starting at the same time.\n+ */\n+public class FallibleReconnectableSource extends Source<Void, Void> {\n+\n+  public static volatile boolean fail = false;\n+  public static volatile boolean simultaneouslyStartedSources = false;\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private Scheduler scheduler;\n+  private ScheduledFuture<?> scheduleWithFixedDelay;\n+\n+  private static final AtomicInteger countStartedSources = new AtomicInteger(0);\n+  private static final Latch latch = new Latch();\n+\n+  @Override\n+  public void onStart(SourceCallback<Void, Void> sourceCallback) throws MuleException {\n+    if (countStartedSources.addAndGet(1) > 1) {\n+      simultaneouslyStartedSources = true;\n+    }\n+    try {\n+      doStart(sourceCallback);\n+    } finally {\n+      countStartedSources.addAndGet(-1);\n+    }\n+  }\n+\n+  private void doStart(SourceCallback<Void, Void> sourceCallback) throws MuleException {\n+    if (fail) {\n+      await();\n+      fail = false;\n+      throw new RuntimeException(\"Fail starting source\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b78fb10f9edb265c674a7a9f0dff6b2648b931"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NzczNDU0", "url": "https://github.com/mulesoft/mule/pull/9439#pullrequestreview-498773454", "createdAt": "2020-09-29T18:39:11Z", "commit": {"oid": "29b78fb10f9edb265c674a7a9f0dff6b2648b931"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1209, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}