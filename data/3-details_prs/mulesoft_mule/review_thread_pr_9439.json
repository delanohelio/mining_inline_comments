{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5Mzk1NTE0", "number": 9439, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDowMzowMlrOElGY-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODozNjo0MVrOEosbJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzM3NDY1OnYy", "diffSide": "LEFT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDowMzowMlrOHUaRTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzo1OTowNlrOHY_DNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2Mzk4Mw==", "bodyText": "why moving this from here to line 312? also, does the doOn vs doAfter change really fix the race condition or just makes it less likely?", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r491163983", "createdAt": "2020-09-18T20:03:02Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java", "diffHunk": "@@ -323,7 +323,6 @@ public void onException(ConnectionException exception) {\n     reconnectionAction\n         .doOnSuccess(v -> onReconnectionSuccessful())\n         .doOnError(this::onReconnectionFailed)\n-        .doAfterTerminate(() -> reconnecting.set(false))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a0bf368b05fd2ee48b1d20616736da7e638089c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2OTM0NA==", "bodyText": "Moving it to line 312 will make it apply only to sources that implement Reconnectable. Other cases are covered by the doWork method (line 548)", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r491169344", "createdAt": "2020-09-18T20:15:01Z", "author": {"login": "gabrieldalborgo"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java", "diffHunk": "@@ -323,7 +323,6 @@ public void onException(ConnectionException exception) {\n     reconnectionAction\n         .doOnSuccess(v -> onReconnectionSuccessful())\n         .doOnError(this::onReconnectionFailed)\n-        .doAfterTerminate(() -> reconnecting.set(false))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2Mzk4Mw=="}, "originalCommit": {"oid": "2a0bf368b05fd2ee48b1d20616736da7e638089c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NzM0NQ==", "bodyText": "this seems to be tackling a symptom rather than the root cause. What's the real problem been solved here? Moving this should have no effect, as no two reconnection tasks should be overlapping. If they do, then the bug is a prior race condition", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r492277345", "createdAt": "2020-09-21T18:54:58Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java", "diffHunk": "@@ -323,7 +323,6 @@ public void onException(ConnectionException exception) {\n     reconnectionAction\n         .doOnSuccess(v -> onReconnectionSuccessful())\n         .doOnError(this::onReconnectionFailed)\n-        .doAfterTerminate(() -> reconnecting.set(false))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2Mzk4Mw=="}, "originalCommit": {"oid": "2a0bf368b05fd2ee48b1d20616736da7e638089c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI5MjE4OQ==", "bodyText": "What I saw, is that the reconnecting variable is being released (at this point) before the source onStart method ends (which runs asyncrhonously sometimes). And if at the source onStart method a connection exception is notified through the source callback, another reconnection overlaps the current one.", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r492292189", "createdAt": "2020-09-21T19:21:14Z", "author": {"login": "gabrieldalborgo"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java", "diffHunk": "@@ -323,7 +323,6 @@ public void onException(ConnectionException exception) {\n     reconnectionAction\n         .doOnSuccess(v -> onReconnectionSuccessful())\n         .doOnError(this::onReconnectionFailed)\n-        .doAfterTerminate(() -> reconnecting.set(false))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2Mzk4Mw=="}, "originalCommit": {"oid": "2a0bf368b05fd2ee48b1d20616736da7e638089c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMyNjg4NA==", "bodyText": "right, but the ting is that reconnection is always asynchronous, with the only exception of sources that implement the Reconnectable interface. So maybe it's not about moving this but about how could the overlap happen in the first place. I could well argue that it's really the doWork method the one which shouldn't be changing the variable and that the actual bug is the overlap, which you're merely hiding here.\nI think you should start by getting good functional tests since the issue seems to revolve exclusively around reconnectable sources which is not something I'm seeing properly replicated on your tests cases.", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r492326884", "createdAt": "2020-09-21T20:28:21Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java", "diffHunk": "@@ -323,7 +323,6 @@ public void onException(ConnectionException exception) {\n     reconnectionAction\n         .doOnSuccess(v -> onReconnectionSuccessful())\n         .doOnError(this::onReconnectionFailed)\n-        .doAfterTerminate(() -> reconnecting.set(false))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2Mzk4Mw=="}, "originalCommit": {"oid": "2a0bf368b05fd2ee48b1d20616736da7e638089c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjMzNTY4Mg==", "bodyText": "I just pushed the test that I forgot before", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r492335682", "createdAt": "2020-09-21T20:45:28Z", "author": {"login": "gabrieldalborgo"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java", "diffHunk": "@@ -323,7 +323,6 @@ public void onException(ConnectionException exception) {\n     reconnectionAction\n         .doOnSuccess(v -> onReconnectionSuccessful())\n         .doOnError(this::onReconnectionFailed)\n-        .doAfterTerminate(() -> reconnecting.set(false))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2Mzk4Mw=="}, "originalCommit": {"oid": "2a0bf368b05fd2ee48b1d20616736da7e638089c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTk2MDg4NQ==", "bodyText": "Change rollbacked, isn't the right fix.", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r495960885", "createdAt": "2020-09-28T13:59:06Z", "author": {"login": "gabrieldalborgo"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java", "diffHunk": "@@ -323,7 +323,6 @@ public void onException(ConnectionException exception) {\n     reconnectionAction\n         .doOnSuccess(v -> onReconnectionSuccessful())\n         .doOnError(this::onReconnectionFailed)\n-        .doAfterTerminate(() -> reconnecting.set(false))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2Mzk4Mw=="}, "originalCommit": {"oid": "2a0bf368b05fd2ee48b1d20616736da7e638089c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzM3NTEyOnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDowMzoxMVrOHUaRiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNzozMDozNFrOHVbUZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2NDA0MA==", "bodyText": "where's the test case for this?", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r491164040", "createdAt": "2020-09-18T20:03:11Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java", "diffHunk": "@@ -309,7 +309,7 @@ public void onException(ConnectionException exception) {\n                 exception);\n \n     Mono<Void> reconnectionAction = sourceAdapter.getReconnectionAction(exception)\n-        .map(p -> from(retryPolicyTemplate.applyPolicy(p, retryScheduler)))\n+        .map(p -> from(retryPolicyTemplate.applyPolicy(p, retryScheduler)).doOnTerminate(() -> reconnecting.set(false)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a0bf368b05fd2ee48b1d20616736da7e638089c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2Njk3NA==", "bodyText": "I'm working on it. This PR is to validate that this fix does not break any tests", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r491166974", "createdAt": "2020-09-18T20:10:17Z", "author": {"login": "gabrieldalborgo"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java", "diffHunk": "@@ -309,7 +309,7 @@ public void onException(ConnectionException exception) {\n                 exception);\n \n     Mono<Void> reconnectionAction = sourceAdapter.getReconnectionAction(exception)\n-        .map(p -> from(retryPolicyTemplate.applyPolicy(p, retryScheduler)))\n+        .map(p -> from(retryPolicyTemplate.applyPolicy(p, retryScheduler)).doOnTerminate(() -> reconnecting.set(false)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2NDA0MA=="}, "originalCommit": {"oid": "2a0bf368b05fd2ee48b1d20616736da7e638089c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjIyOTczNQ==", "bodyText": "This case is covered by: org.mule.test.module.extension.source.CustomReconnectionSourceTestCase.successfulCustomReconnection", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r492229735", "createdAt": "2020-09-21T17:30:34Z", "author": {"login": "gabrieldalborgo"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java", "diffHunk": "@@ -309,7 +309,7 @@ public void onException(ConnectionException exception) {\n                 exception);\n \n     Mono<Void> reconnectionAction = sourceAdapter.getReconnectionAction(exception)\n-        .map(p -> from(retryPolicyTemplate.applyPolicy(p, retryScheduler)))\n+        .map(p -> from(retryPolicyTemplate.applyPolicy(p, retryScheduler)).doOnTerminate(() -> reconnecting.set(false)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE2NDA0MA=="}, "originalCommit": {"oid": "2a0bf368b05fd2ee48b1d20616736da7e638089c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDY3MTg4OnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODo1MDoyNVrOHVeE1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODo1MDoyNVrOHVeE1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NDkwMA==", "bodyText": "don't swallow this exception", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r492274900", "createdAt": "2020-09-21T18:50:25Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();\n+\n+  private Scheduler scheduler;\n+\n+  private static final AtomicReference<Integer> countStartedSources = new AtomicReference<>(0);\n+\n+  private void delay(Long millis) {\n+    try {\n+      Thread.sleep(millis);\n+    } catch (InterruptedException e) {\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85560d8b0bd71e096c2b29e6d38513979caf5880"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDY3NDEyOnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODo1MTowN1rOHVeGSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODo1MTowN1rOHVeGSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NTI3NA==", "bodyText": "all tests in this class are flaky", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r492275274", "createdAt": "2020-09-21T18:51:07Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85560d8b0bd71e096c2b29e6d38513979caf5880"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDY3OTgxOnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODo1Mjo0OVrOHVeJ5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODo1Mjo0OVrOHVeJ5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NjE5OQ==", "bodyText": "Use AtomicInteger instead", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r492276199", "createdAt": "2020-09-21T18:52:49Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();\n+\n+  private Scheduler scheduler;\n+\n+  private static final AtomicReference<Integer> countStartedSources = new AtomicReference<>(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85560d8b0bd71e096c2b29e6d38513979caf5880"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MDY4MTQzOnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODo1MzoxOFrOHVeK1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxODo1MzoxOFrOHVeK1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjI3NjQzOA==", "bodyText": "all tests in this class seem to be testing the implementation rather than behavior", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r492276438", "createdAt": "2020-09-21T18:53:18Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85560d8b0bd71e096c2b29e6d38513979caf5880"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzY0NTE1OnYy", "diffSide": "RIGHT", "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/reconnection/ReconnectionTestCase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzowNDowMlrOHXZn1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDoxODowOVrOHXdL4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5OTA5NQ==", "bodyText": "I think we should make the test shorter, can we guarantee that the issue is fixed waiting less than 30 secs?", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494299095", "createdAt": "2020-09-24T13:04:02Z", "author": {"login": "ndinu"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/reconnection/ReconnectionTestCase.java", "diffHunk": "@@ -88,6 +89,23 @@ public void reconnectSource() throws Exception {\n     });\n   }\n \n+  @Test\n+  public void doNotStartSourceTwiceAfterExceptionOnReconnection() throws Exception {\n+    ((Startable) getFlowConstruct(\"otherReconnectForever\")).start();\n+    check(5000, 1000, () -> !capturedEvents.isEmpty());\n+    switchOtherFail();\n+\n+    checkNot(30000, 1000, () -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "389822214de31d1b516933efcf46e0733483d4db"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwNzAxNQ==", "bodyText": "Let me try it", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494307015", "createdAt": "2020-09-24T13:15:26Z", "author": {"login": "gabrieldalborgo"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/reconnection/ReconnectionTestCase.java", "diffHunk": "@@ -88,6 +89,23 @@ public void reconnectSource() throws Exception {\n     });\n   }\n \n+  @Test\n+  public void doNotStartSourceTwiceAfterExceptionOnReconnection() throws Exception {\n+    ((Startable) getFlowConstruct(\"otherReconnectForever\")).start();\n+    check(5000, 1000, () -> !capturedEvents.isEmpty());\n+    switchOtherFail();\n+\n+    checkNot(30000, 1000, () -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5OTA5NQ=="}, "originalCommit": {"oid": "389822214de31d1b516933efcf46e0733483d4db"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1NzQ3Mw==", "bodyText": "Done", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494357473", "createdAt": "2020-09-24T14:18:09Z", "author": {"login": "gabrieldalborgo"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/reconnection/ReconnectionTestCase.java", "diffHunk": "@@ -88,6 +89,23 @@ public void reconnectSource() throws Exception {\n     });\n   }\n \n+  @Test\n+  public void doNotStartSourceTwiceAfterExceptionOnReconnection() throws Exception {\n+    ((Startable) getFlowConstruct(\"otherReconnectForever\")).start();\n+    check(5000, 1000, () -> !capturedEvents.isEmpty());\n+    switchOtherFail();\n+\n+    checkNot(30000, 1000, () -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDI5OTA5NQ=="}, "originalCommit": {"oid": "389822214de31d1b516933efcf46e0733483d4db"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzY2Mzg0OnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzowODoyNFrOHXZzHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDoxODoyM1rOHXdMiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwMTk4MQ==", "bodyText": "Does it need to wait this much?", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494301981", "createdAt": "2020-09-24T13:08:24Z", "author": {"login": "ndinu"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();\n+\n+  private Scheduler scheduler;\n+\n+  private static final AtomicInteger countStartedSources = new AtomicInteger(0);\n+\n+  @Override\n+  public void onStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    countStartedSources.accumulateAndGet(1, Integer::sum);\n+    delay(1000L);\n+    doStart(sourceCallback);\n+  }\n+\n+  private void doStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    ReconnectableConnection connection = connectionProvider.connect();\n+    this.scheduler = schedulerService.ioScheduler();\n+\n+    if (ReconnectableConnectionProvider.otherFail) {\n+      delay(10000L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "389822214de31d1b516933efcf46e0733483d4db"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwOTI2Mg==", "bodyText": "With 200ms (and maybe less) is enough, but I set a ridiculous value to avoid the test became flaky. Do you you think that is not necessary or not a good approach?", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494309262", "createdAt": "2020-09-24T13:18:36Z", "author": {"login": "gabrieldalborgo"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();\n+\n+  private Scheduler scheduler;\n+\n+  private static final AtomicInteger countStartedSources = new AtomicInteger(0);\n+\n+  @Override\n+  public void onStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    countStartedSources.accumulateAndGet(1, Integer::sum);\n+    delay(1000L);\n+    doStart(sourceCallback);\n+  }\n+\n+  private void doStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    ReconnectableConnection connection = connectionProvider.connect();\n+    this.scheduler = schedulerService.ioScheduler();\n+\n+    if (ReconnectableConnectionProvider.otherFail) {\n+      delay(10000L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwMTk4MQ=="}, "originalCommit": {"oid": "389822214de31d1b516933efcf46e0733483d4db"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxNjkyNQ==", "bodyText": "I think that the wait here will make the tests take longer, and we should avoid it if possible. If less than 200ms is enough, maybe we can use 1 second?", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494316925", "createdAt": "2020-09-24T13:29:07Z", "author": {"login": "ndinu"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();\n+\n+  private Scheduler scheduler;\n+\n+  private static final AtomicInteger countStartedSources = new AtomicInteger(0);\n+\n+  @Override\n+  public void onStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    countStartedSources.accumulateAndGet(1, Integer::sum);\n+    delay(1000L);\n+    doStart(sourceCallback);\n+  }\n+\n+  private void doStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    ReconnectableConnection connection = connectionProvider.connect();\n+    this.scheduler = schedulerService.ioScheduler();\n+\n+    if (ReconnectableConnectionProvider.otherFail) {\n+      delay(10000L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwMTk4MQ=="}, "originalCommit": {"oid": "389822214de31d1b516933efcf46e0733483d4db"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1NzY0Mw==", "bodyText": "Done.", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494357643", "createdAt": "2020-09-24T14:18:23Z", "author": {"login": "gabrieldalborgo"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();\n+\n+  private Scheduler scheduler;\n+\n+  private static final AtomicInteger countStartedSources = new AtomicInteger(0);\n+\n+  @Override\n+  public void onStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    countStartedSources.accumulateAndGet(1, Integer::sum);\n+    delay(1000L);\n+    doStart(sourceCallback);\n+  }\n+\n+  private void doStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    ReconnectableConnection connection = connectionProvider.connect();\n+    this.scheduler = schedulerService.ioScheduler();\n+\n+    if (ReconnectableConnectionProvider.otherFail) {\n+      delay(10000L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwMTk4MQ=="}, "originalCommit": {"oid": "389822214de31d1b516933efcf46e0733483d4db"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mzc0NDY2OnYy", "diffSide": "RIGHT", "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/reconnection/ReconnectionTestCase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzoyNjowN1rOHXakkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDoxODozMFrOHXdNBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxNDY0Mg==", "bodyText": "Is there any way to also check that reconnection was triggered twice and simultaneously? From what I understand this test can also pass if only 1 reconnection is made (which is unlikely due to the Thread sleeps but could also happen if code is changed later on in the Extension Message Source).", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494314642", "createdAt": "2020-09-24T13:26:07Z", "author": {"login": "SebaElizalde"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/reconnection/ReconnectionTestCase.java", "diffHunk": "@@ -88,6 +89,23 @@ public void reconnectSource() throws Exception {\n     });\n   }\n \n+  @Test\n+  public void doNotStartSourceTwiceAfterExceptionOnReconnection() throws Exception {\n+    ((Startable) getFlowConstruct(\"otherReconnectForever\")).start();\n+    check(5000, 1000, () -> !capturedEvents.isEmpty());\n+    switchOtherFail();\n+\n+    checkNot(30000, 1000, () -> {\n+      synchronized (capturedEvents) {\n+        return capturedEvents.stream()\n+            .map(event -> (Integer) event.getMessage().getPayload().getValue())\n+            .filter(startedSources -> startedSources > 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "389822214de31d1b516933efcf46e0733483d4db"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMyODkxMg==", "bodyText": "That is what this test does. The variable startedSources is counting how many sources are starting at the same time. I will rename it to something like currentStartedSources", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494328912", "createdAt": "2020-09-24T13:44:24Z", "author": {"login": "gabrieldalborgo"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/reconnection/ReconnectionTestCase.java", "diffHunk": "@@ -88,6 +89,23 @@ public void reconnectSource() throws Exception {\n     });\n   }\n \n+  @Test\n+  public void doNotStartSourceTwiceAfterExceptionOnReconnection() throws Exception {\n+    ((Startable) getFlowConstruct(\"otherReconnectForever\")).start();\n+    check(5000, 1000, () -> !capturedEvents.isEmpty());\n+    switchOtherFail();\n+\n+    checkNot(30000, 1000, () -> {\n+      synchronized (capturedEvents) {\n+        return capturedEvents.stream()\n+            .map(event -> (Integer) event.getMessage().getPayload().getValue())\n+            .filter(startedSources -> startedSources > 1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxNDY0Mg=="}, "originalCommit": {"oid": "389822214de31d1b516933efcf46e0733483d4db"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1Nzc2Nw==", "bodyText": "Done.", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494357767", "createdAt": "2020-09-24T14:18:30Z", "author": {"login": "gabrieldalborgo"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/reconnection/ReconnectionTestCase.java", "diffHunk": "@@ -88,6 +89,23 @@ public void reconnectSource() throws Exception {\n     });\n   }\n \n+  @Test\n+  public void doNotStartSourceTwiceAfterExceptionOnReconnection() throws Exception {\n+    ((Startable) getFlowConstruct(\"otherReconnectForever\")).start();\n+    check(5000, 1000, () -> !capturedEvents.isEmpty());\n+    switchOtherFail();\n+\n+    checkNot(30000, 1000, () -> {\n+      synchronized (capturedEvents) {\n+        return capturedEvents.stream()\n+            .map(event -> (Integer) event.getMessage().getPayload().getValue())\n+            .filter(startedSources -> startedSources > 1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMxNDY0Mg=="}, "originalCommit": {"oid": "389822214de31d1b516933efcf46e0733483d4db"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTIyNjczOnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOToxMzoxNVrOHXpFiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTowNTowOVrOHXsmJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU1MjQ1OQ==", "bodyText": "we have a ton of interfaces like this already. Simply reuse ReactiveReconnectionCallback", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494552459", "createdAt": "2020-09-24T19:13:15Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java", "diffHunk": "@@ -581,6 +601,45 @@ public Object getWorkOwner() {\n     }\n   }\n \n+  private class WithCompletionCallback implements RetryCallback {\n+\n+    private final CompletionCallback completionCallback;\n+    private final RetryCallback delegate;\n+\n+    WithCompletionCallback(RetryCallback delegate, CompletionCallback completionCallback) {\n+      this.delegate = delegate;\n+      this.completionCallback = completionCallback;\n+    }\n+\n+    @Override\n+    public void doWork(RetryContext context) throws Exception {\n+      try {\n+        delegate.doWork(context);\n+        this.completionCallback.success();\n+      } catch (Exception ex) {\n+        this.completionCallback.error(ex);\n+        throw ex;\n+      }\n+    }\n+\n+    @Override\n+    public String getWorkDescription() {\n+      return delegate.getWorkDescription();\n+    }\n+\n+    @Override\n+    public Object getWorkOwner() {\n+      return delegate.getWorkOwner();\n+    }\n+  }\n+\n+  private interface CompletionCallback {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYwOTk1OQ==", "bodyText": "Done", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494609959", "createdAt": "2020-09-24T21:05:09Z", "author": {"login": "gabrieldalborgo"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java", "diffHunk": "@@ -581,6 +601,45 @@ public Object getWorkOwner() {\n     }\n   }\n \n+  private class WithCompletionCallback implements RetryCallback {\n+\n+    private final CompletionCallback completionCallback;\n+    private final RetryCallback delegate;\n+\n+    WithCompletionCallback(RetryCallback delegate, CompletionCallback completionCallback) {\n+      this.delegate = delegate;\n+      this.completionCallback = completionCallback;\n+    }\n+\n+    @Override\n+    public void doWork(RetryContext context) throws Exception {\n+      try {\n+        delegate.doWork(context);\n+        this.completionCallback.success();\n+      } catch (Exception ex) {\n+        this.completionCallback.error(ex);\n+        throw ex;\n+      }\n+    }\n+\n+    @Override\n+    public String getWorkDescription() {\n+      return delegate.getWorkDescription();\n+    }\n+\n+    @Override\n+    public Object getWorkOwner() {\n+      return delegate.getWorkOwner();\n+    }\n+  }\n+\n+  private interface CompletionCallback {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU1MjQ1OQ=="}, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTIzMTY2OnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOToxNDo0NVrOHXpImw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOToxNDo0NVrOHXpImw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU1MzI0Mw==", "bodyText": "sleeps make this flaky. Use latches instead", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494553243", "createdAt": "2020-09-24T19:14:45Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();\n+\n+  private Scheduler scheduler;\n+\n+  private static final AtomicInteger countStartedSources = new AtomicInteger(0);\n+\n+  @Override\n+  public void onStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    countStartedSources.accumulateAndGet(1, Integer::sum);\n+    doStart(sourceCallback);\n+  }\n+\n+  private void doStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    ReconnectableConnection connection = connectionProvider.connect();\n+    this.scheduler = schedulerService.ioScheduler();\n+\n+    if (ReconnectableConnectionProvider.otherFail) {\n+      delay(1000L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTIzNjM5OnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOToxNjowN1rOHXpLgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTowNToxNVrOHXsmWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU1Mzk4NA==", "bodyText": "why not simlpy addAndGet(-1) ?", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494553984", "createdAt": "2020-09-24T19:16:07Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();\n+\n+  private Scheduler scheduler;\n+\n+  private static final AtomicInteger countStartedSources = new AtomicInteger(0);\n+\n+  @Override\n+  public void onStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    countStartedSources.accumulateAndGet(1, Integer::sum);\n+    doStart(sourceCallback);\n+  }\n+\n+  private void doStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    ReconnectableConnection connection = connectionProvider.connect();\n+    this.scheduler = schedulerService.ioScheduler();\n+\n+    if (ReconnectableConnectionProvider.otherFail) {\n+      delay(1000L);\n+      sourceCallback.onConnectionException(new ConnectionException(new RuntimeException(), connection));\n+      ReconnectableConnectionProvider.otherFail = !ReconnectableConnectionProvider.otherFail;\n+      throw new RuntimeException(\"Fail starting source\");\n+    }\n+\n+    scheduleWithFixedDelay.set(this.scheduler.scheduleWithFixedDelay(() -> {\n+      if (ReconnectableConnectionProvider.otherFail) {\n+        sourceCallback.onConnectionException(new ConnectionException(new RuntimeException(), connection));\n+      } else {\n+        sourceCallback.handle(Result.<Integer, Void>builder().output(countStartedSources.get()).build());\n+      }\n+    }, 0, 1000, MILLISECONDS));\n+  }\n+\n+  @Override\n+  public void onStop() {\n+    countStartedSources.accumulateAndGet(-1, Integer::sum);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYxMDAxMQ==", "bodyText": "Done", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494610011", "createdAt": "2020-09-24T21:05:15Z", "author": {"login": "gabrieldalborgo"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();\n+\n+  private Scheduler scheduler;\n+\n+  private static final AtomicInteger countStartedSources = new AtomicInteger(0);\n+\n+  @Override\n+  public void onStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    countStartedSources.accumulateAndGet(1, Integer::sum);\n+    doStart(sourceCallback);\n+  }\n+\n+  private void doStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    ReconnectableConnection connection = connectionProvider.connect();\n+    this.scheduler = schedulerService.ioScheduler();\n+\n+    if (ReconnectableConnectionProvider.otherFail) {\n+      delay(1000L);\n+      sourceCallback.onConnectionException(new ConnectionException(new RuntimeException(), connection));\n+      ReconnectableConnectionProvider.otherFail = !ReconnectableConnectionProvider.otherFail;\n+      throw new RuntimeException(\"Fail starting source\");\n+    }\n+\n+    scheduleWithFixedDelay.set(this.scheduler.scheduleWithFixedDelay(() -> {\n+      if (ReconnectableConnectionProvider.otherFail) {\n+        sourceCallback.onConnectionException(new ConnectionException(new RuntimeException(), connection));\n+      } else {\n+        sourceCallback.handle(Result.<Integer, Void>builder().output(countStartedSources.get()).build());\n+      }\n+    }, 0, 1000, MILLISECONDS));\n+  }\n+\n+  @Override\n+  public void onStop() {\n+    countStartedSources.accumulateAndGet(-1, Integer::sum);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU1Mzk4NA=="}, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTI2MTA3OnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOToyMzozNVrOHXpalg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTowNToyNFrOHXsmqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU1Nzg0Ng==", "bodyText": "why is this in an atomic reference? I don't see the need and you're taking no value out of it", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494557846", "createdAt": "2020-09-24T19:23:35Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYxMDA5MQ==", "bodyText": "Done", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494610091", "createdAt": "2020-09-24T21:05:24Z", "author": {"login": "gabrieldalborgo"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU1Nzg0Ng=="}, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTI3NDkzOnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOToyNzo0NlrOHXpjEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTowNTozOVrOHXsnIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2MDAxOA==", "bodyText": "= false", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494560018", "createdAt": "2020-09-24T19:27:46Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();\n+\n+  private Scheduler scheduler;\n+\n+  private static final AtomicInteger countStartedSources = new AtomicInteger(0);\n+\n+  @Override\n+  public void onStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    countStartedSources.accumulateAndGet(1, Integer::sum);\n+    doStart(sourceCallback);\n+  }\n+\n+  private void doStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    ReconnectableConnection connection = connectionProvider.connect();\n+    this.scheduler = schedulerService.ioScheduler();\n+\n+    if (ReconnectableConnectionProvider.otherFail) {\n+      delay(1000L);\n+      sourceCallback.onConnectionException(new ConnectionException(new RuntimeException(), connection));\n+      ReconnectableConnectionProvider.otherFail = !ReconnectableConnectionProvider.otherFail;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYxMDIxMQ==", "bodyText": "Done", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494610211", "createdAt": "2020-09-24T21:05:39Z", "author": {"login": "gabrieldalborgo"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();\n+\n+  private Scheduler scheduler;\n+\n+  private static final AtomicInteger countStartedSources = new AtomicInteger(0);\n+\n+  @Override\n+  public void onStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    countStartedSources.accumulateAndGet(1, Integer::sum);\n+    doStart(sourceCallback);\n+  }\n+\n+  private void doStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    ReconnectableConnection connection = connectionProvider.connect();\n+    this.scheduler = schedulerService.ioScheduler();\n+\n+    if (ReconnectableConnectionProvider.otherFail) {\n+      delay(1000L);\n+      sourceCallback.onConnectionException(new ConnectionException(new RuntimeException(), connection));\n+      ReconnectableConnectionProvider.otherFail = !ReconnectableConnectionProvider.otherFail;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2MDAxOA=="}, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTI4NzY1OnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOTozMToyNVrOHXpq_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTowNTo0M1rOHXsnPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2MjA0Ng==", "bodyText": "addAndGet(1)", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494562046", "createdAt": "2020-09-24T19:31:25Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();\n+\n+  private Scheduler scheduler;\n+\n+  private static final AtomicInteger countStartedSources = new AtomicInteger(0);\n+\n+  @Override\n+  public void onStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    countStartedSources.accumulateAndGet(1, Integer::sum);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYxMDIzOQ==", "bodyText": "Done", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494610239", "createdAt": "2020-09-24T21:05:43Z", "author": {"login": "gabrieldalborgo"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();\n+\n+  private Scheduler scheduler;\n+\n+  private static final AtomicInteger countStartedSources = new AtomicInteger(0);\n+\n+  @Override\n+  public void onStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    countStartedSources.accumulateAndGet(1, Integer::sum);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2MjA0Ng=="}, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTI5MzE2OnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOTozMzoxMVrOHXpudA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOTozMzoxMVrOHXpudA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2MjkzMg==", "bodyText": "pushing and capturing an integer to the flow is probalby going to lead to a flaky test. Specially since you are using a source which fails exactly once every one a day and you're forcing a sleep which happens to be the exact half of the reconnection frequency.", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494562932", "createdAt": "2020-09-24T19:33:11Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private final AtomicReference<ScheduledFuture<?>> scheduleWithFixedDelay = new AtomicReference<>();\n+\n+  private Scheduler scheduler;\n+\n+  private static final AtomicInteger countStartedSources = new AtomicInteger(0);\n+\n+  @Override\n+  public void onStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    countStartedSources.accumulateAndGet(1, Integer::sum);\n+    doStart(sourceCallback);\n+  }\n+\n+  private void doStart(SourceCallback<Integer, Void> sourceCallback) throws MuleException {\n+    ReconnectableConnection connection = connectionProvider.connect();\n+    this.scheduler = schedulerService.ioScheduler();\n+\n+    if (ReconnectableConnectionProvider.otherFail) {\n+      delay(1000L);\n+      sourceCallback.onConnectionException(new ConnectionException(new RuntimeException(), connection));\n+      ReconnectableConnectionProvider.otherFail = !ReconnectableConnectionProvider.otherFail;\n+      throw new RuntimeException(\"Fail starting source\");\n+    }\n+\n+    scheduleWithFixedDelay.set(this.scheduler.scheduleWithFixedDelay(() -> {\n+      if (ReconnectableConnectionProvider.otherFail) {\n+        sourceCallback.onConnectionException(new ConnectionException(new RuntimeException(), connection));\n+      } else {\n+        sourceCallback.handle(Result.<Integer, Void>builder().output(countStartedSources.get()).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTI5ODE1OnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOTozNDo0NlrOHXpxjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTowNTo0OVrOHXsnbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2MzcyNg==", "bodyText": "use a more meaningful name", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494563726", "createdAt": "2020-09-24T19:34:46Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYxMDI4Ng==", "bodyText": "Done", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494610286", "createdAt": "2020-09-24T21:05:49Z", "author": {"login": "gabrieldalborgo"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/OtherReconnectionSource.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import javax.inject.Inject;\n+\n+public class OtherReconnectionSource extends Source<Integer, Void> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2MzcyNg=="}, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTI5OTIxOnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/ReconnectableConnectionProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOTozNTowNVrOHXpyLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTowNTo1M1rOHXsngA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2Mzg4NQ==", "bodyText": "use a more meaningful name", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494563885", "createdAt": "2020-09-24T19:35:05Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/ReconnectableConnectionProvider.java", "diffHunk": "@@ -28,6 +28,7 @@\n public class ReconnectableConnectionProvider implements CachedConnectionProvider<ReconnectableConnection> {\n \n   public static volatile boolean fail;\n+  public static volatile boolean otherFail;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYxMDMwNA==", "bodyText": "Done", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494610304", "createdAt": "2020-09-24T21:05:53Z", "author": {"login": "gabrieldalborgo"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/ReconnectableConnectionProvider.java", "diffHunk": "@@ -28,6 +28,7 @@\n public class ReconnectableConnectionProvider implements CachedConnectionProvider<ReconnectableConnection> {\n \n   public static volatile boolean fail;\n+  public static volatile boolean otherFail;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2Mzg4NQ=="}, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTMwMzU1OnYy", "diffSide": "RIGHT", "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/reconnection/ReconnectionTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOTozNjoyN1rOHXp0wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTowOToxNVrOHXstmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2NDU0NA==", "bodyText": "this test depends greatly on ReconnectableConnectionProvider.otherFail. The initial value of that flag should be set of doSetUp()", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494564544", "createdAt": "2020-09-24T19:36:27Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/reconnection/ReconnectionTestCase.java", "diffHunk": "@@ -88,6 +89,23 @@ public void reconnectSource() throws Exception {\n     });\n   }\n \n+  @Test\n+  public void doNotStartSourceTwiceAfterExceptionOnReconnection() throws Exception {\n+    ((Startable) getFlowConstruct(\"otherReconnectForever\")).start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYxMTg2Ng==", "bodyText": "Done", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494611866", "createdAt": "2020-09-24T21:09:15Z", "author": {"login": "gabrieldalborgo"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/reconnection/ReconnectionTestCase.java", "diffHunk": "@@ -88,6 +89,23 @@ public void reconnectSource() throws Exception {\n     });\n   }\n \n+  @Test\n+  public void doNotStartSourceTwiceAfterExceptionOnReconnection() throws Exception {\n+    ((Startable) getFlowConstruct(\"otherReconnectForever\")).start();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2NDU0NA=="}, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTMwNTMwOnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/ReconnectionOperations.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOTozNjo1N1rOHXp1zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMTowNjowMlrOHXsn0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2NDgxMg==", "bodyText": "meaninful name", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494564812", "createdAt": "2020-09-24T19:36:57Z", "author": {"login": "marianogonzalez"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/ReconnectionOperations.java", "diffHunk": "@@ -39,6 +40,10 @@ public void switchConnection() {\n     fail = !fail;\n   }\n \n+  public void switchOtherFail() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYxMDM4NA==", "bodyText": "Done", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r494610384", "createdAt": "2020-09-24T21:06:02Z", "author": {"login": "gabrieldalborgo"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/ReconnectionOperations.java", "diffHunk": "@@ -39,6 +40,10 @@ public void switchConnection() {\n     fail = !fail;\n   }\n \n+  public void switchOtherFail() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2NDgxMg=="}, "originalCommit": {"oid": "2451d5a87fa8f4f82f145fdda9e53c7373910461"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDkwMTUxOnYy", "diffSide": "RIGHT", "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/reconnection/ReconnectionTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzo1MjoyN1rOHZ6LuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzo1MjoyN1rOHZ6LuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkyOTcyMQ==", "bodyText": "use constants for the values.", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r496929721", "createdAt": "2020-09-29T17:52:27Z", "author": {"login": "fsgonz"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/reconnection/ReconnectionTestCase.java", "diffHunk": "@@ -88,6 +92,16 @@ public void reconnectSource() throws Exception {\n     });\n   }\n \n+  @Test\n+  public void doNotStartSourceTwiceAfterExceptionOnReconnection() throws Exception {\n+    ((Startable) getFlowConstruct(\"reconnectAfterFailure\")).start();\n+    check(5000, 1000, () -> !capturedEvents.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc7d81bb2c4cdb433e7941e25264e4cb045d945a"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDkwMzc3OnYy", "diffSide": "RIGHT", "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/reconnection/ReconnectionTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzo1MzowNFrOHZ6NFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODoyMDoxMFrOHZ7Lpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkzMDA3MQ==", "bodyText": "use constants for the values. Is there a reason why the checknot is different from the check (5000 vs 4000?)", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r496930071", "createdAt": "2020-09-29T17:53:04Z", "author": {"login": "fsgonz"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/reconnection/ReconnectionTestCase.java", "diffHunk": "@@ -88,6 +92,16 @@ public void reconnectSource() throws Exception {\n     });\n   }\n \n+  @Test\n+  public void doNotStartSourceTwiceAfterExceptionOnReconnection() throws Exception {\n+    ((Startable) getFlowConstruct(\"reconnectAfterFailure\")).start();\n+    check(5000, 1000, () -> !capturedEvents.isEmpty());\n+    FallibleReconnectableSource.fail = true;\n+    checkNot(4000, 500, () -> FallibleReconnectableSource.simultaneouslyStartedSources);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc7d81bb2c4cdb433e7941e25264e4cb045d945a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk0NjA4Nw==", "bodyText": "No, there isn't. I will change it to 5000 again, so there is no confusion", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r496946087", "createdAt": "2020-09-29T18:20:10Z", "author": {"login": "gabrieldalborgo"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/reconnection/ReconnectionTestCase.java", "diffHunk": "@@ -88,6 +92,16 @@ public void reconnectSource() throws Exception {\n     });\n   }\n \n+  @Test\n+  public void doNotStartSourceTwiceAfterExceptionOnReconnection() throws Exception {\n+    ((Startable) getFlowConstruct(\"reconnectAfterFailure\")).start();\n+    check(5000, 1000, () -> !capturedEvents.isEmpty());\n+    FallibleReconnectableSource.fail = true;\n+    checkNot(4000, 500, () -> FallibleReconnectableSource.simultaneouslyStartedSources);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkzMDA3MQ=="}, "originalCommit": {"oid": "bc7d81bb2c4cdb433e7941e25264e4cb045d945a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDkwNjAwOnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/FallibleReconnectableSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzo1Mzo0MFrOHZ6ObA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzo1Mzo0MFrOHZ6ObA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkzMDQxMg==", "bodyText": "add jdoc.", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r496930412", "createdAt": "2020-09-29T17:53:40Z", "author": {"login": "fsgonz"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/FallibleReconnectableSource.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.api.util.concurrent.Latch;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.inject.Inject;\n+\n+public class FallibleReconnectableSource extends Source<Void, Void> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc7d81bb2c4cdb433e7941e25264e4cb045d945a"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMDkzNzAwOnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/FallibleReconnectableSource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODowMTo1OFrOHZ6iBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODowMTo1OFrOHZ6iBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkzNTQzMQ==", "bodyText": "Shouldn't this verify that there are two countedStartedSources simultaneously in the onStart instead of substracting in the onStop. What you need to verify is that the onStart is not executed again until the firs one ended.", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r496935431", "createdAt": "2020-09-29T18:01:58Z", "author": {"login": "fsgonz"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/FallibleReconnectableSource.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.api.util.concurrent.Latch;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.inject.Inject;\n+\n+public class FallibleReconnectableSource extends Source<Void, Void> {\n+\n+  public static volatile boolean fail = false;\n+  public static volatile boolean simultaneouslyStartedSources = false;\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private Scheduler scheduler;\n+  private ScheduledFuture<?> scheduleWithFixedDelay;\n+\n+  private static final AtomicInteger countStartedSources = new AtomicInteger(0);\n+  private static final Latch latch = new Latch();\n+\n+  @Override\n+  public void onStart(SourceCallback<Void, Void> sourceCallback) throws MuleException {\n+    if (countStartedSources.addAndGet(1) > 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc7d81bb2c4cdb433e7941e25264e4cb045d945a"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExMTA2MzQzOnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/FallibleReconnectableSource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODozNjo0MVrOHZ7wpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxODozOTowMVrOHZ71bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1NTU1Ng==", "bodyText": "Why make this fail again? In case you want to retry that a new reconnection triggers a new start on the source should this be a onConnectionException.", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r496955556", "createdAt": "2020-09-29T18:36:41Z", "author": {"login": "fsgonz"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/FallibleReconnectableSource.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.api.util.concurrent.Latch;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.inject.Inject;\n+\n+/**\n+ * This class represents a {@link Source} that can fail starting repeatedly and after all reconnect successfully.\n+ * Also keeps in track if multiple instances were starting at the same time.\n+ */\n+public class FallibleReconnectableSource extends Source<Void, Void> {\n+\n+  public static volatile boolean fail = false;\n+  public static volatile boolean simultaneouslyStartedSources = false;\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private Scheduler scheduler;\n+  private ScheduledFuture<?> scheduleWithFixedDelay;\n+\n+  private static final AtomicInteger countStartedSources = new AtomicInteger(0);\n+  private static final Latch latch = new Latch();\n+\n+  @Override\n+  public void onStart(SourceCallback<Void, Void> sourceCallback) throws MuleException {\n+    if (countStartedSources.addAndGet(1) > 1) {\n+      simultaneouslyStartedSources = true;\n+    }\n+    try {\n+      doStart(sourceCallback);\n+    } finally {\n+      countStartedSources.addAndGet(-1);\n+    }\n+  }\n+\n+  private void doStart(SourceCallback<Void, Void> sourceCallback) throws MuleException {\n+    if (fail) {\n+      await();\n+      fail = false;\n+      throw new RuntimeException(\"Fail starting source\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29b78fb10f9edb265c674a7a9f0dff6b2648b931"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1Njc4Mg==", "bodyText": "As per slack, this has the same effect.", "url": "https://github.com/mulesoft/mule/pull/9439#discussion_r496956782", "createdAt": "2020-09-29T18:39:01Z", "author": {"login": "fsgonz"}, "path": "tests/test-extensions/reconnection-ext/src/main/java/org/mule/extension/test/extension/reconnection/FallibleReconnectableSource.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.extension.test.extension.reconnection;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+import org.mule.runtime.api.connection.ConnectionProvider;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.scheduler.Scheduler;\n+import org.mule.runtime.api.scheduler.SchedulerService;\n+import org.mule.runtime.api.util.concurrent.Latch;\n+import org.mule.runtime.extension.api.annotation.param.Connection;\n+import org.mule.runtime.extension.api.runtime.operation.Result;\n+import org.mule.runtime.extension.api.runtime.source.Source;\n+import org.mule.runtime.extension.api.runtime.source.SourceCallback;\n+\n+import java.util.concurrent.ScheduledFuture;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import javax.inject.Inject;\n+\n+/**\n+ * This class represents a {@link Source} that can fail starting repeatedly and after all reconnect successfully.\n+ * Also keeps in track if multiple instances were starting at the same time.\n+ */\n+public class FallibleReconnectableSource extends Source<Void, Void> {\n+\n+  public static volatile boolean fail = false;\n+  public static volatile boolean simultaneouslyStartedSources = false;\n+\n+  @Connection\n+  ConnectionProvider<ReconnectableConnection> connectionProvider;\n+\n+  @Inject\n+  SchedulerService schedulerService;\n+\n+  private Scheduler scheduler;\n+  private ScheduledFuture<?> scheduleWithFixedDelay;\n+\n+  private static final AtomicInteger countStartedSources = new AtomicInteger(0);\n+  private static final Latch latch = new Latch();\n+\n+  @Override\n+  public void onStart(SourceCallback<Void, Void> sourceCallback) throws MuleException {\n+    if (countStartedSources.addAndGet(1) > 1) {\n+      simultaneouslyStartedSources = true;\n+    }\n+    try {\n+      doStart(sourceCallback);\n+    } finally {\n+      countStartedSources.addAndGet(-1);\n+    }\n+  }\n+\n+  private void doStart(SourceCallback<Void, Void> sourceCallback) throws MuleException {\n+    if (fail) {\n+      await();\n+      fail = false;\n+      throw new RuntimeException(\"Fail starting source\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Njk1NTU1Ng=="}, "originalCommit": {"oid": "29b78fb10f9edb265c674a7a9f0dff6b2648b931"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4720, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}