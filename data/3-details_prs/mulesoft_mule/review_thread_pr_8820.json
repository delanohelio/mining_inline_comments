{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NDU3OTAx", "number": 8820, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODozMjoyN1rOD0575A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToxNTowOFrOD07F0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODAxNzY0OnYy", "diffSide": "RIGHT", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/api/dsl/model/metadata/ComponentAstBasedMetadataCacheIdGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODozMjoyN1rOGKFD4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODozMjoyN1rOGKFD4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIyMTg1OQ==", "bodyText": "Change the @ since versions", "url": "https://github.com/mulesoft/mule/pull/8820#discussion_r413221859", "createdAt": "2020-04-22T18:32:27Z", "author": {"login": "lucianoRM"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/api/dsl/model/metadata/ComponentAstBasedMetadataCacheIdGenerator.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.config.api.dsl.model.metadata;\n+\n+import static java.lang.String.format;\n+import static java.util.Collections.emptyList;\n+import static java.util.Optional.empty;\n+import static java.util.Optional.of;\n+import static java.util.stream.Collectors.toList;\n+import static org.mule.runtime.api.util.Preconditions.checkArgument;\n+import static org.mule.runtime.config.api.dsl.model.metadata.ComponentBasedIdHelper.getModelNameAst;\n+import static org.mule.runtime.config.api.dsl.model.metadata.ComponentBasedIdHelper.getSourceElementName;\n+import static org.mule.runtime.config.api.dsl.model.metadata.ComponentBasedIdHelper.resolveConfigName;\n+import static org.mule.runtime.config.api.dsl.model.metadata.ComponentBasedIdHelper.sourceElementNameFromSimpleValue;\n+import static org.mule.runtime.core.api.util.StringUtils.isBlank;\n+\n+import org.mule.metadata.api.model.ArrayType;\n+import org.mule.metadata.api.model.ObjectType;\n+import org.mule.metadata.api.model.StringType;\n+import org.mule.metadata.api.visitor.MetadataTypeVisitor;\n+import org.mule.runtime.api.component.ComponentIdentifier;\n+import org.mule.runtime.api.component.location.Location;\n+import org.mule.runtime.api.meta.model.ComponentModel;\n+import org.mule.runtime.api.meta.model.EnrichableModel;\n+import org.mule.runtime.api.meta.model.HasOutputModel;\n+import org.mule.runtime.api.meta.model.config.ConfigurationModel;\n+import org.mule.runtime.api.meta.model.parameter.ParameterModel;\n+import org.mule.runtime.api.meta.model.parameter.ParameterizedModel;\n+import org.mule.runtime.api.metadata.resolving.PartialTypeKeysResolver;\n+import org.mule.runtime.api.util.Reference;\n+import org.mule.runtime.ast.api.ComponentAst;\n+import org.mule.runtime.ast.api.ComponentParameterAst;\n+import org.mule.runtime.config.api.dsl.model.metadata.types.AttributesMetadataResolutionTypeInformation;\n+import org.mule.runtime.config.api.dsl.model.metadata.types.InputMetadataResolutionTypeInformation;\n+import org.mule.runtime.config.api.dsl.model.metadata.types.KeysMetadataResolutionTypeInformation;\n+import org.mule.runtime.config.api.dsl.model.metadata.types.MetadataResolutionTypeInformation;\n+import org.mule.runtime.config.api.dsl.model.metadata.types.OutputMetadataResolutionTypeInformation;\n+import org.mule.runtime.core.internal.locator.ComponentLocator;\n+import org.mule.runtime.core.internal.metadata.cache.MetadataCacheId;\n+import org.mule.runtime.core.internal.metadata.cache.MetadataCacheIdGenerator;\n+import org.mule.runtime.extension.api.declaration.type.annotation.TypeDslAnnotation;\n+import org.mule.runtime.extension.api.property.MetadataKeyIdModelProperty;\n+import org.mule.runtime.extension.api.property.MetadataKeyPartModelProperty;\n+import org.mule.runtime.extension.api.property.RequiredForMetadataModelProperty;\n+import org.mule.runtime.module.extension.internal.loader.java.property.MetadataResolverFactoryModelProperty;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n+\n+/**\n+ * A {@link ComponentAst} based implementation of a {@link MetadataCacheIdGenerator}\n+ *\n+ * @since 4.1.4, 4.2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13cb9a4070f1c92b5fca88fc9a8321d09d9e30c"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODEyMzMxOnYy", "diffSide": "RIGHT", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/api/dsl/model/metadata/ComponentAstBasedValueProviderCacheIdGenerator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODo1NjowNlrOGKGDtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODo1NjowNlrOGKGDtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzODE5Ng==", "bodyText": "Remove this comment, this was already discussed and the current behavior is ok", "url": "https://github.com/mulesoft/mule/pull/8820#discussion_r413238196", "createdAt": "2020-04-22T18:56:06Z", "author": {"login": "lucianoRM"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/api/dsl/model/metadata/ComponentAstBasedValueProviderCacheIdGenerator.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.config.api.dsl.model.metadata;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Optional.empty;\n+import static java.util.Optional.of;\n+import static java.util.function.Function.identity;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+import static org.mule.runtime.config.api.dsl.model.metadata.ComponentBasedIdHelper.getSourceElementName;\n+import static org.mule.runtime.config.api.dsl.model.metadata.ComponentBasedIdHelper.resolveConfigName;\n+import static org.mule.runtime.config.api.dsl.model.metadata.ComponentBasedIdHelper.sourceElementNameFromSimpleValue;\n+import static org.mule.runtime.core.internal.value.cache.ValueProviderCacheId.ValueProviderCacheIdBuilder.aValueProviderCacheId;\n+import static org.mule.runtime.core.internal.value.cache.ValueProviderCacheId.ValueProviderCacheIdBuilder.fromElementWithName;\n+\n+import org.mule.runtime.api.component.location.Location;\n+import org.mule.runtime.api.meta.model.ComponentModel;\n+import org.mule.runtime.api.meta.model.EnrichableModel;\n+import org.mule.runtime.api.meta.model.config.ConfigurationModel;\n+import org.mule.runtime.api.meta.model.connection.ConnectionProviderModel;\n+import org.mule.runtime.api.meta.model.parameter.ParameterModel;\n+import org.mule.runtime.api.meta.model.parameter.ParameterizedModel;\n+import org.mule.runtime.api.meta.model.parameter.ValueProviderModel;\n+import org.mule.runtime.ast.api.ComponentAst;\n+import org.mule.runtime.ast.api.ComponentParameterAst;\n+import org.mule.runtime.core.internal.locator.ComponentLocator;\n+import org.mule.runtime.core.internal.value.cache.ValueProviderCacheId;\n+import org.mule.runtime.core.internal.value.cache.ValueProviderCacheIdGenerator;\n+import org.mule.runtime.extension.api.property.RequiredForMetadataModelProperty;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import com.google.common.base.Objects;\n+\n+public class ComponentAstBasedValueProviderCacheIdGenerator implements ValueProviderCacheIdGenerator<ComponentAst> {\n+\n+  private final ComponentLocator<ComponentAst> locator;\n+\n+  public ComponentAstBasedValueProviderCacheIdGenerator(ComponentLocator<ComponentAst> locator) {\n+    this.locator = locator;\n+  }\n+\n+  /**\n+   * {@inheritDoc}\n+   * <p/>\n+   * The returned {@link ValueProviderCacheId} will contain all acting parameters required by the\n+   * {@link org.mule.runtime.extension.api.values.ValueProvider} as parts. In case the {@link ComponentAst} corresponds to a\n+   * Source or Operation, if the {@link org.mule.runtime.extension.api.values.ValueProvider} requires a connection or a\n+   * configuration, their id will be added as part. The resolution of a config or connection id as part is different from the one\n+   * done when their are the one's holding the resolving parameter. In the case they are parts needed by another\n+   * {@link org.mule.runtime.extension.api.values.ValueProvider}, acting parameters will not exist. Therefore, only parameters\n+   * required for metadata are used as input to calculate the {@link ValueProviderCacheId}.\n+   */\n+  @Override\n+  public Optional<ValueProviderCacheId> getIdForResolvedValues(ComponentAst containerComponent, String parameterName) {\n+    return ifContainsParameter(containerComponent, parameterName)\n+        .flatMap(ParameterModel::getValueProviderModel)\n+        .flatMap(valueProviderModel -> resolveParametersInformation(containerComponent)\n+            .flatMap(infoMap -> resolveId(containerComponent, valueProviderModel, infoMap)));\n+  }\n+\n+  private Optional<ParameterModel> ifContainsParameter(ComponentAst containerComponent, String parameterName) {\n+    return containerComponent.getModel(ParameterizedModel.class)\n+        .flatMap(parameterizedModel -> parameterizedModel\n+            .getAllParameterModels()\n+            .stream()\n+            .filter(p -> Objects.equal(parameterName, p.getName()))\n+            .findAny());\n+  }\n+\n+  private Optional<Map<String, ParameterModelInformation>> resolveParametersInformation(ComponentAst containerComponent) {\n+    return containerComponent.getModel(ParameterizedModel.class)\n+        .map(parameterizedModel -> containerComponent.getParameters()\n+            .stream()\n+            .map(p -> new ParameterModelInformation(p))\n+            .collect(toMap(i -> i.getParameterModel().getName(), identity())));\n+  }\n+\n+  private Optional<ValueProviderCacheId> resolveId(ComponentAst containerComponent, ValueProviderModel valueProviderModel,\n+                                                   Map<String, ParameterModelInformation> parameterModelsInformation) {\n+    final Optional<ComponentModel> compModel = containerComponent.getModel(ComponentModel.class);\n+\n+    if (compModel.isPresent()) {\n+      return resolveForComponentModel(containerComponent, valueProviderModel, parameterModelsInformation);\n+    } else {\n+      return resolveForGlobalElement(containerComponent, valueProviderModel, parameterModelsInformation);\n+    }\n+  }\n+\n+  private Optional<ValueProviderCacheId> resolveForGlobalElement(ComponentAst containerComponent,\n+                                                                 ValueProviderModel valueProviderModel,\n+                                                                 Map<String, ParameterModelInformation> parameterModelsInformation) {\n+    List<ValueProviderCacheId> parts = new LinkedList<>();\n+\n+    parts.add(resolveValueProviderId(valueProviderModel));\n+    parts.addAll(resolveActingParameterIds(containerComponent, valueProviderModel, parameterModelsInformation));\n+\n+    String id = getSourceElementName(containerComponent);\n+    return of(aValueProviderCacheId(fromElementWithName(id).withHashValueFrom(id).containing(parts)));\n+  }\n+\n+  private Optional<ValueProviderCacheId> resolveForComponentModel(ComponentAst containerComponent,\n+                                                                  ValueProviderModel valueProviderModel,\n+                                                                  Map<String, ParameterModelInformation> parameterModelsInformation) {\n+    List<ValueProviderCacheId> parts = new LinkedList<>();\n+\n+    parts.add(resolveValueProviderId(valueProviderModel));\n+    parts.addAll(resolveActingParameterIds(containerComponent, valueProviderModel, parameterModelsInformation));\n+    parts.addAll(resolveIdForInjectedElements(containerComponent, valueProviderModel));\n+\n+    String id = getSourceElementName(containerComponent);\n+    return of(aValueProviderCacheId(fromElementWithName(id).withHashValueFrom(id).containing(parts)));\n+  }\n+\n+  private List<ValueProviderCacheId> resolveIdForInjectedElements(ComponentAst containerComponent,\n+                                                                  ValueProviderModel valueProviderModel) {\n+    if (!valueProviderModel.requiresConfiguration() && !valueProviderModel.requiresConnection()) {\n+      return emptyList();\n+    }\n+\n+    return resolveConfigName(containerComponent)\n+        .flatMap(config -> locator.get(Location.builder().globalName(config).build()))\n+        .filter(configDslElementModel -> configDslElementModel.getModel(ConfigurationModel.class).isPresent())\n+        .map(configDslElementModel -> {\n+          List<ValueProviderCacheId> injectableIds = new LinkedList<>();\n+\n+          if (valueProviderModel.requiresConfiguration()) {\n+            resolveIdForInjectedElement(configDslElementModel)\n+                .ifPresent(id -> injectableIds.add(aValueProviderCacheId(fromElementWithName(\"config: \").containing(id))));\n+          }\n+\n+          if (valueProviderModel.requiresConnection()) {\n+            configDslElementModel.directChildrenStream()\n+                .filter(nested -> nested.getModel(ConnectionProviderModel.class).isPresent())\n+                .forEach(connectionProvider -> resolveIdForInjectedElement(connectionProvider)\n+                    .ifPresent(id -> injectableIds\n+                        .add(aValueProviderCacheId(fromElementWithName(\"connection: \").containing(id)))));\n+          }\n+\n+          return injectableIds;\n+        })\n+        .orElse(emptyList());\n+  }\n+\n+\n+  private Optional<ValueProviderCacheId> resolveIdForInjectedElement(ComponentAst injectedElement) {\n+    return injectedElement.getModel(EnrichableModel.class)\n+        .flatMap(enrichableModel -> {\n+          // TODO: MULE-17761 - Check if this is correct", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13cb9a4070f1c92b5fca88fc9a8321d09d9e30c"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODIwNTQzOnYy", "diffSide": "RIGHT", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/api/dsl/model/metadata/ComponentBasedValueProviderCacheIdGenerator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToxNDo0NlrOGKG1cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToyNjoyNlrOGKHSDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1MDkyOQ==", "bodyText": "Why not remove this class too?", "url": "https://github.com/mulesoft/mule/pull/8820#discussion_r413250929", "createdAt": "2020-04-22T19:14:46Z", "author": {"login": "lucianoRM"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/api/dsl/model/metadata/ComponentBasedValueProviderCacheIdGenerator.java", "diffHunk": "@@ -6,62 +6,33 @@\n  */\n package org.mule.runtime.config.api.dsl.model.metadata;\n \n-import static java.util.Optional.empty;\n import static org.mule.runtime.api.util.Preconditions.checkArgument;\n+\n import org.mule.runtime.api.dsl.DslResolvingContext;\n-import org.mule.runtime.api.meta.model.connection.ConnectionProviderModel;\n import org.mule.runtime.ast.api.ComponentAst;\n-import org.mule.runtime.config.api.dsl.model.DslElementModel;\n-import org.mule.runtime.config.api.dsl.model.DslElementModelFactory;\n-import org.mule.runtime.config.internal.model.ComponentModel;\n import org.mule.runtime.core.internal.locator.ComponentLocator;\n import org.mule.runtime.core.internal.value.cache.ValueProviderCacheId;\n import org.mule.runtime.core.internal.value.cache.ValueProviderCacheIdGenerator;\n \n import java.util.Optional;\n \n+/**\n+ * @deprecated Use {@link ComponentAstBasedValueProviderCacheIdGenerator} directly.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13cb9a4070f1c92b5fca88fc9a8321d09d9e30c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1NDM1Ng==", "bodyText": "tooling is using it", "url": "https://github.com/mulesoft/mule/pull/8820#discussion_r413254356", "createdAt": "2020-04-22T19:20:08Z", "author": {"login": "elrodro83"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/api/dsl/model/metadata/ComponentBasedValueProviderCacheIdGenerator.java", "diffHunk": "@@ -6,62 +6,33 @@\n  */\n package org.mule.runtime.config.api.dsl.model.metadata;\n \n-import static java.util.Optional.empty;\n import static org.mule.runtime.api.util.Preconditions.checkArgument;\n+\n import org.mule.runtime.api.dsl.DslResolvingContext;\n-import org.mule.runtime.api.meta.model.connection.ConnectionProviderModel;\n import org.mule.runtime.ast.api.ComponentAst;\n-import org.mule.runtime.config.api.dsl.model.DslElementModel;\n-import org.mule.runtime.config.api.dsl.model.DslElementModelFactory;\n-import org.mule.runtime.config.internal.model.ComponentModel;\n import org.mule.runtime.core.internal.locator.ComponentLocator;\n import org.mule.runtime.core.internal.value.cache.ValueProviderCacheId;\n import org.mule.runtime.core.internal.value.cache.ValueProviderCacheIdGenerator;\n \n import java.util.Optional;\n \n+/**\n+ * @deprecated Use {@link ComponentAstBasedValueProviderCacheIdGenerator} directly.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1MDkyOQ=="}, "originalCommit": {"oid": "b13cb9a4070f1c92b5fca88fc9a8321d09d9e30c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1ODI1NA==", "bodyText": "But we should change it so that it uses the new implementation. Al least, let's create a jira ticket and add a comment for it.", "url": "https://github.com/mulesoft/mule/pull/8820#discussion_r413258254", "createdAt": "2020-04-22T19:26:26Z", "author": {"login": "lucianoRM"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/api/dsl/model/metadata/ComponentBasedValueProviderCacheIdGenerator.java", "diffHunk": "@@ -6,62 +6,33 @@\n  */\n package org.mule.runtime.config.api.dsl.model.metadata;\n \n-import static java.util.Optional.empty;\n import static org.mule.runtime.api.util.Preconditions.checkArgument;\n+\n import org.mule.runtime.api.dsl.DslResolvingContext;\n-import org.mule.runtime.api.meta.model.connection.ConnectionProviderModel;\n import org.mule.runtime.ast.api.ComponentAst;\n-import org.mule.runtime.config.api.dsl.model.DslElementModel;\n-import org.mule.runtime.config.api.dsl.model.DslElementModelFactory;\n-import org.mule.runtime.config.internal.model.ComponentModel;\n import org.mule.runtime.core.internal.locator.ComponentLocator;\n import org.mule.runtime.core.internal.value.cache.ValueProviderCacheId;\n import org.mule.runtime.core.internal.value.cache.ValueProviderCacheIdGenerator;\n \n import java.util.Optional;\n \n+/**\n+ * @deprecated Use {@link ComponentAstBasedValueProviderCacheIdGenerator} directly.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1MDkyOQ=="}, "originalCommit": {"oid": "b13cb9a4070f1c92b5fca88fc9a8321d09d9e30c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2ODIwNjkxOnYy", "diffSide": "RIGHT", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/api/dsl/model/metadata/ComponentBasedMetadataCacheIdGenerator.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToxNTowOVrOGKG2UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOToyNjoxN1rOGKHRqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1MTE1Mg==", "bodyText": "why not remove this class too?", "url": "https://github.com/mulesoft/mule/pull/8820#discussion_r413251152", "createdAt": "2020-04-22T19:15:09Z", "author": {"login": "lucianoRM"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/api/dsl/model/metadata/ComponentBasedMetadataCacheIdGenerator.java", "diffHunk": "@@ -10,30 +10,27 @@\n \n import org.mule.runtime.api.dsl.DslResolvingContext;\n import org.mule.runtime.ast.api.ComponentAst;\n-import org.mule.runtime.config.api.dsl.model.DslElementModelFactory;\n import org.mule.runtime.config.internal.model.ComponentModel;\n+import org.mule.runtime.core.internal.locator.ComponentLocator;\n import org.mule.runtime.core.internal.metadata.cache.MetadataCacheId;\n import org.mule.runtime.core.internal.metadata.cache.MetadataCacheIdGenerator;\n-import org.mule.runtime.core.internal.metadata.cache.MetadataCacheIdGeneratorFactory.ComponentLocator;\n \n import java.util.Optional;\n \n /**\n  * A {@link ComponentModel} based implementation of a {@link MetadataCacheIdGenerator}\n  *\n  * @since 4.1.4, 4.2.0\n+ * @deprecated Use {@link ComponentAstBasedMetadataCacheIdGenerator} directly.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b13cb9a4070f1c92b5fca88fc9a8321d09d9e30c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1NDQyMQ==", "bodyText": "tooling is using it", "url": "https://github.com/mulesoft/mule/pull/8820#discussion_r413254421", "createdAt": "2020-04-22T19:20:13Z", "author": {"login": "elrodro83"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/api/dsl/model/metadata/ComponentBasedMetadataCacheIdGenerator.java", "diffHunk": "@@ -10,30 +10,27 @@\n \n import org.mule.runtime.api.dsl.DslResolvingContext;\n import org.mule.runtime.ast.api.ComponentAst;\n-import org.mule.runtime.config.api.dsl.model.DslElementModelFactory;\n import org.mule.runtime.config.internal.model.ComponentModel;\n+import org.mule.runtime.core.internal.locator.ComponentLocator;\n import org.mule.runtime.core.internal.metadata.cache.MetadataCacheId;\n import org.mule.runtime.core.internal.metadata.cache.MetadataCacheIdGenerator;\n-import org.mule.runtime.core.internal.metadata.cache.MetadataCacheIdGeneratorFactory.ComponentLocator;\n \n import java.util.Optional;\n \n /**\n  * A {@link ComponentModel} based implementation of a {@link MetadataCacheIdGenerator}\n  *\n  * @since 4.1.4, 4.2.0\n+ * @deprecated Use {@link ComponentAstBasedMetadataCacheIdGenerator} directly.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1MTE1Mg=="}, "originalCommit": {"oid": "b13cb9a4070f1c92b5fca88fc9a8321d09d9e30c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1ODE1NQ==", "bodyText": "But we should change it so that it uses the new implementation. Al least, let's create a jira ticket and add a comment for it.", "url": "https://github.com/mulesoft/mule/pull/8820#discussion_r413258155", "createdAt": "2020-04-22T19:26:17Z", "author": {"login": "lucianoRM"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/api/dsl/model/metadata/ComponentBasedMetadataCacheIdGenerator.java", "diffHunk": "@@ -10,30 +10,27 @@\n \n import org.mule.runtime.api.dsl.DslResolvingContext;\n import org.mule.runtime.ast.api.ComponentAst;\n-import org.mule.runtime.config.api.dsl.model.DslElementModelFactory;\n import org.mule.runtime.config.internal.model.ComponentModel;\n+import org.mule.runtime.core.internal.locator.ComponentLocator;\n import org.mule.runtime.core.internal.metadata.cache.MetadataCacheId;\n import org.mule.runtime.core.internal.metadata.cache.MetadataCacheIdGenerator;\n-import org.mule.runtime.core.internal.metadata.cache.MetadataCacheIdGeneratorFactory.ComponentLocator;\n \n import java.util.Optional;\n \n /**\n  * A {@link ComponentModel} based implementation of a {@link MetadataCacheIdGenerator}\n  *\n  * @since 4.1.4, 4.2.0\n+ * @deprecated Use {@link ComponentAstBasedMetadataCacheIdGenerator} directly.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI1MTE1Mg=="}, "originalCommit": {"oid": "b13cb9a4070f1c92b5fca88fc9a8321d09d9e30c"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 8, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}