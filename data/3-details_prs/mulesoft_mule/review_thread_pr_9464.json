{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzMjcwOTUx", "number": 9464, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoxMDo1OFrOEoEm-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoyMzoxMVrOEoE8Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDU0MDA5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/serialization/internal/NodeWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoxMDo1OFrOHY89aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoxMDo1OFrOHY89aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyNjYzMw==", "bodyText": "static import", "url": "https://github.com/mulesoft/mule/pull/9464#discussion_r495926633", "createdAt": "2020-09-28T13:10:58Z", "author": {"login": "fsgonz"}, "path": "core/src/main/java/org/mule/serialization/internal/NodeWrapper.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.serialization.internal;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.UserDataHandler;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectStreamException;\n+import java.io.Serializable;\n+import java.io.StringWriter;\n+import java.io.WriteAbortedException;\n+\n+public class NodeWrapper implements Serializable, Node {\n+  public static final String NODE_WRAPPER_ENVELOPE_OPEN_TAG = \"<node-wrapper-envelope>\";\n+  public static final String NODE_WRAPPER_ENVELOPE_CLOSE_TAG = \"</node-wrapper-envelope>\";\n+  public static final String CDATA_OPEN = \"<![CDATA[\";\n+  public static final String CDATA_CLOSE = \"]]>\";\n+  private final short nodeType;\n+  private final String nodeName;\n+  private transient Node node;\n+  private String nodeAsString;\n+\n+  public NodeWrapper(Node node) {\n+    this.node = node;\n+    this.nodeType = node.getNodeType();\n+    this.nodeName = node.getNodeName();\n+  }\n+\n+  private Object writeReplace() throws ObjectStreamException {\n+\n+    try {\n+        // In tests this if is not needed but because the Transformer Implementation changes in the actual standalone\n+        // this prevents the CDATA from being transformed into a text node\n+      if (Node.CDATA_SECTION_NODE == node.getNodeType()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f412da691eccef2c3eb753a69d417ad9d8459822"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDU1MTY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/serialization/internal/NodeWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoxMzozNVrOHY9ESw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODoxMDoyNVrOHZKCxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyODM5NQ==", "bodyText": "Remove the but \"needed but because\"", "url": "https://github.com/mulesoft/mule/pull/9464#discussion_r495928395", "createdAt": "2020-09-28T13:13:35Z", "author": {"login": "fsgonz"}, "path": "core/src/main/java/org/mule/serialization/internal/NodeWrapper.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.serialization.internal;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.UserDataHandler;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectStreamException;\n+import java.io.Serializable;\n+import java.io.StringWriter;\n+import java.io.WriteAbortedException;\n+\n+public class NodeWrapper implements Serializable, Node {\n+  public static final String NODE_WRAPPER_ENVELOPE_OPEN_TAG = \"<node-wrapper-envelope>\";\n+  public static final String NODE_WRAPPER_ENVELOPE_CLOSE_TAG = \"</node-wrapper-envelope>\";\n+  public static final String CDATA_OPEN = \"<![CDATA[\";\n+  public static final String CDATA_CLOSE = \"]]>\";\n+  private final short nodeType;\n+  private final String nodeName;\n+  private transient Node node;\n+  private String nodeAsString;\n+\n+  public NodeWrapper(Node node) {\n+    this.node = node;\n+    this.nodeType = node.getNodeType();\n+    this.nodeName = node.getNodeName();\n+  }\n+\n+  private Object writeReplace() throws ObjectStreamException {\n+\n+    try {\n+        // In tests this if is not needed but because the Transformer Implementation changes in the actual standalone", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f412da691eccef2c3eb753a69d417ad9d8459822"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0MDk5Ng==", "bodyText": "Changed it to: \"This ensures the CDATA is not transformed into a text node\"", "url": "https://github.com/mulesoft/mule/pull/9464#discussion_r496140996", "createdAt": "2020-09-28T18:10:25Z", "author": {"login": "pabloperalta"}, "path": "core/src/main/java/org/mule/serialization/internal/NodeWrapper.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.serialization.internal;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.UserDataHandler;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectStreamException;\n+import java.io.Serializable;\n+import java.io.StringWriter;\n+import java.io.WriteAbortedException;\n+\n+public class NodeWrapper implements Serializable, Node {\n+  public static final String NODE_WRAPPER_ENVELOPE_OPEN_TAG = \"<node-wrapper-envelope>\";\n+  public static final String NODE_WRAPPER_ENVELOPE_CLOSE_TAG = \"</node-wrapper-envelope>\";\n+  public static final String CDATA_OPEN = \"<![CDATA[\";\n+  public static final String CDATA_CLOSE = \"]]>\";\n+  private final short nodeType;\n+  private final String nodeName;\n+  private transient Node node;\n+  private String nodeAsString;\n+\n+  public NodeWrapper(Node node) {\n+    this.node = node;\n+    this.nodeType = node.getNodeType();\n+    this.nodeName = node.getNodeName();\n+  }\n+\n+  private Object writeReplace() throws ObjectStreamException {\n+\n+    try {\n+        // In tests this if is not needed but because the Transformer Implementation changes in the actual standalone", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyODM5NQ=="}, "originalCommit": {"oid": "f412da691eccef2c3eb753a69d417ad9d8459822"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDU1OTI0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/serialization/internal/NodeWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoxNToxN1rOHY9I0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoxNToxN1rOHY9I0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyOTU1NQ==", "bodyText": "static import if possible", "url": "https://github.com/mulesoft/mule/pull/9464#discussion_r495929555", "createdAt": "2020-09-28T13:15:17Z", "author": {"login": "fsgonz"}, "path": "core/src/main/java/org/mule/serialization/internal/NodeWrapper.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.serialization.internal;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.UserDataHandler;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectStreamException;\n+import java.io.Serializable;\n+import java.io.StringWriter;\n+import java.io.WriteAbortedException;\n+\n+public class NodeWrapper implements Serializable, Node {\n+  public static final String NODE_WRAPPER_ENVELOPE_OPEN_TAG = \"<node-wrapper-envelope>\";\n+  public static final String NODE_WRAPPER_ENVELOPE_CLOSE_TAG = \"</node-wrapper-envelope>\";\n+  public static final String CDATA_OPEN = \"<![CDATA[\";\n+  public static final String CDATA_CLOSE = \"]]>\";\n+  private final short nodeType;\n+  private final String nodeName;\n+  private transient Node node;\n+  private String nodeAsString;\n+\n+  public NodeWrapper(Node node) {\n+    this.node = node;\n+    this.nodeType = node.getNodeType();\n+    this.nodeName = node.getNodeName();\n+  }\n+\n+  private Object writeReplace() throws ObjectStreamException {\n+\n+    try {\n+        // In tests this if is not needed but because the Transformer Implementation changes in the actual standalone\n+        // this prevents the CDATA from being transformed into a text node\n+      if (Node.CDATA_SECTION_NODE == node.getNodeType()) {\n+        this.nodeAsString = NODE_WRAPPER_ENVELOPE_OPEN_TAG + CDATA_OPEN + node.getNodeValue() + CDATA_CLOSE + NODE_WRAPPER_ENVELOPE_CLOSE_TAG;\n+        return this;\n+      }\n+\n+      // Create and setup transformer\n+      Transformer transformer = TransformerFactory.newInstance().newTransformer();\n+      transformer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\n+\n+      transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f412da691eccef2c3eb753a69d417ad9d8459822"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDU1OTcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/serialization/internal/NodeWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoxNToyNFrOHY9JJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoxNToyNFrOHY9JJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyOTYzNg==", "bodyText": "static import if possible", "url": "https://github.com/mulesoft/mule/pull/9464#discussion_r495929636", "createdAt": "2020-09-28T13:15:24Z", "author": {"login": "fsgonz"}, "path": "core/src/main/java/org/mule/serialization/internal/NodeWrapper.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.serialization.internal;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.UserDataHandler;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectStreamException;\n+import java.io.Serializable;\n+import java.io.StringWriter;\n+import java.io.WriteAbortedException;\n+\n+public class NodeWrapper implements Serializable, Node {\n+  public static final String NODE_WRAPPER_ENVELOPE_OPEN_TAG = \"<node-wrapper-envelope>\";\n+  public static final String NODE_WRAPPER_ENVELOPE_CLOSE_TAG = \"</node-wrapper-envelope>\";\n+  public static final String CDATA_OPEN = \"<![CDATA[\";\n+  public static final String CDATA_CLOSE = \"]]>\";\n+  private final short nodeType;\n+  private final String nodeName;\n+  private transient Node node;\n+  private String nodeAsString;\n+\n+  public NodeWrapper(Node node) {\n+    this.node = node;\n+    this.nodeType = node.getNodeType();\n+    this.nodeName = node.getNodeName();\n+  }\n+\n+  private Object writeReplace() throws ObjectStreamException {\n+\n+    try {\n+        // In tests this if is not needed but because the Transformer Implementation changes in the actual standalone\n+        // this prevents the CDATA from being transformed into a text node\n+      if (Node.CDATA_SECTION_NODE == node.getNodeType()) {\n+        this.nodeAsString = NODE_WRAPPER_ENVELOPE_OPEN_TAG + CDATA_OPEN + node.getNodeValue() + CDATA_CLOSE + NODE_WRAPPER_ENVELOPE_CLOSE_TAG;\n+        return this;\n+      }\n+\n+      // Create and setup transformer\n+      Transformer transformer = TransformerFactory.newInstance().newTransformer();\n+      transformer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f412da691eccef2c3eb753a69d417ad9d8459822"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDU4ODk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/serialization/internal/NodeWrapper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoyMjowMFrOHY9a1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODoxMDo1MVrOHZKDsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzNDE2Ng==", "bodyText": "add jdoc with reference to MULE explaining the problem and fix.", "url": "https://github.com/mulesoft/mule/pull/9464#discussion_r495934166", "createdAt": "2020-09-28T13:22:00Z", "author": {"login": "fsgonz"}, "path": "core/src/main/java/org/mule/serialization/internal/NodeWrapper.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.serialization.internal;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.UserDataHandler;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectStreamException;\n+import java.io.Serializable;\n+import java.io.StringWriter;\n+import java.io.WriteAbortedException;\n+\n+public class NodeWrapper implements Serializable, Node {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f412da691eccef2c3eb753a69d417ad9d8459822"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0MTIzMg==", "bodyText": "Added a JDoc with an explanation", "url": "https://github.com/mulesoft/mule/pull/9464#discussion_r496141232", "createdAt": "2020-09-28T18:10:51Z", "author": {"login": "pabloperalta"}, "path": "core/src/main/java/org/mule/serialization/internal/NodeWrapper.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.serialization.internal;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.UserDataHandler;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectStreamException;\n+import java.io.Serializable;\n+import java.io.StringWriter;\n+import java.io.WriteAbortedException;\n+\n+public class NodeWrapper implements Serializable, Node {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzNDE2Ng=="}, "originalCommit": {"oid": "f412da691eccef2c3eb753a69d417ad9d8459822"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDU5MzU3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/serialization/internal/NodeWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoyMzowNFrOHY9dxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoyMzowNFrOHY9dxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzNDkxOA==", "bodyText": "use static import", "url": "https://github.com/mulesoft/mule/pull/9464#discussion_r495934918", "createdAt": "2020-09-28T13:23:04Z", "author": {"login": "fsgonz"}, "path": "core/src/main/java/org/mule/serialization/internal/NodeWrapper.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.serialization.internal;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.UserDataHandler;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectStreamException;\n+import java.io.Serializable;\n+import java.io.StringWriter;\n+import java.io.WriteAbortedException;\n+\n+public class NodeWrapper implements Serializable, Node {\n+  public static final String NODE_WRAPPER_ENVELOPE_OPEN_TAG = \"<node-wrapper-envelope>\";\n+  public static final String NODE_WRAPPER_ENVELOPE_CLOSE_TAG = \"</node-wrapper-envelope>\";\n+  public static final String CDATA_OPEN = \"<![CDATA[\";\n+  public static final String CDATA_CLOSE = \"]]>\";\n+  private final short nodeType;\n+  private final String nodeName;\n+  private transient Node node;\n+  private String nodeAsString;\n+\n+  public NodeWrapper(Node node) {\n+    this.node = node;\n+    this.nodeType = node.getNodeType();\n+    this.nodeName = node.getNodeName();\n+  }\n+\n+  private Object writeReplace() throws ObjectStreamException {\n+\n+    try {\n+        // In tests this if is not needed but because the Transformer Implementation changes in the actual standalone\n+        // this prevents the CDATA from being transformed into a text node\n+      if (Node.CDATA_SECTION_NODE == node.getNodeType()) {\n+        this.nodeAsString = NODE_WRAPPER_ENVELOPE_OPEN_TAG + CDATA_OPEN + node.getNodeValue() + CDATA_CLOSE + NODE_WRAPPER_ENVELOPE_CLOSE_TAG;\n+        return this;\n+      }\n+\n+      // Create and setup transformer\n+      Transformer transformer = TransformerFactory.newInstance().newTransformer();\n+      transformer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\n+\n+      transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n+\n+      // Turn the node into a string\n+      StringWriter writer = new StringWriter();\n+      transformer.transform(new DOMSource(getSerializingNode(node)), new StreamResult(writer));\n+\n+      this.nodeAsString = NODE_WRAPPER_ENVELOPE_OPEN_TAG + writer.toString() + NODE_WRAPPER_ENVELOPE_CLOSE_TAG;\n+      return this;\n+    } catch (TransformerException e) {\n+      throw new WriteAbortedException(\"Error while serializing Dom object\", e);\n+    }\n+  }\n+\n+  private Object readResolve() throws ObjectStreamException {\n+    try {\n+      DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n+      DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n+      Document parse = dBuilder.parse(new ByteArrayInputStream(this.nodeAsString.getBytes()));\n+      this.node = getDeserializingNode(parse.getFirstChild());\n+    } catch (SAXException e) {\n+      throw new WriteAbortedException(\"Error while deserializing Dom object\", e);\n+    } catch (IOException e) {\n+      throw new WriteAbortedException(\"Error while deserializing Dom object\", e);\n+    } catch (ParserConfigurationException e) {\n+      throw new WriteAbortedException(\"Error while deserializing Dom object\", e);\n+    }\n+\n+    return this;\n+  }\n+\n+  private Node getSerializingNode(Node node) {\n+    switch (node.getNodeType()) {\n+      case Node.ATTRIBUTE_NODE:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f412da691eccef2c3eb753a69d417ad9d8459822"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNDU5NDQzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/serialization/internal/NodeWrapper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoyMzoxMVrOHY9eNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMzoyMzoxMVrOHY9eNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzNTAyOA==", "bodyText": "use static import", "url": "https://github.com/mulesoft/mule/pull/9464#discussion_r495935028", "createdAt": "2020-09-28T13:23:11Z", "author": {"login": "fsgonz"}, "path": "core/src/main/java/org/mule/serialization/internal/NodeWrapper.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.serialization.internal;\n+\n+import org.w3c.dom.Attr;\n+import org.w3c.dom.DOMException;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.NamedNodeMap;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+import org.w3c.dom.UserDataHandler;\n+import org.xml.sax.SAXException;\n+\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import javax.xml.parsers.ParserConfigurationException;\n+import javax.xml.stream.XMLStreamWriter;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathConstants;\n+import javax.xml.xpath.XPathExpression;\n+import javax.xml.xpath.XPathExpressionException;\n+import javax.xml.xpath.XPathFactory;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.ObjectStreamException;\n+import java.io.Serializable;\n+import java.io.StringWriter;\n+import java.io.WriteAbortedException;\n+\n+public class NodeWrapper implements Serializable, Node {\n+  public static final String NODE_WRAPPER_ENVELOPE_OPEN_TAG = \"<node-wrapper-envelope>\";\n+  public static final String NODE_WRAPPER_ENVELOPE_CLOSE_TAG = \"</node-wrapper-envelope>\";\n+  public static final String CDATA_OPEN = \"<![CDATA[\";\n+  public static final String CDATA_CLOSE = \"]]>\";\n+  private final short nodeType;\n+  private final String nodeName;\n+  private transient Node node;\n+  private String nodeAsString;\n+\n+  public NodeWrapper(Node node) {\n+    this.node = node;\n+    this.nodeType = node.getNodeType();\n+    this.nodeName = node.getNodeName();\n+  }\n+\n+  private Object writeReplace() throws ObjectStreamException {\n+\n+    try {\n+        // In tests this if is not needed but because the Transformer Implementation changes in the actual standalone\n+        // this prevents the CDATA from being transformed into a text node\n+      if (Node.CDATA_SECTION_NODE == node.getNodeType()) {\n+        this.nodeAsString = NODE_WRAPPER_ENVELOPE_OPEN_TAG + CDATA_OPEN + node.getNodeValue() + CDATA_CLOSE + NODE_WRAPPER_ENVELOPE_CLOSE_TAG;\n+        return this;\n+      }\n+\n+      // Create and setup transformer\n+      Transformer transformer = TransformerFactory.newInstance().newTransformer();\n+      transformer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\n+\n+      transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");\n+\n+      // Turn the node into a string\n+      StringWriter writer = new StringWriter();\n+      transformer.transform(new DOMSource(getSerializingNode(node)), new StreamResult(writer));\n+\n+      this.nodeAsString = NODE_WRAPPER_ENVELOPE_OPEN_TAG + writer.toString() + NODE_WRAPPER_ENVELOPE_CLOSE_TAG;\n+      return this;\n+    } catch (TransformerException e) {\n+      throw new WriteAbortedException(\"Error while serializing Dom object\", e);\n+    }\n+  }\n+\n+  private Object readResolve() throws ObjectStreamException {\n+    try {\n+      DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();\n+      DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();\n+      Document parse = dBuilder.parse(new ByteArrayInputStream(this.nodeAsString.getBytes()));\n+      this.node = getDeserializingNode(parse.getFirstChild());\n+    } catch (SAXException e) {\n+      throw new WriteAbortedException(\"Error while deserializing Dom object\", e);\n+    } catch (IOException e) {\n+      throw new WriteAbortedException(\"Error while deserializing Dom object\", e);\n+    } catch (ParserConfigurationException e) {\n+      throw new WriteAbortedException(\"Error while deserializing Dom object\", e);\n+    }\n+\n+    return this;\n+  }\n+\n+  private Node getSerializingNode(Node node) {\n+    switch (node.getNodeType()) {\n+      case Node.ATTRIBUTE_NODE:\n+        return ((Attr) this.node).getOwnerElement();\n+      default:\n+        return this.node;\n+    }\n+  }\n+\n+  private Node getDeserializingNode(Node node) {\n+    switch (nodeType) {\n+      case Node.ATTRIBUTE_NODE:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f412da691eccef2c3eb753a69d417ad9d8459822"}, "originalPosition": 112}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4738, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}