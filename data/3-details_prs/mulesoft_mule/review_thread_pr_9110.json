{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NDU3NTI1", "number": 9110, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoxNDozOVrOES7kVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoyNTo0M1rOES7zgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Mjg1NzgwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoxNDozOVrOG4YtDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQyMDo1NDo0OFrOG4eeTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc3ODE5MQ==", "bodyText": "Shouldn't this be also named stopRetrying?", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r461778191", "createdAt": "2020-07-28T18:14:39Z", "author": {"login": "IvanAndresFritzler"}, "path": "core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java", "diffHunk": "@@ -37,6 +38,8 @@\n \n     private MuleContext muleContext;\n \n+    private AtomicBoolean cancelStart = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "294035ccbcfb8f3408c40c5bf52b765311c50162"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTg3MjcxOQ==", "bodyText": "Applied the suggested changes", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r461872719", "createdAt": "2020-07-28T20:54:48Z", "author": {"login": "pabloperalta"}, "path": "core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java", "diffHunk": "@@ -37,6 +38,8 @@\n \n     private MuleContext muleContext;\n \n+    private AtomicBoolean cancelStart = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc3ODE5MQ=="}, "originalCommit": {"oid": "294035ccbcfb8f3408c40c5bf52b765311c50162"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Mjg2MDQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoxNToyMlrOG4Yusg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzozNTo0NlrOG5C90Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc3ODYxMA==", "bodyText": "same (stopRetrying)", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r461778610", "createdAt": "2020-07-28T18:15:22Z", "author": {"login": "IvanAndresFritzler"}, "path": "core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java", "diffHunk": "@@ -98,7 +101,7 @@ public RetryContext execute(RetryCallback callback, WorkManager workManager) thr\n                     }\n                 }\n             }\n-            while (status.isOk());\n+            while (status.isOk() && !cancelStart.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "294035ccbcfb8f3408c40c5bf52b765311c50162"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3MDYwOQ==", "bodyText": "Applied the suggested changes", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r462470609", "createdAt": "2020-07-29T17:35:46Z", "author": {"login": "pabloperalta"}, "path": "core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java", "diffHunk": "@@ -98,7 +101,7 @@ public RetryContext execute(RetryCallback callback, WorkManager workManager) thr\n                     }\n                 }\n             }\n-            while (status.isOk());\n+            while (status.isOk() && !cancelStart.get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc3ODYxMA=="}, "originalCommit": {"oid": "294035ccbcfb8f3408c40c5bf52b765311c50162"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Mjg2MjM4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoxNTo1N1rOG4Yv6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzozNTo1NlrOG5C-Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc3ODkyMw==", "bodyText": "same (isStopRetrying)", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r461778923", "createdAt": "2020-07-28T18:15:57Z", "author": {"login": "IvanAndresFritzler"}, "path": "core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java", "diffHunk": "@@ -154,4 +157,15 @@ public boolean isSynchronous()\n     {\n         return true;\n     }\n+\n+    protected AtomicBoolean getCancelStart()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "294035ccbcfb8f3408c40c5bf52b765311c50162"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3MDczOQ==", "bodyText": "Applied the suggested changes", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r462470739", "createdAt": "2020-07-29T17:35:56Z", "author": {"login": "pabloperalta"}, "path": "core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java", "diffHunk": "@@ -154,4 +157,15 @@ public boolean isSynchronous()\n     {\n         return true;\n     }\n+\n+    protected AtomicBoolean getCancelStart()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc3ODkyMw=="}, "originalCommit": {"oid": "294035ccbcfb8f3408c40c5bf52b765311c50162"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Mjg5NDcyOnYy", "diffSide": "RIGHT", "path": "modules/launcher/src/test/java/org/mule/module/launcher/domain/DefaultMuleDomainTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoyNToxMVrOG4ZEwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzozNjoyMFrOG5C_RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NDI1OA==", "bodyText": "Better to avoid magic numbers and stick to 2 if no extra logic (or cases) involved", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r461784258", "createdAt": "2020-07-28T18:25:11Z", "author": {"login": "IvanAndresFritzler"}, "path": "modules/launcher/src/test/java/org/mule/module/launcher/domain/DefaultMuleDomainTestCase.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.module.launcher.domain;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mule.api.MuleContext;\n+import org.mule.api.context.MuleContextBuilder;\n+import org.mule.api.context.MuleContextFactory;\n+import org.mule.api.registry.MuleRegistry;\n+import org.mule.api.retry.RetryPolicyTemplate;\n+import org.mule.api.transport.Connector;\n+import org.mule.module.launcher.artifact.ArtifactClassLoader;\n+import org.mule.module.launcher.descriptor.DomainDescriptor;\n+\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mule.module.launcher.domain.Domain.DOMAIN_CONFIG_FILE_LOCATION;\n+\n+public class DefaultMuleDomainTestCase\n+{\n+    private static final MuleContextFactory muleContextFactory = mock(MuleContextFactory.class);\n+    private DomainDescriptor domainDescriptor;\n+    private DomainClassLoaderRepository domainClassLoaderRepository;\n+    private DefaultMuleDomain defaultMuleDomain;\n+    private MuleContext muleContext;\n+    private MuleRegistry muleRegistry;\n+\n+    private URL resource;\n+    private ArtifactClassLoader artifactClassLoader;\n+\n+    @Before\n+    public void setUp() throws Exception\n+    {\n+        domainDescriptor = mock(DomainDescriptor.class);\n+        domainClassLoaderRepository = mock(DomainClassLoaderRepository.class);\n+        artifactClassLoader = mock(ArtifactClassLoader.class);\n+        when(domainClassLoaderRepository.getDomainClassLoader(domainDescriptor)).thenReturn(artifactClassLoader);\n+        when(artifactClassLoader.findLocalResource(anyString())).thenReturn(null);\n+        resource = getClass().getClassLoader().getResource(\"empty-domain-config.xml\").toURI().toURL();\n+        when(domainClassLoaderRepository.getDomainClassLoader(domainDescriptor)).thenReturn(artifactClassLoader);\n+        when(artifactClassLoader.findLocalResource(DOMAIN_CONFIG_FILE_LOCATION)).thenReturn(resource);\n+\n+        muleContext = mock(MuleContext.class);\n+        when(muleContextFactory.createMuleContext(any(List.class), any(MuleContextBuilder.class))).thenReturn(muleContext);\n+\n+        muleRegistry = mock(MuleRegistry.class);\n+        when(muleContext.getRegistry()).thenReturn(muleRegistry);\n+\n+        defaultMuleDomain = new TestMuleDomain(domainClassLoaderRepository, domainDescriptor);\n+        defaultMuleDomain.init();\n+    }\n+\n+    @Test\n+    public void testCancelStartOneConectorWithRetryPolicy()\n+    {\n+        // Given a default mule applicacion with 1 connector that has retryPolicy\n+        List<Connector> connectors = new ArrayList<>();\n+\n+        RetryPolicyTemplate retryPolicyTemplate = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        when(muleRegistry.lookupObjects(Connector.class)).thenReturn(connectors);\n+\n+        // When cancelling start\n+        defaultMuleDomain.cancelStart();\n+\n+        // Connectors's retry policy start is also cancelled\n+        verify(retryPolicyTemplate).stopRetrying();\n+    }\n+\n+    @Test\n+    public void testCancelStartFiveConectorsWithRetryPolicies()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "294035ccbcfb8f3408c40c5bf52b765311c50162"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3MDk4MA==", "bodyText": "Applied the suggested changes", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r462470980", "createdAt": "2020-07-29T17:36:20Z", "author": {"login": "pabloperalta"}, "path": "modules/launcher/src/test/java/org/mule/module/launcher/domain/DefaultMuleDomainTestCase.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.module.launcher.domain;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mule.api.MuleContext;\n+import org.mule.api.context.MuleContextBuilder;\n+import org.mule.api.context.MuleContextFactory;\n+import org.mule.api.registry.MuleRegistry;\n+import org.mule.api.retry.RetryPolicyTemplate;\n+import org.mule.api.transport.Connector;\n+import org.mule.module.launcher.artifact.ArtifactClassLoader;\n+import org.mule.module.launcher.descriptor.DomainDescriptor;\n+\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mule.module.launcher.domain.Domain.DOMAIN_CONFIG_FILE_LOCATION;\n+\n+public class DefaultMuleDomainTestCase\n+{\n+    private static final MuleContextFactory muleContextFactory = mock(MuleContextFactory.class);\n+    private DomainDescriptor domainDescriptor;\n+    private DomainClassLoaderRepository domainClassLoaderRepository;\n+    private DefaultMuleDomain defaultMuleDomain;\n+    private MuleContext muleContext;\n+    private MuleRegistry muleRegistry;\n+\n+    private URL resource;\n+    private ArtifactClassLoader artifactClassLoader;\n+\n+    @Before\n+    public void setUp() throws Exception\n+    {\n+        domainDescriptor = mock(DomainDescriptor.class);\n+        domainClassLoaderRepository = mock(DomainClassLoaderRepository.class);\n+        artifactClassLoader = mock(ArtifactClassLoader.class);\n+        when(domainClassLoaderRepository.getDomainClassLoader(domainDescriptor)).thenReturn(artifactClassLoader);\n+        when(artifactClassLoader.findLocalResource(anyString())).thenReturn(null);\n+        resource = getClass().getClassLoader().getResource(\"empty-domain-config.xml\").toURI().toURL();\n+        when(domainClassLoaderRepository.getDomainClassLoader(domainDescriptor)).thenReturn(artifactClassLoader);\n+        when(artifactClassLoader.findLocalResource(DOMAIN_CONFIG_FILE_LOCATION)).thenReturn(resource);\n+\n+        muleContext = mock(MuleContext.class);\n+        when(muleContextFactory.createMuleContext(any(List.class), any(MuleContextBuilder.class))).thenReturn(muleContext);\n+\n+        muleRegistry = mock(MuleRegistry.class);\n+        when(muleContext.getRegistry()).thenReturn(muleRegistry);\n+\n+        defaultMuleDomain = new TestMuleDomain(domainClassLoaderRepository, domainDescriptor);\n+        defaultMuleDomain.init();\n+    }\n+\n+    @Test\n+    public void testCancelStartOneConectorWithRetryPolicy()\n+    {\n+        // Given a default mule applicacion with 1 connector that has retryPolicy\n+        List<Connector> connectors = new ArrayList<>();\n+\n+        RetryPolicyTemplate retryPolicyTemplate = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        when(muleRegistry.lookupObjects(Connector.class)).thenReturn(connectors);\n+\n+        // When cancelling start\n+        defaultMuleDomain.cancelStart();\n+\n+        // Connectors's retry policy start is also cancelled\n+        verify(retryPolicyTemplate).stopRetrying();\n+    }\n+\n+    @Test\n+    public void testCancelStartFiveConectorsWithRetryPolicies()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NDI1OA=="}, "originalCommit": {"oid": "294035ccbcfb8f3408c40c5bf52b765311c50162"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Mjg5NjY0OnYy", "diffSide": "RIGHT", "path": "modules/launcher/src/test/java/org/mule/module/launcher/domain/DefaultMuleDomainTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoyNTo0M1rOG4ZF-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzozNjoxMFrOG5C-5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NDU3MQ==", "bodyText": "Same (stick to two)", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r461784571", "createdAt": "2020-07-28T18:25:43Z", "author": {"login": "IvanAndresFritzler"}, "path": "modules/launcher/src/test/java/org/mule/module/launcher/domain/DefaultMuleDomainTestCase.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.module.launcher.domain;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mule.api.MuleContext;\n+import org.mule.api.context.MuleContextBuilder;\n+import org.mule.api.context.MuleContextFactory;\n+import org.mule.api.registry.MuleRegistry;\n+import org.mule.api.retry.RetryPolicyTemplate;\n+import org.mule.api.transport.Connector;\n+import org.mule.module.launcher.artifact.ArtifactClassLoader;\n+import org.mule.module.launcher.descriptor.DomainDescriptor;\n+\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mule.module.launcher.domain.Domain.DOMAIN_CONFIG_FILE_LOCATION;\n+\n+public class DefaultMuleDomainTestCase\n+{\n+    private static final MuleContextFactory muleContextFactory = mock(MuleContextFactory.class);\n+    private DomainDescriptor domainDescriptor;\n+    private DomainClassLoaderRepository domainClassLoaderRepository;\n+    private DefaultMuleDomain defaultMuleDomain;\n+    private MuleContext muleContext;\n+    private MuleRegistry muleRegistry;\n+\n+    private URL resource;\n+    private ArtifactClassLoader artifactClassLoader;\n+\n+    @Before\n+    public void setUp() throws Exception\n+    {\n+        domainDescriptor = mock(DomainDescriptor.class);\n+        domainClassLoaderRepository = mock(DomainClassLoaderRepository.class);\n+        artifactClassLoader = mock(ArtifactClassLoader.class);\n+        when(domainClassLoaderRepository.getDomainClassLoader(domainDescriptor)).thenReturn(artifactClassLoader);\n+        when(artifactClassLoader.findLocalResource(anyString())).thenReturn(null);\n+        resource = getClass().getClassLoader().getResource(\"empty-domain-config.xml\").toURI().toURL();\n+        when(domainClassLoaderRepository.getDomainClassLoader(domainDescriptor)).thenReturn(artifactClassLoader);\n+        when(artifactClassLoader.findLocalResource(DOMAIN_CONFIG_FILE_LOCATION)).thenReturn(resource);\n+\n+        muleContext = mock(MuleContext.class);\n+        when(muleContextFactory.createMuleContext(any(List.class), any(MuleContextBuilder.class))).thenReturn(muleContext);\n+\n+        muleRegistry = mock(MuleRegistry.class);\n+        when(muleContext.getRegistry()).thenReturn(muleRegistry);\n+\n+        defaultMuleDomain = new TestMuleDomain(domainClassLoaderRepository, domainDescriptor);\n+        defaultMuleDomain.init();\n+    }\n+\n+    @Test\n+    public void testCancelStartOneConectorWithRetryPolicy()\n+    {\n+        // Given a default mule applicacion with 1 connector that has retryPolicy\n+        List<Connector> connectors = new ArrayList<>();\n+\n+        RetryPolicyTemplate retryPolicyTemplate = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        when(muleRegistry.lookupObjects(Connector.class)).thenReturn(connectors);\n+\n+        // When cancelling start\n+        defaultMuleDomain.cancelStart();\n+\n+        // Connectors's retry policy start is also cancelled\n+        verify(retryPolicyTemplate).stopRetrying();\n+    }\n+\n+    @Test\n+    public void testCancelStartFiveConectorsWithRetryPolicies()\n+    {\n+        // Given a default mule applicacion with 5 connectors that have retryPolicies\n+        List<Connector> connectors = new ArrayList<>();\n+\n+        RetryPolicyTemplate retryPolicyTemplate1 = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        RetryPolicyTemplate retryPolicyTemplate2 = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        RetryPolicyTemplate retryPolicyTemplate3 = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        RetryPolicyTemplate retryPolicyTemplate4 = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        RetryPolicyTemplate retryPolicyTemplate5 = addMockConnectorWithMockRetryPolicyToList(connectors);\n+\n+        when(muleRegistry.lookupObjects(Connector.class)).thenReturn(connectors);\n+\n+        // When cancelling start\n+        defaultMuleDomain.cancelStart();\n+\n+        // Then connector's retry policies start is also cancelled\n+        verify(retryPolicyTemplate1, times(1)).stopRetrying();\n+        verify(retryPolicyTemplate2, times(1)).stopRetrying();\n+        verify(retryPolicyTemplate3, times(1)).stopRetrying();\n+        verify(retryPolicyTemplate4, times(1)).stopRetrying();\n+        verify(retryPolicyTemplate5, times(1)).stopRetrying();\n+    }\n+\n+    @Test\n+    public void testCancelStartFiveConectorsWithNullRetryPolicies()\n+    {\n+        // Given a default mule applicacion with 5 connectors that have retryPolicies\n+        List<Connector> connectors = new ArrayList<>();\n+\n+        Connector connector1 = mock(Connector.class);\n+        connectors.add(connector1);\n+        Connector connector2 = mock(Connector.class);\n+        connectors.add(connector2);\n+        Connector connector3 = mock(Connector.class);\n+        connectors.add(connector3);\n+        Connector connector4 = mock(Connector.class);\n+        connectors.add(connector4);\n+        Connector connector5 = mock(Connector.class);\n+        connectors.add(connector5);\n+\n+        when(muleRegistry.lookupObjects(Connector.class)).thenReturn(connectors);\n+\n+        // When cancelling start\n+        defaultMuleDomain.cancelStart();\n+\n+        // Then no error occurs\n+\n+    }\n+\n+    @Test\n+    public void testStopCancelStartFiveConectors()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "294035ccbcfb8f3408c40c5bf52b765311c50162"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3MDg4Ng==", "bodyText": "Applied the suggested changes", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r462470886", "createdAt": "2020-07-29T17:36:10Z", "author": {"login": "pabloperalta"}, "path": "modules/launcher/src/test/java/org/mule/module/launcher/domain/DefaultMuleDomainTestCase.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.module.launcher.domain;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mule.api.MuleContext;\n+import org.mule.api.context.MuleContextBuilder;\n+import org.mule.api.context.MuleContextFactory;\n+import org.mule.api.registry.MuleRegistry;\n+import org.mule.api.retry.RetryPolicyTemplate;\n+import org.mule.api.transport.Connector;\n+import org.mule.module.launcher.artifact.ArtifactClassLoader;\n+import org.mule.module.launcher.descriptor.DomainDescriptor;\n+\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mule.module.launcher.domain.Domain.DOMAIN_CONFIG_FILE_LOCATION;\n+\n+public class DefaultMuleDomainTestCase\n+{\n+    private static final MuleContextFactory muleContextFactory = mock(MuleContextFactory.class);\n+    private DomainDescriptor domainDescriptor;\n+    private DomainClassLoaderRepository domainClassLoaderRepository;\n+    private DefaultMuleDomain defaultMuleDomain;\n+    private MuleContext muleContext;\n+    private MuleRegistry muleRegistry;\n+\n+    private URL resource;\n+    private ArtifactClassLoader artifactClassLoader;\n+\n+    @Before\n+    public void setUp() throws Exception\n+    {\n+        domainDescriptor = mock(DomainDescriptor.class);\n+        domainClassLoaderRepository = mock(DomainClassLoaderRepository.class);\n+        artifactClassLoader = mock(ArtifactClassLoader.class);\n+        when(domainClassLoaderRepository.getDomainClassLoader(domainDescriptor)).thenReturn(artifactClassLoader);\n+        when(artifactClassLoader.findLocalResource(anyString())).thenReturn(null);\n+        resource = getClass().getClassLoader().getResource(\"empty-domain-config.xml\").toURI().toURL();\n+        when(domainClassLoaderRepository.getDomainClassLoader(domainDescriptor)).thenReturn(artifactClassLoader);\n+        when(artifactClassLoader.findLocalResource(DOMAIN_CONFIG_FILE_LOCATION)).thenReturn(resource);\n+\n+        muleContext = mock(MuleContext.class);\n+        when(muleContextFactory.createMuleContext(any(List.class), any(MuleContextBuilder.class))).thenReturn(muleContext);\n+\n+        muleRegistry = mock(MuleRegistry.class);\n+        when(muleContext.getRegistry()).thenReturn(muleRegistry);\n+\n+        defaultMuleDomain = new TestMuleDomain(domainClassLoaderRepository, domainDescriptor);\n+        defaultMuleDomain.init();\n+    }\n+\n+    @Test\n+    public void testCancelStartOneConectorWithRetryPolicy()\n+    {\n+        // Given a default mule applicacion with 1 connector that has retryPolicy\n+        List<Connector> connectors = new ArrayList<>();\n+\n+        RetryPolicyTemplate retryPolicyTemplate = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        when(muleRegistry.lookupObjects(Connector.class)).thenReturn(connectors);\n+\n+        // When cancelling start\n+        defaultMuleDomain.cancelStart();\n+\n+        // Connectors's retry policy start is also cancelled\n+        verify(retryPolicyTemplate).stopRetrying();\n+    }\n+\n+    @Test\n+    public void testCancelStartFiveConectorsWithRetryPolicies()\n+    {\n+        // Given a default mule applicacion with 5 connectors that have retryPolicies\n+        List<Connector> connectors = new ArrayList<>();\n+\n+        RetryPolicyTemplate retryPolicyTemplate1 = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        RetryPolicyTemplate retryPolicyTemplate2 = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        RetryPolicyTemplate retryPolicyTemplate3 = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        RetryPolicyTemplate retryPolicyTemplate4 = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        RetryPolicyTemplate retryPolicyTemplate5 = addMockConnectorWithMockRetryPolicyToList(connectors);\n+\n+        when(muleRegistry.lookupObjects(Connector.class)).thenReturn(connectors);\n+\n+        // When cancelling start\n+        defaultMuleDomain.cancelStart();\n+\n+        // Then connector's retry policies start is also cancelled\n+        verify(retryPolicyTemplate1, times(1)).stopRetrying();\n+        verify(retryPolicyTemplate2, times(1)).stopRetrying();\n+        verify(retryPolicyTemplate3, times(1)).stopRetrying();\n+        verify(retryPolicyTemplate4, times(1)).stopRetrying();\n+        verify(retryPolicyTemplate5, times(1)).stopRetrying();\n+    }\n+\n+    @Test\n+    public void testCancelStartFiveConectorsWithNullRetryPolicies()\n+    {\n+        // Given a default mule applicacion with 5 connectors that have retryPolicies\n+        List<Connector> connectors = new ArrayList<>();\n+\n+        Connector connector1 = mock(Connector.class);\n+        connectors.add(connector1);\n+        Connector connector2 = mock(Connector.class);\n+        connectors.add(connector2);\n+        Connector connector3 = mock(Connector.class);\n+        connectors.add(connector3);\n+        Connector connector4 = mock(Connector.class);\n+        connectors.add(connector4);\n+        Connector connector5 = mock(Connector.class);\n+        connectors.add(connector5);\n+\n+        when(muleRegistry.lookupObjects(Connector.class)).thenReturn(connectors);\n+\n+        // When cancelling start\n+        defaultMuleDomain.cancelStart();\n+\n+        // Then no error occurs\n+\n+    }\n+\n+    @Test\n+    public void testStopCancelStartFiveConectors()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NDU3MQ=="}, "originalCommit": {"oid": "294035ccbcfb8f3408c40c5bf52b765311c50162"}, "originalPosition": 134}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4855, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}