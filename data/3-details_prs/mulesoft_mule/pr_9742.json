{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIyNzM2NzI2", "number": 9742, "title": "MULE-19005: XML SDK: extension model doesn't have the error models set", "bodyText": "", "createdAt": "2020-11-17T22:08:25Z", "url": "https://github.com/mulesoft/mule/pull/9742", "merged": true, "mergeCommit": {"oid": "6f735d8b6789c6518d24194475bdf41f602afd13"}, "closed": true, "closedAt": "2020-11-18T16:06:39Z", "author": {"login": "elrodro83"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABddgxi1gH2gAyNTIyNzM2NzI2OjFlMWZlZmJhNDdjODViMDAzOGNjNmMzOThlODk4MTA4NzVhYzU2M2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddt8OegFqTUzMzQzMTEyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1e1fefba47c85b0038cc6c398e89810875ac563f", "author": {"user": {"login": "elrodro83", "name": "Rodrigo Merino"}}, "url": "https://github.com/mulesoft/mule/commit/1e1fefba47c85b0038cc6c398e89810875ac563f", "committedDate": "2020-11-17T21:52:07Z", "message": "MULE-19005: XML SDK: extension model doesn't have the error models set"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNDEyMDEw", "url": "https://github.com/mulesoft/mule/pull/9742#pullrequestreview-533412010", "createdAt": "2020-11-18T12:49:57Z", "commit": {"oid": "1e1fefba47c85b0038cc6c398e89810875ac563f"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjo0OTo1N1rOH1sOJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMjo1Mjo0M1rOH1sUhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA2MTA5NA==", "bodyText": "duplicated \";\"", "url": "https://github.com/mulesoft/mule/pull/9742#discussion_r526061094", "createdAt": "2020-11-18T12:49:57Z", "author": {"login": "mlischetti"}, "path": "modules/extensions-xml-support/src/main/java/org/mule/runtime/extension/internal/loader/XmlExtensionLoaderDelegate.java", "diffHunk": "@@ -1106,28 +1114,65 @@ private MetadataType extractType(String receivedType) {\n     return metadataType.get();\n   }\n \n-  private void declareErrorModels(OperationDeclarer operationDeclarer, XmlDslModel xmlDslModel, String operationName,\n+  private void declareErrorModels(Optional<ExtensionDeclarer> extensionDeclarer,\n+                                  OperationDeclarer operationDeclarer, XmlDslModel xmlDslModel, String operationName,\n                                   ComponentAst operationModel) {\n-    Optional<ComponentAst> optionalParametersComponentModel = operationModel.directChildrenStream()\n+    Optional<ComponentAst> optionalErrorsComponentModel = operationModel.directChildrenStream()\n         .filter(child -> child.getIdentifier().equals(OPERATION_ERRORS_IDENTIFIER)).findAny();\n-    optionalParametersComponentModel.ifPresent(componentModel -> componentModel.directChildrenStream()\n+    optionalErrorsComponentModel.ifPresent(componentModel -> componentModel.directChildrenStream()\n         .filter(child -> child.getIdentifier().equals(OPERATION_ERROR_IDENTIFIER))\n         .forEach(param -> {\n           final String namespace = xmlDslModel.getPrefix().toUpperCase();\n-          param.getRawParameterValue(ERROR_TYPE_ATTRIBUTE)\n-              .map(tn -> {\n-                if (tn.contains(NAMESPACE_SEPARATOR)) {\n-                  throw new IllegalModelDefinitionException(format(\"The operation [%s] cannot have an <error> [%s] that contains a reserved character [%s]\",\n-                                                                   operationName, tn,\n-                                                                   NAMESPACE_SEPARATOR));\n-                }\n-                return operationDeclarer.withErrorModel(ErrorModelBuilder.newError(tn, namespace)\n-                    .withParent(ErrorModelBuilder.newError(ANY).build())\n-                    .build());\n-              })\n-              .orElseThrow(() -> new IllegalModelDefinitionException(format(\"The operation [%s] cannot have an <error> with an empty 'type' attribute\",\n-                                                                            operationName)));\n+          final String errorType = (String) param.getParameter(ERROR_TYPE_ATTRIBUTE).getValue().getRight();;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e1fefba47c85b0038cc6c398e89810875ac563f"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjA2MjcyNw==", "bodyText": "use static import", "url": "https://github.com/mulesoft/mule/pull/9742#discussion_r526062727", "createdAt": "2020-11-18T12:52:43Z", "author": {"login": "mlischetti"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/factories/EnrichedErrorMappingsFactoryBean.java", "diffHunk": "@@ -21,11 +23,18 @@\n import org.mule.runtime.core.internal.exception.EnrichedErrorMapping;\n import org.mule.runtime.dsl.api.component.AbstractComponentFactory;\n \n+import java.util.Optional;\n+\n import javax.inject.Inject;\n \n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n \n public class EnrichedErrorMappingsFactoryBean extends AbstractComponentFactory<EnrichedErrorMapping> {\n \n+  private static final Logger LOGGER = LoggerFactory.getLogger(EnrichedErrorMappingsFactoryBean.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e1fefba47c85b0038cc6c398e89810875ac563f"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a10f1b9c516e3da7145774fc457a1dc236f52135", "author": {"user": {"login": "elrodro83", "name": "Rodrigo Merino"}}, "url": "https://github.com/mulesoft/mule/commit/a10f1b9c516e3da7145774fc457a1dc236f52135", "committedDate": "2020-11-18T13:11:34Z", "message": "review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNDMxMTI1", "url": "https://github.com/mulesoft/mule/pull/9742#pullrequestreview-533431125", "createdAt": "2020-11-18T13:12:33Z", "commit": {"oid": "a10f1b9c516e3da7145774fc457a1dc236f52135"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1086, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}