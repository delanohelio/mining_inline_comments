{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0Nzg1OTg4", "number": 8845, "title": "MULE-18294: Polling source schedulers must not restart on reconnections", "bodyText": "", "createdAt": "2020-05-07T16:14:32Z", "url": "https://github.com/mulesoft/mule/pull/8845", "merged": true, "mergeCommit": {"oid": "bccc32e6d84cee24b945ae27bc40a774719fe6c6"}, "closed": true, "closedAt": "2020-05-22T19:02:26Z", "author": {"login": "ndinu"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcfU4FtAFqTQwODM1NDU2MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcj2iREAFqTQxNzEwNzM4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MzU0NTYx", "url": "https://github.com/mulesoft/mule/pull/8845#pullrequestreview-408354561", "createdAt": "2020-05-08T16:19:44Z", "commit": {"oid": "ba1231044265e1cbc5ff87e1a7dff2ff4157010e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjoxOTo0NFrOGSrPdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjo1Njo1MlrOGSsaAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIzNjAyMA==", "bodyText": "don't use maps. Build a explicit pojo.", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r422236020", "createdAt": "2020-05-08T16:19:44Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/ExtensionMessageSource.java", "diffHunk": "@@ -196,13 +196,14 @@ private synchronized void createSource(boolean restarting) throws Exception {\n     }\n   }\n \n-  private void startSource(boolean restarting) throws MuleException {\n+  private void startSource(boolean restarting, Map<String, Object> restartingContext) throws MuleException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1231044265e1cbc5ff87e1a7dff2ff4157010e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIzOTMyMg==", "bodyText": "I don't understand the point of this... if this guy is reconnecting is because it failed while executing. That means that you first simply poll() and then simply  scheduler.schedule(executor, () -> poll(sourceCallback));... everything else you added seems unnecessary. What am I missing?", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r422239322", "createdAt": "2020-05-08T16:26:19Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -133,7 +137,13 @@ public void onStart(SourceCallback<T, A> sourceCallback) throws MuleException {\n         .withName(formatKey(\"executor\")));\n \n     stopRequested.set(false);\n-    scheduler.schedule(executor, () -> poll(sourceCallback));\n+    if (restarting.compareAndSet(true, false)) {\n+      delegateRunnable.setDelegate(() -> poll(sourceCallback));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1231044265e1cbc5ff87e1a7dff2ff4157010e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjIzOTQyOA==", "bodyText": "what's the point of this?", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r422239428", "createdAt": "2020-05-08T16:26:30Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -133,7 +137,13 @@ public void onStart(SourceCallback<T, A> sourceCallback) throws MuleException {\n         .withName(formatKey(\"executor\")));\n \n     stopRequested.set(false);\n-    scheduler.schedule(executor, () -> poll(sourceCallback));\n+    if (restarting.compareAndSet(true, false)) {\n+      delegateRunnable.setDelegate(() -> poll(sourceCallback));\n+      poll(sourceCallback);\n+    } else {\n+      delegateRunnable = new DelegateRunnable(() -> poll(sourceCallback));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1231044265e1cbc5ff87e1a7dff2ff4157010e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI0OTMyOQ==", "bodyText": "this class does literally nothing", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r422249329", "createdAt": "2020-05-08T16:46:09Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -615,4 +648,22 @@ private void release() {\n       }\n     }\n   }\n+\n+  private class DelegateRunnable implements Runnable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1231044265e1cbc5ff87e1a7dff2ff4157010e"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI0OTcwNg==", "bodyText": "although I insist this is not necesary, this isn't a bad idea as the delegate you're keeping from the prior instance is quite likely to have references to the old instance...potentially producing leaks", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r422249706", "createdAt": "2020-05-08T16:46:55Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -204,6 +217,25 @@ private int compareWatermarks(Serializable w1, Serializable w2, Comparator compa\n     return comparator.compare(w1, w2);\n   }\n \n+  @Override\n+  public Map<String, Object> beginRestart() {\n+    Map<String, Object> restartingContext = new HashMap<>();\n+\n+    restarting.set(true);\n+\n+    restartingContext.put(POLLING_SOURCE_EXECUTOR_KEY, executor);\n+    restartingContext.put(RUNNABLE_KEY, delegateRunnable);\n+    return restartingContext;\n+  }\n+\n+  @Override\n+  public void finishRestart(Map<String, Object> restartingContext) {\n+    restarting.set(true);\n+\n+    executor = (org.mule.runtime.api.scheduler.Scheduler) restartingContext.get(POLLING_SOURCE_EXECUTOR_KEY);\n+    delegateRunnable = (DelegateRunnable) restartingContext.get(RUNNABLE_KEY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1231044265e1cbc5ff87e1a7dff2ff4157010e"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1NDcyNw==", "bodyText": "rename to getRestartContext and turn that map into an actual SourceRestartContext class", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r422254727", "createdAt": "2020-05-08T16:56:13Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/Restartable.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.source.poll;\n+\n+import java.util.Map;\n+\n+/**\n+ * A component that can be restarted.\n+ *\n+ * When restarted {@link #beginRestart()} needs to be called and will return a {@link Map}. After the restart is\n+ * performed, the {@link #finishRestart(Map)} will be called with the value that the {@link #beginRestart()} method\n+ * have generated.\n+ *\n+ * @since 4.2.3 4.3.1 4.4.0\n+ */\n+public interface Restartable {\n+\n+  /**\n+   * Method that needs to be called when a restart is performed.\n+   *\n+   * @return a context needed after a restart is performed.\n+   */\n+  Map<String, Object> beginRestart();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1231044265e1cbc5ff87e1a7dff2ff4157010e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1NTEwNw==", "bodyText": "rename to restart()", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r422255107", "createdAt": "2020-05-08T16:56:52Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/Restartable.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.source.poll;\n+\n+import java.util.Map;\n+\n+/**\n+ * A component that can be restarted.\n+ *\n+ * When restarted {@link #beginRestart()} needs to be called and will return a {@link Map}. After the restart is\n+ * performed, the {@link #finishRestart(Map)} will be called with the value that the {@link #beginRestart()} method\n+ * have generated.\n+ *\n+ * @since 4.2.3 4.3.1 4.4.0\n+ */\n+public interface Restartable {\n+\n+  /**\n+   * Method that needs to be called when a restart is performed.\n+   *\n+   * @return a context needed after a restart is performed.\n+   */\n+  Map<String, Object> beginRestart();\n+\n+  /**\n+   * Method that needs to be called to finish the process of restarting.\n+   *\n+   * @param restartingContext the context generated by {@link #beginRestart()}\n+   */\n+  void finishRestart(Map<String, Object> restartingContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba1231044265e1cbc5ff87e1a7dff2ff4157010e"}, "originalPosition": 34}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "211a634b215730a501660caacc675e7ce820f589", "author": {"user": {"login": "ndinu", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/211a634b215730a501660caacc675e7ce820f589", "committedDate": "2020-05-18T16:56:53Z", "message": "PR feedback"}, "afterCommit": {"oid": "1e44e37d4820d3c1ecb677b6725188260ad3b9da", "author": {"user": {"login": "ndinu", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/1e44e37d4820d3c1ecb677b6725188260ad3b9da", "committedDate": "2020-05-19T15:46:16Z", "message": "Fix flacky test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MzQwNDQ4", "url": "https://github.com/mulesoft/mule/pull/8845#pullrequestreview-415340448", "createdAt": "2020-05-20T13:35:33Z", "commit": {"oid": "1e44e37d4820d3c1ecb677b6725188260ad3b9da"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzozNTozM1rOGYL-yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxMzo1MTo0NVrOGYMxuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxNTMwNA==", "bodyText": "I get what you mean, but the term rescheduled is quite misleading", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r428015304", "createdAt": "2020-05-20T13:35:33Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/PollingSourceTestCase.java", "diffHunk": "@@ -122,6 +135,37 @@ public void whenReconnectingAfterConnectionExceptionSchedulerRunsWithoutStartDel\n     assertAllPetsAdopted();\n   }\n \n+  @Description(\"This test reflects a behavior that we must preserve, when a polling source is stopped and started the scheduler must be rescheduled.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e44e37d4820d3c1ecb677b6725188260ad3b9da"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAxNjYxMw==", "bodyText": "why this change?", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r428016613", "createdAt": "2020-05-20T13:37:17Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-spring-support/src/test/resources/polling-source-config.xml", "diffHunk": "@@ -68,7 +68,7 @@\n                 <fixed-frequency frequency=\"1000\"/>\n             </scheduling-strategy>\n         </petstore:pet-adoption-source>\n-        <raise-error type=\"TEST:EXPECTED\"/>\n+        <test:processor throwException=\"true\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e44e37d4820d3c1ecb677b6725188260ad3b9da"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMDAyNA==", "bodyText": "add a comment explaining why", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r428020024", "createdAt": "2020-05-20T13:41:34Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/DelegateRunnable.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.source.poll;\n+\n+\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+import org.slf4j.Logger;\n+\n+/**\n+ * {@link Runnable} that delegates its execution. The delegate can be switch at any time.\n+ * This is particulary useful when you want to schedule a task to be repeated, and you want to change the task for the next\n+ * executions without rescheduling.\n+ *\n+ * @since 4.2.3 4.3.1 4.4.0\n+ */\n+public class DelegateRunnable implements Runnable {\n+\n+  private static final Logger LOGGER = getLogger(DelegateRunnable.class);\n+\n+  private Runnable delegate;\n+  private Lock lock = new ReentrantLock();\n+\n+  public DelegateRunnable(Runnable delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public void run() {\n+    if (lock.tryLock()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e44e37d4820d3c1ecb677b6725188260ad3b9da"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMTE1Nw==", "bodyText": "a get method should never have side effects", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r428021157", "createdAt": "2020-05-20T13:42:59Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -204,6 +216,21 @@ private int compareWatermarks(Serializable w1, Serializable w2, Comparator compa\n     return comparator.compare(w1, w2);\n   }\n \n+  @Override\n+  public RestartContext getRestartContext() {\n+    restarting.set(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e44e37d4820d3c1ecb677b6725188260ad3b9da"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyNDQyMA==", "bodyText": "this is still wrong. If you do this here.. the poll() method that this delegates into is the poll from the old instance you just discarded. this should be\ndelegateRunnable = restartContext.getDelegateRunnable();\ndelegateRunnable.setDelegate(() -> poll());", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r428024420", "createdAt": "2020-05-20T13:47:07Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -204,6 +216,21 @@ private int compareWatermarks(Serializable w1, Serializable w2, Comparator compa\n     return comparator.compare(w1, w2);\n   }\n \n+  @Override\n+  public RestartContext getRestartContext() {\n+    restarting.set(true);\n+    delegateRunnable.setDelegate(null);\n+    return new RestartContext(executor, delegateRunnable);\n+  }\n+\n+  @Override\n+  public void restart(RestartContext restartContext) {\n+    restarting.set(true);\n+\n+    executor = restartContext.getExecutor();\n+    delegateRunnable = restartContext.getDelegateRunnable();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e44e37d4820d3c1ecb677b6725188260ad3b9da"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyNzMwMw==", "bodyText": "This test is yielding false positives. The test pases because the number of invokations you want is correct, but you're not seeing that the instance that is actually modifying this is not the one you wanted. Change this by a Map<Source, Integer> and also assert which instances had how many invokations", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r428027303", "createdAt": "2020-05-20T13:50:22Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-spring-support/src/test/java/org/mule/test/module/extension/source/PollingSourceTestCase.java", "diffHunk": "@@ -51,6 +58,12 @@ protected String getConfigFile() {\n     return \"polling-source-config.xml\";\n   }\n \n+  @Before\n+  public void resetCounters() throws Exception {\n+    PetFailingPollingSource.STARTED_POLLS = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e44e37d4820d3c1ecb677b6725188260ad3b9da"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyODEyOQ==", "bodyText": "this should happen on the restart method, not here", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r428028129", "createdAt": "2020-05-20T13:51:27Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -204,6 +216,21 @@ private int compareWatermarks(Serializable w1, Serializable w2, Comparator compa\n     return comparator.compare(w1, w2);\n   }\n \n+  @Override\n+  public RestartContext getRestartContext() {\n+    restarting.set(true);\n+    delegateRunnable.setDelegate(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e44e37d4820d3c1ecb677b6725188260ad3b9da"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyODM0Nw==", "bodyText": "both fields final", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r428028347", "createdAt": "2020-05-20T13:51:45Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/RestartContext.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.module.extension.internal.runtime.source.poll;\n+\n+import org.mule.runtime.api.scheduler.Scheduler;\n+\n+/**\n+ * Context needed to perform the restart of a source\n+ *\n+ * @since 4.2.3 4.3.1 4.4.0\n+ */\n+public class RestartContext {\n+\n+  private Scheduler executor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e44e37d4820d3c1ecb677b6725188260ad3b9da"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1Njk0NTA3", "url": "https://github.com/mulesoft/mule/pull/8845#pullrequestreview-415694507", "createdAt": "2020-05-20T20:35:47Z", "commit": {"oid": "2e6afefcd171c14f726c4b504b50d6326c7e0302"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDozNTo0N1rOGYc4EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQyMDozNjoyNVrOGYc5RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5MjExMw==", "bodyText": "you can change the mehthod name, but still, is this the right place for doing this?", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r428292113", "createdAt": "2020-05-20T20:35:47Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -204,6 +216,21 @@ private int compareWatermarks(Serializable w1, Serializable w2, Comparator compa\n     return comparator.compare(w1, w2);\n   }\n \n+  @Override\n+  public RestartContext getRestartContext() {\n+    restarting.set(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyMTE1Nw=="}, "originalCommit": {"oid": "1e44e37d4820d3c1ecb677b6725188260ad3b9da"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODI5MjQyMQ==", "bodyText": "then it is clear that this should happen in the doStart() method instead of here.........", "url": "https://github.com/mulesoft/mule/pull/8845#discussion_r428292421", "createdAt": "2020-05-20T20:36:25Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/poll/PollingSourceWrapper.java", "diffHunk": "@@ -204,6 +216,21 @@ private int compareWatermarks(Serializable w1, Serializable w2, Comparator compa\n     return comparator.compare(w1, w2);\n   }\n \n+  @Override\n+  public RestartContext getRestartContext() {\n+    restarting.set(true);\n+    delegateRunnable.setDelegate(null);\n+    return new RestartContext(executor, delegateRunnable);\n+  }\n+\n+  @Override\n+  public void restart(RestartContext restartContext) {\n+    restarting.set(true);\n+\n+    executor = restartContext.getExecutor();\n+    delegateRunnable = restartContext.getDelegateRunnable();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAyNDQyMA=="}, "originalCommit": {"oid": "1e44e37d4820d3c1ecb677b6725188260ad3b9da"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c0385053d90440feaf8c874bc777dadd0222341", "author": {"user": {"login": "ndinu", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/9c0385053d90440feaf8c874bc777dadd0222341", "committedDate": "2020-05-21T17:11:22Z", "message": "MULE-18294: Polling source schedulers must not restart on reconnections"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1382d83c4eaa4c1b8e6b3292387db74a05817959", "author": {"user": {"login": "ndinu", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/1382d83c4eaa4c1b8e6b3292387db74a05817959", "committedDate": "2020-05-21T17:11:23Z", "message": "Fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b18485d5f62f93827ad48890dda1f332741836c5", "author": {"user": {"login": "ndinu", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/b18485d5f62f93827ad48890dda1f332741836c5", "committedDate": "2020-05-21T17:11:23Z", "message": "PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ff7904c36b157772e75b1ef82670d04ccda44a4", "author": {"user": {"login": "ndinu", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/6ff7904c36b157772e75b1ef82670d04ccda44a4", "committedDate": "2020-05-21T17:11:23Z", "message": "Fix flacky test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac72e64fb07a28591106c8f3b3a3ef318a34f006", "author": {"user": {"login": "ndinu", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/ac72e64fb07a28591106c8f3b3a3ef318a34f006", "committedDate": "2020-05-21T17:11:23Z", "message": "Partial PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aab346a02dab31a137151f4be5870c55912191eb", "author": {"user": {"login": "ndinu", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/aab346a02dab31a137151f4be5870c55912191eb", "committedDate": "2020-05-21T17:11:23Z", "message": "PR feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "91b0ea729cd99dee0239e7c71732eb82bb3d476c", "author": {"user": {"login": "ndinu", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/91b0ea729cd99dee0239e7c71732eb82bb3d476c", "committedDate": "2020-05-21T15:56:44Z", "message": "PR feedback"}, "afterCommit": {"oid": "aab346a02dab31a137151f4be5870c55912191eb", "author": {"user": {"login": "ndinu", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/aab346a02dab31a137151f4be5870c55912191eb", "committedDate": "2020-05-21T17:11:23Z", "message": "PR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MTA3Mzg4", "url": "https://github.com/mulesoft/mule/pull/8845#pullrequestreview-417107388", "createdAt": "2020-05-22T18:25:44Z", "commit": {"oid": "aab346a02dab31a137151f4be5870c55912191eb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 866, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}