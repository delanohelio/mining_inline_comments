{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg1NzM5NzU3", "number": 8719, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODoyMTo0NlrODmaYbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODoyMjoxMVrODmaY9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjA0NzE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/policy/PolicyTraceLogger.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODoyMTo0NlrOFz0MhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODoyMTo0NlrOFz0MhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3Njg2OQ==", "bodyText": "ask for this in the caller method, to avoid instantiating the lambda with the message", "url": "https://github.com/mulesoft/mule/pull/8719#discussion_r389876869", "createdAt": "2020-03-09T18:21:46Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/policy/PolicyTraceLogger.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.policy;\n+\n+import static org.mule.runtime.core.privileged.event.PrivilegedEvent.setCurrentEvent;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import org.mule.runtime.api.component.Component;\n+import org.mule.runtime.api.metadata.TypedValue;\n+import org.mule.runtime.core.api.event.CoreEvent;\n+import org.mule.runtime.core.api.policy.Policy;\n+import org.mule.runtime.core.privileged.event.PrivilegedEvent;\n+\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+\n+public class PolicyTraceLogger {\n+\n+  private static final Logger LOGGER = getLogger(PolicyTraceLogger.class);\n+  private static final String NL = System.lineSeparator();\n+  private static final String TAB = \"   \";\n+\n+  /**\n+   * Logs the event before starting to execute the source policy\n+   */\n+  public void logSourcePolicyStart(Policy policy, CoreEvent event) {\n+    if (LOGGER.isTraceEnabled()) {\n+      // Setting event in thread local so the correlation Id is printed with the log message\n+      setCurrentEvent((PrivilegedEvent) event);\n+      LOGGER.trace(NL + \"Executing policy \" + getPolicyName(policy) + NL + eventAsString(event));\n+    }\n+  }\n+\n+  /**\n+   * Logs the event before exiting current policy because of the execution of an execute-next element\n+   */\n+  public void logBeforeExecuteNext(String policyId, CoreEvent event) {\n+    logEvent(() -> NL + \"Jumping to next from policy \" + policyId, event);\n+  }\n+\n+  /**\n+   * Logs the event after execute-next is completed and resuming execution of a policy\n+   */\n+  public void logAfterExecuteNext(String policyId, CoreEvent event) {\n+    logEvent(() -> NL + \"Resuming execution of policy \" + policyId, event);\n+  }\n+\n+  /**\n+   * Logs the event before starting to execute the operation policy\n+   */\n+  public void logOperationPolicyStart(Policy policy, CoreEvent event) {\n+    logEvent(() -> NL + \"Executing operation policy \" + getPolicyName(policy), event);\n+  }\n+\n+  /**\n+   * Logs the event after execution of the source policy finished\n+   */\n+  public void logSourcePolicyEnd(Policy policy, CoreEvent event) {\n+    logEvent(() -> NL + \"Policy \" + getPolicyName(policy) + \" execution finished\", event);\n+  }\n+\n+  /**\n+   * Logs the event after execution of the operation policy finished\n+   */\n+  public void logOperationPolicyEnd(Policy policy, CoreEvent event) {\n+    logEvent(() -> NL + \"Operation policy \" + getPolicyName(policy) + \" execution finished\", event);\n+  }\n+\n+  public void logSourcePolicyFailureResult(SourcePolicyFailureResult result) {\n+    if (LOGGER.isTraceEnabled()) {\n+      LOGGER.trace(\"Event id: \" + result.getMessagingException().getEvent().getContext().getId()\n+          + \"\\nFinished processing with failure. \\n\" +\n+          \"Error message: \" + result.getMessagingException().getMessage());\n+    }\n+  }\n+\n+  private void logEvent(Supplier<String> initialLine, CoreEvent event) {\n+    if (LOGGER.isTraceEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b0959e5614ec0ce63a97e740507469e7afb0118"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjA0NzYyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/policy/PolicyTraceLogger.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODoyMTo1NlrOFz0M1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODoyMTo1NlrOFz0M1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3Njk0OA==", "bodyText": "javadoc", "url": "https://github.com/mulesoft/mule/pull/8719#discussion_r389876948", "createdAt": "2020-03-09T18:21:56Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/policy/PolicyTraceLogger.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.policy;\n+\n+import static org.mule.runtime.core.privileged.event.PrivilegedEvent.setCurrentEvent;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import org.mule.runtime.api.component.Component;\n+import org.mule.runtime.api.metadata.TypedValue;\n+import org.mule.runtime.core.api.event.CoreEvent;\n+import org.mule.runtime.core.api.policy.Policy;\n+import org.mule.runtime.core.privileged.event.PrivilegedEvent;\n+\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+\n+public class PolicyTraceLogger {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b0959e5614ec0ce63a97e740507469e7afb0118"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjA0ODE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/policy/PolicyTraceLogger.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODoyMjowNFrOFz0NLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODoyMjowNFrOFz0NLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3NzAzNg==", "bodyText": "can this have package visibility?", "url": "https://github.com/mulesoft/mule/pull/8719#discussion_r389877036", "createdAt": "2020-03-09T18:22:04Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/policy/PolicyTraceLogger.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.policy;\n+\n+import static org.mule.runtime.core.privileged.event.PrivilegedEvent.setCurrentEvent;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import org.mule.runtime.api.component.Component;\n+import org.mule.runtime.api.metadata.TypedValue;\n+import org.mule.runtime.core.api.event.CoreEvent;\n+import org.mule.runtime.core.api.policy.Policy;\n+import org.mule.runtime.core.privileged.event.PrivilegedEvent;\n+\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+\n+public class PolicyTraceLogger {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b0959e5614ec0ce63a97e740507469e7afb0118"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjA0ODU1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/policy/PolicyTraceLogger.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODoyMjoxMVrOFz0Naw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxODoyMjoxMVrOFz0Naw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTg3NzA5OQ==", "bodyText": "@since", "url": "https://github.com/mulesoft/mule/pull/8719#discussion_r389877099", "createdAt": "2020-03-09T18:22:11Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/policy/PolicyTraceLogger.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.policy;\n+\n+import static org.mule.runtime.core.privileged.event.PrivilegedEvent.setCurrentEvent;\n+import static org.slf4j.LoggerFactory.getLogger;\n+\n+import org.mule.runtime.api.component.Component;\n+import org.mule.runtime.api.metadata.TypedValue;\n+import org.mule.runtime.core.api.event.CoreEvent;\n+import org.mule.runtime.core.api.policy.Policy;\n+import org.mule.runtime.core.privileged.event.PrivilegedEvent;\n+\n+import java.util.Map;\n+import java.util.function.Supplier;\n+\n+import org.slf4j.Logger;\n+\n+public class PolicyTraceLogger {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b0959e5614ec0ce63a97e740507469e7afb0118"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 65, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}