{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5NjU5OTE5", "number": 8826, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODozNzo1MlrOD21ogw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMzoxMTo1NFrOD4CU2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODI4NDE5OnYy", "diffSide": "RIGHT", "path": "tests/unit/src/main/java/org/mule/tck/util/MuleContextUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODozNzo1MlrOGMyDjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTo1MTowMlrOGOSWlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1NjIwNQ==", "bodyText": "doesn't this affect any other tests?", "url": "https://github.com/mulesoft/mule/pull/8826#discussion_r416056205", "createdAt": "2020-04-27T18:37:52Z", "author": {"login": "elrodro83"}, "path": "tests/unit/src/main/java/org/mule/tck/util/MuleContextUtils.java", "diffHunk": "@@ -171,7 +172,7 @@ public static MuleContextWithRegistry mockMuleContext() {\n \n     StreamingManager streamingManager = mock(StreamingManager.class, RETURNS_DEEP_STUBS);\n     try {\n-      MuleRegistry registry = mock(MuleRegistry.class, withSettings().lenient());\n+      MuleRegistry registry = mock(MuleRegistryHelper.class, withSettings().lenient());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10005fcec834f332016482fe4aec70fbd1ee08f2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2NTM0MA==", "bodyText": "Ran all the tests and found no side effects (all passing) Will check again just in case.", "url": "https://github.com/mulesoft/mule/pull/8826#discussion_r416065340", "createdAt": "2020-04-27T18:51:17Z", "author": {"login": "IvanAndresFritzler"}, "path": "tests/unit/src/main/java/org/mule/tck/util/MuleContextUtils.java", "diffHunk": "@@ -171,7 +172,7 @@ public static MuleContextWithRegistry mockMuleContext() {\n \n     StreamingManager streamingManager = mock(StreamingManager.class, RETURNS_DEEP_STUBS);\n     try {\n-      MuleRegistry registry = mock(MuleRegistry.class, withSettings().lenient());\n+      MuleRegistry registry = mock(MuleRegistryHelper.class, withSettings().lenient());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1NjIwNQ=="}, "originalCommit": {"oid": "10005fcec834f332016482fe4aec70fbd1ee08f2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzMzk0MA==", "bodyText": "All tests passing, no side effects.", "url": "https://github.com/mulesoft/mule/pull/8826#discussion_r417633940", "createdAt": "2020-04-29T21:51:02Z", "author": {"login": "IvanAndresFritzler"}, "path": "tests/unit/src/main/java/org/mule/tck/util/MuleContextUtils.java", "diffHunk": "@@ -171,7 +172,7 @@ public static MuleContextWithRegistry mockMuleContext() {\n \n     StreamingManager streamingManager = mock(StreamingManager.class, RETURNS_DEEP_STUBS);\n     try {\n-      MuleRegistry registry = mock(MuleRegistry.class, withSettings().lenient());\n+      MuleRegistry registry = mock(MuleRegistryHelper.class, withSettings().lenient());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1NjIwNQ=="}, "originalCommit": {"oid": "10005fcec834f332016482fe4aec70fbd1ee08f2"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODI4NDc3OnYy", "diffSide": "RIGHT", "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/factories/FlowRefFactoryBeanTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODozODowMVrOGMyD5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODozODowMVrOGMyD5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1NjI5NQ==", "bodyText": "formatter", "url": "https://github.com/mulesoft/mule/pull/8826#discussion_r416056295", "createdAt": "2020-04-27T18:38:01Z", "author": {"login": "elrodro83"}, "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/factories/FlowRefFactoryBeanTestCase.java", "diffHunk": "@@ -250,95 +272,182 @@ private Processor getFlowRefProcessor(FlowRefFactoryBean factoryBean) throws Exc\n \n   @Test\n   public void dynamicFlowRefDoesNotExist() throws Exception {\n-    doReturn(true).when(expressionManager).isExpression(anyString());\n     doReturn(new TypedValue<>(\"other\", STRING)).when(expressionManager).evaluate(eq(DYNAMIC_NON_EXISTANT), eq(DataType.STRING),\n-                                                                                 eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n-                                                                                 any(ComponentLocation.class), eq(true));\n+            eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n+            any(ComponentLocation.class), eq(true));\n \n     expectedException.expect(instanceOf(RoutePathNotFoundException.class));\n-    getFlowRefProcessor(createFlowRefFactoryBean(DYNAMIC_NON_EXISTANT)).process(testEvent());\n+    getFlowRefProcessor(createFlowRefFactoryBean(DYNAMIC_NON_EXISTANT, \"flow\", applicationContext)).process(testEvent());\n   }\n \n-  private FlowRefFactoryBean createFlowRefFactoryBean(String name) throws Exception {\n+  @Test\n+  public void concurrentDynamicSubFlowInstantiation() throws Exception {\n+    // MuleArtifactContext stubbing\n+    DefaultListableBeanFactory beanFactory = new ObjectProviderAwareBeanFactory(null);\n+    MuleArtifactContext muleArtifactContext = spy(createMuleArtifactContextStub(beanFactory));\n+    // BeanFactory stubbing (subFlow and subFlow processor factories)\n+    ComponentBuildingDefinition subFlowComponentBuildingDefinition = new CoreComponentBuildingDefinitionProvider()\n+            .getComponentBuildingDefinitions()\n+            .stream()\n+            .filter(componentBuildingDefinition -> componentBuildingDefinition.getComponentIdentifier().getName().equals(\"sub-flow\"))\n+            .findFirst()\n+            .get();\n+    BeanDefinition subFlowProcessorBeanDefinition = genericBeanDefinition(Processor.class, () -> {\n+      Processor subFlowProcessor = (Processor) mock(Object.class, INITIALIZABLE_MESSAGE_PROCESSOR);\n+      when(subFlowProcessor.apply(any())).thenAnswer(successAnswer());\n+      return subFlowProcessor;\n+    }).getBeanDefinition();\n+    BeanDefinition subFlowBeanDefinition = genericBeanDefinition(new ObjectFactoryClassRepository()\n+            .getObjectFactoryClass(subFlowComponentBuildingDefinition, SubflowMessageProcessorChainFactoryBean.class, Object.class,\n+                    () -> true, empty()))\n+            .addPropertyValue(\"name\", PARSED_DYNAMIC_REFERENCED_FLOW)\n+            .addPropertyValue(\"messageProcessors\", subFlowProcessorBeanDefinition)\n+            .setScope(BeanDefinition.SCOPE_PROTOTYPE)\n+            .getBeanDefinition();\n+    beanFactory.registerBeanDefinition(PARSED_DYNAMIC_REFERENCED_FLOW, subFlowBeanDefinition);\n+    //Additional flow and processing strategy (needed to generate a concurrent subflow instantiation)\n+    Flow concurrentCallerFlow = mock(Flow.class, INITIALIZABLE_MESSAGE_PROCESSOR);\n+    ProcessingStrategy concurrentCallerFlowProcessingStrategy = mock(ProcessingStrategy.class);\n+    when(locator.find(Location.builder().globalName(\"concurrentFlow\").build())).thenReturn(of(concurrentCallerFlow));\n+    when(concurrentCallerFlow.getProcessingStrategy()).thenReturn(concurrentCallerFlowProcessingStrategy);\n+    when(concurrentCallerFlowProcessingStrategy.onProcessor(any()))\n+            .thenAnswer(invocationOnMock -> invocationOnMock.getArguments()[0]);\n+    // Two flowRef dynamically pointing to the same subFlow\n+    FlowRefFactoryBean flowRefFactoryBean = createFlowRefFactoryBean(DYNAMIC_REFERENCED_FLOW, \"flow\", muleArtifactContext);\n+    FlowRefFactoryBean parallelFlowRefFactoryBean =\n+            createFlowRefFactoryBean(DYNAMIC_REFERENCED_FLOW, \"concurrentFlow\", muleArtifactContext);\n+    // Events are sent to both flowRefs in parallel in order to trigger a concurrent subflow instantiation\n+    Thread flowEvents = new Thread(() -> {\n+      sendEventsThroughFlowRef(flowRefFactoryBean);\n+    }, \"Flow Events\");\n+    Thread parallelFlowEvents = new Thread(() -> {\n+      sendEventsThroughFlowRef(parallelFlowRefFactoryBean);\n+    }, \"Parallel Flow Events\");\n+    flowEvents.start();\n+    parallelFlowEvents.start();\n+    flowEvents.join();\n+    parallelFlowEvents.join();\n+    // Assertions over each parent flow processing strategies\n+    verify(callerFlowProcessingStrategy, times(2)).onProcessor(any());\n+    verify(concurrentCallerFlowProcessingStrategy, times(2)).onProcessor(any());\n+  }\n+\n+  private void sendEventsThroughFlowRef(FlowRefFactoryBean flowRefFactoryBean) {\n+    try {\n+      Processor flowRefProcessor = getFlowRefProcessor(flowRefFactoryBean);\n+      initialiseIfNeeded(flowRefProcessor);\n+      startIfNeeded(flowRefProcessor);\n+      assertSame(result.getMessage(), just(newEvent()).cast(CoreEvent.class).transform(flowRefProcessor).block().getMessage());\n+      assertSame(result.getMessage(), just(newEvent()).cast(CoreEvent.class).transform(flowRefProcessor).block().getMessage());\n+      stopIfNeeded(flowRefProcessor);\n+      disposeIfNeeded(flowRefProcessor, null);\n+    } catch (Exception e) {\n+      throw new RuntimeException(\"Error sending events to a flowRef\", e);\n+    }\n+  }\n+\n+  private MuleArtifactContext createMuleArtifactContextStub(DefaultListableBeanFactory mockedBeanFactory) {\n+    MuleArtifactContext muleArtifactContext =\n+            new MuleArtifactContext(mockMuleContext, new ConfigResource[0], new ArtifactDeclaration(),\n+                    mock(OptionalObjectsController.class), new HashMap<>(), ArtifactType.APP, new ArrayList<>(),\n+                    Optional.empty(), true, mock(CoreComponentBuildingDefinitionProvider.class)) {\n+\n+              @Override\n+              protected DefaultListableBeanFactory createBeanFactory() {\n+                return mockedBeanFactory;\n+              }\n+\n+              @Override\n+              protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) {\n+                // Bean factory is mocked, so no bean registering here\n+              }\n+\n+              @Override\n+              protected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {\n+                // Bean factory is mocked, so no bean registering here\n+              }\n+\n+              @Override\n+              protected void registerBeanPostProcessors(ConfigurableListableBeanFactory beanFactory) {\n+                // Bean factory is mocked, so no bean registering here\n+              }\n+\n+              @Override\n+              protected void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory) {\n+                // Bean factory is mocked, so no bean invocation here\n+              }\n+\n+              @Override\n+              protected void registerListeners() {\n+                // Bean factory is mocked, so no bean registering here\n+              }\n+\n+              @Override\n+              protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {\n+                // Bean factory is mocked, so no bean registering here\n+              }\n+\n+              @Override\n+              protected void finishRefresh() {\n+                // Bean factory is mocked, so no nothing to do here\n+              }\n+            };\n+    muleArtifactContext.refresh();\n+    return muleArtifactContext;\n+  }\n+\n+  private FlowRefFactoryBean createFlowRefFactoryBean(String referencedFlowName, String flowRefLocation,\n+                                                      ApplicationContext applicationContext)\n+          throws Exception {\n     FlowRefFactoryBean flowRefFactoryBean = new FlowRefFactoryBean();\n-    flowRefFactoryBean.setName(name);\n-    flowRefFactoryBean.setAnnotations(singletonMap(LOCATION_KEY, fromSingleComponent(\"flow\")));\n+    flowRefFactoryBean.setName(referencedFlowName);\n+    flowRefFactoryBean.setAnnotations(singletonMap(LOCATION_KEY, fromSingleComponent(flowRefLocation)));\n     flowRefFactoryBean.setApplicationContext(applicationContext);\n     mockMuleContext.getInjector().inject(flowRefFactoryBean);\n     return flowRefFactoryBean;\n   }\n \n   private FlowRefFactoryBean createStaticFlowRefFactoryBean(Processor target, Object targetBuilder)\n-      throws Exception {\n+          throws Exception {\n     doReturn(false).when(expressionManager).isExpression(anyString());\n     if (targetBuilder != null) {\n       when(applicationContext.getBean(eq(STATIC_REFERENCED_FLOW))).thenReturn(targetBuilder);\n     } else {\n       when(applicationContext.getBean(eq(STATIC_REFERENCED_FLOW))).thenReturn(target);\n     }\n-\n-    if (target instanceof MessageProcessorChain) {\n-      Processor processor = ((MessageProcessorChain) target).getMessageProcessors().get(0);\n-      when(processor.apply(any())).thenAnswer(successAnswer());\n-    } else {\n-      when(target.apply(any())).thenAnswer(successAnswer());\n-    }\n-\n-    return createFlowRefFactoryBean(STATIC_REFERENCED_FLOW);\n+    return createFlowRefFactoryBean(STATIC_REFERENCED_FLOW, \"flow\", applicationContext);\n   }\n \n-  private FlowRefFactoryBean createDynamicFlowRefFactoryBean(Processor target, Object targetBuilder)\n-      throws Exception {\n-    doReturn(true).when(expressionManager).isExpression(anyString());\n-    doReturn(new TypedValue<>(PARSED_DYNAMIC_REFERENCED_FLOW, STRING)).when(expressionManager)\n-        .evaluate(eq(DYNAMIC_REFERENCED_FLOW), eq(DataType.STRING),\n-                  eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n-                  any(ComponentLocation.class), eq(true));\n+  private FlowRefFactoryBean createDynamicFlowRefFactoryBean(Processor target, Object targetBuilder,\n+                                                             ApplicationContext applicationContext)\n+          throws Exception {\n     if (targetBuilder != null) {\n-      when(applicationContext.getBean(eq(PARSED_DYNAMIC_REFERENCED_FLOW))).thenReturn(targetBuilder);\n+      doReturn(targetBuilder).when(applicationContext).getBean(eq(PARSED_DYNAMIC_REFERENCED_FLOW));\n     } else {\n-      when(applicationContext.getBean(eq(PARSED_DYNAMIC_REFERENCED_FLOW))).thenReturn(target);\n+      doReturn(target).when(applicationContext).getBean(eq(PARSED_DYNAMIC_REFERENCED_FLOW));\n     }\n-\n-    if (target instanceof MessageProcessorChain) {\n-      Processor processor = ((MessageProcessorChain) target).getMessageProcessors().get(0);\n-      when(processor.apply(any())).thenAnswer(successAnswer());\n-    } else {\n-      when(target.apply(any())).thenAnswer(successAnswer());\n-    }\n-\n-    return createFlowRefFactoryBean(DYNAMIC_REFERENCED_FLOW);\n+    return createFlowRefFactoryBean(FlowRefFactoryBeanTestCase.DYNAMIC_REFERENCED_FLOW, \"flow\", applicationContext);\n   }\n \n   private Answer<?> successAnswer() {\n     return invocation -> {\n       return from(invocation.getArgument(0))\n-          .cast(CoreEvent.class)\n-          .doOnNext(event -> ((BaseEventContext) event.getContext())\n-              .success(CoreEvent.builder(event).message(result.getMessage()).variables(result.getVariables()).build()))\n-          .map(event -> CoreEvent.builder(event).message(result.getMessage()).variables(result.getVariables()).build());\n+              .cast(CoreEvent.class)\n+              .doOnNext(event -> ((BaseEventContext) event.getContext())\n+                      .success(CoreEvent.builder(event).message(result.getMessage()).variables(result.getVariables()).build()))\n+              .map(event -> CoreEvent.builder(event).message(result.getMessage()).variables(result.getVariables()).build());\n     };\n   }\n \n-  private void verifyProcess(FlowRefFactoryBean flowRefFactoryBean, Processor target)\n-      throws Exception {\n-    Processor flowRefProcessor = getFlowRefProcessor(flowRefFactoryBean);\n-    initialiseIfNeeded(flowRefProcessor);\n-    startIfNeeded(flowRefProcessor);\n-\n-    assertSame(result.getMessage(), just(newEvent()).cast(CoreEvent.class).transform(flowRefProcessor).block().getMessage());\n-    assertSame(result.getMessage(), just(newEvent()).cast(CoreEvent.class).transform(flowRefProcessor).block().getMessage());\n-\n+  private void verifyProcess(FlowRefFactoryBean flowRefFactoryBean, Processor target, ApplicationContext applicationContext)\n+          throws Exception {\n+    sendEventsThroughFlowRef(flowRefFactoryBean);\n     verify(applicationContext).getBean(anyString());\n-\n     verify(target, times(2)).apply(any(Publisher.class));\n-\n-    stopIfNeeded(flowRefProcessor);\n-    disposeIfNeeded(flowRefProcessor, null);\n   }\n \n   private void verifyLifecycle(Processor target, int lifecycleRounds)\n-      throws Exception {\n+          throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10005fcec834f332016482fe4aec70fbd1ee08f2"}, "originalPosition": 448}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODI4NzQzOnYy", "diffSide": "RIGHT", "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/factories/FlowRefFactoryBeanTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODozODozN1rOGMyFeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODozODozN1rOGMyFeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1NjY5Nw==", "bodyText": "static import", "url": "https://github.com/mulesoft/mule/pull/8826#discussion_r416056697", "createdAt": "2020-04-27T18:38:37Z", "author": {"login": "elrodro83"}, "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/factories/FlowRefFactoryBeanTestCase.java", "diffHunk": "@@ -250,95 +272,182 @@ private Processor getFlowRefProcessor(FlowRefFactoryBean factoryBean) throws Exc\n \n   @Test\n   public void dynamicFlowRefDoesNotExist() throws Exception {\n-    doReturn(true).when(expressionManager).isExpression(anyString());\n     doReturn(new TypedValue<>(\"other\", STRING)).when(expressionManager).evaluate(eq(DYNAMIC_NON_EXISTANT), eq(DataType.STRING),\n-                                                                                 eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n-                                                                                 any(ComponentLocation.class), eq(true));\n+            eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n+            any(ComponentLocation.class), eq(true));\n \n     expectedException.expect(instanceOf(RoutePathNotFoundException.class));\n-    getFlowRefProcessor(createFlowRefFactoryBean(DYNAMIC_NON_EXISTANT)).process(testEvent());\n+    getFlowRefProcessor(createFlowRefFactoryBean(DYNAMIC_NON_EXISTANT, \"flow\", applicationContext)).process(testEvent());\n   }\n \n-  private FlowRefFactoryBean createFlowRefFactoryBean(String name) throws Exception {\n+  @Test\n+  public void concurrentDynamicSubFlowInstantiation() throws Exception {\n+    // MuleArtifactContext stubbing\n+    DefaultListableBeanFactory beanFactory = new ObjectProviderAwareBeanFactory(null);\n+    MuleArtifactContext muleArtifactContext = spy(createMuleArtifactContextStub(beanFactory));\n+    // BeanFactory stubbing (subFlow and subFlow processor factories)\n+    ComponentBuildingDefinition subFlowComponentBuildingDefinition = new CoreComponentBuildingDefinitionProvider()\n+            .getComponentBuildingDefinitions()\n+            .stream()\n+            .filter(componentBuildingDefinition -> componentBuildingDefinition.getComponentIdentifier().getName().equals(\"sub-flow\"))\n+            .findFirst()\n+            .get();\n+    BeanDefinition subFlowProcessorBeanDefinition = genericBeanDefinition(Processor.class, () -> {\n+      Processor subFlowProcessor = (Processor) mock(Object.class, INITIALIZABLE_MESSAGE_PROCESSOR);\n+      when(subFlowProcessor.apply(any())).thenAnswer(successAnswer());\n+      return subFlowProcessor;\n+    }).getBeanDefinition();\n+    BeanDefinition subFlowBeanDefinition = genericBeanDefinition(new ObjectFactoryClassRepository()\n+            .getObjectFactoryClass(subFlowComponentBuildingDefinition, SubflowMessageProcessorChainFactoryBean.class, Object.class,\n+                    () -> true, empty()))\n+            .addPropertyValue(\"name\", PARSED_DYNAMIC_REFERENCED_FLOW)\n+            .addPropertyValue(\"messageProcessors\", subFlowProcessorBeanDefinition)\n+            .setScope(BeanDefinition.SCOPE_PROTOTYPE)\n+            .getBeanDefinition();\n+    beanFactory.registerBeanDefinition(PARSED_DYNAMIC_REFERENCED_FLOW, subFlowBeanDefinition);\n+    //Additional flow and processing strategy (needed to generate a concurrent subflow instantiation)\n+    Flow concurrentCallerFlow = mock(Flow.class, INITIALIZABLE_MESSAGE_PROCESSOR);\n+    ProcessingStrategy concurrentCallerFlowProcessingStrategy = mock(ProcessingStrategy.class);\n+    when(locator.find(Location.builder().globalName(\"concurrentFlow\").build())).thenReturn(of(concurrentCallerFlow));\n+    when(concurrentCallerFlow.getProcessingStrategy()).thenReturn(concurrentCallerFlowProcessingStrategy);\n+    when(concurrentCallerFlowProcessingStrategy.onProcessor(any()))\n+            .thenAnswer(invocationOnMock -> invocationOnMock.getArguments()[0]);\n+    // Two flowRef dynamically pointing to the same subFlow\n+    FlowRefFactoryBean flowRefFactoryBean = createFlowRefFactoryBean(DYNAMIC_REFERENCED_FLOW, \"flow\", muleArtifactContext);\n+    FlowRefFactoryBean parallelFlowRefFactoryBean =\n+            createFlowRefFactoryBean(DYNAMIC_REFERENCED_FLOW, \"concurrentFlow\", muleArtifactContext);\n+    // Events are sent to both flowRefs in parallel in order to trigger a concurrent subflow instantiation\n+    Thread flowEvents = new Thread(() -> {\n+      sendEventsThroughFlowRef(flowRefFactoryBean);\n+    }, \"Flow Events\");\n+    Thread parallelFlowEvents = new Thread(() -> {\n+      sendEventsThroughFlowRef(parallelFlowRefFactoryBean);\n+    }, \"Parallel Flow Events\");\n+    flowEvents.start();\n+    parallelFlowEvents.start();\n+    flowEvents.join();\n+    parallelFlowEvents.join();\n+    // Assertions over each parent flow processing strategies\n+    verify(callerFlowProcessingStrategy, times(2)).onProcessor(any());\n+    verify(concurrentCallerFlowProcessingStrategy, times(2)).onProcessor(any());\n+  }\n+\n+  private void sendEventsThroughFlowRef(FlowRefFactoryBean flowRefFactoryBean) {\n+    try {\n+      Processor flowRefProcessor = getFlowRefProcessor(flowRefFactoryBean);\n+      initialiseIfNeeded(flowRefProcessor);\n+      startIfNeeded(flowRefProcessor);\n+      assertSame(result.getMessage(), just(newEvent()).cast(CoreEvent.class).transform(flowRefProcessor).block().getMessage());\n+      assertSame(result.getMessage(), just(newEvent()).cast(CoreEvent.class).transform(flowRefProcessor).block().getMessage());\n+      stopIfNeeded(flowRefProcessor);\n+      disposeIfNeeded(flowRefProcessor, null);\n+    } catch (Exception e) {\n+      throw new RuntimeException(\"Error sending events to a flowRef\", e);\n+    }\n+  }\n+\n+  private MuleArtifactContext createMuleArtifactContextStub(DefaultListableBeanFactory mockedBeanFactory) {\n+    MuleArtifactContext muleArtifactContext =\n+            new MuleArtifactContext(mockMuleContext, new ConfigResource[0], new ArtifactDeclaration(),\n+                    mock(OptionalObjectsController.class), new HashMap<>(), ArtifactType.APP, new ArrayList<>(),\n+                    Optional.empty(), true, mock(CoreComponentBuildingDefinitionProvider.class)) {\n+\n+              @Override\n+              protected DefaultListableBeanFactory createBeanFactory() {\n+                return mockedBeanFactory;\n+              }\n+\n+              @Override\n+              protected void customizeBeanFactory(DefaultListableBeanFactory beanFactory) {\n+                // Bean factory is mocked, so no bean registering here\n+              }\n+\n+              @Override\n+              protected void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory) {\n+                // Bean factory is mocked, so no bean registering here\n+              }\n+\n+              @Override\n+              protected void registerBeanPostProcessors(ConfigurableListableBeanFactory beanFactory) {\n+                // Bean factory is mocked, so no bean registering here\n+              }\n+\n+              @Override\n+              protected void invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory beanFactory) {\n+                // Bean factory is mocked, so no bean invocation here\n+              }\n+\n+              @Override\n+              protected void registerListeners() {\n+                // Bean factory is mocked, so no bean registering here\n+              }\n+\n+              @Override\n+              protected void finishBeanFactoryInitialization(ConfigurableListableBeanFactory beanFactory) {\n+                // Bean factory is mocked, so no bean registering here\n+              }\n+\n+              @Override\n+              protected void finishRefresh() {\n+                // Bean factory is mocked, so no nothing to do here\n+              }\n+            };\n+    muleArtifactContext.refresh();\n+    return muleArtifactContext;\n+  }\n+\n+  private FlowRefFactoryBean createFlowRefFactoryBean(String referencedFlowName, String flowRefLocation,\n+                                                      ApplicationContext applicationContext)\n+          throws Exception {\n     FlowRefFactoryBean flowRefFactoryBean = new FlowRefFactoryBean();\n-    flowRefFactoryBean.setName(name);\n-    flowRefFactoryBean.setAnnotations(singletonMap(LOCATION_KEY, fromSingleComponent(\"flow\")));\n+    flowRefFactoryBean.setName(referencedFlowName);\n+    flowRefFactoryBean.setAnnotations(singletonMap(LOCATION_KEY, fromSingleComponent(flowRefLocation)));\n     flowRefFactoryBean.setApplicationContext(applicationContext);\n     mockMuleContext.getInjector().inject(flowRefFactoryBean);\n     return flowRefFactoryBean;\n   }\n \n   private FlowRefFactoryBean createStaticFlowRefFactoryBean(Processor target, Object targetBuilder)\n-      throws Exception {\n+          throws Exception {\n     doReturn(false).when(expressionManager).isExpression(anyString());\n     if (targetBuilder != null) {\n       when(applicationContext.getBean(eq(STATIC_REFERENCED_FLOW))).thenReturn(targetBuilder);\n     } else {\n       when(applicationContext.getBean(eq(STATIC_REFERENCED_FLOW))).thenReturn(target);\n     }\n-\n-    if (target instanceof MessageProcessorChain) {\n-      Processor processor = ((MessageProcessorChain) target).getMessageProcessors().get(0);\n-      when(processor.apply(any())).thenAnswer(successAnswer());\n-    } else {\n-      when(target.apply(any())).thenAnswer(successAnswer());\n-    }\n-\n-    return createFlowRefFactoryBean(STATIC_REFERENCED_FLOW);\n+    return createFlowRefFactoryBean(STATIC_REFERENCED_FLOW, \"flow\", applicationContext);\n   }\n \n-  private FlowRefFactoryBean createDynamicFlowRefFactoryBean(Processor target, Object targetBuilder)\n-      throws Exception {\n-    doReturn(true).when(expressionManager).isExpression(anyString());\n-    doReturn(new TypedValue<>(PARSED_DYNAMIC_REFERENCED_FLOW, STRING)).when(expressionManager)\n-        .evaluate(eq(DYNAMIC_REFERENCED_FLOW), eq(DataType.STRING),\n-                  eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n-                  any(ComponentLocation.class), eq(true));\n+  private FlowRefFactoryBean createDynamicFlowRefFactoryBean(Processor target, Object targetBuilder,\n+                                                             ApplicationContext applicationContext)\n+          throws Exception {\n     if (targetBuilder != null) {\n-      when(applicationContext.getBean(eq(PARSED_DYNAMIC_REFERENCED_FLOW))).thenReturn(targetBuilder);\n+      doReturn(targetBuilder).when(applicationContext).getBean(eq(PARSED_DYNAMIC_REFERENCED_FLOW));\n     } else {\n-      when(applicationContext.getBean(eq(PARSED_DYNAMIC_REFERENCED_FLOW))).thenReturn(target);\n+      doReturn(target).when(applicationContext).getBean(eq(PARSED_DYNAMIC_REFERENCED_FLOW));\n     }\n-\n-    if (target instanceof MessageProcessorChain) {\n-      Processor processor = ((MessageProcessorChain) target).getMessageProcessors().get(0);\n-      when(processor.apply(any())).thenAnswer(successAnswer());\n-    } else {\n-      when(target.apply(any())).thenAnswer(successAnswer());\n-    }\n-\n-    return createFlowRefFactoryBean(DYNAMIC_REFERENCED_FLOW);\n+    return createFlowRefFactoryBean(FlowRefFactoryBeanTestCase.DYNAMIC_REFERENCED_FLOW, \"flow\", applicationContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10005fcec834f332016482fe4aec70fbd1ee08f2"}, "originalPosition": 409}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODI5MTA3OnYy", "diffSide": "RIGHT", "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/factories/FlowRefFactoryBeanTestCase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODozOToyNlrOGMyHjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTo1MDozNlrOGOSVvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1NzIyOA==", "bodyText": "add allure @Issue", "url": "https://github.com/mulesoft/mule/pull/8826#discussion_r416057228", "createdAt": "2020-04-27T18:39:26Z", "author": {"login": "elrodro83"}, "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/factories/FlowRefFactoryBeanTestCase.java", "diffHunk": "@@ -250,95 +272,182 @@ private Processor getFlowRefProcessor(FlowRefFactoryBean factoryBean) throws Exc\n \n   @Test\n   public void dynamicFlowRefDoesNotExist() throws Exception {\n-    doReturn(true).when(expressionManager).isExpression(anyString());\n     doReturn(new TypedValue<>(\"other\", STRING)).when(expressionManager).evaluate(eq(DYNAMIC_NON_EXISTANT), eq(DataType.STRING),\n-                                                                                 eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n-                                                                                 any(ComponentLocation.class), eq(true));\n+            eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n+            any(ComponentLocation.class), eq(true));\n \n     expectedException.expect(instanceOf(RoutePathNotFoundException.class));\n-    getFlowRefProcessor(createFlowRefFactoryBean(DYNAMIC_NON_EXISTANT)).process(testEvent());\n+    getFlowRefProcessor(createFlowRefFactoryBean(DYNAMIC_NON_EXISTANT, \"flow\", applicationContext)).process(testEvent());\n   }\n \n-  private FlowRefFactoryBean createFlowRefFactoryBean(String name) throws Exception {\n+  @Test\n+  public void concurrentDynamicSubFlowInstantiation() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10005fcec834f332016482fe4aec70fbd1ee08f2"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzMzcyNg==", "bodyText": "Added new annotations to AllureConstants", "url": "https://github.com/mulesoft/mule/pull/8826#discussion_r417633726", "createdAt": "2020-04-29T21:50:36Z", "author": {"login": "IvanAndresFritzler"}, "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/factories/FlowRefFactoryBeanTestCase.java", "diffHunk": "@@ -250,95 +272,182 @@ private Processor getFlowRefProcessor(FlowRefFactoryBean factoryBean) throws Exc\n \n   @Test\n   public void dynamicFlowRefDoesNotExist() throws Exception {\n-    doReturn(true).when(expressionManager).isExpression(anyString());\n     doReturn(new TypedValue<>(\"other\", STRING)).when(expressionManager).evaluate(eq(DYNAMIC_NON_EXISTANT), eq(DataType.STRING),\n-                                                                                 eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n-                                                                                 any(ComponentLocation.class), eq(true));\n+            eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n+            any(ComponentLocation.class), eq(true));\n \n     expectedException.expect(instanceOf(RoutePathNotFoundException.class));\n-    getFlowRefProcessor(createFlowRefFactoryBean(DYNAMIC_NON_EXISTANT)).process(testEvent());\n+    getFlowRefProcessor(createFlowRefFactoryBean(DYNAMIC_NON_EXISTANT, \"flow\", applicationContext)).process(testEvent());\n   }\n \n-  private FlowRefFactoryBean createFlowRefFactoryBean(String name) throws Exception {\n+  @Test\n+  public void concurrentDynamicSubFlowInstantiation() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1NzIyOA=="}, "originalCommit": {"oid": "10005fcec834f332016482fe4aec70fbd1ee08f2"}, "originalPosition": 234}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODI5MzI2OnYy", "diffSide": "RIGHT", "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/factories/FlowRefFactoryBeanTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo0MDowNFrOGMyI8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo0MDowNFrOGMyI8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1NzU4Nw==", "bodyText": "use an Executor instead of threads", "url": "https://github.com/mulesoft/mule/pull/8826#discussion_r416057587", "createdAt": "2020-04-27T18:40:04Z", "author": {"login": "elrodro83"}, "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/factories/FlowRefFactoryBeanTestCase.java", "diffHunk": "@@ -250,95 +272,182 @@ private Processor getFlowRefProcessor(FlowRefFactoryBean factoryBean) throws Exc\n \n   @Test\n   public void dynamicFlowRefDoesNotExist() throws Exception {\n-    doReturn(true).when(expressionManager).isExpression(anyString());\n     doReturn(new TypedValue<>(\"other\", STRING)).when(expressionManager).evaluate(eq(DYNAMIC_NON_EXISTANT), eq(DataType.STRING),\n-                                                                                 eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n-                                                                                 any(ComponentLocation.class), eq(true));\n+            eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n+            any(ComponentLocation.class), eq(true));\n \n     expectedException.expect(instanceOf(RoutePathNotFoundException.class));\n-    getFlowRefProcessor(createFlowRefFactoryBean(DYNAMIC_NON_EXISTANT)).process(testEvent());\n+    getFlowRefProcessor(createFlowRefFactoryBean(DYNAMIC_NON_EXISTANT, \"flow\", applicationContext)).process(testEvent());\n   }\n \n-  private FlowRefFactoryBean createFlowRefFactoryBean(String name) throws Exception {\n+  @Test\n+  public void concurrentDynamicSubFlowInstantiation() throws Exception {\n+    // MuleArtifactContext stubbing\n+    DefaultListableBeanFactory beanFactory = new ObjectProviderAwareBeanFactory(null);\n+    MuleArtifactContext muleArtifactContext = spy(createMuleArtifactContextStub(beanFactory));\n+    // BeanFactory stubbing (subFlow and subFlow processor factories)\n+    ComponentBuildingDefinition subFlowComponentBuildingDefinition = new CoreComponentBuildingDefinitionProvider()\n+            .getComponentBuildingDefinitions()\n+            .stream()\n+            .filter(componentBuildingDefinition -> componentBuildingDefinition.getComponentIdentifier().getName().equals(\"sub-flow\"))\n+            .findFirst()\n+            .get();\n+    BeanDefinition subFlowProcessorBeanDefinition = genericBeanDefinition(Processor.class, () -> {\n+      Processor subFlowProcessor = (Processor) mock(Object.class, INITIALIZABLE_MESSAGE_PROCESSOR);\n+      when(subFlowProcessor.apply(any())).thenAnswer(successAnswer());\n+      return subFlowProcessor;\n+    }).getBeanDefinition();\n+    BeanDefinition subFlowBeanDefinition = genericBeanDefinition(new ObjectFactoryClassRepository()\n+            .getObjectFactoryClass(subFlowComponentBuildingDefinition, SubflowMessageProcessorChainFactoryBean.class, Object.class,\n+                    () -> true, empty()))\n+            .addPropertyValue(\"name\", PARSED_DYNAMIC_REFERENCED_FLOW)\n+            .addPropertyValue(\"messageProcessors\", subFlowProcessorBeanDefinition)\n+            .setScope(BeanDefinition.SCOPE_PROTOTYPE)\n+            .getBeanDefinition();\n+    beanFactory.registerBeanDefinition(PARSED_DYNAMIC_REFERENCED_FLOW, subFlowBeanDefinition);\n+    //Additional flow and processing strategy (needed to generate a concurrent subflow instantiation)\n+    Flow concurrentCallerFlow = mock(Flow.class, INITIALIZABLE_MESSAGE_PROCESSOR);\n+    ProcessingStrategy concurrentCallerFlowProcessingStrategy = mock(ProcessingStrategy.class);\n+    when(locator.find(Location.builder().globalName(\"concurrentFlow\").build())).thenReturn(of(concurrentCallerFlow));\n+    when(concurrentCallerFlow.getProcessingStrategy()).thenReturn(concurrentCallerFlowProcessingStrategy);\n+    when(concurrentCallerFlowProcessingStrategy.onProcessor(any()))\n+            .thenAnswer(invocationOnMock -> invocationOnMock.getArguments()[0]);\n+    // Two flowRef dynamically pointing to the same subFlow\n+    FlowRefFactoryBean flowRefFactoryBean = createFlowRefFactoryBean(DYNAMIC_REFERENCED_FLOW, \"flow\", muleArtifactContext);\n+    FlowRefFactoryBean parallelFlowRefFactoryBean =\n+            createFlowRefFactoryBean(DYNAMIC_REFERENCED_FLOW, \"concurrentFlow\", muleArtifactContext);\n+    // Events are sent to both flowRefs in parallel in order to trigger a concurrent subflow instantiation\n+    Thread flowEvents = new Thread(() -> {\n+      sendEventsThroughFlowRef(flowRefFactoryBean);\n+    }, \"Flow Events\");\n+    Thread parallelFlowEvents = new Thread(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10005fcec834f332016482fe4aec70fbd1ee08f2"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODI5NjA2OnYy", "diffSide": "RIGHT", "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/factories/FlowRefFactoryBeanTestCase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo0MDo0MlrOGMyKnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTo1MjoyMlrOGOSZCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1ODAxMw==", "bodyText": "can this be executed more times to force the manifestation of the race condition?", "url": "https://github.com/mulesoft/mule/pull/8826#discussion_r416058013", "createdAt": "2020-04-27T18:40:42Z", "author": {"login": "elrodro83"}, "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/factories/FlowRefFactoryBeanTestCase.java", "diffHunk": "@@ -250,95 +272,182 @@ private Processor getFlowRefProcessor(FlowRefFactoryBean factoryBean) throws Exc\n \n   @Test\n   public void dynamicFlowRefDoesNotExist() throws Exception {\n-    doReturn(true).when(expressionManager).isExpression(anyString());\n     doReturn(new TypedValue<>(\"other\", STRING)).when(expressionManager).evaluate(eq(DYNAMIC_NON_EXISTANT), eq(DataType.STRING),\n-                                                                                 eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n-                                                                                 any(ComponentLocation.class), eq(true));\n+            eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n+            any(ComponentLocation.class), eq(true));\n \n     expectedException.expect(instanceOf(RoutePathNotFoundException.class));\n-    getFlowRefProcessor(createFlowRefFactoryBean(DYNAMIC_NON_EXISTANT)).process(testEvent());\n+    getFlowRefProcessor(createFlowRefFactoryBean(DYNAMIC_NON_EXISTANT, \"flow\", applicationContext)).process(testEvent());\n   }\n \n-  private FlowRefFactoryBean createFlowRefFactoryBean(String name) throws Exception {\n+  @Test\n+  public void concurrentDynamicSubFlowInstantiation() throws Exception {\n+    // MuleArtifactContext stubbing\n+    DefaultListableBeanFactory beanFactory = new ObjectProviderAwareBeanFactory(null);\n+    MuleArtifactContext muleArtifactContext = spy(createMuleArtifactContextStub(beanFactory));\n+    // BeanFactory stubbing (subFlow and subFlow processor factories)\n+    ComponentBuildingDefinition subFlowComponentBuildingDefinition = new CoreComponentBuildingDefinitionProvider()\n+            .getComponentBuildingDefinitions()\n+            .stream()\n+            .filter(componentBuildingDefinition -> componentBuildingDefinition.getComponentIdentifier().getName().equals(\"sub-flow\"))\n+            .findFirst()\n+            .get();\n+    BeanDefinition subFlowProcessorBeanDefinition = genericBeanDefinition(Processor.class, () -> {\n+      Processor subFlowProcessor = (Processor) mock(Object.class, INITIALIZABLE_MESSAGE_PROCESSOR);\n+      when(subFlowProcessor.apply(any())).thenAnswer(successAnswer());\n+      return subFlowProcessor;\n+    }).getBeanDefinition();\n+    BeanDefinition subFlowBeanDefinition = genericBeanDefinition(new ObjectFactoryClassRepository()\n+            .getObjectFactoryClass(subFlowComponentBuildingDefinition, SubflowMessageProcessorChainFactoryBean.class, Object.class,\n+                    () -> true, empty()))\n+            .addPropertyValue(\"name\", PARSED_DYNAMIC_REFERENCED_FLOW)\n+            .addPropertyValue(\"messageProcessors\", subFlowProcessorBeanDefinition)\n+            .setScope(BeanDefinition.SCOPE_PROTOTYPE)\n+            .getBeanDefinition();\n+    beanFactory.registerBeanDefinition(PARSED_DYNAMIC_REFERENCED_FLOW, subFlowBeanDefinition);\n+    //Additional flow and processing strategy (needed to generate a concurrent subflow instantiation)\n+    Flow concurrentCallerFlow = mock(Flow.class, INITIALIZABLE_MESSAGE_PROCESSOR);\n+    ProcessingStrategy concurrentCallerFlowProcessingStrategy = mock(ProcessingStrategy.class);\n+    when(locator.find(Location.builder().globalName(\"concurrentFlow\").build())).thenReturn(of(concurrentCallerFlow));\n+    when(concurrentCallerFlow.getProcessingStrategy()).thenReturn(concurrentCallerFlowProcessingStrategy);\n+    when(concurrentCallerFlowProcessingStrategy.onProcessor(any()))\n+            .thenAnswer(invocationOnMock -> invocationOnMock.getArguments()[0]);\n+    // Two flowRef dynamically pointing to the same subFlow\n+    FlowRefFactoryBean flowRefFactoryBean = createFlowRefFactoryBean(DYNAMIC_REFERENCED_FLOW, \"flow\", muleArtifactContext);\n+    FlowRefFactoryBean parallelFlowRefFactoryBean =\n+            createFlowRefFactoryBean(DYNAMIC_REFERENCED_FLOW, \"concurrentFlow\", muleArtifactContext);\n+    // Events are sent to both flowRefs in parallel in order to trigger a concurrent subflow instantiation\n+    Thread flowEvents = new Thread(() -> {\n+      sendEventsThroughFlowRef(flowRefFactoryBean);\n+    }, \"Flow Events\");\n+    Thread parallelFlowEvents = new Thread(() -> {\n+      sendEventsThroughFlowRef(parallelFlowRefFactoryBean);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10005fcec834f332016482fe4aec70fbd1ee08f2"}, "originalPosition": 274}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA2ODYzNA==", "bodyText": "Will try. With some modifications it might be possible to make it fail \"almost all the executions\".", "url": "https://github.com/mulesoft/mule/pull/8826#discussion_r416068634", "createdAt": "2020-04-27T18:56:06Z", "author": {"login": "IvanAndresFritzler"}, "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/factories/FlowRefFactoryBeanTestCase.java", "diffHunk": "@@ -250,95 +272,182 @@ private Processor getFlowRefProcessor(FlowRefFactoryBean factoryBean) throws Exc\n \n   @Test\n   public void dynamicFlowRefDoesNotExist() throws Exception {\n-    doReturn(true).when(expressionManager).isExpression(anyString());\n     doReturn(new TypedValue<>(\"other\", STRING)).when(expressionManager).evaluate(eq(DYNAMIC_NON_EXISTANT), eq(DataType.STRING),\n-                                                                                 eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n-                                                                                 any(ComponentLocation.class), eq(true));\n+            eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n+            any(ComponentLocation.class), eq(true));\n \n     expectedException.expect(instanceOf(RoutePathNotFoundException.class));\n-    getFlowRefProcessor(createFlowRefFactoryBean(DYNAMIC_NON_EXISTANT)).process(testEvent());\n+    getFlowRefProcessor(createFlowRefFactoryBean(DYNAMIC_NON_EXISTANT, \"flow\", applicationContext)).process(testEvent());\n   }\n \n-  private FlowRefFactoryBean createFlowRefFactoryBean(String name) throws Exception {\n+  @Test\n+  public void concurrentDynamicSubFlowInstantiation() throws Exception {\n+    // MuleArtifactContext stubbing\n+    DefaultListableBeanFactory beanFactory = new ObjectProviderAwareBeanFactory(null);\n+    MuleArtifactContext muleArtifactContext = spy(createMuleArtifactContextStub(beanFactory));\n+    // BeanFactory stubbing (subFlow and subFlow processor factories)\n+    ComponentBuildingDefinition subFlowComponentBuildingDefinition = new CoreComponentBuildingDefinitionProvider()\n+            .getComponentBuildingDefinitions()\n+            .stream()\n+            .filter(componentBuildingDefinition -> componentBuildingDefinition.getComponentIdentifier().getName().equals(\"sub-flow\"))\n+            .findFirst()\n+            .get();\n+    BeanDefinition subFlowProcessorBeanDefinition = genericBeanDefinition(Processor.class, () -> {\n+      Processor subFlowProcessor = (Processor) mock(Object.class, INITIALIZABLE_MESSAGE_PROCESSOR);\n+      when(subFlowProcessor.apply(any())).thenAnswer(successAnswer());\n+      return subFlowProcessor;\n+    }).getBeanDefinition();\n+    BeanDefinition subFlowBeanDefinition = genericBeanDefinition(new ObjectFactoryClassRepository()\n+            .getObjectFactoryClass(subFlowComponentBuildingDefinition, SubflowMessageProcessorChainFactoryBean.class, Object.class,\n+                    () -> true, empty()))\n+            .addPropertyValue(\"name\", PARSED_DYNAMIC_REFERENCED_FLOW)\n+            .addPropertyValue(\"messageProcessors\", subFlowProcessorBeanDefinition)\n+            .setScope(BeanDefinition.SCOPE_PROTOTYPE)\n+            .getBeanDefinition();\n+    beanFactory.registerBeanDefinition(PARSED_DYNAMIC_REFERENCED_FLOW, subFlowBeanDefinition);\n+    //Additional flow and processing strategy (needed to generate a concurrent subflow instantiation)\n+    Flow concurrentCallerFlow = mock(Flow.class, INITIALIZABLE_MESSAGE_PROCESSOR);\n+    ProcessingStrategy concurrentCallerFlowProcessingStrategy = mock(ProcessingStrategy.class);\n+    when(locator.find(Location.builder().globalName(\"concurrentFlow\").build())).thenReturn(of(concurrentCallerFlow));\n+    when(concurrentCallerFlow.getProcessingStrategy()).thenReturn(concurrentCallerFlowProcessingStrategy);\n+    when(concurrentCallerFlowProcessingStrategy.onProcessor(any()))\n+            .thenAnswer(invocationOnMock -> invocationOnMock.getArguments()[0]);\n+    // Two flowRef dynamically pointing to the same subFlow\n+    FlowRefFactoryBean flowRefFactoryBean = createFlowRefFactoryBean(DYNAMIC_REFERENCED_FLOW, \"flow\", muleArtifactContext);\n+    FlowRefFactoryBean parallelFlowRefFactoryBean =\n+            createFlowRefFactoryBean(DYNAMIC_REFERENCED_FLOW, \"concurrentFlow\", muleArtifactContext);\n+    // Events are sent to both flowRefs in parallel in order to trigger a concurrent subflow instantiation\n+    Thread flowEvents = new Thread(() -> {\n+      sendEventsThroughFlowRef(flowRefFactoryBean);\n+    }, \"Flow Events\");\n+    Thread parallelFlowEvents = new Thread(() -> {\n+      sendEventsThroughFlowRef(parallelFlowRefFactoryBean);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1ODAxMw=="}, "originalCommit": {"oid": "10005fcec834f332016482fe4aec70fbd1ee08f2"}, "originalPosition": 274}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzNDU3MQ==", "bodyText": "New version failed 1000 of 1000 runs without the fix", "url": "https://github.com/mulesoft/mule/pull/8826#discussion_r417634571", "createdAt": "2020-04-29T21:52:22Z", "author": {"login": "IvanAndresFritzler"}, "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/factories/FlowRefFactoryBeanTestCase.java", "diffHunk": "@@ -250,95 +272,182 @@ private Processor getFlowRefProcessor(FlowRefFactoryBean factoryBean) throws Exc\n \n   @Test\n   public void dynamicFlowRefDoesNotExist() throws Exception {\n-    doReturn(true).when(expressionManager).isExpression(anyString());\n     doReturn(new TypedValue<>(\"other\", STRING)).when(expressionManager).evaluate(eq(DYNAMIC_NON_EXISTANT), eq(DataType.STRING),\n-                                                                                 eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n-                                                                                 any(ComponentLocation.class), eq(true));\n+            eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n+            any(ComponentLocation.class), eq(true));\n \n     expectedException.expect(instanceOf(RoutePathNotFoundException.class));\n-    getFlowRefProcessor(createFlowRefFactoryBean(DYNAMIC_NON_EXISTANT)).process(testEvent());\n+    getFlowRefProcessor(createFlowRefFactoryBean(DYNAMIC_NON_EXISTANT, \"flow\", applicationContext)).process(testEvent());\n   }\n \n-  private FlowRefFactoryBean createFlowRefFactoryBean(String name) throws Exception {\n+  @Test\n+  public void concurrentDynamicSubFlowInstantiation() throws Exception {\n+    // MuleArtifactContext stubbing\n+    DefaultListableBeanFactory beanFactory = new ObjectProviderAwareBeanFactory(null);\n+    MuleArtifactContext muleArtifactContext = spy(createMuleArtifactContextStub(beanFactory));\n+    // BeanFactory stubbing (subFlow and subFlow processor factories)\n+    ComponentBuildingDefinition subFlowComponentBuildingDefinition = new CoreComponentBuildingDefinitionProvider()\n+            .getComponentBuildingDefinitions()\n+            .stream()\n+            .filter(componentBuildingDefinition -> componentBuildingDefinition.getComponentIdentifier().getName().equals(\"sub-flow\"))\n+            .findFirst()\n+            .get();\n+    BeanDefinition subFlowProcessorBeanDefinition = genericBeanDefinition(Processor.class, () -> {\n+      Processor subFlowProcessor = (Processor) mock(Object.class, INITIALIZABLE_MESSAGE_PROCESSOR);\n+      when(subFlowProcessor.apply(any())).thenAnswer(successAnswer());\n+      return subFlowProcessor;\n+    }).getBeanDefinition();\n+    BeanDefinition subFlowBeanDefinition = genericBeanDefinition(new ObjectFactoryClassRepository()\n+            .getObjectFactoryClass(subFlowComponentBuildingDefinition, SubflowMessageProcessorChainFactoryBean.class, Object.class,\n+                    () -> true, empty()))\n+            .addPropertyValue(\"name\", PARSED_DYNAMIC_REFERENCED_FLOW)\n+            .addPropertyValue(\"messageProcessors\", subFlowProcessorBeanDefinition)\n+            .setScope(BeanDefinition.SCOPE_PROTOTYPE)\n+            .getBeanDefinition();\n+    beanFactory.registerBeanDefinition(PARSED_DYNAMIC_REFERENCED_FLOW, subFlowBeanDefinition);\n+    //Additional flow and processing strategy (needed to generate a concurrent subflow instantiation)\n+    Flow concurrentCallerFlow = mock(Flow.class, INITIALIZABLE_MESSAGE_PROCESSOR);\n+    ProcessingStrategy concurrentCallerFlowProcessingStrategy = mock(ProcessingStrategy.class);\n+    when(locator.find(Location.builder().globalName(\"concurrentFlow\").build())).thenReturn(of(concurrentCallerFlow));\n+    when(concurrentCallerFlow.getProcessingStrategy()).thenReturn(concurrentCallerFlowProcessingStrategy);\n+    when(concurrentCallerFlowProcessingStrategy.onProcessor(any()))\n+            .thenAnswer(invocationOnMock -> invocationOnMock.getArguments()[0]);\n+    // Two flowRef dynamically pointing to the same subFlow\n+    FlowRefFactoryBean flowRefFactoryBean = createFlowRefFactoryBean(DYNAMIC_REFERENCED_FLOW, \"flow\", muleArtifactContext);\n+    FlowRefFactoryBean parallelFlowRefFactoryBean =\n+            createFlowRefFactoryBean(DYNAMIC_REFERENCED_FLOW, \"concurrentFlow\", muleArtifactContext);\n+    // Events are sent to both flowRefs in parallel in order to trigger a concurrent subflow instantiation\n+    Thread flowEvents = new Thread(() -> {\n+      sendEventsThroughFlowRef(flowRefFactoryBean);\n+    }, \"Flow Events\");\n+    Thread parallelFlowEvents = new Thread(() -> {\n+      sendEventsThroughFlowRef(parallelFlowRefFactoryBean);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1ODAxMw=="}, "originalCommit": {"oid": "10005fcec834f332016482fe4aec70fbd1ee08f2"}, "originalPosition": 274}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4ODMwMDI0OnYy", "diffSide": "RIGHT", "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/factories/FlowRefFactoryBeanTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo0MToyNVrOGMyM1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODo0MToyNVrOGMyM1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjA1ODU4MA==", "bodyText": "no * imports", "url": "https://github.com/mulesoft/mule/pull/8826#discussion_r416058580", "createdAt": "2020-04-27T18:41:25Z", "author": {"login": "elrodro83"}, "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/factories/FlowRefFactoryBeanTestCase.java", "diffHunk": "@@ -66,10 +73,12 @@\n import org.mule.runtime.core.privileged.event.BaseEventContext;\n import org.mule.runtime.core.privileged.processor.chain.MessageProcessorChain;\n import org.mule.runtime.core.privileged.routing.RoutePathNotFoundException;\n+import org.mule.runtime.dsl.api.ConfigResource;\n+import org.mule.runtime.dsl.api.component.ComponentBuildingDefinition;\n import org.mule.tck.junit4.AbstractMuleTestCase;\n import org.mule.tck.size.SmallTest;\n \n-import java.util.List;\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "10005fcec834f332016482fe4aec70fbd1ee08f2"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDg0MTM0OnYy", "diffSide": "RIGHT", "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/factories/FlowRefFactoryBeanTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMzowOTo0NVrOGOoe-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMzowOTo0NVrOGOoe-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5NjUzOQ==", "bodyText": "static imports of these constants", "url": "https://github.com/mulesoft/mule/pull/8826#discussion_r417996539", "createdAt": "2020-04-30T13:09:45Z", "author": {"login": "elrodro83"}, "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/factories/FlowRefFactoryBeanTestCase.java", "diffHunk": "@@ -273,63 +289,86 @@ private Processor getFlowRefProcessor(FlowRefFactoryBean factoryBean) throws Exc\n   @Test\n   public void dynamicFlowRefDoesNotExist() throws Exception {\n     doReturn(new TypedValue<>(\"other\", STRING)).when(expressionManager).evaluate(eq(DYNAMIC_NON_EXISTANT), eq(DataType.STRING),\n-            eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n-            any(ComponentLocation.class), eq(true));\n+                                                                                 eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n+                                                                                 any(ComponentLocation.class), eq(true));\n \n     expectedException.expect(instanceOf(RoutePathNotFoundException.class));\n     getFlowRefProcessor(createFlowRefFactoryBean(DYNAMIC_NON_EXISTANT, \"flow\", applicationContext)).process(testEvent());\n   }\n \n-  @Test\n+  @Test()\n+  @Feature(AllureConstants.SpringConfiguration.SPRING_CONFIGURATION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5c96a035fdce204358bd0bc575c695b1649e38c"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMDg0OTUyOnYy", "diffSide": "RIGHT", "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/factories/FlowRefFactoryBeanTestCase.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxMzoxMTo1NFrOGOokJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoxNDowM1rOGOrQjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5Nzg2MA==", "bodyText": "isn't there allure constants for flow-ref? that would be mor appropriate here.", "url": "https://github.com/mulesoft/mule/pull/8826#discussion_r417997860", "createdAt": "2020-04-30T13:11:54Z", "author": {"login": "elrodro83"}, "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/factories/FlowRefFactoryBeanTestCase.java", "diffHunk": "@@ -273,63 +289,86 @@ private Processor getFlowRefProcessor(FlowRefFactoryBean factoryBean) throws Exc\n   @Test\n   public void dynamicFlowRefDoesNotExist() throws Exception {\n     doReturn(new TypedValue<>(\"other\", STRING)).when(expressionManager).evaluate(eq(DYNAMIC_NON_EXISTANT), eq(DataType.STRING),\n-            eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n-            any(ComponentLocation.class), eq(true));\n+                                                                                 eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n+                                                                                 any(ComponentLocation.class), eq(true));\n \n     expectedException.expect(instanceOf(RoutePathNotFoundException.class));\n     getFlowRefProcessor(createFlowRefFactoryBean(DYNAMIC_NON_EXISTANT, \"flow\", applicationContext)).process(testEvent());\n   }\n \n-  @Test\n+  @Test()\n+  @Feature(AllureConstants.SpringConfiguration.SPRING_CONFIGURATION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5c96a035fdce204358bd0bc575c695b1649e38c"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5ODU1Mw==", "bodyText": "what i mean is, the values of this annotations should match features of the runtime and stories for its users. spring is just an internally used library.", "url": "https://github.com/mulesoft/mule/pull/8826#discussion_r417998553", "createdAt": "2020-04-30T13:13:02Z", "author": {"login": "elrodro83"}, "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/factories/FlowRefFactoryBeanTestCase.java", "diffHunk": "@@ -273,63 +289,86 @@ private Processor getFlowRefProcessor(FlowRefFactoryBean factoryBean) throws Exc\n   @Test\n   public void dynamicFlowRefDoesNotExist() throws Exception {\n     doReturn(new TypedValue<>(\"other\", STRING)).when(expressionManager).evaluate(eq(DYNAMIC_NON_EXISTANT), eq(DataType.STRING),\n-            eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n-            any(ComponentLocation.class), eq(true));\n+                                                                                 eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n+                                                                                 any(ComponentLocation.class), eq(true));\n \n     expectedException.expect(instanceOf(RoutePathNotFoundException.class));\n     getFlowRefProcessor(createFlowRefFactoryBean(DYNAMIC_NON_EXISTANT, \"flow\", applicationContext)).process(testEvent());\n   }\n \n-  @Test\n+  @Test()\n+  @Feature(AllureConstants.SpringConfiguration.SPRING_CONFIGURATION)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5Nzg2MA=="}, "originalCommit": {"oid": "b5c96a035fdce204358bd0bc575c695b1649e38c"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0MTk5Ng==", "bodyText": "Changed to Flow Reference Story", "url": "https://github.com/mulesoft/mule/pull/8826#discussion_r418041996", "createdAt": "2020-04-30T14:14:03Z", "author": {"login": "IvanAndresFritzler"}, "path": "modules/spring-config/src/test/java/org/mule/runtime/config/internal/factories/FlowRefFactoryBeanTestCase.java", "diffHunk": "@@ -273,63 +289,86 @@ private Processor getFlowRefProcessor(FlowRefFactoryBean factoryBean) throws Exc\n   @Test\n   public void dynamicFlowRefDoesNotExist() throws Exception {\n     doReturn(new TypedValue<>(\"other\", STRING)).when(expressionManager).evaluate(eq(DYNAMIC_NON_EXISTANT), eq(DataType.STRING),\n-            eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n-            any(ComponentLocation.class), eq(true));\n+                                                                                 eq(NULL_BINDING_CONTEXT), any(CoreEvent.class),\n+                                                                                 any(ComponentLocation.class), eq(true));\n \n     expectedException.expect(instanceOf(RoutePathNotFoundException.class));\n     getFlowRefProcessor(createFlowRefFactoryBean(DYNAMIC_NON_EXISTANT, \"flow\", applicationContext)).process(testEvent());\n   }\n \n-  @Test\n+  @Test()\n+  @Feature(AllureConstants.SpringConfiguration.SPRING_CONFIGURATION)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzk5Nzg2MA=="}, "originalCommit": {"oid": "b5c96a035fdce204358bd0bc575c695b1649e38c"}, "originalPosition": 123}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 13, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}