{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2MjA4NzMw", "number": 9893, "title": "MULE-19090: SampleDataModelValidator yields false negatives when operation is paginated", "bodyText": "", "createdAt": "2020-12-28T19:23:43Z", "url": "https://github.com/mulesoft/mule/pull/9893", "merged": true, "mergeCommit": {"oid": "10c4cad848a97d84da44c4cba06a6b4d237c5a17"}, "closed": true, "closedAt": "2020-12-29T20:32:02Z", "author": {"login": "marianogonzalez"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdqrpIfAH2gAyNTQ2MjA4NzMwOjEyNDM4NmZiNDJlOTJmN2UwNTIxODMyMGU1Njg1YjM3ZGUwMDQ0OTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdq8FiAAFqTU1OTU3MDc5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "124386fb42e92f7e05218320e5685b37de004492", "author": {"user": {"login": "marianogonzalez", "name": "Mariano Gonzalez"}}, "url": "https://github.com/mulesoft/mule/commit/124386fb42e92f7e05218320e5685b37de004492", "committedDate": "2020-12-28T19:52:54Z", "message": "doodling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e162c1d8c2526adf89efadea4c5fc17776c4a57", "author": {"user": {"login": "marianogonzalez", "name": "Mariano Gonzalez"}}, "url": "https://github.com/mulesoft/mule/commit/4e162c1d8c2526adf89efadea4c5fc17776c4a57", "committedDate": "2020-12-28T19:52:54Z", "message": "passing test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de937ed7f001dc813f09eff58e718d18a1638f39", "author": {"user": {"login": "marianogonzalez", "name": "Mariano Gonzalez"}}, "url": "https://github.com/mulesoft/mule/commit/de937ed7f001dc813f09eff58e718d18a1638f39", "committedDate": "2020-12-28T16:18:36Z", "message": "passing test"}, "afterCommit": {"oid": "4e162c1d8c2526adf89efadea4c5fc17776c4a57", "author": {"user": {"login": "marianogonzalez", "name": "Mariano Gonzalez"}}, "url": "https://github.com/mulesoft/mule/commit/4e162c1d8c2526adf89efadea4c5fc17776c4a57", "committedDate": "2020-12-28T19:52:54Z", "message": "passing test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5MzAyOTUw", "url": "https://github.com/mulesoft/mule/pull/9893#pullrequestreview-559302950", "createdAt": "2020-12-28T21:09:00Z", "commit": {"oid": "4e162c1d8c2526adf89efadea4c5fc17776c4a57"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMTowOTowMVrOIMCDrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMToxMDowMVrOIMCErA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ4NzUzNQ==", "bodyText": "Will this always be a ParameterizedType?", "url": "https://github.com/mulesoft/mule/pull/9893#discussion_r549487535", "createdAt": "2020-12-28T21:09:01Z", "author": {"login": "ndinu"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/validation/SampleDataModelValidator.java", "diffHunk": "@@ -181,13 +206,95 @@ private String asGenericSignature(List<Type> types) {\n         .collect(joining(\",\")) + \">\";\n   }\n \n+  private String asGenericSignature(Pair<Type, Type> types) {\n+    return \"<\" + asString(types.getFirst()) + \",\" + asString(types.getSecond()) + \">\";\n+  }\n+\n+  private boolean validateIfPaged(ConnectableComponentModel component,\n+                                  Class<? extends SampleDataProvider> providerClass,\n+                                  Pair<Type, Type> outputGenericTypes,\n+                                  Pair<Type, Type> sampleDataProviderGenericTypes,\n+                                  ProblemsReporter reporter) {\n+    if (!isAssignableFrom(PagingProvider.class, outputGenericTypes.getFirst())) {\n+      return false;\n+    }\n+\n+    final Type pageItemsType = getPagingProviderGenerics(component).getSecond();\n+\n+    Type sampleDataPayloadType = sampleDataProviderGenericTypes.getFirst();\n+\n+    if (!isAssignableFrom(Collection.class, sampleDataPayloadType)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>' but it returns a payload of type '%s' instead\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType),\n+                                                      asString(sampleDataPayloadType))));\n+      return true;\n+    }\n+\n+    List<Type> sampleDataCollectionGeneric = getInterfaceGenerics(sampleDataPayloadType, Collection.class);\n+    if (sampleDataCollectionGeneric.isEmpty() || sampleDataCollectionGeneric.get(0) == null) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>', but an unbounded Collection was found instead. Please provide the proper generic\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType))));\n+      return true;\n+    }\n+\n+    final Type sampleProviderCollectionType = sampleDataCollectionGeneric.get(0);\n+\n+    if (!pageItemsType.equals(sampleProviderCollectionType)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>', but a Collection<%s> was found instead.\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType),\n+                                                      asString(sampleProviderCollectionType))));\n+      return true;\n+    }\n+\n+    String componentAttributesSignature = asString(outputGenericTypes.getSecond());\n+    String providerAttributesSignature = asString(sampleDataProviderGenericTypes.getSecond());\n+\n+    if (!componentAttributesSignature.equals(providerAttributesSignature)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide attributes of type '%s' but it returns attributes of type '%s' instead\",\n+                                                      providerClass.getName(), component.getName(), componentAttributesSignature,\n+                                                      providerAttributesSignature)));\n+      return true;\n+    }\n+\n+    return true;\n+  }\n+\n+  private Pair<Type, Type> getPagingProviderGenerics(ConnectableComponentModel model) {\n+    return model.getModelProperty(ImplementingMethodModelProperty.class)\n+        .map(mp -> {\n+          ParameterizedType type = (ParameterizedType) mp.getMethod().getGenericReturnType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e162c1d8c2526adf89efadea4c5fc17776c4a57"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ4Nzc4OA==", "bodyText": "Should we check the size of the array?", "url": "https://github.com/mulesoft/mule/pull/9893#discussion_r549487788", "createdAt": "2020-12-28T21:10:01Z", "author": {"login": "ndinu"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/validation/SampleDataModelValidator.java", "diffHunk": "@@ -181,13 +206,95 @@ private String asGenericSignature(List<Type> types) {\n         .collect(joining(\",\")) + \">\";\n   }\n \n+  private String asGenericSignature(Pair<Type, Type> types) {\n+    return \"<\" + asString(types.getFirst()) + \",\" + asString(types.getSecond()) + \">\";\n+  }\n+\n+  private boolean validateIfPaged(ConnectableComponentModel component,\n+                                  Class<? extends SampleDataProvider> providerClass,\n+                                  Pair<Type, Type> outputGenericTypes,\n+                                  Pair<Type, Type> sampleDataProviderGenericTypes,\n+                                  ProblemsReporter reporter) {\n+    if (!isAssignableFrom(PagingProvider.class, outputGenericTypes.getFirst())) {\n+      return false;\n+    }\n+\n+    final Type pageItemsType = getPagingProviderGenerics(component).getSecond();\n+\n+    Type sampleDataPayloadType = sampleDataProviderGenericTypes.getFirst();\n+\n+    if (!isAssignableFrom(Collection.class, sampleDataPayloadType)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>' but it returns a payload of type '%s' instead\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType),\n+                                                      asString(sampleDataPayloadType))));\n+      return true;\n+    }\n+\n+    List<Type> sampleDataCollectionGeneric = getInterfaceGenerics(sampleDataPayloadType, Collection.class);\n+    if (sampleDataCollectionGeneric.isEmpty() || sampleDataCollectionGeneric.get(0) == null) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>', but an unbounded Collection was found instead. Please provide the proper generic\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType))));\n+      return true;\n+    }\n+\n+    final Type sampleProviderCollectionType = sampleDataCollectionGeneric.get(0);\n+\n+    if (!pageItemsType.equals(sampleProviderCollectionType)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>', but a Collection<%s> was found instead.\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType),\n+                                                      asString(sampleProviderCollectionType))));\n+      return true;\n+    }\n+\n+    String componentAttributesSignature = asString(outputGenericTypes.getSecond());\n+    String providerAttributesSignature = asString(sampleDataProviderGenericTypes.getSecond());\n+\n+    if (!componentAttributesSignature.equals(providerAttributesSignature)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide attributes of type '%s' but it returns attributes of type '%s' instead\",\n+                                                      providerClass.getName(), component.getName(), componentAttributesSignature,\n+                                                      providerAttributesSignature)));\n+      return true;\n+    }\n+\n+    return true;\n+  }\n+\n+  private Pair<Type, Type> getPagingProviderGenerics(ConnectableComponentModel model) {\n+    return model.getModelProperty(ImplementingMethodModelProperty.class)\n+        .map(mp -> {\n+          ParameterizedType type = (ParameterizedType) mp.getMethod().getGenericReturnType();\n+          return new Pair<>(type.getActualTypeArguments()[0], type.getActualTypeArguments()[1]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e162c1d8c2526adf89efadea4c5fc17776c4a57"}, "originalPosition": 152}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NTcwNzk3", "url": "https://github.com/mulesoft/mule/pull/9893#pullrequestreview-559570797", "createdAt": "2020-12-29T15:02:25Z", "commit": {"oid": "4e162c1d8c2526adf89efadea4c5fc17776c4a57"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 988, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}