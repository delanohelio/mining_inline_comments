{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzNDAxNDQw", "number": 8886, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjozMjoxNFrOEAENMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1NzowOFrOEGAS3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTA0MzY4OnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/api/util/MessagingExceptionResolverTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjozMjoxNFrOGbHDwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjozMjoxNFrOGbHDwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA4MDM4Ng==", "bodyText": "static import", "url": "https://github.com/mulesoft/mule/pull/8886#discussion_r431080386", "createdAt": "2020-05-27T12:32:14Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/api/util/MessagingExceptionResolverTestCase.java", "diffHunk": "@@ -53,8 +57,10 @@\n \n import org.junit.Before;\n import org.junit.Test;\n+import org.mule.test.allure.AllureConstants;\n \n @SmallTest\n+@Feature(AllureConstants.ErrorHandlingFeature.ERROR_HANDLING)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04acebcefd925e12cb77494c6d175577d24d423f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTA2ODk4OnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/api/util/MessagingExceptionResolverTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjozODo0M1rOGbHTmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjozODo0M1rOGbHTmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA4NDQ0Mg==", "bodyText": "static import", "url": "https://github.com/mulesoft/mule/pull/8886#discussion_r431084442", "createdAt": "2020-05-27T12:38:43Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/api/util/MessagingExceptionResolverTestCase.java", "diffHunk": "@@ -197,15 +203,50 @@ public void resolveCorrectConnectionException() {\n   }\n \n   @Test\n+  @Issue(\"MULE-18041\")\n   public void resolveSuppressedMuleException() {\n     ErrorType expected = DISPATCH;\n     Throwable exception = new DispatchException(createStaticMessage(\"DISPATCH PROBLEM\"), new ValidateResponse(),\n-                                                new SuppressedMuleException(CONNECTION_EXCEPTION));\n+                                                suppressIfPresent(CONNECTION_EXCEPTION,\n+                                                                  CONNECTION_EXCEPTION.getClass(),\n+                                                                  false));\n     MessagingException me = newMessagingException(exception, event, processor);\n     MessagingExceptionResolver anotherResolver = new MessagingExceptionResolver(new TestProcessor());\n     MessagingException resolved = anotherResolver.resolve(me, locator, emptyList());\n     assertExceptionErrorType(resolved, expected);\n     assertExceptionMessage(resolved.getMessage(), \"DISPATCH PROBLEM\");\n+    assertThat(resolved.getInfo().get(MuleExceptionInfo.INFO_CAUSED_BY_KEY), is(nullValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04acebcefd925e12cb77494c6d175577d24d423f"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTA2OTI5OnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/api/util/MessagingExceptionResolverTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjozODo0OVrOGbHTyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjozODo0OVrOGbHTyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA4NDQ5MQ==", "bodyText": "static import", "url": "https://github.com/mulesoft/mule/pull/8886#discussion_r431084491", "createdAt": "2020-05-27T12:38:49Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/api/util/MessagingExceptionResolverTestCase.java", "diffHunk": "@@ -197,15 +203,50 @@ public void resolveCorrectConnectionException() {\n   }\n \n   @Test\n+  @Issue(\"MULE-18041\")\n   public void resolveSuppressedMuleException() {\n     ErrorType expected = DISPATCH;\n     Throwable exception = new DispatchException(createStaticMessage(\"DISPATCH PROBLEM\"), new ValidateResponse(),\n-                                                new SuppressedMuleException(CONNECTION_EXCEPTION));\n+                                                suppressIfPresent(CONNECTION_EXCEPTION,\n+                                                                  CONNECTION_EXCEPTION.getClass(),\n+                                                                  false));\n     MessagingException me = newMessagingException(exception, event, processor);\n     MessagingExceptionResolver anotherResolver = new MessagingExceptionResolver(new TestProcessor());\n     MessagingException resolved = anotherResolver.resolve(me, locator, emptyList());\n     assertExceptionErrorType(resolved, expected);\n     assertExceptionMessage(resolved.getMessage(), \"DISPATCH PROBLEM\");\n+    assertThat(resolved.getInfo().get(MuleExceptionInfo.INFO_CAUSED_BY_KEY), is(nullValue()));\n+  }\n+\n+  @Test\n+  @Issue(\"MULE-18041\")\n+  public void resolveSuppressedMuleExceptionLoggingCause() {\n+    ErrorType expected = DISPATCH;\n+    Throwable exception = new DispatchException(createStaticMessage(\"DISPATCH PROBLEM\"), new ValidateResponse(),\n+                                                suppressIfPresent(CONNECTION_EXCEPTION,\n+                                                                  CONNECTION_EXCEPTION.getClass(), true));\n+    MessagingException me = newMessagingException(exception, event, processor);\n+    MessagingExceptionResolver anotherResolver = new MessagingExceptionResolver(new TestProcessor());\n+    MessagingException resolved = anotherResolver.resolve(me, locator, emptyList());\n+    assertExceptionErrorType(resolved, expected);\n+    assertExceptionMessage(resolved.getMessage(), \"DISPATCH PROBLEM\");\n+    assertExceptionMessage(resolved.getInfo().get(MuleExceptionInfo.INFO_CAUSED_BY_KEY).toString(), \"CONNECTION PROBLEM\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04acebcefd925e12cb77494c6d175577d24d423f"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTA2OTQ3OnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/api/util/MessagingExceptionResolverTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjozODo1M1rOGbHT7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjozODo1M1rOGbHT7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA4NDUyNw==", "bodyText": "static import", "url": "https://github.com/mulesoft/mule/pull/8886#discussion_r431084527", "createdAt": "2020-05-27T12:38:53Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/api/util/MessagingExceptionResolverTestCase.java", "diffHunk": "@@ -197,15 +203,50 @@ public void resolveCorrectConnectionException() {\n   }\n \n   @Test\n+  @Issue(\"MULE-18041\")\n   public void resolveSuppressedMuleException() {\n     ErrorType expected = DISPATCH;\n     Throwable exception = new DispatchException(createStaticMessage(\"DISPATCH PROBLEM\"), new ValidateResponse(),\n-                                                new SuppressedMuleException(CONNECTION_EXCEPTION));\n+                                                suppressIfPresent(CONNECTION_EXCEPTION,\n+                                                                  CONNECTION_EXCEPTION.getClass(),\n+                                                                  false));\n     MessagingException me = newMessagingException(exception, event, processor);\n     MessagingExceptionResolver anotherResolver = new MessagingExceptionResolver(new TestProcessor());\n     MessagingException resolved = anotherResolver.resolve(me, locator, emptyList());\n     assertExceptionErrorType(resolved, expected);\n     assertExceptionMessage(resolved.getMessage(), \"DISPATCH PROBLEM\");\n+    assertThat(resolved.getInfo().get(MuleExceptionInfo.INFO_CAUSED_BY_KEY), is(nullValue()));\n+  }\n+\n+  @Test\n+  @Issue(\"MULE-18041\")\n+  public void resolveSuppressedMuleExceptionLoggingCause() {\n+    ErrorType expected = DISPATCH;\n+    Throwable exception = new DispatchException(createStaticMessage(\"DISPATCH PROBLEM\"), new ValidateResponse(),\n+                                                suppressIfPresent(CONNECTION_EXCEPTION,\n+                                                                  CONNECTION_EXCEPTION.getClass(), true));\n+    MessagingException me = newMessagingException(exception, event, processor);\n+    MessagingExceptionResolver anotherResolver = new MessagingExceptionResolver(new TestProcessor());\n+    MessagingException resolved = anotherResolver.resolve(me, locator, emptyList());\n+    assertExceptionErrorType(resolved, expected);\n+    assertExceptionMessage(resolved.getMessage(), \"DISPATCH PROBLEM\");\n+    assertExceptionMessage(resolved.getInfo().get(MuleExceptionInfo.INFO_CAUSED_BY_KEY).toString(), \"CONNECTION PROBLEM\");\n+  }\n+\n+  @Test\n+  @Issue(\"MULE-18041\")\n+  public void resolveSuppressedMessagingExceptionLoggingCause() {\n+    ErrorType expected = DISPATCH;\n+    Throwable exception = new DispatchException(createStaticMessage(\"DISPATCH PROBLEM\"), new ValidateResponse(),\n+                                                suppressIfPresent(new MessagingException(createStaticMessage(\"CONNECTION PROBLEM\"),\n+                                                                                         event),\n+                                                                  MessagingException.class, true));\n+    MessagingException me = newMessagingException(exception, event, processor);\n+    MessagingExceptionResolver anotherResolver = new MessagingExceptionResolver(new TestProcessor());\n+    MessagingException resolved = anotherResolver.resolve(me, locator, emptyList());\n+    assertExceptionErrorType(resolved, expected);\n+    assertExceptionMessage(resolved.getMessage(), \"DISPATCH PROBLEM\");\n+    assertExceptionMessage(resolved.getInfo().get(MuleExceptionInfo.INFO_CAUSED_BY_KEY).toString(), \"CONNECTION PROBLEM\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04acebcefd925e12cb77494c6d175577d24d423f"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTA5MDM1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/routing/UntilSuccessfulRouter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjo0NDozN1rOGbHhPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzo1NToxNFrOGb2QTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA4NzkzNA==", "bodyText": "the cause should be logged in this case to help in troubleshooting.", "url": "https://github.com/mulesoft/mule/pull/8886#discussion_r431087934", "createdAt": "2020-05-27T12:44:37Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/routing/UntilSuccessfulRouter.java", "diffHunk": "@@ -273,15 +274,19 @@ private CoreEvent eventWithCurrentContextDeleted(CoreEvent event) {\n \n   private Function<Throwable, Throwable> getThrowableFunction(CoreEvent event) {\n     return throwable -> {\n-      Throwable cause = getMessagingExceptionCause(throwable);\n       CoreEvent exceptionEvent = event;\n+      Throwable retryPolicyExhaustionCause = getMessagingExceptionCause(throwable);\n+      // ConnectionException is treated in a way that prioritize it's error type over any other (see ErrorTypeLocator#getErrorTypeFromException)\n+      retryPolicyExhaustionCause =\n+          suppressIfPresent(retryPolicyExhaustionCause, ConnectionException.class, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04acebcefd925e12cb77494c6d175577d24d423f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg1MzY0NQ==", "bodyText": "I will refactor this section in order to use the same approach (SuppressedException + Caused By)", "url": "https://github.com/mulesoft/mule/pull/8886#discussion_r431853645", "createdAt": "2020-05-28T13:55:14Z", "author": {"login": "IvanAndresFritzler"}, "path": "core/src/main/java/org/mule/runtime/core/internal/routing/UntilSuccessfulRouter.java", "diffHunk": "@@ -273,15 +274,19 @@ private CoreEvent eventWithCurrentContextDeleted(CoreEvent event) {\n \n   private Function<Throwable, Throwable> getThrowableFunction(CoreEvent event) {\n     return throwable -> {\n-      Throwable cause = getMessagingExceptionCause(throwable);\n       CoreEvent exceptionEvent = event;\n+      Throwable retryPolicyExhaustionCause = getMessagingExceptionCause(throwable);\n+      // ConnectionException is treated in a way that prioritize it's error type over any other (see ErrorTypeLocator#getErrorTypeFromException)\n+      retryPolicyExhaustionCause =\n+          suppressIfPresent(retryPolicyExhaustionCause, ConnectionException.class, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA4NzkzNA=="}, "originalCommit": {"oid": "04acebcefd925e12cb77494c6d175577d24d423f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzI3NDgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/exception/MessagingException.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0NzoyNVrOGkh1ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0NzoyNVrOGkh1ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1NjM0Ng==", "bodyText": "very unperformant. You should add an addAll() kind of method", "url": "https://github.com/mulesoft/mule/pull/8886#discussion_r440956346", "createdAt": "2020-06-16T15:47:25Z", "author": {"login": "marianogonzalez"}, "path": "core/src/main/java/org/mule/runtime/core/internal/exception/MessagingException.java", "diffHunk": "@@ -97,6 +97,9 @@ public MessagingException(CoreEvent event, Throwable cause, Component failingCom\n     extractMuleMessage(event);\n     this.failingComponent = failingComponent;\n     setMessage(generateMessage(getI18nMessage(), null));\n+    if (cause instanceof MuleException) {\n+      ((MuleException) cause).getInfo().forEach(this::addInfo);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88af7e5c4e88cad4890c874fec9432ca66e93e34"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzI3OTE5OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/exception/ModuleExceptionHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo0ODoyMFrOGkh4gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQyMjowNDozMVrOGr20GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1NzA1Nw==", "bodyText": "this doesn't look correct. You're doing this ONLY when the exception is a ModuleException. You're ignoring all subclasses (which is what's more frequently used).", "url": "https://github.com/mulesoft/mule/pull/8886#discussion_r440957057", "createdAt": "2020-06-16T15:48:20Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/exception/ModuleExceptionHandler.java", "diffHunk": "@@ -117,10 +118,11 @@ private Throwable getExceptionCause(Throwable throwable) {\n     // For subclasses of ModuleException, we use it as it already contains additional information\n     if (throwable.getClass().equals(ModuleException.class)) {\n       return throwable.getCause() != null\n-          ? throwable.getCause()\n+          ? suppressIfPresent(throwable.getCause(), MessagingException.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88af7e5c4e88cad4890c874fec9432ca66e93e34"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY0MDAyNQ==", "bodyText": "Added an additional suppression to cover the rest of the cases", "url": "https://github.com/mulesoft/mule/pull/8886#discussion_r448640025", "createdAt": "2020-07-01T22:04:31Z", "author": {"login": "IvanAndresFritzler"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/exception/ModuleExceptionHandler.java", "diffHunk": "@@ -117,10 +118,11 @@ private Throwable getExceptionCause(Throwable throwable) {\n     // For subclasses of ModuleException, we use it as it already contains additional information\n     if (throwable.getClass().equals(ModuleException.class)) {\n       return throwable.getCause() != null\n-          ? throwable.getCause()\n+          ? suppressIfPresent(throwable.getCause(), MessagingException.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk1NzA1Nw=="}, "originalCommit": {"oid": "88af7e5c4e88cad4890c874fec9432ca66e93e34"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzMxNzQwOnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/exception/ModuleExceptionHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1NzowOFrOGkiRnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNTo1NzowOFrOGkiRnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDk2MzQ4NA==", "bodyText": "remove", "url": "https://github.com/mulesoft/mule/pull/8886#discussion_r440963484", "createdAt": "2020-06-16T15:57:08Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/exception/ModuleExceptionHandler.java", "diffHunk": "@@ -117,10 +118,11 @@ private Throwable getExceptionCause(Throwable throwable) {\n     // For subclasses of ModuleException, we use it as it already contains additional information\n     if (throwable.getClass().equals(ModuleException.class)) {\n       return throwable.getCause() != null\n-          ? throwable.getCause()\n+          ? suppressIfPresent(throwable.getCause(), MessagingException.class)\n           : new MuleRuntimeException(createStaticMessage(throwable.getMessage()));\n     } else {\n       return throwable;\n     }\n   }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88af7e5c4e88cad4890c874fec9432ca66e93e34"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4910, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}