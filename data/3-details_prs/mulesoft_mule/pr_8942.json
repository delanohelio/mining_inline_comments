{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MTg4MDIw", "number": 8942, "title": "MULE-18503: Deadlock when handling failed deferred response in http", "bodyText": "", "createdAt": "2020-06-19T16:17:52Z", "url": "https://github.com/mulesoft/mule/pull/8942", "merged": true, "mergeCommit": {"oid": "b8ed2076c087071358af3c1ffa18a529f07a7372"}, "closed": true, "closedAt": "2020-06-19T17:43:48Z", "author": {"login": "fsgonz"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcs1d68AH2gAyNDM3MTg4MDIwOmNhYTg4MjBjOGRjOTc0MDQ3ODc0NmMxMWNiYTczNDVhZDJjNWU0NjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcs2nc_gFqTQzNDI0MzIyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "caa8820c8dc9740478746c11cba7345ad2c5e463", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/caa8820c8dc9740478746c11cba7345ad2c5e463", "committedDate": "2020-06-19T16:16:24Z", "message": "MULE-18503: Deadlock when handling failed deferred response in http"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MjMwMDQw", "url": "https://github.com/mulesoft/mule/pull/8942#pullrequestreview-434230040", "createdAt": "2020-06-19T17:12:29Z", "commit": {"oid": "caa8820c8dc9740478746c11cba7345ad2c5e463"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzoxMjoyOVrOGmb6Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxNzoxNTo1OFrOGmb_6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk1NjM4Mg==", "bodyText": "chunk", "url": "https://github.com/mulesoft/mule/pull/8942#discussion_r442956382", "createdAt": "2020-06-19T17:12:29Z", "author": {"login": "eze210"}, "path": "modules/http/src/test/java/org/mule/module/http/internal/listener/grizzly/ResponseDeferringCompletionHandlerOnFailureTestCase.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.module.http.internal.listener.grizzly;\n+\n+import static java.lang.Boolean.TRUE;\n+import static org.glassfish.grizzly.http.Protocol.HTTP_1_1;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.mule.module.http.internal.listener.grizzly.ResponseDeferringCompletionHandler.FAILURE_WHILE_PROCESSING_HTTP_RESPONSE_BODY;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.commons.collections.MultiHashMap;\n+import org.glassfish.grizzly.Connection;\n+import org.glassfish.grizzly.Transport;\n+import org.glassfish.grizzly.filterchain.FilterChain;\n+import org.glassfish.grizzly.filterchain.FilterChainContext;\n+import org.glassfish.grizzly.http.HttpRequestPacket;\n+import org.glassfish.grizzly.memory.HeapMemoryManager;\n+import org.glassfish.grizzly.memory.MemoryManager;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mule.api.MuleEvent;\n+import org.mule.api.transport.OutputHandler;\n+import org.mule.module.http.internal.domain.OutputHandlerHttpEntity;\n+import org.mule.module.http.internal.domain.response.DefaultHttpResponse;\n+import org.mule.module.http.internal.domain.response.HttpResponse;\n+import org.mule.module.http.internal.domain.response.ResponseStatus;\n+import org.mule.module.http.internal.listener.async.ResponseStatusCallback;\n+import org.mule.tck.junit4.AbstractMuleTestCase;\n+import org.mule.tck.probe.PollingProber;\n+import org.mule.tck.probe.Probe;\n+\n+public class ResponseDeferringCompletionHandlerOnFailureTestCase extends AbstractMuleTestCase implements OutputHandler\n+{\n+\n+    private static final int POOLING_FREQUENCY_MILLIS = 1000;\n+    private static final int POOLING_TIMEOUT_MILLIS = 20000;\n+\n+    private FilterChainContext ctx = mock(FilterChainContext.class);\n+    private FilterChain filterChain = mock(FilterChain.class);\n+    private Connection connection = mock(Connection.class);\n+    private Transport transport = mock(Transport.class);\n+    private MemoryManager memoryManager = new HeapMemoryManager();\n+    private HttpRequestPacket request = mock(HttpRequestPacket.class);\n+    private HttpResponse response;\n+    private Exception exceptionOnFlush;\n+\n+    private ResponseDeferringCompletionHandler responseDeferringCompletionHandler;\n+\n+    private AtomicBoolean firstChunkWritten = new AtomicBoolean(false);\n+    private AtomicBoolean contentWritten = new AtomicBoolean(false);\n+    private Semaphore stepSync = new Semaphore(0);\n+\n+    private OutputStream outputStream;\n+\n+\n+    @Before\n+    public void setUp() throws Exception\n+    {\n+        mockHttpRequestAndResponse();\n+        responseDeferringCompletionHandler = new ResponseDeferringCompletionHandler(ctx, request, response, mock(ResponseStatusCallback.class));\n+    }\n+\n+    @Test\n+    public void testFlushFailsAndDoNotHangOnFailure() throws IOException, InterruptedException\n+    {\n+        responseDeferringCompletionHandler.start();\n+\n+        waitUntilContentSynchronizer(firstChunkWritten);\n+\n+        // It fails\n+        responseDeferringCompletionHandler.failed(new IOException(\"Broken pipe\"));\n+\n+        // Step sync is released so that the response attempts to flush a chunl again.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caa8820c8dc9740478746c11cba7345ad2c5e463"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjk1NzgwMA==", "bodyText": "Use a scheduler", "url": "https://github.com/mulesoft/mule/pull/8942#discussion_r442957800", "createdAt": "2020-06-19T17:15:58Z", "author": {"login": "eze210"}, "path": "modules/http/src/test/java/org/mule/module/http/internal/listener/grizzly/ResponseDeferringCompletionHandlerOnFailureTestCase.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.module.http.internal.listener.grizzly;\n+\n+import static java.lang.Boolean.TRUE;\n+import static org.glassfish.grizzly.http.Protocol.HTTP_1_1;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.hamcrest.Matchers.instanceOf;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.mule.module.http.internal.listener.grizzly.ResponseDeferringCompletionHandler.FAILURE_WHILE_PROCESSING_HTTP_RESPONSE_BODY;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.concurrent.Semaphore;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.commons.collections.MultiHashMap;\n+import org.glassfish.grizzly.Connection;\n+import org.glassfish.grizzly.Transport;\n+import org.glassfish.grizzly.filterchain.FilterChain;\n+import org.glassfish.grizzly.filterchain.FilterChainContext;\n+import org.glassfish.grizzly.http.HttpRequestPacket;\n+import org.glassfish.grizzly.memory.HeapMemoryManager;\n+import org.glassfish.grizzly.memory.MemoryManager;\n+import org.hamcrest.Matchers;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mule.api.MuleEvent;\n+import org.mule.api.transport.OutputHandler;\n+import org.mule.module.http.internal.domain.OutputHandlerHttpEntity;\n+import org.mule.module.http.internal.domain.response.DefaultHttpResponse;\n+import org.mule.module.http.internal.domain.response.HttpResponse;\n+import org.mule.module.http.internal.domain.response.ResponseStatus;\n+import org.mule.module.http.internal.listener.async.ResponseStatusCallback;\n+import org.mule.tck.junit4.AbstractMuleTestCase;\n+import org.mule.tck.probe.PollingProber;\n+import org.mule.tck.probe.Probe;\n+\n+public class ResponseDeferringCompletionHandlerOnFailureTestCase extends AbstractMuleTestCase implements OutputHandler\n+{\n+\n+    private static final int POOLING_FREQUENCY_MILLIS = 1000;\n+    private static final int POOLING_TIMEOUT_MILLIS = 20000;\n+\n+    private FilterChainContext ctx = mock(FilterChainContext.class);\n+    private FilterChain filterChain = mock(FilterChain.class);\n+    private Connection connection = mock(Connection.class);\n+    private Transport transport = mock(Transport.class);\n+    private MemoryManager memoryManager = new HeapMemoryManager();\n+    private HttpRequestPacket request = mock(HttpRequestPacket.class);\n+    private HttpResponse response;\n+    private Exception exceptionOnFlush;\n+\n+    private ResponseDeferringCompletionHandler responseDeferringCompletionHandler;\n+\n+    private AtomicBoolean firstChunkWritten = new AtomicBoolean(false);\n+    private AtomicBoolean contentWritten = new AtomicBoolean(false);\n+    private Semaphore stepSync = new Semaphore(0);\n+\n+    private OutputStream outputStream;\n+\n+\n+    @Before\n+    public void setUp() throws Exception\n+    {\n+        mockHttpRequestAndResponse();\n+        responseDeferringCompletionHandler = new ResponseDeferringCompletionHandler(ctx, request, response, mock(ResponseStatusCallback.class));\n+    }\n+\n+    @Test\n+    public void testFlushFailsAndDoNotHangOnFailure() throws IOException, InterruptedException\n+    {\n+        responseDeferringCompletionHandler.start();\n+\n+        waitUntilContentSynchronizer(firstChunkWritten);\n+\n+        // It fails\n+        responseDeferringCompletionHandler.failed(new IOException(\"Broken pipe\"));\n+\n+        // Step sync is released so that the response attempts to flush a chunl again.\n+        stepSync.release();\n+\n+        waitUntilContentSynchronizer(contentWritten);\n+        assertThat(exceptionOnFlush, is(not(nullValue())));\n+        assertThat(exceptionOnFlush, instanceOf(IOException.class));\n+        assertThat(exceptionOnFlush.getMessage(), equalTo(FAILURE_WHILE_PROCESSING_HTTP_RESPONSE_BODY));\n+        assertThat(firstChunkWritten.get(), is(TRUE));\n+    }\n+\n+    @Override\n+    public void write(MuleEvent event, final OutputStream out) throws IOException\n+    {\n+        outputStream = out;\n+\n+        new Thread(\"Thread that flushes\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "caa8820c8dc9740478746c11cba7345ad2c5e463"}, "originalPosition": 104}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf9844d141327e3f500a71dcc495c69a88b22337", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/bf9844d141327e3f500a71dcc495c69a88b22337", "committedDate": "2020-06-19T17:34:12Z", "message": "MULE-18503: Review."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MjQzMjIz", "url": "https://github.com/mulesoft/mule/pull/8942#pullrequestreview-434243223", "createdAt": "2020-06-19T17:36:43Z", "commit": {"oid": "bf9844d141327e3f500a71dcc495c69a88b22337"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 749, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}