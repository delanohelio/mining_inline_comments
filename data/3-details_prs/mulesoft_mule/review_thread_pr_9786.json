{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NjM5OTMw", "number": 9786, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxMjoxMlrOE9tquw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoyMDozOVrOE9t0ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTQ2ODExOnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistryTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxMjoxMlrOH6jIhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxMjoxMlrOH6jIhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NTA3OA==", "bodyText": "allure", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531155078", "createdAt": "2020-11-26T17:12:12Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistryTestCase.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.api.config;\n+\n+import static java.lang.String.format;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.is;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.tck.size.SmallTest;\n+\n+@SmallTest\n+public class FeatureFlaggingRegistryTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTQ2ODY5OnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/config/DefaultFeatureFlaggingServiceTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxMjoyNFrOH6jI2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxMjoyNFrOH6jI2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NTE2MQ==", "bodyText": "allure", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531155161", "createdAt": "2020-11-26T17:12:24Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/config/DefaultFeatureFlaggingServiceTestCase.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.internal.config;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.core.api.config.FeatureFlaggingService;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.function.Consumer;\n+\n+import static java.lang.String.format;\n+import static java.util.Arrays.asList;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+@RunWith(Parameterized.class)\n+public class DefaultFeatureFlaggingServiceTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTQ3MTQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxMzoxOFrOH6jKeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzo0NzoyNlrOH6j-vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NTU3Nw==", "bodyText": "will this be cherrypicked?", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531155577", "createdAt": "2020-11-26T17:13:18Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.api.config;\n+\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.core.api.MuleContext;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Predicate;\n+\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static java.util.Collections.unmodifiableMap;\n+import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n+\n+/**\n+ * Service used to register feature flags which will be evaluated at deployment time. For example:\n+ * \n+ * <code>\n+ *     // register a feature always \"on\"\n+ *     FeatureFlaggingRegistry.getInstance().registerFeature(\"some feature\", c -> true);\n+ * </code>\n+ * \n+ * <code>\n+ *    &#64;Inject\n+ *    &#64;Named(FEATURE_FLAGGING_SERVICE_KEY)\n+ *    private FeatureFlaggingService featureFlaggingService;\n+ *    // ....\n+ *    \n+ *    if (featureFlaggingService.isEnabled(\"some feature\")) {\n+ *        // ...\n+ *    }\n+ * </code>\n+ * \n+ * @see FeatureFlaggingRegistry\n+ * @since 4.4.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE2ODk1OA==", "bodyText": "Yes, I think we should backport it to 4.3.0 and perhaps 4.2.x/4.2.2. Do you agree?", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531168958", "createdAt": "2020-11-26T17:47:26Z", "author": {"login": "szaffarano"}, "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.api.config;\n+\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.core.api.MuleContext;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Predicate;\n+\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static java.util.Collections.unmodifiableMap;\n+import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n+\n+/**\n+ * Service used to register feature flags which will be evaluated at deployment time. For example:\n+ * \n+ * <code>\n+ *     // register a feature always \"on\"\n+ *     FeatureFlaggingRegistry.getInstance().registerFeature(\"some feature\", c -> true);\n+ * </code>\n+ * \n+ * <code>\n+ *    &#64;Inject\n+ *    &#64;Named(FEATURE_FLAGGING_SERVICE_KEY)\n+ *    private FeatureFlaggingService featureFlaggingService;\n+ *    // ....\n+ *    \n+ *    if (featureFlaggingService.isEnabled(\"some feature\")) {\n+ *        // ...\n+ *    }\n+ * </code>\n+ * \n+ * @see FeatureFlaggingRegistry\n+ * @since 4.4.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NTU3Nw=="}, "originalCommit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTQ3NzAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxNTowNlrOH6jNsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxNTowNlrOH6jNsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NjQwMg==", "bodyText": "add javadoc", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531156402", "createdAt": "2020-11-26T17:15:06Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingService.java", "diffHunk": "@@ -0,0 +1,23 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.api.config;\n+\n+/**\n+ * This service exposes the features that were flagged based on the configurations registered through the\n+ * {@link FeatureFlaggingRegistry}. These configurations will be evaluated when an application is deployed, which means that each\n+ * application will have its own set of flags independently of the rest of the applications deployed in a given runtime.\n+ * \n+ * @see FeatureFlaggingRegistry\n+ * @since 4.4.0\n+ */\n+public interface FeatureFlaggingService {\n+\n+  String FEATURE_FLAGGING_SERVICE_KEY = \"core.featureFlaggingService\";\n+\n+  boolean isEnabled(String feature);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTQ4Mjc1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxNzowOFrOH6jRHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxNzowOFrOH6jRHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NzI3Nw==", "bodyText": "javadoc", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531157277", "createdAt": "2020-11-26T17:17:08Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.api.config;\n+\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.core.api.MuleContext;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Predicate;\n+\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static java.util.Collections.unmodifiableMap;\n+import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n+\n+/**\n+ * Service used to register feature flags which will be evaluated at deployment time. For example:\n+ * \n+ * <code>\n+ *     // register a feature always \"on\"\n+ *     FeatureFlaggingRegistry.getInstance().registerFeature(\"some feature\", c -> true);\n+ * </code>\n+ * \n+ * <code>\n+ *    &#64;Inject\n+ *    &#64;Named(FEATURE_FLAGGING_SERVICE_KEY)\n+ *    private FeatureFlaggingService featureFlaggingService;\n+ *    // ....\n+ *    \n+ *    if (featureFlaggingService.isEnabled(\"some feature\")) {\n+ *        // ...\n+ *    }\n+ * </code>\n+ * \n+ * @see FeatureFlaggingRegistry\n+ * @since 4.4.0\n+ */\n+public class FeatureFlaggingRegistry {\n+\n+  private final Map<String, Predicate<MuleContext>> configurations = new ConcurrentHashMap<>();\n+\n+  private static final FeatureFlaggingRegistry INSTANCE = new FeatureFlaggingRegistry();\n+\n+  public static final FeatureFlaggingRegistry getInstance() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTQ4Mjk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxNzoxMVrOH6jRNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxNzoxMVrOH6jRNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NzMwMg==", "bodyText": "javadoc", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531157302", "createdAt": "2020-11-26T17:17:11Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.api.config;\n+\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.core.api.MuleContext;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Predicate;\n+\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static java.util.Collections.unmodifiableMap;\n+import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n+\n+/**\n+ * Service used to register feature flags which will be evaluated at deployment time. For example:\n+ * \n+ * <code>\n+ *     // register a feature always \"on\"\n+ *     FeatureFlaggingRegistry.getInstance().registerFeature(\"some feature\", c -> true);\n+ * </code>\n+ * \n+ * <code>\n+ *    &#64;Inject\n+ *    &#64;Named(FEATURE_FLAGGING_SERVICE_KEY)\n+ *    private FeatureFlaggingService featureFlaggingService;\n+ *    // ....\n+ *    \n+ *    if (featureFlaggingService.isEnabled(\"some feature\")) {\n+ *        // ...\n+ *    }\n+ * </code>\n+ * \n+ * @see FeatureFlaggingRegistry\n+ * @since 4.4.0\n+ */\n+public class FeatureFlaggingRegistry {\n+\n+  private final Map<String, Predicate<MuleContext>> configurations = new ConcurrentHashMap<>();\n+\n+  private static final FeatureFlaggingRegistry INSTANCE = new FeatureFlaggingRegistry();\n+\n+  public static final FeatureFlaggingRegistry getInstance() {\n+    return INSTANCE;\n+  }\n+\n+  private FeatureFlaggingRegistry() {}\n+\n+  public void registerFeature(String feature, Predicate<MuleContext> condition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTQ4MzIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxNzoxNVrOH6jRVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxNzoxNVrOH6jRVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NzMzMg==", "bodyText": "javadoc", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531157332", "createdAt": "2020-11-26T17:17:15Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.api.config;\n+\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.core.api.MuleContext;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Predicate;\n+\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static java.util.Collections.unmodifiableMap;\n+import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n+\n+/**\n+ * Service used to register feature flags which will be evaluated at deployment time. For example:\n+ * \n+ * <code>\n+ *     // register a feature always \"on\"\n+ *     FeatureFlaggingRegistry.getInstance().registerFeature(\"some feature\", c -> true);\n+ * </code>\n+ * \n+ * <code>\n+ *    &#64;Inject\n+ *    &#64;Named(FEATURE_FLAGGING_SERVICE_KEY)\n+ *    private FeatureFlaggingService featureFlaggingService;\n+ *    // ....\n+ *    \n+ *    if (featureFlaggingService.isEnabled(\"some feature\")) {\n+ *        // ...\n+ *    }\n+ * </code>\n+ * \n+ * @see FeatureFlaggingRegistry\n+ * @since 4.4.0\n+ */\n+public class FeatureFlaggingRegistry {\n+\n+  private final Map<String, Predicate<MuleContext>> configurations = new ConcurrentHashMap<>();\n+\n+  private static final FeatureFlaggingRegistry INSTANCE = new FeatureFlaggingRegistry();\n+\n+  public static final FeatureFlaggingRegistry getInstance() {\n+    return INSTANCE;\n+  }\n+\n+  private FeatureFlaggingRegistry() {}\n+\n+  public void registerFeature(String feature, Predicate<MuleContext> condition) {\n+    if (isNullOrEmpty(feature)) {\n+      throw new MuleRuntimeException(createStaticMessage(\"Invalid feature name\"));\n+    }\n+\n+    if (condition == null) {\n+      throw new MuleRuntimeException(createStaticMessage(\"Error registering %s: condition must not be null\", feature));\n+    }\n+\n+    Predicate<MuleContext> added = configurations.putIfAbsent(feature, condition);\n+    if (added != null) {\n+      throw new MuleRuntimeException(createStaticMessage(\"Feature %s already registered\", feature));\n+    }\n+  }\n+\n+  public Map<String, Predicate<MuleContext>> getFeatureConfigurations() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTQ4NDQ0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxNzozNVrOH6jSAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxNzozNVrOH6jSAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1NzUwNw==", "bodyText": "javadoc. Is this just for test?", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531157507", "createdAt": "2020-11-26T17:17:35Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+\n+package org.mule.runtime.core.api.config;\n+\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n+import org.mule.runtime.core.api.MuleContext;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Predicate;\n+\n+import static com.google.common.base.Strings.isNullOrEmpty;\n+import static java.util.Collections.unmodifiableMap;\n+import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n+\n+/**\n+ * Service used to register feature flags which will be evaluated at deployment time. For example:\n+ * \n+ * <code>\n+ *     // register a feature always \"on\"\n+ *     FeatureFlaggingRegistry.getInstance().registerFeature(\"some feature\", c -> true);\n+ * </code>\n+ * \n+ * <code>\n+ *    &#64;Inject\n+ *    &#64;Named(FEATURE_FLAGGING_SERVICE_KEY)\n+ *    private FeatureFlaggingService featureFlaggingService;\n+ *    // ....\n+ *    \n+ *    if (featureFlaggingService.isEnabled(\"some feature\")) {\n+ *        // ...\n+ *    }\n+ * </code>\n+ * \n+ * @see FeatureFlaggingRegistry\n+ * @since 4.4.0\n+ */\n+public class FeatureFlaggingRegistry {\n+\n+  private final Map<String, Predicate<MuleContext>> configurations = new ConcurrentHashMap<>();\n+\n+  private static final FeatureFlaggingRegistry INSTANCE = new FeatureFlaggingRegistry();\n+\n+  public static final FeatureFlaggingRegistry getInstance() {\n+    return INSTANCE;\n+  }\n+\n+  private FeatureFlaggingRegistry() {}\n+\n+  public void registerFeature(String feature, Predicate<MuleContext> condition) {\n+    if (isNullOrEmpty(feature)) {\n+      throw new MuleRuntimeException(createStaticMessage(\"Invalid feature name\"));\n+    }\n+\n+    if (condition == null) {\n+      throw new MuleRuntimeException(createStaticMessage(\"Error registering %s: condition must not be null\", feature));\n+    }\n+\n+    Predicate<MuleContext> added = configurations.putIfAbsent(feature, condition);\n+    if (added != null) {\n+      throw new MuleRuntimeException(createStaticMessage(\"Feature %s already registered\", feature));\n+    }\n+  }\n+\n+  public Map<String, Predicate<MuleContext>> getFeatureConfigurations() {\n+    return unmodifiableMap(configurations);\n+  }\n+\n+  protected void clearFeatureConfigurations() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTQ4NjAxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/api/config/MuleConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxODoxNVrOH6jTAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoxODoxNVrOH6jTAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1Nzc2MA==", "bodyText": "keep these lines separated with <p>", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531157760", "createdAt": "2020-11-26T17:18:15Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/api/config/MuleConfiguration.java", "diffHunk": "@@ -7,15 +7,18 @@\n package org.mule.runtime.core.api.config;\n \n import org.mule.api.annotation.NoImplement;\n+import org.mule.runtime.api.meta.MuleVersion;\n import org.mule.runtime.api.serialization.ObjectSerializer;\n import org.mule.runtime.core.api.MuleContext;\n import org.mule.runtime.core.api.construct.Flow;\n import org.mule.runtime.core.api.processor.strategy.ProcessingStrategy;\n import org.mule.runtime.core.api.processor.strategy.ProcessingStrategyFactory;\n \n+import java.util.Optional;\n+\n /**\n- * Configuration info. which can be set when creating the MuleContext but becomes immutable after startup.\n- * TODO MULE-13121 Cleanup MuleConfiguration removing redundant config in Mule 4\n+ * Configuration info. which can be set when creating the MuleContext but becomes immutable after startup. TODO MULE-13121 Cleanup", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTQ5MjkwOnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/petstore-extension/src/main/java/org/mule/test/petstore/extension/PetStoreOperations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoyMDozOVrOH6jW-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNzoyMDozOVrOH6jW-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE1ODc3OA==", "bodyText": "static import", "url": "https://github.com/mulesoft/mule/pull/9786#discussion_r531158778", "createdAt": "2020-11-26T17:20:39Z", "author": {"login": "elrodro83"}, "path": "tests/test-extensions/petstore-extension/src/main/java/org/mule/test/petstore/extension/PetStoreOperations.java", "diffHunk": "@@ -70,6 +89,14 @@ public String echoWithSignature(String message) {\n     return message + \" echoed by Petstore\";\n   }\n \n+  @MediaType(TEXT_PLAIN)\n+  public String featureFlaggedEcho(String message) {\n+    if (ffService.isEnabled(LEGACY_BEHAVIOUR)) {\n+      return String.format(\"%s [old way]\", message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc85eb52b725be4d8b231530e378fb949c24e383"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4553, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}