{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwOTUzMDU2", "number": 9231, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzo1NDoyNVrOEblKMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMToxNDo1OVrOEcPuvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzU1ODI3OnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/streaming/CursorUtilTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzo1NDoyNlrOHFl7UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzo1NDoyNlrOHFl7UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYyNjMyMA==", "bodyText": "42 is a nice number", "url": "https://github.com/mulesoft/mule/pull/9231#discussion_r475626320", "createdAt": "2020-08-24T13:54:26Z", "author": {"login": "marianogonzalez"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/streaming/CursorUtilTestCase.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.streaming;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.sameInstance;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.mule.runtime.core.internal.streaming.CursorUtils.unwrap;\n+\n+import org.mule.runtime.api.streaming.CursorProvider;\n+import org.mule.tck.junit4.AbstractMuleTestCase;\n+\n+import org.junit.Test;\n+\n+public class CursorUtilTestCase extends AbstractMuleTestCase {\n+\n+  @Test\n+  public void unwrapNonDecoratedProvider() {\n+    CursorProvider provider = mock(CursorProvider.class);\n+    assertThat(unwrap(provider), is(sameInstance(provider)));\n+  }\n+\n+  @Test\n+  public void unwrapOneLevelDecorator() {\n+    CursorProvider provider = mock(CursorProvider.class);\n+    CursorProviderDecorator decorator = mock(CursorProviderDecorator.class);\n+    when(decorator.getDelegate()).thenReturn(provider);\n+\n+    assertThat(unwrap(decorator), is(sameInstance(provider)));\n+  }\n+\n+  @Test\n+  public void unwrap10thLevelDecorator() {\n+    CursorProvider provider = mock(CursorProvider.class);\n+    CursorProviderDecorator decorator = mock(CursorProviderDecorator.class);\n+    when(decorator.getDelegate()).thenReturn(provider);\n+\n+    for (int i = 0; i < 9; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df2115e69f7292c664ec20ea74ada7559ee5415a"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzU4NjY3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/EventStreamingState.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzo1ODowOVrOHFmNuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzo1ODowOVrOHFmNuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzMTAzMg==", "bodyText": "remove this, It will hurt performance. If you really need this info for troubleshooting, then take an approach similar to the one taken for tracking close() operations", "url": "https://github.com/mulesoft/mule/pull/9231#discussion_r475631032", "createdAt": "2020-08-24T13:58:09Z", "author": {"login": "marianogonzalez"}, "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/EventStreamingState.java", "diffHunk": "@@ -32,30 +41,39 @@\n    * @return the {@link ManagedCursorProvider} that must continue to be used\n    */\n   public ManagedCursorProvider addProvider(ManagedCursorProvider provider, StreamingGhostBuster ghostBuster) {\n-    final int hash = identityHashCode(provider.getDelegate());\n-    ManagedCursorProvider managedProvider = getOrAddManagedProvider(hash, provider, ghostBuster);\n+    final int id = provider.getId();\n+    ManagedCursorProvider managedProvider = getOrAddManagedProvider(id, provider, ghostBuster);\n \n     // This can happen when a foreach component splits a text document using a stream.\n     // Iteration N might try to manage the same root provider that was already managed in iteration N-1, but the\n     // managed decorator from that previous iteration has been collected, which causes the weak reference to yield\n     // a null value. In which case we simply track it again.\n     if (managedProvider == null) {\n-      synchronized (provider.getDelegate()) {\n-        managedProvider = getOrAddManagedProvider(hash, provider, ghostBuster);\n+      synchronized (unwrap(provider)) {\n+        managedProvider = getOrAddManagedProvider(id, provider, ghostBuster);\n         if (managedProvider == null) {\n-          providers.invalidate(hash);\n-          managedProvider = getOrAddManagedProvider(hash, provider, ghostBuster);\n+          providers.invalidate(id);\n+          managedProvider = getOrAddManagedProvider(id, provider, ghostBuster);\n         }\n       }\n     }\n \n     return managedProvider;\n   }\n \n-  private ManagedCursorProvider getOrAddManagedProvider(int hash,\n+  private ManagedCursorProvider getOrAddManagedProvider(int id,\n                                                         ManagedCursorProvider provider,\n                                                         StreamingGhostBuster ghostBuster) {\n-    return providers.get(hash, k -> ghostBuster.track(provider)).get();\n+    return providers.get(id, k -> {\n+      if (LOGGER.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df2115e69f7292c664ec20ea74ada7559ee5415a"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzU4ODgwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/EventStreamingState.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzo1ODoyOFrOHFmPJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzo1ODoyOFrOHFmPJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzMTM5Ng==", "bodyText": "String.format is a quite expensive operation. In this case, you're better of using the slf4j {} notation", "url": "https://github.com/mulesoft/mule/pull/9231#discussion_r475631396", "createdAt": "2020-08-24T13:58:28Z", "author": {"login": "marianogonzalez"}, "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/EventStreamingState.java", "diffHunk": "@@ -32,30 +41,39 @@\n    * @return the {@link ManagedCursorProvider} that must continue to be used\n    */\n   public ManagedCursorProvider addProvider(ManagedCursorProvider provider, StreamingGhostBuster ghostBuster) {\n-    final int hash = identityHashCode(provider.getDelegate());\n-    ManagedCursorProvider managedProvider = getOrAddManagedProvider(hash, provider, ghostBuster);\n+    final int id = provider.getId();\n+    ManagedCursorProvider managedProvider = getOrAddManagedProvider(id, provider, ghostBuster);\n \n     // This can happen when a foreach component splits a text document using a stream.\n     // Iteration N might try to manage the same root provider that was already managed in iteration N-1, but the\n     // managed decorator from that previous iteration has been collected, which causes the weak reference to yield\n     // a null value. In which case we simply track it again.\n     if (managedProvider == null) {\n-      synchronized (provider.getDelegate()) {\n-        managedProvider = getOrAddManagedProvider(hash, provider, ghostBuster);\n+      synchronized (unwrap(provider)) {\n+        managedProvider = getOrAddManagedProvider(id, provider, ghostBuster);\n         if (managedProvider == null) {\n-          providers.invalidate(hash);\n-          managedProvider = getOrAddManagedProvider(hash, provider, ghostBuster);\n+          providers.invalidate(id);\n+          managedProvider = getOrAddManagedProvider(id, provider, ghostBuster);\n         }\n       }\n     }\n \n     return managedProvider;\n   }\n \n-  private ManagedCursorProvider getOrAddManagedProvider(int hash,\n+  private ManagedCursorProvider getOrAddManagedProvider(int id,\n                                                         ManagedCursorProvider provider,\n                                                         StreamingGhostBuster ghostBuster) {\n-    return providers.get(hash, k -> ghostBuster.track(provider)).get();\n+    return providers.get(id, k -> {\n+      if (LOGGER.isDebugEnabled()) {\n+        CursorProvider innerDelegate = unwrap(provider);\n+        Optional<ComponentLocation> originatingLocation = provider.getOriginatingLocation();\n+        LOGGER.debug(format(\"Added ManagedCursorProvider: %s for delegate: %s opened by: %s\", k, identityHashCode(innerDelegate),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df2115e69f7292c664ec20ea74ada7559ee5415a"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzYzMjExOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/IdentifiableCursorProviderDecorator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDowNjowN1rOHFmpsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDowNjowN1rOHFmpsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzODE5NA==", "bodyText": "shouldn't this start with:\nif (cursorProvider instanceof IdentifiableCursorProviderDecorator) {\n  return IdentifiableCursorProviderDecorator;\n}\n\nOtherwise you will be created new decorators unnecessarily", "url": "https://github.com/mulesoft/mule/pull/9231#discussion_r475638194", "createdAt": "2020-08-24T14:06:07Z", "author": {"login": "marianogonzalez"}, "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/IdentifiableCursorProviderDecorator.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.streaming;\n+\n+import static java.lang.Integer.MIN_VALUE;\n+\n+import org.mule.runtime.api.streaming.Cursor;\n+import org.mule.runtime.api.streaming.CursorProvider;\n+import org.mule.runtime.api.streaming.bytes.CursorStream;\n+import org.mule.runtime.api.streaming.bytes.CursorStreamProvider;\n+import org.mule.runtime.api.streaming.object.CursorIterator;\n+import org.mule.runtime.api.streaming.object.CursorIteratorProvider;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * A decorator that turns any {@link CursorProvider} into an {@link IdentifiableCursorProvider}.\n+ * <p>\n+ * If the decoratee is already an {@link IdentifiableCursorProvider} or ({@link CursorProviderDecorator} of one), then this\n+ * decorator will yield the same id as the input identifiable provider. If this is not the case, an ID will be generaetd.\n+ * <p>\n+ * Instances are to be created through the {@link #of(CursorProvider)} factory method.\n+ *\n+ * @param <T> the generic {@link Cursor} type as defined in {@link CursorProvider}\n+ * @since 4.3.0 - 4.2.3\n+ */\n+public abstract class IdentifiableCursorProviderDecorator<T extends Cursor> extends CursorProviderDecorator<T>\n+    implements IdentifiableCursorProvider<T> {\n+\n+  private static final transient AtomicInteger ID_GENERATOR = new AtomicInteger(MIN_VALUE);\n+\n+  private final int id;\n+\n+  /**\n+   * Creates a new decorator for the given {@code cursorProvider}.\n+   * <p>\n+   * If the {@code cursorProvider} is already an {@link IdentifiableCursorProvider}, then the returned decorator will yield the\n+   * same id as the input {@code cursorProvider}. If {@code cursorProvider} is a {@link CursorProviderDecorator}, then the\n+   * {@link CursorProviderDecorator#getDelegate()} will be recursively be tested to find if any delegate in the chain is\n+   * identifiable. If such delegate is found, then the same {@code id} will be reused. Otherwise, one will be generated.\n+   *\n+   * @param cursorProvider the decoratee\n+   * @param <T>            the generic {@link Cursor} type\n+   * @return a new decorator.\n+   */\n+  public static <T extends Cursor> IdentifiableCursorProviderDecorator<T> of(CursorProvider<T> cursorProvider) {\n+    final CursorProvider<T> root = cursorProvider;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df2115e69f7292c664ec20ea74ada7559ee5415a"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzYzNDE4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/StreamingGhostBuster.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDowNjo0MFrOHFmq8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDowNjo0MFrOHFmq8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzODUxNQ==", "bodyText": "there's already an SP for doing this in a more global fashion. Remove this", "url": "https://github.com/mulesoft/mule/pull/9231#discussion_r475638515", "createdAt": "2020-08-24T14:06:40Z", "author": {"login": "marianogonzalez"}, "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/StreamingGhostBuster.java", "diffHunk": "@@ -113,6 +119,13 @@ private void bustGhosts() {\n \n   private void bust(StreamingWeakReference ghost) {\n     try {\n+      if (LOGGER.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df2115e69f7292c664ec20ea74ada7559ee5415a"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTk1MTE2OnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/streaming/StreamingGhostBusterTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODoyMToyOVrOHGkXgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODoyMToyOVrOHGkXgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY0OTM0NQ==", "bodyText": "flaky. Use PollingProber", "url": "https://github.com/mulesoft/mule/pull/9231#discussion_r476649345", "createdAt": "2020-08-25T18:21:29Z", "author": {"login": "marianogonzalez"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/streaming/StreamingGhostBusterTestCase.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.streaming;\n+\n+import static java.lang.System.gc;\n+import static java.lang.Thread.sleep;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.initialiseIfNeeded;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.startIfNeeded;\n+import static org.mule.runtime.core.internal.streaming.IdentifiableCursorProviderDecorator.of;\n+import static org.mule.test.allure.AllureConstants.StreamingFeature.STREAMING;\n+\n+import io.qameta.allure.Feature;\n+import org.junit.Test;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.streaming.bytes.CursorStreamProvider;\n+import org.mule.runtime.core.internal.streaming.bytes.ManagedCursorStreamProvider;\n+import org.mule.tck.junit4.AbstractMuleContextTestCase;\n+\n+import java.lang.ref.WeakReference;\n+\n+@Feature(STREAMING)\n+public class StreamingGhostBusterTestCase extends AbstractMuleContextTestCase {\n+\n+  private StreamingGhostBuster ghostBuster;\n+\n+  @Override\n+  protected void doSetUp() throws Exception {\n+    ghostBuster = new StreamingGhostBuster();\n+    initialiseIfNeeded(ghostBuster, true, muleContext);\n+    startIfNeeded(ghostBuster);\n+  }\n+\n+  @Override\n+  protected void doTearDown() throws MuleException {\n+    ghostBuster.stop();\n+    ghostBuster.dispose();\n+  }\n+\n+  @Test\n+  public void releaseResourcesWhenReferenceIsCollected() {\n+    MutableStreamingStatistics statistics = mock(MutableStreamingStatistics.class);\n+    CursorStreamProvider provider = mock(CursorStreamProvider.class);\n+    ManagedCursorStreamProvider managedCursorProvider = new ManagedCursorStreamProvider(of(provider), statistics);\n+\n+    WeakReference<ManagedCursorProvider> reference = ghostBuster.track(managedCursorProvider);\n+\n+    // Force GC collection\n+    managedCursorProvider = null;\n+    gc();\n+    assertThat(reference.get(), is(nullValue()));\n+\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db0789f87a782cc13d91f8989c5d868b804fd9b1"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3OTk1NjYxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/CursorUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODoyMzowM1rOHGka6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODoyMzowM1rOHGka6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1MDIxOA==", "bodyText": "weird that this is here. Doesn't this make more sense in CursorManager?", "url": "https://github.com/mulesoft/mule/pull/9231#discussion_r476650218", "createdAt": "2020-08-25T18:23:03Z", "author": {"login": "marianogonzalez"}, "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/CursorUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.streaming;\n+\n+import static java.lang.Boolean.getBoolean;\n+import static org.mule.runtime.api.util.MuleSystemProperties.STREAMING_VERBOSE_PROPERTY;\n+\n+import org.mule.runtime.api.streaming.Cursor;\n+import org.mule.runtime.api.streaming.CursorProvider;\n+\n+/**\n+ * Utilities for handling {@link Cursor cursors}\n+ *\n+ * @since 4.3.0 - 4.2.3\n+ */\n+public final class CursorUtils {\n+\n+  private CursorUtils() {}\n+\n+  public static final boolean STREAMING_VERBOSE = getBoolean(STREAMING_VERBOSE_PROPERTY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db0789f87a782cc13d91f8989c5d868b804fd9b1"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDAyNjM1OnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo0MzowOVrOHGlGPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo0MzowOVrOHGlGPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2MTMxMA==", "bodyText": "@Issue", "url": "https://github.com/mulesoft/mule/pull/9231#discussion_r476661310", "createdAt": "2020-08-25T18:43:09Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java", "diffHunk": "@@ -456,6 +461,51 @@ public void empty() throws Exception {\n     assertThat(processedEvents, hasSize(0));\n   }\n \n+  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db0789f87a782cc13d91f8989c5d868b804fd9b1"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDAyNjgzOnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo0MzoxOFrOHGlGlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo0MzoxOFrOHGlGlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2MTM5OA==", "bodyText": "@Issue", "url": "https://github.com/mulesoft/mule/pull/9231#discussion_r476661398", "createdAt": "2020-08-25T18:43:18Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/routing/ForeachTestCase.java", "diffHunk": "@@ -456,6 +461,51 @@ public void empty() throws Exception {\n     assertThat(processedEvents, hasSize(0));\n   }\n \n+  @Test\n+  public void muleMessageContainingACursorStreamShouldBeManagedByCursorManager() throws Exception {\n+    AtomicReference<CoreEvent> eventReference = new AtomicReference<>();\n+    foreach = createForeach();\n+    InternalTestProcessor capturedEventProcessor = event -> {\n+      eventReference.set(event);\n+      return event;\n+    };\n+    foreach.setMessageProcessors(asList(capturedEventProcessor));\n+    initialiseIfNeeded(foreach, muleContext);\n+\n+    CursorProvider cursorProvider = mock(CursorStreamProvider.class);\n+\n+    CoreEvent input = eventBuilder(muleContext).message(of(singletonList(of(cursorProvider)))).build();\n+    CoreEvent result = process(foreach, input);\n+\n+    assertThat(result.getMessage(), equalTo(input.getMessage()));\n+    assertThat(eventReference.get().getMessage().getPayload().getValue(), is(instanceOf(ManagedCursorProvider.class)));\n+    ManagedCursorProvider managedCursorProvider =\n+        (ManagedCursorProvider) eventReference.get().getMessage().getPayload().getValue();\n+    assertThat(unwrap(managedCursorProvider), is(sameInstance(cursorProvider)));\n+  }\n+\n+  @Test\n+  public void cursorStreamShouldBeManagedByCursorManager() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db0789f87a782cc13d91f8989c5d868b804fd9b1"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDAyNzgyOnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/routing/ParallelForEachTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo0MzozNFrOHGlHLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMToxNToxMFrOHGp_mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2MTU1MA==", "bodyText": "@Issue", "url": "https://github.com/mulesoft/mule/pull/9231#discussion_r476661550", "createdAt": "2020-08-25T18:43:34Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/routing/ParallelForEachTestCase.java", "diffHunk": "@@ -177,6 +182,31 @@ public void customTargetDefaultPayload() throws Exception {\n     assertThat(resultList, hasSize(2));\n   }\n \n+  @Test\n+  @Description(\"Cursor provider should be managed by cursor manager inside parallel-foreach.\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db0789f87a782cc13d91f8989c5d868b804fd9b1"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0MTUzMA==", "bodyText": "and it's missing here...", "url": "https://github.com/mulesoft/mule/pull/9231#discussion_r476741530", "createdAt": "2020-08-25T21:15:10Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/routing/ParallelForEachTestCase.java", "diffHunk": "@@ -177,6 +182,31 @@ public void customTargetDefaultPayload() throws Exception {\n     assertThat(resultList, hasSize(2));\n   }\n \n+  @Test\n+  @Description(\"Cursor provider should be managed by cursor manager inside parallel-foreach.\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2MTU1MA=="}, "originalCommit": {"oid": "db0789f87a782cc13d91f8989c5d868b804fd9b1"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDAyODQ5OnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/streaming/CursorUtilTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo0Mzo0NlrOHGlHmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMToxNToyN1rOHGqAGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2MTY1OA==", "bodyText": "allure", "url": "https://github.com/mulesoft/mule/pull/9231#discussion_r476661658", "createdAt": "2020-08-25T18:43:46Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/streaming/CursorUtilTestCase.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.streaming;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.sameInstance;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.mule.runtime.core.internal.streaming.CursorUtils.unwrap;\n+\n+import org.mule.runtime.api.streaming.CursorProvider;\n+import org.mule.tck.junit4.AbstractMuleTestCase;\n+\n+import org.junit.Test;\n+\n+public class CursorUtilTestCase extends AbstractMuleTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db0789f87a782cc13d91f8989c5d868b804fd9b1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0MTY1Nw==", "bodyText": "@Issue in this class tests", "url": "https://github.com/mulesoft/mule/pull/9231#discussion_r476741657", "createdAt": "2020-08-25T21:15:27Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/streaming/CursorUtilTestCase.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.streaming;\n+\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.sameInstance;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.mule.runtime.core.internal.streaming.CursorUtils.unwrap;\n+\n+import org.mule.runtime.api.streaming.CursorProvider;\n+import org.mule.tck.junit4.AbstractMuleTestCase;\n+\n+import org.junit.Test;\n+\n+public class CursorUtilTestCase extends AbstractMuleTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2MTY1OA=="}, "originalCommit": {"oid": "db0789f87a782cc13d91f8989c5d868b804fd9b1"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDAyODg5OnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/streaming/IdentifiableCursorProviderDecoratorTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo0Mzo1NVrOHGlH4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMToxNTo1M1rOHGqBAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2MTczMQ==", "bodyText": "allure", "url": "https://github.com/mulesoft/mule/pull/9231#discussion_r476661731", "createdAt": "2020-08-25T18:43:55Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/streaming/IdentifiableCursorProviderDecoratorTestCase.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.streaming;\n+\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.sameInstance;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.withSettings;\n+import static org.mule.runtime.core.internal.streaming.CursorUtils.unwrap;\n+\n+import org.mule.runtime.api.streaming.bytes.CursorStreamProvider;\n+import org.mule.runtime.api.streaming.object.CursorIteratorProvider;\n+import org.mule.tck.junit4.AbstractMuleTestCase;\n+\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class IdentifiableCursorProviderDecoratorTestCase extends AbstractMuleTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db0789f87a782cc13d91f8989c5d868b804fd9b1"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0MTg5MQ==", "bodyText": "@Issue in the tests", "url": "https://github.com/mulesoft/mule/pull/9231#discussion_r476741891", "createdAt": "2020-08-25T21:15:53Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/streaming/IdentifiableCursorProviderDecoratorTestCase.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.streaming;\n+\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.sameInstance;\n+import static org.hamcrest.Matchers.hasSize;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.withSettings;\n+import static org.mule.runtime.core.internal.streaming.CursorUtils.unwrap;\n+\n+import org.mule.runtime.api.streaming.bytes.CursorStreamProvider;\n+import org.mule.runtime.api.streaming.object.CursorIteratorProvider;\n+import org.mule.tck.junit4.AbstractMuleTestCase;\n+\n+import java.util.HashSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+\n+public class IdentifiableCursorProviderDecoratorTestCase extends AbstractMuleTestCase {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2MTczMQ=="}, "originalCommit": {"oid": "db0789f87a782cc13d91f8989c5d868b804fd9b1"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDAyOTgyOnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/streaming/StreamingGhostBusterTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo0NDoxMVrOHGlIiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo0NDoxMVrOHGlIiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2MTg5Nw==", "bodyText": "@Story", "url": "https://github.com/mulesoft/mule/pull/9231#discussion_r476661897", "createdAt": "2020-08-25T18:44:11Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/streaming/StreamingGhostBusterTestCase.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.streaming;\n+\n+import static java.lang.System.gc;\n+import static java.lang.Thread.sleep;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.initialiseIfNeeded;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.startIfNeeded;\n+import static org.mule.runtime.core.internal.streaming.IdentifiableCursorProviderDecorator.of;\n+import static org.mule.test.allure.AllureConstants.StreamingFeature.STREAMING;\n+\n+import io.qameta.allure.Feature;\n+import org.junit.Test;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.streaming.bytes.CursorStreamProvider;\n+import org.mule.runtime.core.internal.streaming.bytes.ManagedCursorStreamProvider;\n+import org.mule.tck.junit4.AbstractMuleContextTestCase;\n+\n+import java.lang.ref.WeakReference;\n+\n+@Feature(STREAMING)\n+public class StreamingGhostBusterTestCase extends AbstractMuleContextTestCase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db0789f87a782cc13d91f8989c5d868b804fd9b1"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDAzMDE0OnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/streaming/StreamingGhostBusterTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo0NDoxNlrOHGlItg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo0NDoxNlrOHGlItg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2MTk0Mg==", "bodyText": "@Issue", "url": "https://github.com/mulesoft/mule/pull/9231#discussion_r476661942", "createdAt": "2020-08-25T18:44:16Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/streaming/StreamingGhostBusterTestCase.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.streaming;\n+\n+import static java.lang.System.gc;\n+import static java.lang.Thread.sleep;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.nullValue;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.initialiseIfNeeded;\n+import static org.mule.runtime.core.api.lifecycle.LifecycleUtils.startIfNeeded;\n+import static org.mule.runtime.core.internal.streaming.IdentifiableCursorProviderDecorator.of;\n+import static org.mule.test.allure.AllureConstants.StreamingFeature.STREAMING;\n+\n+import io.qameta.allure.Feature;\n+import org.junit.Test;\n+import org.mule.runtime.api.exception.MuleException;\n+import org.mule.runtime.api.streaming.bytes.CursorStreamProvider;\n+import org.mule.runtime.core.internal.streaming.bytes.ManagedCursorStreamProvider;\n+import org.mule.tck.junit4.AbstractMuleContextTestCase;\n+\n+import java.lang.ref.WeakReference;\n+\n+@Feature(STREAMING)\n+public class StreamingGhostBusterTestCase extends AbstractMuleContextTestCase {\n+\n+  private StreamingGhostBuster ghostBuster;\n+\n+  @Override\n+  protected void doSetUp() throws Exception {\n+    ghostBuster = new StreamingGhostBuster();\n+    initialiseIfNeeded(ghostBuster, true, muleContext);\n+    startIfNeeded(ghostBuster);\n+  }\n+\n+  @Override\n+  protected void doTearDown() throws MuleException {\n+    ghostBuster.stop();\n+    ghostBuster.dispose();\n+  }\n+\n+  @Test\n+  public void releaseResourcesWhenReferenceIsCollected() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db0789f87a782cc13d91f8989c5d868b804fd9b1"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDAzNzAxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/CursorProviderDecorator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo0NjoxM1rOHGlM7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo0NjoxM1rOHGlM7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2MzAyMA==", "bodyText": "4.4, 4.3.1, 4.2.3", "url": "https://github.com/mulesoft/mule/pull/9231#discussion_r476663020", "createdAt": "2020-08-25T18:46:13Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/CursorProviderDecorator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.streaming;\n+\n+import org.mule.runtime.api.component.location.ComponentLocation;\n+import org.mule.runtime.api.streaming.Cursor;\n+import org.mule.runtime.api.streaming.CursorProvider;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Base class for applying the decorator pattern over instances of a {@link CursorProvider}.\n+ * <p>\n+ * All decorators <b>MUST</b> extend this class so that the framework can leeverate the {@link #getDelegate()} method in order\n+ * to traverse the decorators chain in order to asses if certain behaviors are already applied or to reach the originally wrapped\n+ * instance.\n+ *\n+ * @param <T> the generic {@link Cursor} type as defined in {@link CursorProvider}\n+ * @since 4.3.0 - 4.2.3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db0789f87a782cc13d91f8989c5d868b804fd9b1"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDAzODI0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/CursorUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo0NjozNFrOHGlNtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo0NjozNFrOHGlNtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2MzIyMA==", "bodyText": "4.4, 4.3.1, 4.2.3", "url": "https://github.com/mulesoft/mule/pull/9231#discussion_r476663220", "createdAt": "2020-08-25T18:46:34Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/CursorUtils.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.streaming;\n+\n+import static java.lang.Boolean.getBoolean;\n+import static org.mule.runtime.api.util.MuleSystemProperties.STREAMING_VERBOSE_PROPERTY;\n+\n+import org.mule.runtime.api.streaming.Cursor;\n+import org.mule.runtime.api.streaming.CursorProvider;\n+\n+/**\n+ * Utilities for handling {@link Cursor cursors}\n+ *\n+ * @since 4.3.0 - 4.2.3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db0789f87a782cc13d91f8989c5d868b804fd9b1"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDAzODk1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/CursorProviderDecorator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo0Njo0OFrOHGlOLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo0Njo0OFrOHGlOLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2MzM0MQ==", "bodyText": "leeverate -> leverage", "url": "https://github.com/mulesoft/mule/pull/9231#discussion_r476663341", "createdAt": "2020-08-25T18:46:48Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/CursorProviderDecorator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.streaming;\n+\n+import org.mule.runtime.api.component.location.ComponentLocation;\n+import org.mule.runtime.api.streaming.Cursor;\n+import org.mule.runtime.api.streaming.CursorProvider;\n+\n+import java.util.Optional;\n+\n+/**\n+ * Base class for applying the decorator pattern over instances of a {@link CursorProvider}.\n+ * <p>\n+ * All decorators <b>MUST</b> extend this class so that the framework can leeverate the {@link #getDelegate()} method in order", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db0789f87a782cc13d91f8989c5d868b804fd9b1"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDA2NDQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/IdentifiableCursorProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo1Mzo0N1rOHGleAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo1Mzo0N1rOHGleAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2NzM5Mg==", "bodyText": "4.4, 4.3.1, 4.2.3", "url": "https://github.com/mulesoft/mule/pull/9231#discussion_r476667392", "createdAt": "2020-08-25T18:53:47Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/IdentifiableCursorProvider.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.streaming;\n+\n+import org.mule.runtime.api.streaming.Cursor;\n+import org.mule.runtime.api.streaming.CursorProvider;\n+\n+/**\n+ * A Cursor provider that contains an ID that can unequivocally identifies it.\n+ *\n+ * @param <T> the generic {@link Cursor} type as defined in {@link CursorProvider}\n+ * @since 4.3.0 - 4.2.3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db0789f87a782cc13d91f8989c5d868b804fd9b1"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDA2NTE5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/IdentifiableCursorProviderDecorator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo1NDowMFrOHGledQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODo1NDowMFrOHGledQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2NzUwOQ==", "bodyText": "4.4, 4.3.1, 4.2.3", "url": "https://github.com/mulesoft/mule/pull/9231#discussion_r476667509", "createdAt": "2020-08-25T18:54:00Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/streaming/IdentifiableCursorProviderDecorator.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.streaming;\n+\n+import static java.lang.Integer.MIN_VALUE;\n+\n+import org.mule.runtime.api.streaming.Cursor;\n+import org.mule.runtime.api.streaming.CursorProvider;\n+import org.mule.runtime.api.streaming.bytes.CursorStream;\n+import org.mule.runtime.api.streaming.bytes.CursorStreamProvider;\n+import org.mule.runtime.api.streaming.object.CursorIterator;\n+import org.mule.runtime.api.streaming.object.CursorIteratorProvider;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * A decorator that turns any {@link CursorProvider} into an {@link IdentifiableCursorProvider}.\n+ * <p>\n+ * If the decoratee is already an {@link IdentifiableCursorProvider} or ({@link CursorProviderDecorator} of one), then this\n+ * decorator will yield the same id as the input identifiable provider. If this is not the case, an ID will be generaetd.\n+ * <p>\n+ * Instances are to be created through the {@link #of(CursorProvider)} factory method.\n+ *\n+ * @param <T> the generic {@link Cursor} type as defined in {@link CursorProvider}\n+ * @since 4.3.0 - 4.2.3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "db0789f87a782cc13d91f8989c5d868b804fd9b1"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDUzMzExOnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/routing/ParallelForEachTestCase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMToxNDo1OVrOHGp_VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMToxNDo1OVrOHGp_VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0MTQ2MA==", "bodyText": "this test was previous", "url": "https://github.com/mulesoft/mule/pull/9231#discussion_r476741460", "createdAt": "2020-08-25T21:14:59Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/routing/ParallelForEachTestCase.java", "diffHunk": "@@ -128,6 +134,7 @@ public void defaultTarget() throws Exception {\n \n   @Test\n   @Description(\"When a custom target is configured the router result is set in a variable and the input event is output.\")\n+  @Issue(\"MULE-18573\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4927ab90c90b8312d17a7b2ef6ee4780420a626"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4826, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}