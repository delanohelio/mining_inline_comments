{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwNTAxOTk5", "number": 9859, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjo0ODowOVrOFGLOSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjo0ODowOVrOFGLOSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMDE5NjU5OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/validation/SampleDataModelValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMjo0ODowOVrOIHDrsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNjoyMTo1N1rOIH9mLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI3MTI4MA==", "bodyText": "Maybe when the type is null, and is the generic of the SampleDataProvider, we should add an error that states that the SampleDataProviderGenerics must be explicit.", "url": "https://github.com/mulesoft/mule/pull/9859#discussion_r544271280", "createdAt": "2020-12-16T12:48:09Z", "author": {"login": "ndinu"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/validation/SampleDataModelValidator.java", "diffHunk": "@@ -144,6 +157,38 @@ private void validateResolver(ConnectableComponentModel model,\n     }\n   }\n \n+  private void validateGenerics(ConnectableComponentModel model, ProblemsReporter problemsReporter,\n+                                Class<? extends SampleDataProvider> providerClass) {\n+    String providerGenerics = asGenericSignature(getInterfaceGenerics(providerClass, SampleDataProvider.class));\n+    String outputGenerics = asGenericSignature(getOutputTypes(model, providerClass.getClassLoader()));\n+\n+    if (!Objects.equals(providerGenerics, outputGenerics)) {\n+      problemsReporter.addError(new Problem(model, format(\n+                                                          \"SampleDataProvider [%s] was expecting to define '%s' generics signature but '%s' was found instead\",\n+                                                          providerClass.getName(), outputGenerics, providerGenerics)));\n+    }\n+  }\n+\n+  private List<Type> getOutputTypes(ConnectableComponentModel model, ClassLoader classLoader) {\n+    return asList(JavaTypeUtils.getType(model.getOutput().getType(), classLoader),\n+                  JavaTypeUtils.getType(model.getOutputAttributes().getType(), classLoader));\n+  }\n+\n+  private String asGenericSignature(List<Type> types) {\n+    return \"<\" + types.stream()\n+        .map(this::asString)\n+        .collect(joining(\",\")) + \">\";\n+  }\n+\n+  private String asString(Type type) {\n+    if (type instanceof ParameterizedTypeImpl) {\n+      ParameterizedTypeImpl parameterizedType = (ParameterizedTypeImpl) type;\n+      return parameterizedType.getRawType().getName() + asGenericSignature(asList(parameterizedType.getActualTypeArguments()));\n+    } else {\n+      return type != null ? type.getTypeName() : Object.class.getName();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32865af933d5fc68b21610cf1e77205403400331"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTIyMDE0Mw==", "bodyText": "This is for cases in which one of the provider's generic types is a Map or some other parameterized type where we cannot take it upon ourselves to demand proper use of those clases", "url": "https://github.com/mulesoft/mule/pull/9859#discussion_r545220143", "createdAt": "2020-12-17T16:21:57Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/validation/SampleDataModelValidator.java", "diffHunk": "@@ -144,6 +157,38 @@ private void validateResolver(ConnectableComponentModel model,\n     }\n   }\n \n+  private void validateGenerics(ConnectableComponentModel model, ProblemsReporter problemsReporter,\n+                                Class<? extends SampleDataProvider> providerClass) {\n+    String providerGenerics = asGenericSignature(getInterfaceGenerics(providerClass, SampleDataProvider.class));\n+    String outputGenerics = asGenericSignature(getOutputTypes(model, providerClass.getClassLoader()));\n+\n+    if (!Objects.equals(providerGenerics, outputGenerics)) {\n+      problemsReporter.addError(new Problem(model, format(\n+                                                          \"SampleDataProvider [%s] was expecting to define '%s' generics signature but '%s' was found instead\",\n+                                                          providerClass.getName(), outputGenerics, providerGenerics)));\n+    }\n+  }\n+\n+  private List<Type> getOutputTypes(ConnectableComponentModel model, ClassLoader classLoader) {\n+    return asList(JavaTypeUtils.getType(model.getOutput().getType(), classLoader),\n+                  JavaTypeUtils.getType(model.getOutputAttributes().getType(), classLoader));\n+  }\n+\n+  private String asGenericSignature(List<Type> types) {\n+    return \"<\" + types.stream()\n+        .map(this::asString)\n+        .collect(joining(\",\")) + \">\";\n+  }\n+\n+  private String asString(Type type) {\n+    if (type instanceof ParameterizedTypeImpl) {\n+      ParameterizedTypeImpl parameterizedType = (ParameterizedTypeImpl) type;\n+      return parameterizedType.getRawType().getName() + asGenericSignature(asList(parameterizedType.getActualTypeArguments()));\n+    } else {\n+      return type != null ? type.getTypeName() : Object.class.getName();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDI3MTI4MA=="}, "originalCommit": {"oid": "32865af933d5fc68b21610cf1e77205403400331"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4590, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}