{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMjc4MTE1", "number": 9646, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzo1MTo1NFrOEz5pKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzo1MzoyNFrOEz5rtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODU3MjU4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/policy/DefaultPolicyManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzo1MTo1NFrOHraIFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzo1MTo1NFrOHraIFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3ODg3MA==", "bodyText": "receive the unit as param es well", "url": "https://github.com/mulesoft/mule/pull/9646#discussion_r515278870", "createdAt": "2020-10-30T17:51:54Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/policy/DefaultPolicyManager.java", "diffHunk": "@@ -463,6 +463,20 @@ private void disposeStalePolicies() {\n     }\n   }\n \n+  // Testing purposes\n+  void setOuterCachesExpireTime(int timeout) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61d4b2767a24782112b403833678f7214ee2178"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODU3NTA3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/policy/DefaultPolicyManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzo1MjozN1rOHraJhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzo1MjozN1rOHraJhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3OTIzOQ==", "bodyText": "this will throw an NPE if the abject was already collected", "url": "https://github.com/mulesoft/mule/pull/9646#discussion_r515279239", "createdAt": "2020-10-30T17:52:37Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/policy/DefaultPolicyManager.java", "diffHunk": "@@ -476,5 +490,23 @@ public DeferredDisposableWeakReference(DeferredDisposable referent, ReferenceQue\n     public void dispose() {\n       deferredDispose.dispose();\n     }\n+\n+    /* MULE-18929: since outer cache has an expiring time but inner cache doesn't, we are could be creating\n+    * a new weak reference for the same policy. This will make that the activePolicies set will increase\n+    * its size for expired policies, unnecessary. Hence, overriding hashCode and equals methods to avoid having\n+    * more than one weak reference in the set */\n+    @Override\n+    public int hashCode() {\n+      return this.get().hashCode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61d4b2767a24782112b403833678f7214ee2178"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODU3NTMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/policy/DefaultPolicyManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzo1Mjo0MFrOHraJsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzo1Mjo0MFrOHraJsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3OTI4MA==", "bodyText": "this will throw an NPE if the abject was already collected", "url": "https://github.com/mulesoft/mule/pull/9646#discussion_r515279280", "createdAt": "2020-10-30T17:52:40Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/policy/DefaultPolicyManager.java", "diffHunk": "@@ -476,5 +490,23 @@ public DeferredDisposableWeakReference(DeferredDisposable referent, ReferenceQue\n     public void dispose() {\n       deferredDispose.dispose();\n     }\n+\n+    /* MULE-18929: since outer cache has an expiring time but inner cache doesn't, we are could be creating\n+    * a new weak reference for the same policy. This will make that the activePolicies set will increase\n+    * its size for expired policies, unnecessary. Hence, overriding hashCode and equals methods to avoid having\n+    * more than one weak reference in the set */\n+    @Override\n+    public int hashCode() {\n+      return this.get().hashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+      if (!(o instanceof DeferredDisposableWeakReference)) {\n+        return false;\n+      }\n+      return this.get().equals(((DeferredDisposableWeakReference) o).get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61d4b2767a24782112b403833678f7214ee2178"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODU3OTExOnYy", "diffSide": "RIGHT", "path": "core-tests/src/test/java/org/mule/runtime/core/internal/policy/DefaultPolicyManagerTestCase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzo1MzoyNFrOHraMSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxODoxMjoyM1rOHra7oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3OTk0NA==", "bodyText": "should be same instance r just equals? make it explicit in the test", "url": "https://github.com/mulesoft/mule/pull/9646#discussion_r515279944", "createdAt": "2020-10-30T17:53:24Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/policy/DefaultPolicyManagerTestCase.java", "diffHunk": "@@ -440,6 +442,35 @@ public void cachesEvictedWhileLookingForPolicies() throws InterruptedException {\n     assertThat(policy2, instanceOf(NoSourcePolicy.class));\n   }\n \n+  @Test\n+  @Issue(\"MULE-18929\")\n+  public void cachesEvictedDoesntIncreaseActivePoliciesCount() throws InterruptedException {\n+    final Policy policy = mock(Policy.class, RETURNS_DEEP_STUBS);\n+    when(policyProvider.isSourcePoliciesAvailable()).thenReturn(true);\n+    when(policyProvider.findSourceParameterizedPolicies(any())).thenReturn(asList(policy));\n+    policiesChangeCallbackCaptor.getValue().run();\n+\n+    policyManager.setOuterCachesExpireTime(1);\n+\n+    InternalEvent event = mock(InternalEvent.class);\n+    SourcePolicyContext ctx = mock(SourcePolicyContext.class);\n+    when(event.getSourcePolicyContext()).thenReturn((EventInternalContext) ctx);\n+    when(ctx.getPointcutParameters()).thenReturn(mock(PolicyPointcutParameters.class));\n+\n+    when(policyProvider.findSourceParameterizedPolicies(any())).thenReturn(asList(policy));\n+\n+    final SourcePolicy policy1 = policyManager.createSourcePolicyInstance(flow1Component, event, ePub -> ePub,\n+                                                                          mock(MessageSourceResponseParametersProcessor.class));\n+\n+    sleep(1500);\n+\n+    final SourcePolicy policy2 = policyManager.createSourcePolicyInstance(flow1Component, event, ePub -> ePub,\n+                                                                          mock(MessageSourceResponseParametersProcessor.class));\n+\n+    assertThat(policy1, is(policy2));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61d4b2767a24782112b403833678f7214ee2178"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI5MjA2NQ==", "bodyText": "Should be the same instance (which is what's creating this issue, actually)", "url": "https://github.com/mulesoft/mule/pull/9646#discussion_r515292065", "createdAt": "2020-10-30T18:12:23Z", "author": {"login": "mbuchwald"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/policy/DefaultPolicyManagerTestCase.java", "diffHunk": "@@ -440,6 +442,35 @@ public void cachesEvictedWhileLookingForPolicies() throws InterruptedException {\n     assertThat(policy2, instanceOf(NoSourcePolicy.class));\n   }\n \n+  @Test\n+  @Issue(\"MULE-18929\")\n+  public void cachesEvictedDoesntIncreaseActivePoliciesCount() throws InterruptedException {\n+    final Policy policy = mock(Policy.class, RETURNS_DEEP_STUBS);\n+    when(policyProvider.isSourcePoliciesAvailable()).thenReturn(true);\n+    when(policyProvider.findSourceParameterizedPolicies(any())).thenReturn(asList(policy));\n+    policiesChangeCallbackCaptor.getValue().run();\n+\n+    policyManager.setOuterCachesExpireTime(1);\n+\n+    InternalEvent event = mock(InternalEvent.class);\n+    SourcePolicyContext ctx = mock(SourcePolicyContext.class);\n+    when(event.getSourcePolicyContext()).thenReturn((EventInternalContext) ctx);\n+    when(ctx.getPointcutParameters()).thenReturn(mock(PolicyPointcutParameters.class));\n+\n+    when(policyProvider.findSourceParameterizedPolicies(any())).thenReturn(asList(policy));\n+\n+    final SourcePolicy policy1 = policyManager.createSourcePolicyInstance(flow1Component, event, ePub -> ePub,\n+                                                                          mock(MessageSourceResponseParametersProcessor.class));\n+\n+    sleep(1500);\n+\n+    final SourcePolicy policy2 = policyManager.createSourcePolicyInstance(flow1Component, event, ePub -> ePub,\n+                                                                          mock(MessageSourceResponseParametersProcessor.class));\n+\n+    assertThat(policy1, is(policy2));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI3OTk0NA=="}, "originalCommit": {"oid": "b61d4b2767a24782112b403833678f7214ee2178"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4657, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}