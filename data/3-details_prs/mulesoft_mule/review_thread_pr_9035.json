{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2MzExMDMz", "number": 9035, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNzoyOTo1MlrOES6jAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTozMDo1MlrOETTxKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MjY5MDU2OnYy", "diffSide": "RIGHT", "path": "modules/container/src/main/java/org/mule/runtime/container/internal/ContainerClassLoaderFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNzoyOTo1MlrOG4XElA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNzoyOTo1MlrOG4XElA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc1MTQ0NA==", "bodyText": "Usage of Optional is overkill here. Just return the policy to be used", "url": "https://github.com/mulesoft/mule/pull/9035#discussion_r461751444", "createdAt": "2020-07-28T17:29:52Z", "author": {"login": "marianogonzalez"}, "path": "modules/container/src/main/java/org/mule/runtime/container/internal/ContainerClassLoaderFactory.java", "diffHunk": "@@ -174,16 +179,31 @@ protected ArtifactClassLoader createArtifactClassLoader(final ClassLoader parent\n     final Map<String, LookupStrategy> result = new HashMap<>();\n     for (MuleModule muleModule : modules) {\n       for (String exportedPackage : muleModule.getExportedPackages()) {\n-        // Let artifacts extend non \"java.\" JRE packages\n-        result.put(exportedPackage, ALLOW_JRE_EXTENSION && stream(JRE_EXTENDABLE_PACKAGES).anyMatch(exportedPackage::startsWith)\n-            ? PARENT_FIRST\n-            : containerOnlyLookupStrategy);\n+        result.put(exportedPackage, getSpecialLookupStrategy(exportedPackage).orElse(containerOnlyLookupStrategy));\n       }\n     }\n \n     return result;\n   }\n \n+  /**\n+   * Returns an {@link Optional} with the {@link LookupStrategy} if the one to use for the exportedPackage is other than\n+   * a {@link ContainerOnlyLookupStrategy}\n+   *\n+   * @param exportedPackage name of the package\n+   * @return\n+   */\n+  private Optional<LookupStrategy> getSpecialLookupStrategy(String exportedPackage) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc53ade83ac1359006c36a9d0c41b79e72521ae"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjgwODAyOnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/classloading-extension/src/main/java/org/mule/sdk/api/runtime/connectivity/ReconnectionCallback.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNToyNzozOVrOG496vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo0Nzo1NFrOG5DbZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM4NzkwMA==", "bodyText": "how is this related tho this pr?", "url": "https://github.com/mulesoft/mule/pull/9035#discussion_r462387900", "createdAt": "2020-07-29T15:27:39Z", "author": {"login": "elrodro83"}, "path": "tests/test-extensions/classloading-extension/src/main/java/org/mule/sdk/api/runtime/connectivity/ReconnectionCallback.java", "diffHunk": "@@ -0,0 +1,18 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.sdk.api.runtime.connectivity;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+\n+public interface ReconnectionCallback {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d93e02f9a6c1cf81f680cf3a35d6961c879c6f08"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3ODE4MA==", "bodyText": "This is asociated with a test added in mule-integration-tests to check that this is the class used in the extension classloader.", "url": "https://github.com/mulesoft/mule/pull/9035#discussion_r462478180", "createdAt": "2020-07-29T17:47:54Z", "author": {"login": "ndinu"}, "path": "tests/test-extensions/classloading-extension/src/main/java/org/mule/sdk/api/runtime/connectivity/ReconnectionCallback.java", "diffHunk": "@@ -0,0 +1,18 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.sdk.api.runtime.connectivity;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+\n+public interface ReconnectionCallback {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM4NzkwMA=="}, "originalCommit": {"oid": "d93e02f9a6c1cf81f680cf3a35d6961c879c6f08"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjgwODU2OnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/classloading-extension/src/main/java/org/mule/sdk/api/runtime/connectivity/ReconnectionCallback.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNToyNzo0NlrOG497Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNzo0NzoxM1rOG5DZlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM4Nzk4Mw==", "bodyText": "javadocs", "url": "https://github.com/mulesoft/mule/pull/9035#discussion_r462387983", "createdAt": "2020-07-29T15:27:46Z", "author": {"login": "elrodro83"}, "path": "tests/test-extensions/classloading-extension/src/main/java/org/mule/sdk/api/runtime/connectivity/ReconnectionCallback.java", "diffHunk": "@@ -0,0 +1,18 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.sdk.api.runtime.connectivity;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+\n+public interface ReconnectionCallback {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d93e02f9a6c1cf81f680cf3a35d6961c879c6f08"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjQ3NzcxOQ==", "bodyText": "This is just a test class that colides with one that the runtime has whose package begins with org.mule.sdk.api.", "url": "https://github.com/mulesoft/mule/pull/9035#discussion_r462477719", "createdAt": "2020-07-29T17:47:13Z", "author": {"login": "ndinu"}, "path": "tests/test-extensions/classloading-extension/src/main/java/org/mule/sdk/api/runtime/connectivity/ReconnectionCallback.java", "diffHunk": "@@ -0,0 +1,18 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.sdk.api.runtime.connectivity;\n+\n+import org.mule.runtime.api.connection.ConnectionException;\n+\n+public interface ReconnectionCallback {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM4Nzk4Mw=="}, "originalCommit": {"oid": "d93e02f9a6c1cf81f680cf3a35d6961c879c6f08"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjgwOTU5OnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/classloading-extension/src/main/java/org/mule/test/classloading/CLOperations.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNToyODowMFrOG497wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNToyODowMFrOG497wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM4ODE2MA==", "bodyText": "static imports", "url": "https://github.com/mulesoft/mule/pull/9035#discussion_r462388160", "createdAt": "2020-07-29T15:28:00Z", "author": {"login": "elrodro83"}, "path": "tests/test-extensions/classloading-extension/src/main/java/org/mule/test/classloading/CLOperations.java", "diffHunk": "@@ -6,9 +6,25 @@\n  */\n package org.mule.test.classloading;\n \n+import static java.util.stream.Collectors.toList;\n+import static org.mule.runtime.api.i18n.I18nMessageFactory.createStaticMessage;\n+\n+import org.mule.runtime.api.exception.MuleRuntimeException;\n import org.mule.runtime.extension.api.annotation.param.Connection;\n \n+import java.util.Arrays;\n+import java.util.List;\n+\n public class CLOperations {\n \n   public void someOperation(@Connection String connection) {}\n+\n+  public List<String> getMethods(String clazzName) {\n+    try {\n+      return Arrays.stream(Thread.currentThread().getContextClassLoader().loadClass(clazzName).getMethods())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d93e02f9a6c1cf81f680cf3a35d6961c879c6f08"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NjgyMjgwOnYy", "diffSide": "RIGHT", "path": "modules/container/src/main/java/org/mule/runtime/container/internal/ContainerClassLoaderFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTozMDo1MlrOG4-ELA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNTozMDo1MlrOG4-ELA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM5MDMxNg==", "bodyText": "add a comment explaining quickly why this is needed.", "url": "https://github.com/mulesoft/mule/pull/9035#discussion_r462390316", "createdAt": "2020-07-29T15:30:52Z", "author": {"login": "elrodro83"}, "path": "modules/container/src/main/java/org/mule/runtime/container/internal/ContainerClassLoaderFactory.java", "diffHunk": "@@ -174,16 +179,32 @@ protected ArtifactClassLoader createArtifactClassLoader(final ClassLoader parent\n     final Map<String, LookupStrategy> result = new HashMap<>();\n     for (MuleModule muleModule : modules) {\n       for (String exportedPackage : muleModule.getExportedPackages()) {\n-        // Let artifacts extend non \"java.\" JRE packages\n-        result.put(exportedPackage, ALLOW_JRE_EXTENSION && stream(JRE_EXTENDABLE_PACKAGES).anyMatch(exportedPackage::startsWith)\n-            ? PARENT_FIRST\n-            : containerOnlyLookupStrategy);\n+        LookupStrategy specialLookupStrategy = getSpecialLookupStrategy(exportedPackage);\n+        result.put(exportedPackage, specialLookupStrategy == null ? containerOnlyLookupStrategy : specialLookupStrategy);\n       }\n     }\n \n     return result;\n   }\n \n+  /**\n+   * Returns  the {@link LookupStrategy} if the one to use for the exportedPackage is other than\n+   * a {@link ContainerOnlyLookupStrategy} or null.\n+   *\n+   * @param exportedPackage name of the package\n+   * @return\n+   */\n+  private LookupStrategy getSpecialLookupStrategy(String exportedPackage) {\n+    if (exportedPackage.startsWith(MULE_SDK_API_PACKAGE)) {\n+      return CHILD_FIRST;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d93e02f9a6c1cf81f680cf3a35d6961c879c6f08"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4888, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}