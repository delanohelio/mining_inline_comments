{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2NDU3NTI1", "number": 9110, "title": "Fix/mule 18582 3.x", "bodyText": "MULE-18582: Application stuck in \"starting\" status forever when SFTP configured to \"reconnect forever\" if connection fails on startup\nAdded the possibility of canceling a deployment that for now would basically stop al connector's retry policies from retrying. This method should be called before requesting the deploymentLock to stop an application.", "createdAt": "2020-07-24T19:41:33Z", "url": "https://github.com/mulesoft/mule/pull/9110", "merged": true, "mergeCommit": {"oid": "b468e396e3715f3653a6c8739399d0e32be3d7a6"}, "closed": true, "closedAt": "2020-08-04T13:17:31Z", "author": {"login": "pabloperalta"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3hLXgAH2gAyNDU2NDU3NTI1OjNhZDRjYjIwNmMyOWUyOTI1ZDI0ZGI5Y2M2MmRmMWE4MjdkZTkxYTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7mbZiAFqTQ2MDc5OTQ3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3ad4cb206c29e2925d24db9cc62df1a827de91a1", "author": {"user": {"login": "pabloperalta", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/3ad4cb206c29e2925d24db9cc62df1a827de91a1", "committedDate": "2020-07-22T20:51:12Z", "message": "MULE-18582: Application stuck in \"starting\" status forever when SFTP configured to \"reconnect forever\" if connection fails on startup\n\nAdded the \"cancelStart\" method to deployables in order to stop things like a reconnect forever policy that will never succed. The cancelStart should be called before attempting to stop and artifact so that the \"start\" will be able to finish and release the locks that would prevent the \"stop\" from executing."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cfaed5d37a1cd30e46090455285cac9482b68523", "author": {"user": {"login": "pabloperalta", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/cfaed5d37a1cd30e46090455285cac9482b68523", "committedDate": "2020-07-24T18:26:32Z", "message": "MULE-18582: Application stuck in \"starting\" status forever when SFTP configured to \"reconnect forever\" if connection fails on startup\n\nChanged the javadocs for Artifact.cancelStart"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4377286ca58748c57fcf35d65b912fc298c2f548", "author": {"user": {"login": "pabloperalta", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/4377286ca58748c57fcf35d65b912fc298c2f548", "committedDate": "2020-07-24T19:29:40Z", "message": "MULE-18582: Application stuck in \"starting\" status forever when SFTP configured to \"reconnect forever\" if connection fails on startup\n\nAdded the call to cancelStart in some inner stop methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "282bd22a733a76a8ecee5dc71d8b3903fce3dc4c", "author": {"user": {"login": "pabloperalta", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/282bd22a733a76a8ecee5dc71d8b3903fce3dc4c", "committedDate": "2020-07-27T13:51:16Z", "message": "MULE-18582: Application stuck in \"starting\" status forever when SFTP configured to \"reconnect forever\" if connection fails on startup\n\nChanges to DeploymentServiceTestCase. Removed the use of a static variable and optimized the number of threads in the retryPolicyTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "294035ccbcfb8f3408c40c5bf52b765311c50162", "author": {"user": {"login": "pabloperalta", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/294035ccbcfb8f3408c40c5bf52b765311c50162", "committedDate": "2020-07-27T17:41:42Z", "message": "MULE-18582: Application stuck in \"starting\" status forever when SFTP configured to \"reconnect forever\" if connection fails on startup\n\nChanged the name of the method in the RetryPolicyTemplate interface from cancelStart to stopRetrying"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2ODg4NzM1", "url": "https://github.com/mulesoft/mule/pull/9110#pullrequestreview-456888735", "createdAt": "2020-07-28T18:14:39Z", "commit": {"oid": "294035ccbcfb8f3408c40c5bf52b765311c50162"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoxNDozOVrOG4YtDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxODoyNTo0M1rOG4ZF-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc3ODE5MQ==", "bodyText": "Shouldn't this be also named stopRetrying?", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r461778191", "createdAt": "2020-07-28T18:14:39Z", "author": {"login": "IvanAndresFritzler"}, "path": "core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java", "diffHunk": "@@ -37,6 +38,8 @@\n \n     private MuleContext muleContext;\n \n+    private AtomicBoolean cancelStart = new AtomicBoolean(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "294035ccbcfb8f3408c40c5bf52b765311c50162"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc3ODYxMA==", "bodyText": "same (stopRetrying)", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r461778610", "createdAt": "2020-07-28T18:15:22Z", "author": {"login": "IvanAndresFritzler"}, "path": "core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java", "diffHunk": "@@ -98,7 +101,7 @@ public RetryContext execute(RetryCallback callback, WorkManager workManager) thr\n                     }\n                 }\n             }\n-            while (status.isOk());\n+            while (status.isOk() && !cancelStart.get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "294035ccbcfb8f3408c40c5bf52b765311c50162"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc3ODkyMw==", "bodyText": "same (isStopRetrying)", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r461778923", "createdAt": "2020-07-28T18:15:57Z", "author": {"login": "IvanAndresFritzler"}, "path": "core/src/main/java/org/mule/retry/policies/AbstractPolicyTemplate.java", "diffHunk": "@@ -154,4 +157,15 @@ public boolean isSynchronous()\n     {\n         return true;\n     }\n+\n+    protected AtomicBoolean getCancelStart()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "294035ccbcfb8f3408c40c5bf52b765311c50162"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NDI1OA==", "bodyText": "Better to avoid magic numbers and stick to 2 if no extra logic (or cases) involved", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r461784258", "createdAt": "2020-07-28T18:25:11Z", "author": {"login": "IvanAndresFritzler"}, "path": "modules/launcher/src/test/java/org/mule/module/launcher/domain/DefaultMuleDomainTestCase.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.module.launcher.domain;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mule.api.MuleContext;\n+import org.mule.api.context.MuleContextBuilder;\n+import org.mule.api.context.MuleContextFactory;\n+import org.mule.api.registry.MuleRegistry;\n+import org.mule.api.retry.RetryPolicyTemplate;\n+import org.mule.api.transport.Connector;\n+import org.mule.module.launcher.artifact.ArtifactClassLoader;\n+import org.mule.module.launcher.descriptor.DomainDescriptor;\n+\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mule.module.launcher.domain.Domain.DOMAIN_CONFIG_FILE_LOCATION;\n+\n+public class DefaultMuleDomainTestCase\n+{\n+    private static final MuleContextFactory muleContextFactory = mock(MuleContextFactory.class);\n+    private DomainDescriptor domainDescriptor;\n+    private DomainClassLoaderRepository domainClassLoaderRepository;\n+    private DefaultMuleDomain defaultMuleDomain;\n+    private MuleContext muleContext;\n+    private MuleRegistry muleRegistry;\n+\n+    private URL resource;\n+    private ArtifactClassLoader artifactClassLoader;\n+\n+    @Before\n+    public void setUp() throws Exception\n+    {\n+        domainDescriptor = mock(DomainDescriptor.class);\n+        domainClassLoaderRepository = mock(DomainClassLoaderRepository.class);\n+        artifactClassLoader = mock(ArtifactClassLoader.class);\n+        when(domainClassLoaderRepository.getDomainClassLoader(domainDescriptor)).thenReturn(artifactClassLoader);\n+        when(artifactClassLoader.findLocalResource(anyString())).thenReturn(null);\n+        resource = getClass().getClassLoader().getResource(\"empty-domain-config.xml\").toURI().toURL();\n+        when(domainClassLoaderRepository.getDomainClassLoader(domainDescriptor)).thenReturn(artifactClassLoader);\n+        when(artifactClassLoader.findLocalResource(DOMAIN_CONFIG_FILE_LOCATION)).thenReturn(resource);\n+\n+        muleContext = mock(MuleContext.class);\n+        when(muleContextFactory.createMuleContext(any(List.class), any(MuleContextBuilder.class))).thenReturn(muleContext);\n+\n+        muleRegistry = mock(MuleRegistry.class);\n+        when(muleContext.getRegistry()).thenReturn(muleRegistry);\n+\n+        defaultMuleDomain = new TestMuleDomain(domainClassLoaderRepository, domainDescriptor);\n+        defaultMuleDomain.init();\n+    }\n+\n+    @Test\n+    public void testCancelStartOneConectorWithRetryPolicy()\n+    {\n+        // Given a default mule applicacion with 1 connector that has retryPolicy\n+        List<Connector> connectors = new ArrayList<>();\n+\n+        RetryPolicyTemplate retryPolicyTemplate = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        when(muleRegistry.lookupObjects(Connector.class)).thenReturn(connectors);\n+\n+        // When cancelling start\n+        defaultMuleDomain.cancelStart();\n+\n+        // Connectors's retry policy start is also cancelled\n+        verify(retryPolicyTemplate).stopRetrying();\n+    }\n+\n+    @Test\n+    public void testCancelStartFiveConectorsWithRetryPolicies()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "294035ccbcfb8f3408c40c5bf52b765311c50162"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTc4NDU3MQ==", "bodyText": "Same (stick to two)", "url": "https://github.com/mulesoft/mule/pull/9110#discussion_r461784571", "createdAt": "2020-07-28T18:25:43Z", "author": {"login": "IvanAndresFritzler"}, "path": "modules/launcher/src/test/java/org/mule/module/launcher/domain/DefaultMuleDomainTestCase.java", "diffHunk": "@@ -0,0 +1,183 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.module.launcher.domain;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mule.api.MuleContext;\n+import org.mule.api.context.MuleContextBuilder;\n+import org.mule.api.context.MuleContextFactory;\n+import org.mule.api.registry.MuleRegistry;\n+import org.mule.api.retry.RetryPolicyTemplate;\n+import org.mule.api.transport.Connector;\n+import org.mule.module.launcher.artifact.ArtifactClassLoader;\n+import org.mule.module.launcher.descriptor.DomainDescriptor;\n+\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+import static org.mule.module.launcher.domain.Domain.DOMAIN_CONFIG_FILE_LOCATION;\n+\n+public class DefaultMuleDomainTestCase\n+{\n+    private static final MuleContextFactory muleContextFactory = mock(MuleContextFactory.class);\n+    private DomainDescriptor domainDescriptor;\n+    private DomainClassLoaderRepository domainClassLoaderRepository;\n+    private DefaultMuleDomain defaultMuleDomain;\n+    private MuleContext muleContext;\n+    private MuleRegistry muleRegistry;\n+\n+    private URL resource;\n+    private ArtifactClassLoader artifactClassLoader;\n+\n+    @Before\n+    public void setUp() throws Exception\n+    {\n+        domainDescriptor = mock(DomainDescriptor.class);\n+        domainClassLoaderRepository = mock(DomainClassLoaderRepository.class);\n+        artifactClassLoader = mock(ArtifactClassLoader.class);\n+        when(domainClassLoaderRepository.getDomainClassLoader(domainDescriptor)).thenReturn(artifactClassLoader);\n+        when(artifactClassLoader.findLocalResource(anyString())).thenReturn(null);\n+        resource = getClass().getClassLoader().getResource(\"empty-domain-config.xml\").toURI().toURL();\n+        when(domainClassLoaderRepository.getDomainClassLoader(domainDescriptor)).thenReturn(artifactClassLoader);\n+        when(artifactClassLoader.findLocalResource(DOMAIN_CONFIG_FILE_LOCATION)).thenReturn(resource);\n+\n+        muleContext = mock(MuleContext.class);\n+        when(muleContextFactory.createMuleContext(any(List.class), any(MuleContextBuilder.class))).thenReturn(muleContext);\n+\n+        muleRegistry = mock(MuleRegistry.class);\n+        when(muleContext.getRegistry()).thenReturn(muleRegistry);\n+\n+        defaultMuleDomain = new TestMuleDomain(domainClassLoaderRepository, domainDescriptor);\n+        defaultMuleDomain.init();\n+    }\n+\n+    @Test\n+    public void testCancelStartOneConectorWithRetryPolicy()\n+    {\n+        // Given a default mule applicacion with 1 connector that has retryPolicy\n+        List<Connector> connectors = new ArrayList<>();\n+\n+        RetryPolicyTemplate retryPolicyTemplate = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        when(muleRegistry.lookupObjects(Connector.class)).thenReturn(connectors);\n+\n+        // When cancelling start\n+        defaultMuleDomain.cancelStart();\n+\n+        // Connectors's retry policy start is also cancelled\n+        verify(retryPolicyTemplate).stopRetrying();\n+    }\n+\n+    @Test\n+    public void testCancelStartFiveConectorsWithRetryPolicies()\n+    {\n+        // Given a default mule applicacion with 5 connectors that have retryPolicies\n+        List<Connector> connectors = new ArrayList<>();\n+\n+        RetryPolicyTemplate retryPolicyTemplate1 = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        RetryPolicyTemplate retryPolicyTemplate2 = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        RetryPolicyTemplate retryPolicyTemplate3 = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        RetryPolicyTemplate retryPolicyTemplate4 = addMockConnectorWithMockRetryPolicyToList(connectors);\n+        RetryPolicyTemplate retryPolicyTemplate5 = addMockConnectorWithMockRetryPolicyToList(connectors);\n+\n+        when(muleRegistry.lookupObjects(Connector.class)).thenReturn(connectors);\n+\n+        // When cancelling start\n+        defaultMuleDomain.cancelStart();\n+\n+        // Then connector's retry policies start is also cancelled\n+        verify(retryPolicyTemplate1, times(1)).stopRetrying();\n+        verify(retryPolicyTemplate2, times(1)).stopRetrying();\n+        verify(retryPolicyTemplate3, times(1)).stopRetrying();\n+        verify(retryPolicyTemplate4, times(1)).stopRetrying();\n+        verify(retryPolicyTemplate5, times(1)).stopRetrying();\n+    }\n+\n+    @Test\n+    public void testCancelStartFiveConectorsWithNullRetryPolicies()\n+    {\n+        // Given a default mule applicacion with 5 connectors that have retryPolicies\n+        List<Connector> connectors = new ArrayList<>();\n+\n+        Connector connector1 = mock(Connector.class);\n+        connectors.add(connector1);\n+        Connector connector2 = mock(Connector.class);\n+        connectors.add(connector2);\n+        Connector connector3 = mock(Connector.class);\n+        connectors.add(connector3);\n+        Connector connector4 = mock(Connector.class);\n+        connectors.add(connector4);\n+        Connector connector5 = mock(Connector.class);\n+        connectors.add(connector5);\n+\n+        when(muleRegistry.lookupObjects(Connector.class)).thenReturn(connectors);\n+\n+        // When cancelling start\n+        defaultMuleDomain.cancelStart();\n+\n+        // Then no error occurs\n+\n+    }\n+\n+    @Test\n+    public void testStopCancelStartFiveConectors()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "294035ccbcfb8f3408c40c5bf52b765311c50162"}, "originalPosition": 134}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46712e1b327e277be351c93c55f91ddd41d7a03f", "author": {"user": {"login": "pabloperalta", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/46712e1b327e277be351c93c55f91ddd41d7a03f", "committedDate": "2020-07-28T19:13:43Z", "message": "MULE-18582: Application stuck in \"starting\" status forever when SFTP configured to \"reconnect forever\" if connection fails on startup\n\nFixed the name of the field in the RetryPolicy.\nChanged the tests so that the \"multiple connectors and retry policies\" case is represented by a number of Two instead of Five both in the DefaultMuleApplicationTestCase.java as in the DefaultMuleDomainTestCase\nFixed some spelling errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0026c6c071a52b6013678fc9078d1350e5fe8645", "author": {"user": {"login": "pabloperalta", "name": null}}, "url": "https://github.com/mulesoft/mule/commit/0026c6c071a52b6013678fc9078d1350e5fe8645", "committedDate": "2020-07-29T13:39:38Z", "message": "MULE-18582: Application stuck in \"starting\" status forever when SFTP configured to \"reconnect forever\" if connection fails on startup\n\nChanged method name. getStopRetrying to isStopRetrying"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNzk5NDcz", "url": "https://github.com/mulesoft/mule/pull/9110#pullrequestreview-460799473", "createdAt": "2020-08-04T13:13:56Z", "commit": {"oid": "0026c6c071a52b6013678fc9078d1350e5fe8645"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 589, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}