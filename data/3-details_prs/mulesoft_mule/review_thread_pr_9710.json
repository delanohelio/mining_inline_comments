{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MzEzNDky", "number": 9710, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxOTo1MzozOVrOE32gXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDowNjoyMlrOFGuW0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MDAwMTU4OnYy", "diffSide": "RIGHT", "path": "tests/test-extensions/values-extension/src/main/java/org/mule/test/values/extension/ValuesOperations.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxOTo1MzozOVrOHxcClA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxOTo1MzozOVrOHxcClA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTYwMTY4NA==", "bodyText": "use explicit imports", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r521601684", "createdAt": "2020-11-11T19:53:39Z", "author": {"login": "ndinu"}, "path": "tests/test-extensions/values-extension/src/main/java/org/mule/test/values/extension/ValuesOperations.java", "diffHunk": "@@ -10,15 +10,7 @@\n import org.mule.runtime.extension.api.annotation.param.Optional;\n import org.mule.runtime.extension.api.annotation.param.ParameterGroup;\n import org.mule.runtime.extension.api.annotation.values.OfValues;\n-import org.mule.test.values.extension.resolver.MultiLevelValueProvider;\n-import org.mule.test.values.extension.resolver.SimpleValueProvider;\n-import org.mule.test.values.extension.resolver.WithComplexActingParameter;\n-import org.mule.test.values.extension.resolver.WithConfigValueProvider;\n-import org.mule.test.values.extension.resolver.WithConnectionValueProvider;\n-import org.mule.test.values.extension.resolver.WithErrorValueProvider;\n-import org.mule.test.values.extension.resolver.WithMuleContextValueProvider;\n-import org.mule.test.values.extension.resolver.WithRequiredParameterFromGroupValueProvider;\n-import org.mule.test.values.extension.resolver.WithRequiredParametersValueProvider;\n+import org.mule.test.values.extension.resolver.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6dd37253c5e9ae623a61d94b281bd31b1ab5976"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzQ0Nzk1OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNTo1MzozM1rOH08GbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjozMToyOFrOH2bpog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3MjY4NQ==", "bodyText": "Maybe the parameter default value is useful data? Or do we want to leave it as null?", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r525272685", "createdAt": "2020-11-17T15:53:33Z", "author": {"login": "ndinu"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java", "diffHunk": "@@ -247,11 +254,17 @@ private void enrichParameter(OfValues resolverClass,\n         .orElse(empty());\n   }\n \n-  private List<String> getRequiredParametersAliases(List<ExtensionParameter> parameterDeclarations,\n-                                                    Map<String, String> parameterNames) {\n-    return parameterDeclarations.stream()\n-        .filter(ExtensionParameter::isRequired)\n-        .map(param -> parameterNames.getOrDefault(param.getName(), param.getName()))\n+  private List<ParameterModel> getParametersModel(List<ExtensionParameter> parameterDeclarations,\n+                                                  Map<String, String> parameterNames,\n+                                                  List<ParameterDeclaration> allParameters) {\n+    Map<String, Boolean> paramsInfo = parameterDeclarations.stream()\n+        .collect(toMap(param -> parameterNames.getOrDefault(param.getName(), param.getName()), ExtensionParameter::isRequired));\n+    return allParameters.stream()\n+        .filter(param -> paramsInfo.containsKey(param.getName()))\n+        .map(param -> new ImmutableParameterModel(param.getName(), param.getDescription(), param.getType(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34684fb0aaddf8d6045107be780c4a032b8ebf43"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4NDcxNA==", "bodyText": "What do you have in mind? Inherit the default value from the real parameter? or allow to define a new default value at the ValueProvider?", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r525284714", "createdAt": "2020-11-17T16:08:37Z", "author": {"login": "gabrieldalborgo"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java", "diffHunk": "@@ -247,11 +254,17 @@ private void enrichParameter(OfValues resolverClass,\n         .orElse(empty());\n   }\n \n-  private List<String> getRequiredParametersAliases(List<ExtensionParameter> parameterDeclarations,\n-                                                    Map<String, String> parameterNames) {\n-    return parameterDeclarations.stream()\n-        .filter(ExtensionParameter::isRequired)\n-        .map(param -> parameterNames.getOrDefault(param.getName(), param.getName()))\n+  private List<ParameterModel> getParametersModel(List<ExtensionParameter> parameterDeclarations,\n+                                                  Map<String, String> parameterNames,\n+                                                  List<ParameterDeclaration> allParameters) {\n+    Map<String, Boolean> paramsInfo = parameterDeclarations.stream()\n+        .collect(toMap(param -> parameterNames.getOrDefault(param.getName(), param.getName()), ExtensionParameter::isRequired));\n+    return allParameters.stream()\n+        .filter(param -> paramsInfo.containsKey(param.getName()))\n+        .map(param -> new ImmutableParameterModel(param.getName(), param.getDescription(), param.getType(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3MjY4NQ=="}, "originalCommit": {"oid": "34684fb0aaddf8d6045107be780c4a032b8ebf43"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzODE3OA==", "bodyText": "I had in mind setting the default value of the real parameter, which is the value that will be taken for values resolution is none is provided.", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r526838178", "createdAt": "2020-11-19T12:31:28Z", "author": {"login": "ndinu"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java", "diffHunk": "@@ -247,11 +254,17 @@ private void enrichParameter(OfValues resolverClass,\n         .orElse(empty());\n   }\n \n-  private List<String> getRequiredParametersAliases(List<ExtensionParameter> parameterDeclarations,\n-                                                    Map<String, String> parameterNames) {\n-    return parameterDeclarations.stream()\n-        .filter(ExtensionParameter::isRequired)\n-        .map(param -> parameterNames.getOrDefault(param.getName(), param.getName()))\n+  private List<ParameterModel> getParametersModel(List<ExtensionParameter> parameterDeclarations,\n+                                                  Map<String, String> parameterNames,\n+                                                  List<ParameterDeclaration> allParameters) {\n+    Map<String, Boolean> paramsInfo = parameterDeclarations.stream()\n+        .collect(toMap(param -> parameterNames.getOrDefault(param.getName(), param.getName()), ExtensionParameter::isRequired));\n+    return allParameters.stream()\n+        .filter(param -> paramsInfo.containsKey(param.getName()))\n+        .map(param -> new ImmutableParameterModel(param.getName(), param.getDescription(), param.getType(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3MjY4NQ=="}, "originalCommit": {"oid": "34684fb0aaddf8d6045107be780c4a032b8ebf43"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzQ1NDU5OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNTo1NDo1MlrOH08KlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjowOTowMVrOH082sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3Mzc0OA==", "bodyText": "So, we say it is required when the @ Optional is not present in the VP, right?", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r525273748", "createdAt": "2020-11-17T15:54:52Z", "author": {"login": "ndinu"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java", "diffHunk": "@@ -247,11 +254,17 @@ private void enrichParameter(OfValues resolverClass,\n         .orElse(empty());\n   }\n \n-  private List<String> getRequiredParametersAliases(List<ExtensionParameter> parameterDeclarations,\n-                                                    Map<String, String> parameterNames) {\n-    return parameterDeclarations.stream()\n-        .filter(ExtensionParameter::isRequired)\n-        .map(param -> parameterNames.getOrDefault(param.getName(), param.getName()))\n+  private List<ParameterModel> getParametersModel(List<ExtensionParameter> parameterDeclarations,\n+                                                  Map<String, String> parameterNames,\n+                                                  List<ParameterDeclaration> allParameters) {\n+    Map<String, Boolean> paramsInfo = parameterDeclarations.stream()\n+        .collect(toMap(param -> parameterNames.getOrDefault(param.getName(), param.getName()), ExtensionParameter::isRequired));\n+    return allParameters.stream()\n+        .filter(param -> paramsInfo.containsKey(param.getName()))\n+        .map(param -> new ImmutableParameterModel(param.getName(), param.getDescription(), param.getType(),\n+                                                  param.hasDynamicType(), paramsInfo.get(param.getName()),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34684fb0aaddf8d6045107be780c4a032b8ebf43"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4NTA0Mg==", "bodyText": "Yes, that is right", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r525285042", "createdAt": "2020-11-17T16:09:01Z", "author": {"login": "gabrieldalborgo"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java", "diffHunk": "@@ -247,11 +254,17 @@ private void enrichParameter(OfValues resolverClass,\n         .orElse(empty());\n   }\n \n-  private List<String> getRequiredParametersAliases(List<ExtensionParameter> parameterDeclarations,\n-                                                    Map<String, String> parameterNames) {\n-    return parameterDeclarations.stream()\n-        .filter(ExtensionParameter::isRequired)\n-        .map(param -> parameterNames.getOrDefault(param.getName(), param.getName()))\n+  private List<ParameterModel> getParametersModel(List<ExtensionParameter> parameterDeclarations,\n+                                                  Map<String, String> parameterNames,\n+                                                  List<ParameterDeclaration> allParameters) {\n+    Map<String, Boolean> paramsInfo = parameterDeclarations.stream()\n+        .collect(toMap(param -> parameterNames.getOrDefault(param.getName(), param.getName()), ExtensionParameter::isRequired));\n+    return allParameters.stream()\n+        .filter(param -> paramsInfo.containsKey(param.getName()))\n+        .map(param -> new ImmutableParameterModel(param.getName(), param.getDescription(), param.getType(),\n+                                                  param.hasDynamicType(), paramsInfo.get(param.getName()),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI3Mzc0OA=="}, "originalCommit": {"oid": "34684fb0aaddf8d6045107be780c4a032b8ebf43"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5MzQ5NjM2OnYy", "diffSide": "LEFT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxNjowMzowNVrOH08kng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMjoyNDozOFrOH2bYeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4MDQxNA==", "bodyText": "I think we should add tests that assert the value provider model other than the check of the test extensions extension model.", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r525280414", "createdAt": "2020-11-17T16:03:05Z", "author": {"login": "ndinu"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java", "diffHunk": "@@ -155,9 +162,9 @@ private void enrichParameter(OfValues resolverClass,\n     paramDeclaration.addModelProperty(propertyBuilder.build());\n \n     valueProviderModelConsumer\n-        .accept(new ValueProviderModel(getRequiredParametersAliases(resolverParameters, containerParameterNames),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34684fb0aaddf8d6045107be780c4a032b8ebf43"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4NjAyNA==", "bodyText": "Where would you create those tests?", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r525286024", "createdAt": "2020-11-17T16:10:09Z", "author": {"login": "gabrieldalborgo"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java", "diffHunk": "@@ -155,9 +162,9 @@ private void enrichParameter(OfValues resolverClass,\n     paramDeclaration.addModelProperty(propertyBuilder.build());\n \n     valueProviderModelConsumer\n-        .accept(new ValueProviderModel(getRequiredParametersAliases(resolverParameters, containerParameterNames),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4MDQxNA=="}, "originalCommit": {"oid": "34684fb0aaddf8d6045107be780c4a032b8ebf43"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI5MDkwOQ==", "bodyText": "I would create a test for the enricher where the extension declaration is mocked, and then enriched, then assert the enriched declaration.", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r525290909", "createdAt": "2020-11-17T16:16:30Z", "author": {"login": "ndinu"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java", "diffHunk": "@@ -155,9 +162,9 @@ private void enrichParameter(OfValues resolverClass,\n     paramDeclaration.addModelProperty(propertyBuilder.build());\n \n     valueProviderModelConsumer\n-        .accept(new ValueProviderModel(getRequiredParametersAliases(resolverParameters, containerParameterNames),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4MDQxNA=="}, "originalCommit": {"oid": "34684fb0aaddf8d6045107be780c4a032b8ebf43"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjgzMzc4NA==", "bodyText": "Tests added", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r526833784", "createdAt": "2020-11-19T12:24:38Z", "author": {"login": "gabrieldalborgo"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java", "diffHunk": "@@ -155,9 +162,9 @@ private void enrichParameter(OfValues resolverClass,\n     paramDeclaration.addModelProperty(propertyBuilder.build());\n \n     valueProviderModelConsumer\n-        .accept(new ValueProviderModel(getRequiredParametersAliases(resolverParameters, containerParameterNames),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTI4MDQxNA=="}, "originalCommit": {"oid": "34684fb0aaddf8d6045107be780c4a032b8ebf43"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTMzODk5OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjoyOTozOFrOH6h8SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjoyOTozOFrOH6h8SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEzNTU2MQ==", "bodyText": "repeated dependency", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r531135561", "createdAt": "2020-11-26T16:29:38Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/pom.xml", "diffHunk": "@@ -211,6 +218,24 @@\n             <version>${project.version}</version>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.mule.tests</groupId>\n+            <artifactId>mule-values-extension</artifactId>\n+            <version>4.4.0-SNAPSHOT</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.mule.tests</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a845e52c05f82533bc351a00f37591cf39c80aa1"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTM0NjIxOnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/SampleDataDeclarationEnricher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjozMTo0N1rOH6iAjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjozMTo0N1rOH6iAjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTEzNjY1NA==", "bodyText": "you should use the aliased name here instead of param.getName().", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r531136654", "createdAt": "2020-11-26T16:31:47Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/SampleDataDeclarationEnricher.java", "diffHunk": "@@ -156,11 +161,17 @@ private SampleDataProviderModel createSampleDataModel(SampleData annotation, Exe\n     return empty();\n   }\n \n-  private List<String> getRequiredParametersAliases(List<ExtensionParameter> parameterDeclarations,\n-                                                    Map<String, String> parameterNames) {\n-    return parameterDeclarations.stream()\n-        .filter(ExtensionParameter::isRequired)\n-        .map(param -> parameterNames.getOrDefault(param.getName(), param.getName()))\n+  private List<ParameterModel> getParametersModel(List<ExtensionParameter> parameterDeclarations,\n+                                                  Map<String, String> parameterNames,\n+                                                  List<ParameterDeclaration> allParameters) {\n+    Map<String, Boolean> paramsInfo = parameterDeclarations.stream()\n+        .collect(toMap(param -> parameterNames.getOrDefault(param.getName(), param.getName()), ExtensionParameter::isRequired));\n+    return allParameters.stream()\n+        .filter(param -> paramsInfo.containsKey(param.getName()))\n+        .map(param -> new ImmutableParameterModel(param.getName(), param.getDescription(), param.getType(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a845e52c05f82533bc351a00f37591cf39c80aa1"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMTM3MjcwOnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjo0MDo0M1rOH6iQsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxNjo0MDo0M1rOH6iQsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTE0MDc4NQ==", "bodyText": "same as before. You're loosing the aliased name. Several test cases should have broken because of this. If not, we have a coverage problem you should fix as part of this PR", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r531140785", "createdAt": "2020-11-26T16:40:43Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/enricher/ValueProvidersParameterDeclarationEnricher.java", "diffHunk": "@@ -247,11 +254,19 @@ private void enrichParameter(OfValues resolverClass,\n         .orElse(empty());\n   }\n \n-  private List<String> getRequiredParametersAliases(List<ExtensionParameter> parameterDeclarations,\n-                                                    Map<String, String> parameterNames) {\n-    return parameterDeclarations.stream()\n-        .filter(ExtensionParameter::isRequired)\n-        .map(param -> parameterNames.getOrDefault(param.getName(), param.getName()))\n+  private List<ParameterModel> getParametersModel(List<ExtensionParameter> parameterDeclarations,\n+                                                  Map<String, String> parameterNames,\n+                                                  List<ParameterDeclaration> allParameters) {\n+    Map<String, Boolean> paramsInfo = parameterDeclarations.stream()\n+        .collect(toMap(param -> parameterNames.getOrDefault(param.getName(), param.getName()), ExtensionParameter::isRequired));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a845e52c05f82533bc351a00f37591cf39c80aa1"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1Mjk4OTEzOnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOTowMTowMFrOH9pywQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxOTowMTowMFrOH9pywQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDQwOTkyMQ==", "bodyText": "why do you need both the mule-plugin and jar dependencies?", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r534409921", "createdAt": "2020-12-02T19:01:00Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/pom.xml", "diffHunk": "@@ -169,6 +169,13 @@\n             <classifier>mule-plugin</classifier>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.mule.tests</groupId>\n+            <artifactId>mule-values-extension</artifactId>\n+            <version>4.4.0-SNAPSHOT</version>\n+            <classifier>mule-plugin</classifier>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ace15307a539993d085e88940b50213232cbef7"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTk1MjgzOnYy", "diffSide": "LEFT", "path": "modules/extensions-spring-support/src/test/resources/models/metadata.json", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDowNjoyMlrOIH3L1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxODo1NDozN1rOIIEGkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTExNTA5NA==", "bodyText": "Why was this moved?", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r545115094", "createdAt": "2020-12-17T14:06:22Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-spring-support/src/test/resources/models/metadata.json", "diffHunk": "@@ -38647,7 +38647,6 @@\n       \"format\": \"xml\",\n       \"type\": \"Object\",\n       \"annotations\": {\n-        \"typeId\": \"#root:shiporder\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f2b531b8c480e990f03dbf0b1e86b875aece21d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTMyNjczOA==", "bodyText": "I'm not sure, this happens when the extension model is regenerated. It is something that is already in the master. I will create a ticket to review it.\nAlso, I reverted the changes to this file.", "url": "https://github.com/mulesoft/mule/pull/9710#discussion_r545326738", "createdAt": "2020-12-17T18:54:37Z", "author": {"login": "gabrieldalborgo"}, "path": "modules/extensions-spring-support/src/test/resources/models/metadata.json", "diffHunk": "@@ -38647,7 +38647,6 @@\n       \"format\": \"xml\",\n       \"type\": \"Object\",\n       \"annotations\": {\n-        \"typeId\": \"#root:shiporder\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTExNTA5NA=="}, "originalCommit": {"oid": "3f2b531b8c480e990f03dbf0b1e86b875aece21d"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4617, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}