{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2Mzc2ODg3", "number": 9840, "title": "MULE-18976: Implement Feature Flagging (refactoring)", "bodyText": "Use enum instead of String\nFix CCL in tests", "createdAt": "2020-12-11T00:59:20Z", "url": "https://github.com/mulesoft/mule/pull/9840", "merged": true, "mergeCommit": {"oid": "a9dad974e436a22d925b5392764c37ba0d89bc3b"}, "closed": true, "closedAt": "2020-12-23T15:34:29Z", "author": {"login": "szaffarano"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdoaEf1gFqTU1NjU3MTAxNQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdo_aRJgFqTU1Nzg3NzI5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU2NTcxMDE1", "url": "https://github.com/mulesoft/mule/pull/9840#pullrequestreview-556571015", "createdAt": "2020-12-21T18:11:49Z", "commit": {"oid": "fc0439f81f8183b13ff34578bf6f895e83ac9293"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxODoxMTo1MFrOIJhWYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMVQxODoxNjoyM1rOIJhePA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1NDQ5OA==", "bodyText": "why?", "url": "https://github.com/mulesoft/mule/pull/9840#discussion_r546854498", "createdAt": "2020-12-21T18:11:50Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistryTestCase.java", "diffHunk": "@@ -25,12 +25,10 @@\n import org.mule.tck.size.SmallTest;\n \n @SmallTest\n-@Feature(DEPLOYMENT_CONFIGURATION)\n+@io.qameta.allure.Feature(DEPLOYMENT_CONFIGURATION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc0439f81f8183b13ff34578bf6f895e83ac9293"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1NDkxNA==", "bodyText": "why?", "url": "https://github.com/mulesoft/mule/pull/9840#discussion_r546854914", "createdAt": "2020-12-21T18:12:44Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/config/DefaultFeatureFlaggingServiceTestCase.java", "diffHunk": "@@ -7,79 +7,84 @@\n \n package org.mule.runtime.core.internal.config;\n \n-import io.qameta.allure.Feature;\n import io.qameta.allure.Story;\n-import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n import org.junit.runners.Parameterized.Parameters;\n+import org.mule.runtime.api.config.Feature;\n import org.mule.runtime.api.exception.MuleRuntimeException;\n import org.mule.runtime.core.api.config.FeatureFlaggingService;\n \n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.function.Consumer;\n+import java.util.function.Supplier;\n \n import static java.lang.String.format;\n import static java.util.Arrays.asList;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n+import static org.mule.runtime.api.config.Feature.TESTING_FEATURE;\n import static org.mule.test.allure.AllureConstants.DeploymentConfiguration.DEPLOYMENT_CONFIGURATION;\n import static org.mule.test.allure.AllureConstants.DeploymentConfiguration.FeatureFlaggingStory.FEATURE_FLAGGING;\n \n @RunWith(Parameterized.class)\n-@Feature(DEPLOYMENT_CONFIGURATION)\n+@io.qameta.allure.Feature(DEPLOYMENT_CONFIGURATION)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc0439f81f8183b13ff34578bf6f895e83ac9293"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1NTUxMg==", "bodyText": "rename to something more meaningful", "url": "https://github.com/mulesoft/mule/pull/9840#discussion_r546855512", "createdAt": "2020-12-21T18:14:00Z", "author": {"login": "elrodro83"}, "path": "core-tests/src/test/java/org/mule/runtime/core/internal/config/DefaultFeatureFlaggingServiceTestCase.java", "diffHunk": "@@ -7,79 +7,84 @@\n \n package org.mule.runtime.core.internal.config;\n \n-import io.qameta.allure.Feature;\n import io.qameta.allure.Story;\n-import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.rules.ExpectedException;\n import org.junit.runner.RunWith;\n import org.junit.runners.Parameterized;\n import org.junit.runners.Parameterized.Parameters;\n+import org.mule.runtime.api.config.Feature;\n import org.mule.runtime.api.exception.MuleRuntimeException;\n import org.mule.runtime.core.api.config.FeatureFlaggingService;\n \n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.function.Consumer;\n+import java.util.function.Supplier;\n \n import static java.lang.String.format;\n import static java.util.Arrays.asList;\n import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.is;\n+import static org.mule.runtime.api.config.Feature.TESTING_FEATURE;\n import static org.mule.test.allure.AllureConstants.DeploymentConfiguration.DEPLOYMENT_CONFIGURATION;\n import static org.mule.test.allure.AllureConstants.DeploymentConfiguration.FeatureFlaggingStory.FEATURE_FLAGGING;\n \n @RunWith(Parameterized.class)\n-@Feature(DEPLOYMENT_CONFIGURATION)\n+@io.qameta.allure.Feature(DEPLOYMENT_CONFIGURATION)\n @Story(FEATURE_FLAGGING)\n public class DefaultFeatureFlaggingServiceTestCase {\n \n-  private static final String FEATURE_ENABLED = \"FEATURE A\";\n-  private static final String FEATURE_DISABLED = \"FEATURE B\";\n-  private static final String FEATURE_INVALID = \"FEATURE INVALID\";\n+  private final FeatureFlaggingService featureFlaggingService;\n \n-  private FeatureFlaggingService featureFlaggingService;\n-\n-  private final String featureName;\n+  private final Feature feature;\n   private final boolean enabled;\n \n   @Rule\n   public ExpectedException expectedException = ExpectedException.none();\n \n-  @Before\n-  public void setUp() {\n-    Map<String, Boolean> features = new HashMap<>();\n-    features.put(FEATURE_ENABLED, true);\n-    features.put(FEATURE_DISABLED, false);\n-\n-    featureFlaggingService = new DefaultFeatureFlaggingService(features);\n-  }\n-\n-  @Parameters(name = \"Feature \\\"{0}\\\" should be {1}\")\n+  @Parameters(name = \"Feature \\\"{1}\\\" should be {2}\")\n   public static List<Object[]> parameters() {\n     return asList(\n-                  new Object[] {FEATURE_DISABLED, false, null},\n-                  new Object[] {FEATURE_ENABLED, true, null},\n-                  new Object[] {FEATURE_INVALID, false, (Consumer<ExpectedException>) (e -> {\n+                  new Object[] {getSetUp(TESTING_FEATURE, false), TESTING_FEATURE, false, null},\n+                  new Object[] {getSetUp(TESTING_FEATURE, true), TESTING_FEATURE, true, null},\n+                  new Object[] {getSetUp(), TESTING_FEATURE, false, (Consumer<ExpectedException>) (e -> {\n                     e.expect(MuleRuntimeException.class);\n-                    e.expectMessage(format(\"Feature %s not registered\", FEATURE_INVALID));\n+                    e.expectMessage(format(\"Feature %s not registered\", TESTING_FEATURE.name()));\n                   })});\n \n   }\n \n-  public DefaultFeatureFlaggingServiceTestCase(String featureName, boolean enabled,\n+  public DefaultFeatureFlaggingServiceTestCase(Supplier<Map<Feature, Boolean>> setUp, Feature feature, boolean enabled,\n                                                Consumer<ExpectedException> configureExpected) {\n-    this.featureName = featureName;\n+\n+    this.feature = feature;\n     this.enabled = enabled;\n+\n+    featureFlaggingService = new DefaultFeatureFlaggingService(setUp.get());\n     if (configureExpected != null) {\n       configureExpected.accept(expectedException);\n     }\n   }\n \n   @Test\n   public void testCase() {\n-    assertThat(featureFlaggingService.isEnabled(featureName), is(enabled));\n+    assertThat(featureFlaggingService.isEnabled(feature), is(enabled));\n+  }\n+\n+  private static Supplier<Map<Feature, Boolean>> getSetUp(Object... values) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc0439f81f8183b13ff34578bf6f895e83ac9293"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1NjE1MA==", "bodyText": "extract test to constant.\nshouldn't this be an IllegalArgumentException instead of a MuleRuntimeException?", "url": "https://github.com/mulesoft/mule/pull/9840#discussion_r546856150", "createdAt": "2020-12-21T18:15:31Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/api/config/FeatureFlaggingRegistry.java", "diffHunk": "@@ -67,9 +67,9 @@ private FeatureFlaggingRegistry() {}\n    * @param condition This predicate will be evaluated at deployment time. The {@link MuleContext} corresponds to the context that\n    *        is being created for this application.\n    */\n-  public void registerFeature(String feature, Predicate<MuleContext> condition) {\n-    if (isNullOrEmpty(feature)) {\n-      throw new MuleRuntimeException(createStaticMessage(\"Invalid feature name\"));\n+  public void registerFeature(Feature feature, Predicate<MuleContext> condition) {\n+    if (feature == null) {\n+      throw new MuleRuntimeException(createStaticMessage(\"Feature can not be null\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc0439f81f8183b13ff34578bf6f895e83ac9293"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Njg1NjUwOA==", "bodyText": "remove extra line", "url": "https://github.com/mulesoft/mule/pull/9840#discussion_r546856508", "createdAt": "2020-12-21T18:16:23Z", "author": {"login": "elrodro83"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/MuleArtifactContext.java", "diffHunk": "@@ -200,6 +206,17 @@ public MuleArtifactContext(MuleContext muleContext, ConfigResource[] artifactCon\n         new BeanDefinitionFactory(muleContext.getConfiguration().getId(),\n                                   componentBuildingDefinitionRegistryFactory.create(getExtensions()));\n \n+\n+    FeatureFlaggingRegistry ffRegistry = FeatureFlaggingRegistry.getInstance();\n+\n+    FeatureFlaggingService featureFlaggingService = new FeatureFlaggingServiceBuilder()\n+        .context(muleContext)\n+        .configurations(ffRegistry.getFeatureConfigurations())\n+        .build();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc0439f81f8183b13ff34578bf6f895e83ac9293"}, "originalPosition": 58}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "230d823b5e32bab63799be0f11de73f74d23335a", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/230d823b5e32bab63799be0f11de73f74d23335a", "committedDate": "2020-12-22T12:57:15Z", "message": "Finish feature flagging refactoring\n\n - Use enum instead of String\n - Fix CCL in tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bddca16918b8bd56e803e1479ba66db1378eee74", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/bddca16918b8bd56e803e1479ba66db1378eee74", "committedDate": "2020-12-22T15:03:25Z", "message": "MULE-18976: changes because of pr comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc0439f81f8183b13ff34578bf6f895e83ac9293", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/fc0439f81f8183b13ff34578bf6f895e83ac9293", "committedDate": "2020-12-11T00:14:03Z", "message": "Finish feature flagging refactoring\n\n - Use enum instead of String\n - Fix CCL in tests"}, "afterCommit": {"oid": "bddca16918b8bd56e803e1479ba66db1378eee74", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/bddca16918b8bd56e803e1479ba66db1378eee74", "committedDate": "2020-12-22T15:03:25Z", "message": "MULE-18976: changes because of pr comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03b52902c11d927fdb378c6a677cf28ddd0aa3c1", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/03b52902c11d927fdb378c6a677cf28ddd0aa3c1", "committedDate": "2020-12-22T21:23:54Z", "message": "MULE-18976: more changes because of pr comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3ODQ0Mzgy", "url": "https://github.com/mulesoft/mule/pull/9840#pullrequestreview-557844382", "createdAt": "2020-12-23T12:41:16Z", "commit": {"oid": "03b52902c11d927fdb378c6a677cf28ddd0aa3c1"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac1610fb21b82f1d604a2e51c65ca1b2fd37a259", "author": {"user": {"login": "szaffarano", "name": "Sebasti\u00e1n Zaffarano"}}, "url": "https://github.com/mulesoft/mule/commit/ac1610fb21b82f1d604a2e51c65ca1b2fd37a259", "committedDate": "2020-12-23T13:21:49Z", "message": "MULE-18976: more changes because of pr comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3ODc3Mjk5", "url": "https://github.com/mulesoft/mule/pull/9840#pullrequestreview-557877299", "createdAt": "2020-12-23T13:46:55Z", "commit": {"oid": "ac1610fb21b82f1d604a2e51c65ca1b2fd37a259"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1032, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}