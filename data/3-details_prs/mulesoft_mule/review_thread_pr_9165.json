{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMDE3NjAz", "number": 9165, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMToyOTo1MVrOEVX4ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMToyOTo1MVrOEVX4ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwODQ2ODI2OnYy", "diffSide": "RIGHT", "path": "modules/spring-config/src/main/java/org/mule/runtime/config/api/dsl/model/metadata/ComponentBasedIdHelper.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxMToyOTo1MVrOG8FpQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNzowNToyMFrOG8Sv-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2MDIyNw==", "bodyText": "How about Map?", "url": "https://github.com/mulesoft/mule/pull/9165#discussion_r465660227", "createdAt": "2020-08-05T11:29:51Z", "author": {"login": "gsfernandes"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/api/dsl/model/metadata/ComponentBasedIdHelper.java", "diffHunk": "@@ -56,4 +61,50 @@ static String sourceElementNameFromSimpleValue(ComponentAst owner, ComponentPara\n     return elementModel.getRawParameterValue(CONFIG_ATTRIBUTE_NAME);\n   }\n \n+  public static int computeHashFor(ComponentParameterAst componentParameterAst) {\n+    return ParameterVisitorFunctions.computeHashFor(componentParameterAst);\n+  }\n+\n+  private static class ParameterVisitorFunctions {\n+\n+    private static int computeHashFor(ComponentParameterAst parameter) {\n+      return hash(new ParameterVisitorFunctions(parameter).hashBuilder.toString());\n+    }\n+\n+    private StringBuilder hashBuilder = new StringBuilder();\n+    private final Function<String, Void> leftFunction = this::hashForLeft;\n+    private final Function<Object, Void> rightFunction = this::hashForRight;\n+\n+    private ParameterVisitorFunctions(ComponentParameterAst startingParameter) {\n+      startingParameter.getValue().reduce(leftFunction, rightFunction);\n+    }\n+\n+    private Void hashForLeft(String s) {\n+      hashBuilder.append(s);\n+      return null;\n+    }\n+\n+    private Void hashForRight(Object o) {\n+      if (o instanceof ComponentAst) {\n+        final ComponentAst c = (ComponentAst) o;\n+        c.getParameters().stream().sorted(comparing(p -> p.getModel().getName())).forEach(p -> {\n+          hashBuilder.append(p.getModel().getName());\n+          if (p.getModel().getType() instanceof ArrayType) {\n+            hashForList((Collection<ComponentAst>) p.getValue().getRight());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "545bccac50b48c69e1241c6bb53b7e75b07f038f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY4NjY4OA==", "bodyText": "Aren't maps ObjectTypes? It will call the same function again but with the value.", "url": "https://github.com/mulesoft/mule/pull/9165#discussion_r465686688", "createdAt": "2020-08-05T12:22:51Z", "author": {"login": "lucianoRM"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/api/dsl/model/metadata/ComponentBasedIdHelper.java", "diffHunk": "@@ -56,4 +61,50 @@ static String sourceElementNameFromSimpleValue(ComponentAst owner, ComponentPara\n     return elementModel.getRawParameterValue(CONFIG_ATTRIBUTE_NAME);\n   }\n \n+  public static int computeHashFor(ComponentParameterAst componentParameterAst) {\n+    return ParameterVisitorFunctions.computeHashFor(componentParameterAst);\n+  }\n+\n+  private static class ParameterVisitorFunctions {\n+\n+    private static int computeHashFor(ComponentParameterAst parameter) {\n+      return hash(new ParameterVisitorFunctions(parameter).hashBuilder.toString());\n+    }\n+\n+    private StringBuilder hashBuilder = new StringBuilder();\n+    private final Function<String, Void> leftFunction = this::hashForLeft;\n+    private final Function<Object, Void> rightFunction = this::hashForRight;\n+\n+    private ParameterVisitorFunctions(ComponentParameterAst startingParameter) {\n+      startingParameter.getValue().reduce(leftFunction, rightFunction);\n+    }\n+\n+    private Void hashForLeft(String s) {\n+      hashBuilder.append(s);\n+      return null;\n+    }\n+\n+    private Void hashForRight(Object o) {\n+      if (o instanceof ComponentAst) {\n+        final ComponentAst c = (ComponentAst) o;\n+        c.getParameters().stream().sorted(comparing(p -> p.getModel().getName())).forEach(p -> {\n+          hashBuilder.append(p.getModel().getName());\n+          if (p.getModel().getType() instanceof ArrayType) {\n+            hashForList((Collection<ComponentAst>) p.getValue().getRight());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2MDIyNw=="}, "originalCommit": {"oid": "545bccac50b48c69e1241c6bb53b7e75b07f038f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTg3NDkzNw==", "bodyText": "You are right", "url": "https://github.com/mulesoft/mule/pull/9165#discussion_r465874937", "createdAt": "2020-08-05T17:05:20Z", "author": {"login": "gsfernandes"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/api/dsl/model/metadata/ComponentBasedIdHelper.java", "diffHunk": "@@ -56,4 +61,50 @@ static String sourceElementNameFromSimpleValue(ComponentAst owner, ComponentPara\n     return elementModel.getRawParameterValue(CONFIG_ATTRIBUTE_NAME);\n   }\n \n+  public static int computeHashFor(ComponentParameterAst componentParameterAst) {\n+    return ParameterVisitorFunctions.computeHashFor(componentParameterAst);\n+  }\n+\n+  private static class ParameterVisitorFunctions {\n+\n+    private static int computeHashFor(ComponentParameterAst parameter) {\n+      return hash(new ParameterVisitorFunctions(parameter).hashBuilder.toString());\n+    }\n+\n+    private StringBuilder hashBuilder = new StringBuilder();\n+    private final Function<String, Void> leftFunction = this::hashForLeft;\n+    private final Function<Object, Void> rightFunction = this::hashForRight;\n+\n+    private ParameterVisitorFunctions(ComponentParameterAst startingParameter) {\n+      startingParameter.getValue().reduce(leftFunction, rightFunction);\n+    }\n+\n+    private Void hashForLeft(String s) {\n+      hashBuilder.append(s);\n+      return null;\n+    }\n+\n+    private Void hashForRight(Object o) {\n+      if (o instanceof ComponentAst) {\n+        final ComponentAst c = (ComponentAst) o;\n+        c.getParameters().stream().sorted(comparing(p -> p.getModel().getName())).forEach(p -> {\n+          hashBuilder.append(p.getModel().getName());\n+          if (p.getModel().getType() instanceof ArrayType) {\n+            hashForList((Collection<ComponentAst>) p.getValue().getRight());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTY2MDIyNw=="}, "originalCommit": {"oid": "545bccac50b48c69e1241c6bb53b7e75b07f038f"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4780, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}