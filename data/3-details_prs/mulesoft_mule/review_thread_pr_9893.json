{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2MjA4NzMw", "number": 9893, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMTowOTowMVrOFJnwzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMToxMDowMVrOFJnxgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjMyOTc0OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/validation/SampleDataModelValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMTowOTowMVrOIMCDrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNDo0MjozMVrOIMQ0dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ4NzUzNQ==", "bodyText": "Will this always be a ParameterizedType?", "url": "https://github.com/mulesoft/mule/pull/9893#discussion_r549487535", "createdAt": "2020-12-28T21:09:01Z", "author": {"login": "ndinu"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/validation/SampleDataModelValidator.java", "diffHunk": "@@ -181,13 +206,95 @@ private String asGenericSignature(List<Type> types) {\n         .collect(joining(\",\")) + \">\";\n   }\n \n+  private String asGenericSignature(Pair<Type, Type> types) {\n+    return \"<\" + asString(types.getFirst()) + \",\" + asString(types.getSecond()) + \">\";\n+  }\n+\n+  private boolean validateIfPaged(ConnectableComponentModel component,\n+                                  Class<? extends SampleDataProvider> providerClass,\n+                                  Pair<Type, Type> outputGenericTypes,\n+                                  Pair<Type, Type> sampleDataProviderGenericTypes,\n+                                  ProblemsReporter reporter) {\n+    if (!isAssignableFrom(PagingProvider.class, outputGenericTypes.getFirst())) {\n+      return false;\n+    }\n+\n+    final Type pageItemsType = getPagingProviderGenerics(component).getSecond();\n+\n+    Type sampleDataPayloadType = sampleDataProviderGenericTypes.getFirst();\n+\n+    if (!isAssignableFrom(Collection.class, sampleDataPayloadType)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>' but it returns a payload of type '%s' instead\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType),\n+                                                      asString(sampleDataPayloadType))));\n+      return true;\n+    }\n+\n+    List<Type> sampleDataCollectionGeneric = getInterfaceGenerics(sampleDataPayloadType, Collection.class);\n+    if (sampleDataCollectionGeneric.isEmpty() || sampleDataCollectionGeneric.get(0) == null) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>', but an unbounded Collection was found instead. Please provide the proper generic\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType))));\n+      return true;\n+    }\n+\n+    final Type sampleProviderCollectionType = sampleDataCollectionGeneric.get(0);\n+\n+    if (!pageItemsType.equals(sampleProviderCollectionType)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>', but a Collection<%s> was found instead.\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType),\n+                                                      asString(sampleProviderCollectionType))));\n+      return true;\n+    }\n+\n+    String componentAttributesSignature = asString(outputGenericTypes.getSecond());\n+    String providerAttributesSignature = asString(sampleDataProviderGenericTypes.getSecond());\n+\n+    if (!componentAttributesSignature.equals(providerAttributesSignature)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide attributes of type '%s' but it returns attributes of type '%s' instead\",\n+                                                      providerClass.getName(), component.getName(), componentAttributesSignature,\n+                                                      providerAttributesSignature)));\n+      return true;\n+    }\n+\n+    return true;\n+  }\n+\n+  private Pair<Type, Type> getPagingProviderGenerics(ConnectableComponentModel model) {\n+    return model.getModelProperty(ImplementingMethodModelProperty.class)\n+        .map(mp -> {\n+          ParameterizedType type = (ParameterizedType) mp.getMethod().getGenericReturnType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e162c1d8c2526adf89efadea4c5fc17776c4a57"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyOTM5Ng==", "bodyText": "yes. At this point you already now that the type will be a PagingProvider which is parameterized", "url": "https://github.com/mulesoft/mule/pull/9893#discussion_r549729396", "createdAt": "2020-12-29T14:42:31Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/validation/SampleDataModelValidator.java", "diffHunk": "@@ -181,13 +206,95 @@ private String asGenericSignature(List<Type> types) {\n         .collect(joining(\",\")) + \">\";\n   }\n \n+  private String asGenericSignature(Pair<Type, Type> types) {\n+    return \"<\" + asString(types.getFirst()) + \",\" + asString(types.getSecond()) + \">\";\n+  }\n+\n+  private boolean validateIfPaged(ConnectableComponentModel component,\n+                                  Class<? extends SampleDataProvider> providerClass,\n+                                  Pair<Type, Type> outputGenericTypes,\n+                                  Pair<Type, Type> sampleDataProviderGenericTypes,\n+                                  ProblemsReporter reporter) {\n+    if (!isAssignableFrom(PagingProvider.class, outputGenericTypes.getFirst())) {\n+      return false;\n+    }\n+\n+    final Type pageItemsType = getPagingProviderGenerics(component).getSecond();\n+\n+    Type sampleDataPayloadType = sampleDataProviderGenericTypes.getFirst();\n+\n+    if (!isAssignableFrom(Collection.class, sampleDataPayloadType)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>' but it returns a payload of type '%s' instead\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType),\n+                                                      asString(sampleDataPayloadType))));\n+      return true;\n+    }\n+\n+    List<Type> sampleDataCollectionGeneric = getInterfaceGenerics(sampleDataPayloadType, Collection.class);\n+    if (sampleDataCollectionGeneric.isEmpty() || sampleDataCollectionGeneric.get(0) == null) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>', but an unbounded Collection was found instead. Please provide the proper generic\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType))));\n+      return true;\n+    }\n+\n+    final Type sampleProviderCollectionType = sampleDataCollectionGeneric.get(0);\n+\n+    if (!pageItemsType.equals(sampleProviderCollectionType)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>', but a Collection<%s> was found instead.\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType),\n+                                                      asString(sampleProviderCollectionType))));\n+      return true;\n+    }\n+\n+    String componentAttributesSignature = asString(outputGenericTypes.getSecond());\n+    String providerAttributesSignature = asString(sampleDataProviderGenericTypes.getSecond());\n+\n+    if (!componentAttributesSignature.equals(providerAttributesSignature)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide attributes of type '%s' but it returns attributes of type '%s' instead\",\n+                                                      providerClass.getName(), component.getName(), componentAttributesSignature,\n+                                                      providerAttributesSignature)));\n+      return true;\n+    }\n+\n+    return true;\n+  }\n+\n+  private Pair<Type, Type> getPagingProviderGenerics(ConnectableComponentModel model) {\n+    return model.getModelProperty(ImplementingMethodModelProperty.class)\n+        .map(mp -> {\n+          ParameterizedType type = (ParameterizedType) mp.getMethod().getGenericReturnType();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ4NzUzNQ=="}, "originalCommit": {"oid": "4e162c1d8c2526adf89efadea4c5fc17776c4a57"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjMzMTU1OnYy", "diffSide": "RIGHT", "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/validation/SampleDataModelValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMToxMDowMVrOIMCErA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxNDo0Mjo1M1rOIMQ00g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ4Nzc4OA==", "bodyText": "Should we check the size of the array?", "url": "https://github.com/mulesoft/mule/pull/9893#discussion_r549487788", "createdAt": "2020-12-28T21:10:01Z", "author": {"login": "ndinu"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/validation/SampleDataModelValidator.java", "diffHunk": "@@ -181,13 +206,95 @@ private String asGenericSignature(List<Type> types) {\n         .collect(joining(\",\")) + \">\";\n   }\n \n+  private String asGenericSignature(Pair<Type, Type> types) {\n+    return \"<\" + asString(types.getFirst()) + \",\" + asString(types.getSecond()) + \">\";\n+  }\n+\n+  private boolean validateIfPaged(ConnectableComponentModel component,\n+                                  Class<? extends SampleDataProvider> providerClass,\n+                                  Pair<Type, Type> outputGenericTypes,\n+                                  Pair<Type, Type> sampleDataProviderGenericTypes,\n+                                  ProblemsReporter reporter) {\n+    if (!isAssignableFrom(PagingProvider.class, outputGenericTypes.getFirst())) {\n+      return false;\n+    }\n+\n+    final Type pageItemsType = getPagingProviderGenerics(component).getSecond();\n+\n+    Type sampleDataPayloadType = sampleDataProviderGenericTypes.getFirst();\n+\n+    if (!isAssignableFrom(Collection.class, sampleDataPayloadType)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>' but it returns a payload of type '%s' instead\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType),\n+                                                      asString(sampleDataPayloadType))));\n+      return true;\n+    }\n+\n+    List<Type> sampleDataCollectionGeneric = getInterfaceGenerics(sampleDataPayloadType, Collection.class);\n+    if (sampleDataCollectionGeneric.isEmpty() || sampleDataCollectionGeneric.get(0) == null) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>', but an unbounded Collection was found instead. Please provide the proper generic\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType))));\n+      return true;\n+    }\n+\n+    final Type sampleProviderCollectionType = sampleDataCollectionGeneric.get(0);\n+\n+    if (!pageItemsType.equals(sampleProviderCollectionType)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>', but a Collection<%s> was found instead.\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType),\n+                                                      asString(sampleProviderCollectionType))));\n+      return true;\n+    }\n+\n+    String componentAttributesSignature = asString(outputGenericTypes.getSecond());\n+    String providerAttributesSignature = asString(sampleDataProviderGenericTypes.getSecond());\n+\n+    if (!componentAttributesSignature.equals(providerAttributesSignature)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide attributes of type '%s' but it returns attributes of type '%s' instead\",\n+                                                      providerClass.getName(), component.getName(), componentAttributesSignature,\n+                                                      providerAttributesSignature)));\n+      return true;\n+    }\n+\n+    return true;\n+  }\n+\n+  private Pair<Type, Type> getPagingProviderGenerics(ConnectableComponentModel model) {\n+    return model.getModelProperty(ImplementingMethodModelProperty.class)\n+        .map(mp -> {\n+          ParameterizedType type = (ParameterizedType) mp.getMethod().getGenericReturnType();\n+          return new Pair<>(type.getActualTypeArguments()[0], type.getActualTypeArguments()[1]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e162c1d8c2526adf89efadea4c5fc17776c4a57"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcyOTQ5MA==", "bodyText": "you already know this will be a PagingProvider, thus you already know the array will have two positions.", "url": "https://github.com/mulesoft/mule/pull/9893#discussion_r549729490", "createdAt": "2020-12-29T14:42:53Z", "author": {"login": "marianogonzalez"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/loader/validation/SampleDataModelValidator.java", "diffHunk": "@@ -181,13 +206,95 @@ private String asGenericSignature(List<Type> types) {\n         .collect(joining(\",\")) + \">\";\n   }\n \n+  private String asGenericSignature(Pair<Type, Type> types) {\n+    return \"<\" + asString(types.getFirst()) + \",\" + asString(types.getSecond()) + \">\";\n+  }\n+\n+  private boolean validateIfPaged(ConnectableComponentModel component,\n+                                  Class<? extends SampleDataProvider> providerClass,\n+                                  Pair<Type, Type> outputGenericTypes,\n+                                  Pair<Type, Type> sampleDataProviderGenericTypes,\n+                                  ProblemsReporter reporter) {\n+    if (!isAssignableFrom(PagingProvider.class, outputGenericTypes.getFirst())) {\n+      return false;\n+    }\n+\n+    final Type pageItemsType = getPagingProviderGenerics(component).getSecond();\n+\n+    Type sampleDataPayloadType = sampleDataProviderGenericTypes.getFirst();\n+\n+    if (!isAssignableFrom(Collection.class, sampleDataPayloadType)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>' but it returns a payload of type '%s' instead\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType),\n+                                                      asString(sampleDataPayloadType))));\n+      return true;\n+    }\n+\n+    List<Type> sampleDataCollectionGeneric = getInterfaceGenerics(sampleDataPayloadType, Collection.class);\n+    if (sampleDataCollectionGeneric.isEmpty() || sampleDataCollectionGeneric.get(0) == null) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>', but an unbounded Collection was found instead. Please provide the proper generic\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType))));\n+      return true;\n+    }\n+\n+    final Type sampleProviderCollectionType = sampleDataCollectionGeneric.get(0);\n+\n+    if (!pageItemsType.equals(sampleProviderCollectionType)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide a payload of type 'Collection<%s>', but a Collection<%s> was found instead.\",\n+                                                      providerClass.getName(), component.getName(), asString(pageItemsType),\n+                                                      asString(sampleProviderCollectionType))));\n+      return true;\n+    }\n+\n+    String componentAttributesSignature = asString(outputGenericTypes.getSecond());\n+    String providerAttributesSignature = asString(sampleDataProviderGenericTypes.getSecond());\n+\n+    if (!componentAttributesSignature.equals(providerAttributesSignature)) {\n+      reporter.addError(new Problem(component, format(\n+                                                      \"SampleDataProvider [%s] is used on component '%s' which is paged. The SampleDataProvider is thus expected to provide attributes of type '%s' but it returns attributes of type '%s' instead\",\n+                                                      providerClass.getName(), component.getName(), componentAttributesSignature,\n+                                                      providerAttributesSignature)));\n+      return true;\n+    }\n+\n+    return true;\n+  }\n+\n+  private Pair<Type, Type> getPagingProviderGenerics(ConnectableComponentModel model) {\n+    return model.getModelProperty(ImplementingMethodModelProperty.class)\n+        .map(mp -> {\n+          ParameterizedType type = (ParameterizedType) mp.getMethod().getGenericReturnType();\n+          return new Pair<>(type.getActualTypeArguments()[0], type.getActualTypeArguments()[1]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ4Nzc4OA=="}, "originalCommit": {"oid": "4e162c1d8c2526adf89efadea4c5fc17776c4a57"}, "originalPosition": 152}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4540, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}