{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3NTA1MjA2", "number": 9338, "title": "MULE-18655: Decorate source response streams with data flow statistic\u2026", "bodyText": "\u2026s decorator", "createdAt": "2020-09-02T01:27:42Z", "url": "https://github.com/mulesoft/mule/pull/9338", "merged": true, "mergeCommit": {"oid": "df80cafe8bbcab70eccc65cfad3bf17eac937072"}, "closed": true, "closedAt": "2020-09-08T16:06:16Z", "author": {"login": "fsgonz"}, "timelineItems": {"totalCount": 42, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdE8Gc6gFqTQ4MDgyNDE1OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdG40P4AFqTQ4NDIyMjAzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwODI0MTU5", "url": "https://github.com/mulesoft/mule/pull/9338#pullrequestreview-480824159", "createdAt": "2020-09-02T13:34:11Z", "commit": {"oid": "02451804e76d185619211c56b55d16e98ef0ab71"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzozNDoxMVrOHLvXlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxMzozNDoxMVrOHLvXlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjA3MjQ3MQ==", "bodyText": "this case must account PagingProviders rather than iterators? please check with the sdk guys", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r482072471", "createdAt": "2020-09-02T13:34:11Z", "author": {"login": "elrodro83"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/source/DefaultSourceCallback.java", "diffHunk": "@@ -249,14 +252,50 @@ public void handle(Result<T, A> result, SourceCallbackContext context) {\n                                                                                      encodingParam,\n                                                                                      mimeTypeInitParam);\n \n+    T resultValue = result.getOutput();\n+\n+    Result<?, ?> decoratedResult = result;\n+\n+    if (resultValue instanceof InputStream) {\n+      decoratedResult = decorateInputStream(result, context);\n+    } else if (resultValue instanceof Iterator) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02451804e76d185619211c56b55d16e98ef0ab71"}, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2e08bc5fcc8d36e01fd053e06d7461bfd3608f4", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/e2e08bc5fcc8d36e01fd053e06d7461bfd3608f4", "committedDate": "2020-09-02T13:32:42Z", "message": "MULE-18655: Review."}, "afterCommit": {"oid": "8b318b5334045db6cd9ffb19498df179500ebb65", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/8b318b5334045db6cd9ffb19498df179500ebb65", "committedDate": "2020-09-03T17:59:14Z", "message": "MULE-18655: Review."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe027597736a93d45b59a850b22814a3c1288133", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/fe027597736a93d45b59a850b22814a3c1288133", "committedDate": "2020-09-07T13:03:46Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c09a20c20a3d1557bd635d8030d1128390fe6f82", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/c09a20c20a3d1557bd635d8030d1128390fe6f82", "committedDate": "2020-09-07T13:03:46Z", "message": "MULE-18655: Decorate source response streams with data flow statistics decorator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2f6179ebf5e08a68e74defebecc9069c69a3595", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/f2f6179ebf5e08a68e74defebecc9069c69a3595", "committedDate": "2020-09-07T13:03:46Z", "message": "MULE-18655: Review."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25516f1a549f402036eb4dfd98dec772a33eddac", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/25516f1a549f402036eb4dfd98dec772a33eddac", "committedDate": "2020-09-07T13:03:46Z", "message": "MULE-18655: New xsd for marvel.xsd and marvel.json."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4263614651470378b562b346487bca4b37740c43", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/4263614651470378b562b346487bca4b37740c43", "committedDate": "2020-09-07T13:03:46Z", "message": "wip"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c647878097650a873e9d4d2c24f1bb66a4e3cfc5", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/c647878097650a873e9d4d2c24f1bb66a4e3cfc5", "committedDate": "2020-09-07T13:03:46Z", "message": "Refactor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab16727457fa780cfbfe0ee9c3625dd9dfe6baf3", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/ab16727457fa780cfbfe0ee9c3625dd9dfe6baf3", "committedDate": "2020-09-07T13:03:46Z", "message": "revert"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95c77f0909322fb965228380b0dc4f04175b1ffd", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/95c77f0909322fb965228380b0dc4f04175b1ffd", "committedDate": "2020-09-07T13:03:46Z", "message": "propagate cursor provider to source"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "238bdcf754827bc847c8835d1be7d4b673107704", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/238bdcf754827bc847c8835d1be7d4b673107704", "committedDate": "2020-09-07T13:03:46Z", "message": "propagate cursor provider to source"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58d9daef0db151d19ae5b21b9541fb0e96ff201c", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/58d9daef0db151d19ae5b21b9541fb0e96ff201c", "committedDate": "2020-09-07T13:03:46Z", "message": "Review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed50dacca1da6b556b96ac648c2d9388b1350ca7", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/ed50dacca1da6b556b96ac648c2d9388b1350ca7", "committedDate": "2020-09-07T13:03:46Z", "message": "Review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64a644ae12d62a6007bb2cd33adb518b7338c1f8", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/64a644ae12d62a6007bb2cd33adb518b7338c1f8", "committedDate": "2020-09-07T13:03:46Z", "message": "REview"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f5b4c9d1521222d63afd106c081460b353e8ab5", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/8f5b4c9d1521222d63afd106c081460b353e8ab5", "committedDate": "2020-09-07T13:03:46Z", "message": "Move classes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd8c602da26679d722a149bdefc9986b78dfb071", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/bd8c602da26679d722a149bdefc9986b78dfb071", "committedDate": "2020-09-07T13:03:46Z", "message": "Move classes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e01fdd3aa30002f1f78dbf6b9f2c1853dc907d3", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/3e01fdd3aa30002f1f78dbf6b9f2c1853dc907d3", "committedDate": "2020-09-07T13:03:46Z", "message": "resolve cursors back to original settings."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "789621a425f992d260b62fe590d35b5fc4132cfa", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/789621a425f992d260b62fe590d35b5fc4132cfa", "committedDate": "2020-09-04T19:12:14Z", "message": "Move classes."}, "afterCommit": {"oid": "3e01fdd3aa30002f1f78dbf6b9f2c1853dc907d3", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/3e01fdd3aa30002f1f78dbf6b9f2c1853dc907d3", "committedDate": "2020-09-07T13:03:46Z", "message": "resolve cursors back to original settings."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a5fe4d4ba14db9e1efb13df9ca915e0e4a9932f", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/5a5fe4d4ba14db9e1efb13df9ca915e0e4a9932f", "committedDate": "2020-09-07T20:07:39Z", "message": "Decoration of provider."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7025f78676926a79d572b64bfde1cc5ebbe70ab", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/c7025f78676926a79d572b64bfde1cc5ebbe70ab", "committedDate": "2020-09-07T20:11:11Z", "message": "Self review."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b36b7c1b90bbeacf37ef6c2922aedb42d8fb9282", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/b36b7c1b90bbeacf37ef6c2922aedb42d8fb9282", "committedDate": "2020-09-07T20:22:00Z", "message": "Self review."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a98ebd1b81e4b746c079b1c8b55ab0dc4183fd3", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/9a98ebd1b81e4b746c079b1c8b55ab0dc4183fd3", "committedDate": "2020-09-07T20:23:07Z", "message": "Self review."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a54bb398381a415a6fe8ef688d13a14ecc56a2ab", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/a54bb398381a415a6fe8ef688d13a14ecc56a2ab", "committedDate": "2020-09-07T20:39:56Z", "message": "Self review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNzA0MTgz", "url": "https://github.com/mulesoft/mule/pull/9338#pullrequestreview-483704183", "createdAt": "2020-09-07T20:29:21Z", "commit": {"oid": "9a98ebd1b81e4b746c079b1c8b55ab0dc4183fd3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMDoyOToyMVrOHOHQ8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMDo0MTo1MVrOHOHY0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2MTEzOQ==", "bodyText": "why is this case different to the one with InputSream?", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484561139", "createdAt": "2020-09-07T20:29:21Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/api/management/stats/CursorComponentDecoratorFactory.java", "diffHunk": "@@ -67,6 +68,18 @@\n    */\n   InputStream decorateInput(InputStream decorated, String correlationId);\n \n+  /**\n+   * If statistics are enabled, decorates the provided {@link CursorStream}.\n+   * <p>\n+   * Ref: {@link PayloadStatistics#getInputByteCount()}.\n+   *\n+   * @param decorated the {@link CursorStream} to decorate.\n+   * @param correlationId information to be used in the case a detailed report needs to be obtained, allowing to match the\n+   *        measured volume to a specific execution.\n+   * @return the decorated {@link CursorStream}.\n+   */\n+  CursorStream decorateInput(CursorStream decorated, String correlationId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a98ebd1b81e4b746c079b1c8b55ab0dc4183fd3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2MTM2MA==", "bodyText": "this is not used", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484561360", "createdAt": "2020-09-07T20:30:42Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/management/stats/InputDecoratorVisitor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.management.stats;\n+\n+import java.io.InputStream;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.mule.runtime.api.streaming.bytes.CursorStreamProvider;\n+import org.mule.runtime.core.api.management.stats.CursorComponentDecoratorFactory;\n+\n+/**\n+ * Visitor that returns a decorator for input statistics.\n+ * \n+ * @since 4.4, 4.3.1\n+ */\n+public class InputDecoratorVisitor implements Visitor {\n+\n+  private final CursorComponentDecoratorFactory decoratorFactory;\n+  private final String correlationId;\n+  private boolean decorateInputStreams = true;\n+  private boolean decorateIterators = true;\n+  private boolean decorateCollections = true;\n+  private boolean decorateCursorProviders = true;\n+\n+  private InputDecoratorVisitor(CursorComponentDecoratorFactory decoratorFactory,\n+                                String correlationId,\n+                                boolean decorateInputStreams,\n+                                boolean decorateIterators,\n+                                boolean decorateCollections,\n+                                boolean decorateCursorProviders) {\n+    this.decoratorFactory = decoratorFactory;\n+    this.correlationId = correlationId;\n+    this.decorateInputStreams = decorateInputStreams;\n+    this.decorateIterators = decorateIterators;\n+    this.decorateCollections = decorateCollections;\n+    this.decorateCursorProviders = decorateCursorProviders;\n+  }\n+\n+  @Override\n+  public InputStream visitInputStream(VisitableInputStream visitable) {\n+    if (decorateInputStreams) {\n+      return decoratorFactory.decorateInput(visitable, correlationId);\n+    } else {\n+      return visitable.getDelegate();\n+    }\n+  }\n+\n+  @Override\n+  public Iterator visitIterator(VisitableIterator visitable) {\n+    if (decorateIterators) {\n+      return decoratorFactory.decorateInput(visitable.getDelegate(), correlationId);\n+    } else {\n+      return visitable.getDelegate();\n+    }\n+  }\n+\n+  @Override\n+  public Collection visitCollection(VisitableCollection visitable) {\n+    if (decorateCollections) {\n+      return decoratorFactory.decorateInput(visitable.getDelegate(), correlationId);\n+    } else {\n+      return visitable.getDelegate();\n+    }\n+  }\n+\n+  @Override\n+  public List visitList(VisitableList visitableList) {\n+    if (decorateCollections) {\n+      return (List) decoratorFactory.decorateInput(visitableList, correlationId);\n+    }\n+    return visitableList.getDelegate();\n+  }\n+\n+  @Override\n+  public Set visitSet(VisitableSet visitableSet) {\n+    if (decorateCollections) {\n+      return (Set) decoratorFactory.decorateInput(visitableSet, correlationId);\n+    }\n+    return visitableSet.getDelegate();\n+  }\n+\n+\n+  @Override\n+  public CursorStreamProvider visitCursorStreamProvider(VisitableCursorStreamProvider cursorStreamProvider) {\n+    if (decorateCursorProviders) {\n+      return new InputDecoratedCursorStreamProvider(cursorStreamProvider.getDelegate(), decoratorFactory, correlationId);\n+    }\n+\n+    return cursorStreamProvider.getDelegate();\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  public static class Builder {\n+\n+    private boolean decorateCollections = true;\n+    private boolean decorateIterators = true;\n+    private boolean decorateInputStreams = true;\n+    private boolean decorateCursorProviders = true;\n+\n+    private CursorComponentDecoratorFactory factory;\n+    private String correlationId;\n+\n+    private Builder() {}\n+\n+    public Builder decorateCollections(boolean decorateCollections) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a98ebd1b81e4b746c079b1c8b55ab0dc4183fd3"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2MTM2OA==", "bodyText": "this is not used", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484561368", "createdAt": "2020-09-07T20:30:48Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/management/stats/InputDecoratorVisitor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.management.stats;\n+\n+import java.io.InputStream;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.mule.runtime.api.streaming.bytes.CursorStreamProvider;\n+import org.mule.runtime.core.api.management.stats.CursorComponentDecoratorFactory;\n+\n+/**\n+ * Visitor that returns a decorator for input statistics.\n+ * \n+ * @since 4.4, 4.3.1\n+ */\n+public class InputDecoratorVisitor implements Visitor {\n+\n+  private final CursorComponentDecoratorFactory decoratorFactory;\n+  private final String correlationId;\n+  private boolean decorateInputStreams = true;\n+  private boolean decorateIterators = true;\n+  private boolean decorateCollections = true;\n+  private boolean decorateCursorProviders = true;\n+\n+  private InputDecoratorVisitor(CursorComponentDecoratorFactory decoratorFactory,\n+                                String correlationId,\n+                                boolean decorateInputStreams,\n+                                boolean decorateIterators,\n+                                boolean decorateCollections,\n+                                boolean decorateCursorProviders) {\n+    this.decoratorFactory = decoratorFactory;\n+    this.correlationId = correlationId;\n+    this.decorateInputStreams = decorateInputStreams;\n+    this.decorateIterators = decorateIterators;\n+    this.decorateCollections = decorateCollections;\n+    this.decorateCursorProviders = decorateCursorProviders;\n+  }\n+\n+  @Override\n+  public InputStream visitInputStream(VisitableInputStream visitable) {\n+    if (decorateInputStreams) {\n+      return decoratorFactory.decorateInput(visitable, correlationId);\n+    } else {\n+      return visitable.getDelegate();\n+    }\n+  }\n+\n+  @Override\n+  public Iterator visitIterator(VisitableIterator visitable) {\n+    if (decorateIterators) {\n+      return decoratorFactory.decorateInput(visitable.getDelegate(), correlationId);\n+    } else {\n+      return visitable.getDelegate();\n+    }\n+  }\n+\n+  @Override\n+  public Collection visitCollection(VisitableCollection visitable) {\n+    if (decorateCollections) {\n+      return decoratorFactory.decorateInput(visitable.getDelegate(), correlationId);\n+    } else {\n+      return visitable.getDelegate();\n+    }\n+  }\n+\n+  @Override\n+  public List visitList(VisitableList visitableList) {\n+    if (decorateCollections) {\n+      return (List) decoratorFactory.decorateInput(visitableList, correlationId);\n+    }\n+    return visitableList.getDelegate();\n+  }\n+\n+  @Override\n+  public Set visitSet(VisitableSet visitableSet) {\n+    if (decorateCollections) {\n+      return (Set) decoratorFactory.decorateInput(visitableSet, correlationId);\n+    }\n+    return visitableSet.getDelegate();\n+  }\n+\n+\n+  @Override\n+  public CursorStreamProvider visitCursorStreamProvider(VisitableCursorStreamProvider cursorStreamProvider) {\n+    if (decorateCursorProviders) {\n+      return new InputDecoratedCursorStreamProvider(cursorStreamProvider.getDelegate(), decoratorFactory, correlationId);\n+    }\n+\n+    return cursorStreamProvider.getDelegate();\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  public static class Builder {\n+\n+    private boolean decorateCollections = true;\n+    private boolean decorateIterators = true;\n+    private boolean decorateInputStreams = true;\n+    private boolean decorateCursorProviders = true;\n+\n+    private CursorComponentDecoratorFactory factory;\n+    private String correlationId;\n+\n+    private Builder() {}\n+\n+    public Builder decorateCollections(boolean decorateCollections) {\n+      this.decorateCollections = decorateCollections;\n+      return this;\n+    }\n+\n+    public Builder decorateIterators(boolean decorateIterators) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a98ebd1b81e4b746c079b1c8b55ab0dc4183fd3"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2MTM3Nw==", "bodyText": "this is not used", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484561377", "createdAt": "2020-09-07T20:30:50Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/management/stats/InputDecoratorVisitor.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.management.stats;\n+\n+import java.io.InputStream;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.mule.runtime.api.streaming.bytes.CursorStreamProvider;\n+import org.mule.runtime.core.api.management.stats.CursorComponentDecoratorFactory;\n+\n+/**\n+ * Visitor that returns a decorator for input statistics.\n+ * \n+ * @since 4.4, 4.3.1\n+ */\n+public class InputDecoratorVisitor implements Visitor {\n+\n+  private final CursorComponentDecoratorFactory decoratorFactory;\n+  private final String correlationId;\n+  private boolean decorateInputStreams = true;\n+  private boolean decorateIterators = true;\n+  private boolean decorateCollections = true;\n+  private boolean decorateCursorProviders = true;\n+\n+  private InputDecoratorVisitor(CursorComponentDecoratorFactory decoratorFactory,\n+                                String correlationId,\n+                                boolean decorateInputStreams,\n+                                boolean decorateIterators,\n+                                boolean decorateCollections,\n+                                boolean decorateCursorProviders) {\n+    this.decoratorFactory = decoratorFactory;\n+    this.correlationId = correlationId;\n+    this.decorateInputStreams = decorateInputStreams;\n+    this.decorateIterators = decorateIterators;\n+    this.decorateCollections = decorateCollections;\n+    this.decorateCursorProviders = decorateCursorProviders;\n+  }\n+\n+  @Override\n+  public InputStream visitInputStream(VisitableInputStream visitable) {\n+    if (decorateInputStreams) {\n+      return decoratorFactory.decorateInput(visitable, correlationId);\n+    } else {\n+      return visitable.getDelegate();\n+    }\n+  }\n+\n+  @Override\n+  public Iterator visitIterator(VisitableIterator visitable) {\n+    if (decorateIterators) {\n+      return decoratorFactory.decorateInput(visitable.getDelegate(), correlationId);\n+    } else {\n+      return visitable.getDelegate();\n+    }\n+  }\n+\n+  @Override\n+  public Collection visitCollection(VisitableCollection visitable) {\n+    if (decorateCollections) {\n+      return decoratorFactory.decorateInput(visitable.getDelegate(), correlationId);\n+    } else {\n+      return visitable.getDelegate();\n+    }\n+  }\n+\n+  @Override\n+  public List visitList(VisitableList visitableList) {\n+    if (decorateCollections) {\n+      return (List) decoratorFactory.decorateInput(visitableList, correlationId);\n+    }\n+    return visitableList.getDelegate();\n+  }\n+\n+  @Override\n+  public Set visitSet(VisitableSet visitableSet) {\n+    if (decorateCollections) {\n+      return (Set) decoratorFactory.decorateInput(visitableSet, correlationId);\n+    }\n+    return visitableSet.getDelegate();\n+  }\n+\n+\n+  @Override\n+  public CursorStreamProvider visitCursorStreamProvider(VisitableCursorStreamProvider cursorStreamProvider) {\n+    if (decorateCursorProviders) {\n+      return new InputDecoratedCursorStreamProvider(cursorStreamProvider.getDelegate(), decoratorFactory, correlationId);\n+    }\n+\n+    return cursorStreamProvider.getDelegate();\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  public static class Builder {\n+\n+    private boolean decorateCollections = true;\n+    private boolean decorateIterators = true;\n+    private boolean decorateInputStreams = true;\n+    private boolean decorateCursorProviders = true;\n+\n+    private CursorComponentDecoratorFactory factory;\n+    private String correlationId;\n+\n+    private Builder() {}\n+\n+    public Builder decorateCollections(boolean decorateCollections) {\n+      this.decorateCollections = decorateCollections;\n+      return this;\n+    }\n+\n+    public Builder decorateIterators(boolean decorateIterators) {\n+      this.decorateIterators = decorateIterators;\n+      return this;\n+    }\n+\n+    public Builder decorateInputStreams(boolean decorateInputStreams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a98ebd1b81e4b746c079b1c8b55ab0dc4183fd3"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2MTUwMw==", "bodyText": "remove", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484561503", "createdAt": "2020-09-07T20:31:42Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/management/stats/NoOpCursorComponentDecoratorFactory.java", "diffHunk": "@@ -67,4 +68,9 @@ public InputStream decorateOutput(InputStream decorated, String correlationId) {\n   public Iterator<Result> decorateOutputResultIterator(Iterator<Result> decorated, String correlationId) {\n     return decorated;\n   }\n+\n+  @Override\n+  public CursorStream decorateInput(CursorStream decorated, String correlationId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a98ebd1b81e4b746c079b1c8b55ab0dc4183fd3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2MTcwNg==", "bodyText": "this is not used", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484561706", "createdAt": "2020-09-07T20:33:00Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/management/stats/OutputDecoratorVisitor.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.management.stats;\n+\n+import java.io.InputStream;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.mule.runtime.api.streaming.bytes.CursorStreamProvider;\n+import org.mule.runtime.core.api.management.stats.CursorComponentDecoratorFactory;\n+import org.mule.runtime.core.internal.management.stats.InputDecoratorVisitor.Builder;\n+\n+/**\n+ * Visitor that returns a decorator for output statistics.\n+ * \n+ * @since 4.4, 4.3.1\n+ */\n+public class OutputDecoratorVisitor implements Visitor {\n+\n+  private final CursorComponentDecoratorFactory decoratorFactory;\n+  private final String correlationId;\n+  private boolean decorateInputStreams = true;\n+  private boolean decorateIterators = true;\n+  private boolean decorateCollections = true;\n+  private boolean decorateCursorProviders = true;\n+\n+  private OutputDecoratorVisitor(CursorComponentDecoratorFactory decoratorFactory, String correlationId,\n+                                 boolean decorateInputStreams, boolean decorateIterators, boolean decorateCollections,\n+                                 boolean decorateCursorProviders) {\n+    this.decoratorFactory = decoratorFactory;\n+    this.correlationId = correlationId;\n+    this.decorateInputStreams = decorateInputStreams;\n+    this.decorateIterators = decorateIterators;\n+    this.decorateCollections = decorateCollections;\n+    this.decorateCursorProviders = decorateCursorProviders;\n+  }\n+\n+  @Override\n+  public InputStream visitInputStream(VisitableInputStream visitable) {\n+    return decoratorFactory.decorateOutput(visitable.getDelegate(), correlationId);\n+  }\n+\n+  @Override\n+  public Iterator visitIterator(VisitableIterator visitable) {\n+    return decoratorFactory.decorateOutput(visitable.getDelegate(), correlationId);\n+  }\n+\n+  @Override\n+  public Collection visitCollection(VisitableCollection visitable) {\n+    return decoratorFactory.decorateOutputResultCollection(visitable.getDelegate(), correlationId);\n+  }\n+\n+  @Override\n+  public List visitList(VisitableList visitableList) {\n+    return visitableList;\n+  }\n+\n+  @Override\n+  public Set visitSet(VisitableSet visitableSet) {\n+    return visitableSet;\n+  }\n+\n+  @Override\n+  public CursorStreamProvider visitCursorStreamProvider(VisitableCursorStreamProvider visitableCursorStreamProvider) {\n+    return visitableCursorStreamProvider;\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  public static class Builder {\n+\n+    private boolean decorateCollections = true;\n+    private boolean decorateIterators = true;\n+    private boolean decorateInputStreams = true;\n+    private boolean decorateCursorProviders = true;\n+\n+    private CursorComponentDecoratorFactory factory;\n+    private String correlationId;\n+\n+    private Builder() {}\n+\n+    public Builder decorateCollections(boolean decorateCollections) {\n+      this.decorateCollections = decorateCollections;\n+      return this;\n+    }\n+\n+    public Builder decorateIterators(boolean decorateIterators) {\n+      this.decorateIterators = decorateIterators;\n+      return this;\n+    }\n+\n+    public Builder decorateInputStreams(boolean decorateInputStreams) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a98ebd1b81e4b746c079b1c8b55ab0dc4183fd3"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2MTcwOQ==", "bodyText": "this is not used", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484561709", "createdAt": "2020-09-07T20:33:03Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/management/stats/OutputDecoratorVisitor.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.management.stats;\n+\n+import java.io.InputStream;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.mule.runtime.api.streaming.bytes.CursorStreamProvider;\n+import org.mule.runtime.core.api.management.stats.CursorComponentDecoratorFactory;\n+import org.mule.runtime.core.internal.management.stats.InputDecoratorVisitor.Builder;\n+\n+/**\n+ * Visitor that returns a decorator for output statistics.\n+ * \n+ * @since 4.4, 4.3.1\n+ */\n+public class OutputDecoratorVisitor implements Visitor {\n+\n+  private final CursorComponentDecoratorFactory decoratorFactory;\n+  private final String correlationId;\n+  private boolean decorateInputStreams = true;\n+  private boolean decorateIterators = true;\n+  private boolean decorateCollections = true;\n+  private boolean decorateCursorProviders = true;\n+\n+  private OutputDecoratorVisitor(CursorComponentDecoratorFactory decoratorFactory, String correlationId,\n+                                 boolean decorateInputStreams, boolean decorateIterators, boolean decorateCollections,\n+                                 boolean decorateCursorProviders) {\n+    this.decoratorFactory = decoratorFactory;\n+    this.correlationId = correlationId;\n+    this.decorateInputStreams = decorateInputStreams;\n+    this.decorateIterators = decorateIterators;\n+    this.decorateCollections = decorateCollections;\n+    this.decorateCursorProviders = decorateCursorProviders;\n+  }\n+\n+  @Override\n+  public InputStream visitInputStream(VisitableInputStream visitable) {\n+    return decoratorFactory.decorateOutput(visitable.getDelegate(), correlationId);\n+  }\n+\n+  @Override\n+  public Iterator visitIterator(VisitableIterator visitable) {\n+    return decoratorFactory.decorateOutput(visitable.getDelegate(), correlationId);\n+  }\n+\n+  @Override\n+  public Collection visitCollection(VisitableCollection visitable) {\n+    return decoratorFactory.decorateOutputResultCollection(visitable.getDelegate(), correlationId);\n+  }\n+\n+  @Override\n+  public List visitList(VisitableList visitableList) {\n+    return visitableList;\n+  }\n+\n+  @Override\n+  public Set visitSet(VisitableSet visitableSet) {\n+    return visitableSet;\n+  }\n+\n+  @Override\n+  public CursorStreamProvider visitCursorStreamProvider(VisitableCursorStreamProvider visitableCursorStreamProvider) {\n+    return visitableCursorStreamProvider;\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  public static class Builder {\n+\n+    private boolean decorateCollections = true;\n+    private boolean decorateIterators = true;\n+    private boolean decorateInputStreams = true;\n+    private boolean decorateCursorProviders = true;\n+\n+    private CursorComponentDecoratorFactory factory;\n+    private String correlationId;\n+\n+    private Builder() {}\n+\n+    public Builder decorateCollections(boolean decorateCollections) {\n+      this.decorateCollections = decorateCollections;\n+      return this;\n+    }\n+\n+    public Builder decorateIterators(boolean decorateIterators) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a98ebd1b81e4b746c079b1c8b55ab0dc4183fd3"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2MTcxNQ==", "bodyText": "this is not used", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484561715", "createdAt": "2020-09-07T20:33:05Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/management/stats/OutputDecoratorVisitor.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.management.stats;\n+\n+import java.io.InputStream;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.mule.runtime.api.streaming.bytes.CursorStreamProvider;\n+import org.mule.runtime.core.api.management.stats.CursorComponentDecoratorFactory;\n+import org.mule.runtime.core.internal.management.stats.InputDecoratorVisitor.Builder;\n+\n+/**\n+ * Visitor that returns a decorator for output statistics.\n+ * \n+ * @since 4.4, 4.3.1\n+ */\n+public class OutputDecoratorVisitor implements Visitor {\n+\n+  private final CursorComponentDecoratorFactory decoratorFactory;\n+  private final String correlationId;\n+  private boolean decorateInputStreams = true;\n+  private boolean decorateIterators = true;\n+  private boolean decorateCollections = true;\n+  private boolean decorateCursorProviders = true;\n+\n+  private OutputDecoratorVisitor(CursorComponentDecoratorFactory decoratorFactory, String correlationId,\n+                                 boolean decorateInputStreams, boolean decorateIterators, boolean decorateCollections,\n+                                 boolean decorateCursorProviders) {\n+    this.decoratorFactory = decoratorFactory;\n+    this.correlationId = correlationId;\n+    this.decorateInputStreams = decorateInputStreams;\n+    this.decorateIterators = decorateIterators;\n+    this.decorateCollections = decorateCollections;\n+    this.decorateCursorProviders = decorateCursorProviders;\n+  }\n+\n+  @Override\n+  public InputStream visitInputStream(VisitableInputStream visitable) {\n+    return decoratorFactory.decorateOutput(visitable.getDelegate(), correlationId);\n+  }\n+\n+  @Override\n+  public Iterator visitIterator(VisitableIterator visitable) {\n+    return decoratorFactory.decorateOutput(visitable.getDelegate(), correlationId);\n+  }\n+\n+  @Override\n+  public Collection visitCollection(VisitableCollection visitable) {\n+    return decoratorFactory.decorateOutputResultCollection(visitable.getDelegate(), correlationId);\n+  }\n+\n+  @Override\n+  public List visitList(VisitableList visitableList) {\n+    return visitableList;\n+  }\n+\n+  @Override\n+  public Set visitSet(VisitableSet visitableSet) {\n+    return visitableSet;\n+  }\n+\n+  @Override\n+  public CursorStreamProvider visitCursorStreamProvider(VisitableCursorStreamProvider visitableCursorStreamProvider) {\n+    return visitableCursorStreamProvider;\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  public static class Builder {\n+\n+    private boolean decorateCollections = true;\n+    private boolean decorateIterators = true;\n+    private boolean decorateInputStreams = true;\n+    private boolean decorateCursorProviders = true;\n+\n+    private CursorComponentDecoratorFactory factory;\n+    private String correlationId;\n+\n+    private Builder() {}\n+\n+    public Builder decorateCollections(boolean decorateCollections) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a98ebd1b81e4b746c079b1c8b55ab0dc4183fd3"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2MTc4MQ==", "bodyText": "where is this class?", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484561781", "createdAt": "2020-09-07T20:33:30Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/management/stats/PayloadStatisticsCursorComponentDecoratorFactory.java", "diffHunk": "@@ -145,4 +146,13 @@ private Object decorateOutput(Object decorated, String correlationId) {\n     }\n   }\n \n+  @Override\n+  public CursorStream decorateInput(CursorStream decorated, String correlationId) {\n+    if (payloadStatistics.isEnabled()) {\n+      return new PayloadStatisticsCursorStream(decorated, payloadStatistics::addInputByteCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a98ebd1b81e4b746c079b1c8b55ab0dc4183fd3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2MjUzNA==", "bodyText": "put all visitor stuff in its own subpackage", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484562534", "createdAt": "2020-09-07T20:38:01Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/management/stats/VisitableCollection.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.management.stats;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+/**\n+ * A collection that can be visit to be decorated.\n+ *\n+ * @since 4.4, 4.3.1\n+ */\n+public class VisitableCollection implements Visitable<Collection>, Collection {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a98ebd1b81e4b746c079b1c8b55ab0dc4183fd3"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2MjYxOA==", "bodyText": "this may need to implement HasSize", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484562618", "createdAt": "2020-09-07T20:38:42Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/management/stats/VisitableIterator.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.management.stats;\n+\n+import java.util.Iterator;\n+\n+/**\n+ * An iterator that can be visit to decorate.\n+ *\n+ * @since 4.4, 4.3.1\n+ */\n+public class VisitableIterator implements Iterator, Visitable<Iterator> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a98ebd1b81e4b746c079b1c8b55ab0dc4183fd3"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2MjcwMA==", "bodyText": "add generics to signature", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484562700", "createdAt": "2020-09-07T20:39:13Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/management/stats/Visitor.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.management.stats;\n+\n+import java.io.InputStream;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.mule.runtime.api.streaming.bytes.CursorStreamProvider;\n+\n+/**\n+ * Visitor that returns an instance as a result of an operation on the visited element.\n+ */\n+public interface Visitor {\n+\n+  /**\n+   * @param visitable a visitable inputstream\n+   * @return result of the inputstream which has been visited\n+   */\n+  InputStream visitInputStream(VisitableInputStream visitable);\n+\n+  /**\n+   * @param visitable a visitable iterator\n+   * @return result of the iterator which has been visited\n+   */\n+  Iterator visitIterator(VisitableIterator visible);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a98ebd1b81e4b746c079b1c8b55ab0dc4183fd3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2MjcwNQ==", "bodyText": "add generics to signature", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484562705", "createdAt": "2020-09-07T20:39:16Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/management/stats/Visitor.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.management.stats;\n+\n+import java.io.InputStream;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.mule.runtime.api.streaming.bytes.CursorStreamProvider;\n+\n+/**\n+ * Visitor that returns an instance as a result of an operation on the visited element.\n+ */\n+public interface Visitor {\n+\n+  /**\n+   * @param visitable a visitable inputstream\n+   * @return result of the inputstream which has been visited\n+   */\n+  InputStream visitInputStream(VisitableInputStream visitable);\n+\n+  /**\n+   * @param visitable a visitable iterator\n+   * @return result of the iterator which has been visited\n+   */\n+  Iterator visitIterator(VisitableIterator visible);\n+\n+  /**\n+   * @param visitable a visitable collection\n+   * @return result of the collection which has been visited\n+   */\n+  Collection visitCollection(VisitableCollection visitable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a98ebd1b81e4b746c079b1c8b55ab0dc4183fd3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2MjczNQ==", "bodyText": "add generics to signature", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484562735", "createdAt": "2020-09-07T20:39:25Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/management/stats/Visitor.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.management.stats;\n+\n+import java.io.InputStream;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.mule.runtime.api.streaming.bytes.CursorStreamProvider;\n+\n+/**\n+ * Visitor that returns an instance as a result of an operation on the visited element.\n+ */\n+public interface Visitor {\n+\n+  /**\n+   * @param visitable a visitable inputstream\n+   * @return result of the inputstream which has been visited\n+   */\n+  InputStream visitInputStream(VisitableInputStream visitable);\n+\n+  /**\n+   * @param visitable a visitable iterator\n+   * @return result of the iterator which has been visited\n+   */\n+  Iterator visitIterator(VisitableIterator visible);\n+\n+  /**\n+   * @param visitable a visitable collection\n+   * @return result of the collection which has been visited\n+   */\n+  Collection visitCollection(VisitableCollection visitable);\n+\n+  /**\n+   * @param visitable a visitable list\n+   * @return result of the list which has been visited\n+   */\n+  List visitList(VisitableList visitableList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a98ebd1b81e4b746c079b1c8b55ab0dc4183fd3"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2Mjc1NA==", "bodyText": "add generics to signature", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484562754", "createdAt": "2020-09-07T20:39:34Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/management/stats/Visitor.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.management.stats;\n+\n+import java.io.InputStream;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.mule.runtime.api.streaming.bytes.CursorStreamProvider;\n+\n+/**\n+ * Visitor that returns an instance as a result of an operation on the visited element.\n+ */\n+public interface Visitor {\n+\n+  /**\n+   * @param visitable a visitable inputstream\n+   * @return result of the inputstream which has been visited\n+   */\n+  InputStream visitInputStream(VisitableInputStream visitable);\n+\n+  /**\n+   * @param visitable a visitable iterator\n+   * @return result of the iterator which has been visited\n+   */\n+  Iterator visitIterator(VisitableIterator visible);\n+\n+  /**\n+   * @param visitable a visitable collection\n+   * @return result of the collection which has been visited\n+   */\n+  Collection visitCollection(VisitableCollection visitable);\n+\n+  /**\n+   * @param visitable a visitable list\n+   * @return result of the list which has been visited\n+   */\n+  List visitList(VisitableList visitableList);\n+\n+  /**\n+   * @param visitable a visitable set\n+   * @return result of the set which has been visited\n+   */\n+  Set visitSet(VisitableSet visitableSet);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a98ebd1b81e4b746c079b1c8b55ab0dc4183fd3"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2Mjk0OA==", "bodyText": "avoid return for one-line lambdas", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484562948", "createdAt": "2020-09-07T20:40:39Z", "author": {"login": "elrodro83"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/objectbuilder/DefaultObjectBuilder.java", "diffHunk": "@@ -127,27 +128,23 @@ public T build(ValueResolvingContext context) throws MuleException {\n \n     for (Map.Entry<FieldSetter, ValueResolver<Object>> entry : resolvers.entrySet()) {\n       final Object resolvedValue = resolveValue(entry.getValue(), context);\n+      UnaryOperator decorateOperation = v -> {\n+        return visitable(v)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a98ebd1b81e4b746c079b1c8b55ab0dc4183fd3"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2MzE1Mw==", "bodyText": "avoid return for one-line lambdas", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484563153", "createdAt": "2020-09-07T20:41:51Z", "author": {"login": "elrodro83"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/objectbuilder/ParameterGroupObjectBuilder.java", "diffHunk": "@@ -113,15 +115,10 @@ private T doBuild(Predicate<String> hasParameter, Function<String, Object> param\n             .apply(name)), context);\n         Object value = context == null || context.resolveCursors()\n             ? resolveCursor(resolvedValue, isContent ? v -> {\n-              if (v instanceof InputStream) {\n-                return componentDecoratorFactory.decorateInput((InputStream) v, context.getEvent().getCorrelationId());\n-              } else if (v instanceof Collection) {\n-                return componentDecoratorFactory.decorateInput((Collection) v, context.getEvent().getCorrelationId());\n-              } else if (v instanceof Iterator) {\n-                return componentDecoratorFactory.decorateInput((Iterator) v, context.getEvent().getCorrelationId());\n-              } else {\n-                return v;\n-              }\n+              return visitable(v).map(visitable -> visitable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a98ebd1b81e4b746c079b1c8b55ab0dc4183fd3"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNzA2NTA1", "url": "https://github.com/mulesoft/mule/pull/9338#pullrequestreview-483706505", "createdAt": "2020-09-07T20:46:03Z", "commit": {"oid": "a54bb398381a415a6fe8ef688d13a14ecc56a2ab"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMDo0NjowM1rOHOHbUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMDo0Njo1N1rOHOHb8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2Mzc5NQ==", "bodyText": "remove empty line", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484563795", "createdAt": "2020-09-07T20:46:03Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/management/stats/InputDecoratedCursorStreamProvider.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.management.stats;\n+\n+import org.mule.runtime.api.streaming.bytes.CursorStream;\n+import org.mule.runtime.api.streaming.bytes.CursorStreamProvider;\n+import org.mule.runtime.core.api.management.stats.CursorComponentDecoratorFactory;\n+\n+/**\n+ * A cursor stream provider that decorates its streams\n+ *\n+ * @since 4.4, 4.3.1\n+ */\n+public class InputDecoratedCursorStreamProvider implements CursorStreamProvider {\n+\n+  private CursorStreamProvider delegate;\n+  private CursorComponentDecoratorFactory decoratorFactory;\n+  private String correlationId;\n+\n+  public InputDecoratedCursorStreamProvider(CursorStreamProvider delegate, CursorComponentDecoratorFactory decoratorFactory,\n+                                            String correlationId) {\n+    this.delegate = delegate;\n+    this.decoratorFactory = decoratorFactory;\n+    this.correlationId = correlationId;\n+  }\n+\n+  @Override\n+  public CursorStream openCursor() {\n+    return decoratorFactory.decorateInput(delegate.openCursor(), correlationId);\n+  }\n+\n+  @Override\n+  public void close() {\n+    delegate.close();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a54bb398381a415a6fe8ef688d13a14ecc56a2ab"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2Mzc5OQ==", "bodyText": "remove empty line", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484563799", "createdAt": "2020-09-07T20:46:06Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/management/stats/InputDecoratedCursorStreamProvider.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.management.stats;\n+\n+import org.mule.runtime.api.streaming.bytes.CursorStream;\n+import org.mule.runtime.api.streaming.bytes.CursorStreamProvider;\n+import org.mule.runtime.core.api.management.stats.CursorComponentDecoratorFactory;\n+\n+/**\n+ * A cursor stream provider that decorates its streams\n+ *\n+ * @since 4.4, 4.3.1\n+ */\n+public class InputDecoratedCursorStreamProvider implements CursorStreamProvider {\n+\n+  private CursorStreamProvider delegate;\n+  private CursorComponentDecoratorFactory decoratorFactory;\n+  private String correlationId;\n+\n+  public InputDecoratedCursorStreamProvider(CursorStreamProvider delegate, CursorComponentDecoratorFactory decoratorFactory,\n+                                            String correlationId) {\n+    this.delegate = delegate;\n+    this.decoratorFactory = decoratorFactory;\n+    this.correlationId = correlationId;\n+  }\n+\n+  @Override\n+  public CursorStream openCursor() {\n+    return decoratorFactory.decorateInput(delegate.openCursor(), correlationId);\n+  }\n+\n+  @Override\n+  public void close() {\n+    delegate.close();\n+\n+  }\n+\n+  @Override\n+  public void releaseResources() {\n+    delegate.releaseResources();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a54bb398381a415a6fe8ef688d13a14ecc56a2ab"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2Mzg4NA==", "bodyText": "why is this needed intead of using the inputstream decorator?", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484563884", "createdAt": "2020-09-07T20:46:40Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/management/stats/PayloadStatisticsCursorStream.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.management.stats;\n+\n+import java.io.IOException;\n+import java.util.function.LongConsumer;\n+\n+import org.mule.runtime.api.streaming.CursorProvider;\n+import org.mule.runtime.api.streaming.bytes.CursorStream;\n+\n+final class PayloadStatisticsCursorStream extends CursorStream {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a54bb398381a415a6fe8ef688d13a14ecc56a2ab"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2MzkzNw==", "bodyText": "remove empty line", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484563937", "createdAt": "2020-09-07T20:46:53Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/management/stats/VisitableCursorStreamProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.management.stats;\n+\n+import org.mule.runtime.api.streaming.bytes.CursorStream;\n+import org.mule.runtime.api.streaming.bytes.CursorStreamProvider;\n+\n+/**\n+ * A cursor stream provider that can be visit to be decorated\n+ *\n+ * @since 4.4, 4.3.1\n+ */\n+public class VisitableCursorStreamProvider implements Visitable<CursorStreamProvider>, CursorStreamProvider {\n+\n+  private CursorStreamProvider delegate;\n+\n+  public VisitableCursorStreamProvider(CursorStreamProvider delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public CursorStream openCursor() {\n+    return null;\n+  }\n+\n+  @Override\n+  public void close() {\n+    delegate.close();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a54bb398381a415a6fe8ef688d13a14ecc56a2ab"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2Mzk1NA==", "bodyText": "remove empty line", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484563954", "createdAt": "2020-09-07T20:46:57Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/management/stats/VisitableCursorStreamProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.management.stats;\n+\n+import org.mule.runtime.api.streaming.bytes.CursorStream;\n+import org.mule.runtime.api.streaming.bytes.CursorStreamProvider;\n+\n+/**\n+ * A cursor stream provider that can be visit to be decorated\n+ *\n+ * @since 4.4, 4.3.1\n+ */\n+public class VisitableCursorStreamProvider implements Visitable<CursorStreamProvider>, CursorStreamProvider {\n+\n+  private CursorStreamProvider delegate;\n+\n+  public VisitableCursorStreamProvider(CursorStreamProvider delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public CursorStream openCursor() {\n+    return null;\n+  }\n+\n+  @Override\n+  public void close() {\n+    delegate.close();\n+\n+  }\n+\n+  @Override\n+  public void releaseResources() {\n+    delegate.releaseResources();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a54bb398381a415a6fe8ef688d13a14ecc56a2ab"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNzExMDg5", "url": "https://github.com/mulesoft/mule/pull/9338#pullrequestreview-483711089", "createdAt": "2020-09-07T21:19:14Z", "commit": {"oid": "a54bb398381a415a6fe8ef688d13a14ecc56a2ab"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMToxOToxNFrOHOHuuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMToxOToxNFrOHOHuuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2ODc2MQ==", "bodyText": "this should delegate instead of returning null", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484568761", "createdAt": "2020-09-07T21:19:14Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/management/stats/VisitableCursorStreamProvider.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.management.stats;\n+\n+import org.mule.runtime.api.streaming.bytes.CursorStream;\n+import org.mule.runtime.api.streaming.bytes.CursorStreamProvider;\n+\n+/**\n+ * A cursor stream provider that can be visit to be decorated\n+ *\n+ * @since 4.4, 4.3.1\n+ */\n+public class VisitableCursorStreamProvider implements Visitable<CursorStreamProvider>, CursorStreamProvider {\n+\n+  private CursorStreamProvider delegate;\n+\n+  public VisitableCursorStreamProvider(CursorStreamProvider delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public CursorStream openCursor() {\n+    return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a54bb398381a415a6fe8ef688d13a14ecc56a2ab"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2729563eba0c036b13bbae1ea533ee41f477b939", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/2729563eba0c036b13bbae1ea533ee41f477b939", "committedDate": "2020-09-07T21:36:54Z", "message": "Review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf76bb79baa6c4f253bd45e79472105d17e5d99a", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/bf76bb79baa6c4f253bd45e79472105d17e5d99a", "committedDate": "2020-09-07T22:51:20Z", "message": "Review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11efb01245b511495013bad7e25e1da47e65287a", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/11efb01245b511495013bad7e25e1da47e65287a", "committedDate": "2020-09-07T23:01:20Z", "message": "Review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d518d31dd922c4613b275fc6765d32631413136", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/1d518d31dd922c4613b275fc6765d32631413136", "committedDate": "2020-09-07T23:17:56Z", "message": "Review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0ad627d329c54a2e79d8b3eda5ea083c0a03d00", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/b0ad627d329c54a2e79d8b3eda5ea083c0a03d00", "committedDate": "2020-09-07T23:19:57Z", "message": "Formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22e43119e89c00871d07b451df05ede08d7a6e17", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/22e43119e89c00871d07b451df05ede08d7a6e17", "committedDate": "2020-09-08T00:04:57Z", "message": "Self review."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b7f0c7edd0e131dc3efd0223abe65db6331742b", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/9b7f0c7edd0e131dc3efd0223abe65db6331742b", "committedDate": "2020-09-08T00:37:06Z", "message": "Review."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fd0482cfc7b3fa7b3f6a22ca3c43fb80e60465d", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/5fd0482cfc7b3fa7b3f6a22ca3c43fb80e60465d", "committedDate": "2020-09-08T00:51:47Z", "message": "Review."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5af4c7336e2e73f7f434b3840d83e9b75999fa16", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/5af4c7336e2e73f7f434b3840d83e9b75999fa16", "committedDate": "2020-09-08T00:56:33Z", "message": "Self review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MTAyOTY5", "url": "https://github.com/mulesoft/mule/pull/9338#pullrequestreview-484102969", "createdAt": "2020-09-08T12:55:38Z", "commit": {"oid": "5af4c7336e2e73f7f434b3840d83e9b75999fa16"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjo1NTozOFrOHObhZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjo1Nzo0N1rOHObmww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg5MzAyOQ==", "bodyText": "remove extra line", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484893029", "createdAt": "2020-09-08T12:55:38Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/management/stats/visitor/OutputDecoratorVisitor.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.management.stats.visitor;\n+\n+import java.io.InputStream;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.mule.runtime.api.streaming.bytes.CursorStreamProvider;\n+import org.mule.runtime.core.api.management.stats.CursorComponentDecoratorFactory;\n+\n+/**\n+ * Visitor that returns a decorator for output statistics.\n+ * \n+ * @since 4.4, 4.3.1\n+ */\n+public class OutputDecoratorVisitor<T> implements Visitor<T> {\n+\n+  private final CursorComponentDecoratorFactory decoratorFactory;\n+  private final String correlationId;\n+\n+  private OutputDecoratorVisitor(CursorComponentDecoratorFactory decoratorFactory, String correlationId) {\n+    this.decoratorFactory = decoratorFactory;\n+    this.correlationId = correlationId;\n+  }\n+\n+  @Override\n+  public InputStream visitInputStream(VisitableInputStream visitable) {\n+    return decoratorFactory.decorateOutput(visitable.getDelegate(), correlationId);\n+  }\n+\n+  @Override\n+  public Iterator<T> visitIterator(VisitableIterator<T> visitable) {\n+    return decoratorFactory.decorateOutput(visitable.getDelegate(), correlationId);\n+  }\n+\n+  @Override\n+  public Collection<T> visitCollection(VisitableCollection visitable) {\n+    return decoratorFactory.decorateOutputResultCollection(visitable.getDelegate(), correlationId);\n+  }\n+\n+  @Override\n+  public List<T> visitList(VisitableList<T> visitableList) {\n+    return visitableList;\n+  }\n+\n+  @Override\n+  public Set<T> visitSet(VisitableSet<T> visitableSet) {\n+    return visitableSet;\n+  }\n+\n+  @Override\n+  public CursorStreamProvider visitCursorStreamProvider(VisitableCursorStreamProvider visitableCursorStreamProvider) {\n+    return visitableCursorStreamProvider;\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  public static class Builder {\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5af4c7336e2e73f7f434b3840d83e9b75999fa16"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg5MzI1OA==", "bodyText": "remove extra lines", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484893258", "createdAt": "2020-09-08T12:56:01Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/management/stats/visitor/VisitableCollection.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.management.stats.visitor;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+\n+/**\n+ * A collection that can be visit to be decorated.\n+ *\n+ * @since 4.4, 4.3.1\n+ */\n+public class VisitableCollection<T> implements Visitable<Collection<T>>, Collection<T> {\n+\n+  private final Collection<T> delegate;\n+\n+  public VisitableCollection(Collection<T> delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public Collection<T> accept(Visitor visitor) {\n+    return visitor.visitCollection(this);\n+  }\n+\n+  @Override\n+  public int size() {\n+    return delegate.size();\n+  }\n+\n+  @Override\n+  public boolean isEmpty() {\n+    return delegate.isEmpty();\n+  }\n+\n+  @Override\n+  public boolean contains(Object o) {\n+    return delegate.contains(o);\n+  }\n+\n+  @Override\n+  public Iterator<T> iterator() {\n+    return delegate.iterator();\n+  }\n+\n+  @Override\n+  public Object[] toArray() {\n+    return delegate.toArray();\n+  }\n+\n+  @Override\n+  public <T> T[] toArray(T[] a) {\n+    return delegate.toArray(a);\n+  }\n+\n+  @Override\n+  public boolean add(T e) {\n+    return delegate.add(e);\n+  }\n+\n+  @Override\n+  public boolean remove(Object o) {\n+    return delegate.remove(o);\n+  }\n+\n+  @Override\n+  public boolean containsAll(Collection<?> c) {\n+    return delegate.containsAll(c);\n+  }\n+\n+  @Override\n+  public boolean addAll(Collection<? extends T> c) {\n+    return delegate.addAll(c);\n+  }\n+\n+  @Override\n+  public boolean removeAll(Collection<?> c) {\n+    return delegate.removeAll(c);\n+  }\n+\n+  @Override\n+  public boolean retainAll(Collection<?> c) {\n+    return delegate.retainAll(c);\n+  }\n+\n+  @Override\n+  public void clear() {\n+    delegate.clear();\n+  }\n+\n+  @Override\n+  public Collection<T> getDelegate() {\n+    return delegate;\n+  }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5af4c7336e2e73f7f434b3840d83e9b75999fa16"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg5MzcwNw==", "bodyText": "remove extra line", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484893707", "createdAt": "2020-09-08T12:56:44Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/management/stats/visitor/VisitableList.java", "diffHunk": "@@ -0,0 +1,153 @@\n+/*\n+ * Copyright (c) MuleSoft, Inc.  All rights reserved.  http://www.mulesoft.com\n+ * The software in this package is published under the terms of the CPAL v1.0\n+ * license, a copy of which has been included with this distribution in the\n+ * LICENSE.txt file.\n+ */\n+package org.mule.runtime.core.internal.management.stats.visitor;\n+\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.ListIterator;\n+\n+/**\n+ * A list that can be visit to be decorated.\n+ *\n+ * @since 4.4, 4.3.1\n+ */\n+public class VisitableList<T> implements Visitable<List<T>>, List<T> {\n+\n+  private final List<T> delegate;\n+\n+  public VisitableList(List<T> delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public List<T> accept(Visitor visitor) {\n+    return visitor.visitList(this);\n+  }\n+\n+  @Override\n+  public int size() {\n+    return delegate.size();\n+  }\n+\n+  @Override\n+  public boolean isEmpty() {\n+    return delegate.isEmpty();\n+  }\n+\n+  @Override\n+  public boolean contains(Object o) {\n+    return delegate.contains(o);\n+  }\n+\n+  @Override\n+  public Iterator<T> iterator() {\n+    return delegate.iterator();\n+  }\n+\n+  @Override\n+  public Object[] toArray() {\n+    return delegate.toArray();\n+  }\n+\n+  @Override\n+  public <T> T[] toArray(T[] a) {\n+    return delegate.toArray(a);\n+  }\n+\n+  @Override\n+  public boolean add(T e) {\n+    return delegate.add(e);\n+  }\n+\n+  @Override\n+  public boolean remove(Object o) {\n+    return delegate.remove(o);\n+  }\n+\n+  @Override\n+  public boolean containsAll(Collection<?> c) {\n+    return delegate.containsAll(c);\n+  }\n+\n+  @Override\n+  public boolean addAll(Collection<? extends T> c) {\n+    return delegate.addAll(c);\n+  }\n+\n+  @Override\n+  public boolean addAll(int index, Collection<? extends T> c) {\n+    return delegate.addAll(index, c);\n+  }\n+\n+  @Override\n+  public boolean removeAll(Collection<?> c) {\n+    return delegate.removeAll(c);\n+  }\n+\n+  @Override\n+  public boolean retainAll(Collection<?> c) {\n+    return delegate.retainAll(c);\n+  }\n+\n+  @Override\n+  public void clear() {\n+    delegate.clear();\n+  }\n+\n+  @Override\n+  public T get(int index) {\n+    return delegate.get(index);\n+  }\n+\n+  @Override\n+  public T set(int index, T element) {\n+    return delegate.set(index, element);\n+  }\n+\n+  @Override\n+  public void add(int index, T element) {\n+    delegate.add(index, element);\n+  }\n+\n+  @Override\n+  public T remove(int index) {\n+    return delegate.remove(index);\n+  }\n+\n+  @Override\n+  public int indexOf(Object o) {\n+    return delegate.indexOf(o);\n+  }\n+\n+  @Override\n+  public int lastIndexOf(Object o) {\n+    return delegate.lastIndexOf(o);\n+  }\n+\n+  @Override\n+  public ListIterator<T> listIterator() {\n+    return delegate.listIterator();\n+  }\n+\n+  @Override\n+  public ListIterator<T> listIterator(int index) {\n+    return delegate.listIterator(index);\n+  }\n+\n+  @Override\n+  public List<T> subList(int fromIndex, int toIndex) {\n+    return delegate.subList(fromIndex, toIndex);\n+  }\n+\n+  @Override\n+  public List<T> getDelegate() {\n+    return delegate;\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5af4c7336e2e73f7f434b3840d83e9b75999fa16"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg5NDQwMw==", "bodyText": "fix format, put the second // in a new line", "url": "https://github.com/mulesoft/mule/pull/9338#discussion_r484894403", "createdAt": "2020-09-08T12:57:47Z", "author": {"login": "elrodro83"}, "path": "modules/extensions-support/src/main/java/org/mule/runtime/module/extension/internal/runtime/resolver/ResolverUtils.java", "diffHunk": "@@ -176,7 +192,8 @@ public static Object resolveCursor(TypedValue<?> typedValue, UnaryOperator value\n       if (stackedTypesModelProperty.isPresent()) {\n         resolver = stackedTypesModelProperty.get().getValueResolverFactory().getExpressionBasedValueResolver(expression,\n                                                                                                              getType(type));\n-        //TODO MULE-13518: Add support for stacked value resolvers for @Parameter inside pojos // The following \"IFs\" should be removed once implemented\n+        // TODO MULE-13518: Add support for stacked value resolvers for @Parameter inside pojos // The following \"IFs\" should be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5af4c7336e2e73f7f434b3840d83e9b75999fa16"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f304a642c1295dc38b2015195d4bc1d072d58851", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/f304a642c1295dc38b2015195d4bc1d072d58851", "committedDate": "2020-09-08T13:04:12Z", "message": "Review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2fe9b4f330dcb66d8728566358591753967c969", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/f2fe9b4f330dcb66d8728566358591753967c969", "committedDate": "2020-09-08T13:13:56Z", "message": "extra line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abcceff39580ac71cb9b04ef3c93f8ed74efd220", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/abcceff39580ac71cb9b04ef3c93f8ed74efd220", "committedDate": "2020-09-08T13:25:12Z", "message": "Extra line"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MTUxNjM2", "url": "https://github.com/mulesoft/mule/pull/9338#pullrequestreview-484151636", "createdAt": "2020-09-08T13:41:25Z", "commit": {"oid": "abcceff39580ac71cb9b04ef3c93f8ed74efd220"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05abee92fca0ba83a8e1bea501c324e58ac18956", "author": {"user": null}, "url": "https://github.com/mulesoft/mule/commit/05abee92fca0ba83a8e1bea501c324e58ac18956", "committedDate": "2020-09-08T14:18:17Z", "message": "Fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MjIyMDM0", "url": "https://github.com/mulesoft/mule/pull/9338#pullrequestreview-484222034", "createdAt": "2020-09-08T14:52:32Z", "commit": {"oid": "05abee92fca0ba83a8e1bea501c324e58ac18956"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1265, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}