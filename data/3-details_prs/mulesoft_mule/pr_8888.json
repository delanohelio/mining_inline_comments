{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NTczMTk2", "number": 8888, "title": "MULE-18446: Migrate Validations in ApplicationModel to the AST api", "bodyText": "", "createdAt": "2020-05-28T15:42:18Z", "url": "https://github.com/mulesoft/mule/pull/8888", "merged": true, "mergeCommit": {"oid": "0b40e1010a9205bb6f1847f877a808711766959c"}, "closed": true, "closedAt": "2020-05-29T23:05:05Z", "author": {"login": "elrodro83"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclfWKugH2gAyNDI0NTczMTk2OmQzYjU4ZDg2M2Y4NTgwYzA0MWNmY2FkNjc4ZDJhOTcyNGI5OTA5MzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcl1Eu0gFqTQyMDUxODIzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d3b58d863f8580c041cfcad678d2a9724b990934", "author": {"user": {"login": "elrodro83", "name": "Rodrigo Merino"}}, "url": "https://github.com/mulesoft/mule/commit/d3b58d863f8580c041cfcad678d2a9724b990934", "committedDate": "2020-05-27T20:32:33Z", "message": "MULE-18446: Migrate Validations in ApplicationModel to the AST api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc5e561f16a26c8d1fd4c7c255b881ea930bc19b", "author": {"user": {"login": "elrodro83", "name": "Rodrigo Merino"}}, "url": "https://github.com/mulesoft/mule/commit/dc5e561f16a26c8d1fd4c7c255b881ea930bc19b", "committedDate": "2020-05-28T15:00:10Z", "message": "MULE-18446: Migrate Validations in ApplicationModel to the AST api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e710b1fcf2cd148f1943d94a45ef598a51f5692d", "author": {"user": {"login": "elrodro83", "name": "Rodrigo Merino"}}, "url": "https://github.com/mulesoft/mule/commit/e710b1fcf2cd148f1943d94a45ef598a51f5692d", "committedDate": "2020-05-28T17:32:35Z", "message": "sonar"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "38a5f4626b20e3a6d42e73506b6a14d8260941d3", "author": {"user": {"login": "elrodro83", "name": "Rodrigo Merino"}}, "url": "https://github.com/mulesoft/mule/commit/38a5f4626b20e3a6d42e73506b6a14d8260941d3", "committedDate": "2020-05-28T21:37:24Z", "message": "fix for munit case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwNTE4MjM3", "url": "https://github.com/mulesoft/mule/pull/8888#pullrequestreview-420518237", "createdAt": "2020-05-28T21:50:56Z", "commit": {"oid": "38a5f4626b20e3a6d42e73506b6a14d8260941d3"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTo1MDo1NlrOGcH_gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQyMTo1MDo1NlrOGcH_gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjE0NDI1Ng==", "bodyText": "\ud83d\udc4f", "url": "https://github.com/mulesoft/mule/pull/8888#discussion_r432144256", "createdAt": "2020-05-28T21:50:56Z", "author": {"login": "gsfernandes"}, "path": "modules/spring-config/src/main/java/org/mule/runtime/config/internal/model/ApplicationModel.java", "diffHunk": "@@ -902,107 +895,94 @@ private void validateErrorMappings() {\n     });\n   }\n \n-  private boolean isErrorMappingWithSourceAny(ComponentModel model) {\n-    String sourceType = model.getRawParameters().get(SOURCE_TYPE);\n-    return sourceType == null || sourceType.equals(ANY_IDENTIFIER);\n+  private boolean isErrorMappingWithSourceAny(ComponentAst model) {\n+    return ANY_IDENTIFIER\n+        .equals(model.getRawParameterValue(SOURCE_TYPE).orElse(ANY_IDENTIFIER));\n   }\n \n   private void validateErrorHandlerStructure() {\n     recursiveStream().forEach(component -> {\n       if (component.getIdentifier().equals(ERROR_HANDLER_IDENTIFIER)) {\n-        validateRefOrOnErrorsExclusiveness((ComponentModel) component);\n-        validateOnErrorsHaveTypeOrWhenAttribute((ComponentModel) component);\n-        validateNoMoreThanOneOnErrorPropagateWithRedelivery((ComponentModel) component);\n+        validateRefOrOnErrorsExclusiveness(component);\n+        validateOnErrorsHaveTypeOrWhenAttribute(component);\n+        validateNoMoreThanOneOnErrorPropagateWithRedelivery(component);\n       }\n     });\n   }\n \n-  private void validateRefOrOnErrorsExclusiveness(ComponentModel component) {\n-    if (component.getRawParameters().get(REFERENCE_ATTRIBUTE) != null && !component.getInnerComponents().isEmpty()) {\n+  private void validateRefOrOnErrorsExclusiveness(ComponentAst component) {\n+    if (component.getRawParameterValue(REFERENCE_ATTRIBUTE).isPresent()\n+        && component.directChildrenStream().count() > 0) {\n       throw new MuleRuntimeException(createStaticMessage(\"A reference error-handler cannot have on-errors.\"));\n     }\n   }\n \n-  private void validateNoMoreThanOneOnErrorPropagateWithRedelivery(ComponentModel component) {\n-    if (component.getInnerComponents().stream().filter(exceptionStrategyComponent -> exceptionStrategyComponent.getRawParameters()\n-        .get(MAX_REDELIVERY_ATTEMPTS_ROLLBACK_ES_ATTRIBUTE) != null).count() > 1) {\n+  private void validateNoMoreThanOneOnErrorPropagateWithRedelivery(ComponentAst component) {\n+    if (component.directChildrenStream()\n+        .filter(exceptionStrategyComponent -> exceptionStrategyComponent\n+            .getRawParameterValue(MAX_REDELIVERY_ATTEMPTS_ROLLBACK_ES_ATTRIBUTE).isPresent())\n+        .count() > 1) {\n       throw new MuleRuntimeException(createStaticMessage(\"Only one on-error-propagate within a error-handler can handle message redelivery. Remove one of the maxRedeliveryAttempts attributes\"));\n     }\n   }\n \n-  private void validateOnErrorsHaveTypeOrWhenAttribute(ComponentModel component) {\n-    List<ComponentModel> innerComponents = component.getInnerComponents();\n-    for (int i = 0; i < innerComponents.size() - 1; i++) {\n-      ComponentAst componentModel = getOnErrorComponentModel(innerComponents.get(i));\n-      if (!componentModel.getRawParameterValue(WHEN_CHOICE_ES_ATTRIBUTE).isPresent()\n-          && !componentModel.getRawParameterValue(TYPE_ES_ATTRIBUTE).isPresent()) {\n-        throw new MuleRuntimeException(createStaticMessage(\n-                                                           \"Every handler (except for the last one) within an 'error-handler' must specify a 'when' or 'type' attribute.\"));\n-      }\n+  private void validateOnErrorsHaveTypeOrWhenAttribute(ComponentAst component) {\n+    final long count = component.directChildrenStream().count();\n+    if (count > 0) {\n+      component.directChildrenStream()\n+          // last error handler should be the catch all, so that one is not validated\n+          .limit(count - 1)\n+          .forEach(innerComponent -> {\n+            ComponentAst componentModel = getOnErrorComponentModel(innerComponent);\n+            if (!componentModel.getRawParameterValue(WHEN_CHOICE_ES_ATTRIBUTE).isPresent()\n+                && !componentModel.getRawParameterValue(TYPE_ES_ATTRIBUTE).isPresent()) {\n+              throw new MuleRuntimeException(createStaticMessage(\n+                                                                 \"Every handler (except for the last one) within an 'error-handler' must specify a 'when' or 'type' attribute.\"));\n+            }\n+          });\n     }\n   }\n \n-  private ComponentAst getOnErrorComponentModel(ComponentModel onErrorModel) {\n+  private ComponentAst getOnErrorComponentModel(ComponentAst onErrorModel) {\n     if (ON_ERROR_IDENTIFIER.equals(onErrorModel.getIdentifier())) {\n-      String sharedOnErrorName = onErrorModel.getRawParameters().get(REFERENCE_ATTRIBUTE);\n-      return findTopLevelNamedComponent(sharedOnErrorName).orElseThrow(\n-                                                                       () -> new MuleRuntimeException(createStaticMessage(format(\"Could not find on-error reference named '%s'\",\n-                                                                                                                                 sharedOnErrorName))));\n+      return onErrorModel.getRawParameterValue(REFERENCE_ATTRIBUTE)\n+          .map(sharedOnErrorName -> findTopLevelNamedComponent(sharedOnErrorName)\n+              .orElseThrow(() -> new MuleRuntimeException(createStaticMessage(format(\"Could not find on-error reference named '%s'\",\n+                                                                                     sharedOnErrorName)))))\n+          .orElse(onErrorModel);\n     } else {\n       return onErrorModel;\n     }\n   }\n \n-  private void validateNamedTopLevelElementsHaveName(ComponentBuildingDefinitionRegistry componentBuildingDefinitionRegistry)\n-      throws ConfigurationException {\n-    try {\n-      topLevelComponentsStream().forEach(topLevelComponent -> {\n-        final ComponentIdentifier identifier = topLevelComponent.getIdentifier();\n-        componentBuildingDefinitionRegistry.getBuildingDefinition(identifier).filter(ComponentBuildingDefinition::isNamed)\n-            .ifPresent(buildingDefinition -> {\n-              if (!topLevelComponent.getComponentId().isPresent()) {\n-                throw new MuleRuntimeException(createStaticMessage(format(\"Global element %s:%s does not provide a name attribute.\",\n-                                                                          identifier.getNamespace(), identifier.getName())));\n-              }\n-            });\n-      });\n-    } catch (Exception e) {\n-      throw new ConfigurationException(e);\n-    }\n-  }\n-\n-  private void validateSingleElementsExistence() {\n-    validateSingleElementExistence(MUNIT_AFTER_SUITE_IDENTIFIER);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38a5f4626b20e3a6d42e73506b6a14d8260941d3"}, "originalPosition": 340}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 691, "cost": 1, "resetAt": "2021-10-28T18:54:27Z"}}}