{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MjQwODEx", "number": 8771, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTozOToyMlrODtt0mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTozOToyMlrODtt0mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjYzMjU5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/mule/runtime/core/internal/util/CompositeClassLoader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQyMTozOToyMlrOF_TnIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwMTowNzoxMlrOF_X8AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkyNTkyMA==", "bodyText": "i think the two methods should be overriddes, and the resolve flag should be also propagated to the delegated loadClass, right?", "url": "https://github.com/mulesoft/mule/pull/8771#discussion_r401925920", "createdAt": "2020-04-01T21:39:22Z", "author": {"login": "elrodro83"}, "path": "core/src/main/java/org/mule/runtime/core/internal/util/CompositeClassLoader.java", "diffHunk": "@@ -44,8 +44,18 @@ public CompositeClassLoader(ClassLoader first, ClassLoader... others) {\n     delegates = unmodifiableList(delegates);\n   }\n \n+  /**\n+   * Overrides the loadClass in order to support scenarios where a custom class loader is created in a plugin\n+   * and these calls to this method explicitly.\n+   * We cannot resolve the class at this point as we should delegate to protected methods and it is no possible.\n+   *\n+   * @param name    The <a href=\"#name\">binary name</a> of the class\n+   * @param resolve If <tt>true</tt> then resolve the class\n+   * @return The resulting <tt>Class</tt> object\n+   * @throws ClassNotFoundException If the class could not be found\n+   */\n   @Override\n-  public Class<?> loadClass(String name) throws ClassNotFoundException {\n+  public Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ae7e862c67b379382c3420cef35e9376790b04e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk3MDkzNQ==", "bodyText": "The loadClass(name) in ClassLoader delegates to the loadClass(name, resolve=false) so no need to override that method. Problem with the resolve as explained in the other PR is that the method is protected therefore we cannot call it on the list of delegates. So, we will just not support the resolve=true meaning that it will be a way to load classes eagerly. This is used in some frameworks but it should not affect to us.", "url": "https://github.com/mulesoft/mule/pull/8771#discussion_r401970935", "createdAt": "2020-04-01T23:37:20Z", "author": {"login": "gsfernandes"}, "path": "core/src/main/java/org/mule/runtime/core/internal/util/CompositeClassLoader.java", "diffHunk": "@@ -44,8 +44,18 @@ public CompositeClassLoader(ClassLoader first, ClassLoader... others) {\n     delegates = unmodifiableList(delegates);\n   }\n \n+  /**\n+   * Overrides the loadClass in order to support scenarios where a custom class loader is created in a plugin\n+   * and these calls to this method explicitly.\n+   * We cannot resolve the class at this point as we should delegate to protected methods and it is no possible.\n+   *\n+   * @param name    The <a href=\"#name\">binary name</a> of the class\n+   * @param resolve If <tt>true</tt> then resolve the class\n+   * @return The resulting <tt>Class</tt> object\n+   * @throws ClassNotFoundException If the class could not be found\n+   */\n   @Override\n-  public Class<?> loadClass(String name) throws ClassNotFoundException {\n+  public Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkyNTkyMA=="}, "originalCommit": {"oid": "5ae7e862c67b379382c3420cef35e9376790b04e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTk5NjgwMQ==", "bodyText": "It is not clear to me yet what the resolve will do as according to javadoc:\n\"Links the specified class. This (misleadingly named) method may be used by a class loader to link a class\". So, I ended up checking what we are doing in our ClassLoaders and found that the FineGrainControlClassLoader has kind of the same dilemma:\nIt implements the loadClass(name, resolve) method but checks for the lookPolicy, this will give him a classloader to delegate the load of the class, for instance you are at P1 CL and try load a class from application so the P1 CL will get from lookupPolicy the APP CL and call the loadClass(name) method and then P1 CL will do the the call to resolveClass(clazz).\nloadClass(name, resolve)-> https://github.com/mulesoft/mule/blob/mule-4.2.2/modules/artifact/src/main/java/org/mule/runtime/module/artifact/api/classloader/FineGrainedControlClassLoader.java#L67\nThen if the policy returns a different class loader it will call its loadClass(name)\nhttps://github.com/mulesoft/mule/blob/mule-4.2.2/modules/artifact/src/main/java/org/mule/runtime/module/artifact/api/classloader/FineGrainedControlClassLoader.java#L93\nFinally the loadClass(name, resolve) method will do the resolve no matter if the class was actually loaded with this class loader or other:\nhttps://github.com/mulesoft/mule/blob/mule-4.2.2/modules/artifact/src/main/java/org/mule/runtime/module/artifact/api/classloader/FineGrainedControlClassLoader.java#L110\nSo, the conclusion is I would push another change to call the resolveClass to the class resolved and no need to implement loadClass(name) only as it delegates to loadClass(name, resolve).", "url": "https://github.com/mulesoft/mule/pull/8771#discussion_r401996801", "createdAt": "2020-04-02T01:07:12Z", "author": {"login": "gsfernandes"}, "path": "core/src/main/java/org/mule/runtime/core/internal/util/CompositeClassLoader.java", "diffHunk": "@@ -44,8 +44,18 @@ public CompositeClassLoader(ClassLoader first, ClassLoader... others) {\n     delegates = unmodifiableList(delegates);\n   }\n \n+  /**\n+   * Overrides the loadClass in order to support scenarios where a custom class loader is created in a plugin\n+   * and these calls to this method explicitly.\n+   * We cannot resolve the class at this point as we should delegate to protected methods and it is no possible.\n+   *\n+   * @param name    The <a href=\"#name\">binary name</a> of the class\n+   * @param resolve If <tt>true</tt> then resolve the class\n+   * @return The resulting <tt>Class</tt> object\n+   * @throws ClassNotFoundException If the class could not be found\n+   */\n   @Override\n-  public Class<?> loadClass(String name) throws ClassNotFoundException {\n+  public Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTkyNTkyMA=="}, "originalCommit": {"oid": "5ae7e862c67b379382c3420cef35e9376790b04e"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4967, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}