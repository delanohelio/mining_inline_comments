{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk2Mjg3MjUz", "number": 951, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDoxNDoyNlrODtISfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDoxNDoyNlrODtISfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NjQ4MzE2OnYy", "diffSide": "RIGHT", "path": "en/docs/learn/design-api/lifecycle-management/customize-api-life-cycle.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDoxNDoyNlrOF-X5qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNDowOToxNlrOF-wKdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk0NzYyNQ==", "bodyText": "Since we are shipping the source from 3.1.0, we can point to the JSX file of the publisher instead of the git URL. /repository/deployment/server/jaggeryapps/publisher/source/src/app/components/Apis/Details/LifeCycle/LifeCycleImage.jsx", "url": "https://github.com/wso2/docs-apim/pull/951#discussion_r400947625", "createdAt": "2020-03-31T14:14:26Z", "author": {"login": "chanaka3d"}, "path": "en/docs/learn/design-api/lifecycle-management/customize-api-life-cycle.md", "diffHunk": "@@ -143,72 +130,76 @@ Follow the steps below to add a new state to the default life cycle.\n         </configuration>\n     </aspect>\n     ```\n-7.  Update the API lifecycle definition.\n+6.  Update the API lifecycle definition.\n \n-     1.  Add a sample state to the API Lifecycle.\n-        \n-         Copy and paste the following sample code in the file.\n+    1.  Add a sample state to the API Lifecycle.\n+        Copy and paste the following sample code in the file.\n \n         !!! info\n             The sample **REJECTED** state is added between **PUBLISHED** and **RETIRED** . It uses the `Re-submit` and `Retire` state transition events to change to the consequent states. Custom checklist items are also given under `\"checkItems\"` , which are tasks to be done in a state transition. You can select/deselect these items in the management console.\n \n \n         ``` java\n-                \u00a0<state id=\"Rejected\">\n-                    <datamodel>\n-                        <data name=\"checkItems\">\n-                            <item name=\"Deprecate old versions after rejecting the API\" forEvent=\"\">\n-                            </item>\n-                            <item name=\"Remove subscriptions after rejection\" forEvent=\"\">\n-                            </item>\n-                        </data>\n-                        <data name=\"transitionExecution\">\n-                            <execution forEvent=\"Re-Submit\" class=\"org.wso2.carbon.apimgt.impl.executors.APIExecutor\">\n-                            </execution>\n-                            <execution forEvent=\"Retire\" class=\"org.wso2.carbon.apimgt.impl.executors.APIExecutor\">\n-                            </execution>\n-                        </data>\n-                    </datamodel>\n-                        <transition event=\"Re-Submit\" target=\"Published\"/>\n-                        <transition event=\"Retire\" target=\"Retired\"/>\n-                </state>\n+        \u00a0<state id=\"Rejected\">\n+            <datamodel>\n+                <data name=\"checkItems\">\n+                    <item name=\"Deprecate old versions after rejecting the API\" forEvent=\"\">\n+                    </item>\n+                    <item name=\"Remove subscriptions after rejection\" forEvent=\"\">\n+                    </item>\n+                </data>\n+                <data name=\"transitionExecution\">\n+                    <execution forEvent=\"Re-Submit\" class=\"org.wso2.carbon.apimgt.impl.executors.APIExecutor\">\n+                    </execution>\n+                    <execution forEvent=\"Retire\" class=\"org.wso2.carbon.apimgt.impl.executors.APIExecutor\">\n+                    </execution>\n+                </data>\n+            </datamodel>\n+            <transition event=\"Re-Submit\" target=\"Published\"/>\n+            <transition event=\"Retire\" target=\"Retired\"/>\n+        </state>\n         ```\n \n-         !!! note\n-             The same execution class is used ( `org.wso2.carbon.apimgt.impl.executors.APIExecutor` ) for all state transitions. However, you can plug your own execution code when modifying the life cycle configuration.\n+        !!! note\n+            The same execution class is used ( `org.wso2.carbon.apimgt.impl.executors.APIExecutor` ) for all state transitions. However, you can plug your own execution code when modifying the life cycle configuration.\n \n-         For example, if you want to add notifications for a specific state transition, you can plug your own custom execution class for that particular state in the API life cycle. Any changes are updated in the **Lifecycle** tab accordingly.\n+            For example, if you want to send notifications for a specific state transition, you can plug your own custom execution class for that particular state in the API life cycle. Any changes are updated in the **Lifecycle** tab accordingly.\n \n \n     2.  Add a new transition event under the PUBLISHED state, to show the state change to REJECTED.\n \n-         ``` java\n-         ...   \n-            <transition event=\"Reject\" target=\"Rejected\"/>\n-         ...\n-         ```\n-\n-8.  Make the transition event visible in API Publisher.\n-     \n-     1.  Open the `<API-M_HOME>/repository/deployment/server/jaggeryapps/publisher/site/conf/locales/jaggery/locale_default.json` file.\n-    \n-     2.  Add the following code in the file.\u00a0Note that the key value in the JSON pair should be lowercase.\n-\n         ``` java\n-        \"reject\": \"Rejected\",\n+        ...   \n+        <transition event=\"Reject\" target=\"Rejected\"/>\n+        ...\n         ```\n \n-9.  Restart the WSO2 API Manager server.\n+7.  Restart the WSO2 API Manager server.\n+\n+8.  Open API Publisher and check the Lifecycle tab to see the newly added state.\n+\n+    ![]({{base_path}}/assets/img/learn/custom-life-cycle-states.png)\n+\n+    !!! tip\n+        Consider the following points when extending and customizing the API lifecycle XML configuration.\n+\n+        -   Do not change the life cycle name since it needs to be engaged with the APIs dynamically.\n+        -   Make sure you keep the **PUBLISHED** and **PROTOTYPED** states as those two states will be used by API Publisher in the API creation wizard.\n+\n+    !!! info\n+        By default following lifecycle diagram is added in Publisher portal to show the state changes.\n+\n+        ![]({{base_path}}/assets/img/learn/lifecycle-image.png)\n \n-10.  Re-open API Publisher and check the Lifecycle to see the changes.\n+        If you want to change the lifecycle image in Publisher, you can follow the steps mentioned below:\n \n-     ![]({{base_path}}/assets/attachments/103328609/103328611.png)\n+        -   Search for **lifeCycleImage** in `defaultTheme.js` file resides in `<APIM-Home>/repository/deployment/server/jaggeryapps/publisher/site/public/conf` directory and uncomment it.\n+        -   Replace the path with correct path of image. For instance,\n \n-!!! tip\n-    Consider the following points when extending and customizing the API lifecycle XML configuration.\n+                lifeCycleImage: '/publisher/site/public/images/custom-lifecycle.png,\n \n--   Do not change the life cycle name since it needs to be engaged with the APIs dynamically.\n--   Make sure you keep the **PUBLISHED** and **PROTOTYPED** states as those two states will be used by API Publisher in the API creation wizard.\n+    !!! Attention \"For Advanced Customization\"\n+        If you want to add the custom lifecycle state to the existing lifecycle diagram, you have to customize the [LifeCycleImage.jsx](https://github.com/wso2/carbon-apimgt/blob/v6.6.163/features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/Apis/Details/LifeCycle/LifeCycleImage.jsx) file as mentioned in the [Advanced Customization]({{base_path}}/learn/consume-api/customizations/customizing-the-developer-portal/advanced-customization/) section.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e44913f28b771dc74e34745a9e7d51ebc8dc1a3"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTM0NTE0MQ==", "bodyText": "Fixed in 1eb75c9", "url": "https://github.com/wso2/docs-apim/pull/951#discussion_r401345141", "createdAt": "2020-04-01T04:09:16Z", "author": {"login": "vithu30"}, "path": "en/docs/learn/design-api/lifecycle-management/customize-api-life-cycle.md", "diffHunk": "@@ -143,72 +130,76 @@ Follow the steps below to add a new state to the default life cycle.\n         </configuration>\n     </aspect>\n     ```\n-7.  Update the API lifecycle definition.\n+6.  Update the API lifecycle definition.\n \n-     1.  Add a sample state to the API Lifecycle.\n-        \n-         Copy and paste the following sample code in the file.\n+    1.  Add a sample state to the API Lifecycle.\n+        Copy and paste the following sample code in the file.\n \n         !!! info\n             The sample **REJECTED** state is added between **PUBLISHED** and **RETIRED** . It uses the `Re-submit` and `Retire` state transition events to change to the consequent states. Custom checklist items are also given under `\"checkItems\"` , which are tasks to be done in a state transition. You can select/deselect these items in the management console.\n \n \n         ``` java\n-                \u00a0<state id=\"Rejected\">\n-                    <datamodel>\n-                        <data name=\"checkItems\">\n-                            <item name=\"Deprecate old versions after rejecting the API\" forEvent=\"\">\n-                            </item>\n-                            <item name=\"Remove subscriptions after rejection\" forEvent=\"\">\n-                            </item>\n-                        </data>\n-                        <data name=\"transitionExecution\">\n-                            <execution forEvent=\"Re-Submit\" class=\"org.wso2.carbon.apimgt.impl.executors.APIExecutor\">\n-                            </execution>\n-                            <execution forEvent=\"Retire\" class=\"org.wso2.carbon.apimgt.impl.executors.APIExecutor\">\n-                            </execution>\n-                        </data>\n-                    </datamodel>\n-                        <transition event=\"Re-Submit\" target=\"Published\"/>\n-                        <transition event=\"Retire\" target=\"Retired\"/>\n-                </state>\n+        \u00a0<state id=\"Rejected\">\n+            <datamodel>\n+                <data name=\"checkItems\">\n+                    <item name=\"Deprecate old versions after rejecting the API\" forEvent=\"\">\n+                    </item>\n+                    <item name=\"Remove subscriptions after rejection\" forEvent=\"\">\n+                    </item>\n+                </data>\n+                <data name=\"transitionExecution\">\n+                    <execution forEvent=\"Re-Submit\" class=\"org.wso2.carbon.apimgt.impl.executors.APIExecutor\">\n+                    </execution>\n+                    <execution forEvent=\"Retire\" class=\"org.wso2.carbon.apimgt.impl.executors.APIExecutor\">\n+                    </execution>\n+                </data>\n+            </datamodel>\n+            <transition event=\"Re-Submit\" target=\"Published\"/>\n+            <transition event=\"Retire\" target=\"Retired\"/>\n+        </state>\n         ```\n \n-         !!! note\n-             The same execution class is used ( `org.wso2.carbon.apimgt.impl.executors.APIExecutor` ) for all state transitions. However, you can plug your own execution code when modifying the life cycle configuration.\n+        !!! note\n+            The same execution class is used ( `org.wso2.carbon.apimgt.impl.executors.APIExecutor` ) for all state transitions. However, you can plug your own execution code when modifying the life cycle configuration.\n \n-         For example, if you want to add notifications for a specific state transition, you can plug your own custom execution class for that particular state in the API life cycle. Any changes are updated in the **Lifecycle** tab accordingly.\n+            For example, if you want to send notifications for a specific state transition, you can plug your own custom execution class for that particular state in the API life cycle. Any changes are updated in the **Lifecycle** tab accordingly.\n \n \n     2.  Add a new transition event under the PUBLISHED state, to show the state change to REJECTED.\n \n-         ``` java\n-         ...   \n-            <transition event=\"Reject\" target=\"Rejected\"/>\n-         ...\n-         ```\n-\n-8.  Make the transition event visible in API Publisher.\n-     \n-     1.  Open the `<API-M_HOME>/repository/deployment/server/jaggeryapps/publisher/site/conf/locales/jaggery/locale_default.json` file.\n-    \n-     2.  Add the following code in the file.\u00a0Note that the key value in the JSON pair should be lowercase.\n-\n         ``` java\n-        \"reject\": \"Rejected\",\n+        ...   \n+        <transition event=\"Reject\" target=\"Rejected\"/>\n+        ...\n         ```\n \n-9.  Restart the WSO2 API Manager server.\n+7.  Restart the WSO2 API Manager server.\n+\n+8.  Open API Publisher and check the Lifecycle tab to see the newly added state.\n+\n+    ![]({{base_path}}/assets/img/learn/custom-life-cycle-states.png)\n+\n+    !!! tip\n+        Consider the following points when extending and customizing the API lifecycle XML configuration.\n+\n+        -   Do not change the life cycle name since it needs to be engaged with the APIs dynamically.\n+        -   Make sure you keep the **PUBLISHED** and **PROTOTYPED** states as those two states will be used by API Publisher in the API creation wizard.\n+\n+    !!! info\n+        By default following lifecycle diagram is added in Publisher portal to show the state changes.\n+\n+        ![]({{base_path}}/assets/img/learn/lifecycle-image.png)\n \n-10.  Re-open API Publisher and check the Lifecycle to see the changes.\n+        If you want to change the lifecycle image in Publisher, you can follow the steps mentioned below:\n \n-     ![]({{base_path}}/assets/attachments/103328609/103328611.png)\n+        -   Search for **lifeCycleImage** in `defaultTheme.js` file resides in `<APIM-Home>/repository/deployment/server/jaggeryapps/publisher/site/public/conf` directory and uncomment it.\n+        -   Replace the path with correct path of image. For instance,\n \n-!!! tip\n-    Consider the following points when extending and customizing the API lifecycle XML configuration.\n+                lifeCycleImage: '/publisher/site/public/images/custom-lifecycle.png,\n \n--   Do not change the life cycle name since it needs to be engaged with the APIs dynamically.\n--   Make sure you keep the **PUBLISHED** and **PROTOTYPED** states as those two states will be used by API Publisher in the API creation wizard.\n+    !!! Attention \"For Advanced Customization\"\n+        If you want to add the custom lifecycle state to the existing lifecycle diagram, you have to customize the [LifeCycleImage.jsx](https://github.com/wso2/carbon-apimgt/blob/v6.6.163/features/apimgt/org.wso2.carbon.apimgt.publisher.feature/src/main/resources/publisher/source/src/app/components/Apis/Details/LifeCycle/LifeCycleImage.jsx) file as mentioned in the [Advanced Customization]({{base_path}}/learn/consume-api/customizations/customizing-the-developer-portal/advanced-customization/) section.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk0NzYyNQ=="}, "originalCommit": {"oid": "8e44913f28b771dc74e34745a9e7d51ebc8dc1a3"}, "originalPosition": 206}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1966, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}