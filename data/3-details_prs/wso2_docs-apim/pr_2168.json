{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyMDI5MzY5", "number": 2168, "title": "[3.2.0] Update Monitoring Server Health Docs", "bodyText": "Purpose\nRelated to #1778\nUpdated and added configs to run monitoring API.", "createdAt": "2020-10-29T05:45:30Z", "url": "https://github.com/wso2/docs-apim/pull/2168", "merged": true, "mergeCommit": {"oid": "d8056e80f6d3a7638176d8077297b590f6fbb7ad"}, "closed": true, "closedAt": "2020-12-02T17:06:22Z", "author": {"login": "Sarangan0219"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXLgysAH2gAyNTEyMDI5MzY5OjBhZDUxY2Y3NWQzNjFiOTk0YzkyMTIyZjIzZDc2YWZjZWY1ODFhYjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdiQN8HAFqTU0Mjk0ODI0NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0ad51cf75d361b994c92122f23d76afcef581ab7", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/docs-apim/commit/0ad51cf75d361b994c92122f23d76afcef581ab7", "committedDate": "2020-10-29T05:42:16Z", "message": "Adding Server health DOC"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62184b6463320cfe293a5a3f2528269e84fae95d", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/docs-apim/commit/62184b6463320cfe293a5a3f2528269e84fae95d", "committedDate": "2020-10-29T05:53:07Z", "message": "Refractor the doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzOTAyNDQw", "url": "https://github.com/wso2/docs-apim/pull/2168#pullrequestreview-523902440", "createdAt": "2020-11-05T03:34:19Z", "commit": {"oid": "62184b6463320cfe293a5a3f2528269e84fae95d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMzozNDoyMFrOHtyXBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMzozNDoyMFrOHtyXBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzc3MzA2Mg==", "bodyText": "Why are we skipping the tests? This is not a good thing to mention in the docs.", "url": "https://github.com/wso2/docs-apim/pull/2168#discussion_r517773062", "createdAt": "2020-11-05T03:34:20Z", "author": {"login": "pubudu538"}, "path": "en/docs/administer/logging-and-monitoring/monitoring/monitoring-server-health.md", "diffHunk": "@@ -1,118 +1,163 @@\n # Monitoring Server Health\n \n-!!! warning\n-This document is work in progress!\n+**Health Check API** is used to validate and verify the status of the APIM server and its dependencies\n+It is a REST service which returns the operational status, performance information of the configured endpoints with appropriate HTTP return code and a JSON object\n+There are two health checkers available by default:\n \n-\n-The Carbon Health Check API can be used to check the health of a Carbon server. The sections below guide you through using this API.\n-\n--   [Deploying the API](#MonitoringServerHealth-DeployingtheAPI)\n--   [Configuring the API](#MonitoringServerHealth-ConfiguringtheAPI)\n--   [Invoking the API](#MonitoringServerHealth-InvokingtheAPI)\n--   [Error responses](#MonitoringServerHealth-Errorresponses)\n--   [Adding new health checkers](#MonitoringServerHealth-Addingnewhealthcheckers)\n+1.  **Data sources health checker** - This checker goes through the data sources that are configured in the `<API-M_HOME>/repository/conf/deployment.toml` file and checks if the active connection count surpasses a healthy percentage limit (e.g., 80%) of the maximum allowed connections count. This checker also tests the connection from each data source to see whether the connection is successful.\n+2.  **User store health checker** - This checker iterates through configured user stores of the super tenant domain and attempts to invoke the `isExistingUser` method to check whether a failure occurs.\n \n !!! note\n-**Note:** This API is only supported for WSO2 Carbon products that are running on Java 8 or a later version.\n-\n-\n-There are three health checkers available by default:\n-\n-1.  **Data sources health checker** - This checker goes through the data sources that are configured in the `master-datasources.xml` file and checks if the active connection count surpasses a healthy percentage limit (e.g., 80%) of the maximum allowed connections count. This checker also tests the connection from each data source to see whether the connection is successful.\n-2.  **Server startup health checker** - This checker uses the ServerAdmin service to check if the server status is RUNNING.\n-3.  **Super tenant user store health checker** - This checker iterates through configured user stores of the super tenant domain and attempts to invoke the `isExistingUser` method to check whether a failure occurs.\n+    This API is only supported for WSO2 API Manager that runs on Java 8 or a later version.\n \n ### Deploying the API\n \n-!!! warning\n-This API is supported by default from WSO2 Identity Server 5.7.0 onwards. It is available by default for WSO2 IS versions 5.5.0 and 5.6.0 only as a WUM update. For more information on how to update using WUM, see [Getting WSO2 Updates](https://docs.wso2.com/display/ADMIN44x/Getting+WSO2+Updates) documentation.\n+This section guides you through deploying the Carbon Health Check components in WSO2 API Manager\n \n-**If you are using a WSO2 product version that supports this feature by default (either in a fresh pack or via a WUM update), skip the instructions in this section and proceed **to the [configuring the API](#MonitoringServerHealth-ConfiguringtheAPI) section.**\n+1. Fork the following GitHub repository.\n \n+     ```https://github.com/wso2/carbon-health-check```\n+     \n+2. Navigate to the place where you want to clone the repo and clone the forked repository. \n \n+     ```git clone https://github.com/[git-username]/carbon-health-check```  \n+   \n+3. Forked Repository is referred to as `<HEALTH_CHECK_HOME>` in this document. Navigate to `<HEALTH_CHECK_HOME>` and build the product.\n+    \n+      ```mvn clean install -Dmaven.test.skip=true```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62184b6463320cfe293a5a3f2528269e84fae95d"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59c40af02ce240f227fc32c65e2fc722789baa77", "author": {"user": {"login": "Sarangan0219", "name": "Sarangan"}}, "url": "https://github.com/wso2/docs-apim/commit/59c40af02ce240f227fc32c65e2fc722789baa77", "committedDate": "2020-11-05T03:39:22Z", "message": "Address review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIzOTA1MDY0", "url": "https://github.com/wso2/docs-apim/pull/2168#pullrequestreview-523905064", "createdAt": "2020-11-05T03:43:24Z", "commit": {"oid": "59c40af02ce240f227fc32c65e2fc722789baa77"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0MTQ2NDA1", "url": "https://github.com/wso2/docs-apim/pull/2168#pullrequestreview-534146405", "createdAt": "2020-11-19T07:37:05Z", "commit": {"oid": "59c40af02ce240f227fc32c65e2fc722789baa77"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNzozNzowNVrOH2QGFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQwNzo1MDo1OFrOH2QgOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0ODg1NQ==", "bodyText": "can we configure the healthy percentage limit?\nThe \"connection is successful\"  means whether it is alive connection?", "url": "https://github.com/wso2/docs-apim/pull/2168#discussion_r526648855", "createdAt": "2020-11-19T07:37:05Z", "author": {"login": "shaniR"}, "path": "en/docs/administer/logging-and-monitoring/monitoring/monitoring-server-health.md", "diffHunk": "@@ -1,118 +1,163 @@\n # Monitoring Server Health\n \n-!!! warning\n-This document is work in progress!\n+**Health Check API** is used to validate and verify the status of the APIM server and its dependencies\n+It is a REST service which returns the operational status, performance information of the configured endpoints with appropriate HTTP return code and a JSON object\n+There are two health checkers available by default:\n \n-\n-The Carbon Health Check API can be used to check the health of a Carbon server. The sections below guide you through using this API.\n-\n--   [Deploying the API](#MonitoringServerHealth-DeployingtheAPI)\n--   [Configuring the API](#MonitoringServerHealth-ConfiguringtheAPI)\n--   [Invoking the API](#MonitoringServerHealth-InvokingtheAPI)\n--   [Error responses](#MonitoringServerHealth-Errorresponses)\n--   [Adding new health checkers](#MonitoringServerHealth-Addingnewhealthcheckers)\n+1.  **Data sources health checker** - This checker goes through the data sources that are configured in the `<API-M_HOME>/repository/conf/deployment.toml` file and checks if the active connection count surpasses a healthy percentage limit (e.g., 80%) of the maximum allowed connections count. This checker also tests the connection from each data source to see whether the connection is successful.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59c40af02ce240f227fc32c65e2fc722789baa77"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0ODkyMg==", "bodyText": "What does ths JSON Object include?", "url": "https://github.com/wso2/docs-apim/pull/2168#discussion_r526648922", "createdAt": "2020-11-19T07:37:12Z", "author": {"login": "shaniR"}, "path": "en/docs/administer/logging-and-monitoring/monitoring/monitoring-server-health.md", "diffHunk": "@@ -1,118 +1,163 @@\n # Monitoring Server Health\n \n-!!! warning\n-This document is work in progress!\n+**Health Check API** is used to validate and verify the status of the APIM server and its dependencies\n+It is a REST service which returns the operational status, performance information of the configured endpoints with appropriate HTTP return code and a JSON object", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59c40af02ce240f227fc32c65e2fc722789baa77"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY0OTI4OA==", "bodyText": "checks for which user? failure indicating the user is not in the user store?", "url": "https://github.com/wso2/docs-apim/pull/2168#discussion_r526649288", "createdAt": "2020-11-19T07:38:01Z", "author": {"login": "shaniR"}, "path": "en/docs/administer/logging-and-monitoring/monitoring/monitoring-server-health.md", "diffHunk": "@@ -1,118 +1,163 @@\n # Monitoring Server Health\n \n-!!! warning\n-This document is work in progress!\n+**Health Check API** is used to validate and verify the status of the APIM server and its dependencies\n+It is a REST service which returns the operational status, performance information of the configured endpoints with appropriate HTTP return code and a JSON object\n+There are two health checkers available by default:\n \n-\n-The Carbon Health Check API can be used to check the health of a Carbon server. The sections below guide you through using this API.\n-\n--   [Deploying the API](#MonitoringServerHealth-DeployingtheAPI)\n--   [Configuring the API](#MonitoringServerHealth-ConfiguringtheAPI)\n--   [Invoking the API](#MonitoringServerHealth-InvokingtheAPI)\n--   [Error responses](#MonitoringServerHealth-Errorresponses)\n--   [Adding new health checkers](#MonitoringServerHealth-Addingnewhealthcheckers)\n+1.  **Data sources health checker** - This checker goes through the data sources that are configured in the `<API-M_HOME>/repository/conf/deployment.toml` file and checks if the active connection count surpasses a healthy percentage limit (e.g., 80%) of the maximum allowed connections count. This checker also tests the connection from each data source to see whether the connection is successful.\n+2.  **User store health checker** - This checker iterates through configured user stores of the super tenant domain and attempts to invoke the `isExistingUser` method to check whether a failure occurs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59c40af02ce240f227fc32c65e2fc722789baa77"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY1MDk0Ng==", "bodyText": "why have we not included this into the product?", "url": "https://github.com/wso2/docs-apim/pull/2168#discussion_r526650946", "createdAt": "2020-11-19T07:41:31Z", "author": {"login": "shaniR"}, "path": "en/docs/administer/logging-and-monitoring/monitoring/monitoring-server-health.md", "diffHunk": "@@ -1,118 +1,163 @@\n # Monitoring Server Health\n \n-!!! warning\n-This document is work in progress!\n+**Health Check API** is used to validate and verify the status of the APIM server and its dependencies\n+It is a REST service which returns the operational status, performance information of the configured endpoints with appropriate HTTP return code and a JSON object\n+There are two health checkers available by default:\n \n-\n-The Carbon Health Check API can be used to check the health of a Carbon server. The sections below guide you through using this API.\n-\n--   [Deploying the API](#MonitoringServerHealth-DeployingtheAPI)\n--   [Configuring the API](#MonitoringServerHealth-ConfiguringtheAPI)\n--   [Invoking the API](#MonitoringServerHealth-InvokingtheAPI)\n--   [Error responses](#MonitoringServerHealth-Errorresponses)\n--   [Adding new health checkers](#MonitoringServerHealth-Addingnewhealthcheckers)\n+1.  **Data sources health checker** - This checker goes through the data sources that are configured in the `<API-M_HOME>/repository/conf/deployment.toml` file and checks if the active connection count surpasses a healthy percentage limit (e.g., 80%) of the maximum allowed connections count. This checker also tests the connection from each data source to see whether the connection is successful.\n+2.  **User store health checker** - This checker iterates through configured user stores of the super tenant domain and attempts to invoke the `isExistingUser` method to check whether a failure occurs.\n \n !!! note\n-**Note:** This API is only supported for WSO2 Carbon products that are running on Java 8 or a later version.\n-\n-\n-There are three health checkers available by default:\n-\n-1.  **Data sources health checker** - This checker goes through the data sources that are configured in the `master-datasources.xml` file and checks if the active connection count surpasses a healthy percentage limit (e.g., 80%) of the maximum allowed connections count. This checker also tests the connection from each data source to see whether the connection is successful.\n-2.  **Server startup health checker** - This checker uses the ServerAdmin service to check if the server status is RUNNING.\n-3.  **Super tenant user store health checker** - This checker iterates through configured user stores of the super tenant domain and attempts to invoke the `isExistingUser` method to check whether a failure occurs.\n+    This API is only supported for WSO2 API Manager that runs on Java 8 or a later version.\n \n ### Deploying the API\n \n-!!! warning\n-This API is supported by default from WSO2 Identity Server 5.7.0 onwards. It is available by default for WSO2 IS versions 5.5.0 and 5.6.0 only as a WUM update. For more information on how to update using WUM, see [Getting WSO2 Updates](https://docs.wso2.com/display/ADMIN44x/Getting+WSO2+Updates) documentation.\n+This section guides you through deploying the Carbon Health Check components in WSO2 API Manager\n \n-**If you are using a WSO2 product version that supports this feature by default (either in a fresh pack or via a WUM update), skip the instructions in this section and proceed **to the [configuring the API](#MonitoringServerHealth-ConfiguringtheAPI) section.**\n+1. Fork the following GitHub repository.\n \n+     ```https://github.com/wso2/carbon-health-check```\n+     \n+2. Navigate to the place where you want to clone the repo and clone the forked repository. \n \n+     ```git clone https://github.com/[git-username]/carbon-health-check```  \n+   \n+3. Forked Repository is referred to as `<HEALTH_CHECK_HOME>` in this document. Navigate to `<HEALTH_CHECK_HOME>` and build the product.\n+    \n+      ```mvn clean install```\n+      \n+4.  Rename `org.wso2.carbon.healthcheck.api.core-<version-number>-SNAPSHOT.jar` found in the `<HEALTH_CHECK_HOME>/components/org.wso2.carbon.healthcheck.api.core/target` directory as `org.wso2.carbon.healthcheck.api.core-<version-number>.jar`  and paste it in the `<APIM_HOME>/repository/components/dropins` directory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59c40af02ce240f227fc32c65e2fc722789baa77"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY1MzIzMQ==", "bodyText": "what do you mean by the properties will be available at runtime?", "url": "https://github.com/wso2/docs-apim/pull/2168#discussion_r526653231", "createdAt": "2020-11-19T07:46:14Z", "author": {"login": "shaniR"}, "path": "en/docs/administer/logging-and-monitoring/monitoring/monitoring-server-health.md", "diffHunk": "@@ -1,118 +1,163 @@\n # Monitoring Server Health\n \n-!!! warning\n-This document is work in progress!\n+**Health Check API** is used to validate and verify the status of the APIM server and its dependencies\n+It is a REST service which returns the operational status, performance information of the configured endpoints with appropriate HTTP return code and a JSON object\n+There are two health checkers available by default:\n \n-\n-The Carbon Health Check API can be used to check the health of a Carbon server. The sections below guide you through using this API.\n-\n--   [Deploying the API](#MonitoringServerHealth-DeployingtheAPI)\n--   [Configuring the API](#MonitoringServerHealth-ConfiguringtheAPI)\n--   [Invoking the API](#MonitoringServerHealth-InvokingtheAPI)\n--   [Error responses](#MonitoringServerHealth-Errorresponses)\n--   [Adding new health checkers](#MonitoringServerHealth-Addingnewhealthcheckers)\n+1.  **Data sources health checker** - This checker goes through the data sources that are configured in the `<API-M_HOME>/repository/conf/deployment.toml` file and checks if the active connection count surpasses a healthy percentage limit (e.g., 80%) of the maximum allowed connections count. This checker also tests the connection from each data source to see whether the connection is successful.\n+2.  **User store health checker** - This checker iterates through configured user stores of the super tenant domain and attempts to invoke the `isExistingUser` method to check whether a failure occurs.\n \n !!! note\n-**Note:** This API is only supported for WSO2 Carbon products that are running on Java 8 or a later version.\n-\n-\n-There are three health checkers available by default:\n-\n-1.  **Data sources health checker** - This checker goes through the data sources that are configured in the `master-datasources.xml` file and checks if the active connection count surpasses a healthy percentage limit (e.g., 80%) of the maximum allowed connections count. This checker also tests the connection from each data source to see whether the connection is successful.\n-2.  **Server startup health checker** - This checker uses the ServerAdmin service to check if the server status is RUNNING.\n-3.  **Super tenant user store health checker** - This checker iterates through configured user stores of the super tenant domain and attempts to invoke the `isExistingUser` method to check whether a failure occurs.\n+    This API is only supported for WSO2 API Manager that runs on Java 8 or a later version.\n \n ### Deploying the API\n \n-!!! warning\n-This API is supported by default from WSO2 Identity Server 5.7.0 onwards. It is available by default for WSO2 IS versions 5.5.0 and 5.6.0 only as a WUM update. For more information on how to update using WUM, see [Getting WSO2 Updates](https://docs.wso2.com/display/ADMIN44x/Getting+WSO2+Updates) documentation.\n+This section guides you through deploying the Carbon Health Check components in WSO2 API Manager\n \n-**If you are using a WSO2 product version that supports this feature by default (either in a fresh pack or via a WUM update), skip the instructions in this section and proceed **to the [configuring the API](#MonitoringServerHealth-ConfiguringtheAPI) section.**\n+1. Fork the following GitHub repository.\n \n+     ```https://github.com/wso2/carbon-health-check```\n+     \n+2. Navigate to the place where you want to clone the repo and clone the forked repository. \n \n+     ```git clone https://github.com/[git-username]/carbon-health-check```  \n+   \n+3. Forked Repository is referred to as `<HEALTH_CHECK_HOME>` in this document. Navigate to `<HEALTH_CHECK_HOME>` and build the product.\n+    \n+      ```mvn clean install```\n+      \n+4.  Rename `org.wso2.carbon.healthcheck.api.core-<version-number>-SNAPSHOT.jar` found in the `<HEALTH_CHECK_HOME>/components/org.wso2.carbon.healthcheck.api.core/target` directory as `org.wso2.carbon.healthcheck.api.core-<version-number>.jar`  and paste it in the `<APIM_HOME>/repository/components/dropins` directory.\n \n-This section guides you through deploying the Carbon Health Check components in a WSO2 Carbon product that does not support this feature by default.\n+5.  Copy the webapp `api#health-check#v1.0.war` found in the `<HEALTH_CHECK_HOME>//components/org.wso2.carbon.healthcheck.api.endpoint/target/` directory and paste it in the the `<APIM_HOME>/repository/deployment/server/webapps` directory.\n \n-1.  Download the [org.wso2.carbon.healthcheck.server.feature-&lt;version-number&gt;.zip]({{base_path}}/assets/attachments/126562954/126562955.zip) and extract it. This folder is reffered to as `<API_HOME>` in this document.\n-2.  Copy the `org.wso2.carbon.healthcheck.api.core-<version-number>.jar` found in the `<API_HOME>/plugins` directory and paste it in the `<PRODUCT_HOME>/repository/components/dropins` directory.\n-3.  Copy the webapp `api#health-check#v1.0.war` found in the `<API_HOME>/features/org.wso2.carbon.healthcheck.server_1.0.0` directory and paste it in the the `<PRODUCT_HOME>/repository/deployment/server/webapps` directory.\n-4.  **(Optional step)** Copy the `health-check.config.xml` configuration file found in the `<API_HOME>/features/org.wso2.carbon.healthcheck.server_1.0.0` directory to your `<PRODUCT_HOME>/repository/conf/` directory.\n+### Configuring and invoking the API\n \n-### Configuring the API\n+This feature is disabled by default. To enable the API open the `<API-M_HOME>/repository/conf/deployment.toml` configuration file and update it as follows:.\n+    \n+```\n+[carbon_health_check]\n+enable = true\n+```\n \n-This feature is disabled by default. To enable the API, set the `<Enable>` property in the `health-check-config.xml` file to **true** .\n+This is an open API that should ideally be blocked at the load balancer level. To invoke it, start the WSO2 product and send a GET request to the health check API. A sample cURL command is shown below.\n \n-!!! tip\n-If the feature has not been enabled successfully , a request to the API will only return a 200 OK response.\n+``` java\n+    curl -k -v https://{hostname}:{port}/api/health-check/v1.0/health\n+```  \n+   \n+Data sources health checker and User store health checker will get enabled when you enable health checkers using above global configuration. \n+The properties configured under each health checker will be available for each health checker at runtime.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59c40af02ce240f227fc32c65e2fc722789baa77"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY1Mzg2Mw==", "bodyText": "can I select which user stories to be configured? if so how do I specify which user store? what is the value I should add?", "url": "https://github.com/wso2/docs-apim/pull/2168#discussion_r526653863", "createdAt": "2020-11-19T07:47:31Z", "author": {"login": "shaniR"}, "path": "en/docs/administer/logging-and-monitoring/monitoring/monitoring-server-health.md", "diffHunk": "@@ -1,118 +1,163 @@\n # Monitoring Server Health\n \n-!!! warning\n-This document is work in progress!\n+**Health Check API** is used to validate and verify the status of the APIM server and its dependencies\n+It is a REST service which returns the operational status, performance information of the configured endpoints with appropriate HTTP return code and a JSON object\n+There are two health checkers available by default:\n \n-\n-The Carbon Health Check API can be used to check the health of a Carbon server. The sections below guide you through using this API.\n-\n--   [Deploying the API](#MonitoringServerHealth-DeployingtheAPI)\n--   [Configuring the API](#MonitoringServerHealth-ConfiguringtheAPI)\n--   [Invoking the API](#MonitoringServerHealth-InvokingtheAPI)\n--   [Error responses](#MonitoringServerHealth-Errorresponses)\n--   [Adding new health checkers](#MonitoringServerHealth-Addingnewhealthcheckers)\n+1.  **Data sources health checker** - This checker goes through the data sources that are configured in the `<API-M_HOME>/repository/conf/deployment.toml` file and checks if the active connection count surpasses a healthy percentage limit (e.g., 80%) of the maximum allowed connections count. This checker also tests the connection from each data source to see whether the connection is successful.\n+2.  **User store health checker** - This checker iterates through configured user stores of the super tenant domain and attempts to invoke the `isExistingUser` method to check whether a failure occurs.\n \n !!! note\n-**Note:** This API is only supported for WSO2 Carbon products that are running on Java 8 or a later version.\n-\n-\n-There are three health checkers available by default:\n-\n-1.  **Data sources health checker** - This checker goes through the data sources that are configured in the `master-datasources.xml` file and checks if the active connection count surpasses a healthy percentage limit (e.g., 80%) of the maximum allowed connections count. This checker also tests the connection from each data source to see whether the connection is successful.\n-2.  **Server startup health checker** - This checker uses the ServerAdmin service to check if the server status is RUNNING.\n-3.  **Super tenant user store health checker** - This checker iterates through configured user stores of the super tenant domain and attempts to invoke the `isExistingUser` method to check whether a failure occurs.\n+    This API is only supported for WSO2 API Manager that runs on Java 8 or a later version.\n \n ### Deploying the API\n \n-!!! warning\n-This API is supported by default from WSO2 Identity Server 5.7.0 onwards. It is available by default for WSO2 IS versions 5.5.0 and 5.6.0 only as a WUM update. For more information on how to update using WUM, see [Getting WSO2 Updates](https://docs.wso2.com/display/ADMIN44x/Getting+WSO2+Updates) documentation.\n+This section guides you through deploying the Carbon Health Check components in WSO2 API Manager\n \n-**If you are using a WSO2 product version that supports this feature by default (either in a fresh pack or via a WUM update), skip the instructions in this section and proceed **to the [configuring the API](#MonitoringServerHealth-ConfiguringtheAPI) section.**\n+1. Fork the following GitHub repository.\n \n+     ```https://github.com/wso2/carbon-health-check```\n+     \n+2. Navigate to the place where you want to clone the repo and clone the forked repository. \n \n+     ```git clone https://github.com/[git-username]/carbon-health-check```  \n+   \n+3. Forked Repository is referred to as `<HEALTH_CHECK_HOME>` in this document. Navigate to `<HEALTH_CHECK_HOME>` and build the product.\n+    \n+      ```mvn clean install```\n+      \n+4.  Rename `org.wso2.carbon.healthcheck.api.core-<version-number>-SNAPSHOT.jar` found in the `<HEALTH_CHECK_HOME>/components/org.wso2.carbon.healthcheck.api.core/target` directory as `org.wso2.carbon.healthcheck.api.core-<version-number>.jar`  and paste it in the `<APIM_HOME>/repository/components/dropins` directory.\n \n-This section guides you through deploying the Carbon Health Check components in a WSO2 Carbon product that does not support this feature by default.\n+5.  Copy the webapp `api#health-check#v1.0.war` found in the `<HEALTH_CHECK_HOME>//components/org.wso2.carbon.healthcheck.api.endpoint/target/` directory and paste it in the the `<APIM_HOME>/repository/deployment/server/webapps` directory.\n \n-1.  Download the [org.wso2.carbon.healthcheck.server.feature-&lt;version-number&gt;.zip]({{base_path}}/assets/attachments/126562954/126562955.zip) and extract it. This folder is reffered to as `<API_HOME>` in this document.\n-2.  Copy the `org.wso2.carbon.healthcheck.api.core-<version-number>.jar` found in the `<API_HOME>/plugins` directory and paste it in the `<PRODUCT_HOME>/repository/components/dropins` directory.\n-3.  Copy the webapp `api#health-check#v1.0.war` found in the `<API_HOME>/features/org.wso2.carbon.healthcheck.server_1.0.0` directory and paste it in the the `<PRODUCT_HOME>/repository/deployment/server/webapps` directory.\n-4.  **(Optional step)** Copy the `health-check.config.xml` configuration file found in the `<API_HOME>/features/org.wso2.carbon.healthcheck.server_1.0.0` directory to your `<PRODUCT_HOME>/repository/conf/` directory.\n+### Configuring and invoking the API\n \n-### Configuring the API\n+This feature is disabled by default. To enable the API open the `<API-M_HOME>/repository/conf/deployment.toml` configuration file and update it as follows:.\n+    \n+```\n+[carbon_health_check]\n+enable = true\n+```\n \n-This feature is disabled by default. To enable the API, set the `<Enable>` property in the `health-check-config.xml` file to **true** .\n+This is an open API that should ideally be blocked at the load balancer level. To invoke it, start the WSO2 product and send a GET request to the health check API. A sample cURL command is shown below.\n \n-!!! tip\n-If the feature has not been enabled successfully , a request to the API will only return a 200 OK response.\n+``` java\n+    curl -k -v https://{hostname}:{port}/api/health-check/v1.0/health\n+```  \n+   \n+Data sources health checker and User store health checker will get enabled when you enable health checkers using above global configuration. \n+The properties configured under each health checker will be available for each health checker at runtime.\n \n+#### DataSource Health Checker\n \n-**Sample health-check-config.xml file**\n+This health checker returns the status of the data sources available in the system.\n+To indicate the data source connection pool usage and specify the order, use the following configurations to the `/repository/conf/deployment` file.\n \n-``` java\n-    <CarbonHealthCheckConfigs>\n-        <Enable>true</Enable>\n-        <HealthCheckers>\n-            <HealthChecker name=\"DataSourceHealthChecker\" orderId=\"97\" enable=\"true\">\n-                <!--<Property name=\"monitored.datasources\">jdbc/WSO2CarbonDB,jdbc/WSO2MetricsDB,jdbc/WSO2UMDB</Property>-->\n-                <Property name=\"pool.usage.limit.percentage\">80</Property>\n-            </HealthChecker>\n-            <HealthChecker name=\"SuperTenantUSHealthChecker\" orderId=\"98\" enable=\"true\">\n-                <!--<Property name=\"monitored.user.stores\">primary,sec</Property>-->\n-            </HealthChecker>\n-        </HealthCheckers>\n-    </CarbonHealthCheckConfigs>\n ```\n+    [carbon_health_check.health_checker.data_source_health_checker]\n+    enable = true\n+    pool_usage_limit_percentage = \"80\"\n+    order = \"97\"\n \n--   A health checker can be enabled or disabled using the **`enable`** attribute.\n--   The execution order in which the health checkers are executes can be configured using the **`orderId`** attribute.\n--   The properties configured under each health checker will be available for each heath checker at runtime.\n+    [carbon_health_check.health_checker.data_source_health_checker.properties]\n+    'monitored.datasources' = \"jdbc/WSO2CarbonDB,jdbc/WSO2AM_DB,jdbc/SHARED_DB\"\n+```   \n \n-### Invoking the API\n+| **Configuration**                               | **Description**                          |\n+    | ---------------------------------------------| ------------------------------------ |\n+    |enable                                        | The configuration element is to enable DataSource Health Checker. When `carbon_health_check` is enabled this config will get enabled by default.  |\n+    |pool_usage_limit_percentage                   | This config is used to specify a healthy percentage limit of the maximum allowed connections count. Data health checker checks if the active connection count surpasses the given healthy percentage limit. The default value is `80`. |\n+    |order                                         | The execution order in which the Data Source Health checker is executed. The default value is `97`.|\n+    |monitored.datasources                         | This config is used to specify the Data Sources to be monitored as comma-separated values.|\n+ \n \n-This is an open API which should ideally be blocked at the load balancer level. To invoke it, start the WSO2 product and send a GET request to the health check API. A sample cURL command is shown below.\n+When you invoke the API and User Stores are healthy you can see a response as below:\n \n-``` java\n-    curl -k -v https://{hostname}:{port}/api/health-check/v1.0/health\n ```\n-\n-If the request is successful, you will recieve a 200 OK response (similar to the one shown below) with a list of health check results.\n-\n-``` java\n-    {  \n-       \"health\":[  \n-          {  \n+    {\n+       \"health\":[\n+          {\n+             \"key\":\"jdbc/SHARED_DB.connectivity.time.ms\",\n+             \"value\":\"0\"\n+          },\n+          {\n+             \"key\":\"WSO2MBStoreDB.connectivity.time.ms\",\n+             \"value\":\"0\"\n+          },\n+          {\n+             \"key\":\"jdbc/WSO2CarbonDB.connectivity.time.ms\",\n+             \"value\":\"0\"\n+          },\n+          {\n+             \"key\":\"jdbc/WSO2AM_DB.connectivity.time.ms\",\n+             \"value\":\"0\"\n+          },\n+          {\n              \"key\":\"jdbc/WSO2CarbonDB.active.connection.count\",\n              \"value\":\"1\"\n           },\n-          {  \n-             \"key\":\"bpsds.active.connection.count\",\n+          {\n+             \"key\":\"jdbc/WSO2MetricsDB.active.connection.count\",\n              \"value\":\"1\"\n           },\n-          {  \n-             \"key\":\"jdbc/WSO2MetricsDB.connectivityTime.ms\",\n-             \"value\":\"81\"\n+          {\n+             \"key\":\"jdbc/WSO2MetricsDB.connectivity.time.ms\",\n+             \"value\":\"33\"\n           },\n-          {  \n-             \"key\":\"jdbc/WSO2MetricsDB.active.connection.count\",\n+          {\n+             \"key\":\"jdbc/WSO2AM_DB.active.connection.count\",\n              \"value\":\"1\"\n           },\n-          {  \n-             \"key\":\"jdbc/WSO2CarbonDB.connectivityTime.ms\",\n-             \"value\":\"0\"\n+          {\n+             \"key\":\"jdbc/SHARED_DB.active.connection.count\",\n+             \"value\":\"1\"\n           },\n-          {  \n-             \"key\":\"bpsds.connectivityTime.ms\",\n-             \"value\":\"0\"\n+          {\n+             \"key\":\"WSO2MBStoreDB.active.connection.count\",\n+             \"value\":\"1\"\n           }\n        ]\n     }\n ```\n \n -   The `active.connection.count` parameter reflects the number of connections that are active.\n \n--`ConnectivityTime` refers to the the duration of the connection.\n+-   `ConnectivityTime` refers to the duration of the connection.\n+\n+#### User Store Health Checker\n+\n+This health checker returns the status of the user stores available in the system. You can configure the user stores to be monitored by adding the following configuration.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59c40af02ce240f227fc32c65e2fc722789baa77"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjY1NTU0NQ==", "bodyText": "highest is given priorty or lowest?", "url": "https://github.com/wso2/docs-apim/pull/2168#discussion_r526655545", "createdAt": "2020-11-19T07:50:58Z", "author": {"login": "shaniR"}, "path": "en/docs/administer/logging-and-monitoring/monitoring/monitoring-server-health.md", "diffHunk": "@@ -1,118 +1,163 @@\n # Monitoring Server Health\n \n-!!! warning\n-This document is work in progress!\n+**Health Check API** is used to validate and verify the status of the APIM server and its dependencies\n+It is a REST service which returns the operational status, performance information of the configured endpoints with appropriate HTTP return code and a JSON object\n+There are two health checkers available by default:\n \n-\n-The Carbon Health Check API can be used to check the health of a Carbon server. The sections below guide you through using this API.\n-\n--   [Deploying the API](#MonitoringServerHealth-DeployingtheAPI)\n--   [Configuring the API](#MonitoringServerHealth-ConfiguringtheAPI)\n--   [Invoking the API](#MonitoringServerHealth-InvokingtheAPI)\n--   [Error responses](#MonitoringServerHealth-Errorresponses)\n--   [Adding new health checkers](#MonitoringServerHealth-Addingnewhealthcheckers)\n+1.  **Data sources health checker** - This checker goes through the data sources that are configured in the `<API-M_HOME>/repository/conf/deployment.toml` file and checks if the active connection count surpasses a healthy percentage limit (e.g., 80%) of the maximum allowed connections count. This checker also tests the connection from each data source to see whether the connection is successful.\n+2.  **User store health checker** - This checker iterates through configured user stores of the super tenant domain and attempts to invoke the `isExistingUser` method to check whether a failure occurs.\n \n !!! note\n-**Note:** This API is only supported for WSO2 Carbon products that are running on Java 8 or a later version.\n-\n-\n-There are three health checkers available by default:\n-\n-1.  **Data sources health checker** - This checker goes through the data sources that are configured in the `master-datasources.xml` file and checks if the active connection count surpasses a healthy percentage limit (e.g., 80%) of the maximum allowed connections count. This checker also tests the connection from each data source to see whether the connection is successful.\n-2.  **Server startup health checker** - This checker uses the ServerAdmin service to check if the server status is RUNNING.\n-3.  **Super tenant user store health checker** - This checker iterates through configured user stores of the super tenant domain and attempts to invoke the `isExistingUser` method to check whether a failure occurs.\n+    This API is only supported for WSO2 API Manager that runs on Java 8 or a later version.\n \n ### Deploying the API\n \n-!!! warning\n-This API is supported by default from WSO2 Identity Server 5.7.0 onwards. It is available by default for WSO2 IS versions 5.5.0 and 5.6.0 only as a WUM update. For more information on how to update using WUM, see [Getting WSO2 Updates](https://docs.wso2.com/display/ADMIN44x/Getting+WSO2+Updates) documentation.\n+This section guides you through deploying the Carbon Health Check components in WSO2 API Manager\n \n-**If you are using a WSO2 product version that supports this feature by default (either in a fresh pack or via a WUM update), skip the instructions in this section and proceed **to the [configuring the API](#MonitoringServerHealth-ConfiguringtheAPI) section.**\n+1. Fork the following GitHub repository.\n \n+     ```https://github.com/wso2/carbon-health-check```\n+     \n+2. Navigate to the place where you want to clone the repo and clone the forked repository. \n \n+     ```git clone https://github.com/[git-username]/carbon-health-check```  \n+   \n+3. Forked Repository is referred to as `<HEALTH_CHECK_HOME>` in this document. Navigate to `<HEALTH_CHECK_HOME>` and build the product.\n+    \n+      ```mvn clean install```\n+      \n+4.  Rename `org.wso2.carbon.healthcheck.api.core-<version-number>-SNAPSHOT.jar` found in the `<HEALTH_CHECK_HOME>/components/org.wso2.carbon.healthcheck.api.core/target` directory as `org.wso2.carbon.healthcheck.api.core-<version-number>.jar`  and paste it in the `<APIM_HOME>/repository/components/dropins` directory.\n \n-This section guides you through deploying the Carbon Health Check components in a WSO2 Carbon product that does not support this feature by default.\n+5.  Copy the webapp `api#health-check#v1.0.war` found in the `<HEALTH_CHECK_HOME>//components/org.wso2.carbon.healthcheck.api.endpoint/target/` directory and paste it in the the `<APIM_HOME>/repository/deployment/server/webapps` directory.\n \n-1.  Download the [org.wso2.carbon.healthcheck.server.feature-&lt;version-number&gt;.zip]({{base_path}}/assets/attachments/126562954/126562955.zip) and extract it. This folder is reffered to as `<API_HOME>` in this document.\n-2.  Copy the `org.wso2.carbon.healthcheck.api.core-<version-number>.jar` found in the `<API_HOME>/plugins` directory and paste it in the `<PRODUCT_HOME>/repository/components/dropins` directory.\n-3.  Copy the webapp `api#health-check#v1.0.war` found in the `<API_HOME>/features/org.wso2.carbon.healthcheck.server_1.0.0` directory and paste it in the the `<PRODUCT_HOME>/repository/deployment/server/webapps` directory.\n-4.  **(Optional step)** Copy the `health-check.config.xml` configuration file found in the `<API_HOME>/features/org.wso2.carbon.healthcheck.server_1.0.0` directory to your `<PRODUCT_HOME>/repository/conf/` directory.\n+### Configuring and invoking the API\n \n-### Configuring the API\n+This feature is disabled by default. To enable the API open the `<API-M_HOME>/repository/conf/deployment.toml` configuration file and update it as follows:.\n+    \n+```\n+[carbon_health_check]\n+enable = true\n+```\n \n-This feature is disabled by default. To enable the API, set the `<Enable>` property in the `health-check-config.xml` file to **true** .\n+This is an open API that should ideally be blocked at the load balancer level. To invoke it, start the WSO2 product and send a GET request to the health check API. A sample cURL command is shown below.\n \n-!!! tip\n-If the feature has not been enabled successfully , a request to the API will only return a 200 OK response.\n+``` java\n+    curl -k -v https://{hostname}:{port}/api/health-check/v1.0/health\n+```  \n+   \n+Data sources health checker and User store health checker will get enabled when you enable health checkers using above global configuration. \n+The properties configured under each health checker will be available for each health checker at runtime.\n \n+#### DataSource Health Checker\n \n-**Sample health-check-config.xml file**\n+This health checker returns the status of the data sources available in the system.\n+To indicate the data source connection pool usage and specify the order, use the following configurations to the `/repository/conf/deployment` file.\n \n-``` java\n-    <CarbonHealthCheckConfigs>\n-        <Enable>true</Enable>\n-        <HealthCheckers>\n-            <HealthChecker name=\"DataSourceHealthChecker\" orderId=\"97\" enable=\"true\">\n-                <!--<Property name=\"monitored.datasources\">jdbc/WSO2CarbonDB,jdbc/WSO2MetricsDB,jdbc/WSO2UMDB</Property>-->\n-                <Property name=\"pool.usage.limit.percentage\">80</Property>\n-            </HealthChecker>\n-            <HealthChecker name=\"SuperTenantUSHealthChecker\" orderId=\"98\" enable=\"true\">\n-                <!--<Property name=\"monitored.user.stores\">primary,sec</Property>-->\n-            </HealthChecker>\n-        </HealthCheckers>\n-    </CarbonHealthCheckConfigs>\n ```\n+    [carbon_health_check.health_checker.data_source_health_checker]\n+    enable = true\n+    pool_usage_limit_percentage = \"80\"\n+    order = \"97\"\n \n--   A health checker can be enabled or disabled using the **`enable`** attribute.\n--   The execution order in which the health checkers are executes can be configured using the **`orderId`** attribute.\n--   The properties configured under each health checker will be available for each heath checker at runtime.\n+    [carbon_health_check.health_checker.data_source_health_checker.properties]\n+    'monitored.datasources' = \"jdbc/WSO2CarbonDB,jdbc/WSO2AM_DB,jdbc/SHARED_DB\"\n+```   \n \n-### Invoking the API\n+| **Configuration**                               | **Description**                          |\n+    | ---------------------------------------------| ------------------------------------ |\n+    |enable                                        | The configuration element is to enable DataSource Health Checker. When `carbon_health_check` is enabled this config will get enabled by default.  |\n+    |pool_usage_limit_percentage                   | This config is used to specify a healthy percentage limit of the maximum allowed connections count. Data health checker checks if the active connection count surpasses the given healthy percentage limit. The default value is `80`. |\n+    |order                                         | The execution order in which the Data Source Health checker is executed. The default value is `97`.|\n+    |monitored.datasources                         | This config is used to specify the Data Sources to be monitored as comma-separated values.|\n+ \n \n-This is an open API which should ideally be blocked at the load balancer level. To invoke it, start the WSO2 product and send a GET request to the health check API. A sample cURL command is shown below.\n+When you invoke the API and User Stores are healthy you can see a response as below:\n \n-``` java\n-    curl -k -v https://{hostname}:{port}/api/health-check/v1.0/health\n ```\n-\n-If the request is successful, you will recieve a 200 OK response (similar to the one shown below) with a list of health check results.\n-\n-``` java\n-    {  \n-       \"health\":[  \n-          {  \n+    {\n+       \"health\":[\n+          {\n+             \"key\":\"jdbc/SHARED_DB.connectivity.time.ms\",\n+             \"value\":\"0\"\n+          },\n+          {\n+             \"key\":\"WSO2MBStoreDB.connectivity.time.ms\",\n+             \"value\":\"0\"\n+          },\n+          {\n+             \"key\":\"jdbc/WSO2CarbonDB.connectivity.time.ms\",\n+             \"value\":\"0\"\n+          },\n+          {\n+             \"key\":\"jdbc/WSO2AM_DB.connectivity.time.ms\",\n+             \"value\":\"0\"\n+          },\n+          {\n              \"key\":\"jdbc/WSO2CarbonDB.active.connection.count\",\n              \"value\":\"1\"\n           },\n-          {  \n-             \"key\":\"bpsds.active.connection.count\",\n+          {\n+             \"key\":\"jdbc/WSO2MetricsDB.active.connection.count\",\n              \"value\":\"1\"\n           },\n-          {  \n-             \"key\":\"jdbc/WSO2MetricsDB.connectivityTime.ms\",\n-             \"value\":\"81\"\n+          {\n+             \"key\":\"jdbc/WSO2MetricsDB.connectivity.time.ms\",\n+             \"value\":\"33\"\n           },\n-          {  \n-             \"key\":\"jdbc/WSO2MetricsDB.active.connection.count\",\n+          {\n+             \"key\":\"jdbc/WSO2AM_DB.active.connection.count\",\n              \"value\":\"1\"\n           },\n-          {  \n-             \"key\":\"jdbc/WSO2CarbonDB.connectivityTime.ms\",\n-             \"value\":\"0\"\n+          {\n+             \"key\":\"jdbc/SHARED_DB.active.connection.count\",\n+             \"value\":\"1\"\n           },\n-          {  \n-             \"key\":\"bpsds.connectivityTime.ms\",\n-             \"value\":\"0\"\n+          {\n+             \"key\":\"WSO2MBStoreDB.active.connection.count\",\n+             \"value\":\"1\"\n           }\n        ]\n     }\n ```\n \n -   The `active.connection.count` parameter reflects the number of connections that are active.\n \n--`ConnectivityTime` refers to the the duration of the connection.\n+-   `ConnectivityTime` refers to the duration of the connection.\n+\n+#### User Store Health Checker\n+\n+This health checker returns the status of the user stores available in the system. You can configure the user stores to be monitored by adding the following configuration.\n+\n+```\n+    [carbon_health_check.health_checker.data_source_health_checker]\n+    enable =false\n+    order = 98\n+\n+    [carbon_health_check.health_checker.super_tenant_health_checker.properties]\n+    'monitored.user.stores' = \"primary\" \n+```\n+\n+| **Configuration**                               | **Description**                          |\n+    | ---------------------------------------------| ------------------------------------ |\n+    |enable                                        | The configuration element is to enable DataSource Health Checker. When `carbon_health_check` is enabled this config will get enabled by default.  |\n+    |order                                         | The execution order in which the User Store Health checker is executed. The default value is `98`.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59c40af02ce240f227fc32c65e2fc722789baa77"}, "originalPosition": 215}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b46531bca7e350464bf524c5402cd32d6bdb0311", "author": {"user": {"login": "Mariangela", "name": "Mariangela Hills"}}, "url": "https://github.com/wso2/docs-apim/commit/b46531bca7e350464bf524c5402cd32d6bdb0311", "committedDate": "2020-12-02T13:37:09Z", "message": "Reviewed and updated the full doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyODQ0MTQ3", "url": "https://github.com/wso2/docs-apim/pull/2168#pullrequestreview-542844147", "createdAt": "2020-12-02T13:41:01Z", "commit": {"oid": "b46531bca7e350464bf524c5402cd32d6bdb0311"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzo0MTowMVrOH9bZJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMzo0MTowMVrOH9bZJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDE3Mzk4OQ==", "bodyText": "Add // in the path is incorrect.", "url": "https://github.com/wso2/docs-apim/pull/2168#discussion_r534173989", "createdAt": "2020-12-02T13:41:01Z", "author": {"login": "Mariangela"}, "path": "en/mkdocs.yml", "diffHunk": "@@ -501,6 +501,7 @@ nav:\n                 - Enabling Tracing with OpenTracing: administer/logging-and-monitoring/monitoring//monitoring-with-opentracing.md\n                 - JMX-Based Monitoring: administer/logging-and-monitoring/monitoring//jmx-based-monitoring.md\n                 - Monitoring TCP-Based Messages: administer/logging-and-monitoring/monitoring//monitoring-tcp-based-messages.md\n+                - Monitoring Server Health: administer/logging-and-monitoring/monitoring//monitoring-server-health.md", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b46531bca7e350464bf524c5402cd32d6bdb0311"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf6718d6c408ddf35e2f3ffb75826996f600d7ee", "author": {"user": {"login": "Mariangela", "name": "Mariangela Hills"}}, "url": "https://github.com/wso2/docs-apim/commit/bf6718d6c408ddf35e2f3ffb75826996f600d7ee", "committedDate": "2020-12-02T13:45:52Z", "message": "Fixed syntax"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c67fcb6d7e8567ad4cc97566b4ad7a1c3728485f", "author": {"user": {"login": "Mariangela", "name": "Mariangela Hills"}}, "url": "https://github.com/wso2/docs-apim/commit/c67fcb6d7e8567ad4cc97566b4ad7a1c3728485f", "committedDate": "2020-12-02T14:09:45Z", "message": "Fixed typo in username"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyODcwMzg4", "url": "https://github.com/wso2/docs-apim/pull/2168#pullrequestreview-542870388", "createdAt": "2020-12-02T14:09:56Z", "commit": {"oid": "bf6718d6c408ddf35e2f3ffb75826996f600d7ee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyOTQ4MjQ1", "url": "https://github.com/wso2/docs-apim/pull/2168#pullrequestreview-542948245", "createdAt": "2020-12-02T15:24:22Z", "commit": {"oid": "c67fcb6d7e8567ad4cc97566b4ad7a1c3728485f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1636, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}