{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczMjY0MDQy", "number": 1793, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzozMzo0MFrOEccxyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzozNTo0NlrOEcc0lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjY3MDgxOnYy", "diffSide": "RIGHT", "path": "en/docs/install-and-setup/setup/distributed-deployment/synchronizing-artifacts-in-a-gateway-cluster.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzozMzo0MFrOHG_fFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzozMzo0MFrOHG_fFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MzY1NA==", "bodyText": "what are the possible values for this?", "url": "https://github.com/wso2/docs-apim/pull/1793#discussion_r477093654", "createdAt": "2020-08-26T07:33:40Z", "author": {"login": "isharac"}, "path": "en/docs/install-and-setup/setup/distributed-deployment/synchronizing-artifacts-in-a-gateway-cluster.md", "diffHunk": "@@ -0,0 +1,227 @@\n+# Synchronizing Artifacts in a Gateway Cluster\n+\n+In a API-M Gateway cluster, artifact synchronization is critical to maintain consistency among the nodes. WSO2 API-M provides three mechanisms for artifact synchronization. \n+\n+1. [Shared file system (e.g.NFS)]({{base_path}}/install-and-setup/setup/distributed-deployment/synchronizing-artifacts-in-a-gateway-cluster/#artifact-synchronization-with-a-shared-file-system)\n+2. [Inbuilt artifact synchronizer]({{base_path}}/install-and-setup/setup/distributed-deployment/synchronizing-artifacts-in-a-gateway-cluster/#inbuilt-artifact-synchronization) \n+3. [rsync]({{base_path}}/install-and-setup/setup/distributed-deployment/synchronizing-artifacts-in-a-gateway-cluster/#artifact-synchronization-with-rsync)\n+\n+## Artifact Synchronization with a Shared File System\n+\n+To enable synchronization for runtime artifacts of the two all in one WSO2 API-M instances, it is recommended to have a\n+shared file system. Configure a shared file system as the content synchronization mechanism.\u00a0You can use a common shared file \n+system such as Network File System (NFS) or any other shared file system that is available.\u00a0\n+\n+You need to mount the `<API-M_HOME>/repository/deployment/server` directory of the two nodes to the shared file system, \n+in order to share all APIs and throttling policies between all the nodes.\n+\n+## Inbuilt Artifact Synchronization\n+\n+#### Overview\n+\n+Currently, in a multi gateway environment, synapse artifacts such as sequences, local entries, endpoints are saved at the `<APIM_HOME>/repository/deployment/server/synapse-configs/default` directory as XMLs. These artifacts has to be synced between all the gateway nodes using a artifact synchronizing mechanism. \n+When using NFS we need to manage additional components which brings in changes to the current architecture. Thus, an inbuilt artifact synchronization solution is introduced. This inbuilt artifact synchronizer can be configurable to store these synapse artifacts to an extension point(configured persistent storage) .\n+\n+The behaviour of the inbuilt artifact synchronizer in different scenarios, is described below.\n+\n+#### Artifact Synchronization When The API Gateway is Running\n+\n+  [![]({{base_path}}/assets/img/learn/artifact-synchronizer-architecture.png)]({{base_path}}/assets/img/learn/artifact-synchronizer-architecture.png)\n+\n+1. In the event an API is published, edited, or removed, the synapse artifact corresponding to the API will be stored/updated in the configured extension point.. \n+2. Then an event will be sent to Traffic Manager(TM) using event notifiers with API Name, UUID, and the gateway label\n+ for the API.\n+3. In a distributed deployment, gateways are subscribed to the Traffic Manager topics. API Gateway will filter out the events by the Gateway label. It will also sort the APIs that has the gateway label. \n+4. Then it will fetch the artifacts associated with the API from the storage (Database or Github) and load it to the\n+ memory.\n+\n+An extension point needs to be configured in the publisher profile to store the synapse artifacts in a persistent storage other than the default API-M database. When an API is published, edited, or removed, an event will be sent to Traffic Manager using Event Notifiers with API Name, UUID, and the gateway label for the API.\n+\n+\n+#### Artifact Synchronization at API Gateway startup\n+\n+\n+  [![]({{base_path}}/assets/img/learn/gateway-startup.png)]({{base_path}}/assets/img/learn/gateway-startup.png)\n+  \n+At startup, the gateway will look for the APIs with labels which it is subscribed to, in the configured extension, and fetch the synapse artifacts of those APIs. Those synapse artifacts will get deployed in the gateway.\n+\n+Gateways are subscribed to the traffic manager. There is an extension in the gateway to get the synapse artifacts and deploy them in the memory. Gateways can subscribe to multiple labels.\n+\n+##Configuring the Inbuilt Artifact Synchronizer\n+\n+Configure the Gateway and Publisher profiles as below to enable artifact synchronization and retrieval from confgured extension points.\n+\n+###Publisher Profile \n+\n+1. Stop the Publisher node if it running.\n+2. Open the file  `<API-M_HOME>/repository/conf/deployment.toml` and update as follows.\n+    ```\n+    [apim.sync_runtime_artifacts.publisher]\n+    artifact_saver = \"DBSaver\"\n+    publish_directly_to_gateway = \"true\"\n+    ```\n+    \n+    | Configuration                                    | Description                          |\n+    | -------------------------------------------------| ------------------------------------ |\n+    |apim.sync_runtime_artifacts.publisher            | configuration element then all the artifacts will be saved to the storage via  the extension point. In default they will get stored in database|\n+    |artifact_saver|specify the extension point. The default is `DBSaver` where the artifacts are saved in the database.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17f7fbc9c48e5df81d43cc0c3864feaa5a796a68"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjY3MTI5OnYy", "diffSide": "RIGHT", "path": "en/docs/install-and-setup/setup/distributed-deployment/synchronizing-artifacts-in-a-gateway-cluster.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzozMzo1MVrOHG_fag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzozMzo1MVrOHG_fag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MzczOA==", "bodyText": "Any other possible values?", "url": "https://github.com/wso2/docs-apim/pull/1793#discussion_r477093738", "createdAt": "2020-08-26T07:33:51Z", "author": {"login": "isharac"}, "path": "en/docs/install-and-setup/setup/distributed-deployment/synchronizing-artifacts-in-a-gateway-cluster.md", "diffHunk": "@@ -0,0 +1,227 @@\n+# Synchronizing Artifacts in a Gateway Cluster\n+\n+In a API-M Gateway cluster, artifact synchronization is critical to maintain consistency among the nodes. WSO2 API-M provides three mechanisms for artifact synchronization. \n+\n+1. [Shared file system (e.g.NFS)]({{base_path}}/install-and-setup/setup/distributed-deployment/synchronizing-artifacts-in-a-gateway-cluster/#artifact-synchronization-with-a-shared-file-system)\n+2. [Inbuilt artifact synchronizer]({{base_path}}/install-and-setup/setup/distributed-deployment/synchronizing-artifacts-in-a-gateway-cluster/#inbuilt-artifact-synchronization) \n+3. [rsync]({{base_path}}/install-and-setup/setup/distributed-deployment/synchronizing-artifacts-in-a-gateway-cluster/#artifact-synchronization-with-rsync)\n+\n+## Artifact Synchronization with a Shared File System\n+\n+To enable synchronization for runtime artifacts of the two all in one WSO2 API-M instances, it is recommended to have a\n+shared file system. Configure a shared file system as the content synchronization mechanism.\u00a0You can use a common shared file \n+system such as Network File System (NFS) or any other shared file system that is available.\u00a0\n+\n+You need to mount the `<API-M_HOME>/repository/deployment/server` directory of the two nodes to the shared file system, \n+in order to share all APIs and throttling policies between all the nodes.\n+\n+## Inbuilt Artifact Synchronization\n+\n+#### Overview\n+\n+Currently, in a multi gateway environment, synapse artifacts such as sequences, local entries, endpoints are saved at the `<APIM_HOME>/repository/deployment/server/synapse-configs/default` directory as XMLs. These artifacts has to be synced between all the gateway nodes using a artifact synchronizing mechanism. \n+When using NFS we need to manage additional components which brings in changes to the current architecture. Thus, an inbuilt artifact synchronization solution is introduced. This inbuilt artifact synchronizer can be configurable to store these synapse artifacts to an extension point(configured persistent storage) .\n+\n+The behaviour of the inbuilt artifact synchronizer in different scenarios, is described below.\n+\n+#### Artifact Synchronization When The API Gateway is Running\n+\n+  [![]({{base_path}}/assets/img/learn/artifact-synchronizer-architecture.png)]({{base_path}}/assets/img/learn/artifact-synchronizer-architecture.png)\n+\n+1. In the event an API is published, edited, or removed, the synapse artifact corresponding to the API will be stored/updated in the configured extension point.. \n+2. Then an event will be sent to Traffic Manager(TM) using event notifiers with API Name, UUID, and the gateway label\n+ for the API.\n+3. In a distributed deployment, gateways are subscribed to the Traffic Manager topics. API Gateway will filter out the events by the Gateway label. It will also sort the APIs that has the gateway label. \n+4. Then it will fetch the artifacts associated with the API from the storage (Database or Github) and load it to the\n+ memory.\n+\n+An extension point needs to be configured in the publisher profile to store the synapse artifacts in a persistent storage other than the default API-M database. When an API is published, edited, or removed, an event will be sent to Traffic Manager using Event Notifiers with API Name, UUID, and the gateway label for the API.\n+\n+\n+#### Artifact Synchronization at API Gateway startup\n+\n+\n+  [![]({{base_path}}/assets/img/learn/gateway-startup.png)]({{base_path}}/assets/img/learn/gateway-startup.png)\n+  \n+At startup, the gateway will look for the APIs with labels which it is subscribed to, in the configured extension, and fetch the synapse artifacts of those APIs. Those synapse artifacts will get deployed in the gateway.\n+\n+Gateways are subscribed to the traffic manager. There is an extension in the gateway to get the synapse artifacts and deploy them in the memory. Gateways can subscribe to multiple labels.\n+\n+##Configuring the Inbuilt Artifact Synchronizer\n+\n+Configure the Gateway and Publisher profiles as below to enable artifact synchronization and retrieval from confgured extension points.\n+\n+###Publisher Profile \n+\n+1. Stop the Publisher node if it running.\n+2. Open the file  `<API-M_HOME>/repository/conf/deployment.toml` and update as follows.\n+    ```\n+    [apim.sync_runtime_artifacts.publisher]\n+    artifact_saver = \"DBSaver\"\n+    publish_directly_to_gateway = \"true\"\n+    ```\n+    \n+    | Configuration                                    | Description                          |\n+    | -------------------------------------------------| ------------------------------------ |\n+    |apim.sync_runtime_artifacts.publisher            | configuration element then all the artifacts will be saved to the storage via  the extension point. In default they will get stored in database|\n+    |artifact_saver|specify the extension point. The default is `DBSaver` where the artifacts are saved in the database.|\n+    |publish_directly_to_gateway| If `publish_directly_to_gateway = true` then the artifacts will be published to the gateway directly. If `publish_directly_to_gateway = false` then the published API details will be notified to TM through events.|\n+       \n+  \n+    We can add the gateways as environments. For more information see \n+   [Adding gateways as Environments]({{base_path}}/learn/api-gateway/maintaining-separate-production-and-sandbox-gateways/).\n+\n+###Gateway Profile Configuration\n+\n+1. Stop the Gateway node(s) if it is running.\n+2. Open the file  `<API-M_HOME>/repository/conf/deployment.toml` and update as follows.\n+   \n+    ```\n+    [apim.sync_runtime_artifacts.gateway]\n+    gateway_labels =[\"Production and Sandbox\",\"Label1\",\"Label2\"]\n+    artifact_retriever = \"DBRetriever\"\n+    deployment_retry_duartion = 15000\n+    data_retrieval_mode = \"sync\"\n+    save_artifacts_locally = false\n+    ```\n+ \n+    |Configuration| Description|\n+    |--------------------------------------------------|------------------------------------------------|\n+    |gateway_labels|specify the labels which the gateway is going to subscribe to. Only the APIs with these labels will be pulled from the extension point and deployed.|\n+    |artifact_retriever|  we can specify the extension point. The default is `DBRetriever` where the artifacts are pulled from the database.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17f7fbc9c48e5df81d43cc0c3864feaa5a796a68"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjY3MTkzOnYy", "diffSide": "RIGHT", "path": "en/docs/install-and-setup/setup/distributed-deployment/synchronizing-artifacts-in-a-gateway-cluster.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzozNDowMFrOHG_fvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzozNDowMFrOHG_fvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5MzgyMg==", "bodyText": "we can add this as tab=\"Format\" , tab=\"Example\"", "url": "https://github.com/wso2/docs-apim/pull/1793#discussion_r477093822", "createdAt": "2020-08-26T07:34:00Z", "author": {"login": "isharac"}, "path": "en/docs/install-and-setup/setup/distributed-deployment/synchronizing-artifacts-in-a-gateway-cluster.md", "diffHunk": "@@ -0,0 +1,227 @@\n+# Synchronizing Artifacts in a Gateway Cluster\n+\n+In a API-M Gateway cluster, artifact synchronization is critical to maintain consistency among the nodes. WSO2 API-M provides three mechanisms for artifact synchronization. \n+\n+1. [Shared file system (e.g.NFS)]({{base_path}}/install-and-setup/setup/distributed-deployment/synchronizing-artifacts-in-a-gateway-cluster/#artifact-synchronization-with-a-shared-file-system)\n+2. [Inbuilt artifact synchronizer]({{base_path}}/install-and-setup/setup/distributed-deployment/synchronizing-artifacts-in-a-gateway-cluster/#inbuilt-artifact-synchronization) \n+3. [rsync]({{base_path}}/install-and-setup/setup/distributed-deployment/synchronizing-artifacts-in-a-gateway-cluster/#artifact-synchronization-with-rsync)\n+\n+## Artifact Synchronization with a Shared File System\n+\n+To enable synchronization for runtime artifacts of the two all in one WSO2 API-M instances, it is recommended to have a\n+shared file system. Configure a shared file system as the content synchronization mechanism.\u00a0You can use a common shared file \n+system such as Network File System (NFS) or any other shared file system that is available.\u00a0\n+\n+You need to mount the `<API-M_HOME>/repository/deployment/server` directory of the two nodes to the shared file system, \n+in order to share all APIs and throttling policies between all the nodes.\n+\n+## Inbuilt Artifact Synchronization\n+\n+#### Overview\n+\n+Currently, in a multi gateway environment, synapse artifacts such as sequences, local entries, endpoints are saved at the `<APIM_HOME>/repository/deployment/server/synapse-configs/default` directory as XMLs. These artifacts has to be synced between all the gateway nodes using a artifact synchronizing mechanism. \n+When using NFS we need to manage additional components which brings in changes to the current architecture. Thus, an inbuilt artifact synchronization solution is introduced. This inbuilt artifact synchronizer can be configurable to store these synapse artifacts to an extension point(configured persistent storage) .\n+\n+The behaviour of the inbuilt artifact synchronizer in different scenarios, is described below.\n+\n+#### Artifact Synchronization When The API Gateway is Running\n+\n+  [![]({{base_path}}/assets/img/learn/artifact-synchronizer-architecture.png)]({{base_path}}/assets/img/learn/artifact-synchronizer-architecture.png)\n+\n+1. In the event an API is published, edited, or removed, the synapse artifact corresponding to the API will be stored/updated in the configured extension point.. \n+2. Then an event will be sent to Traffic Manager(TM) using event notifiers with API Name, UUID, and the gateway label\n+ for the API.\n+3. In a distributed deployment, gateways are subscribed to the Traffic Manager topics. API Gateway will filter out the events by the Gateway label. It will also sort the APIs that has the gateway label. \n+4. Then it will fetch the artifacts associated with the API from the storage (Database or Github) and load it to the\n+ memory.\n+\n+An extension point needs to be configured in the publisher profile to store the synapse artifacts in a persistent storage other than the default API-M database. When an API is published, edited, or removed, an event will be sent to Traffic Manager using Event Notifiers with API Name, UUID, and the gateway label for the API.\n+\n+\n+#### Artifact Synchronization at API Gateway startup\n+\n+\n+  [![]({{base_path}}/assets/img/learn/gateway-startup.png)]({{base_path}}/assets/img/learn/gateway-startup.png)\n+  \n+At startup, the gateway will look for the APIs with labels which it is subscribed to, in the configured extension, and fetch the synapse artifacts of those APIs. Those synapse artifacts will get deployed in the gateway.\n+\n+Gateways are subscribed to the traffic manager. There is an extension in the gateway to get the synapse artifacts and deploy them in the memory. Gateways can subscribe to multiple labels.\n+\n+##Configuring the Inbuilt Artifact Synchronizer\n+\n+Configure the Gateway and Publisher profiles as below to enable artifact synchronization and retrieval from confgured extension points.\n+\n+###Publisher Profile \n+\n+1. Stop the Publisher node if it running.\n+2. Open the file  `<API-M_HOME>/repository/conf/deployment.toml` and update as follows.\n+    ```\n+    [apim.sync_runtime_artifacts.publisher]\n+    artifact_saver = \"DBSaver\"\n+    publish_directly_to_gateway = \"true\"\n+    ```\n+    \n+    | Configuration                                    | Description                          |\n+    | -------------------------------------------------| ------------------------------------ |\n+    |apim.sync_runtime_artifacts.publisher            | configuration element then all the artifacts will be saved to the storage via  the extension point. In default they will get stored in database|\n+    |artifact_saver|specify the extension point. The default is `DBSaver` where the artifacts are saved in the database.|\n+    |publish_directly_to_gateway| If `publish_directly_to_gateway = true` then the artifacts will be published to the gateway directly. If `publish_directly_to_gateway = false` then the published API details will be notified to TM through events.|\n+       \n+  \n+    We can add the gateways as environments. For more information see \n+   [Adding gateways as Environments]({{base_path}}/learn/api-gateway/maintaining-separate-production-and-sandbox-gateways/).\n+\n+###Gateway Profile Configuration\n+\n+1. Stop the Gateway node(s) if it is running.\n+2. Open the file  `<API-M_HOME>/repository/conf/deployment.toml` and update as follows.\n+   \n+    ```\n+    [apim.sync_runtime_artifacts.gateway]\n+    gateway_labels =[\"Production and Sandbox\",\"Label1\",\"Label2\"]\n+    artifact_retriever = \"DBRetriever\"\n+    deployment_retry_duartion = 15000\n+    data_retrieval_mode = \"sync\"\n+    save_artifacts_locally = false\n+    ```\n+ \n+    |Configuration| Description|\n+    |--------------------------------------------------|------------------------------------------------|\n+    |gateway_labels|specify the labels which the gateway is going to subscribe to. Only the APIs with these labels will be pulled from the extension point and deployed.|\n+    |artifact_retriever|  we can specify the extension point. The default is `DBRetriever` where the artifacts are pulled from the database.|\n+    |deployment_retry_duartion|We can specify the retry duration in milliseconds to deploy artifacts, if there is a failure in pulling them from the  extension through `deployment_retry_duartion`. The retry duration specified here will be exponentially increased by a progression factor of 2. That means the duration will be progressed as 15s, 30s, 60s, 120s\u2026\u2026. if there are continuous failures. And retry duration is bounded with 1 hr.<html><div class=\"admonition note\"><p class=\"admonition-title\">Note</p><p> This`deployment_retry_duartion` is  applicable only in Asynchronous deployment (`data_retrieval_mode =\"async\"` )where the server will try todeploy the artifacts after it is started. </p></div></html>|\n+    |data_retrieval_mode|Through `data_retrieval_mode = \u201csync\u201d ` we can specify the mode of deployment of artifacts from the extension point. By default gateway Startup will be in a Synchronous manner. Here the server will wait until all the APIs have been deployed. If there is any failure in the deployment, it will again be triggered for n times where n is the maximum retry count. If the APIs are not deployed even in n retries then the server will start with un deployed API artifacts. If the user wants to switch the startup mode to an Asynchronous mode then he needs to specify it in the configs as `data_retrieval_mode = \"async\"`. Here the server will be up, independent of the deployment of synapse artifacts in gateway.|\n+     |save_artifacts_locally|If we add the config `save_artifacts_locally = true` or remove `save_artifacts_locally` config  then synapseartifacts will be stored in the file system. (Saved in `<APIM_HOME>/repository/deployment/server/synapse-configs/default/`) . When `save_artifacts_locally = false` then the artifacts from extension point will not be stored in the file system.|\n+    \n+ 3. If the gateway profile is running with an port offset add the following configuration.\n+     ```\n+     [apim.event_hub]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17f7fbc9c48e5df81d43cc0c3864feaa5a796a68"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MjY3Nzk2OnYy", "diffSide": "RIGHT", "path": "en/docs/install-and-setup/setup/distributed-deployment/synchronizing-artifacts-in-a-gateway-cluster.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzozNTo0NlrOHG_jUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwNzozNTo0NlrOHG_jUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzA5NDczOA==", "bodyText": "If multi-tenancy is used we need to mount <API-M_HOME>/repository/tenants", "url": "https://github.com/wso2/docs-apim/pull/1793#discussion_r477094738", "createdAt": "2020-08-26T07:35:46Z", "author": {"login": "isharac"}, "path": "en/docs/install-and-setup/setup/distributed-deployment/synchronizing-artifacts-in-a-gateway-cluster.md", "diffHunk": "@@ -0,0 +1,227 @@\n+# Synchronizing Artifacts in a Gateway Cluster\n+\n+In a API-M Gateway cluster, artifact synchronization is critical to maintain consistency among the nodes. WSO2 API-M provides three mechanisms for artifact synchronization. \n+\n+1. [Shared file system (e.g.NFS)]({{base_path}}/install-and-setup/setup/distributed-deployment/synchronizing-artifacts-in-a-gateway-cluster/#artifact-synchronization-with-a-shared-file-system)\n+2. [Inbuilt artifact synchronizer]({{base_path}}/install-and-setup/setup/distributed-deployment/synchronizing-artifacts-in-a-gateway-cluster/#inbuilt-artifact-synchronization) \n+3. [rsync]({{base_path}}/install-and-setup/setup/distributed-deployment/synchronizing-artifacts-in-a-gateway-cluster/#artifact-synchronization-with-rsync)\n+\n+## Artifact Synchronization with a Shared File System\n+\n+To enable synchronization for runtime artifacts of the two all in one WSO2 API-M instances, it is recommended to have a\n+shared file system. Configure a shared file system as the content synchronization mechanism.\u00a0You can use a common shared file \n+system such as Network File System (NFS) or any other shared file system that is available.\u00a0\n+\n+You need to mount the `<API-M_HOME>/repository/deployment/server` directory of the two nodes to the shared file system, \n+in order to share all APIs and throttling policies between all the nodes.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17f7fbc9c48e5df81d43cc0c3864feaa5a796a68"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1570, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}