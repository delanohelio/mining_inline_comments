{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNDUwNjY1", "number": 2635, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMzozNjo0MlrOFIArEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMzozNjo0MlrOFIArEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzOTQzOTUyOnYy", "diffSide": "RIGHT", "path": "en/docs/design/api-security/oauth2/oauth2-scopes/fine-grained-access-control-with-oauth-scopes.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwMzozNjo0MlrOIJtN1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQwNDoyOTozN1rOIJt_kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0ODkxNw==", "bodyText": "Instead of above shall we add instructions on both ways,\n\nadding it to startup script\nproviding it during server startup time\n\nsimilar to https://apim.docs.wso2.com/en/next/install-and-setup/setup/security/logins-and-passwords/set-passwords-using-vars-and-sys-props/#set-passwords-using-system-properties", "url": "https://github.com/wso2/docs-apim/pull/2635#discussion_r547048917", "createdAt": "2020-12-22T03:36:42Z", "author": {"login": "dushaniw"}, "path": "en/docs/design/api-security/oauth2/oauth2-scopes/fine-grained-access-control-with-oauth-scopes.md", "diffHunk": "@@ -4,6 +4,14 @@ Scopes enable fine-grained access control to API resources based on user roles.\n \n For example, there can be requirements such as restricting the access to a given API resource to admin users only, while other resources of the same API access should be allowed to consumers with less privileges. Let's see how this kind of role based access control can be managed with the use of OAuth2 scopes.\n \n+!!! info\n+\n+    When creating scopes, it validates the added roles against the underline user store to check if they exist. However, we can override this behavior that it does not validate the roles in the user store. For this purpose, set the Java system property 'disableRoleValidationAtScopeCreation' to 'true' at the server startup:\n+         \n+         Open <API-M_HOME>/bin/wso2server.(sh|bat) file.\n+         Add -DdisableRoleValidationAtScopeCreation=true at the end of the file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d85daceeef63d1e7c329c11a35094f3c1b72a25b"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA2MTY1MA==", "bodyText": "+1", "url": "https://github.com/wso2/docs-apim/pull/2635#discussion_r547061650", "createdAt": "2020-12-22T04:29:37Z", "author": {"login": "isharac"}, "path": "en/docs/design/api-security/oauth2/oauth2-scopes/fine-grained-access-control-with-oauth-scopes.md", "diffHunk": "@@ -4,6 +4,14 @@ Scopes enable fine-grained access control to API resources based on user roles.\n \n For example, there can be requirements such as restricting the access to a given API resource to admin users only, while other resources of the same API access should be allowed to consumers with less privileges. Let's see how this kind of role based access control can be managed with the use of OAuth2 scopes.\n \n+!!! info\n+\n+    When creating scopes, it validates the added roles against the underline user store to check if they exist. However, we can override this behavior that it does not validate the roles in the user store. For this purpose, set the Java system property 'disableRoleValidationAtScopeCreation' to 'true' at the server startup:\n+         \n+         Open <API-M_HOME>/bin/wso2server.(sh|bat) file.\n+         Add -DdisableRoleValidationAtScopeCreation=true at the end of the file.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzA0ODkxNw=="}, "originalCommit": {"oid": "d85daceeef63d1e7c329c11a35094f3c1b72a25b"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1780, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}