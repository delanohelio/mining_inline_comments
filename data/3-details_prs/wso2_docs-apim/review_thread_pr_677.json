{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NDUxNjEy", "number": 677, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMjoxMDozOFrODa2vzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMjoyNjo1OFrODa3B8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDg2NTQyOnYy", "diffSide": "RIGHT", "path": "en/docs/Learn/APIController/ci-cd-with-wso2-api-management.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMjoxMDozOFrOFiAlzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwOTo0ODo1OVrOFieuzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIwNTU4MA==", "bodyText": "Shall we change this as,\nAPI Developers can use WSO2 API Manager's Publisher Portal to create an API in a lower environment. CI/CD for API Manager relies on a Version Control system that acts as a Single Source of Truth for the pipeline. So, after the API is exported from the lower environment, the exported API artifacts can be committed to a source code management repository and the promotion of the APIs to the upper environments can be done after running the tests in the lower environment. This process of promoting the API seamlessly to multiple environments can be automated via the apictl and well-configured CI/CD tools. apictl makes this more simpler by handling per environment-related configurations.", "url": "https://github.com/wso2/docs-apim/pull/677#discussion_r371205580", "createdAt": "2020-01-27T12:10:38Z", "author": {"login": "dushaniw"}, "path": "en/docs/Learn/APIController/ci-cd-with-wso2-api-management.md", "diffHunk": "@@ -20,13 +20,34 @@ different ways of addressing the problem. The above diagram depicts a generic so\n -   API Publishers: Publish APIs to users\n -   DevOps: Control the deployment process\n \n-API Developers and Publishers work with a version control system, which acts as a single source of truth for the pipeline. \n+API Developers and Publishers work with a version control system, which acts as a single source of truth for the pipeline.   \n+\n+## API Publisher based CI/CD\n+\n API Developers can use WSO2 API Manager's Publisher to create APIs. CI/CD for API Manager relies on a Version Control system that acts as a Single Source of Truth for the pipeline. After APIs are exported from one environment, promoting it to the other environment is done via the `apictl`. It is capable of handling \n-environment-related configurations and can promote the API seamlessly to other environments via a single command.  \n+environment-related configurations and can promote the API seamlessly to other environments via a single command.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c9fb72a2b0412add03bd9e70f75ea223b55e43e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY5OTQwNA==", "bodyText": "Fixed in eb59e1a", "url": "https://github.com/wso2/docs-apim/pull/677#discussion_r371699404", "createdAt": "2020-01-28T09:48:59Z", "author": {"login": "Mariangela"}, "path": "en/docs/Learn/APIController/ci-cd-with-wso2-api-management.md", "diffHunk": "@@ -20,13 +20,34 @@ different ways of addressing the problem. The above diagram depicts a generic so\n -   API Publishers: Publish APIs to users\n -   DevOps: Control the deployment process\n \n-API Developers and Publishers work with a version control system, which acts as a single source of truth for the pipeline. \n+API Developers and Publishers work with a version control system, which acts as a single source of truth for the pipeline.   \n+\n+## API Publisher based CI/CD\n+\n API Developers can use WSO2 API Manager's Publisher to create APIs. CI/CD for API Manager relies on a Version Control system that acts as a Single Source of Truth for the pipeline. After APIs are exported from one environment, promoting it to the other environment is done via the `apictl`. It is capable of handling \n-environment-related configurations and can promote the API seamlessly to other environments via a single command.  \n+environment-related configurations and can promote the API seamlessly to other environments via a single command.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIwNTU4MA=="}, "originalCommit": {"oid": "7c9fb72a2b0412add03bd9e70f75ea223b55e43e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NDkxMTg3OnYy", "diffSide": "RIGHT", "path": "en/docs/Learn/APIController/ci-cd-with-wso2-api-management.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMjoyNjo1OFrOFiBBDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwOTo0OToyMFrOFievhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIxMjU1OA==", "bodyText": "This step 1 is needed only if you followed, step C before. Add Rename it to SwaggerPetstore for easy reference. to the same step1.\nKeep step2 first sentence as it is. Remove the sentence Rename it to SwaggerPetstore for easy reference.", "url": "https://github.com/wso2/docs-apim/pull/677#discussion_r371212558", "createdAt": "2020-01-27T12:26:58Z", "author": {"login": "dushaniw"}, "path": "en/docs/Learn/APIController/ci-cd-with-wso2-api-management.md", "diffHunk": "@@ -120,7 +142,31 @@ The **apictl** can export an API as an archive from a lower environment (i.e., d\n \n      For more information, see [Export an API]({{base_path}}/Learn/APIController/migrating-apis-to-different-environments/#export-an-api).\n \n-## Preparing an API Project for CI/CD\n+<a name=\"D\"></a>\n+### (D.) - Initialize the project using a Swagger/OpenAPI specification\n+\n+Execute the following command to directly generate the `PetstoreAPI` project using a Swagger/OpenAPI specification.\n+\n+!!! example\n+    ```bash\n+    apictl init PetstoreAPI --oas path/to/petstore.yaml\n+    ```\n+\n+- This generates an API project in the `PetstoreAPI` directory using the provided specification. This project can be directly \n+imported into the API Manager.\n+- The **apictl** allows further customization to the project initialization using a template file. Organization-specific common details can be added into this template file and shared across developers to increase productivity.\n+- To further finetune API creation, an additional API Definition file can be used. This definition file supports detecting environment variables during the creation process. It can be combined with scripting to develop powerful tools for \n+automating API Project creation.\n+- Using this method, the Swagger/OpenAPI specification becomes a single source of truth for API deployment. By combining \n+templating and the definition file, the automation servers can be configured to initialize API Projects from Swagger/OpenAPI \n+specifications and also have custom parameter files. This reduces human intervention and boosts productivity.\n+- For example, when an organization depends on a microservices architecture, this method can be utilized to create an automated pipeline to move Swagger/OpenAPI specifications to upper environments.\n+\n+For more information on initializing an API Project using OpenAPI/Swagger Specification, see \n+[Initialize an API Project]({{base_path}}/Learn/APIController/importing-apis-via-dev-first-approach/#initialize-an-api-project).\n+\n+<a name=\"E\"></a>\n+### (E.) - Prepare an API project for CI/CD\n \n 1.  Extract the content (API will be exported as an archive to the ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c9fb72a2b0412add03bd9e70f75ea223b55e43e"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY5OTU4OQ==", "bodyText": "Fixed in eb59e1a", "url": "https://github.com/wso2/docs-apim/pull/677#discussion_r371699589", "createdAt": "2020-01-28T09:49:20Z", "author": {"login": "Mariangela"}, "path": "en/docs/Learn/APIController/ci-cd-with-wso2-api-management.md", "diffHunk": "@@ -120,7 +142,31 @@ The **apictl** can export an API as an archive from a lower environment (i.e., d\n \n      For more information, see [Export an API]({{base_path}}/Learn/APIController/migrating-apis-to-different-environments/#export-an-api).\n \n-## Preparing an API Project for CI/CD\n+<a name=\"D\"></a>\n+### (D.) - Initialize the project using a Swagger/OpenAPI specification\n+\n+Execute the following command to directly generate the `PetstoreAPI` project using a Swagger/OpenAPI specification.\n+\n+!!! example\n+    ```bash\n+    apictl init PetstoreAPI --oas path/to/petstore.yaml\n+    ```\n+\n+- This generates an API project in the `PetstoreAPI` directory using the provided specification. This project can be directly \n+imported into the API Manager.\n+- The **apictl** allows further customization to the project initialization using a template file. Organization-specific common details can be added into this template file and shared across developers to increase productivity.\n+- To further finetune API creation, an additional API Definition file can be used. This definition file supports detecting environment variables during the creation process. It can be combined with scripting to develop powerful tools for \n+automating API Project creation.\n+- Using this method, the Swagger/OpenAPI specification becomes a single source of truth for API deployment. By combining \n+templating and the definition file, the automation servers can be configured to initialize API Projects from Swagger/OpenAPI \n+specifications and also have custom parameter files. This reduces human intervention and boosts productivity.\n+- For example, when an organization depends on a microservices architecture, this method can be utilized to create an automated pipeline to move Swagger/OpenAPI specifications to upper environments.\n+\n+For more information on initializing an API Project using OpenAPI/Swagger Specification, see \n+[Initialize an API Project]({{base_path}}/Learn/APIController/importing-apis-via-dev-first-approach/#initialize-an-api-project).\n+\n+<a name=\"E\"></a>\n+### (E.) - Prepare an API project for CI/CD\n \n 1.  Extract the content (API will be exported as an archive to the ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTIxMjU1OA=="}, "originalCommit": {"oid": "7c9fb72a2b0412add03bd9e70f75ea223b55e43e"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2074, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}