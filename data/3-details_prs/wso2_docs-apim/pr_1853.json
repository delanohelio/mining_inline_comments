{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgwNTQxODI1", "number": 1853, "title": "update extending KM docs and add custom  keymmanager doc", "bodyText": "Purpose\n\nDescribe the problems, issues, or needs driving this feature/fix and include links to related issues in the following format: Resolves issue1, issue2, etc.\n\nGoals\n\nDescribe the solutions that this feature/fix will introduce to resolve the problems described above\n\nApproach\n\nDescribe how you are implementing the solutions. Include an animated GIF or screenshot if the change affects the UI (email documentation@wso2.com to review all UI text). Include a link to a Markdown file or Google doc if the feature write-up is too long to paste here.\n\nUser stories\n\nSummary of user stories addressed by this change>\n\nRelease note\n\nBrief description of the new feature or bug fix as it will appear in the release notes\n\nDocumentation\n\nLink(s) to product documentation that addresses the changes of this PR. If no doc impact, enter \u201cN/A\u201d plus brief explanation of why there\u2019s no doc impact\n\nTraining\n\nLink to the PR for changes to the training content in https://github.com/wso2/WSO2-Training, if applicable\n\nCertification\n\nType \u201cSent\u201d when you have provided new/updated certification questions, plus four answers for each question (correct answer highlighted in bold), based on this change. Certification questions/answers should be sent to certification@wso2.com and NOT pasted in this PR. If there is no impact on certification exams, type \u201cN/A\u201d and explain why.\n\nMarketing\n\nLink to drafts of marketing content that will describe and promote this feature, including product page changes, technical articles, blog posts, videos, etc., if applicable\n\nAutomation tests\n\nUnit tests\n\nCode coverage information\n\n\nIntegration tests\n\nDetails about the test cases and coverage\n\n\n\nSecurity checks\n\nFollowed secure coding standards in http://wso2.com/technical-reports/wso2-secure-engineering-guidelines? yes/no\nRan FindSecurityBugs plugin and verified report? yes/no\nConfirmed that this PR doesn't commit any keys, passwords, tokens, usernames, or other secrets? yes/no\n\nSamples\n\nProvide high-level details about the samples related to this feature\n\nRelated PRs\n\nList any other related PRs\n\nMigrations (if applicable)\n\nDescribe migration steps and platforms on which migration has been tested\n\nTest environment\n\nList all JDK versions, operating systems, databases, and browser/versions on which this feature/fix was tested\n\nLearning\n\nDescribe the research phase and any blog posts, patterns, libraries, or add-ons you used to solve the problem.", "createdAt": "2020-09-05T16:05:38Z", "url": "https://github.com/wso2/docs-apim/pull/1853", "merged": true, "mergeCommit": {"oid": "198e37e5c67979523f564c75e1014fd66746fed0"}, "closed": true, "closedAt": "2020-09-18T06:12:17Z", "author": {"login": "isharac"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdF650LAH2gAyNDgwNTQxODI1OmYzNThhNjBkMTdiZjYxZjNiMDk4YjNjOWI3MzRmMzc5YjgxNDk4ZmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJ_XYtgFqTQ5MTE3NTk1OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f358a60d17bf61f3b098b3c9b734f379b81498fe", "author": {"user": {"login": "isharac", "name": "Ishara"}}, "url": "https://github.com/wso2/docs-apim/commit/f358a60d17bf61f3b098b3c9b734f379b81498fe", "committedDate": "2020-09-05T14:44:30Z", "message": "update extending KM docs and add custom  keymmanager doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e90e33ee014aadb890067aab6e1220f50867e00f", "author": {"user": {"login": "Mariangela", "name": "Mariangela Hills"}}, "url": "https://github.com/wso2/docs-apim/commit/e90e33ee014aadb890067aab6e1220f50867e00f", "committedDate": "2020-09-16T12:36:19Z", "message": "Reviewed and updated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "679e44db7c84fddde794c3333a995e16e8d08880", "author": {"user": {"login": "Mariangela", "name": "Mariangela Hills"}}, "url": "https://github.com/wso2/docs-apim/commit/679e44db7c84fddde794c3333a995e16e8d08880", "committedDate": "2020-09-16T13:00:42Z", "message": "Fixed incorrect linking\n\nRemoved anchor related to section 6 and corrected the terminology after checking with Isharac."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1b00d36ffa797250c11045e2b593275b7264ad9", "author": {"user": {"login": "Mariangela", "name": "Mariangela Hills"}}, "url": "https://github.com/wso2/docs-apim/commit/f1b00d36ffa797250c11045e2b593275b7264ad9", "committedDate": "2020-09-16T13:28:57Z", "message": "Improved the messaging\n\nImproved the messaging after checking with @isharac"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "850b8d1e635e6b2183027af6e11c16c36e67809d", "author": {"user": {"login": "Mariangela", "name": "Mariangela Hills"}}, "url": "https://github.com/wso2/docs-apim/commit/850b8d1e635e6b2183027af6e11c16c36e67809d", "committedDate": "2020-09-16T16:49:37Z", "message": "Fixed a link\n\nFixed an incorrectly defined link"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eeacef4c052b289f5a7adc2c7bff618302860904", "author": {"user": {"login": "Mariangela", "name": "Mariangela Hills"}}, "url": "https://github.com/wso2/docs-apim/commit/eeacef4c052b289f5a7adc2c7bff618302860904", "committedDate": "2020-09-18T05:02:25Z", "message": "Reviewed and Updated"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMTM4OTE2", "url": "https://github.com/wso2/docs-apim/pull/1853#pullrequestreview-491138916", "createdAt": "2020-09-18T04:12:08Z", "commit": {"oid": "f358a60d17bf61f3b098b3c9b734f379b81498fe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNDoxMjowOFrOHT9brA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNToyMDoxNlrOHT-c5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5MTUwMA==", "bodyText": "In the documentation it is incorrect to say \"Devportal\". It should be \"Developer Portal\".", "url": "https://github.com/wso2/docs-apim/pull/1853#discussion_r490691500", "createdAt": "2020-09-18T04:12:08Z", "author": {"login": "Mariangela"}, "path": "en/docs/administer/key-managers/configure-custom-connector.md", "diffHunk": "@@ -0,0 +1,343 @@\n+# Configure a Custom Key Manager\n+\n+WSO2 API Manager is capable of intigrating with any external OAuth Authorization Server to manage the OAuth clients and tokens that are required by WSO2 API Manager. This can be achieved by writing a custom key manager connector as explained below.\n+\n+   You may use below out of the box connectors as a reference.\n+   \n+  1. [Okta Connector](https://github.com/wso2-extensions/apim-km-okta/)\n+   \n+  2. [Keycloak Connector](https://github.com/wso2-extensions/apim-keymanager-keycloak/)\n+\n+\n+## Step 1 - Create Key Manager Connector Bundle \n+\n+1. First You need to create a maven project. \n+\n+   This needs \n+   \n+   i. A class that implements `KeyManagerConnectorConfiguration` interface which is responsible for managing configurations related to the Authorization Server. \n+   \n+   ii. A class that extends `AbstractKeyManager` abstract class which is responsible for managing OAuth clients and Tokens needed by WSO2 API Manager.\n+   \n+   Alternatively you may download the sample project from [here]({{base_path}}/attachments/administer/custom.auth.client.zip).\n+\n+2. Implement `KeyManagerConnectorConfiguration`.\n+\n+  In the sample project this has been implemented in `org.wso2.custom.client.CustomOAuthClient.java` class\n+\n+  Following are the methods that the `KeyManagerConnectorConfiguration` interface uses to carry out\u00a0operations.\n+\n+  <table>\n+  <colgroup>\n+  <col width=\"30%\" />\n+  <col width=\"70%\" />\n+  </colgroup>\n+  <thead>\n+  <tr class=\"header\">\n+  <th>Method</th>\n+  <th>Description</th>\n+  </tr>\n+  </thead>\n+  <tbody>\n+  <tr class=\"odd\">\n+  <td><strong>getImplementation</strong></td>\n+  <td><p>Provides fully Qualified class name of implementation of KeyManager.</p></td>\n+  </tr>\n+  <tr class=\"even\">\n+  <td><strong>getJWTValidator</strong></td>\n+  <td><p>Provides fully Qualified class name of implementation of JWTValidator.</p></td>\n+  </tr>\n+  <tr class=\"odd\">\n+  <td><strong>getConnectionConfigurations</strong></td>\n+  <td><p>Provides list of Configurations that need to show in Admin portal in order to connect with KeyManager.</p></td>\n+  </tr>\n+  <tr class=\"even\">\n+  <td><strong>getApplicationConfigurations</strong></td>\n+  <td><p>Provides list of configurations need to create Oauth applications in Oauth server in Devportal.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f358a60d17bf61f3b098b3c9b734f379b81498fe"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5MTc4Ng==", "bodyText": "The path is incorrect.\nIt should be {{base_path}}/assets/attachments/administer/custom.auth.client.zip", "url": "https://github.com/wso2/docs-apim/pull/1853#discussion_r490691786", "createdAt": "2020-09-18T04:13:17Z", "author": {"login": "Mariangela"}, "path": "en/docs/administer/key-managers/configure-custom-connector.md", "diffHunk": "@@ -0,0 +1,343 @@\n+# Configure a Custom Key Manager\n+\n+WSO2 API Manager is capable of intigrating with any external OAuth Authorization Server to manage the OAuth clients and tokens that are required by WSO2 API Manager. This can be achieved by writing a custom key manager connector as explained below.\n+\n+   You may use below out of the box connectors as a reference.\n+   \n+  1. [Okta Connector](https://github.com/wso2-extensions/apim-km-okta/)\n+   \n+  2. [Keycloak Connector](https://github.com/wso2-extensions/apim-keymanager-keycloak/)\n+\n+\n+## Step 1 - Create Key Manager Connector Bundle \n+\n+1. First You need to create a maven project. \n+\n+   This needs \n+   \n+   i. A class that implements `KeyManagerConnectorConfiguration` interface which is responsible for managing configurations related to the Authorization Server. \n+   \n+   ii. A class that extends `AbstractKeyManager` abstract class which is responsible for managing OAuth clients and Tokens needed by WSO2 API Manager.\n+   \n+   Alternatively you may download the sample project from [here]({{base_path}}/attachments/administer/custom.auth.client.zip).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f358a60d17bf61f3b098b3c9b734f379b81498fe"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5MjAxNA==", "bodyText": "This seems to be copied from another document, because referring to \"section 6\" in this document does not seem correct.", "url": "https://github.com/wso2/docs-apim/pull/1853#discussion_r490692014", "createdAt": "2020-09-18T04:14:20Z", "author": {"login": "Mariangela"}, "path": "en/docs/administer/key-managers/configure-custom-connector.md", "diffHunk": "@@ -0,0 +1,343 @@\n+# Configure a Custom Key Manager\n+\n+WSO2 API Manager is capable of intigrating with any external OAuth Authorization Server to manage the OAuth clients and tokens that are required by WSO2 API Manager. This can be achieved by writing a custom key manager connector as explained below.\n+\n+   You may use below out of the box connectors as a reference.\n+   \n+  1. [Okta Connector](https://github.com/wso2-extensions/apim-km-okta/)\n+   \n+  2. [Keycloak Connector](https://github.com/wso2-extensions/apim-keymanager-keycloak/)\n+\n+\n+## Step 1 - Create Key Manager Connector Bundle \n+\n+1. First You need to create a maven project. \n+\n+   This needs \n+   \n+   i. A class that implements `KeyManagerConnectorConfiguration` interface which is responsible for managing configurations related to the Authorization Server. \n+   \n+   ii. A class that extends `AbstractKeyManager` abstract class which is responsible for managing OAuth clients and Tokens needed by WSO2 API Manager.\n+   \n+   Alternatively you may download the sample project from [here]({{base_path}}/attachments/administer/custom.auth.client.zip).\n+\n+2. Implement `KeyManagerConnectorConfiguration`.\n+\n+  In the sample project this has been implemented in `org.wso2.custom.client.CustomOAuthClient.java` class\n+\n+  Following are the methods that the `KeyManagerConnectorConfiguration` interface uses to carry out\u00a0operations.\n+\n+  <table>\n+  <colgroup>\n+  <col width=\"30%\" />\n+  <col width=\"70%\" />\n+  </colgroup>\n+  <thead>\n+  <tr class=\"header\">\n+  <th>Method</th>\n+  <th>Description</th>\n+  </tr>\n+  </thead>\n+  <tbody>\n+  <tr class=\"odd\">\n+  <td><strong>getImplementation</strong></td>\n+  <td><p>Provides fully Qualified class name of implementation of KeyManager.</p></td>\n+  </tr>\n+  <tr class=\"even\">\n+  <td><strong>getJWTValidator</strong></td>\n+  <td><p>Provides fully Qualified class name of implementation of JWTValidator.</p></td>\n+  </tr>\n+  <tr class=\"odd\">\n+  <td><strong>getConnectionConfigurations</strong></td>\n+  <td><p>Provides list of Configurations that need to show in Admin portal in order to connect with KeyManager.</p></td>\n+  </tr>\n+  <tr class=\"even\">\n+  <td><strong>getApplicationConfigurations</strong></td>\n+  <td><p>Provides list of configurations need to create Oauth applications in Oauth server in Devportal.\n+  </p></td>\n+  </tr>\n+  <tr class=\"odd\">\n+  <td><strong>getType</strong></td>\n+  <td><p>Type of Connector ex: Okta.</p></td>\n+  </tr>\n+  <tr class=\"even\">\n+  <td><strong>getDisplayName</strong></td>\n+  <td><p>Display name to show in Admin portal.</p></td>\n+  </tr>\n+  <tr class=\"odd\">\n+  <td><strong>getDefaultScopesClaim</strong></td>\n+  <td><p>Default scope claim available in jwt if different than <b>scope</b>.</p></td>\n+  </tr>\n+  <tr class=\"even\">\n+  <td><strong>getDefaultConsumerKeyClaim</strong></td>\n+  <td><p>Default Consumer Key Claim available in JWT if different than <b>azp</b>.</p></td>\n+  </tr>\n+  </tbody>\n+</table>  \n+  \n+3. Extend `AbstractKeyManager`.\n+\n+`AbstractKeyManager` implements `KeyManager` interface.\n+To learn about the KeyManager interface operation please refer [Extending KeyManager Interface]({{base_path}}/develop/extending-api-manager/extending-key-management/extending-the-key-manager-interface) documentation.\n+\n+\n+  In the sample project `AbstractKeyManager` has been extended by the `org.wso2.custom.client.CustomOAuthClient.java` class\n+\n+4. If you need to customize the JWTValidation, it is required to [extend JWTValidator]({{base_path}}/develop/extending-api-manager/extending-key-management/extending-key-validation)\n+5. Build the project by navigating to <PROJECT_HOME> and issue below command.\n+     \n+      \n+      mvn clean install\n+     \n+     \n+\n+## Step 2 - Deploy the bundle in API-M Server\n+\n+1. Stop the API-M server if it is already running. And copy the jar file generated in `custom.key.manager` component target directory into <API-M Server>/repository/components/dropins\n+\n+2. Start the Server\n+\n+## Step 3 - Configure the Connector using Admin Portal\n+\n+1. Sign in to the Admin Portal.\n+\n+     `https://<hostname>:9443/admin`\n+     \n+     `https://localhost:9443/admin`\n+\n+3. Add a new Key Manager.\n+\n+     1. Click **Key Managers** and then click **Add Key Manager**.\n+\n+         [![Add new Key Manager]({{base_path}}/assets/img/administer/add-key-manager.png)]({{base_path}}/assets/img/administer/add-key-manager.png)\n+\n+     2. Add the following Key Manager configurations.\n+\n+         The following table provides definitions for each of the Key Manager configurations.\n+\n+          <table>\n+          <tr class=\"header\">\n+          <th>Configuration</th>\n+          <th>Description</th>\n+          <th> </th>\n+          </tr>\n+        \n+          <tr class=\"odd\">\n+          <td>Name</td>\n+          <td>The name of the authorization server.</td>\n+          <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"even\">\n+          <td>Display Name</td>\n+          <td>A name to display in the UI.</td>\n+          <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"odd\">\n+          <td>Description</td>\n+          <td>A brief description of the Key Manager.</td>\n+          <td>Optional</td>\n+          </tr>\n+          <tr class=\"even\">\n+          <td>Key Manager Type</td>\n+          <td>The type of the Key Manager to be selected.</td>\n+          <td>Mandatory</td>\n+          </tr>\n+          <tr class=\"odd\">\n+          <td>Well-known-url</td>\n+          <td><p>The well-known URL of the Authorization Server (Key Manager).\n+          <br/>\n+          If the well-known URL is provided, other endpoints can be imported. \n+          <br/> e.g., https://dev-599740.okta.com/oauth2/default/.well-known/oauth-authorization-server</p>\n+          </td>\n+          <td>Optional</td>\n+          </tr>\n+          <tr class=\"even\">\n+          <td>Issuer</td>\n+          <td>The issuer that consumes or validates access tokens. <br/>e.g., https://dev-599740.okta.com/oauth2/default</td>\n+          <td>Optional</td>\n+          </tr>\n+          <tr class=\"odd\">\n+          <td><b>Key Manager Endpoints</b></td>\n+          <td></td>\n+          <td></td>\n+          </tr>\n+          <tr class=\"even\">\n+          <td>Client Registration Endpoint </td>\n+          <td><p>The endpoint that verifies the identity and obtain profile information of the end-user based on the authentication performed by an authorization server.</p></td>\n+          <td>Optional if the well-known URI is provided.</td>\n+          </tr>\n+          <tr class=\"odd\">\n+          <td>Introspection Endpoint</td>\n+          <td>The endpoint that allows authorized protected resources to query the authorization server to determine the set of metadata for a given token that was presented to them by an OAuth client.</td>\n+          <td>Optional if the well-known URI is provided.</td>\n+          </tr>\n+          <tr class=\"even\">\n+          <td>Token Endpoint</td>\n+          <td>The endpoint that issues the access tokens.</td>\n+          <td>Optional if the well-known URI is provided.</td>\n+          </tr>\n+          <tr class=\"odd\">\n+          <td>Revoke Endpoint</td>\n+          <td>The endpoint that revokes the access tokens.</td>\n+          <td>Optional if the well-known URI is provided.</td>\n+          </tr>\n+          <tr class=\"even\">\n+          <td>Userinfo Endpoint</td>\n+          <td>The endpoint that allows clients to verify the identity of the end-user based on the authentication performed by an authorization server, as well as to obtain basic profile information about the end-user.</td>\n+          <td>Optional</td>\n+          </tr>\n+          <tr class=\"odd\">\n+          <td>Authorize Endpoint</td>\n+          <td>The endpoint used to obtain an authorization grant from the resource owner via the user-agent redirection.</td>\n+          <td>Optional</td>\n+          </tr>\n+          <tr class=\"even\">\n+          <td>Scope Management Endpoint </td>\n+          <td>The endpoint used to manage the scopes.</td>\n+          <td>Optional</td>\n+          </tr>\n+          <tr class=\"odd\">\n+          <td><b>Connector Configurations</b></td>\n+          <td></td>\n+          <td></td>\n+          </tr>\n+          <tr class=\"even\">\n+          <td>API Key</td>\n+          <td>The API key generated from <a href=\"#section6\">section 6</a>.</td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f358a60d17bf61f3b098b3c9b734f379b81498fe"}, "originalPosition": 206}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5MjQ0OA==", "bodyText": "Always check the overall formatting locally before sending a PR.\nThe indentation here is incorrect as a result point 4 appears as point 1 of a new numbering list.", "url": "https://github.com/wso2/docs-apim/pull/1853#discussion_r490692448", "createdAt": "2020-09-18T04:16:24Z", "author": {"login": "Mariangela"}, "path": "en/docs/administer/key-managers/configure-custom-connector.md", "diffHunk": "@@ -0,0 +1,343 @@\n+# Configure a Custom Key Manager\n+\n+WSO2 API Manager is capable of intigrating with any external OAuth Authorization Server to manage the OAuth clients and tokens that are required by WSO2 API Manager. This can be achieved by writing a custom key manager connector as explained below.\n+\n+   You may use below out of the box connectors as a reference.\n+   \n+  1. [Okta Connector](https://github.com/wso2-extensions/apim-km-okta/)\n+   \n+  2. [Keycloak Connector](https://github.com/wso2-extensions/apim-keymanager-keycloak/)\n+\n+\n+## Step 1 - Create Key Manager Connector Bundle \n+\n+1. First You need to create a maven project. \n+\n+   This needs \n+   \n+   i. A class that implements `KeyManagerConnectorConfiguration` interface which is responsible for managing configurations related to the Authorization Server. \n+   \n+   ii. A class that extends `AbstractKeyManager` abstract class which is responsible for managing OAuth clients and Tokens needed by WSO2 API Manager.\n+   \n+   Alternatively you may download the sample project from [here]({{base_path}}/attachments/administer/custom.auth.client.zip).\n+\n+2. Implement `KeyManagerConnectorConfiguration`.\n+\n+  In the sample project this has been implemented in `org.wso2.custom.client.CustomOAuthClient.java` class\n+\n+  Following are the methods that the `KeyManagerConnectorConfiguration` interface uses to carry out\u00a0operations.\n+\n+  <table>\n+  <colgroup>\n+  <col width=\"30%\" />\n+  <col width=\"70%\" />\n+  </colgroup>\n+  <thead>\n+  <tr class=\"header\">\n+  <th>Method</th>\n+  <th>Description</th>\n+  </tr>\n+  </thead>\n+  <tbody>\n+  <tr class=\"odd\">\n+  <td><strong>getImplementation</strong></td>\n+  <td><p>Provides fully Qualified class name of implementation of KeyManager.</p></td>\n+  </tr>\n+  <tr class=\"even\">\n+  <td><strong>getJWTValidator</strong></td>\n+  <td><p>Provides fully Qualified class name of implementation of JWTValidator.</p></td>\n+  </tr>\n+  <tr class=\"odd\">\n+  <td><strong>getConnectionConfigurations</strong></td>\n+  <td><p>Provides list of Configurations that need to show in Admin portal in order to connect with KeyManager.</p></td>\n+  </tr>\n+  <tr class=\"even\">\n+  <td><strong>getApplicationConfigurations</strong></td>\n+  <td><p>Provides list of configurations need to create Oauth applications in Oauth server in Devportal.\n+  </p></td>\n+  </tr>\n+  <tr class=\"odd\">\n+  <td><strong>getType</strong></td>\n+  <td><p>Type of Connector ex: Okta.</p></td>\n+  </tr>\n+  <tr class=\"even\">\n+  <td><strong>getDisplayName</strong></td>\n+  <td><p>Display name to show in Admin portal.</p></td>\n+  </tr>\n+  <tr class=\"odd\">\n+  <td><strong>getDefaultScopesClaim</strong></td>\n+  <td><p>Default scope claim available in jwt if different than <b>scope</b>.</p></td>\n+  </tr>\n+  <tr class=\"even\">\n+  <td><strong>getDefaultConsumerKeyClaim</strong></td>\n+  <td><p>Default Consumer Key Claim available in JWT if different than <b>azp</b>.</p></td>\n+  </tr>\n+  </tbody>\n+</table>  \n+  \n+3. Extend `AbstractKeyManager`.\n+\n+`AbstractKeyManager` implements `KeyManager` interface.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f358a60d17bf61f3b098b3c9b734f379b81498fe"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY5MjgwMA==", "bodyText": "Typo.\n\"intigrating\" should be \"integrating\".\nBest to run the document on a spell checker after writing the document.", "url": "https://github.com/wso2/docs-apim/pull/1853#discussion_r490692800", "createdAt": "2020-09-18T04:17:41Z", "author": {"login": "Mariangela"}, "path": "en/docs/administer/key-managers/configure-custom-connector.md", "diffHunk": "@@ -0,0 +1,343 @@\n+# Configure a Custom Key Manager\n+\n+WSO2 API Manager is capable of intigrating with any external OAuth Authorization Server to manage the OAuth clients and tokens that are required by WSO2 API Manager. This can be achieved by writing a custom key manager connector as explained below.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f358a60d17bf61f3b098b3c9b734f379b81498fe"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcwMzgxNw==", "bodyText": "Need to change this link as it points to 2.6.0", "url": "https://github.com/wso2/docs-apim/pull/1853#discussion_r490703817", "createdAt": "2020-09-18T05:03:17Z", "author": {"login": "Mariangela"}, "path": "en/docs/develop/extending-api-manager/extending-key-management/extending-key-validation.md", "diffHunk": "@@ -1,8 +1,57 @@\n-# Extending Key Validation\n+# Extending the Key Validation Interface\n \n-In WSO2 API Manager (WSO2 API-M) versions prior to 1.9.0, the components were tightly coupled with the [Key Manager](https://docs.wso2.com/display/AM200/Key+Concepts#KeyConcepts-KeyManager) and token validation was done by directly accessing the databases. However, from WSO2 API-M 1.9.0 onwards, you can [plug different OAuth2 providers](https://docs.wso2.com/display/AM260/Configuring+a+Third-Party+Key+Manager) to the key validation. When you call an API providing an access token, the execution flows through the handlers specified in the API. Among them, the API authentication handler extracts the token from the header and calls `APIKeyValidationService` to get the token validated. Upon validating the token, the API Gateway receives `APIKeyValidationInforDTO` as the response, using which the rest of the operations are performed.\n+Previously, in WSO2 API Manager (WSO2 API-M) the Key Manager was loosely coupled with other components and the users could [plug in different OAuth2 providers](https://docs.wso2.com/display/AM260/Configuring+a+Third-Party+Key+Manager) for the purpose of key validation. However, now, the Key Manager call that was used in the key validation process at runtime has been removed altogether and the default token type has been set to JWT (JSON Web Token). Now, the JWT Token validation takes place at the Gateway itself and the subsequent subscription validation also takes place in the Gateway as the required meta-information is available in the Gateway memory. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eeacef4c052b289f5a7adc2c7bff618302860904"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcwODE5Nw==", "bodyText": "Link is defined wrong as a set of {} is missing\n\"{base_path}/administer/key-managers/configure-custom-connector/\" should be\n\"{{base_path}}/administer/key-managers/configure-custom-connector\"", "url": "https://github.com/wso2/docs-apim/pull/1853#discussion_r490708197", "createdAt": "2020-09-18T05:20:16Z", "author": {"login": "Mariangela"}, "path": "en/docs/develop/extending-api-manager/extending-key-management/extending-the-key-manager-interface.md", "diffHunk": "@@ -12,21 +12,15 @@ For instance,\n \n -   At this point, the Developer Portal talks to the **KeyManager** to create an *OAuth client* and get the *Consumer Key/Secret* and the *Application Access token*.\n \n--   When the Gateway receives a request, it talks to **KeyManager** and get the token validated. The **KeyManager** checks if the token is active, and whether the token is usable to invoke the resource being accessed. If the token is valid, the **KeyManager** sends additional details about the token (i.e., the Throttling Tier for the subscription and Consumer key) to the Gateway in the response. In turn the Gateway uses these details to determine if the request should be passed to the backend or not.\n+-   When the Gateway receives a request, it talks to **KeyManager** and get the token validated. The **KeyManager** checks if the token is active, and whether the token is usable to invoke the resource being accessed. If the token is valid, the Gateway uses additional details about the token (i.e., the Throttling Tier for the subscription and Consumer key) to determine if the request should be passed to the backend or not.\n \n Therefore, the **KeyManager** interface acts as the bridge between the OAuth Provider and WSO2 API Manager (WSO2 API-M).\n \n ### Extending the Key Manager Interface\n \n-When you need to write your own implementation to plug an external OAuth2 authorization server which will act as the Key Manager, you should implement the [**KeyManager** interface](https://github.com/wso2/carbon-apimgt/blob/master/components/apimgt/org.wso2.carbon.apimgt.api/src/main/java/org/wso2/carbon/apimgt/api/model/KeyManager.java) which is a Java extension point in WSO2 API-M.\n+When you need to write your own implementation to plug an external OAuth2 authorization server which will act as the Key Manager, you should implement a third party Key Manager Connector as explain in \n+[Configure a Custom Key Manger]({base_path}/administer/key-managers/configure-custom-connector/)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eeacef4c052b289f5a7adc2c7bff618302860904"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "710291c91071c3ac49efb05ad1a45e48ef2ac999", "author": {"user": {"login": "Mariangela", "name": "Mariangela Hills"}}, "url": "https://github.com/wso2/docs-apim/commit/710291c91071c3ac49efb05ad1a45e48ef2ac999", "committedDate": "2020-09-18T05:48:00Z", "message": "Reviewed and updated\n\nClarified doubts with @isharac before sending the changes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8194f201074a4e21aa6398320b8e214dc5af3007", "author": {"user": {"login": "Mariangela", "name": "Mariangela Hills"}}, "url": "https://github.com/wso2/docs-apim/commit/8194f201074a4e21aa6398320b8e214dc5af3007", "committedDate": "2020-09-18T06:10:40Z", "message": "Updated the link\n\nUpdated the link from 260 to 320"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxMTc1OTU5", "url": "https://github.com/wso2/docs-apim/pull/1853#pullrequestreview-491175959", "createdAt": "2020-09-18T06:12:07Z", "commit": {"oid": "8194f201074a4e21aa6398320b8e214dc5af3007"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1702, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}