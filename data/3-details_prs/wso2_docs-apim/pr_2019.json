{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5ODI4MTg4", "number": 2019, "title": "Performance Test Results - Doc for 3.2.0", "bodyText": "Add \"WSO2 API-M Performance and Capacity Planning\"", "createdAt": "2020-10-08T10:43:45Z", "url": "https://github.com/wso2/docs-apim/pull/2019", "merged": true, "mergeCommit": {"oid": "6ae6cf98f7fccffd5f45f2c8e01de06c78a8e45b"}, "closed": true, "closedAt": "2020-11-06T08:45:23Z", "author": {"login": "ruthryi"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdQdmJMAH2gAyNDk5ODI4MTg4OjAwNzRiMTkyMjAxMjdlZDkzMWY4ZjQwOTI4MWFjMWExM2Y3ZWM4NDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZy7MXgFqTUyNDk1NDM5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0074b19220127ed931f8f409281ac1a13f7ec843", "author": {"user": {"login": "ruthryi", "name": "Ruthryi Kulasekaran"}}, "url": "https://github.com/wso2/docs-apim/commit/0074b19220127ed931f8f409281ac1a13f7ec843", "committedDate": "2020-10-08T08:48:56Z", "message": "Add draft for performance test results"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12b2e74b77a46ec523cf51bf33b63425d234fbbb", "author": {"user": {"login": "ruthryi", "name": "Ruthryi Kulasekaran"}}, "url": "https://github.com/wso2/docs-apim/commit/12b2e74b77a46ec523cf51bf33b63425d234fbbb", "committedDate": "2020-10-08T08:49:22Z", "message": "Add images"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3508efe1e085151c951a14da1ec78c7e4cbecc63", "author": {"user": {"login": "ruthryi", "name": "Ruthryi Kulasekaran"}}, "url": "https://github.com/wso2/docs-apim/commit/3508efe1e085151c951a14da1ec78c7e4cbecc63", "committedDate": "2020-10-08T10:41:17Z", "message": "Update doc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4029fe8d29fa737ed6aa49d5fe8fdb0a3544c480", "author": {"user": {"login": "ruthryi", "name": "Ruthryi Kulasekaran"}}, "url": "https://github.com/wso2/docs-apim/commit/4029fe8d29fa737ed6aa49d5fe8fdb0a3544c480", "committedDate": "2020-10-08T10:41:24Z", "message": "Merge branch '3.2.0' of https://github.com/wso2/docs-apim into 3.2.0-perf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e2c6c977c3c2e77a284d7d26fcda3893646f0bc", "author": {"user": {"login": "ruthryi", "name": "Ruthryi Kulasekaran"}}, "url": "https://github.com/wso2/docs-apim/commit/2e2c6c977c3c2e77a284d7d26fcda3893646f0bc", "committedDate": "2020-10-08T11:22:01Z", "message": "Add doc to ToC"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93d340b7b3b3563132f8d94554b34bac59e70743", "author": {"user": {"login": "Mariangela", "name": "Mariangela Hills"}}, "url": "https://github.com/wso2/docs-apim/commit/93d340b7b3b3563132f8d94554b34bac59e70743", "committedDate": "2020-10-16T15:00:59Z", "message": "Reviewed and updated full doc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwNTYxMTgy", "url": "https://github.com/wso2/docs-apim/pull/2019#pullrequestreview-510561182", "createdAt": "2020-10-16T15:09:04Z", "commit": {"oid": "93d340b7b3b3563132f8d94554b34bac59e70743"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTowOTowNFrOHjECVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNTo0Mjo0NVrOHjF3hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUyODM0Mg==", "bodyText": "In 3.1.0 and 3.0.0 we have the following breakdown.\n      - Performance Tuning and Test Results:  \n        - Tuning Performance: install-and-setup/setup/deployment-best-practices/tuning-performance.md\n        - Performance Test Results: install-and-setup/setup/deployment-best-practices/performance-test-results.md\n\nDo we need to rename this page to performance-test-results.md and change the heading of the page?\nOr do we need to add a redirection as the file name has changed from 3.1.0?", "url": "https://github.com/wso2/docs-apim/pull/2019#discussion_r506528342", "createdAt": "2020-10-16T15:09:04Z", "author": {"login": "Mariangela"}, "path": "en/mkdocs.yml", "diffHunk": "@@ -442,6 +442,7 @@ nav:\n                 - Production Deployment Guidelines: install-and-setup/setup/deployment-best-practices/production-deployment-guidelines.md\n                 - Security Guidelines for Production Deployment: install-and-setup/setup/deployment-best-practices/security-guidelines-for-production-deployment.md\n                 - Tuning Performance: install-and-setup/setup/deployment-best-practices/tuning-performance.md\n+                - Performance and Capacity Planning: install-and-setup/setup/deployment-best-practices/performance-and-capacity-planning.md", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93d340b7b3b3563132f8d94554b34bac59e70743"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzMDAyNg==", "bodyText": "The file names of the images should not have uppercase letters in it, because based on the current mkdocs setup such images will not appear. Therefore, the actual image names and the references to them in this file need to be changed.", "url": "https://github.com/wso2/docs-apim/pull/2019#discussion_r506530026", "createdAt": "2020-10-16T15:11:01Z", "author": {"login": "Mariangela"}, "path": "en/docs/install-and-setup/setup/deployment-best-practices/performance-and-capacity-planning.md", "diffHunk": "@@ -0,0 +1,260 @@\n+# WSO2 API-M Performance and Capacity Planning\n+\n+The following sections analyze the results of WSO2 API Manager performance tests.\n+\n+## Summary\n+\n+During each release, WSO2 executes various automated performance test scenarios and publishes the results.\n+\n+| **Test Scenarios** | **Description**                                                      |\n+|------------------|--------------------------------------------------------------------------|\n+| Passthrough      |   A secured API, which directly invokes the back\\-end service\\.          |\n+| Transformation   |   A secured API, which has a mediation extension to modify the message\\. |\n+ \n+\n+WSO2 uses [Apache JMeter](https://jmeter.apache.org/index.html) as the test client. WSO2 tests each scenario for a fixed duration of time. Thereafter, WSO2 splits the test results into warmup and measurement parts and uses the measurement part to compute the performance metrics.\n+\n+Test scenarios use a [Netty](https://netty.io/) based back-end service which echoes back any request posted to it after a specified period of time.\n+\n+WSO2 runs the performance tests with different concurrent user loads, message sizes (payloads), and back-end service delays.\n+\n+The main performance metrics:\n+\n+- **Throughput**: The number of requests that the WSO2 API Manager processes during a specific time interval (e.g. per second).\n+- **Response Time**: The end-to-end latency for an operation of invoking an API. The complete distribution of response times was recorded.\n+\n+In addition to the above metrics, WSO2 measures the load average and several memory-related metrics.\n+\n+The duration of each test is 900 seconds. The warm-up period is 300 seconds. The measurement results are collected after the warm-up period.\n+\n+A [c5.large Amazon EC2 instance](https://aws.amazon.com/ec2/instance-types/) was used to install WSO2 API Manager.\n+\n+## Test parameters\n+<table>\n+  <tr>\n+   <th><strong>Test Parameter</strong>\n+   </th>\n+   <th><strong>Description</strong>\n+   </th>\n+   <th><strong>Values</strong>\n+   </th>\n+  </tr>\n+  <tr>\n+   <td>Scenario Name\n+   </td>\n+   <td>The name of the test scenario.\n+   </td>\n+   <td> - \n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Heap Size\n+   </td>\n+   <td>The amount of memory allocated to the application\n+   </td>\n+   <td>2G\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Concurrent Users\n+   </td>\n+   <td>The number of users accessing the application at the same time.\n+   </td>\n+   <td>50, 100, 200, 300, 500, 1000\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Message Size (Bytes)\n+   </td>\n+   <td>The request payload size in Bytes.\n+   </td>\n+   <td>50, 1024, 10240, 102400\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Back-end Delay (ms)\n+   </td>\n+   <td>The delay added by the back-end service.\n+   </td>\n+   <td>0\n+   </td>\n+  </tr>\n+</table>\n+\n+## Measurements collected\n+The following are the measurements collected from each performance test conducted for a given combination of test parameters.\n+\n+<table>\n+  <tr>\n+   <th><strong>Measurement</strong>\n+   </th>\n+   <th><strong>Description</strong>\n+   </th>\n+  </tr>\n+  <tr>\n+   <td>Error %\n+   </td>\n+   <td>The percentage of requests with errors.\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Average Response Time (ms)\n+   </td>\n+   <td>The average response time of a set of results.\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Standard Deviation of Response Time (ms)\n+   </td>\n+   <td>The \u201cStandard Deviation\u201d of the response time.\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>99th Percentile of Response Time (ms)\n+   </td>\n+   <td>99% of the requests took no more than this time. The remaining samples took at least as long as this.\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Throughput (Requests/sec)\n+   </td>\n+   <td>The throughput is measured in requests per second.\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Average Memory Footprint After Full GC (M)\n+   </td>\n+   <td>The average memory consumed by the application after a full garbage collection event.\n+   </td>\n+  </tr>\n+</table>\n+\n+For a detailed analysis of the performance of API-M 3.2.0, see [API-M 3.2.0 Performance graphs on Github](https://github.com/wso2/performance-apim/tree/performance-test-276-2020-08-03_08-47-25/performance/benchmarks/3.2.0%20graphs-all).\n+\n+## Observations from all results\n+\n+There are key observations for the average user scenario of accessing APIs with 1KiB messages and the back-end service having 30ms delay.\n+\n+The following are the key observations from the all performance tests done with different message sizes and different backend delays. (See **Comparison of results** for all charts used to derive the pointed mentioned below)\n+\n+#### Throughput comparison:\n+\n+A throughput increase is observed in the transformation scenario in API-M 3.2.0, in comparison to API-M 3.1.0\n+\n+The throughput increases up to a certain limit when the number of concurrent users increases. The Mediation API throughput increase rate is much lower than the Echo API. Throughput decreases when the message sizes increase. Throughput decreases when the backend sleep time increase. This observation is similar to both APIs. This means that if the backend takes more time, the request processing rate at the API Manager Gateway will be less.\n+\n+#### Key observations related to response time:\n+\n+The average response time increases when the number of concurrent users increases. The increasing rate of average response time for both API-M 3.2.0 and API-M 3.1.0 is similar.\n+\n+The average response time increases when the number of concurrent users increases. The average response time increases considerably for Mediation API when the message sizes increase due to the message processing. The average response time of the Echo API does not increase as much as the Mediation API. The average response time increases when the backend sleep time increases. This observation is similar to both APIs.\n+\n+#### Key observations related to GC throughput:\n+\n+The GC throughput decreases when the number of concurrent users increases. When there are more concurrent users, the object allocation rate increases. The GC throughput increases when the message size increases. The request processing rate slows down due to the time taken to process large messages. Therefore, the object allocation rate decreases  when the message size increases. The GC throughput increases when the backend sleep time increases. The object allocation rate will be low when the backend takes more time to respond.\n+\n+## Comparison of 3.1.0 and 3.2.0\n+\n+### Average response time comparison\n+\n+#### Average response time vs concurrent users\n+\n+  [![]({{base_path}}/assets/img/setup-and-install/performance-test-results/average_time_0ms_50B.png)]({{base_path}}/assets/img/setup-and-install/performance-test-results/average_time_0ms_50B.png)\n+  [![]({{base_path}}/assets/img/setup-and-install/performance-test-results/average_time_0ms_1KiB.png)]({{base_path}}/assets/img/setup-and-install/performance-test-results/average_time_0ms_1KiB.png)\n+  [![]({{base_path}}/assets/img/setup-and-install/performance-test-results/average_time_0ms_10KiB.png)]({{base_path}}/assets/img/setup-and-install/performance-test-results/average_time_0ms_10KiB.png)\n+\n+### GC Throughput comparison \n+\n+ [![]({{base_path}}/assets/img/setup-and-install/performance-test-results/gc_throughput_0ms_1KiB.png)]({{base_path}}/assets/img/setup-and-install/performance-test-results/gc_throughput_0ms_1KiB.png)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93d340b7b3b3563132f8d94554b34bac59e70743"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjUzMTM0OQ==", "bodyText": "Best to add values within the [   ] tags which will serve as ALT for the images.", "url": "https://github.com/wso2/docs-apim/pull/2019#discussion_r506531349", "createdAt": "2020-10-16T15:12:43Z", "author": {"login": "Mariangela"}, "path": "en/docs/install-and-setup/setup/deployment-best-practices/performance-and-capacity-planning.md", "diffHunk": "@@ -0,0 +1,260 @@\n+# WSO2 API-M Performance and Capacity Planning\n+\n+The following sections analyze the results of WSO2 API Manager performance tests.\n+\n+## Summary\n+\n+During each release, WSO2 executes various automated performance test scenarios and publishes the results.\n+\n+| **Test Scenarios** | **Description**                                                      |\n+|------------------|--------------------------------------------------------------------------|\n+| Passthrough      |   A secured API, which directly invokes the back\\-end service\\.          |\n+| Transformation   |   A secured API, which has a mediation extension to modify the message\\. |\n+ \n+\n+WSO2 uses [Apache JMeter](https://jmeter.apache.org/index.html) as the test client. WSO2 tests each scenario for a fixed duration of time. Thereafter, WSO2 splits the test results into warmup and measurement parts and uses the measurement part to compute the performance metrics.\n+\n+Test scenarios use a [Netty](https://netty.io/) based back-end service which echoes back any request posted to it after a specified period of time.\n+\n+WSO2 runs the performance tests with different concurrent user loads, message sizes (payloads), and back-end service delays.\n+\n+The main performance metrics:\n+\n+- **Throughput**: The number of requests that the WSO2 API Manager processes during a specific time interval (e.g. per second).\n+- **Response Time**: The end-to-end latency for an operation of invoking an API. The complete distribution of response times was recorded.\n+\n+In addition to the above metrics, WSO2 measures the load average and several memory-related metrics.\n+\n+The duration of each test is 900 seconds. The warm-up period is 300 seconds. The measurement results are collected after the warm-up period.\n+\n+A [c5.large Amazon EC2 instance](https://aws.amazon.com/ec2/instance-types/) was used to install WSO2 API Manager.\n+\n+## Test parameters\n+<table>\n+  <tr>\n+   <th><strong>Test Parameter</strong>\n+   </th>\n+   <th><strong>Description</strong>\n+   </th>\n+   <th><strong>Values</strong>\n+   </th>\n+  </tr>\n+  <tr>\n+   <td>Scenario Name\n+   </td>\n+   <td>The name of the test scenario.\n+   </td>\n+   <td> - \n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Heap Size\n+   </td>\n+   <td>The amount of memory allocated to the application\n+   </td>\n+   <td>2G\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Concurrent Users\n+   </td>\n+   <td>The number of users accessing the application at the same time.\n+   </td>\n+   <td>50, 100, 200, 300, 500, 1000\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Message Size (Bytes)\n+   </td>\n+   <td>The request payload size in Bytes.\n+   </td>\n+   <td>50, 1024, 10240, 102400\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Back-end Delay (ms)\n+   </td>\n+   <td>The delay added by the back-end service.\n+   </td>\n+   <td>0\n+   </td>\n+  </tr>\n+</table>\n+\n+## Measurements collected\n+The following are the measurements collected from each performance test conducted for a given combination of test parameters.\n+\n+<table>\n+  <tr>\n+   <th><strong>Measurement</strong>\n+   </th>\n+   <th><strong>Description</strong>\n+   </th>\n+  </tr>\n+  <tr>\n+   <td>Error %\n+   </td>\n+   <td>The percentage of requests with errors.\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Average Response Time (ms)\n+   </td>\n+   <td>The average response time of a set of results.\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Standard Deviation of Response Time (ms)\n+   </td>\n+   <td>The \u201cStandard Deviation\u201d of the response time.\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>99th Percentile of Response Time (ms)\n+   </td>\n+   <td>99% of the requests took no more than this time. The remaining samples took at least as long as this.\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Throughput (Requests/sec)\n+   </td>\n+   <td>The throughput is measured in requests per second.\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Average Memory Footprint After Full GC (M)\n+   </td>\n+   <td>The average memory consumed by the application after a full garbage collection event.\n+   </td>\n+  </tr>\n+</table>\n+\n+For a detailed analysis of the performance of API-M 3.2.0, see [API-M 3.2.0 Performance graphs on Github](https://github.com/wso2/performance-apim/tree/performance-test-276-2020-08-03_08-47-25/performance/benchmarks/3.2.0%20graphs-all).\n+\n+## Observations from all results\n+\n+There are key observations for the average user scenario of accessing APIs with 1KiB messages and the back-end service having 30ms delay.\n+\n+The following are the key observations from the all performance tests done with different message sizes and different backend delays. (See **Comparison of results** for all charts used to derive the pointed mentioned below)\n+\n+#### Throughput comparison:\n+\n+A throughput increase is observed in the transformation scenario in API-M 3.2.0, in comparison to API-M 3.1.0\n+\n+The throughput increases up to a certain limit when the number of concurrent users increases. The Mediation API throughput increase rate is much lower than the Echo API. Throughput decreases when the message sizes increase. Throughput decreases when the backend sleep time increase. This observation is similar to both APIs. This means that if the backend takes more time, the request processing rate at the API Manager Gateway will be less.\n+\n+#### Key observations related to response time:\n+\n+The average response time increases when the number of concurrent users increases. The increasing rate of average response time for both API-M 3.2.0 and API-M 3.1.0 is similar.\n+\n+The average response time increases when the number of concurrent users increases. The average response time increases considerably for Mediation API when the message sizes increase due to the message processing. The average response time of the Echo API does not increase as much as the Mediation API. The average response time increases when the backend sleep time increases. This observation is similar to both APIs.\n+\n+#### Key observations related to GC throughput:\n+\n+The GC throughput decreases when the number of concurrent users increases. When there are more concurrent users, the object allocation rate increases. The GC throughput increases when the message size increases. The request processing rate slows down due to the time taken to process large messages. Therefore, the object allocation rate decreases  when the message size increases. The GC throughput increases when the backend sleep time increases. The object allocation rate will be low when the backend takes more time to respond.\n+\n+## Comparison of 3.1.0 and 3.2.0\n+\n+### Average response time comparison\n+\n+#### Average response time vs concurrent users\n+\n+  [![]({{base_path}}/assets/img/setup-and-install/performance-test-results/average_time_0ms_50B.png)]({{base_path}}/assets/img/setup-and-install/performance-test-results/average_time_0ms_50B.png)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93d340b7b3b3563132f8d94554b34bac59e70743"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU1NTQ5Ng==", "bodyText": "Do we need any information from [1] like the \"Performance test scripts\" section, some info from the \"Deployment used for the test\" section?\n[1] https://github.com/wso2/docs-apim/blob/3.1.0/en/docs/install-and-setup/setup/deployment-best-practices/performance-test-results.md", "url": "https://github.com/wso2/docs-apim/pull/2019#discussion_r506555496", "createdAt": "2020-10-16T15:39:37Z", "author": {"login": "Mariangela"}, "path": "en/docs/install-and-setup/setup/deployment-best-practices/performance-and-capacity-planning.md", "diffHunk": "@@ -0,0 +1,260 @@\n+# WSO2 API-M Performance and Capacity Planning\n+\n+The following sections analyze the results of WSO2 API Manager performance tests.\n+\n+## Summary\n+\n+During each release, WSO2 executes various automated performance test scenarios and publishes the results.\n+\n+| **Test Scenarios** | **Description**                                                      |\n+|------------------|--------------------------------------------------------------------------|\n+| Passthrough      |   A secured API, which directly invokes the back\\-end service\\.          |\n+| Transformation   |   A secured API, which has a mediation extension to modify the message\\. |\n+ \n+\n+WSO2 uses [Apache JMeter](https://jmeter.apache.org/index.html) as the test client. WSO2 tests each scenario for a fixed duration of time. Thereafter, WSO2 splits the test results into warmup and measurement parts and uses the measurement part to compute the performance metrics.\n+\n+Test scenarios use a [Netty](https://netty.io/) based back-end service which echoes back any request posted to it after a specified period of time.\n+\n+WSO2 runs the performance tests with different concurrent user loads, message sizes (payloads), and back-end service delays.\n+\n+The main performance metrics:\n+\n+- **Throughput**: The number of requests that the WSO2 API Manager processes during a specific time interval (e.g. per second).\n+- **Response Time**: The end-to-end latency for an operation of invoking an API. The complete distribution of response times was recorded.\n+\n+In addition to the above metrics, WSO2 measures the load average and several memory-related metrics.\n+\n+The duration of each test is 900 seconds. The warm-up period is 300 seconds. The measurement results are collected after the warm-up period.\n+\n+A [c5.large Amazon EC2 instance](https://aws.amazon.com/ec2/instance-types/) was used to install WSO2 API Manager.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93d340b7b3b3563132f8d94554b34bac59e70743"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU1ODM0Mw==", "bodyText": "When defining images, always make sure to add the zoom option using the following format similar to how I have updated all the image definitions in this PR.\n[![ALT text](image-path/image-name)](image-path/image-name)", "url": "https://github.com/wso2/docs-apim/pull/2019#discussion_r506558343", "createdAt": "2020-10-16T15:42:45Z", "author": {"login": "Mariangela"}, "path": "en/docs/install-and-setup/setup/deployment-best-practices/performance-and-capacity-planning.md", "diffHunk": "@@ -0,0 +1,260 @@\n+# WSO2 API-M Performance and Capacity Planning\n+\n+The following sections analyze the results of WSO2 API Manager performance tests.\n+\n+## Summary\n+\n+During each release, WSO2 executes various automated performance test scenarios and publishes the results.\n+\n+| **Test Scenarios** | **Description**                                                      |\n+|------------------|--------------------------------------------------------------------------|\n+| Passthrough      |   A secured API, which directly invokes the back\\-end service\\.          |\n+| Transformation   |   A secured API, which has a mediation extension to modify the message\\. |\n+ \n+\n+WSO2 uses [Apache JMeter](https://jmeter.apache.org/index.html) as the test client. WSO2 tests each scenario for a fixed duration of time. Thereafter, WSO2 splits the test results into warmup and measurement parts and uses the measurement part to compute the performance metrics.\n+\n+Test scenarios use a [Netty](https://netty.io/) based back-end service which echoes back any request posted to it after a specified period of time.\n+\n+WSO2 runs the performance tests with different concurrent user loads, message sizes (payloads), and back-end service delays.\n+\n+The main performance metrics:\n+\n+- **Throughput**: The number of requests that the WSO2 API Manager processes during a specific time interval (e.g. per second).\n+- **Response Time**: The end-to-end latency for an operation of invoking an API. The complete distribution of response times was recorded.\n+\n+In addition to the above metrics, WSO2 measures the load average and several memory-related metrics.\n+\n+The duration of each test is 900 seconds. The warm-up period is 300 seconds. The measurement results are collected after the warm-up period.\n+\n+A [c5.large Amazon EC2 instance](https://aws.amazon.com/ec2/instance-types/) was used to install WSO2 API Manager.\n+\n+## Test parameters\n+<table>\n+  <tr>\n+   <th><strong>Test Parameter</strong>\n+   </th>\n+   <th><strong>Description</strong>\n+   </th>\n+   <th><strong>Values</strong>\n+   </th>\n+  </tr>\n+  <tr>\n+   <td>Scenario Name\n+   </td>\n+   <td>The name of the test scenario.\n+   </td>\n+   <td> - \n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Heap Size\n+   </td>\n+   <td>The amount of memory allocated to the application\n+   </td>\n+   <td>2G\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Concurrent Users\n+   </td>\n+   <td>The number of users accessing the application at the same time.\n+   </td>\n+   <td>50, 100, 200, 300, 500, 1000\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Message Size (Bytes)\n+   </td>\n+   <td>The request payload size in Bytes.\n+   </td>\n+   <td>50, 1024, 10240, 102400\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Back-end Delay (ms)\n+   </td>\n+   <td>The delay added by the back-end service.\n+   </td>\n+   <td>0\n+   </td>\n+  </tr>\n+</table>\n+\n+## Measurements collected\n+The following are the measurements collected from each performance test conducted for a given combination of test parameters.\n+\n+<table>\n+  <tr>\n+   <th><strong>Measurement</strong>\n+   </th>\n+   <th><strong>Description</strong>\n+   </th>\n+  </tr>\n+  <tr>\n+   <td>Error %\n+   </td>\n+   <td>The percentage of requests with errors.\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Average Response Time (ms)\n+   </td>\n+   <td>The average response time of a set of results.\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Standard Deviation of Response Time (ms)\n+   </td>\n+   <td>The \u201cStandard Deviation\u201d of the response time.\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>99th Percentile of Response Time (ms)\n+   </td>\n+   <td>99% of the requests took no more than this time. The remaining samples took at least as long as this.\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Throughput (Requests/sec)\n+   </td>\n+   <td>The throughput is measured in requests per second.\n+   </td>\n+  </tr>\n+  <tr>\n+   <td>Average Memory Footprint After Full GC (M)\n+   </td>\n+   <td>The average memory consumed by the application after a full garbage collection event.\n+   </td>\n+  </tr>\n+</table>\n+\n+For a detailed analysis of the performance of API-M 3.2.0, see [API-M 3.2.0 Performance graphs on Github](https://github.com/wso2/performance-apim/tree/performance-test-276-2020-08-03_08-47-25/performance/benchmarks/3.2.0%20graphs-all).\n+\n+## Observations from all results\n+\n+There are key observations for the average user scenario of accessing APIs with 1KiB messages and the back-end service having 30ms delay.\n+\n+The following are the key observations from the all performance tests done with different message sizes and different backend delays. (See **Comparison of results** for all charts used to derive the pointed mentioned below)\n+\n+#### Throughput comparison:\n+\n+A throughput increase is observed in the transformation scenario in API-M 3.2.0, in comparison to API-M 3.1.0\n+\n+The throughput increases up to a certain limit when the number of concurrent users increases. The Mediation API throughput increase rate is much lower than the Echo API. Throughput decreases when the message sizes increase. Throughput decreases when the backend sleep time increase. This observation is similar to both APIs. This means that if the backend takes more time, the request processing rate at the API Manager Gateway will be less.\n+\n+#### Key observations related to response time:\n+\n+The average response time increases when the number of concurrent users increases. The increasing rate of average response time for both API-M 3.2.0 and API-M 3.1.0 is similar.\n+\n+The average response time increases when the number of concurrent users increases. The average response time increases considerably for Mediation API when the message sizes increase due to the message processing. The average response time of the Echo API does not increase as much as the Mediation API. The average response time increases when the backend sleep time increases. This observation is similar to both APIs.\n+\n+#### Key observations related to GC throughput:\n+\n+The GC throughput decreases when the number of concurrent users increases. When there are more concurrent users, the object allocation rate increases. The GC throughput increases when the message size increases. The request processing rate slows down due to the time taken to process large messages. Therefore, the object allocation rate decreases  when the message size increases. The GC throughput increases when the backend sleep time increases. The object allocation rate will be low when the backend takes more time to respond.\n+\n+## Comparison of 3.1.0 and 3.2.0\n+\n+### Average response time comparison\n+\n+#### Average response time vs concurrent users\n+\n+  [![]({{base_path}}/assets/img/setup-and-install/performance-test-results/average_time_0ms_50B.png)]({{base_path}}/assets/img/setup-and-install/performance-test-results/average_time_0ms_50B.png)\n+  [![]({{base_path}}/assets/img/setup-and-install/performance-test-results/average_time_0ms_1KiB.png)]({{base_path}}/assets/img/setup-and-install/performance-test-results/average_time_0ms_1KiB.png)\n+  [![]({{base_path}}/assets/img/setup-and-install/performance-test-results/average_time_0ms_10KiB.png)]({{base_path}}/assets/img/setup-and-install/performance-test-results/average_time_0ms_10KiB.png)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93d340b7b3b3563132f8d94554b34bac59e70743"}, "originalPosition": 164}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4149db5a544213a5a42008033e38d9ee0c0da259", "author": {"user": {"login": "ruthryi", "name": "Ruthryi Kulasekaran"}}, "url": "https://github.com/wso2/docs-apim/commit/4149db5a544213a5a42008033e38d9ee0c0da259", "committedDate": "2020-11-04T15:02:13Z", "message": "Change image names to lowercase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb4c668d389a2205a6484adb04e27ddb7db37df5", "author": {"user": {"login": "ruthryi", "name": "Ruthryi Kulasekaran"}}, "url": "https://github.com/wso2/docs-apim/commit/eb4c668d389a2205a6484adb04e27ddb7db37df5", "committedDate": "2020-11-04T15:07:00Z", "message": "Merge branch '3.2.0' of https://github.com/wso2/docs-apim into 3.2.0-perf"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0OTU0Mzkx", "url": "https://github.com/wso2/docs-apim/pull/2019#pullrequestreview-524954391", "createdAt": "2020-11-06T08:45:16Z", "commit": {"oid": "eb4c668d389a2205a6484adb04e27ddb7db37df5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1674, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}