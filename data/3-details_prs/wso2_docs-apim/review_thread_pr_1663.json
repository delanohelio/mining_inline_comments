{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1OTY2Mzk3", "number": 1663, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMTowNzoxN1rOEYAUvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMTozMjo1NVrOEYAzKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjA2NTkxOnYy", "diffSide": "RIGHT", "path": "en/docs/learn/rate-limiting/access-control.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMTowNzoxN1rOHAGzOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzozNjo0NFrOHAL3jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3MzQ2Ng==", "bodyText": "Please change description to something similar to -\nIf the 'Invert Condition' is checked, then the condition applies only to the IPs not mentioned in the 'IP Address'.", "url": "https://github.com/wso2/docs-apim/pull/1663#discussion_r469873466", "createdAt": "2020-08-13T11:07:17Z", "author": {"login": "ruthryi"}, "path": "en/docs/learn/rate-limiting/access-control.md", "diffHunk": "@@ -18,35 +18,36 @@ When requests to an API are to be permitted from a set of known/trusted IPs only\n 2.  Under the **Rate Limiting Policies** tab and navigate to **Advanced Policies.**\n 3.  Click Add New Policy to add a new Rate Limit tier.\n \n-    ![](../../assets/img/learn/allowed-ip-add-policy.png)\n+    ![Advanced Rate Limit policy]({{base_path}}/assets/img/learn/allowed-ip-add-policy.png)\n \n-4.  Fill the details as below and click **Add Conditional Group** .\n+4.  Fill the details as below and click **Add Conditional Group**.\n \n-    ![](../../assets/img/learn/allowed-ip-add-conditional-group.png)\n+    ![Advanced Rate Limit policy]({{base_path}}/assets/img/learn/allowed-ip-add-conditional-group.png)\n \n 5.  Open the Conditional Group added and fill the details.\n \n     | Property            | Value                                                                                                          |\n     |---------------------|----------------------------------------------------------------------------------------------------------------|\n-    | IP Condition Policy | Checked                                                                                                        |\n     | IP Condition Type   | Specific IP                                                                                                    |\n     | IP Address          | <IP_Address_to_be_allowed> E.g. 193.100.3.106                                                              |\n     | Invert Condition    | Checked (If Invert Condition check then condition only apply to the IPs which not mention in IP Address above) |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b96a57be68cb6498fbbabf3ac016e291980d0b7"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1NjQ5Mw==", "bodyText": "Fixed with 8ac6250", "url": "https://github.com/wso2/docs-apim/pull/1663#discussion_r469956493", "createdAt": "2020-08-13T13:36:44Z", "author": {"login": "Meruja"}, "path": "en/docs/learn/rate-limiting/access-control.md", "diffHunk": "@@ -18,35 +18,36 @@ When requests to an API are to be permitted from a set of known/trusted IPs only\n 2.  Under the **Rate Limiting Policies** tab and navigate to **Advanced Policies.**\n 3.  Click Add New Policy to add a new Rate Limit tier.\n \n-    ![](../../assets/img/learn/allowed-ip-add-policy.png)\n+    ![Advanced Rate Limit policy]({{base_path}}/assets/img/learn/allowed-ip-add-policy.png)\n \n-4.  Fill the details as below and click **Add Conditional Group** .\n+4.  Fill the details as below and click **Add Conditional Group**.\n \n-    ![](../../assets/img/learn/allowed-ip-add-conditional-group.png)\n+    ![Advanced Rate Limit policy]({{base_path}}/assets/img/learn/allowed-ip-add-conditional-group.png)\n \n 5.  Open the Conditional Group added and fill the details.\n \n     | Property            | Value                                                                                                          |\n     |---------------------|----------------------------------------------------------------------------------------------------------------|\n-    | IP Condition Policy | Checked                                                                                                        |\n     | IP Condition Type   | Specific IP                                                                                                    |\n     | IP Address          | <IP_Address_to_be_allowed> E.g. 193.100.3.106                                                              |\n     | Invert Condition    | Checked (If Invert Condition check then condition only apply to the IPs which not mention in IP Address above) |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg3MzQ2Ng=="}, "originalCommit": {"oid": "5b96a57be68cb6498fbbabf3ac016e291980d0b7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjEyMTg2OnYy", "diffSide": "RIGHT", "path": "en/docs/learn/rate-limiting/introducing-throttling-use-cases.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMToyNTo0M1rOHAHUog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzozNjo0OVrOHAL3xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg4MjAxOA==", "bodyText": "Break this into 2 paragraphs with \"To prevent your backend system from getting overloaded\"", "url": "https://github.com/wso2/docs-apim/pull/1663#discussion_r469882018", "createdAt": "2020-08-13T11:25:43Z", "author": {"login": "ruthryi"}, "path": "en/docs/learn/rate-limiting/introducing-throttling-use-cases.md", "diffHunk": "@@ -27,19 +27,19 @@ The following sections describe the type of throttling policy applicable to each\n \n #### Maximum backend throughput ( **Applies per API** ): API Publisher\n \n-According to the API Gateway architecture, an API in the Gateway is actually a proxy to an actual service hosted within your organization, cloud, etc. This usually means that there is a physical capacity that your backend services can handle. Although you expose your API on defined limits (subscription tiers), as the number of applications that consume your API grows, the number of requests being served by your API rise, which in turn means that the number of requests served by your backend system rise as well. Therefore, although none of the applications may exceed their own allocated quotas, their combined load might hit the maximum capacity that can be handled by your backend system. To prevent your backend system from getting overloaded, the limits enforced by the **Maximum Backend Throughput** in the API act as a hard stop on the number of requests that your backend system can serve within a given time period. The counters maintained when evaluating the maximum backend throughput are shared across all nodes of the Gateway cluster and apply across all users using any application that accesses that particular API. For information on how to specify maximum backend throughput limits, see [Setting Maximum Backend Throughput Limits](../setting-maximum-backend-throughput-limits) .\n+According to the API Gateway architecture, an API in the Gateway is actually a proxy to an actual service hosted within your organization, cloud, etc. This usually means that there is a physical capacity that your backend services can handle. Although you expose your API on defined limits (subscription tiers), as the number of applications that consume your API grows, the number of requests being served by your API rise, which in turn means that the number of requests served by your backend system rise as well. Therefore, although none of the applications may exceed their own allocated quotas, their combined load might hit the maximum capacity that can be handled by your backend system. To prevent your backend system from getting overloaded, the limits enforced by the **Maximum Backend Throughput** in the API act as a hard stop on the number of requests that your backend system can serve within a given time period. The counters maintained when evaluating the maximum backend throughput are shared across all nodes of the Gateway cluster and apply across all users using any application that accesses that particular API. For information on how to specify maximum backend throughput limits, see [Setting Maximum Backend Throughput Limits]({{base_path}}/learn/rate-limiting/setting-maximum-backend-throughput-limits).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b96a57be68cb6498fbbabf3ac016e291980d0b7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1NjU0OQ==", "bodyText": "Fixed with 8ac6250", "url": "https://github.com/wso2/docs-apim/pull/1663#discussion_r469956549", "createdAt": "2020-08-13T13:36:49Z", "author": {"login": "Meruja"}, "path": "en/docs/learn/rate-limiting/introducing-throttling-use-cases.md", "diffHunk": "@@ -27,19 +27,19 @@ The following sections describe the type of throttling policy applicable to each\n \n #### Maximum backend throughput ( **Applies per API** ): API Publisher\n \n-According to the API Gateway architecture, an API in the Gateway is actually a proxy to an actual service hosted within your organization, cloud, etc. This usually means that there is a physical capacity that your backend services can handle. Although you expose your API on defined limits (subscription tiers), as the number of applications that consume your API grows, the number of requests being served by your API rise, which in turn means that the number of requests served by your backend system rise as well. Therefore, although none of the applications may exceed their own allocated quotas, their combined load might hit the maximum capacity that can be handled by your backend system. To prevent your backend system from getting overloaded, the limits enforced by the **Maximum Backend Throughput** in the API act as a hard stop on the number of requests that your backend system can serve within a given time period. The counters maintained when evaluating the maximum backend throughput are shared across all nodes of the Gateway cluster and apply across all users using any application that accesses that particular API. For information on how to specify maximum backend throughput limits, see [Setting Maximum Backend Throughput Limits](../setting-maximum-backend-throughput-limits) .\n+According to the API Gateway architecture, an API in the Gateway is actually a proxy to an actual service hosted within your organization, cloud, etc. This usually means that there is a physical capacity that your backend services can handle. Although you expose your API on defined limits (subscription tiers), as the number of applications that consume your API grows, the number of requests being served by your API rise, which in turn means that the number of requests served by your backend system rise as well. Therefore, although none of the applications may exceed their own allocated quotas, their combined load might hit the maximum capacity that can be handled by your backend system. To prevent your backend system from getting overloaded, the limits enforced by the **Maximum Backend Throughput** in the API act as a hard stop on the number of requests that your backend system can serve within a given time period. The counters maintained when evaluating the maximum backend throughput are shared across all nodes of the Gateway cluster and apply across all users using any application that accesses that particular API. For information on how to specify maximum backend throughput limits, see [Setting Maximum Backend Throughput Limits]({{base_path}}/learn/rate-limiting/setting-maximum-backend-throughput-limits).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg4MjAxOA=="}, "originalCommit": {"oid": "5b96a57be68cb6498fbbabf3ac016e291980d0b7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjEyNjAwOnYy", "diffSide": "RIGHT", "path": "en/docs/learn/rate-limiting/introducing-throttling-use-cases.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMToyNzowM1rOHAHXKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzozNjo1NVrOHAL4Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg4MjY2Ng==", "bodyText": "Instead of s/he, please use 'they'.", "url": "https://github.com/wso2/docs-apim/pull/1663#discussion_r469882666", "createdAt": "2020-08-13T11:27:03Z", "author": {"login": "ruthryi"}, "path": "en/docs/learn/rate-limiting/introducing-throttling-use-cases.md", "diffHunk": "@@ -27,19 +27,19 @@ The following sections describe the type of throttling policy applicable to each\n \n #### Maximum backend throughput ( **Applies per API** ): API Publisher\n \n-According to the API Gateway architecture, an API in the Gateway is actually a proxy to an actual service hosted within your organization, cloud, etc. This usually means that there is a physical capacity that your backend services can handle. Although you expose your API on defined limits (subscription tiers), as the number of applications that consume your API grows, the number of requests being served by your API rise, which in turn means that the number of requests served by your backend system rise as well. Therefore, although none of the applications may exceed their own allocated quotas, their combined load might hit the maximum capacity that can be handled by your backend system. To prevent your backend system from getting overloaded, the limits enforced by the **Maximum Backend Throughput** in the API act as a hard stop on the number of requests that your backend system can serve within a given time period. The counters maintained when evaluating the maximum backend throughput are shared across all nodes of the Gateway cluster and apply across all users using any application that accesses that particular API. For information on how to specify maximum backend throughput limits, see [Setting Maximum Backend Throughput Limits](../setting-maximum-backend-throughput-limits) .\n+According to the API Gateway architecture, an API in the Gateway is actually a proxy to an actual service hosted within your organization, cloud, etc. This usually means that there is a physical capacity that your backend services can handle. Although you expose your API on defined limits (subscription tiers), as the number of applications that consume your API grows, the number of requests being served by your API rise, which in turn means that the number of requests served by your backend system rise as well. Therefore, although none of the applications may exceed their own allocated quotas, their combined load might hit the maximum capacity that can be handled by your backend system. To prevent your backend system from getting overloaded, the limits enforced by the **Maximum Backend Throughput** in the API act as a hard stop on the number of requests that your backend system can serve within a given time period. The counters maintained when evaluating the maximum backend throughput are shared across all nodes of the Gateway cluster and apply across all users using any application that accesses that particular API. For information on how to specify maximum backend throughput limits, see [Setting Maximum Backend Throughput Limits]({{base_path}}/learn/rate-limiting/setting-maximum-backend-throughput-limits).\n \n ### Implications on the APIs in the Gateway\n \n #### Subscription tiers: API Publisher\n \n-When an API Publisher publishes an API to be consumed by applications, s/he\u00a0can choose to make the API available over different limits. For example, the **Gold** tier allows an application to access the API at 5000 requests per minute while a **Silver** tier allows an application to access the API at 2000 requests per minute. For information on how to define a throttling tier to an API, see [API-level throttling (API publisher)](../setting-throttling-limits/#subscription-level-throttling-api-publisher) .\n+When an API Publisher publishes an API to be consumed by applications, s/he\u00a0can choose to make the API available over different limits. For example, the **Gold** tier allows an application to access the API at 5000 requests per minute while a **Silver** tier allows an application to access the API at 2000 requests per minute. For information on how to define a throttling tier to an API, see [API-level throttling (API publisher)]({{base_path}}/learn/rate-limiting/setting-throttling-limits/#subscription-level-throttling-api-publisher).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b96a57be68cb6498fbbabf3ac016e291980d0b7"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1NjYzMQ==", "bodyText": "Fixed with 8ac6250", "url": "https://github.com/wso2/docs-apim/pull/1663#discussion_r469956631", "createdAt": "2020-08-13T13:36:55Z", "author": {"login": "Meruja"}, "path": "en/docs/learn/rate-limiting/introducing-throttling-use-cases.md", "diffHunk": "@@ -27,19 +27,19 @@ The following sections describe the type of throttling policy applicable to each\n \n #### Maximum backend throughput ( **Applies per API** ): API Publisher\n \n-According to the API Gateway architecture, an API in the Gateway is actually a proxy to an actual service hosted within your organization, cloud, etc. This usually means that there is a physical capacity that your backend services can handle. Although you expose your API on defined limits (subscription tiers), as the number of applications that consume your API grows, the number of requests being served by your API rise, which in turn means that the number of requests served by your backend system rise as well. Therefore, although none of the applications may exceed their own allocated quotas, their combined load might hit the maximum capacity that can be handled by your backend system. To prevent your backend system from getting overloaded, the limits enforced by the **Maximum Backend Throughput** in the API act as a hard stop on the number of requests that your backend system can serve within a given time period. The counters maintained when evaluating the maximum backend throughput are shared across all nodes of the Gateway cluster and apply across all users using any application that accesses that particular API. For information on how to specify maximum backend throughput limits, see [Setting Maximum Backend Throughput Limits](../setting-maximum-backend-throughput-limits) .\n+According to the API Gateway architecture, an API in the Gateway is actually a proxy to an actual service hosted within your organization, cloud, etc. This usually means that there is a physical capacity that your backend services can handle. Although you expose your API on defined limits (subscription tiers), as the number of applications that consume your API grows, the number of requests being served by your API rise, which in turn means that the number of requests served by your backend system rise as well. Therefore, although none of the applications may exceed their own allocated quotas, their combined load might hit the maximum capacity that can be handled by your backend system. To prevent your backend system from getting overloaded, the limits enforced by the **Maximum Backend Throughput** in the API act as a hard stop on the number of requests that your backend system can serve within a given time period. The counters maintained when evaluating the maximum backend throughput are shared across all nodes of the Gateway cluster and apply across all users using any application that accesses that particular API. For information on how to specify maximum backend throughput limits, see [Setting Maximum Backend Throughput Limits]({{base_path}}/learn/rate-limiting/setting-maximum-backend-throughput-limits).\n \n ### Implications on the APIs in the Gateway\n \n #### Subscription tiers: API Publisher\n \n-When an API Publisher publishes an API to be consumed by applications, s/he\u00a0can choose to make the API available over different limits. For example, the **Gold** tier allows an application to access the API at 5000 requests per minute while a **Silver** tier allows an application to access the API at 2000 requests per minute. For information on how to define a throttling tier to an API, see [API-level throttling (API publisher)](../setting-throttling-limits/#subscription-level-throttling-api-publisher) .\n+When an API Publisher publishes an API to be consumed by applications, s/he\u00a0can choose to make the API available over different limits. For example, the **Gold** tier allows an application to access the API at 5000 requests per minute while a **Silver** tier allows an application to access the API at 2000 requests per minute. For information on how to define a throttling tier to an API, see [API-level throttling (API publisher)]({{base_path}}/learn/rate-limiting/setting-throttling-limits/#subscription-level-throttling-api-publisher).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg4MjY2Ng=="}, "originalCommit": {"oid": "5b96a57be68cb6498fbbabf3ac016e291980d0b7"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjEzOTcxOnYy", "diffSide": "RIGHT", "path": "en/docs/learn/rate-limiting/introducing-throttling-use-cases.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMTozMTo0M1rOHAHfqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzozNzowMFrOHAL4Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg4NDg0MA==", "bodyText": "Does this look better;\n\nThe following image shows an example for configuring.....\n\nWDYT?", "url": "https://github.com/wso2/docs-apim/pull/1663#discussion_r469884840", "createdAt": "2020-08-13T11:31:43Z", "author": {"login": "ruthryi"}, "path": "en/docs/learn/rate-limiting/introducing-throttling-use-cases.md", "diffHunk": "@@ -56,42 +56,42 @@ Let\u2019s look at how each of these can be important for serving requests through\n \n You can control/restrict access to your API or its selected resources for a given IP address or address range. For example, if you need to grant permission for internal applications to consume a larger quota of your API resource than your external consumers, you can define an advanced policy with higher limits for your internal IP address range and lower limits for the rest. \n \n-Here is a sample for configuring an IP condition by limitting the number of requests for a specific IP address.\n+Here is a sample for configuring an IP condition by limiting the number of requests for a specific IP address.\n \n-![](../../assets/img/learn/advanced-throttling-ip-condition.png)\n+![Advanced Rate Limit policy]({{base_path}}/assets/img/learn/new-allow-specific-ip.png)\n \n ##### HTTP request headers\n \n Advanced policies allow you to apply limits to APIs by filtering requests based on HTTP headers. For example, assume you need to apply a special limit for JSON requests. To do that, you can filter JSON messages by using a policy that inspects the HTTP request headers and checks if the `Content-Type` header is `application/json` and apply a special limit for those requests while allowing a default value for the rest.\n \n Here is a sample for configuring a header condition by considering the \"Content-Type\" header.\n \n-![](../../assets/img/learn/advanced-throttling-header-condition.png)\n+![]({{base_path}}/assets/img/learn/new-header-condition-regex.png)\n ##### JWT claims\n \n A JWT claim contains meta information of an API request. It can include application details, API details, user claims, etc. Advanced throttling policies based on JWT claims allow you to filter requests by JWT claim values and apply limits for requests. For example, if you need to allow special limits for users in a specific user role, you can create an advanced policy that checks for a particular regular expression on the role claim of the user and apply special limits for the ones that match.\n \n-Here is a sample for configuring JWT claim condition by considering the version of the API (http://wso2.org/claims/version).\n+Here is a sample for configuring JWT claim condition by considering the version of the API (http://wso2.org/claims/subscribe).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b96a57be68cb6498fbbabf3ac016e291980d0b7"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1NjY4Mw==", "bodyText": "Fixed with 8ac6250", "url": "https://github.com/wso2/docs-apim/pull/1663#discussion_r469956683", "createdAt": "2020-08-13T13:37:00Z", "author": {"login": "Meruja"}, "path": "en/docs/learn/rate-limiting/introducing-throttling-use-cases.md", "diffHunk": "@@ -56,42 +56,42 @@ Let\u2019s look at how each of these can be important for serving requests through\n \n You can control/restrict access to your API or its selected resources for a given IP address or address range. For example, if you need to grant permission for internal applications to consume a larger quota of your API resource than your external consumers, you can define an advanced policy with higher limits for your internal IP address range and lower limits for the rest. \n \n-Here is a sample for configuring an IP condition by limitting the number of requests for a specific IP address.\n+Here is a sample for configuring an IP condition by limiting the number of requests for a specific IP address.\n \n-![](../../assets/img/learn/advanced-throttling-ip-condition.png)\n+![Advanced Rate Limit policy]({{base_path}}/assets/img/learn/new-allow-specific-ip.png)\n \n ##### HTTP request headers\n \n Advanced policies allow you to apply limits to APIs by filtering requests based on HTTP headers. For example, assume you need to apply a special limit for JSON requests. To do that, you can filter JSON messages by using a policy that inspects the HTTP request headers and checks if the `Content-Type` header is `application/json` and apply a special limit for those requests while allowing a default value for the rest.\n \n Here is a sample for configuring a header condition by considering the \"Content-Type\" header.\n \n-![](../../assets/img/learn/advanced-throttling-header-condition.png)\n+![]({{base_path}}/assets/img/learn/new-header-condition-regex.png)\n ##### JWT claims\n \n A JWT claim contains meta information of an API request. It can include application details, API details, user claims, etc. Advanced throttling policies based on JWT claims allow you to filter requests by JWT claim values and apply limits for requests. For example, if you need to allow special limits for users in a specific user role, you can create an advanced policy that checks for a particular regular expression on the role claim of the user and apply special limits for the ones that match.\n \n-Here is a sample for configuring JWT claim condition by considering the version of the API (http://wso2.org/claims/version).\n+Here is a sample for configuring JWT claim condition by considering the version of the API (http://wso2.org/claims/subscribe).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg4NDg0MA=="}, "originalCommit": {"oid": "5b96a57be68cb6498fbbabf3ac016e291980d0b7"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjE0MTM2OnYy", "diffSide": "RIGHT", "path": "en/docs/learn/rate-limiting/introducing-throttling-use-cases.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMTozMjoxMlrOHAHgrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzozNzowNVrOHAL4fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg4NTEwMQ==", "bodyText": "Should be i.e.", "url": "https://github.com/wso2/docs-apim/pull/1663#discussion_r469885101", "createdAt": "2020-08-13T11:32:12Z", "author": {"login": "ruthryi"}, "path": "en/docs/learn/rate-limiting/introducing-throttling-use-cases.md", "diffHunk": "@@ -56,42 +56,42 @@ Let\u2019s look at how each of these can be important for serving requests through\n \n You can control/restrict access to your API or its selected resources for a given IP address or address range. For example, if you need to grant permission for internal applications to consume a larger quota of your API resource than your external consumers, you can define an advanced policy with higher limits for your internal IP address range and lower limits for the rest. \n \n-Here is a sample for configuring an IP condition by limitting the number of requests for a specific IP address.\n+Here is a sample for configuring an IP condition by limiting the number of requests for a specific IP address.\n \n-![](../../assets/img/learn/advanced-throttling-ip-condition.png)\n+![Advanced Rate Limit policy]({{base_path}}/assets/img/learn/new-allow-specific-ip.png)\n \n ##### HTTP request headers\n \n Advanced policies allow you to apply limits to APIs by filtering requests based on HTTP headers. For example, assume you need to apply a special limit for JSON requests. To do that, you can filter JSON messages by using a policy that inspects the HTTP request headers and checks if the `Content-Type` header is `application/json` and apply a special limit for those requests while allowing a default value for the rest.\n \n Here is a sample for configuring a header condition by considering the \"Content-Type\" header.\n \n-![](../../assets/img/learn/advanced-throttling-header-condition.png)\n+![]({{base_path}}/assets/img/learn/new-header-condition-regex.png)\n ##### JWT claims\n \n A JWT claim contains meta information of an API request. It can include application details, API details, user claims, etc. Advanced throttling policies based on JWT claims allow you to filter requests by JWT claim values and apply limits for requests. For example, if you need to allow special limits for users in a specific user role, you can create an advanced policy that checks for a particular regular expression on the role claim of the user and apply special limits for the ones that match.\n \n-Here is a sample for configuring JWT claim condition by considering the version of the API (http://wso2.org/claims/version).\n+Here is a sample for configuring JWT claim condition by considering the version of the API (http://wso2.org/claims/subscribe).\n \n-![](../../assets/img/learn/advanced-throttling-jwt-condition.png)\n+![]({{base_path}}/assets/img/learn/new-jwt-condition-regex.png)\n ##### Query parameters\n \n Filtering based on query parameters almost always apply to HTTP GET requests when doing search type of operations. For example, if you have a search API with `category` as a query parameter, you can have different limits for searching different categories.\n \n-![](../../assets/img/learn/advanced-throttling-query-conidtion.png)\n+![]({{base_path}}/assets/img/learn/new-advanced-throttling-query-conidtion.png)\n Eg : 'sales' category can be allocated with more requests than 'hr' category\n \n ### Implications on applications that consume APIs\n \n #### Per token quota: Application Developer\n \n-When an application developer subscribes their application to an API, they select a tier (limit) for their application to invoke the API. This limit applies across all users of the application when accessing the particular API. To ensure that a fair distribution of the quota is available among all the users, it is important to consider setting a per user quota for the application, since a user is identified by a token (in OAuth2.0, this limit is known as the per token quota). It is important to note that the limit enforced by this setting applies to a single user (token) accessing all APIs of the application. The counters maintained when evaluating a per token quota are shared across all nodes in the Gateway cluster. For information on how to define a throttling tier to an application, see [Application-level throttling (application developer)](../setting-throttling-limits/#application-level-throttling-application-developer)) .\n+When an application developer subscribes their application to an API, they select a tier (limit) for their application to invoke the API. This limit applies across all users of the application when accessing the particular API. To ensure that a fair distribution of the quota is available among all the users, it is important to consider setting a per user quota for the application, since a user is identified by a token (in OAuth2.0, this limit is known as the per token quota). It is important to note that the limit enforced by this setting applies to a single user (token) accessing all APIs of the application. The counters maintained when evaluating a per token quota are shared across all nodes in the Gateway cluster. For information on how to define a throttling tier to an application, see [Application-level throttling (application developer)]({{base_path}}/learn/rate-limiting/setting-throttling-limits/#application-level-throttling-application-developer)).\n \n \n The below diagram shows how throttle policies are applied at different levels.\n \n \n-![](../../assets/img/learn/throttling-levels.png)\n+![]({{base_path}}/assets/img/learn/throttling-levels.png)\n \n If [advanced throttling](#advanced-throttling-policies-api-publisher) policies are added and engaged to a specific API or API resource, it will also be applied here. i.e Requests will be allowed/rejected based on the conditions specified in advanced throttling policies as well.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b96a57be68cb6498fbbabf3ac016e291980d0b7"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1NjczMg==", "bodyText": "Fixed with 8ac6250", "url": "https://github.com/wso2/docs-apim/pull/1663#discussion_r469956732", "createdAt": "2020-08-13T13:37:05Z", "author": {"login": "Meruja"}, "path": "en/docs/learn/rate-limiting/introducing-throttling-use-cases.md", "diffHunk": "@@ -56,42 +56,42 @@ Let\u2019s look at how each of these can be important for serving requests through\n \n You can control/restrict access to your API or its selected resources for a given IP address or address range. For example, if you need to grant permission for internal applications to consume a larger quota of your API resource than your external consumers, you can define an advanced policy with higher limits for your internal IP address range and lower limits for the rest. \n \n-Here is a sample for configuring an IP condition by limitting the number of requests for a specific IP address.\n+Here is a sample for configuring an IP condition by limiting the number of requests for a specific IP address.\n \n-![](../../assets/img/learn/advanced-throttling-ip-condition.png)\n+![Advanced Rate Limit policy]({{base_path}}/assets/img/learn/new-allow-specific-ip.png)\n \n ##### HTTP request headers\n \n Advanced policies allow you to apply limits to APIs by filtering requests based on HTTP headers. For example, assume you need to apply a special limit for JSON requests. To do that, you can filter JSON messages by using a policy that inspects the HTTP request headers and checks if the `Content-Type` header is `application/json` and apply a special limit for those requests while allowing a default value for the rest.\n \n Here is a sample for configuring a header condition by considering the \"Content-Type\" header.\n \n-![](../../assets/img/learn/advanced-throttling-header-condition.png)\n+![]({{base_path}}/assets/img/learn/new-header-condition-regex.png)\n ##### JWT claims\n \n A JWT claim contains meta information of an API request. It can include application details, API details, user claims, etc. Advanced throttling policies based on JWT claims allow you to filter requests by JWT claim values and apply limits for requests. For example, if you need to allow special limits for users in a specific user role, you can create an advanced policy that checks for a particular regular expression on the role claim of the user and apply special limits for the ones that match.\n \n-Here is a sample for configuring JWT claim condition by considering the version of the API (http://wso2.org/claims/version).\n+Here is a sample for configuring JWT claim condition by considering the version of the API (http://wso2.org/claims/subscribe).\n \n-![](../../assets/img/learn/advanced-throttling-jwt-condition.png)\n+![]({{base_path}}/assets/img/learn/new-jwt-condition-regex.png)\n ##### Query parameters\n \n Filtering based on query parameters almost always apply to HTTP GET requests when doing search type of operations. For example, if you have a search API with `category` as a query parameter, you can have different limits for searching different categories.\n \n-![](../../assets/img/learn/advanced-throttling-query-conidtion.png)\n+![]({{base_path}}/assets/img/learn/new-advanced-throttling-query-conidtion.png)\n Eg : 'sales' category can be allocated with more requests than 'hr' category\n \n ### Implications on applications that consume APIs\n \n #### Per token quota: Application Developer\n \n-When an application developer subscribes their application to an API, they select a tier (limit) for their application to invoke the API. This limit applies across all users of the application when accessing the particular API. To ensure that a fair distribution of the quota is available among all the users, it is important to consider setting a per user quota for the application, since a user is identified by a token (in OAuth2.0, this limit is known as the per token quota). It is important to note that the limit enforced by this setting applies to a single user (token) accessing all APIs of the application. The counters maintained when evaluating a per token quota are shared across all nodes in the Gateway cluster. For information on how to define a throttling tier to an application, see [Application-level throttling (application developer)](../setting-throttling-limits/#application-level-throttling-application-developer)) .\n+When an application developer subscribes their application to an API, they select a tier (limit) for their application to invoke the API. This limit applies across all users of the application when accessing the particular API. To ensure that a fair distribution of the quota is available among all the users, it is important to consider setting a per user quota for the application, since a user is identified by a token (in OAuth2.0, this limit is known as the per token quota). It is important to note that the limit enforced by this setting applies to a single user (token) accessing all APIs of the application. The counters maintained when evaluating a per token quota are shared across all nodes in the Gateway cluster. For information on how to define a throttling tier to an application, see [Application-level throttling (application developer)]({{base_path}}/learn/rate-limiting/setting-throttling-limits/#application-level-throttling-application-developer)).\n \n \n The below diagram shows how throttle policies are applied at different levels.\n \n \n-![](../../assets/img/learn/throttling-levels.png)\n+![]({{base_path}}/assets/img/learn/throttling-levels.png)\n \n If [advanced throttling](#advanced-throttling-policies-api-publisher) policies are added and engaged to a specific API or API resource, it will also be applied here. i.e Requests will be allowed/rejected based on the conditions specified in advanced throttling policies as well.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg4NTEwMQ=="}, "originalCommit": {"oid": "5b96a57be68cb6498fbbabf3ac016e291980d0b7"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNjE0Mzc4OnYy", "diffSide": "RIGHT", "path": "en/docs/learn/rate-limiting/introducing-throttling-use-cases.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMTozMjo1NVrOHAHiDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMzozNzoxMFrOHAL4sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg4NTQ1NA==", "bodyText": "Can we change this to \"The following diagram\" please", "url": "https://github.com/wso2/docs-apim/pull/1663#discussion_r469885454", "createdAt": "2020-08-13T11:32:55Z", "author": {"login": "ruthryi"}, "path": "en/docs/learn/rate-limiting/introducing-throttling-use-cases.md", "diffHunk": "@@ -56,42 +56,42 @@ Let\u2019s look at how each of these can be important for serving requests through\n \n You can control/restrict access to your API or its selected resources for a given IP address or address range. For example, if you need to grant permission for internal applications to consume a larger quota of your API resource than your external consumers, you can define an advanced policy with higher limits for your internal IP address range and lower limits for the rest. \n \n-Here is a sample for configuring an IP condition by limitting the number of requests for a specific IP address.\n+Here is a sample for configuring an IP condition by limiting the number of requests for a specific IP address.\n \n-![](../../assets/img/learn/advanced-throttling-ip-condition.png)\n+![Advanced Rate Limit policy]({{base_path}}/assets/img/learn/new-allow-specific-ip.png)\n \n ##### HTTP request headers\n \n Advanced policies allow you to apply limits to APIs by filtering requests based on HTTP headers. For example, assume you need to apply a special limit for JSON requests. To do that, you can filter JSON messages by using a policy that inspects the HTTP request headers and checks if the `Content-Type` header is `application/json` and apply a special limit for those requests while allowing a default value for the rest.\n \n Here is a sample for configuring a header condition by considering the \"Content-Type\" header.\n \n-![](../../assets/img/learn/advanced-throttling-header-condition.png)\n+![]({{base_path}}/assets/img/learn/new-header-condition-regex.png)\n ##### JWT claims\n \n A JWT claim contains meta information of an API request. It can include application details, API details, user claims, etc. Advanced throttling policies based on JWT claims allow you to filter requests by JWT claim values and apply limits for requests. For example, if you need to allow special limits for users in a specific user role, you can create an advanced policy that checks for a particular regular expression on the role claim of the user and apply special limits for the ones that match.\n \n-Here is a sample for configuring JWT claim condition by considering the version of the API (http://wso2.org/claims/version).\n+Here is a sample for configuring JWT claim condition by considering the version of the API (http://wso2.org/claims/subscribe).\n \n-![](../../assets/img/learn/advanced-throttling-jwt-condition.png)\n+![]({{base_path}}/assets/img/learn/new-jwt-condition-regex.png)\n ##### Query parameters\n \n Filtering based on query parameters almost always apply to HTTP GET requests when doing search type of operations. For example, if you have a search API with `category` as a query parameter, you can have different limits for searching different categories.\n \n-![](../../assets/img/learn/advanced-throttling-query-conidtion.png)\n+![]({{base_path}}/assets/img/learn/new-advanced-throttling-query-conidtion.png)\n Eg : 'sales' category can be allocated with more requests than 'hr' category\n \n ### Implications on applications that consume APIs\n \n #### Per token quota: Application Developer\n \n-When an application developer subscribes their application to an API, they select a tier (limit) for their application to invoke the API. This limit applies across all users of the application when accessing the particular API. To ensure that a fair distribution of the quota is available among all the users, it is important to consider setting a per user quota for the application, since a user is identified by a token (in OAuth2.0, this limit is known as the per token quota). It is important to note that the limit enforced by this setting applies to a single user (token) accessing all APIs of the application. The counters maintained when evaluating a per token quota are shared across all nodes in the Gateway cluster. For information on how to define a throttling tier to an application, see [Application-level throttling (application developer)](../setting-throttling-limits/#application-level-throttling-application-developer)) .\n+When an application developer subscribes their application to an API, they select a tier (limit) for their application to invoke the API. This limit applies across all users of the application when accessing the particular API. To ensure that a fair distribution of the quota is available among all the users, it is important to consider setting a per user quota for the application, since a user is identified by a token (in OAuth2.0, this limit is known as the per token quota). It is important to note that the limit enforced by this setting applies to a single user (token) accessing all APIs of the application. The counters maintained when evaluating a per token quota are shared across all nodes in the Gateway cluster. For information on how to define a throttling tier to an application, see [Application-level throttling (application developer)]({{base_path}}/learn/rate-limiting/setting-throttling-limits/#application-level-throttling-application-developer)).\n \n \n The below diagram shows how throttle policies are applied at different levels.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b96a57be68cb6498fbbabf3ac016e291980d0b7"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk1Njc4NA==", "bodyText": "Fixed with 8ac6250", "url": "https://github.com/wso2/docs-apim/pull/1663#discussion_r469956784", "createdAt": "2020-08-13T13:37:10Z", "author": {"login": "Meruja"}, "path": "en/docs/learn/rate-limiting/introducing-throttling-use-cases.md", "diffHunk": "@@ -56,42 +56,42 @@ Let\u2019s look at how each of these can be important for serving requests through\n \n You can control/restrict access to your API or its selected resources for a given IP address or address range. For example, if you need to grant permission for internal applications to consume a larger quota of your API resource than your external consumers, you can define an advanced policy with higher limits for your internal IP address range and lower limits for the rest. \n \n-Here is a sample for configuring an IP condition by limitting the number of requests for a specific IP address.\n+Here is a sample for configuring an IP condition by limiting the number of requests for a specific IP address.\n \n-![](../../assets/img/learn/advanced-throttling-ip-condition.png)\n+![Advanced Rate Limit policy]({{base_path}}/assets/img/learn/new-allow-specific-ip.png)\n \n ##### HTTP request headers\n \n Advanced policies allow you to apply limits to APIs by filtering requests based on HTTP headers. For example, assume you need to apply a special limit for JSON requests. To do that, you can filter JSON messages by using a policy that inspects the HTTP request headers and checks if the `Content-Type` header is `application/json` and apply a special limit for those requests while allowing a default value for the rest.\n \n Here is a sample for configuring a header condition by considering the \"Content-Type\" header.\n \n-![](../../assets/img/learn/advanced-throttling-header-condition.png)\n+![]({{base_path}}/assets/img/learn/new-header-condition-regex.png)\n ##### JWT claims\n \n A JWT claim contains meta information of an API request. It can include application details, API details, user claims, etc. Advanced throttling policies based on JWT claims allow you to filter requests by JWT claim values and apply limits for requests. For example, if you need to allow special limits for users in a specific user role, you can create an advanced policy that checks for a particular regular expression on the role claim of the user and apply special limits for the ones that match.\n \n-Here is a sample for configuring JWT claim condition by considering the version of the API (http://wso2.org/claims/version).\n+Here is a sample for configuring JWT claim condition by considering the version of the API (http://wso2.org/claims/subscribe).\n \n-![](../../assets/img/learn/advanced-throttling-jwt-condition.png)\n+![]({{base_path}}/assets/img/learn/new-jwt-condition-regex.png)\n ##### Query parameters\n \n Filtering based on query parameters almost always apply to HTTP GET requests when doing search type of operations. For example, if you have a search API with `category` as a query parameter, you can have different limits for searching different categories.\n \n-![](../../assets/img/learn/advanced-throttling-query-conidtion.png)\n+![]({{base_path}}/assets/img/learn/new-advanced-throttling-query-conidtion.png)\n Eg : 'sales' category can be allocated with more requests than 'hr' category\n \n ### Implications on applications that consume APIs\n \n #### Per token quota: Application Developer\n \n-When an application developer subscribes their application to an API, they select a tier (limit) for their application to invoke the API. This limit applies across all users of the application when accessing the particular API. To ensure that a fair distribution of the quota is available among all the users, it is important to consider setting a per user quota for the application, since a user is identified by a token (in OAuth2.0, this limit is known as the per token quota). It is important to note that the limit enforced by this setting applies to a single user (token) accessing all APIs of the application. The counters maintained when evaluating a per token quota are shared across all nodes in the Gateway cluster. For information on how to define a throttling tier to an application, see [Application-level throttling (application developer)](../setting-throttling-limits/#application-level-throttling-application-developer)) .\n+When an application developer subscribes their application to an API, they select a tier (limit) for their application to invoke the API. This limit applies across all users of the application when accessing the particular API. To ensure that a fair distribution of the quota is available among all the users, it is important to consider setting a per user quota for the application, since a user is identified by a token (in OAuth2.0, this limit is known as the per token quota). It is important to note that the limit enforced by this setting applies to a single user (token) accessing all APIs of the application. The counters maintained when evaluating a per token quota are shared across all nodes in the Gateway cluster. For information on how to define a throttling tier to an application, see [Application-level throttling (application developer)]({{base_path}}/learn/rate-limiting/setting-throttling-limits/#application-level-throttling-application-developer)).\n \n \n The below diagram shows how throttle policies are applied at different levels.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg4NTQ1NA=="}, "originalCommit": {"oid": "5b96a57be68cb6498fbbabf3ac016e291980d0b7"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1604, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}