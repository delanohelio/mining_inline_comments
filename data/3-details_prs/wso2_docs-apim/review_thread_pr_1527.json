{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MjQ5NjU1", "number": 1527, "reviewThreads": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMzo1OTo1M1rOEP8PaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDowNDowM1rOEXAU6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTUxMDgwOnYy", "diffSide": "RIGHT", "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwMzo1OTo1M1rOGz2rBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTowMTo0NlrOG0u14Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyNjMxMQ==", "bodyText": "Don't we have to implement this with the same query params as GET api-artifact resource?  with tenant domain, API name and version.", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r457026311", "createdAt": "2020-07-20T03:59:53Z", "author": {"login": "1akshitha"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "diffHunk": "@@ -0,0 +1,636 @@\n+swagger: '2.0'\n+######################################################\n+# Prolog\n+######################################################\n+info:\n+  version: \"v1\"\n+  title: \"WSO2 API Manager - Gateway\"\n+  description: |\n+    This document specifies a **RESTful API** for WSO2 **API Manager** - Gateway.\n+    Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.5.176/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification.\n+  contact:\n+    name: \"WSO2\"\n+    url: \"http://wso2.com/products/api-manager/\"\n+    email: \"architecture@wso2.com\"\n+  license:\n+    name: \"Apache 2.0\"\n+    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n+\n+######################################################\n+# The fixed parts of the URLs of the API\n+######################################################\n+\n+# The schemes supported by the API\n+schemes:\n+  - https\n+\n+# The domain of the API.\n+# This is configured by the customer during deployment.\n+# The given host is just an example.\n+host: apis.wso2.com\n+\n+# The base path of the API.\n+# Will be prefixed to all paths.\n+basePath: /api/am/gateway/v1\n+\n+# The following media types can be passed as input in message bodies of the API.\n+# The actual media type must be specified in the Content-Type header field of the request.\n+# The default is json, i.e. the Content-Type header is not needed to\n+# be set, but supporting it serves extensibility.\n+consumes:\n+  - application/json\n+\n+# The following media types may be passed as output in message bodies of the API.\n+# The media type(s) consumable by the requestor is specified in the Accept header field\n+# of the corresponding request.\n+# The actual media type returned will be specfied in the Content-Type header field\n+# of the of the response.\n+# The default of the Accept header is json, i.e. there is not needed to\n+# set the value, but supporting it serves extensibility.\n+produces:\n+  - application/json\n+\n+securityDefinitions:\n+  OAuth2Security:\n+    type: oauth2\n+    flow: password\n+    tokenUrl: https://localhost:9443/oauth2/token\n+    scopes:\n+      apim:api_publish: Publish API\n+\n+######################################################\n+# The \"API Collection\" resource APIs\n+######################################################\n+paths:\n+  /deploy-api:\n+\n+    #-----------------------------------------------------\n+    # Deploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34874953f0f914deeb0d3933a1e02ad1234cb32"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk0NjU5Mw==", "bodyText": "Fixed 2f6d468", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r457946593", "createdAt": "2020-07-21T09:01:46Z", "author": {"login": "Sarangan0219"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "diffHunk": "@@ -0,0 +1,636 @@\n+swagger: '2.0'\n+######################################################\n+# Prolog\n+######################################################\n+info:\n+  version: \"v1\"\n+  title: \"WSO2 API Manager - Gateway\"\n+  description: |\n+    This document specifies a **RESTful API** for WSO2 **API Manager** - Gateway.\n+    Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.5.176/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification.\n+  contact:\n+    name: \"WSO2\"\n+    url: \"http://wso2.com/products/api-manager/\"\n+    email: \"architecture@wso2.com\"\n+  license:\n+    name: \"Apache 2.0\"\n+    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n+\n+######################################################\n+# The fixed parts of the URLs of the API\n+######################################################\n+\n+# The schemes supported by the API\n+schemes:\n+  - https\n+\n+# The domain of the API.\n+# This is configured by the customer during deployment.\n+# The given host is just an example.\n+host: apis.wso2.com\n+\n+# The base path of the API.\n+# Will be prefixed to all paths.\n+basePath: /api/am/gateway/v1\n+\n+# The following media types can be passed as input in message bodies of the API.\n+# The actual media type must be specified in the Content-Type header field of the request.\n+# The default is json, i.e. the Content-Type header is not needed to\n+# be set, but supporting it serves extensibility.\n+consumes:\n+  - application/json\n+\n+# The following media types may be passed as output in message bodies of the API.\n+# The media type(s) consumable by the requestor is specified in the Accept header field\n+# of the corresponding request.\n+# The actual media type returned will be specfied in the Content-Type header field\n+# of the of the response.\n+# The default of the Accept header is json, i.e. there is not needed to\n+# set the value, but supporting it serves extensibility.\n+produces:\n+  - application/json\n+\n+securityDefinitions:\n+  OAuth2Security:\n+    type: oauth2\n+    flow: password\n+    tokenUrl: https://localhost:9443/oauth2/token\n+    scopes:\n+      apim:api_publish: Publish API\n+\n+######################################################\n+# The \"API Collection\" resource APIs\n+######################################################\n+paths:\n+  /deploy-api:\n+\n+    #-----------------------------------------------------\n+    # Deploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyNjMxMQ=="}, "originalCommit": {"oid": "c34874953f0f914deeb0d3933a1e02ad1234cb32"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTUxMTY0OnYy", "diffSide": "RIGHT", "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNDowMDowOFrOGz2rcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTowMTozOFrOG0u1iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyNjQxNw==", "bodyText": "Don't we have to implement this with the same query params as GET api-artifact resource?  with tenant domain, API name and version.", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r457026417", "createdAt": "2020-07-20T04:00:08Z", "author": {"login": "1akshitha"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "diffHunk": "@@ -0,0 +1,636 @@\n+swagger: '2.0'\n+######################################################\n+# Prolog\n+######################################################\n+info:\n+  version: \"v1\"\n+  title: \"WSO2 API Manager - Gateway\"\n+  description: |\n+    This document specifies a **RESTful API** for WSO2 **API Manager** - Gateway.\n+    Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.5.176/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification.\n+  contact:\n+    name: \"WSO2\"\n+    url: \"http://wso2.com/products/api-manager/\"\n+    email: \"architecture@wso2.com\"\n+  license:\n+    name: \"Apache 2.0\"\n+    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n+\n+######################################################\n+# The fixed parts of the URLs of the API\n+######################################################\n+\n+# The schemes supported by the API\n+schemes:\n+  - https\n+\n+# The domain of the API.\n+# This is configured by the customer during deployment.\n+# The given host is just an example.\n+host: apis.wso2.com\n+\n+# The base path of the API.\n+# Will be prefixed to all paths.\n+basePath: /api/am/gateway/v1\n+\n+# The following media types can be passed as input in message bodies of the API.\n+# The actual media type must be specified in the Content-Type header field of the request.\n+# The default is json, i.e. the Content-Type header is not needed to\n+# be set, but supporting it serves extensibility.\n+consumes:\n+  - application/json\n+\n+# The following media types may be passed as output in message bodies of the API.\n+# The media type(s) consumable by the requestor is specified in the Accept header field\n+# of the corresponding request.\n+# The actual media type returned will be specfied in the Content-Type header field\n+# of the of the response.\n+# The default of the Accept header is json, i.e. there is not needed to\n+# set the value, but supporting it serves extensibility.\n+produces:\n+  - application/json\n+\n+securityDefinitions:\n+  OAuth2Security:\n+    type: oauth2\n+    flow: password\n+    tokenUrl: https://localhost:9443/oauth2/token\n+    scopes:\n+      apim:api_publish: Publish API\n+\n+######################################################\n+# The \"API Collection\" resource APIs\n+######################################################\n+paths:\n+  /deploy-api:\n+\n+    #-----------------------------------------------------\n+    # Deploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Deploy the API in the gateway\n+      description: |\n+        This operation is used to deploy and API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Deploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully deployed in the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /undeploy-api:\n+\n+    #-----------------------------------------------------\n+    # Undeploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34874953f0f914deeb0d3933a1e02ad1234cb32"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk0NjUwNA==", "bodyText": "Fixed 2f6d468", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r457946504", "createdAt": "2020-07-21T09:01:38Z", "author": {"login": "Sarangan0219"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "diffHunk": "@@ -0,0 +1,636 @@\n+swagger: '2.0'\n+######################################################\n+# Prolog\n+######################################################\n+info:\n+  version: \"v1\"\n+  title: \"WSO2 API Manager - Gateway\"\n+  description: |\n+    This document specifies a **RESTful API** for WSO2 **API Manager** - Gateway.\n+    Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.5.176/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification.\n+  contact:\n+    name: \"WSO2\"\n+    url: \"http://wso2.com/products/api-manager/\"\n+    email: \"architecture@wso2.com\"\n+  license:\n+    name: \"Apache 2.0\"\n+    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n+\n+######################################################\n+# The fixed parts of the URLs of the API\n+######################################################\n+\n+# The schemes supported by the API\n+schemes:\n+  - https\n+\n+# The domain of the API.\n+# This is configured by the customer during deployment.\n+# The given host is just an example.\n+host: apis.wso2.com\n+\n+# The base path of the API.\n+# Will be prefixed to all paths.\n+basePath: /api/am/gateway/v1\n+\n+# The following media types can be passed as input in message bodies of the API.\n+# The actual media type must be specified in the Content-Type header field of the request.\n+# The default is json, i.e. the Content-Type header is not needed to\n+# be set, but supporting it serves extensibility.\n+consumes:\n+  - application/json\n+\n+# The following media types may be passed as output in message bodies of the API.\n+# The media type(s) consumable by the requestor is specified in the Accept header field\n+# of the corresponding request.\n+# The actual media type returned will be specfied in the Content-Type header field\n+# of the of the response.\n+# The default of the Accept header is json, i.e. there is not needed to\n+# set the value, but supporting it serves extensibility.\n+produces:\n+  - application/json\n+\n+securityDefinitions:\n+  OAuth2Security:\n+    type: oauth2\n+    flow: password\n+    tokenUrl: https://localhost:9443/oauth2/token\n+    scopes:\n+      apim:api_publish: Publish API\n+\n+######################################################\n+# The \"API Collection\" resource APIs\n+######################################################\n+paths:\n+  /deploy-api:\n+\n+    #-----------------------------------------------------\n+    # Deploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Deploy the API in the gateway\n+      description: |\n+        This operation is used to deploy and API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Deploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully deployed in the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /undeploy-api:\n+\n+    #-----------------------------------------------------\n+    # Undeploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyNjQxNw=="}, "originalCommit": {"oid": "c34874953f0f914deeb0d3933a1e02ad1234cb32"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTUxNDE3OnYy", "diffSide": "RIGHT", "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNDowMDo0OFrOGz2slw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTowMzowOFrOG0u4tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyNjcxMQ==", "bodyText": "Have we handled these error codes from impl?", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r457026711", "createdAt": "2020-07-20T04:00:48Z", "author": {"login": "1akshitha"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "diffHunk": "@@ -0,0 +1,636 @@\n+swagger: '2.0'\n+######################################################\n+# Prolog\n+######################################################\n+info:\n+  version: \"v1\"\n+  title: \"WSO2 API Manager - Gateway\"\n+  description: |\n+    This document specifies a **RESTful API** for WSO2 **API Manager** - Gateway.\n+    Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.5.176/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification.\n+  contact:\n+    name: \"WSO2\"\n+    url: \"http://wso2.com/products/api-manager/\"\n+    email: \"architecture@wso2.com\"\n+  license:\n+    name: \"Apache 2.0\"\n+    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n+\n+######################################################\n+# The fixed parts of the URLs of the API\n+######################################################\n+\n+# The schemes supported by the API\n+schemes:\n+  - https\n+\n+# The domain of the API.\n+# This is configured by the customer during deployment.\n+# The given host is just an example.\n+host: apis.wso2.com\n+\n+# The base path of the API.\n+# Will be prefixed to all paths.\n+basePath: /api/am/gateway/v1\n+\n+# The following media types can be passed as input in message bodies of the API.\n+# The actual media type must be specified in the Content-Type header field of the request.\n+# The default is json, i.e. the Content-Type header is not needed to\n+# be set, but supporting it serves extensibility.\n+consumes:\n+  - application/json\n+\n+# The following media types may be passed as output in message bodies of the API.\n+# The media type(s) consumable by the requestor is specified in the Accept header field\n+# of the corresponding request.\n+# The actual media type returned will be specfied in the Content-Type header field\n+# of the of the response.\n+# The default of the Accept header is json, i.e. there is not needed to\n+# set the value, but supporting it serves extensibility.\n+produces:\n+  - application/json\n+\n+securityDefinitions:\n+  OAuth2Security:\n+    type: oauth2\n+    flow: password\n+    tokenUrl: https://localhost:9443/oauth2/token\n+    scopes:\n+      apim:api_publish: Publish API\n+\n+######################################################\n+# The \"API Collection\" resource APIs\n+######################################################\n+paths:\n+  /deploy-api:\n+\n+    #-----------------------------------------------------\n+    # Deploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Deploy the API in the gateway\n+      description: |\n+        This operation is used to deploy and API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Deploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully deployed in the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34874953f0f914deeb0d3933a1e02ad1234cb32"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk0NzMxNg==", "bodyText": "Handled in rest.api.util", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r457947316", "createdAt": "2020-07-21T09:03:08Z", "author": {"login": "Sarangan0219"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "diffHunk": "@@ -0,0 +1,636 @@\n+swagger: '2.0'\n+######################################################\n+# Prolog\n+######################################################\n+info:\n+  version: \"v1\"\n+  title: \"WSO2 API Manager - Gateway\"\n+  description: |\n+    This document specifies a **RESTful API** for WSO2 **API Manager** - Gateway.\n+    Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.5.176/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification.\n+  contact:\n+    name: \"WSO2\"\n+    url: \"http://wso2.com/products/api-manager/\"\n+    email: \"architecture@wso2.com\"\n+  license:\n+    name: \"Apache 2.0\"\n+    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n+\n+######################################################\n+# The fixed parts of the URLs of the API\n+######################################################\n+\n+# The schemes supported by the API\n+schemes:\n+  - https\n+\n+# The domain of the API.\n+# This is configured by the customer during deployment.\n+# The given host is just an example.\n+host: apis.wso2.com\n+\n+# The base path of the API.\n+# Will be prefixed to all paths.\n+basePath: /api/am/gateway/v1\n+\n+# The following media types can be passed as input in message bodies of the API.\n+# The actual media type must be specified in the Content-Type header field of the request.\n+# The default is json, i.e. the Content-Type header is not needed to\n+# be set, but supporting it serves extensibility.\n+consumes:\n+  - application/json\n+\n+# The following media types may be passed as output in message bodies of the API.\n+# The media type(s) consumable by the requestor is specified in the Accept header field\n+# of the corresponding request.\n+# The actual media type returned will be specfied in the Content-Type header field\n+# of the of the response.\n+# The default of the Accept header is json, i.e. there is not needed to\n+# set the value, but supporting it serves extensibility.\n+produces:\n+  - application/json\n+\n+securityDefinitions:\n+  OAuth2Security:\n+    type: oauth2\n+    flow: password\n+    tokenUrl: https://localhost:9443/oauth2/token\n+    scopes:\n+      apim:api_publish: Publish API\n+\n+######################################################\n+# The \"API Collection\" resource APIs\n+######################################################\n+paths:\n+  /deploy-api:\n+\n+    #-----------------------------------------------------\n+    # Deploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Deploy the API in the gateway\n+      description: |\n+        This operation is used to deploy and API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Deploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully deployed in the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyNjcxMQ=="}, "originalCommit": {"oid": "c34874953f0f914deeb0d3933a1e02ad1234cb32"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTUxNjc4OnYy", "diffSide": "RIGHT", "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNDowMTo0MlrOGz2uAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjowNDoxOVrOGz6Buw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyNzA3Mg==", "bodyText": "better to have a meaningful description with all the details returning", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r457027072", "createdAt": "2020-07-20T04:01:42Z", "author": {"login": "1akshitha"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "diffHunk": "@@ -0,0 +1,636 @@\n+swagger: '2.0'\n+######################################################\n+# Prolog\n+######################################################\n+info:\n+  version: \"v1\"\n+  title: \"WSO2 API Manager - Gateway\"\n+  description: |\n+    This document specifies a **RESTful API** for WSO2 **API Manager** - Gateway.\n+    Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.5.176/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification.\n+  contact:\n+    name: \"WSO2\"\n+    url: \"http://wso2.com/products/api-manager/\"\n+    email: \"architecture@wso2.com\"\n+  license:\n+    name: \"Apache 2.0\"\n+    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n+\n+######################################################\n+# The fixed parts of the URLs of the API\n+######################################################\n+\n+# The schemes supported by the API\n+schemes:\n+  - https\n+\n+# The domain of the API.\n+# This is configured by the customer during deployment.\n+# The given host is just an example.\n+host: apis.wso2.com\n+\n+# The base path of the API.\n+# Will be prefixed to all paths.\n+basePath: /api/am/gateway/v1\n+\n+# The following media types can be passed as input in message bodies of the API.\n+# The actual media type must be specified in the Content-Type header field of the request.\n+# The default is json, i.e. the Content-Type header is not needed to\n+# be set, but supporting it serves extensibility.\n+consumes:\n+  - application/json\n+\n+# The following media types may be passed as output in message bodies of the API.\n+# The media type(s) consumable by the requestor is specified in the Accept header field\n+# of the corresponding request.\n+# The actual media type returned will be specfied in the Content-Type header field\n+# of the of the response.\n+# The default of the Accept header is json, i.e. there is not needed to\n+# set the value, but supporting it serves extensibility.\n+produces:\n+  - application/json\n+\n+securityDefinitions:\n+  OAuth2Security:\n+    type: oauth2\n+    flow: password\n+    tokenUrl: https://localhost:9443/oauth2/token\n+    scopes:\n+      apim:api_publish: Publish API\n+\n+######################################################\n+# The \"API Collection\" resource APIs\n+######################################################\n+paths:\n+  /deploy-api:\n+\n+    #-----------------------------------------------------\n+    # Deploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Deploy the API in the gateway\n+      description: |\n+        This operation is used to deploy and API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Deploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully deployed in the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /undeploy-api:\n+\n+    #-----------------------------------------------------\n+    # Undeploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/undeploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Uneploy the API in the gateway\n+      description: |\n+        This operation is used to undeploy an API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Undeploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully undeployed from the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /api-artifact:\n+\n+    #-----------------------------------------------------\n+    # Get API Artifact\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Get API artifact from the storage\n+      description: |\n+        This operation is used to get the API artifact from the storage", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34874953f0f914deeb0d3933a1e02ad1234cb32"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA4MTI3NQ==", "bodyText": "7fb0b6c", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r457081275", "createdAt": "2020-07-20T06:04:19Z", "author": {"login": "Sarangan0219"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "diffHunk": "@@ -0,0 +1,636 @@\n+swagger: '2.0'\n+######################################################\n+# Prolog\n+######################################################\n+info:\n+  version: \"v1\"\n+  title: \"WSO2 API Manager - Gateway\"\n+  description: |\n+    This document specifies a **RESTful API** for WSO2 **API Manager** - Gateway.\n+    Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.5.176/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification.\n+  contact:\n+    name: \"WSO2\"\n+    url: \"http://wso2.com/products/api-manager/\"\n+    email: \"architecture@wso2.com\"\n+  license:\n+    name: \"Apache 2.0\"\n+    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n+\n+######################################################\n+# The fixed parts of the URLs of the API\n+######################################################\n+\n+# The schemes supported by the API\n+schemes:\n+  - https\n+\n+# The domain of the API.\n+# This is configured by the customer during deployment.\n+# The given host is just an example.\n+host: apis.wso2.com\n+\n+# The base path of the API.\n+# Will be prefixed to all paths.\n+basePath: /api/am/gateway/v1\n+\n+# The following media types can be passed as input in message bodies of the API.\n+# The actual media type must be specified in the Content-Type header field of the request.\n+# The default is json, i.e. the Content-Type header is not needed to\n+# be set, but supporting it serves extensibility.\n+consumes:\n+  - application/json\n+\n+# The following media types may be passed as output in message bodies of the API.\n+# The media type(s) consumable by the requestor is specified in the Accept header field\n+# of the corresponding request.\n+# The actual media type returned will be specfied in the Content-Type header field\n+# of the of the response.\n+# The default of the Accept header is json, i.e. there is not needed to\n+# set the value, but supporting it serves extensibility.\n+produces:\n+  - application/json\n+\n+securityDefinitions:\n+  OAuth2Security:\n+    type: oauth2\n+    flow: password\n+    tokenUrl: https://localhost:9443/oauth2/token\n+    scopes:\n+      apim:api_publish: Publish API\n+\n+######################################################\n+# The \"API Collection\" resource APIs\n+######################################################\n+paths:\n+  /deploy-api:\n+\n+    #-----------------------------------------------------\n+    # Deploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Deploy the API in the gateway\n+      description: |\n+        This operation is used to deploy and API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Deploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully deployed in the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /undeploy-api:\n+\n+    #-----------------------------------------------------\n+    # Undeploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/undeploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Uneploy the API in the gateway\n+      description: |\n+        This operation is used to undeploy an API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Undeploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully undeployed from the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /api-artifact:\n+\n+    #-----------------------------------------------------\n+    # Get API Artifact\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Get API artifact from the storage\n+      description: |\n+        This operation is used to get the API artifact from the storage", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyNzA3Mg=="}, "originalCommit": {"oid": "c34874953f0f914deeb0d3933a1e02ad1234cb32"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTUxODY3OnYy", "diffSide": "RIGHT", "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNDowMjoxM1rOGz2u6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoyMjoyOVrOG0pvgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyNzMwNw==", "bodyText": "Don't we have to implement this with the same query params as GET api-artifact resource?  with tenant domain, API name and version.", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r457027307", "createdAt": "2020-07-20T04:02:13Z", "author": {"login": "1akshitha"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "diffHunk": "@@ -0,0 +1,636 @@\n+swagger: '2.0'\n+######################################################\n+# Prolog\n+######################################################\n+info:\n+  version: \"v1\"\n+  title: \"WSO2 API Manager - Gateway\"\n+  description: |\n+    This document specifies a **RESTful API** for WSO2 **API Manager** - Gateway.\n+    Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.5.176/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification.\n+  contact:\n+    name: \"WSO2\"\n+    url: \"http://wso2.com/products/api-manager/\"\n+    email: \"architecture@wso2.com\"\n+  license:\n+    name: \"Apache 2.0\"\n+    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n+\n+######################################################\n+# The fixed parts of the URLs of the API\n+######################################################\n+\n+# The schemes supported by the API\n+schemes:\n+  - https\n+\n+# The domain of the API.\n+# This is configured by the customer during deployment.\n+# The given host is just an example.\n+host: apis.wso2.com\n+\n+# The base path of the API.\n+# Will be prefixed to all paths.\n+basePath: /api/am/gateway/v1\n+\n+# The following media types can be passed as input in message bodies of the API.\n+# The actual media type must be specified in the Content-Type header field of the request.\n+# The default is json, i.e. the Content-Type header is not needed to\n+# be set, but supporting it serves extensibility.\n+consumes:\n+  - application/json\n+\n+# The following media types may be passed as output in message bodies of the API.\n+# The media type(s) consumable by the requestor is specified in the Accept header field\n+# of the corresponding request.\n+# The actual media type returned will be specfied in the Content-Type header field\n+# of the of the response.\n+# The default of the Accept header is json, i.e. there is not needed to\n+# set the value, but supporting it serves extensibility.\n+produces:\n+  - application/json\n+\n+securityDefinitions:\n+  OAuth2Security:\n+    type: oauth2\n+    flow: password\n+    tokenUrl: https://localhost:9443/oauth2/token\n+    scopes:\n+      apim:api_publish: Publish API\n+\n+######################################################\n+# The \"API Collection\" resource APIs\n+######################################################\n+paths:\n+  /deploy-api:\n+\n+    #-----------------------------------------------------\n+    # Deploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Deploy the API in the gateway\n+      description: |\n+        This operation is used to deploy and API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Deploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully deployed in the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /undeploy-api:\n+\n+    #-----------------------------------------------------\n+    # Undeploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/undeploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Uneploy the API in the gateway\n+      description: |\n+        This operation is used to undeploy an API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Undeploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully undeployed from the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /api-artifact:\n+\n+    #-----------------------------------------------------\n+    # Get API Artifact\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Get API artifact from the storage\n+      description: |\n+        This operation is used to get the API artifact from the storage\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: version\n+          description: |\n+            version of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - name: tenantDomain\n+          description: |\n+            tenantDomain of the API Gateway\n+          in: query\n+          type: string\n+\n+      tags:\n+        - Get API Artifacts\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API artifact successfully retrieved from the storage.\n+          schema:\n+            $ref: '#/definitions/APIArtifact'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/APIArtifact'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /local-entry:\n+\n+    #-----------------------------------------------------\n+    # Get local entry for the API\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/local-entry?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/local-entry?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34874953f0f914deeb0d3933a1e02ad1234cb32"}, "originalPosition": 278}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2MzA0Mg==", "bodyText": "Fixed 96a86f5", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r457863042", "createdAt": "2020-07-21T06:22:29Z", "author": {"login": "Sarangan0219"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "diffHunk": "@@ -0,0 +1,636 @@\n+swagger: '2.0'\n+######################################################\n+# Prolog\n+######################################################\n+info:\n+  version: \"v1\"\n+  title: \"WSO2 API Manager - Gateway\"\n+  description: |\n+    This document specifies a **RESTful API** for WSO2 **API Manager** - Gateway.\n+    Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.5.176/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification.\n+  contact:\n+    name: \"WSO2\"\n+    url: \"http://wso2.com/products/api-manager/\"\n+    email: \"architecture@wso2.com\"\n+  license:\n+    name: \"Apache 2.0\"\n+    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n+\n+######################################################\n+# The fixed parts of the URLs of the API\n+######################################################\n+\n+# The schemes supported by the API\n+schemes:\n+  - https\n+\n+# The domain of the API.\n+# This is configured by the customer during deployment.\n+# The given host is just an example.\n+host: apis.wso2.com\n+\n+# The base path of the API.\n+# Will be prefixed to all paths.\n+basePath: /api/am/gateway/v1\n+\n+# The following media types can be passed as input in message bodies of the API.\n+# The actual media type must be specified in the Content-Type header field of the request.\n+# The default is json, i.e. the Content-Type header is not needed to\n+# be set, but supporting it serves extensibility.\n+consumes:\n+  - application/json\n+\n+# The following media types may be passed as output in message bodies of the API.\n+# The media type(s) consumable by the requestor is specified in the Accept header field\n+# of the corresponding request.\n+# The actual media type returned will be specfied in the Content-Type header field\n+# of the of the response.\n+# The default of the Accept header is json, i.e. there is not needed to\n+# set the value, but supporting it serves extensibility.\n+produces:\n+  - application/json\n+\n+securityDefinitions:\n+  OAuth2Security:\n+    type: oauth2\n+    flow: password\n+    tokenUrl: https://localhost:9443/oauth2/token\n+    scopes:\n+      apim:api_publish: Publish API\n+\n+######################################################\n+# The \"API Collection\" resource APIs\n+######################################################\n+paths:\n+  /deploy-api:\n+\n+    #-----------------------------------------------------\n+    # Deploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Deploy the API in the gateway\n+      description: |\n+        This operation is used to deploy and API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Deploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully deployed in the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /undeploy-api:\n+\n+    #-----------------------------------------------------\n+    # Undeploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/undeploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Uneploy the API in the gateway\n+      description: |\n+        This operation is used to undeploy an API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Undeploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully undeployed from the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /api-artifact:\n+\n+    #-----------------------------------------------------\n+    # Get API Artifact\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Get API artifact from the storage\n+      description: |\n+        This operation is used to get the API artifact from the storage\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: version\n+          description: |\n+            version of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - name: tenantDomain\n+          description: |\n+            tenantDomain of the API Gateway\n+          in: query\n+          type: string\n+\n+      tags:\n+        - Get API Artifacts\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API artifact successfully retrieved from the storage.\n+          schema:\n+            $ref: '#/definitions/APIArtifact'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/APIArtifact'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /local-entry:\n+\n+    #-----------------------------------------------------\n+    # Get local entry for the API\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/local-entry?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/local-entry?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyNzMwNw=="}, "originalCommit": {"oid": "c34874953f0f914deeb0d3933a1e02ad1234cb32"}, "originalPosition": 278}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTUxOTIyOnYy", "diffSide": "RIGHT", "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNDowMjoyMlrOGz2vLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjoyMjoyNFrOG0pvcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyNzM3Mg==", "bodyText": "Don't we have to implement this with the same query params as GET api-artifact resource?  with tenant domain, API name and version.", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r457027372", "createdAt": "2020-07-20T04:02:22Z", "author": {"login": "1akshitha"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "diffHunk": "@@ -0,0 +1,636 @@\n+swagger: '2.0'\n+######################################################\n+# Prolog\n+######################################################\n+info:\n+  version: \"v1\"\n+  title: \"WSO2 API Manager - Gateway\"\n+  description: |\n+    This document specifies a **RESTful API** for WSO2 **API Manager** - Gateway.\n+    Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.5.176/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification.\n+  contact:\n+    name: \"WSO2\"\n+    url: \"http://wso2.com/products/api-manager/\"\n+    email: \"architecture@wso2.com\"\n+  license:\n+    name: \"Apache 2.0\"\n+    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n+\n+######################################################\n+# The fixed parts of the URLs of the API\n+######################################################\n+\n+# The schemes supported by the API\n+schemes:\n+  - https\n+\n+# The domain of the API.\n+# This is configured by the customer during deployment.\n+# The given host is just an example.\n+host: apis.wso2.com\n+\n+# The base path of the API.\n+# Will be prefixed to all paths.\n+basePath: /api/am/gateway/v1\n+\n+# The following media types can be passed as input in message bodies of the API.\n+# The actual media type must be specified in the Content-Type header field of the request.\n+# The default is json, i.e. the Content-Type header is not needed to\n+# be set, but supporting it serves extensibility.\n+consumes:\n+  - application/json\n+\n+# The following media types may be passed as output in message bodies of the API.\n+# The media type(s) consumable by the requestor is specified in the Accept header field\n+# of the corresponding request.\n+# The actual media type returned will be specfied in the Content-Type header field\n+# of the of the response.\n+# The default of the Accept header is json, i.e. there is not needed to\n+# set the value, but supporting it serves extensibility.\n+produces:\n+  - application/json\n+\n+securityDefinitions:\n+  OAuth2Security:\n+    type: oauth2\n+    flow: password\n+    tokenUrl: https://localhost:9443/oauth2/token\n+    scopes:\n+      apim:api_publish: Publish API\n+\n+######################################################\n+# The \"API Collection\" resource APIs\n+######################################################\n+paths:\n+  /deploy-api:\n+\n+    #-----------------------------------------------------\n+    # Deploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Deploy the API in the gateway\n+      description: |\n+        This operation is used to deploy and API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Deploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully deployed in the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /undeploy-api:\n+\n+    #-----------------------------------------------------\n+    # Undeploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/undeploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Uneploy the API in the gateway\n+      description: |\n+        This operation is used to undeploy an API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Undeploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully undeployed from the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /api-artifact:\n+\n+    #-----------------------------------------------------\n+    # Get API Artifact\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Get API artifact from the storage\n+      description: |\n+        This operation is used to get the API artifact from the storage\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: version\n+          description: |\n+            version of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - name: tenantDomain\n+          description: |\n+            tenantDomain of the API Gateway\n+          in: query\n+          type: string\n+\n+      tags:\n+        - Get API Artifacts\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API artifact successfully retrieved from the storage.\n+          schema:\n+            $ref: '#/definitions/APIArtifact'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/APIArtifact'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /local-entry:\n+\n+    #-----------------------------------------------------\n+    # Get local entry for the API\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/local-entry?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/local-entry?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Get Local Entry from the storage\n+      description: |\n+        This operation is used to get local entry from the storage\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Get API Artifacts\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            Local entry for the API successfully retrieved from the storage.\n+          schema:\n+            $ref: '#/definitions/LocalEntry'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/LocalEntry'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /sequence:\n+    #-----------------------------------------------------\n+    # Get sequence for the API\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/sequence?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/sequence?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34874953f0f914deeb0d3933a1e02ad1234cb32"}, "originalPosition": 343}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg2MzAyNA==", "bodyText": "Fixed 96a86f5", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r457863024", "createdAt": "2020-07-21T06:22:24Z", "author": {"login": "Sarangan0219"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "diffHunk": "@@ -0,0 +1,636 @@\n+swagger: '2.0'\n+######################################################\n+# Prolog\n+######################################################\n+info:\n+  version: \"v1\"\n+  title: \"WSO2 API Manager - Gateway\"\n+  description: |\n+    This document specifies a **RESTful API** for WSO2 **API Manager** - Gateway.\n+    Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.5.176/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification.\n+  contact:\n+    name: \"WSO2\"\n+    url: \"http://wso2.com/products/api-manager/\"\n+    email: \"architecture@wso2.com\"\n+  license:\n+    name: \"Apache 2.0\"\n+    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n+\n+######################################################\n+# The fixed parts of the URLs of the API\n+######################################################\n+\n+# The schemes supported by the API\n+schemes:\n+  - https\n+\n+# The domain of the API.\n+# This is configured by the customer during deployment.\n+# The given host is just an example.\n+host: apis.wso2.com\n+\n+# The base path of the API.\n+# Will be prefixed to all paths.\n+basePath: /api/am/gateway/v1\n+\n+# The following media types can be passed as input in message bodies of the API.\n+# The actual media type must be specified in the Content-Type header field of the request.\n+# The default is json, i.e. the Content-Type header is not needed to\n+# be set, but supporting it serves extensibility.\n+consumes:\n+  - application/json\n+\n+# The following media types may be passed as output in message bodies of the API.\n+# The media type(s) consumable by the requestor is specified in the Accept header field\n+# of the corresponding request.\n+# The actual media type returned will be specfied in the Content-Type header field\n+# of the of the response.\n+# The default of the Accept header is json, i.e. there is not needed to\n+# set the value, but supporting it serves extensibility.\n+produces:\n+  - application/json\n+\n+securityDefinitions:\n+  OAuth2Security:\n+    type: oauth2\n+    flow: password\n+    tokenUrl: https://localhost:9443/oauth2/token\n+    scopes:\n+      apim:api_publish: Publish API\n+\n+######################################################\n+# The \"API Collection\" resource APIs\n+######################################################\n+paths:\n+  /deploy-api:\n+\n+    #-----------------------------------------------------\n+    # Deploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Deploy the API in the gateway\n+      description: |\n+        This operation is used to deploy and API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Deploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully deployed in the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /undeploy-api:\n+\n+    #-----------------------------------------------------\n+    # Undeploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/undeploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Uneploy the API in the gateway\n+      description: |\n+        This operation is used to undeploy an API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Undeploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully undeployed from the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /api-artifact:\n+\n+    #-----------------------------------------------------\n+    # Get API Artifact\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Get API artifact from the storage\n+      description: |\n+        This operation is used to get the API artifact from the storage\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: version\n+          description: |\n+            version of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - name: tenantDomain\n+          description: |\n+            tenantDomain of the API Gateway\n+          in: query\n+          type: string\n+\n+      tags:\n+        - Get API Artifacts\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API artifact successfully retrieved from the storage.\n+          schema:\n+            $ref: '#/definitions/APIArtifact'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/APIArtifact'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /local-entry:\n+\n+    #-----------------------------------------------------\n+    # Get local entry for the API\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/local-entry?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/local-entry?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Get Local Entry from the storage\n+      description: |\n+        This operation is used to get local entry from the storage\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Get API Artifacts\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            Local entry for the API successfully retrieved from the storage.\n+          schema:\n+            $ref: '#/definitions/LocalEntry'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/LocalEntry'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /sequence:\n+    #-----------------------------------------------------\n+    # Get sequence for the API\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/sequence?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/sequence?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyNzM3Mg=="}, "originalCommit": {"oid": "c34874953f0f914deeb0d3933a1e02ad1234cb32"}, "originalPosition": 343}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTUyMTI3OnYy", "diffSide": "RIGHT", "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNDowMjo1NVrOGz2wMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjowMzo1M1rOGz6A5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyNzYzNA==", "bodyText": "This should be the endpoint", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r457027634", "createdAt": "2020-07-20T04:02:55Z", "author": {"login": "1akshitha"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "diffHunk": "@@ -0,0 +1,636 @@\n+swagger: '2.0'\n+######################################################\n+# Prolog\n+######################################################\n+info:\n+  version: \"v1\"\n+  title: \"WSO2 API Manager - Gateway\"\n+  description: |\n+    This document specifies a **RESTful API** for WSO2 **API Manager** - Gateway.\n+    Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.5.176/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification.\n+  contact:\n+    name: \"WSO2\"\n+    url: \"http://wso2.com/products/api-manager/\"\n+    email: \"architecture@wso2.com\"\n+  license:\n+    name: \"Apache 2.0\"\n+    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n+\n+######################################################\n+# The fixed parts of the URLs of the API\n+######################################################\n+\n+# The schemes supported by the API\n+schemes:\n+  - https\n+\n+# The domain of the API.\n+# This is configured by the customer during deployment.\n+# The given host is just an example.\n+host: apis.wso2.com\n+\n+# The base path of the API.\n+# Will be prefixed to all paths.\n+basePath: /api/am/gateway/v1\n+\n+# The following media types can be passed as input in message bodies of the API.\n+# The actual media type must be specified in the Content-Type header field of the request.\n+# The default is json, i.e. the Content-Type header is not needed to\n+# be set, but supporting it serves extensibility.\n+consumes:\n+  - application/json\n+\n+# The following media types may be passed as output in message bodies of the API.\n+# The media type(s) consumable by the requestor is specified in the Accept header field\n+# of the corresponding request.\n+# The actual media type returned will be specfied in the Content-Type header field\n+# of the of the response.\n+# The default of the Accept header is json, i.e. there is not needed to\n+# set the value, but supporting it serves extensibility.\n+produces:\n+  - application/json\n+\n+securityDefinitions:\n+  OAuth2Security:\n+    type: oauth2\n+    flow: password\n+    tokenUrl: https://localhost:9443/oauth2/token\n+    scopes:\n+      apim:api_publish: Publish API\n+\n+######################################################\n+# The \"API Collection\" resource APIs\n+######################################################\n+paths:\n+  /deploy-api:\n+\n+    #-----------------------------------------------------\n+    # Deploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Deploy the API in the gateway\n+      description: |\n+        This operation is used to deploy and API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Deploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully deployed in the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /undeploy-api:\n+\n+    #-----------------------------------------------------\n+    # Undeploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/undeploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Uneploy the API in the gateway\n+      description: |\n+        This operation is used to undeploy an API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Undeploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully undeployed from the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /api-artifact:\n+\n+    #-----------------------------------------------------\n+    # Get API Artifact\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Get API artifact from the storage\n+      description: |\n+        This operation is used to get the API artifact from the storage\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: version\n+          description: |\n+            version of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - name: tenantDomain\n+          description: |\n+            tenantDomain of the API Gateway\n+          in: query\n+          type: string\n+\n+      tags:\n+        - Get API Artifacts\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API artifact successfully retrieved from the storage.\n+          schema:\n+            $ref: '#/definitions/APIArtifact'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/APIArtifact'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /local-entry:\n+\n+    #-----------------------------------------------------\n+    # Get local entry for the API\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/local-entry?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/local-entry?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Get Local Entry from the storage\n+      description: |\n+        This operation is used to get local entry from the storage\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Get API Artifacts\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            Local entry for the API successfully retrieved from the storage.\n+          schema:\n+            $ref: '#/definitions/LocalEntry'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/LocalEntry'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /sequence:\n+    #-----------------------------------------------------\n+    # Get sequence for the API\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/sequence?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/sequence?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Get sequences from the storage\n+      description: |\n+        This operation is used to get the API sequence from the storage\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Get API Artifacts\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            Sequences for the API successfully retrieved from the storage.\n+          schema:\n+            $ref: '#/definitions/Sequences'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/Sequences'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /end-points:\n+\n+    #-----------------------------------------------------\n+    # Get API Artifact", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34874953f0f914deeb0d3933a1e02ad1234cb32"}, "originalPosition": 401}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA4MTA2Mg==", "bodyText": "7fb0b6c", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r457081062", "createdAt": "2020-07-20T06:03:53Z", "author": {"login": "Sarangan0219"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "diffHunk": "@@ -0,0 +1,636 @@\n+swagger: '2.0'\n+######################################################\n+# Prolog\n+######################################################\n+info:\n+  version: \"v1\"\n+  title: \"WSO2 API Manager - Gateway\"\n+  description: |\n+    This document specifies a **RESTful API** for WSO2 **API Manager** - Gateway.\n+    Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.5.176/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification.\n+  contact:\n+    name: \"WSO2\"\n+    url: \"http://wso2.com/products/api-manager/\"\n+    email: \"architecture@wso2.com\"\n+  license:\n+    name: \"Apache 2.0\"\n+    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n+\n+######################################################\n+# The fixed parts of the URLs of the API\n+######################################################\n+\n+# The schemes supported by the API\n+schemes:\n+  - https\n+\n+# The domain of the API.\n+# This is configured by the customer during deployment.\n+# The given host is just an example.\n+host: apis.wso2.com\n+\n+# The base path of the API.\n+# Will be prefixed to all paths.\n+basePath: /api/am/gateway/v1\n+\n+# The following media types can be passed as input in message bodies of the API.\n+# The actual media type must be specified in the Content-Type header field of the request.\n+# The default is json, i.e. the Content-Type header is not needed to\n+# be set, but supporting it serves extensibility.\n+consumes:\n+  - application/json\n+\n+# The following media types may be passed as output in message bodies of the API.\n+# The media type(s) consumable by the requestor is specified in the Accept header field\n+# of the corresponding request.\n+# The actual media type returned will be specfied in the Content-Type header field\n+# of the of the response.\n+# The default of the Accept header is json, i.e. there is not needed to\n+# set the value, but supporting it serves extensibility.\n+produces:\n+  - application/json\n+\n+securityDefinitions:\n+  OAuth2Security:\n+    type: oauth2\n+    flow: password\n+    tokenUrl: https://localhost:9443/oauth2/token\n+    scopes:\n+      apim:api_publish: Publish API\n+\n+######################################################\n+# The \"API Collection\" resource APIs\n+######################################################\n+paths:\n+  /deploy-api:\n+\n+    #-----------------------------------------------------\n+    # Deploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Deploy the API in the gateway\n+      description: |\n+        This operation is used to deploy and API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Deploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully deployed in the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /undeploy-api:\n+\n+    #-----------------------------------------------------\n+    # Undeploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/undeploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Uneploy the API in the gateway\n+      description: |\n+        This operation is used to undeploy an API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Undeploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully undeployed from the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /api-artifact:\n+\n+    #-----------------------------------------------------\n+    # Get API Artifact\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Get API artifact from the storage\n+      description: |\n+        This operation is used to get the API artifact from the storage\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: version\n+          description: |\n+            version of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - name: tenantDomain\n+          description: |\n+            tenantDomain of the API Gateway\n+          in: query\n+          type: string\n+\n+      tags:\n+        - Get API Artifacts\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API artifact successfully retrieved from the storage.\n+          schema:\n+            $ref: '#/definitions/APIArtifact'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/APIArtifact'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /local-entry:\n+\n+    #-----------------------------------------------------\n+    # Get local entry for the API\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/local-entry?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/local-entry?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Get Local Entry from the storage\n+      description: |\n+        This operation is used to get local entry from the storage\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Get API Artifacts\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            Local entry for the API successfully retrieved from the storage.\n+          schema:\n+            $ref: '#/definitions/LocalEntry'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/LocalEntry'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /sequence:\n+    #-----------------------------------------------------\n+    # Get sequence for the API\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/sequence?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/sequence?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Get sequences from the storage\n+      description: |\n+        This operation is used to get the API sequence from the storage\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Get API Artifacts\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            Sequences for the API successfully retrieved from the storage.\n+          schema:\n+            $ref: '#/definitions/Sequences'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/Sequences'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /end-points:\n+\n+    #-----------------------------------------------------\n+    # Get API Artifact", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyNzYzNA=="}, "originalCommit": {"oid": "c34874953f0f914deeb0d3933a1e02ad1234cb32"}, "originalPosition": 401}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MTUyMjQyOnYy", "diffSide": "RIGHT", "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNDowMzoxOFrOGz2wuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTowMzoyMVrOG0u5PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyNzc3MQ==", "bodyText": "Have we handled all these error codes?", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r457027771", "createdAt": "2020-07-20T04:03:18Z", "author": {"login": "1akshitha"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "diffHunk": "@@ -0,0 +1,636 @@\n+swagger: '2.0'\n+######################################################\n+# Prolog\n+######################################################\n+info:\n+  version: \"v1\"\n+  title: \"WSO2 API Manager - Gateway\"\n+  description: |\n+    This document specifies a **RESTful API** for WSO2 **API Manager** - Gateway.\n+    Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.5.176/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification.\n+  contact:\n+    name: \"WSO2\"\n+    url: \"http://wso2.com/products/api-manager/\"\n+    email: \"architecture@wso2.com\"\n+  license:\n+    name: \"Apache 2.0\"\n+    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n+\n+######################################################\n+# The fixed parts of the URLs of the API\n+######################################################\n+\n+# The schemes supported by the API\n+schemes:\n+  - https\n+\n+# The domain of the API.\n+# This is configured by the customer during deployment.\n+# The given host is just an example.\n+host: apis.wso2.com\n+\n+# The base path of the API.\n+# Will be prefixed to all paths.\n+basePath: /api/am/gateway/v1\n+\n+# The following media types can be passed as input in message bodies of the API.\n+# The actual media type must be specified in the Content-Type header field of the request.\n+# The default is json, i.e. the Content-Type header is not needed to\n+# be set, but supporting it serves extensibility.\n+consumes:\n+  - application/json\n+\n+# The following media types may be passed as output in message bodies of the API.\n+# The media type(s) consumable by the requestor is specified in the Accept header field\n+# of the corresponding request.\n+# The actual media type returned will be specfied in the Content-Type header field\n+# of the of the response.\n+# The default of the Accept header is json, i.e. there is not needed to\n+# set the value, but supporting it serves extensibility.\n+produces:\n+  - application/json\n+\n+securityDefinitions:\n+  OAuth2Security:\n+    type: oauth2\n+    flow: password\n+    tokenUrl: https://localhost:9443/oauth2/token\n+    scopes:\n+      apim:api_publish: Publish API\n+\n+######################################################\n+# The \"API Collection\" resource APIs\n+######################################################\n+paths:\n+  /deploy-api:\n+\n+    #-----------------------------------------------------\n+    # Deploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Deploy the API in the gateway\n+      description: |\n+        This operation is used to deploy and API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Deploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully deployed in the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /undeploy-api:\n+\n+    #-----------------------------------------------------\n+    # Undeploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/undeploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Uneploy the API in the gateway\n+      description: |\n+        This operation is used to undeploy an API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Undeploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully undeployed from the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /api-artifact:\n+\n+    #-----------------------------------------------------\n+    # Get API Artifact\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Get API artifact from the storage\n+      description: |\n+        This operation is used to get the API artifact from the storage\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: version\n+          description: |\n+            version of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - name: tenantDomain\n+          description: |\n+            tenantDomain of the API Gateway\n+          in: query\n+          type: string\n+\n+      tags:\n+        - Get API Artifacts\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API artifact successfully retrieved from the storage.\n+          schema:\n+            $ref: '#/definitions/APIArtifact'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/APIArtifact'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /local-entry:\n+\n+    #-----------------------------------------------------\n+    # Get local entry for the API\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/local-entry?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/local-entry?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Get Local Entry from the storage\n+      description: |\n+        This operation is used to get local entry from the storage\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Get API Artifacts\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            Local entry for the API successfully retrieved from the storage.\n+          schema:\n+            $ref: '#/definitions/LocalEntry'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/LocalEntry'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /sequence:\n+    #-----------------------------------------------------\n+    # Get sequence for the API\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/sequence?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/sequence?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Get sequences from the storage\n+      description: |\n+        This operation is used to get the API sequence from the storage\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Get API Artifacts\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            Sequences for the API successfully retrieved from the storage.\n+          schema:\n+            $ref: '#/definitions/Sequences'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/Sequences'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /end-points:\n+\n+    #-----------------------------------------------------\n+    # Get API Artifact\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/end-points?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/end-points?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Get end-points from the storage for the API\n+      description: |\n+        This operation is used to get the end-points from the storage\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Get API Artifacts\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            End-points successfully retrieved from the storage for the API.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c34874953f0f914deeb0d3933a1e02ad1234cb32"}, "originalPosition": 445}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk0NzQ1Mw==", "bodyText": "Handled in rest.api.util", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r457947453", "createdAt": "2020-07-21T09:03:21Z", "author": {"login": "Sarangan0219"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/gateway-v1.yaml", "diffHunk": "@@ -0,0 +1,636 @@\n+swagger: '2.0'\n+######################################################\n+# Prolog\n+######################################################\n+info:\n+  version: \"v1\"\n+  title: \"WSO2 API Manager - Gateway\"\n+  description: |\n+    This document specifies a **RESTful API** for WSO2 **API Manager** - Gateway.\n+    Please see [full swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.5.176/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml) of the API which is written using [swagger 2.0](http://swagger.io/) specification.\n+  contact:\n+    name: \"WSO2\"\n+    url: \"http://wso2.com/products/api-manager/\"\n+    email: \"architecture@wso2.com\"\n+  license:\n+    name: \"Apache 2.0\"\n+    url: \"http://www.apache.org/licenses/LICENSE-2.0.html\"\n+\n+######################################################\n+# The fixed parts of the URLs of the API\n+######################################################\n+\n+# The schemes supported by the API\n+schemes:\n+  - https\n+\n+# The domain of the API.\n+# This is configured by the customer during deployment.\n+# The given host is just an example.\n+host: apis.wso2.com\n+\n+# The base path of the API.\n+# Will be prefixed to all paths.\n+basePath: /api/am/gateway/v1\n+\n+# The following media types can be passed as input in message bodies of the API.\n+# The actual media type must be specified in the Content-Type header field of the request.\n+# The default is json, i.e. the Content-Type header is not needed to\n+# be set, but supporting it serves extensibility.\n+consumes:\n+  - application/json\n+\n+# The following media types may be passed as output in message bodies of the API.\n+# The media type(s) consumable by the requestor is specified in the Accept header field\n+# of the corresponding request.\n+# The actual media type returned will be specfied in the Content-Type header field\n+# of the of the response.\n+# The default of the Accept header is json, i.e. there is not needed to\n+# set the value, but supporting it serves extensibility.\n+produces:\n+  - application/json\n+\n+securityDefinitions:\n+  OAuth2Security:\n+    type: oauth2\n+    flow: password\n+    tokenUrl: https://localhost:9443/oauth2/token\n+    scopes:\n+      apim:api_publish: Publish API\n+\n+######################################################\n+# The \"API Collection\" resource APIs\n+######################################################\n+paths:\n+  /deploy-api:\n+\n+    #-----------------------------------------------------\n+    # Deploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Deploy the API in the gateway\n+      description: |\n+        This operation is used to deploy and API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Deploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully deployed in the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /undeploy-api:\n+\n+    #-----------------------------------------------------\n+    # Undeploy the API in the Gateway\n+    #-----------------------------------------------------\n+    post:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X POST \\\"https://127.0.0.1:9443/api/am/gateway/v1/deploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        POST https://127.0.0.1:9443/api/am/gateway/v1/undeploy-api?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Uneploy the API in the gateway\n+      description: |\n+        This operation is used to undeploy an API in the gateway.\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Undeploy API\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API successfully undeployed from the Gateway.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /api-artifact:\n+\n+    #-----------------------------------------------------\n+    # Get API Artifact\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/api-artifact?apiName=PizzaAPI&version=1.0&tenantDomain=registry.com\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Get API artifact from the storage\n+      description: |\n+        This operation is used to get the API artifact from the storage\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: version\n+          description: |\n+            version of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - name: tenantDomain\n+          description: |\n+            tenantDomain of the API Gateway\n+          in: query\n+          type: string\n+\n+      tags:\n+        - Get API Artifacts\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            API artifact successfully retrieved from the storage.\n+          schema:\n+            $ref: '#/definitions/APIArtifact'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/APIArtifact'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /local-entry:\n+\n+    #-----------------------------------------------------\n+    # Get local entry for the API\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/local-entry?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/local-entry?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Get Local Entry from the storage\n+      description: |\n+        This operation is used to get local entry from the storage\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Get API Artifacts\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            Local entry for the API successfully retrieved from the storage.\n+          schema:\n+            $ref: '#/definitions/LocalEntry'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/LocalEntry'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /sequence:\n+    #-----------------------------------------------------\n+    # Get sequence for the API\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/sequence?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/sequence?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Get sequences from the storage\n+      description: |\n+        This operation is used to get the API sequence from the storage\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Get API Artifacts\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            Sequences for the API successfully retrieved from the storage.\n+          schema:\n+            $ref: '#/definitions/Sequences'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/Sequences'\n+        400:\n+          description: |\n+            Bad Request.\n+            Invalid request or validation error\n+          schema:\n+            $ref: '#/definitions/Error'\n+        404:\n+          description: |\n+            Not Found.\n+            Requested API does not exist.\n+          schema:\n+            $ref: '#/definitions/Error'\n+        412:\n+          description: |\n+            Precondition Failed.\n+            The request has not been performed because one of the preconditions is not met.\n+          schema:\n+            $ref: '#/definitions/Error'\n+\n+  /end-points:\n+\n+    #-----------------------------------------------------\n+    # Get API Artifact\n+    #-----------------------------------------------------\n+    get:\n+      security:\n+        - OAuth2Security:\n+            - apim:api_publish\n+      x-wso2-curl: \"curl -k -H \\\"Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\\\" -X GET \\\"https://127.0.0.1:9443/api/am/gateway/v1/end-points?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\\\"\"\n+      x-wso2-request: |\n+        GET https://127.0.0.1:9443/api/am/gateway/v1/end-points?apiId=890a4f4d-09eb-4877-a323-57f6ce2ed79b&apiName=PizzaAPI&label=Food\n+        Authorization: Bearer ae4eae22-3f65-387b-a171-d37eaa366fa8\n+      x-wso2-response: \"HTTP/1.1 200 OK\"\n+      summary: Get end-points from the storage for the API\n+      description: |\n+        This operation is used to get the end-points from the storage\n+      parameters:\n+        - name: apiName\n+          description: |\n+            Name of the API\n+          in: query\n+          type: string\n+          required: true\n+        - name: label\n+          description: |\n+            Label of the API Gateway\n+          in: query\n+          type: string\n+          required: true\n+        - $ref: '#/parameters/apiId-Q'\n+\n+      tags:\n+        - Get API Artifacts\n+      responses:\n+        200:\n+          description: |\n+            OK.\n+            End-points successfully retrieved from the storage for the API.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        202:\n+          description: |\n+            Accepted.\n+            The request has been accepted.\n+          schema:\n+            $ref: '#/definitions/DeployResponse'\n+        400:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAyNzc3MQ=="}, "originalCommit": {"oid": "c34874953f0f914deeb0d3933a1e02ad1234cb32"}, "originalPosition": 445}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODYxMzIwOnYy", "diffSide": "RIGHT", "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/guide.md", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzoxODo0MFrOG03g1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNDo0NTozMFrOG3Te0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA4ODY2Mw==", "bodyText": "We don't use WSO2 ESB, but we use WSO2 EI. We don't use the BAM too. This paragraph needs to be revisted and re written.", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r458088663", "createdAt": "2020-07-21T13:18:40Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/guide.md", "diffHunk": "@@ -0,0 +1,59 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete solution for publishing APIs, creating and managing a developer community, and for scalably routing API traffic. It leverages proven, production-ready, integration, security and governance components from WSO2 Enterprise Service Bus, WSO2 Identity Server, and WSO2 Governance Registry. Moreover, it is powered by WSO2 Business Activity Monitor, thereby making WSO2 API Manager ready for any large-scale deployments right away.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efaddd3a38b2e9c29834dd8f2e907786430292d1"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA5MzYzMQ==", "bodyText": "shall we rephrase it as \"WSO2 API Manager is a complete API Management solution  that addresses all aspects of API management including API development, productization, consumption, security, rate limitation, monetization and analytics. \"", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r458093631", "createdAt": "2020-07-21T13:25:27Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/guide.md", "diffHunk": "@@ -0,0 +1,59 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete solution for publishing APIs, creating and managing a developer community, and for scalably routing API traffic. It leverages proven, production-ready, integration, security and governance components from WSO2 Enterprise Service Bus, WSO2 Identity Server, and WSO2 Governance Registry. Moreover, it is powered by WSO2 Business Activity Monitor, thereby making WSO2 API Manager ready for any large-scale deployments right away.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA4ODY2Mw=="}, "originalCommit": {"oid": "efaddd3a38b2e9c29834dd8f2e907786430292d1"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0NDA0OQ==", "bodyText": "46b28b7", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r460644049", "createdAt": "2020-07-27T04:45:30Z", "author": {"login": "Sarangan0219"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/guide.md", "diffHunk": "@@ -0,0 +1,59 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete solution for publishing APIs, creating and managing a developer community, and for scalably routing API traffic. It leverages proven, production-ready, integration, security and governance components from WSO2 Enterprise Service Bus, WSO2 Identity Server, and WSO2 Governance Registry. Moreover, it is powered by WSO2 Business Activity Monitor, thereby making WSO2 API Manager ready for any large-scale deployments right away.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA4ODY2Mw=="}, "originalCommit": {"oid": "efaddd3a38b2e9c29834dd8f2e907786430292d1"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODY4MjY5OnYy", "diffSide": "RIGHT", "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/guide.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzozMzozM1rOG04Lmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNDo0NTozNVrOG3Te2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA5OTYxMA==", "bodyText": "This can be rewritten as follows : - The REST API is implemented based on the REST specification and best practices as a CXF REST web application running on WSO2 API Manager. A contract-first approach could be utilized for API development starting with a Open API specification. See the admin APIs  Swagger definition, which is written using Open API 3.0 .Alternatively, this API definition can be accessed using the product URL as well https://<host-name[:port]>/api/am/admin/v0.16/swagger.json.\nNote to use the correct OPen API definition URL and the product API version URL for the latest product version", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r458099610", "createdAt": "2020-07-21T13:33:33Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/guide.md", "diffHunk": "@@ -0,0 +1,59 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete solution for publishing APIs, creating and managing a developer community, and for scalably routing API traffic. It leverages proven, production-ready, integration, security and governance components from WSO2 Enterprise Service Bus, WSO2 Identity Server, and WSO2 Governance Registry. Moreover, it is powered by WSO2 Business Activity Monitor, thereby making WSO2 API Manager ready for any large-scale deployments right away.\n+\n+The REST API is implemented based on REST best practices and specifications as a CXF REST web application running on WSO2 API Manager. API development is started with a Swagger specification with a contract-first approach. Please see the full [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml), which is written using Swagger 2.0. This can be also retrieved from the Web app itself using the URL `https://<host-name[:port]>/api/am/admin/v0.16/swagger.json`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efaddd3a38b2e9c29834dd8f2e907786430292d1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0NDA1OA==", "bodyText": "46b28b7", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r460644058", "createdAt": "2020-07-27T04:45:35Z", "author": {"login": "Sarangan0219"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/guide.md", "diffHunk": "@@ -0,0 +1,59 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete solution for publishing APIs, creating and managing a developer community, and for scalably routing API traffic. It leverages proven, production-ready, integration, security and governance components from WSO2 Enterprise Service Bus, WSO2 Identity Server, and WSO2 Governance Registry. Moreover, it is powered by WSO2 Business Activity Monitor, thereby making WSO2 API Manager ready for any large-scale deployments right away.\n+\n+The REST API is implemented based on REST best practices and specifications as a CXF REST web application running on WSO2 API Manager. API development is started with a Swagger specification with a contract-first approach. Please see the full [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml), which is written using Swagger 2.0. This can be also retrieved from the Web app itself using the URL `https://<host-name[:port]>/api/am/admin/v0.16/swagger.json`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA5OTYxMA=="}, "originalCommit": {"oid": "efaddd3a38b2e9c29834dd8f2e907786430292d1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODc3NDIwOnYy", "diffSide": "RIGHT", "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/guide.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzo1MzoyMFrOG05EPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzo1MzoyMFrOG05EPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExNDExMQ==", "bodyText": "When an API is invoked, the handler invokes an introspection API to validate the token.\nThe flow of events are not in order. Can you please revsit it?", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r458114111", "createdAt": "2020-07-21T13:53:20Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/guide.md", "diffHunk": "@@ -0,0 +1,59 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete solution for publishing APIs, creating and managing a developer community, and for scalably routing API traffic. It leverages proven, production-ready, integration, security and governance components from WSO2 Enterprise Service Bus, WSO2 Identity Server, and WSO2 Governance Registry. Moreover, it is powered by WSO2 Business Activity Monitor, thereby making WSO2 API Manager ready for any large-scale deployments right away.\n+\n+The REST API is implemented based on REST best practices and specifications as a CXF REST web application running on WSO2 API Manager. API development is started with a Swagger specification with a contract-first approach. Please see the full [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml), which is written using Swagger 2.0. This can be also retrieved from the Web app itself using the URL `https://<host-name[:port]>/api/am/admin/v0.16/swagger.json`.\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+\n+Before invoking the API with the access token, obtain the consumer key/secret key pair by calling the dynamic client registration endpoint. You can request an access token with the preferred grant type. An example is shown below,\n+\n+```\n+curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\" -d @payload.json https://localhost:9443/client-registration/v0.16/register\n+```\n+\n+Sample request:\n+\n+```\n+{\n+   \"callbackUrl\":\"www.google.lk\",\n+   \"clientName\":\"rest_api_admin\",\n+   \"owner\":\"admin\",\n+   \"grantType\":\"password refresh_token\",\n+   \"saasApp\":true\n+}\n+```\n+\n+Sample response:\n+\n+```\n+{\n+   \"callBackURL\":\"www.google.lk\",\n+   \"jsonString\":\"{ \\\"username\\\":\\\"admin\\\", \\\"redirect_uris\\\":\\\"www.google.lk\\\", \\\"client_name\\\":\\\"admin_rest_api_admin\\\", \\\"grant_types\\\":\\\"authorization_code password refresh_token iwa:ntlm urn:ietf:params:oauth:grant-type:saml2-bearer client_credentialsimplicit\\\" }\",\n+   \"clientName\":null,\n+   \"clientId\":\"HfEl1jJPdg5tbtrxhAwybN05QGoa\",\n+   \"clientSecret\":\"l6c0aoLcWR3fwezHhc7XoGOht5Aa\"\n+}\n+```\n+\n+During the API invocation process request, click the CXF handler first, which calls an introspection API to validate the token. Generate the access token using the already created OAuth application. A sample call to generate the access token is shown below.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efaddd3a38b2e9c29834dd8f2e907786430292d1"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODc3NzM2OnYy", "diffSide": "RIGHT", "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/guide.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzo1Mzo1OVrOG05GMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjozNTo0N1rOHGJg1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExNDYwOQ==", "bodyText": "what if the process changes?", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r458114609", "createdAt": "2020-07-21T13:53:59Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/guide.md", "diffHunk": "@@ -0,0 +1,59 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete solution for publishing APIs, creating and managing a developer community, and for scalably routing API traffic. It leverages proven, production-ready, integration, security and governance components from WSO2 Enterprise Service Bus, WSO2 Identity Server, and WSO2 Governance Registry. Moreover, it is powered by WSO2 Business Activity Monitor, thereby making WSO2 API Manager ready for any large-scale deployments right away.\n+\n+The REST API is implemented based on REST best practices and specifications as a CXF REST web application running on WSO2 API Manager. API development is started with a Swagger specification with a contract-first approach. Please see the full [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml), which is written using Swagger 2.0. This can be also retrieved from the Web app itself using the URL `https://<host-name[:port]>/api/am/admin/v0.16/swagger.json`.\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+\n+Before invoking the API with the access token, obtain the consumer key/secret key pair by calling the dynamic client registration endpoint. You can request an access token with the preferred grant type. An example is shown below,\n+\n+```\n+curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\" -d @payload.json https://localhost:9443/client-registration/v0.16/register\n+```\n+\n+Sample request:\n+\n+```\n+{\n+   \"callbackUrl\":\"www.google.lk\",\n+   \"clientName\":\"rest_api_admin\",\n+   \"owner\":\"admin\",\n+   \"grantType\":\"password refresh_token\",\n+   \"saasApp\":true\n+}\n+```\n+\n+Sample response:\n+\n+```\n+{\n+   \"callBackURL\":\"www.google.lk\",\n+   \"jsonString\":\"{ \\\"username\\\":\\\"admin\\\", \\\"redirect_uris\\\":\\\"www.google.lk\\\", \\\"client_name\\\":\\\"admin_rest_api_admin\\\", \\\"grant_types\\\":\\\"authorization_code password refresh_token iwa:ntlm urn:ietf:params:oauth:grant-type:saml2-bearer client_credentialsimplicit\\\" }\",\n+   \"clientName\":null,\n+   \"clientId\":\"HfEl1jJPdg5tbtrxhAwybN05QGoa\",\n+   \"clientSecret\":\"l6c0aoLcWR3fwezHhc7XoGOht5Aa\"\n+}\n+```\n+\n+During the API invocation process request, click the CXF handler first, which calls an introspection API to validate the token. Generate the access token using the already created OAuth application. A sample call to generate the access token is shown below.\n+\n+Note: Access token must be generated using correct scope for the resource. Scope for each resource is given in resource documentation.\n+\n+```\n+curl -k -d \"grant_type=password&username=admin&password=admin&scope=apim:tier_view\" -H \"Authorization: Basic SGZFbDFqSlBkZzV0YnRyeGhBd3liTjA1UUdvYTpsNmMwYW9MY1dSM2Z3ZXpIaGM3WG9HT2h0NUFh\" https://localhost:8243/token\n+```\n+\n+Token response:\n+\n+```\n+{\n+   \"scope\":\"apim:tier_view\",\n+   \"token_type\":\"Bearer\",\n+   \"expires_in\":3600,\n+   \"refresh_token\":\"33c3be152ebf0030b3fb76f2c1f80bf8\",\n+   \"access_token\":\"292ff0fd256814536baca0926f483c8d\"\n+}\n+```\n+\n+Now, you have a valid access token, which you can use to invoke an API. Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header. If you use a different authentication mechanism, this process may change.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efaddd3a38b2e9c29834dd8f2e907786430292d1"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0NzY5OA==", "bodyText": "Instead of Refresh Token grant user can use password grant ,JWT Grant etc according to his/her scope. These details are specified in https://apim.docs.wso2.com/en/next/learn/api-security/oauth2/grant-types/overview/", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r460647698", "createdAt": "2020-07-27T05:01:21Z", "author": {"login": "Sarangan0219"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/guide.md", "diffHunk": "@@ -0,0 +1,59 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete solution for publishing APIs, creating and managing a developer community, and for scalably routing API traffic. It leverages proven, production-ready, integration, security and governance components from WSO2 Enterprise Service Bus, WSO2 Identity Server, and WSO2 Governance Registry. Moreover, it is powered by WSO2 Business Activity Monitor, thereby making WSO2 API Manager ready for any large-scale deployments right away.\n+\n+The REST API is implemented based on REST best practices and specifications as a CXF REST web application running on WSO2 API Manager. API development is started with a Swagger specification with a contract-first approach. Please see the full [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml), which is written using Swagger 2.0. This can be also retrieved from the Web app itself using the URL `https://<host-name[:port]>/api/am/admin/v0.16/swagger.json`.\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+\n+Before invoking the API with the access token, obtain the consumer key/secret key pair by calling the dynamic client registration endpoint. You can request an access token with the preferred grant type. An example is shown below,\n+\n+```\n+curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\" -d @payload.json https://localhost:9443/client-registration/v0.16/register\n+```\n+\n+Sample request:\n+\n+```\n+{\n+   \"callbackUrl\":\"www.google.lk\",\n+   \"clientName\":\"rest_api_admin\",\n+   \"owner\":\"admin\",\n+   \"grantType\":\"password refresh_token\",\n+   \"saasApp\":true\n+}\n+```\n+\n+Sample response:\n+\n+```\n+{\n+   \"callBackURL\":\"www.google.lk\",\n+   \"jsonString\":\"{ \\\"username\\\":\\\"admin\\\", \\\"redirect_uris\\\":\\\"www.google.lk\\\", \\\"client_name\\\":\\\"admin_rest_api_admin\\\", \\\"grant_types\\\":\\\"authorization_code password refresh_token iwa:ntlm urn:ietf:params:oauth:grant-type:saml2-bearer client_credentialsimplicit\\\" }\",\n+   \"clientName\":null,\n+   \"clientId\":\"HfEl1jJPdg5tbtrxhAwybN05QGoa\",\n+   \"clientSecret\":\"l6c0aoLcWR3fwezHhc7XoGOht5Aa\"\n+}\n+```\n+\n+During the API invocation process request, click the CXF handler first, which calls an introspection API to validate the token. Generate the access token using the already created OAuth application. A sample call to generate the access token is shown below.\n+\n+Note: Access token must be generated using correct scope for the resource. Scope for each resource is given in resource documentation.\n+\n+```\n+curl -k -d \"grant_type=password&username=admin&password=admin&scope=apim:tier_view\" -H \"Authorization: Basic SGZFbDFqSlBkZzV0YnRyeGhBd3liTjA1UUdvYTpsNmMwYW9MY1dSM2Z3ZXpIaGM3WG9HT2h0NUFh\" https://localhost:8243/token\n+```\n+\n+Token response:\n+\n+```\n+{\n+   \"scope\":\"apim:tier_view\",\n+   \"token_type\":\"Bearer\",\n+   \"expires_in\":3600,\n+   \"refresh_token\":\"33c3be152ebf0030b3fb76f2c1f80bf8\",\n+   \"access_token\":\"292ff0fd256814536baca0926f483c8d\"\n+}\n+```\n+\n+Now, you have a valid access token, which you can use to invoke an API. Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header. If you use a different authentication mechanism, this process may change.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExNDYwOQ=="}, "originalCommit": {"oid": "efaddd3a38b2e9c29834dd8f2e907786430292d1"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzNzgyMg==", "bodyText": "Shall we reword it to \"Refer to grant types supported by WSO2 API-M, to learn more on how to use them in place of the Refresh Token Grant. \"", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r468237822", "createdAt": "2020-08-10T23:20:16Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/guide.md", "diffHunk": "@@ -0,0 +1,59 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete solution for publishing APIs, creating and managing a developer community, and for scalably routing API traffic. It leverages proven, production-ready, integration, security and governance components from WSO2 Enterprise Service Bus, WSO2 Identity Server, and WSO2 Governance Registry. Moreover, it is powered by WSO2 Business Activity Monitor, thereby making WSO2 API Manager ready for any large-scale deployments right away.\n+\n+The REST API is implemented based on REST best practices and specifications as a CXF REST web application running on WSO2 API Manager. API development is started with a Swagger specification with a contract-first approach. Please see the full [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml), which is written using Swagger 2.0. This can be also retrieved from the Web app itself using the URL `https://<host-name[:port]>/api/am/admin/v0.16/swagger.json`.\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+\n+Before invoking the API with the access token, obtain the consumer key/secret key pair by calling the dynamic client registration endpoint. You can request an access token with the preferred grant type. An example is shown below,\n+\n+```\n+curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\" -d @payload.json https://localhost:9443/client-registration/v0.16/register\n+```\n+\n+Sample request:\n+\n+```\n+{\n+   \"callbackUrl\":\"www.google.lk\",\n+   \"clientName\":\"rest_api_admin\",\n+   \"owner\":\"admin\",\n+   \"grantType\":\"password refresh_token\",\n+   \"saasApp\":true\n+}\n+```\n+\n+Sample response:\n+\n+```\n+{\n+   \"callBackURL\":\"www.google.lk\",\n+   \"jsonString\":\"{ \\\"username\\\":\\\"admin\\\", \\\"redirect_uris\\\":\\\"www.google.lk\\\", \\\"client_name\\\":\\\"admin_rest_api_admin\\\", \\\"grant_types\\\":\\\"authorization_code password refresh_token iwa:ntlm urn:ietf:params:oauth:grant-type:saml2-bearer client_credentialsimplicit\\\" }\",\n+   \"clientName\":null,\n+   \"clientId\":\"HfEl1jJPdg5tbtrxhAwybN05QGoa\",\n+   \"clientSecret\":\"l6c0aoLcWR3fwezHhc7XoGOht5Aa\"\n+}\n+```\n+\n+During the API invocation process request, click the CXF handler first, which calls an introspection API to validate the token. Generate the access token using the already created OAuth application. A sample call to generate the access token is shown below.\n+\n+Note: Access token must be generated using correct scope for the resource. Scope for each resource is given in resource documentation.\n+\n+```\n+curl -k -d \"grant_type=password&username=admin&password=admin&scope=apim:tier_view\" -H \"Authorization: Basic SGZFbDFqSlBkZzV0YnRyeGhBd3liTjA1UUdvYTpsNmMwYW9MY1dSM2Z3ZXpIaGM3WG9HT2h0NUFh\" https://localhost:8243/token\n+```\n+\n+Token response:\n+\n+```\n+{\n+   \"scope\":\"apim:tier_view\",\n+   \"token_type\":\"Bearer\",\n+   \"expires_in\":3600,\n+   \"refresh_token\":\"33c3be152ebf0030b3fb76f2c1f80bf8\",\n+   \"access_token\":\"292ff0fd256814536baca0926f483c8d\"\n+}\n+```\n+\n+Now, you have a valid access token, which you can use to invoke an API. Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header. If you use a different authentication mechanism, this process may change.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExNDYwOQ=="}, "originalCommit": {"oid": "efaddd3a38b2e9c29834dd8f2e907786430292d1"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwOTM2Nw==", "bodyText": "Fixed", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r476209367", "createdAt": "2020-08-25T06:35:47Z", "author": {"login": "Sarangan0219"}, "path": "en/docs/develop/product-apis/gateway-apis/gateway-v1/guide.md", "diffHunk": "@@ -0,0 +1,59 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete solution for publishing APIs, creating and managing a developer community, and for scalably routing API traffic. It leverages proven, production-ready, integration, security and governance components from WSO2 Enterprise Service Bus, WSO2 Identity Server, and WSO2 Governance Registry. Moreover, it is powered by WSO2 Business Activity Monitor, thereby making WSO2 API Manager ready for any large-scale deployments right away.\n+\n+The REST API is implemented based on REST best practices and specifications as a CXF REST web application running on WSO2 API Manager. API development is started with a Swagger specification with a contract-first approach. Please see the full [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.admin/src/main/resources/admin-api.yaml), which is written using Swagger 2.0. This can be also retrieved from the Web app itself using the URL `https://<host-name[:port]>/api/am/admin/v0.16/swagger.json`.\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+\n+Before invoking the API with the access token, obtain the consumer key/secret key pair by calling the dynamic client registration endpoint. You can request an access token with the preferred grant type. An example is shown below,\n+\n+```\n+curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\" -d @payload.json https://localhost:9443/client-registration/v0.16/register\n+```\n+\n+Sample request:\n+\n+```\n+{\n+   \"callbackUrl\":\"www.google.lk\",\n+   \"clientName\":\"rest_api_admin\",\n+   \"owner\":\"admin\",\n+   \"grantType\":\"password refresh_token\",\n+   \"saasApp\":true\n+}\n+```\n+\n+Sample response:\n+\n+```\n+{\n+   \"callBackURL\":\"www.google.lk\",\n+   \"jsonString\":\"{ \\\"username\\\":\\\"admin\\\", \\\"redirect_uris\\\":\\\"www.google.lk\\\", \\\"client_name\\\":\\\"admin_rest_api_admin\\\", \\\"grant_types\\\":\\\"authorization_code password refresh_token iwa:ntlm urn:ietf:params:oauth:grant-type:saml2-bearer client_credentialsimplicit\\\" }\",\n+   \"clientName\":null,\n+   \"clientId\":\"HfEl1jJPdg5tbtrxhAwybN05QGoa\",\n+   \"clientSecret\":\"l6c0aoLcWR3fwezHhc7XoGOht5Aa\"\n+}\n+```\n+\n+During the API invocation process request, click the CXF handler first, which calls an introspection API to validate the token. Generate the access token using the already created OAuth application. A sample call to generate the access token is shown below.\n+\n+Note: Access token must be generated using correct scope for the resource. Scope for each resource is given in resource documentation.\n+\n+```\n+curl -k -d \"grant_type=password&username=admin&password=admin&scope=apim:tier_view\" -H \"Authorization: Basic SGZFbDFqSlBkZzV0YnRyeGhBd3liTjA1UUdvYTpsNmMwYW9MY1dSM2Z3ZXpIaGM3WG9HT2h0NUFh\" https://localhost:8243/token\n+```\n+\n+Token response:\n+\n+```\n+{\n+   \"scope\":\"apim:tier_view\",\n+   \"token_type\":\"Bearer\",\n+   \"expires_in\":3600,\n+   \"refresh_token\":\"33c3be152ebf0030b3fb76f2c1f80bf8\",\n+   \"access_token\":\"292ff0fd256814536baca0926f483c8d\"\n+}\n+```\n+\n+Now, you have a valid access token, which you can use to invoke an API. Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header. If you use a different authentication mechanism, this process may change.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExNDYwOQ=="}, "originalCommit": {"oid": "efaddd3a38b2e9c29834dd8f2e907786430292d1"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODc4MDI3OnYy", "diffSide": "RIGHT", "path": "en/mkdocs.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzo1NDozOFrOG05IEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNTowMjo0OFrOG3TuRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExNTA4OA==", "bodyText": "we have two publisher API's of the same version. Is ths correct?", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r458115088", "createdAt": "2020-07-21T13:54:38Z", "author": {"login": "shaniR"}, "path": "en/mkdocs.yml", "diffHunk": "@@ -295,11 +295,12 @@ nav:\n           - Product REST APIs:\n                 - RESTful APIs: develop/product-apis/restful-apis.md\n                 - Getting Started:\n-                    - Publisher API v1: develop/product-apis/getting-started/guide-publisher-v0.16.md \n+                    - Publisher API v1: develop/product-apis/getting-started/guide-publisher-v0.16.md", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efaddd3a38b2e9c29834dd8f2e907786430292d1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY0ODAwNg==", "bodyText": "7eb51e9", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r460648006", "createdAt": "2020-07-27T05:02:48Z", "author": {"login": "Sarangan0219"}, "path": "en/mkdocs.yml", "diffHunk": "@@ -295,11 +295,12 @@ nav:\n           - Product REST APIs:\n                 - RESTful APIs: develop/product-apis/restful-apis.md\n                 - Getting Started:\n-                    - Publisher API v1: develop/product-apis/getting-started/guide-publisher-v0.16.md \n+                    - Publisher API v1: develop/product-apis/getting-started/guide-publisher-v0.16.md", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExNTA4OA=="}, "originalCommit": {"oid": "efaddd3a38b2e9c29834dd8f2e907786430292d1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODc4NDY4OnYy", "diffSide": "RIGHT", "path": "en/mkdocs.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzo1NToyNVrOG05Kpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzoyMTozM1rOG-i_iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExNTc1MA==", "bodyText": "base_bath should always be a versioned URL. please add the versioned URL.", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r458115750", "createdAt": "2020-07-21T13:55:25Z", "author": {"login": "shaniR"}, "path": "en/mkdocs.yml", "diffHunk": "@@ -699,4 +703,4 @@ extra:\n         - type: linkedin\n           link: https://www.linkedin.com/company/wso2\n     site_version: 3.2.0\n-    base_path: https://apim.docs.wso2.com/en/next\n+    base_path: https://apim.docs.wso2.com/en/next", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efaddd3a38b2e9c29834dd8f2e907786430292d1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODIzODIxNg==", "bodyText": "please add https://apim.docs.wso2.com/en/3.2.0", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r468238216", "createdAt": "2020-08-10T23:21:33Z", "author": {"login": "shaniR"}, "path": "en/mkdocs.yml", "diffHunk": "@@ -699,4 +703,4 @@ extra:\n         - type: linkedin\n           link: https://www.linkedin.com/company/wso2\n     site_version: 3.2.0\n-    base_path: https://apim.docs.wso2.com/en/next\n+    base_path: https://apim.docs.wso2.com/en/next", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExNTc1MA=="}, "originalCommit": {"oid": "efaddd3a38b2e9c29834dd8f2e907786430292d1"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTUyNzEzOnYy", "diffSide": "RIGHT", "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzozODoxOVrOG-jUAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTo0OTozM1rOHGIf7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0MzQ1OQ==", "bodyText": "Can we remove unnecessary space lines?", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r468243459", "createdAt": "2020-08-10T23:38:19Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete API Management solution that addresses all aspects of API management including API development, productization, consumption, security, rate limitation, monetization and analytics.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d93ef9dde1d691ebd786471d8f8fc524e88abd1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5Mjc0OA==", "bodyText": "dfc6cce", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r476192748", "createdAt": "2020-08-25T05:49:33Z", "author": {"login": "Sarangan0219"}, "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete API Management solution that addresses all aspects of API management including API development, productization, consumption, security, rate limitation, monetization and analytics.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0MzQ1OQ=="}, "originalCommit": {"oid": "0d93ef9dde1d691ebd786471d8f8fc524e88abd1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTUyODgwOnYy", "diffSide": "RIGHT", "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzozOTowNFrOG-jU8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTo1OTo0MVrOHGIs3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0MzY5Nw==", "bodyText": "Shall we add a sub heading \"Generate Keys\"", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r468243697", "createdAt": "2020-08-10T23:39:04Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete API Management solution that addresses all aspects of API management including API development, productization, consumption, security, rate limitation, monetization and analytics.\n+\n+\n+The REST API is implemented based on the REST specification and best practices as a CXF REST web application running on WSO2 API Manager. A contract-first approach could be utilized for API development starting with a Open API specification. \n+See the Gateway API's [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml) , which is written using Open API 3.0 .\n+Alternatively, this API definition can be accessed using the product URL as well `https://<host-name[:port]>/api/am/gateway/v1/swagger.json`.\n+\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d93ef9dde1d691ebd786471d8f8fc524e88abd1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5NjA2Mw==", "bodyText": "a8d0406", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r476196063", "createdAt": "2020-08-25T05:59:41Z", "author": {"login": "Sarangan0219"}, "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete API Management solution that addresses all aspects of API management including API development, productization, consumption, security, rate limitation, monetization and analytics.\n+\n+\n+The REST API is implemented based on the REST specification and best practices as a CXF REST web application running on WSO2 API Manager. A contract-first approach could be utilized for API development starting with a Open API specification. \n+See the Gateway API's [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml) , which is written using Open API 3.0 .\n+Alternatively, this API definition can be accessed using the product URL as well `https://<host-name[:port]>/api/am/gateway/v1/swagger.json`.\n+\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0MzY5Nw=="}, "originalCommit": {"oid": "0d93ef9dde1d691ebd786471d8f8fc524e88abd1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTU0ODkyOnYy", "diffSide": "RIGHT", "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzo0OToyNFrOG-jgww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTo0MjowNlrOHGIXCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0NjcyMw==", "bodyText": "Let's rephrase this as \"Obtain the application keys (consumer key/consumer secret) by invoking the dynamic client registration endpoint. Refer to the sample below to obtain application keys via cURL. The generated keys can then be used to obtain an access token to invoke an API.\"", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r468246723", "createdAt": "2020-08-10T23:49:24Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete API Management solution that addresses all aspects of API management including API development, productization, consumption, security, rate limitation, monetization and analytics.\n+\n+\n+The REST API is implemented based on the REST specification and best practices as a CXF REST web application running on WSO2 API Manager. A contract-first approach could be utilized for API development starting with a Open API specification. \n+See the Gateway API's [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml) , which is written using Open API 3.0 .\n+Alternatively, this API definition can be accessed using the product URL as well `https://<host-name[:port]>/api/am/gateway/v1/swagger.json`.\n+\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+\n+Before invoking the API with the access token, obtain the consumer key/secret key pair by calling the dynamic client registration endpoint. You can request an access token with the preferred grant type. An example is shown below,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d93ef9dde1d691ebd786471d8f8fc524e88abd1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5MDQ3NA==", "bodyText": "88b578c", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r476190474", "createdAt": "2020-08-25T05:42:06Z", "author": {"login": "Sarangan0219"}, "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete API Management solution that addresses all aspects of API management including API development, productization, consumption, security, rate limitation, monetization and analytics.\n+\n+\n+The REST API is implemented based on the REST specification and best practices as a CXF REST web application running on WSO2 API Manager. A contract-first approach could be utilized for API development starting with a Open API specification. \n+See the Gateway API's [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml) , which is written using Open API 3.0 .\n+Alternatively, this API definition can be accessed using the product URL as well `https://<host-name[:port]>/api/am/gateway/v1/swagger.json`.\n+\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+\n+Before invoking the API with the access token, obtain the consumer key/secret key pair by calling the dynamic client registration endpoint. You can request an access token with the preferred grant type. An example is shown below,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0NjcyMw=="}, "originalCommit": {"oid": "0d93ef9dde1d691ebd786471d8f8fc524e88abd1"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTU1MTQ4OnYy", "diffSide": "RIGHT", "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzo1MDoyNFrOG-jiHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTo0MjoxOVrOHGIXSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0NzA2OA==", "bodyText": "Let's add a sub heading \"Generate an access token \"", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r468247068", "createdAt": "2020-08-10T23:50:24Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete API Management solution that addresses all aspects of API management including API development, productization, consumption, security, rate limitation, monetization and analytics.\n+\n+\n+The REST API is implemented based on the REST specification and best practices as a CXF REST web application running on WSO2 API Manager. A contract-first approach could be utilized for API development starting with a Open API specification. \n+See the Gateway API's [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml) , which is written using Open API 3.0 .\n+Alternatively, this API definition can be accessed using the product URL as well `https://<host-name[:port]>/api/am/gateway/v1/swagger.json`.\n+\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+\n+Before invoking the API with the access token, obtain the consumer key/secret key pair by calling the dynamic client registration endpoint. You can request an access token with the preferred grant type. An example is shown below,\n+\n+```\n+curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\" -d @payload.json https://localhost:9443/client-registration/v0.16/register\n+```\n+\n+Sample request:\n+\n+```\n+{\n+   \"callbackUrl\":\"www.google.lk\",\n+   \"clientName\":\"rest_api_admin\",\n+   \"owner\":\"admin\",\n+   \"grantType\":\"password refresh_token\",\n+   \"saasApp\":true\n+}\n+```\n+\n+Sample response:\n+\n+```\n+{\n+   \"callBackURL\":\"www.google.lk\",\n+   \"jsonString\":\"{ \\\"username\\\":\\\"admin\\\", \\\"redirect_uris\\\":\\\"www.google.lk\\\", \\\"client_name\\\":\\\"admin_rest_api_admin\\\", \\\"grant_types\\\":\\\"authorization_code password refresh_token iwa:ntlm urn:ietf:params:oauth:grant-type:saml2-bearer client_credentialsimplicit\\\" }\",\n+   \"clientName\":null,\n+   \"clientId\":\"HfEl1jJPdg5tbtrxhAwybN05QGoa\",\n+   \"clientSecret\":\"l6c0aoLcWR3fwezHhc7XoGOht5Aa\"\n+}\n+```\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d93ef9dde1d691ebd786471d8f8fc524e88abd1"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5MDUzNw==", "bodyText": "88b578c", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r476190537", "createdAt": "2020-08-25T05:42:19Z", "author": {"login": "Sarangan0219"}, "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete API Management solution that addresses all aspects of API management including API development, productization, consumption, security, rate limitation, monetization and analytics.\n+\n+\n+The REST API is implemented based on the REST specification and best practices as a CXF REST web application running on WSO2 API Manager. A contract-first approach could be utilized for API development starting with a Open API specification. \n+See the Gateway API's [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml) , which is written using Open API 3.0 .\n+Alternatively, this API definition can be accessed using the product URL as well `https://<host-name[:port]>/api/am/gateway/v1/swagger.json`.\n+\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+\n+Before invoking the API with the access token, obtain the consumer key/secret key pair by calling the dynamic client registration endpoint. You can request an access token with the preferred grant type. An example is shown below,\n+\n+```\n+curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\" -d @payload.json https://localhost:9443/client-registration/v0.16/register\n+```\n+\n+Sample request:\n+\n+```\n+{\n+   \"callbackUrl\":\"www.google.lk\",\n+   \"clientName\":\"rest_api_admin\",\n+   \"owner\":\"admin\",\n+   \"grantType\":\"password refresh_token\",\n+   \"saasApp\":true\n+}\n+```\n+\n+Sample response:\n+\n+```\n+{\n+   \"callBackURL\":\"www.google.lk\",\n+   \"jsonString\":\"{ \\\"username\\\":\\\"admin\\\", \\\"redirect_uris\\\":\\\"www.google.lk\\\", \\\"client_name\\\":\\\"admin_rest_api_admin\\\", \\\"grant_types\\\":\\\"authorization_code password refresh_token iwa:ntlm urn:ietf:params:oauth:grant-type:saml2-bearer client_credentialsimplicit\\\" }\",\n+   \"clientName\":null,\n+   \"clientId\":\"HfEl1jJPdg5tbtrxhAwybN05QGoa\",\n+   \"clientSecret\":\"l6c0aoLcWR3fwezHhc7XoGOht5Aa\"\n+}\n+```\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0NzA2OA=="}, "originalCommit": {"oid": "0d93ef9dde1d691ebd786471d8f8fc524e88abd1"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTU2MDkzOnYy", "diffSide": "RIGHT", "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzo1NDoyM1rOG-jnSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTozOToyNFrOHGITxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0ODM5NQ==", "bodyText": "Let's rephrase this as follows:\n\"Generate an access token using the keys obtained from the step above. Refer to the sample below to invoke the token endpoint.\"", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r468248395", "createdAt": "2020-08-10T23:54:23Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete API Management solution that addresses all aspects of API management including API development, productization, consumption, security, rate limitation, monetization and analytics.\n+\n+\n+The REST API is implemented based on the REST specification and best practices as a CXF REST web application running on WSO2 API Manager. A contract-first approach could be utilized for API development starting with a Open API specification. \n+See the Gateway API's [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml) , which is written using Open API 3.0 .\n+Alternatively, this API definition can be accessed using the product URL as well `https://<host-name[:port]>/api/am/gateway/v1/swagger.json`.\n+\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+\n+Before invoking the API with the access token, obtain the consumer key/secret key pair by calling the dynamic client registration endpoint. You can request an access token with the preferred grant type. An example is shown below,\n+\n+```\n+curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\" -d @payload.json https://localhost:9443/client-registration/v0.16/register\n+```\n+\n+Sample request:\n+\n+```\n+{\n+   \"callbackUrl\":\"www.google.lk\",\n+   \"clientName\":\"rest_api_admin\",\n+   \"owner\":\"admin\",\n+   \"grantType\":\"password refresh_token\",\n+   \"saasApp\":true\n+}\n+```\n+\n+Sample response:\n+\n+```\n+{\n+   \"callBackURL\":\"www.google.lk\",\n+   \"jsonString\":\"{ \\\"username\\\":\\\"admin\\\", \\\"redirect_uris\\\":\\\"www.google.lk\\\", \\\"client_name\\\":\\\"admin_rest_api_admin\\\", \\\"grant_types\\\":\\\"authorization_code password refresh_token iwa:ntlm urn:ietf:params:oauth:grant-type:saml2-bearer client_credentialsimplicit\\\" }\",\n+   \"clientName\":null,\n+   \"clientId\":\"HfEl1jJPdg5tbtrxhAwybN05QGoa\",\n+   \"clientSecret\":\"l6c0aoLcWR3fwezHhc7XoGOht5Aa\"\n+}\n+```\n+\n+During the API invocation process request, click the CXF handler first, which calls an introspection API to validate the token. Generate the access token using the already created OAuth application. A sample call to generate the access token is shown below.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d93ef9dde1d691ebd786471d8f8fc524e88abd1"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4OTYzNg==", "bodyText": "88b578c", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r476189636", "createdAt": "2020-08-25T05:39:24Z", "author": {"login": "Sarangan0219"}, "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete API Management solution that addresses all aspects of API management including API development, productization, consumption, security, rate limitation, monetization and analytics.\n+\n+\n+The REST API is implemented based on the REST specification and best practices as a CXF REST web application running on WSO2 API Manager. A contract-first approach could be utilized for API development starting with a Open API specification. \n+See the Gateway API's [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml) , which is written using Open API 3.0 .\n+Alternatively, this API definition can be accessed using the product URL as well `https://<host-name[:port]>/api/am/gateway/v1/swagger.json`.\n+\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+\n+Before invoking the API with the access token, obtain the consumer key/secret key pair by calling the dynamic client registration endpoint. You can request an access token with the preferred grant type. An example is shown below,\n+\n+```\n+curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\" -d @payload.json https://localhost:9443/client-registration/v0.16/register\n+```\n+\n+Sample request:\n+\n+```\n+{\n+   \"callbackUrl\":\"www.google.lk\",\n+   \"clientName\":\"rest_api_admin\",\n+   \"owner\":\"admin\",\n+   \"grantType\":\"password refresh_token\",\n+   \"saasApp\":true\n+}\n+```\n+\n+Sample response:\n+\n+```\n+{\n+   \"callBackURL\":\"www.google.lk\",\n+   \"jsonString\":\"{ \\\"username\\\":\\\"admin\\\", \\\"redirect_uris\\\":\\\"www.google.lk\\\", \\\"client_name\\\":\\\"admin_rest_api_admin\\\", \\\"grant_types\\\":\\\"authorization_code password refresh_token iwa:ntlm urn:ietf:params:oauth:grant-type:saml2-bearer client_credentialsimplicit\\\" }\",\n+   \"clientName\":null,\n+   \"clientId\":\"HfEl1jJPdg5tbtrxhAwybN05QGoa\",\n+   \"clientSecret\":\"l6c0aoLcWR3fwezHhc7XoGOht5Aa\"\n+}\n+```\n+\n+During the API invocation process request, click the CXF handler first, which calls an introspection API to validate the token. Generate the access token using the already created OAuth application. A sample call to generate the access token is shown below.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0ODM5NQ=="}, "originalCommit": {"oid": "0d93ef9dde1d691ebd786471d8f8fc524e88abd1"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTU2NjUyOnYy", "diffSide": "RIGHT", "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzo1Njo1MFrOG-jqdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTo0MDowNlrOHGIUpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0OTIwNg==", "bodyText": "curl -k -d \"grant_type=password&username=<username>&password=<password>&scope=<scope>\" -H \"Authorization: Basic base64encode(consumer_key:consumer_secret)\" https://localhost:8243/token\n\ncurl -k -d \"grant_type=password&username=admin&password=admin&scope=apim:tier_view\" -H \"Authorization: Basic SGZFbDFqSlBkZzV0YnRyeGhBd3liTjA1UUdvYTpsNmMwYW9MY1dSM2Z3ZXpIaGM3WG9HT2h0NUFh\" https://localhost:8243/token", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r468249206", "createdAt": "2020-08-10T23:56:50Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete API Management solution that addresses all aspects of API management including API development, productization, consumption, security, rate limitation, monetization and analytics.\n+\n+\n+The REST API is implemented based on the REST specification and best practices as a CXF REST web application running on WSO2 API Manager. A contract-first approach could be utilized for API development starting with a Open API specification. \n+See the Gateway API's [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml) , which is written using Open API 3.0 .\n+Alternatively, this API definition can be accessed using the product URL as well `https://<host-name[:port]>/api/am/gateway/v1/swagger.json`.\n+\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+\n+Before invoking the API with the access token, obtain the consumer key/secret key pair by calling the dynamic client registration endpoint. You can request an access token with the preferred grant type. An example is shown below,\n+\n+```\n+curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\" -d @payload.json https://localhost:9443/client-registration/v0.16/register\n+```\n+\n+Sample request:\n+\n+```\n+{\n+   \"callbackUrl\":\"www.google.lk\",\n+   \"clientName\":\"rest_api_admin\",\n+   \"owner\":\"admin\",\n+   \"grantType\":\"password refresh_token\",\n+   \"saasApp\":true\n+}\n+```\n+\n+Sample response:\n+\n+```\n+{\n+   \"callBackURL\":\"www.google.lk\",\n+   \"jsonString\":\"{ \\\"username\\\":\\\"admin\\\", \\\"redirect_uris\\\":\\\"www.google.lk\\\", \\\"client_name\\\":\\\"admin_rest_api_admin\\\", \\\"grant_types\\\":\\\"authorization_code password refresh_token iwa:ntlm urn:ietf:params:oauth:grant-type:saml2-bearer client_credentialsimplicit\\\" }\",\n+   \"clientName\":null,\n+   \"clientId\":\"HfEl1jJPdg5tbtrxhAwybN05QGoa\",\n+   \"clientSecret\":\"l6c0aoLcWR3fwezHhc7XoGOht5Aa\"\n+}\n+```\n+\n+During the API invocation process request, click the CXF handler first, which calls an introspection API to validate the token. Generate the access token using the already created OAuth application. A sample call to generate the access token is shown below.\n+\n+Note: Access token must be generated using correct scope for the resource. Scope for each resource is given in resource documentation.\n+\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d93ef9dde1d691ebd786471d8f8fc524e88abd1"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0OTM3NA==", "bodyText": "Add the above as tabs", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r468249374", "createdAt": "2020-08-10T23:57:12Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete API Management solution that addresses all aspects of API management including API development, productization, consumption, security, rate limitation, monetization and analytics.\n+\n+\n+The REST API is implemented based on the REST specification and best practices as a CXF REST web application running on WSO2 API Manager. A contract-first approach could be utilized for API development starting with a Open API specification. \n+See the Gateway API's [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml) , which is written using Open API 3.0 .\n+Alternatively, this API definition can be accessed using the product URL as well `https://<host-name[:port]>/api/am/gateway/v1/swagger.json`.\n+\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+\n+Before invoking the API with the access token, obtain the consumer key/secret key pair by calling the dynamic client registration endpoint. You can request an access token with the preferred grant type. An example is shown below,\n+\n+```\n+curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\" -d @payload.json https://localhost:9443/client-registration/v0.16/register\n+```\n+\n+Sample request:\n+\n+```\n+{\n+   \"callbackUrl\":\"www.google.lk\",\n+   \"clientName\":\"rest_api_admin\",\n+   \"owner\":\"admin\",\n+   \"grantType\":\"password refresh_token\",\n+   \"saasApp\":true\n+}\n+```\n+\n+Sample response:\n+\n+```\n+{\n+   \"callBackURL\":\"www.google.lk\",\n+   \"jsonString\":\"{ \\\"username\\\":\\\"admin\\\", \\\"redirect_uris\\\":\\\"www.google.lk\\\", \\\"client_name\\\":\\\"admin_rest_api_admin\\\", \\\"grant_types\\\":\\\"authorization_code password refresh_token iwa:ntlm urn:ietf:params:oauth:grant-type:saml2-bearer client_credentialsimplicit\\\" }\",\n+   \"clientName\":null,\n+   \"clientId\":\"HfEl1jJPdg5tbtrxhAwybN05QGoa\",\n+   \"clientSecret\":\"l6c0aoLcWR3fwezHhc7XoGOht5Aa\"\n+}\n+```\n+\n+During the API invocation process request, click the CXF handler first, which calls an introspection API to validate the token. Generate the access token using the already created OAuth application. A sample call to generate the access token is shown below.\n+\n+Note: Access token must be generated using correct scope for the resource. Scope for each resource is given in resource documentation.\n+\n+```", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0OTIwNg=="}, "originalCommit": {"oid": "0d93ef9dde1d691ebd786471d8f8fc524e88abd1"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4OTg2MQ==", "bodyText": "88b578c", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r476189861", "createdAt": "2020-08-25T05:40:06Z", "author": {"login": "Sarangan0219"}, "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete API Management solution that addresses all aspects of API management including API development, productization, consumption, security, rate limitation, monetization and analytics.\n+\n+\n+The REST API is implemented based on the REST specification and best practices as a CXF REST web application running on WSO2 API Manager. A contract-first approach could be utilized for API development starting with a Open API specification. \n+See the Gateway API's [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml) , which is written using Open API 3.0 .\n+Alternatively, this API definition can be accessed using the product URL as well `https://<host-name[:port]>/api/am/gateway/v1/swagger.json`.\n+\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+\n+Before invoking the API with the access token, obtain the consumer key/secret key pair by calling the dynamic client registration endpoint. You can request an access token with the preferred grant type. An example is shown below,\n+\n+```\n+curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\" -d @payload.json https://localhost:9443/client-registration/v0.16/register\n+```\n+\n+Sample request:\n+\n+```\n+{\n+   \"callbackUrl\":\"www.google.lk\",\n+   \"clientName\":\"rest_api_admin\",\n+   \"owner\":\"admin\",\n+   \"grantType\":\"password refresh_token\",\n+   \"saasApp\":true\n+}\n+```\n+\n+Sample response:\n+\n+```\n+{\n+   \"callBackURL\":\"www.google.lk\",\n+   \"jsonString\":\"{ \\\"username\\\":\\\"admin\\\", \\\"redirect_uris\\\":\\\"www.google.lk\\\", \\\"client_name\\\":\\\"admin_rest_api_admin\\\", \\\"grant_types\\\":\\\"authorization_code password refresh_token iwa:ntlm urn:ietf:params:oauth:grant-type:saml2-bearer client_credentialsimplicit\\\" }\",\n+   \"clientName\":null,\n+   \"clientId\":\"HfEl1jJPdg5tbtrxhAwybN05QGoa\",\n+   \"clientSecret\":\"l6c0aoLcWR3fwezHhc7XoGOht5Aa\"\n+}\n+```\n+\n+During the API invocation process request, click the CXF handler first, which calls an introspection API to validate the token. Generate the access token using the already created OAuth application. A sample call to generate the access token is shown below.\n+\n+Note: Access token must be generated using correct scope for the resource. Scope for each resource is given in resource documentation.\n+\n+```", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0OTIwNg=="}, "originalCommit": {"oid": "0d93ef9dde1d691ebd786471d8f8fc524e88abd1"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTU2ODQ4OnYy", "diffSide": "RIGHT", "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzo1NzozMlrOG-jriA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTo0MDoxNlrOHGIU4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0OTQ4MA==", "bodyText": "add it as a tab for the above", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r468249480", "createdAt": "2020-08-10T23:57:32Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete API Management solution that addresses all aspects of API management including API development, productization, consumption, security, rate limitation, monetization and analytics.\n+\n+\n+The REST API is implemented based on the REST specification and best practices as a CXF REST web application running on WSO2 API Manager. A contract-first approach could be utilized for API development starting with a Open API specification. \n+See the Gateway API's [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml) , which is written using Open API 3.0 .\n+Alternatively, this API definition can be accessed using the product URL as well `https://<host-name[:port]>/api/am/gateway/v1/swagger.json`.\n+\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+\n+Before invoking the API with the access token, obtain the consumer key/secret key pair by calling the dynamic client registration endpoint. You can request an access token with the preferred grant type. An example is shown below,\n+\n+```\n+curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\" -d @payload.json https://localhost:9443/client-registration/v0.16/register\n+```\n+\n+Sample request:\n+\n+```\n+{\n+   \"callbackUrl\":\"www.google.lk\",\n+   \"clientName\":\"rest_api_admin\",\n+   \"owner\":\"admin\",\n+   \"grantType\":\"password refresh_token\",\n+   \"saasApp\":true\n+}\n+```\n+\n+Sample response:\n+\n+```\n+{\n+   \"callBackURL\":\"www.google.lk\",\n+   \"jsonString\":\"{ \\\"username\\\":\\\"admin\\\", \\\"redirect_uris\\\":\\\"www.google.lk\\\", \\\"client_name\\\":\\\"admin_rest_api_admin\\\", \\\"grant_types\\\":\\\"authorization_code password refresh_token iwa:ntlm urn:ietf:params:oauth:grant-type:saml2-bearer client_credentialsimplicit\\\" }\",\n+   \"clientName\":null,\n+   \"clientId\":\"HfEl1jJPdg5tbtrxhAwybN05QGoa\",\n+   \"clientSecret\":\"l6c0aoLcWR3fwezHhc7XoGOht5Aa\"\n+}\n+```\n+\n+During the API invocation process request, click the CXF handler first, which calls an introspection API to validate the token. Generate the access token using the already created OAuth application. A sample call to generate the access token is shown below.\n+\n+Note: Access token must be generated using correct scope for the resource. Scope for each resource is given in resource documentation.\n+\n+```\n+curl -k -d \"grant_type=password&username=admin&password=admin&scope=apim:tier_view\" -H \"Authorization: Basic SGZFbDFqSlBkZzV0YnRyeGhBd3liTjA1UUdvYTpsNmMwYW9MY1dSM2Z3ZXpIaGM3WG9HT2h0NUFh\" https://localhost:8243/token\n+```\n+\n+Token response:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d93ef9dde1d691ebd786471d8f8fc524e88abd1"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE4OTkyMQ==", "bodyText": "88b578c", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r476189921", "createdAt": "2020-08-25T05:40:16Z", "author": {"login": "Sarangan0219"}, "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete API Management solution that addresses all aspects of API management including API development, productization, consumption, security, rate limitation, monetization and analytics.\n+\n+\n+The REST API is implemented based on the REST specification and best practices as a CXF REST web application running on WSO2 API Manager. A contract-first approach could be utilized for API development starting with a Open API specification. \n+See the Gateway API's [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml) , which is written using Open API 3.0 .\n+Alternatively, this API definition can be accessed using the product URL as well `https://<host-name[:port]>/api/am/gateway/v1/swagger.json`.\n+\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+\n+Before invoking the API with the access token, obtain the consumer key/secret key pair by calling the dynamic client registration endpoint. You can request an access token with the preferred grant type. An example is shown below,\n+\n+```\n+curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\" -d @payload.json https://localhost:9443/client-registration/v0.16/register\n+```\n+\n+Sample request:\n+\n+```\n+{\n+   \"callbackUrl\":\"www.google.lk\",\n+   \"clientName\":\"rest_api_admin\",\n+   \"owner\":\"admin\",\n+   \"grantType\":\"password refresh_token\",\n+   \"saasApp\":true\n+}\n+```\n+\n+Sample response:\n+\n+```\n+{\n+   \"callBackURL\":\"www.google.lk\",\n+   \"jsonString\":\"{ \\\"username\\\":\\\"admin\\\", \\\"redirect_uris\\\":\\\"www.google.lk\\\", \\\"client_name\\\":\\\"admin_rest_api_admin\\\", \\\"grant_types\\\":\\\"authorization_code password refresh_token iwa:ntlm urn:ietf:params:oauth:grant-type:saml2-bearer client_credentialsimplicit\\\" }\",\n+   \"clientName\":null,\n+   \"clientId\":\"HfEl1jJPdg5tbtrxhAwybN05QGoa\",\n+   \"clientSecret\":\"l6c0aoLcWR3fwezHhc7XoGOht5Aa\"\n+}\n+```\n+\n+During the API invocation process request, click the CXF handler first, which calls an introspection API to validate the token. Generate the access token using the already created OAuth application. A sample call to generate the access token is shown below.\n+\n+Note: Access token must be generated using correct scope for the resource. Scope for each resource is given in resource documentation.\n+\n+```\n+curl -k -d \"grant_type=password&username=admin&password=admin&scope=apim:tier_view\" -H \"Authorization: Basic SGZFbDFqSlBkZzV0YnRyeGhBd3liTjA1UUdvYTpsNmMwYW9MY1dSM2Z3ZXpIaGM3WG9HT2h0NUFh\" https://localhost:8243/token\n+```\n+\n+Token response:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0OTQ4MA=="}, "originalCommit": {"oid": "0d93ef9dde1d691ebd786471d8f8fc524e88abd1"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTU3MDU4OnYy", "diffSide": "RIGHT", "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMzo1ODo0OVrOG-js1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTo1MDo1MVrOHGIhyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0OTgxMg==", "bodyText": "Follow the instructions below to generate keys and obtain a token to invoke an API.", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r468249812", "createdAt": "2020-08-10T23:58:49Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete API Management solution that addresses all aspects of API management including API development, productization, consumption, security, rate limitation, monetization and analytics.\n+\n+\n+The REST API is implemented based on the REST specification and best practices as a CXF REST web application running on WSO2 API Manager. A contract-first approach could be utilized for API development starting with a Open API specification. \n+See the Gateway API's [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml) , which is written using Open API 3.0 .\n+Alternatively, this API definition can be accessed using the product URL as well `https://<host-name[:port]>/api/am/gateway/v1/swagger.json`.\n+\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d93ef9dde1d691ebd786471d8f8fc524e88abd1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5MzIyNQ==", "bodyText": "dfc6cce", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r476193225", "createdAt": "2020-08-25T05:50:51Z", "author": {"login": "Sarangan0219"}, "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete API Management solution that addresses all aspects of API management including API development, productization, consumption, security, rate limitation, monetization and analytics.\n+\n+\n+The REST API is implemented based on the REST specification and best practices as a CXF REST web application running on WSO2 API Manager. A contract-first approach could be utilized for API development starting with a Open API specification. \n+See the Gateway API's [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml) , which is written using Open API 3.0 .\n+Alternatively, this API definition can be accessed using the product URL as well `https://<host-name[:port]>/api/am/gateway/v1/swagger.json`.\n+\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI0OTgxMg=="}, "originalCommit": {"oid": "0d93ef9dde1d691ebd786471d8f8fc524e88abd1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTU3NDcxOnYy", "diffSide": "RIGHT", "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDowMDo0OFrOG-jvCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNTo1MDo1NVrOHGIh3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1MDM3OA==", "bodyText": "Now, you have a valid access token which you can use to invoke an API. If you wish to use a different grant type refer to the [Grant types] (https://apim.docs.wso2.com/en/next/learn/api-security/oauth2/grant-types/overview/) document to learn more.", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r468250378", "createdAt": "2020-08-11T00:00:48Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete API Management solution that addresses all aspects of API management including API development, productization, consumption, security, rate limitation, monetization and analytics.\n+\n+\n+The REST API is implemented based on the REST specification and best practices as a CXF REST web application running on WSO2 API Manager. A contract-first approach could be utilized for API development starting with a Open API specification. \n+See the Gateway API's [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml) , which is written using Open API 3.0 .\n+Alternatively, this API definition can be accessed using the product URL as well `https://<host-name[:port]>/api/am/gateway/v1/swagger.json`.\n+\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+\n+Before invoking the API with the access token, obtain the consumer key/secret key pair by calling the dynamic client registration endpoint. You can request an access token with the preferred grant type. An example is shown below,\n+\n+```\n+curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\" -d @payload.json https://localhost:9443/client-registration/v0.16/register\n+```\n+\n+Sample request:\n+\n+```\n+{\n+   \"callbackUrl\":\"www.google.lk\",\n+   \"clientName\":\"rest_api_admin\",\n+   \"owner\":\"admin\",\n+   \"grantType\":\"password refresh_token\",\n+   \"saasApp\":true\n+}\n+```\n+\n+Sample response:\n+\n+```\n+{\n+   \"callBackURL\":\"www.google.lk\",\n+   \"jsonString\":\"{ \\\"username\\\":\\\"admin\\\", \\\"redirect_uris\\\":\\\"www.google.lk\\\", \\\"client_name\\\":\\\"admin_rest_api_admin\\\", \\\"grant_types\\\":\\\"authorization_code password refresh_token iwa:ntlm urn:ietf:params:oauth:grant-type:saml2-bearer client_credentialsimplicit\\\" }\",\n+   \"clientName\":null,\n+   \"clientId\":\"HfEl1jJPdg5tbtrxhAwybN05QGoa\",\n+   \"clientSecret\":\"l6c0aoLcWR3fwezHhc7XoGOht5Aa\"\n+}\n+```\n+\n+During the API invocation process request, click the CXF handler first, which calls an introspection API to validate the token. Generate the access token using the already created OAuth application. A sample call to generate the access token is shown below.\n+\n+Note: Access token must be generated using correct scope for the resource. Scope for each resource is given in resource documentation.\n+\n+```\n+curl -k -d \"grant_type=password&username=admin&password=admin&scope=apim:tier_view\" -H \"Authorization: Basic SGZFbDFqSlBkZzV0YnRyeGhBd3liTjA1UUdvYTpsNmMwYW9MY1dSM2Z3ZXpIaGM3WG9HT2h0NUFh\" https://localhost:8243/token\n+```\n+\n+Token response:\n+\n+```\n+{\n+   \"scope\":\"apim:tier_view\",\n+   \"token_type\":\"Bearer\",\n+   \"expires_in\":3600,\n+   \"refresh_token\":\"33c3be152ebf0030b3fb76f2c1f80bf8\",\n+   \"access_token\":\"292ff0fd256814536baca0926f483c8d\"\n+}\n+```\n+\n+Now, you have a valid access token, which you can use to invoke an API. Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header. If you use a different authentication mechanism, this process may change.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d93ef9dde1d691ebd786471d8f8fc524e88abd1"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5MzI0NA==", "bodyText": "dfc6cce", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r476193244", "createdAt": "2020-08-25T05:50:55Z", "author": {"login": "Sarangan0219"}, "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete API Management solution that addresses all aspects of API management including API development, productization, consumption, security, rate limitation, monetization and analytics.\n+\n+\n+The REST API is implemented based on the REST specification and best practices as a CXF REST web application running on WSO2 API Manager. A contract-first approach could be utilized for API development starting with a Open API specification. \n+See the Gateway API's [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml) , which is written using Open API 3.0 .\n+Alternatively, this API definition can be accessed using the product URL as well `https://<host-name[:port]>/api/am/gateway/v1/swagger.json`.\n+\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+\n+Before invoking the API with the access token, obtain the consumer key/secret key pair by calling the dynamic client registration endpoint. You can request an access token with the preferred grant type. An example is shown below,\n+\n+```\n+curl -X POST -H \"Authorization: Basic YWRtaW46YWRtaW4=\" -H \"Content-Type: application/json\" -d @payload.json https://localhost:9443/client-registration/v0.16/register\n+```\n+\n+Sample request:\n+\n+```\n+{\n+   \"callbackUrl\":\"www.google.lk\",\n+   \"clientName\":\"rest_api_admin\",\n+   \"owner\":\"admin\",\n+   \"grantType\":\"password refresh_token\",\n+   \"saasApp\":true\n+}\n+```\n+\n+Sample response:\n+\n+```\n+{\n+   \"callBackURL\":\"www.google.lk\",\n+   \"jsonString\":\"{ \\\"username\\\":\\\"admin\\\", \\\"redirect_uris\\\":\\\"www.google.lk\\\", \\\"client_name\\\":\\\"admin_rest_api_admin\\\", \\\"grant_types\\\":\\\"authorization_code password refresh_token iwa:ntlm urn:ietf:params:oauth:grant-type:saml2-bearer client_credentialsimplicit\\\" }\",\n+   \"clientName\":null,\n+   \"clientId\":\"HfEl1jJPdg5tbtrxhAwybN05QGoa\",\n+   \"clientSecret\":\"l6c0aoLcWR3fwezHhc7XoGOht5Aa\"\n+}\n+```\n+\n+During the API invocation process request, click the CXF handler first, which calls an introspection API to validate the token. Generate the access token using the already created OAuth application. A sample call to generate the access token is shown below.\n+\n+Note: Access token must be generated using correct scope for the resource. Scope for each resource is given in resource documentation.\n+\n+```\n+curl -k -d \"grant_type=password&username=admin&password=admin&scope=apim:tier_view\" -H \"Authorization: Basic SGZFbDFqSlBkZzV0YnRyeGhBd3liTjA1UUdvYTpsNmMwYW9MY1dSM2Z3ZXpIaGM3WG9HT2h0NUFh\" https://localhost:8243/token\n+```\n+\n+Token response:\n+\n+```\n+{\n+   \"scope\":\"apim:tier_view\",\n+   \"token_type\":\"Bearer\",\n+   \"expires_in\":3600,\n+   \"refresh_token\":\"33c3be152ebf0030b3fb76f2c1f80bf8\",\n+   \"access_token\":\"292ff0fd256814536baca0926f483c8d\"\n+}\n+```\n+\n+Now, you have a valid access token, which you can use to invoke an API. Navigate through the API descriptions to find the required API, obtain an access token as described above and invoke the API with the authentication header. If you use a different authentication mechanism, this process may change.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1MDM3OA=="}, "originalCommit": {"oid": "0d93ef9dde1d691ebd786471d8f8fc524e88abd1"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTU3OTMxOnYy", "diffSide": "RIGHT", "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDowMzoxNFrOG-jxuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjowMDo0MlrOHGIuTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1MTA2NA==", "bodyText": "Add this section \"In the default flow, when an API is invoked with an access token, first the CXF handler gets engaged and calls an introspection API to validate the token\"", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r468251064", "createdAt": "2020-08-11T00:03:14Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete API Management solution that addresses all aspects of API management including API development, productization, consumption, security, rate limitation, monetization and analytics.\n+\n+\n+The REST API is implemented based on the REST specification and best practices as a CXF REST web application running on WSO2 API Manager. A contract-first approach could be utilized for API development starting with a Open API specification. \n+See the Gateway API's [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml) , which is written using Open API 3.0 .\n+Alternatively, this API definition can be accessed using the product URL as well `https://<host-name[:port]>/api/am/gateway/v1/swagger.json`.\n+\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d93ef9dde1d691ebd786471d8f8fc524e88abd1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjE5NjQyOA==", "bodyText": "dfc6cce", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r476196428", "createdAt": "2020-08-25T06:00:42Z", "author": {"login": "Sarangan0219"}, "path": "en/docs/develop/product-apis/getting-started/guide-gateway-v1.md", "diffHunk": "@@ -0,0 +1,63 @@\n+# Getting Started\n+\n+WSO2 API Manager is a complete API Management solution that addresses all aspects of API management including API development, productization, consumption, security, rate limitation, monetization and analytics.\n+\n+\n+The REST API is implemented based on the REST specification and best practices as a CXF REST web application running on WSO2 API Manager. A contract-first approach could be utilized for API development starting with a Open API specification. \n+See the Gateway API's [Swagger definition](https://raw.githubusercontent.com/wso2/carbon-apimgt/v6.6.163/components/apimgt/org.wso2.carbon.apimgt.rest.api.gateway.v1/src/main/resources/gateway-api.yaml) , which is written using Open API 3.0 .\n+Alternatively, this API definition can be accessed using the product URL as well `https://<host-name[:port]>/api/am/gateway/v1/swagger.json`.\n+\n+\n+The API comes with a pluggable security mechanism. Since API security is implemented as a CXF handler, if you need to plug a custom security mechanism, you can write your own handler and add it to the web service.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1MTA2NA=="}, "originalCommit": {"oid": "0d93ef9dde1d691ebd786471d8f8fc524e88abd1"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNTU4MDU4OnYy", "diffSide": "RIGHT", "path": "en/docs/develop/product-apis/restful-apis.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMDowNDowM1rOG-jyhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQwNjozMzozOVrOHGJdOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1MTI3MA==", "bodyText": "API Manager 3.2.0", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r468251270", "createdAt": "2020-08-11T00:04:03Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/product-apis/restful-apis.md", "diffHunk": "@@ -26,6 +26,11 @@ There are two versions of REST APIs available for the API Publisher and Develope\n   <tr>\n     <td nowrap=\"true\"><a href=\"{{base_path}}/develop/product-apis/getting-started/guide-admin-v1/\">WSO2 Admin API v0.16</a></td>\n     <td> <b>WSO2 recommends that you use the Admin v0.16 REST APIs</b> as it is up to date and has support for the latest WSO2 API Manager 3.2.0 features with regard to the Admin Portal.</td>\n+    <td nowrap=\"true\"><a href=\"{{base_path}}/develop/product-apis/admin-apis/admin-v0.16/admin-v0.16/\">WSO2 Admin API v0.16</a></td>\n+    <td> <b>WSO2 recommends that you use the Admin v0.16 REST APIs</b> as it is up to date and has support for the latest WSO2 API Manager 3.1.0 features with regard to the Admin Portal.</td>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d93ef9dde1d691ebd786471d8f8fc524e88abd1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjIwODQ0Mw==", "bodyText": "Already Fixed", "url": "https://github.com/wso2/docs-apim/pull/1527#discussion_r476208443", "createdAt": "2020-08-25T06:33:39Z", "author": {"login": "Sarangan0219"}, "path": "en/docs/develop/product-apis/restful-apis.md", "diffHunk": "@@ -26,6 +26,11 @@ There are two versions of REST APIs available for the API Publisher and Develope\n   <tr>\n     <td nowrap=\"true\"><a href=\"{{base_path}}/develop/product-apis/getting-started/guide-admin-v1/\">WSO2 Admin API v0.16</a></td>\n     <td> <b>WSO2 recommends that you use the Admin v0.16 REST APIs</b> as it is up to date and has support for the latest WSO2 API Manager 3.2.0 features with regard to the Admin Portal.</td>\n+    <td nowrap=\"true\"><a href=\"{{base_path}}/develop/product-apis/admin-apis/admin-v0.16/admin-v0.16/\">WSO2 Admin API v0.16</a></td>\n+    <td> <b>WSO2 recommends that you use the Admin v0.16 REST APIs</b> as it is up to date and has support for the latest WSO2 API Manager 3.1.0 features with regard to the Admin Portal.</td>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODI1MTI3MA=="}, "originalCommit": {"oid": "0d93ef9dde1d691ebd786471d8f8fc524e88abd1"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1648, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}