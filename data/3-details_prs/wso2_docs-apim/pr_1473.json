{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NTUyOTYz", "number": 1473, "title": "adding doc \"PrivateJet mode for Microgateways\"", "bodyText": "Purpose\n\nThis PR added the document for the feature PrivateJet mode for Microgateways", "createdAt": "2020-07-06T05:49:31Z", "url": "https://github.com/wso2/docs-apim/pull/1473", "merged": true, "mergeCommit": {"oid": "f8304e97ad7fd9c924c52adf6a59ae68d8f7d1bf"}, "closed": true, "closedAt": "2020-08-05T17:37:06Z", "author": {"login": "Shehanir"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcyQvQ0AFqTQ0MzAzNDkwOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc7-yfwgFqTQ2MTg4MjUzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMDM0OTA4", "url": "https://github.com/wso2/docs-apim/pull/1473#pullrequestreview-443034908", "createdAt": "2020-07-06T12:35:56Z", "commit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjozNTo1NlrOGtVazA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjo0OTozN1rOGtV3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MDAyOA==", "bodyText": "We need to improve this part after we release the API Operator 1.2.0. We should mention all the steps for setting up this in K8s. Pointing scenario 17 is not enough. We will have to add scenario 17's prerequisites section here.", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r450190028", "createdAt": "2020-07-06T12:35:56Z", "author": {"login": "pubudu538"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, \n+which simplifies a number of complex management tasks. WSO2 API-Manager provides cloud-native API management where user can expose microservices as managed APIs in cloud environments such as Kubernetes with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will expose as managed APIs in cloud clusters in privetJet mode, where each microservice will have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,\n+deployment, scaling, and management tasks will handle by the [WSO2 -Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md) itself.\n+\n+## Configuring APIs to deploy in PrivateJet mode\n+\n+Follow the steps below to configure the PrivateJet mode for Microgateways in API Manager to deploy APIs as managed APIs in cloud clusters. (Ex: Kubernetes)\n+\n+1. Install and setup [Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). In order to expose APIs using ingress controller [deploy the k8s-api-operator in ingress mode](https://github.com/wso2/k8s-api-operator/tree/v1.1.0/scenarios/scenario-17). ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MDg0Mw==", "bodyText": "Sample value should be given here.", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r450190843", "createdAt": "2020-07-06T12:37:26Z", "author": {"login": "pubudu538"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, \n+which simplifies a number of complex management tasks. WSO2 API-Manager provides cloud-native API management where user can expose microservices as managed APIs in cloud environments such as Kubernetes with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will expose as managed APIs in cloud clusters in privetJet mode, where each microservice will have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,\n+deployment, scaling, and management tasks will handle by the [WSO2 -Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md) itself.\n+\n+## Configuring APIs to deploy in PrivateJet mode\n+\n+Follow the steps below to configure the PrivateJet mode for Microgateways in API Manager to deploy APIs as managed APIs in cloud clusters. (Ex: Kubernetes)\n+\n+1. Install and setup [Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). In order to expose APIs using ingress controller [deploy the k8s-api-operator in ingress mode](https://github.com/wso2/k8s-api-operator/tree/v1.1.0/scenarios/scenario-17). \n+2. Deploying cluster configurations\n+ \n+    Processes in containers inside pods are authenticated when contacting the apiserver and accessing resources. In order to regulate access to the resources need to establish the RBAC Authorization with at least permissions to, \n+    Create, Delete, Update, Get , List, Post the customresourcedefinitions, apis and configmaps.\n+\n+    i.  Create a service account\n+\n+        kubectl create serviceaccount <service-account name> -n <namespace>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MTM5Nw==", "bodyText": "wso2am-privatejet is the service account we created in step 1. We should highlight this in this config", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r450191397", "createdAt": "2020-07-06T12:38:35Z", "author": {"login": "pubudu538"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, \n+which simplifies a number of complex management tasks. WSO2 API-Manager provides cloud-native API management where user can expose microservices as managed APIs in cloud environments such as Kubernetes with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will expose as managed APIs in cloud clusters in privetJet mode, where each microservice will have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,\n+deployment, scaling, and management tasks will handle by the [WSO2 -Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md) itself.\n+\n+## Configuring APIs to deploy in PrivateJet mode\n+\n+Follow the steps below to configure the PrivateJet mode for Microgateways in API Manager to deploy APIs as managed APIs in cloud clusters. (Ex: Kubernetes)\n+\n+1. Install and setup [Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). In order to expose APIs using ingress controller [deploy the k8s-api-operator in ingress mode](https://github.com/wso2/k8s-api-operator/tree/v1.1.0/scenarios/scenario-17). \n+2. Deploying cluster configurations\n+ \n+    Processes in containers inside pods are authenticated when contacting the apiserver and accessing resources. In order to regulate access to the resources need to establish the RBAC Authorization with at least permissions to, \n+    Create, Delete, Update, Get , List, Post the customresourcedefinitions, apis and configmaps.\n+\n+    i.  Create a service account\n+\n+        kubectl create serviceaccount <service-account name> -n <namespace>\n+\n+    ii. Create a clusterRole\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRole\n+        metadata:\n+          name: clusterrole-privatejet\n+        rules:\n+        - apiGroups: [\"\",\"apiextensions.k8s.io\",\"wso2.com\"]\n+          resources: [\"configmaps\",\"customresourcedefinitions\",\"apis\"]\n+          verbs: [\"get\", \"post\", \"create\", \"delete\", \"put\", \"list\",\"update\"]\n+     \n+    iii. Create a  clusterRoleBinding\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRoleBinding\n+        metadata:\n+          name: clusterrolebinding-privatejet\n+        subjects:\n+        - kind: ServiceAccount\n+          name: wso2am-privatejet # Name is case sensitive", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MjE0MQ==", "bodyText": "K8s spelling is wrong.", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r450192141", "createdAt": "2020-07-06T12:40:02Z", "author": {"login": "pubudu538"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, \n+which simplifies a number of complex management tasks. WSO2 API-Manager provides cloud-native API management where user can expose microservices as managed APIs in cloud environments such as Kubernetes with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will expose as managed APIs in cloud clusters in privetJet mode, where each microservice will have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,\n+deployment, scaling, and management tasks will handle by the [WSO2 -Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md) itself.\n+\n+## Configuring APIs to deploy in PrivateJet mode\n+\n+Follow the steps below to configure the PrivateJet mode for Microgateways in API Manager to deploy APIs as managed APIs in cloud clusters. (Ex: Kubernetes)\n+\n+1. Install and setup [Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). In order to expose APIs using ingress controller [deploy the k8s-api-operator in ingress mode](https://github.com/wso2/k8s-api-operator/tree/v1.1.0/scenarios/scenario-17). \n+2. Deploying cluster configurations\n+ \n+    Processes in containers inside pods are authenticated when contacting the apiserver and accessing resources. In order to regulate access to the resources need to establish the RBAC Authorization with at least permissions to, \n+    Create, Delete, Update, Get , List, Post the customresourcedefinitions, apis and configmaps.\n+\n+    i.  Create a service account\n+\n+        kubectl create serviceaccount <service-account name> -n <namespace>\n+\n+    ii. Create a clusterRole\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRole\n+        metadata:\n+          name: clusterrole-privatejet\n+        rules:\n+        - apiGroups: [\"\",\"apiextensions.k8s.io\",\"wso2.com\"]\n+          resources: [\"configmaps\",\"customresourcedefinitions\",\"apis\"]\n+          verbs: [\"get\", \"post\", \"create\", \"delete\", \"put\", \"list\",\"update\"]\n+     \n+    iii. Create a  clusterRoleBinding\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRoleBinding\n+        metadata:\n+          name: clusterrolebinding-privatejet\n+        subjects:\n+        - kind: ServiceAccount\n+          name: wso2am-privatejet # Name is case sensitive\n+          apiGroup: \"\"\n+          namespace: default\n+        roleRef:\n+          kind: ClusterRole\n+          name: clusterrole-privatejet\n+          apiGroup: rbac.authorization.k8s.io\n+                                                                                                                      \n+3. Obtaining service account token\n+\n+    First you need to get the secret name for your service account. This can be done by executing,\n+\n+        kubectl get secrets -n <serviceaccount-namespace>\n+     \n+    Then, get the service account token by executing the following command,\n+\n+        kubectl describe secrets -n <serviceaccount-namespace> <secret-namespace>\n+\n+4. Obtaining the master URL\n+\n+    In order to establish the connection with the cluster need to obtain the Master URL. this be done by executing following command.\n+    \n+        kubectl cluster-info\n+        \n+        Result:\n+        Kubernetes master is running at https://35.223.28.131\n+        GLBCDefaultBackend is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/default-http-backend:http/proxy\n+        Heapster is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/heapster/proxy\n+        KubeDNS is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n+        Metrics-server is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy\n+\n+    <html><div class=\"admonition note\">\n+      <p class=\"admonition-title\">Note</p>\n+      <p>If the APIM deployed in a kubenretes cluster Master URL and serviceaccount token are not required to configure. </p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5MzAzOA==", "bodyText": "Why BasicSecurityCustomResourceName, OauthSecurityCustomResourceName and JWTSecurityCustomResourceName are not there in deployment.toml?", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r450193038", "createdAt": "2020-07-06T12:41:43Z", "author": {"login": "pubudu538"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, \n+which simplifies a number of complex management tasks. WSO2 API-Manager provides cloud-native API management where user can expose microservices as managed APIs in cloud environments such as Kubernetes with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will expose as managed APIs in cloud clusters in privetJet mode, where each microservice will have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,\n+deployment, scaling, and management tasks will handle by the [WSO2 -Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md) itself.\n+\n+## Configuring APIs to deploy in PrivateJet mode\n+\n+Follow the steps below to configure the PrivateJet mode for Microgateways in API Manager to deploy APIs as managed APIs in cloud clusters. (Ex: Kubernetes)\n+\n+1. Install and setup [Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). In order to expose APIs using ingress controller [deploy the k8s-api-operator in ingress mode](https://github.com/wso2/k8s-api-operator/tree/v1.1.0/scenarios/scenario-17). \n+2. Deploying cluster configurations\n+ \n+    Processes in containers inside pods are authenticated when contacting the apiserver and accessing resources. In order to regulate access to the resources need to establish the RBAC Authorization with at least permissions to, \n+    Create, Delete, Update, Get , List, Post the customresourcedefinitions, apis and configmaps.\n+\n+    i.  Create a service account\n+\n+        kubectl create serviceaccount <service-account name> -n <namespace>\n+\n+    ii. Create a clusterRole\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRole\n+        metadata:\n+          name: clusterrole-privatejet\n+        rules:\n+        - apiGroups: [\"\",\"apiextensions.k8s.io\",\"wso2.com\"]\n+          resources: [\"configmaps\",\"customresourcedefinitions\",\"apis\"]\n+          verbs: [\"get\", \"post\", \"create\", \"delete\", \"put\", \"list\",\"update\"]\n+     \n+    iii. Create a  clusterRoleBinding\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRoleBinding\n+        metadata:\n+          name: clusterrolebinding-privatejet\n+        subjects:\n+        - kind: ServiceAccount\n+          name: wso2am-privatejet # Name is case sensitive\n+          apiGroup: \"\"\n+          namespace: default\n+        roleRef:\n+          kind: ClusterRole\n+          name: clusterrole-privatejet\n+          apiGroup: rbac.authorization.k8s.io\n+                                                                                                                      \n+3. Obtaining service account token\n+\n+    First you need to get the secret name for your service account. This can be done by executing,\n+\n+        kubectl get secrets -n <serviceaccount-namespace>\n+     \n+    Then, get the service account token by executing the following command,\n+\n+        kubectl describe secrets -n <serviceaccount-namespace> <secret-namespace>\n+\n+4. Obtaining the master URL\n+\n+    In order to establish the connection with the cluster need to obtain the Master URL. this be done by executing following command.\n+    \n+        kubectl cluster-info\n+        \n+        Result:\n+        Kubernetes master is running at https://35.223.28.131\n+        GLBCDefaultBackend is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/default-http-backend:http/proxy\n+        Heapster is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/heapster/proxy\n+        KubeDNS is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n+        Metrics-server is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy\n+\n+    <html><div class=\"admonition note\">\n+      <p class=\"admonition-title\">Note</p>\n+      <p>If the APIM deployed in a kubenretes cluster Master URL and serviceaccount token are not required to configure. </p>\n+      </div>\n+    </html>\n+    \n+5. Adding configurations of clusters.\n+\n+    For the super tenant users the cluster configurations should be added to the `<API-M_HOME>/repository/conf/deployment.toml` file as follows.\n+    \n+    ``` json tab=\"Format\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"<cloud-environment-type>\"\n+    clusterName = \"<cluster-name>\"\n+    displayName = \"<cluster-name-to_display>\"\n+    properties.Replicas = \"<number-of-replicas>\"\n+    properties.AccessURL = \"<access-URL>\"\n+    properties.MasterURL = \"<Master-URL-of-clsuter>\"\n+    properties.SAToken = \"<serviceacccount-token>\"\n+    properties.Namespace = \"<namespcae>\"\n+    ```\n+\n+    ``` json tab=\"Example\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"Kubernetes\"\n+    clusterName = \"docker-desktop\"\n+    displayName = \"cluster-1\"\n+    properties.Replicas = 1\n+    properties.AccessURL = \"mgw.ingress.wso2.com\"\n+    properties.MasterURL = \"https://kubernetes.docker.internal:6443\"\n+    properties.SAToken = \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg2UlYySEFkaVBOVG4zZ3FhWERXQUxQVUQ0bjlzOXE3dFhpbUZNZlFiRjQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3c28yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6IndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQtdG9rZW4tZGR0OTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NvMmFtLXBhdHRlcm4tMS1zdmMtYWNjb3VudCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijc3NmRmMjFkLTA3NjItNDM2Zi05ZDIwLTZlYzFkODMxYzc1NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDp3c28yOndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQifQ.YwlSgnSnwS7BNP0q0iDHsjlq_r3RhobG-SrduuEi35VXNfipPsK3UVJcCBmDKQOzKAxRG9415h2pr3cS-QsM6PR_UU2UWlXiUO-3UtSMqVY48Ek_1wdfmfCkiE7IOeua_58CV15tXtMLom0Oh27nkmWGfTHVvImQnqho4nv26BKZH4vKWgkw0HpMt73KHdN6SlVMK0cynktO5H-2A4V2rh-uL-OUXCLON_sBypVoPc9PAMxHo-bUe0SqBPiM0SiALu-0-J6dBcwbzPb5g-yUZmHmtuw3O32C304Hgfr-4Dui3X5DSKBSeqlrjjjfrvMVNug0J4JKk3bJ56h0OgujFw\"\n+    properties.Namespace = \"default\"\n+    ```\n+         \n+       Tenant users, can edit the cluster configurations included in `tenant-conf.json` file. Go to the carbon console and edit the tenant-conf.json file in `/_system/config/apimgt/applicationdata/` path.\n+       \n+    ``` json tab=\"Format\"\n+    \"ContainerMgt\": [\n+      {\n+        \"Type\": \"Kubernetes\",\n+        \"ContainerMgtInfo\": [\n+        {\n+          \"ClusterName\": \"\",\n+          \"DisplayName\": \"\",\n+          \"Properties\": {\n+            \"MasterURL\": \"\",\n+            \"AccessURL\": \"\",\n+            \"SAToken\": \"\",\n+            \"Namespace\": \"default\",\n+            \"Replicas\": 1,\n+            \"BasicSecurityCustomResourceName\": \"\",\n+            \"OauthSecurityCustomResourceName\": \"\",\n+            \"JWTSecurityCustomResourceName\": \"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5NzI5OA==", "bodyText": "We dont need this token. For invoking the API, we should use the API try it in the dev portal. No need to have these curl commands.", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r450197298", "createdAt": "2020-07-06T12:49:37Z", "author": {"login": "pubudu538"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, \n+which simplifies a number of complex management tasks. WSO2 API-Manager provides cloud-native API management where user can expose microservices as managed APIs in cloud environments such as Kubernetes with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will expose as managed APIs in cloud clusters in privetJet mode, where each microservice will have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,\n+deployment, scaling, and management tasks will handle by the [WSO2 -Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md) itself.\n+\n+## Configuring APIs to deploy in PrivateJet mode\n+\n+Follow the steps below to configure the PrivateJet mode for Microgateways in API Manager to deploy APIs as managed APIs in cloud clusters. (Ex: Kubernetes)\n+\n+1. Install and setup [Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). In order to expose APIs using ingress controller [deploy the k8s-api-operator in ingress mode](https://github.com/wso2/k8s-api-operator/tree/v1.1.0/scenarios/scenario-17). \n+2. Deploying cluster configurations\n+ \n+    Processes in containers inside pods are authenticated when contacting the apiserver and accessing resources. In order to regulate access to the resources need to establish the RBAC Authorization with at least permissions to, \n+    Create, Delete, Update, Get , List, Post the customresourcedefinitions, apis and configmaps.\n+\n+    i.  Create a service account\n+\n+        kubectl create serviceaccount <service-account name> -n <namespace>\n+\n+    ii. Create a clusterRole\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRole\n+        metadata:\n+          name: clusterrole-privatejet\n+        rules:\n+        - apiGroups: [\"\",\"apiextensions.k8s.io\",\"wso2.com\"]\n+          resources: [\"configmaps\",\"customresourcedefinitions\",\"apis\"]\n+          verbs: [\"get\", \"post\", \"create\", \"delete\", \"put\", \"list\",\"update\"]\n+     \n+    iii. Create a  clusterRoleBinding\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRoleBinding\n+        metadata:\n+          name: clusterrolebinding-privatejet\n+        subjects:\n+        - kind: ServiceAccount\n+          name: wso2am-privatejet # Name is case sensitive\n+          apiGroup: \"\"\n+          namespace: default\n+        roleRef:\n+          kind: ClusterRole\n+          name: clusterrole-privatejet\n+          apiGroup: rbac.authorization.k8s.io\n+                                                                                                                      \n+3. Obtaining service account token\n+\n+    First you need to get the secret name for your service account. This can be done by executing,\n+\n+        kubectl get secrets -n <serviceaccount-namespace>\n+     \n+    Then, get the service account token by executing the following command,\n+\n+        kubectl describe secrets -n <serviceaccount-namespace> <secret-namespace>\n+\n+4. Obtaining the master URL\n+\n+    In order to establish the connection with the cluster need to obtain the Master URL. this be done by executing following command.\n+    \n+        kubectl cluster-info\n+        \n+        Result:\n+        Kubernetes master is running at https://35.223.28.131\n+        GLBCDefaultBackend is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/default-http-backend:http/proxy\n+        Heapster is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/heapster/proxy\n+        KubeDNS is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n+        Metrics-server is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy\n+\n+    <html><div class=\"admonition note\">\n+      <p class=\"admonition-title\">Note</p>\n+      <p>If the APIM deployed in a kubenretes cluster Master URL and serviceaccount token are not required to configure. </p>\n+      </div>\n+    </html>\n+    \n+5. Adding configurations of clusters.\n+\n+    For the super tenant users the cluster configurations should be added to the `<API-M_HOME>/repository/conf/deployment.toml` file as follows.\n+    \n+    ``` json tab=\"Format\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"<cloud-environment-type>\"\n+    clusterName = \"<cluster-name>\"\n+    displayName = \"<cluster-name-to_display>\"\n+    properties.Replicas = \"<number-of-replicas>\"\n+    properties.AccessURL = \"<access-URL>\"\n+    properties.MasterURL = \"<Master-URL-of-clsuter>\"\n+    properties.SAToken = \"<serviceacccount-token>\"\n+    properties.Namespace = \"<namespcae>\"\n+    ```\n+\n+    ``` json tab=\"Example\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"Kubernetes\"\n+    clusterName = \"docker-desktop\"\n+    displayName = \"cluster-1\"\n+    properties.Replicas = 1\n+    properties.AccessURL = \"mgw.ingress.wso2.com\"\n+    properties.MasterURL = \"https://kubernetes.docker.internal:6443\"\n+    properties.SAToken = \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg2UlYySEFkaVBOVG4zZ3FhWERXQUxQVUQ0bjlzOXE3dFhpbUZNZlFiRjQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3c28yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6IndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQtdG9rZW4tZGR0OTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NvMmFtLXBhdHRlcm4tMS1zdmMtYWNjb3VudCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijc3NmRmMjFkLTA3NjItNDM2Zi05ZDIwLTZlYzFkODMxYzc1NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDp3c28yOndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQifQ.YwlSgnSnwS7BNP0q0iDHsjlq_r3RhobG-SrduuEi35VXNfipPsK3UVJcCBmDKQOzKAxRG9415h2pr3cS-QsM6PR_UU2UWlXiUO-3UtSMqVY48Ek_1wdfmfCkiE7IOeua_58CV15tXtMLom0Oh27nkmWGfTHVvImQnqho4nv26BKZH4vKWgkw0HpMt73KHdN6SlVMK0cynktO5H-2A4V2rh-uL-OUXCLON_sBypVoPc9PAMxHo-bUe0SqBPiM0SiALu-0-J6dBcwbzPb5g-yUZmHmtuw3O32C304Hgfr-4Dui3X5DSKBSeqlrjjjfrvMVNug0J4JKk3bJ56h0OgujFw\"\n+    properties.Namespace = \"default\"\n+    ```\n+         \n+       Tenant users, can edit the cluster configurations included in `tenant-conf.json` file. Go to the carbon console and edit the tenant-conf.json file in `/_system/config/apimgt/applicationdata/` path.\n+       \n+    ``` json tab=\"Format\"\n+    \"ContainerMgt\": [\n+      {\n+        \"Type\": \"Kubernetes\",\n+        \"ContainerMgtInfo\": [\n+        {\n+          \"ClusterName\": \"\",\n+          \"DisplayName\": \"\",\n+          \"Properties\": {\n+            \"MasterURL\": \"\",\n+            \"AccessURL\": \"\",\n+            \"SAToken\": \"\",\n+            \"Namespace\": \"default\",\n+            \"Replicas\": 1,\n+            \"BasicSecurityCustomResourceName\": \"\",\n+            \"OauthSecurityCustomResourceName\": \"\",\n+            \"JWTSecurityCustomResourceName\": \"\"\n+            }\n+          }\n+        ]\n+      }\n+    ]\n+    ```\n+    \n+    ``` json tab=\"Example\"\n+    \"ContainerMgt\": [\n+      {\n+        \"Type\": \"Kubernetes\",\n+        \"ContainerMgtInfo\": [\n+         {\n+           \"ClusterName\": \"docker-desktop\",\n+           \"DisplayName\": \"cluster-1\",\n+           \"Properties\": {\n+           \"MasterURL\": \"https://kubernetes.docker.internal:6443\",\n+           \"AccessURL\": \"mgw.ingress.wso2.com\",\n+           \"SAToken\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg2UlYySEFkaVBOVG4zZ3FhWERXQUxQVUQ0bjlzOXE3dFhpbUZNZlFiRjQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3c28yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6IndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQtdG9rZW4tZGR0OTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NvMmFtLXBhdHRlcm4tMS1zdmMtYWNjb3VudCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijc3NmRmMjFkLTA3NjItNDM2Zi05ZDIwLTZlYzFkODMxYzc1NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDp3c28yOndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQifQ.YwlSgnSnwS7BNP0q0iDHsjlq_r3RhobG-SrduuEi35VXNfipPsK3UVJcCBmDKQOzKAxRG9415h2pr3cS-QsM6PR_UU2UWlXiUO-3UtSMqVY48Ek_1wdfmfCkiE7IOeua_58CV15tXtMLom0Oh27nkmWGfTHVvImQnqho4nv26BKZH4vKWgkw0HpMt73KHdN6SlVMK0cynktO5H-2A4V2rh-uL-OUXCLON_sBypVoPc9PAMxHo-bUe0SqBPiM0SiALu-0-J6dBcwbzPb5g-yUZmHmtuw3O32C304Hgfr-4Dui3X5DSKBSeqlrjjjfrvMVNug0J4JKk3bJ56h0OgujFw\",\n+           \"Namespace\": \"default\",\n+           \"Replicas\": 1,\n+           \"BasicSecurityCustomResourceName\": \"\",\n+           \"OauthSecurityCustomResourceName\": \"\",\n+           \"JWTSecurityCustomResourceName\": \"\"\n+            }\n+          }\n+        ]\n+      }\n+    ]\n+    ```\n+ \n+     <html><div class=\"admonition note\">\n+        <p class=\"admonition-title\">Note</p>\n+        <p> Super tenant users can customize the container management implementations if required. Then customize classes should be added to the `<API-M_HOME>/repository/conf/deployment.toml` file as follows. </p>   \n+        \n+    ``` json tab=\"Format\"\n+    [ContainerMgtConfig]\n+    <Environment-type> = \"<class-name>\"\n+    ```  \n+   \n+    ``` json tab=\"Example\"\n+    [ContainerMgtConfig]\n+    Kubernetes = \"org.wso2.carbon.apimgt.impl.containermgt.K8sManager_CustomClass\"\n+    ```\n+  \n+      </div>\n+      </html>\n+         \n+6. Start the server and create an API in publisher\n+    \n+    After setting up configurations go to the <API-M-HOME>/bin directory and start the server. Then Sign in to the WSO2 API Publisher and create\n+   a new API.\n+    \n+7. Select the clusters from envioranment tab\n+\n+    Navigate to the environment page and select the clusters to deploy the API.\n+    \n+     ![Environments]({{base_path}}/assets/img/learn/privatejet-mode/environment.png)\n+    \n+8. Go to lifecycle tab and publish the API\n+\n+    Navigate to the lifecycle page and publish the API. This will expose microservices as managed APIs in selected clusters.\n+    \n+     ![API LifeCycle]({{base_path}}/assets/img/learn/privatejet-mode/lifecycle_publish.png)\n+     \n+9. Go to the devportal overview page and get the accessURL to access the deployed API\n+   \n+    To obtain the accessURL configured, Sign in to the WSO2 Developer Portal overview page. The accessURL can be seen under Gateway Environments.\n+   \n+    ![Developer portal - Overview]({{base_path}}/assets/img/learn/privatejet-mode/devportal.png)\n+   \n+10. Invoking the API\n+    \n+    i. Sign in to the WSO2 Developer Portal. Subscribe to the API and obtain an access token required to invoke the API or can use the following sample token.\n+    \n+        TOKEN=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ik5UZG1aak00WkRrM05qWTBZemM1TW1abU9EZ3dNVEUzTVdZd05ERTVNV1JsWkRnNE56YzRaQT09In0.eyJhdWQiOiJodHRwOlwvXC9vcmcud3NvMi5hcGltZ3RcL2dhdGV3YXkiLCJzdWIiOiJhZG1pbkBjYXJib24uc3VwZXIiLCJhcHBsaWNhdGlvbiI6eyJvd25lciI6ImFkbWluIiwidGllciI6IjEwUGVyTWluIiwibmFtZSI6InNhbXBsZS1jcmQtYXBwbGljYXRpb24iLCJpZCI6NCwidXVpZCI6bnVsbH0sInNjb3BlIjoiYW1fYXBwbGljYXRpb25fc2NvcGUgZGVmYXVsdCIsImlzcyI6Imh0dHBzOlwvXC93c28yYXBpbTozMjAwMVwvb2F1dGgyXC90b2tlbiIsInRpZXJJbmZvIjp7fSwia2V5dHlwZSI6IlBST0RVQ1RJT04iLCJzdWJzY3JpYmVkQVBJcyI6W10sImNvbnN1bWVyS2V5IjoieF8xal83MW11dXZCb01SRjFLZnVLdThNOVVRYSIsImV4cCI6MzczMTQ5Mjg2MSwiaWF0IjoxNTg0MDA5MjE0LCJqdGkiOiJkYTA5Mjg2Yy03OGEzLTQ4YjgtYmFiNy1hYWZiYzhiMTUxNTQifQ.MKmGDwh855NrZ2wOvXO7TwFbCtsgsOFuoZW4DBVIbJ1KQ2F6TgTgBbtzBUvrYGPslEExMemhepfvvlYv8Gd6MMo3GVH4aO8AKyc8gHmeIQ8MQtXGn7u9N00ZW3_9JWaQkU-OYEDsLHvKKHzO0t2umaskSyCS2UkAS4wIT_szZ5sm-O-ez4nKGeJmESiV-1EchFjOhLpEH4p9wIj3MlKnZrIcJByRKK9ZGaHBqxwwYuJtMCDNa2wFAPMOh-45eabIUdo1KUO3gZLVcME93aza1t1jzL9mFsx0LGaXIxB7klrDuBCAdG9Yi3O7-3WUF74QaS2tmCxW36JhhOJ5DdacfQ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 202}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNTIyNTQ3", "url": "https://github.com/wso2/docs-apim/pull/1473#pullrequestreview-452522547", "createdAt": "2020-07-21T14:35:49Z", "commit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNDozNTo0OVrOG07C_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNDo1OTozNFrOG08MLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0NjU1Nw==", "bodyText": "Shall we rephrase it as \" In an age where more and more applications are adopting the microservice architecture, it is obvious that container-orchestration systems such as Kubernetes have gained popularity due to the attractive functionalities they offer to simplify a number of complex management tasks? Automating computer application deployment, scaling, and management are a few of such functionalities to name.", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r458146557", "createdAt": "2020-07-21T14:35:49Z", "author": {"login": "shaniR"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE1Njk3MQ==", "bodyText": "WSO2 API Manager provides cloud-native API management, where a user is able to expose microservices as managed APIs in cloud environment such as Kubernetes. This could be done with the support of WSO2-Kubernetes API Operator", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r458156971", "createdAt": "2020-07-21T14:49:03Z", "author": {"login": "shaniR"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, \n+which simplifies a number of complex management tasks. WSO2 API-Manager provides cloud-native API management where user can expose microservices as managed APIs in cloud environments such as Kubernetes with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE1ODE3OA==", "bodyText": "Shall we rephrase the above sentence to : Microservices will be exposed as managed APIs in cloud clusters in the PrivetJet mode. Here, each microservice wll have a dedicated WSO2 API Microgateway.", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r458158178", "createdAt": "2020-07-21T14:50:32Z", "author": {"login": "shaniR"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, \n+which simplifies a number of complex management tasks. WSO2 API-Manager provides cloud-native API management where user can expose microservices as managed APIs in cloud environments such as Kubernetes with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will expose as managed APIs in cloud clusters in privetJet mode, where each microservice will have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE1ODk4OA==", "bodyText": "Shouldn't this be, \"Enabling PrivateJet mode\"", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r458158988", "createdAt": "2020-07-21T14:51:34Z", "author": {"login": "shaniR"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, \n+which simplifies a number of complex management tasks. WSO2 API-Manager provides cloud-native API management where user can expose microservices as managed APIs in cloud environments such as Kubernetes with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will expose as managed APIs in cloud clusters in privetJet mode, where each microservice will have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,\n+deployment, scaling, and management tasks will handle by the [WSO2 -Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md) itself.\n+\n+## Configuring APIs to deploy in PrivateJet mode", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE1OTI5Mg==", "bodyText": "should we use the work enable instead of configure?", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r458159292", "createdAt": "2020-07-21T14:51:57Z", "author": {"login": "shaniR"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, \n+which simplifies a number of complex management tasks. WSO2 API-Manager provides cloud-native API management where user can expose microservices as managed APIs in cloud environments such as Kubernetes with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will expose as managed APIs in cloud clusters in privetJet mode, where each microservice will have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,\n+deployment, scaling, and management tasks will handle by the [WSO2 -Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md) itself.\n+\n+## Configuring APIs to deploy in PrivateJet mode\n+\n+Follow the steps below to configure the PrivateJet mode for Microgateways in API Manager to deploy APIs as managed APIs in cloud clusters. (Ex: Kubernetes)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE1OTk1NQ==", "bodyText": "Obtaining a service account token?", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r458159955", "createdAt": "2020-07-21T14:52:47Z", "author": {"login": "shaniR"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, \n+which simplifies a number of complex management tasks. WSO2 API-Manager provides cloud-native API management where user can expose microservices as managed APIs in cloud environments such as Kubernetes with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will expose as managed APIs in cloud clusters in privetJet mode, where each microservice will have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,\n+deployment, scaling, and management tasks will handle by the [WSO2 -Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md) itself.\n+\n+## Configuring APIs to deploy in PrivateJet mode\n+\n+Follow the steps below to configure the PrivateJet mode for Microgateways in API Manager to deploy APIs as managed APIs in cloud clusters. (Ex: Kubernetes)\n+\n+1. Install and setup [Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). In order to expose APIs using ingress controller [deploy the k8s-api-operator in ingress mode](https://github.com/wso2/k8s-api-operator/tree/v1.1.0/scenarios/scenario-17). \n+2. Deploying cluster configurations\n+ \n+    Processes in containers inside pods are authenticated when contacting the apiserver and accessing resources. In order to regulate access to the resources need to establish the RBAC Authorization with at least permissions to, \n+    Create, Delete, Update, Get , List, Post the customresourcedefinitions, apis and configmaps.\n+\n+    i.  Create a service account\n+\n+        kubectl create serviceaccount <service-account name> -n <namespace>\n+\n+    ii. Create a clusterRole\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRole\n+        metadata:\n+          name: clusterrole-privatejet\n+        rules:\n+        - apiGroups: [\"\",\"apiextensions.k8s.io\",\"wso2.com\"]\n+          resources: [\"configmaps\",\"customresourcedefinitions\",\"apis\"]\n+          verbs: [\"get\", \"post\", \"create\", \"delete\", \"put\", \"list\",\"update\"]\n+     \n+    iii. Create a  clusterRoleBinding\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRoleBinding\n+        metadata:\n+          name: clusterrolebinding-privatejet\n+        subjects:\n+        - kind: ServiceAccount\n+          name: wso2am-privatejet # Name is case sensitive\n+          apiGroup: \"\"\n+          namespace: default\n+        roleRef:\n+          kind: ClusterRole\n+          name: clusterrole-privatejet\n+          apiGroup: rbac.authorization.k8s.io\n+                                                                                                                      \n+3. Obtaining service account token", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE2MDU4OQ==", "bodyText": "\"configuring the clusters\"?", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r458160589", "createdAt": "2020-07-21T14:53:39Z", "author": {"login": "shaniR"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, \n+which simplifies a number of complex management tasks. WSO2 API-Manager provides cloud-native API management where user can expose microservices as managed APIs in cloud environments such as Kubernetes with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will expose as managed APIs in cloud clusters in privetJet mode, where each microservice will have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,\n+deployment, scaling, and management tasks will handle by the [WSO2 -Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md) itself.\n+\n+## Configuring APIs to deploy in PrivateJet mode\n+\n+Follow the steps below to configure the PrivateJet mode for Microgateways in API Manager to deploy APIs as managed APIs in cloud clusters. (Ex: Kubernetes)\n+\n+1. Install and setup [Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). In order to expose APIs using ingress controller [deploy the k8s-api-operator in ingress mode](https://github.com/wso2/k8s-api-operator/tree/v1.1.0/scenarios/scenario-17). \n+2. Deploying cluster configurations\n+ \n+    Processes in containers inside pods are authenticated when contacting the apiserver and accessing resources. In order to regulate access to the resources need to establish the RBAC Authorization with at least permissions to, \n+    Create, Delete, Update, Get , List, Post the customresourcedefinitions, apis and configmaps.\n+\n+    i.  Create a service account\n+\n+        kubectl create serviceaccount <service-account name> -n <namespace>\n+\n+    ii. Create a clusterRole\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRole\n+        metadata:\n+          name: clusterrole-privatejet\n+        rules:\n+        - apiGroups: [\"\",\"apiextensions.k8s.io\",\"wso2.com\"]\n+          resources: [\"configmaps\",\"customresourcedefinitions\",\"apis\"]\n+          verbs: [\"get\", \"post\", \"create\", \"delete\", \"put\", \"list\",\"update\"]\n+     \n+    iii. Create a  clusterRoleBinding\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRoleBinding\n+        metadata:\n+          name: clusterrolebinding-privatejet\n+        subjects:\n+        - kind: ServiceAccount\n+          name: wso2am-privatejet # Name is case sensitive\n+          apiGroup: \"\"\n+          namespace: default\n+        roleRef:\n+          kind: ClusterRole\n+          name: clusterrole-privatejet\n+          apiGroup: rbac.authorization.k8s.io\n+                                                                                                                      \n+3. Obtaining service account token\n+\n+    First you need to get the secret name for your service account. This can be done by executing,\n+\n+        kubectl get secrets -n <serviceaccount-namespace>\n+     \n+    Then, get the service account token by executing the following command,\n+\n+        kubectl describe secrets -n <serviceaccount-namespace> <secret-namespace>\n+\n+4. Obtaining the master URL\n+\n+    In order to establish the connection with the cluster need to obtain the Master URL. this be done by executing following command.\n+    \n+        kubectl cluster-info\n+        \n+        Result:\n+        Kubernetes master is running at https://35.223.28.131\n+        GLBCDefaultBackend is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/default-http-backend:http/proxy\n+        Heapster is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/heapster/proxy\n+        KubeDNS is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n+        Metrics-server is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy\n+\n+    <html><div class=\"admonition note\">\n+      <p class=\"admonition-title\">Note</p>\n+      <p>If the APIM deployed in a kubenretes cluster Master URL and serviceaccount token are not required to configure. </p>\n+      </div>\n+    </html>\n+    \n+5. Adding configurations of clusters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE2MDkxNQ==", "bodyText": "shall we add these as sub steps?", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r458160915", "createdAt": "2020-07-21T14:54:06Z", "author": {"login": "shaniR"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, \n+which simplifies a number of complex management tasks. WSO2 API-Manager provides cloud-native API management where user can expose microservices as managed APIs in cloud environments such as Kubernetes with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will expose as managed APIs in cloud clusters in privetJet mode, where each microservice will have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,\n+deployment, scaling, and management tasks will handle by the [WSO2 -Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md) itself.\n+\n+## Configuring APIs to deploy in PrivateJet mode\n+\n+Follow the steps below to configure the PrivateJet mode for Microgateways in API Manager to deploy APIs as managed APIs in cloud clusters. (Ex: Kubernetes)\n+\n+1. Install and setup [Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). In order to expose APIs using ingress controller [deploy the k8s-api-operator in ingress mode](https://github.com/wso2/k8s-api-operator/tree/v1.1.0/scenarios/scenario-17). \n+2. Deploying cluster configurations\n+ \n+    Processes in containers inside pods are authenticated when contacting the apiserver and accessing resources. In order to regulate access to the resources need to establish the RBAC Authorization with at least permissions to, \n+    Create, Delete, Update, Get , List, Post the customresourcedefinitions, apis and configmaps.\n+\n+    i.  Create a service account\n+\n+        kubectl create serviceaccount <service-account name> -n <namespace>\n+\n+    ii. Create a clusterRole\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRole\n+        metadata:\n+          name: clusterrole-privatejet\n+        rules:\n+        - apiGroups: [\"\",\"apiextensions.k8s.io\",\"wso2.com\"]\n+          resources: [\"configmaps\",\"customresourcedefinitions\",\"apis\"]\n+          verbs: [\"get\", \"post\", \"create\", \"delete\", \"put\", \"list\",\"update\"]\n+     \n+    iii. Create a  clusterRoleBinding\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRoleBinding\n+        metadata:\n+          name: clusterrolebinding-privatejet\n+        subjects:\n+        - kind: ServiceAccount\n+          name: wso2am-privatejet # Name is case sensitive\n+          apiGroup: \"\"\n+          namespace: default\n+        roleRef:\n+          kind: ClusterRole\n+          name: clusterrole-privatejet\n+          apiGroup: rbac.authorization.k8s.io\n+                                                                                                                      \n+3. Obtaining service account token\n+\n+    First you need to get the secret name for your service account. This can be done by executing,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE2MTcxOQ==", "bodyText": "shall we say log into https://:/carbon", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r458161719", "createdAt": "2020-07-21T14:55:05Z", "author": {"login": "shaniR"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, \n+which simplifies a number of complex management tasks. WSO2 API-Manager provides cloud-native API management where user can expose microservices as managed APIs in cloud environments such as Kubernetes with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will expose as managed APIs in cloud clusters in privetJet mode, where each microservice will have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,\n+deployment, scaling, and management tasks will handle by the [WSO2 -Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md) itself.\n+\n+## Configuring APIs to deploy in PrivateJet mode\n+\n+Follow the steps below to configure the PrivateJet mode for Microgateways in API Manager to deploy APIs as managed APIs in cloud clusters. (Ex: Kubernetes)\n+\n+1. Install and setup [Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). In order to expose APIs using ingress controller [deploy the k8s-api-operator in ingress mode](https://github.com/wso2/k8s-api-operator/tree/v1.1.0/scenarios/scenario-17). \n+2. Deploying cluster configurations\n+ \n+    Processes in containers inside pods are authenticated when contacting the apiserver and accessing resources. In order to regulate access to the resources need to establish the RBAC Authorization with at least permissions to, \n+    Create, Delete, Update, Get , List, Post the customresourcedefinitions, apis and configmaps.\n+\n+    i.  Create a service account\n+\n+        kubectl create serviceaccount <service-account name> -n <namespace>\n+\n+    ii. Create a clusterRole\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRole\n+        metadata:\n+          name: clusterrole-privatejet\n+        rules:\n+        - apiGroups: [\"\",\"apiextensions.k8s.io\",\"wso2.com\"]\n+          resources: [\"configmaps\",\"customresourcedefinitions\",\"apis\"]\n+          verbs: [\"get\", \"post\", \"create\", \"delete\", \"put\", \"list\",\"update\"]\n+     \n+    iii. Create a  clusterRoleBinding\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRoleBinding\n+        metadata:\n+          name: clusterrolebinding-privatejet\n+        subjects:\n+        - kind: ServiceAccount\n+          name: wso2am-privatejet # Name is case sensitive\n+          apiGroup: \"\"\n+          namespace: default\n+        roleRef:\n+          kind: ClusterRole\n+          name: clusterrole-privatejet\n+          apiGroup: rbac.authorization.k8s.io\n+                                                                                                                      \n+3. Obtaining service account token\n+\n+    First you need to get the secret name for your service account. This can be done by executing,\n+\n+        kubectl get secrets -n <serviceaccount-namespace>\n+     \n+    Then, get the service account token by executing the following command,\n+\n+        kubectl describe secrets -n <serviceaccount-namespace> <secret-namespace>\n+\n+4. Obtaining the master URL\n+\n+    In order to establish the connection with the cluster need to obtain the Master URL. this be done by executing following command.\n+    \n+        kubectl cluster-info\n+        \n+        Result:\n+        Kubernetes master is running at https://35.223.28.131\n+        GLBCDefaultBackend is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/default-http-backend:http/proxy\n+        Heapster is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/heapster/proxy\n+        KubeDNS is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n+        Metrics-server is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy\n+\n+    <html><div class=\"admonition note\">\n+      <p class=\"admonition-title\">Note</p>\n+      <p>If the APIM deployed in a kubenretes cluster Master URL and serviceaccount token are not required to configure. </p>\n+      </div>\n+    </html>\n+    \n+5. Adding configurations of clusters.\n+\n+    For the super tenant users the cluster configurations should be added to the `<API-M_HOME>/repository/conf/deployment.toml` file as follows.\n+    \n+    ``` json tab=\"Format\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"<cloud-environment-type>\"\n+    clusterName = \"<cluster-name>\"\n+    displayName = \"<cluster-name-to_display>\"\n+    properties.Replicas = \"<number-of-replicas>\"\n+    properties.AccessURL = \"<access-URL>\"\n+    properties.MasterURL = \"<Master-URL-of-clsuter>\"\n+    properties.SAToken = \"<serviceacccount-token>\"\n+    properties.Namespace = \"<namespcae>\"\n+    ```\n+\n+    ``` json tab=\"Example\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"Kubernetes\"\n+    clusterName = \"docker-desktop\"\n+    displayName = \"cluster-1\"\n+    properties.Replicas = 1\n+    properties.AccessURL = \"mgw.ingress.wso2.com\"\n+    properties.MasterURL = \"https://kubernetes.docker.internal:6443\"\n+    properties.SAToken = \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg2UlYySEFkaVBOVG4zZ3FhWERXQUxQVUQ0bjlzOXE3dFhpbUZNZlFiRjQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3c28yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6IndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQtdG9rZW4tZGR0OTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NvMmFtLXBhdHRlcm4tMS1zdmMtYWNjb3VudCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijc3NmRmMjFkLTA3NjItNDM2Zi05ZDIwLTZlYzFkODMxYzc1NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDp3c28yOndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQifQ.YwlSgnSnwS7BNP0q0iDHsjlq_r3RhobG-SrduuEi35VXNfipPsK3UVJcCBmDKQOzKAxRG9415h2pr3cS-QsM6PR_UU2UWlXiUO-3UtSMqVY48Ek_1wdfmfCkiE7IOeua_58CV15tXtMLom0Oh27nkmWGfTHVvImQnqho4nv26BKZH4vKWgkw0HpMt73KHdN6SlVMK0cynktO5H-2A4V2rh-uL-OUXCLON_sBypVoPc9PAMxHo-bUe0SqBPiM0SiALu-0-J6dBcwbzPb5g-yUZmHmtuw3O32C304Hgfr-4Dui3X5DSKBSeqlrjjjfrvMVNug0J4JKk3bJ56h0OgujFw\"\n+    properties.Namespace = \"default\"\n+    ```\n+         \n+       Tenant users, can edit the cluster configurations included in `tenant-conf.json` file. Go to the carbon console and edit the tenant-conf.json file in `/_system/config/apimgt/applicationdata/` path.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE2MjI0Nw==", "bodyText": "unnecessary spaces before \"a new API\"", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r458162247", "createdAt": "2020-07-21T14:55:44Z", "author": {"login": "shaniR"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, \n+which simplifies a number of complex management tasks. WSO2 API-Manager provides cloud-native API management where user can expose microservices as managed APIs in cloud environments such as Kubernetes with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will expose as managed APIs in cloud clusters in privetJet mode, where each microservice will have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,\n+deployment, scaling, and management tasks will handle by the [WSO2 -Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md) itself.\n+\n+## Configuring APIs to deploy in PrivateJet mode\n+\n+Follow the steps below to configure the PrivateJet mode for Microgateways in API Manager to deploy APIs as managed APIs in cloud clusters. (Ex: Kubernetes)\n+\n+1. Install and setup [Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). In order to expose APIs using ingress controller [deploy the k8s-api-operator in ingress mode](https://github.com/wso2/k8s-api-operator/tree/v1.1.0/scenarios/scenario-17). \n+2. Deploying cluster configurations\n+ \n+    Processes in containers inside pods are authenticated when contacting the apiserver and accessing resources. In order to regulate access to the resources need to establish the RBAC Authorization with at least permissions to, \n+    Create, Delete, Update, Get , List, Post the customresourcedefinitions, apis and configmaps.\n+\n+    i.  Create a service account\n+\n+        kubectl create serviceaccount <service-account name> -n <namespace>\n+\n+    ii. Create a clusterRole\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRole\n+        metadata:\n+          name: clusterrole-privatejet\n+        rules:\n+        - apiGroups: [\"\",\"apiextensions.k8s.io\",\"wso2.com\"]\n+          resources: [\"configmaps\",\"customresourcedefinitions\",\"apis\"]\n+          verbs: [\"get\", \"post\", \"create\", \"delete\", \"put\", \"list\",\"update\"]\n+     \n+    iii. Create a  clusterRoleBinding\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRoleBinding\n+        metadata:\n+          name: clusterrolebinding-privatejet\n+        subjects:\n+        - kind: ServiceAccount\n+          name: wso2am-privatejet # Name is case sensitive\n+          apiGroup: \"\"\n+          namespace: default\n+        roleRef:\n+          kind: ClusterRole\n+          name: clusterrole-privatejet\n+          apiGroup: rbac.authorization.k8s.io\n+                                                                                                                      \n+3. Obtaining service account token\n+\n+    First you need to get the secret name for your service account. This can be done by executing,\n+\n+        kubectl get secrets -n <serviceaccount-namespace>\n+     \n+    Then, get the service account token by executing the following command,\n+\n+        kubectl describe secrets -n <serviceaccount-namespace> <secret-namespace>\n+\n+4. Obtaining the master URL\n+\n+    In order to establish the connection with the cluster need to obtain the Master URL. this be done by executing following command.\n+    \n+        kubectl cluster-info\n+        \n+        Result:\n+        Kubernetes master is running at https://35.223.28.131\n+        GLBCDefaultBackend is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/default-http-backend:http/proxy\n+        Heapster is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/heapster/proxy\n+        KubeDNS is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n+        Metrics-server is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy\n+\n+    <html><div class=\"admonition note\">\n+      <p class=\"admonition-title\">Note</p>\n+      <p>If the APIM deployed in a kubenretes cluster Master URL and serviceaccount token are not required to configure. </p>\n+      </div>\n+    </html>\n+    \n+5. Adding configurations of clusters.\n+\n+    For the super tenant users the cluster configurations should be added to the `<API-M_HOME>/repository/conf/deployment.toml` file as follows.\n+    \n+    ``` json tab=\"Format\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"<cloud-environment-type>\"\n+    clusterName = \"<cluster-name>\"\n+    displayName = \"<cluster-name-to_display>\"\n+    properties.Replicas = \"<number-of-replicas>\"\n+    properties.AccessURL = \"<access-URL>\"\n+    properties.MasterURL = \"<Master-URL-of-clsuter>\"\n+    properties.SAToken = \"<serviceacccount-token>\"\n+    properties.Namespace = \"<namespcae>\"\n+    ```\n+\n+    ``` json tab=\"Example\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"Kubernetes\"\n+    clusterName = \"docker-desktop\"\n+    displayName = \"cluster-1\"\n+    properties.Replicas = 1\n+    properties.AccessURL = \"mgw.ingress.wso2.com\"\n+    properties.MasterURL = \"https://kubernetes.docker.internal:6443\"\n+    properties.SAToken = \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg2UlYySEFkaVBOVG4zZ3FhWERXQUxQVUQ0bjlzOXE3dFhpbUZNZlFiRjQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3c28yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6IndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQtdG9rZW4tZGR0OTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NvMmFtLXBhdHRlcm4tMS1zdmMtYWNjb3VudCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijc3NmRmMjFkLTA3NjItNDM2Zi05ZDIwLTZlYzFkODMxYzc1NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDp3c28yOndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQifQ.YwlSgnSnwS7BNP0q0iDHsjlq_r3RhobG-SrduuEi35VXNfipPsK3UVJcCBmDKQOzKAxRG9415h2pr3cS-QsM6PR_UU2UWlXiUO-3UtSMqVY48Ek_1wdfmfCkiE7IOeua_58CV15tXtMLom0Oh27nkmWGfTHVvImQnqho4nv26BKZH4vKWgkw0HpMt73KHdN6SlVMK0cynktO5H-2A4V2rh-uL-OUXCLON_sBypVoPc9PAMxHo-bUe0SqBPiM0SiALu-0-J6dBcwbzPb5g-yUZmHmtuw3O32C304Hgfr-4Dui3X5DSKBSeqlrjjjfrvMVNug0J4JKk3bJ56h0OgujFw\"\n+    properties.Namespace = \"default\"\n+    ```\n+         \n+       Tenant users, can edit the cluster configurations included in `tenant-conf.json` file. Go to the carbon console and edit the tenant-conf.json file in `/_system/config/apimgt/applicationdata/` path.\n+       \n+    ``` json tab=\"Format\"\n+    \"ContainerMgt\": [\n+      {\n+        \"Type\": \"Kubernetes\",\n+        \"ContainerMgtInfo\": [\n+        {\n+          \"ClusterName\": \"\",\n+          \"DisplayName\": \"\",\n+          \"Properties\": {\n+            \"MasterURL\": \"\",\n+            \"AccessURL\": \"\",\n+            \"SAToken\": \"\",\n+            \"Namespace\": \"default\",\n+            \"Replicas\": 1,\n+            \"BasicSecurityCustomResourceName\": \"\",\n+            \"OauthSecurityCustomResourceName\": \"\",\n+            \"JWTSecurityCustomResourceName\": \"\"\n+            }\n+          }\n+        ]\n+      }\n+    ]\n+    ```\n+    \n+    ``` json tab=\"Example\"\n+    \"ContainerMgt\": [\n+      {\n+        \"Type\": \"Kubernetes\",\n+        \"ContainerMgtInfo\": [\n+         {\n+           \"ClusterName\": \"docker-desktop\",\n+           \"DisplayName\": \"cluster-1\",\n+           \"Properties\": {\n+           \"MasterURL\": \"https://kubernetes.docker.internal:6443\",\n+           \"AccessURL\": \"mgw.ingress.wso2.com\",\n+           \"SAToken\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg2UlYySEFkaVBOVG4zZ3FhWERXQUxQVUQ0bjlzOXE3dFhpbUZNZlFiRjQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3c28yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6IndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQtdG9rZW4tZGR0OTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NvMmFtLXBhdHRlcm4tMS1zdmMtYWNjb3VudCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijc3NmRmMjFkLTA3NjItNDM2Zi05ZDIwLTZlYzFkODMxYzc1NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDp3c28yOndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQifQ.YwlSgnSnwS7BNP0q0iDHsjlq_r3RhobG-SrduuEi35VXNfipPsK3UVJcCBmDKQOzKAxRG9415h2pr3cS-QsM6PR_UU2UWlXiUO-3UtSMqVY48Ek_1wdfmfCkiE7IOeua_58CV15tXtMLom0Oh27nkmWGfTHVvImQnqho4nv26BKZH4vKWgkw0HpMt73KHdN6SlVMK0cynktO5H-2A4V2rh-uL-OUXCLON_sBypVoPc9PAMxHo-bUe0SqBPiM0SiALu-0-J6dBcwbzPb5g-yUZmHmtuw3O32C304Hgfr-4Dui3X5DSKBSeqlrjjjfrvMVNug0J4JKk3bJ56h0OgujFw\",\n+           \"Namespace\": \"default\",\n+           \"Replicas\": 1,\n+           \"BasicSecurityCustomResourceName\": \"\",\n+           \"OauthSecurityCustomResourceName\": \"\",\n+           \"JWTSecurityCustomResourceName\": \"\"\n+            }\n+          }\n+        ]\n+      }\n+    ]\n+    ```\n+ \n+     <html><div class=\"admonition note\">\n+        <p class=\"admonition-title\">Note</p>\n+        <p> Super tenant users can customize the container management implementations if required. Then customize classes should be added to the `<API-M_HOME>/repository/conf/deployment.toml` file as follows. </p>   \n+        \n+    ``` json tab=\"Format\"\n+    [ContainerMgtConfig]\n+    <Environment-type> = \"<class-name>\"\n+    ```  \n+   \n+    ``` json tab=\"Example\"\n+    [ContainerMgtConfig]\n+    Kubernetes = \"org.wso2.carbon.apimgt.impl.containermgt.K8sManager_CustomClass\"\n+    ```\n+  \n+      </div>\n+      </html>\n+         \n+6. Start the server and create an API in publisher\n+    \n+    After setting up configurations go to the <API-M-HOME>/bin directory and start the server. Then Sign in to the WSO2 API Publisher and create", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE2MjQwMw==", "bodyText": "Shall we point to the document on how to create an API?", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r458162403", "createdAt": "2020-07-21T14:55:58Z", "author": {"login": "shaniR"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, \n+which simplifies a number of complex management tasks. WSO2 API-Manager provides cloud-native API management where user can expose microservices as managed APIs in cloud environments such as Kubernetes with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will expose as managed APIs in cloud clusters in privetJet mode, where each microservice will have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,\n+deployment, scaling, and management tasks will handle by the [WSO2 -Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md) itself.\n+\n+## Configuring APIs to deploy in PrivateJet mode\n+\n+Follow the steps below to configure the PrivateJet mode for Microgateways in API Manager to deploy APIs as managed APIs in cloud clusters. (Ex: Kubernetes)\n+\n+1. Install and setup [Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). In order to expose APIs using ingress controller [deploy the k8s-api-operator in ingress mode](https://github.com/wso2/k8s-api-operator/tree/v1.1.0/scenarios/scenario-17). \n+2. Deploying cluster configurations\n+ \n+    Processes in containers inside pods are authenticated when contacting the apiserver and accessing resources. In order to regulate access to the resources need to establish the RBAC Authorization with at least permissions to, \n+    Create, Delete, Update, Get , List, Post the customresourcedefinitions, apis and configmaps.\n+\n+    i.  Create a service account\n+\n+        kubectl create serviceaccount <service-account name> -n <namespace>\n+\n+    ii. Create a clusterRole\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRole\n+        metadata:\n+          name: clusterrole-privatejet\n+        rules:\n+        - apiGroups: [\"\",\"apiextensions.k8s.io\",\"wso2.com\"]\n+          resources: [\"configmaps\",\"customresourcedefinitions\",\"apis\"]\n+          verbs: [\"get\", \"post\", \"create\", \"delete\", \"put\", \"list\",\"update\"]\n+     \n+    iii. Create a  clusterRoleBinding\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRoleBinding\n+        metadata:\n+          name: clusterrolebinding-privatejet\n+        subjects:\n+        - kind: ServiceAccount\n+          name: wso2am-privatejet # Name is case sensitive\n+          apiGroup: \"\"\n+          namespace: default\n+        roleRef:\n+          kind: ClusterRole\n+          name: clusterrole-privatejet\n+          apiGroup: rbac.authorization.k8s.io\n+                                                                                                                      \n+3. Obtaining service account token\n+\n+    First you need to get the secret name for your service account. This can be done by executing,\n+\n+        kubectl get secrets -n <serviceaccount-namespace>\n+     \n+    Then, get the service account token by executing the following command,\n+\n+        kubectl describe secrets -n <serviceaccount-namespace> <secret-namespace>\n+\n+4. Obtaining the master URL\n+\n+    In order to establish the connection with the cluster need to obtain the Master URL. this be done by executing following command.\n+    \n+        kubectl cluster-info\n+        \n+        Result:\n+        Kubernetes master is running at https://35.223.28.131\n+        GLBCDefaultBackend is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/default-http-backend:http/proxy\n+        Heapster is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/heapster/proxy\n+        KubeDNS is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n+        Metrics-server is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy\n+\n+    <html><div class=\"admonition note\">\n+      <p class=\"admonition-title\">Note</p>\n+      <p>If the APIM deployed in a kubenretes cluster Master URL and serviceaccount token are not required to configure. </p>\n+      </div>\n+    </html>\n+    \n+5. Adding configurations of clusters.\n+\n+    For the super tenant users the cluster configurations should be added to the `<API-M_HOME>/repository/conf/deployment.toml` file as follows.\n+    \n+    ``` json tab=\"Format\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"<cloud-environment-type>\"\n+    clusterName = \"<cluster-name>\"\n+    displayName = \"<cluster-name-to_display>\"\n+    properties.Replicas = \"<number-of-replicas>\"\n+    properties.AccessURL = \"<access-URL>\"\n+    properties.MasterURL = \"<Master-URL-of-clsuter>\"\n+    properties.SAToken = \"<serviceacccount-token>\"\n+    properties.Namespace = \"<namespcae>\"\n+    ```\n+\n+    ``` json tab=\"Example\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"Kubernetes\"\n+    clusterName = \"docker-desktop\"\n+    displayName = \"cluster-1\"\n+    properties.Replicas = 1\n+    properties.AccessURL = \"mgw.ingress.wso2.com\"\n+    properties.MasterURL = \"https://kubernetes.docker.internal:6443\"\n+    properties.SAToken = \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg2UlYySEFkaVBOVG4zZ3FhWERXQUxQVUQ0bjlzOXE3dFhpbUZNZlFiRjQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3c28yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6IndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQtdG9rZW4tZGR0OTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NvMmFtLXBhdHRlcm4tMS1zdmMtYWNjb3VudCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijc3NmRmMjFkLTA3NjItNDM2Zi05ZDIwLTZlYzFkODMxYzc1NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDp3c28yOndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQifQ.YwlSgnSnwS7BNP0q0iDHsjlq_r3RhobG-SrduuEi35VXNfipPsK3UVJcCBmDKQOzKAxRG9415h2pr3cS-QsM6PR_UU2UWlXiUO-3UtSMqVY48Ek_1wdfmfCkiE7IOeua_58CV15tXtMLom0Oh27nkmWGfTHVvImQnqho4nv26BKZH4vKWgkw0HpMt73KHdN6SlVMK0cynktO5H-2A4V2rh-uL-OUXCLON_sBypVoPc9PAMxHo-bUe0SqBPiM0SiALu-0-J6dBcwbzPb5g-yUZmHmtuw3O32C304Hgfr-4Dui3X5DSKBSeqlrjjjfrvMVNug0J4JKk3bJ56h0OgujFw\"\n+    properties.Namespace = \"default\"\n+    ```\n+         \n+       Tenant users, can edit the cluster configurations included in `tenant-conf.json` file. Go to the carbon console and edit the tenant-conf.json file in `/_system/config/apimgt/applicationdata/` path.\n+       \n+    ``` json tab=\"Format\"\n+    \"ContainerMgt\": [\n+      {\n+        \"Type\": \"Kubernetes\",\n+        \"ContainerMgtInfo\": [\n+        {\n+          \"ClusterName\": \"\",\n+          \"DisplayName\": \"\",\n+          \"Properties\": {\n+            \"MasterURL\": \"\",\n+            \"AccessURL\": \"\",\n+            \"SAToken\": \"\",\n+            \"Namespace\": \"default\",\n+            \"Replicas\": 1,\n+            \"BasicSecurityCustomResourceName\": \"\",\n+            \"OauthSecurityCustomResourceName\": \"\",\n+            \"JWTSecurityCustomResourceName\": \"\"\n+            }\n+          }\n+        ]\n+      }\n+    ]\n+    ```\n+    \n+    ``` json tab=\"Example\"\n+    \"ContainerMgt\": [\n+      {\n+        \"Type\": \"Kubernetes\",\n+        \"ContainerMgtInfo\": [\n+         {\n+           \"ClusterName\": \"docker-desktop\",\n+           \"DisplayName\": \"cluster-1\",\n+           \"Properties\": {\n+           \"MasterURL\": \"https://kubernetes.docker.internal:6443\",\n+           \"AccessURL\": \"mgw.ingress.wso2.com\",\n+           \"SAToken\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg2UlYySEFkaVBOVG4zZ3FhWERXQUxQVUQ0bjlzOXE3dFhpbUZNZlFiRjQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3c28yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6IndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQtdG9rZW4tZGR0OTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NvMmFtLXBhdHRlcm4tMS1zdmMtYWNjb3VudCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijc3NmRmMjFkLTA3NjItNDM2Zi05ZDIwLTZlYzFkODMxYzc1NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDp3c28yOndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQifQ.YwlSgnSnwS7BNP0q0iDHsjlq_r3RhobG-SrduuEi35VXNfipPsK3UVJcCBmDKQOzKAxRG9415h2pr3cS-QsM6PR_UU2UWlXiUO-3UtSMqVY48Ek_1wdfmfCkiE7IOeua_58CV15tXtMLom0Oh27nkmWGfTHVvImQnqho4nv26BKZH4vKWgkw0HpMt73KHdN6SlVMK0cynktO5H-2A4V2rh-uL-OUXCLON_sBypVoPc9PAMxHo-bUe0SqBPiM0SiALu-0-J6dBcwbzPb5g-yUZmHmtuw3O32C304Hgfr-4Dui3X5DSKBSeqlrjjjfrvMVNug0J4JKk3bJ56h0OgujFw\",\n+           \"Namespace\": \"default\",\n+           \"Replicas\": 1,\n+           \"BasicSecurityCustomResourceName\": \"\",\n+           \"OauthSecurityCustomResourceName\": \"\",\n+           \"JWTSecurityCustomResourceName\": \"\"\n+            }\n+          }\n+        ]\n+      }\n+    ]\n+    ```\n+ \n+     <html><div class=\"admonition note\">\n+        <p class=\"admonition-title\">Note</p>\n+        <p> Super tenant users can customize the container management implementations if required. Then customize classes should be added to the `<API-M_HOME>/repository/conf/deployment.toml` file as follows. </p>   \n+        \n+    ``` json tab=\"Format\"\n+    [ContainerMgtConfig]\n+    <Environment-type> = \"<class-name>\"\n+    ```  \n+   \n+    ``` json tab=\"Example\"\n+    [ContainerMgtConfig]\n+    Kubernetes = \"org.wso2.carbon.apimgt.impl.containermgt.K8sManager_CustomClass\"\n+    ```\n+  \n+      </div>\n+      </html>\n+         \n+6. Start the server and create an API in publisher\n+    \n+    After setting up configurations go to the <API-M-HOME>/bin directory and start the server. Then Sign in to the WSO2 API Publisher and create", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE2MjI0Nw=="}, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE2Mjg4Mg==", "bodyText": "how do you navigate to the environment tab? specify the navigation", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r458162882", "createdAt": "2020-07-21T14:56:32Z", "author": {"login": "shaniR"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, \n+which simplifies a number of complex management tasks. WSO2 API-Manager provides cloud-native API management where user can expose microservices as managed APIs in cloud environments such as Kubernetes with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will expose as managed APIs in cloud clusters in privetJet mode, where each microservice will have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,\n+deployment, scaling, and management tasks will handle by the [WSO2 -Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md) itself.\n+\n+## Configuring APIs to deploy in PrivateJet mode\n+\n+Follow the steps below to configure the PrivateJet mode for Microgateways in API Manager to deploy APIs as managed APIs in cloud clusters. (Ex: Kubernetes)\n+\n+1. Install and setup [Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). In order to expose APIs using ingress controller [deploy the k8s-api-operator in ingress mode](https://github.com/wso2/k8s-api-operator/tree/v1.1.0/scenarios/scenario-17). \n+2. Deploying cluster configurations\n+ \n+    Processes in containers inside pods are authenticated when contacting the apiserver and accessing resources. In order to regulate access to the resources need to establish the RBAC Authorization with at least permissions to, \n+    Create, Delete, Update, Get , List, Post the customresourcedefinitions, apis and configmaps.\n+\n+    i.  Create a service account\n+\n+        kubectl create serviceaccount <service-account name> -n <namespace>\n+\n+    ii. Create a clusterRole\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRole\n+        metadata:\n+          name: clusterrole-privatejet\n+        rules:\n+        - apiGroups: [\"\",\"apiextensions.k8s.io\",\"wso2.com\"]\n+          resources: [\"configmaps\",\"customresourcedefinitions\",\"apis\"]\n+          verbs: [\"get\", \"post\", \"create\", \"delete\", \"put\", \"list\",\"update\"]\n+     \n+    iii. Create a  clusterRoleBinding\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRoleBinding\n+        metadata:\n+          name: clusterrolebinding-privatejet\n+        subjects:\n+        - kind: ServiceAccount\n+          name: wso2am-privatejet # Name is case sensitive\n+          apiGroup: \"\"\n+          namespace: default\n+        roleRef:\n+          kind: ClusterRole\n+          name: clusterrole-privatejet\n+          apiGroup: rbac.authorization.k8s.io\n+                                                                                                                      \n+3. Obtaining service account token\n+\n+    First you need to get the secret name for your service account. This can be done by executing,\n+\n+        kubectl get secrets -n <serviceaccount-namespace>\n+     \n+    Then, get the service account token by executing the following command,\n+\n+        kubectl describe secrets -n <serviceaccount-namespace> <secret-namespace>\n+\n+4. Obtaining the master URL\n+\n+    In order to establish the connection with the cluster need to obtain the Master URL. this be done by executing following command.\n+    \n+        kubectl cluster-info\n+        \n+        Result:\n+        Kubernetes master is running at https://35.223.28.131\n+        GLBCDefaultBackend is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/default-http-backend:http/proxy\n+        Heapster is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/heapster/proxy\n+        KubeDNS is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n+        Metrics-server is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy\n+\n+    <html><div class=\"admonition note\">\n+      <p class=\"admonition-title\">Note</p>\n+      <p>If the APIM deployed in a kubenretes cluster Master URL and serviceaccount token are not required to configure. </p>\n+      </div>\n+    </html>\n+    \n+5. Adding configurations of clusters.\n+\n+    For the super tenant users the cluster configurations should be added to the `<API-M_HOME>/repository/conf/deployment.toml` file as follows.\n+    \n+    ``` json tab=\"Format\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"<cloud-environment-type>\"\n+    clusterName = \"<cluster-name>\"\n+    displayName = \"<cluster-name-to_display>\"\n+    properties.Replicas = \"<number-of-replicas>\"\n+    properties.AccessURL = \"<access-URL>\"\n+    properties.MasterURL = \"<Master-URL-of-clsuter>\"\n+    properties.SAToken = \"<serviceacccount-token>\"\n+    properties.Namespace = \"<namespcae>\"\n+    ```\n+\n+    ``` json tab=\"Example\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"Kubernetes\"\n+    clusterName = \"docker-desktop\"\n+    displayName = \"cluster-1\"\n+    properties.Replicas = 1\n+    properties.AccessURL = \"mgw.ingress.wso2.com\"\n+    properties.MasterURL = \"https://kubernetes.docker.internal:6443\"\n+    properties.SAToken = \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg2UlYySEFkaVBOVG4zZ3FhWERXQUxQVUQ0bjlzOXE3dFhpbUZNZlFiRjQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3c28yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6IndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQtdG9rZW4tZGR0OTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NvMmFtLXBhdHRlcm4tMS1zdmMtYWNjb3VudCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijc3NmRmMjFkLTA3NjItNDM2Zi05ZDIwLTZlYzFkODMxYzc1NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDp3c28yOndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQifQ.YwlSgnSnwS7BNP0q0iDHsjlq_r3RhobG-SrduuEi35VXNfipPsK3UVJcCBmDKQOzKAxRG9415h2pr3cS-QsM6PR_UU2UWlXiUO-3UtSMqVY48Ek_1wdfmfCkiE7IOeua_58CV15tXtMLom0Oh27nkmWGfTHVvImQnqho4nv26BKZH4vKWgkw0HpMt73KHdN6SlVMK0cynktO5H-2A4V2rh-uL-OUXCLON_sBypVoPc9PAMxHo-bUe0SqBPiM0SiALu-0-J6dBcwbzPb5g-yUZmHmtuw3O32C304Hgfr-4Dui3X5DSKBSeqlrjjjfrvMVNug0J4JKk3bJ56h0OgujFw\"\n+    properties.Namespace = \"default\"\n+    ```\n+         \n+       Tenant users, can edit the cluster configurations included in `tenant-conf.json` file. Go to the carbon console and edit the tenant-conf.json file in `/_system/config/apimgt/applicationdata/` path.\n+       \n+    ``` json tab=\"Format\"\n+    \"ContainerMgt\": [\n+      {\n+        \"Type\": \"Kubernetes\",\n+        \"ContainerMgtInfo\": [\n+        {\n+          \"ClusterName\": \"\",\n+          \"DisplayName\": \"\",\n+          \"Properties\": {\n+            \"MasterURL\": \"\",\n+            \"AccessURL\": \"\",\n+            \"SAToken\": \"\",\n+            \"Namespace\": \"default\",\n+            \"Replicas\": 1,\n+            \"BasicSecurityCustomResourceName\": \"\",\n+            \"OauthSecurityCustomResourceName\": \"\",\n+            \"JWTSecurityCustomResourceName\": \"\"\n+            }\n+          }\n+        ]\n+      }\n+    ]\n+    ```\n+    \n+    ``` json tab=\"Example\"\n+    \"ContainerMgt\": [\n+      {\n+        \"Type\": \"Kubernetes\",\n+        \"ContainerMgtInfo\": [\n+         {\n+           \"ClusterName\": \"docker-desktop\",\n+           \"DisplayName\": \"cluster-1\",\n+           \"Properties\": {\n+           \"MasterURL\": \"https://kubernetes.docker.internal:6443\",\n+           \"AccessURL\": \"mgw.ingress.wso2.com\",\n+           \"SAToken\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg2UlYySEFkaVBOVG4zZ3FhWERXQUxQVUQ0bjlzOXE3dFhpbUZNZlFiRjQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3c28yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6IndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQtdG9rZW4tZGR0OTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NvMmFtLXBhdHRlcm4tMS1zdmMtYWNjb3VudCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijc3NmRmMjFkLTA3NjItNDM2Zi05ZDIwLTZlYzFkODMxYzc1NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDp3c28yOndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQifQ.YwlSgnSnwS7BNP0q0iDHsjlq_r3RhobG-SrduuEi35VXNfipPsK3UVJcCBmDKQOzKAxRG9415h2pr3cS-QsM6PR_UU2UWlXiUO-3UtSMqVY48Ek_1wdfmfCkiE7IOeua_58CV15tXtMLom0Oh27nkmWGfTHVvImQnqho4nv26BKZH4vKWgkw0HpMt73KHdN6SlVMK0cynktO5H-2A4V2rh-uL-OUXCLON_sBypVoPc9PAMxHo-bUe0SqBPiM0SiALu-0-J6dBcwbzPb5g-yUZmHmtuw3O32C304Hgfr-4Dui3X5DSKBSeqlrjjjfrvMVNug0J4JKk3bJ56h0OgujFw\",\n+           \"Namespace\": \"default\",\n+           \"Replicas\": 1,\n+           \"BasicSecurityCustomResourceName\": \"\",\n+           \"OauthSecurityCustomResourceName\": \"\",\n+           \"JWTSecurityCustomResourceName\": \"\"\n+            }\n+          }\n+        ]\n+      }\n+    ]\n+    ```\n+ \n+     <html><div class=\"admonition note\">\n+        <p class=\"admonition-title\">Note</p>\n+        <p> Super tenant users can customize the container management implementations if required. Then customize classes should be added to the `<API-M_HOME>/repository/conf/deployment.toml` file as follows. </p>   \n+        \n+    ``` json tab=\"Format\"\n+    [ContainerMgtConfig]\n+    <Environment-type> = \"<class-name>\"\n+    ```  \n+   \n+    ``` json tab=\"Example\"\n+    [ContainerMgtConfig]\n+    Kubernetes = \"org.wso2.carbon.apimgt.impl.containermgt.K8sManager_CustomClass\"\n+    ```\n+  \n+      </div>\n+      </html>\n+         \n+6. Start the server and create an API in publisher\n+    \n+    After setting up configurations go to the <API-M-HOME>/bin directory and start the server. Then Sign in to the WSO2 API Publisher and create\n+   a new API.\n+    \n+7. Select the clusters from envioranment tab\n+\n+    Navigate to the environment page and select the clusters to deploy the API.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 182}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE2MzA5NA==", "bodyText": "same as above,", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r458163094", "createdAt": "2020-07-21T14:56:48Z", "author": {"login": "shaniR"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, \n+which simplifies a number of complex management tasks. WSO2 API-Manager provides cloud-native API management where user can expose microservices as managed APIs in cloud environments such as Kubernetes with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will expose as managed APIs in cloud clusters in privetJet mode, where each microservice will have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,\n+deployment, scaling, and management tasks will handle by the [WSO2 -Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md) itself.\n+\n+## Configuring APIs to deploy in PrivateJet mode\n+\n+Follow the steps below to configure the PrivateJet mode for Microgateways in API Manager to deploy APIs as managed APIs in cloud clusters. (Ex: Kubernetes)\n+\n+1. Install and setup [Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). In order to expose APIs using ingress controller [deploy the k8s-api-operator in ingress mode](https://github.com/wso2/k8s-api-operator/tree/v1.1.0/scenarios/scenario-17). \n+2. Deploying cluster configurations\n+ \n+    Processes in containers inside pods are authenticated when contacting the apiserver and accessing resources. In order to regulate access to the resources need to establish the RBAC Authorization with at least permissions to, \n+    Create, Delete, Update, Get , List, Post the customresourcedefinitions, apis and configmaps.\n+\n+    i.  Create a service account\n+\n+        kubectl create serviceaccount <service-account name> -n <namespace>\n+\n+    ii. Create a clusterRole\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRole\n+        metadata:\n+          name: clusterrole-privatejet\n+        rules:\n+        - apiGroups: [\"\",\"apiextensions.k8s.io\",\"wso2.com\"]\n+          resources: [\"configmaps\",\"customresourcedefinitions\",\"apis\"]\n+          verbs: [\"get\", \"post\", \"create\", \"delete\", \"put\", \"list\",\"update\"]\n+     \n+    iii. Create a  clusterRoleBinding\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRoleBinding\n+        metadata:\n+          name: clusterrolebinding-privatejet\n+        subjects:\n+        - kind: ServiceAccount\n+          name: wso2am-privatejet # Name is case sensitive\n+          apiGroup: \"\"\n+          namespace: default\n+        roleRef:\n+          kind: ClusterRole\n+          name: clusterrole-privatejet\n+          apiGroup: rbac.authorization.k8s.io\n+                                                                                                                      \n+3. Obtaining service account token\n+\n+    First you need to get the secret name for your service account. This can be done by executing,\n+\n+        kubectl get secrets -n <serviceaccount-namespace>\n+     \n+    Then, get the service account token by executing the following command,\n+\n+        kubectl describe secrets -n <serviceaccount-namespace> <secret-namespace>\n+\n+4. Obtaining the master URL\n+\n+    In order to establish the connection with the cluster need to obtain the Master URL. this be done by executing following command.\n+    \n+        kubectl cluster-info\n+        \n+        Result:\n+        Kubernetes master is running at https://35.223.28.131\n+        GLBCDefaultBackend is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/default-http-backend:http/proxy\n+        Heapster is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/heapster/proxy\n+        KubeDNS is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n+        Metrics-server is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy\n+\n+    <html><div class=\"admonition note\">\n+      <p class=\"admonition-title\">Note</p>\n+      <p>If the APIM deployed in a kubenretes cluster Master URL and serviceaccount token are not required to configure. </p>\n+      </div>\n+    </html>\n+    \n+5. Adding configurations of clusters.\n+\n+    For the super tenant users the cluster configurations should be added to the `<API-M_HOME>/repository/conf/deployment.toml` file as follows.\n+    \n+    ``` json tab=\"Format\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"<cloud-environment-type>\"\n+    clusterName = \"<cluster-name>\"\n+    displayName = \"<cluster-name-to_display>\"\n+    properties.Replicas = \"<number-of-replicas>\"\n+    properties.AccessURL = \"<access-URL>\"\n+    properties.MasterURL = \"<Master-URL-of-clsuter>\"\n+    properties.SAToken = \"<serviceacccount-token>\"\n+    properties.Namespace = \"<namespcae>\"\n+    ```\n+\n+    ``` json tab=\"Example\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"Kubernetes\"\n+    clusterName = \"docker-desktop\"\n+    displayName = \"cluster-1\"\n+    properties.Replicas = 1\n+    properties.AccessURL = \"mgw.ingress.wso2.com\"\n+    properties.MasterURL = \"https://kubernetes.docker.internal:6443\"\n+    properties.SAToken = \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg2UlYySEFkaVBOVG4zZ3FhWERXQUxQVUQ0bjlzOXE3dFhpbUZNZlFiRjQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3c28yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6IndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQtdG9rZW4tZGR0OTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NvMmFtLXBhdHRlcm4tMS1zdmMtYWNjb3VudCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijc3NmRmMjFkLTA3NjItNDM2Zi05ZDIwLTZlYzFkODMxYzc1NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDp3c28yOndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQifQ.YwlSgnSnwS7BNP0q0iDHsjlq_r3RhobG-SrduuEi35VXNfipPsK3UVJcCBmDKQOzKAxRG9415h2pr3cS-QsM6PR_UU2UWlXiUO-3UtSMqVY48Ek_1wdfmfCkiE7IOeua_58CV15tXtMLom0Oh27nkmWGfTHVvImQnqho4nv26BKZH4vKWgkw0HpMt73KHdN6SlVMK0cynktO5H-2A4V2rh-uL-OUXCLON_sBypVoPc9PAMxHo-bUe0SqBPiM0SiALu-0-J6dBcwbzPb5g-yUZmHmtuw3O32C304Hgfr-4Dui3X5DSKBSeqlrjjjfrvMVNug0J4JKk3bJ56h0OgujFw\"\n+    properties.Namespace = \"default\"\n+    ```\n+         \n+       Tenant users, can edit the cluster configurations included in `tenant-conf.json` file. Go to the carbon console and edit the tenant-conf.json file in `/_system/config/apimgt/applicationdata/` path.\n+       \n+    ``` json tab=\"Format\"\n+    \"ContainerMgt\": [\n+      {\n+        \"Type\": \"Kubernetes\",\n+        \"ContainerMgtInfo\": [\n+        {\n+          \"ClusterName\": \"\",\n+          \"DisplayName\": \"\",\n+          \"Properties\": {\n+            \"MasterURL\": \"\",\n+            \"AccessURL\": \"\",\n+            \"SAToken\": \"\",\n+            \"Namespace\": \"default\",\n+            \"Replicas\": 1,\n+            \"BasicSecurityCustomResourceName\": \"\",\n+            \"OauthSecurityCustomResourceName\": \"\",\n+            \"JWTSecurityCustomResourceName\": \"\"\n+            }\n+          }\n+        ]\n+      }\n+    ]\n+    ```\n+    \n+    ``` json tab=\"Example\"\n+    \"ContainerMgt\": [\n+      {\n+        \"Type\": \"Kubernetes\",\n+        \"ContainerMgtInfo\": [\n+         {\n+           \"ClusterName\": \"docker-desktop\",\n+           \"DisplayName\": \"cluster-1\",\n+           \"Properties\": {\n+           \"MasterURL\": \"https://kubernetes.docker.internal:6443\",\n+           \"AccessURL\": \"mgw.ingress.wso2.com\",\n+           \"SAToken\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg2UlYySEFkaVBOVG4zZ3FhWERXQUxQVUQ0bjlzOXE3dFhpbUZNZlFiRjQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3c28yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6IndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQtdG9rZW4tZGR0OTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NvMmFtLXBhdHRlcm4tMS1zdmMtYWNjb3VudCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijc3NmRmMjFkLTA3NjItNDM2Zi05ZDIwLTZlYzFkODMxYzc1NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDp3c28yOndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQifQ.YwlSgnSnwS7BNP0q0iDHsjlq_r3RhobG-SrduuEi35VXNfipPsK3UVJcCBmDKQOzKAxRG9415h2pr3cS-QsM6PR_UU2UWlXiUO-3UtSMqVY48Ek_1wdfmfCkiE7IOeua_58CV15tXtMLom0Oh27nkmWGfTHVvImQnqho4nv26BKZH4vKWgkw0HpMt73KHdN6SlVMK0cynktO5H-2A4V2rh-uL-OUXCLON_sBypVoPc9PAMxHo-bUe0SqBPiM0SiALu-0-J6dBcwbzPb5g-yUZmHmtuw3O32C304Hgfr-4Dui3X5DSKBSeqlrjjjfrvMVNug0J4JKk3bJ56h0OgujFw\",\n+           \"Namespace\": \"default\",\n+           \"Replicas\": 1,\n+           \"BasicSecurityCustomResourceName\": \"\",\n+           \"OauthSecurityCustomResourceName\": \"\",\n+           \"JWTSecurityCustomResourceName\": \"\"\n+            }\n+          }\n+        ]\n+      }\n+    ]\n+    ```\n+ \n+     <html><div class=\"admonition note\">\n+        <p class=\"admonition-title\">Note</p>\n+        <p> Super tenant users can customize the container management implementations if required. Then customize classes should be added to the `<API-M_HOME>/repository/conf/deployment.toml` file as follows. </p>   \n+        \n+    ``` json tab=\"Format\"\n+    [ContainerMgtConfig]\n+    <Environment-type> = \"<class-name>\"\n+    ```  \n+   \n+    ``` json tab=\"Example\"\n+    [ContainerMgtConfig]\n+    Kubernetes = \"org.wso2.carbon.apimgt.impl.containermgt.K8sManager_CustomClass\"\n+    ```\n+  \n+      </div>\n+      </html>\n+         \n+6. Start the server and create an API in publisher\n+    \n+    After setting up configurations go to the <API-M-HOME>/bin directory and start the server. Then Sign in to the WSO2 API Publisher and create\n+   a new API.\n+    \n+7. Select the clusters from envioranment tab\n+\n+    Navigate to the environment page and select the clusters to deploy the API.\n+    \n+     ![Environments]({{base_path}}/assets/img/learn/privatejet-mode/environment.png)\n+    \n+8. Go to lifecycle tab and publish the API\n+\n+    Navigate to the lifecycle page and publish the API. This will expose microservices as managed APIs in selected clusters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE2MzMzOQ==", "bodyText": "add the dev portal URL, or ask to clikc view in Dev Portal", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r458163339", "createdAt": "2020-07-21T14:57:06Z", "author": {"login": "shaniR"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, \n+which simplifies a number of complex management tasks. WSO2 API-Manager provides cloud-native API management where user can expose microservices as managed APIs in cloud environments such as Kubernetes with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will expose as managed APIs in cloud clusters in privetJet mode, where each microservice will have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,\n+deployment, scaling, and management tasks will handle by the [WSO2 -Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md) itself.\n+\n+## Configuring APIs to deploy in PrivateJet mode\n+\n+Follow the steps below to configure the PrivateJet mode for Microgateways in API Manager to deploy APIs as managed APIs in cloud clusters. (Ex: Kubernetes)\n+\n+1. Install and setup [Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). In order to expose APIs using ingress controller [deploy the k8s-api-operator in ingress mode](https://github.com/wso2/k8s-api-operator/tree/v1.1.0/scenarios/scenario-17). \n+2. Deploying cluster configurations\n+ \n+    Processes in containers inside pods are authenticated when contacting the apiserver and accessing resources. In order to regulate access to the resources need to establish the RBAC Authorization with at least permissions to, \n+    Create, Delete, Update, Get , List, Post the customresourcedefinitions, apis and configmaps.\n+\n+    i.  Create a service account\n+\n+        kubectl create serviceaccount <service-account name> -n <namespace>\n+\n+    ii. Create a clusterRole\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRole\n+        metadata:\n+          name: clusterrole-privatejet\n+        rules:\n+        - apiGroups: [\"\",\"apiextensions.k8s.io\",\"wso2.com\"]\n+          resources: [\"configmaps\",\"customresourcedefinitions\",\"apis\"]\n+          verbs: [\"get\", \"post\", \"create\", \"delete\", \"put\", \"list\",\"update\"]\n+     \n+    iii. Create a  clusterRoleBinding\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRoleBinding\n+        metadata:\n+          name: clusterrolebinding-privatejet\n+        subjects:\n+        - kind: ServiceAccount\n+          name: wso2am-privatejet # Name is case sensitive\n+          apiGroup: \"\"\n+          namespace: default\n+        roleRef:\n+          kind: ClusterRole\n+          name: clusterrole-privatejet\n+          apiGroup: rbac.authorization.k8s.io\n+                                                                                                                      \n+3. Obtaining service account token\n+\n+    First you need to get the secret name for your service account. This can be done by executing,\n+\n+        kubectl get secrets -n <serviceaccount-namespace>\n+     \n+    Then, get the service account token by executing the following command,\n+\n+        kubectl describe secrets -n <serviceaccount-namespace> <secret-namespace>\n+\n+4. Obtaining the master URL\n+\n+    In order to establish the connection with the cluster need to obtain the Master URL. this be done by executing following command.\n+    \n+        kubectl cluster-info\n+        \n+        Result:\n+        Kubernetes master is running at https://35.223.28.131\n+        GLBCDefaultBackend is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/default-http-backend:http/proxy\n+        Heapster is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/heapster/proxy\n+        KubeDNS is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n+        Metrics-server is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy\n+\n+    <html><div class=\"admonition note\">\n+      <p class=\"admonition-title\">Note</p>\n+      <p>If the APIM deployed in a kubenretes cluster Master URL and serviceaccount token are not required to configure. </p>\n+      </div>\n+    </html>\n+    \n+5. Adding configurations of clusters.\n+\n+    For the super tenant users the cluster configurations should be added to the `<API-M_HOME>/repository/conf/deployment.toml` file as follows.\n+    \n+    ``` json tab=\"Format\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"<cloud-environment-type>\"\n+    clusterName = \"<cluster-name>\"\n+    displayName = \"<cluster-name-to_display>\"\n+    properties.Replicas = \"<number-of-replicas>\"\n+    properties.AccessURL = \"<access-URL>\"\n+    properties.MasterURL = \"<Master-URL-of-clsuter>\"\n+    properties.SAToken = \"<serviceacccount-token>\"\n+    properties.Namespace = \"<namespcae>\"\n+    ```\n+\n+    ``` json tab=\"Example\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"Kubernetes\"\n+    clusterName = \"docker-desktop\"\n+    displayName = \"cluster-1\"\n+    properties.Replicas = 1\n+    properties.AccessURL = \"mgw.ingress.wso2.com\"\n+    properties.MasterURL = \"https://kubernetes.docker.internal:6443\"\n+    properties.SAToken = \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg2UlYySEFkaVBOVG4zZ3FhWERXQUxQVUQ0bjlzOXE3dFhpbUZNZlFiRjQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3c28yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6IndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQtdG9rZW4tZGR0OTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NvMmFtLXBhdHRlcm4tMS1zdmMtYWNjb3VudCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijc3NmRmMjFkLTA3NjItNDM2Zi05ZDIwLTZlYzFkODMxYzc1NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDp3c28yOndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQifQ.YwlSgnSnwS7BNP0q0iDHsjlq_r3RhobG-SrduuEi35VXNfipPsK3UVJcCBmDKQOzKAxRG9415h2pr3cS-QsM6PR_UU2UWlXiUO-3UtSMqVY48Ek_1wdfmfCkiE7IOeua_58CV15tXtMLom0Oh27nkmWGfTHVvImQnqho4nv26BKZH4vKWgkw0HpMt73KHdN6SlVMK0cynktO5H-2A4V2rh-uL-OUXCLON_sBypVoPc9PAMxHo-bUe0SqBPiM0SiALu-0-J6dBcwbzPb5g-yUZmHmtuw3O32C304Hgfr-4Dui3X5DSKBSeqlrjjjfrvMVNug0J4JKk3bJ56h0OgujFw\"\n+    properties.Namespace = \"default\"\n+    ```\n+         \n+       Tenant users, can edit the cluster configurations included in `tenant-conf.json` file. Go to the carbon console and edit the tenant-conf.json file in `/_system/config/apimgt/applicationdata/` path.\n+       \n+    ``` json tab=\"Format\"\n+    \"ContainerMgt\": [\n+      {\n+        \"Type\": \"Kubernetes\",\n+        \"ContainerMgtInfo\": [\n+        {\n+          \"ClusterName\": \"\",\n+          \"DisplayName\": \"\",\n+          \"Properties\": {\n+            \"MasterURL\": \"\",\n+            \"AccessURL\": \"\",\n+            \"SAToken\": \"\",\n+            \"Namespace\": \"default\",\n+            \"Replicas\": 1,\n+            \"BasicSecurityCustomResourceName\": \"\",\n+            \"OauthSecurityCustomResourceName\": \"\",\n+            \"JWTSecurityCustomResourceName\": \"\"\n+            }\n+          }\n+        ]\n+      }\n+    ]\n+    ```\n+    \n+    ``` json tab=\"Example\"\n+    \"ContainerMgt\": [\n+      {\n+        \"Type\": \"Kubernetes\",\n+        \"ContainerMgtInfo\": [\n+         {\n+           \"ClusterName\": \"docker-desktop\",\n+           \"DisplayName\": \"cluster-1\",\n+           \"Properties\": {\n+           \"MasterURL\": \"https://kubernetes.docker.internal:6443\",\n+           \"AccessURL\": \"mgw.ingress.wso2.com\",\n+           \"SAToken\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg2UlYySEFkaVBOVG4zZ3FhWERXQUxQVUQ0bjlzOXE3dFhpbUZNZlFiRjQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3c28yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6IndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQtdG9rZW4tZGR0OTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NvMmFtLXBhdHRlcm4tMS1zdmMtYWNjb3VudCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijc3NmRmMjFkLTA3NjItNDM2Zi05ZDIwLTZlYzFkODMxYzc1NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDp3c28yOndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQifQ.YwlSgnSnwS7BNP0q0iDHsjlq_r3RhobG-SrduuEi35VXNfipPsK3UVJcCBmDKQOzKAxRG9415h2pr3cS-QsM6PR_UU2UWlXiUO-3UtSMqVY48Ek_1wdfmfCkiE7IOeua_58CV15tXtMLom0Oh27nkmWGfTHVvImQnqho4nv26BKZH4vKWgkw0HpMt73KHdN6SlVMK0cynktO5H-2A4V2rh-uL-OUXCLON_sBypVoPc9PAMxHo-bUe0SqBPiM0SiALu-0-J6dBcwbzPb5g-yUZmHmtuw3O32C304Hgfr-4Dui3X5DSKBSeqlrjjjfrvMVNug0J4JKk3bJ56h0OgujFw\",\n+           \"Namespace\": \"default\",\n+           \"Replicas\": 1,\n+           \"BasicSecurityCustomResourceName\": \"\",\n+           \"OauthSecurityCustomResourceName\": \"\",\n+           \"JWTSecurityCustomResourceName\": \"\"\n+            }\n+          }\n+        ]\n+      }\n+    ]\n+    ```\n+ \n+     <html><div class=\"admonition note\">\n+        <p class=\"admonition-title\">Note</p>\n+        <p> Super tenant users can customize the container management implementations if required. Then customize classes should be added to the `<API-M_HOME>/repository/conf/deployment.toml` file as follows. </p>   \n+        \n+    ``` json tab=\"Format\"\n+    [ContainerMgtConfig]\n+    <Environment-type> = \"<class-name>\"\n+    ```  \n+   \n+    ``` json tab=\"Example\"\n+    [ContainerMgtConfig]\n+    Kubernetes = \"org.wso2.carbon.apimgt.impl.containermgt.K8sManager_CustomClass\"\n+    ```\n+  \n+      </div>\n+      </html>\n+         \n+6. Start the server and create an API in publisher\n+    \n+    After setting up configurations go to the <API-M-HOME>/bin directory and start the server. Then Sign in to the WSO2 API Publisher and create\n+   a new API.\n+    \n+7. Select the clusters from envioranment tab\n+\n+    Navigate to the environment page and select the clusters to deploy the API.\n+    \n+     ![Environments]({{base_path}}/assets/img/learn/privatejet-mode/environment.png)\n+    \n+8. Go to lifecycle tab and publish the API\n+\n+    Navigate to the lifecycle page and publish the API. This will expose microservices as managed APIs in selected clusters.\n+    \n+     ![API LifeCycle]({{base_path}}/assets/img/learn/privatejet-mode/lifecycle_publish.png)\n+     \n+9. Go to the devportal overview page and get the accessURL to access the deployed API", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE2MzgyMA==", "bodyText": "we can use the Try it?", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r458163820", "createdAt": "2020-07-21T14:57:46Z", "author": {"login": "shaniR"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, \n+which simplifies a number of complex management tasks. WSO2 API-Manager provides cloud-native API management where user can expose microservices as managed APIs in cloud environments such as Kubernetes with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will expose as managed APIs in cloud clusters in privetJet mode, where each microservice will have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,\n+deployment, scaling, and management tasks will handle by the [WSO2 -Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md) itself.\n+\n+## Configuring APIs to deploy in PrivateJet mode\n+\n+Follow the steps below to configure the PrivateJet mode for Microgateways in API Manager to deploy APIs as managed APIs in cloud clusters. (Ex: Kubernetes)\n+\n+1. Install and setup [Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). In order to expose APIs using ingress controller [deploy the k8s-api-operator in ingress mode](https://github.com/wso2/k8s-api-operator/tree/v1.1.0/scenarios/scenario-17). \n+2. Deploying cluster configurations\n+ \n+    Processes in containers inside pods are authenticated when contacting the apiserver and accessing resources. In order to regulate access to the resources need to establish the RBAC Authorization with at least permissions to, \n+    Create, Delete, Update, Get , List, Post the customresourcedefinitions, apis and configmaps.\n+\n+    i.  Create a service account\n+\n+        kubectl create serviceaccount <service-account name> -n <namespace>\n+\n+    ii. Create a clusterRole\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRole\n+        metadata:\n+          name: clusterrole-privatejet\n+        rules:\n+        - apiGroups: [\"\",\"apiextensions.k8s.io\",\"wso2.com\"]\n+          resources: [\"configmaps\",\"customresourcedefinitions\",\"apis\"]\n+          verbs: [\"get\", \"post\", \"create\", \"delete\", \"put\", \"list\",\"update\"]\n+     \n+    iii. Create a  clusterRoleBinding\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRoleBinding\n+        metadata:\n+          name: clusterrolebinding-privatejet\n+        subjects:\n+        - kind: ServiceAccount\n+          name: wso2am-privatejet # Name is case sensitive\n+          apiGroup: \"\"\n+          namespace: default\n+        roleRef:\n+          kind: ClusterRole\n+          name: clusterrole-privatejet\n+          apiGroup: rbac.authorization.k8s.io\n+                                                                                                                      \n+3. Obtaining service account token\n+\n+    First you need to get the secret name for your service account. This can be done by executing,\n+\n+        kubectl get secrets -n <serviceaccount-namespace>\n+     \n+    Then, get the service account token by executing the following command,\n+\n+        kubectl describe secrets -n <serviceaccount-namespace> <secret-namespace>\n+\n+4. Obtaining the master URL\n+\n+    In order to establish the connection with the cluster need to obtain the Master URL. this be done by executing following command.\n+    \n+        kubectl cluster-info\n+        \n+        Result:\n+        Kubernetes master is running at https://35.223.28.131\n+        GLBCDefaultBackend is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/default-http-backend:http/proxy\n+        Heapster is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/heapster/proxy\n+        KubeDNS is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n+        Metrics-server is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy\n+\n+    <html><div class=\"admonition note\">\n+      <p class=\"admonition-title\">Note</p>\n+      <p>If the APIM deployed in a kubenretes cluster Master URL and serviceaccount token are not required to configure. </p>\n+      </div>\n+    </html>\n+    \n+5. Adding configurations of clusters.\n+\n+    For the super tenant users the cluster configurations should be added to the `<API-M_HOME>/repository/conf/deployment.toml` file as follows.\n+    \n+    ``` json tab=\"Format\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"<cloud-environment-type>\"\n+    clusterName = \"<cluster-name>\"\n+    displayName = \"<cluster-name-to_display>\"\n+    properties.Replicas = \"<number-of-replicas>\"\n+    properties.AccessURL = \"<access-URL>\"\n+    properties.MasterURL = \"<Master-URL-of-clsuter>\"\n+    properties.SAToken = \"<serviceacccount-token>\"\n+    properties.Namespace = \"<namespcae>\"\n+    ```\n+\n+    ``` json tab=\"Example\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"Kubernetes\"\n+    clusterName = \"docker-desktop\"\n+    displayName = \"cluster-1\"\n+    properties.Replicas = 1\n+    properties.AccessURL = \"mgw.ingress.wso2.com\"\n+    properties.MasterURL = \"https://kubernetes.docker.internal:6443\"\n+    properties.SAToken = \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg2UlYySEFkaVBOVG4zZ3FhWERXQUxQVUQ0bjlzOXE3dFhpbUZNZlFiRjQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3c28yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6IndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQtdG9rZW4tZGR0OTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NvMmFtLXBhdHRlcm4tMS1zdmMtYWNjb3VudCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijc3NmRmMjFkLTA3NjItNDM2Zi05ZDIwLTZlYzFkODMxYzc1NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDp3c28yOndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQifQ.YwlSgnSnwS7BNP0q0iDHsjlq_r3RhobG-SrduuEi35VXNfipPsK3UVJcCBmDKQOzKAxRG9415h2pr3cS-QsM6PR_UU2UWlXiUO-3UtSMqVY48Ek_1wdfmfCkiE7IOeua_58CV15tXtMLom0Oh27nkmWGfTHVvImQnqho4nv26BKZH4vKWgkw0HpMt73KHdN6SlVMK0cynktO5H-2A4V2rh-uL-OUXCLON_sBypVoPc9PAMxHo-bUe0SqBPiM0SiALu-0-J6dBcwbzPb5g-yUZmHmtuw3O32C304Hgfr-4Dui3X5DSKBSeqlrjjjfrvMVNug0J4JKk3bJ56h0OgujFw\"\n+    properties.Namespace = \"default\"\n+    ```\n+         \n+       Tenant users, can edit the cluster configurations included in `tenant-conf.json` file. Go to the carbon console and edit the tenant-conf.json file in `/_system/config/apimgt/applicationdata/` path.\n+       \n+    ``` json tab=\"Format\"\n+    \"ContainerMgt\": [\n+      {\n+        \"Type\": \"Kubernetes\",\n+        \"ContainerMgtInfo\": [\n+        {\n+          \"ClusterName\": \"\",\n+          \"DisplayName\": \"\",\n+          \"Properties\": {\n+            \"MasterURL\": \"\",\n+            \"AccessURL\": \"\",\n+            \"SAToken\": \"\",\n+            \"Namespace\": \"default\",\n+            \"Replicas\": 1,\n+            \"BasicSecurityCustomResourceName\": \"\",\n+            \"OauthSecurityCustomResourceName\": \"\",\n+            \"JWTSecurityCustomResourceName\": \"\"\n+            }\n+          }\n+        ]\n+      }\n+    ]\n+    ```\n+    \n+    ``` json tab=\"Example\"\n+    \"ContainerMgt\": [\n+      {\n+        \"Type\": \"Kubernetes\",\n+        \"ContainerMgtInfo\": [\n+         {\n+           \"ClusterName\": \"docker-desktop\",\n+           \"DisplayName\": \"cluster-1\",\n+           \"Properties\": {\n+           \"MasterURL\": \"https://kubernetes.docker.internal:6443\",\n+           \"AccessURL\": \"mgw.ingress.wso2.com\",\n+           \"SAToken\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg2UlYySEFkaVBOVG4zZ3FhWERXQUxQVUQ0bjlzOXE3dFhpbUZNZlFiRjQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3c28yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6IndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQtdG9rZW4tZGR0OTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NvMmFtLXBhdHRlcm4tMS1zdmMtYWNjb3VudCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijc3NmRmMjFkLTA3NjItNDM2Zi05ZDIwLTZlYzFkODMxYzc1NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDp3c28yOndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQifQ.YwlSgnSnwS7BNP0q0iDHsjlq_r3RhobG-SrduuEi35VXNfipPsK3UVJcCBmDKQOzKAxRG9415h2pr3cS-QsM6PR_UU2UWlXiUO-3UtSMqVY48Ek_1wdfmfCkiE7IOeua_58CV15tXtMLom0Oh27nkmWGfTHVvImQnqho4nv26BKZH4vKWgkw0HpMt73KHdN6SlVMK0cynktO5H-2A4V2rh-uL-OUXCLON_sBypVoPc9PAMxHo-bUe0SqBPiM0SiALu-0-J6dBcwbzPb5g-yUZmHmtuw3O32C304Hgfr-4Dui3X5DSKBSeqlrjjjfrvMVNug0J4JKk3bJ56h0OgujFw\",\n+           \"Namespace\": \"default\",\n+           \"Replicas\": 1,\n+           \"BasicSecurityCustomResourceName\": \"\",\n+           \"OauthSecurityCustomResourceName\": \"\",\n+           \"JWTSecurityCustomResourceName\": \"\"\n+            }\n+          }\n+        ]\n+      }\n+    ]\n+    ```\n+ \n+     <html><div class=\"admonition note\">\n+        <p class=\"admonition-title\">Note</p>\n+        <p> Super tenant users can customize the container management implementations if required. Then customize classes should be added to the `<API-M_HOME>/repository/conf/deployment.toml` file as follows. </p>   \n+        \n+    ``` json tab=\"Format\"\n+    [ContainerMgtConfig]\n+    <Environment-type> = \"<class-name>\"\n+    ```  \n+   \n+    ``` json tab=\"Example\"\n+    [ContainerMgtConfig]\n+    Kubernetes = \"org.wso2.carbon.apimgt.impl.containermgt.K8sManager_CustomClass\"\n+    ```\n+  \n+      </div>\n+      </html>\n+         \n+6. Start the server and create an API in publisher\n+    \n+    After setting up configurations go to the <API-M-HOME>/bin directory and start the server. Then Sign in to the WSO2 API Publisher and create\n+   a new API.\n+    \n+7. Select the clusters from envioranment tab\n+\n+    Navigate to the environment page and select the clusters to deploy the API.\n+    \n+     ![Environments]({{base_path}}/assets/img/learn/privatejet-mode/environment.png)\n+    \n+8. Go to lifecycle tab and publish the API\n+\n+    Navigate to the lifecycle page and publish the API. This will expose microservices as managed APIs in selected clusters.\n+    \n+     ![API LifeCycle]({{base_path}}/assets/img/learn/privatejet-mode/lifecycle_publish.png)\n+     \n+9. Go to the devportal overview page and get the accessURL to access the deployed API\n+   \n+    To obtain the accessURL configured, Sign in to the WSO2 Developer Portal overview page. The accessURL can be seen under Gateway Environments.\n+   \n+    ![Developer portal - Overview]({{base_path}}/assets/img/learn/privatejet-mode/devportal.png)\n+   \n+10. Invoking the API\n+    \n+    i. Sign in to the WSO2 Developer Portal. Subscribe to the API and obtain an access token required to invoke the API or can use the following sample token.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE2NDc5NA==", "bodyText": "lets add links to these authentication mechanisms.", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r458164794", "createdAt": "2020-07-21T14:58:57Z", "author": {"login": "shaniR"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, \n+which simplifies a number of complex management tasks. WSO2 API-Manager provides cloud-native API management where user can expose microservices as managed APIs in cloud environments such as Kubernetes with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will expose as managed APIs in cloud clusters in privetJet mode, where each microservice will have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,\n+deployment, scaling, and management tasks will handle by the [WSO2 -Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md) itself.\n+\n+## Configuring APIs to deploy in PrivateJet mode\n+\n+Follow the steps below to configure the PrivateJet mode for Microgateways in API Manager to deploy APIs as managed APIs in cloud clusters. (Ex: Kubernetes)\n+\n+1. Install and setup [Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). In order to expose APIs using ingress controller [deploy the k8s-api-operator in ingress mode](https://github.com/wso2/k8s-api-operator/tree/v1.1.0/scenarios/scenario-17). \n+2. Deploying cluster configurations\n+ \n+    Processes in containers inside pods are authenticated when contacting the apiserver and accessing resources. In order to regulate access to the resources need to establish the RBAC Authorization with at least permissions to, \n+    Create, Delete, Update, Get , List, Post the customresourcedefinitions, apis and configmaps.\n+\n+    i.  Create a service account\n+\n+        kubectl create serviceaccount <service-account name> -n <namespace>\n+\n+    ii. Create a clusterRole\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRole\n+        metadata:\n+          name: clusterrole-privatejet\n+        rules:\n+        - apiGroups: [\"\",\"apiextensions.k8s.io\",\"wso2.com\"]\n+          resources: [\"configmaps\",\"customresourcedefinitions\",\"apis\"]\n+          verbs: [\"get\", \"post\", \"create\", \"delete\", \"put\", \"list\",\"update\"]\n+     \n+    iii. Create a  clusterRoleBinding\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRoleBinding\n+        metadata:\n+          name: clusterrolebinding-privatejet\n+        subjects:\n+        - kind: ServiceAccount\n+          name: wso2am-privatejet # Name is case sensitive\n+          apiGroup: \"\"\n+          namespace: default\n+        roleRef:\n+          kind: ClusterRole\n+          name: clusterrole-privatejet\n+          apiGroup: rbac.authorization.k8s.io\n+                                                                                                                      \n+3. Obtaining service account token\n+\n+    First you need to get the secret name for your service account. This can be done by executing,\n+\n+        kubectl get secrets -n <serviceaccount-namespace>\n+     \n+    Then, get the service account token by executing the following command,\n+\n+        kubectl describe secrets -n <serviceaccount-namespace> <secret-namespace>\n+\n+4. Obtaining the master URL\n+\n+    In order to establish the connection with the cluster need to obtain the Master URL. this be done by executing following command.\n+    \n+        kubectl cluster-info\n+        \n+        Result:\n+        Kubernetes master is running at https://35.223.28.131\n+        GLBCDefaultBackend is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/default-http-backend:http/proxy\n+        Heapster is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/heapster/proxy\n+        KubeDNS is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n+        Metrics-server is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy\n+\n+    <html><div class=\"admonition note\">\n+      <p class=\"admonition-title\">Note</p>\n+      <p>If the APIM deployed in a kubenretes cluster Master URL and serviceaccount token are not required to configure. </p>\n+      </div>\n+    </html>\n+    \n+5. Adding configurations of clusters.\n+\n+    For the super tenant users the cluster configurations should be added to the `<API-M_HOME>/repository/conf/deployment.toml` file as follows.\n+    \n+    ``` json tab=\"Format\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"<cloud-environment-type>\"\n+    clusterName = \"<cluster-name>\"\n+    displayName = \"<cluster-name-to_display>\"\n+    properties.Replicas = \"<number-of-replicas>\"\n+    properties.AccessURL = \"<access-URL>\"\n+    properties.MasterURL = \"<Master-URL-of-clsuter>\"\n+    properties.SAToken = \"<serviceacccount-token>\"\n+    properties.Namespace = \"<namespcae>\"\n+    ```\n+\n+    ``` json tab=\"Example\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"Kubernetes\"\n+    clusterName = \"docker-desktop\"\n+    displayName = \"cluster-1\"\n+    properties.Replicas = 1\n+    properties.AccessURL = \"mgw.ingress.wso2.com\"\n+    properties.MasterURL = \"https://kubernetes.docker.internal:6443\"\n+    properties.SAToken = \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg2UlYySEFkaVBOVG4zZ3FhWERXQUxQVUQ0bjlzOXE3dFhpbUZNZlFiRjQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3c28yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6IndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQtdG9rZW4tZGR0OTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NvMmFtLXBhdHRlcm4tMS1zdmMtYWNjb3VudCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijc3NmRmMjFkLTA3NjItNDM2Zi05ZDIwLTZlYzFkODMxYzc1NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDp3c28yOndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQifQ.YwlSgnSnwS7BNP0q0iDHsjlq_r3RhobG-SrduuEi35VXNfipPsK3UVJcCBmDKQOzKAxRG9415h2pr3cS-QsM6PR_UU2UWlXiUO-3UtSMqVY48Ek_1wdfmfCkiE7IOeua_58CV15tXtMLom0Oh27nkmWGfTHVvImQnqho4nv26BKZH4vKWgkw0HpMt73KHdN6SlVMK0cynktO5H-2A4V2rh-uL-OUXCLON_sBypVoPc9PAMxHo-bUe0SqBPiM0SiALu-0-J6dBcwbzPb5g-yUZmHmtuw3O32C304Hgfr-4Dui3X5DSKBSeqlrjjjfrvMVNug0J4JKk3bJ56h0OgujFw\"\n+    properties.Namespace = \"default\"\n+    ```\n+         \n+       Tenant users, can edit the cluster configurations included in `tenant-conf.json` file. Go to the carbon console and edit the tenant-conf.json file in `/_system/config/apimgt/applicationdata/` path.\n+       \n+    ``` json tab=\"Format\"\n+    \"ContainerMgt\": [\n+      {\n+        \"Type\": \"Kubernetes\",\n+        \"ContainerMgtInfo\": [\n+        {\n+          \"ClusterName\": \"\",\n+          \"DisplayName\": \"\",\n+          \"Properties\": {\n+            \"MasterURL\": \"\",\n+            \"AccessURL\": \"\",\n+            \"SAToken\": \"\",\n+            \"Namespace\": \"default\",\n+            \"Replicas\": 1,\n+            \"BasicSecurityCustomResourceName\": \"\",\n+            \"OauthSecurityCustomResourceName\": \"\",\n+            \"JWTSecurityCustomResourceName\": \"\"\n+            }\n+          }\n+        ]\n+      }\n+    ]\n+    ```\n+    \n+    ``` json tab=\"Example\"\n+    \"ContainerMgt\": [\n+      {\n+        \"Type\": \"Kubernetes\",\n+        \"ContainerMgtInfo\": [\n+         {\n+           \"ClusterName\": \"docker-desktop\",\n+           \"DisplayName\": \"cluster-1\",\n+           \"Properties\": {\n+           \"MasterURL\": \"https://kubernetes.docker.internal:6443\",\n+           \"AccessURL\": \"mgw.ingress.wso2.com\",\n+           \"SAToken\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg2UlYySEFkaVBOVG4zZ3FhWERXQUxQVUQ0bjlzOXE3dFhpbUZNZlFiRjQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3c28yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6IndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQtdG9rZW4tZGR0OTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NvMmFtLXBhdHRlcm4tMS1zdmMtYWNjb3VudCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijc3NmRmMjFkLTA3NjItNDM2Zi05ZDIwLTZlYzFkODMxYzc1NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDp3c28yOndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQifQ.YwlSgnSnwS7BNP0q0iDHsjlq_r3RhobG-SrduuEi35VXNfipPsK3UVJcCBmDKQOzKAxRG9415h2pr3cS-QsM6PR_UU2UWlXiUO-3UtSMqVY48Ek_1wdfmfCkiE7IOeua_58CV15tXtMLom0Oh27nkmWGfTHVvImQnqho4nv26BKZH4vKWgkw0HpMt73KHdN6SlVMK0cynktO5H-2A4V2rh-uL-OUXCLON_sBypVoPc9PAMxHo-bUe0SqBPiM0SiALu-0-J6dBcwbzPb5g-yUZmHmtuw3O32C304Hgfr-4Dui3X5DSKBSeqlrjjjfrvMVNug0J4JKk3bJ56h0OgujFw\",\n+           \"Namespace\": \"default\",\n+           \"Replicas\": 1,\n+           \"BasicSecurityCustomResourceName\": \"\",\n+           \"OauthSecurityCustomResourceName\": \"\",\n+           \"JWTSecurityCustomResourceName\": \"\"\n+            }\n+          }\n+        ]\n+      }\n+    ]\n+    ```\n+ \n+     <html><div class=\"admonition note\">\n+        <p class=\"admonition-title\">Note</p>\n+        <p> Super tenant users can customize the container management implementations if required. Then customize classes should be added to the `<API-M_HOME>/repository/conf/deployment.toml` file as follows. </p>   \n+        \n+    ``` json tab=\"Format\"\n+    [ContainerMgtConfig]\n+    <Environment-type> = \"<class-name>\"\n+    ```  \n+   \n+    ``` json tab=\"Example\"\n+    [ContainerMgtConfig]\n+    Kubernetes = \"org.wso2.carbon.apimgt.impl.containermgt.K8sManager_CustomClass\"\n+    ```\n+  \n+      </div>\n+      </html>\n+         \n+6. Start the server and create an API in publisher\n+    \n+    After setting up configurations go to the <API-M-HOME>/bin directory and start the server. Then Sign in to the WSO2 API Publisher and create\n+   a new API.\n+    \n+7. Select the clusters from envioranment tab\n+\n+    Navigate to the environment page and select the clusters to deploy the API.\n+    \n+     ![Environments]({{base_path}}/assets/img/learn/privatejet-mode/environment.png)\n+    \n+8. Go to lifecycle tab and publish the API\n+\n+    Navigate to the lifecycle page and publish the API. This will expose microservices as managed APIs in selected clusters.\n+    \n+     ![API LifeCycle]({{base_path}}/assets/img/learn/privatejet-mode/lifecycle_publish.png)\n+     \n+9. Go to the devportal overview page and get the accessURL to access the deployed API\n+   \n+    To obtain the accessURL configured, Sign in to the WSO2 Developer Portal overview page. The accessURL can be seen under Gateway Environments.\n+   \n+    ![Developer portal - Overview]({{base_path}}/assets/img/learn/privatejet-mode/devportal.png)\n+   \n+10. Invoking the API\n+    \n+    i. Sign in to the WSO2 Developer Portal. Subscribe to the API and obtain an access token required to invoke the API or can use the following sample token.\n+    \n+        TOKEN=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ik5UZG1aak00WkRrM05qWTBZemM1TW1abU9EZ3dNVEUzTVdZd05ERTVNV1JsWkRnNE56YzRaQT09In0.eyJhdWQiOiJodHRwOlwvXC9vcmcud3NvMi5hcGltZ3RcL2dhdGV3YXkiLCJzdWIiOiJhZG1pbkBjYXJib24uc3VwZXIiLCJhcHBsaWNhdGlvbiI6eyJvd25lciI6ImFkbWluIiwidGllciI6IjEwUGVyTWluIiwibmFtZSI6InNhbXBsZS1jcmQtYXBwbGljYXRpb24iLCJpZCI6NCwidXVpZCI6bnVsbH0sInNjb3BlIjoiYW1fYXBwbGljYXRpb25fc2NvcGUgZGVmYXVsdCIsImlzcyI6Imh0dHBzOlwvXC93c28yYXBpbTozMjAwMVwvb2F1dGgyXC90b2tlbiIsInRpZXJJbmZvIjp7fSwia2V5dHlwZSI6IlBST0RVQ1RJT04iLCJzdWJzY3JpYmVkQVBJcyI6W10sImNvbnN1bWVyS2V5IjoieF8xal83MW11dXZCb01SRjFLZnVLdThNOVVRYSIsImV4cCI6MzczMTQ5Mjg2MSwiaWF0IjoxNTg0MDA5MjE0LCJqdGkiOiJkYTA5Mjg2Yy03OGEzLTQ4YjgtYmFiNy1hYWZiYzhiMTUxNTQifQ.MKmGDwh855NrZ2wOvXO7TwFbCtsgsOFuoZW4DBVIbJ1KQ2F6TgTgBbtzBUvrYGPslEExMemhepfvvlYv8Gd6MMo3GVH4aO8AKyc8gHmeIQ8MQtXGn7u9N00ZW3_9JWaQkU-OYEDsLHvKKHzO0t2umaskSyCS2UkAS4wIT_szZ5sm-O-ez4nKGeJmESiV-1EchFjOhLpEH4p9wIj3MlKnZrIcJByRKK9ZGaHBqxwwYuJtMCDNa2wFAPMOh-45eabIUdo1KUO3gZLVcME93aza1t1jzL9mFsx0LGaXIxB7klrDuBCAdG9Yi3O7-3WUF74QaS2tmCxW36JhhOJ5DdacfQ\n+    \n+    ii. Go to the kubectl command line tool and get the ingress.\n+    \n+        kubectl get ingress\n+        \n+        Output:\n+        NAME                                 HOSTS                  ADDRESS     PORTS     AGE\n+        api-operator-ingress-test            mgw.ingress.wso2.com   localhost   80, 443   37h\n+        api-operator-ingress-pizzashackapi   mgw.ingress.wso2.com   localhost   80, 443   21h\n+        \n+    iii. Invoke the API using following curl command.\n+    \n+        curl -H \"<host-name>\" https://<ingress-IP>/<resource-path> -H \"Authorization:Bearer $TOKEN\" -k\n+        \n+        Example of PizzashakAPI :\n+        curl -H \"Host:mgw.ingress.wso2.com\u201d  https://localhost/pizzashack/1.0.0/menu -H \"accept: application/json\" -H \"Authorization: Bearer $TOKEN\"\n+        \n+        Output:\n+        [{\"name\":\"BBQ Chicken Bacon\",\"description\":\"Grilled white chicken, hickory-smoked bacon and fresh sliced onions in barbeque sauce\",\"price\":\"18.99\",\"icon\":\"/images/6.png\"},{\"name\":\"Chicken Parmesan\",\"description\":\"Grilled chicken, fresh tomatoes, feta and mozzarella cheese\",\"price\":\"15.99\",\"icon\":\"/images/1.png\"},{\"name\":\"Chilly Chicken Cordon Bleu\",\"description\":\"Spinash Alfredo sauce topped with grilled chicken, ham, onions and mozzarella\",\"price\":\"23.99\",\"icon\":\"/images/10.png\"},{\"name\":\"Double Bacon 6Cheese\",\"description\":\"Hickory-smoked bacon, Julienne cut Canadian bacon, Parmesan, mozzarella, Romano, Asiago and and Fontina cheese\",\"price\":\"27.99\",\"icon\":\"/images/9.png\"},{\"name\":\"Garden Fresh\",\"description\":\"Slices onions and green peppers, gourmet mushrooms, black olives and ripe Roma tomatoes\",\"price\":\"12.99\",\"icon\":\"/images/3.png\"},{\"name\":\"Grilled Chicken Club\",\"description\":\"Grilled white chicken, hickory-smoked bacon and fresh sliced onions topped with Roma tomatoes\",\"price\":\"23.99\",\"icon\":\"/images/8.png\"},{\"name\":\"Hawaiian BBQ Chicken\",\"description\":\"Grilled white chicken, hickory-smoked bacon, barbeque sauce topped with sweet pine-apple\",\"price\":\"14.99\",\"icon\":\"/images/7.png\"},{\"name\":\"Spicy Italian\",\"description\":\"Pepperoni and a double portion of spicy Italian sausage\",\"price\":\"11.99\",\"icon\":\"/images/2.png\"},{\"name\":\"Spinach Alfredo\",\"description\":\"Rich and creamy blend of spinach and garlic Parmesan with Alfredo sauce\",\"price\":\"9.99\",\"icon\":\"/images/5.png\"},{\"name\":\"Tuscan Six Cheese\",\"description\":\"Six cheese blend of mozzarella, Parmesan, Romano, Asiago and Fontina\",\"price\":\"21.99\",\"icon\":\"/images/4.png\"}]%\n+\n+### Securing APIs deployed in privateJet mode\n+\n+By default the APIs deployed in cloud clusters with k8s-api-operator are secured with JWT authentication. Hence the APIs deployed in privateJet mode are secured with JWT authentication.\n+\n+WSO2 API offers JWT authentication, Oauth2 authentication and Basic authentication mechanisms to secure your API from unauthenticated access in cloud-native API management. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE2NTI5NQ==", "bodyText": "how do we do that? shall we say follow the steps in the document and create?", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r458165295", "createdAt": "2020-07-21T14:59:34Z", "author": {"login": "shaniR"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, \n+which simplifies a number of complex management tasks. WSO2 API-Manager provides cloud-native API management where user can expose microservices as managed APIs in cloud environments such as Kubernetes with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will expose as managed APIs in cloud clusters in privetJet mode, where each microservice will have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,\n+deployment, scaling, and management tasks will handle by the [WSO2 -Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md) itself.\n+\n+## Configuring APIs to deploy in PrivateJet mode\n+\n+Follow the steps below to configure the PrivateJet mode for Microgateways in API Manager to deploy APIs as managed APIs in cloud clusters. (Ex: Kubernetes)\n+\n+1. Install and setup [Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). In order to expose APIs using ingress controller [deploy the k8s-api-operator in ingress mode](https://github.com/wso2/k8s-api-operator/tree/v1.1.0/scenarios/scenario-17). \n+2. Deploying cluster configurations\n+ \n+    Processes in containers inside pods are authenticated when contacting the apiserver and accessing resources. In order to regulate access to the resources need to establish the RBAC Authorization with at least permissions to, \n+    Create, Delete, Update, Get , List, Post the customresourcedefinitions, apis and configmaps.\n+\n+    i.  Create a service account\n+\n+        kubectl create serviceaccount <service-account name> -n <namespace>\n+\n+    ii. Create a clusterRole\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRole\n+        metadata:\n+          name: clusterrole-privatejet\n+        rules:\n+        - apiGroups: [\"\",\"apiextensions.k8s.io\",\"wso2.com\"]\n+          resources: [\"configmaps\",\"customresourcedefinitions\",\"apis\"]\n+          verbs: [\"get\", \"post\", \"create\", \"delete\", \"put\", \"list\",\"update\"]\n+     \n+    iii. Create a  clusterRoleBinding\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRoleBinding\n+        metadata:\n+          name: clusterrolebinding-privatejet\n+        subjects:\n+        - kind: ServiceAccount\n+          name: wso2am-privatejet # Name is case sensitive\n+          apiGroup: \"\"\n+          namespace: default\n+        roleRef:\n+          kind: ClusterRole\n+          name: clusterrole-privatejet\n+          apiGroup: rbac.authorization.k8s.io\n+                                                                                                                      \n+3. Obtaining service account token\n+\n+    First you need to get the secret name for your service account. This can be done by executing,\n+\n+        kubectl get secrets -n <serviceaccount-namespace>\n+     \n+    Then, get the service account token by executing the following command,\n+\n+        kubectl describe secrets -n <serviceaccount-namespace> <secret-namespace>\n+\n+4. Obtaining the master URL\n+\n+    In order to establish the connection with the cluster need to obtain the Master URL. this be done by executing following command.\n+    \n+        kubectl cluster-info\n+        \n+        Result:\n+        Kubernetes master is running at https://35.223.28.131\n+        GLBCDefaultBackend is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/default-http-backend:http/proxy\n+        Heapster is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/heapster/proxy\n+        KubeDNS is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n+        Metrics-server is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy\n+\n+    <html><div class=\"admonition note\">\n+      <p class=\"admonition-title\">Note</p>\n+      <p>If the APIM deployed in a kubenretes cluster Master URL and serviceaccount token are not required to configure. </p>\n+      </div>\n+    </html>\n+    \n+5. Adding configurations of clusters.\n+\n+    For the super tenant users the cluster configurations should be added to the `<API-M_HOME>/repository/conf/deployment.toml` file as follows.\n+    \n+    ``` json tab=\"Format\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"<cloud-environment-type>\"\n+    clusterName = \"<cluster-name>\"\n+    displayName = \"<cluster-name-to_display>\"\n+    properties.Replicas = \"<number-of-replicas>\"\n+    properties.AccessURL = \"<access-URL>\"\n+    properties.MasterURL = \"<Master-URL-of-clsuter>\"\n+    properties.SAToken = \"<serviceacccount-token>\"\n+    properties.Namespace = \"<namespcae>\"\n+    ```\n+\n+    ``` json tab=\"Example\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"Kubernetes\"\n+    clusterName = \"docker-desktop\"\n+    displayName = \"cluster-1\"\n+    properties.Replicas = 1\n+    properties.AccessURL = \"mgw.ingress.wso2.com\"\n+    properties.MasterURL = \"https://kubernetes.docker.internal:6443\"\n+    properties.SAToken = \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg2UlYySEFkaVBOVG4zZ3FhWERXQUxQVUQ0bjlzOXE3dFhpbUZNZlFiRjQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3c28yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6IndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQtdG9rZW4tZGR0OTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NvMmFtLXBhdHRlcm4tMS1zdmMtYWNjb3VudCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijc3NmRmMjFkLTA3NjItNDM2Zi05ZDIwLTZlYzFkODMxYzc1NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDp3c28yOndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQifQ.YwlSgnSnwS7BNP0q0iDHsjlq_r3RhobG-SrduuEi35VXNfipPsK3UVJcCBmDKQOzKAxRG9415h2pr3cS-QsM6PR_UU2UWlXiUO-3UtSMqVY48Ek_1wdfmfCkiE7IOeua_58CV15tXtMLom0Oh27nkmWGfTHVvImQnqho4nv26BKZH4vKWgkw0HpMt73KHdN6SlVMK0cynktO5H-2A4V2rh-uL-OUXCLON_sBypVoPc9PAMxHo-bUe0SqBPiM0SiALu-0-J6dBcwbzPb5g-yUZmHmtuw3O32C304Hgfr-4Dui3X5DSKBSeqlrjjjfrvMVNug0J4JKk3bJ56h0OgujFw\"\n+    properties.Namespace = \"default\"\n+    ```\n+         \n+       Tenant users, can edit the cluster configurations included in `tenant-conf.json` file. Go to the carbon console and edit the tenant-conf.json file in `/_system/config/apimgt/applicationdata/` path.\n+       \n+    ``` json tab=\"Format\"\n+    \"ContainerMgt\": [\n+      {\n+        \"Type\": \"Kubernetes\",\n+        \"ContainerMgtInfo\": [\n+        {\n+          \"ClusterName\": \"\",\n+          \"DisplayName\": \"\",\n+          \"Properties\": {\n+            \"MasterURL\": \"\",\n+            \"AccessURL\": \"\",\n+            \"SAToken\": \"\",\n+            \"Namespace\": \"default\",\n+            \"Replicas\": 1,\n+            \"BasicSecurityCustomResourceName\": \"\",\n+            \"OauthSecurityCustomResourceName\": \"\",\n+            \"JWTSecurityCustomResourceName\": \"\"\n+            }\n+          }\n+        ]\n+      }\n+    ]\n+    ```\n+    \n+    ``` json tab=\"Example\"\n+    \"ContainerMgt\": [\n+      {\n+        \"Type\": \"Kubernetes\",\n+        \"ContainerMgtInfo\": [\n+         {\n+           \"ClusterName\": \"docker-desktop\",\n+           \"DisplayName\": \"cluster-1\",\n+           \"Properties\": {\n+           \"MasterURL\": \"https://kubernetes.docker.internal:6443\",\n+           \"AccessURL\": \"mgw.ingress.wso2.com\",\n+           \"SAToken\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg2UlYySEFkaVBOVG4zZ3FhWERXQUxQVUQ0bjlzOXE3dFhpbUZNZlFiRjQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3c28yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6IndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQtdG9rZW4tZGR0OTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NvMmFtLXBhdHRlcm4tMS1zdmMtYWNjb3VudCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijc3NmRmMjFkLTA3NjItNDM2Zi05ZDIwLTZlYzFkODMxYzc1NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDp3c28yOndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQifQ.YwlSgnSnwS7BNP0q0iDHsjlq_r3RhobG-SrduuEi35VXNfipPsK3UVJcCBmDKQOzKAxRG9415h2pr3cS-QsM6PR_UU2UWlXiUO-3UtSMqVY48Ek_1wdfmfCkiE7IOeua_58CV15tXtMLom0Oh27nkmWGfTHVvImQnqho4nv26BKZH4vKWgkw0HpMt73KHdN6SlVMK0cynktO5H-2A4V2rh-uL-OUXCLON_sBypVoPc9PAMxHo-bUe0SqBPiM0SiALu-0-J6dBcwbzPb5g-yUZmHmtuw3O32C304Hgfr-4Dui3X5DSKBSeqlrjjjfrvMVNug0J4JKk3bJ56h0OgujFw\",\n+           \"Namespace\": \"default\",\n+           \"Replicas\": 1,\n+           \"BasicSecurityCustomResourceName\": \"\",\n+           \"OauthSecurityCustomResourceName\": \"\",\n+           \"JWTSecurityCustomResourceName\": \"\"\n+            }\n+          }\n+        ]\n+      }\n+    ]\n+    ```\n+ \n+     <html><div class=\"admonition note\">\n+        <p class=\"admonition-title\">Note</p>\n+        <p> Super tenant users can customize the container management implementations if required. Then customize classes should be added to the `<API-M_HOME>/repository/conf/deployment.toml` file as follows. </p>   \n+        \n+    ``` json tab=\"Format\"\n+    [ContainerMgtConfig]\n+    <Environment-type> = \"<class-name>\"\n+    ```  \n+   \n+    ``` json tab=\"Example\"\n+    [ContainerMgtConfig]\n+    Kubernetes = \"org.wso2.carbon.apimgt.impl.containermgt.K8sManager_CustomClass\"\n+    ```\n+  \n+      </div>\n+      </html>\n+         \n+6. Start the server and create an API in publisher\n+    \n+    After setting up configurations go to the <API-M-HOME>/bin directory and start the server. Then Sign in to the WSO2 API Publisher and create\n+   a new API.\n+    \n+7. Select the clusters from envioranment tab\n+\n+    Navigate to the environment page and select the clusters to deploy the API.\n+    \n+     ![Environments]({{base_path}}/assets/img/learn/privatejet-mode/environment.png)\n+    \n+8. Go to lifecycle tab and publish the API\n+\n+    Navigate to the lifecycle page and publish the API. This will expose microservices as managed APIs in selected clusters.\n+    \n+     ![API LifeCycle]({{base_path}}/assets/img/learn/privatejet-mode/lifecycle_publish.png)\n+     \n+9. Go to the devportal overview page and get the accessURL to access the deployed API\n+   \n+    To obtain the accessURL configured, Sign in to the WSO2 Developer Portal overview page. The accessURL can be seen under Gateway Environments.\n+   \n+    ![Developer portal - Overview]({{base_path}}/assets/img/learn/privatejet-mode/devportal.png)\n+   \n+10. Invoking the API\n+    \n+    i. Sign in to the WSO2 Developer Portal. Subscribe to the API and obtain an access token required to invoke the API or can use the following sample token.\n+    \n+        TOKEN=eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ik5UZG1aak00WkRrM05qWTBZemM1TW1abU9EZ3dNVEUzTVdZd05ERTVNV1JsWkRnNE56YzRaQT09In0.eyJhdWQiOiJodHRwOlwvXC9vcmcud3NvMi5hcGltZ3RcL2dhdGV3YXkiLCJzdWIiOiJhZG1pbkBjYXJib24uc3VwZXIiLCJhcHBsaWNhdGlvbiI6eyJvd25lciI6ImFkbWluIiwidGllciI6IjEwUGVyTWluIiwibmFtZSI6InNhbXBsZS1jcmQtYXBwbGljYXRpb24iLCJpZCI6NCwidXVpZCI6bnVsbH0sInNjb3BlIjoiYW1fYXBwbGljYXRpb25fc2NvcGUgZGVmYXVsdCIsImlzcyI6Imh0dHBzOlwvXC93c28yYXBpbTozMjAwMVwvb2F1dGgyXC90b2tlbiIsInRpZXJJbmZvIjp7fSwia2V5dHlwZSI6IlBST0RVQ1RJT04iLCJzdWJzY3JpYmVkQVBJcyI6W10sImNvbnN1bWVyS2V5IjoieF8xal83MW11dXZCb01SRjFLZnVLdThNOVVRYSIsImV4cCI6MzczMTQ5Mjg2MSwiaWF0IjoxNTg0MDA5MjE0LCJqdGkiOiJkYTA5Mjg2Yy03OGEzLTQ4YjgtYmFiNy1hYWZiYzhiMTUxNTQifQ.MKmGDwh855NrZ2wOvXO7TwFbCtsgsOFuoZW4DBVIbJ1KQ2F6TgTgBbtzBUvrYGPslEExMemhepfvvlYv8Gd6MMo3GVH4aO8AKyc8gHmeIQ8MQtXGn7u9N00ZW3_9JWaQkU-OYEDsLHvKKHzO0t2umaskSyCS2UkAS4wIT_szZ5sm-O-ez4nKGeJmESiV-1EchFjOhLpEH4p9wIj3MlKnZrIcJByRKK9ZGaHBqxwwYuJtMCDNa2wFAPMOh-45eabIUdo1KUO3gZLVcME93aza1t1jzL9mFsx0LGaXIxB7klrDuBCAdG9Yi3O7-3WUF74QaS2tmCxW36JhhOJ5DdacfQ\n+    \n+    ii. Go to the kubectl command line tool and get the ingress.\n+    \n+        kubectl get ingress\n+        \n+        Output:\n+        NAME                                 HOSTS                  ADDRESS     PORTS     AGE\n+        api-operator-ingress-test            mgw.ingress.wso2.com   localhost   80, 443   37h\n+        api-operator-ingress-pizzashackapi   mgw.ingress.wso2.com   localhost   80, 443   21h\n+        \n+    iii. Invoke the API using following curl command.\n+    \n+        curl -H \"<host-name>\" https://<ingress-IP>/<resource-path> -H \"Authorization:Bearer $TOKEN\" -k\n+        \n+        Example of PizzashakAPI :\n+        curl -H \"Host:mgw.ingress.wso2.com\u201d  https://localhost/pizzashack/1.0.0/menu -H \"accept: application/json\" -H \"Authorization: Bearer $TOKEN\"\n+        \n+        Output:\n+        [{\"name\":\"BBQ Chicken Bacon\",\"description\":\"Grilled white chicken, hickory-smoked bacon and fresh sliced onions in barbeque sauce\",\"price\":\"18.99\",\"icon\":\"/images/6.png\"},{\"name\":\"Chicken Parmesan\",\"description\":\"Grilled chicken, fresh tomatoes, feta and mozzarella cheese\",\"price\":\"15.99\",\"icon\":\"/images/1.png\"},{\"name\":\"Chilly Chicken Cordon Bleu\",\"description\":\"Spinash Alfredo sauce topped with grilled chicken, ham, onions and mozzarella\",\"price\":\"23.99\",\"icon\":\"/images/10.png\"},{\"name\":\"Double Bacon 6Cheese\",\"description\":\"Hickory-smoked bacon, Julienne cut Canadian bacon, Parmesan, mozzarella, Romano, Asiago and and Fontina cheese\",\"price\":\"27.99\",\"icon\":\"/images/9.png\"},{\"name\":\"Garden Fresh\",\"description\":\"Slices onions and green peppers, gourmet mushrooms, black olives and ripe Roma tomatoes\",\"price\":\"12.99\",\"icon\":\"/images/3.png\"},{\"name\":\"Grilled Chicken Club\",\"description\":\"Grilled white chicken, hickory-smoked bacon and fresh sliced onions topped with Roma tomatoes\",\"price\":\"23.99\",\"icon\":\"/images/8.png\"},{\"name\":\"Hawaiian BBQ Chicken\",\"description\":\"Grilled white chicken, hickory-smoked bacon, barbeque sauce topped with sweet pine-apple\",\"price\":\"14.99\",\"icon\":\"/images/7.png\"},{\"name\":\"Spicy Italian\",\"description\":\"Pepperoni and a double portion of spicy Italian sausage\",\"price\":\"11.99\",\"icon\":\"/images/2.png\"},{\"name\":\"Spinach Alfredo\",\"description\":\"Rich and creamy blend of spinach and garlic Parmesan with Alfredo sauce\",\"price\":\"9.99\",\"icon\":\"/images/5.png\"},{\"name\":\"Tuscan Six Cheese\",\"description\":\"Six cheese blend of mozzarella, Parmesan, Romano, Asiago and Fontina\",\"price\":\"21.99\",\"icon\":\"/images/4.png\"}]%\n+\n+### Securing APIs deployed in privateJet mode\n+\n+By default the APIs deployed in cloud clusters with k8s-api-operator are secured with JWT authentication. Hence the APIs deployed in privateJet mode are secured with JWT authentication.\n+\n+WSO2 API offers JWT authentication, Oauth2 authentication and Basic authentication mechanisms to secure your API from unauthenticated access in cloud-native API management. \n+\n+In order to secure APIs with above mechanisms,\n+\n+   1. Create the corresponding [security custom resources and secrets](https://github.com/wso2/k8s-api-operator/blob/v1.1.0/docs/HowToGuide/OverviewOfCrds/apply-security-to-api.md)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 231}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb", "author": {"user": null}, "url": "https://github.com/wso2/docs-apim/commit/1b3127391292e7fcfaaccb19593f839aa55873eb", "committedDate": "2020-07-06T05:33:55Z", "message": "adding doc for deploy APIs in privatejet mode"}, "afterCommit": {"oid": "e4624db9218e01b989a78dd0ba9e1a028855a78d", "author": {"user": null}, "url": "https://github.com/wso2/docs-apim/commit/e4624db9218e01b989a78dd0ba9e1a028855a78d", "committedDate": "2020-07-22T10:07:09Z", "message": "modified the doc with requested changes and adding tryout section"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3ODE0NzAx", "url": "https://github.com/wso2/docs-apim/pull/1473#pullrequestreview-447814701", "createdAt": "2020-07-14T06:13:32Z", "commit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNjoxMzozMlrOGxFnNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDo0MzoxNlrOG1c7Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDEyNTM2Nw==", "bodyText": "Without defining these in here, we can use the followings to commands to deploy in K8s.\ncat <<EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: clusterrole-privatejet\nrules:\n- apiGroups: [\"\",\"apiextensions.k8s.io\",\"wso2.com\"]\n  resources: [\"configmaps\",\"customresourcedefinitions\",\"apis\"]\n  verbs: [\"get\", \"post\", \"create\", \"delete\", \"put\", \"list\",\"update\"]\nEOF\n\ncat <<EOF | kubectl apply -f -\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n name: clusterrolebinding-privatejet\nsubjects:\n- kind: ServiceAccount\n  name: wso2sa # Name is case sensitive\n  apiGroup: \"\"\n  namespace: default\nroleRef:\n  kind: ClusterRole\n  name: clusterrole-privatejet\n  apiGroup: rbac.authorization.k8s.io\nEOF", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r454125367", "createdAt": "2020-07-14T06:13:32Z", "author": {"login": "pubudu538"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,321 @@\n+# PrivateJet mode for Microgateways\n+With many of applications gearing towards microservice architecture, it\u2019s no surprise that container-orchestration systems such as Kubernetes have become so popular with functionalities such as automating computer application deployment, scaling, and management, \n+which simplifies a number of complex management tasks. WSO2 API-Manager provides cloud-native API management where user can expose microservices as managed APIs in cloud environments such as Kubernetes with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will expose as managed APIs in cloud clusters in privetJet mode, where each microservice will have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,\n+deployment, scaling, and management tasks will handle by the [WSO2 -Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md) itself.\n+\n+## Configuring APIs to deploy in PrivateJet mode\n+\n+Follow the steps below to configure the PrivateJet mode for Microgateways in API Manager to deploy APIs as managed APIs in cloud clusters. (Ex: Kubernetes)\n+\n+1. Install and setup [Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). In order to expose APIs using ingress controller [deploy the k8s-api-operator in ingress mode](https://github.com/wso2/k8s-api-operator/tree/v1.1.0/scenarios/scenario-17). \n+2. Deploying cluster configurations\n+ \n+    Processes in containers inside pods are authenticated when contacting the apiserver and accessing resources. In order to regulate access to the resources need to establish the RBAC Authorization with at least permissions to, \n+    Create, Delete, Update, Get , List, Post the customresourcedefinitions, apis and configmaps.\n+\n+    i.  Create a service account\n+\n+        kubectl create serviceaccount <service-account name> -n <namespace>\n+\n+    ii. Create a clusterRole\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRole\n+        metadata:\n+          name: clusterrole-privatejet\n+        rules:\n+        - apiGroups: [\"\",\"apiextensions.k8s.io\",\"wso2.com\"]\n+          resources: [\"configmaps\",\"customresourcedefinitions\",\"apis\"]\n+          verbs: [\"get\", \"post\", \"create\", \"delete\", \"put\", \"list\",\"update\"]\n+     \n+    iii. Create a  clusterRoleBinding\n+\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRoleBinding\n+        metadata:\n+          name: clusterrolebinding-privatejet\n+        subjects:\n+        - kind: ServiceAccount\n+          name: wso2am-privatejet # Name is case sensitive\n+          apiGroup: \"\"\n+          namespace: default\n+        roleRef:\n+          kind: ClusterRole\n+          name: clusterrole-privatejet\n+          apiGroup: rbac.authorization.k8s.io\n+                                                                                                                      ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b3127391292e7fcfaaccb19593f839aa55873eb"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODcwMTYxOA==", "bodyText": "This is wrong.", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r458701618", "createdAt": "2020-07-22T10:43:16Z", "author": {"login": "pubudu538"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,342 @@\n+# PrivateJet mode for Microgateways\n+In an age where more and more applications are adopting the microservice architecture, it is obvious that container-orchestration systems such as Kubernetes have gained popularity due to the attractive functionalities they offer to simplify a number of complex management tasks.\n+Automating computer application deployment, scaling, and management are a few of such functionalities to name. WSO2 API Manager provides cloud-native API management, where a user is able to expose microservices as managed APIs in cloud environment such as Kubernetes. \n+This could be done with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will be exposed as managed APIs in cloud clusters in the PrivetJet mode. Here, each microservice wll have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,\n+deployment, scaling, and management tasks will handle by the [WSO2 -Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md) itself.\n+\n+## Enabling PrivateJet mode\n+\n+Follow the steps below to enable PrivateJet mode for Microgateways in API Manager to deploy APIs as managed APIs in cloud clusters. (Ex: Kubernetes)\n+\n+1. Install and setup [Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+2. Follow the prerequisites given below in order to expose APIs using ingress controller.  Go to the README guide of [Expose an API using Ingress](https://github.com/wso2/k8s-api-operator/tree/v1.2.0-alpha/scenarios/scenario-17) for scenarios. \n+\n+    **Prerequisites:**\n+    \n+    i. First install the [Nginx-ingress controller](https://kubernetes.github.io/ingress-nginx/deploy/)\n+    \n+    ii. Navigate to the `api-operator/controller-artifacts` directory and set the operatorMode to `ingress` in the **controler_conf.yaml** file.\n+        \n+        operatorMode: \"ingress\"\n+        \n+    iii. If you have already deployed the operator you have to update operatorMode to `ingress` and apply the changes using following command.\n+    \n+        apictl apply -f api-operator/controller-artifacts/controler_conf.yaml\n+        \n+2. Deploying cluster configurations\n+ \n+    Processes in containers inside pods are authenticated when contacting the apiserver and accessing resources. In order to regulate access to the resources need to establish the RBAC Authorization with at least permissions to, \n+    Create, Delete, Update, Get , List, Post the customresourcedefinitions, apis and configmaps.\n+    \n+    For that we need to create an service account containing an authentication token. ClusterRole which define permissions on cluster-scoped resources can then be bound to this ServiceAccount with a ClusterRoleBinding, so the ServiceAccount is authorized to perform those actions. \n+    \n+    Follow the steps below to regulate access to the resources in the cluster.\n+\n+    i.  Create a service account\n+\n+        kubectl create serviceaccount <service-account name> -n <namespace>\n+        \n+        kubectl create serviceaccount wso2am-privatejet\n+        \n+        ``` json tab=\"Format\"\n+        kubectl create serviceaccount wso2am-privatejet\n+        ```  \n+       \n+        ``` json tab=\"Example\"\n+        Kubernetes = \"org.wso2.carbon.apimgt.impl.containermgt.K8sManager_CustomClass\"\n+        ```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4624db9218e01b989a78dd0ba9e1a028855a78d"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjEzNTIx", "url": "https://github.com/wso2/docs-apim/pull/1473#pullrequestreview-455213521", "createdAt": "2020-07-24T22:18:26Z", "commit": {"oid": "01d5c30663bb353c5351c6859aa3c347eb60ea0d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1MjU4ODU2", "url": "https://github.com/wso2/docs-apim/pull/1473#pullrequestreview-455258856", "createdAt": "2020-07-25T03:59:29Z", "commit": {"oid": "01d5c30663bb353c5351c6859aa3c347eb60ea0d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5ODk3NTcz", "url": "https://github.com/wso2/docs-apim/pull/1473#pullrequestreview-459897573", "createdAt": "2020-08-03T09:52:56Z", "commit": {"oid": "01d5c30663bb353c5351c6859aa3c347eb60ea0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOTo1Mjo1NlrOG6zXMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwOTo1Mjo1NlrOG6zXMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDMxMjExNA==", "bodyText": "This url is wrong. It should be https://:9443/devportal. Check the other place as well.", "url": "https://github.com/wso2/docs-apim/pull/1473#discussion_r464312114", "createdAt": "2020-08-03T09:52:56Z", "author": {"login": "pubudu538"}, "path": "en/docs/learn/api-microgateway/deploy-apis-in-privatejet-mode.md", "diffHunk": "@@ -0,0 +1,354 @@\n+# PrivateJet mode for Microgateways\n+In an age where more and more applications are adopting the microservice architecture, it is obvious that container-orchestration systems such as Kubernetes have gained popularity due to the attractive functionalities they offer to simplify a number of complex management tasks.\n+Automating computer application deployment, scaling, and management are a few of such functionalities to name. WSO2 API Manager provides cloud-native API management, where a user is able to expose microservices as managed APIs in cloud environment such as Kubernetes. \n+This could be done with the support of [WSO2-Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+\n+ ![Architecture]({{base_path}}/assets/img/learn/privatejet-mode/architecture.png)\n+ \n+Microservices will be exposed as managed APIs in cloud clusters in the PrivetJet mode. Here, each microservice wll have a dedicated [WSO2 API Microgateway](https://wso2.com/api-management/api-microgateway/). This will provide maximum security and guaranteed resource allocation for API execution. As depicted in the above diagram, When the APIs published via API-Manager in cloud environments,\n+deployment, scaling, and management tasks will handle by the [WSO2 -Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md) itself.\n+\n+## Enabling PrivateJet mode\n+\n+Follow the steps below to enable PrivateJet mode for Microgateways in API Manager to deploy APIs as managed APIs in cloud clusters. (Ex: Kubernetes)\n+\n+1. Install and setup [Kubernetes API Operator]({{base_path}}/learn/kubernetes-operators/k8s-api-operator.md). \n+2. Follow the prerequisites given below in order to expose APIs using ingress controller.  Go to the README guide of [Expose an API using Ingress](https://github.com/wso2/k8s-api-operator/tree/v1.2.0-alpha/scenarios/scenario-17) for scenarios. \n+\n+    **Prerequisites:**\n+    \n+    i. First install the [Nginx-ingress controller](https://kubernetes.github.io/ingress-nginx/deploy/)\n+    \n+    ii. Navigate to the `api-operator/controller-artifacts` directory and set the operatorMode to `ingress` in the **controler_conf.yaml** file.\n+        \n+        operatorMode: \"ingress\"\n+        \n+    iii. If you have already deployed the operator you have to update operatorMode to `ingress` and apply the changes using following command.\n+    \n+        apictl apply -f api-operator/controller-artifacts/controler_conf.yaml\n+        \n+2. Deploying cluster configurations\n+ \n+    Processes in containers inside pods are authenticated when contacting the apiserver and accessing resources. In order to regulate access to the resources need to establish the RBAC Authorization with at least permissions to, \n+    Create, Delete, Update, Get , List, Post the customresourcedefinitions, apis and configmaps.\n+    \n+    For that we need to create an service account containing an authentication token. ClusterRole which define permissions on cluster-scoped resources can then be bound to this ServiceAccount with a ClusterRoleBinding, so the ServiceAccount is authorized to perform those actions. \n+    \n+    Follow the steps below to regulate access to the resources in the cluster.\n+\n+    i.  Create a service account\n+    \n+    ``` json tab=\"Format\"\n+    kubectl create serviceaccount <service-account name> -n <namespace>\n+    ```  \n+   \n+    ``` json tab=\"Example\"\n+    kubectl create serviceaccount wso2am-privatejet\n+    ```\n+   \n+    ii. Create a clusterRole\n+\n+        cat <<EOF | kubectl apply -f -\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRole\n+        metadata:\n+          name: clusterrole-privatejet\n+        rules:\n+        - apiGroups: [\"\",\"apiextensions.k8s.io\",\"wso2.com\"]\n+          resources: [\"configmaps\",\"customresourcedefinitions\",\"apis\"]\n+          verbs: [\"get\", \"post\", \"create\", \"delete\", \"put\", \"list\",\"update\"]\n+        EOF\n+     \n+    iii. Create a  clusterRoleBinding\n+\n+        cat <<EOF | kubectl apply -f -\n+        apiVersion: rbac.authorization.k8s.io/v1\n+        kind: ClusterRoleBinding\n+        metadata:\n+         name: clusterrolebinding-privatejet\n+        subjects:\n+        - kind: ServiceAccount\n+          name: wso2sa # Name is case sensitive\n+          apiGroup: \"\"\n+          namespace: default\n+        roleRef:\n+          kind: ClusterRole\n+          name: clusterrole-privatejet\n+          apiGroup: rbac.authorization.k8s.io\n+        EOF\n+                                                                                                                   \n+    iv. Obtaining service account token\n+\n+    First you need to get the secret name for your service account. This can be done by executing,\n+    \n+    ``` json tab=\"Format\"\n+    kubectl get secrets -n <serviceaccount-namespace>\n+    ```  \n+   \n+    ``` json tab=\"Example\"\n+    kubectl get secrets \n+    ```\n+     \n+    Then, get the service account token by executing the following command,\n+    \n+    ``` json tab=\"Format\"\n+    kubectl describe secret <secret-name> -n <serviceaccount-namespace> \n+    ```  \n+   \n+    ``` json tab=\"Example\"\n+    kubectl describe secret wso2am-privatejet-token-rsf7q\n+    ```\n+\n+    v. Obtaining the master URL\n+\n+    In order to establish the connection with the cluster need to obtain the Master URL. this be done by executing following command.\n+    \n+        kubectl cluster-info\n+        \n+        Result:\n+        Kubernetes master is running at https://35.223.28.131\n+        GLBCDefaultBackend is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/default-http-backend:http/proxy\n+        Heapster is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/heapster/proxy\n+        KubeDNS is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy\n+        Metrics-server is running at https://35.223.28.131/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy\n+\n+    <html><div class=\"admonition note\">\n+      <p class=\"admonition-title\">Note</p>\n+      <p>If the API-Manager deployed in a kubernetes cluster Master URL and ServiceAccount token are not required to configure. </p>\n+      </div>\n+    </html>\n+    \n+3. Configuring the cluster details.\n+\n+    The cluster configurations carried out in the above step, should be added in the `<API-M_HOME>/repository/conf/deployment.toml` file or in the `tenant-conf.json` file respect to the user.\n+\n+    For the super tenant users the cluster configurations should be added in the `<API-M_HOME>/repository/conf/deployment.toml` file as follows.\n+    \n+    ``` json tab=\"Format\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"<cloud-environment-type>\"\n+    clusterName = \"<cluster-name>\"\n+    displayName = \"<cluster-name-to_display>\"\n+    properties.Replicas = \"<number-of-replicas>\"\n+    properties.AccessURL = \"<access-URL>\"\n+    properties.MasterURL = \"<Master-URL-of-clsuter>\"\n+    properties.SAToken = \"<serviceacccount-token>\"\n+    properties.Namespace = \"<namespcae>\"\n+    ```\n+\n+    ``` json tab=\"Example\"\n+    [[ContainerMgtClusterConfig]]\n+    type = \"Kubernetes\"\n+    clusterName = \"docker-desktop\"\n+    displayName = \"cluster-1\"\n+    properties.Replicas = 1\n+    properties.AccessURL = \"https://internal.wso2.com\"\n+    properties.MasterURL = \"https://kubernetes.docker.internal:6443\"\n+    properties.SAToken = \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg2UlYySEFkaVBOVG4zZ3FhWERXQUxQVUQ0bjlzOXE3dFhpbUZNZlFiRjQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3c28yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6IndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQtdG9rZW4tZGR0OTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NvMmFtLXBhdHRlcm4tMS1zdmMtYWNjb3VudCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijc3NmRmMjFkLTA3NjItNDM2Zi05ZDIwLTZlYzFkODMxYzc1NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDp3c28yOndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQifQ.YwlSgnSnwS7BNP0q0iDHsjlq_r3RhobG-SrduuEi35VXNfipPsK3UVJcCBmDKQOzKAxRG9415h2pr3cS-QsM6PR_UU2UWlXiUO-3UtSMqVY48Ek_1wdfmfCkiE7IOeua_58CV15tXtMLom0Oh27nkmWGfTHVvImQnqho4nv26BKZH4vKWgkw0HpMt73KHdN6SlVMK0cynktO5H-2A4V2rh-uL-OUXCLON_sBypVoPc9PAMxHo-bUe0SqBPiM0SiALu-0-J6dBcwbzPb5g-yUZmHmtuw3O32C304Hgfr-4Dui3X5DSKBSeqlrjjjfrvMVNug0J4JKk3bJ56h0OgujFw\"\n+    properties.Namespace = \"default\"\n+    ```\n+         \n+       Tenant users, can edit the cluster configurations in `tenant-conf.json` file. Log in to the Management Console ( `https://<hostname>:9443/carbon` ) and edit the tenant-conf.json file in `/_system/config/apimgt/applicationdata/` path.\n+       \n+    ``` json tab=\"Format\"\n+    \"ContainerMgt\": [\n+      {\n+        \"Type\": \"Kubernetes\",\n+        \"ContainerMgtInfo\": [\n+        {\n+          \"ClusterName\": \"\",\n+          \"DisplayName\": \"\",\n+          \"Properties\": {\n+            \"MasterURL\": \"\",\n+            \"AccessURL\": \"\",\n+            \"SAToken\": \"\",\n+            \"Namespace\": \"default\",\n+            \"Replicas\": 1\n+            }\n+          }\n+        ]\n+      }\n+    ]\n+    ```\n+    \n+    ``` json tab=\"Example\"\n+    \"ContainerMgt\": [\n+      {\n+        \"Type\": \"Kubernetes\",\n+        \"ContainerMgtInfo\": [\n+         {\n+           \"ClusterName\": \"docker-desktop\",\n+           \"DisplayName\": \"cluster-1\",\n+           \"Properties\": {\n+           \"MasterURL\": \"https://kubernetes.docker.internal:6443\",\n+           \"AccessURL\": \"https://internal.wso2.com\",\n+           \"SAToken\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6Ijg2UlYySEFkaVBOVG4zZ3FhWERXQUxQVUQ0bjlzOXE3dFhpbUZNZlFiRjQifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJ3c28yIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6IndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQtdG9rZW4tZGR0OTkiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoid3NvMmFtLXBhdHRlcm4tMS1zdmMtYWNjb3VudCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50LnVpZCI6Ijc3NmRmMjFkLTA3NjItNDM2Zi05ZDIwLTZlYzFkODMxYzc1NSIsInN1YiI6InN5c3RlbTpzZXJ2aWNlYWNjb3VudDp3c28yOndzbzJhbS1wYXR0ZXJuLTEtc3ZjLWFjY291bnQifQ.YwlSgnSnwS7BNP0q0iDHsjlq_r3RhobG-SrduuEi35VXNfipPsK3UVJcCBmDKQOzKAxRG9415h2pr3cS-QsM6PR_UU2UWlXiUO-3UtSMqVY48Ek_1wdfmfCkiE7IOeua_58CV15tXtMLom0Oh27nkmWGfTHVvImQnqho4nv26BKZH4vKWgkw0HpMt73KHdN6SlVMK0cynktO5H-2A4V2rh-uL-OUXCLON_sBypVoPc9PAMxHo-bUe0SqBPiM0SiALu-0-J6dBcwbzPb5g-yUZmHmtuw3O32C304Hgfr-4Dui3X5DSKBSeqlrjjjfrvMVNug0J4JKk3bJ56h0OgujFw\",\n+           \"Namespace\": \"default\",\n+           \"Replicas\": 1\n+            }\n+          }\n+        ]\n+      }\n+    ]\n+    ```\n+ \n+     <html><div class=\"admonition note\">\n+        <p class=\"admonition-title\">Note</p>\n+        <p> Super tenant users can customize the container management implementations if required. Then customize classes should be added to the `<API-M_HOME>/repository/conf/deployment.toml` file as follows. </p>   \n+        \n+    ``` json tab=\"Format\"\n+    [ContainerMgtConfig]\n+    <Environment-type> = \"<class-name>\"\n+    ```  \n+   \n+    ``` json tab=\"Example\"\n+    [ContainerMgtConfig]\n+    Kubernetes = \"org.wso2.carbon.apimgt.impl.containermgt.K8sManager_CustomClass\"\n+    ```\n+  \n+      </div>\n+      </html>\n+         \n+4. Start the server and create an API in publisher\n+    \n+    After setting up configurations go to the <API-M-HOME>/bin directory and start the server. Then Sign in to the WSO2 API Publisher and [create a new API]({{base_path}}/learn/design-api/create-api/create-a-rest-api.md).\n+    \n+5. Select the clusters from environment tab\n+\n+    Navigate to the environment tab by clicking on the `Environments` in the navigation bar, and select the clusters to deploy the API.\n+    \n+     ![Environments]({{base_path}}/assets/img/learn/privatejet-mode/environment.png)\n+    \n+6. Go to lifecycle tab by clicking on the `Lifecycle` in the navigation bar, and publish the API.\n+\n+    Navigate to the lifecycle tab and publish the API. This will expose microservices as managed APIs in selected clusters.\n+    \n+     ![API LifeCycle]({{base_path}}/assets/img/learn/privatejet-mode/lifecycle_publish.png)\n+     \n+7. Go to the Developer Portal ( `https://<hostname>:9443/carbon` ) or click **View in Dev Portal** in the API Publisher and navigate to the Overview tab by clicking on the `Overview` in the navigation bar, and get the accessURL to access the deployed API Log in to the Management Console \n+   \n+    To obtain the accessURL configured, Sign in to the WSO2 Developer Portal overview page. The accessURL can be seen under Gateway Environments.\n+   \n+    ![Developer portal - Overview]({{base_path}}/assets/img/learn/privatejet-mode/devportal.png)\n+   \n+8. Invoking the API\n+    \n+    i. Sign in to the Developer Portal ( `https://<hostname>:9443/carbon` ). Subscribe to the API and obtain an access token required to invoke the API.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01d5c30663bb353c5351c6859aa3c347eb60ea0d"}, "originalPosition": 236}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6089734bc656916aa9ae9bfd26723d5d6e752cb", "author": {"user": null}, "url": "https://github.com/wso2/docs-apim/commit/f6089734bc656916aa9ae9bfd26723d5d6e752cb", "committedDate": "2020-08-04T04:36:23Z", "message": "adding doc for deploy APIs in privatejet mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcc802b10dc8e1698a7191b58ad6040404cb2432", "author": {"user": null}, "url": "https://github.com/wso2/docs-apim/commit/dcc802b10dc8e1698a7191b58ad6040404cb2432", "committedDate": "2020-08-04T04:36:23Z", "message": "modified the doc with requested changes and adding tryout section"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee614fc8af6df620b4d7d9f632c1498d6dc0fe3c", "author": {"user": null}, "url": "https://github.com/wso2/docs-apim/commit/ee614fc8af6df620b4d7d9f632c1498d6dc0fe3c", "committedDate": "2020-08-04T04:36:23Z", "message": "fixing wrong contents and adding requested changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f18fcf67aacd48da178b0bcc8233e2ef242c8598", "author": {"user": null}, "url": "https://github.com/wso2/docs-apim/commit/f18fcf67aacd48da178b0bcc8233e2ef242c8598", "committedDate": "2020-08-04T04:40:39Z", "message": "correcting devportal URL"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "01d5c30663bb353c5351c6859aa3c347eb60ea0d", "author": {"user": null}, "url": "https://github.com/wso2/docs-apim/commit/01d5c30663bb353c5351c6859aa3c347eb60ea0d", "committedDate": "2020-07-22T11:56:25Z", "message": "fixing wrong contents and adding requested changes"}, "afterCommit": {"oid": "f18fcf67aacd48da178b0bcc8233e2ef242c8598", "author": {"user": null}, "url": "https://github.com/wso2/docs-apim/commit/f18fcf67aacd48da178b0bcc8233e2ef242c8598", "committedDate": "2020-08-04T04:40:39Z", "message": "correcting devportal URL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3da8c2f53c30a39bc59d178e12bded1fbfa33280", "author": {"user": null}, "url": "https://github.com/wso2/docs-apim/commit/3da8c2f53c30a39bc59d178e12bded1fbfa33280", "committedDate": "2020-08-04T04:44:57Z", "message": "correcting devportal URLs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxODgyNTM1", "url": "https://github.com/wso2/docs-apim/pull/1473#pullrequestreview-461882535", "createdAt": "2020-08-05T17:36:53Z", "commit": {"oid": "3da8c2f53c30a39bc59d178e12bded1fbfa33280"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1769, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}