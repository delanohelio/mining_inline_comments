{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNDU2MDY5", "number": 1449, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwMToyMDowMVrOENdF5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwMToyMDowMVrOENdF5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNTQzNTg5OnYy", "diffSide": "RIGHT", "path": "en/docs/learn/tutorials/edit-an-api-by-modifyng-the-api-definition.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwMToyMDowMVrOGwJURw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMVQwMToyMDowMVrOGwJURw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzEzNzQ3OQ==", "bodyText": "The ** ** at the end of the sentence on lines 46 and 47 are a mistake as it is not bolding anything.", "url": "https://github.com/wso2/docs-apim/pull/1449#discussion_r453137479", "createdAt": "2020-07-11T01:20:01Z", "author": {"login": "Mariangela"}, "path": "en/docs/learn/tutorials/edit-an-api-by-modifyng-the-api-definition.md", "diffHunk": "@@ -0,0 +1,213 @@\n+# Edit an API by modifying the API Definition\n+ \n+WSO2 API Manager has an integrated Swagger Editor, which is part of the Swagger project.\n+\n+[Swagger](http://swagger.io/) is a 100% open source, standard,\u00a0language-agnostic\u00a0specification and a complete framework for describing, producing, consuming, and visualizing RESTful APIs, without the need of a proxy or third-party services.\u00a0Swagger allows consumers to understand the capabilities of a remote service without accessing its source code, and interact with the service with a minimal amount of implementation logic. Swagger helps describe a service in the same way that interfaces describe lower-level programming code.\n+\n+The [Swagger Editor](https://github.com/swagger-api/swagger-editor) is a dependency-free collection of HTML, JavaScript, and CSS that dynamically generate documentation from a Swagger-compliant API.\u00a0Swagger-compliant APIs give you interactive documentation, client SDK generation, and more discoverability. The Swagger Editor has JSON code and its UI facilitates easier code indentation, keyword highlighting and shows syntax errors on the fly. You can add resource parameters, summaries and descriptions to your APIs using the Swagger Editor.\n+\n+API Manager supports [Open API 3.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md) and [Open API 2.0](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) specifications and you can simply create, import, edit and consume the APIs defined in both specifications.\n+\n+In this tutorial, let's see how you can add interactive documentation to an API by directly editing the Swagger code via the API Publisher UI.\n+\n+!!! note\n+    This tutorial uses the `PizzaShack` API created in [Create a REST API]({{base_path}}/learn/design-api/create-api/create-a-rest-api/) section and Published in the [Publish an API]({{base_path}}/learn/design-api/publish-api/publish-an-api/) section.\n+ .\n+\n+\n+1.  Sign in to the\u00a0API Publisher and choose to design a new REST API. `https://<hostname>:9443/publisher`\n+\n+    ![create_a_rest_api]({{base_path}}/assets/img/learn/create-a-rest-api.jpg)\n+\n+\n+2.  Click **Design a New REST API** .\n+\n+3.  In the **Create an API** page,\u00a0give an API name, a context a version and the endpoint as follows and click **Create**. \n+\n+    <table><colgroup> <col/> <col/> <col/> </colgroup><tbody><tr><th colspan=\"2\" >Field</th><th >Sample value</th></tr><tr><td colspan=\"2\" class=\"confluenceTd\">Name</td><td class=\"confluenceTd\">PizzaShack</td></tr><tr><td colspan=\"2\" class=\"confluenceTd\">Version</td><td colspan=\"1\" class=\"confluenceTd\">1.0.0</td></tr><tr><td colspan=\"2\" class=\"confluenceTd\">Context</td><td class=\"confluenceTd\"><div class=\"content-wrapper\"><p><code>/pizzashack</code></p><div><div class=\"confluence-information-macro-body\"></div><div class=\"confluence-information-macro confluence-information-macro-tip\"><span class=\"aui-icon aui-icon-small aui-iconfont-approve confluence-information-macro-icon\"></span><div class=\"confluence-information-macro-body\"></div></div></div></div></td></tr><tr><td colspan=\"2\" class=\"confluenceTd\">Endpoint</td><td colspan=\"1\" class=\"confluenceTd\"><p><a class=\"external-link\" href=\"https://localhost:9443/am/sample/pizzashack/v1/api\" rel=\"nofollow\">https://localhost:9443/am/sample/pizzashack/v1/api/</a></p><p>The endpoint that you add is automatically added as the production and sandbox endpoints.</p></td></tr></tbody></table>\n+         \n+    ![create_an_API]({{base_path}}/assets/img/learn/tutorials/create-a-rest-api-pizzashack.png)\n+\n+    The **Overview** of the created API will be displayed. \n+\n+    ![create_a_rest_api]({{base_path}}/assets/img/learn/overviewpage-rest-api.jpg)\n+\n+\n+4. Click on **API definition** to view the API Definition in the swagger UI.\n+    The Swagger UI opens.\n+    ![]({{base_path}}/assets/img/learn/tutorials/rest-api-definition-pizzashack.png)\n+  \n+5. Add the following GET and PUT method for the API.\n+       1. Under the `paths` object, remove the `{}` and add the following code,\u00a0as shown in the screenshot below.\n+\n+        !!! tip\n+            In the code below, note that you have a resource defined with the URL pattern `/order/{orderId}` under the `paths` object. This is followed by the HTTP methods GET and PUT. For each HTTP method, the following parameters are defined.\n+            \n+            -   **responses:** An object to hold responses that can be used across operations. See the Swagger specification for details. **\n+            **", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cfdd44c0f0f9369ed8f8d53601e2211ee7d740b9"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1629, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}