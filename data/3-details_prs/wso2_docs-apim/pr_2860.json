{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ1MjU1MTM1", "number": 2860, "title": "Fixing https://github.com/wso2/docs-apim/issues/1104", "bodyText": "Purpose\nAdd new examples for customization.\nFixing: Fixing #1104\nNeed to modify this for 3.2, 3.0 and master after the review is done on this PR.", "createdAt": "2020-12-24T10:35:13Z", "url": "https://github.com/wso2/docs-apim/pull/2860", "merged": true, "mergeCommit": {"oid": "250e2cfd590220de34c12d8cf6719e6f2b7c2865"}, "closed": true, "closedAt": "2021-02-10T10:04:40Z", "author": {"login": "chanaka3d"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdvbSZAAFqTU2NjI3MDI4NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABd4tmUzgFqTU4NzQzNzgyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY2MjcwMjg1", "url": "https://github.com/wso2/docs-apim/pull/2860#pullrequestreview-566270285", "createdAt": "2021-01-12T13:34:02Z", "commit": {"oid": "2c5d7b9991ce415cd92500d15775562c368ac3d6"}, "state": "DISMISSED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxMzozNDowMlrOISBpkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQxMzozNzo0NFrOISBy1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc3MjMwNw==", "bodyText": "are they really called welcomeFiles?", "url": "https://github.com/wso2/docs-apim/pull/2860#discussion_r555772307", "createdAt": "2021-01-12T13:34:02Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/customizations/advanced-ui-customization.md", "diffHunk": "@@ -0,0 +1,402 @@\n+# Advanced UI Customizations\n+\n+In most cases,  you can customize the WSO2 API-M Developer Portal and Publisher Portal without editing the React codebase or the CSS. You will be required to modify the React codebase only if you need to do advanced customizations.\n+\n+## Portal's folder Structure\n+\n+First, let\u2019s explore the portal\u2019s folder structure. \n+The source of the publisher and developer portal resides in the following directory. \n+\n+```\n+<API_MANAGER_ROOT>/repository/deployment/server/jaggeryapps/\n+``` \n+\n+ ![folder structure]({{base_path}}/assets/img/learn/ui-customize-pic0.png)\n+\n+We ship the React apps source code along with the distribution to allow customization.  Elsewise, you will not need the React application source code in the run time. The primary folder structure is the same for both the publisher and developer portals. Let\u2019s look at the source code organization.\n+\n+**override**\n+\n+This folder includes the customizations done to override the default React UI components. This folder is empty in the vanilla distribution.\n+\n+**services**\n+\n+This directory contains the utility services that are required to run the web portals. Even though the React UI portals are full client-side rendered(CSR) apps, We still need services or proxies for some operations, Such as\n+\n+- Authentication\n+- Reverse proxy\n+- Custom URLs\n+\n+**site**\n+\n+The site folder contains all the static files (from JS bundles, locale files, theme JSON to favicon, etc.) required for the portals to run in the browser.  The site folder includes the following folder structure.\n+\n+<API_MANAGER_ROOT>/repository/deployment/server/jaggeryapps/<WEBAPP>/site/public/dist/\n+This directory contains the generated ReactJS application bundles and their source map files.\n+\n+**source**\n+\n+This directory contains the Javascript source codes. It includes both the implementation and tests. Note that these files do not get loaded into the browser at runtime. \n+We have split the implementation section into two aspects; data and components. Data contains pure javascript implementations of data handling (REST API innovation), utility functions, and data models (user class), whereas the components directory includes the ReactJS component implementations.  The complete component hierarchy of the publisher portal is in this folder. This separation makes the data handling elements shareable and usable in non- ReactJS based projec\n+\n+**jaggery.conf**\n+\n+This is a configuration file used for web apps in Jaggery web server. It contains\n+\n+routing rules(urlMappings)\n+security constraints\n+welcomeFiles", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c5d7b9991ce415cd92500d15775562c368ac3d6"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc3Mjc1NQ==", "bodyText": "please add the correct link here", "url": "https://github.com/wso2/docs-apim/pull/2860#discussion_r555772755", "createdAt": "2021-01-12T13:34:46Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/customizations/advanced-ui-customization.md", "diffHunk": "@@ -0,0 +1,402 @@\n+# Advanced UI Customizations\n+\n+In most cases,  you can customize the WSO2 API-M Developer Portal and Publisher Portal without editing the React codebase or the CSS. You will be required to modify the React codebase only if you need to do advanced customizations.\n+\n+## Portal's folder Structure\n+\n+First, let\u2019s explore the portal\u2019s folder structure. \n+The source of the publisher and developer portal resides in the following directory. \n+\n+```\n+<API_MANAGER_ROOT>/repository/deployment/server/jaggeryapps/\n+``` \n+\n+ ![folder structure]({{base_path}}/assets/img/learn/ui-customize-pic0.png)\n+\n+We ship the React apps source code along with the distribution to allow customization.  Elsewise, you will not need the React application source code in the run time. The primary folder structure is the same for both the publisher and developer portals. Let\u2019s look at the source code organization.\n+\n+**override**\n+\n+This folder includes the customizations done to override the default React UI components. This folder is empty in the vanilla distribution.\n+\n+**services**\n+\n+This directory contains the utility services that are required to run the web portals. Even though the React UI portals are full client-side rendered(CSR) apps, We still need services or proxies for some operations, Such as\n+\n+- Authentication\n+- Reverse proxy\n+- Custom URLs\n+\n+**site**\n+\n+The site folder contains all the static files (from JS bundles, locale files, theme JSON to favicon, etc.) required for the portals to run in the browser.  The site folder includes the following folder structure.\n+\n+<API_MANAGER_ROOT>/repository/deployment/server/jaggeryapps/<WEBAPP>/site/public/dist/\n+This directory contains the generated ReactJS application bundles and their source map files.\n+\n+**source**\n+\n+This directory contains the Javascript source codes. It includes both the implementation and tests. Note that these files do not get loaded into the browser at runtime. \n+We have split the implementation section into two aspects; data and components. Data contains pure javascript implementations of data handling (REST API innovation), utility functions, and data models (user class), whereas the components directory includes the ReactJS component implementations.  The complete component hierarchy of the publisher portal is in this folder. This separation makes the data handling elements shareable and usable in non- ReactJS based projec\n+\n+**jaggery.conf**\n+\n+This is a configuration file used for web apps in Jaggery web server. It contains\n+\n+routing rules(urlMappings)\n+security constraints\n+welcomeFiles\n+and other jaggery app-related configurations.\n+\n+If you are new to JaggeryJS, JaggeryJS is a javascript backend server that can render jaggery style .jag (like Pug) templates into HTML. Simply put, it\u2019s similar to NodeJS + Express.\n+\n+**Others**\n+\n+This folder includes the rest of the files which are runtime configurations for eslint, jest, webpack, and npm. \n+\n+## Making advanced UI customizations to the WSO2 API-M Publisher and Developer Portal UIs\n+\n+Follow the instructions below to add advanced UI customizations to the Developer Portal and/or Publisher. \n+\n+!!! note \"Before you Begin...\"  \n+    Make sure the following is installed in your system.\n+        - **NodeJS** (minimum 8.12.0) - This is a platform required for ReactJS development.\n+        - **NPM**(minimum 5.7.0)\n+\n+1. Navigate to the `<API-M_HOME>/repository/deployment/server/jaggeryapps/<APP-ROOT>` directory in a terminal and run the following command. ( `<APP-ROOT>` is publisher or devportal ). This will install the local package dependencies in the publisher/devportal applications.\n+\n+     ```js\n+     npm ci\n+     ```\n+\n+     \n+2. Build the project (enabling hot deployment) \n+\n+     Run the following command to start the npm build. Note that it will continuously watch for any changes and rebuild the project. For more information see [Building the source for hot deployment](#Building the source for hot deployment) ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c5d7b9991ce415cd92500d15775562c368ac3d6"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc3Mjg4Mw==", "bodyText": "add the correct link here", "url": "https://github.com/wso2/docs-apim/pull/2860#discussion_r555772883", "createdAt": "2021-01-12T13:34:58Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/customizations/advanced-ui-customization.md", "diffHunk": "@@ -0,0 +1,402 @@\n+# Advanced UI Customizations\n+\n+In most cases,  you can customize the WSO2 API-M Developer Portal and Publisher Portal without editing the React codebase or the CSS. You will be required to modify the React codebase only if you need to do advanced customizations.\n+\n+## Portal's folder Structure\n+\n+First, let\u2019s explore the portal\u2019s folder structure. \n+The source of the publisher and developer portal resides in the following directory. \n+\n+```\n+<API_MANAGER_ROOT>/repository/deployment/server/jaggeryapps/\n+``` \n+\n+ ![folder structure]({{base_path}}/assets/img/learn/ui-customize-pic0.png)\n+\n+We ship the React apps source code along with the distribution to allow customization.  Elsewise, you will not need the React application source code in the run time. The primary folder structure is the same for both the publisher and developer portals. Let\u2019s look at the source code organization.\n+\n+**override**\n+\n+This folder includes the customizations done to override the default React UI components. This folder is empty in the vanilla distribution.\n+\n+**services**\n+\n+This directory contains the utility services that are required to run the web portals. Even though the React UI portals are full client-side rendered(CSR) apps, We still need services or proxies for some operations, Such as\n+\n+- Authentication\n+- Reverse proxy\n+- Custom URLs\n+\n+**site**\n+\n+The site folder contains all the static files (from JS bundles, locale files, theme JSON to favicon, etc.) required for the portals to run in the browser.  The site folder includes the following folder structure.\n+\n+<API_MANAGER_ROOT>/repository/deployment/server/jaggeryapps/<WEBAPP>/site/public/dist/\n+This directory contains the generated ReactJS application bundles and their source map files.\n+\n+**source**\n+\n+This directory contains the Javascript source codes. It includes both the implementation and tests. Note that these files do not get loaded into the browser at runtime. \n+We have split the implementation section into two aspects; data and components. Data contains pure javascript implementations of data handling (REST API innovation), utility functions, and data models (user class), whereas the components directory includes the ReactJS component implementations.  The complete component hierarchy of the publisher portal is in this folder. This separation makes the data handling elements shareable and usable in non- ReactJS based projec\n+\n+**jaggery.conf**\n+\n+This is a configuration file used for web apps in Jaggery web server. It contains\n+\n+routing rules(urlMappings)\n+security constraints\n+welcomeFiles\n+and other jaggery app-related configurations.\n+\n+If you are new to JaggeryJS, JaggeryJS is a javascript backend server that can render jaggery style .jag (like Pug) templates into HTML. Simply put, it\u2019s similar to NodeJS + Express.\n+\n+**Others**\n+\n+This folder includes the rest of the files which are runtime configurations for eslint, jest, webpack, and npm. \n+\n+## Making advanced UI customizations to the WSO2 API-M Publisher and Developer Portal UIs\n+\n+Follow the instructions below to add advanced UI customizations to the Developer Portal and/or Publisher. \n+\n+!!! note \"Before you Begin...\"  \n+    Make sure the following is installed in your system.\n+        - **NodeJS** (minimum 8.12.0) - This is a platform required for ReactJS development.\n+        - **NPM**(minimum 5.7.0)\n+\n+1. Navigate to the `<API-M_HOME>/repository/deployment/server/jaggeryapps/<APP-ROOT>` directory in a terminal and run the following command. ( `<APP-ROOT>` is publisher or devportal ). This will install the local package dependencies in the publisher/devportal applications.\n+\n+     ```js\n+     npm ci\n+     ```\n+\n+     \n+2. Build the project (enabling hot deployment) \n+\n+     Run the following command to start the npm build. Note that it will continuously watch for any changes and rebuild the project. For more information see [Building the source for hot deployment](#Building the source for hot deployment) \n+\n+    ```\n+    npm run build:dev\n+    ```\n+    !!! note \"Production deployment\"\n+        The development build is not optimized and contains a large bundle size. Make sure to use the production build when the customizations are ready for production. Use the following command to get the production-ready build.\n+        \n+        ```\n+        npm run build:prod\n+        ```\n+3. Customizing the UI \n+\n+     - If you want to override a specific React component or a file from the `<WEBAPP>/source/src/` directory, you need to make the changes in the following directory by only copying the desired file(s). For more information see [Overriding the UI components](#Overriding the UI components)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c5d7b9991ce415cd92500d15775562c368ac3d6"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc3MzQ0Mw==", "bodyText": "this path says Documents.jsx  and the folder structure has a file Documentation.jsx", "url": "https://github.com/wso2/docs-apim/pull/2860#discussion_r555773443", "createdAt": "2021-01-12T13:35:52Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/customizations/advanced-ui-customization.md", "diffHunk": "@@ -0,0 +1,402 @@\n+# Advanced UI Customizations\n+\n+In most cases,  you can customize the WSO2 API-M Developer Portal and Publisher Portal without editing the React codebase or the CSS. You will be required to modify the React codebase only if you need to do advanced customizations.\n+\n+## Portal's folder Structure\n+\n+First, let\u2019s explore the portal\u2019s folder structure. \n+The source of the publisher and developer portal resides in the following directory. \n+\n+```\n+<API_MANAGER_ROOT>/repository/deployment/server/jaggeryapps/\n+``` \n+\n+ ![folder structure]({{base_path}}/assets/img/learn/ui-customize-pic0.png)\n+\n+We ship the React apps source code along with the distribution to allow customization.  Elsewise, you will not need the React application source code in the run time. The primary folder structure is the same for both the publisher and developer portals. Let\u2019s look at the source code organization.\n+\n+**override**\n+\n+This folder includes the customizations done to override the default React UI components. This folder is empty in the vanilla distribution.\n+\n+**services**\n+\n+This directory contains the utility services that are required to run the web portals. Even though the React UI portals are full client-side rendered(CSR) apps, We still need services or proxies for some operations, Such as\n+\n+- Authentication\n+- Reverse proxy\n+- Custom URLs\n+\n+**site**\n+\n+The site folder contains all the static files (from JS bundles, locale files, theme JSON to favicon, etc.) required for the portals to run in the browser.  The site folder includes the following folder structure.\n+\n+<API_MANAGER_ROOT>/repository/deployment/server/jaggeryapps/<WEBAPP>/site/public/dist/\n+This directory contains the generated ReactJS application bundles and their source map files.\n+\n+**source**\n+\n+This directory contains the Javascript source codes. It includes both the implementation and tests. Note that these files do not get loaded into the browser at runtime. \n+We have split the implementation section into two aspects; data and components. Data contains pure javascript implementations of data handling (REST API innovation), utility functions, and data models (user class), whereas the components directory includes the ReactJS component implementations.  The complete component hierarchy of the publisher portal is in this folder. This separation makes the data handling elements shareable and usable in non- ReactJS based projec\n+\n+**jaggery.conf**\n+\n+This is a configuration file used for web apps in Jaggery web server. It contains\n+\n+routing rules(urlMappings)\n+security constraints\n+welcomeFiles\n+and other jaggery app-related configurations.\n+\n+If you are new to JaggeryJS, JaggeryJS is a javascript backend server that can render jaggery style .jag (like Pug) templates into HTML. Simply put, it\u2019s similar to NodeJS + Express.\n+\n+**Others**\n+\n+This folder includes the rest of the files which are runtime configurations for eslint, jest, webpack, and npm. \n+\n+## Making advanced UI customizations to the WSO2 API-M Publisher and Developer Portal UIs\n+\n+Follow the instructions below to add advanced UI customizations to the Developer Portal and/or Publisher. \n+\n+!!! note \"Before you Begin...\"  \n+    Make sure the following is installed in your system.\n+        - **NodeJS** (minimum 8.12.0) - This is a platform required for ReactJS development.\n+        - **NPM**(minimum 5.7.0)\n+\n+1. Navigate to the `<API-M_HOME>/repository/deployment/server/jaggeryapps/<APP-ROOT>` directory in a terminal and run the following command. ( `<APP-ROOT>` is publisher or devportal ). This will install the local package dependencies in the publisher/devportal applications.\n+\n+     ```js\n+     npm ci\n+     ```\n+\n+     \n+2. Build the project (enabling hot deployment) \n+\n+     Run the following command to start the npm build. Note that it will continuously watch for any changes and rebuild the project. For more information see [Building the source for hot deployment](#Building the source for hot deployment) \n+\n+    ```\n+    npm run build:dev\n+    ```\n+    !!! note \"Production deployment\"\n+        The development build is not optimized and contains a large bundle size. Make sure to use the production build when the customizations are ready for production. Use the following command to get the production-ready build.\n+        \n+        ```\n+        npm run build:prod\n+        ```\n+3. Customizing the UI \n+\n+     - If you want to override a specific React component or a file from the `<WEBAPP>/source/src/` directory, you need to make the changes in the following directory by only copying the desired file(s). For more information see [Overriding the UI components](#Overriding the UI components)\n+         - `<WEBAPP>/override/src`\n+\n+### Overriding the UI components\n+\n+Files added in the following folder structure in the devportal/overrides folder will override the original file at devportal/source/src/app/components/Apis/Details/Documents/Documents.jsx. See the samples below for a detailed explanation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c5d7b9991ce415cd92500d15775562c368ac3d6"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc3Mzc4OQ==", "bodyText": "Is this the only file we need to add, or any other files we can add?", "url": "https://github.com/wso2/docs-apim/pull/2860#discussion_r555773789", "createdAt": "2021-01-12T13:36:23Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/customizations/advanced-ui-customization.md", "diffHunk": "@@ -0,0 +1,402 @@\n+# Advanced UI Customizations\n+\n+In most cases,  you can customize the WSO2 API-M Developer Portal and Publisher Portal without editing the React codebase or the CSS. You will be required to modify the React codebase only if you need to do advanced customizations.\n+\n+## Portal's folder Structure\n+\n+First, let\u2019s explore the portal\u2019s folder structure. \n+The source of the publisher and developer portal resides in the following directory. \n+\n+```\n+<API_MANAGER_ROOT>/repository/deployment/server/jaggeryapps/\n+``` \n+\n+ ![folder structure]({{base_path}}/assets/img/learn/ui-customize-pic0.png)\n+\n+We ship the React apps source code along with the distribution to allow customization.  Elsewise, you will not need the React application source code in the run time. The primary folder structure is the same for both the publisher and developer portals. Let\u2019s look at the source code organization.\n+\n+**override**\n+\n+This folder includes the customizations done to override the default React UI components. This folder is empty in the vanilla distribution.\n+\n+**services**\n+\n+This directory contains the utility services that are required to run the web portals. Even though the React UI portals are full client-side rendered(CSR) apps, We still need services or proxies for some operations, Such as\n+\n+- Authentication\n+- Reverse proxy\n+- Custom URLs\n+\n+**site**\n+\n+The site folder contains all the static files (from JS bundles, locale files, theme JSON to favicon, etc.) required for the portals to run in the browser.  The site folder includes the following folder structure.\n+\n+<API_MANAGER_ROOT>/repository/deployment/server/jaggeryapps/<WEBAPP>/site/public/dist/\n+This directory contains the generated ReactJS application bundles and their source map files.\n+\n+**source**\n+\n+This directory contains the Javascript source codes. It includes both the implementation and tests. Note that these files do not get loaded into the browser at runtime. \n+We have split the implementation section into two aspects; data and components. Data contains pure javascript implementations of data handling (REST API innovation), utility functions, and data models (user class), whereas the components directory includes the ReactJS component implementations.  The complete component hierarchy of the publisher portal is in this folder. This separation makes the data handling elements shareable and usable in non- ReactJS based projec\n+\n+**jaggery.conf**\n+\n+This is a configuration file used for web apps in Jaggery web server. It contains\n+\n+routing rules(urlMappings)\n+security constraints\n+welcomeFiles\n+and other jaggery app-related configurations.\n+\n+If you are new to JaggeryJS, JaggeryJS is a javascript backend server that can render jaggery style .jag (like Pug) templates into HTML. Simply put, it\u2019s similar to NodeJS + Express.\n+\n+**Others**\n+\n+This folder includes the rest of the files which are runtime configurations for eslint, jest, webpack, and npm. \n+\n+## Making advanced UI customizations to the WSO2 API-M Publisher and Developer Portal UIs\n+\n+Follow the instructions below to add advanced UI customizations to the Developer Portal and/or Publisher. \n+\n+!!! note \"Before you Begin...\"  \n+    Make sure the following is installed in your system.\n+        - **NodeJS** (minimum 8.12.0) - This is a platform required for ReactJS development.\n+        - **NPM**(minimum 5.7.0)\n+\n+1. Navigate to the `<API-M_HOME>/repository/deployment/server/jaggeryapps/<APP-ROOT>` directory in a terminal and run the following command. ( `<APP-ROOT>` is publisher or devportal ). This will install the local package dependencies in the publisher/devportal applications.\n+\n+     ```js\n+     npm ci\n+     ```\n+\n+     \n+2. Build the project (enabling hot deployment) \n+\n+     Run the following command to start the npm build. Note that it will continuously watch for any changes and rebuild the project. For more information see [Building the source for hot deployment](#Building the source for hot deployment) \n+\n+    ```\n+    npm run build:dev\n+    ```\n+    !!! note \"Production deployment\"\n+        The development build is not optimized and contains a large bundle size. Make sure to use the production build when the customizations are ready for production. Use the following command to get the production-ready build.\n+        \n+        ```\n+        npm run build:prod\n+        ```\n+3. Customizing the UI \n+\n+     - If you want to override a specific React component or a file from the `<WEBAPP>/source/src/` directory, you need to make the changes in the following directory by only copying the desired file(s). For more information see [Overriding the UI components](#Overriding the UI components)\n+         - `<WEBAPP>/override/src`\n+\n+### Overriding the UI components\n+\n+Files added in the following folder structure in the devportal/overrides folder will override the original file at devportal/source/src/app/components/Apis/Details/Documents/Documents.jsx. See the samples below for a detailed explanation.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc3MzQ0Mw=="}, "originalCommit": {"oid": "2c5d7b9991ce415cd92500d15775562c368ac3d6"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc3NDQzNw==", "bodyText": "is this a way to add  a new file?", "url": "https://github.com/wso2/docs-apim/pull/2860#discussion_r555774437", "createdAt": "2021-01-12T13:37:20Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/customizations/advanced-ui-customization.md", "diffHunk": "@@ -0,0 +1,402 @@\n+# Advanced UI Customizations\n+\n+In most cases,  you can customize the WSO2 API-M Developer Portal and Publisher Portal without editing the React codebase or the CSS. You will be required to modify the React codebase only if you need to do advanced customizations.\n+\n+## Portal's folder Structure\n+\n+First, let\u2019s explore the portal\u2019s folder structure. \n+The source of the publisher and developer portal resides in the following directory. \n+\n+```\n+<API_MANAGER_ROOT>/repository/deployment/server/jaggeryapps/\n+``` \n+\n+ ![folder structure]({{base_path}}/assets/img/learn/ui-customize-pic0.png)\n+\n+We ship the React apps source code along with the distribution to allow customization.  Elsewise, you will not need the React application source code in the run time. The primary folder structure is the same for both the publisher and developer portals. Let\u2019s look at the source code organization.\n+\n+**override**\n+\n+This folder includes the customizations done to override the default React UI components. This folder is empty in the vanilla distribution.\n+\n+**services**\n+\n+This directory contains the utility services that are required to run the web portals. Even though the React UI portals are full client-side rendered(CSR) apps, We still need services or proxies for some operations, Such as\n+\n+- Authentication\n+- Reverse proxy\n+- Custom URLs\n+\n+**site**\n+\n+The site folder contains all the static files (from JS bundles, locale files, theme JSON to favicon, etc.) required for the portals to run in the browser.  The site folder includes the following folder structure.\n+\n+<API_MANAGER_ROOT>/repository/deployment/server/jaggeryapps/<WEBAPP>/site/public/dist/\n+This directory contains the generated ReactJS application bundles and their source map files.\n+\n+**source**\n+\n+This directory contains the Javascript source codes. It includes both the implementation and tests. Note that these files do not get loaded into the browser at runtime. \n+We have split the implementation section into two aspects; data and components. Data contains pure javascript implementations of data handling (REST API innovation), utility functions, and data models (user class), whereas the components directory includes the ReactJS component implementations.  The complete component hierarchy of the publisher portal is in this folder. This separation makes the data handling elements shareable and usable in non- ReactJS based projec\n+\n+**jaggery.conf**\n+\n+This is a configuration file used for web apps in Jaggery web server. It contains\n+\n+routing rules(urlMappings)\n+security constraints\n+welcomeFiles\n+and other jaggery app-related configurations.\n+\n+If you are new to JaggeryJS, JaggeryJS is a javascript backend server that can render jaggery style .jag (like Pug) templates into HTML. Simply put, it\u2019s similar to NodeJS + Express.\n+\n+**Others**\n+\n+This folder includes the rest of the files which are runtime configurations for eslint, jest, webpack, and npm. \n+\n+## Making advanced UI customizations to the WSO2 API-M Publisher and Developer Portal UIs\n+\n+Follow the instructions below to add advanced UI customizations to the Developer Portal and/or Publisher. \n+\n+!!! note \"Before you Begin...\"  \n+    Make sure the following is installed in your system.\n+        - **NodeJS** (minimum 8.12.0) - This is a platform required for ReactJS development.\n+        - **NPM**(minimum 5.7.0)\n+\n+1. Navigate to the `<API-M_HOME>/repository/deployment/server/jaggeryapps/<APP-ROOT>` directory in a terminal and run the following command. ( `<APP-ROOT>` is publisher or devportal ). This will install the local package dependencies in the publisher/devportal applications.\n+\n+     ```js\n+     npm ci\n+     ```\n+\n+     \n+2. Build the project (enabling hot deployment) \n+\n+     Run the following command to start the npm build. Note that it will continuously watch for any changes and rebuild the project. For more information see [Building the source for hot deployment](#Building the source for hot deployment) \n+\n+    ```\n+    npm run build:dev\n+    ```\n+    !!! note \"Production deployment\"\n+        The development build is not optimized and contains a large bundle size. Make sure to use the production build when the customizations are ready for production. Use the following command to get the production-ready build.\n+        \n+        ```\n+        npm run build:prod\n+        ```\n+3. Customizing the UI \n+\n+     - If you want to override a specific React component or a file from the `<WEBAPP>/source/src/` directory, you need to make the changes in the following directory by only copying the desired file(s). For more information see [Overriding the UI components](#Overriding the UI components)\n+         - `<WEBAPP>/override/src`\n+\n+### Overriding the UI components\n+\n+Files added in the following folder structure in the devportal/overrides folder will override the original file at devportal/source/src/app/components/Apis/Details/Documents/Documents.jsx. See the samples below for a detailed explanation.\n+\n+    ```sh\n+    override\n+    \u2514\u2500\u2500 src\n+        \u251c\u2500\u2500 Readme.txt\n+        \u2514\u2500\u2500 app\n+            \u2514\u2500\u2500 components\n+                \u2514\u2500\u2500 Apis\n+                    \u2514\u2500\u2500 Details\n+                        \u251c\u2500\u2500 Documents\n+                        \u2502   \u2514\u2500\u2500 Documentation.jsx\n+                        \u2514\u2500\u2500 Overview.jsx\n+    ```\n+\n+### Adding new files to the override folder\n+\n+    ```sh\n+    override\n+    \u2514\u2500\u2500 src\n+        \u251c\u2500\u2500 Readme.txt\n+        \u2514\u2500\u2500 app\n+            \u2514\u2500\u2500 components\n+                \u2514\u2500\u2500 Apis\n+                    \u2514\u2500\u2500 Details\n+                        \u251c\u2500\u2500 Documents\n+                        \u2502   \u2514\u2500\u2500 Documentation.jsx\n+                        \u2514\u2500\u2500 Overview.jsx\n+                        \u2514\u2500\u2500 NewFile.jsx\n+                        \n+    ```\n+\n+You can import the **NewFile.jsx** by adding the **AppOverride** prefix to the import command followed by the full path relative to the override directory, as shown below.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c5d7b9991ce415cd92500d15775562c368ac3d6"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTc3NDY3Ng==", "bodyText": "a bundle error will show up if you don't add the prefix?", "url": "https://github.com/wso2/docs-apim/pull/2860#discussion_r555774676", "createdAt": "2021-01-12T13:37:44Z", "author": {"login": "shaniR"}, "path": "en/docs/develop/customizations/advanced-ui-customization.md", "diffHunk": "@@ -0,0 +1,402 @@\n+# Advanced UI Customizations\n+\n+In most cases,  you can customize the WSO2 API-M Developer Portal and Publisher Portal without editing the React codebase or the CSS. You will be required to modify the React codebase only if you need to do advanced customizations.\n+\n+## Portal's folder Structure\n+\n+First, let\u2019s explore the portal\u2019s folder structure. \n+The source of the publisher and developer portal resides in the following directory. \n+\n+```\n+<API_MANAGER_ROOT>/repository/deployment/server/jaggeryapps/\n+``` \n+\n+ ![folder structure]({{base_path}}/assets/img/learn/ui-customize-pic0.png)\n+\n+We ship the React apps source code along with the distribution to allow customization.  Elsewise, you will not need the React application source code in the run time. The primary folder structure is the same for both the publisher and developer portals. Let\u2019s look at the source code organization.\n+\n+**override**\n+\n+This folder includes the customizations done to override the default React UI components. This folder is empty in the vanilla distribution.\n+\n+**services**\n+\n+This directory contains the utility services that are required to run the web portals. Even though the React UI portals are full client-side rendered(CSR) apps, We still need services or proxies for some operations, Such as\n+\n+- Authentication\n+- Reverse proxy\n+- Custom URLs\n+\n+**site**\n+\n+The site folder contains all the static files (from JS bundles, locale files, theme JSON to favicon, etc.) required for the portals to run in the browser.  The site folder includes the following folder structure.\n+\n+<API_MANAGER_ROOT>/repository/deployment/server/jaggeryapps/<WEBAPP>/site/public/dist/\n+This directory contains the generated ReactJS application bundles and their source map files.\n+\n+**source**\n+\n+This directory contains the Javascript source codes. It includes both the implementation and tests. Note that these files do not get loaded into the browser at runtime. \n+We have split the implementation section into two aspects; data and components. Data contains pure javascript implementations of data handling (REST API innovation), utility functions, and data models (user class), whereas the components directory includes the ReactJS component implementations.  The complete component hierarchy of the publisher portal is in this folder. This separation makes the data handling elements shareable and usable in non- ReactJS based projec\n+\n+**jaggery.conf**\n+\n+This is a configuration file used for web apps in Jaggery web server. It contains\n+\n+routing rules(urlMappings)\n+security constraints\n+welcomeFiles\n+and other jaggery app-related configurations.\n+\n+If you are new to JaggeryJS, JaggeryJS is a javascript backend server that can render jaggery style .jag (like Pug) templates into HTML. Simply put, it\u2019s similar to NodeJS + Express.\n+\n+**Others**\n+\n+This folder includes the rest of the files which are runtime configurations for eslint, jest, webpack, and npm. \n+\n+## Making advanced UI customizations to the WSO2 API-M Publisher and Developer Portal UIs\n+\n+Follow the instructions below to add advanced UI customizations to the Developer Portal and/or Publisher. \n+\n+!!! note \"Before you Begin...\"  \n+    Make sure the following is installed in your system.\n+        - **NodeJS** (minimum 8.12.0) - This is a platform required for ReactJS development.\n+        - **NPM**(minimum 5.7.0)\n+\n+1. Navigate to the `<API-M_HOME>/repository/deployment/server/jaggeryapps/<APP-ROOT>` directory in a terminal and run the following command. ( `<APP-ROOT>` is publisher or devportal ). This will install the local package dependencies in the publisher/devportal applications.\n+\n+     ```js\n+     npm ci\n+     ```\n+\n+     \n+2. Build the project (enabling hot deployment) \n+\n+     Run the following command to start the npm build. Note that it will continuously watch for any changes and rebuild the project. For more information see [Building the source for hot deployment](#Building the source for hot deployment) \n+\n+    ```\n+    npm run build:dev\n+    ```\n+    !!! note \"Production deployment\"\n+        The development build is not optimized and contains a large bundle size. Make sure to use the production build when the customizations are ready for production. Use the following command to get the production-ready build.\n+        \n+        ```\n+        npm run build:prod\n+        ```\n+3. Customizing the UI \n+\n+     - If you want to override a specific React component or a file from the `<WEBAPP>/source/src/` directory, you need to make the changes in the following directory by only copying the desired file(s). For more information see [Overriding the UI components](#Overriding the UI components)\n+         - `<WEBAPP>/override/src`\n+\n+### Overriding the UI components\n+\n+Files added in the following folder structure in the devportal/overrides folder will override the original file at devportal/source/src/app/components/Apis/Details/Documents/Documents.jsx. See the samples below for a detailed explanation.\n+\n+    ```sh\n+    override\n+    \u2514\u2500\u2500 src\n+        \u251c\u2500\u2500 Readme.txt\n+        \u2514\u2500\u2500 app\n+            \u2514\u2500\u2500 components\n+                \u2514\u2500\u2500 Apis\n+                    \u2514\u2500\u2500 Details\n+                        \u251c\u2500\u2500 Documents\n+                        \u2502   \u2514\u2500\u2500 Documentation.jsx\n+                        \u2514\u2500\u2500 Overview.jsx\n+    ```\n+\n+### Adding new files to the override folder\n+\n+    ```sh\n+    override\n+    \u2514\u2500\u2500 src\n+        \u251c\u2500\u2500 Readme.txt\n+        \u2514\u2500\u2500 app\n+            \u2514\u2500\u2500 components\n+                \u2514\u2500\u2500 Apis\n+                    \u2514\u2500\u2500 Details\n+                        \u251c\u2500\u2500 Documents\n+                        \u2502   \u2514\u2500\u2500 Documentation.jsx\n+                        \u2514\u2500\u2500 Overview.jsx\n+                        \u2514\u2500\u2500 NewFile.jsx\n+                        \n+    ```\n+\n+You can import the **NewFile.jsx** by adding the **AppOverride** prefix to the import command followed by the full path relative to the override directory, as shown below.\n+\n+    ```sh\n+    import NewFile from 'AppOverride/src/app/components/Apis/Details/NewFile.jsx';\n+    ```\n+\n+A bundler error will show up if you try to import the **NewFile.jsx** from **Overview.jsx** as follows.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c5d7b9991ce415cd92500d15775562c368ac3d6"}, "originalPosition": 131}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adda3d2ca1c87f3f122840d4445a518471dd58f9", "author": {"user": {"login": "chanaka3d", "name": "Chanaka Jayasena"}}, "url": "https://github.com/wso2/docs-apim/commit/adda3d2ca1c87f3f122840d4445a518471dd58f9", "committedDate": "2021-01-19T11:37:12Z", "message": "Fixing https://github.com/wso2/docs-apim/issues/1104"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0104e9b862c551a2da28fde8b5e20c73d34c3e8", "author": {"user": {"login": "chanaka3d", "name": "Chanaka Jayasena"}}, "url": "https://github.com/wso2/docs-apim/commit/d0104e9b862c551a2da28fde8b5e20c73d34c3e8", "committedDate": "2021-01-19T11:37:12Z", "message": "Adding some more content"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c5d7b9991ce415cd92500d15775562c368ac3d6", "author": {"user": {"login": "shaniR", "name": "Shani Ranasinghe"}}, "url": "https://github.com/wso2/docs-apim/commit/2c5d7b9991ce415cd92500d15775562c368ac3d6", "committedDate": "2021-01-12T13:33:13Z", "message": "Review changes"}, "afterCommit": {"oid": "d0104e9b862c551a2da28fde8b5e20c73d34c3e8", "author": {"user": {"login": "chanaka3d", "name": "Chanaka Jayasena"}}, "url": "https://github.com/wso2/docs-apim/commit/d0104e9b862c551a2da28fde8b5e20c73d34c3e8", "committedDate": "2021-01-19T11:37:12Z", "message": "Adding some more content"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "203d0195703d20819cc7e05b49e8fd42c5d2b46c", "author": {"user": {"login": "chanaka3d", "name": "Chanaka Jayasena"}}, "url": "https://github.com/wso2/docs-apim/commit/203d0195703d20819cc7e05b49e8fd42c5d2b46c", "committedDate": "2021-01-20T03:21:10Z", "message": "Fixing the mentioned issues"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg3NDM3ODIz", "url": "https://github.com/wso2/docs-apim/pull/2860#pullrequestreview-587437823", "createdAt": "2021-02-10T10:04:35Z", "commit": {"oid": "203d0195703d20819cc7e05b49e8fd42c5d2b46c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1434, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}