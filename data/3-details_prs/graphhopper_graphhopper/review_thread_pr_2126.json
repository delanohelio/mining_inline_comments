{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyOTUwOTEz", "number": 2126, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjoxMzo1N1rOEhv8Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjoxNDoyOVrOEhv9Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODIzODkxOnYy", "diffSide": "RIGHT", "path": "web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjoxMzo1N1rOHPPH0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjoxMzo1N1rOHPPH0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTczODQ0OQ==", "bodyText": "For empty isochrones there was a null pointer exception here", "url": "https://github.com/graphhopper/graphhopper/pull/2126#discussion_r485738449", "createdAt": "2020-09-09T16:13:57Z", "author": {"login": "boldtrn"}, "path": "web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java", "diffHunk": "@@ -141,18 +142,20 @@ public Response doGet(\n             fz = l -> l.time;\n         }\n \n-        Triangulator.Result result = triangulator.triangulate(qr, queryGraph, shortestPathTree, fz);\n+        Triangulator.Result result = triangulator.triangulate(qr, queryGraph, shortestPathTree, fz, tolerance);\n \n         ContourBuilder contourBuilder = new ContourBuilder(result.triangulation);\n         ArrayList<Geometry> isochrones = new ArrayList<>();\n         for (Double z : zs) {\n             logger.info(\"Building contour z={}\", z);\n             MultiPolygon isochrone = contourBuilder.computeIsoline(z, result.seedEdges);\n-            if (fullGeometry) {\n-                isochrones.add(isochrone);\n-            } else {\n-                Polygon maxPolygon = heuristicallyFindMainConnectedComponent(isochrone, geometryFactory.createPoint(new Coordinate(point.get().lon, point.get().lat)));\n-                isochrones.add(geometryFactory.createPolygon(((LinearRing) maxPolygon.getExteriorRing())));\n+            if(!isochrone.isEmpty()){\n+                if (fullGeometry) {\n+                    isochrones.add(isochrone);\n+                } else {\n+                    Polygon maxPolygon = heuristicallyFindMainConnectedComponent(isochrone, geometryFactory.createPoint(new Coordinate(point.get().lon, point.get().lat)));\n+                    isochrones.add(geometryFactory.createPolygon(((LinearRing) maxPolygon.getExteriorRing())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c64dd648eb537b086081f896fa26d2e43094f04c"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODI0MTg3OnYy", "diffSide": "RIGHT", "path": "web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjoxNDoyOVrOHPPJsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjoxNDoyOVrOHPPJsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTczODkzMQ==", "bodyText": "Took was always zero, because the sw wasn't stopped before reading it on line 183.", "url": "https://github.com/graphhopper/graphhopper/pull/2126#discussion_r485738931", "createdAt": "2020-09-09T16:14:29Z", "author": {"login": "boldtrn"}, "path": "web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java", "diffHunk": "@@ -169,6 +172,7 @@ public Response doGet(\n         }\n         ObjectNode json = JsonNodeFactory.instance.objectNode();\n \n+        sw.stop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c64dd648eb537b086081f896fa26d2e43094f04c"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4641, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}