{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyOTUwOTEz", "number": 2126, "title": "Add tolerance for Isochrones", "bodyText": "Calculating Isochrones for larger limits can take a lot of time. One major factor when calculating Isochrones is the triangulation.\nIf we accept less detailed results, the triangulation can be massively sped up.\nCurrently the tolerance is passed into the triangulation without checking the input if it's a reasonable number. Not sure if we need something here? Also I found that the larger the limit, the higher tolerance can be without getting too coarse.\nThis can be especially helpful if you calculate big isochrones, like state or country size. Without speeding up the triangulation, this can take minutes. IMHO, for larger isochrones, details usually becomes less important, especially if you think about travel time, who knows how the traffic will be, so the isochrones are just an educated guess.\nI will add an example below, an isochrone around Stuttgart. The detailed one is with tolerance=0 (the default), on my machine the calculation took 1.4s. The medium detailed one is with tolerance=0.002 and took 400ms. The less detailed on is with tolerance=0.005 and took 300ms. Obviously the result is worse, but there are applications that can live with less detail. For example if you use the time limit, but you don't know the traffic that well, so it's just a rough guess.", "createdAt": "2020-09-09T16:00:41Z", "url": "https://github.com/graphhopper/graphhopper/pull/2126", "merged": true, "mergeCommit": {"oid": "9c7b46a62e9ea7e3f2c8b8e45a97e72b62d75ec7"}, "closed": true, "closedAt": "2020-10-12T10:05:17Z", "author": {"login": "boldtrn"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdHOLhvAH2gAyNDgyOTUwOTEzOmM2NGRkNjQ4ZWI1MzdiMDg2MDgxZjg5NmZhMjZkMmU0MzA5NGYwNGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdRxFEdAFqTUwNjQ3ODQxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c64dd648eb537b086081f896fa26d2e43094f04c", "author": {"user": {"login": "boldtrn", "name": "Robin"}}, "url": "https://github.com/graphhopper/graphhopper/commit/c64dd648eb537b086081f896fa26d2e43094f04c", "committedDate": "2020-09-09T15:45:58Z", "message": "Add tolerance for Isochrones"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MTgzMjUx", "url": "https://github.com/graphhopper/graphhopper/pull/2126#pullrequestreview-485183251", "createdAt": "2020-09-09T16:13:57Z", "commit": {"oid": "c64dd648eb537b086081f896fa26d2e43094f04c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjoxMzo1N1rOHPPH0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjoxMzo1N1rOHPPH0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTczODQ0OQ==", "bodyText": "For empty isochrones there was a null pointer exception here", "url": "https://github.com/graphhopper/graphhopper/pull/2126#discussion_r485738449", "createdAt": "2020-09-09T16:13:57Z", "author": {"login": "boldtrn"}, "path": "web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java", "diffHunk": "@@ -141,18 +142,20 @@ public Response doGet(\n             fz = l -> l.time;\n         }\n \n-        Triangulator.Result result = triangulator.triangulate(qr, queryGraph, shortestPathTree, fz);\n+        Triangulator.Result result = triangulator.triangulate(qr, queryGraph, shortestPathTree, fz, tolerance);\n \n         ContourBuilder contourBuilder = new ContourBuilder(result.triangulation);\n         ArrayList<Geometry> isochrones = new ArrayList<>();\n         for (Double z : zs) {\n             logger.info(\"Building contour z={}\", z);\n             MultiPolygon isochrone = contourBuilder.computeIsoline(z, result.seedEdges);\n-            if (fullGeometry) {\n-                isochrones.add(isochrone);\n-            } else {\n-                Polygon maxPolygon = heuristicallyFindMainConnectedComponent(isochrone, geometryFactory.createPoint(new Coordinate(point.get().lon, point.get().lat)));\n-                isochrones.add(geometryFactory.createPolygon(((LinearRing) maxPolygon.getExteriorRing())));\n+            if(!isochrone.isEmpty()){\n+                if (fullGeometry) {\n+                    isochrones.add(isochrone);\n+                } else {\n+                    Polygon maxPolygon = heuristicallyFindMainConnectedComponent(isochrone, geometryFactory.createPoint(new Coordinate(point.get().lon, point.get().lat)));\n+                    isochrones.add(geometryFactory.createPolygon(((LinearRing) maxPolygon.getExteriorRing())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c64dd648eb537b086081f896fa26d2e43094f04c"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MTgzNjg1", "url": "https://github.com/graphhopper/graphhopper/pull/2126#pullrequestreview-485183685", "createdAt": "2020-09-09T16:14:29Z", "commit": {"oid": "c64dd648eb537b086081f896fa26d2e43094f04c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjoxNDoyOVrOHPPJsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNjoxNDoyOVrOHPPJsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTczODkzMQ==", "bodyText": "Took was always zero, because the sw wasn't stopped before reading it on line 183.", "url": "https://github.com/graphhopper/graphhopper/pull/2126#discussion_r485738931", "createdAt": "2020-09-09T16:14:29Z", "author": {"login": "boldtrn"}, "path": "web-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java", "diffHunk": "@@ -169,6 +172,7 @@ public Response doGet(\n         }\n         ObjectNode json = JsonNodeFactory.instance.objectNode();\n \n+        sw.stop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c64dd648eb537b086081f896fa26d2e43094f04c"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64b6d7a761a264b4ebadbcc2cff54d69a7789c05", "author": {"user": {"login": "boldtrn", "name": "Robin"}}, "url": "https://github.com/graphhopper/graphhopper/commit/64b6d7a761a264b4ebadbcc2cff54d69a7789c05", "committedDate": "2020-10-06T07:09:36Z", "message": "Merge remote-tracking branch 'remotes/gh/master' into isochrone_tolerance\n\n# Conflicts:\n#\tisochrone/src/main/java/com/graphhopper/isochrone/algorithm/JTSTriangulator.java\n#\tisochrone/src/main/java/com/graphhopper/isochrone/algorithm/Triangulator.java\n#\tweb-bundle/src/main/java/com/graphhopper/resources/IsochroneResource.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05dd89f7a0b05459ac04b0321cbebd1b89a53ebb", "author": {"user": {"login": "boldtrn", "name": "Robin"}}, "url": "https://github.com/graphhopper/graphhopper/commit/05dd89f7a0b05459ac04b0321cbebd1b89a53ebb", "committedDate": "2020-10-06T07:31:04Z", "message": "Use tolerance in meter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24f636fdf12f5fe30016ac8b0e7c1df791c131e5", "author": {"user": {"login": "boldtrn", "name": "Robin"}}, "url": "https://github.com/graphhopper/graphhopper/commit/24f636fdf12f5fe30016ac8b0e7c1df791c131e5", "committedDate": "2020-10-06T11:18:36Z", "message": "Use larger test tolerance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc3fd9285010784fbe0ace0292166b4c9317ba82", "author": {"user": {"login": "boldtrn", "name": "Robin"}}, "url": "https://github.com/graphhopper/graphhopper/commit/bc3fd9285010784fbe0ace0292166b4c9317ba82", "committedDate": "2020-10-06T15:41:33Z", "message": "Use larger test tolerance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "affe5ec37e4f648b711ac921fc89e71235e2dd69", "author": {"user": {"login": "boldtrn", "name": "Robin"}}, "url": "https://github.com/graphhopper/graphhopper/commit/affe5ec37e4f648b711ac921fc89e71235e2dd69", "committedDate": "2020-10-06T16:04:53Z", "message": "Use larger test tolerance"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9e319cc460ccd112b1faaa36803b7d2a1f227e9", "author": {"user": {"login": "michaz", "name": "Michael Zilske"}}, "url": "https://github.com/graphhopper/graphhopper/commit/e9e319cc460ccd112b1faaa36803b7d2a1f227e9", "committedDate": "2020-10-12T09:57:51Z", "message": "Merge branch 'master' into isochrone_tolerance"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NDc4NDE1", "url": "https://github.com/graphhopper/graphhopper/pull/2126#pullrequestreview-506478415", "createdAt": "2020-10-12T10:04:50Z", "commit": {"oid": "e9e319cc460ccd112b1faaa36803b7d2a1f227e9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4479, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}