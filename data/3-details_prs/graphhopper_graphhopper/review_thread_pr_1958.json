{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMDI2NTY0", "number": 1958, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToxNDo1NlrODo2oyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNjo1OTozNFrODpxAOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTY0ODEwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/graphhopper/GHRequest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToxNDo1NlrOF3qdfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDo0NTowMVrOF3_XYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxMTY3OQ==", "bodyText": "I think we discussed this in #1859 already: We'll def. remove vehicle+weighting from the HintsMap, but maybe in a follow-up PR? Since the profile parameter will be required it makes sense to keep it as a separate field?", "url": "https://github.com/graphhopper/graphhopper/pull/1958#discussion_r393911679", "createdAt": "2020-03-17T19:14:56Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/GHRequest.java", "diffHunk": "@@ -34,6 +34,9 @@\n  */\n public class GHRequest {\n     private List<GHPoint> points;\n+    // todonow: keep this here or put it into hints, and even more important: can we remove vehicle+weighting from\n+    // hints?\n+    private String profile = \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e628b48c9b1541f2d860812dffda40dc8f5704"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1NDE3OA==", "bodyText": "Yes, I would also use it here and remove weighting and vehicle in a later PR", "url": "https://github.com/graphhopper/graphhopper/pull/1958#discussion_r394254178", "createdAt": "2020-03-18T10:45:01Z", "author": {"login": "karussell"}, "path": "api/src/main/java/com/graphhopper/GHRequest.java", "diffHunk": "@@ -34,6 +34,9 @@\n  */\n public class GHRequest {\n     private List<GHPoint> points;\n+    // todonow: keep this here or put it into hints, and even more important: can we remove vehicle+weighting from\n+    // hints?\n+    private String profile = \"\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxMTY3OQ=="}, "originalCommit": {"oid": "e3e628b48c9b1541f2d860812dffda40dc8f5704"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTY1MzU4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToxNjozOVrOF3qhFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToxNjozOVrOF3qhFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxMjU5OQ==", "bodyText": "There are a few odd cases where we do not use GraphHopper for routing (like NearestResource) so these do not necessarily require profiles. Not sure, to me this seems rather the exception so I am checking the existence of at least one profile here. Once we do #1901 we can move this check into GraphHopperRouter's constructor for example.", "url": "https://github.com/graphhopper/graphhopper/pull/1958#discussion_r393912599", "createdAt": "2020-03-17T19:16:39Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -824,6 +809,9 @@ public boolean load(String graphHopperFolder) {\n     }\n \n     private void checkProfilesConsistency() {\n+        if (profilesByName.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e628b48c9b1541f2d860812dffda40dc8f5704"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTY2MDIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToxODo1OFrOF3qlkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxOTowNjowMVrOF48i1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxMzc0Nw==", "bodyText": "This is about the 'merging' feature where some properties are set right in the profile (like distance_factor), but they might be overwritten per request. The problem is that this does not work with CH (and only some special cases work for LM), so I am a bit unsure where to put these checks. They cannot really go into createWeighting (where the merging will happen?!), because in this method we do not 'know' whether the weighting is created for CH or not...", "url": "https://github.com/graphhopper/graphhopper/pull/1958#discussion_r393913747", "createdAt": "2020-03-17T19:18:58Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -1029,6 +1010,17 @@ public GHResponse route(GHRequest request) {\n         Lock readLock = readWriteLock.readLock();\n         readLock.lock();\n         try {\n+            if (!request.getVehicle().isEmpty())\n+                throw new IllegalArgumentException(\"GHRequest may no longer contain a vehicle, use the profile parameter instead, see #todonow\");\n+            if (!request.getWeighting().isEmpty())\n+                throw new IllegalArgumentException(\"GHRequest may no longer contain a weighting, use the profile parameter instead, see #todonow\");\n+            if (!request.getHints().get(Routing.TURN_COSTS, \"\").isEmpty())\n+                throw new IllegalArgumentException(\"GHRequest may no longer contain the turn_costs=true/false parameter, use the profile parameter instead, see #todonow\");\n+            // todonow: maybe still allow something like running a (non CH) profile edge-based or not (if no turn costs or something)?, also see traversal mode below\n+            if (!request.getHints().get(Routing.EDGE_BASED, \"\").isEmpty())\n+                throw new IllegalArgumentException(\"GHRequest may no longer contain the edge_based=true/false parameter, use the profile parameter instead, see #todonow\");\n+            // todonow: do not allow things like short_fastest.distance_factor or u_turn_costs unless CH is disabled and only under certain conditions for LM", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e628b48c9b1541f2d860812dffda40dc8f5704"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI1NjUzNQ==", "bodyText": "for now we are just blindly merging the hints, later we will add these kind of checks here to be more strict", "url": "https://github.com/graphhopper/graphhopper/pull/1958#discussion_r395256535", "createdAt": "2020-03-19T19:06:01Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -1029,6 +1010,17 @@ public GHResponse route(GHRequest request) {\n         Lock readLock = readWriteLock.readLock();\n         readLock.lock();\n         try {\n+            if (!request.getVehicle().isEmpty())\n+                throw new IllegalArgumentException(\"GHRequest may no longer contain a vehicle, use the profile parameter instead, see #todonow\");\n+            if (!request.getWeighting().isEmpty())\n+                throw new IllegalArgumentException(\"GHRequest may no longer contain a weighting, use the profile parameter instead, see #todonow\");\n+            if (!request.getHints().get(Routing.TURN_COSTS, \"\").isEmpty())\n+                throw new IllegalArgumentException(\"GHRequest may no longer contain the turn_costs=true/false parameter, use the profile parameter instead, see #todonow\");\n+            // todonow: maybe still allow something like running a (non CH) profile edge-based or not (if no turn costs or something)?, also see traversal mode below\n+            if (!request.getHints().get(Routing.EDGE_BASED, \"\").isEmpty())\n+                throw new IllegalArgumentException(\"GHRequest may no longer contain the edge_based=true/false parameter, use the profile parameter instead, see #todonow\");\n+            // todonow: do not allow things like short_fastest.distance_factor or u_turn_costs unless CH is disabled and only under certain conditions for LM", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxMzc0Nw=="}, "originalCommit": {"oid": "e3e628b48c9b1541f2d860812dffda40dc8f5704"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTY2NDk4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToyMDozOVrOF3qo3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToyMDozOVrOF3qo3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxNDU5MA==", "bodyText": "Maybe we can do this later, see #1702.", "url": "https://github.com/graphhopper/graphhopper/pull/1958#discussion_r393914590", "createdAt": "2020-03-17T19:20:39Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -1055,10 +1047,17 @@ public GHResponse route(GHRequest request) {\n             // For example see #734\n             checkIfPointsAreInBounds(points);\n \n-            ProfileConfig profile = resolveProfile(hints);\n+            if (Helper.isEmpty(request.getProfile())) {\n+                throw new IllegalArgumentException(\"You need to specify a profile to perform a routing request\");\n+            }\n+            ProfileConfig profile = profilesByName.get(request.getProfile());\n+            if (profile == null) {\n+                throw new IllegalArgumentException(\"The requested profile '\" + request.getProfile() + \"' does not exist\");\n+            }\n             if (!profile.isTurnCosts() && !request.getCurbsides().isEmpty())\n                 throw new IllegalArgumentException(\"To make use of the \" + CURBSIDE + \" parameter you need to use a profile that supports turn costs\");\n \n+            // todonow: should we be able to control this using the edge_based parameter?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e628b48c9b1541f2d860812dffda40dc8f5704"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTY3MzE3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/ProfileResolver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToyMzoyNFrOF3quTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToyMzoyNFrOF3quTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxNTk4MA==", "bodyText": "Since we are now selecting a CHProfileConfig instead of a CHProfile we can deal with the case of multiple edge-based profiles with different u_turn_costs again (c.f. #1949). This should also help to get rid of Weighting#getFlagEncoder in the long run.", "url": "https://github.com/graphhopper/graphhopper/pull/1958#discussion_r393915980", "createdAt": "2020-03-17T19:23:24Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/ProfileResolver.java", "diffHunk": "@@ -18,118 +18,125 @@\n \n package com.graphhopper.routing;\n \n+import com.graphhopper.config.CHProfileConfig;\n+import com.graphhopper.config.LMProfileConfig;\n import com.graphhopper.config.ProfileConfig;\n-import com.graphhopper.routing.lm.LMProfile;\n import com.graphhopper.routing.util.EncodingManager;\n import com.graphhopper.routing.util.FlagEncoder;\n import com.graphhopper.routing.util.HintsMap;\n-import com.graphhopper.storage.CHProfile;\n+import com.graphhopper.util.PMap;\n import com.graphhopper.util.Parameters;\n \n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n \n import static com.graphhopper.routing.weighting.Weighting.INFINITE_U_TURN_COSTS;\n \n public class ProfileResolver {\n-\n-    public ProfileConfig resolveProfile(EncodingManager encodingManager, List<CHProfile> chProfiles, List<LMProfile> lmProfiles, HintsMap hints) {\n-        // default handling\n-        String vehicle = hints.getVehicle();\n-        if (vehicle.isEmpty()) {\n-            vehicle = getDefaultVehicle(encodingManager).toString();\n+    private final EncodingManager encodingManager;\n+    private final List<ProfileConfig> profiles;\n+    private final List<ProfileConfig> chProfiles;\n+    private final List<ProfileConfig> lmProfiles;\n+\n+    public ProfileResolver(EncodingManager encodingManager, List<ProfileConfig> profiles, List<CHProfileConfig> chProfiles, List<LMProfileConfig> lmProfiles) {\n+        this.encodingManager = encodingManager;\n+        this.profiles = profiles;\n+        Map<String, ProfileConfig> profilesByName = new HashMap<>(profiles.size());\n+        for (ProfileConfig p : profiles) {\n+            profilesByName.put(p.getName(), p);\n         }\n-        String weighting = hints.getWeighting();\n-        if (weighting.isEmpty()) {\n-            weighting = \"fastest\";\n+        if (profilesByName.size() != profiles.size()) {\n+            throw new IllegalStateException(\"Profiles must have distinct names\");\n+        }\n+        this.chProfiles = new ArrayList<>();\n+        for (CHProfileConfig p : chProfiles) {\n+            ProfileConfig profile = profilesByName.get(p.getProfile());\n+            if (profile == null) {\n+                throw new IllegalStateException(\"There is no profile for CH preparation '\" + p.getProfile() + \"'\");\n+            }\n+            this.chProfiles.add(profile);\n+        }\n+        this.lmProfiles = new ArrayList<>();\n+        for (LMProfileConfig p : lmProfiles) {\n+            ProfileConfig profile = profilesByName.get(p.getProfile());\n+            if (profile == null) {\n+                throw new IllegalStateException(\"There is no profile for LM preparation '\" + p.getProfile() + \"'\");\n+            }\n+            this.lmProfiles.add(profile);\n         }\n-        if (!encodingManager.hasEncoder(vehicle))\n-            throw new IllegalArgumentException(\"Vehicle not supported: \" + vehicle + \". Supported are: \" + encodingManager.toString());\n-\n-        FlagEncoder encoder = encodingManager.getEncoder(vehicle);\n-        // we use turn costs if the encoder supports it *unless* the edge_based parameter is set explicitly\n-        boolean turnCosts = encoder.supportsTurnCosts();\n-        if (hints.has(Parameters.Routing.EDGE_BASED))\n-            turnCosts = hints.getBool(Parameters.Routing.EDGE_BASED, false);\n-        if (turnCosts && !encoder.supportsTurnCosts())\n-            throw new IllegalArgumentException(\"You need to set up a turn cost storage to make use of edge_based=true, e.g. use car|turn_costs=true\");\n-\n-        String profileName = resolveProfileName(chProfiles, lmProfiles, hints);\n-\n-        return new ProfileConfig(profileName)\n-                .setVehicle(vehicle)\n-                .setWeighting(weighting)\n-                .setTurnCosts(turnCosts);\n     }\n \n-    private String resolveProfileName(List<CHProfile> chProfiles, List<LMProfile> lmProfiles, HintsMap hints) {\n+    public ProfileConfig resolveProfile(HintsMap hints) {\n         boolean disableCH = hints.getBool(Parameters.CH.DISABLE, false);\n         boolean disableLM = hints.getBool(Parameters.Landmark.DISABLE, false);\n \n-        String profileName;\n+        String vehicle = hints.getVehicle();\n+        if (!vehicle.isEmpty() && !encodingManager.hasEncoder(hints.getVehicle()))\n+            throw new IllegalArgumentException(\"Vehicle not supported: \" + vehicle + \". Supported are: \" + encodingManager.toString() +\n+                    \" You should consider using the profile parameter instead of specifying a vehicle, see #todonow\");\n+\n+        // unless CH/LM are disabled we select the profile based on the given request hints and the available preparations\n         if (!chProfiles.isEmpty() && !disableCH) {\n-            profileName = selectCHProfile(chProfiles, hints).getName();\n+            return selectProfileCH(hints);\n         } else if (!lmProfiles.isEmpty() && !disableLM) {\n-            profileName = selectLMProfile(lmProfiles, hints).getName();\n+            return selectProfileLM(hints);\n         } else {\n-            // todonow: here we will instead select one of the existing profiles\n-            profileName = \"unprepared_profile\";\n+            return selectProfileUnprepared(hints);\n         }\n-        return profileName;\n     }\n \n     /**\n-     * @param chProfiles the CH profiles to choose from\n-     * @param hintsMap   a map used to describe the CH profile that shall be selected\n-     * @throws IllegalArgumentException if no CH profile could be selected for the given parameters\n+     * @param hintsMap a map used to describe the profile that shall be selected\n+     * @throws IllegalArgumentException if no profile supporting CH could be selected for the given parameters\n      */\n-    public CHProfile selectCHProfile(List<CHProfile> chProfiles, HintsMap hintsMap) {\n-        int numMatchingEdgeBased = 0;\n-        List<CHProfile> matchingProfiles = new ArrayList<>();\n-        for (CHProfile p : chProfiles) {\n+    public ProfileConfig selectProfileCH(HintsMap hintsMap) {\n+        List<ProfileConfig> matchingProfiles = new ArrayList<>();\n+        for (ProfileConfig p : chProfiles) {\n             if (!chProfileMatchesHints(p, hintsMap))\n                 continue;\n             matchingProfiles.add(p);\n-            if (p.isEdgeBased()) {\n-                numMatchingEdgeBased++;\n-            }\n         }\n \n         Boolean edgeBased = getEdgeBased(hintsMap);\n         Integer uTurnCosts = getUTurnCosts(hintsMap);\n         if (matchingProfiles.isEmpty()) {\n-            throw new IllegalArgumentException(\"Cannot find matching CH profile for your request. Please check your parameters.\" +\n+            throw new IllegalArgumentException(\"Cannot find matching profile that supports CH for your request. Please check your parameters.\" +\n                     \"\\nYou can try disabling CH using \" + Parameters.CH.DISABLE + \"=true\" +\n-                    \"\\nrequested:  \" + getCHRequestAsString(hintsMap, edgeBased, uTurnCosts) + \"\\navailable: \" + chProfiles);\n+                    \"\\nrequested:  \" + getCHRequestAsString(hintsMap, edgeBased, uTurnCosts) + \"\\navailable: \" + chProfilesAsString(chProfiles));\n         } else if (matchingProfiles.size() == 1) {\n             return matchingProfiles.get(0);\n         } else {\n-            // special case: prefer edge-based over node-based if these are the only two options\n-            CHProfile match1 = matchingProfiles.get(0);\n-            CHProfile match2 = matchingProfiles.get(1);\n+            // special case: prefer profile with turn costs over one without turn costs if both are available and there\n+            // aren't any other options\n+            ProfileConfig match1 = matchingProfiles.get(0);\n+            ProfileConfig match2 = matchingProfiles.get(1);\n             if (edgeBased == null && matchingProfiles.size() == 2 &&\n-                    match1.getWeighting().getName().equals(match2.getWeighting().getName()) &&\n-                    match1.getWeighting().getFlagEncoder().toString().equals(match2.getWeighting().getFlagEncoder().toString()) &&\n-                    match1.isEdgeBased() != match2.isEdgeBased()) {\n-                return match1.isEdgeBased() ? match1 : match2;\n+                    match1.getWeighting().equals(match2.getWeighting()) &&\n+                    match1.getVehicle().equals(match2.getVehicle()) &&\n+                    match1.isTurnCosts() != match2.isTurnCosts()) {\n+                return match1.isTurnCosts() ? match1 : match2;\n             }\n-            // special case: error if multiple edge-based matches. to differentiate between these it will be required\n-            // to explicitly set the profile parameter.\n-            if (numMatchingEdgeBased > 1 && numMatchingEdgeBased == matchingProfiles.size()) {\n-                throw new IllegalArgumentException(\"There are multiple edge-based CH profiles matching your request. You need to\" +\n-                        \" specify the profile you want to use explicitly, see here: https://github.com/graphhopper/graphhopper/pull/1934.\");\n-            } else {\n-                throw new IllegalArgumentException(\"There are multiple CH profiles matching your request. Use the `weighting`,`vehicle`,`edge_based` and/or `u_turn_costs` parameters to be more specific.\" +\n-                        \"\\nYou can also try disabling CH altogether using \" + Parameters.CH.DISABLE + \"=true\" +\n-                        \"\\nrequested:  \" + getCHRequestAsString(hintsMap, edgeBased, uTurnCosts) + \"\\nmatched:   \" + matchingProfiles + \"\\navailable: \" + chProfiles);\n+            throw new IllegalArgumentException(\"There are multiple CH profiles matching your request. Use the `weighting`,`vehicle`,`edge_based` and/or `u_turn_costs` parameters to be more specific or better use the `profile` parameter to explicitly choose a profile.\" +\n+                    \"\\nYou can also try disabling CH altogether using \" + Parameters.CH.DISABLE + \"=true\" +\n+                    \"\\nrequested:  \" + getCHRequestAsString(hintsMap, edgeBased, uTurnCosts) + \"\\nmatched:   \" + chProfilesAsString(matchingProfiles) + \"\\navailable: \" + chProfilesAsString(chProfiles));\n \n-            }\n         }\n     }\n \n-    public LMProfile selectLMProfile(List<LMProfile> lmProfiles, HintsMap hintsMap) {\n-        List<LMProfile> matchingProfiles = new ArrayList<>();\n-        for (LMProfile p : lmProfiles) {\n+    protected boolean chProfileMatchesHints(ProfileConfig p, HintsMap hintsMap) {\n+        Boolean edgeBased = getEdgeBased(hintsMap);\n+        Integer uTurnCosts = getUTurnCosts(hintsMap);\n+        return (edgeBased == null || p.isTurnCosts() == edgeBased) &&\n+                (uTurnCosts == null || uTurnCosts.equals(getUTurnCosts(p.getHints()))) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e628b48c9b1541f2d860812dffda40dc8f5704"}, "originalPosition": 182}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTY4MjY1OnYy", "diffSide": "RIGHT", "path": "docs/web/api-doc.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToyNjoyNlrOF3q0gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTo0Njo0NlrOF4BX2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxNzU2OQ==", "bodyText": "This file is supposed to describe the web-api, but this documentation also is available on the directions-api documentation website. Does it make sense to keep this updated here? Or should this be rather about the documentation of the parameters of the open source server?", "url": "https://github.com/graphhopper/graphhopper/pull/1958#discussion_r393917569", "createdAt": "2020-03-17T19:26:26Z", "author": {"login": "easbar"}, "path": "docs/web/api-doc.md", "diffHunk": "@@ -71,6 +71,7 @@ empty list for `profiles_ch`.\n Parameter        | Default    | Description\n :----------------|:-----------|:-----------\n ch.disable       | `false`    | Use this parameter in combination with one or more parameters of this table\n+# todonow: update docs regarding profile etc.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e628b48c9b1541f2d860812dffda40dc8f5704"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI3NjAyMA==", "bodyText": "Yes, definitely this is different. This doc should should show all the features, e.g. including public transit and mvt endpoint etc that we do not have in the GraphHopper Directions API.", "url": "https://github.com/graphhopper/graphhopper/pull/1958#discussion_r394276020", "createdAt": "2020-03-18T11:25:17Z", "author": {"login": "karussell"}, "path": "docs/web/api-doc.md", "diffHunk": "@@ -71,6 +71,7 @@ empty list for `profiles_ch`.\n Parameter        | Default    | Description\n :----------------|:-----------|:-----------\n ch.disable       | `false`    | Use this parameter in combination with one or more parameters of this table\n+# todonow: update docs regarding profile etc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxNzU2OQ=="}, "originalCommit": {"oid": "e3e628b48c9b1541f2d860812dffda40dc8f5704"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI3NzMwMw==", "bodyText": "Ok so this file is actually the documentation of the open source server then? I will try to make this a bit more clear and for the hosted service point to the online docs then?", "url": "https://github.com/graphhopper/graphhopper/pull/1958#discussion_r394277303", "createdAt": "2020-03-18T11:27:46Z", "author": {"login": "easbar"}, "path": "docs/web/api-doc.md", "diffHunk": "@@ -71,6 +71,7 @@ empty list for `profiles_ch`.\n Parameter        | Default    | Description\n :----------------|:-----------|:-----------\n ch.disable       | `false`    | Use this parameter in combination with one or more parameters of this table\n+# todonow: update docs regarding profile etc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxNzU2OQ=="}, "originalCommit": {"oid": "e3e628b48c9b1541f2d860812dffda40dc8f5704"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI4NzA2Nw==", "bodyText": "I wanted to avoid doing \"advertisements\" here, but probably you are right and this would be more clear.", "url": "https://github.com/graphhopper/graphhopper/pull/1958#discussion_r394287067", "createdAt": "2020-03-18T11:46:46Z", "author": {"login": "karussell"}, "path": "docs/web/api-doc.md", "diffHunk": "@@ -71,6 +71,7 @@ empty list for `profiles_ch`.\n Parameter        | Default    | Description\n :----------------|:-----------|:-----------\n ch.disable       | `false`    | Use this parameter in combination with one or more parameters of this table\n+# todonow: update docs regarding profile etc.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxNzU2OQ=="}, "originalCommit": {"oid": "e3e628b48c9b1541f2d860812dffda40dc8f5704"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTY5MDg0OnYy", "diffSide": "RIGHT", "path": "tools/src/main/java/com/graphhopper/tools/Measurement.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOToyODo1N1rOF3q5zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMDoxODoyNVrOF6Wjug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxODkyNQ==", "bodyText": "Here I thought the measurements are running only for one vehicle anyway (and if we want to test others we might as well start the measurement again for the other vehicle), so it makes sense to keep the vehicle as a class variable (just like weighting) rather than pass it with every querysetting?", "url": "https://github.com/graphhopper/graphhopper/pull/1958#discussion_r393918925", "createdAt": "2020-03-17T19:28:57Z", "author": {"login": "easbar"}, "path": "tools/src/main/java/com/graphhopper/tools/Measurement.java", "diffHunk": "@@ -73,6 +75,7 @@\n     private final Map<String, Object> properties = new TreeMap<>();\n     private long seed;\n     private int maxNode;\n+    private String vehicle;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3e628b48c9b1541f2d860812dffda40dc8f5704"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU2MTc0MQ==", "bodyText": "In the CustomWeighting branch I already use profile and then I do not want the vehicle in the request:  https://github.com/graphhopper/graphhopper/pull/1841/files#diff-cd749cc545f8b84137c2b75b2d174b72 but probably this can be still done somehow.", "url": "https://github.com/graphhopper/graphhopper/pull/1958#discussion_r395561741", "createdAt": "2020-03-20T10:55:14Z", "author": {"login": "karussell"}, "path": "tools/src/main/java/com/graphhopper/tools/Measurement.java", "diffHunk": "@@ -73,6 +75,7 @@\n     private final Map<String, Object> properties = new TreeMap<>();\n     private long seed;\n     private int maxNode;\n+    private String vehicle;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxODkyNQ=="}, "originalCommit": {"oid": "e3e628b48c9b1541f2d860812dffda40dc8f5704"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU2NTk5MQ==", "bodyText": "Ok yes vehicle and weihgting should be mostly removed from measurement and only profile should be left then?", "url": "https://github.com/graphhopper/graphhopper/pull/1958#discussion_r395565991", "createdAt": "2020-03-20T11:04:24Z", "author": {"login": "easbar"}, "path": "tools/src/main/java/com/graphhopper/tools/Measurement.java", "diffHunk": "@@ -73,6 +75,7 @@\n     private final Map<String, Object> properties = new TreeMap<>();\n     private long seed;\n     private int maxNode;\n+    private String vehicle;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxODkyNQ=="}, "originalCommit": {"oid": "e3e628b48c9b1541f2d860812dffda40dc8f5704"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU3ODA2Nw==", "bodyText": "Yes, but let's do this later :)", "url": "https://github.com/graphhopper/graphhopper/pull/1958#discussion_r395578067", "createdAt": "2020-03-20T11:30:22Z", "author": {"login": "karussell"}, "path": "tools/src/main/java/com/graphhopper/tools/Measurement.java", "diffHunk": "@@ -73,6 +75,7 @@\n     private final Map<String, Object> properties = new TreeMap<>();\n     private long seed;\n     private int maxNode;\n+    private String vehicle;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxODkyNQ=="}, "originalCommit": {"oid": "e3e628b48c9b1541f2d860812dffda40dc8f5704"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjczMTMyMg==", "bodyText": "There isn't really anything to do. vehicle&weighting are only used to create the profile initially.", "url": "https://github.com/graphhopper/graphhopper/pull/1958#discussion_r396731322", "createdAt": "2020-03-23T20:18:25Z", "author": {"login": "easbar"}, "path": "tools/src/main/java/com/graphhopper/tools/Measurement.java", "diffHunk": "@@ -73,6 +75,7 @@\n     private final Map<String, Object> properties = new TreeMap<>();\n     private long seed;\n     private int maxNode;\n+    private String vehicle;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkxODkyNQ=="}, "originalCommit": {"oid": "e3e628b48c9b1541f2d860812dffda40dc8f5704"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MTIxMDgwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwNjo1OTozNFrOF5JI9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxMDo1MjowNFrOF5PFJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ2MjkwMQ==", "bodyText": "These are (the very simple) rules how we merge the profile hints with the request hints. The only thing I am wondering now is how we do this for block_area? Shall we do this in a similar way (use hints from profile and overwrite with request hints)? Do we need this here or is it ok to only create block areas from request hints (not the profile) here, and add this in #1776? Its still a bit unfortunate that we do not do the block_area stuff inside createWeighting. Now it looks all we are missing to do this in createWeighting are the points?", "url": "https://github.com/graphhopper/graphhopper/pull/1958#discussion_r395462901", "createdAt": "2020-03-20T06:59:34Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -1350,13 +1349,20 @@ public DefaultWeightingFactory(EncodingManager encodingManager, GraphHopperStora\n             this.ghStorage = ghStorage;\n         }\n \n-        public Weighting createWeighting(ProfileConfig profile, PMap hints) {\n+        public Weighting createWeighting(ProfileConfig profile, PMap requestHints) {\n+            // Merge profile hints with request hints, the request hints take precedence.\n+            // Note that so far we do not check if overwriting the profile hints actually works with the preparation\n+            // for LM/CH. Later we should also limit the number of parameters that can be used to modify the profile.\n+            PMap hints = new PMap();\n+            hints.putAll(profile.getHints());\n+            hints.putAll(requestHints);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e774c1cb8d2beaf009e65ee6d3e9f828f95f94ea"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTU2MDIyOQ==", "bodyText": "The only thing I am wondering now is how we do this for block_area?\n\nHmmh, we would need to add it to the list of shapes\n\nDo we need this here or is it ok to only create block areas from request hints (not the profile) here\n\nI would postpone this and properly support this in CustomWeighting.\n\nNow it looks all we are missing to do this in createWeighting are the points\n\nYeah, although we only need this because of the is-in-area check which we could keep out of the Weighting creation somehow.", "url": "https://github.com/graphhopper/graphhopper/pull/1958#discussion_r395560229", "createdAt": "2020-03-20T10:52:04Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -1350,13 +1349,20 @@ public DefaultWeightingFactory(EncodingManager encodingManager, GraphHopperStora\n             this.ghStorage = ghStorage;\n         }\n \n-        public Weighting createWeighting(ProfileConfig profile, PMap hints) {\n+        public Weighting createWeighting(ProfileConfig profile, PMap requestHints) {\n+            // Merge profile hints with request hints, the request hints take precedence.\n+            // Note that so far we do not check if overwriting the profile hints actually works with the preparation\n+            // for LM/CH. Later we should also limit the number of parameters that can be used to modify the profile.\n+            PMap hints = new PMap();\n+            hints.putAll(profile.getHints());\n+            hints.putAll(requestHints);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTQ2MjkwMQ=="}, "originalCommit": {"oid": "e774c1cb8d2beaf009e65ee6d3e9f828f95f94ea"}, "originalPosition": 123}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4763, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}