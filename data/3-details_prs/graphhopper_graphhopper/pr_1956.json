{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4NDY2OTE3", "number": 1956, "title": "refactor PMap to use string,object instead of string,string", "bodyText": "see discussion #1949 (comment) with @easbar .\nThis is cleaner than #1955:\n\nFor put(String, String) the user gets a deprecation notice\nFor put(String, Object) the user gets a compilation error and is forced to use putObject\nget(\"key\") is removed\nget(\"key\", \"default\") breaks backward compatibility if the value for \"key\" is a number. This is acceptable IMO as this usage should be rare except maybe for debugging. no longer the case as renamed to getString\nNote, there is a change in behaviour, but it should be rare in practise: if you use e.g. put(\"xy\", \"123\") i.e. the value is a number and then getString(\"xy\", \"999\") you'll get back \"999\" as \"123\" is detected as number and then getString does not return it as it is not of type String.\n\nparsing parameters from URL should still work due to Helper.toObject(String)", "createdAt": "2020-03-14T22:40:05Z", "url": "https://github.com/graphhopper/graphhopper/pull/1956", "merged": true, "mergeCommit": {"oid": "a5b48ceadc6b3973659075233687dd8991748d87"}, "closed": true, "closedAt": "2020-03-18T11:47:35Z", "author": {"login": "karussell"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNsw0xgH2gAyMzg4NDY2OTE3OmU0NmM4MjIzYzU1OTdkNzUwYTAzYjAzYWU5ZWU4Y2E2NWJiOTExYTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcO1wrzAFqTM3Njc4MzE4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e46c8223c5597d750a03b03ae9ee8ca65bb911a7", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/e46c8223c5597d750a03b03ae9ee8ca65bb911a7", "committedDate": "2020-03-14T22:36:15Z", "message": "refactor PMap to use string,object instead string,string"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b9e2bdc37e5196a5d72d2f01675ae8a4ddfb1a8", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/5b9e2bdc37e5196a5d72d2f01675ae8a4ddfb1a8", "committedDate": "2020-03-14T22:50:22Z", "message": "cleaner toJson conversion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7adb35fcf084a59dcba2689d29ab95f0eab420e8", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/7adb35fcf084a59dcba2689d29ab95f0eab420e8", "committedDate": "2020-03-15T18:22:15Z", "message": "command line parameter reading requires toObject conversion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfb96d06d1fa210e6e652f1c4c01015ba6762d4a", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/dfb96d06d1fa210e6e652f1c4c01015ba6762d4a", "committedDate": "2020-03-15T18:32:44Z", "message": "add changelog entry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41b71999b3e9ff6752ab349e30049828f4773b90", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/41b71999b3e9ff6752ab349e30049828f4773b90", "committedDate": "2020-03-17T21:50:15Z", "message": "Merge branch 'master' into pmap_refactoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NDM2MDY0", "url": "https://github.com/graphhopper/graphhopper/pull/1956#pullrequestreview-376436064", "createdAt": "2020-03-17T22:01:09Z", "commit": {"oid": "dfb96d06d1fa210e6e652f1c4c01015ba6762d4a"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjowMTowOVrOF3vmkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoxMzowOFrOF3v5Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5NTkyMA==", "bodyText": "Why do we have to turn this into a string here? Can we not just keep the object? Aren't there possible cases where we want to add the actual object to the json tree instead of converting it into a string? Hm, but this requires object-to-json serialization to create a (sub)JsonNode?", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r393995920", "createdAt": "2020-03-17T22:01:09Z", "author": {"login": "easbar"}, "path": "client-hc/src/main/java/com/graphhopper/api/GHMatrixAbstractRequester.java", "diffHunk": "@@ -106,13 +106,13 @@ protected JsonNode createPostRequest(GHMRequest ghRequest, Collection<String> ou\n         // requestJson.put(\"elevation\", ghRequest.getHints().getBool(\"elevation\", false));\n         requestJson.put(\"fail_fast\", ghRequest.getFailFast());\n \n-        Map<String, String> hintsMap = ghRequest.getHints().toMap();\n+        Map<String, Object> hintsMap = ghRequest.getHints().toMap();\n         for (String hintKey : hintsMap.keySet()) {\n             if (ignoreSet.contains(hintKey))\n                 continue;\n \n-            String hint = hintsMap.get(hintKey);\n-            requestJson.put(hintKey, hint);\n+            Object hint = hintsMap.get(hintKey);\n+            requestJson.put(hintKey, hint.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb96d06d1fa210e6e652f1c4c01015ba6762d4a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5NzM3MA==", "bodyText": "Similar to AbstractMatrixRequester: Can we keep the actual object instead of turning into a string here? But we can probably add this when we really need it. I just wonder in which case the toString() implementation will be of actual use (if it cannot be parsed later its useless or might even break the json format (?)).", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r393997370", "createdAt": "2020-03-17T22:04:41Z", "author": {"login": "easbar"}, "path": "client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java", "diffHunk": "@@ -258,13 +258,26 @@ private Request createPostRequest(GHRequest ghRequest) {\n         requestJson.put(\"elevation\", ghRequest.getHints().getBool(\"elevation\", elevation));\n         requestJson.put(\"optimize\", ghRequest.getHints().get(\"optimize\", optimize));\n \n-        Map<String, String> hintsMap = ghRequest.getHints().toMap();\n-        for (String hintKey : hintsMap.keySet()) {\n+        Map<String, Object> hintsMap = ghRequest.getHints().toMap();\n+        for (Map.Entry<String, Object> entry : hintsMap.entrySet()) {\n+            String hintKey = entry.getKey();\n             if (ignoreSetForPost.contains(hintKey))\n                 continue;\n \n-            String hint = hintsMap.get(hintKey);\n-            requestJson.put(hintKey, hint);\n+            // try proper JSON conversion at least for numbers and booleans\n+            Object hint = entry.getValue();\n+            if (hint instanceof Boolean)\n+                requestJson.put(hintKey, (Boolean) hint);\n+            else if (hint instanceof Integer)\n+                requestJson.put(hintKey, (Integer) hint);\n+            else if (hint instanceof Long)\n+                requestJson.put(hintKey, (Long) hint);\n+            else if (hint instanceof Float)\n+                requestJson.put(hintKey, (Float) hint);\n+            else if (hint instanceof Double)\n+                requestJson.put(hintKey, (Double) hint);\n+            else\n+                requestJson.put(hintKey, hint.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb96d06d1fa210e6e652f1c4c01015ba6762d4a"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk5ODM3MA==", "bodyText": "Here I also wonder in which cases the toString() method really produces something useful. (In this case it must be valid to use as url parameter).", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r393998370", "createdAt": "2020-03-17T22:07:07Z", "author": {"login": "easbar"}, "path": "client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java", "diffHunk": "@@ -341,9 +354,9 @@ private Request createGetRequest(GHRequest ghRequest) {\n             url += \"&key=\" + WebHelper.encodeURL(key);\n         }\n \n-        for (Map.Entry<String, String> entry : ghRequest.getHints().toMap().entrySet()) {\n+        for (Map.Entry<String, Object> entry : ghRequest.getHints().toMap().entrySet()) {\n             String urlKey = entry.getKey();\n-            String urlValue = entry.getValue();\n+            String urlValue = entry.getValue().toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb96d06d1fa210e6e652f1c4c01015ba6762d4a"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMDY1MQ==", "bodyText": "Why not just name this put as well (overload the existing put method)? Because of the camelcase/underscore conversion?", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r394000651", "createdAt": "2020-03-17T22:13:08Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/util/PMap.java", "diffHunk": "@@ -83,145 +80,93 @@ public static PMap read(String[] args) {\n             }\n \n             String value = arg.substring(index + 1);\n-            String old = map.put(toLowerCase(key), value);\n+            Object old = map.map.put(Helper.camelCaseToUnderScore(key), Helper.toObject(value));\n             if (old != null)\n-                throw new IllegalArgumentException(\"Pair '\" + toLowerCase(key) + \"'='\" + value + \"' not possible to \" +\n+                throw new IllegalArgumentException(\"Pair '\" + Helper.camelCaseToUnderScore(key) + \"'='\" + value + \"' not possible to \" +\n                         \"add to the PMap-object as the key already exists with '\" + old + \"'\");\n         }\n-        return new PMap(map);\n+        return map;\n     }\n \n     public PMap put(PMap map) {\n         this.map.putAll(map.map);\n         return this;\n     }\n \n-    public PMap put(String key, Object str) {\n+    /**\n+     * @deprecated use {@link #putObject(String, Object)} instead\n+     */\n+    public PMap put(String key, String str) {\n         if (str == null)\n             throw new NullPointerException(\"Value cannot be null. Use remove instead.\");\n-\n-        // store in under_score\n-        map.put(Helper.camelCaseToUnderScore(key), str.toString());\n+        map.put(Helper.camelCaseToUnderScore(key), Helper.toObject(str));\n         return this;\n     }\n \n     public PMap remove(String key) {\n         // query accepts camelCase and under_score\n-        map.remove(Helper.camelCaseToUnderScore(key));\n+        map.remove(key);\n         return this;\n     }\n \n     public boolean has(String key) {\n         // query accepts camelCase and under_score\n-        return map.containsKey(Helper.camelCaseToUnderScore(key));\n+        return map.containsKey(key);\n     }\n \n-    public long getLong(String key, long _default) {\n-        String str = get(key);\n-        if (!Helper.isEmpty(str)) {\n-            try {\n-                return Long.parseLong(str);\n-            } catch (Exception ex) {\n-            }\n-        }\n-        return _default;\n+    public boolean getBool(String key, boolean _default) {\n+        Object object = map.get(key);\n+        return object instanceof Boolean ? (Boolean) object : _default;\n     }\n \n     public int getInt(String key, int _default) {\n-        String str = get(key);\n-        if (!Helper.isEmpty(str)) {\n-            try {\n-                return Integer.parseInt(str);\n-            } catch (Exception ex) {\n-            }\n-        }\n-        return _default;\n+        Object object = map.get(key);\n+        return object instanceof Number ? ((Number) object).intValue() : _default;\n     }\n \n-    public boolean getBool(String key, boolean _default) {\n-        String str = get(key);\n-        if (!Helper.isEmpty(str)) {\n-            try {\n-                return Boolean.parseBoolean(str);\n-            } catch (Exception ex) {\n-            }\n-        }\n-        return _default;\n+    public long getLong(String key, long _default) {\n+        Object object = map.get(key);\n+        return object instanceof Number ? ((Number) object).longValue() : _default;\n     }\n \n-    public double getDouble(String key, double _default) {\n-        String str = get(key);\n-        if (!Helper.isEmpty(str)) {\n-            try {\n-                return Double.parseDouble(str);\n-            } catch (Exception ex) {\n-            }\n-        }\n-        return _default;\n+    public float getFloat(String key, float _default) {\n+        Object object = map.get(key);\n+        return object instanceof Number ? ((Number) object).floatValue() : _default;\n     }\n \n-    public float getFloat(String key, float _default) {\n-        String str = get(key);\n-        if (!Helper.isEmpty(str)) {\n-            try {\n-                return Float.parseFloat(str);\n-            } catch (Exception ex) {\n-            }\n-        }\n-        return _default;\n+    public double getDouble(String key, double _default) {\n+        Object object = map.get(key);\n+        return object instanceof Number ? ((Number) object).doubleValue() : _default;\n     }\n \n     public String get(String key, String _default) {\n-        String str = get(key);\n-        if (Helper.isEmpty(str))\n-            return _default;\n-\n-        return str;\n+        Object object = map.get(key);\n+        return object instanceof String ? (String) object : _default;\n     }\n \n-    String get(String key) {\n-        if (Helper.isEmpty(key))\n-            return \"\";\n-\n-        // query accepts camelCase and under_score\n-        String val = map.get(Helper.camelCaseToUnderScore(key));\n-        if (val == null)\n-            return \"\";\n+    public Object getObject(String key, Object _default) {\n+        Object object = map.get(key);\n+        return object == null ? _default : object;\n+    }\n \n-        return val;\n+    public PMap putObject(String key, Object object) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dfb96d06d1fa210e6e652f1c4c01015ba6762d4a"}, "originalPosition": 179}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d3e4eae5508b51ef7088e189da6af40b9a9cbf1", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/1d3e4eae5508b51ef7088e189da6af40b9a9cbf1", "committedDate": "2020-03-17T22:15:51Z", "message": "Minor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59a932d525b79e0483f5b5ceae8329f6318d92cc", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/59a932d525b79e0483f5b5ceae8329f6318d92cc", "committedDate": "2020-03-18T10:42:57Z", "message": "minor simplification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e3d04ed88f9d18d4c31a80f9137e61028fd8280", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/9e3d04ed88f9d18d4c31a80f9137e61028fd8280", "committedDate": "2020-03-18T10:42:57Z", "message": "avoid value.toString for POST"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NzUyNzk1", "url": "https://github.com/graphhopper/graphhopper/pull/1956#pullrequestreview-376752795", "createdAt": "2020-03-18T10:53:10Z", "commit": {"oid": "9e3d04ed88f9d18d4c31a80f9137e61028fd8280"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDo1MzoxMFrOF3_pfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMDo1MzoxMFrOF3_pfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI1ODgxNA==", "bodyText": "Does this not give a NPE in case there is no u_turn_costs entry?", "url": "https://github.com/graphhopper/graphhopper/pull/1956#discussion_r394258814", "createdAt": "2020-03-18T10:53:10Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/ProfileResolver.java", "diffHunk": "@@ -200,10 +198,10 @@ private String getCHRequestAsString(HintsMap hintsMap, Boolean edgeBased, Intege\n     }\n \n     private Boolean getEdgeBased(HintsMap hintsMap) {\n-        return hintsMap.has(Parameters.Routing.EDGE_BASED) ? hintsMap.getBool(Parameters.Routing.EDGE_BASED, false) : null;\n+        return (Boolean) hintsMap.getObject(Parameters.Routing.EDGE_BASED, null);\n     }\n \n     private Integer getUTurnCosts(HintsMap hintsMap) {\n-        return hintsMap.has(Parameters.Routing.U_TURN_COSTS) ? hintsMap.getInt(Parameters.Routing.U_TURN_COSTS, INFINITE_U_TURN_COSTS) : null;\n+        return (Integer) hintsMap.getObject(Parameters.Routing.U_TURN_COSTS, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e3d04ed88f9d18d4c31a80f9137e61028fd8280"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a00ac1bd67bc4b2baaeea459644be0dd3c38abf8", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/a00ac1bd67bc4b2baaeea459644be0dd3c38abf8", "committedDate": "2020-03-18T11:11:20Z", "message": "avoid silent errors and rename get to getString"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NzgzMTgw", "url": "https://github.com/graphhopper/graphhopper/pull/1956#pullrequestreview-376783180", "createdAt": "2020-03-18T11:39:10Z", "commit": {"oid": "a00ac1bd67bc4b2baaeea459644be0dd3c38abf8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4612, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}