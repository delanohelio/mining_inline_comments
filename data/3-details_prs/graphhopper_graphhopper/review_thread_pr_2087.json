{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzNjA3ODUy", "number": 2087, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoxOTo0OFrOEQRqlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzowNzowN1rOEQnRxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTAyMTAxOnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoxOTo0OFrOG0VqbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoxOTo0OFrOG0VqbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNDA2MQ==", "bodyText": "This method was not really related to EdgeAccess.", "url": "https://github.com/graphhopper/graphhopper/pull/2087#discussion_r457534061", "createdAt": "2020-07-20T16:19:48Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "diffHunk": "@@ -112,23 +112,6 @@ public BaseGraph(Directory dir, final EncodingManager encodingManager, boolean w\n         this.edges = dir.find(\"edges\", DAType.getPreferredInt(dir.getDefaultType()));\n         this.listener = listener;\n         this.edgeAccess = new EdgeAccess(edges) {\n-            @Override\n-            EdgeIteratorState getEdgeProps(int edgeId, int adjNode, EdgeFilter edgeFilter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b645b5816b52bfe4a766d6eac5b8c4527d1291f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTAyMzU5OnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyMDozMVrOG0VsAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyMDozMVrOG0VsAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNDQ2Nw==", "bodyText": "This -1 appeared frequently, and was the only value used for this parameter", "url": "https://github.com/graphhopper/graphhopper/pull/2087#discussion_r457534467", "createdAt": "2020-07-20T16:20:31Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "diffHunk": "@@ -1046,12 +1033,12 @@ private long nextGeoRef(int arrayLength) {\n         return tmp;\n     }\n \n-    protected static class EdgeIterable extends CommonEdgeIterator implements EdgeExplorer, EdgeIterator {\n+    protected static class EdgeIteratorImpl extends EdgeIteratorStateImpl implements EdgeExplorer, EdgeIterator {\n         final EdgeFilter filter;\n         int nextEdgeId;\n \n-        public EdgeIterable(BaseGraph baseGraph, EdgeAccess edgeAccess, EdgeFilter filter) {\n-            super(-1, edgeAccess, baseGraph);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b645b5816b52bfe4a766d6eac5b8c4527d1291f"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTAyNTg0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyMToxMFrOG0Vtdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyMToxMFrOG0Vtdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNDgzOQ==", "bodyText": "I renamed this for consistency with the other iterator class names.", "url": "https://github.com/graphhopper/graphhopper/pull/2087#discussion_r457534839", "createdAt": "2020-07-20T16:21:10Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "diffHunk": "@@ -1046,12 +1033,12 @@ private long nextGeoRef(int arrayLength) {\n         return tmp;\n     }\n \n-    protected static class EdgeIterable extends CommonEdgeIterator implements EdgeExplorer, EdgeIterator {\n+    protected static class EdgeIteratorImpl extends EdgeIteratorStateImpl implements EdgeExplorer, EdgeIterator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b645b5816b52bfe4a766d6eac5b8c4527d1291f"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTAyODg0OnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyMTo1NVrOG0VvXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyMTo1NVrOG0VvXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNTMyNA==", "bodyText": "Moved this one level up, its hardly related to the iterator but its more like the initialization code of an edge state", "url": "https://github.com/graphhopper/graphhopper/pull/2087#discussion_r457535324", "createdAt": "2020-07-20T16:21:55Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "diffHunk": "@@ -1062,33 +1049,6 @@ final void setEdgeId(int edgeId) {\n             this.nextEdgeId = this.edgeId = edgeId;\n         }\n \n-        /**\n-         * @return false if the edge has not a node equal to expectedAdjNode\n-         */\n-        final boolean init(int tmpEdgeId, int expectedAdjNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b645b5816b52bfe4a766d6eac5b8c4527d1291f"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTAzMzU4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "isResolved": true, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyMzowOFrOG0VyWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxNDoyNjo0OFrOG1k_Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNjA5MQ==", "bodyText": "Renamed this because its more like an 'edge' than an iterator. Its used as base class for the iterators yes, but there wasn't much that was 'iterator-like' about this class.", "url": "https://github.com/graphhopper/graphhopper/pull/2087#discussion_r457536091", "createdAt": "2020-07-20T16:23:08Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "diffHunk": "@@ -1201,12 +1154,9 @@ public final EdgeIteratorState detach(boolean reverseArg) {\n         }\n     }\n \n-    /**\n-     * Common private super class for AllEdgesIteratorImpl and EdgeIterable\n-     */\n-    static abstract class CommonEdgeIterator implements EdgeIteratorState {\n+    static class EdgeIteratorStateImpl implements EdgeIteratorState {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b645b5816b52bfe4a766d6eac5b8c4527d1291f"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA3NjE2NA==", "bodyText": "Thanks! I think it is probably time to try again if we can separate the EdgeIterator interface from EdgeIteratorState (the last time I tried this it was still to heavily coupled in CH but maybe now this is possible?)", "url": "https://github.com/graphhopper/graphhopper/pull/2087#discussion_r458076164", "createdAt": "2020-07-21T13:00:01Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "diffHunk": "@@ -1201,12 +1154,9 @@ public final EdgeIteratorState detach(boolean reverseArg) {\n         }\n     }\n \n-    /**\n-     * Common private super class for AllEdgesIteratorImpl and EdgeIterable\n-     */\n-    static abstract class CommonEdgeIterator implements EdgeIteratorState {\n+    static class EdgeIteratorStateImpl implements EdgeIteratorState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNjA5MQ=="}, "originalCommit": {"oid": "5b645b5816b52bfe4a766d6eac5b8c4527d1291f"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA3OTUxNw==", "bodyText": "Ok, but why would this be better? An EdgeIterator is just an EdgeIteratorState with a next() method. I don't think this ever bothered me.", "url": "https://github.com/graphhopper/graphhopper/pull/2087#discussion_r458079517", "createdAt": "2020-07-21T13:05:00Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "diffHunk": "@@ -1201,12 +1154,9 @@ public final EdgeIteratorState detach(boolean reverseArg) {\n         }\n     }\n \n-    /**\n-     * Common private super class for AllEdgesIteratorImpl and EdgeIterable\n-     */\n-    static abstract class CommonEdgeIterator implements EdgeIteratorState {\n+    static class EdgeIteratorStateImpl implements EdgeIteratorState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNjA5MQ=="}, "originalCommit": {"oid": "5b645b5816b52bfe4a766d6eac5b8c4527d1291f"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA4ODAyMQ==", "bodyText": "Hmmh, my argument would be that they should be separated like Object is separate from Iterator, but yes, here we change the properties of \"Object\" with every iterator.next() call and so EdgeIterator is not really an Iterator it is more an EdgeIteratorState with a setPointer/setCursor method (very similar to the ResultSet from jdbc API)", "url": "https://github.com/graphhopper/graphhopper/pull/2087#discussion_r458088021", "createdAt": "2020-07-21T13:17:45Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "diffHunk": "@@ -1201,12 +1154,9 @@ public final EdgeIteratorState detach(boolean reverseArg) {\n         }\n     }\n \n-    /**\n-     * Common private super class for AllEdgesIteratorImpl and EdgeIterable\n-     */\n-    static abstract class CommonEdgeIterator implements EdgeIteratorState {\n+    static class EdgeIteratorStateImpl implements EdgeIteratorState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNjA5MQ=="}, "originalCommit": {"oid": "5b645b5816b52bfe4a766d6eac5b8c4527d1291f"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA5NDYyNA==", "bodyText": "Ok for me an EdgeIteratorState is a proxy to a row of data, or in some cases its an actual row of data (after calling detach()). An EdgeIterator is the same thing except that it can be moved to another edge. I think @michaz suggested calling it a 'cursor' because it changes state after calling next(), compared to the java.util.Iterator which returns the next element when calling next(). But honestly, I am so used to it I do not really care whether its called iterator or cursor. But I do not see real value in separating EdgeIteratorState from EdgeIterator, because like I said in this case the latter is really the same thing as the first except that it allows to be shifted (using the next() method).\nNow we are at it how would we call an EdgeIteratorState that can be set to an arbitrary edge (not just move to the next edge at the same base node). Would it be a SingleEdgeExplorer or a SingleEdgeIterator or a SingleEdgeCursor? \ud83d\ude03", "url": "https://github.com/graphhopper/graphhopper/pull/2087#discussion_r458094624", "createdAt": "2020-07-21T13:26:27Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "diffHunk": "@@ -1201,12 +1154,9 @@ public final EdgeIteratorState detach(boolean reverseArg) {\n         }\n     }\n \n-    /**\n-     * Common private super class for AllEdgesIteratorImpl and EdgeIterable\n-     */\n-    static abstract class CommonEdgeIterator implements EdgeIteratorState {\n+    static class EdgeIteratorStateImpl implements EdgeIteratorState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNjA5MQ=="}, "originalCommit": {"oid": "5b645b5816b52bfe4a766d6eac5b8c4527d1291f"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3NzAzMg==", "bodyText": "Probably the EdgeIterator is not a \"cursor\" because it has no direct setEdgeId method, only an implicit \"next()\" and so \"iterator\" is more appropriate (?)\n\nNow we are at it how would we call an EdgeIteratorState that can be set to an arbitrary edge (not just move to the next edge at the same base node).\n\nI like SingleEdgeCursor (also it would have an explicit setEdgeId :) ? )", "url": "https://github.com/graphhopper/graphhopper/pull/2087#discussion_r458177032", "createdAt": "2020-07-21T15:15:23Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "diffHunk": "@@ -1201,12 +1154,9 @@ public final EdgeIteratorState detach(boolean reverseArg) {\n         }\n     }\n \n-    /**\n-     * Common private super class for AllEdgesIteratorImpl and EdgeIterable\n-     */\n-    static abstract class CommonEdgeIterator implements EdgeIteratorState {\n+    static class EdgeIteratorStateImpl implements EdgeIteratorState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNjA5MQ=="}, "originalCommit": {"oid": "5b645b5816b52bfe4a766d6eac5b8c4527d1291f"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4NDExNA==", "bodyText": "Ok yes SingleEdgeCursor is good and avoids the confusion of calling it \"iterator\" or \"explorer\" :) Yes its main method would be setEdgeId (or setEdge or moveToEdge(Id) or `setToEdge(Id)?).", "url": "https://github.com/graphhopper/graphhopper/pull/2087#discussion_r458184114", "createdAt": "2020-07-21T15:24:31Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "diffHunk": "@@ -1201,12 +1154,9 @@ public final EdgeIteratorState detach(boolean reverseArg) {\n         }\n     }\n \n-    /**\n-     * Common private super class for AllEdgesIteratorImpl and EdgeIterable\n-     */\n-    static abstract class CommonEdgeIterator implements EdgeIteratorState {\n+    static class EdgeIteratorStateImpl implements EdgeIteratorState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNjA5MQ=="}, "originalCommit": {"oid": "5b645b5816b52bfe4a766d6eac5b8c4527d1291f"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4NzEwNQ==", "bodyText": "Probably the EdgeIterator is not a \"cursor\" because it has no direct setEdgeId method, only an implicit \"next()\" and so \"iterator\" is more appropriate (?)\n\nHppc does this:\n      for (IntCursor cursor : IntArrayList.from(3, 6, 5)) {\n            System.out.println(cursor.value);\n      }\nand here we get the IntCursor when calling next on the Iterator<IntCursor>, so the IntCursor here is the equivalent to our EdgeIteratorState (the proxy object that gives access to the index and value of an int array for example).", "url": "https://github.com/graphhopper/graphhopper/pull/2087#discussion_r458187105", "createdAt": "2020-07-21T15:28:30Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "diffHunk": "@@ -1201,12 +1154,9 @@ public final EdgeIteratorState detach(boolean reverseArg) {\n         }\n     }\n \n-    /**\n-     * Common private super class for AllEdgesIteratorImpl and EdgeIterable\n-     */\n-    static abstract class CommonEdgeIterator implements EdgeIteratorState {\n+    static class EdgeIteratorStateImpl implements EdgeIteratorState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNjA5MQ=="}, "originalCommit": {"oid": "5b645b5816b52bfe4a766d6eac5b8c4527d1291f"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODgzMzc2Mg==", "bodyText": "Ohhhh, yes yes yes yes yes, standard iteration syntax, please. :-)", "url": "https://github.com/graphhopper/graphhopper/pull/2087#discussion_r458833762", "createdAt": "2020-07-22T14:26:48Z", "author": {"login": "michaz"}, "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "diffHunk": "@@ -1201,12 +1154,9 @@ public final EdgeIteratorState detach(boolean reverseArg) {\n         }\n     }\n \n-    /**\n-     * Common private super class for AllEdgesIteratorImpl and EdgeIterable\n-     */\n-    static abstract class CommonEdgeIterator implements EdgeIteratorState {\n+    static class EdgeIteratorStateImpl implements EdgeIteratorState {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNjA5MQ=="}, "originalCommit": {"oid": "5b645b5816b52bfe4a766d6eac5b8c4527d1291f"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NTAzNTcxOnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjoyMzo0M1rOG0VzxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzowMDoxMFrOG02wiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNjQ1Mw==", "bodyText": "The chFlags shouldn't belong to this (basegraph) iterator, I guess this was forgotten in some previous refactoring", "url": "https://github.com/graphhopper/graphhopper/pull/2087#discussion_r457536453", "createdAt": "2020-07-20T16:23:43Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "diffHunk": "@@ -1215,15 +1165,39 @@ public final EdgeIteratorState detach(boolean reverseArg) {\n         boolean freshFlags;\n         int edgeId = -1;\n         private final IntsRef edgeFlags;\n-        int chFlags;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b645b5816b52bfe4a766d6eac5b8c4527d1291f"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA3NjI5Ng==", "bodyText": "Nice!", "url": "https://github.com/graphhopper/graphhopper/pull/2087#discussion_r458076296", "createdAt": "2020-07-21T13:00:10Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "diffHunk": "@@ -1215,15 +1165,39 @@ public final EdgeIteratorState detach(boolean reverseArg) {\n         boolean freshFlags;\n         int edgeId = -1;\n         private final IntsRef edgeFlags;\n-        int chFlags;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzUzNjQ1Mw=="}, "originalCommit": {"oid": "5b645b5816b52bfe4a766d6eac5b8c4527d1291f"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODU1Njg0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzowNTo0OFrOG02-6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzozMDoyOFrOG04DNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA3OTk3OQ==", "bodyText": "BTW: I'm not sure if it is a good thing to do these logic checks via if instead of `assert' as they could have a potential slow down, but I wasn't able to measure this difference and so I preferred long term safety (i.e. show these problems even in production)", "url": "https://github.com/graphhopper/graphhopper/pull/2087#discussion_r458079979", "createdAt": "2020-07-21T13:05:48Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "diffHunk": "@@ -1130,29 +1090,22 @@ void goToNext() {\n \n         @Override\n         public EdgeIteratorState detach(boolean reverseArg) {\n-            if (edgeId == nextEdgeId || !EdgeIterator.Edge.isValid(edgeId))\n-                throw new IllegalStateException(\"call next before detaching or setEdgeId (edgeId:\" + edgeId + \" vs. next \" + nextEdgeId + \")\");\n-\n-            EdgeIteratorState iter = edgeAccess.getEdgeProps(edgeId, reverseArg ? baseNode : adjNode, filter);\n-            assert iter != null;\n-            if (reverseArg) {\n-                // for #162\n-                ((EdgeIterable) iter).reverse = !reverse;\n-            }\n-            return iter;\n+            if (edgeId == nextEdgeId)\n+                throw new IllegalStateException(\"call next before detaching (edgeId:\" + edgeId + \" vs. next \" + nextEdgeId + \")\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9018712a92c338a9dfc9d108bf0ab71cd893d305"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA5NzQ2Mw==", "bodyText": "Hm yes good question. An integer comparison == should hardly ever matter? Except the method gets too long and is no longer inlined or something? Very hard or impossible to say without measuring.", "url": "https://github.com/graphhopper/graphhopper/pull/2087#discussion_r458097463", "createdAt": "2020-07-21T13:30:28Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "diffHunk": "@@ -1130,29 +1090,22 @@ void goToNext() {\n \n         @Override\n         public EdgeIteratorState detach(boolean reverseArg) {\n-            if (edgeId == nextEdgeId || !EdgeIterator.Edge.isValid(edgeId))\n-                throw new IllegalStateException(\"call next before detaching or setEdgeId (edgeId:\" + edgeId + \" vs. next \" + nextEdgeId + \")\");\n-\n-            EdgeIteratorState iter = edgeAccess.getEdgeProps(edgeId, reverseArg ? baseNode : adjNode, filter);\n-            assert iter != null;\n-            if (reverseArg) {\n-                // for #162\n-                ((EdgeIterable) iter).reverse = !reverse;\n-            }\n-            return iter;\n+            if (edgeId == nextEdgeId)\n+                throw new IllegalStateException(\"call next before detaching (edgeId:\" + edgeId + \" vs. next \" + nextEdgeId + \")\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA3OTk3OQ=="}, "originalCommit": {"oid": "9018712a92c338a9dfc9d108bf0ab71cd893d305"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODU2MTk3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzowNzowN1rOG03B_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzoyMjoxMlrOG03qqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA4MDc2Ng==", "bodyText": "I think we should always update the edgePointer to the new value before returning.", "url": "https://github.com/graphhopper/graphhopper/pull/2087#discussion_r458080766", "createdAt": "2020-07-21T13:07:07Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "diffHunk": "@@ -1164,10 +1117,10 @@ public int length() {\n         public boolean next() {\n             while (true) {\n                 edgeId++;\n-                edgePointer = (long) edgeId * edgeAccess.getEntryBytes();\n                 if (edgeId >= baseGraph.edgeCount)\n                     return false;\n \n+                edgePointer = edgeAccess.toPointer(edgeId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9018712a92c338a9dfc9d108bf0ab71cd893d305"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA4Mjk0Mg==", "bodyText": "Hm, if false is returned we are not using the iterator anymore? But maybe you are right and its more consistent the way you proposed. Should not matter performance-wise, because usually it has to be updated anyway (unless we are at the end of the iteration)", "url": "https://github.com/graphhopper/graphhopper/pull/2087#discussion_r458082942", "createdAt": "2020-07-21T13:10:19Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "diffHunk": "@@ -1164,10 +1117,10 @@ public int length() {\n         public boolean next() {\n             while (true) {\n                 edgeId++;\n-                edgePointer = (long) edgeId * edgeAccess.getEntryBytes();\n                 if (edgeId >= baseGraph.edgeCount)\n                     return false;\n \n+                edgePointer = edgeAccess.toPointer(edgeId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA4MDc2Ng=="}, "originalCommit": {"oid": "9018712a92c338a9dfc9d108bf0ab71cd893d305"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA4NDQyMw==", "bodyText": "But then we need to update adjNode and baseNode etc. as well? I think using the iterator after iter.next() == false is not well defined anyway? I always used it like this so far while (iter.next()) { // do sth }", "url": "https://github.com/graphhopper/graphhopper/pull/2087#discussion_r458084423", "createdAt": "2020-07-21T13:12:32Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "diffHunk": "@@ -1164,10 +1117,10 @@ public int length() {\n         public boolean next() {\n             while (true) {\n                 edgeId++;\n-                edgePointer = (long) edgeId * edgeAccess.getEntryBytes();\n                 if (edgeId >= baseGraph.edgeCount)\n                     return false;\n \n+                edgePointer = edgeAccess.toPointer(edgeId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA4MDc2Ng=="}, "originalCommit": {"oid": "9018712a92c338a9dfc9d108bf0ab71cd893d305"}, "originalPosition": 172}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA5MTE3OQ==", "bodyText": "Ah, indeed, you are right.", "url": "https://github.com/graphhopper/graphhopper/pull/2087#discussion_r458091179", "createdAt": "2020-07-21T13:22:12Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/storage/BaseGraph.java", "diffHunk": "@@ -1164,10 +1117,10 @@ public int length() {\n         public boolean next() {\n             while (true) {\n                 edgeId++;\n-                edgePointer = (long) edgeId * edgeAccess.getEntryBytes();\n                 if (edgeId >= baseGraph.edgeCount)\n                     return false;\n \n+                edgePointer = edgeAccess.toPointer(edgeId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA4MDc2Ng=="}, "originalCommit": {"oid": "9018712a92c338a9dfc9d108bf0ab71cd893d305"}, "originalPosition": 172}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4824, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}