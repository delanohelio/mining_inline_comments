{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMTcxMDc2", "number": 2202, "title": "removed AbstractFlagEncoder.speedDefault and flagsDefault()", "bodyText": "It took a bit time, but finally I got rid of this method :) (usage was approx 2000 times). This will likely make it easier to move average_speed and access parsing into a separate TagParser.\nMy best friend was regex replace functionality of IntelliJ ala:\ngraph.edge\\((\\d+)..(\\d+)..(\\d+), (or variations with (\\d+.\\d+) or (\\w+))\nGHUtility.setProperties(graph.edge($1,$2).setDistance($3),encoder,60,true,\nThe new mechanism is a bit clumsy, but if you think about this then it is really necessary to initialize the edge with a specific speed (and vehicle). And in production we do not use this method, only for tests.\nTODO: replace more single method calls of GHUtility with the new GHUtility.setProperties(List<EdgeIteratorState>)?", "createdAt": "2020-12-06T10:06:29Z", "url": "https://github.com/graphhopper/graphhopper/pull/2202", "merged": true, "mergeCommit": {"oid": "bbb15dfb6b67ace6e060c846ba69fae15641eddb"}, "closed": true, "closedAt": "2020-12-09T12:21:07Z", "author": {"login": "karussell"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdjeA1hgH2gAyNTMzMTcxMDc2OmMzMjE0OTQxYzdhNTNiNzFmYzZkMjc0ZWNkNWVhZTEyZjI3MGMzYTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdl298dAFqTU1MDk1NTU4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/c3214941c7a53b71fc6d274ecd5eae12f270c3a7", "committedDate": "2020-12-06T10:02:39Z", "message": "removed AbstractFlagEncoder.speedDefault and flagsDefault() and EncodingManager.flagsDefault()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NjkyMzg2", "url": "https://github.com/graphhopper/graphhopper/pull/2202#pullrequestreview-545692386", "createdAt": "2020-12-06T10:42:45Z", "commit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMDo0Mjo0NlrOIAIi2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMDo0Mjo0NlrOIAIi2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxMDkwNw==", "bodyText": "Hm I think for tests like this graph.edge(a, b, dist, bidir) was quite useful? Can we not keep it somehow?", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537010907", "createdAt": "2020-12-06T10:42:46Z", "author": {"login": "easbar"}, "path": "core/src/test/java/com/graphhopper/routing/AlternativeRouteCHTest.java", "diffHunk": "@@ -57,23 +58,23 @@ public GraphHopperStorage createTestGraph(EncodingManager tmpEM) {\n         // has to be locally-shortest to be considered.\n         // So we get all three alternatives.\n \n-        graph.edge(5, 6, 10000, true);\n-        graph.edge(6, 3, 10000, true);\n-        graph.edge(3, 4, 10000, true);\n-        graph.edge(4, 10, 10000, true);\n+        GHUtility.setProperties(graph.edge(5, 6).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(6, 3).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(3, 4).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(4, 10).setDistance(10000), carFE, 60, true, true);\n \n-        graph.edge(6, 7, 10000, true);\n-        graph.edge(7, 8, 10000, true);\n-        graph.edge(8, 4, 10000, true);\n+        GHUtility.setProperties(graph.edge(6, 7).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(7, 8).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(8, 4).setDistance(10000), carFE, 60, true, true);\n \n-        graph.edge(5, 1, 10000, true);\n-        graph.edge(1, 9, 10000, true);\n-        graph.edge(9, 2, 10000, true);\n-        graph.edge(2, 3, 10000, true);\n+        GHUtility.setProperties(graph.edge(5, 1).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(1, 9).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(9, 2).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(2, 3).setDistance(10000), carFE, 60, true, true);\n \n-        graph.edge(4, 11, 9000, true);\n-        graph.edge(11, 12, 9000, true);\n-        graph.edge(12, 10, 10000, true);\n+        GHUtility.setProperties(graph.edge(4, 11).setDistance(9000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(11, 12).setDistance(9000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(12, 10).setDistance(10000), carFE, 60, true, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NjkzNTk5", "url": "https://github.com/graphhopper/graphhopper/pull/2202#pullrequestreview-545693599", "createdAt": "2020-12-06T10:59:01Z", "commit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMDo1OTowMVrOIAItXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMDo1OTowMVrOIAItXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxMzU5OA==", "bodyText": "The name of this method seems rather confusing. The old setProperties method should probably be called setAccessAndSpeed? And this new one just sets the access and speed for all encoders, but uses half the max speed as speed? So its something like setAccessAndHalfTheMaxSpeedForAllEncoders?\nBtw. what I also think is confusing is that we have graph.edge(a, b) and not graph.edge(a, b, dist). Do we ever need an edge without a distance? Maybe distance should go in these setProperties kind of methods as well then?", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537013598", "createdAt": "2020-12-06T10:59:01Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/util/GHUtility.java", "diffHunk": "@@ -653,6 +655,15 @@ public static IntsRef setProperties(IntsRef edgeFlags, FlagEncoder encoder, doub\n         return edgeFlags;\n     }\n \n+    public static void setProperties(List<EdgeIteratorState> edges, EncodingManager em, boolean fwd, boolean bwd) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NjkzNzcy", "url": "https://github.com/graphhopper/graphhopper/pull/2202#pullrequestreview-545693772", "createdAt": "2020-12-06T11:01:03Z", "commit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMTowMTowM1rOIAIuzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMTowMTowM1rOIAIuzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxMzk2Nw==", "bodyText": "What I like here is that the speed is now explicit, while previously one always had to keep in mind that its 60 in these tests. Maybe I just have to get used to this verbose code to create a testing graph, but also see my other comment about setProperties which I do not find intuitive.", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537013967", "createdAt": "2020-12-06T11:01:03Z", "author": {"login": "easbar"}, "path": "core/src/test/java/com/graphhopper/reader/dem/BridgeElevationInterpolatorTest.java", "diffHunk": "@@ -75,17 +73,19 @@ public void interpolatesElevationOfPillarNodes() {\n         na.setNode(8, 30, 10, 10);\n         na.setNode(9, 40, 10, 0);\n \n-        EdgeIteratorState edge01 = graph.edge(0, 1, 10, true);\n-        EdgeIteratorState edge12 = graph.edge(1, 2, 10, true);\n-        EdgeIteratorState edge23 = graph.edge(2, 3, 10, true);\n-        EdgeIteratorState edge34 = graph.edge(3, 4, 10, true);\n-        EdgeIteratorState edge56 = graph.edge(5, 6, 10, true);\n-        EdgeIteratorState edge67 = graph.edge(6, 7, 10, true);\n-        EdgeIteratorState edge78 = graph.edge(7, 8, 10, true);\n-        EdgeIteratorState edge89 = graph.edge(8, 9, 10, true);\n-        EdgeIteratorState edge17 = graph.edge(1, 7, 10, true);\n-        EdgeIteratorState edge27 = graph.edge(2, 7, 10, true);\n-        EdgeIteratorState edge37 = graph.edge(3, 7, 10, true);\n+        FlagEncoder encoder = encodingManager.getEncoder(\"car\");\n+        EdgeIteratorState edge01 = GHUtility.setProperties(graph.edge(0, 1).setDistance(10), encoder, 60, true, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1Njk0MzMw", "url": "https://github.com/graphhopper/graphhopper/pull/2202#pullrequestreview-545694330", "createdAt": "2020-12-06T11:09:27Z", "commit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMTowOToyN1rOIAI0Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMToxNDoyNVrOIAI3ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxNTM1NA==", "bodyText": "We should probably run code formatting here. For example you can undo all changes and commit them again with the \"format  on commit\" checkbox enabled in intellij.", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537015354", "createdAt": "2020-12-06T11:09:27Z", "author": {"login": "easbar"}, "path": "core/src/test/java/com/graphhopper/routing/AlternativeRouteTest.java", "diffHunk": "@@ -69,28 +71,28 @@ public AlternativeRouteTest(TraversalMode tMode) {\n         });\n     }\n \n-    public static void initTestGraph(Graph graph) {\n+    public static void initTestGraph(Graph graph, FlagEncoder encoder) {\n         /* 9\n          _/\\\n          1  2-3-4-10\n          \\   /   \\\n          5--6-7---8\n         \n          */\n-        graph.edge(1, 9, 1, true);\n-        graph.edge(9, 2, 1, true);\n-        graph.edge(2, 3, 1, true);\n-        graph.edge(3, 4, 1, true);\n-        graph.edge(4, 10, 1, true);\n+        GHUtility.setProperties(graph.edge(1,9).setDistance(1),encoder,60,true, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxNjIwMg==", "bodyText": "I am not sure yet if this is an improvement compared to several calls to setProperties? Especially setting speed=maxspeed/2  seems not very obvious (or maybe I do not understand it yet)?", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537016202", "createdAt": "2020-12-06T11:14:25Z", "author": {"login": "easbar"}, "path": "core/src/test/java/com/graphhopper/storage/TurnCostStorageTest.java", "diffHunk": "@@ -52,12 +53,13 @@ public void setup() {\n     // 2--3\n     // |\n     // 4\n-    public static void initGraph(Graph g) {\n-        g.edge(0, 1, 3, true);\n-        g.edge(0, 2, 1, true);\n-        g.edge(1, 3, 1, true);\n-        g.edge(2, 3, 1, true);\n-        g.edge(2, 4, 1, true);\n+    public static void initGraph(GraphHopperStorage g) {\n+        GHUtility.setProperties(Arrays.asList(\n+                g.edge(0, 1).setDistance(3),\n+                g.edge(0, 2).setDistance(1),\n+                g.edge(1, 3).setDistance(1),\n+                g.edge(2, 3).setDistance(1),\n+                g.edge(2, 4).setDistance(1)), g.getEncodingManager(), true, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff4755cda32eaf9e7f1198e0dee9e760c9239fb7", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/ff4755cda32eaf9e7f1198e0dee9e760c9239fb7", "committedDate": "2020-12-07T00:23:24Z", "message": "rename setProperties to setSpeed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "418454a9c9e070a283e1fab2037b2f11bd51f50f", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/418454a9c9e070a283e1fab2037b2f11bd51f50f", "committedDate": "2020-12-07T00:36:19Z", "message": "introduce methods ala edge.set(ev, fwd, bwd)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e26eda5c2542ae5cc81de1f5d0309507f88c7b6", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/2e26eda5c2542ae5cc81de1f5d0309507f88c7b6", "committedDate": "2020-12-08T12:26:26Z", "message": "strict handling for new edge.set(enc, fwd, bwd) method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f982c8d52808f3f113f45207f323e3176730b2ef", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/f982c8d52808f3f113f45207f323e3176730b2ef", "committedDate": "2020-12-08T13:22:51Z", "message": "use bulk setSpeed in some more places"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3OTE2NTQ3", "url": "https://github.com/graphhopper/graphhopper/pull/2202#pullrequestreview-547916547", "createdAt": "2020-12-09T07:53:26Z", "commit": {"oid": "f982c8d52808f3f113f45207f323e3176730b2ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84f673a09747df92c0e66428aad8484f2f2060c9", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/84f673a09747df92c0e66428aad8484f2f2060c9", "committedDate": "2020-12-09T12:15:48Z", "message": "reduce usage of setReverse with new set method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTU1NTg0", "url": "https://github.com/graphhopper/graphhopper/pull/2202#pullrequestreview-550955584", "createdAt": "2020-12-13T20:14:58Z", "commit": {"oid": "84f673a09747df92c0e66428aad8484f2f2060c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMDoxNDo1OFrOIE413Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMDoxNDo1OFrOIE413Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk5NjUwOQ==", "bodyText": "Why did you add the speed parameter here? The previous behavior was that the default speed was used if randomSpeedEnc was null and random speeds were generated otherwise. In case randomSpeedEnc.isStoreTwoDirections different speeds were used for fwd/bwd direction. Ok now the default speed is gone we need some speed parameter (or just set it to 60 inside this method?), but we should still use random speeds were we did before. Right now speed is != null almost everywhere. Also its a bit problematic to change this method because it might break older seeds (that we should not rely on, but I think in some cases we still do...)", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r541996509", "createdAt": "2020-12-13T20:14:58Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/util/GHUtility.java", "diffHunk": "@@ -168,8 +168,11 @@ private static void printUnitTestEdge(FlagEncoder encoder, EdgeIteratorState edg\n                 \"graph.edge(%d, %d, %f, %s); // edgeId=%s\\n\", from, to, edge.getDistance(), fwd && bwd ? \"true\" : \"false\", edge.getEdge());\n     }\n \n+    /**\n+     * @param speed if null a random speed will be assign to every edge\n+     */\n     public static void buildRandomGraph(Graph graph, Random random, int numNodes, double meanDegree, boolean allowLoops,\n-                                        boolean allowZeroDistance, DecimalEncodedValue randomSpeedEnc,\n+                                        boolean allowZeroDistance, BooleanEncodedValue accessEnc, DecimalEncodedValue speedEnc, Double speed,\n                                         double pNonZeroLoop, double pBothDir, double pRandomDistanceOffset) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84f673a09747df92c0e66428aad8484f2f2060c9"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4527, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}