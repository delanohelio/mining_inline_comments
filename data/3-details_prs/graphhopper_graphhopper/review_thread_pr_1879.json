{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MjM1NDEz", "number": 1879, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTozNTo1OFrODdBeHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODo1MjozNlrODf_BJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzU5MzkxOnYy", "diffSide": "LEFT", "path": "api/src/main/java/com/graphhopper/util/CmdArgs.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTozNTo1OFrOFlYp7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTozNTo1OFrOFlYp7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc0NTU4Mw==", "bodyText": "Ah, nice!", "url": "https://github.com/graphhopper/graphhopper/pull/1879#discussion_r374745583", "createdAt": "2020-02-04T15:35:58Z", "author": {"login": "karussell"}, "path": "api/src/main/java/com/graphhopper/util/CmdArgs.java", "diffHunk": "@@ -1,89 +0,0 @@\n-/*\n- *  Licensed to GraphHopper GmbH under one or more contributor\n- *  license agreements. See the NOTICE file distributed with this work for\n- *  additional information regarding copyright ownership.\n- *\n- *  GraphHopper GmbH licenses this file to you under the Apache License,\n- *  Version 2.0 (the \"License\"); you may not use this file except in\n- *  compliance with the License. You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-package com.graphhopper.util;\n-\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-\n-import static com.graphhopper.util.Helper.toLowerCase;\n-\n-/**\n- * Stores command line options in a map. The capitalization of the key is ignored.\n- * <p>\n- *\n- * @author Peter Karich\n- */\n-public class CmdArgs extends PMap {\n-\n-    public CmdArgs() {\n-    }\n-\n-    public CmdArgs(Map<String, String> map) {\n-        super(map);\n-    }\n-\n-    /**\n-     * This method creates a CmdArgs object from the specified string array (a list of key=value pairs).\n-     */\n-    public static CmdArgs read(String[] args) {\n-        Map<String, String> map = new LinkedHashMap<>();\n-        for (String arg : args) {\n-            int index = arg.indexOf(\"=\");\n-            if (index <= 0) {\n-                continue;\n-            }\n-\n-            String key = arg.substring(0, index);\n-            if (key.startsWith(\"-\")) {\n-                key = key.substring(1);\n-            }\n-\n-            if (key.startsWith(\"-\")) {\n-                key = key.substring(1);\n-            }\n-\n-            String value = arg.substring(index + 1);\n-            String old = map.put(toLowerCase(key), value);\n-            if (old != null)\n-                throw new IllegalArgumentException(\"Pair '\" + toLowerCase(key) + \"'='\" + value + \"' not possible to \" +\n-                        \"add to the CmdArgs-object as the key already exists with '\" + old + \"'\");\n-        }\n-\n-        return new CmdArgs(map);\n-    }\n-\n-    public static CmdArgs readFromSystemProperties() {\n-        CmdArgs cmdArgs = new CmdArgs();\n-        for (Entry<Object, Object> e : System.getProperties().entrySet()) {\n-            String k = ((String) e.getKey());\n-            String v = ((String) e.getValue());\n-            if (k.startsWith(\"graphhopper.\")) {\n-                k = k.substring(\"graphhopper.\".length());\n-                cmdArgs.put(k, v);\n-            }\n-        }\n-        return cmdArgs;\n-    }\n-\n-    @Override\n-    public CmdArgs put(String key, Object str) {\n-        super.put(key, str);\n-        return this;\n-    }\n-}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9089d0e8b07c0bfcb31c9e1a7a723687296bdd34"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODY0OTMzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/graphhopper/GraphHopperConfig.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODo1MjozNlrOFqAVdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNVQxMToyOToxOVrOFqOvkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5MDAwNw==", "bodyText": "This is now a bit too ugly as without indent and looks like it should be debugging info IMO:\n2020-02-14 19:47:56.845 [main] INFO  c.g... properties:\ngraph.dataaccess: RAM_STORE\nch.enabled: false\ngraph.flag_encoders: car\nprepare.ch.weightings: fastest\nprepare.min_one_way_network_size: 0\ngraph.location: graph-cache\nprepare.min_network_size: 0\nrouting.ch.disabling_allowed: true\nrouting.max_visited_nodes: 1500000\nprepare.lm.weightings: fastest\nrouting.round_trip.max_retries: 2", "url": "https://github.com/graphhopper/graphhopper/pull/1879#discussion_r379590007", "createdAt": "2020-02-14T18:52:36Z", "author": {"login": "karussell"}, "path": "api/src/main/java/com/graphhopper/GraphHopperConfig.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.graphhopper;\n+\n+import com.graphhopper.util.PMap;\n+\n+import java.util.Map;\n+\n+/**\n+ * This class represents the global configuration for the GraphHopper class, which is typically configured via the\n+ * `config.yml` file. So far we are mapping the key-value pairs in the config file to a string-string map, but soon\n+ * we will start adding hierarchical configurations (lists, nested objects etc.). We will also start adding the\n+ * different configuration options as fields of this class including the default values.\n+ */\n+public class GraphHopperConfig {\n+    private final PMap map;\n+\n+    public GraphHopperConfig() {\n+        this(new PMap());\n+    }\n+\n+    public GraphHopperConfig(PMap pMap) {\n+        this.map = pMap;\n+    }\n+\n+    public GraphHopperConfig put(String key, Object value) {\n+        map.put(key, value);\n+        return this;\n+    }\n+\n+    public boolean has(String key) {\n+        return map.has(key);\n+    }\n+\n+    public boolean getBool(String key, boolean _default) {\n+        return map.getBool(key, _default);\n+    }\n+\n+    public int getInt(String key, int _default) {\n+        return map.getInt(key, _default);\n+    }\n+\n+    public long getLong(String key, long _default) {\n+        return map.getLong(key, _default);\n+    }\n+\n+    public float getFloat(String key, float _default) {\n+        return map.getFloat(key, _default);\n+    }\n+\n+    public double getDouble(String key, double _default) {\n+        return map.getDouble(key, _default);\n+    }\n+\n+    public String get(String key, String _default) {\n+        return map.get(key, _default);\n+    }\n+\n+    public PMap asPMap() {\n+        return map;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"properties:\\n\");\n+        for (Map.Entry<String, String> entry : map.toMap().entrySet()) {\n+            sb.append(entry.getKey()).append(\": \").append(entry.getValue());\n+            sb.append(\"\\n\");\n+        }\n+        return sb.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fbb8d54185a16f44497cad7027f89241d5ee5f2"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYzMzE1MA==", "bodyText": "Yes toString is meant for debugging or what do you mean? The output should be indented another way so it resembles the yaml file?", "url": "https://github.com/graphhopper/graphhopper/pull/1879#discussion_r379633150", "createdAt": "2020-02-14T20:36:26Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/GraphHopperConfig.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.graphhopper;\n+\n+import com.graphhopper.util.PMap;\n+\n+import java.util.Map;\n+\n+/**\n+ * This class represents the global configuration for the GraphHopper class, which is typically configured via the\n+ * `config.yml` file. So far we are mapping the key-value pairs in the config file to a string-string map, but soon\n+ * we will start adding hierarchical configurations (lists, nested objects etc.). We will also start adding the\n+ * different configuration options as fields of this class including the default values.\n+ */\n+public class GraphHopperConfig {\n+    private final PMap map;\n+\n+    public GraphHopperConfig() {\n+        this(new PMap());\n+    }\n+\n+    public GraphHopperConfig(PMap pMap) {\n+        this.map = pMap;\n+    }\n+\n+    public GraphHopperConfig put(String key, Object value) {\n+        map.put(key, value);\n+        return this;\n+    }\n+\n+    public boolean has(String key) {\n+        return map.has(key);\n+    }\n+\n+    public boolean getBool(String key, boolean _default) {\n+        return map.getBool(key, _default);\n+    }\n+\n+    public int getInt(String key, int _default) {\n+        return map.getInt(key, _default);\n+    }\n+\n+    public long getLong(String key, long _default) {\n+        return map.getLong(key, _default);\n+    }\n+\n+    public float getFloat(String key, float _default) {\n+        return map.getFloat(key, _default);\n+    }\n+\n+    public double getDouble(String key, double _default) {\n+        return map.getDouble(key, _default);\n+    }\n+\n+    public String get(String key, String _default) {\n+        return map.get(key, _default);\n+    }\n+\n+    public PMap asPMap() {\n+        return map;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"properties:\\n\");\n+        for (Map.Entry<String, String> entry : map.toMap().entrySet()) {\n+            sb.append(entry.getKey()).append(\": \").append(entry.getValue());\n+            sb.append(\"\\n\");\n+        }\n+        return sb.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5MDAwNw=="}, "originalCommit": {"oid": "8fbb8d54185a16f44497cad7027f89241d5ee5f2"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTY4MTIzMQ==", "bodyText": "Currently we print it there, yes. But I can change it to:\nlogger.info(ghConfig.asPMap().toString());\nI think", "url": "https://github.com/graphhopper/graphhopper/pull/1879#discussion_r379681231", "createdAt": "2020-02-14T22:57:37Z", "author": {"login": "karussell"}, "path": "api/src/main/java/com/graphhopper/GraphHopperConfig.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.graphhopper;\n+\n+import com.graphhopper.util.PMap;\n+\n+import java.util.Map;\n+\n+/**\n+ * This class represents the global configuration for the GraphHopper class, which is typically configured via the\n+ * `config.yml` file. So far we are mapping the key-value pairs in the config file to a string-string map, but soon\n+ * we will start adding hierarchical configurations (lists, nested objects etc.). We will also start adding the\n+ * different configuration options as fields of this class including the default values.\n+ */\n+public class GraphHopperConfig {\n+    private final PMap map;\n+\n+    public GraphHopperConfig() {\n+        this(new PMap());\n+    }\n+\n+    public GraphHopperConfig(PMap pMap) {\n+        this.map = pMap;\n+    }\n+\n+    public GraphHopperConfig put(String key, Object value) {\n+        map.put(key, value);\n+        return this;\n+    }\n+\n+    public boolean has(String key) {\n+        return map.has(key);\n+    }\n+\n+    public boolean getBool(String key, boolean _default) {\n+        return map.getBool(key, _default);\n+    }\n+\n+    public int getInt(String key, int _default) {\n+        return map.getInt(key, _default);\n+    }\n+\n+    public long getLong(String key, long _default) {\n+        return map.getLong(key, _default);\n+    }\n+\n+    public float getFloat(String key, float _default) {\n+        return map.getFloat(key, _default);\n+    }\n+\n+    public double getDouble(String key, double _default) {\n+        return map.getDouble(key, _default);\n+    }\n+\n+    public String get(String key, String _default) {\n+        return map.get(key, _default);\n+    }\n+\n+    public PMap asPMap() {\n+        return map;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"properties:\\n\");\n+        for (Map.Entry<String, String> entry : map.toMap().entrySet()) {\n+            sb.append(entry.getKey()).append(\": \").append(entry.getValue());\n+            sb.append(\"\\n\");\n+        }\n+        return sb.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5MDAwNw=="}, "originalCommit": {"oid": "8fbb8d54185a16f44497cad7027f89241d5ee5f2"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTc1NzMxOA==", "bodyText": "We can adjust toString() to whatever you/we think is useful. What do you not like about the current format? Do you think its too verbose (because of the new lines), or would you prefer key=value over key: value? Note that as soon as we add profiles to the config (or other typed parameters asPMap().toString() will no longer contain the whole information.", "url": "https://github.com/graphhopper/graphhopper/pull/1879#discussion_r379757318", "createdAt": "2020-02-15T06:10:29Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/GraphHopperConfig.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.graphhopper;\n+\n+import com.graphhopper.util.PMap;\n+\n+import java.util.Map;\n+\n+/**\n+ * This class represents the global configuration for the GraphHopper class, which is typically configured via the\n+ * `config.yml` file. So far we are mapping the key-value pairs in the config file to a string-string map, but soon\n+ * we will start adding hierarchical configurations (lists, nested objects etc.). We will also start adding the\n+ * different configuration options as fields of this class including the default values.\n+ */\n+public class GraphHopperConfig {\n+    private final PMap map;\n+\n+    public GraphHopperConfig() {\n+        this(new PMap());\n+    }\n+\n+    public GraphHopperConfig(PMap pMap) {\n+        this.map = pMap;\n+    }\n+\n+    public GraphHopperConfig put(String key, Object value) {\n+        map.put(key, value);\n+        return this;\n+    }\n+\n+    public boolean has(String key) {\n+        return map.has(key);\n+    }\n+\n+    public boolean getBool(String key, boolean _default) {\n+        return map.getBool(key, _default);\n+    }\n+\n+    public int getInt(String key, int _default) {\n+        return map.getInt(key, _default);\n+    }\n+\n+    public long getLong(String key, long _default) {\n+        return map.getLong(key, _default);\n+    }\n+\n+    public float getFloat(String key, float _default) {\n+        return map.getFloat(key, _default);\n+    }\n+\n+    public double getDouble(String key, double _default) {\n+        return map.getDouble(key, _default);\n+    }\n+\n+    public String get(String key, String _default) {\n+        return map.get(key, _default);\n+    }\n+\n+    public PMap asPMap() {\n+        return map;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"properties:\\n\");\n+        for (Map.Entry<String, String> entry : map.toMap().entrySet()) {\n+            sb.append(entry.getKey()).append(\": \").append(entry.getValue());\n+            sb.append(\"\\n\");\n+        }\n+        return sb.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5MDAwNw=="}, "originalCommit": {"oid": "8fbb8d54185a16f44497cad7027f89241d5ee5f2"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNTYwMg==", "bodyText": "Yes, the new line is good for debugging but a bit too much for normal startup info.\n\nNote that as soon as we add profiles to the config (or other typed parameters asPMap().toString() will no longer contain the whole information.\n\nYes, for now I just need to make sure certain info is correctly picked up", "url": "https://github.com/graphhopper/graphhopper/pull/1879#discussion_r379825602", "createdAt": "2020-02-15T11:20:21Z", "author": {"login": "karussell"}, "path": "api/src/main/java/com/graphhopper/GraphHopperConfig.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.graphhopper;\n+\n+import com.graphhopper.util.PMap;\n+\n+import java.util.Map;\n+\n+/**\n+ * This class represents the global configuration for the GraphHopper class, which is typically configured via the\n+ * `config.yml` file. So far we are mapping the key-value pairs in the config file to a string-string map, but soon\n+ * we will start adding hierarchical configurations (lists, nested objects etc.). We will also start adding the\n+ * different configuration options as fields of this class including the default values.\n+ */\n+public class GraphHopperConfig {\n+    private final PMap map;\n+\n+    public GraphHopperConfig() {\n+        this(new PMap());\n+    }\n+\n+    public GraphHopperConfig(PMap pMap) {\n+        this.map = pMap;\n+    }\n+\n+    public GraphHopperConfig put(String key, Object value) {\n+        map.put(key, value);\n+        return this;\n+    }\n+\n+    public boolean has(String key) {\n+        return map.has(key);\n+    }\n+\n+    public boolean getBool(String key, boolean _default) {\n+        return map.getBool(key, _default);\n+    }\n+\n+    public int getInt(String key, int _default) {\n+        return map.getInt(key, _default);\n+    }\n+\n+    public long getLong(String key, long _default) {\n+        return map.getLong(key, _default);\n+    }\n+\n+    public float getFloat(String key, float _default) {\n+        return map.getFloat(key, _default);\n+    }\n+\n+    public double getDouble(String key, double _default) {\n+        return map.getDouble(key, _default);\n+    }\n+\n+    public String get(String key, String _default) {\n+        return map.get(key, _default);\n+    }\n+\n+    public PMap asPMap() {\n+        return map;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"properties:\\n\");\n+        for (Map.Entry<String, String> entry : map.toMap().entrySet()) {\n+            sb.append(entry.getKey()).append(\": \").append(entry.getValue());\n+            sb.append(\"\\n\");\n+        }\n+        return sb.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5MDAwNw=="}, "originalCommit": {"oid": "8fbb8d54185a16f44497cad7027f89241d5ee5f2"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTgyNjA2Nw==", "bodyText": "Ah is it? I thought this is something quite useful at startup. But yeah feel free to change it to whatever you prefer, I do not care that much.", "url": "https://github.com/graphhopper/graphhopper/pull/1879#discussion_r379826067", "createdAt": "2020-02-15T11:29:19Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/GraphHopperConfig.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.graphhopper;\n+\n+import com.graphhopper.util.PMap;\n+\n+import java.util.Map;\n+\n+/**\n+ * This class represents the global configuration for the GraphHopper class, which is typically configured via the\n+ * `config.yml` file. So far we are mapping the key-value pairs in the config file to a string-string map, but soon\n+ * we will start adding hierarchical configurations (lists, nested objects etc.). We will also start adding the\n+ * different configuration options as fields of this class including the default values.\n+ */\n+public class GraphHopperConfig {\n+    private final PMap map;\n+\n+    public GraphHopperConfig() {\n+        this(new PMap());\n+    }\n+\n+    public GraphHopperConfig(PMap pMap) {\n+        this.map = pMap;\n+    }\n+\n+    public GraphHopperConfig put(String key, Object value) {\n+        map.put(key, value);\n+        return this;\n+    }\n+\n+    public boolean has(String key) {\n+        return map.has(key);\n+    }\n+\n+    public boolean getBool(String key, boolean _default) {\n+        return map.getBool(key, _default);\n+    }\n+\n+    public int getInt(String key, int _default) {\n+        return map.getInt(key, _default);\n+    }\n+\n+    public long getLong(String key, long _default) {\n+        return map.getLong(key, _default);\n+    }\n+\n+    public float getFloat(String key, float _default) {\n+        return map.getFloat(key, _default);\n+    }\n+\n+    public double getDouble(String key, double _default) {\n+        return map.getDouble(key, _default);\n+    }\n+\n+    public String get(String key, String _default) {\n+        return map.get(key, _default);\n+    }\n+\n+    public PMap asPMap() {\n+        return map;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"properties:\\n\");\n+        for (Map.Entry<String, String> entry : map.toMap().entrySet()) {\n+            sb.append(entry.getKey()).append(\": \").append(entry.getValue());\n+            sb.append(\"\\n\");\n+        }\n+        return sb.toString();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5MDAwNw=="}, "originalCommit": {"oid": "8fbb8d54185a16f44497cad7027f89241d5ee5f2"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4853, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}