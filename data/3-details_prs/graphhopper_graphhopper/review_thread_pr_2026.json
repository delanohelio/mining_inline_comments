{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MzU0MDY1", "number": 2026, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTo1NTozMlrOD6Aqrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo1MDoyOFrOD7NOow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMTU0OTI3OnYy", "diffSide": "RIGHT", "path": "reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTo1NTozMlrOGRm2_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODo0ODowMFrOGR0q4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTExNTY0Nw==", "bodyText": "This is probably better in GraphHopperTest but mocking DataReader is a bit lengthy/ugly.", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r421115647", "createdAt": "2020-05-06T21:55:32Z", "author": {"login": "karussell"}, "path": "reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java", "diffHunk": "@@ -1117,4 +1117,56 @@ private GraphHopper createGraphHopper(String vehicles) {\n                 setEncodingManager(em).\n                 setProfiles(profiles);\n     }\n+\n+    @Test\n+    public void testLoadingWrongCHProfiles() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0MTkyMQ==", "bodyText": "Ok ;)", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r421341921", "createdAt": "2020-05-07T08:48:00Z", "author": {"login": "easbar"}, "path": "reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java", "diffHunk": "@@ -1117,4 +1117,56 @@ private GraphHopper createGraphHopper(String vehicles) {\n                 setEncodingManager(em).\n                 setProfiles(profiles);\n     }\n+\n+    @Test\n+    public void testLoadingWrongCHProfiles() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTExNTY0Nw=="}, "originalCommit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzAyODM0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/storage/CHConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODo0NTo0MFrOGR0lLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODo0NTo0MFrOGR0lLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0MDQ2MA==", "bodyText": "Looks like this is (no longer(?)) needed?", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r421340460", "createdAt": "2020-05-07T08:45:40Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/storage/CHConfig.java", "diffHunk": "@@ -70,4 +71,13 @@ public int hashCode() {\n         return getName().hashCode();\n     }\n \n+    public int getVersion() {\n+        int hash = Helper.staticHashCode(chGraphName);\n+        hash = 31 * hash + Helper.staticHashCode(weighting.getName());\n+        // if flag encoder is removed we could use weighting.toString\n+        hash = 31 * hash + Helper.staticHashCode(weighting.getFlagEncoder().toString());\n+        hash *= weighting.hasTurnCosts() ? 31 : 62;\n+        hash *= edgeBased ? 31 : 62;\n+        return hash;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzAzMTQ4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODo0NjoyOFrOGR0nHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOToxNToxM1rOGR1uHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0MDk1Nw==", "bodyText": "Why is isEmpty() treated special here? Why is it possible for the hash to be empty?", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r421340957", "createdAt": "2020-05-07T08:46:28Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -979,8 +979,16 @@ protected void postProcessing(boolean closeEarly) {\n \n         if (chPreparationHandler.isEnabled())\n             chPreparationHandler.createPreparations(ghStorage);\n-        if (!isCHPrepared())\n+        if (isCHPrepared()) {\n+            // check loaded profiles\n+            for (CHProfile profile : chPreparationHandler.getCHProfiles()) {\n+                if (!getProfileHash(profile.getProfile()).isEmpty()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1OTEzMw==", "bodyText": "Ah, I just blindly assumed the symmetry between CH and LM. So, yes. It is not necessary for CH as we want to load it here.", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r421359133", "createdAt": "2020-05-07T09:15:13Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -979,8 +979,16 @@ protected void postProcessing(boolean closeEarly) {\n \n         if (chPreparationHandler.isEnabled())\n             chPreparationHandler.createPreparations(ghStorage);\n-        if (!isCHPrepared())\n+        if (isCHPrepared()) {\n+            // check loaded profiles\n+            for (CHProfile profile : chPreparationHandler.getCHProfiles()) {\n+                if (!getProfileHash(profile.getProfile()).isEmpty()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0MDk1Nw=="}, "originalCommit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzAzMjgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODo0Njo1MVrOGR0oCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwOToxNTo1OVrOGR1v9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0MTE5NQ==", "bodyText": "Can we either call it hash or version (but not both :)) ?", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r421341195", "createdAt": "2020-05-07T08:46:51Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -1264,16 +1272,24 @@ protected void initLocationIndex() {\n     }\n \n     private boolean isCHPrepared() {\n-        return \"true\".equals(ghStorage.getProperties().get(CH.PREPARE + \"done\"))\n-                // remove old property in >0.9\n-                || \"true\".equals(ghStorage.getProperties().get(\"prepare.done\"));\n+        return \"true\".equals(ghStorage.getProperties().get(CH.PREPARE + \"done\"));\n     }\n \n-    private boolean isLMPrepared() {\n-        return \"true\".equals(ghStorage.getProperties().get(Landmark.PREPARE + \"done\"));\n+    private String getProfileHash(String profile) {\n+        return ghStorage.getProperties().get(\"graph.profiles.\" + profile + \".hash\");\n+    }\n+\n+    private void setProfileHash(String profile, int version) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM1OTYwNw==", "bodyText": "Haha, sure. I even had a third option in the code before ;)", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r421359607", "createdAt": "2020-05-07T09:15:59Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -1264,16 +1272,24 @@ protected void initLocationIndex() {\n     }\n \n     private boolean isCHPrepared() {\n-        return \"true\".equals(ghStorage.getProperties().get(CH.PREPARE + \"done\"))\n-                // remove old property in >0.9\n-                || \"true\".equals(ghStorage.getProperties().get(\"prepare.done\"));\n+        return \"true\".equals(ghStorage.getProperties().get(CH.PREPARE + \"done\"));\n     }\n \n-    private boolean isLMPrepared() {\n-        return \"true\".equals(ghStorage.getProperties().get(Landmark.PREPARE + \"done\"));\n+    private String getProfileHash(String profile) {\n+        return ghStorage.getProperties().get(\"graph.profiles.\" + profile + \".hash\");\n+    }\n+\n+    private void setProfileHash(String profile, int version) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0MTE5NQ=="}, "originalCommit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMzA1MjM0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/graphhopper/config/Profile.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODo1MTozNVrOGR00Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDoyMTo0NFrOGSydYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0NDI5OQ==", "bodyText": "Hmm toString includes the hints (which is good/required for custom weighting), but unfortunately PMap uses an (unordered) HashMap, so this might go wrong? Shall we use LinkedHashMap in PMap? Or implement some method that returns the string in a deterministic way?", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r421344299", "createdAt": "2020-05-07T08:51:35Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/config/Profile.java", "diffHunk": "@@ -112,4 +113,8 @@ public boolean equals(Object o) {\n     public int hashCode() {\n         return name.hashCode();\n     }\n+\n+    public int getVersion() {\n+        return Helper.staticHashCode(toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0NTQ0Mg==", "bodyText": "Oh but I just realized that also hints does not even include the custom model but only the reference to the custom model file... Shouldn't our check also detect changes in the custom model file?", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r421345442", "createdAt": "2020-05-07T08:53:17Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/config/Profile.java", "diffHunk": "@@ -112,4 +113,8 @@ public boolean equals(Object o) {\n     public int hashCode() {\n         return name.hashCode();\n     }\n+\n+    public int getVersion() {\n+        return Helper.staticHashCode(toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0NDI5OQ=="}, "originalCommit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM2MDcyNA==", "bodyText": "but unfortunately PMap uses an (unordered) HashMap, so this might go wrong\n\nAh, good catch!\n\nOh but I just realized that also hints does not even include the custom model but only the reference to the custom model file... Shouldn't our check also detect changes in the custom model file?\n\nWill write a test for this. I think we load the custom profile as object into this, but it might happen after the check.", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r421360724", "createdAt": "2020-05-07T09:17:49Z", "author": {"login": "karussell"}, "path": "api/src/main/java/com/graphhopper/config/Profile.java", "diffHunk": "@@ -112,4 +113,8 @@ public boolean equals(Object o) {\n     public int hashCode() {\n         return name.hashCode();\n     }\n+\n+    public int getVersion() {\n+        return Helper.staticHashCode(toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0NDI5OQ=="}, "originalCommit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTU0ODY5Mg==", "bodyText": "The CustomModel is stored in the hints already and produces a different hash code for mostly all situation, but relies on toString. So my test case passes. But only \"mostly\" because for areas we currently include only the count and so e.g. for changes of an area there would be no error. I will include the full areas and if this is too much at some point we can revert this to the count.\nBut the question is if we should rely on toString which should have only a debugging purpose? I think, yes, for now as the hashcode is not stable. And later work towards a config that is stored in the graph storage (and is loaded without providing it).\n\nShall we use LinkedHashMap in PMap?\n\nYes, I'll do that (the other option would be TreeMap or putting toMap into a TreeMap but I think it cannot hurt to give PMap this ordering guarantuee)", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r421548692", "createdAt": "2020-05-07T14:28:15Z", "author": {"login": "karussell"}, "path": "api/src/main/java/com/graphhopper/config/Profile.java", "diffHunk": "@@ -112,4 +113,8 @@ public boolean equals(Object o) {\n     public int hashCode() {\n         return name.hashCode();\n     }\n+\n+    public int getVersion() {\n+        return Helper.staticHashCode(toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0NDI5OQ=="}, "originalCommit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY2Mjg0MQ==", "bodyText": "Cool thanks. We could have some method createContentString and call it from createHashCode and toString. This way its obvious that it has some meaning beyond debugging, we do not have to write it 'twice' and maybe we could even do the sorting there (in case we do not want to adjust PMap).", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r421662841", "createdAt": "2020-05-07T17:13:01Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/config/Profile.java", "diffHunk": "@@ -112,4 +113,8 @@ public boolean equals(Object o) {\n     public int hashCode() {\n         return name.hashCode();\n     }\n+\n+    public int getVersion() {\n+        return Helper.staticHashCode(toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0NDI5OQ=="}, "originalCommit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5Mzg0Mw==", "bodyText": "Hmmh, sounds good but in PMap this still looks suboptimal:\npublic String createContentString() {\n    StringBuilder sb = new StringBuilder();\n    for(Map.Entry<String, Object> entry : map.entrySet()) {\n        sb.append(entry.getKey());\n        sb.append('=');\n        if(entry.getValue() instanceof ContentStringCreator)\n            sb.append(((ContentStringCreator)entry.getValue()).createContentString()); // let e.g. CustomModel implement this interface\n        else\n            sb.append(entry.getValue().toString());\n        sb.append(',');\n    }\n    return sb.toString();\n}\nWDYT?", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r422093843", "createdAt": "2020-05-08T11:34:43Z", "author": {"login": "karussell"}, "path": "api/src/main/java/com/graphhopper/config/Profile.java", "diffHunk": "@@ -112,4 +113,8 @@ public boolean equals(Object o) {\n     public int hashCode() {\n         return name.hashCode();\n     }\n+\n+    public int getVersion() {\n+        return Helper.staticHashCode(toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0NDI5OQ=="}, "originalCommit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA5NDU0NQ==", "bodyText": "Ah, or do you mean to implement createContentString only in CustomModel as private method and use it in CustomModel.toString?", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r422094545", "createdAt": "2020-05-08T11:36:26Z", "author": {"login": "karussell"}, "path": "api/src/main/java/com/graphhopper/config/Profile.java", "diffHunk": "@@ -112,4 +113,8 @@ public boolean equals(Object o) {\n     public int hashCode() {\n         return name.hashCode();\n     }\n+\n+    public int getVersion() {\n+        return Helper.staticHashCode(toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0NDI5OQ=="}, "originalCommit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM1NDI3NA==", "bodyText": "Ah, or do you mean to implement createContentString only in CustomModel as private method and use it in CustomModel.toString?\n\nYes. Or in Profile actually but I see that we need something like this for objects (like CustomModel that are in the hints map...", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r422354274", "createdAt": "2020-05-08T20:21:44Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/config/Profile.java", "diffHunk": "@@ -112,4 +113,8 @@ public boolean equals(Object o) {\n     public int hashCode() {\n         return name.hashCode();\n     }\n+\n+    public int getVersion() {\n+        return Helper.staticHashCode(toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0NDI5OQ=="}, "originalCommit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDA5MzE1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/graphhopper/routing/util/CustomModel.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo1MDoyOFrOGTY5Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMzoxMjo0NlrOGTbmyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4NDAxMQ==", "bodyText": "Should we not use createContentString also in getVersion() (instead of toString()) now that we have it?", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r422984011", "createdAt": "2020-05-11T11:50:28Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/routing/util/CustomModel.java", "diffHunk": "@@ -126,14 +126,13 @@ public double getHeadingPenalty() {\n \n     @Override\n     public String toString() {\n-        return \"CustomModel{\" +\n-                \"distanceInfluence=\" + distanceInfluence +\n-                \", speedFactor=\" + speedFactorMap +\n-                \", maxSpeed=\" + maxSpeedMap +\n-                \", maxSpeedFallback=\" + maxSpeedFallback +\n-                \", priorityMap=\" + priorityMap +\n-                \", #areas=\" + areas.size() +\n-                '}';\n+        return createContentString();\n+    }\n+\n+    private String createContentString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6efd07719243c5e600bd6c1e8dfe8a8c98861ef"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4NjI4MA==", "bodyText": "Ah sorry its in another file. But maybe we can do the same in Profile.java (add createContentString and use it from Profile#getVersion() and Profile#getString())?", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r422986280", "createdAt": "2020-05-11T11:55:12Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/routing/util/CustomModel.java", "diffHunk": "@@ -126,14 +126,13 @@ public double getHeadingPenalty() {\n \n     @Override\n     public String toString() {\n-        return \"CustomModel{\" +\n-                \"distanceInfluence=\" + distanceInfluence +\n-                \", speedFactor=\" + speedFactorMap +\n-                \", maxSpeed=\" + maxSpeedMap +\n-                \", maxSpeedFallback=\" + maxSpeedFallback +\n-                \", priorityMap=\" + priorityMap +\n-                \", #areas=\" + areas.size() +\n-                '}';\n+        return createContentString();\n+    }\n+\n+    private String createContentString() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4NDAxMQ=="}, "originalCommit": {"oid": "d6efd07719243c5e600bd6c1e8dfe8a8c98861ef"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAyODQyNQ==", "bodyText": "Yes!", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r423028425", "createdAt": "2020-05-11T13:12:46Z", "author": {"login": "karussell"}, "path": "api/src/main/java/com/graphhopper/routing/util/CustomModel.java", "diffHunk": "@@ -126,14 +126,13 @@ public double getHeadingPenalty() {\n \n     @Override\n     public String toString() {\n-        return \"CustomModel{\" +\n-                \"distanceInfluence=\" + distanceInfluence +\n-                \", speedFactor=\" + speedFactorMap +\n-                \", maxSpeed=\" + maxSpeedMap +\n-                \", maxSpeedFallback=\" + maxSpeedFallback +\n-                \", priorityMap=\" + priorityMap +\n-                \", #areas=\" + areas.size() +\n-                '}';\n+        return createContentString();\n+    }\n+\n+    private String createContentString() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4NDAxMQ=="}, "originalCommit": {"oid": "d6efd07719243c5e600bd6c1e8dfe8a8c98861ef"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4805, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}