{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5NjE3OTYx", "number": 2163, "title": "add turn cost example for Java API", "bodyText": "Should we add this :) ?", "createdAt": "2020-10-25T16:13:35Z", "url": "https://github.com/graphhopper/graphhopper/pull/2163", "merged": true, "mergeCommit": {"oid": "641b0dafb5731b71d8b22f175cb27c5d5477b2e2"}, "closed": true, "closedAt": "2020-11-03T19:35:47Z", "author": {"login": "karussell"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVq9j_AH2gAyNTA5NjE3OTYxOmQxY2JlMTkwYThmMjMxNTNlZjU5Y2QyZTA4NzA5MmZiMGUyMzdhYmQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdY9KjMgFqTUyMjc1NDk2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d1cbe190a8f23153ef59cd2e087092fb0e237abd", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/d1cbe190a8f23153ef59cd2e087092fb0e237abd", "committedDate": "2020-10-24T13:12:54Z", "message": "added turn cost example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d051e23237f3f2b3acad98a0fefef21809e58efe", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/d051e23237f3f2b3acad98a0fefef21809e58efe", "committedDate": "2020-11-03T10:11:54Z", "message": "Merge branch 'master' into tc_example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f496d4160783bca5bcf27fb94790f0e40530efb5", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/f496d4160783bca5bcf27fb94790f0e40530efb5", "committedDate": "2020-11-03T11:03:20Z", "message": "Trying to improve example"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMzg5Mzcy", "url": "https://github.com/graphhopper/graphhopper/pull/2163#pullrequestreview-522389372", "createdAt": "2020-11-03T11:04:53Z", "commit": {"oid": "f496d4160783bca5bcf27fb94790f0e40530efb5"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMTowNDo1M1rOHsp4SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMTowOTowM1rOHsqBEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4NTU0NQ==", "bodyText": "I ran into this while working on the example? How is this meant to work? Currently Helper.round(1040.02125359, -2) returns 1000.", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516585545", "createdAt": "2020-11-03T11:04:53Z", "author": {"login": "easbar"}, "path": "api/src/test/java/com/graphhopper/util/HelperTest.java", "diffHunk": "@@ -55,6 +55,8 @@ public void testRound() {\n         assertEquals(100.94, Helper.round(100.94, 2), 1e-7);\n         assertEquals(100.9, Helper.round(100.94, 1), 1e-7);\n         assertEquals(101.0, Helper.round(100.95, 1), 1e-7);\n+        // todonow\n+        assertEquals(1040.02, Helper.round(1040.02125359, -2), 1.e-7);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f496d4160783bca5bcf27fb94790f0e40530efb5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4NjMwMg==", "bodyText": "I added these time checks to see the difference when changing u-turn costs.", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516586302", "createdAt": "2020-11-03T11:06:13Z", "author": {"login": "easbar"}, "path": "example/src/main/java/com/graphhopper/example/RoutingExampleTC.java", "diffHunk": "@@ -8,55 +8,81 @@\n import com.graphhopper.config.CHProfile;\n import com.graphhopper.config.Profile;\n import com.graphhopper.reader.osm.GraphHopperOSM;\n-import com.graphhopper.routing.util.CarFlagEncoder;\n import com.graphhopper.routing.util.EncodingManager;\n-import com.graphhopper.routing.util.FlagEncoder;\n-import com.graphhopper.util.Helper;\n-import com.graphhopper.util.PMap;\n+import com.graphhopper.util.Parameters;\n \n import java.util.Arrays;\n \n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_ANY;\n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_RIGHT;\n \n /**\n- * Routing with turn costs\n+ * Routing with turn costs. Also see {@link RoutingExample} for more details.\n  */\n public class RoutingExampleTC {\n     public static void main(String[] args) {\n         String relDir = args.length == 1 ? args[0] : \"\";\n         GraphHopper hopper = createGraphHopperInstance(relDir + \"core/files/andorra.osm.pbf\");\n-        routing(hopper);\n+        routeWithTurnCosts(hopper);\n+        routeWithTurnCostsAndCurbsides(hopper);\n+        routeWithTurnCostsAndOtherUTurnCosts(hopper);\n     }\n \n-    // see RoutingExample for more details\n-    public static void routing(GraphHopper hopper) {\n-        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899,1.525372).\n+    public static void routeWithTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setProfile(\"car\");\n+        route(hopper, req, 1038, 63_000);\n+    }\n+\n+    public static void routeWithTurnCostsAndCurbsides(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n                 setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n                 setProfile(\"car\");\n-        GHResponse rsp = hopper.route(req);\n+        route(hopper, req, 1730, 112_000);\n+    }\n \n+    public static void routeWithTurnCostsAndOtherUTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n+                putHint(Parameters.CH.DISABLE, true).\n+                setProfile(\"car\");\n+        route(hopper, req.putHint(Parameters.Routing.U_TURN_COSTS, 10), 1370, 100_000);\n+        route(hopper, req.putHint(Parameters.Routing.U_TURN_COSTS, 15), 1370, 105_000);\n+    }\n+\n+    private static void route(GraphHopper hopper, GHRequest req, int expectedDistance, int expectedTime) {\n+        GHResponse rsp = hopper.route(req);\n         // handle errors\n         if (rsp.hasErrors())\n             // if you get: Impossible curbside constraint: 'curbside=right'\n             // you either specify 'curbside=any' or Parameters.Routing.FORCE_CURBSIDE=false to ignore this situation\n             throw new RuntimeException(rsp.getErrors().toString());\n-\n         ResponsePath path = rsp.getBest();\n-        assert Helper.round(path.getDistance(), -2) == 1700;\n+        assert Math.abs(expectedDistance - path.getDistance()) < 1 : \"unexpected distance : \" + path.getDistance() + \" vs. \" + expectedDistance;\n+        assert Math.abs(expectedTime - path.getTime()) < 1000 : \"unexpected time : \" + path.getTime() + \" vs. \" + expectedTime;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f496d4160783bca5bcf27fb94790f0e40530efb5"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4NjQ2Mw==", "bodyText": "setting u_turn_costs on the encoder has no effect (?!). also I think for the example its better to use |turn_costs=true instead of max_turn_costs=1 since its easier to understand (we either make or do not make use of the OSM turn restrictions)", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516586463", "createdAt": "2020-11-03T11:06:31Z", "author": {"login": "easbar"}, "path": "example/src/main/java/com/graphhopper/example/RoutingExampleTC.java", "diffHunk": "@@ -8,55 +8,81 @@\n import com.graphhopper.config.CHProfile;\n import com.graphhopper.config.Profile;\n import com.graphhopper.reader.osm.GraphHopperOSM;\n-import com.graphhopper.routing.util.CarFlagEncoder;\n import com.graphhopper.routing.util.EncodingManager;\n-import com.graphhopper.routing.util.FlagEncoder;\n-import com.graphhopper.util.Helper;\n-import com.graphhopper.util.PMap;\n+import com.graphhopper.util.Parameters;\n \n import java.util.Arrays;\n \n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_ANY;\n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_RIGHT;\n \n /**\n- * Routing with turn costs\n+ * Routing with turn costs. Also see {@link RoutingExample} for more details.\n  */\n public class RoutingExampleTC {\n     public static void main(String[] args) {\n         String relDir = args.length == 1 ? args[0] : \"\";\n         GraphHopper hopper = createGraphHopperInstance(relDir + \"core/files/andorra.osm.pbf\");\n-        routing(hopper);\n+        routeWithTurnCosts(hopper);\n+        routeWithTurnCostsAndCurbsides(hopper);\n+        routeWithTurnCostsAndOtherUTurnCosts(hopper);\n     }\n \n-    // see RoutingExample for more details\n-    public static void routing(GraphHopper hopper) {\n-        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899,1.525372).\n+    public static void routeWithTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setProfile(\"car\");\n+        route(hopper, req, 1038, 63_000);\n+    }\n+\n+    public static void routeWithTurnCostsAndCurbsides(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n                 setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n                 setProfile(\"car\");\n-        GHResponse rsp = hopper.route(req);\n+        route(hopper, req, 1730, 112_000);\n+    }\n \n+    public static void routeWithTurnCostsAndOtherUTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n+                putHint(Parameters.CH.DISABLE, true).\n+                setProfile(\"car\");\n+        route(hopper, req.putHint(Parameters.Routing.U_TURN_COSTS, 10), 1370, 100_000);\n+        route(hopper, req.putHint(Parameters.Routing.U_TURN_COSTS, 15), 1370, 105_000);\n+    }\n+\n+    private static void route(GraphHopper hopper, GHRequest req, int expectedDistance, int expectedTime) {\n+        GHResponse rsp = hopper.route(req);\n         // handle errors\n         if (rsp.hasErrors())\n             // if you get: Impossible curbside constraint: 'curbside=right'\n             // you either specify 'curbside=any' or Parameters.Routing.FORCE_CURBSIDE=false to ignore this situation\n             throw new RuntimeException(rsp.getErrors().toString());\n-\n         ResponsePath path = rsp.getBest();\n-        assert Helper.round(path.getDistance(), -2) == 1700;\n+        assert Math.abs(expectedDistance - path.getDistance()) < 1 : \"unexpected distance : \" + path.getDistance() + \" vs. \" + expectedDistance;\n+        assert Math.abs(expectedTime - path.getTime()) < 1000 : \"unexpected time : \" + path.getTime() + \" vs. \" + expectedTime;\n     }\n \n     // see RoutingExample for more details\n     static GraphHopper createGraphHopperInstance(String ghLoc) {\n         GraphHopper hopper = new GraphHopperOSM().forServer();\n         hopper.setDataReaderFile(ghLoc);\n         hopper.setGraphHopperLocation(\"target/routing-tc-graph-cache\");\n-        // to enable turn restriction and curbside support ensure that FlagEncoder and profile supports turn costs\n-        FlagEncoder car = new CarFlagEncoder(new PMap().\n-                putObject(\"u_turn_costs\", 3).putObject(\"max_turn_costs\", 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f496d4160783bca5bcf27fb94790f0e40530efb5"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4Nzc5NA==", "bodyText": "This is a bit ugly because we do not get an error if CH is still enabled. When we change the u-turn costs (and CH is enabled) this change is simply ignored without throwing an error or something.", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516587794", "createdAt": "2020-11-03T11:09:03Z", "author": {"login": "easbar"}, "path": "example/src/main/java/com/graphhopper/example/RoutingExampleTC.java", "diffHunk": "@@ -8,55 +8,81 @@\n import com.graphhopper.config.CHProfile;\n import com.graphhopper.config.Profile;\n import com.graphhopper.reader.osm.GraphHopperOSM;\n-import com.graphhopper.routing.util.CarFlagEncoder;\n import com.graphhopper.routing.util.EncodingManager;\n-import com.graphhopper.routing.util.FlagEncoder;\n-import com.graphhopper.util.Helper;\n-import com.graphhopper.util.PMap;\n+import com.graphhopper.util.Parameters;\n \n import java.util.Arrays;\n \n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_ANY;\n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_RIGHT;\n \n /**\n- * Routing with turn costs\n+ * Routing with turn costs. Also see {@link RoutingExample} for more details.\n  */\n public class RoutingExampleTC {\n     public static void main(String[] args) {\n         String relDir = args.length == 1 ? args[0] : \"\";\n         GraphHopper hopper = createGraphHopperInstance(relDir + \"core/files/andorra.osm.pbf\");\n-        routing(hopper);\n+        routeWithTurnCosts(hopper);\n+        routeWithTurnCostsAndCurbsides(hopper);\n+        routeWithTurnCostsAndOtherUTurnCosts(hopper);\n     }\n \n-    // see RoutingExample for more details\n-    public static void routing(GraphHopper hopper) {\n-        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899,1.525372).\n+    public static void routeWithTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setProfile(\"car\");\n+        route(hopper, req, 1038, 63_000);\n+    }\n+\n+    public static void routeWithTurnCostsAndCurbsides(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n                 setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n                 setProfile(\"car\");\n-        GHResponse rsp = hopper.route(req);\n+        route(hopper, req, 1730, 112_000);\n+    }\n \n+    public static void routeWithTurnCostsAndOtherUTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n+                putHint(Parameters.CH.DISABLE, true).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f496d4160783bca5bcf27fb94790f0e40530efb5"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de05a7ffb4b8c67f19e5e6b16c66205685c7ac39", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/de05a7ffb4b8c67f19e5e6b16c66205685c7ac39", "committedDate": "2020-11-03T11:11:30Z", "message": "Add comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03b3685460e29683f5a10f94a7238f34199f2853", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/03b3685460e29683f5a10f94a7238f34199f2853", "committedDate": "2020-11-03T11:21:27Z", "message": "Fix rounding test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "922dde0ed455d7479e5982352a647bd0fffaaa60", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/922dde0ed455d7479e5982352a647bd0fffaaa60", "committedDate": "2020-11-03T11:54:09Z", "message": "Fix docs for Helper.round"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNDIzNzg2", "url": "https://github.com/graphhopper/graphhopper/pull/2163#pullrequestreview-522423786", "createdAt": "2020-11-03T11:54:55Z", "commit": {"oid": "922dde0ed455d7479e5982352a647bd0fffaaa60"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMTo1NDo1NVrOHsrgWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMTo1NDo1NVrOHsrgWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYxMjE4NA==", "bodyText": "Maybe this is what confused me, does this make it more clear?", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516612184", "createdAt": "2020-11-03T11:54:55Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/util/Helper.java", "diffHunk": "@@ -318,10 +318,11 @@ public static double keepIn(double value, double min, double max) {\n     }\n \n     /**\n-     * Round the value to the specified exponent\n+     * Round the value to the specified number of decimal places, i.e. decimalPlaces=2 means we round to two decimal\n+     * places. Using negative values like decimalPlaces=-2 means we round to two places before the decimal point.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "922dde0ed455d7479e5982352a647bd0fffaaa60"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d24bf632dfcd1e81589dc1948e5b5659c9bc486", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/9d24bf632dfcd1e81589dc1948e5b5659c9bc486", "committedDate": "2020-11-03T11:55:59Z", "message": "Fix comment in test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac2cf249ec429f127473fc9b07c011f610014dd4", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/ac2cf249ec429f127473fc9b07c011f610014dd4", "committedDate": "2020-11-03T11:57:28Z", "message": "Use round for round2/4/6"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNDI2MzM3", "url": "https://github.com/graphhopper/graphhopper/pull/2163#pullrequestreview-522426337", "createdAt": "2020-11-03T11:58:30Z", "commit": {"oid": "ac2cf249ec429f127473fc9b07c011f610014dd4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMTo1ODozMFrOHsrn-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMTo1ODozMFrOHsrn-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYxNDEzNw==", "bodyText": "Was there any reason these methods did not delegate to round() before?", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516614137", "createdAt": "2020-11-03T11:58:30Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/util/Helper.java", "diffHunk": "@@ -318,23 +318,24 @@ public static double keepIn(double value, double min, double max) {\n     }\n \n     /**\n-     * Round the value to the specified exponent\n+     * Round the value to the specified number of decimal places, i.e. decimalPlaces=2 means we round to two decimal\n+     * places. Using negative values like decimalPlaces=-2 means we round to two places before the decimal point.\n      */\n-    public static double round(double value, int exponent) {\n-        double factor = Math.pow(10, exponent);\n+    public static double round(double value, int decimalPlaces) {\n+        double factor = Math.pow(10, decimalPlaces);\n         return Math.round(value * factor) / factor;\n     }\n \n     public static double round6(double value) {\n-        return Math.round(value * 1e6) / 1e6;\n+        return round(value, 6);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2cf249ec429f127473fc9b07c011f610014dd4"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "936b7cfcb25c20c7f427f24d23ecb793878ebc88", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/936b7cfcb25c20c7f427f24d23ecb793878ebc88", "committedDate": "2020-11-03T12:01:48Z", "message": "fix comment once more"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNzU0OTY3", "url": "https://github.com/graphhopper/graphhopper/pull/2163#pullrequestreview-522754967", "createdAt": "2020-11-03T18:07:09Z", "commit": {"oid": "936b7cfcb25c20c7f427f24d23ecb793878ebc88"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4494, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}