{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1Nzk1Mzg4", "number": 2209, "title": "Java/Janino scripting to replace our interpreter leading to a breaking change of the format", "bodyText": "This change is intended to make custom profiles more powerful and also more readable. It breaks backward compatibility. It uses a very powerful and fast library called Janino that allows on-the-fly compilation of partial expressions, blocks or whole classes written in Java.\nWith Janino scripting we can satisfy much more use cases. As soon as custom profiles were released there was often the need to combine expressions like \"use factor=0.5 only if road_class is primary AND in a certain area\" or \"surface is unpaved AND road_class is not unclassified\". This is now possible. Still I do not think we should use more power of Janino and keep the scripting simple (expressions only).\nThe big advantage with Janino scripting is now that we do not have the burden in the future to extend or improve our own interpreter. Performance-wise the routing with Janino scripting is at least of the same speed (for preparation it is even faster!). For query time this sounds a bit strange as the compilation takes some time. But when we assume that a custom profile is re-used for future requests of the same profile the class cache helps (see ExpressionBuilder, but the cache can be disabled). Now the most surprising thing for me was that even without the cache the slow down is not much (20% for LM queries? precise numbers needs to be re-done for the most recent commit). Janino is able to compile many expressions and a whole class in only a few milliseconds. And currently we create a cached version automatically for all server-side profiles due to GraphHopper.checkProfilesConsistency, i.e. for them there is no compilation overhead. btw: our cache is not that bad or complex as the cached object for key X is always the same (unlike for DBs with user data).\nWe have to add Janino as dependency to the core (1MB). I find this acceptable for what we get.\nA custom profile in the current master looks like:\npriority:\n  max_height: {\"<3.8\": 0}\n\nspeed_factor:\n  road_class:\n    motorway: 0.85\n    primary: 0.9\n\nmax_speed:\n  road_class:\n    living_street: 2\n\nmax_speed_fallback: 80\nwith this branch this gets more readable and you do not need to study the docs and still know what it does:\npriority:\n- if: max_height < 3.80\n  multiply by: 0\n\nspeed:\n- if: road_class == MOTORWAY: \n  multiply by: 0.85\n- if: road_class == PRIMARY\n  multiply by: 0.9\n  # if you wish to keep compatibility you apply max_speed after all multiplications, but in general you can use \"limit to\" at any time\n- if: road_class == LIVING_STREET\n  limit to: 2\n  # replacement for max_speed_fallback which is now implicit\n  # it could be also done via the else statement of the last if ... or via:\n- if: true\n  limit to: 80\nIt is slightly more verbose for the enum case, but also more clear.\nAnd now new things like inequality != or AND-expressions && are possible and all other comparison operators (<=, >, ...). See this example:\npriority:\n- if: road_class == MOTORWAY && max_speed >= 70\n  multiply by: 0.85\n- if: road_class != PRIMARY\n  multiply by: 0.9\nWe could even use (whitelisted) methods in the expression like road.class.ordinal() < 3.\nThe multiply by operation can now be >1 for server-side profiles. Note that the custom profile in the query still has the limitation of factor<=1.\nAlso areas are still possible and can be combined with other expressions:\nexpressionA && in_area_custom1: 0.5\n\nareas:\n- custom1: <geojson>\nThe area check is done only if expressionA is true and should be avoided to be called multiple times.\nFor some use cases (and sometimes for performance) you can use else-if and else:\npriority:\n- if: <expressionA>\n  multiply by: 0.85\n- else if: <expressionB>\n  multiply by: 0.6\n- else: \n  multiply by: 0.8\nSuch a block is also what happens for a single encoded value in master branch so you can use this for migration.\n\nTechnically Janino compiles CustomWeightingHelper at runtime and adds user expressions to it before (in a safe manner).\nMost code changes and tests are necessary to make the janino compilation safe regarding attacks from user expressions. Of course it should not be possible to call System.exit, mine crypto currencies or read the file system on the routing servers that could be exposed to the public. Additionally to this work we could think about enabling the SecurityManager (see here) but this only further increases security and would not be the main protection. The main protection comes from the fact that we allow only \"simple\" expressions like \"if\" clauses and enforce that there are no assignments, no loops, no lambdas or other stuff happening in user expressions and have a whitelist of variable names and methods. We do this with the help of the Scanner API from Janino and traverse the code (ExpressionVisitor).\nAlso we want simple and readable user expressions. For that we need to declare and assign variables before like road_class and create the class variable EncodedValue<RoadClass> roadClassEnc and also make constants like NO more specific (convert it into Toll.NO if the toll encoded value is used). The user should not need to do that. With the nice API of Janino I found a safe way to mix arbitrary code with the user expressions. First I create Java objects (List<Java.BlockStatement>) from all the user expressions (it is ensured that they are simple) and inject them into the parsed class CustomWeightingHelper (Java.CompilationUnit) containing arbitrary Java code like assignments and the compile this into byte code, load the class and finally instantiate an object of it.\nTo my knowledge and experiments Janino does not use the Metaspace (unlike javaassist) and instead it creates the classes on the heap.", "createdAt": "2020-12-10T09:36:50Z", "url": "https://github.com/graphhopper/graphhopper/pull/2209", "merged": true, "mergeCommit": {"oid": "13b7d337e28ec02c4f4b5f8da06e3f24207dc454"}, "closed": true, "closedAt": "2021-01-19T11:22:41Z", "author": {"login": "karussell"}, "timelineItems": {"totalCount": 137, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdp-v9rAH2gAyNTM1Nzk1Mzg4OmU4ZWU0NjMzZGJkMmEzOTJiMjFhYTlmODAzY2Q5YzhjODE2YmU2ZmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdxazS2gH2gAyNTM1Nzk1Mzg4OjBhMGExZGJlMWRlNDA3NGYxMTMyOTkyNGZkNzI5N2JkMWZmYmI5MzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e8ee4633dbd2a392b21aa9f803cd9c8c816be6fe", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/e8ee4633dbd2a392b21aa9f803cd9c8c816be6fe", "committedDate": "2020-12-26T15:34:38Z", "message": "Revert \"uhm, test perf: without cache but push separately\"\n\nThis reverts commit 6bb9fd01d77cc21d552f58fb6ed010cefb461405."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac46dada9df721a8ea9abeddb2df42d90852ee4e", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/ac46dada9df721a8ea9abeddb2df42d90852ee4e", "committedDate": "2020-12-26T16:08:50Z", "message": "minor improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NTQyMjc0", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-559542274", "createdAt": "2020-12-29T13:55:00Z", "commit": {"oid": "ac46dada9df721a8ea9abeddb2df42d90852ee4e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMzo1NTowMFrOIMP1wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMzo1NTowMFrOIMP1wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcxMzM0Ng==", "bodyText": "Should we rename to SpeedAndPriorityProvider or even something else :) ?", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r549713346", "createdAt": "2020-12-29T13:55:00Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/SpeedAndAccessProvider.java", "diffHunk": "@@ -15,19 +15,13 @@\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  */\n+\n package com.graphhopper.routing.weighting.custom;\n \n-import com.graphhopper.routing.ev.EncodedValue;\n import com.graphhopper.util.EdgeIteratorState;\n \n-/**\n- * Implementations of this internal interface represent the conversion rules we use to map {@link EncodedValue}s to\n- * numerical values when determining the different parameters for {@link CustomWeighting}.\n- */\n-interface EdgeToValueEntry {\n+interface SpeedAndAccessProvider {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac46dada9df721a8ea9abeddb2df42d90852ee4e"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7725ca16fa8e0b786591ba797bac7e3acb3e225", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/e7725ca16fa8e0b786591ba797bac7e3acb3e225", "committedDate": "2020-12-31T09:51:29Z", "message": "removed SpeedAndAccessProvider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cbfb0132310f1c36aa526922a194859a5085378", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/1cbfb0132310f1c36aa526922a194859a5085378", "committedDate": "2020-12-31T10:26:02Z", "message": "make sure that the internal cache will never be too big"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9759c418713df8172ae1cde3432438f3e554f713", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/9759c418713df8172ae1cde3432438f3e554f713", "committedDate": "2020-12-31T11:47:00Z", "message": "fix package of JaninoCustomWeightingHelperSubclass"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5a497c7e0103344f47f3b7adbfe002675cd98c3", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/a5a497c7e0103344f47f3b7adbfe002675cd98c3", "committedDate": "2020-12-31T11:47:37Z", "message": "rename ExpressionBuilder to CustomModelParser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46b4c940c849f5ea6855135d8fd3c33bc121959f", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/46b4c940c849f5ea6855135d8fd3c33bc121959f", "committedDate": "2020-12-31T11:49:40Z", "message": "made CustomModelParser parser public and move create method to it from CustomWeighting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1cc5ecd48aa47d48d83d8d2f70ed861aaeddb5a", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/f1cc5ecd48aa47d48d83d8d2f70ed861aaeddb5a", "committedDate": "2020-12-31T12:03:57Z", "message": "comment regarding internal cache method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7fef8bab54c998714d62c26573a5d8ddceecba1", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/b7fef8bab54c998714d62c26573a5d8ddceecba1", "committedDate": "2020-12-31T16:38:02Z", "message": "create -> createWeighting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e090791d79f4d83fa83d16d22b2b48aca7325928", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/e090791d79f4d83fa83d16d22b2b48aca7325928", "committedDate": "2020-12-31T17:30:29Z", "message": "move CustomModel to different package to hide useInternalCache methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17f764e091372b6ea850714969d1687a8c4e549e", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/17f764e091372b6ea850714969d1687a8c4e549e", "committedDate": "2021-01-06T18:44:13Z", "message": "merged master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca6b7360a5044b100468b6c28a7456e375a75690", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/ca6b7360a5044b100468b6c28a7456e375a75690", "committedDate": "2021-01-07T12:00:50Z", "message": "limit size of the whole script, not single expressions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNDQwODU5", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-563440859", "createdAt": "2021-01-07T12:17:41Z", "commit": {"oid": "17f764e091372b6ea850714969d1687a8c4e549e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjoxNzo0MVrOIPqVAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMjoxNzo0MVrOIPqVAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzI5MzA1Ng==", "bodyText": "hmmh, how should we solve this when CustomModel and CustomProfile are in different modules?", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r553293056", "createdAt": "2021-01-07T12:17:41Z", "author": {"login": "karussell"}, "path": "api/src/main/java/com/graphhopper/util/CustomModel.java", "diffHunk": "@@ -58,12 +56,12 @@ public CustomModel(CustomModel toCopy) {\n      * especially important for fast landmark queries (hybrid mode). Now this method ensures that all server-side custom\n      * models are cached in a special internal cache which does not remove seldom accessed entries.\n      */\n-    CustomModel useInternalCache() {\n+    public CustomModel useInternalCache() {\n         this.cached = true;\n         return this;\n     }\n \n-    boolean shouldUseInternalCache() {\n+    public boolean shouldUseInternalCache() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17f764e091372b6ea850714969d1687a8c4e549e"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c1b25e4e00ef0fe295d25422ee1ba3553d616d4", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/8c1b25e4e00ef0fe295d25422ee1ba3553d616d4", "committedDate": "2021-01-08T09:18:32Z", "message": "Merge branch 'master' into janino_scripting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e35826b00c7df080e6f6696fc3747302e8e2ef4", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/4e35826b00c7df080e6f6696fc3747302e8e2ef4", "committedDate": "2021-01-08T09:57:25Z", "message": "Rename CustomModelParser#create etc."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4324f5e2a621aa09930022b3bf5db353da6b0c3", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/a4324f5e2a621aa09930022b3bf5db353da6b0c3", "committedDate": "2021-01-08T10:03:20Z", "message": "Merge branch 'master' into janino_scripting\n\n# Conflicts:\n#\tcore/src/main/java/com/graphhopper/routing/weighting/custom/CustomWeighting.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0MTAyODQ1", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-564102845", "createdAt": "2021-01-08T09:08:36Z", "commit": {"oid": "ca6b7360a5044b100468b6c28a7456e375a75690"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQwOTowODozN1rOIQKtrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxMDozNjozMFrOIQNZdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgyMzY2MA==", "bodyText": "Why would we ever clear the internal cache? And why would it grow larger than 100? Isn't it like only custom models specified in the profiles (config.yml) should end up in this internal cache and afterwards no new classes can be added?\nI am also not sure about the naming yet. Basically we have custom models that are specified on the server-side (in config.yml) and custom models coming in via custom routing requests. The first kind should always be cached, but the second kind is more dynamic and we need to make sure to only keep the most recent ones right?\nSo first of all I would rename the CustomModel#cached field to something like CustomModel#permanent/internal/isServerModel or similar, because 'cached' does not really distinguish between custom models that are cached because they are 'server-side' models and custom models that are cached because they were used recently. We can then also rename the getter/setter accordingly and as long as it is not possible to set this flag from the client side there is no need to somehow 'hide' this method? There are simply two kinds of custom models and this is ok.", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r553823660", "createdAt": "2021-01-08T09:08:37Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/CustomModelParser.java", "diffHunk": "@@ -0,0 +1,434 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.routing.weighting.custom;\n+\n+import com.graphhopper.json.Statement;\n+import com.graphhopper.routing.ev.*;\n+import com.graphhopper.routing.util.EncodingManager;\n+import com.graphhopper.routing.util.FlagEncoder;\n+import com.graphhopper.routing.weighting.TurnCostProvider;\n+import com.graphhopper.util.CustomModel;\n+import com.graphhopper.util.EdgeIteratorState;\n+import com.graphhopper.util.GHUtility;\n+import com.graphhopper.util.JsonFeature;\n+import com.graphhopper.util.shapes.BBox;\n+import com.graphhopper.util.shapes.Polygon;\n+import org.codehaus.commons.compiler.CompileException;\n+import org.codehaus.commons.compiler.Location;\n+import org.codehaus.commons.compiler.io.Readers;\n+import org.codehaus.janino.Scanner;\n+import org.codehaus.janino.*;\n+import org.codehaus.janino.util.DeepCopier;\n+import org.locationtech.jts.geom.prep.PreparedGeometryFactory;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.*;\n+import java.util.*;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+public class CustomModelParser {\n+    private static final AtomicLong longVal = new AtomicLong(1);\n+    static final String IN_AREA_PREFIX = \"in_area_\";\n+    private static final Set<String> allowedNames = new HashSet<>(Arrays.asList(\"edge\", \"Math\"));\n+    private static final boolean JANINO_DEBUG = Boolean.getBoolean(Scanner.SYSTEM_PROPERTY_SOURCE_DEBUGGING_ENABLE);\n+\n+    // Without a cache the class creation takes 10-40ms which makes routingLM8 requests 20% slower on average.\n+    // CH requests and preparation is unaffected as cached weighting from preparation is used.\n+    // Use accessOrder==true to remove oldest accessed entry, not oldest inserted.\n+    private static final int CACHE_SIZE = Integer.getInteger(\"graphhopper.custom_weighting.cache_size\", 1000);\n+    private static final Map<String, Class<?>> CACHE = Collections.synchronizedMap(\n+            new LinkedHashMap<String, Class<?>>(CACHE_SIZE, 0.75f, true) {\n+                protected boolean removeEldestEntry(Map.Entry eldest) {\n+                    return size() > CACHE_SIZE;\n+                }\n+            });\n+\n+    // This internal cache ensures that the \"internal\" Weighting classes specified in the profiles, are never removed regardless\n+    // of how frequent other Weightings are created and accessed. We only need to synchronize the get and put methods alone.\n+    // E.g. we do not care for the race condition where two identical classes are requested and one of them is overwritten.\n+    // TODO perf compare with ConcurrentHashMap, but I guess, if there is a difference at all, it is not big for small maps\n+    private static final Map<String, Class<?>> INTERNAL_CACHE = Collections.synchronizedMap(new HashMap<>());\n+\n+    private CustomModelParser() {\n+        // utility class\n+    }\n+\n+    public static CustomWeighting createWeighting(FlagEncoder baseFlagEncoder, EncodedValueLookup lookup, TurnCostProvider turnCostProvider,\n+                                                  CustomModel customModel) {\n+        if (customModel == null)\n+            throw new IllegalStateException(\"CustomModel cannot be null\");\n+        CustomWeighting.Parameters parameters = create(customModel, lookup, baseFlagEncoder.getMaxSpeed(), baseFlagEncoder.getAverageSpeedEnc());\n+        return new CustomWeighting(baseFlagEncoder, turnCostProvider, parameters);\n+    }\n+\n+    /**\n+     * This method compiles a new subclass of CustomWeightingHelper composed from the provided CustomModel caches this\n+     * and returns an instance.\n+     */\n+    static CustomWeighting.Parameters create(CustomModel customModel, EncodedValueLookup lookup, double globalMaxSpeed,\n+                                             DecimalEncodedValue avgSpeedEnc) {\n+        String key = customModel.toString() + \",global:\" + globalMaxSpeed;\n+        if (key.length() > 100_000) throw new IllegalArgumentException(\"Custom Model too big: \" + key.length());\n+\n+        Class<?> clazz = customModel.shouldUseInternalCache() ? INTERNAL_CACHE.get(key) : null;\n+        if (CACHE_SIZE > 0 && clazz == null)\n+            clazz = CACHE.get(key);\n+        if (clazz == null) {\n+            clazz = createClazz(customModel, lookup, globalMaxSpeed);\n+            if (customModel.shouldUseInternalCache()) {\n+                INTERNAL_CACHE.put(key, clazz);\n+                if (INTERNAL_CACHE.size() > 100) {\n+                    CACHE.putAll(INTERNAL_CACHE);\n+                    INTERNAL_CACHE.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6b7360a5044b100468b6c28a7456e375a75690"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzgzMjA0Mg==", "bodyText": "Maybe call it speed/priorityStatements instead of speedFactor/priorityMap now?", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r553832042", "createdAt": "2021-01-08T09:25:39Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/util/CustomModel.java", "diffHunk": "@@ -126,43 +136,32 @@ public String toString() {\n \n     private String createContentString() {\n         // used to check against stored custom models, see #2026\n-        return \"distanceInfluence=\" + distanceInfluence + \"|speedFactor=\" + speedFactorMap + \"|maxSpeed=\" + maxSpeedMap +\n-                \"|maxSpeedFallback=\" + maxSpeedFallback + \"|priorityMap=\" + priorityMap + \"|areas=\" + areas;\n+        return \"distanceInfluence=\" + distanceInfluence + \"|speedFactor=\" + speedStatements +\n+                \"|priorityMap=\" + priorityStatements + \"|areas=\" + areas;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca6b7360a5044b100468b6c28a7456e375a75690"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg2NDI4OQ==", "bodyText": "We should state somewhere the expressions can be any boolean expression in Java", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r553864289", "createdAt": "2021-01-08T10:29:37Z", "author": {"login": "easbar"}, "path": "docs/core/profiles.md", "diffHunk": "@@ -139,108 +141,152 @@ And there are others that take on a numeric value, like:\n - max_weight\n - max_width\n \n-*Important note: Whenever you want to use any of these categories for a custom profile you need to add them to \n+*Important note: Whenever you want to use any of these categories for a custom profile you need to add them to\n `graph.encoded_values` in `config.yml`.*\n \n ### Setting up a Custom Model\n \n As mentioned above, the custom weighting function has three parameters that you can adjust: speed, priority and\n distance_influence. You can set up rules that determine these parameters from the edge's properties. A set of such rules\n-is called a 'custom model' and it is written in a dedicated YAML format. We will now see how the cost function parameters\n-can be influenced by the different fields of such a custom model.\n+is called a 'custom model' and it is written in a dedicated YAML or JSON format. We will now see how the cost function \n+parameters can be influenced by the different fields of such a custom model.\n   \n #### Customizing `speed`\n \n-For every edge a default speed is inherited from the base vehicle, but you have multiple options to adjust it.\n-The first thing you can do is rescaling the default speeds using the `speed_factor` section. For example this is how you\n-can reduce the the speed of every edge that has the value 'motorway' for the category 'road_class' to fifty percent of \n+For every road segment a default speed is inherited from the base vehicle and you have multiple options to adjust it.\n+The first thing you can do is rescaling the default speeds using `multiply by`. For example this is how you\n+can reduce the speed of every road segment that has the value `MOTORWAY` for the category 'road_class' to fifty percent of \n the default speed that is normally used by the base vehicle for this road class:\n ```yaml\n-speed_factor:\n-  road_class: {motorway: 0.5}\n-```  \n-Note that `road_class: {motorway: 0.5}` is an alternative YAML notation that is equivalent to:\n-```yaml\n-speed_factor:\n-  road_class:\n-    motorway: 0.5\n+speed:\n+  - if: road_class == MOTORWAY\n+    multiply by: 0.5\n ```\n \n-You can also setup speed factors for multiple road classes like this\n+You can also change the speed in case of different road classes like this\n ```yaml\n-speed_factor:\n-  road_class: {motorway: 0.5, primary: 0.7, tertiary: 0.9}\n+speed:\n+  - if: road_class == MOTORWAY\n+    multiply by: 0.5\n+  - if: road_class == PRIMARY || road_class == TERTIARY\n+    multiply by: 0.7\n ```\n \n-and use multiple categories to influence the speed factor\n+The OR-operator `||` means if the left **or** right expressions is true then the value `0.7` is used.\n+You can also use multiple categories in the expressions:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4324f5e2a621aa09930022b3bf5db353da6b0c3"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg2NDkwOQ==", "bodyText": "Maybe we should only use the same notation everywhere here and instead add a separate section that explains how one can also use this more JSON style notation (after the reader understood the yaml format). I found it distracting to see two different notations here.", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r553864909", "createdAt": "2021-01-08T10:30:57Z", "author": {"login": "easbar"}, "path": "docs/core/profiles.md", "diffHunk": "@@ -139,108 +141,152 @@ And there are others that take on a numeric value, like:\n - max_weight\n - max_width\n \n-*Important note: Whenever you want to use any of these categories for a custom profile you need to add them to \n+*Important note: Whenever you want to use any of these categories for a custom profile you need to add them to\n `graph.encoded_values` in `config.yml`.*\n \n ### Setting up a Custom Model\n \n As mentioned above, the custom weighting function has three parameters that you can adjust: speed, priority and\n distance_influence. You can set up rules that determine these parameters from the edge's properties. A set of such rules\n-is called a 'custom model' and it is written in a dedicated YAML format. We will now see how the cost function parameters\n-can be influenced by the different fields of such a custom model.\n+is called a 'custom model' and it is written in a dedicated YAML or JSON format. We will now see how the cost function \n+parameters can be influenced by the different fields of such a custom model.\n   \n #### Customizing `speed`\n \n-For every edge a default speed is inherited from the base vehicle, but you have multiple options to adjust it.\n-The first thing you can do is rescaling the default speeds using the `speed_factor` section. For example this is how you\n-can reduce the the speed of every edge that has the value 'motorway' for the category 'road_class' to fifty percent of \n+For every road segment a default speed is inherited from the base vehicle and you have multiple options to adjust it.\n+The first thing you can do is rescaling the default speeds using `multiply by`. For example this is how you\n+can reduce the speed of every road segment that has the value `MOTORWAY` for the category 'road_class' to fifty percent of \n the default speed that is normally used by the base vehicle for this road class:\n ```yaml\n-speed_factor:\n-  road_class: {motorway: 0.5}\n-```  \n-Note that `road_class: {motorway: 0.5}` is an alternative YAML notation that is equivalent to:\n-```yaml\n-speed_factor:\n-  road_class:\n-    motorway: 0.5\n+speed:\n+  - if: road_class == MOTORWAY\n+    multiply by: 0.5\n ```\n \n-You can also setup speed factors for multiple road classes like this\n+You can also change the speed in case of different road classes like this\n ```yaml\n-speed_factor:\n-  road_class: {motorway: 0.5, primary: 0.7, tertiary: 0.9}\n+speed:\n+  - if: road_class == MOTORWAY\n+    multiply by: 0.5\n+  - if: road_class == PRIMARY || road_class == TERTIARY\n+    multiply by: 0.7\n ```\n \n-and use multiple categories to influence the speed factor\n+The OR-operator `||` means if the left **or** right expressions is true then the value `0.7` is used.\n+You can also use multiple categories in the expressions:\n+\n ```yaml\n-speed_factor:\n-  road_class: {motorway: 0.5}\n-  road_environment: {tunnel: 0.8}\n+speed:\n+  - if: \"road_class == MOTORWAY\",     multiply by: 0.5\n+  - if: \"road_environment == TUNNEL\", multiply by: 0.8", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4324f5e2a621aa09930022b3bf5db353da6b0c3"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg2NTU3Ng==", "bodyText": "you should not use == (equality) or != (inequality)", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r553865576", "createdAt": "2021-01-08T10:32:19Z", "author": {"login": "easbar"}, "path": "docs/core/profiles.md", "diffHunk": "@@ -139,108 +141,152 @@ And there are others that take on a numeric value, like:\n - max_weight\n - max_width\n \n-*Important note: Whenever you want to use any of these categories for a custom profile you need to add them to \n+*Important note: Whenever you want to use any of these categories for a custom profile you need to add them to\n `graph.encoded_values` in `config.yml`.*\n \n ### Setting up a Custom Model\n \n As mentioned above, the custom weighting function has three parameters that you can adjust: speed, priority and\n distance_influence. You can set up rules that determine these parameters from the edge's properties. A set of such rules\n-is called a 'custom model' and it is written in a dedicated YAML format. We will now see how the cost function parameters\n-can be influenced by the different fields of such a custom model.\n+is called a 'custom model' and it is written in a dedicated YAML or JSON format. We will now see how the cost function \n+parameters can be influenced by the different fields of such a custom model.\n   \n #### Customizing `speed`\n \n-For every edge a default speed is inherited from the base vehicle, but you have multiple options to adjust it.\n-The first thing you can do is rescaling the default speeds using the `speed_factor` section. For example this is how you\n-can reduce the the speed of every edge that has the value 'motorway' for the category 'road_class' to fifty percent of \n+For every road segment a default speed is inherited from the base vehicle and you have multiple options to adjust it.\n+The first thing you can do is rescaling the default speeds using `multiply by`. For example this is how you\n+can reduce the speed of every road segment that has the value `MOTORWAY` for the category 'road_class' to fifty percent of \n the default speed that is normally used by the base vehicle for this road class:\n ```yaml\n-speed_factor:\n-  road_class: {motorway: 0.5}\n-```  \n-Note that `road_class: {motorway: 0.5}` is an alternative YAML notation that is equivalent to:\n-```yaml\n-speed_factor:\n-  road_class:\n-    motorway: 0.5\n+speed:\n+  - if: road_class == MOTORWAY\n+    multiply by: 0.5\n ```\n \n-You can also setup speed factors for multiple road classes like this\n+You can also change the speed in case of different road classes like this\n ```yaml\n-speed_factor:\n-  road_class: {motorway: 0.5, primary: 0.7, tertiary: 0.9}\n+speed:\n+  - if: road_class == MOTORWAY\n+    multiply by: 0.5\n+  - if: road_class == PRIMARY || road_class == TERTIARY\n+    multiply by: 0.7\n ```\n \n-and use multiple categories to influence the speed factor\n+The OR-operator `||` means if the left **or** right expressions is true then the value `0.7` is used.\n+You can also use multiple categories in the expressions:\n+\n ```yaml\n-speed_factor:\n-  road_class: {motorway: 0.5}\n-  road_environment: {tunnel: 0.8}\n+speed:\n+  - if: \"road_class == MOTORWAY\",     multiply by: 0.5\n+  - if: \"road_environment == TUNNEL\", multiply by: 0.8\n ```\n \n-If an edge matches multiple rules the speed factor values will be multiplied. For example, here the speed factor of \n-a road segment that has `road_class=motorway` will be `0.5`, the speed factor of a road segment that additionally has \n-`road_environment=tunnel` will be `0.4` and the speed factor of a road segment that has `road_class=secondary` and \n-`road_environment=tunnel` will be `0.8`.\n+Here also quotes around every expression and a comma is used to write one statement per YAML line. \n+Which looks more like JSON which is also possible for server-side profiles and the only way to write custom models at \n+query time:\n \n-Instead of setting the speed factors for certain values you can instead set the speed factors for all *other* values using\n-as special key (`\"*\"`), like this:\n-```yaml\n-speed_factor: \n-  road_class: {\"*\": 0.5}\n-  road_environment: {tunnel: 0.8, \"*\": 0.6}\n+```json\n+{ \"speed\": [\n+    { \"if\": \"road_class == MOTORWAY\", \"multiply by\": 0.5 },\n+    { \"if\": \"road_environment == TUNNEL\", \"multiply by\": 0.8 }\n+  ]\n+}\n ```\n \n-So in this example we set a speed factor of `0.5` regardless of the `road_class` and all `road_environment` values yield\n-a speed factor of `0.6` *except* `tunnel` which gets a speed factor of `0.8`. And as mentioned above for edges that match\n-multiple of these rules the different factors get multiplied.\n+There are other categories like `get_off_bike` that are of `boolean` type. You use them via:\n \n-For encoded values with boolean values, like `get_off_bike` you set the speed factor like this:\n ```yaml\n-speed_factor:\n-  get_off_bike: {true: 0.6, false: 1.0}\n+speed:\n+  - if: get_off_bike\n+    multiply by: 0.6\n ```\n-which means that for edges with `get_off_bike=true` the speed factor will be `0.6` and otherwise it will be `1.0`.\n-You can skip any of these values to retain the default.\n \n-For encoded values with numeric values, like `max_width` you use the `<` and `>` operators, like this:\n+which means that for edges with `get_off_bike==true` the speed factor will be `0.6`.\n+\n+For encoded values with numeric values, like `max_width` you should not use \"equality\" or \"inequality\" but the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4324f5e2a621aa09930022b3bf5db353da6b0c3"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg2NjM5NA==", "bodyText": "I found this more confusing than helpful. Maybe we should add this at the end of the else section, because this is only needed if one wants the same effect as 'else', but without preceding 'if' statements.", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r553866394", "createdAt": "2021-01-08T10:34:02Z", "author": {"login": "easbar"}, "path": "docs/core/profiles.md", "diffHunk": "@@ -139,108 +141,152 @@ And there are others that take on a numeric value, like:\n - max_weight\n - max_width\n \n-*Important note: Whenever you want to use any of these categories for a custom profile you need to add them to \n+*Important note: Whenever you want to use any of these categories for a custom profile you need to add them to\n `graph.encoded_values` in `config.yml`.*\n \n ### Setting up a Custom Model\n \n As mentioned above, the custom weighting function has three parameters that you can adjust: speed, priority and\n distance_influence. You can set up rules that determine these parameters from the edge's properties. A set of such rules\n-is called a 'custom model' and it is written in a dedicated YAML format. We will now see how the cost function parameters\n-can be influenced by the different fields of such a custom model.\n+is called a 'custom model' and it is written in a dedicated YAML or JSON format. We will now see how the cost function \n+parameters can be influenced by the different fields of such a custom model.\n   \n #### Customizing `speed`\n \n-For every edge a default speed is inherited from the base vehicle, but you have multiple options to adjust it.\n-The first thing you can do is rescaling the default speeds using the `speed_factor` section. For example this is how you\n-can reduce the the speed of every edge that has the value 'motorway' for the category 'road_class' to fifty percent of \n+For every road segment a default speed is inherited from the base vehicle and you have multiple options to adjust it.\n+The first thing you can do is rescaling the default speeds using `multiply by`. For example this is how you\n+can reduce the speed of every road segment that has the value `MOTORWAY` for the category 'road_class' to fifty percent of \n the default speed that is normally used by the base vehicle for this road class:\n ```yaml\n-speed_factor:\n-  road_class: {motorway: 0.5}\n-```  \n-Note that `road_class: {motorway: 0.5}` is an alternative YAML notation that is equivalent to:\n-```yaml\n-speed_factor:\n-  road_class:\n-    motorway: 0.5\n+speed:\n+  - if: road_class == MOTORWAY\n+    multiply by: 0.5\n ```\n \n-You can also setup speed factors for multiple road classes like this\n+You can also change the speed in case of different road classes like this\n ```yaml\n-speed_factor:\n-  road_class: {motorway: 0.5, primary: 0.7, tertiary: 0.9}\n+speed:\n+  - if: road_class == MOTORWAY\n+    multiply by: 0.5\n+  - if: road_class == PRIMARY || road_class == TERTIARY\n+    multiply by: 0.7\n ```\n \n-and use multiple categories to influence the speed factor\n+The OR-operator `||` means if the left **or** right expressions is true then the value `0.7` is used.\n+You can also use multiple categories in the expressions:\n+\n ```yaml\n-speed_factor:\n-  road_class: {motorway: 0.5}\n-  road_environment: {tunnel: 0.8}\n+speed:\n+  - if: \"road_class == MOTORWAY\",     multiply by: 0.5\n+  - if: \"road_environment == TUNNEL\", multiply by: 0.8\n ```\n \n-If an edge matches multiple rules the speed factor values will be multiplied. For example, here the speed factor of \n-a road segment that has `road_class=motorway` will be `0.5`, the speed factor of a road segment that additionally has \n-`road_environment=tunnel` will be `0.4` and the speed factor of a road segment that has `road_class=secondary` and \n-`road_environment=tunnel` will be `0.8`.\n+Here also quotes around every expression and a comma is used to write one statement per YAML line. \n+Which looks more like JSON which is also possible for server-side profiles and the only way to write custom models at \n+query time:\n \n-Instead of setting the speed factors for certain values you can instead set the speed factors for all *other* values using\n-as special key (`\"*\"`), like this:\n-```yaml\n-speed_factor: \n-  road_class: {\"*\": 0.5}\n-  road_environment: {tunnel: 0.8, \"*\": 0.6}\n+```json\n+{ \"speed\": [\n+    { \"if\": \"road_class == MOTORWAY\", \"multiply by\": 0.5 },\n+    { \"if\": \"road_environment == TUNNEL\", \"multiply by\": 0.8 }\n+  ]\n+}\n ```\n \n-So in this example we set a speed factor of `0.5` regardless of the `road_class` and all `road_environment` values yield\n-a speed factor of `0.6` *except* `tunnel` which gets a speed factor of `0.8`. And as mentioned above for edges that match\n-multiple of these rules the different factors get multiplied.\n+There are other categories like `get_off_bike` that are of `boolean` type. You use them via:\n \n-For encoded values with boolean values, like `get_off_bike` you set the speed factor like this:\n ```yaml\n-speed_factor:\n-  get_off_bike: {true: 0.6, false: 1.0}\n+speed:\n+  - if: get_off_bike\n+    multiply by: 0.6\n ```\n-which means that for edges with `get_off_bike=true` the speed factor will be `0.6` and otherwise it will be `1.0`.\n-You can skip any of these values to retain the default.\n \n-For encoded values with numeric values, like `max_width` you use the `<` and `>` operators, like this:\n+which means that for edges with `get_off_bike==true` the speed factor will be `0.6`.\n+\n+For encoded values with numeric values, like `max_width` you should not use \"equality\" or \"inequality\" but the\n+comparison operators \"bigger\" `>`, \"bigger or equals\" `>=`, \"smaller\" `<` or \"smaller or equals\" `<=`, e.g.:\n ```yaml\n-speed_factor:\n-  max_width: {\"<2.5\": 0.8}\n+speed:\n+  - if: \"max_width < 2.5\", multiply by: 0.8\n ``` \n-which means that for all edges with `max_width` smaller than `2.5m` the speed factor is `0.8`.\n+which means that for all edges with `max_width` smaller than `2.5m` the speed is multiplied by `0.8`.\n \n-In any case values of `speed_factor` have to be in the range `[0,1]` and it is not possible to *increase* the speed for\n-edges of certain types. \n+Then there are categories of `string` type. You use them via:\n \n-Another way to change the speed is using the `max_speed` section, for example:\n ```yaml\n-max_speed:\n-  surface: {gravel: 60}\n+speed:\n+- if: country == \"DEU\"\n+  multiply by: 0\n ```\n \n-implies that on all road segments with `surface=gravel` the speed will be at most `60km/h`, regardless of the default \n-speed of this edge or the adjustments made by the `speed_factor` section. Just like with `speed_factor` you can setup\n-`max_speed` values for multiple category values and different categories. If multiple rules match for a given edge the\n-most restrictive rule will determine the speed (the minimum `max_speed` will be applied). \n-Values for `max_speed` must be in the range `[0,max_vehicle_speed]` where `max_vehicle_speed` is the maximum speed that\n-is set for the base vehicle (which you cannot change).\n+Another way to change the speed is using `limit to`:\n+```yaml\n+speed:\n+  - if: \"surface != GRAVEL\", limit to: 60\n+```\n+\n+This implies that on all road segments with no `GRAVEL` value for `surface` the speed will be at most `60km/h`,\n+regardless of the default speed of this road segment or the previous `multiply by` statements. Just like\n+with `multiply by` you can use multiple category values and different categories in the expressions for `limit to`. \n+If multiple statements match for a given edge the most restrictive statement will determine the speed.\n+\n+Values for `limit to` must be in the range `[0, max_vehicle_speed]` where `max_vehicle_speed` is the maximum speed that\n+is set for the base vehicle, and you cannot change it.\n+\n+An unconditional statement can be used as the last statement to limit the speed to a certain value under all conditions:\n+```yaml\n+speed:\n+  - if: \"true\", limit to: 90\n+```", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4324f5e2a621aa09930022b3bf5db353da6b0c3"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg2Njk4OQ==", "bodyText": "I would find it more helpful to learn that all the statements are simply applied from top to bottom. Here it means that multiple factors are applied, but that is just a special case of the more general rule.", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r553866989", "createdAt": "2021-01-08T10:35:17Z", "author": {"login": "easbar"}, "path": "docs/core/profiles.md", "diffHunk": "@@ -139,108 +141,152 @@ And there are others that take on a numeric value, like:\n - max_weight\n - max_width\n \n-*Important note: Whenever you want to use any of these categories for a custom profile you need to add them to \n+*Important note: Whenever you want to use any of these categories for a custom profile you need to add them to\n `graph.encoded_values` in `config.yml`.*\n \n ### Setting up a Custom Model\n \n As mentioned above, the custom weighting function has three parameters that you can adjust: speed, priority and\n distance_influence. You can set up rules that determine these parameters from the edge's properties. A set of such rules\n-is called a 'custom model' and it is written in a dedicated YAML format. We will now see how the cost function parameters\n-can be influenced by the different fields of such a custom model.\n+is called a 'custom model' and it is written in a dedicated YAML or JSON format. We will now see how the cost function \n+parameters can be influenced by the different fields of such a custom model.\n   \n #### Customizing `speed`\n \n-For every edge a default speed is inherited from the base vehicle, but you have multiple options to adjust it.\n-The first thing you can do is rescaling the default speeds using the `speed_factor` section. For example this is how you\n-can reduce the the speed of every edge that has the value 'motorway' for the category 'road_class' to fifty percent of \n+For every road segment a default speed is inherited from the base vehicle and you have multiple options to adjust it.\n+The first thing you can do is rescaling the default speeds using `multiply by`. For example this is how you\n+can reduce the speed of every road segment that has the value `MOTORWAY` for the category 'road_class' to fifty percent of \n the default speed that is normally used by the base vehicle for this road class:\n ```yaml\n-speed_factor:\n-  road_class: {motorway: 0.5}\n-```  \n-Note that `road_class: {motorway: 0.5}` is an alternative YAML notation that is equivalent to:\n-```yaml\n-speed_factor:\n-  road_class:\n-    motorway: 0.5\n+speed:\n+  - if: road_class == MOTORWAY\n+    multiply by: 0.5\n ```\n \n-You can also setup speed factors for multiple road classes like this\n+You can also change the speed in case of different road classes like this\n ```yaml\n-speed_factor:\n-  road_class: {motorway: 0.5, primary: 0.7, tertiary: 0.9}\n+speed:\n+  - if: road_class == MOTORWAY\n+    multiply by: 0.5\n+  - if: road_class == PRIMARY || road_class == TERTIARY\n+    multiply by: 0.7\n ```\n \n-and use multiple categories to influence the speed factor\n+The OR-operator `||` means if the left **or** right expressions is true then the value `0.7` is used.\n+You can also use multiple categories in the expressions:\n+\n ```yaml\n-speed_factor:\n-  road_class: {motorway: 0.5}\n-  road_environment: {tunnel: 0.8}\n+speed:\n+  - if: \"road_class == MOTORWAY\",     multiply by: 0.5\n+  - if: \"road_environment == TUNNEL\", multiply by: 0.8\n ```\n \n-If an edge matches multiple rules the speed factor values will be multiplied. For example, here the speed factor of \n-a road segment that has `road_class=motorway` will be `0.5`, the speed factor of a road segment that additionally has \n-`road_environment=tunnel` will be `0.4` and the speed factor of a road segment that has `road_class=secondary` and \n-`road_environment=tunnel` will be `0.8`.\n+Here also quotes around every expression and a comma is used to write one statement per YAML line. \n+Which looks more like JSON which is also possible for server-side profiles and the only way to write custom models at \n+query time:\n \n-Instead of setting the speed factors for certain values you can instead set the speed factors for all *other* values using\n-as special key (`\"*\"`), like this:\n-```yaml\n-speed_factor: \n-  road_class: {\"*\": 0.5}\n-  road_environment: {tunnel: 0.8, \"*\": 0.6}\n+```json\n+{ \"speed\": [\n+    { \"if\": \"road_class == MOTORWAY\", \"multiply by\": 0.5 },\n+    { \"if\": \"road_environment == TUNNEL\", \"multiply by\": 0.8 }\n+  ]\n+}\n ```\n \n-So in this example we set a speed factor of `0.5` regardless of the `road_class` and all `road_environment` values yield\n-a speed factor of `0.6` *except* `tunnel` which gets a speed factor of `0.8`. And as mentioned above for edges that match\n-multiple of these rules the different factors get multiplied.\n+There are other categories like `get_off_bike` that are of `boolean` type. You use them via:\n \n-For encoded values with boolean values, like `get_off_bike` you set the speed factor like this:\n ```yaml\n-speed_factor:\n-  get_off_bike: {true: 0.6, false: 1.0}\n+speed:\n+  - if: get_off_bike\n+    multiply by: 0.6\n ```\n-which means that for edges with `get_off_bike=true` the speed factor will be `0.6` and otherwise it will be `1.0`.\n-You can skip any of these values to retain the default.\n \n-For encoded values with numeric values, like `max_width` you use the `<` and `>` operators, like this:\n+which means that for edges with `get_off_bike==true` the speed factor will be `0.6`.\n+\n+For encoded values with numeric values, like `max_width` you should not use \"equality\" or \"inequality\" but the\n+comparison operators \"bigger\" `>`, \"bigger or equals\" `>=`, \"smaller\" `<` or \"smaller or equals\" `<=`, e.g.:\n ```yaml\n-speed_factor:\n-  max_width: {\"<2.5\": 0.8}\n+speed:\n+  - if: \"max_width < 2.5\", multiply by: 0.8\n ``` \n-which means that for all edges with `max_width` smaller than `2.5m` the speed factor is `0.8`.\n+which means that for all edges with `max_width` smaller than `2.5m` the speed is multiplied by `0.8`.\n \n-In any case values of `speed_factor` have to be in the range `[0,1]` and it is not possible to *increase* the speed for\n-edges of certain types. \n+Then there are categories of `string` type. You use them via:\n \n-Another way to change the speed is using the `max_speed` section, for example:\n ```yaml\n-max_speed:\n-  surface: {gravel: 60}\n+speed:\n+- if: country == \"DEU\"\n+  multiply by: 0\n ```\n \n-implies that on all road segments with `surface=gravel` the speed will be at most `60km/h`, regardless of the default \n-speed of this edge or the adjustments made by the `speed_factor` section. Just like with `speed_factor` you can setup\n-`max_speed` values for multiple category values and different categories. If multiple rules match for a given edge the\n-most restrictive rule will determine the speed (the minimum `max_speed` will be applied). \n-Values for `max_speed` must be in the range `[0,max_vehicle_speed]` where `max_vehicle_speed` is the maximum speed that\n-is set for the base vehicle (which you cannot change).\n+Another way to change the speed is using `limit to`:\n+```yaml\n+speed:\n+  - if: \"surface != GRAVEL\", limit to: 60\n+```\n+\n+This implies that on all road segments with no `GRAVEL` value for `surface` the speed will be at most `60km/h`,\n+regardless of the default speed of this road segment or the previous `multiply by` statements. Just like\n+with `multiply by` you can use multiple category values and different categories in the expressions for `limit to`. \n+If multiple statements match for a given edge the most restrictive statement will determine the speed.\n+\n+Values for `limit to` must be in the range `[0, max_vehicle_speed]` where `max_vehicle_speed` is the maximum speed that\n+is set for the base vehicle, and you cannot change it.\n+\n+An unconditional statement can be used as the last statement to limit the speed to a certain value under all conditions:\n+```yaml\n+speed:\n+  - if: \"true\", limit to: 90\n+```\n+\n+This means that the speed is at most `90km/h` for any road segments regardless of its properties.\n+\n+#### `else`\n+\n+Every `if` statement can have an `else` statement which is evaluated only when the `if`-condition is `false`.\n+\n+#### `else if`\n \n-You can also modify the speed for all edges in a certain area. To do this first add some areas to the `areas` section\n-of the custom model and then use this name to set a `speed_factor` or `max_speed` for this area. In the following\n-example we set the `speed_factor` of an area called `my_area` to `0.7`. For `max_speed` it works the same way. All area\n-names need to be prefixed with `area_`.  \n+If a road segment matches multiple expressions the speed will be multiplied. In this example:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4324f5e2a621aa09930022b3bf5db353da6b0c3"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg2NzI4Mw==", "bodyText": "0.8*0.5=0.4 to make it more clear why 0.4.", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r553867283", "createdAt": "2021-01-08T10:35:54Z", "author": {"login": "easbar"}, "path": "docs/core/profiles.md", "diffHunk": "@@ -139,108 +141,152 @@ And there are others that take on a numeric value, like:\n - max_weight\n - max_width\n \n-*Important note: Whenever you want to use any of these categories for a custom profile you need to add them to \n+*Important note: Whenever you want to use any of these categories for a custom profile you need to add them to\n `graph.encoded_values` in `config.yml`.*\n \n ### Setting up a Custom Model\n \n As mentioned above, the custom weighting function has three parameters that you can adjust: speed, priority and\n distance_influence. You can set up rules that determine these parameters from the edge's properties. A set of such rules\n-is called a 'custom model' and it is written in a dedicated YAML format. We will now see how the cost function parameters\n-can be influenced by the different fields of such a custom model.\n+is called a 'custom model' and it is written in a dedicated YAML or JSON format. We will now see how the cost function \n+parameters can be influenced by the different fields of such a custom model.\n   \n #### Customizing `speed`\n \n-For every edge a default speed is inherited from the base vehicle, but you have multiple options to adjust it.\n-The first thing you can do is rescaling the default speeds using the `speed_factor` section. For example this is how you\n-can reduce the the speed of every edge that has the value 'motorway' for the category 'road_class' to fifty percent of \n+For every road segment a default speed is inherited from the base vehicle and you have multiple options to adjust it.\n+The first thing you can do is rescaling the default speeds using `multiply by`. For example this is how you\n+can reduce the speed of every road segment that has the value `MOTORWAY` for the category 'road_class' to fifty percent of \n the default speed that is normally used by the base vehicle for this road class:\n ```yaml\n-speed_factor:\n-  road_class: {motorway: 0.5}\n-```  \n-Note that `road_class: {motorway: 0.5}` is an alternative YAML notation that is equivalent to:\n-```yaml\n-speed_factor:\n-  road_class:\n-    motorway: 0.5\n+speed:\n+  - if: road_class == MOTORWAY\n+    multiply by: 0.5\n ```\n \n-You can also setup speed factors for multiple road classes like this\n+You can also change the speed in case of different road classes like this\n ```yaml\n-speed_factor:\n-  road_class: {motorway: 0.5, primary: 0.7, tertiary: 0.9}\n+speed:\n+  - if: road_class == MOTORWAY\n+    multiply by: 0.5\n+  - if: road_class == PRIMARY || road_class == TERTIARY\n+    multiply by: 0.7\n ```\n \n-and use multiple categories to influence the speed factor\n+The OR-operator `||` means if the left **or** right expressions is true then the value `0.7` is used.\n+You can also use multiple categories in the expressions:\n+\n ```yaml\n-speed_factor:\n-  road_class: {motorway: 0.5}\n-  road_environment: {tunnel: 0.8}\n+speed:\n+  - if: \"road_class == MOTORWAY\",     multiply by: 0.5\n+  - if: \"road_environment == TUNNEL\", multiply by: 0.8\n ```\n \n-If an edge matches multiple rules the speed factor values will be multiplied. For example, here the speed factor of \n-a road segment that has `road_class=motorway` will be `0.5`, the speed factor of a road segment that additionally has \n-`road_environment=tunnel` will be `0.4` and the speed factor of a road segment that has `road_class=secondary` and \n-`road_environment=tunnel` will be `0.8`.\n+Here also quotes around every expression and a comma is used to write one statement per YAML line. \n+Which looks more like JSON which is also possible for server-side profiles and the only way to write custom models at \n+query time:\n \n-Instead of setting the speed factors for certain values you can instead set the speed factors for all *other* values using\n-as special key (`\"*\"`), like this:\n-```yaml\n-speed_factor: \n-  road_class: {\"*\": 0.5}\n-  road_environment: {tunnel: 0.8, \"*\": 0.6}\n+```json\n+{ \"speed\": [\n+    { \"if\": \"road_class == MOTORWAY\", \"multiply by\": 0.5 },\n+    { \"if\": \"road_environment == TUNNEL\", \"multiply by\": 0.8 }\n+  ]\n+}\n ```\n \n-So in this example we set a speed factor of `0.5` regardless of the `road_class` and all `road_environment` values yield\n-a speed factor of `0.6` *except* `tunnel` which gets a speed factor of `0.8`. And as mentioned above for edges that match\n-multiple of these rules the different factors get multiplied.\n+There are other categories like `get_off_bike` that are of `boolean` type. You use them via:\n \n-For encoded values with boolean values, like `get_off_bike` you set the speed factor like this:\n ```yaml\n-speed_factor:\n-  get_off_bike: {true: 0.6, false: 1.0}\n+speed:\n+  - if: get_off_bike\n+    multiply by: 0.6\n ```\n-which means that for edges with `get_off_bike=true` the speed factor will be `0.6` and otherwise it will be `1.0`.\n-You can skip any of these values to retain the default.\n \n-For encoded values with numeric values, like `max_width` you use the `<` and `>` operators, like this:\n+which means that for edges with `get_off_bike==true` the speed factor will be `0.6`.\n+\n+For encoded values with numeric values, like `max_width` you should not use \"equality\" or \"inequality\" but the\n+comparison operators \"bigger\" `>`, \"bigger or equals\" `>=`, \"smaller\" `<` or \"smaller or equals\" `<=`, e.g.:\n ```yaml\n-speed_factor:\n-  max_width: {\"<2.5\": 0.8}\n+speed:\n+  - if: \"max_width < 2.5\", multiply by: 0.8\n ``` \n-which means that for all edges with `max_width` smaller than `2.5m` the speed factor is `0.8`.\n+which means that for all edges with `max_width` smaller than `2.5m` the speed is multiplied by `0.8`.\n \n-In any case values of `speed_factor` have to be in the range `[0,1]` and it is not possible to *increase* the speed for\n-edges of certain types. \n+Then there are categories of `string` type. You use them via:\n \n-Another way to change the speed is using the `max_speed` section, for example:\n ```yaml\n-max_speed:\n-  surface: {gravel: 60}\n+speed:\n+- if: country == \"DEU\"\n+  multiply by: 0\n ```\n \n-implies that on all road segments with `surface=gravel` the speed will be at most `60km/h`, regardless of the default \n-speed of this edge or the adjustments made by the `speed_factor` section. Just like with `speed_factor` you can setup\n-`max_speed` values for multiple category values and different categories. If multiple rules match for a given edge the\n-most restrictive rule will determine the speed (the minimum `max_speed` will be applied). \n-Values for `max_speed` must be in the range `[0,max_vehicle_speed]` where `max_vehicle_speed` is the maximum speed that\n-is set for the base vehicle (which you cannot change).\n+Another way to change the speed is using `limit to`:\n+```yaml\n+speed:\n+  - if: \"surface != GRAVEL\", limit to: 60\n+```\n+\n+This implies that on all road segments with no `GRAVEL` value for `surface` the speed will be at most `60km/h`,\n+regardless of the default speed of this road segment or the previous `multiply by` statements. Just like\n+with `multiply by` you can use multiple category values and different categories in the expressions for `limit to`. \n+If multiple statements match for a given edge the most restrictive statement will determine the speed.\n+\n+Values for `limit to` must be in the range `[0, max_vehicle_speed]` where `max_vehicle_speed` is the maximum speed that\n+is set for the base vehicle, and you cannot change it.\n+\n+An unconditional statement can be used as the last statement to limit the speed to a certain value under all conditions:\n+```yaml\n+speed:\n+  - if: \"true\", limit to: 90\n+```\n+\n+This means that the speed is at most `90km/h` for any road segments regardless of its properties.\n+\n+#### `else`\n+\n+Every `if` statement can have an `else` statement which is evaluated only when the `if`-condition is `false`.\n+\n+#### `else if`\n \n-You can also modify the speed for all edges in a certain area. To do this first add some areas to the `areas` section\n-of the custom model and then use this name to set a `speed_factor` or `max_speed` for this area. In the following\n-example we set the `speed_factor` of an area called `my_area` to `0.7`. For `max_speed` it works the same way. All area\n-names need to be prefixed with `area_`.  \n+If a road segment matches multiple expressions the speed will be multiplied. In this example:\n \n ```yaml\n-speed_factor:\n-  area_my_area: 0.7\n+speed:\n+- if: road_class == MOTORWAY\n+  multiply by: 0.5\n+- if: road_environment == TUNNEL\n+  multiply by: 0.8\n+```\n+\n+the speed of a road segment that has `road_class == MOTORWAY` will be multiplied by `0.5`, for a road segment\n+that additionally has `road_environment == TUNNEL` it will be multiplied by `0.4` and for a road segment that has", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4324f5e2a621aa09930022b3bf5db353da6b0c3"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1Mzg2NzYzNg==", "bodyText": "road_environment == TUNNEL but road_class == SECONDARY", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r553867636", "createdAt": "2021-01-08T10:36:30Z", "author": {"login": "easbar"}, "path": "docs/core/profiles.md", "diffHunk": "@@ -139,108 +141,152 @@ And there are others that take on a numeric value, like:\n - max_weight\n - max_width\n \n-*Important note: Whenever you want to use any of these categories for a custom profile you need to add them to \n+*Important note: Whenever you want to use any of these categories for a custom profile you need to add them to\n `graph.encoded_values` in `config.yml`.*\n \n ### Setting up a Custom Model\n \n As mentioned above, the custom weighting function has three parameters that you can adjust: speed, priority and\n distance_influence. You can set up rules that determine these parameters from the edge's properties. A set of such rules\n-is called a 'custom model' and it is written in a dedicated YAML format. We will now see how the cost function parameters\n-can be influenced by the different fields of such a custom model.\n+is called a 'custom model' and it is written in a dedicated YAML or JSON format. We will now see how the cost function \n+parameters can be influenced by the different fields of such a custom model.\n   \n #### Customizing `speed`\n \n-For every edge a default speed is inherited from the base vehicle, but you have multiple options to adjust it.\n-The first thing you can do is rescaling the default speeds using the `speed_factor` section. For example this is how you\n-can reduce the the speed of every edge that has the value 'motorway' for the category 'road_class' to fifty percent of \n+For every road segment a default speed is inherited from the base vehicle and you have multiple options to adjust it.\n+The first thing you can do is rescaling the default speeds using `multiply by`. For example this is how you\n+can reduce the speed of every road segment that has the value `MOTORWAY` for the category 'road_class' to fifty percent of \n the default speed that is normally used by the base vehicle for this road class:\n ```yaml\n-speed_factor:\n-  road_class: {motorway: 0.5}\n-```  \n-Note that `road_class: {motorway: 0.5}` is an alternative YAML notation that is equivalent to:\n-```yaml\n-speed_factor:\n-  road_class:\n-    motorway: 0.5\n+speed:\n+  - if: road_class == MOTORWAY\n+    multiply by: 0.5\n ```\n \n-You can also setup speed factors for multiple road classes like this\n+You can also change the speed in case of different road classes like this\n ```yaml\n-speed_factor:\n-  road_class: {motorway: 0.5, primary: 0.7, tertiary: 0.9}\n+speed:\n+  - if: road_class == MOTORWAY\n+    multiply by: 0.5\n+  - if: road_class == PRIMARY || road_class == TERTIARY\n+    multiply by: 0.7\n ```\n \n-and use multiple categories to influence the speed factor\n+The OR-operator `||` means if the left **or** right expressions is true then the value `0.7` is used.\n+You can also use multiple categories in the expressions:\n+\n ```yaml\n-speed_factor:\n-  road_class: {motorway: 0.5}\n-  road_environment: {tunnel: 0.8}\n+speed:\n+  - if: \"road_class == MOTORWAY\",     multiply by: 0.5\n+  - if: \"road_environment == TUNNEL\", multiply by: 0.8\n ```\n \n-If an edge matches multiple rules the speed factor values will be multiplied. For example, here the speed factor of \n-a road segment that has `road_class=motorway` will be `0.5`, the speed factor of a road segment that additionally has \n-`road_environment=tunnel` will be `0.4` and the speed factor of a road segment that has `road_class=secondary` and \n-`road_environment=tunnel` will be `0.8`.\n+Here also quotes around every expression and a comma is used to write one statement per YAML line. \n+Which looks more like JSON which is also possible for server-side profiles and the only way to write custom models at \n+query time:\n \n-Instead of setting the speed factors for certain values you can instead set the speed factors for all *other* values using\n-as special key (`\"*\"`), like this:\n-```yaml\n-speed_factor: \n-  road_class: {\"*\": 0.5}\n-  road_environment: {tunnel: 0.8, \"*\": 0.6}\n+```json\n+{ \"speed\": [\n+    { \"if\": \"road_class == MOTORWAY\", \"multiply by\": 0.5 },\n+    { \"if\": \"road_environment == TUNNEL\", \"multiply by\": 0.8 }\n+  ]\n+}\n ```\n \n-So in this example we set a speed factor of `0.5` regardless of the `road_class` and all `road_environment` values yield\n-a speed factor of `0.6` *except* `tunnel` which gets a speed factor of `0.8`. And as mentioned above for edges that match\n-multiple of these rules the different factors get multiplied.\n+There are other categories like `get_off_bike` that are of `boolean` type. You use them via:\n \n-For encoded values with boolean values, like `get_off_bike` you set the speed factor like this:\n ```yaml\n-speed_factor:\n-  get_off_bike: {true: 0.6, false: 1.0}\n+speed:\n+  - if: get_off_bike\n+    multiply by: 0.6\n ```\n-which means that for edges with `get_off_bike=true` the speed factor will be `0.6` and otherwise it will be `1.0`.\n-You can skip any of these values to retain the default.\n \n-For encoded values with numeric values, like `max_width` you use the `<` and `>` operators, like this:\n+which means that for edges with `get_off_bike==true` the speed factor will be `0.6`.\n+\n+For encoded values with numeric values, like `max_width` you should not use \"equality\" or \"inequality\" but the\n+comparison operators \"bigger\" `>`, \"bigger or equals\" `>=`, \"smaller\" `<` or \"smaller or equals\" `<=`, e.g.:\n ```yaml\n-speed_factor:\n-  max_width: {\"<2.5\": 0.8}\n+speed:\n+  - if: \"max_width < 2.5\", multiply by: 0.8\n ``` \n-which means that for all edges with `max_width` smaller than `2.5m` the speed factor is `0.8`.\n+which means that for all edges with `max_width` smaller than `2.5m` the speed is multiplied by `0.8`.\n \n-In any case values of `speed_factor` have to be in the range `[0,1]` and it is not possible to *increase* the speed for\n-edges of certain types. \n+Then there are categories of `string` type. You use them via:\n \n-Another way to change the speed is using the `max_speed` section, for example:\n ```yaml\n-max_speed:\n-  surface: {gravel: 60}\n+speed:\n+- if: country == \"DEU\"\n+  multiply by: 0\n ```\n \n-implies that on all road segments with `surface=gravel` the speed will be at most `60km/h`, regardless of the default \n-speed of this edge or the adjustments made by the `speed_factor` section. Just like with `speed_factor` you can setup\n-`max_speed` values for multiple category values and different categories. If multiple rules match for a given edge the\n-most restrictive rule will determine the speed (the minimum `max_speed` will be applied). \n-Values for `max_speed` must be in the range `[0,max_vehicle_speed]` where `max_vehicle_speed` is the maximum speed that\n-is set for the base vehicle (which you cannot change).\n+Another way to change the speed is using `limit to`:\n+```yaml\n+speed:\n+  - if: \"surface != GRAVEL\", limit to: 60\n+```\n+\n+This implies that on all road segments with no `GRAVEL` value for `surface` the speed will be at most `60km/h`,\n+regardless of the default speed of this road segment or the previous `multiply by` statements. Just like\n+with `multiply by` you can use multiple category values and different categories in the expressions for `limit to`. \n+If multiple statements match for a given edge the most restrictive statement will determine the speed.\n+\n+Values for `limit to` must be in the range `[0, max_vehicle_speed]` where `max_vehicle_speed` is the maximum speed that\n+is set for the base vehicle, and you cannot change it.\n+\n+An unconditional statement can be used as the last statement to limit the speed to a certain value under all conditions:\n+```yaml\n+speed:\n+  - if: \"true\", limit to: 90\n+```\n+\n+This means that the speed is at most `90km/h` for any road segments regardless of its properties.\n+\n+#### `else`\n+\n+Every `if` statement can have an `else` statement which is evaluated only when the `if`-condition is `false`.\n+\n+#### `else if`\n \n-You can also modify the speed for all edges in a certain area. To do this first add some areas to the `areas` section\n-of the custom model and then use this name to set a `speed_factor` or `max_speed` for this area. In the following\n-example we set the `speed_factor` of an area called `my_area` to `0.7`. For `max_speed` it works the same way. All area\n-names need to be prefixed with `area_`.  \n+If a road segment matches multiple expressions the speed will be multiplied. In this example:\n \n ```yaml\n-speed_factor:\n-  area_my_area: 0.7\n+speed:\n+- if: road_class == MOTORWAY\n+  multiply by: 0.5\n+- if: road_environment == TUNNEL\n+  multiply by: 0.8\n+```\n+\n+the speed of a road segment that has `road_class == MOTORWAY` will be multiplied by `0.5`, for a road segment\n+that additionally has `road_environment == TUNNEL` it will be multiplied by `0.4` and for a road segment that has\n+`road_class == SECONDARY` and `road_environment == TUNNEL` it will be multiplied by `0.8`. You can avoid the ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a4324f5e2a621aa09930022b3bf5db353da6b0c3"}, "originalPosition": 213}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee7461e5ce73d6a3fa646ec5de8305e003a2d896", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/ee7461e5ce73d6a3fa646ec5de8305e003a2d896", "committedDate": "2021-01-08T10:43:20Z", "message": "minor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30d9cdc5e2449de47c2e77c179cc50057ac6e6f4", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/30d9cdc5e2449de47c2e77c179cc50057ac6e6f4", "committedDate": "2021-01-08T11:58:06Z", "message": "rename internal and throw exception if found in query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2812d7cb8ea86db30d3cb6b0506dfd3d478eb2c0", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/2812d7cb8ea86db30d3cb6b0506dfd3d478eb2c0", "committedDate": "2021-01-08T14:30:10Z", "message": "fix contentString"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cd2762c32ef2d93de16a38b61fb624588893ff3", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/5cd2762c32ef2d93de16a38b61fb624588893ff3", "committedDate": "2021-01-08T18:11:41Z", "message": "Improve profiles.md"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0NDc5NTM1", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-564479535", "createdAt": "2021-01-08T18:17:19Z", "commit": {"oid": "5cd2762c32ef2d93de16a38b61fb624588893ff3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxODoxNzoxOVrOIQcU-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxODoxNzoxOVrOIQcU-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDExMjI0OA==", "bodyText": "But what if we set distance_influence to some value on the server side (say 50) and we want to set it to DEFAULT_D_I in a query? And can we rename DEFAULT_D_I to DEFAULT_DISTANCE_INFLUENCE? _D_I looks so cryptic.", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r554112248", "createdAt": "2021-01-08T18:17:19Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/util/CustomModel.java", "diffHunk": "@@ -126,43 +136,38 @@ public String toString() {\n \n     private String createContentString() {\n         // used to check against stored custom models, see #2026\n-        return \"distanceInfluence=\" + distanceInfluence + \"|speedFactor=\" + speedFactorMap + \"|maxSpeed=\" + maxSpeedMap +\n-                \"|maxSpeedFallback=\" + maxSpeedFallback + \"|priorityMap=\" + priorityMap + \"|areas=\" + areas;\n+        return \"distanceInfluence=\" + distanceInfluence + \"|headingPenalty=\" + headingPenalty\n+                + \"|speedStatements=\" + speedStatements + \"|priorityStatements=\" + priorityStatements + \"|areas=\" + areas;\n     }\n \n     /**\n      * A new CustomModel is created from the baseModel merged with the specified queryModel.\n      */\n     public static CustomModel merge(CustomModel baseModel, CustomModel queryModel) {\n-        // avoid changing the specified CustomModel via deep copy otherwise the server-side CustomModel would be modified (same problem if queryModel would be used as target)\n+        if (queryModel.isInternal())\n+            throw new IllegalArgumentException(\"CustomModel in query cannot be internal\");\n+\n+        // avoid changing the specified CustomModel via deep copy otherwise the server-side CustomModel would be\n+        // modified (same problem if queryModel would be used as target)\n         CustomModel mergedCM = new CustomModel(baseModel);\n-        if (queryModel.maxSpeedFallback != null) {\n-            if (mergedCM.maxSpeedFallback != null && mergedCM.maxSpeedFallback > queryModel.maxSpeedFallback)\n-                throw new IllegalArgumentException(\"CustomModel in query can only use max_speed_fallback bigger or equal to \" + mergedCM.maxSpeedFallback);\n-            mergedCM.maxSpeedFallback = queryModel.maxSpeedFallback;\n-        }\n+        // we only overwrite the distance influence if a non-default value was used\n         if (Math.abs(queryModel.distanceInfluence - CustomModel.DEFAULT_D_I) > 0.01) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cd2762c32ef2d93de16a38b61fb624588893ff3"}, "originalPosition": 124}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aff1e124ddfc63a1b9ddedf90176c3df2ee68c9", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/0aff1e124ddfc63a1b9ddedf90176c3df2ee68c9", "committedDate": "2021-01-08T19:06:51Z", "message": "Fix road_surface->surface and else: \"\" -> else: null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6853d08b41aeac14b244e7b9c50da99557dd33a", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/a6853d08b41aeac14b244e7b9c50da99557dd33a", "committedDate": "2021-01-08T19:13:55Z", "message": "Explain how to use else statement in JSON"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0NTIwODE4", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-564520818", "createdAt": "2021-01-08T19:23:22Z", "commit": {"oid": "a6853d08b41aeac14b244e7b9c50da99557dd33a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxOToyMzoyMlrOIQeSvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxOToyMzoyMlrOIQeSvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE0NDQ0NA==", "bodyText": "I got this error when I used the 'Example' of the flex box in GH maps because I was missing the max_weight encoded value. The error read:\nCannot compile expression , priority_user_statements invalid simple condition: max_weight > 3\n\nCan we provide a more meaningful error message, e.g. state that the max_weight encoded value is missing, and maybe which ones are available? Debugging custom models is probably very frustrating without detailed error messages.", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r554144444", "createdAt": "2021-01-08T19:23:22Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/ExpressionVisitor.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.routing.weighting.custom;\n+\n+import com.graphhopper.json.Statement;\n+import com.graphhopper.routing.ev.EncodedValueLookup;\n+import com.graphhopper.routing.ev.RouteNetwork;\n+import com.graphhopper.routing.ev.StringEncodedValue;\n+import com.graphhopper.util.Helper;\n+import org.codehaus.janino.Scanner;\n+import org.codehaus.janino.*;\n+\n+import java.io.StringReader;\n+import java.util.*;\n+\n+import static com.graphhopper.routing.weighting.custom.CustomModelParser.IN_AREA_PREFIX;\n+\n+class ExpressionVisitor implements Visitor.AtomVisitor<Boolean, Exception> {\n+\n+    private final ParseResult result;\n+    private final EncodedValueLookup lookup;\n+    private final TreeMap<Integer, Replacement> replacements = new TreeMap<>();\n+    private final NameValidator nameValidator;\n+    private final Set<String> allowedMethods = new HashSet<>(Arrays.asList(\"ordinal\", \"getDistance\", \"getName\",\n+            \"contains\", \"sqrt\", \"abs\"));\n+\n+    public ExpressionVisitor(ParseResult result, NameValidator nameValidator, EncodedValueLookup lookup) {\n+        this.result = result;\n+        this.nameValidator = nameValidator;\n+        this.lookup = lookup;\n+    }\n+\n+    // allow only methods and other identifiers (constants and encoded values)\n+    boolean isValidIdentifier(String identifier) {\n+        if (nameValidator.isValid(identifier)) {\n+            if (!Character.isUpperCase(identifier.charAt(0)))\n+                result.guessedVariables.add(identifier);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public Boolean visitRvalue(Java.Rvalue rv) throws Exception {\n+        if (rv instanceof Java.AmbiguousName) {\n+            Java.AmbiguousName n = (Java.AmbiguousName) rv;\n+            if (n.identifiers.length == 1) {\n+                String arg = n.identifiers[0];\n+                if (arg.startsWith(IN_AREA_PREFIX)) {\n+                    int start = rv.getLocation().getColumnNumber() - 1;\n+                    replacements.put(start, new Replacement(start, arg.length(),\n+                            CustomWeightingHelper.class.getSimpleName() + \".in(this.\" + arg + \", edge)\"));\n+                    result.guessedVariables.add(arg);\n+                    return true;\n+                } else {\n+                    // e.g. like road_class\n+                    return isValidIdentifier(arg);\n+                }\n+            }\n+            return false;\n+        }\n+        if (rv instanceof Java.Literal)\n+            return true;\n+        if (rv instanceof Java.MethodInvocation) {\n+            Java.MethodInvocation mi = (Java.MethodInvocation) rv;\n+            if (allowedMethods.contains(mi.methodName)) {\n+                // skip methods like this.in() for now\n+                if (mi.target == null)\n+                    return false;\n+                // edge.getDistance, Math.sqrt => check target name (edge or Math)\n+                Java.AmbiguousName n = (Java.AmbiguousName) mi.target.toRvalue();\n+                return n.identifiers.length == 2 && isValidIdentifier(n.identifiers[0]);\n+            }\n+            return false;\n+        }\n+        if (rv instanceof Java.BinaryOperation) {\n+            Java.BinaryOperation binOp = (Java.BinaryOperation) rv;\n+            int startRH = binOp.rhs.getLocation().getColumnNumber() - 1;\n+            if (binOp.lhs instanceof Java.AmbiguousName && ((Java.AmbiguousName) binOp.lhs).identifiers.length == 1) {\n+                String lhVarAsString = ((Java.AmbiguousName) binOp.lhs).identifiers[0];\n+                boolean eqOps = binOp.operator.equals(\"==\") || binOp.operator.equals(\"!=\");\n+                if (binOp.rhs instanceof Java.StringLiteral) {\n+                    // replace String with its index for faster comparison (?) and skipping the Map<String, Integer> lookup at runtime\n+                    if (lookup.hasEncodedValue(lhVarAsString)) {\n+                        if (!eqOps)\n+                            throw new IllegalArgumentException(\"Operator \" + binOp.operator + \" not allowed for String\");\n+                        StringEncodedValue ev = lookup.getStringEncodedValue(lhVarAsString);\n+                        String str = ((Java.StringLiteral) binOp.rhs).value;\n+                        int integ = ev.indexOf(str.substring(1, str.length() - 1));\n+                        if (integ == 0) integ = -1; // 0 means not found and this should always trigger inequality\n+                        replacements.put(startRH, new Replacement(startRH, str.length(), \"\" + integ));\n+                    }\n+                } else if (binOp.rhs instanceof Java.AmbiguousName && ((Java.AmbiguousName) binOp.rhs).identifiers.length == 1) {\n+                    // Make enum explicit as NO or OTHER can occur in other enums so convert \"toll == NO\" to \"toll == Toll.NO\"\n+                    String rhValue = ((Java.AmbiguousName) binOp.rhs).identifiers[0];\n+                    if (nameValidator.isValid(lhVarAsString) && rhValue.toUpperCase(Locale.ROOT).equals(rhValue)) {\n+                        if (!eqOps)\n+                            throw new IllegalArgumentException(\"Operator \" + binOp.operator + \" not allowed for enum\");\n+                        String value = toEncodedValueClassName(binOp.lhs.toString());\n+                        replacements.put(startRH, new Replacement(startRH, rhValue.length(), value + \".\" + rhValue));\n+                    }\n+                }\n+            }\n+            return binOp.lhs.accept(this) && binOp.rhs.accept(this);\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public Boolean visitPackage(Java.Package p) {\n+        return false;\n+    }\n+\n+    @Override\n+    public Boolean visitType(Java.Type t) {\n+        return false;\n+    }\n+\n+    @Override\n+    public Boolean visitConstructorInvocation(Java.ConstructorInvocation ci) {\n+        return false;\n+    }\n+\n+    static void parseExpressions(StringBuilder expressions, NameValidator nameInConditionValidator, String exceptionInfo,\n+                                 Set<String> createObjects, List<Statement> list, EncodedValueLookup lookup, String lastStmt) {\n+\n+        for (Statement statement : list) {\n+            if (statement.getKeyword() == Statement.Keyword.ELSE) {\n+                if (!Helper.isEmpty(statement.getExpression()))\n+                    throw new IllegalArgumentException(\"expression must be empty but was \" + statement.getExpression());\n+\n+                expressions.append(\"else {\" + statement.getOperation().build(statement.getValue()) + \"; }\\n\");\n+            } else if (statement.getKeyword() == Statement.Keyword.ELSEIF || statement.getKeyword() == Statement.Keyword.IF) {\n+                ExpressionVisitor.ParseResult parseResult = parseExpression(statement.getExpression(), nameInConditionValidator, lookup);\n+                if (!parseResult.ok)\n+                    throw new IllegalArgumentException(exceptionInfo + \" invalid simple condition: \" + statement.getExpression());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6853d08b41aeac14b244e7b9c50da99557dd33a"}, "originalPosition": 151}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b81b1cfb6e7b3c5bc1f559f4f673adfe95927d85", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/b81b1cfb6e7b3c5bc1f559f4f673adfe95927d85", "committedDate": "2021-01-08T19:27:45Z", "message": "Fix GH maps example"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0NTI1OTE5", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-564525919", "createdAt": "2021-01-08T19:31:46Z", "commit": {"oid": "b81b1cfb6e7b3c5bc1f559f4f673adfe95927d85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxOTozMTo0NlrOIQeiFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxOTozMTo0NlrOIQeiFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE0ODM3NA==", "bodyText": "With max_weight > 3 I always got 'point not found' error, because this blocks all edges where the max_weight is larger than three tons (almost all edges except a few that allow, e.g. 1.8t max).", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r554148374", "createdAt": "2021-01-08T19:31:46Z", "author": {"login": "easbar"}, "path": "web/src/main/resources/assets/js/main-template.js", "diffHunk": "@@ -81,8 +81,8 @@ $(document).ready(function (e) {\n         mapLayer.adjustMapSize();\n     });\n     $(\"#flex-example\").click(function() {\n-         $(\"#flex-input-text\").val(\"speed:\\n- if: road_class: == MOTORWAY\\n  multiply by: 0.8\\n\"\n-          + \"priority:\\n- if: road_environment == TUNNEL\\n  multiply by: 0.0\\n- if: road_class == RESIDENTIAL\\n  multiply by: 0.7\\n- if: max_weight > 3\\n  multiply by: 0.0\");\n+         $(\"#flex-input-text\").val(\"speed:\\n- if: road_class == MOTORWAY\\n  multiply by: 0.8\\n\"\n+          + \"priority:\\n- if: road_environment == TUNNEL\\n  multiply by: 0.0\\n- if: road_class == RESIDENTIAL\\n  multiply by: 0.7\\n- if: max_weight < 3\\n  multiply by: 0.0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b81b1cfb6e7b3c5bc1f559f4f673adfe95927d85"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY0NTI5NjU3", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-564529657", "createdAt": "2021-01-08T19:37:57Z", "commit": {"oid": "b81b1cfb6e7b3c5bc1f559f4f673adfe95927d85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxOTozNzo1N1rOIQetPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQxOTozNzo1N1rOIQetPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDE1MTIyOQ==", "bodyText": "Hm, the autocomplete feature does not work very well currently. For example we get no hint to type if/else/else if and after we do we do not get a hint to type an encoded value name. This could probably be improved without too much effort (but great help for the user), but we should optimize for one format only? Not sure if that should be yaml or json and if yaml it could be the 'one-line-per-statement' format or the more verbose one...", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r554151229", "createdAt": "2021-01-08T19:37:57Z", "author": {"login": "easbar"}, "path": "web/src/main/resources/assets/js/main-template.js", "diffHunk": "@@ -276,8 +277,8 @@ $(document).ready(function (e) {\n                         endIndex = endIndex < 0 ? cleanedText.length : endIndex;\n                         var wordUnderCursor = cleanedText.substring(startIndex, endIndex);\n                         if(this.selectionStart == 0 || this.value.substr(this.selectionStart - 1, 1) === \"\\n\") {\n-                           document.getElementById(\"ev_value\").innerHTML = \"<b>root:</b> speed_factor, priority, max_speed, max_speed_fallback, distance_influence, areas\";\n-                        } else if(wordUnderCursor === \"priority\" || wordUnderCursor === \"speed_factor\" || wordUnderCursor === \"max_speed\") {\n+                           document.getElementById(\"ev_value\").innerHTML = \"<b>root:</b> priority, speed, distance_influence, areas\";\n+                        } else if(wordUnderCursor === \"priority\" || wordUnderCursor === \"speed\") {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b81b1cfb6e7b3c5bc1f559f4f673adfe95927d85"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1cd19df0e91602a724998967cb87d58263219a9", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/e1cd19df0e91602a724998967cb87d58263219a9", "committedDate": "2021-01-10T19:37:11Z", "message": "Warn instead of error in case the edge distance of very long edges differs from way geometry length\n\n(cherry picked from commit dfee21c05f7919653b53e662e453eec08eea5b4d)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "335226274da5325b772e726daa5fb1898e85181b", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/335226274da5325b772e726daa5fb1898e85181b", "committedDate": "2021-01-11T17:18:54Z", "message": "rename"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6552b24d0b592ceecee8fdd18f87522c1a8a17c", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/d6552b24d0b592ceecee8fdd18f87522c1a8a17c", "committedDate": "2021-01-12T12:29:06Z", "message": "error message e.g. in case of encoded value wasn't added"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c113442c5c837e55cea88cf0d27747c813d903af", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/c113442c5c837e55cea88cf0d27747c813d903af", "committedDate": "2021-01-12T14:25:32Z", "message": "distanceInfluence: use default value only if not initialized"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2292d3d7de71b45bb697ef84b4745aa9d1291f7", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/f2292d3d7de71b45bb697ef84b4745aa9d1291f7", "committedDate": "2021-01-12T15:27:10Z", "message": "Merge branch 'master' into janino_scripting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c2d67058d18cf7b900af6674a2fbed65212fbe9", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/5c2d67058d18cf7b900af6674a2fbed65212fbe9", "committedDate": "2021-01-15T15:33:28Z", "message": "less cryptic error message"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwNjg0MzUz", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-570684353", "createdAt": "2021-01-18T17:34:02Z", "commit": {"oid": "5c2d67058d18cf7b900af6674a2fbed65212fbe9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a0a1dbe1de4074f11329924fd7297bd1ffbb934", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/0a0a1dbe1de4074f11329924fd7297bd1ffbb934", "committedDate": "2021-01-18T18:13:05Z", "message": "Merge branch 'master' into janino_scripting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70f3782968c07f12752989d561c6e42212a7028d", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/70f3782968c07f12752989d561c6e42212a7028d", "committedDate": "2020-10-22T21:04:39Z", "message": "basic test with janino passing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bf6769e40dca1a3b351ceb3bc5d97a27df124fc", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/9bf6769e40dca1a3b351ceb3bc5d97a27df124fc", "committedDate": "2020-10-22T21:05:11Z", "message": "move janino scripting to safe whitelisted approach"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "963bcf6b888ebaae664b92043120dbb137a2c471", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/963bcf6b888ebaae664b92043120dbb137a2c471", "committedDate": "2020-10-22T21:05:11Z", "message": "create a class to add encoded values on the fly but limit user input to expression"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf34c24041766b2e55d0871aa73348207bb58085", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/bf34c24041766b2e55d0871aa73348207bb58085", "committedDate": "2020-10-22T21:05:11Z", "message": "compilation unit via overwriting getValue method safely"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a3779d20d8e129056eb689bc66519ba01b8c4ab", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/3a3779d20d8e129056eb689bc66519ba01b8c4ab", "committedDate": "2020-10-22T21:05:11Z", "message": "minor fix regarding ClassName"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b18556b31ef0fe6aa5c8f4d2c5f7688348aa2c9", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/1b18556b31ef0fe6aa5c8f4d2c5f7688348aa2c9", "committedDate": "2020-10-22T21:05:11Z", "message": "ensure it is not called twice"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09488675f9c5ec63b89c892d96b974512bbf8756", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/09488675f9c5ec63b89c892d96b974512bbf8756", "committedDate": "2020-10-22T21:05:11Z", "message": "separate parsing of condition and number"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69329680e7520f239c3385b36c44c326bba4b268", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/69329680e7520f239c3385b36c44c326bba4b268", "committedDate": "2020-10-25T22:34:10Z", "message": "CustomWeighting: ensure Map is ordered (#2162)\n\n* CustomWeighting: ensure Map is ordered\r\n\r\n* minor\r\n\r\n* cleaner junit5 assertThrows\r\n\r\n* one more assertThrow"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "234d21095515ca4b91742c79194d14cc7bf74d63", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/234d21095515ca4b91742c79194d14cc7bf74d63", "committedDate": "2020-10-25T23:56:34Z", "message": "change expression from factor multiplication to if-then-elseif-else and make speed factor working too"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f739876751a189facb14baf36a2a8d293629d1b", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/2f739876751a189facb14baf36a2a8d293629d1b", "committedDate": "2020-10-27T00:01:55Z", "message": "replace catch all with true and make max_speed working"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "758eed9e8af70f5d0b5e309374cdaae150c21f3a", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/758eed9e8af70f5d0b5e309374cdaae150c21f3a", "committedDate": "2020-10-27T00:06:32Z", "message": "no need to parse value which is always a number"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7228769a61b45fef4314ec0e41c2a37de67ecee3", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/7228769a61b45fef4314ec0e41c2a37de67ecee3", "committedDate": "2020-10-27T00:09:05Z", "message": "use global max speed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3eb59cf6e6c7691c93c5e636781d756a665a250", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/a3eb59cf6e6c7691c93c5e636781d756a665a250", "committedDate": "2020-10-27T00:37:29Z", "message": "minor cleanup and fix regarding sharedEV"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c2f77b33cfd4412519248cd6d718df568e9e5c1", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/6c2f77b33cfd4412519248cd6d718df568e9e5c1", "committedDate": "2020-10-28T15:21:11Z", "message": "found a way to avoid Unparser.unparse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b1ec2e83d64d43ca29a0903cb2792d13eedef69", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/2b1ec2e83d64d43ca29a0903cb2792d13eedef69", "committedDate": "2020-10-29T09:35:46Z", "message": "use scripting in CustomWeighting. This revealed: we need if and if-else-if clauses and maybe a different variable initialization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77f66bc2947ddbbb23c92559918ff76fe44fe2c0", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/77f66bc2947ddbbb23c92559918ff76fe44fe2c0", "committedDate": "2020-10-29T23:18:50Z", "message": "reduce max speed and fix priority bug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52fede21603e3b78d590cee6b8ed92be7a554f9a", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/52fede21603e3b78d590cee6b8ed92be7a554f9a", "committedDate": "2020-10-29T23:27:35Z", "message": "cosmetics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4af26d6e72cf728c4e4ae3b6b69f4bb29b034ec4", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/4af26d6e72cf728c4e4ae3b6b69f4bb29b034ec4", "committedDate": "2020-10-29T23:28:41Z", "message": "merged master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1463e468afb85866600ca6eae3b4bc3b95720d10", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/1463e468afb85866600ca6eae3b4bc3b95720d10", "committedDate": "2020-10-30T00:24:39Z", "message": "minor truck.yml tweaks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "120aa7c4bb718b120f2ac17d88671bfe8d46fb33", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/120aa7c4bb718b120f2ac17d88671bfe8d46fb33", "committedDate": "2020-10-30T10:56:34Z", "message": "adapt benchmarks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "975f21e755fada847bdae3bce49e4651cf2fb3d7", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/975f21e755fada847bdae3bce49e4651cf2fb3d7", "committedDate": "2020-10-30T23:20:45Z", "message": "a bit more details in exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ba0f59105b514654849cd978e50b124fd1776be", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/0ba0f59105b514654849cd978e50b124fd1776be", "committedDate": "2020-10-31T00:12:39Z", "message": "see perf with ugly caching hack"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c9ac651f5210a317b1b7f134f3b3de7d8a63e6b", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/5c9ac651f5210a317b1b7f134f3b3de7d8a63e6b", "committedDate": "2020-10-31T00:14:43Z", "message": "revert and see bench"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56c2624eaf827c4c1f6c98d1aa36bd45e824efd2", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/56c2624eaf827c4c1f6c98d1aa36bd45e824efd2", "committedDate": "2020-11-01T09:57:48Z", "message": "workaround bug with import conflict (two imports for enum 'NO')"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f544113c880e66994646f4e1b4d2d40b418257cb", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/f544113c880e66994646f4e1b4d2d40b418257cb", "committedDate": "2020-11-01T12:49:18Z", "message": "inject class for constants, avoid static imports that can easily collide"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "802152af7923bb3412c78f39c3e76a97d6e41613", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/802152af7923bb3412c78f39c3e76a97d6e41613", "committedDate": "2020-11-01T13:18:31Z", "message": "special case of RouteNetwork for bike"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "247204ef72c9cef49e01862030ab32225522332b", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/247204ef72c9cef49e01862030ab32225522332b", "committedDate": "2020-11-03T11:55:59Z", "message": "introduce thread-safe caching; minor restructuring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d32b56f336ac71e4968c7a8509a422c34e7b7f3f", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/d32b56f336ac71e4968c7a8509a422c34e7b7f3f", "committedDate": "2020-11-03T21:00:34Z", "message": "reduce code duplication in ScriptHelper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d532e3239be57ee93a776c4717fd662dfc49af7e", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/d532e3239be57ee93a776c4717fd662dfc49af7e", "committedDate": "2020-11-06T18:34:59Z", "message": "move code out of ScriptHelper and rename it to ExpressionBuilder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09b1c8c7bd57543a7e093227b19e238574f950c2", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/09b1c8c7bd57543a7e093227b19e238574f950c2", "committedDate": "2020-11-19T15:16:27Z", "message": "merged master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "648a03e4cd5b0f61efba362207e6e50907456f1e", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/648a03e4cd5b0f61efba362207e6e50907456f1e", "committedDate": "2020-11-19T15:36:17Z", "message": "less recursion for more clear protection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55e6fd54595addd8d0a928a55e10c3df306d5fc7", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/55e6fd54595addd8d0a928a55e10c3df306d5fc7", "committedDate": "2020-11-20T14:06:08Z", "message": "further cleanup and improved naming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2e1b75b6c3049fa20393ac5ae8afe7e7681a67c", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/d2e1b75b6c3049fa20393ac5ae8afe7e7681a67c", "committedDate": "2020-11-20T22:42:17Z", "message": "adapt CustomModel.merge to scripting and throw exception if query-CustomModel contains factors >1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0b8087e6fd6927732488d61d9fe9dd05a0b18a0", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/d0b8087e6fd6927732488d61d9fe9dd05a0b18a0", "committedDate": "2020-11-21T19:37:33Z", "message": "improved docs about custom model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8d69b25963f71fc8a6c3a9cb7a0ec2992372ced", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/e8d69b25963f71fc8a6c3a9cb7a0ec2992372ced", "committedDate": "2020-11-21T19:41:09Z", "message": "adapted docs to new format"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ea7f152405ec39fdf5e866413c6a91d73e26451", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/2ea7f152405ec39fdf5e866413c6a91d73e26451", "committedDate": "2020-11-21T19:54:10Z", "message": "removed CustomWeightingOld and all related classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b652798b2000724ec632560f45e393c0db3f755", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/2b652798b2000724ec632560f45e393c0db3f755", "committedDate": "2020-11-22T17:03:00Z", "message": "minor fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e634545dd524c7657e5ec3d7ba29d283cfe48912", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/e634545dd524c7657e5ec3d7ba29d283cfe48912", "committedDate": "2020-11-24T22:57:30Z", "message": "make debugging possible; every dynamic class has a different name now; fix two issues in source code creation (RoadClass->EncodedValue and import JsonFeature)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "83a475879b7a89eeda1f5b44271374279b8a71ef", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/83a475879b7a89eeda1f5b44271374279b8a71ef", "committedDate": "2020-11-24T23:09:07Z", "message": "improve caching: remove oldest accessed entry, instead oldest inserted"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79e15b08973fbc0eab21fc51a042baeef2eeab59", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/79e15b08973fbc0eab21fc51a042baeef2eeab59", "committedDate": "2020-11-25T00:01:15Z", "message": "introduce cache to keep certain classes in cache forever"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85c9743a7e715bfe70dea03bee6376ae5919cd95", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/85c9743a7e715bfe70dea03bee6376ae5919cd95", "committedDate": "2020-11-25T12:45:28Z", "message": "try perf with disabled cache to see CH numbers again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1744afd56c6d5edeffd9a23027d193215fdec831", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/1744afd56c6d5edeffd9a23027d193215fdec831", "committedDate": "2020-11-25T20:16:19Z", "message": "Revert \"try perf with disabled cache to see CH numbers again\"\n\nThis reverts commit 85c9743a7e715bfe70dea03bee6376ae5919cd95."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df9eff67b895c9b11f943808d2c231a12b9d1db4", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/df9eff67b895c9b11f943808d2c231a12b9d1db4", "committedDate": "2020-12-02T06:32:01Z", "message": "merged master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7dbca99a63cd0d8b055730420b75448b76617436", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/7dbca99a63cd0d8b055730420b75448b76617436", "committedDate": "2020-12-03T21:22:27Z", "message": "make it possible to disable dyn cache; clarify about the static cache which is populated via checkProfilesConsistency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2998c879195a9a5b27ac787aa03b6a901573033f", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/2998c879195a9a5b27ac787aa03b6a901573033f", "committedDate": "2020-12-03T21:36:54Z", "message": "allow multiple first_match and make names of encoded values even stricter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a722448b467e99b9b4b3436f54d77e083bce42f", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/5a722448b467e99b9b4b3436f54d77e083bce42f", "committedDate": "2020-12-05T13:45:37Z", "message": "non-shared EncodedValue is too complex due to '.' we should use '$' or '__'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f40e2848aa9069dd0b03c6bf01fa4e97762ac124", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/f40e2848aa9069dd0b03c6bf01fa4e97762ac124", "committedDate": "2020-12-08T19:09:28Z", "message": "merged master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea97c5333041ebc2a7a0524ad69b0cea596b8810", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/ea97c5333041ebc2a7a0524ad69b0cea596b8810", "committedDate": "2020-12-09T12:56:01Z", "message": "merged master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "564f342c14f4c73f6eee3a8d64a070a2a6194fac", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/564f342c14f4c73f6eee3a8d64a070a2a6194fac", "committedDate": "2020-12-09T13:02:45Z", "message": "use non-shared encoded values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/5cb073c89e7badcdb4e8aa42997f9b5a447e89ed", "committedDate": "2020-12-09T21:49:32Z", "message": "test again without cache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5OTE5ODE5", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-549919819", "createdAt": "2020-12-11T09:12:03Z", "commit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOToxMjowM1rOIDvrPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOToxMjowM1rOIDvrPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDc5Nzc1Nw==", "bodyText": "You could add @FunctionalInterface", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r540797757", "createdAt": "2020-12-11T09:12:03Z", "author": {"login": "otbutz"}, "path": "core/src/main/java/com/graphhopper/routing/util/CustomModel.java", "diffHunk": "@@ -175,92 +183,46 @@ public static CustomModel merge(CustomModel baseModel, CustomModel queryModel) {\n         return mergedCM;\n     }\n \n-    private static void applyChange(Map<String, Object> mergedSuperMap,\n-                                    Object mergedObj, Map.Entry<String, Object> querySuperEntry) {\n-        if (mergedObj == null) {\n-            // no need for a merge\n-            mergedSuperMap.put(querySuperEntry.getKey(), querySuperEntry.getValue());\n-            return;\n-        }\n-        if (!(mergedObj instanceof Map))\n-            throw new IllegalArgumentException(querySuperEntry.getKey() + \": entry is not a map: \" + mergedObj);\n-        Object queryObj = querySuperEntry.getValue();\n-        if (!(queryObj instanceof Map))\n-            throw new IllegalArgumentException(querySuperEntry.getKey() + \": query entry is not a map: \" + queryObj);\n+    private interface MergeOp {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5OTUzMTM4", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-549953138", "createdAt": "2020-12-11T09:56:06Z", "commit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOTo1NjowNlrOIDxZwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQwOTo1NjowNlrOIDxZwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDgyNjA1MA==", "bodyText": "If we expect a specific Map implementation here, maybe we should already make that clear in the method definition.", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r540826050", "createdAt": "2020-12-11T09:56:06Z", "author": {"login": "otbutz"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/ExpressionVisitor.java", "diffHunk": "@@ -0,0 +1,198 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.routing.weighting.custom;\n+\n+import com.graphhopper.routing.ev.RouteNetwork;\n+import com.graphhopper.util.Helper;\n+import org.codehaus.janino.Scanner;\n+import org.codehaus.janino.*;\n+\n+import java.io.StringReader;\n+import java.util.*;\n+\n+import static com.graphhopper.routing.weighting.custom.CustomWeighting.FIRST_MATCH;\n+\n+class ExpressionVisitor implements Visitor.AtomVisitor<Boolean, Exception> {\n+\n+    private final ParseResult result;\n+    private final TreeMap<Integer, String> injects = new TreeMap<>();\n+    private final NameValidator nameValidator;\n+    private final Set<String> allowedMethods = new HashSet<>(Arrays.asList(\"ordinal\", \"getDistance\", \"getName\",\n+            \"contains\", \"sqrt\", \"abs\"));\n+\n+    public ExpressionVisitor(ParseResult result, NameValidator nameValidator) {\n+        this.result = result;\n+        this.nameValidator = nameValidator;\n+    }\n+\n+    // allow only methods and other identifiers (constants and encoded values)\n+    boolean isValidIdentifier(String identifier) {\n+        if (nameValidator.isValid(identifier)) {\n+            if (!Character.isUpperCase(identifier.charAt(0)))\n+                result.guessedVariables.add(identifier);\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public Boolean visitRvalue(Java.Rvalue rv) throws Exception {\n+        if (rv instanceof Java.AmbiguousName) {\n+            Java.AmbiguousName n = (Java.AmbiguousName) rv;\n+            if (n.identifiers.length == 1)\n+                // e.g. like road_class\n+                return isValidIdentifier(n.identifiers[0]);\n+            return false;\n+        }\n+        if (rv instanceof Java.Literal)\n+            return true;\n+        if (rv instanceof Java.MethodInvocation) {\n+            Java.MethodInvocation mi = (Java.MethodInvocation) rv;\n+            if (allowedMethods.contains(mi.methodName)) {\n+                // skip methods like this.in() for now\n+                if (mi.target == null)\n+                    return false;\n+                // edge.getDistance, Math.sqrt => check target name (edge or Math)\n+                Java.AmbiguousName n = (Java.AmbiguousName) mi.target.toRvalue();\n+                return n.identifiers.length == 2 && isValidIdentifier(n.identifiers[0]);\n+            }\n+            return false;\n+        }\n+        if (rv instanceof Java.BinaryOperation) {\n+            Java.BinaryOperation binOp = (Java.BinaryOperation) rv;\n+            if (binOp.lhs instanceof Java.AmbiguousName && binOp.rhs instanceof Java.AmbiguousName\n+                    && (binOp.operator.equals(\"==\") || binOp.operator.equals(\"!=\"))) {\n+                Java.AmbiguousName lhs = (Java.AmbiguousName) binOp.lhs;\n+                Java.AmbiguousName rhs = (Java.AmbiguousName) binOp.rhs;\n+                // Make enum explicit as NO or OTHER can occur in other enums so convert \"toll == NO\" to \"toll == Toll.NO\"\n+                if (rhs.identifiers.length == 1 && lhs.identifiers.length == 1 && nameValidator.isValid(lhs.identifiers[0])\n+                        && rhs.identifiers[0].toUpperCase(Locale.ROOT).equals(rhs.identifiers[0])) {\n+                    String value = toEncodedValueClassName(binOp.lhs.toString());\n+                    injects.put(binOp.rhs.getLocation().getColumnNumber() - 1, value + \".\");\n+                }\n+            }\n+            return binOp.lhs.accept(this) && binOp.rhs.accept(this);\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public Boolean visitPackage(Java.Package p) {\n+        return false;\n+    }\n+\n+    @Override\n+    public Boolean visitType(Java.Type t) {\n+        return false;\n+    }\n+\n+    @Override\n+    public Boolean visitConstructorInvocation(Java.ConstructorInvocation ci) {\n+        return false;\n+    }\n+\n+    static void parseExpressions(StringBuilder expressions, NameValidator nameInConditionValidator, String exceptionInfo,\n+                                 Set<String> createObjects, Map<String, Object> map,\n+                                 ExpressionBuilder.CodeBuilder codeBuilder, String lastStmt, String firstMatch) {\n+        if (!(map instanceof LinkedHashMap))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5OTgyMDUx", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-549982051", "createdAt": "2020-12-11T10:35:55Z", "commit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDozNTo1NVrOIDy6Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDozNTo1NVrOIDy6Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg1MDc3NA==", "bodyText": "StringBuilder?", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r540850774", "createdAt": "2020-12-11T10:35:55Z", "author": {"login": "otbutz"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/ExpressionBuilder.java", "diffHunk": "@@ -0,0 +1,382 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.routing.weighting.custom;\n+\n+import com.graphhopper.json.geo.JsonFeature;\n+import com.graphhopper.routing.ev.DecimalEncodedValue;\n+import com.graphhopper.routing.ev.EncodedValue;\n+import com.graphhopper.routing.ev.EncodedValueLookup;\n+import com.graphhopper.routing.util.CustomModel;\n+import com.graphhopper.routing.util.EncodingManager;\n+import com.graphhopper.util.EdgeIteratorState;\n+import com.graphhopper.util.GHUtility;\n+import com.graphhopper.util.shapes.BBox;\n+import com.graphhopper.util.shapes.Polygon;\n+import org.codehaus.commons.compiler.CompileException;\n+import org.codehaus.commons.compiler.Location;\n+import org.codehaus.commons.compiler.io.Readers;\n+import org.codehaus.janino.Scanner;\n+import org.codehaus.janino.*;\n+import org.codehaus.janino.util.DeepCopier;\n+import org.locationtech.jts.geom.prep.PreparedGeometryFactory;\n+\n+import java.io.*;\n+import java.util.*;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+class ExpressionBuilder {\n+    private static final AtomicLong longVal = new AtomicLong(1);\n+    private static final String AREA_PREFIX = \"in_area_\";\n+    private static final Set<String> allowedNames = new HashSet<>(Arrays.asList(\"edge\", \"Math\"));\n+    private static final boolean JANINO_DEBUG = Boolean.getBoolean(Scanner.SYSTEM_PROPERTY_SOURCE_DEBUGGING_ENABLE);\n+\n+    // TODO without a cache we get X% slower routing and Y% slower routingLM8. CH requests and preparation is unaffected\n+    // as cached weighting from preparation is used. This cache ensures that the first Weighting classes, typically the\n+    // ones specified in the profiles, are never removed regardless of how frequent other Weightings are created and accessed.\n+    // We only need to synchronize the get and put methods alone. E.g. we do not care for the race condition where\n+    // two identical classes are requested and one of them is overwritten. We could use CachingJavaSourceClassLoader from\n+    // Janino but 1. we would need to use a single compiler across threads and 2. the statements (for priority and speed)\n+    // are still unnecessarily created.\n+    private static final int CACHE_SIZE = Integer.getInteger(\"graphhopper.custom_weighting.cache_size\", 10);\n+    // TODO perf compare with ConcurrentHashMap, but I guess, if there is a difference at all, it is not big for small maps\n+    private static final Map<String, Class> CACHE = Collections.synchronizedMap(new HashMap<>(CACHE_SIZE));\n+\n+    // Introduce a dynamic cache to remember different Weighting classes, but throw away less frequently used classes.\n+    // Use accessOrder==true to remove oldest accessed entry, not oldest inserted.\n+    private static final int DYN_CACHE_SIZE = Integer.getInteger(\"graphhopper.custom_weighting.dynamic_cache_size\", 1000);\n+    private static final Map<String, Class> DYN_CACHE = Collections.synchronizedMap(\n+            new LinkedHashMap<String, Class>(DYN_CACHE_SIZE, 0.75f, true) {\n+                protected boolean removeEldestEntry(Map.Entry eldest) {\n+                    return size() > DYN_CACHE_SIZE;\n+                }\n+            });\n+\n+    /**\n+     * This method compiles a new subclass of CustomWeightingHelper composed from the provided CustomModel caches this\n+     * and returns an instance.\n+     */\n+    static CustomWeightingHelper create(CustomModel customModel, EncodedValueLookup lookup,\n+                                        double globalMaxSpeed, double maxSpeedFallback, DecimalEncodedValue avgSpeedEnc) {\n+        Java.CompilationUnit cu;\n+        try {\n+            String key = customModel.toString() + \",global:\" + globalMaxSpeed + \",fallback:\" + maxSpeedFallback;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5OTg0ODE2", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-549984816", "createdAt": "2020-12-11T10:39:36Z", "commit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDozOTozNlrOIDzDCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDozOTozNlrOIDzDCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg1MzAwMg==", "bodyText": "Is it possible to detect models used by profiles and use the static cache only for those?", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r540853002", "createdAt": "2020-12-11T10:39:36Z", "author": {"login": "otbutz"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/ExpressionBuilder.java", "diffHunk": "@@ -0,0 +1,382 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.routing.weighting.custom;\n+\n+import com.graphhopper.json.geo.JsonFeature;\n+import com.graphhopper.routing.ev.DecimalEncodedValue;\n+import com.graphhopper.routing.ev.EncodedValue;\n+import com.graphhopper.routing.ev.EncodedValueLookup;\n+import com.graphhopper.routing.util.CustomModel;\n+import com.graphhopper.routing.util.EncodingManager;\n+import com.graphhopper.util.EdgeIteratorState;\n+import com.graphhopper.util.GHUtility;\n+import com.graphhopper.util.shapes.BBox;\n+import com.graphhopper.util.shapes.Polygon;\n+import org.codehaus.commons.compiler.CompileException;\n+import org.codehaus.commons.compiler.Location;\n+import org.codehaus.commons.compiler.io.Readers;\n+import org.codehaus.janino.Scanner;\n+import org.codehaus.janino.*;\n+import org.codehaus.janino.util.DeepCopier;\n+import org.locationtech.jts.geom.prep.PreparedGeometryFactory;\n+\n+import java.io.*;\n+import java.util.*;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+class ExpressionBuilder {\n+    private static final AtomicLong longVal = new AtomicLong(1);\n+    private static final String AREA_PREFIX = \"in_area_\";\n+    private static final Set<String> allowedNames = new HashSet<>(Arrays.asList(\"edge\", \"Math\"));\n+    private static final boolean JANINO_DEBUG = Boolean.getBoolean(Scanner.SYSTEM_PROPERTY_SOURCE_DEBUGGING_ENABLE);\n+\n+    // TODO without a cache we get X% slower routing and Y% slower routingLM8. CH requests and preparation is unaffected\n+    // as cached weighting from preparation is used. This cache ensures that the first Weighting classes, typically the\n+    // ones specified in the profiles, are never removed regardless of how frequent other Weightings are created and accessed.\n+    // We only need to synchronize the get and put methods alone. E.g. we do not care for the race condition where\n+    // two identical classes are requested and one of them is overwritten. We could use CachingJavaSourceClassLoader from\n+    // Janino but 1. we would need to use a single compiler across threads and 2. the statements (for priority and speed)\n+    // are still unnecessarily created.\n+    private static final int CACHE_SIZE = Integer.getInteger(\"graphhopper.custom_weighting.cache_size\", 10);\n+    // TODO perf compare with ConcurrentHashMap, but I guess, if there is a difference at all, it is not big for small maps\n+    private static final Map<String, Class> CACHE = Collections.synchronizedMap(new HashMap<>(CACHE_SIZE));\n+\n+    // Introduce a dynamic cache to remember different Weighting classes, but throw away less frequently used classes.\n+    // Use accessOrder==true to remove oldest accessed entry, not oldest inserted.\n+    private static final int DYN_CACHE_SIZE = Integer.getInteger(\"graphhopper.custom_weighting.dynamic_cache_size\", 1000);\n+    private static final Map<String, Class> DYN_CACHE = Collections.synchronizedMap(\n+            new LinkedHashMap<String, Class>(DYN_CACHE_SIZE, 0.75f, true) {\n+                protected boolean removeEldestEntry(Map.Entry eldest) {\n+                    return size() > DYN_CACHE_SIZE;\n+                }\n+            });\n+\n+    /**\n+     * This method compiles a new subclass of CustomWeightingHelper composed from the provided CustomModel caches this\n+     * and returns an instance.\n+     */\n+    static CustomWeightingHelper create(CustomModel customModel, EncodedValueLookup lookup,\n+                                        double globalMaxSpeed, double maxSpeedFallback, DecimalEncodedValue avgSpeedEnc) {\n+        Java.CompilationUnit cu;\n+        try {\n+            String key = customModel.toString() + \",global:\" + globalMaxSpeed + \",fallback:\" + maxSpeedFallback;\n+            if (key.length() > 400_000) throw new IllegalArgumentException(\"Custom Model too big: \" + key.length());\n+\n+            Class clazz = CACHE.get(key);\n+            if (DYN_CACHE_SIZE > 0 && clazz == null)\n+                clazz = DYN_CACHE.get(key);\n+            if (clazz == null) {\n+                HashSet<String> priorityVariables = new LinkedHashSet<>();\n+                List<Java.BlockStatement> priorityStatements = createGetPriorityStatements(priorityVariables, customModel, lookup);\n+                HashSet<String> speedVariables = new LinkedHashSet<>();\n+                List<Java.BlockStatement> speedStatements = createGetSpeedStatements(speedVariables, customModel, lookup, globalMaxSpeed, maxSpeedFallback);\n+                // Create different class name, which is required only for debugging.\n+                // TODO does it improve performance too? I.e. it could be that the JIT is confused if different classes\n+                //  have the same name and it mixes performance stats. See https://github.com/janino-compiler/janino/issues/137\n+                long counter = longVal.incrementAndGet();\n+                String classTemplate = createClassTemplate(counter, priorityVariables, speedVariables, lookup);\n+                cu = (Java.CompilationUnit) new Parser(new org.codehaus.janino.Scanner(\"source\", new StringReader(classTemplate))).\n+                        parseAbstractCompilationUnit();\n+                cu = injectStatements(priorityStatements, speedStatements, cu);\n+                SimpleCompiler sc = createCompiler(counter, cu);\n+                clazz = sc.getClassLoader().loadClass(\"com.graphhopper.Test\" + counter);\n+                if (CACHE.size() < CACHE_SIZE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5OTg3MjQy", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-549987242", "createdAt": "2020-12-11T10:42:58Z", "commit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDo0Mjo1OFrOIDzK5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDo0Mjo1OFrOIDzK5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg1NTAxMg==", "bodyText": "StringBuilder?", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r540855012", "createdAt": "2020-12-11T10:42:58Z", "author": {"login": "otbutz"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/ExpressionBuilder.java", "diffHunk": "@@ -0,0 +1,382 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.routing.weighting.custom;\n+\n+import com.graphhopper.json.geo.JsonFeature;\n+import com.graphhopper.routing.ev.DecimalEncodedValue;\n+import com.graphhopper.routing.ev.EncodedValue;\n+import com.graphhopper.routing.ev.EncodedValueLookup;\n+import com.graphhopper.routing.util.CustomModel;\n+import com.graphhopper.routing.util.EncodingManager;\n+import com.graphhopper.util.EdgeIteratorState;\n+import com.graphhopper.util.GHUtility;\n+import com.graphhopper.util.shapes.BBox;\n+import com.graphhopper.util.shapes.Polygon;\n+import org.codehaus.commons.compiler.CompileException;\n+import org.codehaus.commons.compiler.Location;\n+import org.codehaus.commons.compiler.io.Readers;\n+import org.codehaus.janino.Scanner;\n+import org.codehaus.janino.*;\n+import org.codehaus.janino.util.DeepCopier;\n+import org.locationtech.jts.geom.prep.PreparedGeometryFactory;\n+\n+import java.io.*;\n+import java.util.*;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+class ExpressionBuilder {\n+    private static final AtomicLong longVal = new AtomicLong(1);\n+    private static final String AREA_PREFIX = \"in_area_\";\n+    private static final Set<String> allowedNames = new HashSet<>(Arrays.asList(\"edge\", \"Math\"));\n+    private static final boolean JANINO_DEBUG = Boolean.getBoolean(Scanner.SYSTEM_PROPERTY_SOURCE_DEBUGGING_ENABLE);\n+\n+    // TODO without a cache we get X% slower routing and Y% slower routingLM8. CH requests and preparation is unaffected\n+    // as cached weighting from preparation is used. This cache ensures that the first Weighting classes, typically the\n+    // ones specified in the profiles, are never removed regardless of how frequent other Weightings are created and accessed.\n+    // We only need to synchronize the get and put methods alone. E.g. we do not care for the race condition where\n+    // two identical classes are requested and one of them is overwritten. We could use CachingJavaSourceClassLoader from\n+    // Janino but 1. we would need to use a single compiler across threads and 2. the statements (for priority and speed)\n+    // are still unnecessarily created.\n+    private static final int CACHE_SIZE = Integer.getInteger(\"graphhopper.custom_weighting.cache_size\", 10);\n+    // TODO perf compare with ConcurrentHashMap, but I guess, if there is a difference at all, it is not big for small maps\n+    private static final Map<String, Class> CACHE = Collections.synchronizedMap(new HashMap<>(CACHE_SIZE));\n+\n+    // Introduce a dynamic cache to remember different Weighting classes, but throw away less frequently used classes.\n+    // Use accessOrder==true to remove oldest accessed entry, not oldest inserted.\n+    private static final int DYN_CACHE_SIZE = Integer.getInteger(\"graphhopper.custom_weighting.dynamic_cache_size\", 1000);\n+    private static final Map<String, Class> DYN_CACHE = Collections.synchronizedMap(\n+            new LinkedHashMap<String, Class>(DYN_CACHE_SIZE, 0.75f, true) {\n+                protected boolean removeEldestEntry(Map.Entry eldest) {\n+                    return size() > DYN_CACHE_SIZE;\n+                }\n+            });\n+\n+    /**\n+     * This method compiles a new subclass of CustomWeightingHelper composed from the provided CustomModel caches this\n+     * and returns an instance.\n+     */\n+    static CustomWeightingHelper create(CustomModel customModel, EncodedValueLookup lookup,\n+                                        double globalMaxSpeed, double maxSpeedFallback, DecimalEncodedValue avgSpeedEnc) {\n+        Java.CompilationUnit cu;\n+        try {\n+            String key = customModel.toString() + \",global:\" + globalMaxSpeed + \",fallback:\" + maxSpeedFallback;\n+            if (key.length() > 400_000) throw new IllegalArgumentException(\"Custom Model too big: \" + key.length());\n+\n+            Class clazz = CACHE.get(key);\n+            if (DYN_CACHE_SIZE > 0 && clazz == null)\n+                clazz = DYN_CACHE.get(key);\n+            if (clazz == null) {\n+                HashSet<String> priorityVariables = new LinkedHashSet<>();\n+                List<Java.BlockStatement> priorityStatements = createGetPriorityStatements(priorityVariables, customModel, lookup);\n+                HashSet<String> speedVariables = new LinkedHashSet<>();\n+                List<Java.BlockStatement> speedStatements = createGetSpeedStatements(speedVariables, customModel, lookup, globalMaxSpeed, maxSpeedFallback);\n+                // Create different class name, which is required only for debugging.\n+                // TODO does it improve performance too? I.e. it could be that the JIT is confused if different classes\n+                //  have the same name and it mixes performance stats. See https://github.com/janino-compiler/janino/issues/137\n+                long counter = longVal.incrementAndGet();\n+                String classTemplate = createClassTemplate(counter, priorityVariables, speedVariables, lookup);\n+                cu = (Java.CompilationUnit) new Parser(new org.codehaus.janino.Scanner(\"source\", new StringReader(classTemplate))).\n+                        parseAbstractCompilationUnit();\n+                cu = injectStatements(priorityStatements, speedStatements, cu);\n+                SimpleCompiler sc = createCompiler(counter, cu);\n+                clazz = sc.getClassLoader().loadClass(\"com.graphhopper.Test\" + counter);\n+                if (CACHE.size() < CACHE_SIZE)\n+                    CACHE.put(key, clazz);\n+                else if (DYN_CACHE_SIZE > 0)\n+                    DYN_CACHE.put(key, clazz);\n+            }\n+\n+            // The class does not need to be thread-safe as we create an instance per request\n+            CustomWeightingHelper prio = (CustomWeightingHelper) clazz.getDeclaredConstructor().newInstance();\n+            prio.init(lookup, avgSpeedEnc, customModel.getAreas());\n+            return prio;\n+        } catch (Exception ex) {\n+            String location = \"\";\n+            if (ex instanceof CompileException)\n+                location = \" in \" + ((CompileException) ex).getLocation().getFileName();\n+            throw new IllegalArgumentException(\"Cannot compile expression \" + location + \", \" + ex.getMessage(), ex);\n+        }\n+    }\n+\n+    /**\n+     * Parse the expressions from CustomModel relevant for the method getSpeed - see createClassTemplate.\n+     *\n+     * @return the created statements (parsed expressions)\n+     */\n+    private static List<Java.BlockStatement> createGetSpeedStatements(Set<String> speedVariables,\n+                                                                      CustomModel customModel, EncodedValueLookup lookup,\n+                                                                      double globalMaxSpeed, double maxSpeedFallback) throws Exception {\n+        List<Java.BlockStatement> speedStatements = new ArrayList<>();\n+        speedStatements.addAll(verifyExpressions(new StringBuilder(), \"speed_factor_user_statements\", speedVariables,\n+                customModel.getSpeedFactor(), lookup,\n+                num -> \"speed *= \" + num + \";\\n\", \"\"));\n+        StringBuilder codeSB = new StringBuilder(\"boolean applied = false;\\n\");\n+        speedStatements.addAll(verifyExpressions(codeSB, \"max_speed_user_statements\",\n+                speedVariables, customModel.getMaxSpeed(), lookup,\n+                num -> \"applied = true; speed = Math.min(speed,\" + num + \");\",\n+                \"if (!applied && speed > \" + maxSpeedFallback + \") return \" + maxSpeedFallback + \";\\n\" +\n+                        \"return Math.min(speed, \" + globalMaxSpeed + \");\\n\"));\n+        String speedMethodStartBlock = \"double speed = super.getRawSpeed(edge, reverse);\\n\";\n+        // a bit inefficient to possibly define variables twice, but for now we have two separate methods\n+        for (String arg : speedVariables) {\n+            speedMethodStartBlock += getVariableDeclaration(lookup, arg);\n+        }\n+        speedStatements.addAll(0, new Parser(new org.codehaus.janino.Scanner(\"getSpeed\", new StringReader(speedMethodStartBlock))).\n+                parseBlockStatements());\n+        return speedStatements;\n+    }\n+\n+    /**\n+     * Parse the expressions from CustomModel relevant for the method getPriority - see createClassTemplate.\n+     *\n+     * @return the created statements (parsed expressions)\n+     */\n+    private static List<Java.BlockStatement> createGetPriorityStatements(Set<String> priorityVariables,\n+                                                                         CustomModel customModel, EncodedValueLookup lookup) throws Exception {\n+        List<Java.BlockStatement> priorityStatements = new ArrayList<>();\n+        priorityStatements.addAll(verifyExpressions(new StringBuilder(\"double value = 1;\\n\"), \"priority_user_statements\",\n+                priorityVariables, customModel.getPriority(), lookup,\n+                num -> \"value *= \" + num + \";\\n\", \"return value;\"));\n+        String priorityMethodStartBlock = \"\";\n+        for (String arg : priorityVariables) {\n+            priorityMethodStartBlock += getVariableDeclaration(lookup, arg);\n+        }\n+        priorityStatements.addAll(0, new Parser(new org.codehaus.janino.Scanner(\"getPriority\", new StringReader(priorityMethodStartBlock))).\n+                parseBlockStatements());\n+        return priorityStatements;\n+    }\n+\n+    static boolean isValidVariableName(String name) {\n+        return name.startsWith(AREA_PREFIX) || allowedNames.contains(name);\n+    }\n+\n+    /**\n+     * For the methods getSpeed and getPriority we declare variables that contain the encoded value of the current edge\n+     * or if an area contains the current edge.\n+     */\n+    private static String getVariableDeclaration(EncodedValueLookup lookup, String arg) {\n+        if (arg.startsWith(AREA_PREFIX)) {\n+            String id = arg.substring(AREA_PREFIX.length());\n+            return \"boolean \" + arg + \" = \" + CustomWeightingHelper.class.getSimpleName() + \".in(this.area_\" + id + \", edge);\\n\";\n+        } else if (lookup.hasEncodedValue(arg)) {\n+            check(arg);\n+            EncodedValue enc = lookup.getEncodedValue(arg, EncodedValue.class);\n+            return getReturnType(enc) + \" \" + arg + \" = reverse ? \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "originalPosition": 179}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5OTk2MTk3", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-549996197", "createdAt": "2020-12-11T10:55:42Z", "commit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDo1NTo0MlrOIDzoow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDo1NTo0MlrOIDzoow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2MjYyNw==", "bodyText": "Could we move this into the EncodedValue interface?\ne.g\npublic interface EncodedValue {\n    Class<?> getReturnType();\npublic interface BooleanEncodedValue extends EncodedValue {\n\n    default Class<?> getReturnType() {\n        return boolean.class;\n    }", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r540862627", "createdAt": "2020-12-11T10:55:42Z", "author": {"login": "otbutz"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/ExpressionBuilder.java", "diffHunk": "@@ -0,0 +1,382 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.routing.weighting.custom;\n+\n+import com.graphhopper.json.geo.JsonFeature;\n+import com.graphhopper.routing.ev.DecimalEncodedValue;\n+import com.graphhopper.routing.ev.EncodedValue;\n+import com.graphhopper.routing.ev.EncodedValueLookup;\n+import com.graphhopper.routing.util.CustomModel;\n+import com.graphhopper.routing.util.EncodingManager;\n+import com.graphhopper.util.EdgeIteratorState;\n+import com.graphhopper.util.GHUtility;\n+import com.graphhopper.util.shapes.BBox;\n+import com.graphhopper.util.shapes.Polygon;\n+import org.codehaus.commons.compiler.CompileException;\n+import org.codehaus.commons.compiler.Location;\n+import org.codehaus.commons.compiler.io.Readers;\n+import org.codehaus.janino.Scanner;\n+import org.codehaus.janino.*;\n+import org.codehaus.janino.util.DeepCopier;\n+import org.locationtech.jts.geom.prep.PreparedGeometryFactory;\n+\n+import java.io.*;\n+import java.util.*;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+class ExpressionBuilder {\n+    private static final AtomicLong longVal = new AtomicLong(1);\n+    private static final String AREA_PREFIX = \"in_area_\";\n+    private static final Set<String> allowedNames = new HashSet<>(Arrays.asList(\"edge\", \"Math\"));\n+    private static final boolean JANINO_DEBUG = Boolean.getBoolean(Scanner.SYSTEM_PROPERTY_SOURCE_DEBUGGING_ENABLE);\n+\n+    // TODO without a cache we get X% slower routing and Y% slower routingLM8. CH requests and preparation is unaffected\n+    // as cached weighting from preparation is used. This cache ensures that the first Weighting classes, typically the\n+    // ones specified in the profiles, are never removed regardless of how frequent other Weightings are created and accessed.\n+    // We only need to synchronize the get and put methods alone. E.g. we do not care for the race condition where\n+    // two identical classes are requested and one of them is overwritten. We could use CachingJavaSourceClassLoader from\n+    // Janino but 1. we would need to use a single compiler across threads and 2. the statements (for priority and speed)\n+    // are still unnecessarily created.\n+    private static final int CACHE_SIZE = Integer.getInteger(\"graphhopper.custom_weighting.cache_size\", 10);\n+    // TODO perf compare with ConcurrentHashMap, but I guess, if there is a difference at all, it is not big for small maps\n+    private static final Map<String, Class> CACHE = Collections.synchronizedMap(new HashMap<>(CACHE_SIZE));\n+\n+    // Introduce a dynamic cache to remember different Weighting classes, but throw away less frequently used classes.\n+    // Use accessOrder==true to remove oldest accessed entry, not oldest inserted.\n+    private static final int DYN_CACHE_SIZE = Integer.getInteger(\"graphhopper.custom_weighting.dynamic_cache_size\", 1000);\n+    private static final Map<String, Class> DYN_CACHE = Collections.synchronizedMap(\n+            new LinkedHashMap<String, Class>(DYN_CACHE_SIZE, 0.75f, true) {\n+                protected boolean removeEldestEntry(Map.Entry eldest) {\n+                    return size() > DYN_CACHE_SIZE;\n+                }\n+            });\n+\n+    /**\n+     * This method compiles a new subclass of CustomWeightingHelper composed from the provided CustomModel caches this\n+     * and returns an instance.\n+     */\n+    static CustomWeightingHelper create(CustomModel customModel, EncodedValueLookup lookup,\n+                                        double globalMaxSpeed, double maxSpeedFallback, DecimalEncodedValue avgSpeedEnc) {\n+        Java.CompilationUnit cu;\n+        try {\n+            String key = customModel.toString() + \",global:\" + globalMaxSpeed + \",fallback:\" + maxSpeedFallback;\n+            if (key.length() > 400_000) throw new IllegalArgumentException(\"Custom Model too big: \" + key.length());\n+\n+            Class clazz = CACHE.get(key);\n+            if (DYN_CACHE_SIZE > 0 && clazz == null)\n+                clazz = DYN_CACHE.get(key);\n+            if (clazz == null) {\n+                HashSet<String> priorityVariables = new LinkedHashSet<>();\n+                List<Java.BlockStatement> priorityStatements = createGetPriorityStatements(priorityVariables, customModel, lookup);\n+                HashSet<String> speedVariables = new LinkedHashSet<>();\n+                List<Java.BlockStatement> speedStatements = createGetSpeedStatements(speedVariables, customModel, lookup, globalMaxSpeed, maxSpeedFallback);\n+                // Create different class name, which is required only for debugging.\n+                // TODO does it improve performance too? I.e. it could be that the JIT is confused if different classes\n+                //  have the same name and it mixes performance stats. See https://github.com/janino-compiler/janino/issues/137\n+                long counter = longVal.incrementAndGet();\n+                String classTemplate = createClassTemplate(counter, priorityVariables, speedVariables, lookup);\n+                cu = (Java.CompilationUnit) new Parser(new org.codehaus.janino.Scanner(\"source\", new StringReader(classTemplate))).\n+                        parseAbstractCompilationUnit();\n+                cu = injectStatements(priorityStatements, speedStatements, cu);\n+                SimpleCompiler sc = createCompiler(counter, cu);\n+                clazz = sc.getClassLoader().loadClass(\"com.graphhopper.Test\" + counter);\n+                if (CACHE.size() < CACHE_SIZE)\n+                    CACHE.put(key, clazz);\n+                else if (DYN_CACHE_SIZE > 0)\n+                    DYN_CACHE.put(key, clazz);\n+            }\n+\n+            // The class does not need to be thread-safe as we create an instance per request\n+            CustomWeightingHelper prio = (CustomWeightingHelper) clazz.getDeclaredConstructor().newInstance();\n+            prio.init(lookup, avgSpeedEnc, customModel.getAreas());\n+            return prio;\n+        } catch (Exception ex) {\n+            String location = \"\";\n+            if (ex instanceof CompileException)\n+                location = \" in \" + ((CompileException) ex).getLocation().getFileName();\n+            throw new IllegalArgumentException(\"Cannot compile expression \" + location + \", \" + ex.getMessage(), ex);\n+        }\n+    }\n+\n+    /**\n+     * Parse the expressions from CustomModel relevant for the method getSpeed - see createClassTemplate.\n+     *\n+     * @return the created statements (parsed expressions)\n+     */\n+    private static List<Java.BlockStatement> createGetSpeedStatements(Set<String> speedVariables,\n+                                                                      CustomModel customModel, EncodedValueLookup lookup,\n+                                                                      double globalMaxSpeed, double maxSpeedFallback) throws Exception {\n+        List<Java.BlockStatement> speedStatements = new ArrayList<>();\n+        speedStatements.addAll(verifyExpressions(new StringBuilder(), \"speed_factor_user_statements\", speedVariables,\n+                customModel.getSpeedFactor(), lookup,\n+                num -> \"speed *= \" + num + \";\\n\", \"\"));\n+        StringBuilder codeSB = new StringBuilder(\"boolean applied = false;\\n\");\n+        speedStatements.addAll(verifyExpressions(codeSB, \"max_speed_user_statements\",\n+                speedVariables, customModel.getMaxSpeed(), lookup,\n+                num -> \"applied = true; speed = Math.min(speed,\" + num + \");\",\n+                \"if (!applied && speed > \" + maxSpeedFallback + \") return \" + maxSpeedFallback + \";\\n\" +\n+                        \"return Math.min(speed, \" + globalMaxSpeed + \");\\n\"));\n+        String speedMethodStartBlock = \"double speed = super.getRawSpeed(edge, reverse);\\n\";\n+        // a bit inefficient to possibly define variables twice, but for now we have two separate methods\n+        for (String arg : speedVariables) {\n+            speedMethodStartBlock += getVariableDeclaration(lookup, arg);\n+        }\n+        speedStatements.addAll(0, new Parser(new org.codehaus.janino.Scanner(\"getSpeed\", new StringReader(speedMethodStartBlock))).\n+                parseBlockStatements());\n+        return speedStatements;\n+    }\n+\n+    /**\n+     * Parse the expressions from CustomModel relevant for the method getPriority - see createClassTemplate.\n+     *\n+     * @return the created statements (parsed expressions)\n+     */\n+    private static List<Java.BlockStatement> createGetPriorityStatements(Set<String> priorityVariables,\n+                                                                         CustomModel customModel, EncodedValueLookup lookup) throws Exception {\n+        List<Java.BlockStatement> priorityStatements = new ArrayList<>();\n+        priorityStatements.addAll(verifyExpressions(new StringBuilder(\"double value = 1;\\n\"), \"priority_user_statements\",\n+                priorityVariables, customModel.getPriority(), lookup,\n+                num -> \"value *= \" + num + \";\\n\", \"return value;\"));\n+        String priorityMethodStartBlock = \"\";\n+        for (String arg : priorityVariables) {\n+            priorityMethodStartBlock += getVariableDeclaration(lookup, arg);\n+        }\n+        priorityStatements.addAll(0, new Parser(new org.codehaus.janino.Scanner(\"getPriority\", new StringReader(priorityMethodStartBlock))).\n+                parseBlockStatements());\n+        return priorityStatements;\n+    }\n+\n+    static boolean isValidVariableName(String name) {\n+        return name.startsWith(AREA_PREFIX) || allowedNames.contains(name);\n+    }\n+\n+    /**\n+     * For the methods getSpeed and getPriority we declare variables that contain the encoded value of the current edge\n+     * or if an area contains the current edge.\n+     */\n+    private static String getVariableDeclaration(EncodedValueLookup lookup, String arg) {\n+        if (arg.startsWith(AREA_PREFIX)) {\n+            String id = arg.substring(AREA_PREFIX.length());\n+            return \"boolean \" + arg + \" = \" + CustomWeightingHelper.class.getSimpleName() + \".in(this.area_\" + id + \", edge);\\n\";\n+        } else if (lookup.hasEncodedValue(arg)) {\n+            check(arg);\n+            EncodedValue enc = lookup.getEncodedValue(arg, EncodedValue.class);\n+            return getReturnType(enc) + \" \" + arg + \" = reverse ? \" +\n+                    \"edge.getReverse((\" + getInterface(enc) + \") this.\" + arg + \"_enc) : \" +\n+                    \"edge.get((\" + getInterface(enc) + \") this.\" + arg + \"_enc);\\n\";\n+        } else if (isValidVariableName(arg)) {\n+            return \"\";\n+        } else {\n+            throw new IllegalArgumentException(\"Not supported \" + arg);\n+        }\n+    }\n+\n+    /**\n+     * @return the interface as string of the provided EncodedValue, e.g. IntEncodedValue (only interface) or BooleanEncodedValue (first interface)\n+     */\n+    private static String getInterface(EncodedValue enc) {\n+        if (enc.getClass().getInterfaces().length == 0) return enc.getClass().getSimpleName();\n+        return enc.getClass().getInterfaces()[0].getSimpleName();\n+    }\n+\n+    private static String getReturnType(EncodedValue encodedValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "originalPosition": 197}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5OTk5MDEx", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-549999011", "createdAt": "2020-12-11T10:59:49Z", "commit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDo1OTo0OVrOIDzyXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMDo1OTo0OVrOIDzyXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2NTExOQ==", "bodyText": "StringBuilder?", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r540865119", "createdAt": "2020-12-11T10:59:49Z", "author": {"login": "otbutz"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/ExpressionBuilder.java", "diffHunk": "@@ -0,0 +1,382 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.routing.weighting.custom;\n+\n+import com.graphhopper.json.geo.JsonFeature;\n+import com.graphhopper.routing.ev.DecimalEncodedValue;\n+import com.graphhopper.routing.ev.EncodedValue;\n+import com.graphhopper.routing.ev.EncodedValueLookup;\n+import com.graphhopper.routing.util.CustomModel;\n+import com.graphhopper.routing.util.EncodingManager;\n+import com.graphhopper.util.EdgeIteratorState;\n+import com.graphhopper.util.GHUtility;\n+import com.graphhopper.util.shapes.BBox;\n+import com.graphhopper.util.shapes.Polygon;\n+import org.codehaus.commons.compiler.CompileException;\n+import org.codehaus.commons.compiler.Location;\n+import org.codehaus.commons.compiler.io.Readers;\n+import org.codehaus.janino.Scanner;\n+import org.codehaus.janino.*;\n+import org.codehaus.janino.util.DeepCopier;\n+import org.locationtech.jts.geom.prep.PreparedGeometryFactory;\n+\n+import java.io.*;\n+import java.util.*;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+class ExpressionBuilder {\n+    private static final AtomicLong longVal = new AtomicLong(1);\n+    private static final String AREA_PREFIX = \"in_area_\";\n+    private static final Set<String> allowedNames = new HashSet<>(Arrays.asList(\"edge\", \"Math\"));\n+    private static final boolean JANINO_DEBUG = Boolean.getBoolean(Scanner.SYSTEM_PROPERTY_SOURCE_DEBUGGING_ENABLE);\n+\n+    // TODO without a cache we get X% slower routing and Y% slower routingLM8. CH requests and preparation is unaffected\n+    // as cached weighting from preparation is used. This cache ensures that the first Weighting classes, typically the\n+    // ones specified in the profiles, are never removed regardless of how frequent other Weightings are created and accessed.\n+    // We only need to synchronize the get and put methods alone. E.g. we do not care for the race condition where\n+    // two identical classes are requested and one of them is overwritten. We could use CachingJavaSourceClassLoader from\n+    // Janino but 1. we would need to use a single compiler across threads and 2. the statements (for priority and speed)\n+    // are still unnecessarily created.\n+    private static final int CACHE_SIZE = Integer.getInteger(\"graphhopper.custom_weighting.cache_size\", 10);\n+    // TODO perf compare with ConcurrentHashMap, but I guess, if there is a difference at all, it is not big for small maps\n+    private static final Map<String, Class> CACHE = Collections.synchronizedMap(new HashMap<>(CACHE_SIZE));\n+\n+    // Introduce a dynamic cache to remember different Weighting classes, but throw away less frequently used classes.\n+    // Use accessOrder==true to remove oldest accessed entry, not oldest inserted.\n+    private static final int DYN_CACHE_SIZE = Integer.getInteger(\"graphhopper.custom_weighting.dynamic_cache_size\", 1000);\n+    private static final Map<String, Class> DYN_CACHE = Collections.synchronizedMap(\n+            new LinkedHashMap<String, Class>(DYN_CACHE_SIZE, 0.75f, true) {\n+                protected boolean removeEldestEntry(Map.Entry eldest) {\n+                    return size() > DYN_CACHE_SIZE;\n+                }\n+            });\n+\n+    /**\n+     * This method compiles a new subclass of CustomWeightingHelper composed from the provided CustomModel caches this\n+     * and returns an instance.\n+     */\n+    static CustomWeightingHelper create(CustomModel customModel, EncodedValueLookup lookup,\n+                                        double globalMaxSpeed, double maxSpeedFallback, DecimalEncodedValue avgSpeedEnc) {\n+        Java.CompilationUnit cu;\n+        try {\n+            String key = customModel.toString() + \",global:\" + globalMaxSpeed + \",fallback:\" + maxSpeedFallback;\n+            if (key.length() > 400_000) throw new IllegalArgumentException(\"Custom Model too big: \" + key.length());\n+\n+            Class clazz = CACHE.get(key);\n+            if (DYN_CACHE_SIZE > 0 && clazz == null)\n+                clazz = DYN_CACHE.get(key);\n+            if (clazz == null) {\n+                HashSet<String> priorityVariables = new LinkedHashSet<>();\n+                List<Java.BlockStatement> priorityStatements = createGetPriorityStatements(priorityVariables, customModel, lookup);\n+                HashSet<String> speedVariables = new LinkedHashSet<>();\n+                List<Java.BlockStatement> speedStatements = createGetSpeedStatements(speedVariables, customModel, lookup, globalMaxSpeed, maxSpeedFallback);\n+                // Create different class name, which is required only for debugging.\n+                // TODO does it improve performance too? I.e. it could be that the JIT is confused if different classes\n+                //  have the same name and it mixes performance stats. See https://github.com/janino-compiler/janino/issues/137\n+                long counter = longVal.incrementAndGet();\n+                String classTemplate = createClassTemplate(counter, priorityVariables, speedVariables, lookup);\n+                cu = (Java.CompilationUnit) new Parser(new org.codehaus.janino.Scanner(\"source\", new StringReader(classTemplate))).\n+                        parseAbstractCompilationUnit();\n+                cu = injectStatements(priorityStatements, speedStatements, cu);\n+                SimpleCompiler sc = createCompiler(counter, cu);\n+                clazz = sc.getClassLoader().loadClass(\"com.graphhopper.Test\" + counter);\n+                if (CACHE.size() < CACHE_SIZE)\n+                    CACHE.put(key, clazz);\n+                else if (DYN_CACHE_SIZE > 0)\n+                    DYN_CACHE.put(key, clazz);\n+            }\n+\n+            // The class does not need to be thread-safe as we create an instance per request\n+            CustomWeightingHelper prio = (CustomWeightingHelper) clazz.getDeclaredConstructor().newInstance();\n+            prio.init(lookup, avgSpeedEnc, customModel.getAreas());\n+            return prio;\n+        } catch (Exception ex) {\n+            String location = \"\";\n+            if (ex instanceof CompileException)\n+                location = \" in \" + ((CompileException) ex).getLocation().getFileName();\n+            throw new IllegalArgumentException(\"Cannot compile expression \" + location + \", \" + ex.getMessage(), ex);\n+        }\n+    }\n+\n+    /**\n+     * Parse the expressions from CustomModel relevant for the method getSpeed - see createClassTemplate.\n+     *\n+     * @return the created statements (parsed expressions)\n+     */\n+    private static List<Java.BlockStatement> createGetSpeedStatements(Set<String> speedVariables,\n+                                                                      CustomModel customModel, EncodedValueLookup lookup,\n+                                                                      double globalMaxSpeed, double maxSpeedFallback) throws Exception {\n+        List<Java.BlockStatement> speedStatements = new ArrayList<>();\n+        speedStatements.addAll(verifyExpressions(new StringBuilder(), \"speed_factor_user_statements\", speedVariables,\n+                customModel.getSpeedFactor(), lookup,\n+                num -> \"speed *= \" + num + \";\\n\", \"\"));\n+        StringBuilder codeSB = new StringBuilder(\"boolean applied = false;\\n\");\n+        speedStatements.addAll(verifyExpressions(codeSB, \"max_speed_user_statements\",\n+                speedVariables, customModel.getMaxSpeed(), lookup,\n+                num -> \"applied = true; speed = Math.min(speed,\" + num + \");\",\n+                \"if (!applied && speed > \" + maxSpeedFallback + \") return \" + maxSpeedFallback + \";\\n\" +\n+                        \"return Math.min(speed, \" + globalMaxSpeed + \");\\n\"));\n+        String speedMethodStartBlock = \"double speed = super.getRawSpeed(edge, reverse);\\n\";\n+        // a bit inefficient to possibly define variables twice, but for now we have two separate methods\n+        for (String arg : speedVariables) {\n+            speedMethodStartBlock += getVariableDeclaration(lookup, arg);\n+        }\n+        speedStatements.addAll(0, new Parser(new org.codehaus.janino.Scanner(\"getSpeed\", new StringReader(speedMethodStartBlock))).\n+                parseBlockStatements());\n+        return speedStatements;\n+    }\n+\n+    /**\n+     * Parse the expressions from CustomModel relevant for the method getPriority - see createClassTemplate.\n+     *\n+     * @return the created statements (parsed expressions)\n+     */\n+    private static List<Java.BlockStatement> createGetPriorityStatements(Set<String> priorityVariables,\n+                                                                         CustomModel customModel, EncodedValueLookup lookup) throws Exception {\n+        List<Java.BlockStatement> priorityStatements = new ArrayList<>();\n+        priorityStatements.addAll(verifyExpressions(new StringBuilder(\"double value = 1;\\n\"), \"priority_user_statements\",\n+                priorityVariables, customModel.getPriority(), lookup,\n+                num -> \"value *= \" + num + \";\\n\", \"return value;\"));\n+        String priorityMethodStartBlock = \"\";\n+        for (String arg : priorityVariables) {\n+            priorityMethodStartBlock += getVariableDeclaration(lookup, arg);\n+        }\n+        priorityStatements.addAll(0, new Parser(new org.codehaus.janino.Scanner(\"getPriority\", new StringReader(priorityMethodStartBlock))).\n+                parseBlockStatements());\n+        return priorityStatements;\n+    }\n+\n+    static boolean isValidVariableName(String name) {\n+        return name.startsWith(AREA_PREFIX) || allowedNames.contains(name);\n+    }\n+\n+    /**\n+     * For the methods getSpeed and getPriority we declare variables that contain the encoded value of the current edge\n+     * or if an area contains the current edge.\n+     */\n+    private static String getVariableDeclaration(EncodedValueLookup lookup, String arg) {\n+        if (arg.startsWith(AREA_PREFIX)) {\n+            String id = arg.substring(AREA_PREFIX.length());\n+            return \"boolean \" + arg + \" = \" + CustomWeightingHelper.class.getSimpleName() + \".in(this.area_\" + id + \", edge);\\n\";\n+        } else if (lookup.hasEncodedValue(arg)) {\n+            check(arg);\n+            EncodedValue enc = lookup.getEncodedValue(arg, EncodedValue.class);\n+            return getReturnType(enc) + \" \" + arg + \" = reverse ? \" +\n+                    \"edge.getReverse((\" + getInterface(enc) + \") this.\" + arg + \"_enc) : \" +\n+                    \"edge.get((\" + getInterface(enc) + \") this.\" + arg + \"_enc);\\n\";\n+        } else if (isValidVariableName(arg)) {\n+            return \"\";\n+        } else {\n+            throw new IllegalArgumentException(\"Not supported \" + arg);\n+        }\n+    }\n+\n+    /**\n+     * @return the interface as string of the provided EncodedValue, e.g. IntEncodedValue (only interface) or BooleanEncodedValue (first interface)\n+     */\n+    private static String getInterface(EncodedValue enc) {\n+        if (enc.getClass().getInterfaces().length == 0) return enc.getClass().getSimpleName();\n+        return enc.getClass().getInterfaces()[0].getSimpleName();\n+    }\n+\n+    private static String getReturnType(EncodedValue encodedValue) {\n+        String name = encodedValue.getClass().getSimpleName();\n+        if (name.contains(\"Enum\")) return \"Enum\";\n+        if (name.contains(\"Decimal\")) return \"double\";\n+        if (name.contains(\"Int\")) return \"int\";\n+        if (name.contains(\"Boolean\")) return \"boolean\";\n+        throw new IllegalArgumentException(\"Unsupported EncodedValue \" + name);\n+    }\n+\n+    static void check(String encValue) {\n+        if(encValue.contains(\".\")) throw new IllegalArgumentException(\"encoded value with invalid name: \" + encValue);\n+    }\n+\n+    /**\n+     * Create the class source file from the detected variables (priorityVariables and speedVariables). We assume that\n+     * these variables are safe although they are user input because we collected them from parsing via Janino. This\n+     * means that the source file is free from user input and could be directly compiled. Before we do this we still\n+     * have to inject that parsed and safe user expressions in a later step.\n+     */\n+    private static String createClassTemplate(long counter, Set<String> priorityVariables, Set<String> speedVariables, EncodedValueLookup lookup) {\n+        final StringBuilder importSourceCode = new StringBuilder(\"import com.graphhopper.routing.ev.*;\\n\");\n+        importSourceCode.append(\"import java.util.Map;\\n\");\n+        final StringBuilder classSourceCode = new StringBuilder(100);\n+        boolean includedAreaImports = false;\n+\n+        final StringBuilder initSourceCode = new StringBuilder(\"this.avg_speed_enc = avgSpeedEnc;\\n\");\n+        Set<String> set = new HashSet<>(priorityVariables);\n+        set.addAll(speedVariables);\n+        for (String arg : set) {\n+            if (lookup.hasEncodedValue(arg)) {\n+                check(arg);\n+                EncodedValue enc = lookup.getEncodedValue(arg, EncodedValue.class);\n+                classSourceCode.append(\"protected \" + enc.getClass().getSimpleName() + \" \" + arg + \"_enc;\\n\");\n+                initSourceCode.append(\"if (lookup.hasEncodedValue(\\\"\" + arg + \"\\\")) \");\n+                initSourceCode.append(\"this.\" + arg + \"_enc = (\" + enc.getClass().getSimpleName()\n+                        + \") lookup.getEncodedValue(\\\"\" + arg + \"\\\", EncodedValue.class);\\n\");\n+            } else if (arg.startsWith(AREA_PREFIX)) {\n+                if (!includedAreaImports) {\n+                    importSourceCode.append(\"import \" + BBox.class.getName() + \";\\n\");\n+                    importSourceCode.append(\"import \" + GHUtility.class.getName() + \";\\n\");\n+                    importSourceCode.append(\"import \" + PreparedGeometryFactory.class.getName() + \";\\n\");\n+                    importSourceCode.append(\"import \" + JsonFeature.class.getName() + \";\\n\");\n+                    importSourceCode.append(\"import \" + Polygon.class.getName() + \";\\n\");\n+                    includedAreaImports = true;\n+                }\n+\n+                String id = arg.substring(AREA_PREFIX.length());\n+                String varName = \"area_\" + id;\n+                classSourceCode.append(\"protected \" + Polygon.class.getSimpleName() + \" \" + varName + \";\\n\");\n+                initSourceCode.append(\"JsonFeature feature = (JsonFeature) areas.get(\\\"\" + id + \"\\\");\\n\");\n+                initSourceCode.append(\"if(feature == null) throw new IllegalArgumentException(\\\"Area '\" + id + \"' wasn't found\\\");\\n\");\n+                initSourceCode.append(\"this.\" + varName + \" = new Polygon(new PreparedGeometryFactory().create(feature.getGeometry()));\\n\");\n+            } else {\n+                if (!isValidVariableName(arg))\n+                    throw new IllegalArgumentException(\"Variable not supported: \" + arg);\n+            }\n+        }\n+\n+        return \"\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "originalPosition": 255}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMDAxNzA3", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-550001707", "createdAt": "2020-12-11T11:03:40Z", "commit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTowMzo0MFrOIDz7Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMTowMzo0MFrOIDz7Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDg2NzMzNA==", "bodyText": "I wouldn't expect the injectStatements method to clear the collection here.", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r540867334", "createdAt": "2020-12-11T11:03:40Z", "author": {"login": "otbutz"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/ExpressionBuilder.java", "diffHunk": "@@ -0,0 +1,382 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.routing.weighting.custom;\n+\n+import com.graphhopper.json.geo.JsonFeature;\n+import com.graphhopper.routing.ev.DecimalEncodedValue;\n+import com.graphhopper.routing.ev.EncodedValue;\n+import com.graphhopper.routing.ev.EncodedValueLookup;\n+import com.graphhopper.routing.util.CustomModel;\n+import com.graphhopper.routing.util.EncodingManager;\n+import com.graphhopper.util.EdgeIteratorState;\n+import com.graphhopper.util.GHUtility;\n+import com.graphhopper.util.shapes.BBox;\n+import com.graphhopper.util.shapes.Polygon;\n+import org.codehaus.commons.compiler.CompileException;\n+import org.codehaus.commons.compiler.Location;\n+import org.codehaus.commons.compiler.io.Readers;\n+import org.codehaus.janino.Scanner;\n+import org.codehaus.janino.*;\n+import org.codehaus.janino.util.DeepCopier;\n+import org.locationtech.jts.geom.prep.PreparedGeometryFactory;\n+\n+import java.io.*;\n+import java.util.*;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+class ExpressionBuilder {\n+    private static final AtomicLong longVal = new AtomicLong(1);\n+    private static final String AREA_PREFIX = \"in_area_\";\n+    private static final Set<String> allowedNames = new HashSet<>(Arrays.asList(\"edge\", \"Math\"));\n+    private static final boolean JANINO_DEBUG = Boolean.getBoolean(Scanner.SYSTEM_PROPERTY_SOURCE_DEBUGGING_ENABLE);\n+\n+    // TODO without a cache we get X% slower routing and Y% slower routingLM8. CH requests and preparation is unaffected\n+    // as cached weighting from preparation is used. This cache ensures that the first Weighting classes, typically the\n+    // ones specified in the profiles, are never removed regardless of how frequent other Weightings are created and accessed.\n+    // We only need to synchronize the get and put methods alone. E.g. we do not care for the race condition where\n+    // two identical classes are requested and one of them is overwritten. We could use CachingJavaSourceClassLoader from\n+    // Janino but 1. we would need to use a single compiler across threads and 2. the statements (for priority and speed)\n+    // are still unnecessarily created.\n+    private static final int CACHE_SIZE = Integer.getInteger(\"graphhopper.custom_weighting.cache_size\", 10);\n+    // TODO perf compare with ConcurrentHashMap, but I guess, if there is a difference at all, it is not big for small maps\n+    private static final Map<String, Class> CACHE = Collections.synchronizedMap(new HashMap<>(CACHE_SIZE));\n+\n+    // Introduce a dynamic cache to remember different Weighting classes, but throw away less frequently used classes.\n+    // Use accessOrder==true to remove oldest accessed entry, not oldest inserted.\n+    private static final int DYN_CACHE_SIZE = Integer.getInteger(\"graphhopper.custom_weighting.dynamic_cache_size\", 1000);\n+    private static final Map<String, Class> DYN_CACHE = Collections.synchronizedMap(\n+            new LinkedHashMap<String, Class>(DYN_CACHE_SIZE, 0.75f, true) {\n+                protected boolean removeEldestEntry(Map.Entry eldest) {\n+                    return size() > DYN_CACHE_SIZE;\n+                }\n+            });\n+\n+    /**\n+     * This method compiles a new subclass of CustomWeightingHelper composed from the provided CustomModel caches this\n+     * and returns an instance.\n+     */\n+    static CustomWeightingHelper create(CustomModel customModel, EncodedValueLookup lookup,\n+                                        double globalMaxSpeed, double maxSpeedFallback, DecimalEncodedValue avgSpeedEnc) {\n+        Java.CompilationUnit cu;\n+        try {\n+            String key = customModel.toString() + \",global:\" + globalMaxSpeed + \",fallback:\" + maxSpeedFallback;\n+            if (key.length() > 400_000) throw new IllegalArgumentException(\"Custom Model too big: \" + key.length());\n+\n+            Class clazz = CACHE.get(key);\n+            if (DYN_CACHE_SIZE > 0 && clazz == null)\n+                clazz = DYN_CACHE.get(key);\n+            if (clazz == null) {\n+                HashSet<String> priorityVariables = new LinkedHashSet<>();\n+                List<Java.BlockStatement> priorityStatements = createGetPriorityStatements(priorityVariables, customModel, lookup);\n+                HashSet<String> speedVariables = new LinkedHashSet<>();\n+                List<Java.BlockStatement> speedStatements = createGetSpeedStatements(speedVariables, customModel, lookup, globalMaxSpeed, maxSpeedFallback);\n+                // Create different class name, which is required only for debugging.\n+                // TODO does it improve performance too? I.e. it could be that the JIT is confused if different classes\n+                //  have the same name and it mixes performance stats. See https://github.com/janino-compiler/janino/issues/137\n+                long counter = longVal.incrementAndGet();\n+                String classTemplate = createClassTemplate(counter, priorityVariables, speedVariables, lookup);\n+                cu = (Java.CompilationUnit) new Parser(new org.codehaus.janino.Scanner(\"source\", new StringReader(classTemplate))).\n+                        parseAbstractCompilationUnit();\n+                cu = injectStatements(priorityStatements, speedStatements, cu);\n+                SimpleCompiler sc = createCompiler(counter, cu);\n+                clazz = sc.getClassLoader().loadClass(\"com.graphhopper.Test\" + counter);\n+                if (CACHE.size() < CACHE_SIZE)\n+                    CACHE.put(key, clazz);\n+                else if (DYN_CACHE_SIZE > 0)\n+                    DYN_CACHE.put(key, clazz);\n+            }\n+\n+            // The class does not need to be thread-safe as we create an instance per request\n+            CustomWeightingHelper prio = (CustomWeightingHelper) clazz.getDeclaredConstructor().newInstance();\n+            prio.init(lookup, avgSpeedEnc, customModel.getAreas());\n+            return prio;\n+        } catch (Exception ex) {\n+            String location = \"\";\n+            if (ex instanceof CompileException)\n+                location = \" in \" + ((CompileException) ex).getLocation().getFileName();\n+            throw new IllegalArgumentException(\"Cannot compile expression \" + location + \", \" + ex.getMessage(), ex);\n+        }\n+    }\n+\n+    /**\n+     * Parse the expressions from CustomModel relevant for the method getSpeed - see createClassTemplate.\n+     *\n+     * @return the created statements (parsed expressions)\n+     */\n+    private static List<Java.BlockStatement> createGetSpeedStatements(Set<String> speedVariables,\n+                                                                      CustomModel customModel, EncodedValueLookup lookup,\n+                                                                      double globalMaxSpeed, double maxSpeedFallback) throws Exception {\n+        List<Java.BlockStatement> speedStatements = new ArrayList<>();\n+        speedStatements.addAll(verifyExpressions(new StringBuilder(), \"speed_factor_user_statements\", speedVariables,\n+                customModel.getSpeedFactor(), lookup,\n+                num -> \"speed *= \" + num + \";\\n\", \"\"));\n+        StringBuilder codeSB = new StringBuilder(\"boolean applied = false;\\n\");\n+        speedStatements.addAll(verifyExpressions(codeSB, \"max_speed_user_statements\",\n+                speedVariables, customModel.getMaxSpeed(), lookup,\n+                num -> \"applied = true; speed = Math.min(speed,\" + num + \");\",\n+                \"if (!applied && speed > \" + maxSpeedFallback + \") return \" + maxSpeedFallback + \";\\n\" +\n+                        \"return Math.min(speed, \" + globalMaxSpeed + \");\\n\"));\n+        String speedMethodStartBlock = \"double speed = super.getRawSpeed(edge, reverse);\\n\";\n+        // a bit inefficient to possibly define variables twice, but for now we have two separate methods\n+        for (String arg : speedVariables) {\n+            speedMethodStartBlock += getVariableDeclaration(lookup, arg);\n+        }\n+        speedStatements.addAll(0, new Parser(new org.codehaus.janino.Scanner(\"getSpeed\", new StringReader(speedMethodStartBlock))).\n+                parseBlockStatements());\n+        return speedStatements;\n+    }\n+\n+    /**\n+     * Parse the expressions from CustomModel relevant for the method getPriority - see createClassTemplate.\n+     *\n+     * @return the created statements (parsed expressions)\n+     */\n+    private static List<Java.BlockStatement> createGetPriorityStatements(Set<String> priorityVariables,\n+                                                                         CustomModel customModel, EncodedValueLookup lookup) throws Exception {\n+        List<Java.BlockStatement> priorityStatements = new ArrayList<>();\n+        priorityStatements.addAll(verifyExpressions(new StringBuilder(\"double value = 1;\\n\"), \"priority_user_statements\",\n+                priorityVariables, customModel.getPriority(), lookup,\n+                num -> \"value *= \" + num + \";\\n\", \"return value;\"));\n+        String priorityMethodStartBlock = \"\";\n+        for (String arg : priorityVariables) {\n+            priorityMethodStartBlock += getVariableDeclaration(lookup, arg);\n+        }\n+        priorityStatements.addAll(0, new Parser(new org.codehaus.janino.Scanner(\"getPriority\", new StringReader(priorityMethodStartBlock))).\n+                parseBlockStatements());\n+        return priorityStatements;\n+    }\n+\n+    static boolean isValidVariableName(String name) {\n+        return name.startsWith(AREA_PREFIX) || allowedNames.contains(name);\n+    }\n+\n+    /**\n+     * For the methods getSpeed and getPriority we declare variables that contain the encoded value of the current edge\n+     * or if an area contains the current edge.\n+     */\n+    private static String getVariableDeclaration(EncodedValueLookup lookup, String arg) {\n+        if (arg.startsWith(AREA_PREFIX)) {\n+            String id = arg.substring(AREA_PREFIX.length());\n+            return \"boolean \" + arg + \" = \" + CustomWeightingHelper.class.getSimpleName() + \".in(this.area_\" + id + \", edge);\\n\";\n+        } else if (lookup.hasEncodedValue(arg)) {\n+            check(arg);\n+            EncodedValue enc = lookup.getEncodedValue(arg, EncodedValue.class);\n+            return getReturnType(enc) + \" \" + arg + \" = reverse ? \" +\n+                    \"edge.getReverse((\" + getInterface(enc) + \") this.\" + arg + \"_enc) : \" +\n+                    \"edge.get((\" + getInterface(enc) + \") this.\" + arg + \"_enc);\\n\";\n+        } else if (isValidVariableName(arg)) {\n+            return \"\";\n+        } else {\n+            throw new IllegalArgumentException(\"Not supported \" + arg);\n+        }\n+    }\n+\n+    /**\n+     * @return the interface as string of the provided EncodedValue, e.g. IntEncodedValue (only interface) or BooleanEncodedValue (first interface)\n+     */\n+    private static String getInterface(EncodedValue enc) {\n+        if (enc.getClass().getInterfaces().length == 0) return enc.getClass().getSimpleName();\n+        return enc.getClass().getInterfaces()[0].getSimpleName();\n+    }\n+\n+    private static String getReturnType(EncodedValue encodedValue) {\n+        String name = encodedValue.getClass().getSimpleName();\n+        if (name.contains(\"Enum\")) return \"Enum\";\n+        if (name.contains(\"Decimal\")) return \"double\";\n+        if (name.contains(\"Int\")) return \"int\";\n+        if (name.contains(\"Boolean\")) return \"boolean\";\n+        throw new IllegalArgumentException(\"Unsupported EncodedValue \" + name);\n+    }\n+\n+    static void check(String encValue) {\n+        if(encValue.contains(\".\")) throw new IllegalArgumentException(\"encoded value with invalid name: \" + encValue);\n+    }\n+\n+    /**\n+     * Create the class source file from the detected variables (priorityVariables and speedVariables). We assume that\n+     * these variables are safe although they are user input because we collected them from parsing via Janino. This\n+     * means that the source file is free from user input and could be directly compiled. Before we do this we still\n+     * have to inject that parsed and safe user expressions in a later step.\n+     */\n+    private static String createClassTemplate(long counter, Set<String> priorityVariables, Set<String> speedVariables, EncodedValueLookup lookup) {\n+        final StringBuilder importSourceCode = new StringBuilder(\"import com.graphhopper.routing.ev.*;\\n\");\n+        importSourceCode.append(\"import java.util.Map;\\n\");\n+        final StringBuilder classSourceCode = new StringBuilder(100);\n+        boolean includedAreaImports = false;\n+\n+        final StringBuilder initSourceCode = new StringBuilder(\"this.avg_speed_enc = avgSpeedEnc;\\n\");\n+        Set<String> set = new HashSet<>(priorityVariables);\n+        set.addAll(speedVariables);\n+        for (String arg : set) {\n+            if (lookup.hasEncodedValue(arg)) {\n+                check(arg);\n+                EncodedValue enc = lookup.getEncodedValue(arg, EncodedValue.class);\n+                classSourceCode.append(\"protected \" + enc.getClass().getSimpleName() + \" \" + arg + \"_enc;\\n\");\n+                initSourceCode.append(\"if (lookup.hasEncodedValue(\\\"\" + arg + \"\\\")) \");\n+                initSourceCode.append(\"this.\" + arg + \"_enc = (\" + enc.getClass().getSimpleName()\n+                        + \") lookup.getEncodedValue(\\\"\" + arg + \"\\\", EncodedValue.class);\\n\");\n+            } else if (arg.startsWith(AREA_PREFIX)) {\n+                if (!includedAreaImports) {\n+                    importSourceCode.append(\"import \" + BBox.class.getName() + \";\\n\");\n+                    importSourceCode.append(\"import \" + GHUtility.class.getName() + \";\\n\");\n+                    importSourceCode.append(\"import \" + PreparedGeometryFactory.class.getName() + \";\\n\");\n+                    importSourceCode.append(\"import \" + JsonFeature.class.getName() + \";\\n\");\n+                    importSourceCode.append(\"import \" + Polygon.class.getName() + \";\\n\");\n+                    includedAreaImports = true;\n+                }\n+\n+                String id = arg.substring(AREA_PREFIX.length());\n+                String varName = \"area_\" + id;\n+                classSourceCode.append(\"protected \" + Polygon.class.getSimpleName() + \" \" + varName + \";\\n\");\n+                initSourceCode.append(\"JsonFeature feature = (JsonFeature) areas.get(\\\"\" + id + \"\\\");\\n\");\n+                initSourceCode.append(\"if(feature == null) throw new IllegalArgumentException(\\\"Area '\" + id + \"' wasn't found\\\");\\n\");\n+                initSourceCode.append(\"this.\" + varName + \" = new Polygon(new PreparedGeometryFactory().create(feature.getGeometry()));\\n\");\n+            } else {\n+                if (!isValidVariableName(arg))\n+                    throw new IllegalArgumentException(\"Variable not supported: \" + arg);\n+            }\n+        }\n+\n+        return \"\"\n+                + \"package com.graphhopper;\"\n+                + \"import \" + CustomWeightingHelper.class.getName() + \";\\n\"\n+                + \"import \" + EncodedValueLookup.class.getName() + \";\\n\"\n+                + \"import \" + EdgeIteratorState.class.getName() + \";\\n\"\n+                + importSourceCode\n+                + \"\\npublic class Test\" + counter + \" extends \" + CustomWeightingHelper.class.getSimpleName() + \" {\\n\"\n+                + classSourceCode\n+                + \"   @Override\\n\"\n+                + \"   public void init(EncodedValueLookup lookup, \"\n+                + DecimalEncodedValue.class.getName() + \" avgSpeedEnc, Map<String, com.graphhopper.json.geo.JsonFeature> areas) {\\n\"\n+                + initSourceCode\n+                + \"   }\\n\\n\"\n+                // we need these placeholder methods so that the hooks in DeepCopier are invoked\n+                + \"   @Override\\n\"\n+                + \"   public double getPriority(EdgeIteratorState edge, boolean reverse) {\\n\"\n+                + \"      return 1; //will be overwritten by code injected in DeepCopier\\n\"\n+                + \"   }\\n\"\n+                + \"   @Override\\n\"\n+                + \"   public double getSpeed(EdgeIteratorState edge, boolean reverse) {\\n\"\n+                + \"      return getRawSpeed(edge, reverse); //will be overwritten by code injected in DeepCopier\\n\"\n+                + \"   }\\n\"\n+                + \"}\";\n+    }\n+\n+    /**\n+     * This method does:\n+     * 1. check user expressions via Parser.parseConditionalExpression and only allow whitelisted variables and methods.\n+     * 2. while this check it also guesses the variable names and stores it in createObjects\n+     * 3. creates if-then-elseif expressions from the checks and returns them as BlockStatements\n+     *\n+     * @return the created if-then (and elseif) expressions\n+     */\n+    private static List<Java.BlockStatement> verifyExpressions(StringBuilder expressions, String info, Set<String> createObjects,\n+                                                               Map<String, Object> map, EncodedValueLookup lookup,\n+                                                               CodeBuilder codeBuilder, String lastStmt) throws Exception {\n+        // allow variables, all encoded values, constants\n+        ExpressionVisitor.NameValidator nameInConditionValidator = name -> lookup.hasEncodedValue(name)\n+                || name.toUpperCase(Locale.ROOT).equals(name) || isValidVariableName(name);\n+        ExpressionVisitor.parseExpressions(expressions, nameInConditionValidator, info, createObjects, map, codeBuilder, lastStmt, \"\");\n+        return new Parser(new org.codehaus.janino.Scanner(info, new StringReader(expressions.toString()))).\n+                parseBlockStatements();\n+    }\n+\n+    interface CodeBuilder {\n+        String create(Number n);\n+    }\n+\n+    /**\n+     * Injects the already parsed expressions (converted to BlockStatement) via janinos DeepCopier to the provided\n+     * CompilationUnit cu (a class file).\n+     */\n+    private static Java.CompilationUnit injectStatements(List<Java.BlockStatement> priorityStatements,\n+                                                         List<Java.BlockStatement> speedStatements,\n+                                                         Java.CompilationUnit cu) throws CompileException {\n+        cu = new DeepCopier() {\n+            @Override\n+            public Java.FieldDeclaration copyFieldDeclaration(Java.FieldDeclaration subject) throws CompileException {\n+                // for https://github.com/janino-compiler/janino/issues/135\n+                Java.FieldDeclaration fd = super.copyFieldDeclaration(subject);\n+                fd.setEnclosingScope(subject.getEnclosingScope());\n+                return fd;\n+            }\n+\n+            @Override\n+            public Java.MethodDeclarator copyMethodDeclarator(Java.MethodDeclarator subject) throws CompileException {\n+                if (subject.name.equals(\"getSpeed\") && !speedStatements.isEmpty()) {\n+                    return injectStatements(subject, this, speedStatements);\n+                } else if (subject.name.equals(\"getPriority\")) {\n+                    return injectStatements(subject, this, priorityStatements);\n+                } else {\n+                    return super.copyMethodDeclarator(subject);\n+                }\n+            }\n+        }.copyCompilationUnit(cu);\n+        return cu;\n+    }\n+\n+    private static Java.MethodDeclarator injectStatements(Java.MethodDeclarator subject, DeepCopier deepCopier,\n+                                                          List<Java.BlockStatement> statements) {\n+        try {\n+            if (statements.isEmpty())\n+                throw new IllegalArgumentException(\"Statements cannot be empty when copying method\");\n+            Java.MethodDeclarator methodDecl = new Java.MethodDeclarator(\n+                    new Location(\"m1\", 1, 1),\n+                    subject.getDocComment(),\n+                    deepCopier.copyModifiers(subject.getModifiers()),\n+                    deepCopier.copyOptionalTypeParameters(subject.typeParameters),\n+                    deepCopier.copyType(subject.type),\n+                    subject.name,\n+                    deepCopier.copyFormalParameters(subject.formalParameters),\n+                    deepCopier.copyTypes(subject.thrownExceptions),\n+                    deepCopier.copyOptionalElementValue(subject.defaultValue),\n+                    deepCopier.copyOptionalStatements(statements)\n+            );\n+            statements.forEach(st -> st.setEnclosingScope(methodDecl));\n+            statements.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "originalPosition": 351}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwNDE3MTg5", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-550417189", "createdAt": "2020-12-11T18:20:29Z", "commit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "state": "COMMENTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxODoyMDoyOVrOIEEhbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTo1Mjo1OVrOIEJbcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTEzOTMwOQ==", "bodyText": "I think this is wrong. Look at this (failing) test in CustomWeightingTest:\n    @Test\n    public void testMaxSpeedFallBack() {\n        assertEquals(140, carFE.getMaxSpeed(), 0.1);\n        String message = assertThrows(IllegalArgumentException.class, () -> createWeighting(new CustomModel().setMaxSpeedFallback(150.)))\n                .getMessage();\n        assertTrue(message.contains(\"max_speed_fallback cannot be bigger than max_speed 140\"));\n        assertEquals(50+30, createWeighting(new CustomModel().setMaxSpeedFallback(72.).setDistanceInfluence(30)).getMinWeight(1000));\n    }\nIt should be something like this instead:\n   if (customModel.getMaxSpeedFallback() != null && customModel.getMaxSpeedFallback() > baseFlagEncoder.getMaxSpeed())\n            throw new IllegalArgumentException(\"max_speed_fallback cannot be bigger than max_speed \" + baseFlagEncoder.getMaxSpeed());\n        double maxSpeedTmp = customModel.getMaxSpeedFallback() == null ? baseFlagEncoder.getMaxSpeed() : customModel.getMaxSpeedFallback();", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r541139309", "createdAt": "2020-12-11T18:20:29Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/CustomWeighting.java", "diffHunk": "@@ -86,26 +86,40 @@\n     private final double maxSpeed;\n     private final double distanceInfluence;\n     private final double headingPenaltySeconds;\n-    private final SpeedCalculator speedCalculator;\n-    private final PriorityCalculator priorityCalculator;\n+    private final CustomWeightingHelper cwHelper;\n \n-    public CustomWeighting(FlagEncoder baseFlagEncoder, EncodedValueLookup lookup,\n-                           TurnCostProvider turnCostProvider, CustomModel customModel) {\n+    public CustomWeighting(FlagEncoder baseFlagEncoder, EncodedValueLookup lookup, TurnCostProvider turnCostProvider,\n+                           CustomModel customModel) {\n         super(baseFlagEncoder, turnCostProvider);\n         if (customModel == null)\n             throw new IllegalStateException(\"CustomModel cannot be null\");\n \n         headingPenaltySeconds = customModel.getHeadingPenalty();\n         baseVehicleAccessEnc = baseFlagEncoder.getAccessEnc();\n-        speedCalculator = new SpeedCalculator(baseFlagEncoder.getMaxSpeed(), customModel, baseFlagEncoder.getAverageSpeedEnc(), lookup);\n-        maxSpeed = speedCalculator.getMaxSpeed() / SPEED_CONV;\n+        double maxSpeedTmp = customModel.getMaxSpeedFallback() == null ? baseFlagEncoder.getMaxSpeed() : customModel.getMaxSpeedFallback();\n+        if (customModel.getMaxSpeedFallback() != null && customModel.getMaxSpeedFallback() > maxSpeedTmp)\n+            throw new IllegalArgumentException(\"max_speed_fallback cannot be bigger than max_speed \" + maxSpeedTmp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0MjYzOA==", "bodyText": "This constructor is unused so maybe we can remove it. If not we should add a test that uses it and also chain the two constructors if possible. But I like the idea of CustomWeighting not being directly coupled to CustomModel and maybe we should turn CustomWeightingHelper into an interface (call it SpeedAndPriorityProvider for example) and remove the other constructor instead. In this case we would use some helper method to create the speed/priority provider from a custom model, but otherwise CustomWeighting would not depend on it.", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r541142638", "createdAt": "2020-12-11T18:26:09Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/CustomWeighting.java", "diffHunk": "@@ -86,26 +86,40 @@\n     private final double maxSpeed;\n     private final double distanceInfluence;\n     private final double headingPenaltySeconds;\n-    private final SpeedCalculator speedCalculator;\n-    private final PriorityCalculator priorityCalculator;\n+    private final CustomWeightingHelper cwHelper;\n \n-    public CustomWeighting(FlagEncoder baseFlagEncoder, EncodedValueLookup lookup,\n-                           TurnCostProvider turnCostProvider, CustomModel customModel) {\n+    public CustomWeighting(FlagEncoder baseFlagEncoder, EncodedValueLookup lookup, TurnCostProvider turnCostProvider,\n+                           CustomModel customModel) {\n         super(baseFlagEncoder, turnCostProvider);\n         if (customModel == null)\n             throw new IllegalStateException(\"CustomModel cannot be null\");\n \n         headingPenaltySeconds = customModel.getHeadingPenalty();\n         baseVehicleAccessEnc = baseFlagEncoder.getAccessEnc();\n-        speedCalculator = new SpeedCalculator(baseFlagEncoder.getMaxSpeed(), customModel, baseFlagEncoder.getAverageSpeedEnc(), lookup);\n-        maxSpeed = speedCalculator.getMaxSpeed() / SPEED_CONV;\n+        double maxSpeedTmp = customModel.getMaxSpeedFallback() == null ? baseFlagEncoder.getMaxSpeed() : customModel.getMaxSpeedFallback();\n+        if (customModel.getMaxSpeedFallback() != null && customModel.getMaxSpeedFallback() > maxSpeedTmp)\n+            throw new IllegalArgumentException(\"max_speed_fallback cannot be bigger than max_speed \" + maxSpeedTmp);\n+        cwHelper = ExpressionBuilder.create(customModel, lookup, baseFlagEncoder.getMaxSpeed(), maxSpeedTmp, baseFlagEncoder.getAverageSpeedEnc());\n+        maxSpeed = maxSpeedTmp / SPEED_CONV;\n \n-        priorityCalculator = new PriorityCalculator(customModel, lookup);\n+        // given unit is s/km -> convert to s/m\n+        this.distanceInfluence = customModel.getDistanceInfluence() / 1000.0;\n+        if (this.distanceInfluence < 0)\n+            throw new IllegalArgumentException(\"maximum distance_influence cannot be negative \" + this.distanceInfluence);\n+    }\n+\n+    public CustomWeighting(FlagEncoder baseFlagEncoder, TurnCostProvider turnCostProvider, CustomWeightingHelper cwHelper,\n+                           double maxSpeed, double distanceInfluence, double headingPenaltySeconds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NDUzMA==", "bodyText": "Hm not sure about this class really. It should probably be an interface (see my other comment). Its really not clear how to use it. For example how is one supposed to know init needs to be called and avg_speed_enc is null otherwise (NPE in getRawSpeed)? lookup is not used at all. The static in method seems very unrelated and can probably go to GHUtilities?", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r541144530", "createdAt": "2020-12-11T18:29:22Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/CustomWeightingHelper.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.routing.weighting.custom;\n+\n+import com.graphhopper.json.geo.JsonFeature;\n+import com.graphhopper.routing.ev.DecimalEncodedValue;\n+import com.graphhopper.routing.ev.EncodedValueLookup;\n+import com.graphhopper.util.EdgeIteratorState;\n+import com.graphhopper.util.FetchMode;\n+import com.graphhopper.util.GHUtility;\n+import com.graphhopper.util.shapes.BBox;\n+import com.graphhopper.util.shapes.Polygon;\n+\n+import java.util.Map;\n+\n+/**\n+ * This class makes it easy to control priority and speed for the CustomWeighting.\n+ */\n+public class CustomWeightingHelper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NTM3Mg==", "bodyText": "Why 'maximum' distance_influence? Its just that distance_influence must be positive right?", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r541145372", "createdAt": "2020-12-11T18:30:45Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/CustomWeighting.java", "diffHunk": "@@ -86,26 +86,40 @@\n     private final double maxSpeed;\n     private final double distanceInfluence;\n     private final double headingPenaltySeconds;\n-    private final SpeedCalculator speedCalculator;\n-    private final PriorityCalculator priorityCalculator;\n+    private final CustomWeightingHelper cwHelper;\n \n-    public CustomWeighting(FlagEncoder baseFlagEncoder, EncodedValueLookup lookup,\n-                           TurnCostProvider turnCostProvider, CustomModel customModel) {\n+    public CustomWeighting(FlagEncoder baseFlagEncoder, EncodedValueLookup lookup, TurnCostProvider turnCostProvider,\n+                           CustomModel customModel) {\n         super(baseFlagEncoder, turnCostProvider);\n         if (customModel == null)\n             throw new IllegalStateException(\"CustomModel cannot be null\");\n \n         headingPenaltySeconds = customModel.getHeadingPenalty();\n         baseVehicleAccessEnc = baseFlagEncoder.getAccessEnc();\n-        speedCalculator = new SpeedCalculator(baseFlagEncoder.getMaxSpeed(), customModel, baseFlagEncoder.getAverageSpeedEnc(), lookup);\n-        maxSpeed = speedCalculator.getMaxSpeed() / SPEED_CONV;\n+        double maxSpeedTmp = customModel.getMaxSpeedFallback() == null ? baseFlagEncoder.getMaxSpeed() : customModel.getMaxSpeedFallback();\n+        if (customModel.getMaxSpeedFallback() != null && customModel.getMaxSpeedFallback() > maxSpeedTmp)\n+            throw new IllegalArgumentException(\"max_speed_fallback cannot be bigger than max_speed \" + maxSpeedTmp);\n+        cwHelper = ExpressionBuilder.create(customModel, lookup, baseFlagEncoder.getMaxSpeed(), maxSpeedTmp, baseFlagEncoder.getAverageSpeedEnc());\n+        maxSpeed = maxSpeedTmp / SPEED_CONV;\n \n-        priorityCalculator = new PriorityCalculator(customModel, lookup);\n+        // given unit is s/km -> convert to s/m\n+        this.distanceInfluence = customModel.getDistanceInfluence() / 1000.0;\n+        if (this.distanceInfluence < 0)\n+            throw new IllegalArgumentException(\"maximum distance_influence cannot be negative \" + this.distanceInfluence);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE2MTQ0OA==", "bodyText": "Can we find a better name here? This thing takes a custom model, does some janino magic and returns two functions that return the speed and priority for an edge. I called this SpeedAndPriorityProvider in some of the other comments. Its certainly not building expressions. Its rather interpreting expressions (like road_class == MOTORWAY) and builds these two functions.", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r541161448", "createdAt": "2020-12-11T18:58:19Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/ExpressionBuilder.java", "diffHunk": "@@ -0,0 +1,382 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.routing.weighting.custom;\n+\n+import com.graphhopper.json.geo.JsonFeature;\n+import com.graphhopper.routing.ev.DecimalEncodedValue;\n+import com.graphhopper.routing.ev.EncodedValue;\n+import com.graphhopper.routing.ev.EncodedValueLookup;\n+import com.graphhopper.routing.util.CustomModel;\n+import com.graphhopper.routing.util.EncodingManager;\n+import com.graphhopper.util.EdgeIteratorState;\n+import com.graphhopper.util.GHUtility;\n+import com.graphhopper.util.shapes.BBox;\n+import com.graphhopper.util.shapes.Polygon;\n+import org.codehaus.commons.compiler.CompileException;\n+import org.codehaus.commons.compiler.Location;\n+import org.codehaus.commons.compiler.io.Readers;\n+import org.codehaus.janino.Scanner;\n+import org.codehaus.janino.*;\n+import org.codehaus.janino.util.DeepCopier;\n+import org.locationtech.jts.geom.prep.PreparedGeometryFactory;\n+\n+import java.io.*;\n+import java.util.*;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+class ExpressionBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE2NzI3Mg==", "bodyText": "Can we move the try statement a bit further down? Its unrelated to the cache lookup, right?", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r541167272", "createdAt": "2020-12-11T19:03:35Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/ExpressionBuilder.java", "diffHunk": "@@ -0,0 +1,382 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.routing.weighting.custom;\n+\n+import com.graphhopper.json.geo.JsonFeature;\n+import com.graphhopper.routing.ev.DecimalEncodedValue;\n+import com.graphhopper.routing.ev.EncodedValue;\n+import com.graphhopper.routing.ev.EncodedValueLookup;\n+import com.graphhopper.routing.util.CustomModel;\n+import com.graphhopper.routing.util.EncodingManager;\n+import com.graphhopper.util.EdgeIteratorState;\n+import com.graphhopper.util.GHUtility;\n+import com.graphhopper.util.shapes.BBox;\n+import com.graphhopper.util.shapes.Polygon;\n+import org.codehaus.commons.compiler.CompileException;\n+import org.codehaus.commons.compiler.Location;\n+import org.codehaus.commons.compiler.io.Readers;\n+import org.codehaus.janino.Scanner;\n+import org.codehaus.janino.*;\n+import org.codehaus.janino.util.DeepCopier;\n+import org.locationtech.jts.geom.prep.PreparedGeometryFactory;\n+\n+import java.io.*;\n+import java.util.*;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+class ExpressionBuilder {\n+    private static final AtomicLong longVal = new AtomicLong(1);\n+    private static final String AREA_PREFIX = \"in_area_\";\n+    private static final Set<String> allowedNames = new HashSet<>(Arrays.asList(\"edge\", \"Math\"));\n+    private static final boolean JANINO_DEBUG = Boolean.getBoolean(Scanner.SYSTEM_PROPERTY_SOURCE_DEBUGGING_ENABLE);\n+\n+    // TODO without a cache we get X% slower routing and Y% slower routingLM8. CH requests and preparation is unaffected\n+    // as cached weighting from preparation is used. This cache ensures that the first Weighting classes, typically the\n+    // ones specified in the profiles, are never removed regardless of how frequent other Weightings are created and accessed.\n+    // We only need to synchronize the get and put methods alone. E.g. we do not care for the race condition where\n+    // two identical classes are requested and one of them is overwritten. We could use CachingJavaSourceClassLoader from\n+    // Janino but 1. we would need to use a single compiler across threads and 2. the statements (for priority and speed)\n+    // are still unnecessarily created.\n+    private static final int CACHE_SIZE = Integer.getInteger(\"graphhopper.custom_weighting.cache_size\", 10);\n+    // TODO perf compare with ConcurrentHashMap, but I guess, if there is a difference at all, it is not big for small maps\n+    private static final Map<String, Class> CACHE = Collections.synchronizedMap(new HashMap<>(CACHE_SIZE));\n+\n+    // Introduce a dynamic cache to remember different Weighting classes, but throw away less frequently used classes.\n+    // Use accessOrder==true to remove oldest accessed entry, not oldest inserted.\n+    private static final int DYN_CACHE_SIZE = Integer.getInteger(\"graphhopper.custom_weighting.dynamic_cache_size\", 1000);\n+    private static final Map<String, Class> DYN_CACHE = Collections.synchronizedMap(\n+            new LinkedHashMap<String, Class>(DYN_CACHE_SIZE, 0.75f, true) {\n+                protected boolean removeEldestEntry(Map.Entry eldest) {\n+                    return size() > DYN_CACHE_SIZE;\n+                }\n+            });\n+\n+    /**\n+     * This method compiles a new subclass of CustomWeightingHelper composed from the provided CustomModel caches this\n+     * and returns an instance.\n+     */\n+    static CustomWeightingHelper create(CustomModel customModel, EncodedValueLookup lookup,\n+                                        double globalMaxSpeed, double maxSpeedFallback, DecimalEncodedValue avgSpeedEnc) {\n+        Java.CompilationUnit cu;\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE2ODc1MA==", "bodyText": "Ah ok the default constructor + init method is probably required to create an instance via reflection in ExpressionBuilder? But to me this sounds like just another reason to have some kind of SpeedAndPriorityProvider interface in CustomWeighting and encapsulate the ugly part of creating such a thing from a custom model. I mean CustomWeighting should not be coupled to this ugly part? One goal would be to be able to test CustomModel->janino->SpeedAndPriortyProvider independently from SpeedAndPriorityProvider->CustomWeighting->calcWeight.", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r541168750", "createdAt": "2020-12-11T19:04:59Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/CustomWeightingHelper.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.routing.weighting.custom;\n+\n+import com.graphhopper.json.geo.JsonFeature;\n+import com.graphhopper.routing.ev.DecimalEncodedValue;\n+import com.graphhopper.routing.ev.EncodedValueLookup;\n+import com.graphhopper.util.EdgeIteratorState;\n+import com.graphhopper.util.FetchMode;\n+import com.graphhopper.util.GHUtility;\n+import com.graphhopper.util.shapes.BBox;\n+import com.graphhopper.util.shapes.Polygon;\n+\n+import java.util.Map;\n+\n+/**\n+ * This class makes it easy to control priority and speed for the CustomWeighting.\n+ */\n+public class CustomWeightingHelper {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE0NDUzMA=="}, "originalCommit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIwMDk2OQ==", "bodyText": "What do you mean here?", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r541200969", "createdAt": "2020-12-11T19:33:48Z", "author": {"login": "easbar"}, "path": "docs/core/profiles.md", "diffHunk": "@@ -151,96 +153,112 @@ can be influenced by the different fields of such a custom model.\n   \n #### Customizing `speed`\n \n-For every edge a default speed is inherited from the base vehicle, but you have multiple options to adjust it.\n+For every road segment a default speed is inherited from the base vehicle, but you have multiple options to adjust it.\n The first thing you can do is rescaling the default speeds using the `speed_factor` section. For example this is how you\n-can reduce the the speed of every edge that has the value 'motorway' for the category 'road_class' to fifty percent of \n+can reduce the speed of every road segment that has the value MOTORWAY for the category 'road_class' to fifty percent of \n the default speed that is normally used by the base vehicle for this road class:\n ```yaml\n speed_factor:\n-  road_class: {motorway: 0.5}\n-```  \n-Note that `road_class: {motorway: 0.5}` is an alternative YAML notation that is equivalent to:\n+  road_class == MOTORWAY: 0.5\n+```\n+\n+You can also change the speed factor for multiple road classes like this\n ```yaml\n speed_factor:\n-  road_class:\n-    motorway: 0.5\n+  road_class == MOTORWAY: 0.5\n+  road_class == PRIMARY || road_class == TERTIARY: 0.7\n ```\n \n-You can also setup speed factors for multiple road classes like this\n+Please note the OR operator `||` that says that if one of the expressions is true the value 0.7 is used.\n+\n+or use multiple categories to influence the speed factor\n ```yaml\n speed_factor:\n-  road_class: {motorway: 0.5, primary: 0.7, tertiary: 0.9}\n+  road_class == MOTORWAY: 0.5\n+  road_environment == TUNNEL: 0.8\n ```\n \n-and use multiple categories to influence the speed factor\n+You can use only two operators `==` (equality) and `!=` inequality.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIxMDY3OQ==", "bodyText": "I find this hard to understand. First you introduce first_match as something that can be used to avoid the multiplication rule, but in this example we multiply everything with 0.5 again. Would you not rather set\nfirst_match:\n    road_environment == TUNNEL: 0.4\n    true: 0.3\n?\nMaybe we can find a better example where it makes sense to combine the default expressions with first_match?", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r541210679", "createdAt": "2020-12-11T19:43:48Z", "author": {"login": "easbar"}, "path": "docs/core/profiles.md", "diffHunk": "@@ -151,96 +153,112 @@ can be influenced by the different fields of such a custom model.\n   \n #### Customizing `speed`\n \n-For every edge a default speed is inherited from the base vehicle, but you have multiple options to adjust it.\n+For every road segment a default speed is inherited from the base vehicle, but you have multiple options to adjust it.\n The first thing you can do is rescaling the default speeds using the `speed_factor` section. For example this is how you\n-can reduce the the speed of every edge that has the value 'motorway' for the category 'road_class' to fifty percent of \n+can reduce the speed of every road segment that has the value MOTORWAY for the category 'road_class' to fifty percent of \n the default speed that is normally used by the base vehicle for this road class:\n ```yaml\n speed_factor:\n-  road_class: {motorway: 0.5}\n-```  \n-Note that `road_class: {motorway: 0.5}` is an alternative YAML notation that is equivalent to:\n+  road_class == MOTORWAY: 0.5\n+```\n+\n+You can also change the speed factor for multiple road classes like this\n ```yaml\n speed_factor:\n-  road_class:\n-    motorway: 0.5\n+  road_class == MOTORWAY: 0.5\n+  road_class == PRIMARY || road_class == TERTIARY: 0.7\n ```\n \n-You can also setup speed factors for multiple road classes like this\n+Please note the OR operator `||` that says that if one of the expressions is true the value 0.7 is used.\n+\n+or use multiple categories to influence the speed factor\n ```yaml\n speed_factor:\n-  road_class: {motorway: 0.5, primary: 0.7, tertiary: 0.9}\n+  road_class == MOTORWAY: 0.5\n+  road_environment == TUNNEL: 0.8\n ```\n \n-and use multiple categories to influence the speed factor\n+You can use only two operators `==` (equality) and `!=` inequality.\n+\n+If a road segment matches multiple expressions the speed factor values will be multiplied. For example, here the speed factor of\n+a road segment that has `road_class==MOTORWAY` will be `0.5`, the speed factor of a road segment that additionally has\n+`road_environment==TUNNEL` will be `0.4` and the speed factor of a road segment that has `road_class==SECONDARY` and\n+`road_environment==TUNNEL` will be `0.8`. You can avoid this by using the \"first_match\" directive:\n+\n ```yaml\n speed_factor:\n-  road_class: {motorway: 0.5}\n-  road_environment: {tunnel: 0.8}\n+  first_match:\n+    road_class == MOTORWAY: 0.5\n+    road_environment == TUNNEL: 0.8\n ```\n \n-If an edge matches multiple rules the speed factor values will be multiplied. For example, here the speed factor of \n-a road segment that has `road_class=motorway` will be `0.5`, the speed factor of a road segment that additionally has \n-`road_environment=tunnel` will be `0.4` and the speed factor of a road segment that has `road_class=secondary` and \n-`road_environment=tunnel` will be `0.8`.\n+Now even if a road segment fulfills both conditions only the first will be used and no multiplication happens. If you\n+know a programming language than the previous statements are \"if\" clauses and expressions under \"first_match\" are\n+\"if-then-else-if\" clauses.\n \n-Instead of setting the speed factors for certain values you can instead set the speed factors for all *other* values using\n-as special key (`\"*\"`), like this:\n+Instead of setting the speed factors for certain values you can instead set the speed factors for all *other* values\n+using the unconditional expression `true`:\n ```yaml\n-speed_factor: \n-  road_class: {\"*\": 0.5}\n-  road_environment: {tunnel: 0.8, \"*\": 0.6}\n+speed_factor:\n+  true: 0.5\n+  first_match:\n+    road_environment == TUNNEL: 0.8\n+    true: 0.6\n ```\n \n-So in this example we set a speed factor of `0.5` regardless of the `road_class` and all `road_environment` values yield\n-a speed factor of `0.6` *except* `tunnel` which gets a speed factor of `0.8`. And as mentioned above for edges that match\n-multiple of these rules the different factors get multiplied.\n+This is usually used in the `first_match' directive.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIxMzE3Nw==", "bodyText": "Using true as unconditional expression probably makes sense for a programmer who understood that the left side of each entry is a boolean expression, but otherwise its probably hard to understand (compared to something like default: 0.5, but of course this requires another pre-processor (which could also convert || -> OR, && -> AND.. Not sure...", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r541213177", "createdAt": "2020-12-11T19:46:21Z", "author": {"login": "easbar"}, "path": "docs/core/profiles.md", "diffHunk": "@@ -151,96 +153,112 @@ can be influenced by the different fields of such a custom model.\n   \n #### Customizing `speed`\n \n-For every edge a default speed is inherited from the base vehicle, but you have multiple options to adjust it.\n+For every road segment a default speed is inherited from the base vehicle, but you have multiple options to adjust it.\n The first thing you can do is rescaling the default speeds using the `speed_factor` section. For example this is how you\n-can reduce the the speed of every edge that has the value 'motorway' for the category 'road_class' to fifty percent of \n+can reduce the speed of every road segment that has the value MOTORWAY for the category 'road_class' to fifty percent of \n the default speed that is normally used by the base vehicle for this road class:\n ```yaml\n speed_factor:\n-  road_class: {motorway: 0.5}\n-```  \n-Note that `road_class: {motorway: 0.5}` is an alternative YAML notation that is equivalent to:\n+  road_class == MOTORWAY: 0.5\n+```\n+\n+You can also change the speed factor for multiple road classes like this\n ```yaml\n speed_factor:\n-  road_class:\n-    motorway: 0.5\n+  road_class == MOTORWAY: 0.5\n+  road_class == PRIMARY || road_class == TERTIARY: 0.7\n ```\n \n-You can also setup speed factors for multiple road classes like this\n+Please note the OR operator `||` that says that if one of the expressions is true the value 0.7 is used.\n+\n+or use multiple categories to influence the speed factor\n ```yaml\n speed_factor:\n-  road_class: {motorway: 0.5, primary: 0.7, tertiary: 0.9}\n+  road_class == MOTORWAY: 0.5\n+  road_environment == TUNNEL: 0.8\n ```\n \n-and use multiple categories to influence the speed factor\n+You can use only two operators `==` (equality) and `!=` inequality.\n+\n+If a road segment matches multiple expressions the speed factor values will be multiplied. For example, here the speed factor of\n+a road segment that has `road_class==MOTORWAY` will be `0.5`, the speed factor of a road segment that additionally has\n+`road_environment==TUNNEL` will be `0.4` and the speed factor of a road segment that has `road_class==SECONDARY` and\n+`road_environment==TUNNEL` will be `0.8`. You can avoid this by using the \"first_match\" directive:\n+\n ```yaml\n speed_factor:\n-  road_class: {motorway: 0.5}\n-  road_environment: {tunnel: 0.8}\n+  first_match:\n+    road_class == MOTORWAY: 0.5\n+    road_environment == TUNNEL: 0.8\n ```\n \n-If an edge matches multiple rules the speed factor values will be multiplied. For example, here the speed factor of \n-a road segment that has `road_class=motorway` will be `0.5`, the speed factor of a road segment that additionally has \n-`road_environment=tunnel` will be `0.4` and the speed factor of a road segment that has `road_class=secondary` and \n-`road_environment=tunnel` will be `0.8`.\n+Now even if a road segment fulfills both conditions only the first will be used and no multiplication happens. If you\n+know a programming language than the previous statements are \"if\" clauses and expressions under \"first_match\" are\n+\"if-then-else-if\" clauses.\n \n-Instead of setting the speed factors for certain values you can instead set the speed factors for all *other* values using\n-as special key (`\"*\"`), like this:\n+Instead of setting the speed factors for certain values you can instead set the speed factors for all *other* values\n+using the unconditional expression `true`:\n ```yaml\n-speed_factor: \n-  road_class: {\"*\": 0.5}\n-  road_environment: {tunnel: 0.8, \"*\": 0.6}\n+speed_factor:\n+  true: 0.5", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIxNjY4NQ==", "bodyText": "Also I wonder why we only have first_match? What if we need multiple explicit rules, like\nfirst_match:\n    road_environment == TUNNEL: 0.4\nfirst_match:\n    surface == GRAVEL: 0.7", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r541216685", "createdAt": "2020-12-11T19:49:56Z", "author": {"login": "easbar"}, "path": "docs/core/profiles.md", "diffHunk": "@@ -151,96 +153,112 @@ can be influenced by the different fields of such a custom model.\n   \n #### Customizing `speed`\n \n-For every edge a default speed is inherited from the base vehicle, but you have multiple options to adjust it.\n+For every road segment a default speed is inherited from the base vehicle, but you have multiple options to adjust it.\n The first thing you can do is rescaling the default speeds using the `speed_factor` section. For example this is how you\n-can reduce the the speed of every edge that has the value 'motorway' for the category 'road_class' to fifty percent of \n+can reduce the speed of every road segment that has the value MOTORWAY for the category 'road_class' to fifty percent of \n the default speed that is normally used by the base vehicle for this road class:\n ```yaml\n speed_factor:\n-  road_class: {motorway: 0.5}\n-```  \n-Note that `road_class: {motorway: 0.5}` is an alternative YAML notation that is equivalent to:\n+  road_class == MOTORWAY: 0.5\n+```\n+\n+You can also change the speed factor for multiple road classes like this\n ```yaml\n speed_factor:\n-  road_class:\n-    motorway: 0.5\n+  road_class == MOTORWAY: 0.5\n+  road_class == PRIMARY || road_class == TERTIARY: 0.7\n ```\n \n-You can also setup speed factors for multiple road classes like this\n+Please note the OR operator `||` that says that if one of the expressions is true the value 0.7 is used.\n+\n+or use multiple categories to influence the speed factor\n ```yaml\n speed_factor:\n-  road_class: {motorway: 0.5, primary: 0.7, tertiary: 0.9}\n+  road_class == MOTORWAY: 0.5\n+  road_environment == TUNNEL: 0.8\n ```\n \n-and use multiple categories to influence the speed factor\n+You can use only two operators `==` (equality) and `!=` inequality.\n+\n+If a road segment matches multiple expressions the speed factor values will be multiplied. For example, here the speed factor of\n+a road segment that has `road_class==MOTORWAY` will be `0.5`, the speed factor of a road segment that additionally has\n+`road_environment==TUNNEL` will be `0.4` and the speed factor of a road segment that has `road_class==SECONDARY` and\n+`road_environment==TUNNEL` will be `0.8`. You can avoid this by using the \"first_match\" directive:\n+\n ```yaml\n speed_factor:\n-  road_class: {motorway: 0.5}\n-  road_environment: {tunnel: 0.8}\n+  first_match:\n+    road_class == MOTORWAY: 0.5\n+    road_environment == TUNNEL: 0.8\n ```\n \n-If an edge matches multiple rules the speed factor values will be multiplied. For example, here the speed factor of \n-a road segment that has `road_class=motorway` will be `0.5`, the speed factor of a road segment that additionally has \n-`road_environment=tunnel` will be `0.4` and the speed factor of a road segment that has `road_class=secondary` and \n-`road_environment=tunnel` will be `0.8`.\n+Now even if a road segment fulfills both conditions only the first will be used and no multiplication happens. If you\n+know a programming language than the previous statements are \"if\" clauses and expressions under \"first_match\" are\n+\"if-then-else-if\" clauses.\n \n-Instead of setting the speed factors for certain values you can instead set the speed factors for all *other* values using\n-as special key (`\"*\"`), like this:\n+Instead of setting the speed factors for certain values you can instead set the speed factors for all *other* values\n+using the unconditional expression `true`:\n ```yaml\n-speed_factor: \n-  road_class: {\"*\": 0.5}\n-  road_environment: {tunnel: 0.8, \"*\": 0.6}\n+speed_factor:\n+  true: 0.5\n+  first_match:\n+    road_environment == TUNNEL: 0.8\n+    true: 0.6\n ```\n \n-So in this example we set a speed factor of `0.5` regardless of the `road_class` and all `road_environment` values yield\n-a speed factor of `0.6` *except* `tunnel` which gets a speed factor of `0.8`. And as mentioned above for edges that match\n-multiple of these rules the different factors get multiplied.\n+This is usually used in the `first_match' directive.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIxMDY3OQ=="}, "originalCommit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTIxOTY5OA==", "bodyText": "Nice, in_area makes this more readable.", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r541219698", "createdAt": "2020-12-11T19:52:59Z", "author": {"login": "easbar"}, "path": "docs/core/profiles.md", "diffHunk": "@@ -151,96 +153,112 @@ can be influenced by the different fields of such a custom model.\n   \n #### Customizing `speed`\n \n-For every edge a default speed is inherited from the base vehicle, but you have multiple options to adjust it.\n+For every road segment a default speed is inherited from the base vehicle, but you have multiple options to adjust it.\n The first thing you can do is rescaling the default speeds using the `speed_factor` section. For example this is how you\n-can reduce the the speed of every edge that has the value 'motorway' for the category 'road_class' to fifty percent of \n+can reduce the speed of every road segment that has the value MOTORWAY for the category 'road_class' to fifty percent of \n the default speed that is normally used by the base vehicle for this road class:\n ```yaml\n speed_factor:\n-  road_class: {motorway: 0.5}\n-```  \n-Note that `road_class: {motorway: 0.5}` is an alternative YAML notation that is equivalent to:\n+  road_class == MOTORWAY: 0.5\n+```\n+\n+You can also change the speed factor for multiple road classes like this\n ```yaml\n speed_factor:\n-  road_class:\n-    motorway: 0.5\n+  road_class == MOTORWAY: 0.5\n+  road_class == PRIMARY || road_class == TERTIARY: 0.7\n ```\n \n-You can also setup speed factors for multiple road classes like this\n+Please note the OR operator `||` that says that if one of the expressions is true the value 0.7 is used.\n+\n+or use multiple categories to influence the speed factor\n ```yaml\n speed_factor:\n-  road_class: {motorway: 0.5, primary: 0.7, tertiary: 0.9}\n+  road_class == MOTORWAY: 0.5\n+  road_environment == TUNNEL: 0.8\n ```\n \n-and use multiple categories to influence the speed factor\n+You can use only two operators `==` (equality) and `!=` inequality.\n+\n+If a road segment matches multiple expressions the speed factor values will be multiplied. For example, here the speed factor of\n+a road segment that has `road_class==MOTORWAY` will be `0.5`, the speed factor of a road segment that additionally has\n+`road_environment==TUNNEL` will be `0.4` and the speed factor of a road segment that has `road_class==SECONDARY` and\n+`road_environment==TUNNEL` will be `0.8`. You can avoid this by using the \"first_match\" directive:\n+\n ```yaml\n speed_factor:\n-  road_class: {motorway: 0.5}\n-  road_environment: {tunnel: 0.8}\n+  first_match:\n+    road_class == MOTORWAY: 0.5\n+    road_environment == TUNNEL: 0.8\n ```\n \n-If an edge matches multiple rules the speed factor values will be multiplied. For example, here the speed factor of \n-a road segment that has `road_class=motorway` will be `0.5`, the speed factor of a road segment that additionally has \n-`road_environment=tunnel` will be `0.4` and the speed factor of a road segment that has `road_class=secondary` and \n-`road_environment=tunnel` will be `0.8`.\n+Now even if a road segment fulfills both conditions only the first will be used and no multiplication happens. If you\n+know a programming language than the previous statements are \"if\" clauses and expressions under \"first_match\" are\n+\"if-then-else-if\" clauses.\n \n-Instead of setting the speed factors for certain values you can instead set the speed factors for all *other* values using\n-as special key (`\"*\"`), like this:\n+Instead of setting the speed factors for certain values you can instead set the speed factors for all *other* values\n+using the unconditional expression `true`:\n ```yaml\n-speed_factor: \n-  road_class: {\"*\": 0.5}\n-  road_environment: {tunnel: 0.8, \"*\": 0.6}\n+speed_factor:\n+  true: 0.5\n+  first_match:\n+    road_environment == TUNNEL: 0.8\n+    true: 0.6\n ```\n \n-So in this example we set a speed factor of `0.5` regardless of the `road_class` and all `road_environment` values yield\n-a speed factor of `0.6` *except* `tunnel` which gets a speed factor of `0.8`. And as mentioned above for edges that match\n-multiple of these rules the different factors get multiplied.\n+This is usually used in the `first_match' directive.\n+\n+So in this example we set a speed factor of `0.5` independent of any category or value and all `road_environment`\n+values yield a speed factor of `0.6` *except* `TUNNEL` which gets a speed factor of `0.8`. And as mentioned above\n+for road segments that match multiple of these rules the different factors get multiplied, i.e. `0.5*0.6` or `0.5*0.8`.\n \n For encoded values with boolean values, like `get_off_bike` you set the speed factor like this:\n ```yaml\n speed_factor:\n-  get_off_bike: {true: 0.6, false: 1.0}\n+  first_match:\n+    get_off_bike: 0.6\n+    true: 0.9\n ```\n-which means that for edges with `get_off_bike=true` the speed factor will be `0.6` and otherwise it will be `1.0`.\n+which means that for edges with `get_off_bike==true` the speed factor will be `0.6` and otherwise it will be `0.9`.\n You can skip any of these values to retain the default.\n \n-For encoded values with numeric values, like `max_width` you use the `<` and `>` operators, like this:\n+For encoded values with numeric values, like `max_width` you should not use \"equality\" or \"inequality\" but the\n+comparison operators \"bigger\" `>`, \"bigger or equals\" `>=`, \"smaller\" `<` or \"smaller or equals\" `<=`, e.g.:\n ```yaml\n speed_factor:\n-  max_width: {\"<2.5\": 0.8}\n+  max_width < 2.5: 0.8\n ``` \n which means that for all edges with `max_width` smaller than `2.5m` the speed factor is `0.8`.\n \n-In any case values of `speed_factor` have to be in the range `[0,1]` and it is not possible to *increase* the speed for\n-edges of certain types. \n-\n Another way to change the speed is using the `max_speed` section, for example:\n ```yaml\n max_speed:\n-  surface: {gravel: 60}\n+  surface != GRAVEL: 60\n ```\n \n-implies that on all road segments with `surface=gravel` the speed will be at most `60km/h`, regardless of the default \n-speed of this edge or the adjustments made by the `speed_factor` section. Just like with `speed_factor` you can setup\n-`max_speed` values for multiple category values and different categories. If multiple rules match for a given edge the\n-most restrictive rule will determine the speed (the minimum `max_speed` will be applied). \n+This implies that on all road segments with no `GRAVEL` value for `surface` the speed will be at most `60km/h`,\n+regardless of the default speed of this road segment or the adjustments made by the `speed_factor` section. Just like\n+with `speed_factor` you can use multiple category values and different categories in the expressions of the `max_speed`\n+entry. If multiple rules match for a given edge the most restrictive rule will determine the speed, i.e. the minimum\n+`max_speed` will be applied.\n+\n Values for `max_speed` must be in the range `[0,max_vehicle_speed]` where `max_vehicle_speed` is the maximum speed that\n-is set for the base vehicle (which you cannot change).\n+is set for the base vehicle, and you cannot change.\n \n-You can also modify the speed for all edges in a certain area. To do this first add some areas to the `areas` section\n-of the custom model and then use this name to set a `speed_factor` or `max_speed` for this area. In the following\n-example we set the `speed_factor` of an area called `my_area` to `0.7`. For `max_speed` it works the same way. All area\n-names need to be prefixed with `area_`.  \n+You can also modify the speed for all road segments in a certain area. To do this first add some areas to the `areas`\n+section of the custom model and then use this name to set a `speed_factor` or `max_speed` for this area. In the following\n+example we set the `speed_factor` of an area called `custom1` to `0.7`. For `max_speed` it works the same way. All area\n+names need to be prefixed with `in_area_`.\n \n ```yaml\n speed_factor:\n-  area_my_area: 0.7\n+  in_area_custom1: 0.7", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cb073c89e7badcdb4e8aa42997f9b5a447e89ed"}, "originalPosition": 185}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc4268a4b883760e4b727999ee98725a02244b53", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/dc4268a4b883760e4b727999ee98725a02244b53", "committedDate": "2020-12-12T16:31:17Z", "message": "call in-area method only when necessary, improves speed where pre-conditional checks are done like road_class!=PRIMARY && in_area_custom1"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d2e9ee7fc5315e5c5087a477d63c57ef7770743", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/8d2e9ee7fc5315e5c5087a477d63c57ef7770743", "committedDate": "2020-12-12T16:48:53Z", "message": "make area names stricter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4478bb97c3d7585b21c39eadf45d80e57436cb3", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/f4478bb97c3d7585b21c39eadf45d80e57436cb3", "committedDate": "2020-12-12T20:52:52Z", "message": "already consider parts of the pull request reviews"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTA4MjI4", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-550908228", "createdAt": "2020-12-13T10:56:26Z", "commit": {"oid": "f4478bb97c3d7585b21c39eadf45d80e57436cb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxMDo1NjoyNlrOIEy9TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxMDo1NjoyNlrOIEy9TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkwMDEwOQ==", "bodyText": "Can we use a bit more meaningful name than Test? Something like JaninoAutoGeneratedCustomWeighting or something (if this is what it is)?", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r541900109", "createdAt": "2020-12-13T10:56:26Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/ExpressionBuilder.java", "diffHunk": "@@ -0,0 +1,379 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.routing.weighting.custom;\n+\n+import com.graphhopper.json.geo.JsonFeature;\n+import com.graphhopper.routing.ev.DecimalEncodedValue;\n+import com.graphhopper.routing.ev.EncodedValue;\n+import com.graphhopper.routing.ev.EncodedValueLookup;\n+import com.graphhopper.routing.util.CustomModel;\n+import com.graphhopper.routing.util.EncodingManager;\n+import com.graphhopper.util.EdgeIteratorState;\n+import com.graphhopper.util.GHUtility;\n+import com.graphhopper.util.shapes.BBox;\n+import com.graphhopper.util.shapes.Polygon;\n+import org.codehaus.commons.compiler.CompileException;\n+import org.codehaus.commons.compiler.Location;\n+import org.codehaus.commons.compiler.io.Readers;\n+import org.codehaus.janino.Scanner;\n+import org.codehaus.janino.*;\n+import org.codehaus.janino.util.DeepCopier;\n+import org.locationtech.jts.geom.prep.PreparedGeometryFactory;\n+\n+import java.io.*;\n+import java.util.*;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+class ExpressionBuilder {\n+    private static final AtomicLong longVal = new AtomicLong(1);\n+    static final String IN_AREA_PREFIX = \"in_area_\";\n+    private static final Set<String> allowedNames = new HashSet<>(Arrays.asList(\"edge\", \"Math\"));\n+    private static final boolean JANINO_DEBUG = Boolean.getBoolean(Scanner.SYSTEM_PROPERTY_SOURCE_DEBUGGING_ENABLE);\n+\n+    // TODO without a cache we get X% slower routing and Y% slower routingLM8. CH requests and preparation is unaffected\n+    // as cached weighting from preparation is used. This cache ensures that the first Weighting classes, typically the\n+    // ones specified in the profiles, are never removed regardless of how frequent other Weightings are created and accessed.\n+    // We only need to synchronize the get and put methods alone. E.g. we do not care for the race condition where\n+    // two identical classes are requested and one of them is overwritten. We could use CachingJavaSourceClassLoader from\n+    // Janino but 1. we would need to use a single compiler across threads and 2. the statements (for priority and speed)\n+    // are still unnecessarily created.\n+    private static final int CACHE_SIZE = Integer.getInteger(\"graphhopper.custom_weighting.cache_size\", 10);\n+    // TODO perf compare with ConcurrentHashMap, but I guess, if there is a difference at all, it is not big for small maps\n+    private static final Map<String, Class> CACHE = Collections.synchronizedMap(new HashMap<>(CACHE_SIZE));\n+\n+    // Introduce a dynamic cache to remember different Weighting classes, but throw away less frequently used classes.\n+    // Use accessOrder==true to remove oldest accessed entry, not oldest inserted.\n+    private static final int DYN_CACHE_SIZE = Integer.getInteger(\"graphhopper.custom_weighting.dynamic_cache_size\", 1000);\n+    private static final Map<String, Class> DYN_CACHE = Collections.synchronizedMap(\n+            new LinkedHashMap<String, Class>(DYN_CACHE_SIZE, 0.75f, true) {\n+                protected boolean removeEldestEntry(Map.Entry eldest) {\n+                    return size() > DYN_CACHE_SIZE;\n+                }\n+            });\n+\n+    /**\n+     * This method compiles a new subclass of CustomWeightingHelper composed from the provided CustomModel caches this\n+     * and returns an instance.\n+     */\n+    static CustomWeightingHelper create(CustomModel customModel, EncodedValueLookup lookup,\n+                                        double globalMaxSpeed, double maxSpeedFallback, DecimalEncodedValue avgSpeedEnc) {\n+        Java.CompilationUnit cu;\n+        try {\n+            String key = customModel.toString() + \",global:\" + globalMaxSpeed + \",fallback:\" + maxSpeedFallback;\n+            if (key.length() > 400_000) throw new IllegalArgumentException(\"Custom Model too big: \" + key.length());\n+\n+            Class clazz = CACHE.get(key);\n+            if (DYN_CACHE_SIZE > 0 && clazz == null)\n+                clazz = DYN_CACHE.get(key);\n+            if (clazz == null) {\n+                HashSet<String> priorityVariables = new LinkedHashSet<>();\n+                List<Java.BlockStatement> priorityStatements = createGetPriorityStatements(priorityVariables, customModel, lookup);\n+                HashSet<String> speedVariables = new LinkedHashSet<>();\n+                List<Java.BlockStatement> speedStatements = createGetSpeedStatements(speedVariables, customModel, lookup, globalMaxSpeed, maxSpeedFallback);\n+                // Create different class name, which is required only for debugging.\n+                // TODO does it improve performance too? I.e. it could be that the JIT is confused if different classes\n+                //  have the same name and it mixes performance stats. See https://github.com/janino-compiler/janino/issues/137\n+                long counter = longVal.incrementAndGet();\n+                String classTemplate = createClassTemplate(counter, priorityVariables, speedVariables, lookup, customModel);\n+                cu = (Java.CompilationUnit) new Parser(new org.codehaus.janino.Scanner(\"source\", new StringReader(classTemplate))).\n+                        parseAbstractCompilationUnit();\n+                cu = injectStatements(priorityStatements, speedStatements, cu);\n+                SimpleCompiler sc = createCompiler(counter, cu);\n+                clazz = sc.getClassLoader().loadClass(\"com.graphhopper.Test\" + counter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4478bb97c3d7585b21c39eadf45d80e57436cb3"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTE0MzE2", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-550914316", "createdAt": "2020-12-13T12:13:09Z", "commit": {"oid": "f4478bb97c3d7585b21c39eadf45d80e57436cb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxMjoxMzowOVrOIEzv2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxMjoxMzowOVrOIEzv2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkxMzA0OA==", "bodyText": "This is kind of hard to read. Can you explain what the applied flag does and why there are two speed values (maxSpeedFallback and globalMaxSpeed)?", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r541913048", "createdAt": "2020-12-13T12:13:09Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/ExpressionBuilder.java", "diffHunk": "@@ -0,0 +1,379 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.routing.weighting.custom;\n+\n+import com.graphhopper.json.geo.JsonFeature;\n+import com.graphhopper.routing.ev.DecimalEncodedValue;\n+import com.graphhopper.routing.ev.EncodedValue;\n+import com.graphhopper.routing.ev.EncodedValueLookup;\n+import com.graphhopper.routing.util.CustomModel;\n+import com.graphhopper.routing.util.EncodingManager;\n+import com.graphhopper.util.EdgeIteratorState;\n+import com.graphhopper.util.GHUtility;\n+import com.graphhopper.util.shapes.BBox;\n+import com.graphhopper.util.shapes.Polygon;\n+import org.codehaus.commons.compiler.CompileException;\n+import org.codehaus.commons.compiler.Location;\n+import org.codehaus.commons.compiler.io.Readers;\n+import org.codehaus.janino.Scanner;\n+import org.codehaus.janino.*;\n+import org.codehaus.janino.util.DeepCopier;\n+import org.locationtech.jts.geom.prep.PreparedGeometryFactory;\n+\n+import java.io.*;\n+import java.util.*;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+class ExpressionBuilder {\n+    private static final AtomicLong longVal = new AtomicLong(1);\n+    static final String IN_AREA_PREFIX = \"in_area_\";\n+    private static final Set<String> allowedNames = new HashSet<>(Arrays.asList(\"edge\", \"Math\"));\n+    private static final boolean JANINO_DEBUG = Boolean.getBoolean(Scanner.SYSTEM_PROPERTY_SOURCE_DEBUGGING_ENABLE);\n+\n+    // TODO without a cache we get X% slower routing and Y% slower routingLM8. CH requests and preparation is unaffected\n+    // as cached weighting from preparation is used. This cache ensures that the first Weighting classes, typically the\n+    // ones specified in the profiles, are never removed regardless of how frequent other Weightings are created and accessed.\n+    // We only need to synchronize the get and put methods alone. E.g. we do not care for the race condition where\n+    // two identical classes are requested and one of them is overwritten. We could use CachingJavaSourceClassLoader from\n+    // Janino but 1. we would need to use a single compiler across threads and 2. the statements (for priority and speed)\n+    // are still unnecessarily created.\n+    private static final int CACHE_SIZE = Integer.getInteger(\"graphhopper.custom_weighting.cache_size\", 10);\n+    // TODO perf compare with ConcurrentHashMap, but I guess, if there is a difference at all, it is not big for small maps\n+    private static final Map<String, Class> CACHE = Collections.synchronizedMap(new HashMap<>(CACHE_SIZE));\n+\n+    // Introduce a dynamic cache to remember different Weighting classes, but throw away less frequently used classes.\n+    // Use accessOrder==true to remove oldest accessed entry, not oldest inserted.\n+    private static final int DYN_CACHE_SIZE = Integer.getInteger(\"graphhopper.custom_weighting.dynamic_cache_size\", 1000);\n+    private static final Map<String, Class> DYN_CACHE = Collections.synchronizedMap(\n+            new LinkedHashMap<String, Class>(DYN_CACHE_SIZE, 0.75f, true) {\n+                protected boolean removeEldestEntry(Map.Entry eldest) {\n+                    return size() > DYN_CACHE_SIZE;\n+                }\n+            });\n+\n+    /**\n+     * This method compiles a new subclass of CustomWeightingHelper composed from the provided CustomModel caches this\n+     * and returns an instance.\n+     */\n+    static CustomWeightingHelper create(CustomModel customModel, EncodedValueLookup lookup,\n+                                        double globalMaxSpeed, double maxSpeedFallback, DecimalEncodedValue avgSpeedEnc) {\n+        Java.CompilationUnit cu;\n+        try {\n+            String key = customModel.toString() + \",global:\" + globalMaxSpeed + \",fallback:\" + maxSpeedFallback;\n+            if (key.length() > 400_000) throw new IllegalArgumentException(\"Custom Model too big: \" + key.length());\n+\n+            Class clazz = CACHE.get(key);\n+            if (DYN_CACHE_SIZE > 0 && clazz == null)\n+                clazz = DYN_CACHE.get(key);\n+            if (clazz == null) {\n+                HashSet<String> priorityVariables = new LinkedHashSet<>();\n+                List<Java.BlockStatement> priorityStatements = createGetPriorityStatements(priorityVariables, customModel, lookup);\n+                HashSet<String> speedVariables = new LinkedHashSet<>();\n+                List<Java.BlockStatement> speedStatements = createGetSpeedStatements(speedVariables, customModel, lookup, globalMaxSpeed, maxSpeedFallback);\n+                // Create different class name, which is required only for debugging.\n+                // TODO does it improve performance too? I.e. it could be that the JIT is confused if different classes\n+                //  have the same name and it mixes performance stats. See https://github.com/janino-compiler/janino/issues/137\n+                long counter = longVal.incrementAndGet();\n+                String classTemplate = createClassTemplate(counter, priorityVariables, speedVariables, lookup, customModel);\n+                cu = (Java.CompilationUnit) new Parser(new org.codehaus.janino.Scanner(\"source\", new StringReader(classTemplate))).\n+                        parseAbstractCompilationUnit();\n+                cu = injectStatements(priorityStatements, speedStatements, cu);\n+                SimpleCompiler sc = createCompiler(counter, cu);\n+                clazz = sc.getClassLoader().loadClass(\"com.graphhopper.Test\" + counter);\n+                if (CACHE.size() < CACHE_SIZE)\n+                    CACHE.put(key, clazz);\n+                else if (DYN_CACHE_SIZE > 0)\n+                    DYN_CACHE.put(key, clazz);\n+            }\n+\n+            // The class does not need to be thread-safe as we create an instance per request\n+            CustomWeightingHelper prio = (CustomWeightingHelper) clazz.getDeclaredConstructor().newInstance();\n+            prio.init(lookup, avgSpeedEnc, customModel.getAreas());\n+            return prio;\n+        } catch (Exception ex) {\n+            String location = \"\";\n+            if (ex instanceof CompileException)\n+                location = \" in \" + ((CompileException) ex).getLocation().getFileName();\n+            throw new IllegalArgumentException(\"Cannot compile expression \" + location + \", \" + ex.getMessage(), ex);\n+        }\n+    }\n+\n+    /**\n+     * Parse the expressions from CustomModel relevant for the method getSpeed - see createClassTemplate.\n+     *\n+     * @return the created statements (parsed expressions)\n+     */\n+    private static List<Java.BlockStatement> createGetSpeedStatements(Set<String> speedVariables,\n+                                                                      CustomModel customModel, EncodedValueLookup lookup,\n+                                                                      double globalMaxSpeed, double maxSpeedFallback) throws Exception {\n+        List<Java.BlockStatement> speedStatements = new ArrayList<>();\n+        speedStatements.addAll(verifyExpressions(new StringBuilder(), \"speed_factor_user_statements\", speedVariables,\n+                customModel.getSpeedFactor(), lookup,\n+                num -> \"speed *= \" + num + \";\\n\", \"\"));\n+        StringBuilder codeSB = new StringBuilder(\"boolean applied = false;\\n\");\n+        speedStatements.addAll(verifyExpressions(codeSB, \"max_speed_user_statements\",\n+                speedVariables, customModel.getMaxSpeed(), lookup,\n+                num -> \"applied = true; speed = Math.min(speed,\" + num + \");\",\n+                \"if (!applied && speed > \" + maxSpeedFallback + \") return \" + maxSpeedFallback + \";\\n\" +\n+                        \"return Math.min(speed, \" + globalMaxSpeed + \");\\n\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4478bb97c3d7585b21c39eadf45d80e57436cb3"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTE2NTcy", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-550916572", "createdAt": "2020-12-13T12:40:59Z", "commit": {"oid": "f4478bb97c3d7585b21c39eadf45d80e57436cb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxMjo0MDo1OVrOIE0Btg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxMjo0MDo1OVrOIE0Btg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkxNzYyMg==", "bodyText": "I would put a private constructor here to make it clear that this class is just a collection of static methods (if this is what it is supposed to be).", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r541917622", "createdAt": "2020-12-13T12:40:59Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/ExpressionBuilder.java", "diffHunk": "@@ -0,0 +1,379 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.routing.weighting.custom;\n+\n+import com.graphhopper.json.geo.JsonFeature;\n+import com.graphhopper.routing.ev.DecimalEncodedValue;\n+import com.graphhopper.routing.ev.EncodedValue;\n+import com.graphhopper.routing.ev.EncodedValueLookup;\n+import com.graphhopper.routing.util.CustomModel;\n+import com.graphhopper.routing.util.EncodingManager;\n+import com.graphhopper.util.EdgeIteratorState;\n+import com.graphhopper.util.GHUtility;\n+import com.graphhopper.util.shapes.BBox;\n+import com.graphhopper.util.shapes.Polygon;\n+import org.codehaus.commons.compiler.CompileException;\n+import org.codehaus.commons.compiler.Location;\n+import org.codehaus.commons.compiler.io.Readers;\n+import org.codehaus.janino.Scanner;\n+import org.codehaus.janino.*;\n+import org.codehaus.janino.util.DeepCopier;\n+import org.locationtech.jts.geom.prep.PreparedGeometryFactory;\n+\n+import java.io.*;\n+import java.util.*;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+class ExpressionBuilder {\n+    private static final AtomicLong longVal = new AtomicLong(1);\n+    static final String IN_AREA_PREFIX = \"in_area_\";\n+    private static final Set<String> allowedNames = new HashSet<>(Arrays.asList(\"edge\", \"Math\"));\n+    private static final boolean JANINO_DEBUG = Boolean.getBoolean(Scanner.SYSTEM_PROPERTY_SOURCE_DEBUGGING_ENABLE);\n+\n+    // TODO without a cache we get X% slower routing and Y% slower routingLM8. CH requests and preparation is unaffected\n+    // as cached weighting from preparation is used. This cache ensures that the first Weighting classes, typically the\n+    // ones specified in the profiles, are never removed regardless of how frequent other Weightings are created and accessed.\n+    // We only need to synchronize the get and put methods alone. E.g. we do not care for the race condition where\n+    // two identical classes are requested and one of them is overwritten. We could use CachingJavaSourceClassLoader from\n+    // Janino but 1. we would need to use a single compiler across threads and 2. the statements (for priority and speed)\n+    // are still unnecessarily created.\n+    private static final int CACHE_SIZE = Integer.getInteger(\"graphhopper.custom_weighting.cache_size\", 10);\n+    // TODO perf compare with ConcurrentHashMap, but I guess, if there is a difference at all, it is not big for small maps\n+    private static final Map<String, Class> CACHE = Collections.synchronizedMap(new HashMap<>(CACHE_SIZE));\n+\n+    // Introduce a dynamic cache to remember different Weighting classes, but throw away less frequently used classes.\n+    // Use accessOrder==true to remove oldest accessed entry, not oldest inserted.\n+    private static final int DYN_CACHE_SIZE = Integer.getInteger(\"graphhopper.custom_weighting.dynamic_cache_size\", 1000);\n+    private static final Map<String, Class> DYN_CACHE = Collections.synchronizedMap(\n+            new LinkedHashMap<String, Class>(DYN_CACHE_SIZE, 0.75f, true) {\n+                protected boolean removeEldestEntry(Map.Entry eldest) {\n+                    return size() > DYN_CACHE_SIZE;\n+                }\n+            });\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4478bb97c3d7585b21c39eadf45d80e57436cb3"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwOTE4MjQw", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-550918240", "createdAt": "2020-12-13T13:00:36Z", "commit": {"oid": "f4478bb97c3d7585b21c39eadf45d80e57436cb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxMzowMDozNlrOIE0OtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QxMzowMDozNlrOIE0OtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTkyMDk0OA==", "bodyText": "We discussed where to place this method in another comment, but it seems this is not even used?", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r541920948", "createdAt": "2020-12-13T13:00:36Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/CustomWeightingHelper.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.routing.weighting.custom;\n+\n+import com.graphhopper.json.geo.JsonFeature;\n+import com.graphhopper.routing.ev.DecimalEncodedValue;\n+import com.graphhopper.routing.ev.EncodedValueLookup;\n+import com.graphhopper.util.EdgeIteratorState;\n+import com.graphhopper.util.FetchMode;\n+import com.graphhopper.util.GHUtility;\n+import com.graphhopper.util.shapes.BBox;\n+import com.graphhopper.util.shapes.Polygon;\n+\n+import java.util.Map;\n+\n+/**\n+ * This class is for internal usage only. It is subclassed by Janino, then special expressions are injected into init,\n+ * getSpeed and getPriority. At the end an instance is created and used in CustomWeighting.\n+ */\n+public class CustomWeightingHelper {\n+    protected DecimalEncodedValue avg_speed_enc;\n+    protected static boolean DEFAULT = true;\n+\n+    protected CustomWeightingHelper() {\n+    }\n+\n+    public void init(EncodedValueLookup lookup, DecimalEncodedValue avgSpeedEnc, Map<String, JsonFeature> areas) {\n+        this.avg_speed_enc = avgSpeedEnc;\n+    }\n+\n+    public double getPriority(EdgeIteratorState edge, boolean reverse) {\n+        return 1;\n+    }\n+\n+    public double getSpeed(EdgeIteratorState edge, boolean reverse) {\n+        return getRawSpeed(edge, reverse);\n+    }\n+\n+    protected final double getRawSpeed(EdgeIteratorState edge, boolean reverse) {\n+        double speed = reverse ? edge.getReverse(avg_speed_enc) : edge.get(avg_speed_enc);\n+        if (Double.isInfinite(speed) || Double.isNaN(speed) || speed < 0)\n+            throw new IllegalStateException(\"Invalid estimated speed \" + speed);\n+        return speed;\n+    }\n+\n+    public static boolean in(Polygon p, EdgeIteratorState edge) {\n+        BBox bbox = GHUtility.createBBox(edge);\n+        if (p.getBounds().intersects(bbox))\n+            return p.intersects(edge.fetchWayGeometry(FetchMode.ALL).makeImmutable()); // TODO PERF: cache bbox and edge wayGeometry for multiple area\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4478bb97c3d7585b21c39eadf45d80e57436cb3"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "591317ade6d2956557a5a07a3d76564acf960179", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/591317ade6d2956557a5a07a3d76564acf960179", "committedDate": "2020-12-14T12:03:28Z", "message": "Custom weighting helper cleanup (#2211)\n\n* Chain CustomWeighting constructors, use static creator method\r\n\r\n* CustomWeighting no longer depends on CustomWeightingHelper\r\n\r\n* Extract parameter object for CustomWeighting\r\n\r\n* Use SpeedAndAccessProvider interface, add ExpressionBuilderTest\r\n\r\n* Change apply -> get"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3762a594bc590c35663e1a97e120360b2b4fdb12", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/3762a594bc590c35663e1a97e120360b2b4fdb12", "committedDate": "2020-12-14T12:09:00Z", "message": "More fine-grained usage of try statement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49d51ae07d51bfc16dfe33d98d9180db011c270e", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/49d51ae07d51bfc16dfe33d98d9180db011c270e", "committedDate": "2020-12-14T12:22:14Z", "message": "revert DEFAULT to true"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63bd616e89117f6fd7342e45829e1af0d72a8e69", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/63bd616e89117f6fd7342e45829e1af0d72a8e69", "committedDate": "2020-12-14T13:10:51Z", "message": "docs: remove confusing statement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2d74dc01fa5b44e15678ed04f2084116b04167b", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/e2d74dc01fa5b44e15678ed04f2084116b04167b", "committedDate": "2020-12-14T14:52:10Z", "message": "better name for subclass"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "449278b6ffa7652b0633383fe3ee9fbe7ee437ee", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/449278b6ffa7652b0633383fe3ee9fbe7ee437ee", "committedDate": "2020-12-14T15:05:07Z", "message": "no need for the extra line in test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNDYwODMz", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-551460833", "createdAt": "2020-12-14T15:09:21Z", "commit": {"oid": "449278b6ffa7652b0633383fe3ee9fbe7ee437ee"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTowOToyMVrOIFVBRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTowOToyMVrOIFVBRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ1ODE4Mg==", "bodyText": "Any special reason you included this code in test too?", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r542458182", "createdAt": "2020-12-14T15:09:21Z", "author": {"login": "karussell"}, "path": "core/src/test/java/com/graphhopper/routing/weighting/custom/ExpressionBuilderTest.java", "diffHunk": "@@ -37,9 +37,8 @@ void setPriorityForRoadClass() {\n         EncodingManager encodingManager = EncodingManager.create(encoder);\n         CustomModel customModel = new CustomModel();\n         customModel.getPriority().put(\"road_class == PRIMARY\", 0.5);\n-        // todo: can we get rid of this line here?\n-        double maxSpeedFallback = customModel.getMaxSpeedFallback() == null ? encoder.getMaxSpeed() : customModel.getMaxSpeedFallback();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "449278b6ffa7652b0633383fe3ee9fbe7ee437ee"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bf5b21c100ccd7db7fcb21424dba044b5f4d9fa", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/7bf5b21c100ccd7db7fcb21424dba044b5f4d9fa", "committedDate": "2020-12-14T15:20:29Z", "message": "simple max_speed_fallback handling, still explicit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNDc3NjAx", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-551477601", "createdAt": "2020-12-14T15:25:46Z", "commit": {"oid": "7bf5b21c100ccd7db7fcb21424dba044b5f4d9fa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNToyNTo0N1rOIFV1yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNToyNTo0N1rOIFV1yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3MTYyNA==", "bodyText": "much simpler now - thanks :)\nNot sure why I used this applied stuff before", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r542471624", "createdAt": "2020-12-14T15:25:47Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/CustomWeighting.java", "diffHunk": "@@ -93,12 +93,16 @@ public static CustomWeighting create(FlagEncoder baseFlagEncoder, EncodedValueLo\n                                          CustomModel customModel) {\n         if (customModel == null)\n             throw new IllegalStateException(\"CustomModel cannot be null\");\n-        if (customModel.getMaxSpeedFallback() != null && customModel.getMaxSpeedFallback() > baseFlagEncoder.getMaxSpeed())\n-            throw new IllegalArgumentException(\"max_speed_fallback cannot be bigger than max_speed \" + baseFlagEncoder.getMaxSpeed());\n-        double maxSpeedTmp = customModel.getMaxSpeedFallback() == null ? baseFlagEncoder.getMaxSpeed() : customModel.getMaxSpeedFallback();\n-        SpeedAndAccessProvider speedAndAccessProvider = ExpressionBuilder.create(customModel, lookup, baseFlagEncoder.getMaxSpeed(), maxSpeedTmp, baseFlagEncoder.getAverageSpeedEnc());\n+        double globalMaxSpeed = baseFlagEncoder.getMaxSpeed();\n+        if (customModel.getMaxSpeedFallback() != null) {\n+            if (customModel.getMaxSpeedFallback() > globalMaxSpeed)\n+                throw new IllegalArgumentException(\"max_speed_fallback cannot be bigger than max_speed \" + globalMaxSpeed);\n+            globalMaxSpeed = customModel.getMaxSpeedFallback();\n+        }\n+\n+        SpeedAndAccessProvider speedAndAccessProvider = ExpressionBuilder.create(customModel, lookup, globalMaxSpeed, baseFlagEncoder.getAverageSpeedEnc());\n         Parameters parameters = new Parameters(speedAndAccessProvider::getSpeed, speedAndAccessProvider::getPriority,\n-                maxSpeedTmp, customModel.getDistanceInfluence(), customModel.getHeadingPenalty());\n+                globalMaxSpeed, customModel.getDistanceInfluence(), customModel.getHeadingPenalty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf5b21c100ccd7db7fcb21424dba044b5f4d9fa"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNDc5Mjkz", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-551479293", "createdAt": "2020-12-14T15:27:23Z", "commit": {"oid": "7bf5b21c100ccd7db7fcb21424dba044b5f4d9fa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNToyNzoyM1rOIFV7VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNToyNzoyM1rOIFV7VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3MzA0NA==", "bodyText": "Should we throw an exception at all or just ignore MaxSpeedFallback in that case?", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r542473044", "createdAt": "2020-12-14T15:27:23Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/CustomWeighting.java", "diffHunk": "@@ -93,12 +93,16 @@ public static CustomWeighting create(FlagEncoder baseFlagEncoder, EncodedValueLo\n                                          CustomModel customModel) {\n         if (customModel == null)\n             throw new IllegalStateException(\"CustomModel cannot be null\");\n-        if (customModel.getMaxSpeedFallback() != null && customModel.getMaxSpeedFallback() > baseFlagEncoder.getMaxSpeed())\n-            throw new IllegalArgumentException(\"max_speed_fallback cannot be bigger than max_speed \" + baseFlagEncoder.getMaxSpeed());\n-        double maxSpeedTmp = customModel.getMaxSpeedFallback() == null ? baseFlagEncoder.getMaxSpeed() : customModel.getMaxSpeedFallback();\n-        SpeedAndAccessProvider speedAndAccessProvider = ExpressionBuilder.create(customModel, lookup, baseFlagEncoder.getMaxSpeed(), maxSpeedTmp, baseFlagEncoder.getAverageSpeedEnc());\n+        double globalMaxSpeed = baseFlagEncoder.getMaxSpeed();\n+        if (customModel.getMaxSpeedFallback() != null) {\n+            if (customModel.getMaxSpeedFallback() > globalMaxSpeed)\n+                throw new IllegalArgumentException(\"max_speed_fallback cannot be bigger than max_speed \" + globalMaxSpeed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf5b21c100ccd7db7fcb21424dba044b5f4d9fa"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c40d078dd04d802681cc16cb0d4ed20daa959809", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/c40d078dd04d802681cc16cb0d4ed20daa959809", "committedDate": "2020-12-16T22:51:41Z", "message": "Merge branch 'master' into janino_scripting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69db7b3b7c34372a6a83b9810cb877f1bf08343f", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/69db7b3b7c34372a6a83b9810cb877f1bf08343f", "committedDate": "2020-12-17T14:49:24Z", "message": "migrate to if-then notation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97d6be58a7381cfbe306d2571e2f1ff3fc45e858", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/97d6be58a7381cfbe306d2571e2f1ff3fc45e858", "committedDate": "2020-12-17T19:36:40Z", "message": "fix benchmarks for if-then notation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NTE3MTA0", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-555517104", "createdAt": "2020-12-18T14:14:52Z", "commit": {"oid": "97d6be58a7381cfbe306d2571e2f1ff3fc45e858"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDoxNDo1M1rOIIkcUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNDoxNDo1M1rOIIkcUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTg1NjU5Mg==", "bodyText": "Can we use shorter method names here: Clause.if instead of Clause.createIf etc.? Since this will be used a lot in a rather repetitive way when setting up custom models via Java shorter is better here IMO.", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r545856592", "createdAt": "2020-12-18T14:14:53Z", "author": {"login": "easbar"}, "path": "core/src/test/java/com/graphhopper/routing/util/CustomModelTest.java", "diffHunk": "@@ -18,94 +18,66 @@\n \n package com.graphhopper.routing.util;\n \n+import com.graphhopper.json.Clause;\n import org.junit.jupiter.api.Test;\n \n-import java.util.HashMap;\n-import java.util.Map;\n+import java.util.Iterator;\n \n-import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n \n public class CustomModelTest {\n \n-    static CustomModel setValue(CustomModel model, String op, String encodedValue, double value) {\n-        Map<String, Object> map = new HashMap<>();\n-        map.put(op + value, 0);\n-        model.getPriority().put(encodedValue, map);\n-        return model;\n-    }\n-\n-    Object getValue(CustomModel model, String encodedValue) {\n-        Map map = (Map) model.getPriority().get(encodedValue);\n-        if (map == null || map.isEmpty())\n-            return null;\n-        return map.keySet().iterator().next();\n+    @Test\n+    public void testTooBigFactor() {\n+        CustomModel truck = new CustomModel();\n+        truck.getPriority().add(Clause.createIf(\"max_width < 3\", 10));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97d6be58a7381cfbe306d2571e2f1ff3fc45e858"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c2eecc939d39ef588744be445c5a9794854ffbe", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/0c2eecc939d39ef588744be445c5a9794854ffbe", "committedDate": "2020-12-18T19:32:05Z", "message": "made Clause methods shorter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f087cc060aab8a4bd0da67615bdda35ca0ed579", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/2f087cc060aab8a4bd0da67615bdda35ca0ed579", "committedDate": "2020-12-18T20:45:29Z", "message": "introduce different Op"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66bbb9cbed315a15075bb0928daae14cfd7497db", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/66bbb9cbed315a15075bb0928daae14cfd7497db", "committedDate": "2020-12-18T22:35:40Z", "message": "merge speed_factor and max_speed into speed via introduced 'multiply with' and 'limit to' operators; cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1OTUyMzg1", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-555952385", "createdAt": "2020-12-19T16:22:18Z", "commit": {"oid": "2f087cc060aab8a4bd0da67615bdda35ca0ed579"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxNjoyMjoxOFrOII8z0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxNjoyMjoxOFrOII8z0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1NTgyNw==", "bodyText": "Isn't expression the 'condition' here and condition is a ... hmmm ... 'clause' :-D I mean if/else are 'clauses' (they aren't really 'conditions') and something like road_class == MOTORWAY is a 'condition'. Ok the latter is also an 'expression', but 'condition' is more specific, it always evaluates to a boolean.", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r546255827", "createdAt": "2020-12-19T16:22:18Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/json/Clause.java", "diffHunk": "@@ -18,65 +18,61 @@\n package com.graphhopper.json;\n \n public class Clause {\n-    // either if or else-if with thenValue\n-    private String ifClause;\n-    private String elseIfClause;\n-    private Double thenValue;\n-    // or just elseValue\n-    private Double elseValue;\n+    private final Cond condition;\n+    private final String expression;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2f087cc060aab8a4bd0da67615bdda35ca0ed579"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1OTUyNTEz", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-555952513", "createdAt": "2020-12-19T16:24:29Z", "commit": {"oid": "66bbb9cbed315a15075bb0928daae14cfd7497db"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxNjoyNDoyOVrOII80og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxNjoyNDoyOVrOII80og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1NjAzNA==", "bodyText": "Ah nice \ud83d\udc4d. I also like Statement better than Clause and Keyword is better than Cond.", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r546256034", "createdAt": "2020-12-19T16:24:29Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/json/Statement.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.json;\n+\n+public class Statement {\n+    private final Keyword keyword;\n+    private final String expression;\n+    private final Op operation;\n+    private final double value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66bbb9cbed315a15075bb0928daae14cfd7497db"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1OTUyNjA1", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-555952605", "createdAt": "2020-12-19T16:25:50Z", "commit": {"oid": "66bbb9cbed315a15075bb0928daae14cfd7497db"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxNjoyNTo1MFrOII81MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxNjoyNTo1MFrOII81MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI1NjE3Ng==", "bodyText": "Nice! With this branch custom models not only become more powerful but also easier to use \u2764\ufe0f", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r546256176", "createdAt": "2020-12-19T16:25:50Z", "author": {"login": "easbar"}, "path": "web/src/test/resources/com/graphhopper/http/resources/cargo_bike.yml", "diffHunk": "@@ -2,7 +2,7 @@\n # profile: bike\n \n # let's assume cargo bikes are e-bikes and we should lower speed to prefer shorter and not faster routes automatically\n-max_speed:\n+speed:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66bbb9cbed315a15075bb0928daae14cfd7497db"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43bab561c4f65f9f6254c3ea93baa18e89310da9", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/43bab561c4f65f9f6254c3ea93baa18e89310da9", "committedDate": "2020-12-19T17:46:30Z", "message": "further simplify custom model: remove max_speed_fallback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31850104dbedf0e2943953ad9300341a44b13e59", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/31850104dbedf0e2943953ad9300341a44b13e59", "committedDate": "2020-12-19T18:59:29Z", "message": "bug fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d880afcf0537855b43819b5e027b2b8af791f210", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/d880afcf0537855b43819b5e027b2b8af791f210", "committedDate": "2020-12-19T19:54:54Z", "message": "docs: adapt to know notation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8425bd50d1065a7b7d05890b6573ab38a57888c", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/b8425bd50d1065a7b7d05890b6573ab38a57888c", "committedDate": "2020-12-20T00:20:21Z", "message": "multiply with -> by"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3fa7c85ef0368832dd5dcb3d325a8e32fd35f66", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/c3fa7c85ef0368832dd5dcb3d325a8e32fd35f66", "committedDate": "2020-12-20T00:32:44Z", "message": "minor cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f75328b17617c5b34b2b86730782487ebbcb39a", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/0f75328b17617c5b34b2b86730782487ebbcb39a", "committedDate": "2020-12-20T11:34:10Z", "message": "Merge branch 'master' into janino_scripting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "576f2f1ea86a23b48c3327fd6fc0c3a91dd25640", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/576f2f1ea86a23b48c3327fd6fc0c3a91dd25640", "committedDate": "2020-12-26T11:23:50Z", "message": "support for StringEncodedValue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52ca223a536d362a6f03b281df436396a6b5f5f6", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/52ca223a536d362a6f03b281df436396a6b5f5f6", "committedDate": "2020-12-26T11:23:50Z", "message": "UI fixes for new format; make isSharedEncodedValues method private again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01582a4cf1b478637cdca8e9b9963658611ceff8", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/01582a4cf1b478637cdca8e9b9963658611ceff8", "committedDate": "2020-12-26T11:23:50Z", "message": "bug fix for findMaxSpeed calculation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3708c22518acf1c97b2fe10c3f380d3f81b7c1bb", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/3708c22518acf1c97b2fe10c3f380d3f81b7c1bb", "committedDate": "2020-12-26T11:27:17Z", "message": "test perf: disable cache for comparison"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d90439d6c925a96e1cdfb8f9bee1548abf97bd6", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/1d90439d6c925a96e1cdfb8f9bee1548abf97bd6", "committedDate": "2020-12-26T11:27:39Z", "message": "test perf: again"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd92b3c15d94214ae68d1f5cfd8f222a939ea019", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/bd92b3c15d94214ae68d1f5cfd8f222a939ea019", "committedDate": "2020-12-26T11:29:01Z", "message": "enable cache to permanently store internal Weighting classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6bb9fd01d77cc21d552f58fb6ed010cefb461405", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/6bb9fd01d77cc21d552f58fb6ed010cefb461405", "committedDate": "2020-12-26T11:38:18Z", "message": "uhm, test perf: without cache but push separately"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4ODc4MDk0", "url": "https://github.com/graphhopper/graphhopper/pull/2209#pullrequestreview-558878094", "createdAt": "2020-12-26T14:53:22Z", "commit": {"oid": "6bb9fd01d77cc21d552f58fb6ed010cefb461405"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQxNDo1MzoyMlrOILkWMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNlQxNDo1MzoyMlrOILkWMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTAwMDc1Mw==", "bodyText": "Not sure if I like this too much \ud83d\ude04 but the static cache size was also not optimal.", "url": "https://github.com/graphhopper/graphhopper/pull/2209#discussion_r549000753", "createdAt": "2020-12-26T14:53:22Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/CustomProfile.java", "diffHunk": "@@ -18,6 +35,7 @@ public CustomProfile(String name) {\n     }\n \n     public CustomProfile setCustomModel(CustomModel customModel) {\n+        customModel.__internal();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bb9fd01d77cc21d552f58fb6ed010cefb461405"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4536, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}