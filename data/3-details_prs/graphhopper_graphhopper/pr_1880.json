{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NjQ5Mzg0", "number": 1880, "title": "SpatialRule interface rework", "bodyText": "This PR aims to improve our current spatial rule interface.\nSummary of the changes:\n\nenforce border polygons being passed via constructor\nenforce implementation of getId()\nuse Enum constants instead of Strings for getMaxSpeed() and getAccess()\nmerge DefaultSpatialRule into AbstractSpatialRule\nallow rules to overwrite existing values instead of only being used as a fallback", "createdAt": "2020-01-29T16:26:06Z", "url": "https://github.com/graphhopper/graphhopper/pull/1880", "merged": true, "mergeCommit": {"oid": "bce7174dac797e3e315fd9ca0c6159d77b235003"}, "closed": true, "closedAt": "2020-02-25T12:30:28Z", "author": {"login": "otbutz"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcC5Al7ABqjMwMjE3NjIyODY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcHxR7cgH2gAyMzY4NjQ5Mzg0OmMzMDk1NWZkZDAxODQzZTY3N2FlNDBiYWRlYTQ4OTdhZWQ1NWUzYmE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bdbc05e522a49186484dd7adfb7a2825357d0086", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/bdbc05e522a49186484dd7adfb7a2825357d0086", "committedDate": "2020-01-29T16:20:47Z", "message": "Allow SpatialRules to overwrite exisiting values"}, "afterCommit": {"oid": "a50b674aa2dc2d1e2a49699a2cb682142a5ebb15", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/a50b674aa2dc2d1e2a49699a2cb682142a5ebb15", "committedDate": "2020-02-10T08:36:03Z", "message": "Allow SpatialRules to overwrite exisiting values"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a50b674aa2dc2d1e2a49699a2cb682142a5ebb15", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/a50b674aa2dc2d1e2a49699a2cb682142a5ebb15", "committedDate": "2020-02-10T08:36:03Z", "message": "Allow SpatialRules to overwrite exisiting values"}, "afterCommit": {"oid": "f5fc729c61e10fc5b54cd124e555d5ea08f0b919", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/f5fc729c61e10fc5b54cd124e555d5ea08f0b919", "committedDate": "2020-02-10T08:49:24Z", "message": "Allow SpatialRules to overwrite exisiting values"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5fc729c61e10fc5b54cd124e555d5ea08f0b919", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/f5fc729c61e10fc5b54cd124e555d5ea08f0b919", "committedDate": "2020-02-10T08:49:24Z", "message": "Allow SpatialRules to overwrite exisiting values"}, "afterCommit": {"oid": "9c32c1731350bdbfbb4f93429e0c1535e02f499a", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/9c32c1731350bdbfbb4f93429e0c1535e02f499a", "committedDate": "2020-02-10T09:03:38Z", "message": "Allow SpatialRules to overwrite exisiting values"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3NDEzMjQz", "url": "https://github.com/graphhopper/graphhopper/pull/1880#pullrequestreview-357413243", "createdAt": "2020-02-12T12:29:50Z", "commit": {"oid": "9c32c1731350bdbfbb4f93429e0c1535e02f499a"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9c32c1731350bdbfbb4f93429e0c1535e02f499a", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/9c32c1731350bdbfbb4f93429e0c1535e02f499a", "committedDate": "2020-02-10T09:03:38Z", "message": "Allow SpatialRules to overwrite exisiting values"}, "afterCommit": {"oid": "eeadcd56dc8cfd1bb4e7a7dce5fffc31957704f8", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/eeadcd56dc8cfd1bb4e7a7dce5fffc31957704f8", "committedDate": "2020-02-13T13:00:10Z", "message": "Retrieve maxspeed dependent on the transportation mode"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c32029b6f5d8b9c690fe9e50ef588628f3d34fea", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/c32029b6f5d8b9c690fe9e50ef588628f3d34fea", "committedDate": "2020-02-14T16:44:14Z", "message": "Merge branch 'master' into rules_interface_rework"}, "afterCommit": {"oid": "6b033e559a214da32a850c582c116fcc174e1069", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/6b033e559a214da32a850c582c116fcc174e1069", "committedDate": "2020-02-17T09:04:52Z", "message": "Retrieve maxspeed dependent on the transportation mode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7c8cd04b11e506771075d4011b3f5ff4439d749", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/a7c8cd04b11e506771075d4011b3f5ff4439d749", "committedDate": "2020-02-24T08:44:16Z", "message": "Enforce that subclasses implement `getId()`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04cf3b0ae9c4958fa103fa04de9cde5316c4f76e", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/04cf3b0ae9c4958fa103fa04de9cde5316c4f76e", "committedDate": "2020-02-24T08:50:35Z", "message": "Pass border polygons via the constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93e46de711b3da0be77ea9e000108b363ebd52b6", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/93e46de711b3da0be77ea9e000108b363ebd52b6", "committedDate": "2020-02-24T08:53:17Z", "message": "Merge DefaultSpatialRule into AbstractSpatialRule"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0026d4be0d87c97f50152f9c02f1b9a57b9dbf6", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/e0026d4be0d87c97f50152f9c02f1b9a57b9dbf6", "committedDate": "2020-02-24T08:53:17Z", "message": "Use RoadClass constants instead of Strings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b1013e9cac928332e3a848ff2a73e8e769498ab", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/3b1013e9cac928332e3a848ff2a73e8e769498ab", "committedDate": "2020-02-24T08:53:17Z", "message": "Allow SpatialRules to overwrite exisiting values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecbda78dfab87239db598e444e4c9f2e7183303d", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/ecbda78dfab87239db598e444e4c9f2e7183303d", "committedDate": "2020-02-24T08:53:17Z", "message": "Improve `AbstractSpatialRule.equals()`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ddcb8605a3d2c203902c7504b1dce2c205a9468e", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/ddcb8605a3d2c203902c7504b1dce2c205a9468e", "committedDate": "2020-02-24T08:53:17Z", "message": "Properly differentiate between fallback/override handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aae59500050978d3a157fe74cf822fdf7fecad29", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/aae59500050978d3a157fe74cf822fdf7fecad29", "committedDate": "2020-02-24T08:53:17Z", "message": "Retrieve maxspeed dependent on the transportation mode"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6b033e559a214da32a850c582c116fcc174e1069", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/6b033e559a214da32a850c582c116fcc174e1069", "committedDate": "2020-02-17T09:04:52Z", "message": "Retrieve maxspeed dependent on the transportation mode"}, "afterCommit": {"oid": "f32f4b0c178e8491687d4ef85346566c3de82585", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/f32f4b0c178e8491687d4ef85346566c3de82585", "committedDate": "2020-02-24T08:53:17Z", "message": "Remove getDefault methods from interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eebb99b11233b6f222c7ca650c7775b9975cbda2", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/eebb99b11233b6f222c7ca650c7775b9975cbda2", "committedDate": "2020-02-25T08:25:00Z", "message": "Remove getDefault methods from interface"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f32f4b0c178e8491687d4ef85346566c3de82585", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/f32f4b0c178e8491687d4ef85346566c3de82585", "committedDate": "2020-02-24T08:53:17Z", "message": "Remove getDefault methods from interface"}, "afterCommit": {"oid": "eebb99b11233b6f222c7ca650c7775b9975cbda2", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/eebb99b11233b6f222c7ca650c7775b9975cbda2", "committedDate": "2020-02-25T08:25:00Z", "message": "Remove getDefault methods from interface"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MDI0Njcw", "url": "https://github.com/graphhopper/graphhopper/pull/1880#pullrequestreview-364024670", "createdAt": "2020-02-25T10:20:28Z", "commit": {"oid": "eebb99b11233b6f222c7ca650c7775b9975cbda2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDoyMDoyOVrOFuAawQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDoyMDoyOVrOFuAawQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4NTY2NQ==", "bodyText": "Should we make it compatible with our MaxSpeed EncodedValue and return MaxSpeed.UNLIMITED_SIGN_SPEED?", "url": "https://github.com/graphhopper/graphhopper/pull/1880#discussion_r383785665", "createdAt": "2020-02-25T10:20:29Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/util/spatialrules/countries/GermanySpatialRule.java", "diffHunk": "@@ -17,46 +17,81 @@\n  */\n package com.graphhopper.routing.util.spatialrules.countries;\n \n+import java.util.List;\n+\n+import org.locationtech.jts.geom.Polygon;\n+\n import com.graphhopper.routing.profiles.Country;\n import com.graphhopper.routing.profiles.RoadAccess;\n-import com.graphhopper.routing.util.spatialrules.DefaultSpatialRule;\n+import com.graphhopper.routing.profiles.RoadClass;\n+import com.graphhopper.routing.util.spatialrules.AbstractSpatialRule;\n import com.graphhopper.routing.util.spatialrules.TransportationMode;\n \n /**\n  * Defines the default rules for German roads\n  *\n  * @author Robin Boldt\n  */\n-public class GermanySpatialRule extends DefaultSpatialRule {\n+public class GermanySpatialRule extends AbstractSpatialRule {\n+    \n+    public GermanySpatialRule(List<Polygon> borders) {\n+        super(borders);\n+    }\n \n     /**\n      * Germany contains roads with no speed limit. For these roads, this method will return Integer.MAX_VALUE.\n      * Your implementation should be able to handle these cases.\n      */\n     @Override\n-    public double getMaxSpeed(String highwayTag, double _default) {\n+    public double getMaxSpeed(RoadClass roadClass, TransportationMode transport, double currentMaxSpeed) {\n+        if (currentMaxSpeed > 0 || transport != TransportationMode.MOTOR_VEHICLE) {\n+            return currentMaxSpeed;\n+        }\n+        \n         // As defined in: https://wiki.openstreetmap.org/wiki/OSM_tags_for_routing/Maxspeed#Motorcar\n-        switch (highwayTag) {\n-            case \"motorway\":\n-            case \"trunk\":\n+        switch (roadClass) {\n+            case MOTORWAY:\n+            case TRUNK:\n                 return Integer.MAX_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eebb99b11233b6f222c7ca650c7775b9975cbda2"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6a717692b9e70ed612fe59a049c7f3ea9c6aa8b9", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/6a717692b9e70ed612fe59a049c7f3ea9c6aa8b9", "committedDate": "2020-02-25T10:28:19Z", "message": "Return `MaxSpeed.UNLIMITED_SIGN_SPEED` instead of `Integer.MAX_VALUE`"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MDU3NjUx", "url": "https://github.com/graphhopper/graphhopper/pull/1880#pullrequestreview-364057651", "createdAt": "2020-02-25T11:08:39Z", "commit": {"oid": "6a717692b9e70ed612fe59a049c7f3ea9c6aa8b9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMTowODozOVrOFuCCdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMTowODozOVrOFuCCdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxMjIxMw==", "bodyText": "Thanks again for adapting the code! It seems we also documented this Integer.MAX_VALUE here in the javadocs. Would you mind adapting also this :) ? Last thing I hope ;)", "url": "https://github.com/graphhopper/graphhopper/pull/1880#discussion_r383812213", "createdAt": "2020-02-25T11:08:39Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/util/spatialrules/countries/GermanySpatialRule.java", "diffHunk": "@@ -17,46 +17,82 @@\n  */\n package com.graphhopper.routing.util.spatialrules.countries;\n \n+import java.util.List;\n+\n+import org.locationtech.jts.geom.Polygon;\n+\n import com.graphhopper.routing.profiles.Country;\n+import com.graphhopper.routing.profiles.MaxSpeed;\n import com.graphhopper.routing.profiles.RoadAccess;\n-import com.graphhopper.routing.util.spatialrules.DefaultSpatialRule;\n+import com.graphhopper.routing.profiles.RoadClass;\n+import com.graphhopper.routing.util.spatialrules.AbstractSpatialRule;\n import com.graphhopper.routing.util.spatialrules.TransportationMode;\n \n /**\n  * Defines the default rules for German roads\n  *\n  * @author Robin Boldt\n  */\n-public class GermanySpatialRule extends DefaultSpatialRule {\n+public class GermanySpatialRule extends AbstractSpatialRule {\n+    \n+    public GermanySpatialRule(List<Polygon> borders) {\n+        super(borders);\n+    }\n \n     /**\n      * Germany contains roads with no speed limit. For these roads, this method will return Integer.MAX_VALUE.\n      * Your implementation should be able to handle these cases.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a717692b9e70ed612fe59a049c7f3ea9c6aa8b9"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0MDU3NzEx", "url": "https://github.com/graphhopper/graphhopper/pull/1880#pullrequestreview-364057711", "createdAt": "2020-02-25T11:08:46Z", "commit": {"oid": "6a717692b9e70ed612fe59a049c7f3ea9c6aa8b9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c30955fdd01843e677ae40badea4897aed55e3ba", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/c30955fdd01843e677ae40badea4897aed55e3ba", "committedDate": "2020-02-25T12:28:29Z", "message": "Adapt Javadoc for `MaxSpeed.UNLIMITED_SIGN_SPEED`"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4707, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}