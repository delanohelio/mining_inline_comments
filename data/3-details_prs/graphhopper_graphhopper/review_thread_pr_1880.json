{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NjQ5Mzg0", "number": 1880, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDoyMDoyOFrODipMjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMTowODozOVrODiqQRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjUzMTMzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/util/spatialrules/countries/GermanySpatialRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDoyMDoyOVrOFuAawQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMDoyMDoyOVrOFuAawQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mzc4NTY2NQ==", "bodyText": "Should we make it compatible with our MaxSpeed EncodedValue and return MaxSpeed.UNLIMITED_SIGN_SPEED?", "url": "https://github.com/graphhopper/graphhopper/pull/1880#discussion_r383785665", "createdAt": "2020-02-25T10:20:29Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/util/spatialrules/countries/GermanySpatialRule.java", "diffHunk": "@@ -17,46 +17,81 @@\n  */\n package com.graphhopper.routing.util.spatialrules.countries;\n \n+import java.util.List;\n+\n+import org.locationtech.jts.geom.Polygon;\n+\n import com.graphhopper.routing.profiles.Country;\n import com.graphhopper.routing.profiles.RoadAccess;\n-import com.graphhopper.routing.util.spatialrules.DefaultSpatialRule;\n+import com.graphhopper.routing.profiles.RoadClass;\n+import com.graphhopper.routing.util.spatialrules.AbstractSpatialRule;\n import com.graphhopper.routing.util.spatialrules.TransportationMode;\n \n /**\n  * Defines the default rules for German roads\n  *\n  * @author Robin Boldt\n  */\n-public class GermanySpatialRule extends DefaultSpatialRule {\n+public class GermanySpatialRule extends AbstractSpatialRule {\n+    \n+    public GermanySpatialRule(List<Polygon> borders) {\n+        super(borders);\n+    }\n \n     /**\n      * Germany contains roads with no speed limit. For these roads, this method will return Integer.MAX_VALUE.\n      * Your implementation should be able to handle these cases.\n      */\n     @Override\n-    public double getMaxSpeed(String highwayTag, double _default) {\n+    public double getMaxSpeed(RoadClass roadClass, TransportationMode transport, double currentMaxSpeed) {\n+        if (currentMaxSpeed > 0 || transport != TransportationMode.MOTOR_VEHICLE) {\n+            return currentMaxSpeed;\n+        }\n+        \n         // As defined in: https://wiki.openstreetmap.org/wiki/OSM_tags_for_routing/Maxspeed#Motorcar\n-        switch (highwayTag) {\n-            case \"motorway\":\n-            case \"trunk\":\n+        switch (roadClass) {\n+            case MOTORWAY:\n+            case TRUNK:\n                 return Integer.MAX_VALUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eebb99b11233b6f222c7ca650c7775b9975cbda2"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NjcwNDcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/util/spatialrules/countries/GermanySpatialRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMTowODozOVrOFuCCdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMTowODozOVrOFuCCdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxMjIxMw==", "bodyText": "Thanks again for adapting the code! It seems we also documented this Integer.MAX_VALUE here in the javadocs. Would you mind adapting also this :) ? Last thing I hope ;)", "url": "https://github.com/graphhopper/graphhopper/pull/1880#discussion_r383812213", "createdAt": "2020-02-25T11:08:39Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/util/spatialrules/countries/GermanySpatialRule.java", "diffHunk": "@@ -17,46 +17,82 @@\n  */\n package com.graphhopper.routing.util.spatialrules.countries;\n \n+import java.util.List;\n+\n+import org.locationtech.jts.geom.Polygon;\n+\n import com.graphhopper.routing.profiles.Country;\n+import com.graphhopper.routing.profiles.MaxSpeed;\n import com.graphhopper.routing.profiles.RoadAccess;\n-import com.graphhopper.routing.util.spatialrules.DefaultSpatialRule;\n+import com.graphhopper.routing.profiles.RoadClass;\n+import com.graphhopper.routing.util.spatialrules.AbstractSpatialRule;\n import com.graphhopper.routing.util.spatialrules.TransportationMode;\n \n /**\n  * Defines the default rules for German roads\n  *\n  * @author Robin Boldt\n  */\n-public class GermanySpatialRule extends DefaultSpatialRule {\n+public class GermanySpatialRule extends AbstractSpatialRule {\n+    \n+    public GermanySpatialRule(List<Polygon> borders) {\n+        super(borders);\n+    }\n \n     /**\n      * Germany contains roads with no speed limit. For these roads, this method will return Integer.MAX_VALUE.\n      * Your implementation should be able to handle these cases.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6a717692b9e70ed612fe59a049c7f3ea9c6aa8b9"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4856, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}