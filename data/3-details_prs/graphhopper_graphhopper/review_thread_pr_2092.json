{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1MjIzNjU3", "number": 2092, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjozNjoyOFrOERUinw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoxMDozM1rOERVFQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTk3NzkxOnYy", "diffSide": "RIGHT", "path": "isochrone/src/main/java/com/graphhopper/isochrone/algorithm/ShortestPathTree.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjozNjoyOFrOG191TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwOTo1ODo0MVrOG2D4Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0MDc4MQ==", "bodyText": "Is this used?", "url": "https://github.com/graphhopper/graphhopper/pull/2092#discussion_r459240781", "createdAt": "2020-07-23T06:36:28Z", "author": {"login": "otbutz"}, "path": "isochrone/src/main/java/com/graphhopper/isochrone/algorithm/ShortestPathTree.java", "diffHunk": "@@ -78,6 +86,7 @@ public String toString() {\n         }\n     }\n \n+    private IntHashSet queueDeleted = new IntHashSet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50617c75adc36af379ecc3e03baf734fb2191204"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMzOTgzNQ==", "bodyText": "No.", "url": "https://github.com/graphhopper/graphhopper/pull/2092#discussion_r459339835", "createdAt": "2020-07-23T09:58:41Z", "author": {"login": "michaz"}, "path": "isochrone/src/main/java/com/graphhopper/isochrone/algorithm/ShortestPathTree.java", "diffHunk": "@@ -78,6 +86,7 @@ public String toString() {\n         }\n     }\n \n+    private IntHashSet queueDeleted = new IntHashSet();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI0MDc4MQ=="}, "originalCommit": {"oid": "50617c75adc36af379ecc3e03baf734fb2191204"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NjA2NjU2OnYy", "diffSide": "RIGHT", "path": "isochrone/src/main/java/com/graphhopper/isochrone/algorithm/ShortestPathTree.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNzoxMDozM1rOG1-oAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMjozNzozMlrOG2Ih6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1Mzc2Mg==", "bodyText": "while (!queueByZ.isEmpty()) {\n    IsoLabel head = queueByZ.poll();\n    if (!head.deleted) {\n        return getExploreValue(head) >= limit;\n    }\n}\nreturn true;\nDepending on the size of the underlying array it would probably be faster to sort it once and iterate over the array.", "url": "https://github.com/graphhopper/graphhopper/pull/2092#discussion_r459253762", "createdAt": "2020-07-23T07:10:33Z", "author": {"login": "otbutz"}, "path": "isochrone/src/main/java/com/graphhopper/isochrone/algorithm/ShortestPathTree.java", "diffHunk": "@@ -187,7 +194,11 @@ private double getExploreValue(IsoLabel label) {\n \n     @Override\n     protected boolean finished() {\n-        return queueByZ.isEmpty() || getExploreValue(queueByZ.peek()) >= limit;\n+        while (queueByZ.peek() != null && queueByZ.peek().deleted)\n+            queueByZ.poll();\n+        if (queueByZ.peek() == null)\n+            return true;\n+        return getExploreValue(queueByZ.peek()) >= limit;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50617c75adc36af379ecc3e03baf734fb2191204"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTMxODc5NA==", "bodyText": "The Java PriorityQueue is an extreme fast implementation (also backed on an array) and so it is incredible hard to beat it even if alternatives are theoretically faster.", "url": "https://github.com/graphhopper/graphhopper/pull/2092#discussion_r459318794", "createdAt": "2020-07-23T09:18:46Z", "author": {"login": "karussell"}, "path": "isochrone/src/main/java/com/graphhopper/isochrone/algorithm/ShortestPathTree.java", "diffHunk": "@@ -187,7 +194,11 @@ private double getExploreValue(IsoLabel label) {\n \n     @Override\n     protected boolean finished() {\n-        return queueByZ.isEmpty() || getExploreValue(queueByZ.peek()) >= limit;\n+        while (queueByZ.peek() != null && queueByZ.peek().deleted)\n+            queueByZ.poll();\n+        if (queueByZ.peek() == null)\n+            return true;\n+        return getExploreValue(queueByZ.peek()) >= limit;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1Mzc2Mg=="}, "originalCommit": {"oid": "50617c75adc36af379ecc3e03baf734fb2191204"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQxNjA0Mw==", "bodyText": "It would also allow to use a more finegrained Comparator and sort by deleted+z", "url": "https://github.com/graphhopper/graphhopper/pull/2092#discussion_r459416043", "createdAt": "2020-07-23T12:37:32Z", "author": {"login": "otbutz"}, "path": "isochrone/src/main/java/com/graphhopper/isochrone/algorithm/ShortestPathTree.java", "diffHunk": "@@ -187,7 +194,11 @@ private double getExploreValue(IsoLabel label) {\n \n     @Override\n     protected boolean finished() {\n-        return queueByZ.isEmpty() || getExploreValue(queueByZ.peek()) >= limit;\n+        while (queueByZ.peek() != null && queueByZ.peek().deleted)\n+            queueByZ.poll();\n+        if (queueByZ.peek() == null)\n+            return true;\n+        return getExploreValue(queueByZ.peek()) >= limit;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTI1Mzc2Mg=="}, "originalCommit": {"oid": "50617c75adc36af379ecc3e03baf734fb2191204"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4830, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}