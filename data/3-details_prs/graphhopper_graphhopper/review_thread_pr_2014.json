{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3ODczMDQ1", "number": 2014, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjoxMzozM1rOD1QJBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjoxMzozM1rOD1QJBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MTY1NTc1OnYy", "diffSide": "RIGHT", "path": "client-hc/src/test/java/com/graphhopper/api/GraphHopperWebTest.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMjoxMzozM1rOGKmGaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxMzo1OToxOVrOGKpeGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc2MzE3Ng==", "bodyText": "This does not run agains graphhopper.com? do we need the parameterization here?", "url": "https://github.com/graphhopper/graphhopper/pull/2014#discussion_r413763176", "createdAt": "2020-04-23T12:13:33Z", "author": {"login": "easbar"}, "path": "client-hc/src/test/java/com/graphhopper/api/GraphHopperWebTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.graphhopper.api;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.graphhopper.GHRequest;\n+import com.graphhopper.PathWrapper;\n+import com.graphhopper.jackson.Jackson;\n+import com.graphhopper.jackson.PathWrapperDeserializer;\n+import com.graphhopper.util.shapes.GHPoint;\n+import org.junit.Assume;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@RunWith(Parameterized.class)\n+public class GraphHopperWebTest {\n+\n+    private final GraphHopperWeb gh;\n+\n+    public GraphHopperWebTest(boolean usePost, int maxUnzippedLength) {\n+        gh = new GraphHopperWeb(null).setPostRequest(usePost).setMaxUnzippedLength(maxUnzippedLength);\n+    }\n+\n+    /**\n+     * Runs the same test with each of the supported traversal modes\n+     */\n+    @Parameterized.Parameters(name = \"POST: {0}, maxUnzippedLength: {1}\")\n+    public static Collection<Object[]> configs() {\n+        return Arrays.asList(new Object[][]{\n+                {false, -1},\n+                {true, 0},\n+                {true, 1000}\n+        });\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa3f24754c49cc84242ea3a8f1e212a012e3862f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc2Nzk3Ng==", "bodyText": "Ok, we would need it for GET and POST but the maxUnzippedLength is indeed misleading and not required.", "url": "https://github.com/graphhopper/graphhopper/pull/2014#discussion_r413767976", "createdAt": "2020-04-23T12:21:01Z", "author": {"login": "karussell"}, "path": "client-hc/src/test/java/com/graphhopper/api/GraphHopperWebTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.graphhopper.api;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.graphhopper.GHRequest;\n+import com.graphhopper.PathWrapper;\n+import com.graphhopper.jackson.Jackson;\n+import com.graphhopper.jackson.PathWrapperDeserializer;\n+import com.graphhopper.util.shapes.GHPoint;\n+import org.junit.Assume;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@RunWith(Parameterized.class)\n+public class GraphHopperWebTest {\n+\n+    private final GraphHopperWeb gh;\n+\n+    public GraphHopperWebTest(boolean usePost, int maxUnzippedLength) {\n+        gh = new GraphHopperWeb(null).setPostRequest(usePost).setMaxUnzippedLength(maxUnzippedLength);\n+    }\n+\n+    /**\n+     * Runs the same test with each of the supported traversal modes\n+     */\n+    @Parameterized.Parameters(name = \"POST: {0}, maxUnzippedLength: {1}\")\n+    public static Collection<Object[]> configs() {\n+        return Arrays.asList(new Object[][]{\n+                {false, -1},\n+                {true, 0},\n+                {true, 1000}\n+        });\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc2MzE3Ng=="}, "originalCommit": {"oid": "fa3f24754c49cc84242ea3a8f1e212a012e3862f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc2ODI1OQ==", "bodyText": "(to test that it is applied to OkHttp for POST and GET)", "url": "https://github.com/graphhopper/graphhopper/pull/2014#discussion_r413768259", "createdAt": "2020-04-23T12:21:25Z", "author": {"login": "karussell"}, "path": "client-hc/src/test/java/com/graphhopper/api/GraphHopperWebTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.graphhopper.api;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.graphhopper.GHRequest;\n+import com.graphhopper.PathWrapper;\n+import com.graphhopper.jackson.Jackson;\n+import com.graphhopper.jackson.PathWrapperDeserializer;\n+import com.graphhopper.util.shapes.GHPoint;\n+import org.junit.Assume;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@RunWith(Parameterized.class)\n+public class GraphHopperWebTest {\n+\n+    private final GraphHopperWeb gh;\n+\n+    public GraphHopperWebTest(boolean usePost, int maxUnzippedLength) {\n+        gh = new GraphHopperWeb(null).setPostRequest(usePost).setMaxUnzippedLength(maxUnzippedLength);\n+    }\n+\n+    /**\n+     * Runs the same test with each of the supported traversal modes\n+     */\n+    @Parameterized.Parameters(name = \"POST: {0}, maxUnzippedLength: {1}\")\n+    public static Collection<Object[]> configs() {\n+        return Arrays.asList(new Object[][]{\n+                {false, -1},\n+                {true, 0},\n+                {true, 1000}\n+        });\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc2MzE3Ng=="}, "originalCommit": {"oid": "fa3f24754c49cc84242ea3a8f1e212a012e3862f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc3MDI2Mw==", "bodyText": "One way to do it with Junit5 would be\n@ParameterizedTest(name = \"POST={0}\")\n@BooleanSource(values = {true, false})\npublic void myTest(boolean usePost) {\n}\n.. but then you have to create GHWeb in every test again", "url": "https://github.com/graphhopper/graphhopper/pull/2014#discussion_r413770263", "createdAt": "2020-04-23T12:24:24Z", "author": {"login": "easbar"}, "path": "client-hc/src/test/java/com/graphhopper/api/GraphHopperWebTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.graphhopper.api;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.graphhopper.GHRequest;\n+import com.graphhopper.PathWrapper;\n+import com.graphhopper.jackson.Jackson;\n+import com.graphhopper.jackson.PathWrapperDeserializer;\n+import com.graphhopper.util.shapes.GHPoint;\n+import org.junit.Assume;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@RunWith(Parameterized.class)\n+public class GraphHopperWebTest {\n+\n+    private final GraphHopperWeb gh;\n+\n+    public GraphHopperWebTest(boolean usePost, int maxUnzippedLength) {\n+        gh = new GraphHopperWeb(null).setPostRequest(usePost).setMaxUnzippedLength(maxUnzippedLength);\n+    }\n+\n+    /**\n+     * Runs the same test with each of the supported traversal modes\n+     */\n+    @Parameterized.Parameters(name = \"POST: {0}, maxUnzippedLength: {1}\")\n+    public static Collection<Object[]> configs() {\n+        return Arrays.asList(new Object[][]{\n+                {false, -1},\n+                {true, 0},\n+                {true, 1000}\n+        });\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc2MzE3Ng=="}, "originalCommit": {"oid": "fa3f24754c49cc84242ea3a8f1e212a012e3862f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc5NTY4Ng==", "bodyText": "Thanks, will use this as this is perfect here as I have to create it only once :)", "url": "https://github.com/graphhopper/graphhopper/pull/2014#discussion_r413795686", "createdAt": "2020-04-23T13:01:10Z", "author": {"login": "karussell"}, "path": "client-hc/src/test/java/com/graphhopper/api/GraphHopperWebTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.graphhopper.api;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.graphhopper.GHRequest;\n+import com.graphhopper.PathWrapper;\n+import com.graphhopper.jackson.Jackson;\n+import com.graphhopper.jackson.PathWrapperDeserializer;\n+import com.graphhopper.util.shapes.GHPoint;\n+import org.junit.Assume;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@RunWith(Parameterized.class)\n+public class GraphHopperWebTest {\n+\n+    private final GraphHopperWeb gh;\n+\n+    public GraphHopperWebTest(boolean usePost, int maxUnzippedLength) {\n+        gh = new GraphHopperWeb(null).setPostRequest(usePost).setMaxUnzippedLength(maxUnzippedLength);\n+    }\n+\n+    /**\n+     * Runs the same test with each of the supported traversal modes\n+     */\n+    @Parameterized.Parameters(name = \"POST: {0}, maxUnzippedLength: {1}\")\n+    public static Collection<Object[]> configs() {\n+        return Arrays.asList(new Object[][]{\n+                {false, -1},\n+                {true, 0},\n+                {true, 1000}\n+        });\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc2MzE3Ng=="}, "originalCommit": {"oid": "fa3f24754c49cc84242ea3a8f1e212a012e3862f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgxMzAzMw==", "bodyText": "Btw: there is no BooleanSource ... it is done via @ValueSource(booleans = {true, false}) it seems.", "url": "https://github.com/graphhopper/graphhopper/pull/2014#discussion_r413813033", "createdAt": "2020-04-23T13:52:41Z", "author": {"login": "karussell"}, "path": "client-hc/src/test/java/com/graphhopper/api/GraphHopperWebTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.graphhopper.api;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.graphhopper.GHRequest;\n+import com.graphhopper.PathWrapper;\n+import com.graphhopper.jackson.Jackson;\n+import com.graphhopper.jackson.PathWrapperDeserializer;\n+import com.graphhopper.util.shapes.GHPoint;\n+import org.junit.Assume;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@RunWith(Parameterized.class)\n+public class GraphHopperWebTest {\n+\n+    private final GraphHopperWeb gh;\n+\n+    public GraphHopperWebTest(boolean usePost, int maxUnzippedLength) {\n+        gh = new GraphHopperWeb(null).setPostRequest(usePost).setMaxUnzippedLength(maxUnzippedLength);\n+    }\n+\n+    /**\n+     * Runs the same test with each of the supported traversal modes\n+     */\n+    @Parameterized.Parameters(name = \"POST: {0}, maxUnzippedLength: {1}\")\n+    public static Collection<Object[]> configs() {\n+        return Arrays.asList(new Object[][]{\n+                {false, -1},\n+                {true, 0},\n+                {true, 1000}\n+        });\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc2MzE3Ng=="}, "originalCommit": {"oid": "fa3f24754c49cc84242ea3a8f1e212a012e3862f"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzgxODM5Mw==", "bodyText": "oh sorry my bad", "url": "https://github.com/graphhopper/graphhopper/pull/2014#discussion_r413818393", "createdAt": "2020-04-23T13:59:19Z", "author": {"login": "easbar"}, "path": "client-hc/src/test/java/com/graphhopper/api/GraphHopperWebTest.java", "diffHunk": "@@ -0,0 +1,75 @@\n+package com.graphhopper.api;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.graphhopper.GHRequest;\n+import com.graphhopper.PathWrapper;\n+import com.graphhopper.jackson.Jackson;\n+import com.graphhopper.jackson.PathWrapperDeserializer;\n+import com.graphhopper.util.shapes.GHPoint;\n+import org.junit.Assume;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.Collection;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@RunWith(Parameterized.class)\n+public class GraphHopperWebTest {\n+\n+    private final GraphHopperWeb gh;\n+\n+    public GraphHopperWebTest(boolean usePost, int maxUnzippedLength) {\n+        gh = new GraphHopperWeb(null).setPostRequest(usePost).setMaxUnzippedLength(maxUnzippedLength);\n+    }\n+\n+    /**\n+     * Runs the same test with each of the supported traversal modes\n+     */\n+    @Parameterized.Parameters(name = \"POST: {0}, maxUnzippedLength: {1}\")\n+    public static Collection<Object[]> configs() {\n+        return Arrays.asList(new Object[][]{\n+                {false, -1},\n+                {true, 0},\n+                {true, 1000}\n+        });\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzc2MzE3Ng=="}, "originalCommit": {"oid": "fa3f24754c49cc84242ea3a8f1e212a012e3862f"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4795, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}