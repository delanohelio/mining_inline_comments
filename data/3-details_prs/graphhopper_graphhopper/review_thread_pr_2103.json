{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5MTMyNDEy", "number": 2103, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDoxMzo1OFrOEgZh7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDoxMzo1OFrOEgZh7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyNDA4MTc1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNDoxMzo1OFrOHNPKow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjoyNToyNlrOHOabcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0MjAxOQ==", "bodyText": "no need for that anymore :)", "url": "https://github.com/graphhopper/graphhopper/pull/2103#discussion_r483642019", "createdAt": "2020-09-04T14:13:58Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -962,16 +962,23 @@ private boolean hasInterpolated() {\n         return \"true\".equals(ghStorage.getProperties().get(INTERPOLATION_KEY));\n     }\n \n-    void interpolateBridgesAndOrTunnels() {\n+    void interpolateBridgesTunnelsAndFerries() {\n         if (ghStorage.getEncodingManager().hasEncodedValue(RoadEnvironment.KEY)) {\n             EnumEncodedValue<RoadEnvironment> roadEnvEnc = ghStorage.getEncodingManager().getEnumEncodedValue(RoadEnvironment.KEY, RoadEnvironment.class);\n             StopWatch sw = new StopWatch().start();\n             new EdgeElevationInterpolator(ghStorage, roadEnvEnc, RoadEnvironment.TUNNEL).execute();\n             float tunnel = sw.stop().getSeconds();\n             sw = new StopWatch().start();\n             new EdgeElevationInterpolator(ghStorage, roadEnvEnc, RoadEnvironment.BRIDGE).execute();\n+            float bridge = sw.stop().getSeconds();\n+            float ferry = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8db6b9c8dd41348ada44a5ddf0b85c6714b5f6d0"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg3NTEyMw==", "bodyText": "Thank, I removed it :)", "url": "https://github.com/graphhopper/graphhopper/pull/2103#discussion_r484875123", "createdAt": "2020-09-08T12:25:26Z", "author": {"login": "boldtrn"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -962,16 +962,23 @@ private boolean hasInterpolated() {\n         return \"true\".equals(ghStorage.getProperties().get(INTERPOLATION_KEY));\n     }\n \n-    void interpolateBridgesAndOrTunnels() {\n+    void interpolateBridgesTunnelsAndFerries() {\n         if (ghStorage.getEncodingManager().hasEncodedValue(RoadEnvironment.KEY)) {\n             EnumEncodedValue<RoadEnvironment> roadEnvEnc = ghStorage.getEncodingManager().getEnumEncodedValue(RoadEnvironment.KEY, RoadEnvironment.class);\n             StopWatch sw = new StopWatch().start();\n             new EdgeElevationInterpolator(ghStorage, roadEnvEnc, RoadEnvironment.TUNNEL).execute();\n             float tunnel = sw.stop().getSeconds();\n             sw = new StopWatch().start();\n             new EdgeElevationInterpolator(ghStorage, roadEnvEnc, RoadEnvironment.BRIDGE).execute();\n+            float bridge = sw.stop().getSeconds();\n+            float ferry = -1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY0MjAxOQ=="}, "originalCommit": {"oid": "8db6b9c8dd41348ada44a5ddf0b85c6714b5f6d0"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4635, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}