{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNjkzODkw", "number": 1943, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMToyMjozMVrODke97w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDo1NToxNVrODk3veA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTgyNzAzOnYy", "diffSide": "RIGHT", "path": "reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMToyMjozMVrOFw1RxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMToyMjozMVrOFw1RxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0ODg2OA==", "bodyText": "instruction 4 that went away was \"continue onto Margarethenstra\u00dfe\"", "url": "https://github.com/graphhopper/graphhopper/pull/1943#discussion_r386748868", "createdAt": "2020-03-03T01:22:31Z", "author": {"login": "msbarry"}, "path": "reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java", "diffHunk": "@@ -968,15 +968,15 @@ public void testKremsCyclewayInstructionsWithWayTypeInfo() {\n \n         assertEquals(\"turn right onto Pfarrplatz\", il.get(2).getTurnDescription(tr));\n         assertEquals(\"turn right onto Margarethenstra\u00dfe\", il.get(3).getTurnDescription(tr));\n-        assertEquals(\"keep left onto Hoher Markt\", il.get(5).getTurnDescription(tr));\n-        assertEquals(\"turn right onto Wegscheid\", il.get(7).getTurnDescription(tr));\n-        assertEquals(\"turn right onto Ringstra\u00dfe, L73\", il.get(9).getTurnDescription(tr));\n-        assertEquals(\"keep left onto Eyblparkstra\u00dfe\", il.get(10).getTurnDescription(tr));\n-        assertEquals(\"keep left onto Austra\u00dfe\", il.get(11).getTurnDescription(tr));\n-        assertEquals(\"keep left onto Rechte Kremszeile\", il.get(12).getTurnDescription(tr));\n+        assertEquals(\"keep left onto Hoher Markt\", il.get(4).getTurnDescription(tr));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57f740ffd4159a464c262a92b72481b5382ebd9b"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NTgzMTMxOnYy", "diffSide": "RIGHT", "path": "reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMToyNTowM1rOFw1UhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QwMToyNTowM1rOFw1UhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Njc0OTU3Mw==", "bodyText": "these changes are probably because by forcing simplification to always keep the closest pillar node to each tower node, we had been getting a bit more resolution on the angles into and out of each intersection.", "url": "https://github.com/graphhopper/graphhopper/pull/1943#discussion_r386749573", "createdAt": "2020-03-03T01:25:03Z", "author": {"login": "msbarry"}, "path": "reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java", "diffHunk": "@@ -575,12 +575,12 @@ public void testMonacoVia() {\n \n         PathWrapper arsp = rsp.getBest();\n         assertEquals(6875.2, arsp.getDistance(), .1);\n-        assertEquals(171, arsp.getPoints().getSize());\n+        assertEquals(170, arsp.getPoints().getSize());\n \n         InstructionList il = arsp.getInstructions();\n         assertEquals(30, il.size());\n         assertEquals(\"continue onto Avenue des Guelfes\", il.get(0).getTurnDescription(tr));\n-        assertEquals(\"continue onto Avenue des Papalins\", il.get(1).getTurnDescription(tr));\n+        assertEquals(\"turn slight left onto Avenue des Papalins\", il.get(1).getTurnDescription(tr));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57f740ffd4159a464c262a92b72481b5382ebd9b"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTg4NjAwOnYy", "diffSide": "RIGHT", "path": "reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDo1NToxNVrOFxcB1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMToyNjoxOFrOFxdANA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4Mzc2Ng==", "bodyText": "at first I was creating a shallow copy excluding first and last points, but then I tried this approach of removing the first and last point as part of simplification and it was consistently faster than the shallow copy approach on a medium size ~1GB extract (US northeast)", "url": "https://github.com/graphhopper/graphhopper/pull/1943#discussion_r387383766", "createdAt": "2020-03-04T00:55:15Z", "author": {"login": "msbarry"}, "path": "reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java", "diffHunk": "@@ -720,12 +694,15 @@ EdgeIteratorState addEdge(int fromIndex, int toIndex, PointList pointList, IntsR\n \n         EdgeIteratorState iter = graph.edge(fromIndex, toIndex).setDistance(towerNodeDistance).setFlags(flags);\n \n-        if (nodes > 2) {\n+        if (pointList.size() > 2) {\n             if (doSimplify)\n-                simplifyAlgo.simplify(pillarNodes);\n+                simplifyAlgo.simplifyExcludeFirstLast(pointList);\n \n-            iter.setWayGeometry(pillarNodes);\n+            // If the entire way is just the first and last point, do not waste space storing an empty way geometry\n+            if (!pointList.isEmpty())\n+                iter.setWayGeometry(pointList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7a400193defa4cadaf35f376269263385b0d5dd"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM5OTczMg==", "bodyText": "alright, looks like that wasn't safe because it needs to remove first and last point whether you simplify or not.", "url": "https://github.com/graphhopper/graphhopper/pull/1943#discussion_r387399732", "createdAt": "2020-03-04T01:26:18Z", "author": {"login": "msbarry"}, "path": "reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java", "diffHunk": "@@ -720,12 +694,15 @@ EdgeIteratorState addEdge(int fromIndex, int toIndex, PointList pointList, IntsR\n \n         EdgeIteratorState iter = graph.edge(fromIndex, toIndex).setDistance(towerNodeDistance).setFlags(flags);\n \n-        if (nodes > 2) {\n+        if (pointList.size() > 2) {\n             if (doSimplify)\n-                simplifyAlgo.simplify(pillarNodes);\n+                simplifyAlgo.simplifyExcludeFirstLast(pointList);\n \n-            iter.setWayGeometry(pillarNodes);\n+            // If the entire way is just the first and last point, do not waste space storing an empty way geometry\n+            if (!pointList.isEmpty())\n+                iter.setWayGeometry(pointList);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4Mzc2Ng=="}, "originalCommit": {"oid": "e7a400193defa4cadaf35f376269263385b0d5dd"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4743, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}