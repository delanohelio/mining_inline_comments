{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MTg0MTg2", "number": 1901, "title": "Extract GraphHopperRouter from GraphHopper", "bodyText": "Work towards #1895.\nThe goal here is extracting everything that is related to processing routing requests from GraphHopper so it can be used (and tested) standalone. The idea is that we first need to load the GH data (GraphHopperStorage mostly, but also LocationIndex and LandmarkStorage which are currently not managed by GraphHopperStorage). But this loading has nothing to do with the actual routing. The new GraphHopperRouter here instead uses the loaded data and only deals with performing the routing. There are a few todos left in the code, but I think you already get the idea.", "createdAt": "2020-02-12T08:57:29Z", "url": "https://github.com/graphhopper/graphhopper/pull/1901", "merged": true, "mergeCommit": {"oid": "bcf033f6fe278e4d4346e06d70753bd84064c645"}, "closed": true, "closedAt": "2020-05-28T15:04:36Z", "author": {"login": "easbar"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcDiaKMAH2gAyMzc0MTg0MTg2OjIwMjBkM2MzZjIxMzc4Zjg1OTNiY2I4M2NjNmRlMjIxMDQwMGZiNmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclsLPjgH2gAyMzc0MTg0MTg2OmEwM2E3MzI1ZGNmOGUzNjJlZTQ0MThmMmI4OWExYzgyNjk4ZWYyYTA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2020d3c3f21378f8593bcb83cc6de2210400fb6f", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/2020d3c3f21378f8593bcb83cc6de2210400fb6f", "committedDate": "2020-02-12T08:53:12Z", "message": "Extract GraphHopperRouter from GraphHopper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92b076f24fa53c1cfaf533e6ef30c4a4e7cab372", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/92b076f24fa53c1cfaf533e6ef30c4a4e7cab372", "committedDate": "2020-02-19T06:41:51Z", "message": "Merge branch 'master' into gh_router\n\n# Conflicts:\n#\tcore/src/main/java/com/graphhopper/GraphHopper.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMTE2MzA0", "url": "https://github.com/graphhopper/graphhopper/pull/1901#pullrequestreview-363116304", "createdAt": "2020-02-23T19:21:23Z", "commit": {"oid": "92b076f24fa53c1cfaf533e6ef30c4a4e7cab372"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxOToyMToyM1rOFtSWtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yM1QxOToyMToyM1rOFtSWtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzAzMDk2NA==", "bodyText": "Maybe we get rid of the change graph endpoint and its lock mechnism for now to reduce complexity?\nMy plan was also for #1280 to reduce the number of possibilities to modify the base graph and it seems that spatial rules can replace change graph endpoint (in combination with CustomWeighting for the dynamic case).", "url": "https://github.com/graphhopper/graphhopper/pull/1901#discussion_r383030964", "createdAt": "2020-02-23T19:21:23Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/GraphHopperRouter.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.graphhopper.routing;\n+\n+import com.graphhopper.GHRequest;\n+import com.graphhopper.GHResponse;\n+import com.graphhopper.routing.ch.CHPreparationHandler;\n+import com.graphhopper.routing.ch.CHProfileSelectionException;\n+import com.graphhopper.routing.ch.CHProfileSelector;\n+import com.graphhopper.routing.ch.CHRoutingAlgorithmFactory;\n+import com.graphhopper.routing.lm.LMPreparationHandler;\n+import com.graphhopper.routing.querygraph.QueryGraph;\n+import com.graphhopper.routing.template.AlternativeRoutingTemplate;\n+import com.graphhopper.routing.template.RoundTripRoutingTemplate;\n+import com.graphhopper.routing.template.RoutingTemplate;\n+import com.graphhopper.routing.template.ViaRoutingTemplate;\n+import com.graphhopper.routing.util.*;\n+import com.graphhopper.routing.weighting.*;\n+import com.graphhopper.storage.CHProfile;\n+import com.graphhopper.storage.Graph;\n+import com.graphhopper.storage.GraphEdgeIdFinder;\n+import com.graphhopper.storage.GraphHopperStorage;\n+import com.graphhopper.storage.index.LocationIndex;\n+import com.graphhopper.storage.index.QueryResult;\n+import com.graphhopper.util.*;\n+import com.graphhopper.util.details.PathDetailsBuilderFactory;\n+import com.graphhopper.util.exceptions.PointDistanceExceededException;\n+import com.graphhopper.util.exceptions.PointOutOfBoundsException;\n+import com.graphhopper.util.shapes.BBox;\n+import com.graphhopper.util.shapes.GHPoint;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static com.graphhopper.routing.weighting.TurnCostProvider.NO_TURN_COST_PROVIDER;\n+import static com.graphhopper.routing.weighting.Weighting.INFINITE_U_TURN_COSTS;\n+import static com.graphhopper.util.Helper.DIST_3D;\n+import static com.graphhopper.util.Parameters.Algorithms.*;\n+import static com.graphhopper.util.Parameters.Routing.CURBSIDE;\n+\n+public class GraphHopperRouter {\n+    private final EncodingManager encodingManager;\n+    private final GraphHopperStorage ghStorage;\n+    private final LocationIndex locationIndex;\n+    private final LMPreparationHandler lmPreparationHandler;\n+    private final List<CHProfile> chProfiles;\n+    // todonow: too costly to import all the time, do static init or pass via constructor?\n+    private TranslationMap trMap = new TranslationMap().doImport();\n+    private RoutingConfig routingConfig;\n+    private WeightingFactory weightingFactory = new DefaultWeightingFactory();\n+    private PathDetailsBuilderFactory pathBuilderFactory = new PathDetailsBuilderFactory();\n+    private boolean chDisablingAllowed;\n+    private boolean lmDisablingAllowed;\n+    private boolean chEnabled;\n+    private boolean lmEnabled;\n+\n+    public GraphHopperRouter(GraphHopperStorage ghStorage, LocationIndex locationIndex,\n+                             // todonow: remove these dependencies\n+                             LMPreparationHandler lmPreparationHandler, CHPreparationHandler chPreparationHandler,\n+                             RoutingConfig routingConfig) {\n+        if (ghStorage.isClosed())\n+            throw new IllegalStateException(\"GH storage should not be closed\");\n+\n+        this.ghStorage = ghStorage;\n+        this.chProfiles = ghStorage.getCHProfiles();\n+        this.encodingManager = ghStorage.getEncodingManager();\n+        this.locationIndex = locationIndex;\n+        this.lmPreparationHandler = lmPreparationHandler;\n+        this.routingConfig = routingConfig;\n+        // todonow: maybe simply add setters for ch/lm enabled -> no need for lm/ch prep handlers here anymore\n+        chEnabled = chPreparationHandler.isEnabled();\n+        lmEnabled = lmPreparationHandler.isEnabled();\n+        // todonow: maybe these could go into routing config -> no need for lm/ch prep handlers here anymore\n+        chDisablingAllowed = chPreparationHandler.isDisablingAllowed();\n+        lmDisablingAllowed = lmPreparationHandler.isDisablingAllowed();\n+    }\n+\n+    // todonow: these setters are not thread-safe, do we care? maybe use builder pattern instead? or just volatile?\n+    // at least document thread safety of this class, also there is lock mechanism in GraphHopper but what if this class\n+    // is used standalone?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92b076f24fa53c1cfaf533e6ef30c4a4e7cab372"}, "originalPosition": 98}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87b02f802c87328a8cd22c834d0f1336a8830f4c", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/87b02f802c87328a8cd22c834d0f1336a8830f4c", "committedDate": "2020-05-13T17:48:56Z", "message": "minor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c3d53c888f7f3fe48413f0f125179ba0c84efb1", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/1c3d53c888f7f3fe48413f0f125179ba0c84efb1", "committedDate": "2020-05-27T13:27:22Z", "message": "Reset to current master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9709b766a8905ae244100cf30d44a5db46af881", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/b9709b766a8905ae244100cf30d44a5db46af881", "committedDate": "2020-05-27T13:27:57Z", "message": "Merge branch 'master' into gh_router\n\n# Conflicts:\n#\tcore/src/main/resources/com/graphhopper/util/zh_TW.txt"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f39a5fa8cda8519d170374a3bd40b887d19c1d2", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/4f39a5fa8cda8519d170374a3bd40b887d19c1d2", "committedDate": "2020-05-27T13:33:36Z", "message": "Merge branch 'master' into gh_router"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b837ae776b44d26c5d341a5ab6a64942b789e39", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/5b837ae776b44d26c5d341a5ab6a64942b789e39", "committedDate": "2020-05-27T13:33:43Z", "message": "Extract GraphHopperRouter from GraphHopper"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MjIzMDEz", "url": "https://github.com/graphhopper/graphhopper/pull/1901#pullrequestreview-419223013", "createdAt": "2020-05-27T13:46:10Z", "commit": {"oid": "5b837ae776b44d26c5d341a5ab6a64942b789e39"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzo0NjoxMFrOGbK47A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzo0NzozM1rOGbK88Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0MzE0OA==", "bodyText": "I basically took this code and put it into a new class...", "url": "https://github.com/graphhopper/graphhopper/pull/1901#discussion_r431143148", "createdAt": "2020-05-27T13:46:10Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -1036,211 +1001,20 @@ public GHResponse route(GHRequest request) {\n      * This method calculates the alternative path list using the low level Path objects.\n      */\n     public List<Path> calcPaths(GHRequest request, GHResponse ghRsp) {\n+        return createGraphHopperRouter().route(request, ghRsp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b837ae776b44d26c5d341a5ab6a64942b789e39"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0NDE3Nw==", "bodyText": "Similar to GraphHopper these PreparationHandlers are concerned with both the 'import' and the 'algorithm creation' (when routing), but they are mostly about preparation and I definitely want to get rid of them here. -> They are gone now :)", "url": "https://github.com/graphhopper/graphhopper/pull/1901#discussion_r431144177", "createdAt": "2020-05-27T13:47:33Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/GraphHopperRouter.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.graphhopper.routing;\n+\n+import com.graphhopper.GHRequest;\n+import com.graphhopper.GHResponse;\n+import com.graphhopper.config.LMProfile;\n+import com.graphhopper.config.Profile;\n+import com.graphhopper.routing.ch.CHPreparationHandler;\n+import com.graphhopper.routing.ch.CHRoutingAlgorithmFactory;\n+import com.graphhopper.routing.lm.LMPreparationHandler;\n+import com.graphhopper.routing.querygraph.QueryGraph;\n+import com.graphhopper.routing.template.AlternativeRoutingTemplate;\n+import com.graphhopper.routing.template.RoundTripRoutingTemplate;\n+import com.graphhopper.routing.template.RoutingTemplate;\n+import com.graphhopper.routing.template.ViaRoutingTemplate;\n+import com.graphhopper.routing.util.DefaultEdgeFilter;\n+import com.graphhopper.routing.util.EncodingManager;\n+import com.graphhopper.routing.util.FlagEncoder;\n+import com.graphhopper.routing.util.TraversalMode;\n+import com.graphhopper.routing.weighting.BlockAreaWeighting;\n+import com.graphhopper.routing.weighting.Weighting;\n+import com.graphhopper.storage.CHConfig;\n+import com.graphhopper.storage.Graph;\n+import com.graphhopper.storage.GraphEdgeIdFinder;\n+import com.graphhopper.storage.GraphHopperStorage;\n+import com.graphhopper.storage.index.LocationIndex;\n+import com.graphhopper.storage.index.QueryResult;\n+import com.graphhopper.util.*;\n+import com.graphhopper.util.details.PathDetailsBuilderFactory;\n+import com.graphhopper.util.exceptions.PointDistanceExceededException;\n+import com.graphhopper.util.exceptions.PointOutOfBoundsException;\n+import com.graphhopper.util.shapes.BBox;\n+import com.graphhopper.util.shapes.GHPoint;\n+\n+import java.util.*;\n+\n+import static com.graphhopper.routing.weighting.Weighting.INFINITE_U_TURN_COSTS;\n+import static com.graphhopper.util.Helper.DIST_EARTH;\n+import static com.graphhopper.util.Parameters.Algorithms.*;\n+import static com.graphhopper.util.Parameters.Routing.CURBSIDE;\n+import static com.graphhopper.util.Parameters.Routing.POINT_HINT;\n+\n+public class GraphHopperRouter {\n+    private final GraphHopperStorage ghStorage;\n+    private final EncodingManager encodingManager;\n+    private final LocationIndex locationIndex;\n+    private final Map<String, Profile> profilesByName;\n+    private final PathDetailsBuilderFactory pathDetailsBuilderFactory;\n+    private final TranslationMap translationMap;\n+    private final RoutingConfig routingConfig;\n+    private final WeightingFactory weightingFactory;\n+    private final CHPreparationHandler chPreparationHandler;\n+    private final LMPreparationHandler lmPreparationHandler;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b837ae776b44d26c5d341a5ab6a64942b789e39"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MjI3NjA0", "url": "https://github.com/graphhopper/graphhopper/pull/1901#pullrequestreview-419227604", "createdAt": "2020-05-27T13:50:00Z", "commit": {"oid": "5b837ae776b44d26c5d341a5ab6a64942b789e39"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzo1MDowMFrOGbLGAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzo1MDowMFrOGbLGAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0NjQ5OQ==", "bodyText": "Ugh looks like this file had different line endings...", "url": "https://github.com/graphhopper/graphhopper/pull/1901#discussion_r431146499", "createdAt": "2020-05-27T13:50:00Z", "author": {"login": "easbar"}, "path": "core/src/main/resources/com/graphhopper/util/zh_TW.txt", "diffHunk": "@@ -1,82 +1,82 @@\n # do not edit manually, instead use spreadsheet https://t.co/f086oJXAEI and script ./core/files/update-translations.sh\n \n-continue=\u7e7c\u7e8c\r\n-continue_onto=\u7e7c\u7e8c\u884c\u99db\u5230 %1$s\r\n-turn_left=\u5de6\u8f49\r\n-turn_right=\u53f3\u8f49\r\n-turn_slight_left=\u5fae\u9760\u5de6\u8f49\r\n-turn_slight_right=\u5fae\u9760\u53f3\u8f49\r\n-turn_sharp_left=\u5de6\u6025\u8f49\r\n-turn_sharp_right=\u53f3\u6025\u8f49\r\n-keep_left=\u4fdd\u6301\u5de6\u5074\r\n-keep_right=\u4fdd\u6301\u53f3\u5074\r\n-turn_onto=%1$s \u9032\u5165%2$s\r\n-u_turn=\u8ff4\u8f49\r\n-unknown=\u672a\u77e5\u6307\u793a\u6a19\u8a8c '%1$s'\r\n-web.search_button=\u641c\u5c0b\r\n-web.from_hint=\u8d77\u9ede\r\n-web.via_hint=\u9014\u7d93\r\n-web.to_hint=\u8fc4\u9ede\r\n-web.more_button=\u66f4\u591a\r\n-web.gpx_export_button=\u532f\u51faGPS\r\n-web.route_info=%1$s \u9700\u6642 %2$s\r\n-web.pt_route_info=\u65bc %1$s \u62b5\u9054\uff0c%2$s \u6b21\u8f49\u4e58 (%3$s)\r\n-web.pt_route_info_walking=\u65bc %1$s \u62b5\u9054\uff0c\u50c5\u6b65\u884c (%2$s)\r\n-web.locations_not_found=\u7121\u6cd5\u9032\u884c\u898f\u5283\u3002\u7121\u6cd5\u5728\u6b64\u5340\u57df\u5167\u627e\u5230\u6307\u5b9a\u7684\u5730\u9ede\r\n-web.bike=\u81ea\u884c\u8eca\r\n-web.racingbike=\u7af6\u6280\u81ea\u884c\u8eca\r\n-web.mtb=\u767b\u5c71\u8eca\r\n-web.car=\u6c7d\u8eca\r\n-web.foot=\u6b65\u884c\r\n-web.hike=\u5065\u884c\r\n-web.small_truck=\u5c0f\u8ca8\u8eca\r\n-web.bus=\u516c\u8eca\r\n-web.truck=\u8ca8\u8eca\r\n-web.staticlink=\u6c38\u4e45\u93c8\u7d50\r\n-web.motorcycle=\u6469\u6258\u8eca\r\n-via=\u9014\u7d93\r\n-finish=\u62b5\u9054\u76ee\u7684\u5730\r\n-hour_abbr=\u5c0f\u6642\r\n-day_abbr=\u5929\r\n-min_abbr=\u5206\u9418\r\n-km_abbr=\u516c\u91cc\r\n-m_abbr=\u516c\u5c3a\r\n-mi_abbr=\u82f1\u91cc\r\n-ft_abbr=\u82f1\u5c3a\r\n-road=\u9053\u8def\r\n-off_bike=\u4e0b\u81ea\u884c\u8eca\r\n-cycleway=\u81ea\u884c\u8eca\u9053\r\n-way=\u8def\r\n-small_way=\u5c0f\u8def\r\n-paved=\u8def\u9762\u6709\u92ea\u8a2d\r\n-unpaved=\u8def\u9762\u7121\u92ea\u8a2d\r\n-stopover=\u4e2d\u9014\u9ede %1$s\r\n-roundabout_enter=\u9032\u5165\u5713\u74b0\r\n-roundabout_exit=\u65bc %1$s \u500b\u51fa\u53e3\u96e2\u958b\u5713\u74b0\r\n-roundabout_exit_onto=\u65bc %1$s \u500b\u51fa\u53e3\u96e2\u958b\u5713\u74b0\uff0c\u9032\u5165 %2$s\r\n-total_ascend=\u7e3d\u5171\u4e0a\u6607 %1$s\r\n-total_descend=\u7e3d\u5171\u4e0b\u964d %1$s\r\n-way_contains_ford=\u8def\u5f91\u4e2d\u542b\u6709\u6dfa\u7058\r\n-way_contains_ferry=\u642d\u4e58\u6e21\u8f2a\r\n-way_contains_private=\u79c1\u4eba\u9053\u8def\r\n-way_contains_toll=\u6536\u8cbb\u9053\u8def\r\n-pt_start_trip=\u9032\u5165 %1$s\r\n-pt_end_trip=\u96e2\u958b %1$s\r\n-pt_transfer_to=\u8b8a\u63db\u81f3 %1$s\r\n-web.start_label=\u51fa\u767c\u9ede\r\n-web.intermediate_label=\u9014\u7d93\u9ede\r\n-web.end_label=\u62b5\u9054\u9ede\r\n-web.set_start=\u8a2d\u70ba\u51fa\u767c\u9ede\r\n-web.set_intermediate=\u8a2d\u70ba\u9014\u7d93\u9ede\r\n-web.set_end=\u8a2d\u70ba\u62b5\u9054\u9ede\r\n-web.center_map=\u8a2d\u70ba\u5730\u5716\u4e2d\u5fc3\r\n-web.show_coords=\u986f\u793a\u5750\u6a19\r\n-web.route=\u8def\u7dda\r\n-web.delete_from_route=\u5f9e\u8def\u7dda\u4e2d\u79fb\u9664\r\n-web.marker=\u6a19\u8a18\r\n-web.gh_offline_info=GraphHopper API \u96e2\u7dda\u72c0\u614b\uff1f\r\n-web.refresh_button=\u5237\u65b0\u9801\u9762\r\n-web.server_status=\u72c0\u614b\r\n-web.zoom_in=\u653e\u5927\r\n-web.zoom_out=\u7e2e\u5c0f\r\n+continue=\u7e7c\u7e8c\n+continue_onto=\u7e7c\u7e8c\u884c\u99db\u5230 %1$s\n+turn_left=\u5de6\u8f49\n+turn_right=\u53f3\u8f49\n+turn_slight_left=\u5fae\u9760\u5de6\u8f49\n+turn_slight_right=\u5fae\u9760\u53f3\u8f49\n+turn_sharp_left=\u5de6\u6025\u8f49\n+turn_sharp_right=\u53f3\u6025\u8f49\n+keep_left=\u4fdd\u6301\u5de6\u5074\n+keep_right=\u4fdd\u6301\u53f3\u5074\n+turn_onto=%1$s \u9032\u5165%2$s\n+u_turn=\u8ff4\u8f49\n+unknown=\u672a\u77e5\u6307\u793a\u6a19\u8a8c '%1$s'\n+web.search_button=\u641c\u5c0b\n+web.from_hint=\u8d77\u9ede\n+web.via_hint=\u9014\u7d93\n+web.to_hint=\u8fc4\u9ede\n+web.more_button=\u66f4\u591a\n+web.gpx_export_button=\u532f\u51faGPS\n+web.route_info=%1$s \u9700\u6642 %2$s\n+web.pt_route_info=\u65bc %1$s \u62b5\u9054\uff0c%2$s \u6b21\u8f49\u4e58 (%3$s)\n+web.pt_route_info_walking=\u65bc %1$s \u62b5\u9054\uff0c\u50c5\u6b65\u884c (%2$s)\n+web.locations_not_found=\u7121\u6cd5\u9032\u884c\u898f\u5283\u3002\u7121\u6cd5\u5728\u6b64\u5340\u57df\u5167\u627e\u5230\u6307\u5b9a\u7684\u5730\u9ede\n+web.bike=\u81ea\u884c\u8eca\n+web.racingbike=\u7af6\u6280\u81ea\u884c\u8eca\n+web.mtb=\u767b\u5c71\u8eca\n+web.car=\u6c7d\u8eca\n+web.foot=\u6b65\u884c\n+web.hike=\u5065\u884c\n+web.small_truck=\u5c0f\u8ca8\u8eca\n+web.bus=\u516c\u8eca\n+web.truck=\u8ca8\u8eca\n+web.staticlink=\u6c38\u4e45\u93c8\u7d50\n+web.motorcycle=\u6469\u6258\u8eca\n+via=\u9014\u7d93\n+finish=\u62b5\u9054\u76ee\u7684\u5730\n+hour_abbr=\u5c0f\u6642\n+day_abbr=\u5929\n+min_abbr=\u5206\u9418\n+km_abbr=\u516c\u91cc\n+m_abbr=\u516c\u5c3a\n+mi_abbr=\u82f1\u91cc\n+ft_abbr=\u82f1\u5c3a\n+road=\u9053\u8def\n+off_bike=\u4e0b\u81ea\u884c\u8eca\n+cycleway=\u81ea\u884c\u8eca\u9053\n+way=\u8def\n+small_way=\u5c0f\u8def\n+paved=\u8def\u9762\u6709\u92ea\u8a2d\n+unpaved=\u8def\u9762\u7121\u92ea\u8a2d\n+stopover=\u4e2d\u9014\u9ede %1$s\n+roundabout_enter=\u9032\u5165\u5713\u74b0\n+roundabout_exit=\u65bc %1$s \u500b\u51fa\u53e3\u96e2\u958b\u5713\u74b0\n+roundabout_exit_onto=\u65bc %1$s \u500b\u51fa\u53e3\u96e2\u958b\u5713\u74b0\uff0c\u9032\u5165 %2$s\n+total_ascend=\u7e3d\u5171\u4e0a\u6607 %1$s\n+total_descend=\u7e3d\u5171\u4e0b\u964d %1$s\n+way_contains_ford=\u8def\u5f91\u4e2d\u542b\u6709\u6dfa\u7058\n+way_contains_ferry=\u642d\u4e58\u6e21\u8f2a", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b837ae776b44d26c5d341a5ab6a64942b789e39"}, "originalPosition": 139}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3ca49449157d88e9fb1c957cd83e1fe7b1670d05", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/3ca49449157d88e9fb1c957cd83e1fe7b1670d05", "committedDate": "2020-05-27T13:55:50Z", "message": "revert file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cdc500db4eae6d1cb648b7cda6e438b789b2f72", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/5cdc500db4eae6d1cb648b7cda6e438b789b2f72", "committedDate": "2020-05-27T21:31:07Z", "message": "Replace some method calls: ghStorage.getCHGraph(CHConfig) -> ghStorage.getCHGraph(String)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea1edbbf9331dbbaa224fdfb3f40a923b8da43f2", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/ea1edbbf9331dbbaa224fdfb3f40a923b8da43f2", "committedDate": "2020-05-27T21:36:43Z", "message": "Remove exception from GraphHopperStorage#getCHGraph(String)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb469bfdc593f415578bf5bf4268b3747b742428", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/fb469bfdc593f415578bf5bf4268b3747b742428", "committedDate": "2020-05-27T21:38:41Z", "message": "Remove CHPreparationHandler field from GraphHopperRouter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ae75366b9d533ff7fe80c609e3d1fb197a35cc3", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/7ae75366b9d533ff7fe80c609e3d1fb197a35cc3", "committedDate": "2020-05-27T22:01:42Z", "message": "Remove LMPreparationHandler field from GraphHopperRouter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc160916e8eb2f880d330884ae5240b2b14785a6", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/fc160916e8eb2f880d330884ae5240b2b14785a6", "committedDate": "2020-05-28T07:53:11Z", "message": "Move CH/LMDisablingAllowed flags into RoutingConfig, remove CH/LMPreparationHandler dependencies from GHRouter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abf09ce91647bf4df2b5407879c57567f8893bd2", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/abf09ce91647bf4df2b5407879c57567f8893bd2", "committedDate": "2020-05-28T08:03:28Z", "message": "Remove setters for routing config properties from GraphHopper, add getRoutingConfig instead"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac573ae3ccb91f24b61fec8a2b2faa62621b3c56", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/ac573ae3ccb91f24b61fec8a2b2faa62621b3c56", "committedDate": "2020-05-28T08:15:43Z", "message": "Remove GraphHopper#getAlgorithmFactory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f0cfb48202ab7edb136a9567a8e963eebcaba9c", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/2f0cfb48202ab7edb136a9567a8e963eebcaba9c", "committedDate": "2020-05-28T08:22:44Z", "message": "Add javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d805e7c46af06f5edfa97dd564b42435207928d8", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/d805e7c46af06f5edfa97dd564b42435207928d8", "committedDate": "2020-05-28T08:30:43Z", "message": "Use EncodingManager from GraphHopperStorage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5ODkwNzcw", "url": "https://github.com/graphhopper/graphhopper/pull/1901#pullrequestreview-419890770", "createdAt": "2020-05-28T08:32:33Z", "commit": {"oid": "d805e7c46af06f5edfa97dd564b42435207928d8"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODozMjozNFrOGbrDoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwODozODo0NFrOGbrSPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY3MDE3Ng==", "bodyText": "Should we rename this to RouterConfig, because it configures the behavior of GraphHopperRouter? -> Update: Renamed both here: 8ba19ce", "url": "https://github.com/graphhopper/graphhopper/pull/1901#discussion_r431670176", "createdAt": "2020-05-28T08:32:34Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/RoutingConfig.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.graphhopper.routing;\n+\n+/**\n+ * This class contains various parameters that control the behavior of {@link GraphHopperRouter}.\n+ */\n+public class RoutingConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d805e7c46af06f5edfa97dd564b42435207928d8"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY3MDcyMw==", "bodyText": "See my comment about the GraphHopperRouter constructor.", "url": "https://github.com/graphhopper/graphhopper/pull/1901#discussion_r431670723", "createdAt": "2020-05-28T08:33:30Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -1036,211 +974,33 @@ public GHResponse route(GHRequest request) {\n      * This method calculates the alternative path list using the low level Path objects.\n      */\n     public List<Path> calcPaths(GHRequest request, GHResponse ghRsp) {\n+        return createGraphHopperRouter().route(request, ghRsp);\n+    }\n+\n+    private GraphHopperRouter createGraphHopperRouter() {\n         if (ghStorage == null || !fullyLoaded)\n             throw new IllegalStateException(\"Do a successful call to load or importOrLoad before routing\");\n-\n         if (ghStorage.isClosed())\n             throw new IllegalStateException(\"You need to create a new GraphHopper instance as it is already closed\");\n-\n         if (locationIndex == null)\n             throw new IllegalStateException(\"Location index not initialized\");\n \n-        try {\n-            validateRequest(request);\n-            final boolean disableCH = getDisableCH(request.getHints());\n-            final boolean disableLM = getDisableLM(request.getHints());\n-            Profile profile = profilesByName.get(request.getProfile());\n-            if (profile == null)\n-                throw new IllegalArgumentException(\"The requested profile '\" + request.getProfile() + \"' does not exist.\\nAvailable profiles: \" + profilesByName.keySet());\n-            if (!profile.isTurnCosts() && !request.getCurbsides().isEmpty())\n-                throw new IllegalArgumentException(\"To make use of the \" + CURBSIDE + \" parameter you need to use a profile that supports turn costs\" +\n-                        \"\\nThe following profiles do support turn costs: \" + getTurnCostProfiles());\n-\n-            // todo later: should we be able to control this using the edge_based parameter?\n-            TraversalMode tMode = profile.isTurnCosts() ? TraversalMode.EDGE_BASED : TraversalMode.NODE_BASED;\n-            RoutingAlgorithmFactory algorithmFactory = getAlgorithmFactory(profile.getName(), disableCH, disableLM);\n-            Weighting weighting;\n-            Graph graph = ghStorage;\n-            if (chPreparationHandler.isEnabled() && !disableCH) {\n-                if (!(algorithmFactory instanceof CHRoutingAlgorithmFactory))\n-                    throw new IllegalStateException(\"Although CH was enabled a non-CH algorithm factory was returned \" + algorithmFactory);\n-\n-                if (request.getHints().has(Routing.BLOCK_AREA))\n-                    throw new IllegalArgumentException(\"When CH is enabled the \" + Parameters.Routing.BLOCK_AREA + \" cannot be specified\");\n-\n-                CHConfig chConfig = ((CHRoutingAlgorithmFactory) algorithmFactory).getCHConfig();\n-                weighting = chConfig.getWeighting();\n-                graph = ghStorage.getCHGraph(chConfig);\n-            } else {\n-                checkNonChMaxWaypointDistance(request.getPoints());\n-                final int uTurnCostsInt = request.getHints().getInt(Routing.U_TURN_COSTS, INFINITE_U_TURN_COSTS);\n-                if (uTurnCostsInt != INFINITE_U_TURN_COSTS && !tMode.isEdgeBased()) {\n-                    throw new IllegalArgumentException(\"Finite u-turn costs can only be used for edge-based routing, you need to use a profile that\" +\n-                            \"supports turn costs. Currently the following profiles that support turn costs are available: \" + getTurnCostProfiles());\n-                }\n-                FlagEncoder encoder = encodingManager.getEncoder(profile.getVehicle());\n-                weighting = createWeighting(profile, request.getHints());\n-                if (request.getHints().has(Routing.BLOCK_AREA))\n-                    weighting = new BlockAreaWeighting(weighting, GraphEdgeIdFinder.createBlockArea(ghStorage, locationIndex,\n-                            request.getPoints(), request.getHints(), DefaultEdgeFilter.allEdges(encoder)));\n-            }\n-            ghRsp.addDebugInfo(\"tmode:\" + tMode.toString());\n-\n-            String algoStr = request.getAlgorithm();\n-            if (algoStr.isEmpty())\n-                algoStr = chPreparationHandler.isEnabled() && !disableCH ? DIJKSTRA_BI : ASTAR_BI;\n-            RoutingTemplate routingTemplate = createRoutingTemplate(request, ghRsp, algoStr, weighting);\n-\n-            StopWatch sw = new StopWatch().start();\n-            List<QueryResult> qResults = routingTemplate.lookup(request.getPoints());\n-            ghRsp.addDebugInfo(\"idLookup:\" + sw.stop().getSeconds() + \"s\");\n-            if (ghRsp.hasErrors())\n-                return Collections.emptyList();\n-\n-            QueryGraph queryGraph = QueryGraph.create(graph, qResults);\n-            int maxVisitedNodesForRequest = request.getHints().getInt(Routing.MAX_VISITED_NODES, routingConfig.getMaxVisitedNodes());\n-            if (maxVisitedNodesForRequest > routingConfig.getMaxVisitedNodes())\n-                throw new IllegalArgumentException(\"The max_visited_nodes parameter has to be below or equal to:\" + routingConfig.getMaxVisitedNodes());\n-\n-            AlgorithmOptions algoOpts = AlgorithmOptions.start().\n-                    algorithm(algoStr).\n-                    traversalMode(tMode).\n-                    weighting(weighting).\n-                    maxVisitedNodes(maxVisitedNodesForRequest).\n-                    hints(request.getHints()).\n-                    build();\n-\n-            // do the actual route calculation !\n-            List<Path> altPaths = routingTemplate.calcPaths(queryGraph, algorithmFactory, algoOpts);\n-\n-            boolean tmpEnableInstructions = request.getHints().getBool(Routing.INSTRUCTIONS, encodingManager.isEnableInstructions());\n-            boolean tmpCalcPoints = request.getHints().getBool(Routing.CALC_POINTS, routingConfig.isCalcPoints());\n-            double wayPointMaxDistance = request.getHints().getDouble(Routing.WAY_POINT_MAX_DISTANCE, 1d);\n-\n-            DouglasPeucker peucker = new DouglasPeucker().setMaxDistance(wayPointMaxDistance);\n-            PathMerger pathMerger = new PathMerger(queryGraph.getBaseGraph(), weighting).\n-                    setCalcPoints(tmpCalcPoints).\n-                    setDouglasPeucker(peucker).\n-                    setEnableInstructions(tmpEnableInstructions).\n-                    setPathDetailsBuilders(pathBuilderFactory, request.getPathDetails()).\n-                    setSimplifyResponse(routingConfig.isSimplifyResponse() && wayPointMaxDistance > 0);\n-\n-            if (!request.getHeadings().isEmpty())\n-                pathMerger.setFavoredHeading(request.getHeadings().get(0));\n-\n-            routingTemplate.finish(pathMerger, trMap.getWithFallBack(request.getLocale()));\n-            return altPaths;\n-        } catch (IllegalArgumentException ex) {\n-            ghRsp.addError(ex);\n-            return Collections.emptyList();\n-        }\n-    }\n-\n-    private List<String> getTurnCostProfiles() {\n-        List<String> turnCostProfiles = new ArrayList<>();\n-        for (Profile p : profilesByName.values()) {\n-            if (p.isTurnCosts()) {\n-                turnCostProfiles.add(p.getName());\n-            }\n+        Map<String, CHGraph> chGraphs = new LinkedHashMap<>();\n+        for (CHProfile chProfile : chPreparationHandler.getCHProfiles()) {\n+            String chGraphName = chPreparationHandler.getPreparation(chProfile.getProfile()).getCHConfig().getName();\n+            chGraphs.put(chProfile.getProfile(), ghStorage.getCHGraph(chGraphName));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d805e7c46af06f5edfa97dd564b42435207928d8"}, "originalPosition": 290}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY3MTYzNA==", "bodyText": "GraphHopperRouter needs a way to obtain the CH/LM helper structures for a given profile. Once we have it, some kind of 'graph-database' could replace this, but for now I am simply using these maps.", "url": "https://github.com/graphhopper/graphhopper/pull/1901#discussion_r431671634", "createdAt": "2020-05-28T08:35:02Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/GraphHopperRouter.java", "diffHunk": "@@ -0,0 +1,320 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.graphhopper.routing;\n+\n+import com.graphhopper.GHRequest;\n+import com.graphhopper.GHResponse;\n+import com.graphhopper.config.Profile;\n+import com.graphhopper.routing.ch.CHRoutingAlgorithmFactory;\n+import com.graphhopper.routing.lm.LMRoutingAlgorithmFactory;\n+import com.graphhopper.routing.lm.LandmarkStorage;\n+import com.graphhopper.routing.querygraph.QueryGraph;\n+import com.graphhopper.routing.template.AlternativeRoutingTemplate;\n+import com.graphhopper.routing.template.RoundTripRoutingTemplate;\n+import com.graphhopper.routing.template.RoutingTemplate;\n+import com.graphhopper.routing.template.ViaRoutingTemplate;\n+import com.graphhopper.routing.util.DefaultEdgeFilter;\n+import com.graphhopper.routing.util.EncodingManager;\n+import com.graphhopper.routing.util.FlagEncoder;\n+import com.graphhopper.routing.util.TraversalMode;\n+import com.graphhopper.routing.weighting.BlockAreaWeighting;\n+import com.graphhopper.routing.weighting.Weighting;\n+import com.graphhopper.storage.*;\n+import com.graphhopper.storage.index.LocationIndex;\n+import com.graphhopper.storage.index.QueryResult;\n+import com.graphhopper.util.*;\n+import com.graphhopper.util.details.PathDetailsBuilderFactory;\n+import com.graphhopper.util.exceptions.PointDistanceExceededException;\n+import com.graphhopper.util.exceptions.PointOutOfBoundsException;\n+import com.graphhopper.util.shapes.BBox;\n+import com.graphhopper.util.shapes.GHPoint;\n+\n+import java.util.*;\n+\n+import static com.graphhopper.routing.weighting.Weighting.INFINITE_U_TURN_COSTS;\n+import static com.graphhopper.util.Helper.DIST_EARTH;\n+import static com.graphhopper.util.Parameters.Algorithms.*;\n+import static com.graphhopper.util.Parameters.Routing.CURBSIDE;\n+import static com.graphhopper.util.Parameters.Routing.POINT_HINT;\n+\n+public class GraphHopperRouter {\n+    private final GraphHopperStorage ghStorage;\n+    private final EncodingManager encodingManager;\n+    private final LocationIndex locationIndex;\n+    private final Map<String, Profile> profilesByName;\n+    private final PathDetailsBuilderFactory pathDetailsBuilderFactory;\n+    private final TranslationMap translationMap;\n+    private final RoutingConfig routingConfig;\n+    private final WeightingFactory weightingFactory;\n+    // todo: these should not be necessary anymore as soon as GraphHopperStorage (or something that replaces) it acts\n+    // like a 'graph database'\n+    private final Map<String, CHGraph> chGraphs;\n+    private final Map<String, LandmarkStorage> landmarks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d805e7c46af06f5edfa97dd564b42435207928d8"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY3Mjg5Mw==", "bodyText": "This was a bit weird. The default for LM disabling allowed was false, but still this returned true whenever there were some LM profiles. -> I changed the default for lmDisablingAllowed to true in RouterConfig now. Is this ok?", "url": "https://github.com/graphhopper/graphhopper/pull/1901#discussion_r431672893", "createdAt": "2020-05-28T08:37:05Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/lm/LMPreparationHandler.java", "diffHunk": "@@ -93,15 +85,6 @@ public int getLandmarks() {\n         return landmarkCount;\n     }\n \n-    public LMPreparationHandler setDisablingAllowed(boolean disablingAllowed) {\n-        this.disablingAllowed = disablingAllowed;\n-        return this;\n-    }\n-\n-    public final boolean isDisablingAllowed() {\n-        return disablingAllowed || !isEnabled();\n-    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d805e7c46af06f5edfa97dd564b42435207928d8"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY3MzkxOA==", "bodyText": "I changed these, because getting a CH graph should be done by passing its name, not the entire CHConfig (which I want to get rid of anyway).", "url": "https://github.com/graphhopper/graphhopper/pull/1901#discussion_r431673918", "createdAt": "2020-05-28T08:38:44Z", "author": {"login": "easbar"}, "path": "tools/src/main/java/com/graphhopper/tools/Measurement.java", "diffHunk": "@@ -242,7 +242,7 @@ protected DataReader importData() throws IOException {\n                 System.gc();\n                 if (!hopper.getCHPreparationHandler().getNodeBasedCHConfigs().isEmpty()) {\n                     CHConfig chConfig = hopper.getCHPreparationHandler().getNodeBasedCHConfigs().get(0);\n-                    CHGraph lg = g.getCHGraph(chConfig);\n+                    CHGraph lg = g.getCHGraph(chConfig.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d805e7c46af06f5edfa97dd564b42435207928d8"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5OTE4MDI1", "url": "https://github.com/graphhopper/graphhopper/pull/1901#pullrequestreview-419918025", "createdAt": "2020-05-28T09:07:17Z", "commit": {"oid": "d805e7c46af06f5edfa97dd564b42435207928d8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTowNzoxN1rOGbsUlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOTowNzoxN1rOGbsUlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY5MDkwMg==", "bodyText": "Is this file even needed still?", "url": "https://github.com/graphhopper/graphhopper/pull/1901#discussion_r431690902", "createdAt": "2020-05-28T09:07:17Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/util/EngineWarmUp.java", "diffHunk": "@@ -59,8 +59,8 @@ private static void warmUpCHSubNetwork(GraphHopper graphHopper, int iterations)\n         Random rand = new Random(0);\n \n         for (int i = 0; i < iterations; i++) {\n-            int startNode = rand.nextInt(graphHopper.getMaxVisitedNodes() + 1);\n-            int endNode = rand.nextInt(graphHopper.getMaxVisitedNodes() + 1);\n+            int startNode = rand.nextInt(graphHopper.getRoutingConfig().getMaxVisitedNodes() + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d805e7c46af06f5edfa97dd564b42435207928d8"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ba19ce3752e3b4e7d4dabb24ffce48bc5dde32e", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/8ba19ce3752e3b4e7d4dabb24ffce48bc5dde32e", "committedDate": "2020-05-28T09:09:12Z", "message": "Rename: RoutingConfig -> RouterConfig, GraphHopperRouter -> Router"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5OTY0NDEw", "url": "https://github.com/graphhopper/graphhopper/pull/1901#pullrequestreview-419964410", "createdAt": "2020-05-28T10:10:07Z", "commit": {"oid": "8ba19ce3752e3b4e7d4dabb24ffce48bc5dde32e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDoxMDowOFrOGbugPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDoxMDowOFrOGbugPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTcyNjY1NA==", "bodyText": "Can we throw this inside ghStorage.getCHGraph?", "url": "https://github.com/graphhopper/graphhopper/pull/1901#discussion_r431726654", "createdAt": "2020-05-28T10:10:08Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java", "diffHunk": "@@ -79,7 +79,9 @@ public static PrepareContractionHierarchies fromGraphHopperStorage(GraphHopperSt\n     }\n \n     private PrepareContractionHierarchies(GraphHopperStorage ghStorage, CHConfig chConfig) {\n-        this.chGraph = ghStorage.getCHGraph(chConfig);\n+        chGraph = ghStorage.getCHGraph(chConfig.getName());\n+        if (chGraph == null)\n+            throw new IllegalArgumentException(\"There is no CH graph '\" + chConfig.getName() + \"', existing: \" + ghStorage.getCHGraphNames());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8ba19ce3752e3b4e7d4dabb24ffce48bc5dde32e"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d07c315aabaf21165309b3ab1f6fb15d1d39736", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/8d07c315aabaf21165309b3ab1f6fb15d1d39736", "committedDate": "2020-05-28T10:29:50Z", "message": "Remove EngineWarmup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9ee70271b81e06c5281892411a433fa34c3a2be", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/f9ee70271b81e06c5281892411a433fa34c3a2be", "committedDate": "2020-05-28T11:28:44Z", "message": "Remove todos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a03a7325dcf8e362ee4418f2b89a1c82698ef2a0", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/a03a7325dcf8e362ee4418f2b89a1c82698ef2a0", "committedDate": "2020-05-28T11:29:23Z", "message": "Merge branch 'master' into gh_router"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4553, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}