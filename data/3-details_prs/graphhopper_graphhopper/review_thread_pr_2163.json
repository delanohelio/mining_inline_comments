{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5NjE3OTYx", "number": 2163, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMTowNDo1M1rOE0wd7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMTo1ODozMFrOE0xlWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzU1NTAzOnYy", "diffSide": "RIGHT", "path": "api/src/test/java/com/graphhopper/util/HelperTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMTowNDo1M1rOHsp4SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjoyNToyNlrOHssf-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4NTU0NQ==", "bodyText": "I ran into this while working on the example? How is this meant to work? Currently Helper.round(1040.02125359, -2) returns 1000.", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516585545", "createdAt": "2020-11-03T11:04:53Z", "author": {"login": "easbar"}, "path": "api/src/test/java/com/graphhopper/util/HelperTest.java", "diffHunk": "@@ -55,6 +55,8 @@ public void testRound() {\n         assertEquals(100.94, Helper.round(100.94, 2), 1e-7);\n         assertEquals(100.9, Helper.round(100.94, 1), 1e-7);\n         assertEquals(101.0, Helper.round(100.95, 1), 1e-7);\n+        // todonow\n+        assertEquals(1040.02, Helper.round(1040.02125359, -2), 1.e-7);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f496d4160783bca5bcf27fb94790f0e40530efb5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU5MzUxOA==", "bodyText": "Ah now I get it: -2 means the decimal point is shifted to the left (by two). Rather counter-intuitive if you ask me because setting the exponent to -2 I would expect the precision to be 10^-2, not 10^2`.", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516593518", "createdAt": "2020-11-03T11:19:27Z", "author": {"login": "easbar"}, "path": "api/src/test/java/com/graphhopper/util/HelperTest.java", "diffHunk": "@@ -55,6 +55,8 @@ public void testRound() {\n         assertEquals(100.94, Helper.round(100.94, 2), 1e-7);\n         assertEquals(100.9, Helper.round(100.94, 1), 1e-7);\n         assertEquals(101.0, Helper.round(100.95, 1), 1e-7);\n+        // todonow\n+        assertEquals(1040.02, Helper.round(1040.02125359, -2), 1.e-7);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4NTU0NQ=="}, "originalCommit": {"oid": "f496d4160783bca5bcf27fb94790f0e40530efb5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYwMzk5Nw==", "bodyText": "Hmmh, not sure why I did it that way for Helper. Should we can change it?", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516603997", "createdAt": "2020-11-03T11:39:21Z", "author": {"login": "karussell"}, "path": "api/src/test/java/com/graphhopper/util/HelperTest.java", "diffHunk": "@@ -55,6 +55,8 @@ public void testRound() {\n         assertEquals(100.94, Helper.round(100.94, 2), 1e-7);\n         assertEquals(100.9, Helper.round(100.94, 1), 1e-7);\n         assertEquals(101.0, Helper.round(100.95, 1), 1e-7);\n+        // todonow\n+        assertEquals(1040.02, Helper.round(1040.02125359, -2), 1.e-7);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4NTU0NQ=="}, "originalCommit": {"oid": "f496d4160783bca5bcf27fb94790f0e40530efb5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYwNjkzOA==", "bodyText": "Hm for me its fine like this (now that I know it \ud83d\ude04 ). Rounding to 2 means 'two decimal places', from this point of view it makes sense?", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516606938", "createdAt": "2020-11-03T11:44:48Z", "author": {"login": "easbar"}, "path": "api/src/test/java/com/graphhopper/util/HelperTest.java", "diffHunk": "@@ -55,6 +55,8 @@ public void testRound() {\n         assertEquals(100.94, Helper.round(100.94, 2), 1e-7);\n         assertEquals(100.9, Helper.round(100.94, 1), 1e-7);\n         assertEquals(101.0, Helper.round(100.95, 1), 1e-7);\n+        // todonow\n+        assertEquals(1040.02, Helper.round(1040.02125359, -2), 1.e-7);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4NTU0NQ=="}, "originalCommit": {"oid": "f496d4160783bca5bcf27fb94790f0e40530efb5"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYyODQ3Mg==", "bodyText": "Yes, makes a bit sense :)", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516628472", "createdAt": "2020-11-03T12:25:26Z", "author": {"login": "karussell"}, "path": "api/src/test/java/com/graphhopper/util/HelperTest.java", "diffHunk": "@@ -55,6 +55,8 @@ public void testRound() {\n         assertEquals(100.94, Helper.round(100.94, 2), 1e-7);\n         assertEquals(100.9, Helper.round(100.94, 1), 1e-7);\n         assertEquals(101.0, Helper.round(100.95, 1), 1e-7);\n+        // todonow\n+        assertEquals(1040.02, Helper.round(1040.02125359, -2), 1.e-7);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4NTU0NQ=="}, "originalCommit": {"oid": "f496d4160783bca5bcf27fb94790f0e40530efb5"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzU1OTkyOnYy", "diffSide": "RIGHT", "path": "example/src/main/java/com/graphhopper/example/RoutingExampleTC.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMTowNjoxM1rOHsp7Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMTowNjoxM1rOHsp7Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4NjMwMg==", "bodyText": "I added these time checks to see the difference when changing u-turn costs.", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516586302", "createdAt": "2020-11-03T11:06:13Z", "author": {"login": "easbar"}, "path": "example/src/main/java/com/graphhopper/example/RoutingExampleTC.java", "diffHunk": "@@ -8,55 +8,81 @@\n import com.graphhopper.config.CHProfile;\n import com.graphhopper.config.Profile;\n import com.graphhopper.reader.osm.GraphHopperOSM;\n-import com.graphhopper.routing.util.CarFlagEncoder;\n import com.graphhopper.routing.util.EncodingManager;\n-import com.graphhopper.routing.util.FlagEncoder;\n-import com.graphhopper.util.Helper;\n-import com.graphhopper.util.PMap;\n+import com.graphhopper.util.Parameters;\n \n import java.util.Arrays;\n \n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_ANY;\n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_RIGHT;\n \n /**\n- * Routing with turn costs\n+ * Routing with turn costs. Also see {@link RoutingExample} for more details.\n  */\n public class RoutingExampleTC {\n     public static void main(String[] args) {\n         String relDir = args.length == 1 ? args[0] : \"\";\n         GraphHopper hopper = createGraphHopperInstance(relDir + \"core/files/andorra.osm.pbf\");\n-        routing(hopper);\n+        routeWithTurnCosts(hopper);\n+        routeWithTurnCostsAndCurbsides(hopper);\n+        routeWithTurnCostsAndOtherUTurnCosts(hopper);\n     }\n \n-    // see RoutingExample for more details\n-    public static void routing(GraphHopper hopper) {\n-        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899,1.525372).\n+    public static void routeWithTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setProfile(\"car\");\n+        route(hopper, req, 1038, 63_000);\n+    }\n+\n+    public static void routeWithTurnCostsAndCurbsides(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n                 setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n                 setProfile(\"car\");\n-        GHResponse rsp = hopper.route(req);\n+        route(hopper, req, 1730, 112_000);\n+    }\n \n+    public static void routeWithTurnCostsAndOtherUTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n+                putHint(Parameters.CH.DISABLE, true).\n+                setProfile(\"car\");\n+        route(hopper, req.putHint(Parameters.Routing.U_TURN_COSTS, 10), 1370, 100_000);\n+        route(hopper, req.putHint(Parameters.Routing.U_TURN_COSTS, 15), 1370, 105_000);\n+    }\n+\n+    private static void route(GraphHopper hopper, GHRequest req, int expectedDistance, int expectedTime) {\n+        GHResponse rsp = hopper.route(req);\n         // handle errors\n         if (rsp.hasErrors())\n             // if you get: Impossible curbside constraint: 'curbside=right'\n             // you either specify 'curbside=any' or Parameters.Routing.FORCE_CURBSIDE=false to ignore this situation\n             throw new RuntimeException(rsp.getErrors().toString());\n-\n         ResponsePath path = rsp.getBest();\n-        assert Helper.round(path.getDistance(), -2) == 1700;\n+        assert Math.abs(expectedDistance - path.getDistance()) < 1 : \"unexpected distance : \" + path.getDistance() + \" vs. \" + expectedDistance;\n+        assert Math.abs(expectedTime - path.getTime()) < 1000 : \"unexpected time : \" + path.getTime() + \" vs. \" + expectedTime;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f496d4160783bca5bcf27fb94790f0e40530efb5"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzU2MTAwOnYy", "diffSide": "LEFT", "path": "example/src/main/java/com/graphhopper/example/RoutingExampleTC.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMTowNjozMVrOHsp73w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMTozNzo1NlrOHsq9rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4NjQ2Mw==", "bodyText": "setting u_turn_costs on the encoder has no effect (?!). also I think for the example its better to use |turn_costs=true instead of max_turn_costs=1 since its easier to understand (we either make or do not make use of the OSM turn restrictions)", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516586463", "createdAt": "2020-11-03T11:06:31Z", "author": {"login": "easbar"}, "path": "example/src/main/java/com/graphhopper/example/RoutingExampleTC.java", "diffHunk": "@@ -8,55 +8,81 @@\n import com.graphhopper.config.CHProfile;\n import com.graphhopper.config.Profile;\n import com.graphhopper.reader.osm.GraphHopperOSM;\n-import com.graphhopper.routing.util.CarFlagEncoder;\n import com.graphhopper.routing.util.EncodingManager;\n-import com.graphhopper.routing.util.FlagEncoder;\n-import com.graphhopper.util.Helper;\n-import com.graphhopper.util.PMap;\n+import com.graphhopper.util.Parameters;\n \n import java.util.Arrays;\n \n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_ANY;\n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_RIGHT;\n \n /**\n- * Routing with turn costs\n+ * Routing with turn costs. Also see {@link RoutingExample} for more details.\n  */\n public class RoutingExampleTC {\n     public static void main(String[] args) {\n         String relDir = args.length == 1 ? args[0] : \"\";\n         GraphHopper hopper = createGraphHopperInstance(relDir + \"core/files/andorra.osm.pbf\");\n-        routing(hopper);\n+        routeWithTurnCosts(hopper);\n+        routeWithTurnCostsAndCurbsides(hopper);\n+        routeWithTurnCostsAndOtherUTurnCosts(hopper);\n     }\n \n-    // see RoutingExample for more details\n-    public static void routing(GraphHopper hopper) {\n-        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899,1.525372).\n+    public static void routeWithTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setProfile(\"car\");\n+        route(hopper, req, 1038, 63_000);\n+    }\n+\n+    public static void routeWithTurnCostsAndCurbsides(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n                 setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n                 setProfile(\"car\");\n-        GHResponse rsp = hopper.route(req);\n+        route(hopper, req, 1730, 112_000);\n+    }\n \n+    public static void routeWithTurnCostsAndOtherUTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n+                putHint(Parameters.CH.DISABLE, true).\n+                setProfile(\"car\");\n+        route(hopper, req.putHint(Parameters.Routing.U_TURN_COSTS, 10), 1370, 100_000);\n+        route(hopper, req.putHint(Parameters.Routing.U_TURN_COSTS, 15), 1370, 105_000);\n+    }\n+\n+    private static void route(GraphHopper hopper, GHRequest req, int expectedDistance, int expectedTime) {\n+        GHResponse rsp = hopper.route(req);\n         // handle errors\n         if (rsp.hasErrors())\n             // if you get: Impossible curbside constraint: 'curbside=right'\n             // you either specify 'curbside=any' or Parameters.Routing.FORCE_CURBSIDE=false to ignore this situation\n             throw new RuntimeException(rsp.getErrors().toString());\n-\n         ResponsePath path = rsp.getBest();\n-        assert Helper.round(path.getDistance(), -2) == 1700;\n+        assert Math.abs(expectedDistance - path.getDistance()) < 1 : \"unexpected distance : \" + path.getDistance() + \" vs. \" + expectedDistance;\n+        assert Math.abs(expectedTime - path.getTime()) < 1000 : \"unexpected time : \" + path.getTime() + \" vs. \" + expectedTime;\n     }\n \n     // see RoutingExample for more details\n     static GraphHopper createGraphHopperInstance(String ghLoc) {\n         GraphHopper hopper = new GraphHopperOSM().forServer();\n         hopper.setDataReaderFile(ghLoc);\n         hopper.setGraphHopperLocation(\"target/routing-tc-graph-cache\");\n-        // to enable turn restriction and curbside support ensure that FlagEncoder and profile supports turn costs\n-        FlagEncoder car = new CarFlagEncoder(new PMap().\n-                putObject(\"u_turn_costs\", 3).putObject(\"max_turn_costs\", 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f496d4160783bca5bcf27fb94790f0e40530efb5"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYwMzMxMQ==", "bodyText": "setting u_turn_costs on the encoder has no effect (?!)\n\nUps. Now I start confusing profiles with encoders already myself :D\n\nalso I think for the example its better to use |turn_costs=true\n\nOk, sure.", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516603311", "createdAt": "2020-11-03T11:37:56Z", "author": {"login": "karussell"}, "path": "example/src/main/java/com/graphhopper/example/RoutingExampleTC.java", "diffHunk": "@@ -8,55 +8,81 @@\n import com.graphhopper.config.CHProfile;\n import com.graphhopper.config.Profile;\n import com.graphhopper.reader.osm.GraphHopperOSM;\n-import com.graphhopper.routing.util.CarFlagEncoder;\n import com.graphhopper.routing.util.EncodingManager;\n-import com.graphhopper.routing.util.FlagEncoder;\n-import com.graphhopper.util.Helper;\n-import com.graphhopper.util.PMap;\n+import com.graphhopper.util.Parameters;\n \n import java.util.Arrays;\n \n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_ANY;\n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_RIGHT;\n \n /**\n- * Routing with turn costs\n+ * Routing with turn costs. Also see {@link RoutingExample} for more details.\n  */\n public class RoutingExampleTC {\n     public static void main(String[] args) {\n         String relDir = args.length == 1 ? args[0] : \"\";\n         GraphHopper hopper = createGraphHopperInstance(relDir + \"core/files/andorra.osm.pbf\");\n-        routing(hopper);\n+        routeWithTurnCosts(hopper);\n+        routeWithTurnCostsAndCurbsides(hopper);\n+        routeWithTurnCostsAndOtherUTurnCosts(hopper);\n     }\n \n-    // see RoutingExample for more details\n-    public static void routing(GraphHopper hopper) {\n-        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899,1.525372).\n+    public static void routeWithTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setProfile(\"car\");\n+        route(hopper, req, 1038, 63_000);\n+    }\n+\n+    public static void routeWithTurnCostsAndCurbsides(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n                 setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n                 setProfile(\"car\");\n-        GHResponse rsp = hopper.route(req);\n+        route(hopper, req, 1730, 112_000);\n+    }\n \n+    public static void routeWithTurnCostsAndOtherUTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n+                putHint(Parameters.CH.DISABLE, true).\n+                setProfile(\"car\");\n+        route(hopper, req.putHint(Parameters.Routing.U_TURN_COSTS, 10), 1370, 100_000);\n+        route(hopper, req.putHint(Parameters.Routing.U_TURN_COSTS, 15), 1370, 105_000);\n+    }\n+\n+    private static void route(GraphHopper hopper, GHRequest req, int expectedDistance, int expectedTime) {\n+        GHResponse rsp = hopper.route(req);\n         // handle errors\n         if (rsp.hasErrors())\n             // if you get: Impossible curbside constraint: 'curbside=right'\n             // you either specify 'curbside=any' or Parameters.Routing.FORCE_CURBSIDE=false to ignore this situation\n             throw new RuntimeException(rsp.getErrors().toString());\n-\n         ResponsePath path = rsp.getBest();\n-        assert Helper.round(path.getDistance(), -2) == 1700;\n+        assert Math.abs(expectedDistance - path.getDistance()) < 1 : \"unexpected distance : \" + path.getDistance() + \" vs. \" + expectedDistance;\n+        assert Math.abs(expectedTime - path.getTime()) < 1000 : \"unexpected time : \" + path.getTime() + \" vs. \" + expectedTime;\n     }\n \n     // see RoutingExample for more details\n     static GraphHopper createGraphHopperInstance(String ghLoc) {\n         GraphHopper hopper = new GraphHopperOSM().forServer();\n         hopper.setDataReaderFile(ghLoc);\n         hopper.setGraphHopperLocation(\"target/routing-tc-graph-cache\");\n-        // to enable turn restriction and curbside support ensure that FlagEncoder and profile supports turn costs\n-        FlagEncoder car = new CarFlagEncoder(new PMap().\n-                putObject(\"u_turn_costs\", 3).putObject(\"max_turn_costs\", 1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4NjQ2Mw=="}, "originalCommit": {"oid": "f496d4160783bca5bcf27fb94790f0e40530efb5"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzU2OTM1OnYy", "diffSide": "RIGHT", "path": "example/src/main/java/com/graphhopper/example/RoutingExampleTC.java", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMTowOTowM1rOHsqBEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxOTo0NTo1MlrOHs9_IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4Nzc5NA==", "bodyText": "This is a bit ugly because we do not get an error if CH is still enabled. When we change the u-turn costs (and CH is enabled) this change is simply ignored without throwing an error or something.", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516587794", "createdAt": "2020-11-03T11:09:03Z", "author": {"login": "easbar"}, "path": "example/src/main/java/com/graphhopper/example/RoutingExampleTC.java", "diffHunk": "@@ -8,55 +8,81 @@\n import com.graphhopper.config.CHProfile;\n import com.graphhopper.config.Profile;\n import com.graphhopper.reader.osm.GraphHopperOSM;\n-import com.graphhopper.routing.util.CarFlagEncoder;\n import com.graphhopper.routing.util.EncodingManager;\n-import com.graphhopper.routing.util.FlagEncoder;\n-import com.graphhopper.util.Helper;\n-import com.graphhopper.util.PMap;\n+import com.graphhopper.util.Parameters;\n \n import java.util.Arrays;\n \n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_ANY;\n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_RIGHT;\n \n /**\n- * Routing with turn costs\n+ * Routing with turn costs. Also see {@link RoutingExample} for more details.\n  */\n public class RoutingExampleTC {\n     public static void main(String[] args) {\n         String relDir = args.length == 1 ? args[0] : \"\";\n         GraphHopper hopper = createGraphHopperInstance(relDir + \"core/files/andorra.osm.pbf\");\n-        routing(hopper);\n+        routeWithTurnCosts(hopper);\n+        routeWithTurnCostsAndCurbsides(hopper);\n+        routeWithTurnCostsAndOtherUTurnCosts(hopper);\n     }\n \n-    // see RoutingExample for more details\n-    public static void routing(GraphHopper hopper) {\n-        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899,1.525372).\n+    public static void routeWithTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setProfile(\"car\");\n+        route(hopper, req, 1038, 63_000);\n+    }\n+\n+    public static void routeWithTurnCostsAndCurbsides(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n                 setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n                 setProfile(\"car\");\n-        GHResponse rsp = hopper.route(req);\n+        route(hopper, req, 1730, 112_000);\n+    }\n \n+    public static void routeWithTurnCostsAndOtherUTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n+                putHint(Parameters.CH.DISABLE, true).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f496d4160783bca5bcf27fb94790f0e40530efb5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYwMzI1Mg==", "bodyText": "We can start to be more restrictive here and throw errors for curbside&noneCH? But this might break clients. Or we have a strict mode (default) and legacy mode ;)", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516603252", "createdAt": "2020-11-03T11:37:49Z", "author": {"login": "karussell"}, "path": "example/src/main/java/com/graphhopper/example/RoutingExampleTC.java", "diffHunk": "@@ -8,55 +8,81 @@\n import com.graphhopper.config.CHProfile;\n import com.graphhopper.config.Profile;\n import com.graphhopper.reader.osm.GraphHopperOSM;\n-import com.graphhopper.routing.util.CarFlagEncoder;\n import com.graphhopper.routing.util.EncodingManager;\n-import com.graphhopper.routing.util.FlagEncoder;\n-import com.graphhopper.util.Helper;\n-import com.graphhopper.util.PMap;\n+import com.graphhopper.util.Parameters;\n \n import java.util.Arrays;\n \n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_ANY;\n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_RIGHT;\n \n /**\n- * Routing with turn costs\n+ * Routing with turn costs. Also see {@link RoutingExample} for more details.\n  */\n public class RoutingExampleTC {\n     public static void main(String[] args) {\n         String relDir = args.length == 1 ? args[0] : \"\";\n         GraphHopper hopper = createGraphHopperInstance(relDir + \"core/files/andorra.osm.pbf\");\n-        routing(hopper);\n+        routeWithTurnCosts(hopper);\n+        routeWithTurnCostsAndCurbsides(hopper);\n+        routeWithTurnCostsAndOtherUTurnCosts(hopper);\n     }\n \n-    // see RoutingExample for more details\n-    public static void routing(GraphHopper hopper) {\n-        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899,1.525372).\n+    public static void routeWithTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setProfile(\"car\");\n+        route(hopper, req, 1038, 63_000);\n+    }\n+\n+    public static void routeWithTurnCostsAndCurbsides(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n                 setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n                 setProfile(\"car\");\n-        GHResponse rsp = hopper.route(req);\n+        route(hopper, req, 1730, 112_000);\n+    }\n \n+    public static void routeWithTurnCostsAndOtherUTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n+                putHint(Parameters.CH.DISABLE, true).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4Nzc5NA=="}, "originalCommit": {"oid": "f496d4160783bca5bcf27fb94790f0e40530efb5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYwNzkxMQ==", "bodyText": "There is this todo here: \n  \n    \n      graphhopper/core/src/main/java/com/graphhopper/routing/Router.java\n    \n    \n        Lines 230 to 233\n      in\n      ff85f03\n    \n    \n    \n    \n\n        \n          \n           private Weighting createWeighting(Profile profile, PMap requestHints, List<GHPoint> points, boolean forCH) { \n        \n\n        \n          \n               if (forCH) { \n        \n\n        \n          \n                   // todo: do not allow things like short_fastest.distance_factor or u_turn_costs unless CH is disabled \n        \n\n        \n          \n                   // and only under certain conditions for LM \n        \n    \n  \n\n\nAnd yes I think we did not do this for some backward-compatibility reasons. Not sure what the exact implications are if we change this.", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516607911", "createdAt": "2020-11-03T11:46:39Z", "author": {"login": "easbar"}, "path": "example/src/main/java/com/graphhopper/example/RoutingExampleTC.java", "diffHunk": "@@ -8,55 +8,81 @@\n import com.graphhopper.config.CHProfile;\n import com.graphhopper.config.Profile;\n import com.graphhopper.reader.osm.GraphHopperOSM;\n-import com.graphhopper.routing.util.CarFlagEncoder;\n import com.graphhopper.routing.util.EncodingManager;\n-import com.graphhopper.routing.util.FlagEncoder;\n-import com.graphhopper.util.Helper;\n-import com.graphhopper.util.PMap;\n+import com.graphhopper.util.Parameters;\n \n import java.util.Arrays;\n \n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_ANY;\n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_RIGHT;\n \n /**\n- * Routing with turn costs\n+ * Routing with turn costs. Also see {@link RoutingExample} for more details.\n  */\n public class RoutingExampleTC {\n     public static void main(String[] args) {\n         String relDir = args.length == 1 ? args[0] : \"\";\n         GraphHopper hopper = createGraphHopperInstance(relDir + \"core/files/andorra.osm.pbf\");\n-        routing(hopper);\n+        routeWithTurnCosts(hopper);\n+        routeWithTurnCostsAndCurbsides(hopper);\n+        routeWithTurnCostsAndOtherUTurnCosts(hopper);\n     }\n \n-    // see RoutingExample for more details\n-    public static void routing(GraphHopper hopper) {\n-        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899,1.525372).\n+    public static void routeWithTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setProfile(\"car\");\n+        route(hopper, req, 1038, 63_000);\n+    }\n+\n+    public static void routeWithTurnCostsAndCurbsides(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n                 setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n                 setProfile(\"car\");\n-        GHResponse rsp = hopper.route(req);\n+        route(hopper, req, 1730, 112_000);\n+    }\n \n+    public static void routeWithTurnCostsAndOtherUTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n+                putHint(Parameters.CH.DISABLE, true).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4Nzc5NA=="}, "originalCommit": {"oid": "f496d4160783bca5bcf27fb94790f0e40530efb5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYwODkzNg==", "bodyText": "and throw errors for curbside&noneCH\n\ncurbsides+nonCH is not the problem. But what is not possible is changing the u-turn costs with CH.\n\nOr we have a strict mode (default) and legacy mode ;)\n\nHm this sounds complicated? Or do you mean some flag that controls this somehow (ignore or throw error).", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516608936", "createdAt": "2020-11-03T11:48:38Z", "author": {"login": "easbar"}, "path": "example/src/main/java/com/graphhopper/example/RoutingExampleTC.java", "diffHunk": "@@ -8,55 +8,81 @@\n import com.graphhopper.config.CHProfile;\n import com.graphhopper.config.Profile;\n import com.graphhopper.reader.osm.GraphHopperOSM;\n-import com.graphhopper.routing.util.CarFlagEncoder;\n import com.graphhopper.routing.util.EncodingManager;\n-import com.graphhopper.routing.util.FlagEncoder;\n-import com.graphhopper.util.Helper;\n-import com.graphhopper.util.PMap;\n+import com.graphhopper.util.Parameters;\n \n import java.util.Arrays;\n \n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_ANY;\n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_RIGHT;\n \n /**\n- * Routing with turn costs\n+ * Routing with turn costs. Also see {@link RoutingExample} for more details.\n  */\n public class RoutingExampleTC {\n     public static void main(String[] args) {\n         String relDir = args.length == 1 ? args[0] : \"\";\n         GraphHopper hopper = createGraphHopperInstance(relDir + \"core/files/andorra.osm.pbf\");\n-        routing(hopper);\n+        routeWithTurnCosts(hopper);\n+        routeWithTurnCostsAndCurbsides(hopper);\n+        routeWithTurnCostsAndOtherUTurnCosts(hopper);\n     }\n \n-    // see RoutingExample for more details\n-    public static void routing(GraphHopper hopper) {\n-        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899,1.525372).\n+    public static void routeWithTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setProfile(\"car\");\n+        route(hopper, req, 1038, 63_000);\n+    }\n+\n+    public static void routeWithTurnCostsAndCurbsides(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n                 setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n                 setProfile(\"car\");\n-        GHResponse rsp = hopper.route(req);\n+        route(hopper, req, 1730, 112_000);\n+    }\n \n+    public static void routeWithTurnCostsAndOtherUTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n+                putHint(Parameters.CH.DISABLE, true).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4Nzc5NA=="}, "originalCommit": {"oid": "f496d4160783bca5bcf27fb94790f0e40530efb5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYzMDcwMA==", "bodyText": "curbsides+nonCH is not the problem.\n\nAh, due to the request properties thought you mean the problem that this parameter combination does not work for node-based yet ...\n\nOr do you mean some flag that controls this somehow (ignore or throw error).\n\nYes. But not sure how ugly the code would get with that.", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516630700", "createdAt": "2020-11-03T12:29:35Z", "author": {"login": "karussell"}, "path": "example/src/main/java/com/graphhopper/example/RoutingExampleTC.java", "diffHunk": "@@ -8,55 +8,81 @@\n import com.graphhopper.config.CHProfile;\n import com.graphhopper.config.Profile;\n import com.graphhopper.reader.osm.GraphHopperOSM;\n-import com.graphhopper.routing.util.CarFlagEncoder;\n import com.graphhopper.routing.util.EncodingManager;\n-import com.graphhopper.routing.util.FlagEncoder;\n-import com.graphhopper.util.Helper;\n-import com.graphhopper.util.PMap;\n+import com.graphhopper.util.Parameters;\n \n import java.util.Arrays;\n \n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_ANY;\n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_RIGHT;\n \n /**\n- * Routing with turn costs\n+ * Routing with turn costs. Also see {@link RoutingExample} for more details.\n  */\n public class RoutingExampleTC {\n     public static void main(String[] args) {\n         String relDir = args.length == 1 ? args[0] : \"\";\n         GraphHopper hopper = createGraphHopperInstance(relDir + \"core/files/andorra.osm.pbf\");\n-        routing(hopper);\n+        routeWithTurnCosts(hopper);\n+        routeWithTurnCostsAndCurbsides(hopper);\n+        routeWithTurnCostsAndOtherUTurnCosts(hopper);\n     }\n \n-    // see RoutingExample for more details\n-    public static void routing(GraphHopper hopper) {\n-        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899,1.525372).\n+    public static void routeWithTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setProfile(\"car\");\n+        route(hopper, req, 1038, 63_000);\n+    }\n+\n+    public static void routeWithTurnCostsAndCurbsides(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n                 setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n                 setProfile(\"car\");\n-        GHResponse rsp = hopper.route(req);\n+        route(hopper, req, 1730, 112_000);\n+    }\n \n+    public static void routeWithTurnCostsAndOtherUTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n+                putHint(Parameters.CH.DISABLE, true).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4Nzc5NA=="}, "originalCommit": {"oid": "f496d4160783bca5bcf27fb94790f0e40530efb5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYzNDE0OA==", "bodyText": "Honestly, as long as their is no complaint I do not really feel like changing anything here :) Adding some ignore parameter makes it more complicated and maybe at some point we no longer need the backward-compatibility here?", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516634148", "createdAt": "2020-11-03T12:35:44Z", "author": {"login": "easbar"}, "path": "example/src/main/java/com/graphhopper/example/RoutingExampleTC.java", "diffHunk": "@@ -8,55 +8,81 @@\n import com.graphhopper.config.CHProfile;\n import com.graphhopper.config.Profile;\n import com.graphhopper.reader.osm.GraphHopperOSM;\n-import com.graphhopper.routing.util.CarFlagEncoder;\n import com.graphhopper.routing.util.EncodingManager;\n-import com.graphhopper.routing.util.FlagEncoder;\n-import com.graphhopper.util.Helper;\n-import com.graphhopper.util.PMap;\n+import com.graphhopper.util.Parameters;\n \n import java.util.Arrays;\n \n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_ANY;\n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_RIGHT;\n \n /**\n- * Routing with turn costs\n+ * Routing with turn costs. Also see {@link RoutingExample} for more details.\n  */\n public class RoutingExampleTC {\n     public static void main(String[] args) {\n         String relDir = args.length == 1 ? args[0] : \"\";\n         GraphHopper hopper = createGraphHopperInstance(relDir + \"core/files/andorra.osm.pbf\");\n-        routing(hopper);\n+        routeWithTurnCosts(hopper);\n+        routeWithTurnCostsAndCurbsides(hopper);\n+        routeWithTurnCostsAndOtherUTurnCosts(hopper);\n     }\n \n-    // see RoutingExample for more details\n-    public static void routing(GraphHopper hopper) {\n-        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899,1.525372).\n+    public static void routeWithTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setProfile(\"car\");\n+        route(hopper, req, 1038, 63_000);\n+    }\n+\n+    public static void routeWithTurnCostsAndCurbsides(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n                 setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n                 setProfile(\"car\");\n-        GHResponse rsp = hopper.route(req);\n+        route(hopper, req, 1730, 112_000);\n+    }\n \n+    public static void routeWithTurnCostsAndOtherUTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n+                putHint(Parameters.CH.DISABLE, true).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4Nzc5NA=="}, "originalCommit": {"oid": "f496d4160783bca5bcf27fb94790f0e40530efb5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkwOTM4NQ==", "bodyText": "Adding some ignore parameter makes it more complicated\n\nYes, I also do not like it.\n\nmaybe at some point we no longer need the backward-compatibility here?\n\nUnfortunately this goes not away the longer we wait. Instead it is more the opposite. Maybe we introduce restrictions step by step ... have no hard opinion here but it is tricky.", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516909385", "createdAt": "2020-11-03T19:35:32Z", "author": {"login": "karussell"}, "path": "example/src/main/java/com/graphhopper/example/RoutingExampleTC.java", "diffHunk": "@@ -8,55 +8,81 @@\n import com.graphhopper.config.CHProfile;\n import com.graphhopper.config.Profile;\n import com.graphhopper.reader.osm.GraphHopperOSM;\n-import com.graphhopper.routing.util.CarFlagEncoder;\n import com.graphhopper.routing.util.EncodingManager;\n-import com.graphhopper.routing.util.FlagEncoder;\n-import com.graphhopper.util.Helper;\n-import com.graphhopper.util.PMap;\n+import com.graphhopper.util.Parameters;\n \n import java.util.Arrays;\n \n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_ANY;\n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_RIGHT;\n \n /**\n- * Routing with turn costs\n+ * Routing with turn costs. Also see {@link RoutingExample} for more details.\n  */\n public class RoutingExampleTC {\n     public static void main(String[] args) {\n         String relDir = args.length == 1 ? args[0] : \"\";\n         GraphHopper hopper = createGraphHopperInstance(relDir + \"core/files/andorra.osm.pbf\");\n-        routing(hopper);\n+        routeWithTurnCosts(hopper);\n+        routeWithTurnCostsAndCurbsides(hopper);\n+        routeWithTurnCostsAndOtherUTurnCosts(hopper);\n     }\n \n-    // see RoutingExample for more details\n-    public static void routing(GraphHopper hopper) {\n-        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899,1.525372).\n+    public static void routeWithTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setProfile(\"car\");\n+        route(hopper, req, 1038, 63_000);\n+    }\n+\n+    public static void routeWithTurnCostsAndCurbsides(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n                 setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n                 setProfile(\"car\");\n-        GHResponse rsp = hopper.route(req);\n+        route(hopper, req, 1730, 112_000);\n+    }\n \n+    public static void routeWithTurnCostsAndOtherUTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n+                putHint(Parameters.CH.DISABLE, true).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4Nzc5NA=="}, "originalCommit": {"oid": "f496d4160783bca5bcf27fb94790f0e40530efb5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxMTU2OQ==", "bodyText": "We would have to figure out how many requests there are that use u_turn_costs=<some value> but do not use ch.disable=true. (and similar with short_fastest.time/distance_factor. And yes its probably true. The longer edge-based CH, turn costs and u-turn costs are around the more requests of this kind there might be. Specifically the u-turn costs parameter is problematic anyway since we hopefully will not just use one value for u-turn costs for all u-turns in the future (but be more specific depending on the road type etc.). Right now I would go as far as saying that this parameter is not even supported officially (it isn't documented for the API either).", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516911569", "createdAt": "2020-11-03T19:39:40Z", "author": {"login": "easbar"}, "path": "example/src/main/java/com/graphhopper/example/RoutingExampleTC.java", "diffHunk": "@@ -8,55 +8,81 @@\n import com.graphhopper.config.CHProfile;\n import com.graphhopper.config.Profile;\n import com.graphhopper.reader.osm.GraphHopperOSM;\n-import com.graphhopper.routing.util.CarFlagEncoder;\n import com.graphhopper.routing.util.EncodingManager;\n-import com.graphhopper.routing.util.FlagEncoder;\n-import com.graphhopper.util.Helper;\n-import com.graphhopper.util.PMap;\n+import com.graphhopper.util.Parameters;\n \n import java.util.Arrays;\n \n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_ANY;\n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_RIGHT;\n \n /**\n- * Routing with turn costs\n+ * Routing with turn costs. Also see {@link RoutingExample} for more details.\n  */\n public class RoutingExampleTC {\n     public static void main(String[] args) {\n         String relDir = args.length == 1 ? args[0] : \"\";\n         GraphHopper hopper = createGraphHopperInstance(relDir + \"core/files/andorra.osm.pbf\");\n-        routing(hopper);\n+        routeWithTurnCosts(hopper);\n+        routeWithTurnCostsAndCurbsides(hopper);\n+        routeWithTurnCostsAndOtherUTurnCosts(hopper);\n     }\n \n-    // see RoutingExample for more details\n-    public static void routing(GraphHopper hopper) {\n-        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899,1.525372).\n+    public static void routeWithTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setProfile(\"car\");\n+        route(hopper, req, 1038, 63_000);\n+    }\n+\n+    public static void routeWithTurnCostsAndCurbsides(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n                 setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n                 setProfile(\"car\");\n-        GHResponse rsp = hopper.route(req);\n+        route(hopper, req, 1730, 112_000);\n+    }\n \n+    public static void routeWithTurnCostsAndOtherUTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n+                putHint(Parameters.CH.DISABLE, true).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4Nzc5NA=="}, "originalCommit": {"oid": "f496d4160783bca5bcf27fb94790f0e40530efb5"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjkxNDk3Nw==", "bodyText": "Ah and then there might be a problem with ProfileResolver, i.e. when u_turn_costs is given but no profile is specified. Before we had profiles we used u_turn_costs to determine which CH preparation shall be used in case there are multiple ones using the same vehicle/weighting, but different u_turn_costs.", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516914977", "createdAt": "2020-11-03T19:45:52Z", "author": {"login": "easbar"}, "path": "example/src/main/java/com/graphhopper/example/RoutingExampleTC.java", "diffHunk": "@@ -8,55 +8,81 @@\n import com.graphhopper.config.CHProfile;\n import com.graphhopper.config.Profile;\n import com.graphhopper.reader.osm.GraphHopperOSM;\n-import com.graphhopper.routing.util.CarFlagEncoder;\n import com.graphhopper.routing.util.EncodingManager;\n-import com.graphhopper.routing.util.FlagEncoder;\n-import com.graphhopper.util.Helper;\n-import com.graphhopper.util.PMap;\n+import com.graphhopper.util.Parameters;\n \n import java.util.Arrays;\n \n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_ANY;\n import static com.graphhopper.util.Parameters.Curbsides.CURBSIDE_RIGHT;\n \n /**\n- * Routing with turn costs\n+ * Routing with turn costs. Also see {@link RoutingExample} for more details.\n  */\n public class RoutingExampleTC {\n     public static void main(String[] args) {\n         String relDir = args.length == 1 ? args[0] : \"\";\n         GraphHopper hopper = createGraphHopperInstance(relDir + \"core/files/andorra.osm.pbf\");\n-        routing(hopper);\n+        routeWithTurnCosts(hopper);\n+        routeWithTurnCostsAndCurbsides(hopper);\n+        routeWithTurnCostsAndOtherUTurnCosts(hopper);\n     }\n \n-    // see RoutingExample for more details\n-    public static void routing(GraphHopper hopper) {\n-        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899,1.525372).\n+    public static void routeWithTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setProfile(\"car\");\n+        route(hopper, req, 1038, 63_000);\n+    }\n+\n+    public static void routeWithTurnCostsAndCurbsides(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n                 setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n                 setProfile(\"car\");\n-        GHResponse rsp = hopper.route(req);\n+        route(hopper, req, 1730, 112_000);\n+    }\n \n+    public static void routeWithTurnCostsAndOtherUTurnCosts(GraphHopper hopper) {\n+        GHRequest req = new GHRequest(42.50822, 1.533966, 42.506899, 1.525372).\n+                setCurbsides(Arrays.asList(CURBSIDE_ANY, CURBSIDE_RIGHT)).\n+                putHint(Parameters.CH.DISABLE, true).", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjU4Nzc5NA=="}, "originalCommit": {"oid": "f496d4160783bca5bcf27fb94790f0e40530efb5"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzcyNTA3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/graphhopper/util/Helper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMTo1NDo1NVrOHsrgWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjozODoxNFrOHss7QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYxMjE4NA==", "bodyText": "Maybe this is what confused me, does this make it more clear?", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516612184", "createdAt": "2020-11-03T11:54:55Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/util/Helper.java", "diffHunk": "@@ -318,10 +318,11 @@ public static double keepIn(double value, double min, double max) {\n     }\n \n     /**\n-     * Round the value to the specified exponent\n+     * Round the value to the specified number of decimal places, i.e. decimalPlaces=2 means we round to two decimal\n+     * places. Using negative values like decimalPlaces=-2 means we round to two places before the decimal point.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "922dde0ed455d7479e5982352a647bd0fffaaa60"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYzNTQ1Ng==", "bodyText": "Yes", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516635456", "createdAt": "2020-11-03T12:38:14Z", "author": {"login": "karussell"}, "path": "api/src/main/java/com/graphhopper/util/Helper.java", "diffHunk": "@@ -318,10 +318,11 @@ public static double keepIn(double value, double min, double max) {\n     }\n \n     /**\n-     * Round the value to the specified exponent\n+     * Round the value to the specified number of decimal places, i.e. decimalPlaces=2 means we round to two decimal\n+     * places. Using negative values like decimalPlaces=-2 means we round to two places before the decimal point.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYxMjE4NA=="}, "originalCommit": {"oid": "922dde0ed455d7479e5982352a647bd0fffaaa60"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzczNzg0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/graphhopper/util/Helper.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMTo1ODozMFrOHsrn-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMjozMTozMlrOHsstIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYxNDEzNw==", "bodyText": "Was there any reason these methods did not delegate to round() before?", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516614137", "createdAt": "2020-11-03T11:58:30Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/util/Helper.java", "diffHunk": "@@ -318,23 +318,24 @@ public static double keepIn(double value, double min, double max) {\n     }\n \n     /**\n-     * Round the value to the specified exponent\n+     * Round the value to the specified number of decimal places, i.e. decimalPlaces=2 means we round to two decimal\n+     * places. Using negative values like decimalPlaces=-2 means we round to two places before the decimal point.\n      */\n-    public static double round(double value, int exponent) {\n-        double factor = Math.pow(10, exponent);\n+    public static double round(double value, int decimalPlaces) {\n+        double factor = Math.pow(10, decimalPlaces);\n         return Math.round(value * factor) / factor;\n     }\n \n     public static double round6(double value) {\n-        return Math.round(value * 1e6) / 1e6;\n+        return round(value, 6);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac2cf249ec429f127473fc9b07c011f610014dd4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYzMTg0Mg==", "bodyText": "No, I think I initially thought two methods (round4 and round6) would be sufficient. But not 100% sure.", "url": "https://github.com/graphhopper/graphhopper/pull/2163#discussion_r516631842", "createdAt": "2020-11-03T12:31:32Z", "author": {"login": "karussell"}, "path": "api/src/main/java/com/graphhopper/util/Helper.java", "diffHunk": "@@ -318,23 +318,24 @@ public static double keepIn(double value, double min, double max) {\n     }\n \n     /**\n-     * Round the value to the specified exponent\n+     * Round the value to the specified number of decimal places, i.e. decimalPlaces=2 means we round to two decimal\n+     * places. Using negative values like decimalPlaces=-2 means we round to two places before the decimal point.\n      */\n-    public static double round(double value, int exponent) {\n-        double factor = Math.pow(10, exponent);\n+    public static double round(double value, int decimalPlaces) {\n+        double factor = Math.pow(10, decimalPlaces);\n         return Math.round(value * factor) / factor;\n     }\n \n     public static double round6(double value) {\n-        return Math.round(value * 1e6) / 1e6;\n+        return round(value, 6);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjYxNDEzNw=="}, "originalCommit": {"oid": "ac2cf249ec429f127473fc9b07c011f610014dd4"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4655, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}