{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxMjkzODI4", "number": 1935, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDoxMjo1MlrODj04Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDoxMzoyMlrODj04rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODkzMDY2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/storage/GraphEdgeIdFinder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDoxMjo1MlrOFv2QFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDo0MDoxMlrOFv3JCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxNjI0Nw==", "bodyText": "This would be better to duplicate and keep private", "url": "https://github.com/graphhopper/graphhopper/pull/1935#discussion_r385716247", "createdAt": "2020-02-28T14:12:52Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/storage/GraphEdgeIdFinder.java", "diffHunk": "@@ -239,7 +239,7 @@ public BlockArea setQueryGraph(QueryGraph queryGraph) {\n         }\n     }\n \n-    private static BBox createBBox(NodeAccess na, EdgeIteratorState edgeState) {\n+    public static BBox createBBox(NodeAccess na, EdgeIteratorState edgeState) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9334f666aa1a35dfe829e37f1717090272d03a4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTczMDgyNw==", "bodyText": "Fixed", "url": "https://github.com/graphhopper/graphhopper/pull/1935#discussion_r385730827", "createdAt": "2020-02-28T14:40:12Z", "author": {"login": "samruston"}, "path": "core/src/main/java/com/graphhopper/storage/GraphEdgeIdFinder.java", "diffHunk": "@@ -239,7 +239,7 @@ public BlockArea setQueryGraph(QueryGraph queryGraph) {\n         }\n     }\n \n-    private static BBox createBBox(NodeAccess na, EdgeIteratorState edgeState) {\n+    public static BBox createBBox(NodeAccess na, EdgeIteratorState edgeState) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxNjI0Nw=="}, "originalCommit": {"oid": "a9334f666aa1a35dfe829e37f1717090272d03a4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4ODkzMjMxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/util/NameSimilarityEdgeFilter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDoxMzoyMlrOFv2RIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDo0MDowOFrOFv3I5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxNjUxNQ==", "bodyText": "Can you make the radius configurable i.e. just move to a constructor parameter (and call it with 100 in the templates or something)?", "url": "https://github.com/graphhopper/graphhopper/pull/1935#discussion_r385716515", "createdAt": "2020-02-28T14:13:22Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/util/NameSimilarityEdgeFilter.java", "diffHunk": "@@ -81,21 +86,26 @@\n     private static final Pattern WORD_CHAR = Pattern.compile(\"\\\\p{LD}+\");\n     private static final JaroWinkler jaroWinkler = new JaroWinkler();\n     private static final double JARO_WINKLER_ACCEPT_FACTOR = .9;\n+    private static final double WITHIN_RADIUS_METERS = 100;\n     private final EdgeFilter edgeFilter;\n     private final String pointHint;\n     private final Map<String, String> rewriteMap;\n+    private final Circle pointCircle;\n+    private final NodeAccess nodeAccess;\n \n-    public NameSimilarityEdgeFilter(EdgeFilter edgeFilter, String pointHint) {\n-        this(edgeFilter, pointHint, DEFAULT_REWRITE_MAP);\n+    public NameSimilarityEdgeFilter(EdgeFilter edgeFilter, NodeAccess nodeAccess, GHPoint point, String pointHint) {\n+        this(edgeFilter, nodeAccess, pointHint, point, DEFAULT_REWRITE_MAP);\n     }\n \n     /**\n      * @param rewriteMap maps abbreviations to its longer form\n      */\n-    public NameSimilarityEdgeFilter(EdgeFilter edgeFilter, String pointHint, Map<String, String> rewriteMap) {\n+    public NameSimilarityEdgeFilter(EdgeFilter edgeFilter, NodeAccess nodeAccess, String pointHint, GHPoint point, Map<String, String> rewriteMap) {\n         this.edgeFilter = edgeFilter;\n         this.rewriteMap = rewriteMap;\n+        this.nodeAccess = nodeAccess;\n         this.pointHint = prepareName(removeRelation(pointHint == null ? \"\" : pointHint));\n+        this.pointCircle = new Circle(point.lat, point.lon, WITHIN_RADIUS_METERS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9334f666aa1a35dfe829e37f1717090272d03a4"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTczMDc5MA==", "bodyText": "Fixed", "url": "https://github.com/graphhopper/graphhopper/pull/1935#discussion_r385730790", "createdAt": "2020-02-28T14:40:08Z", "author": {"login": "samruston"}, "path": "core/src/main/java/com/graphhopper/routing/util/NameSimilarityEdgeFilter.java", "diffHunk": "@@ -81,21 +86,26 @@\n     private static final Pattern WORD_CHAR = Pattern.compile(\"\\\\p{LD}+\");\n     private static final JaroWinkler jaroWinkler = new JaroWinkler();\n     private static final double JARO_WINKLER_ACCEPT_FACTOR = .9;\n+    private static final double WITHIN_RADIUS_METERS = 100;\n     private final EdgeFilter edgeFilter;\n     private final String pointHint;\n     private final Map<String, String> rewriteMap;\n+    private final Circle pointCircle;\n+    private final NodeAccess nodeAccess;\n \n-    public NameSimilarityEdgeFilter(EdgeFilter edgeFilter, String pointHint) {\n-        this(edgeFilter, pointHint, DEFAULT_REWRITE_MAP);\n+    public NameSimilarityEdgeFilter(EdgeFilter edgeFilter, NodeAccess nodeAccess, GHPoint point, String pointHint) {\n+        this(edgeFilter, nodeAccess, pointHint, point, DEFAULT_REWRITE_MAP);\n     }\n \n     /**\n      * @param rewriteMap maps abbreviations to its longer form\n      */\n-    public NameSimilarityEdgeFilter(EdgeFilter edgeFilter, String pointHint, Map<String, String> rewriteMap) {\n+    public NameSimilarityEdgeFilter(EdgeFilter edgeFilter, NodeAccess nodeAccess, String pointHint, GHPoint point, Map<String, String> rewriteMap) {\n         this.edgeFilter = edgeFilter;\n         this.rewriteMap = rewriteMap;\n+        this.nodeAccess = nodeAccess;\n         this.pointHint = prepareName(removeRelation(pointHint == null ? \"\" : pointHint));\n+        this.pointCircle = new Circle(point.lat, point.lon, WITHIN_RADIUS_METERS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxNjUxNQ=="}, "originalCommit": {"oid": "a9334f666aa1a35dfe829e37f1717090272d03a4"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4737, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}