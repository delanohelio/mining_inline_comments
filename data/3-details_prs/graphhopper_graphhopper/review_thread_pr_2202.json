{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMTcxMDc2", "number": 2202, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMDo0Mjo0NlrOFBbA0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMDoxNDo1OFrOFEtpcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MDM1NDczOnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/graphhopper/routing/AlternativeRouteCHTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMDo0Mjo0NlrOIAIi2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMTo0MzowMVrOIAJKNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxMDkwNw==", "bodyText": "Hm I think for tests like this graph.edge(a, b, dist, bidir) was quite useful? Can we not keep it somehow?", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537010907", "createdAt": "2020-12-06T10:42:46Z", "author": {"login": "easbar"}, "path": "core/src/test/java/com/graphhopper/routing/AlternativeRouteCHTest.java", "diffHunk": "@@ -57,23 +58,23 @@ public GraphHopperStorage createTestGraph(EncodingManager tmpEM) {\n         // has to be locally-shortest to be considered.\n         // So we get all three alternatives.\n \n-        graph.edge(5, 6, 10000, true);\n-        graph.edge(6, 3, 10000, true);\n-        graph.edge(3, 4, 10000, true);\n-        graph.edge(4, 10, 10000, true);\n+        GHUtility.setProperties(graph.edge(5, 6).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(6, 3).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(3, 4).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(4, 10).setDistance(10000), carFE, 60, true, true);\n \n-        graph.edge(6, 7, 10000, true);\n-        graph.edge(7, 8, 10000, true);\n-        graph.edge(8, 4, 10000, true);\n+        GHUtility.setProperties(graph.edge(6, 7).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(7, 8).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(8, 4).setDistance(10000), carFE, 60, true, true);\n \n-        graph.edge(5, 1, 10000, true);\n-        graph.edge(1, 9, 10000, true);\n-        graph.edge(9, 2, 10000, true);\n-        graph.edge(2, 3, 10000, true);\n+        GHUtility.setProperties(graph.edge(5, 1).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(1, 9).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(9, 2).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(2, 3).setDistance(10000), carFE, 60, true, true);\n \n-        graph.edge(4, 11, 9000, true);\n-        graph.edge(11, 12, 9000, true);\n-        graph.edge(12, 10, 10000, true);\n+        GHUtility.setProperties(graph.edge(4, 11).setDistance(9000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(11, 12).setDistance(9000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(12, 10).setDistance(10000), carFE, 60, true, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxMTY3NQ==", "bodyText": "Maybe we can at least add something like\nEdgeIteratorState GHUtility.edge(graph, a, b, dist, bidir) {\n   return GHUtility.setProperties(graph.edge(a, b).setDistance(dist), encoder, 60, true, bidir);\n}", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537011675", "createdAt": "2020-12-06T10:47:29Z", "author": {"login": "easbar"}, "path": "core/src/test/java/com/graphhopper/routing/AlternativeRouteCHTest.java", "diffHunk": "@@ -57,23 +58,23 @@ public GraphHopperStorage createTestGraph(EncodingManager tmpEM) {\n         // has to be locally-shortest to be considered.\n         // So we get all three alternatives.\n \n-        graph.edge(5, 6, 10000, true);\n-        graph.edge(6, 3, 10000, true);\n-        graph.edge(3, 4, 10000, true);\n-        graph.edge(4, 10, 10000, true);\n+        GHUtility.setProperties(graph.edge(5, 6).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(6, 3).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(3, 4).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(4, 10).setDistance(10000), carFE, 60, true, true);\n \n-        graph.edge(6, 7, 10000, true);\n-        graph.edge(7, 8, 10000, true);\n-        graph.edge(8, 4, 10000, true);\n+        GHUtility.setProperties(graph.edge(6, 7).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(7, 8).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(8, 4).setDistance(10000), carFE, 60, true, true);\n \n-        graph.edge(5, 1, 10000, true);\n-        graph.edge(1, 9, 10000, true);\n-        graph.edge(9, 2, 10000, true);\n-        graph.edge(2, 3, 10000, true);\n+        GHUtility.setProperties(graph.edge(5, 1).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(1, 9).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(9, 2).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(2, 3).setDistance(10000), carFE, 60, true, true);\n \n-        graph.edge(4, 11, 9000, true);\n-        graph.edge(11, 12, 9000, true);\n-        graph.edge(12, 10, 10000, true);\n+        GHUtility.setProperties(graph.edge(4, 11).setDistance(9000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(11, 12).setDistance(9000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(12, 10).setDistance(10000), carFE, 60, true, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxMDkwNw=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxOTMxMA==", "bodyText": "It is not easy as the information which encoder should be used is required.", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537019310", "createdAt": "2020-12-06T11:32:24Z", "author": {"login": "karussell"}, "path": "core/src/test/java/com/graphhopper/routing/AlternativeRouteCHTest.java", "diffHunk": "@@ -57,23 +58,23 @@ public GraphHopperStorage createTestGraph(EncodingManager tmpEM) {\n         // has to be locally-shortest to be considered.\n         // So we get all three alternatives.\n \n-        graph.edge(5, 6, 10000, true);\n-        graph.edge(6, 3, 10000, true);\n-        graph.edge(3, 4, 10000, true);\n-        graph.edge(4, 10, 10000, true);\n+        GHUtility.setProperties(graph.edge(5, 6).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(6, 3).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(3, 4).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(4, 10).setDistance(10000), carFE, 60, true, true);\n \n-        graph.edge(6, 7, 10000, true);\n-        graph.edge(7, 8, 10000, true);\n-        graph.edge(8, 4, 10000, true);\n+        GHUtility.setProperties(graph.edge(6, 7).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(7, 8).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(8, 4).setDistance(10000), carFE, 60, true, true);\n \n-        graph.edge(5, 1, 10000, true);\n-        graph.edge(1, 9, 10000, true);\n-        graph.edge(9, 2, 10000, true);\n-        graph.edge(2, 3, 10000, true);\n+        GHUtility.setProperties(graph.edge(5, 1).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(1, 9).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(9, 2).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(2, 3).setDistance(10000), carFE, 60, true, true);\n \n-        graph.edge(4, 11, 9000, true);\n-        graph.edge(11, 12, 9000, true);\n-        graph.edge(12, 10, 10000, true);\n+        GHUtility.setProperties(graph.edge(4, 11).setDistance(9000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(11, 12).setDistance(9000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(12, 10).setDistance(10000), carFE, 60, true, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxMDkwNw=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAyMDk4MQ==", "bodyText": "Ah true we would need GHUtility.edge(graphHopperStorage...) then. Hm, maybe we do not need this after all when we tweak the GHUtility method(s) a bit (see other comments).", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537020981", "createdAt": "2020-12-06T11:43:01Z", "author": {"login": "easbar"}, "path": "core/src/test/java/com/graphhopper/routing/AlternativeRouteCHTest.java", "diffHunk": "@@ -57,23 +58,23 @@ public GraphHopperStorage createTestGraph(EncodingManager tmpEM) {\n         // has to be locally-shortest to be considered.\n         // So we get all three alternatives.\n \n-        graph.edge(5, 6, 10000, true);\n-        graph.edge(6, 3, 10000, true);\n-        graph.edge(3, 4, 10000, true);\n-        graph.edge(4, 10, 10000, true);\n+        GHUtility.setProperties(graph.edge(5, 6).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(6, 3).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(3, 4).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(4, 10).setDistance(10000), carFE, 60, true, true);\n \n-        graph.edge(6, 7, 10000, true);\n-        graph.edge(7, 8, 10000, true);\n-        graph.edge(8, 4, 10000, true);\n+        GHUtility.setProperties(graph.edge(6, 7).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(7, 8).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(8, 4).setDistance(10000), carFE, 60, true, true);\n \n-        graph.edge(5, 1, 10000, true);\n-        graph.edge(1, 9, 10000, true);\n-        graph.edge(9, 2, 10000, true);\n-        graph.edge(2, 3, 10000, true);\n+        GHUtility.setProperties(graph.edge(5, 1).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(1, 9).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(9, 2).setDistance(10000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(2, 3).setDistance(10000), carFE, 60, true, true);\n \n-        graph.edge(4, 11, 9000, true);\n-        graph.edge(11, 12, 9000, true);\n-        graph.edge(12, 10, 10000, true);\n+        GHUtility.setProperties(graph.edge(4, 11).setDistance(9000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(11, 12).setDistance(9000), carFE, 60, true, true);\n+        GHUtility.setProperties(graph.edge(12, 10).setDistance(10000), carFE, 60, true, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxMDkwNw=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MDM3ODI1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/util/GHUtility.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMDo1OTowMVrOIAItXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMjowODo0MlrOIAJaoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxMzU5OA==", "bodyText": "The name of this method seems rather confusing. The old setProperties method should probably be called setAccessAndSpeed? And this new one just sets the access and speed for all encoders, but uses half the max speed as speed? So its something like setAccessAndHalfTheMaxSpeedForAllEncoders?\nBtw. what I also think is confusing is that we have graph.edge(a, b) and not graph.edge(a, b, dist). Do we ever need an edge without a distance? Maybe distance should go in these setProperties kind of methods as well then?", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537013598", "createdAt": "2020-12-06T10:59:01Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/util/GHUtility.java", "diffHunk": "@@ -653,6 +655,15 @@ public static IntsRef setProperties(IntsRef edgeFlags, FlagEncoder encoder, doub\n         return edgeFlags;\n     }\n \n+    public static void setProperties(List<EdgeIteratorState> edges, EncodingManager em, boolean fwd, boolean bwd) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxOTIyNw==", "bodyText": "Ah, ok. Sure.\n\nDo we ever need an edge without a distance?\n\nYes. Yes, for barrier nodes and I think also for certain PT edges we do not set and need a distance.", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537019227", "createdAt": "2020-12-06T11:32:10Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/util/GHUtility.java", "diffHunk": "@@ -653,6 +655,15 @@ public static IntsRef setProperties(IntsRef edgeFlags, FlagEncoder encoder, doub\n         return edgeFlags;\n     }\n \n+    public static void setProperties(List<EdgeIteratorState> edges, EncodingManager em, boolean fwd, boolean bwd) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxMzU5OA=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAyMTAyNg==", "bodyText": "What is the reason for speed=maxspeed/2?\n\nYes. Yes, for barrier nodes and I think also for certain PT edges we do not set a distance.\n\nFor barrier nodes there is a distance (its just  zero). For PT I am not sure. But if its just zero (but exists in storage) also for PT I would rather add the distance parameter and set it to zero than have this setDistance() method. Even when we do not have it we could add graph.edge(a, b, dist) additionally?", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537021026", "createdAt": "2020-12-06T11:43:18Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/util/GHUtility.java", "diffHunk": "@@ -653,6 +655,15 @@ public static IntsRef setProperties(IntsRef edgeFlags, FlagEncoder encoder, doub\n         return edgeFlags;\n     }\n \n+    public static void setProperties(List<EdgeIteratorState> edges, EncodingManager em, boolean fwd, boolean bwd) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxMzU5OA=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAyMjI1NA==", "bodyText": "What is the reason for speed=maxspeed/2?\n\nSome arbitrary speed we use to initialized this. Similar to flagEncoder.speedDefault before. But surely we can get rid of this. See my comment below.\n\nFor PT I am not sure. But if its just zero (but exists in storage) also for PT I would rather add the distance parameter\n\nWhat I meant is that distance is just an edge property like speed and for certain edges of an time-expanded model in PT the distance property does not make sense, not even 0.", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537022254", "createdAt": "2020-12-06T11:50:56Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/util/GHUtility.java", "diffHunk": "@@ -653,6 +655,15 @@ public static IntsRef setProperties(IntsRef edgeFlags, FlagEncoder encoder, doub\n         return edgeFlags;\n     }\n \n+    public static void setProperties(List<EdgeIteratorState> edges, EncodingManager em, boolean fwd, boolean bwd) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxMzU5OA=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAyMjczMA==", "bodyText": "What I meant is that distance is just an edge property like speed\n\nYes excepts its not stored in flags?\n\nfor certain edges of an edge-expanded model in PT the distance property does not make sense, not even 0.\n\nThis is interesting because it means we could save memory for PT if we removed the distance field (if this is relevant in any way).\nWould it be a problem to add graph.edge(a, b, dist)?", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537022730", "createdAt": "2020-12-06T11:53:53Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/util/GHUtility.java", "diffHunk": "@@ -653,6 +655,15 @@ public static IntsRef setProperties(IntsRef edgeFlags, FlagEncoder encoder, doub\n         return edgeFlags;\n     }\n \n+    public static void setProperties(List<EdgeIteratorState> edges, EncodingManager em, boolean fwd, boolean bwd) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxMzU5OA=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAyNDcyOQ==", "bodyText": "Yes excepts its not stored in flags?\n\nCurrently an implementation detail :D\n\nThis is interesting because it means we could save memory for PT if we removed the distance field (if this is relevant in any way).\n\nYes, definitely. (btw it is time-expanded not edge-expanded like I said before)\n\nWould it be a problem to add graph.edge(a, b, dist)?\n\nNot sure. IMO it is not a method that belongs to the Graph interface.", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537024729", "createdAt": "2020-12-06T12:05:45Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/util/GHUtility.java", "diffHunk": "@@ -653,6 +655,15 @@ public static IntsRef setProperties(IntsRef edgeFlags, FlagEncoder encoder, doub\n         return edgeFlags;\n     }\n \n+    public static void setProperties(List<EdgeIteratorState> edges, EncodingManager em, boolean fwd, boolean bwd) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxMzU5OA=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAyNTE4NQ==", "bodyText": "Ok convinced, lets keep it as is and use setDistance().", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537025185", "createdAt": "2020-12-06T12:08:42Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/util/GHUtility.java", "diffHunk": "@@ -653,6 +655,15 @@ public static IntsRef setProperties(IntsRef edgeFlags, FlagEncoder encoder, doub\n         return edgeFlags;\n     }\n \n+    public static void setProperties(List<EdgeIteratorState> edges, EncodingManager em, boolean fwd, boolean bwd) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxMzU5OA=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MDM4MTQ3OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/graphhopper/reader/dem/BridgeElevationInterpolatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMTowMTowM1rOIAIuzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMTozNDowNFrOIAJEhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxMzk2Nw==", "bodyText": "What I like here is that the speed is now explicit, while previously one always had to keep in mind that its 60 in these tests. Maybe I just have to get used to this verbose code to create a testing graph, but also see my other comment about setProperties which I do not find intuitive.", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537013967", "createdAt": "2020-12-06T11:01:03Z", "author": {"login": "easbar"}, "path": "core/src/test/java/com/graphhopper/reader/dem/BridgeElevationInterpolatorTest.java", "diffHunk": "@@ -75,17 +73,19 @@ public void interpolatesElevationOfPillarNodes() {\n         na.setNode(8, 30, 10, 10);\n         na.setNode(9, 40, 10, 0);\n \n-        EdgeIteratorState edge01 = graph.edge(0, 1, 10, true);\n-        EdgeIteratorState edge12 = graph.edge(1, 2, 10, true);\n-        EdgeIteratorState edge23 = graph.edge(2, 3, 10, true);\n-        EdgeIteratorState edge34 = graph.edge(3, 4, 10, true);\n-        EdgeIteratorState edge56 = graph.edge(5, 6, 10, true);\n-        EdgeIteratorState edge67 = graph.edge(6, 7, 10, true);\n-        EdgeIteratorState edge78 = graph.edge(7, 8, 10, true);\n-        EdgeIteratorState edge89 = graph.edge(8, 9, 10, true);\n-        EdgeIteratorState edge17 = graph.edge(1, 7, 10, true);\n-        EdgeIteratorState edge27 = graph.edge(2, 7, 10, true);\n-        EdgeIteratorState edge37 = graph.edge(3, 7, 10, true);\n+        FlagEncoder encoder = encodingManager.getEncoder(\"car\");\n+        EdgeIteratorState edge01 = GHUtility.setProperties(graph.edge(0, 1).setDistance(10), encoder, 60, true, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxOTUyNA==", "bodyText": "I also do not find it intuitive and for tests we should think about a better solution. Maybe we can use the method you proposed above but with a GraphHopperStorage which gives us access to the EncodingManger where we then by default use car access and average_speed?", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537019524", "createdAt": "2020-12-06T11:34:04Z", "author": {"login": "karussell"}, "path": "core/src/test/java/com/graphhopper/reader/dem/BridgeElevationInterpolatorTest.java", "diffHunk": "@@ -75,17 +73,19 @@ public void interpolatesElevationOfPillarNodes() {\n         na.setNode(8, 30, 10, 10);\n         na.setNode(9, 40, 10, 0);\n \n-        EdgeIteratorState edge01 = graph.edge(0, 1, 10, true);\n-        EdgeIteratorState edge12 = graph.edge(1, 2, 10, true);\n-        EdgeIteratorState edge23 = graph.edge(2, 3, 10, true);\n-        EdgeIteratorState edge34 = graph.edge(3, 4, 10, true);\n-        EdgeIteratorState edge56 = graph.edge(5, 6, 10, true);\n-        EdgeIteratorState edge67 = graph.edge(6, 7, 10, true);\n-        EdgeIteratorState edge78 = graph.edge(7, 8, 10, true);\n-        EdgeIteratorState edge89 = graph.edge(8, 9, 10, true);\n-        EdgeIteratorState edge17 = graph.edge(1, 7, 10, true);\n-        EdgeIteratorState edge27 = graph.edge(2, 7, 10, true);\n-        EdgeIteratorState edge37 = graph.edge(3, 7, 10, true);\n+        FlagEncoder encoder = encodingManager.getEncoder(\"car\");\n+        EdgeIteratorState edge01 = GHUtility.setProperties(graph.edge(0, 1).setDistance(10), encoder, 60, true, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxMzk2Nw=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MDM5Mzc5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/graphhopper/routing/AlternativeRouteTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMTowOToyN1rOIAI0Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMTozODo1OVrOIAJHsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxNTM1NA==", "bodyText": "We should probably run code formatting here. For example you can undo all changes and commit them again with the \"format  on commit\" checkbox enabled in intellij.", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537015354", "createdAt": "2020-12-06T11:09:27Z", "author": {"login": "easbar"}, "path": "core/src/test/java/com/graphhopper/routing/AlternativeRouteTest.java", "diffHunk": "@@ -69,28 +71,28 @@ public AlternativeRouteTest(TraversalMode tMode) {\n         });\n     }\n \n-    public static void initTestGraph(Graph graph) {\n+    public static void initTestGraph(Graph graph, FlagEncoder encoder) {\n         /* 9\n          _/\\\n          1  2-3-4-10\n          \\   /   \\\n          5--6-7---8\n         \n          */\n-        graph.edge(1, 9, 1, true);\n-        graph.edge(9, 2, 1, true);\n-        graph.edge(2, 3, 1, true);\n-        graph.edge(3, 4, 1, true);\n-        graph.edge(4, 10, 1, true);\n+        GHUtility.setProperties(graph.edge(1,9).setDistance(1),encoder,60,true, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxOTY4Ng==", "bodyText": "Ok, will do. (I usually do not use IntelliJ for git)", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537019686", "createdAt": "2020-12-06T11:34:59Z", "author": {"login": "karussell"}, "path": "core/src/test/java/com/graphhopper/routing/AlternativeRouteTest.java", "diffHunk": "@@ -69,28 +71,28 @@ public AlternativeRouteTest(TraversalMode tMode) {\n         });\n     }\n \n-    public static void initTestGraph(Graph graph) {\n+    public static void initTestGraph(Graph graph, FlagEncoder encoder) {\n         /* 9\n          _/\\\n          1  2-3-4-10\n          \\   /   \\\n          5--6-7---8\n         \n          */\n-        graph.edge(1, 9, 1, true);\n-        graph.edge(9, 2, 1, true);\n-        graph.edge(2, 3, 1, true);\n-        graph.edge(3, 4, 1, true);\n-        graph.edge(4, 10, 1, true);\n+        GHUtility.setProperties(graph.edge(1,9).setDistance(1),encoder,60,true, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxNTM1NA=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAyMDMzNg==", "bodyText": "I just meant this is an easy way to apply the formatting to the changed files only. I think we never fixed the formatting for the entire project so its hard to run it everywhere ;)", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537020336", "createdAt": "2020-12-06T11:38:59Z", "author": {"login": "easbar"}, "path": "core/src/test/java/com/graphhopper/routing/AlternativeRouteTest.java", "diffHunk": "@@ -69,28 +71,28 @@ public AlternativeRouteTest(TraversalMode tMode) {\n         });\n     }\n \n-    public static void initTestGraph(Graph graph) {\n+    public static void initTestGraph(Graph graph, FlagEncoder encoder) {\n         /* 9\n          _/\\\n          1  2-3-4-10\n          \\   /   \\\n          5--6-7---8\n         \n          */\n-        graph.edge(1, 9, 1, true);\n-        graph.edge(9, 2, 1, true);\n-        graph.edge(2, 3, 1, true);\n-        graph.edge(3, 4, 1, true);\n-        graph.edge(4, 10, 1, true);\n+        GHUtility.setProperties(graph.edge(1,9).setDistance(1),encoder,60,true, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxNTM1NA=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MDQwMTE5OnYy", "diffSide": "RIGHT", "path": "core/src/test/java/com/graphhopper/storage/TurnCostStorageTest.java", "isResolved": true, "comments": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxMToxNDoyNVrOIAI3ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMTo1NzoyOVrOIBWT0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxNjIwMg==", "bodyText": "I am not sure yet if this is an improvement compared to several calls to setProperties? Especially setting speed=maxspeed/2  seems not very obvious (or maybe I do not understand it yet)?", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537016202", "createdAt": "2020-12-06T11:14:25Z", "author": {"login": "easbar"}, "path": "core/src/test/java/com/graphhopper/storage/TurnCostStorageTest.java", "diffHunk": "@@ -52,12 +53,13 @@ public void setup() {\n     // 2--3\n     // |\n     // 4\n-    public static void initGraph(Graph g) {\n-        g.edge(0, 1, 3, true);\n-        g.edge(0, 2, 1, true);\n-        g.edge(1, 3, 1, true);\n-        g.edge(2, 3, 1, true);\n-        g.edge(2, 4, 1, true);\n+    public static void initGraph(GraphHopperStorage g) {\n+        GHUtility.setProperties(Arrays.asList(\n+                g.edge(0, 1).setDistance(3),\n+                g.edge(0, 2).setDistance(1),\n+                g.edge(1, 3).setDistance(1),\n+                g.edge(2, 3).setDistance(1),\n+                g.edge(2, 4).setDistance(1)), g.getEncodingManager(), true, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAyMDQ5Mg==", "bodyText": "The idea was basically to have an alternative to the previously used graph.edge(from, to, dist, bothDir) (like you said before it was pretty useful). So we set some default speed for all encoders. And maxspeed/2 is approximatively the previously used default speed for all encoders.\nWe should rename the method as a first step. But I'm unsure if we should make it more explicit as it will then get more verbose?", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537020492", "createdAt": "2020-12-06T11:39:48Z", "author": {"login": "karussell"}, "path": "core/src/test/java/com/graphhopper/storage/TurnCostStorageTest.java", "diffHunk": "@@ -52,12 +53,13 @@ public void setup() {\n     // 2--3\n     // |\n     // 4\n-    public static void initGraph(Graph g) {\n-        g.edge(0, 1, 3, true);\n-        g.edge(0, 2, 1, true);\n-        g.edge(1, 3, 1, true);\n-        g.edge(2, 3, 1, true);\n-        g.edge(2, 4, 1, true);\n+    public static void initGraph(GraphHopperStorage g) {\n+        GHUtility.setProperties(Arrays.asList(\n+                g.edge(0, 1).setDistance(3),\n+                g.edge(0, 2).setDistance(1),\n+                g.edge(1, 3).setDistance(1),\n+                g.edge(2, 3).setDistance(1),\n+                g.edge(2, 4).setDistance(1)), g.getEncodingManager(), true, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxNjIwMg=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAyMTE2NA==", "bodyText": "Can we not just remove it entirely? I think most tests use a single encoder anyway? And for those that do not maybe we can add a helper method there? The problem with maxspeed/2 is that its some kind of 'convention' that one a) has to know and b) couples otherwise unrelated tests to each other. Changing this later would affect many tests and at the same time there is no real reason it is maxspeed/2 and not e.g. maxSpeed/3.", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537021164", "createdAt": "2020-12-06T11:44:18Z", "author": {"login": "easbar"}, "path": "core/src/test/java/com/graphhopper/storage/TurnCostStorageTest.java", "diffHunk": "@@ -52,12 +53,13 @@ public void setup() {\n     // 2--3\n     // |\n     // 4\n-    public static void initGraph(Graph g) {\n-        g.edge(0, 1, 3, true);\n-        g.edge(0, 2, 1, true);\n-        g.edge(1, 3, 1, true);\n-        g.edge(2, 3, 1, true);\n-        g.edge(2, 4, 1, true);\n+    public static void initGraph(GraphHopperStorage g) {\n+        GHUtility.setProperties(Arrays.asList(\n+                g.edge(0, 1).setDistance(3),\n+                g.edge(0, 2).setDistance(1),\n+                g.edge(1, 3).setDistance(1),\n+                g.edge(2, 3).setDistance(1),\n+                g.edge(2, 4).setDistance(1)), g.getEncodingManager(), true, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxNjIwMg=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAyMjE3MQ==", "bodyText": "What do you want to remove entirely? The method? I would rather expand its usage and make speed+encoder more explicit? I like it more as the edge creation is less hidden within GHUtility calls.", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537022171", "createdAt": "2020-12-06T11:50:17Z", "author": {"login": "karussell"}, "path": "core/src/test/java/com/graphhopper/storage/TurnCostStorageTest.java", "diffHunk": "@@ -52,12 +53,13 @@ public void setup() {\n     // 2--3\n     // |\n     // 4\n-    public static void initGraph(Graph g) {\n-        g.edge(0, 1, 3, true);\n-        g.edge(0, 2, 1, true);\n-        g.edge(1, 3, 1, true);\n-        g.edge(2, 3, 1, true);\n-        g.edge(2, 4, 1, true);\n+    public static void initGraph(GraphHopperStorage g) {\n+        GHUtility.setProperties(Arrays.asList(\n+                g.edge(0, 1).setDistance(3),\n+                g.edge(0, 2).setDistance(1),\n+                g.edge(1, 3).setDistance(1),\n+                g.edge(2, 3).setDistance(1),\n+                g.edge(2, 4).setDistance(1)), g.getEncodingManager(), true, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxNjIwMg=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAyMjk4OA==", "bodyText": "What do you want to remove entirely? The method?\n\nYes, GHUtility.setProperties(List<EdgeIteratorState>... and setting maxspeed/2 . Its only used in three places.\nThen creating edges could look like this:\nEdgeIteratorState edge = GHUtility.setAccessAndSpeed(graph.edge(3, 5, 200), encoder, true, false, 60);\nor maybe even (not sure)\nEdgeIteratorState edge = graph.edge(3, 5, 200).setAccessAndSpeed(encoder, true, false, 60))\nor\nEdgeIteratorState edge = graph.edge(3, 5).setDistance(200).set(accessEnc, true).setReverse(accessEnc, false).set(speedEnc, 60).setReverse(speedEnc, 60);\n?", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537022988", "createdAt": "2020-12-06T11:55:25Z", "author": {"login": "easbar"}, "path": "core/src/test/java/com/graphhopper/storage/TurnCostStorageTest.java", "diffHunk": "@@ -52,12 +53,13 @@ public void setup() {\n     // 2--3\n     // |\n     // 4\n-    public static void initGraph(Graph g) {\n-        g.edge(0, 1, 3, true);\n-        g.edge(0, 2, 1, true);\n-        g.edge(1, 3, 1, true);\n-        g.edge(2, 3, 1, true);\n-        g.edge(2, 4, 1, true);\n+    public static void initGraph(GraphHopperStorage g) {\n+        GHUtility.setProperties(Arrays.asList(\n+                g.edge(0, 1).setDistance(3),\n+                g.edge(0, 2).setDistance(1),\n+                g.edge(1, 3).setDistance(1),\n+                g.edge(2, 3).setDistance(1),\n+                g.edge(2, 4).setDistance(1)), g.getEncodingManager(), true, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxNjIwMg=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAyNDk5Mg==", "bodyText": "... or maybe even:\nEdgeIteratorState edge = graph.edge(3, 5).setDistance(200).set(accessEnc, true, false).set(speedEnc, 60, 60);\ni.e. add setter methods for encoded values to set both directions with one call.\n// in EdgeIteratorState.java\n...\ndefault EdgeIteratorState set(BooleanEncodedValue property, boolean fwd, boolean bwd) {\n      set(property, fwd);\n      setReverse(property, bwd);\n      return this;\n}\n\ndefault EdgeIteratorState set(DecimalEncodedValue property, double valueFwd, double valueBwd) {\n    if (!isStoreTwoDirections())\n       throw new IllegalArgumentException(\"EncodedValue \" + property + \" does not support setting different values for both directions, use set(DecimalEncdodedValue, double) instead\");\n    set(property, valueFwd);\n    setReverse(property, valueBwd);\n    return this;\n}", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537024992", "createdAt": "2020-12-06T12:07:20Z", "author": {"login": "easbar"}, "path": "core/src/test/java/com/graphhopper/storage/TurnCostStorageTest.java", "diffHunk": "@@ -52,12 +53,13 @@ public void setup() {\n     // 2--3\n     // |\n     // 4\n-    public static void initGraph(Graph g) {\n-        g.edge(0, 1, 3, true);\n-        g.edge(0, 2, 1, true);\n-        g.edge(1, 3, 1, true);\n-        g.edge(2, 3, 1, true);\n-        g.edge(2, 4, 1, true);\n+    public static void initGraph(GraphHopperStorage g) {\n+        GHUtility.setProperties(Arrays.asList(\n+                g.edge(0, 1).setDistance(3),\n+                g.edge(0, 2).setDistance(1),\n+                g.edge(1, 3).setDistance(1),\n+                g.edge(2, 3).setDistance(1),\n+                g.edge(2, 4).setDistance(1)), g.getEncodingManager(), true, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxNjIwMg=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAyNjAyNg==", "bodyText": "I think I favor the last option I proposed because it is very explicit and not even that verbose. I am just not sure how set(encValue, boolean, boolean) behaves for encoded values that do not support two different directions (like road_class). Would we be able to throw an error when we call set(encValue, fwd, bwd), encValue is not bidirectional and fwd!=bwd, something like set(roadClassEnc, true, false)? <- should be ok see previous comment", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537026026", "createdAt": "2020-12-06T12:13:48Z", "author": {"login": "easbar"}, "path": "core/src/test/java/com/graphhopper/storage/TurnCostStorageTest.java", "diffHunk": "@@ -52,12 +53,13 @@ public void setup() {\n     // 2--3\n     // |\n     // 4\n-    public static void initGraph(Graph g) {\n-        g.edge(0, 1, 3, true);\n-        g.edge(0, 2, 1, true);\n-        g.edge(1, 3, 1, true);\n-        g.edge(2, 3, 1, true);\n-        g.edge(2, 4, 1, true);\n+    public static void initGraph(GraphHopperStorage g) {\n+        GHUtility.setProperties(Arrays.asList(\n+                g.edge(0, 1).setDistance(3),\n+                g.edge(0, 2).setDistance(1),\n+                g.edge(1, 3).setDistance(1),\n+                g.edge(2, 3).setDistance(1),\n+                g.edge(2, 4).setDistance(1)), g.getEncodingManager(), true, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxNjIwMg=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA2MTI4MA==", "bodyText": "set(encValue, boolean, boolean)\n\nSounds like a good solution.\n\nI am just not sure how set(encValue, boolean, boolean) behaves for encoded values that do not support two different directions\n\nThis should work the way you described\n\nIts only used in three places.\n\nOnly because I introduced it very late in the process as I stumbled over the fact that often multiple edges are initialized with the same speeds and IMO this \"bulk\" method improves readability of the edge creation.\nWhat about a method like:\nsetSpeeds(Double fwdSpeed, Double bwdSpeed, FlagEncoder encoder, EdgeIteratorState... edges)\nIt is short and less verbose for many edges.\nAnd it would be already compatible to a version without \"access\"-bits. With that I mean the following: currently we have the \"access\"-bits defined only to use less bits (2 bits + speed bits intead of 2*speed_bits) and something that only the Weighting can define. Hmmh, or before or additionally to #1835 it might be interesting to investigate if we in general move away from access bits and just use 2*speed_bits? So for higher precision of 7 bits this means 5 bits more per vehicle profile but even for hiking or walking this would make sense (#1679). Not sure.", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537061280", "createdAt": "2020-12-06T15:30:00Z", "author": {"login": "karussell"}, "path": "core/src/test/java/com/graphhopper/storage/TurnCostStorageTest.java", "diffHunk": "@@ -52,12 +53,13 @@ public void setup() {\n     // 2--3\n     // |\n     // 4\n-    public static void initGraph(Graph g) {\n-        g.edge(0, 1, 3, true);\n-        g.edge(0, 2, 1, true);\n-        g.edge(1, 3, 1, true);\n-        g.edge(2, 3, 1, true);\n-        g.edge(2, 4, 1, true);\n+    public static void initGraph(GraphHopperStorage g) {\n+        GHUtility.setProperties(Arrays.asList(\n+                g.edge(0, 1).setDistance(3),\n+                g.edge(0, 2).setDistance(1),\n+                g.edge(1, 3).setDistance(1),\n+                g.edge(2, 3).setDistance(1),\n+                g.edge(2, 4).setDistance(1)), g.getEncodingManager(), true, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxNjIwMg=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA2MzMyNg==", "bodyText": "setSpeeds(Double fwdSpeed, Double bwdSpeed, FlagEncoder encoder, EdgeIteratorState... edges)\n\nWhere would you put this method and can you give an example for its usage?\n\nAnd it would be already compatible to a version without \"access\"-bits.\n\nAh because fwd/bwdSpeed=infinity would mean 'no access'?\n\nif we in general move away from access bits\n\nThis is a hard question, but so far it seems useful to me to e.g. separate motorized and outdoor profiles even without specifying the weighting already. Is this something we have to decide here? My guess is the refactoring here will not make it harder to remove the access flags later. So yes we can introduce a helper method that already hides them, but we can just as well do this when we actually make this move? Delaying this until later seems to be the better option to me because we do not really know what we will do yet :)", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537063326", "createdAt": "2020-12-06T15:37:13Z", "author": {"login": "easbar"}, "path": "core/src/test/java/com/graphhopper/storage/TurnCostStorageTest.java", "diffHunk": "@@ -52,12 +53,13 @@ public void setup() {\n     // 2--3\n     // |\n     // 4\n-    public static void initGraph(Graph g) {\n-        g.edge(0, 1, 3, true);\n-        g.edge(0, 2, 1, true);\n-        g.edge(1, 3, 1, true);\n-        g.edge(2, 3, 1, true);\n-        g.edge(2, 4, 1, true);\n+    public static void initGraph(GraphHopperStorage g) {\n+        GHUtility.setProperties(Arrays.asList(\n+                g.edge(0, 1).setDistance(3),\n+                g.edge(0, 2).setDistance(1),\n+                g.edge(1, 3).setDistance(1),\n+                g.edge(2, 3).setDistance(1),\n+                g.edge(2, 4).setDistance(1)), g.getEncodingManager(), true, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxNjIwMg=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA2ODk0Mg==", "bodyText": "Ah because fwd/bwdSpeed=infinity would mean 'no access'?\n\nyes (for speed==0)\n\nIs this something we have to decide here?\n\nNo :) ... just thought that having a method without access bits specified is of an advantage for the future :)\n\nDelaying this until later seems to be the better option to me because we do not really know what we will do yet :)\n\nok\n\nWhere would you put this method and can you give an example for its usage?\n\nHmmh, it does not work well with the encoder list it seems, but with one encoder it would be a bit more powerful than the existing setProperties method (as it has two speed parameters and allows multiple edges) and still is not more verbose. This method is used +1000 times and we can clean up some of its usages like in BridgeElevationInterpolatorTest, where we currently have:\nEdgeIteratorState edge01 = GHUtility.setProperties(graph.edge(0, 1).setDistance(10), encoder, 60, true, true);\nEdgeIteratorState edge12 = GHUtility.setProperties(graph.edge(1, 2).setDistance(10), encoder, 60, true, true);\nEdgeIteratorState edge23 = GHUtility.setProperties(graph.edge(2, 3).setDistance(10), encoder, 60, true, true);\nEdgeIteratorState edge34 = GHUtility.setProperties(graph.edge(3, 4).setDistance(10), encoder, 60, true, true);\nEdgeIteratorState edge56 = GHUtility.setProperties(graph.edge(5, 6).setDistance(10), encoder, 60, true, true);\nEdgeIteratorState edge67 = GHUtility.setProperties(graph.edge(6, 7).setDistance(10), encoder, 60, true, true);\nEdgeIteratorState edge78 = GHUtility.setProperties(graph.edge(7, 8).setDistance(10), encoder, 60, true, true);\nEdgeIteratorState edge89 = GHUtility.setProperties(graph.edge(8, 9).setDistance(10), encoder, 60, true, true);\nEdgeIteratorState edge17 = GHUtility.setProperties(graph.edge(1, 7).setDistance(10), encoder, 60, true, true);\nEdgeIteratorState edge27 = GHUtility.setProperties(graph.edge(2, 7).setDistance(10), encoder, 60, true, true);\nEdgeIteratorState edge37 = GHUtility.setProperties(graph.edge(3, 7).setDistance(10), encoder, 60, true, true);\nand could replace it with:\nEdgeIteratorState edge01, edge12, edge23, edge34, edge56, edge67, edge78, edge89, edge17, edge27, edge37;\nGHUtility.setSpeeds(60, 60, encoder,\n        edge01 = graph.edge(0, 1).setDistance(10),\n        edge12 = graph.edge(1, 2).setDistance(10),\n        edge23 = graph.edge(2, 3).setDistance(10),\n        edge34 = graph.edge(3, 4).setDistance(10),\n        edge56 = graph.edge(5, 6).setDistance(10),\n        edge67 = graph.edge(6, 7).setDistance(10),\n        edge78 = graph.edge(7, 8).setDistance(10),\n        edge89 = graph.edge(8, 9).setDistance(10),\n        edge17 = graph.edge(1, 7).setDistance(10),\n        edge27 = graph.edge(2, 7).setDistance(10),\n        edge37 = graph.edge(3, 7).setDistance(10));", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537068942", "createdAt": "2020-12-06T16:09:10Z", "author": {"login": "karussell"}, "path": "core/src/test/java/com/graphhopper/storage/TurnCostStorageTest.java", "diffHunk": "@@ -52,12 +53,13 @@ public void setup() {\n     // 2--3\n     // |\n     // 4\n-    public static void initGraph(Graph g) {\n-        g.edge(0, 1, 3, true);\n-        g.edge(0, 2, 1, true);\n-        g.edge(1, 3, 1, true);\n-        g.edge(2, 3, 1, true);\n-        g.edge(2, 4, 1, true);\n+    public static void initGraph(GraphHopperStorage g) {\n+        GHUtility.setProperties(Arrays.asList(\n+                g.edge(0, 1).setDistance(3),\n+                g.edge(0, 2).setDistance(1),\n+                g.edge(1, 3).setDistance(1),\n+                g.edge(2, 3).setDistance(1),\n+                g.edge(2, 4).setDistance(1)), g.getEncodingManager(), true, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxNjIwMg=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA3ODAxMQ==", "bodyText": "Ok, either way seems fine. Is it a lot of work to turn the single edge creations into calls to (GHUtility.setSpeeds(fwdSpeed, bwdSpeed, encoder, EdgeIteratorState...)? I am happy with this format and maybe only use GHUtility.setSpeeds later in places we feel it makes sense?", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537078011", "createdAt": "2020-12-06T16:50:53Z", "author": {"login": "easbar"}, "path": "core/src/test/java/com/graphhopper/storage/TurnCostStorageTest.java", "diffHunk": "@@ -52,12 +53,13 @@ public void setup() {\n     // 2--3\n     // |\n     // 4\n-    public static void initGraph(Graph g) {\n-        g.edge(0, 1, 3, true);\n-        g.edge(0, 2, 1, true);\n-        g.edge(1, 3, 1, true);\n-        g.edge(2, 3, 1, true);\n-        g.edge(2, 4, 1, true);\n+    public static void initGraph(GraphHopperStorage g) {\n+        GHUtility.setProperties(Arrays.asList(\n+                g.edge(0, 1).setDistance(3),\n+                g.edge(0, 2).setDistance(1),\n+                g.edge(1, 3).setDistance(1),\n+                g.edge(2, 3).setDistance(1),\n+                g.edge(2, 4).setDistance(1)), g.getEncodingManager(), true, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxNjIwMg=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5ODI2OA==", "bodyText": "Yes, it is a lot of work to migrate the current stuff. Probably we should follow a similar approach like migrating to junit5 :)\n\nI am happy with this format\n\nShould I introduce the methods set(encValue, fwd, bwd) in this PR or later?", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537098268", "createdAt": "2020-12-06T18:37:57Z", "author": {"login": "karussell"}, "path": "core/src/test/java/com/graphhopper/storage/TurnCostStorageTest.java", "diffHunk": "@@ -52,12 +53,13 @@ public void setup() {\n     // 2--3\n     // |\n     // 4\n-    public static void initGraph(Graph g) {\n-        g.edge(0, 1, 3, true);\n-        g.edge(0, 2, 1, true);\n-        g.edge(1, 3, 1, true);\n-        g.edge(2, 3, 1, true);\n-        g.edge(2, 4, 1, true);\n+    public static void initGraph(GraphHopperStorage g) {\n+        GHUtility.setProperties(Arrays.asList(\n+                g.edge(0, 1).setDistance(3),\n+                g.edge(0, 2).setDistance(1),\n+                g.edge(1, 3).setDistance(1),\n+                g.edge(2, 3).setDistance(1),\n+                g.edge(2, 4).setDistance(1)), g.getEncodingManager(), true, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxNjIwMg=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA5ODY1OA==", "bodyText": "Yes, it is a lot of work to migrate the current stuff. Probably we should follow a similar approach like migrating to junit5 :)\n\nI agree.\n\nShould I introduce the methods set(encValue, fwd, bwd) in this PR or later?\n\nIs it harder or easier to search/replace GHUtility.setProperties here than it would be to search/replace graph.edge and do change it to set(encValue, fwd, bwd) in master? Hm yes why not do it here directly?", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537098658", "createdAt": "2020-12-06T18:40:17Z", "author": {"login": "easbar"}, "path": "core/src/test/java/com/graphhopper/storage/TurnCostStorageTest.java", "diffHunk": "@@ -52,12 +53,13 @@ public void setup() {\n     // 2--3\n     // |\n     // 4\n-    public static void initGraph(Graph g) {\n-        g.edge(0, 1, 3, true);\n-        g.edge(0, 2, 1, true);\n-        g.edge(1, 3, 1, true);\n-        g.edge(2, 3, 1, true);\n-        g.edge(2, 4, 1, true);\n+    public static void initGraph(GraphHopperStorage g) {\n+        GHUtility.setProperties(Arrays.asList(\n+                g.edge(0, 1).setDistance(3),\n+                g.edge(0, 2).setDistance(1),\n+                g.edge(1, 3).setDistance(1),\n+                g.edge(2, 3).setDistance(1),\n+                g.edge(2, 4).setDistance(1)), g.getEncodingManager(), true, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxNjIwMg=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwMjY2Ng==", "bodyText": "When migrating the current code to:\nEdgeIteratorState edge = graph.edge(3, 5).setDistance(200).set(accessEnc, true, true).set(speedEnc, 60, 60);\nthere are two problems: if we throw an explicit error we cannot easily refactor the current usages as speedEnc is often not for two directions. Except we set the backward value in a silent manner which I did in 418454a#diff-305b1d577b70e729c3845b447da93e1bc9668716a1c4b2e0928987b8623380b0R174, but I do not like it that much for our Java API.\nAnd the code will be longer:\nEdgeIteratorState edge = graph.edge(3, 5).setDistance(200).set(encoder.getAccessEnc(), true, true).set(encoder.getSpeedEnc(), 60, 60);\nSo for now I would prefer to keep it (simpler?) like:\nEdgeIteratorState edge = GHUtilities.setSpeed(60, 60, encoder, graph.edge(3, 5).setDistance(200));\nThis code then uses the implicit setReverse:\nif (avgSpeedEnc.isStoreTwoDirections()) edge.setReverse(avgSpeedEnc, bwdSpeed);\nwhich I find acceptable for the utility function and it has also the advantage that no access encoded value is mentioned and a speed of 0 would indicate that the direction is blocked.\nTricky stuff :)", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537502666", "createdAt": "2020-12-07T13:24:13Z", "author": {"login": "karussell"}, "path": "core/src/test/java/com/graphhopper/storage/TurnCostStorageTest.java", "diffHunk": "@@ -52,12 +53,13 @@ public void setup() {\n     // 2--3\n     // |\n     // 4\n-    public static void initGraph(Graph g) {\n-        g.edge(0, 1, 3, true);\n-        g.edge(0, 2, 1, true);\n-        g.edge(1, 3, 1, true);\n-        g.edge(2, 3, 1, true);\n-        g.edge(2, 4, 1, true);\n+    public static void initGraph(GraphHopperStorage g) {\n+        GHUtility.setProperties(Arrays.asList(\n+                g.edge(0, 1).setDistance(3),\n+                g.edge(0, 2).setDistance(1),\n+                g.edge(1, 3).setDistance(1),\n+                g.edge(2, 3).setDistance(1),\n+                g.edge(2, 4).setDistance(1)), g.getEncodingManager(), true, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxNjIwMg=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzY0MTg2MQ==", "bodyText": "Except we set the backward value in a silent manner\n\nYeah that's not ideal, for example setting .set(speedEnc, 60, 40) should be an error if there is only one direction?\nAnd I guess you right if we do just search&replace we a) do not know if the encoder is bidirectional and b) we do not even know if speed=60 is correct because that depends on the encoder? But maybe we can assume its a car encoder with one direction and speed 60 and only fix the remaining (hopefully not so many) cases?\n\nSo for now I would prefer to keep it (simpler?) like:\n\nYes sure if it makes the refactoring easier I would also use the utility method for now.", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r537641861", "createdAt": "2020-12-07T16:25:43Z", "author": {"login": "easbar"}, "path": "core/src/test/java/com/graphhopper/storage/TurnCostStorageTest.java", "diffHunk": "@@ -52,12 +53,13 @@ public void setup() {\n     // 2--3\n     // |\n     // 4\n-    public static void initGraph(Graph g) {\n-        g.edge(0, 1, 3, true);\n-        g.edge(0, 2, 1, true);\n-        g.edge(1, 3, 1, true);\n-        g.edge(2, 3, 1, true);\n-        g.edge(2, 4, 1, true);\n+    public static void initGraph(GraphHopperStorage g) {\n+        GHUtility.setProperties(Arrays.asList(\n+                g.edge(0, 1).setDistance(3),\n+                g.edge(0, 2).setDistance(1),\n+                g.edge(1, 3).setDistance(1),\n+                g.edge(2, 3).setDistance(1),\n+                g.edge(2, 4).setDistance(1)), g.getEncodingManager(), true, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxNjIwMg=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI4NTAwOQ==", "bodyText": "Yes sure if it makes the refactoring easier I would also use the utility method for now.\n\nYes, this 'regex refactoring' was relative time intense :)", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r538285009", "createdAt": "2020-12-08T11:57:29Z", "author": {"login": "karussell"}, "path": "core/src/test/java/com/graphhopper/storage/TurnCostStorageTest.java", "diffHunk": "@@ -52,12 +53,13 @@ public void setup() {\n     // 2--3\n     // |\n     // 4\n-    public static void initGraph(Graph g) {\n-        g.edge(0, 1, 3, true);\n-        g.edge(0, 2, 1, true);\n-        g.edge(1, 3, 1, true);\n-        g.edge(2, 3, 1, true);\n-        g.edge(2, 4, 1, true);\n+    public static void initGraph(GraphHopperStorage g) {\n+        GHUtility.setProperties(Arrays.asList(\n+                g.edge(0, 1).setDistance(3),\n+                g.edge(0, 2).setDistance(1),\n+                g.edge(1, 3).setDistance(1),\n+                g.edge(2, 3).setDistance(1),\n+                g.edge(2, 4).setDistance(1)), g.getEncodingManager(), true, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzAxNjIwMg=="}, "originalCommit": {"oid": "c3214941c7a53b71fc6d274ecd5eae12f270c3a7"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNDg2NTEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/util/GHUtility.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMDoxNDo1OFrOIE413Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xM1QyMzoyMDowOFrOIE624w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk5NjUwOQ==", "bodyText": "Why did you add the speed parameter here? The previous behavior was that the default speed was used if randomSpeedEnc was null and random speeds were generated otherwise. In case randomSpeedEnc.isStoreTwoDirections different speeds were used for fwd/bwd direction. Ok now the default speed is gone we need some speed parameter (or just set it to 60 inside this method?), but we should still use random speeds were we did before. Right now speed is != null almost everywhere. Also its a bit problematic to change this method because it might break older seeds (that we should not rely on, but I think in some cases we still do...)", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r541996509", "createdAt": "2020-12-13T20:14:58Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/util/GHUtility.java", "diffHunk": "@@ -168,8 +168,11 @@ private static void printUnitTestEdge(FlagEncoder encoder, EdgeIteratorState edg\n                 \"graph.edge(%d, %d, %f, %s); // edgeId=%s\\n\", from, to, edge.getDistance(), fwd && bwd ? \"true\" : \"false\", edge.getEdge());\n     }\n \n+    /**\n+     * @param speed if null a random speed will be assign to every edge\n+     */\n     public static void buildRandomGraph(Graph graph, Random random, int numNodes, double meanDegree, boolean allowLoops,\n-                                        boolean allowZeroDistance, DecimalEncodedValue randomSpeedEnc,\n+                                        boolean allowZeroDistance, BooleanEncodedValue accessEnc, DecimalEncodedValue speedEnc, Double speed,\n                                         double pNonZeroLoop, double pBothDir, double pRandomDistanceOffset) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84f673a09747df92c0e66428aad8484f2f2060c9"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyNzUzNQ==", "bodyText": "I did not intend to change this and tried to be careful ... likely I misunderstand something. The intention was to call with speed=null where before it was called with randomSpeedEnc=null.\n\nRight now speed is != null almost everywhere.\n\nOnly for EdgeBasedTarjanSCCTest there were calls with randomSpeedEnc=null. Those two calls are done via speed=null now.\n\nAlso its a bit problematic to change this method because it might break older seeds\n\nHmmh, random.nextDouble() is still called regardless of whether it is used like before. For me currently it is not obvious where I changed behaviour. Probably we need a test for this :) ? I'll have a look as you observed behaviour change due to this in #1631\n\nbut we should still use random speeds were we did before\n\nI checked twice but if speed is null the speeds are random (which also feels more logical than before).\nEdit: ah, maybe the default speed for motorvehicle was not 60?\nEdit: no, it was also 60, like for car", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r542027535", "createdAt": "2020-12-13T23:09:03Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/util/GHUtility.java", "diffHunk": "@@ -168,8 +168,11 @@ private static void printUnitTestEdge(FlagEncoder encoder, EdgeIteratorState edg\n                 \"graph.edge(%d, %d, %f, %s); // edgeId=%s\\n\", from, to, edge.getDistance(), fwd && bwd ? \"true\" : \"false\", edge.getEdge());\n     }\n \n+    /**\n+     * @param speed if null a random speed will be assign to every edge\n+     */\n     public static void buildRandomGraph(Graph graph, Random random, int numNodes, double meanDegree, boolean allowLoops,\n-                                        boolean allowZeroDistance, DecimalEncodedValue randomSpeedEnc,\n+                                        boolean allowZeroDistance, BooleanEncodedValue accessEnc, DecimalEncodedValue speedEnc, Double speed,\n                                         double pNonZeroLoop, double pBothDir, double pRandomDistanceOffset) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk5NjUwOQ=="}, "originalCommit": {"oid": "84f673a09747df92c0e66428aad8484f2f2060c9"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjAyOTUzOQ==", "bodyText": "I did not intend to change this and tried to be careful ...\n\nYeah, I saw. When I reviewed this I also checked and thought its the same. But now I realized that once we set speed != null we always have fwdSpeed==bwdSpeed, while before we had fwdSpeed!=bwdSpeed in case speedEnc!=null \ud83d\ude44 ... Ugh I will have a look again tomorrow ;)", "url": "https://github.com/graphhopper/graphhopper/pull/2202#discussion_r542029539", "createdAt": "2020-12-13T23:20:08Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/util/GHUtility.java", "diffHunk": "@@ -168,8 +168,11 @@ private static void printUnitTestEdge(FlagEncoder encoder, EdgeIteratorState edg\n                 \"graph.edge(%d, %d, %f, %s); // edgeId=%s\\n\", from, to, edge.getDistance(), fwd && bwd ? \"true\" : \"false\", edge.getEdge());\n     }\n \n+    /**\n+     * @param speed if null a random speed will be assign to every edge\n+     */\n     public static void buildRandomGraph(Graph graph, Random random, int numNodes, double meanDegree, boolean allowLoops,\n-                                        boolean allowZeroDistance, DecimalEncodedValue randomSpeedEnc,\n+                                        boolean allowZeroDistance, BooleanEncodedValue accessEnc, DecimalEncodedValue speedEnc, Double speed,\n                                         double pNonZeroLoop, double pBothDir, double pRandomDistanceOffset) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTk5NjUwOQ=="}, "originalCommit": {"oid": "84f673a09747df92c0e66428aad8484f2f2060c9"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4676, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}