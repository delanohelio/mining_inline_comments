{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNzAzMjI2", "number": 1942, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTowOTo1N1rODksNTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTo0NDo0NlrODm1Hnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5Nzk5NjI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTowOTo1N1rOFxJwkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTowOTo1N1rOFxJwkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4NDQzMw==", "bodyText": "Let's remove the fall back for graph.elevation.calcmean and throw an error if it is still specified.", "url": "https://github.com/graphhopper/graphhopper/pull/1942#discussion_r387084433", "createdAt": "2020-03-03T15:09:57Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -601,6 +601,10 @@ private static ElevationProvider createElevationProvider(GraphHopperConfig ghCon\n                 ? ghConfig.getBool(\"graph.elevation.calcmean\", false)\n                 : ghConfig.getBool(\"graph.elevation.calc_mean\", false);\n \n+        boolean interpolate = ghConfig.has(\"graph.elevation.interpolate\")\n+                ? ghConfig.getBool(\"graph.elevation.interpolate\", false)\n+                : eleCalcMean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0942ee78f1cd8ee2694c9a69474df76ea6436552"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODA0MTY1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/reader/dem/HeightTile.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyMDowMFrOFxKL-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMTo1Mjo0OFrOFxqU4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5MTQ0OQ==", "bodyText": "Why is this handling with MIN_ELEVATION necessary? What does this mean and what is the unit?\nAnd IMO the method is not guarded if a and b are smaller than MIN_ELEVATION.", "url": "https://github.com/graphhopper/graphhopper/pull/1942#discussion_r387091449", "createdAt": "2020-03-03T15:20:00Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/reader/dem/HeightTile.java", "diffHunk": "@@ -77,6 +78,15 @@ void setHeights(DataAccess da) {\n         this.heights = da;\n     }\n \n+    private short getHeightSample(int x, int y) {\n+        // always keep in mind factor 2 because of short value\n+        return heights.getShort(2 * (y * width + x));\n+    }\n+\n+    private double linearInterpolate(double a, double b, double f) {\n+        return a < MIN_ELEVATION ? b : b < MIN_ELEVATION ? a : (a + (b - a) * f);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0942ee78f1cd8ee2694c9a69474df76ea6436552"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwMzYwOA==", "bodyText": "My understanding is that voids in elevation data (in SRTM at least) show up as Short.MIN_VALUE (see line 102-103 of previous version of HeightTile), so the MIN_ELEVATION check is meant to catch that since otherwise we'd be comparing a double to a short.\nMy thought here was that we make ourselves a bit more robust to voids if when any of the 4 surrounding points that we are averaging are missing, we average the other points.", "url": "https://github.com/graphhopper/graphhopper/pull/1942#discussion_r387403608", "createdAt": "2020-03-04T01:40:20Z", "author": {"login": "msbarry"}, "path": "core/src/main/java/com/graphhopper/reader/dem/HeightTile.java", "diffHunk": "@@ -77,6 +78,15 @@ void setHeights(DataAccess da) {\n         this.heights = da;\n     }\n \n+    private short getHeightSample(int x, int y) {\n+        // always keep in mind factor 2 because of short value\n+        return heights.getShort(2 * (y * width + x));\n+    }\n+\n+    private double linearInterpolate(double a, double b, double f) {\n+        return a < MIN_ELEVATION ? b : b < MIN_ELEVATION ? a : (a + (b - a) * f);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5MTQ0OQ=="}, "originalCommit": {"oid": "0942ee78f1cd8ee2694c9a69474df76ea6436552"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzYxODAxOA==", "bodyText": "Oh, indeed. You are right. This is quite surprising as we have no proper NaN handling downstream for these values. Probably we never stumbled over this as we use CGIAR that has filled the void. So yes, this is probably for another issue and good idea about the surrounding points.", "url": "https://github.com/graphhopper/graphhopper/pull/1942#discussion_r387618018", "createdAt": "2020-03-04T11:52:48Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/reader/dem/HeightTile.java", "diffHunk": "@@ -77,6 +78,15 @@ void setHeights(DataAccess da) {\n         this.heights = da;\n     }\n \n+    private short getHeightSample(int x, int y) {\n+        // always keep in mind factor 2 because of short value\n+        return heights.getShort(2 * (y * width + x));\n+    }\n+\n+    private double linearInterpolate(double a, double b, double f) {\n+        return a < MIN_ELEVATION ? b : b < MIN_ELEVATION ? a : (a + (b - a) * f);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5MTQ0OQ=="}, "originalCommit": {"oid": "0942ee78f1cd8ee2694c9a69474df76ea6436552"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODA1ODQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/reader/dem/HeightTile.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyMzoyM1rOFxKVuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjoxOTo1MVrOFyRawA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5Mzk0NA==", "bodyText": "Instead of returning NaN should we better throw an exception? NaN will cause trouble somewhere else.", "url": "https://github.com/graphhopper/graphhopper/pull/1942#discussion_r387093944", "createdAt": "2020-03-03T15:23:23Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/reader/dem/HeightTile.java", "diffHunk": "@@ -85,38 +95,37 @@ public double getHeight(double lat, double lon) {\n         if (deltaLon > lonHigherBound || deltaLon < lowerBound)\n             throw new IllegalStateException(\"longitude not in boundary of this file:\" + lat + \",\" + lon + \", this:\" + this.toString());\n \n-        // first row in the file is the northernmost one\n-        // http://gis.stackexchange.com/a/43756/9006\n-        int lonSimilar = (int) (width / horizontalDegree * deltaLon);\n-        // different fallback methods for lat and lon as we have different rounding (lon -> positive, lat -> negative)\n-        if (lonSimilar >= width)\n-            lonSimilar = width - 1;\n-        int latSimilar = height - 1 - (int) (height / verticalDegree * deltaLat);\n-        if (latSimilar < 0)\n-            latSimilar = 0;\n-\n-        // always keep in mind factor 2 because of short value\n-        int daPointer = 2 * (latSimilar * width + lonSimilar);\n-        int value = heights.getShort(daPointer);\n-        AtomicInteger counter = new AtomicInteger(1);\n-        if (value == Short.MIN_VALUE)\n-            return Double.NaN;\n-\n-        if (calcMean) {\n-            if (lonSimilar > 0)\n-                value += includePoint(daPointer - 2, counter);\n-\n-            if (lonSimilar < width - 1)\n-                value += includePoint(daPointer + 2, counter);\n-\n-            if (latSimilar > 0)\n-                value += includePoint(daPointer - 2 * width, counter);\n-\n-            if (latSimilar < height - 1)\n-                value += includePoint(daPointer + 2 * width, counter);\n+        double elevation;\n+        if (interpolate) {\n+            double x = (width - 1) * deltaLon / horizontalDegree;\n+            double y = (height - 1) * (1 - deltaLat / verticalDegree);\n+            int left = (int) x;\n+            int top = (int) y;\n+            int right = left + 1;\n+            int bottom = top + 1;\n+\n+            double w00 = getHeightSample(left, top);\n+            double w01 = getHeightSample(left, bottom);\n+            double w10 = getHeightSample(right, top);\n+            double w11 = getHeightSample(right, bottom);\n+\n+            double topEle = linearInterpolate(w00, w10, x - left);\n+            double bottomEle = linearInterpolate(w01, w11, x - left);\n+            elevation = linearInterpolate(topEle, bottomEle, y - top);\n+        } else {\n+            // first row in the file is the northernmost one\n+            // http://gis.stackexchange.com/a/43756/9006\n+            int x = (int) (width / horizontalDegree * deltaLon);\n+            // different fallback methods for lat and lon as we have different rounding (lon -> positive, lat -> negative)\n+            if (x >= width)\n+                x = width - 1;\n+            int y = height - 1 - (int) (height / verticalDegree * deltaLat);\n+            if (y < 0)\n+                y = 0;\n+\n+            elevation = getHeightSample(x, y);\n         }\n-\n-        return (double) value / counter.get();\n+        return elevation < MIN_ELEVATION ? Double.NaN : elevation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0942ee78f1cd8ee2694c9a69474df76ea6436552"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQwNTcyOA==", "bodyText": "This is the behavior from line 102-103 of the previous version of this code - NaN was the value returned for voids. I checked out PointList.calcDistance when elevation is NaN and it can't handle it. Is there code that I'm missing elsewhere that handles these voids?", "url": "https://github.com/graphhopper/graphhopper/pull/1942#discussion_r387405728", "createdAt": "2020-03-04T01:48:39Z", "author": {"login": "msbarry"}, "path": "core/src/main/java/com/graphhopper/reader/dem/HeightTile.java", "diffHunk": "@@ -85,38 +95,37 @@ public double getHeight(double lat, double lon) {\n         if (deltaLon > lonHigherBound || deltaLon < lowerBound)\n             throw new IllegalStateException(\"longitude not in boundary of this file:\" + lat + \",\" + lon + \", this:\" + this.toString());\n \n-        // first row in the file is the northernmost one\n-        // http://gis.stackexchange.com/a/43756/9006\n-        int lonSimilar = (int) (width / horizontalDegree * deltaLon);\n-        // different fallback methods for lat and lon as we have different rounding (lon -> positive, lat -> negative)\n-        if (lonSimilar >= width)\n-            lonSimilar = width - 1;\n-        int latSimilar = height - 1 - (int) (height / verticalDegree * deltaLat);\n-        if (latSimilar < 0)\n-            latSimilar = 0;\n-\n-        // always keep in mind factor 2 because of short value\n-        int daPointer = 2 * (latSimilar * width + lonSimilar);\n-        int value = heights.getShort(daPointer);\n-        AtomicInteger counter = new AtomicInteger(1);\n-        if (value == Short.MIN_VALUE)\n-            return Double.NaN;\n-\n-        if (calcMean) {\n-            if (lonSimilar > 0)\n-                value += includePoint(daPointer - 2, counter);\n-\n-            if (lonSimilar < width - 1)\n-                value += includePoint(daPointer + 2, counter);\n-\n-            if (latSimilar > 0)\n-                value += includePoint(daPointer - 2 * width, counter);\n-\n-            if (latSimilar < height - 1)\n-                value += includePoint(daPointer + 2 * width, counter);\n+        double elevation;\n+        if (interpolate) {\n+            double x = (width - 1) * deltaLon / horizontalDegree;\n+            double y = (height - 1) * (1 - deltaLat / verticalDegree);\n+            int left = (int) x;\n+            int top = (int) y;\n+            int right = left + 1;\n+            int bottom = top + 1;\n+\n+            double w00 = getHeightSample(left, top);\n+            double w01 = getHeightSample(left, bottom);\n+            double w10 = getHeightSample(right, top);\n+            double w11 = getHeightSample(right, bottom);\n+\n+            double topEle = linearInterpolate(w00, w10, x - left);\n+            double bottomEle = linearInterpolate(w01, w11, x - left);\n+            elevation = linearInterpolate(topEle, bottomEle, y - top);\n+        } else {\n+            // first row in the file is the northernmost one\n+            // http://gis.stackexchange.com/a/43756/9006\n+            int x = (int) (width / horizontalDegree * deltaLon);\n+            // different fallback methods for lat and lon as we have different rounding (lon -> positive, lat -> negative)\n+            if (x >= width)\n+                x = width - 1;\n+            int y = height - 1 - (int) (height / verticalDegree * deltaLat);\n+            if (y < 0)\n+                y = 0;\n+\n+            elevation = getHeightSample(x, y);\n         }\n-\n-        return (double) value / counter.get();\n+        return elevation < MIN_ELEVATION ? Double.NaN : elevation;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5Mzk0NA=="}, "originalCommit": {"oid": "0942ee78f1cd8ee2694c9a69474df76ea6436552"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzU4MzQ2OQ==", "bodyText": "also FWIW valhalla does a similar range check when using mapzen/skadi terrain tiles https://github.com/valhalla/valhalla/blob/9dd8b88aa93b91888c4a6da8b09454a1ec9a0c2b/src/skadi/sample.cc#L224 and has some special case handling to skip over these when computing grade/total elevation gain/3d profiles with missing elevation data. Maybe this (or a separate) review should tighten up elevation void handling?", "url": "https://github.com/graphhopper/graphhopper/pull/1942#discussion_r387583469", "createdAt": "2020-03-04T10:40:59Z", "author": {"login": "msbarry"}, "path": "core/src/main/java/com/graphhopper/reader/dem/HeightTile.java", "diffHunk": "@@ -85,38 +95,37 @@ public double getHeight(double lat, double lon) {\n         if (deltaLon > lonHigherBound || deltaLon < lowerBound)\n             throw new IllegalStateException(\"longitude not in boundary of this file:\" + lat + \",\" + lon + \", this:\" + this.toString());\n \n-        // first row in the file is the northernmost one\n-        // http://gis.stackexchange.com/a/43756/9006\n-        int lonSimilar = (int) (width / horizontalDegree * deltaLon);\n-        // different fallback methods for lat and lon as we have different rounding (lon -> positive, lat -> negative)\n-        if (lonSimilar >= width)\n-            lonSimilar = width - 1;\n-        int latSimilar = height - 1 - (int) (height / verticalDegree * deltaLat);\n-        if (latSimilar < 0)\n-            latSimilar = 0;\n-\n-        // always keep in mind factor 2 because of short value\n-        int daPointer = 2 * (latSimilar * width + lonSimilar);\n-        int value = heights.getShort(daPointer);\n-        AtomicInteger counter = new AtomicInteger(1);\n-        if (value == Short.MIN_VALUE)\n-            return Double.NaN;\n-\n-        if (calcMean) {\n-            if (lonSimilar > 0)\n-                value += includePoint(daPointer - 2, counter);\n-\n-            if (lonSimilar < width - 1)\n-                value += includePoint(daPointer + 2, counter);\n-\n-            if (latSimilar > 0)\n-                value += includePoint(daPointer - 2 * width, counter);\n-\n-            if (latSimilar < height - 1)\n-                value += includePoint(daPointer + 2 * width, counter);\n+        double elevation;\n+        if (interpolate) {\n+            double x = (width - 1) * deltaLon / horizontalDegree;\n+            double y = (height - 1) * (1 - deltaLat / verticalDegree);\n+            int left = (int) x;\n+            int top = (int) y;\n+            int right = left + 1;\n+            int bottom = top + 1;\n+\n+            double w00 = getHeightSample(left, top);\n+            double w01 = getHeightSample(left, bottom);\n+            double w10 = getHeightSample(right, top);\n+            double w11 = getHeightSample(right, bottom);\n+\n+            double topEle = linearInterpolate(w00, w10, x - left);\n+            double bottomEle = linearInterpolate(w01, w11, x - left);\n+            elevation = linearInterpolate(topEle, bottomEle, y - top);\n+        } else {\n+            // first row in the file is the northernmost one\n+            // http://gis.stackexchange.com/a/43756/9006\n+            int x = (int) (width / horizontalDegree * deltaLon);\n+            // different fallback methods for lat and lon as we have different rounding (lon -> positive, lat -> negative)\n+            if (x >= width)\n+                x = width - 1;\n+            int y = height - 1 - (int) (height / verticalDegree * deltaLat);\n+            if (y < 0)\n+                y = 0;\n+\n+            elevation = getHeightSample(x, y);\n         }\n-\n-        return (double) value / counter.get();\n+        return elevation < MIN_ELEVATION ? Double.NaN : elevation;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5Mzk0NA=="}, "originalCommit": {"oid": "0942ee78f1cd8ee2694c9a69474df76ea6436552"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI1ODQ5Ng==", "bodyText": "I started working on a PR to handle voids downstream, and it started looking rather large so I opened up #1946 so we can discuss the best path forward.", "url": "https://github.com/graphhopper/graphhopper/pull/1942#discussion_r388258496", "createdAt": "2020-03-05T12:19:51Z", "author": {"login": "msbarry"}, "path": "core/src/main/java/com/graphhopper/reader/dem/HeightTile.java", "diffHunk": "@@ -85,38 +95,37 @@ public double getHeight(double lat, double lon) {\n         if (deltaLon > lonHigherBound || deltaLon < lowerBound)\n             throw new IllegalStateException(\"longitude not in boundary of this file:\" + lat + \",\" + lon + \", this:\" + this.toString());\n \n-        // first row in the file is the northernmost one\n-        // http://gis.stackexchange.com/a/43756/9006\n-        int lonSimilar = (int) (width / horizontalDegree * deltaLon);\n-        // different fallback methods for lat and lon as we have different rounding (lon -> positive, lat -> negative)\n-        if (lonSimilar >= width)\n-            lonSimilar = width - 1;\n-        int latSimilar = height - 1 - (int) (height / verticalDegree * deltaLat);\n-        if (latSimilar < 0)\n-            latSimilar = 0;\n-\n-        // always keep in mind factor 2 because of short value\n-        int daPointer = 2 * (latSimilar * width + lonSimilar);\n-        int value = heights.getShort(daPointer);\n-        AtomicInteger counter = new AtomicInteger(1);\n-        if (value == Short.MIN_VALUE)\n-            return Double.NaN;\n-\n-        if (calcMean) {\n-            if (lonSimilar > 0)\n-                value += includePoint(daPointer - 2, counter);\n-\n-            if (lonSimilar < width - 1)\n-                value += includePoint(daPointer + 2, counter);\n-\n-            if (latSimilar > 0)\n-                value += includePoint(daPointer - 2 * width, counter);\n-\n-            if (latSimilar < height - 1)\n-                value += includePoint(daPointer + 2 * width, counter);\n+        double elevation;\n+        if (interpolate) {\n+            double x = (width - 1) * deltaLon / horizontalDegree;\n+            double y = (height - 1) * (1 - deltaLat / verticalDegree);\n+            int left = (int) x;\n+            int top = (int) y;\n+            int right = left + 1;\n+            int bottom = top + 1;\n+\n+            double w00 = getHeightSample(left, top);\n+            double w01 = getHeightSample(left, bottom);\n+            double w10 = getHeightSample(right, top);\n+            double w11 = getHeightSample(right, bottom);\n+\n+            double topEle = linearInterpolate(w00, w10, x - left);\n+            double bottomEle = linearInterpolate(w01, w11, x - left);\n+            elevation = linearInterpolate(topEle, bottomEle, y - top);\n+        } else {\n+            // first row in the file is the northernmost one\n+            // http://gis.stackexchange.com/a/43756/9006\n+            int x = (int) (width / horizontalDegree * deltaLon);\n+            // different fallback methods for lat and lon as we have different rounding (lon -> positive, lat -> negative)\n+            if (x >= width)\n+                x = width - 1;\n+            int y = height - 1 - (int) (height / verticalDegree * deltaLat);\n+            if (y < 0)\n+                y = 0;\n+\n+            elevation = getHeightSample(x, y);\n         }\n-\n-        return (double) value / counter.get();\n+        return elevation < MIN_ELEVATION ? Double.NaN : elevation;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5Mzk0NA=="}, "originalCommit": {"oid": "0942ee78f1cd8ee2694c9a69474df76ea6436552"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMDQyNzgzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/reader/dem/ElevationInterpolation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTo0NDo0NlrOF0eXSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQwMDowOTowMlrOF0lPXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2Nzc1NQ==", "bodyText": "I would keep it simple for now and only use the two strings :) ? Or why did you choose to introduce this enum?", "url": "https://github.com/graphhopper/graphhopper/pull/1942#discussion_r390567755", "createdAt": "2020-03-10T19:44:46Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/reader/dem/ElevationInterpolation.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.reader.dem;\n+\n+/**\n+ * This enum defines the interpolation method to use.\n+ */\n+public enum ElevationInterpolation {\n+    NONE(\"none\"), BILINEAR(\"bilinear\");\n+\n+    private final String name;\n+\n+    ElevationInterpolation(String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return name;\n+    }\n+\n+    public static ElevationInterpolation find(String name) {\n+        if (name == null || name.isEmpty())\n+            return NONE;\n+\n+        for (ElevationInterpolation interpolation : values()) {\n+            if (interpolation.name().equalsIgnoreCase(name)) {\n+                return interpolation;\n+            }\n+        }\n+\n+        return NONE;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25c3d9bcec3347625f72026cc9d8f1c1103c985a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDY4MDQxNA==", "bodyText": "Good call, that's over-engineering for now. Since we only have one interpolation method so far, just a boolean is good.  I think we should keep the config as graph.elevation.interpolation: bilinear so it's clear what it's doing and so configs don't have to change if we add other interpolation methods later.", "url": "https://github.com/graphhopper/graphhopper/pull/1942#discussion_r390680414", "createdAt": "2020-03-11T00:09:02Z", "author": {"login": "msbarry"}, "path": "core/src/main/java/com/graphhopper/reader/dem/ElevationInterpolation.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.reader.dem;\n+\n+/**\n+ * This enum defines the interpolation method to use.\n+ */\n+public enum ElevationInterpolation {\n+    NONE(\"none\"), BILINEAR(\"bilinear\");\n+\n+    private final String name;\n+\n+    ElevationInterpolation(String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return name;\n+    }\n+\n+    public static ElevationInterpolation find(String name) {\n+        if (name == null || name.isEmpty())\n+            return NONE;\n+\n+        for (ElevationInterpolation interpolation : values()) {\n+            if (interpolation.name().equalsIgnoreCase(name)) {\n+                return interpolation;\n+            }\n+        }\n+\n+        return NONE;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2Nzc1NQ=="}, "originalCommit": {"oid": "25c3d9bcec3347625f72026cc9d8f1c1103c985a"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4740, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}