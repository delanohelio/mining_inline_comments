{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MjIzMjc1", "number": 2015, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjowNDo0NVrOD1fwMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoyMzowNVrOD1odUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDIxMzYyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/graphhopper/routing/util/CustomModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjowNDo0NVrOGK-A1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjowNDo0NVrOGK-A1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE1NDk2NA==", "bodyText": "This is a global catch-all across encoded values so it is still here :)", "url": "https://github.com/graphhopper/graphhopper/pull/2015#discussion_r414154964", "createdAt": "2020-04-23T22:04:45Z", "author": {"login": "karussell"}, "path": "api/src/main/java/com/graphhopper/routing/util/CustomModel.java", "diffHunk": "@@ -34,7 +34,7 @@\n \n     static double DEFAULT_D_I = 70;\n     // optional:\n-    private Double maxSpeedFallback, vehicleWeight, vehicleWidth, vehicleHeight, vehicleLength;\n+    private Double maxSpeedFallback;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ee1aa966da4e8c55b34ee9dcc5d8e1e7e68b1c1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDIxNjUwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/BooleanToValueEntry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjowNTozNFrOGK-Cdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjowNTozNFrOGK-Cdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE1NTM4Mg==", "bodyText": "boolean encoded values are now like enum and decimal types...", "url": "https://github.com/graphhopper/graphhopper/pull/2015#discussion_r414155382", "createdAt": "2020-04-23T22:05:34Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/BooleanToValueEntry.java", "diffHunk": "@@ -20,18 +20,59 @@\n import com.graphhopper.routing.profiles.BooleanEncodedValue;\n import com.graphhopper.util.EdgeIteratorState;\n \n+import java.util.Map;\n+\n+import static com.graphhopper.routing.weighting.custom.EnumToValueEntry.getReturnValue;\n+\n final class BooleanToValueEntry implements EdgeToValueEntry {\n     private final BooleanEncodedValue bev;\n     private final double value, elseValue;\n \n-    public BooleanToValueEntry(BooleanEncodedValue bev, double value, double elseValue) {\n+    private BooleanToValueEntry(BooleanEncodedValue bev, double value, double elseValue) {\n         this.bev = bev;\n         this.value = value;\n         this.elseValue = elseValue;\n     }\n \n+    /**\n+     * Example map:\n+     * <pre>\n+     * get_off_bike:\n+     *   true: 0.4\n+     *   false: 0.9 // optional and default is 1, equivalent to \"*\": 0.9\n+     * </pre>\n+     */\n+    static EdgeToValueEntry create(String name, BooleanEncodedValue encodedValue, Map<Object, Object> map,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ee1aa966da4e8c55b34ee9dcc5d8e1e7e68b1c1"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDIxODQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/CustomProfileConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjowNjoxMFrOGK-DhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoxMToxOFrOGLJv8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE1NTY1Mw==", "bodyText": "This is a bit ugly. If we set the custom model via Java API I think it should not be required to set a file (?)", "url": "https://github.com/graphhopper/graphhopper/pull/2015#discussion_r414155653", "createdAt": "2020-04-23T22:06:10Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/CustomProfileConfig.java", "diffHunk": "@@ -18,6 +18,7 @@ public CustomProfileConfig(String name) {\n \n     public CustomProfileConfig setCustomModel(CustomModel customModel) {\n         getHints().putObject(CustomModel.KEY, customModel);\n+        getHints().putObject(\"custom_model_file\", \"empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ee1aa966da4e8c55b34ee9dcc5d8e1e7e68b1c1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0NzI0OA==", "bodyText": "Ah ok I see", "url": "https://github.com/graphhopper/graphhopper/pull/2015#discussion_r414347248", "createdAt": "2020-04-24T07:11:18Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/CustomProfileConfig.java", "diffHunk": "@@ -18,6 +18,7 @@ public CustomProfileConfig(String name) {\n \n     public CustomProfileConfig setCustomModel(CustomModel customModel) {\n         getHints().putObject(CustomModel.KEY, customModel);\n+        getHints().putObject(\"custom_model_file\", \"empty\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE1NTY1Mw=="}, "originalCommit": {"oid": "3ee1aa966da4e8c55b34ee9dcc5d8e1e7e68b1c1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDIyNjQwOnYy", "diffSide": "RIGHT", "path": "web/src/test/java/com/graphhopper/http/resources/CustomWeightingRouteResourceLMTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjowODozNlrOGK-IGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoyMToyOFrOGLKFhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE1NjgyNg==", "bodyText": "We can now live without being able to \"prefer\" secondary roads explicitly ... but one more entry is necessary.", "url": "https://github.com/graphhopper/graphhopper/pull/2015#discussion_r414156826", "createdAt": "2020-04-23T22:08:36Z", "author": {"login": "karussell"}, "path": "web/src/test/java/com/graphhopper/http/resources/CustomWeightingRouteResourceLMTest.java", "diffHunk": "@@ -97,7 +97,8 @@ public void testCustomWeighting() {\n                 \"profile: car_custom\\n\" +\n                 \"priority:\\n\" +\n                 \"  road_class:\\n\" +\n-                \"    secondary: 2\\n\";\n+                \"    secondary: 1\\n\" +\n+                \"    '*': 0.5\\n\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ee1aa966da4e8c55b34ee9dcc5d8e1e7e68b1c1"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM1Mjc3Mg==", "bodyText": "Yes its a bit more verbose now, but also for me everything is a lot more clear now.", "url": "https://github.com/graphhopper/graphhopper/pull/2015#discussion_r414352772", "createdAt": "2020-04-24T07:21:28Z", "author": {"login": "easbar"}, "path": "web/src/test/java/com/graphhopper/http/resources/CustomWeightingRouteResourceLMTest.java", "diffHunk": "@@ -97,7 +97,8 @@ public void testCustomWeighting() {\n                 \"profile: car_custom\\n\" +\n                 \"priority:\\n\" +\n                 \"  road_class:\\n\" +\n-                \"    secondary: 2\\n\";\n+                \"    secondary: 1\\n\" +\n+                \"    '*': 0.5\\n\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE1NjgyNg=="}, "originalCommit": {"oid": "3ee1aa966da4e8c55b34ee9dcc5d8e1e7e68b1c1"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDIzMTg3OnYy", "diffSide": "RIGHT", "path": "web/src/test/resources/com/graphhopper/http/resources/cargo_bike.yml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMjoxMDoxOVrOGK-LEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoyMTo0MlrOGLKGFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE1NzU4Ng==", "bodyText": "I like this. Still readable and generic enough for future extension and less root elements or exceptions. \ud83d\udc4d", "url": "https://github.com/graphhopper/graphhopper/pull/2015#discussion_r414157586", "createdAt": "2020-04-23T22:10:19Z", "author": {"login": "karussell"}, "path": "web/src/test/resources/com/graphhopper/http/resources/cargo_bike.yml", "diffHunk": "@@ -19,8 +16,13 @@ priority:\n   surface:\n     sand: 0.5\n   # prefer better tracks\n-  track_type: { other: 1.1, grade1: 1.1 }\n+  track_type: { other: 1.0, grade1: 1.0, \"*\": 0.9 }\n   # prefer official bike routes\n   bike_network: { other: 0.5 }\n   # avoid all situations where we have to get off the bike\n-  get_off_bike: 0.5\n\\ No newline at end of file\n+  get_off_bike:\n+    \"true\": 0.5\n+  max_height:\n+    \"<2.3\": 0\n+  max_width:\n+    \"<1.2\": 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ee1aa966da4e8c55b34ee9dcc5d8e1e7e68b1c1"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM1MjkxOA==", "bodyText": "Agreed!", "url": "https://github.com/graphhopper/graphhopper/pull/2015#discussion_r414352918", "createdAt": "2020-04-24T07:21:42Z", "author": {"login": "easbar"}, "path": "web/src/test/resources/com/graphhopper/http/resources/cargo_bike.yml", "diffHunk": "@@ -19,8 +16,13 @@ priority:\n   surface:\n     sand: 0.5\n   # prefer better tracks\n-  track_type: { other: 1.1, grade1: 1.1 }\n+  track_type: { other: 1.0, grade1: 1.0, \"*\": 0.9 }\n   # prefer official bike routes\n   bike_network: { other: 0.5 }\n   # avoid all situations where we have to get off the bike\n-  get_off_bike: 0.5\n\\ No newline at end of file\n+  get_off_bike:\n+    \"true\": 0.5\n+  max_height:\n+    \"<2.3\": 0\n+  max_width:\n+    \"<1.2\": 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE1NzU4Ng=="}, "originalCommit": {"oid": "3ee1aa966da4e8c55b34ee9dcc5d8e1e7e68b1c1"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTU3NDIzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/BooleanToValueEntry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzowNToxMFrOGLJjlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzowNToxMFrOGLJjlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0NDA4NQ==", "bodyText": "very minor use # to comment in yml", "url": "https://github.com/graphhopper/graphhopper/pull/2015#discussion_r414344085", "createdAt": "2020-04-24T07:05:10Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/BooleanToValueEntry.java", "diffHunk": "@@ -20,18 +20,60 @@\n import com.graphhopper.routing.profiles.BooleanEncodedValue;\n import com.graphhopper.util.EdgeIteratorState;\n \n+import java.util.Map;\n+\n+import static com.graphhopper.routing.weighting.custom.CustomWeighting.CATCH_ALL;\n+import static com.graphhopper.routing.weighting.custom.EnumToValueEntry.getReturnValue;\n+\n final class BooleanToValueEntry implements EdgeToValueEntry {\n     private final BooleanEncodedValue bev;\n     private final double value, elseValue;\n \n-    public BooleanToValueEntry(BooleanEncodedValue bev, double value, double elseValue) {\n+    private BooleanToValueEntry(BooleanEncodedValue bev, double value, double elseValue) {\n         this.bev = bev;\n         this.value = value;\n         this.elseValue = elseValue;\n     }\n \n+    /**\n+     * Example map:\n+     * <pre>\n+     * get_off_bike:\n+     *   true: 0.4\n+     *   false: 0.9 // optional and default is 1, equivalent to \"*\": 0.9\n+     * </pre>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da02717deb31b9fdec2dc7d5a669298242ad634"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTU4MzcyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/BooleanToValueEntry.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzowNzozN1rOGLJozA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMDo0ODozOFrOGLR58Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0NTQyMA==", "bodyText": "should we really allow the key to be of type boolean. hm well that is what it is , but all the other keys are strings so this would be a bit more consistent?", "url": "https://github.com/graphhopper/graphhopper/pull/2015#discussion_r414345420", "createdAt": "2020-04-24T07:07:37Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/BooleanToValueEntry.java", "diffHunk": "@@ -20,18 +20,60 @@\n import com.graphhopper.routing.profiles.BooleanEncodedValue;\n import com.graphhopper.util.EdgeIteratorState;\n \n+import java.util.Map;\n+\n+import static com.graphhopper.routing.weighting.custom.CustomWeighting.CATCH_ALL;\n+import static com.graphhopper.routing.weighting.custom.EnumToValueEntry.getReturnValue;\n+\n final class BooleanToValueEntry implements EdgeToValueEntry {\n     private final BooleanEncodedValue bev;\n     private final double value, elseValue;\n \n-    public BooleanToValueEntry(BooleanEncodedValue bev, double value, double elseValue) {\n+    private BooleanToValueEntry(BooleanEncodedValue bev, double value, double elseValue) {\n         this.bev = bev;\n         this.value = value;\n         this.elseValue = elseValue;\n     }\n \n+    /**\n+     * Example map:\n+     * <pre>\n+     * get_off_bike:\n+     *   true: 0.4\n+     *   false: 0.9 // optional and default is 1, equivalent to \"*\": 0.9\n+     * </pre>\n+     */\n+    static EdgeToValueEntry create(String name, BooleanEncodedValue encodedValue, Map<Object, Object> map,\n+                                   double defaultValue, double minValue, double maxValue) {\n+        if (map.isEmpty())\n+            throw new IllegalArgumentException(\"Empty map for \" + name);\n+\n+        if (map.containsKey(CATCH_ALL) && (map.containsKey(\"false\") || map.containsKey(false)))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da02717deb31b9fdec2dc7d5a669298242ad634"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0MjAxMQ==", "bodyText": "I'm not sure and tbh I have not even tested this (I'll do!) but the big problem could be that people do not quote the false like they do not need to quote the motorway.", "url": "https://github.com/graphhopper/graphhopper/pull/2015#discussion_r414442011", "createdAt": "2020-04-24T09:43:56Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/BooleanToValueEntry.java", "diffHunk": "@@ -20,18 +20,60 @@\n import com.graphhopper.routing.profiles.BooleanEncodedValue;\n import com.graphhopper.util.EdgeIteratorState;\n \n+import java.util.Map;\n+\n+import static com.graphhopper.routing.weighting.custom.CustomWeighting.CATCH_ALL;\n+import static com.graphhopper.routing.weighting.custom.EnumToValueEntry.getReturnValue;\n+\n final class BooleanToValueEntry implements EdgeToValueEntry {\n     private final BooleanEncodedValue bev;\n     private final double value, elseValue;\n \n-    public BooleanToValueEntry(BooleanEncodedValue bev, double value, double elseValue) {\n+    private BooleanToValueEntry(BooleanEncodedValue bev, double value, double elseValue) {\n         this.bev = bev;\n         this.value = value;\n         this.elseValue = elseValue;\n     }\n \n+    /**\n+     * Example map:\n+     * <pre>\n+     * get_off_bike:\n+     *   true: 0.4\n+     *   false: 0.9 // optional and default is 1, equivalent to \"*\": 0.9\n+     * </pre>\n+     */\n+    static EdgeToValueEntry create(String name, BooleanEncodedValue encodedValue, Map<Object, Object> map,\n+                                   double defaultValue, double minValue, double maxValue) {\n+        if (map.isEmpty())\n+            throw new IllegalArgumentException(\"Empty map for \" + name);\n+\n+        if (map.containsKey(CATCH_ALL) && (map.containsKey(\"false\") || map.containsKey(false)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0NTQyMA=="}, "originalCommit": {"oid": "1da02717deb31b9fdec2dc7d5a669298242ad634"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ0MzA0NQ==", "bodyText": "Ah thats true I forgot you do not have to explicitly quote string parameters without special chars like motorway either", "url": "https://github.com/graphhopper/graphhopper/pull/2015#discussion_r414443045", "createdAt": "2020-04-24T09:45:36Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/BooleanToValueEntry.java", "diffHunk": "@@ -20,18 +20,60 @@\n import com.graphhopper.routing.profiles.BooleanEncodedValue;\n import com.graphhopper.util.EdgeIteratorState;\n \n+import java.util.Map;\n+\n+import static com.graphhopper.routing.weighting.custom.CustomWeighting.CATCH_ALL;\n+import static com.graphhopper.routing.weighting.custom.EnumToValueEntry.getReturnValue;\n+\n final class BooleanToValueEntry implements EdgeToValueEntry {\n     private final BooleanEncodedValue bev;\n     private final double value, elseValue;\n \n-    public BooleanToValueEntry(BooleanEncodedValue bev, double value, double elseValue) {\n+    private BooleanToValueEntry(BooleanEncodedValue bev, double value, double elseValue) {\n         this.bev = bev;\n         this.value = value;\n         this.elseValue = elseValue;\n     }\n \n+    /**\n+     * Example map:\n+     * <pre>\n+     * get_off_bike:\n+     *   true: 0.4\n+     *   false: 0.9 // optional and default is 1, equivalent to \"*\": 0.9\n+     * </pre>\n+     */\n+    static EdgeToValueEntry create(String name, BooleanEncodedValue encodedValue, Map<Object, Object> map,\n+                                   double defaultValue, double minValue, double maxValue) {\n+        if (map.isEmpty())\n+            throw new IllegalArgumentException(\"Empty map for \" + name);\n+\n+        if (map.containsKey(CATCH_ALL) && (map.containsKey(\"false\") || map.containsKey(false)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0NTQyMA=="}, "originalCommit": {"oid": "1da02717deb31b9fdec2dc7d5a669298242ad634"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ1NzgxOQ==", "bodyText": "Turns out jackson forces the keys to be string even if you specify it like just false and not \"false\" in the yaml. So this is indeed not necessary.", "url": "https://github.com/graphhopper/graphhopper/pull/2015#discussion_r414457819", "createdAt": "2020-04-24T10:09:09Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/BooleanToValueEntry.java", "diffHunk": "@@ -20,18 +20,60 @@\n import com.graphhopper.routing.profiles.BooleanEncodedValue;\n import com.graphhopper.util.EdgeIteratorState;\n \n+import java.util.Map;\n+\n+import static com.graphhopper.routing.weighting.custom.CustomWeighting.CATCH_ALL;\n+import static com.graphhopper.routing.weighting.custom.EnumToValueEntry.getReturnValue;\n+\n final class BooleanToValueEntry implements EdgeToValueEntry {\n     private final BooleanEncodedValue bev;\n     private final double value, elseValue;\n \n-    public BooleanToValueEntry(BooleanEncodedValue bev, double value, double elseValue) {\n+    private BooleanToValueEntry(BooleanEncodedValue bev, double value, double elseValue) {\n         this.bev = bev;\n         this.value = value;\n         this.elseValue = elseValue;\n     }\n \n+    /**\n+     * Example map:\n+     * <pre>\n+     * get_off_bike:\n+     *   true: 0.4\n+     *   false: 0.9 // optional and default is 1, equivalent to \"*\": 0.9\n+     * </pre>\n+     */\n+    static EdgeToValueEntry create(String name, BooleanEncodedValue encodedValue, Map<Object, Object> map,\n+                                   double defaultValue, double minValue, double maxValue) {\n+        if (map.isEmpty())\n+            throw new IllegalArgumentException(\"Empty map for \" + name);\n+\n+        if (map.containsKey(CATCH_ALL) && (map.containsKey(\"false\") || map.containsKey(false)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0NTQyMA=="}, "originalCommit": {"oid": "1da02717deb31b9fdec2dc7d5a669298242ad634"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ2MDczMQ==", "bodyText": "Ok good then :) Btw can we then delete this branch? Github allows removing the branches (so they do not show up anymore, but its even possible to restore them). Maybe there is even a default setting for github to delete branches after they are merged from a PR?", "url": "https://github.com/graphhopper/graphhopper/pull/2015#discussion_r414460731", "createdAt": "2020-04-24T10:13:53Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/BooleanToValueEntry.java", "diffHunk": "@@ -20,18 +20,60 @@\n import com.graphhopper.routing.profiles.BooleanEncodedValue;\n import com.graphhopper.util.EdgeIteratorState;\n \n+import java.util.Map;\n+\n+import static com.graphhopper.routing.weighting.custom.CustomWeighting.CATCH_ALL;\n+import static com.graphhopper.routing.weighting.custom.EnumToValueEntry.getReturnValue;\n+\n final class BooleanToValueEntry implements EdgeToValueEntry {\n     private final BooleanEncodedValue bev;\n     private final double value, elseValue;\n \n-    public BooleanToValueEntry(BooleanEncodedValue bev, double value, double elseValue) {\n+    private BooleanToValueEntry(BooleanEncodedValue bev, double value, double elseValue) {\n         this.bev = bev;\n         this.value = value;\n         this.elseValue = elseValue;\n     }\n \n+    /**\n+     * Example map:\n+     * <pre>\n+     * get_off_bike:\n+     *   true: 0.4\n+     *   false: 0.9 // optional and default is 1, equivalent to \"*\": 0.9\n+     * </pre>\n+     */\n+    static EdgeToValueEntry create(String name, BooleanEncodedValue encodedValue, Map<Object, Object> map,\n+                                   double defaultValue, double minValue, double maxValue) {\n+        if (map.isEmpty())\n+            throw new IllegalArgumentException(\"Empty map for \" + name);\n+\n+        if (map.containsKey(CATCH_ALL) && (map.containsKey(\"false\") || map.containsKey(false)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0NTQyMA=="}, "originalCommit": {"oid": "1da02717deb31b9fdec2dc7d5a669298242ad634"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ3NzI0OQ==", "bodyText": "Done :) !\n\nMaybe there is even a default setting for github to delete branches after they are merged from a PR?\n\nDid not find something like this yet", "url": "https://github.com/graphhopper/graphhopper/pull/2015#discussion_r414477249", "createdAt": "2020-04-24T10:41:51Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/BooleanToValueEntry.java", "diffHunk": "@@ -20,18 +20,60 @@\n import com.graphhopper.routing.profiles.BooleanEncodedValue;\n import com.graphhopper.util.EdgeIteratorState;\n \n+import java.util.Map;\n+\n+import static com.graphhopper.routing.weighting.custom.CustomWeighting.CATCH_ALL;\n+import static com.graphhopper.routing.weighting.custom.EnumToValueEntry.getReturnValue;\n+\n final class BooleanToValueEntry implements EdgeToValueEntry {\n     private final BooleanEncodedValue bev;\n     private final double value, elseValue;\n \n-    public BooleanToValueEntry(BooleanEncodedValue bev, double value, double elseValue) {\n+    private BooleanToValueEntry(BooleanEncodedValue bev, double value, double elseValue) {\n         this.bev = bev;\n         this.value = value;\n         this.elseValue = elseValue;\n     }\n \n+    /**\n+     * Example map:\n+     * <pre>\n+     * get_off_bike:\n+     *   true: 0.4\n+     *   false: 0.9 // optional and default is 1, equivalent to \"*\": 0.9\n+     * </pre>\n+     */\n+    static EdgeToValueEntry create(String name, BooleanEncodedValue encodedValue, Map<Object, Object> map,\n+                                   double defaultValue, double minValue, double maxValue) {\n+        if (map.isEmpty())\n+            throw new IllegalArgumentException(\"Empty map for \" + name);\n+\n+        if (map.containsKey(CATCH_ALL) && (map.containsKey(\"false\") || map.containsKey(false)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0NTQyMA=="}, "originalCommit": {"oid": "1da02717deb31b9fdec2dc7d5a669298242ad634"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ3ODU3MQ==", "bodyText": "Ah, or is it this:\n\nAfter pull requests are merged, you can have head branches deleted automatically.\nAutomatically delete head branches\nDeleted branches will still be able to be restored.", "url": "https://github.com/graphhopper/graphhopper/pull/2015#discussion_r414478571", "createdAt": "2020-04-24T10:44:23Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/BooleanToValueEntry.java", "diffHunk": "@@ -20,18 +20,60 @@\n import com.graphhopper.routing.profiles.BooleanEncodedValue;\n import com.graphhopper.util.EdgeIteratorState;\n \n+import java.util.Map;\n+\n+import static com.graphhopper.routing.weighting.custom.CustomWeighting.CATCH_ALL;\n+import static com.graphhopper.routing.weighting.custom.EnumToValueEntry.getReturnValue;\n+\n final class BooleanToValueEntry implements EdgeToValueEntry {\n     private final BooleanEncodedValue bev;\n     private final double value, elseValue;\n \n-    public BooleanToValueEntry(BooleanEncodedValue bev, double value, double elseValue) {\n+    private BooleanToValueEntry(BooleanEncodedValue bev, double value, double elseValue) {\n         this.bev = bev;\n         this.value = value;\n         this.elseValue = elseValue;\n     }\n \n+    /**\n+     * Example map:\n+     * <pre>\n+     * get_off_bike:\n+     *   true: 0.4\n+     *   false: 0.9 // optional and default is 1, equivalent to \"*\": 0.9\n+     * </pre>\n+     */\n+    static EdgeToValueEntry create(String name, BooleanEncodedValue encodedValue, Map<Object, Object> map,\n+                                   double defaultValue, double minValue, double maxValue) {\n+        if (map.isEmpty())\n+            throw new IllegalArgumentException(\"Empty map for \" + name);\n+\n+        if (map.containsKey(CATCH_ALL) && (map.containsKey(\"false\") || map.containsKey(false)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0NTQyMA=="}, "originalCommit": {"oid": "1da02717deb31b9fdec2dc7d5a669298242ad634"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDQ4MDg4MQ==", "bodyText": "Have enabled it for now :)", "url": "https://github.com/graphhopper/graphhopper/pull/2015#discussion_r414480881", "createdAt": "2020-04-24T10:48:38Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/BooleanToValueEntry.java", "diffHunk": "@@ -20,18 +20,60 @@\n import com.graphhopper.routing.profiles.BooleanEncodedValue;\n import com.graphhopper.util.EdgeIteratorState;\n \n+import java.util.Map;\n+\n+import static com.graphhopper.routing.weighting.custom.CustomWeighting.CATCH_ALL;\n+import static com.graphhopper.routing.weighting.custom.EnumToValueEntry.getReturnValue;\n+\n final class BooleanToValueEntry implements EdgeToValueEntry {\n     private final BooleanEncodedValue bev;\n     private final double value, elseValue;\n \n-    public BooleanToValueEntry(BooleanEncodedValue bev, double value, double elseValue) {\n+    private BooleanToValueEntry(BooleanEncodedValue bev, double value, double elseValue) {\n         this.bev = bev;\n         this.value = value;\n         this.elseValue = elseValue;\n     }\n \n+    /**\n+     * Example map:\n+     * <pre>\n+     * get_off_bike:\n+     *   true: 0.4\n+     *   false: 0.9 // optional and default is 1, equivalent to \"*\": 0.9\n+     * </pre>\n+     */\n+    static EdgeToValueEntry create(String name, BooleanEncodedValue encodedValue, Map<Object, Object> map,\n+                                   double defaultValue, double minValue, double maxValue) {\n+        if (map.isEmpty())\n+            throw new IllegalArgumentException(\"Empty map for \" + name);\n+\n+        if (map.containsKey(CATCH_ALL) && (map.containsKey(\"false\") || map.containsKey(false)))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0NTQyMA=="}, "originalCommit": {"oid": "1da02717deb31b9fdec2dc7d5a669298242ad634"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTYwNDUzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/EnumToValueEntry.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoxMzozMlrOGLJ0ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoxMzozMlrOGLJ0ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0ODQ4Mw==", "bodyText": "Thats very nice we have these create methods now rather than doing it in speed/priorityCalculator's constructor", "url": "https://github.com/graphhopper/graphhopper/pull/2015#discussion_r414348483", "createdAt": "2020-04-24T07:13:32Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/EnumToValueEntry.java", "diffHunk": "@@ -38,6 +41,66 @@ public double getValue(EdgeIteratorState iter, boolean reverse) {\n         return values[enumOrdinal];\n     }\n \n+    /**\n+     * Example map:\n+     * <pre>\n+     * road_class:\n+     *   motorway: 0.4\n+     *   \"*\": 0.9      # optional and default is 1\n+     * </pre>\n+     */\n+    static EnumToValueEntry create(String name, EnumEncodedValue enumEncodedValue, Map<Object, Object> map,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da02717deb31b9fdec2dc7d5a669298242ad634"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTYwOTIyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/PriorityCalculator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoxNDo1NFrOGLJ3jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoxNDo1NFrOGLJ3jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM0OTE5OA==", "bodyText": "nice this got a lot more readable", "url": "https://github.com/graphhopper/graphhopper/pull/2015#discussion_r414349198", "createdAt": "2020-04-24T07:14:54Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/PriorityCalculator.java", "diffHunk": "@@ -24,112 +24,53 @@\n import org.locationtech.jts.geom.prep.PreparedGeometryFactory;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.Map;\n \n final class PriorityCalculator {\n     private final List<EdgeToValueEntry> priorityList = new ArrayList<>();\n \n     public PriorityCalculator(CustomModel customModel, EncodedValueLookup lookup) {\n-        add(lookup, customModel.getVehicleWeight(), \"vehicle_weight\", MaxWeight.KEY);\n-        add(lookup, customModel.getVehicleWidth(), \"vehicle_width\", MaxWidth.KEY);\n-        add(lookup, customModel.getVehicleHeight(), \"vehicle_height\", MaxHeight.KEY);\n-        add(lookup, customModel.getVehicleLength(), \"vehicle_length\", MaxLength.KEY);\n-\n         for (Map.Entry<String, Object> entry : customModel.getPriority().entrySet()) {\n             String key = entry.getKey();\n+            String priorityKey = \"priority.\" + key;\n             Object value = entry.getValue();\n-\n-            if (value == null) {\n+            if (value == null)\n                 throw new IllegalArgumentException(\"Missing value for \" + key + \" in 'priority'\");\n-            } else if (value instanceof Number) {\n-                if (key.startsWith(GeoToValueEntry.AREA_PREFIX)) {\n-                    Geometry geometry = GeoToValueEntry.pickGeometry(customModel, key);\n-                    priorityList.add(new GeoToValueEntry(new PreparedGeometryFactory().create(geometry), ((Number) value).doubleValue(), 1));\n+\n+            if (key.startsWith(GeoToValueEntry.AREA_PREFIX)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da02717deb31b9fdec2dc7d5a669298242ad634"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTYxNDkxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/PriorityCalculator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoxNjoxOVrOGLJ6zQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoxNjoxOVrOGLJ6zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM1MDAyOQ==", "bodyText": "maybe use final double defaultPriority=1; final double minPriority=0; final double maxPriority=1; for readability and to indicate its always the same", "url": "https://github.com/graphhopper/graphhopper/pull/2015#discussion_r414350029", "createdAt": "2020-04-24T07:16:19Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/PriorityCalculator.java", "diffHunk": "@@ -24,112 +24,53 @@\n import org.locationtech.jts.geom.prep.PreparedGeometryFactory;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.Map;\n \n final class PriorityCalculator {\n     private final List<EdgeToValueEntry> priorityList = new ArrayList<>();\n \n     public PriorityCalculator(CustomModel customModel, EncodedValueLookup lookup) {\n-        add(lookup, customModel.getVehicleWeight(), \"vehicle_weight\", MaxWeight.KEY);\n-        add(lookup, customModel.getVehicleWidth(), \"vehicle_width\", MaxWidth.KEY);\n-        add(lookup, customModel.getVehicleHeight(), \"vehicle_height\", MaxHeight.KEY);\n-        add(lookup, customModel.getVehicleLength(), \"vehicle_length\", MaxLength.KEY);\n-\n         for (Map.Entry<String, Object> entry : customModel.getPriority().entrySet()) {\n             String key = entry.getKey();\n+            String priorityKey = \"priority.\" + key;\n             Object value = entry.getValue();\n-\n-            if (value == null) {\n+            if (value == null)\n                 throw new IllegalArgumentException(\"Missing value for \" + key + \" in 'priority'\");\n-            } else if (value instanceof Number) {\n-                if (key.startsWith(GeoToValueEntry.AREA_PREFIX)) {\n-                    Geometry geometry = GeoToValueEntry.pickGeometry(customModel, key);\n-                    priorityList.add(new GeoToValueEntry(new PreparedGeometryFactory().create(geometry), ((Number) value).doubleValue(), 1));\n+\n+            if (key.startsWith(GeoToValueEntry.AREA_PREFIX)) {\n+                if (!(value instanceof Number))\n+                    throw new IllegalArgumentException(priorityKey + \": area entry requires number value but was: \" + value.getClass().getSimpleName());\n+                Geometry geometry = GeoToValueEntry.pickGeometry(customModel, key);\n+                priorityList.add(GeoToValueEntry.create(priorityKey, new PreparedGeometryFactory().create(geometry),\n+                        (Number) value, 1, 0, 1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da02717deb31b9fdec2dc7d5a669298242ad634"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTYyMjU2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/PriorityCalculator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoxODozMlrOGLJ_OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoxODozMlrOGLJ_OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM1MTE2MA==", "bodyText": "This could be a bit more user friendly: The encoded value 'key' used in 'priority' is of type X, but only A,B&C are allowed?", "url": "https://github.com/graphhopper/graphhopper/pull/2015#discussion_r414351160", "createdAt": "2020-04-24T07:18:32Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/PriorityCalculator.java", "diffHunk": "@@ -24,112 +24,53 @@\n import org.locationtech.jts.geom.prep.PreparedGeometryFactory;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.List;\n import java.util.Map;\n \n final class PriorityCalculator {\n     private final List<EdgeToValueEntry> priorityList = new ArrayList<>();\n \n     public PriorityCalculator(CustomModel customModel, EncodedValueLookup lookup) {\n-        add(lookup, customModel.getVehicleWeight(), \"vehicle_weight\", MaxWeight.KEY);\n-        add(lookup, customModel.getVehicleWidth(), \"vehicle_width\", MaxWidth.KEY);\n-        add(lookup, customModel.getVehicleHeight(), \"vehicle_height\", MaxHeight.KEY);\n-        add(lookup, customModel.getVehicleLength(), \"vehicle_length\", MaxLength.KEY);\n-\n         for (Map.Entry<String, Object> entry : customModel.getPriority().entrySet()) {\n             String key = entry.getKey();\n+            String priorityKey = \"priority.\" + key;\n             Object value = entry.getValue();\n-\n-            if (value == null) {\n+            if (value == null)\n                 throw new IllegalArgumentException(\"Missing value for \" + key + \" in 'priority'\");\n-            } else if (value instanceof Number) {\n-                if (key.startsWith(GeoToValueEntry.AREA_PREFIX)) {\n-                    Geometry geometry = GeoToValueEntry.pickGeometry(customModel, key);\n-                    priorityList.add(new GeoToValueEntry(new PreparedGeometryFactory().create(geometry), ((Number) value).doubleValue(), 1));\n+\n+            if (key.startsWith(GeoToValueEntry.AREA_PREFIX)) {\n+                if (!(value instanceof Number))\n+                    throw new IllegalArgumentException(priorityKey + \": area entry requires number value but was: \" + value.getClass().getSimpleName());\n+                Geometry geometry = GeoToValueEntry.pickGeometry(customModel, key);\n+                priorityList.add(GeoToValueEntry.create(priorityKey, new PreparedGeometryFactory().create(geometry),\n+                        (Number) value, 1, 0, 1));\n+            } else {\n+                if (!(value instanceof Map))\n+                    throw new IllegalArgumentException(priorityKey + \": non-root entries requires a map but was: \" + value.getClass().getSimpleName());\n+                EncodedValue encodedValue = getEV(lookup, \"priority\", key);\n+                if (encodedValue instanceof EnumEncodedValue) {\n+                    priorityList.add(EnumToValueEntry.create(priorityKey, (EnumEncodedValue) encodedValue,\n+                            (Map) value, 1, 0, 1));\n+                } else if (encodedValue instanceof DecimalEncodedValue) {\n+                    priorityList.add(DecimalToValueEntry.create(priorityKey, (DecimalEncodedValue) encodedValue,\n+                            (Map) value, 1, 0, 1));\n+                } else if (encodedValue instanceof BooleanEncodedValue) {\n+                    priorityList.add(BooleanToValueEntry.create(priorityKey, (BooleanEncodedValue) encodedValue,\n+                            (Map) value, 1, 0, 1));\n+                } else if (encodedValue instanceof IntEncodedValue) {\n+                    // TODO NOW\n                 } else {\n-                    BooleanEncodedValue encodedValue = getEV(lookup, \"priority\", key, BooleanEncodedValue.class);\n-                    priorityList.add(new BooleanToValueEntry(encodedValue, ((Number) value).doubleValue(), 1));\n+                    throw new IllegalArgumentException(\"encoded value class '\" + encodedValue.getClass().getSimpleName()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da02717deb31b9fdec2dc7d5a669298242ad634"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTYyOTA4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/SpeedCalculator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoyMDoxN1rOGLKDAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoyMDoxN1rOGLKDAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM1MjEzMA==", "bodyText": "same comments as for prio calculator i guess", "url": "https://github.com/graphhopper/graphhopper/pull/2015#discussion_r414352130", "createdAt": "2020-04-24T07:20:17Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/weighting/custom/SpeedCalculator.java", "diffHunk": "@@ -52,52 +48,72 @@ public SpeedCalculator(final double maxSpeed, CustomModel customModel, DecimalEn\n         // use max_speed to lower speed for the specified conditions\n         for (Map.Entry<String, Object> entry : customModel.getMaxSpeed().entrySet()) {\n             String key = entry.getKey();\n+            String maxSpeedKey = \"max_speed.\" + key;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da02717deb31b9fdec2dc7d5a669298242ad634"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NTYzOTg0OnYy", "diffSide": "RIGHT", "path": "web/src/test/resources/com/graphhopper/http/resources/truck.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoyMzowNVrOGLKJDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQwNzoyMzowNVrOGLKJDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDM1MzY3OA==", "bodyText": "Values higher than 1 are not allowed, but instead you can lower the priority of all other entries via the catch-all key \"*\", see...", "url": "https://github.com/graphhopper/graphhopper/pull/2015#discussion_r414353678", "createdAt": "2020-04-24T07:23:05Z", "author": {"login": "easbar"}, "path": "web/src/test/resources/com/graphhopper/http/resources/truck.yml", "diffHunk": "@@ -39,25 +32,30 @@ max_speed_fallback: 100\n distance_influence: 90\n \n # Now we want to set a preference without changing the taken time. The default priority is 1 and does not change something.\n-# Higher than 1 will prefer the road under the specified condition and lower than 1 will avoid it.\n+# Higher than 1 is not possible directly, only via the catch-all key \"*\", see road_class where motorways are preferred. Lower than 1 will avoid it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da02717deb31b9fdec2dc7d5a669298242ad634"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4798, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}