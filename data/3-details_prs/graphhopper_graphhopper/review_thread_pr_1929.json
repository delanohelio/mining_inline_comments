{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5NTA2NDAx", "number": 1929, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTo1MToxMFrODoS-Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTo1Mjo1NFrODoTAPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTgwNDI2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTo1MToxMFrOF2wgCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTo1MToxMFrOF2wgCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk2MjA1Ng==", "bodyText": "Can you add it also to this table? https://github.com/graphhopper/graphhopper/blob/master/NOTICE.md#data", "url": "https://github.com/graphhopper/graphhopper/pull/1929#discussion_r392962056", "createdAt": "2020-03-16T11:51:10Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -625,6 +625,8 @@ private static ElevationProvider createElevationProvider(GraphHopperConfig ghCon\n             elevationProvider = new SRTMGL1Provider(cacheDirStr);\n         } else if (eleProviderStr.equalsIgnoreCase(\"multi\")) {\n             elevationProvider = new MultiSourceElevationProvider(cacheDirStr);\n+        } else if (eleProviderStr.equalsIgnoreCase(\"skadi\")) {\n+            elevationProvider = new SkadiProvider(cacheDirStr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c29cc53214c52a8de07e05e10088923e8dbf20"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTgwNzk5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/reader/dem/SkadiProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTo1MjoxN1rOF2wiXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTo1MjoxN1rOF2wiXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk2MjY1Mw==", "bodyText": "Due to consistency I would just return \"skadi\" here", "url": "https://github.com/graphhopper/graphhopper/pull/1929#discussion_r392962653", "createdAt": "2020-03-16T11:52:17Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/reader/dem/SkadiProvider.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.graphhopper.reader.dem;\n+\n+import java.io.*;\n+import java.util.zip.GZIPInputStream;\n+\n+import static com.graphhopper.util.Helper.close;\n+import static com.graphhopper.util.Helper.toLowerCase;\n+\n+/**\n+ * Skadi contains elevation data for the entire world with 1 arc second (~30m) accuracy in SRTM format stitched\n+ * together from many sources (https://github.com/tilezen/joerd/blob/master/docs/data-sources.md).\n+ *\n+ * We use the hosted AWS Open Data mirror (https://registry.opendata.aws/terrain-tiles/) by default but you can\n+ * change to any mirror by updating the base URL.\n+ *\n+ * See https://github.com/tilezen/joerd/blob/master/docs/attribution.md for required attribution of any project\n+ * using this data.\n+ *\n+ * Detailed information can be found here: https://github.com/tilezen/joerd\n+ */\n+public class SkadiProvider extends AbstractSRTMElevationProvider {\n+    public SkadiProvider() {\n+        this(\"\");\n+    }\n+    public SkadiProvider(String cacheDir) {\n+        super(\n+                \"https://elevation-tiles-prod.s3.amazonaws.com/skadi/\",\n+                cacheDir.isEmpty()? \"/tmp/srtm\": cacheDir,\n+                \"GraphHopper SRTMReader\",\n+                -90,\n+                90,\n+                3601\n+        );\n+    }\n+\n+    public static void main(String[] args) throws IOException {\n+        SkadiProvider provider = new SkadiProvider();\n+        // 338\n+        System.out.println(provider.getEle(49.949784, 11.57517));\n+        // 468\n+        System.out.println(provider.getEle(49.968668, 11.575127));\n+        // 467\n+        System.out.println(provider.getEle(49.968682, 11.574842));\n+        // 3110\n+        System.out.println(provider.getEle(-22.532854, -65.110474));\n+        // 115\n+        System.out.println(provider.getEle(38.065392, -87.099609));\n+        // 1612\n+        System.out.println(provider.getEle(40, -105.2277023));\n+        System.out.println(provider.getEle(39.99999999, -105.2277023));\n+        System.out.println(provider.getEle(39.9999999, -105.2277023));\n+        System.out.println(provider.getEle(39.999999, -105.2277023));\n+        // 1015\n+        System.out.println(provider.getEle(47.468668, 14.575127));\n+        // 1107\n+        System.out.println(provider.getEle(47.467753, 14.573911));\n+        // 1930\n+        System.out.println(provider.getEle(46.468835, 12.578777));\n+        // 844\n+        System.out.println(provider.getEle(48.469123, 9.576393));\n+    }\n+\n+    @Override\n+    byte[] readFile(File file) throws IOException {\n+        InputStream is = new FileInputStream(file);\n+        GZIPInputStream gzis = new GZIPInputStream(is);\n+        BufferedInputStream buff = new BufferedInputStream(gzis);\n+        ByteArrayOutputStream os = new ByteArrayOutputStream();\n+        byte[] buffer = new byte[0xFFFF];\n+        int len;\n+        while ((len = buff.read(buffer)) > 0) {\n+            os.write(buffer, 0, len);\n+        }\n+        os.flush();\n+        close(buff);\n+        return os.toByteArray();\n+    }\n+\n+    private String getLatString(double lat) {\n+        int minLat = (int) Math.floor(lat);\n+        return (minLat < 0 ? \"S\" : \"N\") + getPaddedLatString(minLat);\n+    }\n+\n+    private String getLonString(double lon) {\n+        int minLon = (int) Math.floor(lon);\n+        return (minLon < 0 ? \"W\" : \"E\") + getPaddedLonString(minLon);\n+    }\n+\n+    String getFileName(double lat, double lon) {\n+        String latStr = getLatString(lat);\n+        String lonStr = getLonString(lon);\n+        return toLowerCase(latStr + lonStr);\n+    }\n+\n+    String getDownloadURL(double lat, double lon) {\n+        String latStr = getLatString(lat);\n+        String lonStr = getLonString(lon);\n+\n+        return latStr + \"/\" + latStr + lonStr + \".hgt.gz\";\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"skadi(\" + baseUrl + \")\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c29cc53214c52a8de07e05e10088923e8dbf20"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTgwOTkwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/reader/dem/SkadiProvider.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTo1Mjo1NFrOF2wjiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTo1Mjo1NFrOF2wjiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk2Mjk1Mg==", "bodyText": "Are you ok with adding the usual License header here?", "url": "https://github.com/graphhopper/graphhopper/pull/1929#discussion_r392962952", "createdAt": "2020-03-16T11:52:54Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/reader/dem/SkadiProvider.java", "diffHunk": "@@ -0,0 +1,106 @@\n+package com.graphhopper.reader.dem;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4c29cc53214c52a8de07e05e10088923e8dbf20"}, "originalPosition": 1}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4731, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}