{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MjM1NDEz", "number": 1879, "title": "Change GraphHopper.init(CmdArgs)` to `init(GraphHopperConfig)`", "bodyText": "The goal of this PR is to change config.yml from\ngraphhopper:\n  graph.flag_encoders: car\n  prepare.ch.weightings: fastest\n  prepare.lm.weightings: shortest\nto\ngraphhopper:\n  graph.flag_encoders: car\n  prepare.ch.profiles:\n    - vehicle: car\n      weighting: fastest\n  prepare.ch.profiles:\n    - vehicle: car\n      weighting: shortest\nTo understand why this is useful, see this issue: #493\nWhat makes this complicated is that so far we deserialized config.yml into a Map<String,String> (a CmdArgs object to be more specific). However, here the config options are no longer key-value pairs, but we have two lists of objects (one for CH and one for LM profiles). Therefore we need to deserialize config.yml into a custom object (I have called this GraphHopperConfig here). Why is this a problem? Because so far we also allowed configuring GraphHopper using command line arguments (system properties), which are just key-value pairs. We even merged config.yml with the command line arguments (easy to do because both were a list of key-value pairs).\nHere I tried to keep the changes to a minimum: I am extracting the two profile lists from the config file and put everything else into a CmdArgs object (just as we did before). This way we can no longer use the command line arguments to overwrite the CH/LM profiles in config.yml, but all other properties can still be set this way.\nOne special case where we do the entire configuration via the command line is in Measurement, e.g. here:\n\n  \n    \n      graphhopper/benchmark/benchmark.sh\n    \n    \n        Lines 38 to 55\n      in\n      2e55c30\n    \n    \n    \n    \n\n        \n          \n           java -cp tools/target/graphhopper-tools-*-jar-with-dependencies.jar com.graphhopper.tools.Measurement \\ \n        \n\n        \n          \n           datareader.file=${SMALL_OSM_MAP} \\ \n        \n\n        \n          \n           datareader.date_range_parser_day=2019-11-01 \\ \n        \n\n        \n          \n           measurement.folder=${SINGLE_RESULTS_DIR} \\ \n        \n\n        \n          \n           measurement.clean=true \\ \n        \n\n        \n          \n           measurement.summaryfile=${RESULTS_DIR}summary_small.dat \\ \n        \n\n        \n          \n           measurement.repeats=1 \\ \n        \n\n        \n          \n           measurement.run_slow_routing=true \\ \n        \n\n        \n          \n           prepare.ch.weightings=fastest \\ \n        \n\n        \n          \n           prepare.lm.weightings=no \\ \n        \n\n        \n          \n           \"graph.flag_encoders=car|turn_costs=true\" \\ \n        \n\n        \n          \n           prepare.ch.edge_based=edge_and_node \\ \n        \n\n        \n          \n           graph.location=${TMP_DIR}measurement-small-gh \\ \n        \n\n        \n          \n           prepare.min_network_size=10000 \\ \n        \n\n        \n          \n           prepare.min_oneway_network_size=10000 \\ \n        \n\n        \n          \n           measurement.json=true \\ \n        \n\n        \n          \n           measurement.count=5000 \\ \n        \n\n        \n          \n           measurement.use_measurement_time_as_ref_time=${USE_MEASUREMENT_TIME_AS_REF_TIME} \n        \n    \n  \n\n\nbut we could either use a config.yml file here as well and/or somehow implement some command line arguments that allow adding CH/LM profiles via the command line for the most common cases.\nUpdate: For now this PR only changes the CmdArgs parameter of the init method into a GraphHopperConfig parameter which simply wraps CmdArgs", "createdAt": "2020-01-28T21:21:05Z", "url": "https://github.com/graphhopper/graphhopper/pull/1879", "merged": true, "mergeCommit": {"oid": "eb6e1d104ca547326120682c1299415045a5d616"}, "closed": true, "closedAt": "2020-02-04T14:28:11Z", "author": {"login": "easbar"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-3ziHAH2gAyMzY4MjM1NDEzOjEzMmZhN2QwNmI3NDBmMjNkZmNkYTY1OGI3YTM1NjdlMTU3ZWJkNzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcEULpSAFqTM1OTE0ODUyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "132fa7d06b740f23dfcda658b7a3567e157ebd77", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/132fa7d06b740f23dfcda658b7a3567e157ebd77", "committedDate": "2020-01-28T20:59:18Z", "message": "Change `GraphHopper.init(CmdArgs)` to `GraphHopper.init(GraphHopperConfig)`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "758546cd4791b7f417e7fb3c33fbd2d2535e02d0", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/758546cd4791b7f417e7fb3c33fbd2d2535e02d0", "committedDate": "2020-01-28T21:30:05Z", "message": "Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8cc200160864380e3b2ed0d623235622467a5524", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/8cc200160864380e3b2ed0d623235622467a5524", "committedDate": "2020-02-03T10:30:29Z", "message": "Remove CH/LM profile lists"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f83161d834e38fecd5b6ebd4ff173d8e687e9d54", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/f83161d834e38fecd5b6ebd4ff173d8e687e9d54", "committedDate": "2020-02-03T10:30:50Z", "message": "Merge branch 'master' into gh_config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5a52faa7459266e0a3e6d3db4d50accd242d426", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/b5a52faa7459266e0a3e6d3db4d50accd242d426", "committedDate": "2020-02-04T11:45:19Z", "message": "Remove CmdArgs (replaced by PMap/GraphHopperConfig)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99ed14f5e91918a5508ae573ff4095dcd3e2d082", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/99ed14f5e91918a5508ae573ff4095dcd3e2d082", "committedDate": "2020-02-04T11:47:17Z", "message": "Remove Profile example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9089d0e8b07c0bfcb31c9e1a7a723687296bdd34", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/9089d0e8b07c0bfcb31c9e1a7a723687296bdd34", "committedDate": "2020-02-04T12:01:40Z", "message": "Add docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fbb8d54185a16f44497cad7027f89241d5ee5f2", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/8fbb8d54185a16f44497cad7027f89241d5ee5f2", "committedDate": "2020-02-04T14:26:47Z", "message": "Update changelog"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMDc0MTM2", "url": "https://github.com/graphhopper/graphhopper/pull/1879#pullrequestreview-353074136", "createdAt": "2020-02-04T15:35:57Z", "commit": {"oid": "9089d0e8b07c0bfcb31c9e1a7a723687296bdd34"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTozNTo1OFrOFlYp7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNTozNTo1OFrOFlYp7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDc0NTU4Mw==", "bodyText": "Ah, nice!", "url": "https://github.com/graphhopper/graphhopper/pull/1879#discussion_r374745583", "createdAt": "2020-02-04T15:35:58Z", "author": {"login": "karussell"}, "path": "api/src/main/java/com/graphhopper/util/CmdArgs.java", "diffHunk": "@@ -1,89 +0,0 @@\n-/*\n- *  Licensed to GraphHopper GmbH under one or more contributor\n- *  license agreements. See the NOTICE file distributed with this work for\n- *  additional information regarding copyright ownership.\n- *\n- *  GraphHopper GmbH licenses this file to you under the Apache License,\n- *  Version 2.0 (the \"License\"); you may not use this file except in\n- *  compliance with the License. You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-package com.graphhopper.util;\n-\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-\n-import static com.graphhopper.util.Helper.toLowerCase;\n-\n-/**\n- * Stores command line options in a map. The capitalization of the key is ignored.\n- * <p>\n- *\n- * @author Peter Karich\n- */\n-public class CmdArgs extends PMap {\n-\n-    public CmdArgs() {\n-    }\n-\n-    public CmdArgs(Map<String, String> map) {\n-        super(map);\n-    }\n-\n-    /**\n-     * This method creates a CmdArgs object from the specified string array (a list of key=value pairs).\n-     */\n-    public static CmdArgs read(String[] args) {\n-        Map<String, String> map = new LinkedHashMap<>();\n-        for (String arg : args) {\n-            int index = arg.indexOf(\"=\");\n-            if (index <= 0) {\n-                continue;\n-            }\n-\n-            String key = arg.substring(0, index);\n-            if (key.startsWith(\"-\")) {\n-                key = key.substring(1);\n-            }\n-\n-            if (key.startsWith(\"-\")) {\n-                key = key.substring(1);\n-            }\n-\n-            String value = arg.substring(index + 1);\n-            String old = map.put(toLowerCase(key), value);\n-            if (old != null)\n-                throw new IllegalArgumentException(\"Pair '\" + toLowerCase(key) + \"'='\" + value + \"' not possible to \" +\n-                        \"add to the CmdArgs-object as the key already exists with '\" + old + \"'\");\n-        }\n-\n-        return new CmdArgs(map);\n-    }\n-\n-    public static CmdArgs readFromSystemProperties() {\n-        CmdArgs cmdArgs = new CmdArgs();\n-        for (Entry<Object, Object> e : System.getProperties().entrySet()) {\n-            String k = ((String) e.getKey());\n-            String v = ((String) e.getValue());\n-            if (k.startsWith(\"graphhopper.\")) {\n-                k = k.substring(\"graphhopper.\".length());\n-                cmdArgs.put(k, v);\n-            }\n-        }\n-        return cmdArgs;\n-    }\n-\n-    @Override\n-    public CmdArgs put(String key, Object str) {\n-        super.put(key, str);\n-        return this;\n-    }\n-}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9089d0e8b07c0bfcb31c9e1a7a723687296bdd34"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5MTQ4NTI0", "url": "https://github.com/graphhopper/graphhopper/pull/1879#pullrequestreview-359148524", "createdAt": "2020-02-14T18:52:36Z", "commit": {"oid": "8fbb8d54185a16f44497cad7027f89241d5ee5f2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODo1MjozNlrOFqAVdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxODo1MjozNlrOFqAVdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTU5MDAwNw==", "bodyText": "This is now a bit too ugly as without indent and looks like it should be debugging info IMO:\n2020-02-14 19:47:56.845 [main] INFO  c.g... properties:\ngraph.dataaccess: RAM_STORE\nch.enabled: false\ngraph.flag_encoders: car\nprepare.ch.weightings: fastest\nprepare.min_one_way_network_size: 0\ngraph.location: graph-cache\nprepare.min_network_size: 0\nrouting.ch.disabling_allowed: true\nrouting.max_visited_nodes: 1500000\nprepare.lm.weightings: fastest\nrouting.round_trip.max_retries: 2", "url": "https://github.com/graphhopper/graphhopper/pull/1879#discussion_r379590007", "createdAt": "2020-02-14T18:52:36Z", "author": {"login": "karussell"}, "path": "api/src/main/java/com/graphhopper/GraphHopperConfig.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package com.graphhopper;\n+\n+import com.graphhopper.util.PMap;\n+\n+import java.util.Map;\n+\n+/**\n+ * This class represents the global configuration for the GraphHopper class, which is typically configured via the\n+ * `config.yml` file. So far we are mapping the key-value pairs in the config file to a string-string map, but soon\n+ * we will start adding hierarchical configurations (lists, nested objects etc.). We will also start adding the\n+ * different configuration options as fields of this class including the default values.\n+ */\n+public class GraphHopperConfig {\n+    private final PMap map;\n+\n+    public GraphHopperConfig() {\n+        this(new PMap());\n+    }\n+\n+    public GraphHopperConfig(PMap pMap) {\n+        this.map = pMap;\n+    }\n+\n+    public GraphHopperConfig put(String key, Object value) {\n+        map.put(key, value);\n+        return this;\n+    }\n+\n+    public boolean has(String key) {\n+        return map.has(key);\n+    }\n+\n+    public boolean getBool(String key, boolean _default) {\n+        return map.getBool(key, _default);\n+    }\n+\n+    public int getInt(String key, int _default) {\n+        return map.getInt(key, _default);\n+    }\n+\n+    public long getLong(String key, long _default) {\n+        return map.getLong(key, _default);\n+    }\n+\n+    public float getFloat(String key, float _default) {\n+        return map.getFloat(key, _default);\n+    }\n+\n+    public double getDouble(String key, double _default) {\n+        return map.getDouble(key, _default);\n+    }\n+\n+    public String get(String key, String _default) {\n+        return map.get(key, _default);\n+    }\n+\n+    public PMap asPMap() {\n+        return map;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"properties:\\n\");\n+        for (Map.Entry<String, String> entry : map.toMap().entrySet()) {\n+            sb.append(entry.getKey()).append(\": \").append(entry.getValue());\n+            sb.append(\"\\n\");\n+        }\n+        return sb.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fbb8d54185a16f44497cad7027f89241d5ee5f2"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4705, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}