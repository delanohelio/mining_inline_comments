{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgxNzAzMjI2", "number": 1942, "title": "Bilinear interpolation for height tiles", "bodyText": "Replace calcMean with bilinear interpolation for height tiles.  You can enable this by setting graph.elevation.interpolate to true (or if you had been using graph.elevation.calc_mean previously). See discussion here.\nThis is a stead climb and descent I used to bike on in central Pennsylvania, using SRTM elevation data without bilinear interpolation looks like this:\n\nAnd after bilinear interpolation looks like this:\n\nAnd with the mapzen elevation provider from #1929 it looks like this, which is closest to what I expect:", "createdAt": "2020-02-29T03:00:29Z", "url": "https://github.com/graphhopper/graphhopper/pull/1942", "merged": true, "mergeCommit": {"oid": "ccd49dc32e593e2daa522108c969197a2632f11c"}, "closed": true, "closedAt": "2020-03-12T16:21:59Z", "author": {"login": "msbarry"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcI67SuAH2gAyMzgxNzAzMjI2OmQ1YmY1ZGEzYWQ5MTQyMzIzZDJiMTliZjg5ZGI0Nzk5NGZmOTc4ZDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcM4vrWAH2gAyMzgxNzAzMjI2OjdjZTlhNzY2OWFjOGM3NmJkMzIyNzlhMDIzMTI4OTllMTc0OGNlNmI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d5bf5da3ad9142323d2b19bf89db47994ff978d3", "author": {"user": {"login": "msbarry", "name": "Michael Barry"}}, "url": "https://github.com/graphhopper/graphhopper/commit/d5bf5da3ad9142323d2b19bf89db47994ff978d3", "committedDate": "2020-02-29T02:16:44Z", "message": "replace calcMean with bilinear interpolate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0942ee78f1cd8ee2694c9a69474df76ea6436552", "author": {"user": {"login": "msbarry", "name": "Michael Barry"}}, "url": "https://github.com/graphhopper/graphhopper/commit/0942ee78f1cd8ee2694c9a69474df76ea6436552", "committedDate": "2020-02-29T02:42:02Z", "message": "fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MDU5Nzc3", "url": "https://github.com/graphhopper/graphhopper/pull/1942#pullrequestreview-368059777", "createdAt": "2020-03-03T15:09:57Z", "commit": {"oid": "0942ee78f1cd8ee2694c9a69474df76ea6436552"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNTowOTo1N1rOFxJwkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNToyMzoyM1rOFxKVuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA4NDQzMw==", "bodyText": "Let's remove the fall back for graph.elevation.calcmean and throw an error if it is still specified.", "url": "https://github.com/graphhopper/graphhopper/pull/1942#discussion_r387084433", "createdAt": "2020-03-03T15:09:57Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -601,6 +601,10 @@ private static ElevationProvider createElevationProvider(GraphHopperConfig ghCon\n                 ? ghConfig.getBool(\"graph.elevation.calcmean\", false)\n                 : ghConfig.getBool(\"graph.elevation.calc_mean\", false);\n \n+        boolean interpolate = ghConfig.has(\"graph.elevation.interpolate\")\n+                ? ghConfig.getBool(\"graph.elevation.interpolate\", false)\n+                : eleCalcMean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0942ee78f1cd8ee2694c9a69474df76ea6436552"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5MTQ0OQ==", "bodyText": "Why is this handling with MIN_ELEVATION necessary? What does this mean and what is the unit?\nAnd IMO the method is not guarded if a and b are smaller than MIN_ELEVATION.", "url": "https://github.com/graphhopper/graphhopper/pull/1942#discussion_r387091449", "createdAt": "2020-03-03T15:20:00Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/reader/dem/HeightTile.java", "diffHunk": "@@ -77,6 +78,15 @@ void setHeights(DataAccess da) {\n         this.heights = da;\n     }\n \n+    private short getHeightSample(int x, int y) {\n+        // always keep in mind factor 2 because of short value\n+        return heights.getShort(2 * (y * width + x));\n+    }\n+\n+    private double linearInterpolate(double a, double b, double f) {\n+        return a < MIN_ELEVATION ? b : b < MIN_ELEVATION ? a : (a + (b - a) * f);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0942ee78f1cd8ee2694c9a69474df76ea6436552"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzA5Mzk0NA==", "bodyText": "Instead of returning NaN should we better throw an exception? NaN will cause trouble somewhere else.", "url": "https://github.com/graphhopper/graphhopper/pull/1942#discussion_r387093944", "createdAt": "2020-03-03T15:23:23Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/reader/dem/HeightTile.java", "diffHunk": "@@ -85,38 +95,37 @@ public double getHeight(double lat, double lon) {\n         if (deltaLon > lonHigherBound || deltaLon < lowerBound)\n             throw new IllegalStateException(\"longitude not in boundary of this file:\" + lat + \",\" + lon + \", this:\" + this.toString());\n \n-        // first row in the file is the northernmost one\n-        // http://gis.stackexchange.com/a/43756/9006\n-        int lonSimilar = (int) (width / horizontalDegree * deltaLon);\n-        // different fallback methods for lat and lon as we have different rounding (lon -> positive, lat -> negative)\n-        if (lonSimilar >= width)\n-            lonSimilar = width - 1;\n-        int latSimilar = height - 1 - (int) (height / verticalDegree * deltaLat);\n-        if (latSimilar < 0)\n-            latSimilar = 0;\n-\n-        // always keep in mind factor 2 because of short value\n-        int daPointer = 2 * (latSimilar * width + lonSimilar);\n-        int value = heights.getShort(daPointer);\n-        AtomicInteger counter = new AtomicInteger(1);\n-        if (value == Short.MIN_VALUE)\n-            return Double.NaN;\n-\n-        if (calcMean) {\n-            if (lonSimilar > 0)\n-                value += includePoint(daPointer - 2, counter);\n-\n-            if (lonSimilar < width - 1)\n-                value += includePoint(daPointer + 2, counter);\n-\n-            if (latSimilar > 0)\n-                value += includePoint(daPointer - 2 * width, counter);\n-\n-            if (latSimilar < height - 1)\n-                value += includePoint(daPointer + 2 * width, counter);\n+        double elevation;\n+        if (interpolate) {\n+            double x = (width - 1) * deltaLon / horizontalDegree;\n+            double y = (height - 1) * (1 - deltaLat / verticalDegree);\n+            int left = (int) x;\n+            int top = (int) y;\n+            int right = left + 1;\n+            int bottom = top + 1;\n+\n+            double w00 = getHeightSample(left, top);\n+            double w01 = getHeightSample(left, bottom);\n+            double w10 = getHeightSample(right, top);\n+            double w11 = getHeightSample(right, bottom);\n+\n+            double topEle = linearInterpolate(w00, w10, x - left);\n+            double bottomEle = linearInterpolate(w01, w11, x - left);\n+            elevation = linearInterpolate(topEle, bottomEle, y - top);\n+        } else {\n+            // first row in the file is the northernmost one\n+            // http://gis.stackexchange.com/a/43756/9006\n+            int x = (int) (width / horizontalDegree * deltaLon);\n+            // different fallback methods for lat and lon as we have different rounding (lon -> positive, lat -> negative)\n+            if (x >= width)\n+                x = width - 1;\n+            int y = height - 1 - (int) (height / verticalDegree * deltaLat);\n+            if (y < 0)\n+                y = 0;\n+\n+            elevation = getHeightSample(x, y);\n         }\n-\n-        return (double) value / counter.get();\n+        return elevation < MIN_ELEVATION ? Double.NaN : elevation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0942ee78f1cd8ee2694c9a69474df76ea6436552"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed2eb1898a96194ce8890526e6520697bdb95c5f", "author": {"user": {"login": "msbarry", "name": "Michael Barry"}}, "url": "https://github.com/graphhopper/graphhopper/commit/ed2eb1898a96194ce8890526e6520697bdb95c5f", "committedDate": "2020-03-04T01:32:50Z", "message": "throw error on graph.elevation.calcmean"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e88b5dc77baaa4ee613aecdc8f45deb9828bbdc", "author": {"user": {"login": "msbarry", "name": "Michael Barry"}}, "url": "https://github.com/graphhopper/graphhopper/commit/2e88b5dc77baaa4ee613aecdc8f45deb9828bbdc", "committedDate": "2020-03-05T01:16:58Z", "message": "tighten range check"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "959c1b3608a82335ea7c55b92beb5f259a58cc02", "author": {"user": {"login": "msbarry", "name": "Michael Barry"}}, "url": "https://github.com/graphhopper/graphhopper/commit/959c1b3608a82335ea7c55b92beb5f259a58cc02", "committedDate": "2020-03-05T01:34:03Z", "message": "Merge branch 'master' into bilinear-interpolation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25c3d9bcec3347625f72026cc9d8f1c1103c985a", "author": {"user": {"login": "msbarry", "name": "Michael Barry"}}, "url": "https://github.com/graphhopper/graphhopper/commit/25c3d9bcec3347625f72026cc9d8f1c1103c985a", "committedDate": "2020-03-06T13:51:49Z", "message": "change config parameter to 'graph.elevation.interpolate: bilinear'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de000185907628819d96660f6ea54cc471d78200", "author": {"user": {"login": "msbarry", "name": "Michael Barry"}}, "url": "https://github.com/graphhopper/graphhopper/commit/de000185907628819d96660f6ea54cc471d78200", "committedDate": "2020-03-10T12:49:39Z", "message": "Merge branch 'master' into bilinear-interpolation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMjY4Mzkw", "url": "https://github.com/graphhopper/graphhopper/pull/1942#pullrequestreview-372268390", "createdAt": "2020-03-10T19:44:46Z", "commit": {"oid": "25c3d9bcec3347625f72026cc9d8f1c1103c985a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTo0NDo0NlrOF0eXSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxOTo0NDo0NlrOF0eXSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDU2Nzc1NQ==", "bodyText": "I would keep it simple for now and only use the two strings :) ? Or why did you choose to introduce this enum?", "url": "https://github.com/graphhopper/graphhopper/pull/1942#discussion_r390567755", "createdAt": "2020-03-10T19:44:46Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/reader/dem/ElevationInterpolation.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.reader.dem;\n+\n+/**\n+ * This enum defines the interpolation method to use.\n+ */\n+public enum ElevationInterpolation {\n+    NONE(\"none\"), BILINEAR(\"bilinear\");\n+\n+    private final String name;\n+\n+    ElevationInterpolation(String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return name;\n+    }\n+\n+    public static ElevationInterpolation find(String name) {\n+        if (name == null || name.isEmpty())\n+            return NONE;\n+\n+        for (ElevationInterpolation interpolation : values()) {\n+            if (interpolation.name().equalsIgnoreCase(name)) {\n+                return interpolation;\n+            }\n+        }\n+\n+        return NONE;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25c3d9bcec3347625f72026cc9d8f1c1103c985a"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "727181e8e0ff5c7a1dce8729f9b58a77390d66fc", "author": {"user": {"login": "msbarry", "name": "Michael Barry"}}, "url": "https://github.com/graphhopper/graphhopper/commit/727181e8e0ff5c7a1dce8729f9b58a77390d66fc", "committedDate": "2020-03-10T23:58:27Z", "message": "Merge branch 'master' into bilinear-interpolation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cb26d5e0ac5e5bed070097d2e0835a406b24950", "author": {"user": {"login": "msbarry", "name": "Michael Barry"}}, "url": "https://github.com/graphhopper/graphhopper/commit/5cb26d5e0ac5e5bed070097d2e0835a406b24950", "committedDate": "2020-03-10T23:59:03Z", "message": "Revert \"change config parameter to 'graph.elevation.interpolate: bilinear'\"\n\nThis reverts commit 25c3d9bcec3347625f72026cc9d8f1c1103c985a."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdb12065af89ba0d419814f43e7cce780628909b", "author": {"user": {"login": "msbarry", "name": "Michael Barry"}}, "url": "https://github.com/graphhopper/graphhopper/commit/cdb12065af89ba0d419814f43e7cce780628909b", "committedDate": "2020-03-11T00:03:08Z", "message": "handle graph.elevation.interpolate=bilinear"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ce9a7669ac8c76bd32279a02312899e1748ce6b", "author": {"user": {"login": "msbarry", "name": "Michael Barry"}}, "url": "https://github.com/graphhopper/graphhopper/commit/7ce9a7669ac8c76bd32279a02312899e1748ce6b", "committedDate": "2020-03-12T09:59:56Z", "message": "Merge branch 'master' into bilinear-interpolation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4592, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}