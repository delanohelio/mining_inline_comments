{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NTAzMDgx", "number": 2003, "title": "test client-hc routing without internet requirement", "bodyText": "For #1986\n@easbar Do you know how we can make the parametrized testing working with the dropwizard extension? Maybe some junit5 trick :) ?\nOne important difference to note is that for graphhopper.com we have to stay backward compatible and so it is not required for the client to always include the vehicle (or profile).", "createdAt": "2020-04-18T13:56:23Z", "url": "https://github.com/graphhopper/graphhopper/pull/2003", "merged": true, "mergeCommit": {"oid": "483535c7be6681215967f0555cb3f0c2b1cb3d8a"}, "closed": true, "closedAt": "2020-04-21T12:39:29Z", "author": {"login": "karussell"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcY2QM1AH2gAyNDA1NTAzMDgxOjVhY2NkMTc2NTRkNzYyYjBlOGQwZjcxMTMzZWM1YmRmMGU1YTc4M2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZy_2ZgFqTM5NzI4NzQ3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5accd17654d762b0e8d0f71133ec5bdf0e5a783b", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/5accd17654d762b0e8d0f71133ec5bdf0e5a783b", "committedDate": "2020-04-18T13:52:50Z", "message": "test client-hc routing without internet requirement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3de533ff13fb55eb34326b2cad264b55d192d70", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/c3de533ff13fb55eb34326b2cad264b55d192d70", "committedDate": "2020-04-18T14:06:48Z", "message": "improved alternative route example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e87aebf132a79081689efb3349e6415227812cbb", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/e87aebf132a79081689efb3349e6415227812cbb", "committedDate": "2020-04-20T11:27:15Z", "message": "parametrized test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2Mzc3NjM0", "url": "https://github.com/graphhopper/graphhopper/pull/2003#pullrequestreview-396377634", "createdAt": "2020-04-20T11:44:36Z", "commit": {"oid": "e87aebf132a79081689efb3349e6415227812cbb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMTo0NDozN1rOGIQcuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMTo0NDozN1rOGIQcuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxMTI5MQ==", "bodyText": "You need to use setProfile() here. For POST putHint also seems to work (because of json serialization/deserialization probably). Ugh this is a bit ugly. Ah and now I understand what you meant with the missing vehicle: Now that the requests are running against localhost we do not get the default vehicle used in graphhopper.com anymore so we have to adjust the tests.", "url": "https://github.com/graphhopper/graphhopper/pull/2003#discussion_r411311291", "createdAt": "2020-04-20T11:44:37Z", "author": {"login": "easbar"}, "path": "web/src/test/java/com/graphhopper/http/resources/RouteResourceClientHCTest.java", "diffHunk": "@@ -0,0 +1,370 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.http.resources;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.graphhopper.GHRequest;\n+import com.graphhopper.GHResponse;\n+import com.graphhopper.PathWrapper;\n+import com.graphhopper.api.GraphHopperWeb;\n+import com.graphhopper.config.CHProfileConfig;\n+import com.graphhopper.config.ProfileConfig;\n+import com.graphhopper.http.GraphHopperApplication;\n+import com.graphhopper.http.GraphHopperServerConfiguration;\n+import com.graphhopper.http.util.GraphHopperServerTestConfiguration;\n+import com.graphhopper.http.util.TestUtils;\n+import com.graphhopper.jackson.Jackson;\n+import com.graphhopper.jackson.PathWrapperDeserializer;\n+import com.graphhopper.util.Helper;\n+import com.graphhopper.util.Instruction;\n+import com.graphhopper.util.InstructionList;\n+import com.graphhopper.util.RoundaboutInstruction;\n+import com.graphhopper.util.details.PathDetail;\n+import com.graphhopper.util.exceptions.PointNotFoundException;\n+import com.graphhopper.util.exceptions.PointOutOfBoundsException;\n+import com.graphhopper.util.shapes.GHPoint;\n+import io.dropwizard.testing.junit5.DropwizardAppExtension;\n+import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.CsvSource;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.SocketTimeoutException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * @author Peter Karich\n+ */\n+@ExtendWith(DropwizardExtensionsSupport.class)\n+public class RouteResourceClientHCTest {\n+    private static final String DIR = \"./target/andorra-gh/\";\n+    private static final DropwizardAppExtension<GraphHopperServerConfiguration> app = new DropwizardAppExtension<>(GraphHopperApplication.class, createConfig());\n+\n+    private static GraphHopperServerConfiguration createConfig() {\n+        GraphHopperServerConfiguration config = new GraphHopperServerTestConfiguration();\n+        config.getGraphHopperConfiguration().\n+                putObject(\"graph.flag_encoders\", \"car,bike\").\n+                putObject(\"routing.ch.disabling_allowed\", true).\n+                putObject(\"prepare.min_network_size\", 0).\n+                putObject(\"prepare.min_one_way_network_size\", 0).\n+                putObject(\"graph.elevation.provider\", \"srtm\").\n+                putObject(\"graph.elevation.cachedir\", \"../core/files/\").\n+                putObject(\"datareader.file\", \"../core/files/andorra.osm.pbf\").\n+                putObject(\"graph.encoded_values\", \"road_class,surface,road_environment,max_speed\").\n+                putObject(\"graph.location\", DIR)\n+                .setProfiles(Arrays.asList(new ProfileConfig(\"my_car\").setVehicle(\"car\").setWeighting(\"fastest\"),\n+                        new ProfileConfig(\"my_bike\").setVehicle(\"bike\").setWeighting(\"fastest\")))\n+                .setCHProfiles(Arrays.asList(new CHProfileConfig(\"my_car\"), new CHProfileConfig(\"my_bike\")));\n+        return config;\n+    }\n+\n+    // dropwizard extension does not work with @RunWith(Parameterized.class), see https://github.com/graphhopper/graphhopper/pull/2003\n+    private static final String DISPLAY_NAME = \"POST={0},maxUnzippedLength={1}\";\n+\n+    GraphHopperWeb createGH(boolean usePost, int maxUnzippedLength) {\n+        return new GraphHopperWeb(TestUtils.clientUrl(app, \"/route\")).setPostRequest(usePost).setMaxUnzippedLength(maxUnzippedLength);\n+    }\n+\n+    @BeforeAll\n+    @AfterAll\n+    public static void cleanUp() {\n+        Helper.removeDir(new File(DIR));\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME)\n+    @CsvSource({\"true,0\", \"true,1000\", \"false,-1\"})\n+    public void testSimpleRoute(boolean usePost, int maxUnzippedLength) {\n+        GraphHopperWeb gh = createGH(usePost, maxUnzippedLength);\n+        GHRequest req = new GHRequest().\n+                addPoint(new GHPoint(42.5093, 1.5274)).\n+                addPoint(new GHPoint(42.5126, 1.5410)).\n+                putHint(\"vehicle\", \"car\").\n+                putHint(\"elevation\", false).\n+                putHint(\"instructions\", true).\n+                putHint(\"calc_points\", true);\n+        GHResponse res = gh.route(req);\n+        assertFalse(res.hasErrors(), \"errors:\" + res.getErrors().toString());\n+        PathWrapper alt = res.getBest();\n+        isBetween(60, 70, alt.getPoints().size());\n+        isBetween(2900, 3000, alt.getDistance());\n+        isBetween(110, 120, alt.getAscend());\n+        isBetween(70, 80, alt.getDescend());\n+        isBetween(190, 200, alt.getRouteWeight());\n+\n+        // change vehicle\n+        res = gh.route(new GHRequest(42.5093, 1.5274, 42.5126, 1.5410).\n+                putHint(\"vehicle\", \"bike\"));\n+        alt = res.getBest();\n+        assertFalse(res.hasErrors(), \"errors:\" + res.getErrors().toString());\n+        isBetween(2500, 2600, alt.getDistance());\n+\n+        assertEquals(\"[0, 1]\", alt.getPointsOrder().toString());\n+    }\n+\n+    @Test\n+    public void testPutPOJO() {\n+        ObjectNode requestJson = new ObjectMapper().createObjectNode();\n+        requestJson.putPOJO(\"double\", 1.0);\n+        requestJson.putPOJO(\"int\", 1);\n+        requestJson.putPOJO(\"boolean\", true);\n+        // does not work requestJson.putPOJO(\"string\", \"test\");\n+        assertEquals(\"{\\\"double\\\":1.0,\\\"int\\\":1,\\\"boolean\\\":true}\", requestJson.toString());\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME)\n+    @CsvSource({\"true,0\", \"true,1000\", \"false,-1\"})\n+    public void testAlternativeRoute(boolean usePost, int maxUnzippedLength) {\n+        GraphHopperWeb gh = createGH(usePost, maxUnzippedLength);\n+        GHRequest req = new GHRequest().\n+                addPoint(new GHPoint(42.505041, 1.521864)).\n+                addPoint(new GHPoint(42.509074, 1.537936)).\n+                putHint(\"vehicle\", \"car\").\n+                setAlgorithm(\"alternative_route\").\n+                putHint(\"instructions\", true).\n+                putHint(\"calc_points\", true).\n+                putHint(\"ch.disable\", true);\n+        GHResponse res = gh.route(req);\n+        assertFalse(res.hasErrors(), \"errors:\" + res.getErrors().toString());\n+        List<PathWrapper> paths = res.getAll();\n+        assertEquals(2, paths.size());\n+\n+        PathWrapper path = paths.get(0);\n+        isBetween(31, 37, path.getPoints().size());\n+        isBetween(1670, 1710, path.getDistance());\n+        assertTrue(\"Avinguda Carlemany\".contains(path.getDescription().get(0)), \"expected: \" + path.getDescription().get(0));\n+\n+        path = paths.get(1);\n+        isBetween(26, 31, path.getPoints().size());\n+        isBetween(1740, 1790, path.getDistance());\n+        assertTrue(\"Carrer Doctor Vilanova\".contains(path.getDescription().get(0)), \"expected: \" + path.getDescription().get(0));\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME)\n+    @CsvSource({\"true,0\", \"true,1000\", \"false,-1\"})\n+    public void testTimeout(boolean usePost, int maxUnzippedLength) {\n+        GraphHopperWeb gh = createGH(usePost, maxUnzippedLength);\n+        GHRequest req = new GHRequest().\n+                addPoint(new GHPoint(42.509225, 1.534728)).\n+                addPoint(new GHPoint(42.512602, 1.551558)).\n+                putHint(\"vehicle\", \"car\");\n+        GHResponse res = gh.route(req);\n+        assertFalse(res.hasErrors(), \"errors:\" + res.getErrors().toString());\n+\n+        req.putHint(GraphHopperWeb.TIMEOUT, 1);\n+        try {\n+            gh.route(req);\n+            fail();\n+        } catch (RuntimeException e) {\n+            assertEquals(SocketTimeoutException.class, e.getCause().getClass());\n+        }\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME)\n+    @CsvSource({\"true,0\", \"true,1000\", \"false,-1\"})\n+    public void testNoPoints(boolean usePost, int maxUnzippedLength) {\n+        GraphHopperWeb gh = createGH(usePost, maxUnzippedLength);\n+        GHRequest req = new GHRequest().\n+                addPoint(new GHPoint(42.509225, 1.534728)).\n+                addPoint(new GHPoint(42.512602, 1.551558)).\n+                putHint(\"vehicle\", \"car\");\n+\n+        req.putHint(\"instructions\", false);\n+        req.putHint(\"calc_points\", false);\n+        GHResponse res = gh.route(req);\n+        assertFalse(res.hasErrors(), \"errors:\" + res.getErrors().toString());\n+        PathWrapper alt = res.getBest();\n+        assertEquals(0, alt.getPoints().size());\n+        isBetween(1750, 1800, alt.getDistance());\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME)\n+    @CsvSource({\"true,0\", \"true,1000\", \"false,-1\"})\n+    public void readRoundabout(boolean usePost, int maxUnzippedLength) {\n+        GraphHopperWeb gh = createGH(usePost, maxUnzippedLength);\n+        GHRequest req = new GHRequest().\n+                addPoint(new GHPoint(42.509644, 1.532958)).\n+                addPoint(new GHPoint(42.510383, 1.533392)).\n+                putHint(\"vehicle\", \"car\");\n+\n+        GHResponse res = gh.route(req);\n+        int counter = 0;\n+        for (Instruction i : res.getBest().getInstructions()) {\n+            if (i instanceof RoundaboutInstruction) {\n+                counter++;\n+                RoundaboutInstruction ri = (RoundaboutInstruction) i;\n+                assertEquals(-5, ri.getTurnAngle(), 0.1, \"turn_angle was incorrect:\" + ri.getTurnAngle());\n+                // This route contains only one roundabout and no (via) point in a roundabout\n+                assertTrue(ri.isExited(), \"exited was incorrect:\" + ri.isExited());\n+            }\n+        }\n+        assertTrue(counter > 0, \"no roundabout in route?\");\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME)\n+    @CsvSource({\"true,0\", \"true,1000\", \"false,-1\"})\n+    public void testRetrieveOnlyStreetname(boolean usePost, int maxUnzippedLength) {\n+        GraphHopperWeb gh = createGH(usePost, maxUnzippedLength);\n+        GHRequest req = new GHRequest().\n+                addPoint(new GHPoint(42.507065, 1.529846)).\n+                addPoint(new GHPoint(42.510383, 1.533392)).\n+                putHint(\"vehicle\", \"car\");\n+\n+        GHResponse res = gh.route(req);\n+        List<String> given = extractInstructionNames(res.getBest(), 5);\n+        assertEquals(Arrays.asList(\"Continue onto Carrer de l'Aig\u00fceta\", \"Turn right onto Carrer Pere d'Urg\",\n+                \"Turn right onto Carrer Bonaventura Armengol\", \"Keep right onto Avinguda Consell d'Europa\", \"At roundabout, take exit 4\"\n+        ), given);\n+\n+        req.putHint(\"turn_description\", false);\n+        res = gh.route(req);\n+        given = extractInstructionNames(res.getBest(), 5);\n+        assertEquals(Arrays.asList(\"Carrer de l'Aig\u00fceta\", \"Carrer Pere d'Urg\", \"Carrer Bonaventura Armengol\", \"Avinguda Consell d'Europa\", \"\"), given);\n+    }\n+\n+    private List<String> extractInstructionNames(PathWrapper path, int count) {\n+        List<String> result = new ArrayList<>();\n+        for (Instruction instruction : path.getInstructions()) {\n+            result.add(instruction.getName());\n+            if (result.size() >= count) {\n+                return result;\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME)\n+    @CsvSource({\"true,0\", \"true,1000\", \"false,-1\"})\n+    public void testCannotFindPointException(boolean usePost, int maxUnzippedLength) {\n+        GraphHopperWeb gh = createGH(usePost, maxUnzippedLength);\n+        GHRequest req = new GHRequest().\n+                addPoint(new GHPoint(42.49058, 1.602974)).\n+                addPoint(new GHPoint(42.510383, 1.533392)).\n+                putHint(\"vehicle\", \"car\");\n+\n+        GHResponse res = gh.route(req);\n+        assertTrue(res.hasErrors(), \"no errors found?\");\n+        assertTrue(res.getErrors().get(0) instanceof PointNotFoundException);\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME)\n+    @CsvSource({\"true,0\", \"true,1000\", \"false,-1\"})\n+    public void testOutOfBoundsException(boolean usePost, int maxUnzippedLength) {\n+        GraphHopperWeb gh = createGH(usePost, maxUnzippedLength);\n+        GHRequest req = new GHRequest().\n+                addPoint(new GHPoint(-400.214943, -130.078125)).\n+                addPoint(new GHPoint(39.909736, -91.054687)).\n+                putHint(\"vehicle\", \"car\");\n+\n+        GHResponse res = gh.route(req);\n+        assertTrue(res.hasErrors(), \"no errors found?\");\n+        assertTrue(res.getErrors().get(0) instanceof PointOutOfBoundsException);\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME)\n+    @CsvSource({\"true,0\", \"true,1000\", \"false,-1\"})\n+    public void readFinishInstruction(boolean usePost, int maxUnzippedLength) {\n+        GraphHopperWeb gh = createGH(usePost, maxUnzippedLength);\n+        GHRequest req = new GHRequest().\n+                addPoint(new GHPoint(42.507065, 1.529846)).\n+                addPoint(new GHPoint(42.510383, 1.533392)).\n+                putHint(\"vehicle\", \"car\");\n+\n+        GHResponse res = gh.route(req);\n+        InstructionList instructions = res.getBest().getInstructions();\n+        String finishInstructionName = instructions.get(instructions.size() - 1).getName();\n+        assertEquals(\"Arrive at destination\", finishInstructionName);\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME)\n+    @CsvSource({\"true,0\", \"true,1000\", \"false,-1\"})\n+    public void doNotReadFinishInstruction(boolean usePost, int maxUnzippedLength) {\n+        GraphHopperWeb gh = createGH(usePost, maxUnzippedLength);\n+        GHRequest req = new GHRequest().\n+                addPoint(new GHPoint(42.507065, 1.529846)).\n+                addPoint(new GHPoint(42.510383, 1.533392)).\n+                putHint(\"vehicle\", \"car\").\n+                putHint(\"turn_description\", false);\n+        GHResponse res = gh.route(req);\n+        InstructionList instructions = res.getBest().getInstructions();\n+        String finishInstructionName = instructions.get(instructions.size() - 1).getName();\n+        assertEquals(\"\", finishInstructionName);\n+    }\n+\n+    void isBetween(double from, double to, double expected) {\n+        assertTrue(expected >= from, \"expected value \" + expected + \" was smaller than limit \" + from);\n+        assertTrue(expected <= to, \"expected value \" + expected + \" was bigger than limit \" + to);\n+    }\n+\n+    @Test\n+    public void testUnknownInstructionSign() throws IOException {\n+        // Modified the sign though\n+        ObjectMapper objectMapper = Jackson.newObjectMapper();\n+        JsonNode json = objectMapper.readTree(\"{\\\"instructions\\\":[{\\\"distance\\\":1.073,\\\"sign\\\":741,\\\"interval\\\":[0,1],\\\"text\\\":\\\"Continue onto A 81\\\",\\\"time\\\":32,\\\"street_name\\\":\\\"A 81\\\"},{\\\"distance\\\":0,\\\"sign\\\":4,\\\"interval\\\":[1,1],\\\"text\\\":\\\"Finish!\\\",\\\"time\\\":0,\\\"street_name\\\":\\\"\\\"}],\\\"descend\\\":0,\\\"ascend\\\":0,\\\"distance\\\":1.073,\\\"bbox\\\":[8.676286,48.354446,8.676297,48.354453],\\\"weight\\\":0.032179,\\\"time\\\":32,\\\"points_encoded\\\":true,\\\"points\\\":\\\"gfcfHwq}s@}c~AAA?\\\",\\\"snapped_waypoints\\\":\\\"gfcfHwq}s@}c~AAA?\\\"}\");\n+        PathWrapper wrapper = PathWrapperDeserializer.createPathWrapper(objectMapper, json, true, true);\n+\n+        assertEquals(741, wrapper.getInstructions().get(0).getSign());\n+        assertEquals(\"Continue onto A 81\", wrapper.getInstructions().get(0).getName());\n+    }\n+\n+    @ParameterizedTest(name = DISPLAY_NAME)\n+    @CsvSource({\"true,0\", \"true,1000\", \"false,-1\"})\n+    public void testPathDetails(boolean usePost, int maxUnzippedLength) {\n+        GraphHopperWeb gh = createGH(usePost, maxUnzippedLength);\n+        GHRequest req = new GHRequest().\n+                addPoint(new GHPoint(42.507065, 1.529846)).\n+                addPoint(new GHPoint(42.510383, 1.533392)).\n+                putHint(\"profile\", \"my_car\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e87aebf132a79081689efb3349e6415227812cbb"}, "originalPosition": 342}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31458130f615fa2a39190f9bb0e9f480c6943553", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/31458130f615fa2a39190f9bb0e9f480c6943553", "committedDate": "2020-04-20T12:00:11Z", "message": "use setProfile"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b13dae9431839c3b4a65dc2e8ccb7d69fa9933e", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/0b13dae9431839c3b4a65dc2e8ccb7d69fa9933e", "committedDate": "2020-04-21T10:53:54Z", "message": "Merge branch 'master' into offline_it\n\n# Conflicts:\n#\tclient-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java\n#\tclient-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be627ad30a7c1374974ed67fe9d7c9ca28feced0", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/be627ad30a7c1374974ed67fe9d7c9ca28feced0", "committedDate": "2020-04-21T11:03:56Z", "message": "Use @EnumSource"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MjI1MDU2", "url": "https://github.com/graphhopper/graphhopper/pull/2003#pullrequestreview-397225056", "createdAt": "2020-04-21T11:08:35Z", "commit": {"oid": "31458130f615fa2a39190f9bb0e9f480c6943553"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3Mjg3NDcz", "url": "https://github.com/graphhopper/graphhopper/pull/2003#pullrequestreview-397287473", "createdAt": "2020-04-21T12:39:11Z", "commit": {"oid": "be627ad30a7c1374974ed67fe9d7c9ca28feced0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjozOToxMVrOGJDf9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxMjozOToxMVrOGJDf9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjE0NzcwMg==", "bodyText": "Nice!", "url": "https://github.com/graphhopper/graphhopper/pull/2003#discussion_r412147702", "createdAt": "2020-04-21T12:39:11Z", "author": {"login": "karussell"}, "path": "web/src/test/java/com/graphhopper/http/resources/RouteResourceClientHCTest.java", "diffHunk": "@@ -0,0 +1,383 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.http.resources;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import com.graphhopper.GHRequest;\n+import com.graphhopper.GHResponse;\n+import com.graphhopper.PathWrapper;\n+import com.graphhopper.api.GraphHopperWeb;\n+import com.graphhopper.config.CHProfileConfig;\n+import com.graphhopper.config.ProfileConfig;\n+import com.graphhopper.http.GraphHopperApplication;\n+import com.graphhopper.http.GraphHopperServerConfiguration;\n+import com.graphhopper.http.util.GraphHopperServerTestConfiguration;\n+import com.graphhopper.http.util.TestUtils;\n+import com.graphhopper.jackson.Jackson;\n+import com.graphhopper.jackson.PathWrapperDeserializer;\n+import com.graphhopper.util.Helper;\n+import com.graphhopper.util.Instruction;\n+import com.graphhopper.util.InstructionList;\n+import com.graphhopper.util.RoundaboutInstruction;\n+import com.graphhopper.util.details.PathDetail;\n+import com.graphhopper.util.exceptions.PointNotFoundException;\n+import com.graphhopper.util.exceptions.PointOutOfBoundsException;\n+import com.graphhopper.util.shapes.GHPoint;\n+import io.dropwizard.testing.junit5.DropwizardAppExtension;\n+import io.dropwizard.testing.junit5.DropwizardExtensionsSupport;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.EnumSource;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.SocketTimeoutException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+/**\n+ * @author Peter Karich\n+ */\n+@ExtendWith(DropwizardExtensionsSupport.class)\n+public class RouteResourceClientHCTest {\n+    private static final String DIR = \"./target/andorra-gh/\";\n+    private static final DropwizardAppExtension<GraphHopperServerConfiguration> app = new DropwizardAppExtension<>(GraphHopperApplication.class, createConfig());\n+\n+    private static GraphHopperServerConfiguration createConfig() {\n+        GraphHopperServerConfiguration config = new GraphHopperServerTestConfiguration();\n+        config.getGraphHopperConfiguration().\n+                putObject(\"graph.flag_encoders\", \"car,bike\").\n+                putObject(\"routing.ch.disabling_allowed\", true).\n+                putObject(\"prepare.min_network_size\", 0).\n+                putObject(\"prepare.min_one_way_network_size\", 0).\n+                putObject(\"graph.elevation.provider\", \"srtm\").\n+                putObject(\"graph.elevation.cachedir\", \"../core/files/\").\n+                putObject(\"datareader.file\", \"../core/files/andorra.osm.pbf\").\n+                putObject(\"graph.encoded_values\", \"road_class,surface,road_environment,max_speed\").\n+                putObject(\"graph.location\", DIR)\n+                .setProfiles(Arrays.asList(new ProfileConfig(\"my_car\").setVehicle(\"car\").setWeighting(\"fastest\"),\n+                        new ProfileConfig(\"my_bike\").setVehicle(\"bike\").setWeighting(\"fastest\")))\n+                .setCHProfiles(Arrays.asList(new CHProfileConfig(\"my_car\"), new CHProfileConfig(\"my_bike\")));\n+        return config;\n+    }\n+\n+    // dropwizard extension does not work with @RunWith(Parameterized.class), but we can use an @EnumSource or similar\n+    // and on each test method. see https://github.com/graphhopper/graphhopper/pull/2003", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be627ad30a7c1374974ed67fe9d7c9ca28feced0"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4637, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}