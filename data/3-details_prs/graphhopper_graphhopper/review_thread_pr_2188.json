{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NTc5MDQ3", "number": 2188, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODowNTowOFrOE83Ahg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo0ODowMVrOE84CmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjUxMjcwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/util/spatialrules/SpatialRuleLookupHelper.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODowNTowOFrOH5O_zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMjo1Mjo1NFrOH6aN9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc3NjU5MQ==", "bodyText": "This change should be included in the changelog.\nAnd is this used elsewhere or why did you make it public? E.g. it could be used in Measurement?", "url": "https://github.com/graphhopper/graphhopper/pull/2188#discussion_r529776591", "createdAt": "2020-11-24T18:05:08Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/util/spatialrules/SpatialRuleLookupHelper.java", "diffHunk": "@@ -41,7 +41,7 @@\n public class SpatialRuleLookupHelper {\n \n     private static final Logger logger = LoggerFactory.getLogger(SpatialRuleLookupHelper.class);\n-    static String JSON_ID_FIELD = \"ISO_A3\";\n+    public static String JSON_ID_FIELD = \"ISO3166-1:alpha3\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6c6925b68856c96ffff685f7311de66b9166bb1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE3NzM0Mg==", "bodyText": "Probably a relict from my other PR.", "url": "https://github.com/graphhopper/graphhopper/pull/2188#discussion_r530177342", "createdAt": "2020-11-25T08:11:54Z", "author": {"login": "otbutz"}, "path": "core/src/main/java/com/graphhopper/routing/util/spatialrules/SpatialRuleLookupHelper.java", "diffHunk": "@@ -41,7 +41,7 @@\n public class SpatialRuleLookupHelper {\n \n     private static final Logger logger = LoggerFactory.getLogger(SpatialRuleLookupHelper.class);\n-    static String JSON_ID_FIELD = \"ISO_A3\";\n+    public static String JSON_ID_FIELD = \"ISO3166-1:alpha3\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc3NjU5MQ=="}, "originalCommit": {"oid": "d6c6925b68856c96ffff685f7311de66b9166bb1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDk0MzYzMA==", "bodyText": "Thanks! IMO it should be still included in the changelog. GeoJSON files with ISO_A4 will now break (?)", "url": "https://github.com/graphhopper/graphhopper/pull/2188#discussion_r530943630", "createdAt": "2020-11-26T10:55:12Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/util/spatialrules/SpatialRuleLookupHelper.java", "diffHunk": "@@ -41,7 +41,7 @@\n public class SpatialRuleLookupHelper {\n \n     private static final Logger logger = LoggerFactory.getLogger(SpatialRuleLookupHelper.class);\n-    static String JSON_ID_FIELD = \"ISO_A3\";\n+    public static String JSON_ID_FIELD = \"ISO3166-1:alpha3\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc3NjU5MQ=="}, "originalCommit": {"oid": "d6c6925b68856c96ffff685f7311de66b9166bb1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTAwOTAxMg==", "bodyText": "Done", "url": "https://github.com/graphhopper/graphhopper/pull/2188#discussion_r531009012", "createdAt": "2020-11-26T12:52:54Z", "author": {"login": "otbutz"}, "path": "core/src/main/java/com/graphhopper/routing/util/spatialrules/SpatialRuleLookupHelper.java", "diffHunk": "@@ -41,7 +41,7 @@\n public class SpatialRuleLookupHelper {\n \n     private static final Logger logger = LoggerFactory.getLogger(SpatialRuleLookupHelper.class);\n-    static String JSON_ID_FIELD = \"ISO_A3\";\n+    public static String JSON_ID_FIELD = \"ISO3166-1:alpha3\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc3NjU5MQ=="}, "originalCommit": {"oid": "d6c6925b68856c96ffff685f7311de66b9166bb1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjY4MTg1OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/util/spatialrules/SpatialRuleLookupBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODo0ODowMVrOH5Qk2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwODoxNzoyNFrOH5noYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwMjQ1Nw==", "bodyText": "Why is this necessary and not just borders.add(intersection)? Isn't intersection always a Polygon?", "url": "https://github.com/graphhopper/graphhopper/pull/2188#discussion_r529802457", "createdAt": "2020-11-24T18:48:01Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/util/spatialrules/SpatialRuleLookupBuilder.java", "diffHunk": "@@ -53,27 +54,27 @@ public static SpatialRuleLookup buildIndex(List<JsonFeatureCollection> jsonFeatu\n                 List<Polygon> borders = new ArrayList<>();\n                 for (int i = 0; i < jsonFeature.getGeometry().getNumGeometries(); i++) {\n                     Geometry poly = jsonFeature.getGeometry().getGeometryN(i);\n-                    if (poly instanceof Polygon)\n-                        borders.add((Polygon) poly);\n-                    else\n+                    if (poly instanceof Polygon) {\n+                        Geometry intersection = bboxGeometry.intersection(poly);\n+                        if (!intersection.isEmpty()) {\n+                            PolygonExtracter.getPolygons(intersection, borders);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6c6925b68856c96ffff685f7311de66b9166bb1"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE4MDE5Mg==", "bodyText": "Geometry.intersection(Geometry other):\n\nIf the result is empty, it is an atomic geometry with the dimension of the lowest input dimension\n\nFor two polygons this would result in an empty polygon being picked up by the PolygonExtracter.", "url": "https://github.com/graphhopper/graphhopper/pull/2188#discussion_r530180192", "createdAt": "2020-11-25T08:17:24Z", "author": {"login": "otbutz"}, "path": "core/src/main/java/com/graphhopper/routing/util/spatialrules/SpatialRuleLookupBuilder.java", "diffHunk": "@@ -53,27 +54,27 @@ public static SpatialRuleLookup buildIndex(List<JsonFeatureCollection> jsonFeatu\n                 List<Polygon> borders = new ArrayList<>();\n                 for (int i = 0; i < jsonFeature.getGeometry().getNumGeometries(); i++) {\n                     Geometry poly = jsonFeature.getGeometry().getGeometryN(i);\n-                    if (poly instanceof Polygon)\n-                        borders.add((Polygon) poly);\n-                    else\n+                    if (poly instanceof Polygon) {\n+                        Geometry intersection = bboxGeometry.intersection(poly);\n+                        if (!intersection.isEmpty()) {\n+                            PolygonExtracter.getPolygons(intersection, borders);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgwMjQ1Nw=="}, "originalCommit": {"oid": "d6c6925b68856c96ffff685f7311de66b9166bb1"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4665, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}