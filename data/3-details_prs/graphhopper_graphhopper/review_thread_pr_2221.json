{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNzI4ODQy", "number": 2221, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDo1OTo0OVrOFJvpiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMTowMjoxNlrOFJvrKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzYyMTg1OnYy", "diffSide": "RIGHT", "path": "reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDo1OTo0OVrOIMMuLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMzoyOTo1NFrOIMPVVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY2MjI1Mw==", "bodyText": "Btw one of the major difficulties I had when trying to understand OSMReader is that the node map is used in two different ways during the import. In the first pass it simply separates between nodes that occur in two or more, only one or zero ways. For this we use the TOWER/PILLAR/EMPTY_NODE constants. But then in the second run we use the same map and assign pillar/tower node ids and this leads to very confusing code like this:\n  // skip osmIds with no associated pillar or tower id (e.g. !OSMReader.isBounds)\n                if (tmpNode == TOWER_NODE)\n                    continue;\n\n                if (tmpNode == PILLAR_NODE) {\nwhere tmpNode == TOWER/PILLAR_NODE does not mean that tmpNode is a tower/pillar node but it means something very different(!): Because no 'real' tower/pillar node id was assigned for this node it means that tmpNode does not exist.\nThis is probably the first thing I would clean up in OSMReader, because it really tripped me up. I understand that we probably want to re-use the map for performance reasons, but at least we should use a second reference to it (using a different name) or use some helper methods to make this more clear. Then again I wonder if we could exploit the fact that during the first pass we only need to distinguish three values (zero ways, one way, multiple ways) to achieve faster lookups somehow.", "url": "https://github.com/graphhopper/graphhopper/pull/2221#discussion_r549662253", "createdAt": "2020-12-29T10:59:49Z", "author": {"login": "easbar"}, "path": "reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java", "diffHunk": "@@ -573,10 +573,30 @@ int addTowerNode(long osmId, double lat, double lon, double ele) {\n         final PointList pointList = new PointList(osmNodeIds.size(), nodeAccess.is3D());\n         final List<EdgeIteratorState> newEdges = new ArrayList<>(5);\n         int firstNode = -1;\n-        final int lastIndex = osmNodeIds.size() - 1;\n         int lastInBoundsPillarNode = -1;\n         try {\n-            for (int i = 0; i < osmNodeIds.size(); i++) {\n+            // #2221: ways might include nodes at the beginning or end that do not exist -> skip them\n+            int firstExisting = -1;\n+            int lastExisting = -1;\n+            for (int i = 0; i < osmNodeIds.size(); ++i) {\n+                final long tmpNode = getNodeMap().get(osmNodeIds.get(i));\n+                if (tmpNode > -TOWER_NODE || tmpNode < TOWER_NODE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14ebbe46b140bc776a8f9586ec5a34187c7f46a7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY3MTU2Nw==", "bodyText": "if we could exploit the fact that during the first pass we only need to distinguish three values\n\nFor example we could use a LongHashSet to store all OSM node Ids that occur in any way and a second (smaller) one to keep track which of these nodes are tower nodes. Not sure if this would be an improvement, because before pass2 we would still have to build the mapping between OSM node Ids and GH tower/pillar IDs.", "url": "https://github.com/graphhopper/graphhopper/pull/2221#discussion_r549671567", "createdAt": "2020-12-29T11:33:39Z", "author": {"login": "easbar"}, "path": "reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java", "diffHunk": "@@ -573,10 +573,30 @@ int addTowerNode(long osmId, double lat, double lon, double ele) {\n         final PointList pointList = new PointList(osmNodeIds.size(), nodeAccess.is3D());\n         final List<EdgeIteratorState> newEdges = new ArrayList<>(5);\n         int firstNode = -1;\n-        final int lastIndex = osmNodeIds.size() - 1;\n         int lastInBoundsPillarNode = -1;\n         try {\n-            for (int i = 0; i < osmNodeIds.size(); i++) {\n+            // #2221: ways might include nodes at the beginning or end that do not exist -> skip them\n+            int firstExisting = -1;\n+            int lastExisting = -1;\n+            for (int i = 0; i < osmNodeIds.size(); ++i) {\n+                final long tmpNode = getNodeMap().get(osmNodeIds.get(i));\n+                if (tmpNode > -TOWER_NODE || tmpNode < TOWER_NODE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY2MjI1Mw=="}, "originalCommit": {"oid": "14ebbe46b140bc776a8f9586ec5a34187c7f46a7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY5OTgwNA==", "bodyText": "but at least we should use a second reference to it (using a different name) or use some helper methods to make this more clear.\n\n\ud83d\udc4d\n\nFor example we could use a LongHashSet to store all OSM node Ids that occur in any way\n\nThe problem might be for big maps with millions of nodes as sets behave very ugly then: when increasing the size you double the size (additionally to the load factor of usually 0.75) and so you will need 3*1/0.75 = 4 and then you need to copy such big arrays.\nBut surely we can just try as the memory usage requirements changed significantly over the last years. Still at some point not too far in the past I tried with a database like mapdb but it was still much slower and used more resources (disk+memory).", "url": "https://github.com/graphhopper/graphhopper/pull/2221#discussion_r549699804", "createdAt": "2020-12-29T13:13:14Z", "author": {"login": "karussell"}, "path": "reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java", "diffHunk": "@@ -573,10 +573,30 @@ int addTowerNode(long osmId, double lat, double lon, double ele) {\n         final PointList pointList = new PointList(osmNodeIds.size(), nodeAccess.is3D());\n         final List<EdgeIteratorState> newEdges = new ArrayList<>(5);\n         int firstNode = -1;\n-        final int lastIndex = osmNodeIds.size() - 1;\n         int lastInBoundsPillarNode = -1;\n         try {\n-            for (int i = 0; i < osmNodeIds.size(); i++) {\n+            // #2221: ways might include nodes at the beginning or end that do not exist -> skip them\n+            int firstExisting = -1;\n+            int lastExisting = -1;\n+            for (int i = 0; i < osmNodeIds.size(); ++i) {\n+                final long tmpNode = getNodeMap().get(osmNodeIds.get(i));\n+                if (tmpNode > -TOWER_NODE || tmpNode < TOWER_NODE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY2MjI1Mw=="}, "originalCommit": {"oid": "14ebbe46b140bc776a8f9586ec5a34187c7f46a7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcwMTUyNA==", "bodyText": "Ok yes this was just an idea, its probably hard to say without trying it. Also I am not even sure if there is really much need to speed up the OSM parsing and improving readability seems more important.", "url": "https://github.com/graphhopper/graphhopper/pull/2221#discussion_r549701524", "createdAt": "2020-12-29T13:18:26Z", "author": {"login": "easbar"}, "path": "reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java", "diffHunk": "@@ -573,10 +573,30 @@ int addTowerNode(long osmId, double lat, double lon, double ele) {\n         final PointList pointList = new PointList(osmNodeIds.size(), nodeAccess.is3D());\n         final List<EdgeIteratorState> newEdges = new ArrayList<>(5);\n         int firstNode = -1;\n-        final int lastIndex = osmNodeIds.size() - 1;\n         int lastInBoundsPillarNode = -1;\n         try {\n-            for (int i = 0; i < osmNodeIds.size(); i++) {\n+            // #2221: ways might include nodes at the beginning or end that do not exist -> skip them\n+            int firstExisting = -1;\n+            int lastExisting = -1;\n+            for (int i = 0; i < osmNodeIds.size(); ++i) {\n+                final long tmpNode = getNodeMap().get(osmNodeIds.get(i));\n+                if (tmpNode > -TOWER_NODE || tmpNode < TOWER_NODE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY2MjI1Mw=="}, "originalCommit": {"oid": "14ebbe46b140bc776a8f9586ec5a34187c7f46a7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTcwNTA0NQ==", "bodyText": "Yes, a speed up is not necessary. Still I would like it, if the new version is not much slower :) (maybe max 2x slower? probably depends on the gained readability)", "url": "https://github.com/graphhopper/graphhopper/pull/2221#discussion_r549705045", "createdAt": "2020-12-29T13:29:54Z", "author": {"login": "karussell"}, "path": "reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java", "diffHunk": "@@ -573,10 +573,30 @@ int addTowerNode(long osmId, double lat, double lon, double ele) {\n         final PointList pointList = new PointList(osmNodeIds.size(), nodeAccess.is3D());\n         final List<EdgeIteratorState> newEdges = new ArrayList<>(5);\n         int firstNode = -1;\n-        final int lastIndex = osmNodeIds.size() - 1;\n         int lastInBoundsPillarNode = -1;\n         try {\n-            for (int i = 0; i < osmNodeIds.size(); i++) {\n+            // #2221: ways might include nodes at the beginning or end that do not exist -> skip them\n+            int firstExisting = -1;\n+            int lastExisting = -1;\n+            for (int i = 0; i < osmNodeIds.size(); ++i) {\n+                final long tmpNode = getNodeMap().get(osmNodeIds.get(i));\n+                if (tmpNode > -TOWER_NODE || tmpNode < TOWER_NODE) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY2MjI1Mw=="}, "originalCommit": {"oid": "14ebbe46b140bc776a8f9586ec5a34187c7f46a7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NzYyNjAxOnYy", "diffSide": "RIGHT", "path": "reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMTowMjoxNlrOIMMwtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMTowMjoxNlrOIMMwtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY2MjkwMw==", "bodyText": "The actual fix is a bit lengthy, but rather trivial: We scan the osmNodeIds list from the beginning and end to find the first node that does exist (and skip those that do not exist).", "url": "https://github.com/graphhopper/graphhopper/pull/2221#discussion_r549662903", "createdAt": "2020-12-29T11:02:16Z", "author": {"login": "easbar"}, "path": "reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java", "diffHunk": "@@ -573,10 +573,30 @@ int addTowerNode(long osmId, double lat, double lon, double ele) {\n         final PointList pointList = new PointList(osmNodeIds.size(), nodeAccess.is3D());\n         final List<EdgeIteratorState> newEdges = new ArrayList<>(5);\n         int firstNode = -1;\n-        final int lastIndex = osmNodeIds.size() - 1;\n         int lastInBoundsPillarNode = -1;\n         try {\n-            for (int i = 0; i < osmNodeIds.size(); i++) {\n+            // #2221: ways might include nodes at the beginning or end that do not exist -> skip them\n+            int firstExisting = -1;\n+            int lastExisting = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14ebbe46b140bc776a8f9586ec5a34187c7f46a7"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4696, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}