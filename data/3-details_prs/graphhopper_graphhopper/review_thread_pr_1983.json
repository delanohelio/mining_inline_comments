{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMDk0OTE2", "number": 1983, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0OTowNFrODwLZBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxODowMzoyNFrODxVIhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODQ0ODY4OnYy", "diffSide": "RIGHT", "path": "reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0OTowNFrOGDCNdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo0OTowNFrOGDCNdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzNTEyNA==", "bodyText": "This example might be a bit artificial, because we can also just use profile1 and change the distance factor on every request, but creating a dedicated profile for this illustrates the new feature here: We can setup a profile on the server side and then do no longer have to specify the different parameters for every request (like the distance factor) and at the same time we do not need an extra landmark calculation for this. This should be useful for #1776 when we want to setup a complex profile and then just select it by using the profile parameter (which btw is still missing on the web layer (#1934)).", "url": "https://github.com/graphhopper/graphhopper/pull/1983#discussion_r405835124", "createdAt": "2020-04-08T21:49:04Z", "author": {"login": "easbar"}, "path": "reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java", "diffHunk": "@@ -1356,6 +1356,54 @@ public void testFlexMode_631() {\n         // note: combining hybrid & speed mode is currently not possible and should be avoided: #1082\n     }\n \n+    @Test\n+    public void testCrossQuery() {\n+        final String profile1 = \"p1\";\n+        final String profile2 = \"p2\";\n+        final String profile3 = \"p3\";\n+        final String vehicle = \"car\";\n+        GraphHopper hopper = createGraphHopper(vehicle).\n+                setOSMFile(MONACO).\n+                setProfiles(\n+                        new ProfileConfig(profile1).setVehicle(\"car\").setWeighting(\"short_fastest\").putHint(\"short_fastest.distance_factor\", 0.07),\n+                        new ProfileConfig(profile2).setVehicle(\"car\").setWeighting(\"short_fastest\").putHint(\"short_fastest.distance_factor\", 0.10),\n+                        new ProfileConfig(profile3).setVehicle(\"car\").setWeighting(\"short_fastest\").putHint(\"short_fastest.distance_factor\", 0.15)\n+                ).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea8f341bca62a165aad7b4fb59db561a1502f5d"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODQ1MjMyOnYy", "diffSide": "RIGHT", "path": "tools/src/main/java/com/graphhopper/tools/Measurement.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo1MDoyM1rOGDCPug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo1MDoyM1rOGDCPug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzNTcwNg==", "bodyText": "This is a good use-case for the new feature: We use the same landmarks for both LM profiles (with and without turn costs).", "url": "https://github.com/graphhopper/graphhopper/pull/1983#discussion_r405835706", "createdAt": "2020-04-08T21:50:23Z", "author": {"login": "easbar"}, "path": "tools/src/main/java/com/graphhopper/tools/Measurement.java", "diffHunk": "@@ -304,11 +304,10 @@ private GraphHopperConfig createConfigFromArgs(PMap args) {\n         ghConfig.setCHProfiles(chProfiles);\n         List<LMProfileConfig> lmProfiles = new ArrayList<>();\n         if (useLM) {\n-            // as currently we do not allow cross-querying LM with turn costs=true/false we have to add both\n-            // profiles and this currently leads to two identical LM preparations\n             lmProfiles.add(new LMProfileConfig(\"profile_no_tc\"));\n             if (turnCosts)\n-                lmProfiles.add(new LMProfileConfig(\"profile_tc\"));\n+                // no need for a second LM preparation, we can do cross queries here\n+                lmProfiles.add(new LMProfileConfig(\"profile_tc\").setPreparationProfile(\"profile_no_tc\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bea8f341bca62a165aad7b4fb59db561a1502f5d"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDUwMjUzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/graphhopper/config/LMProfileConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzo1NTo0MlrOGEvGKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxODowNTo1MVrOGEvc5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYxOTExMg==", "bodyText": "I would use the Java \"this\" but I have no good arguments :)", "url": "https://github.com/graphhopper/graphhopper/pull/1983#discussion_r407619112", "createdAt": "2020-04-13T17:55:42Z", "author": {"login": "karussell"}, "path": "api/src/main/java/com/graphhopper/config/LMProfileConfig.java", "diffHunk": "@@ -28,6 +28,7 @@\n  */\n public class LMProfileConfig {\n     private String profile = \"\";\n+    private String preparationProfile = \"self\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c646f75d2a02c754b4ce983ab64daaf852797b72"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyNDkzMw==", "bodyText": "OK convinced haha", "url": "https://github.com/graphhopper/graphhopper/pull/1983#discussion_r407624933", "createdAt": "2020-04-13T18:05:51Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/config/LMProfileConfig.java", "diffHunk": "@@ -28,6 +28,7 @@\n  */\n public class LMProfileConfig {\n     private String profile = \"\";\n+    private String preparationProfile = \"self\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYxOTExMg=="}, "originalCommit": {"oid": "c646f75d2a02c754b4ce983ab64daaf852797b72"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDUwODQ2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/graphhopper/config/LMProfileConfig.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzo1NzoyMVrOGEvJ6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwODozMzoxN1rOGFD6jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMDA3Mg==", "bodyText": "Shouldn't we exclude all additional parameters earlier? I mean which parameters could be useful when we reuse the preparation?", "url": "https://github.com/graphhopper/graphhopper/pull/1983#discussion_r407620072", "createdAt": "2020-04-13T17:57:21Z", "author": {"login": "karussell"}, "path": "api/src/main/java/com/graphhopper/config/LMProfileConfig.java", "diffHunk": "@@ -47,17 +48,35 @@ void setProfile(String profile) {\n         this.profile = profile;\n     }\n \n+    public boolean usesOtherPreparation() {\n+        return !preparationProfile.equals(\"self\");\n+    }\n+\n+    public String getPreparationProfile() {\n+        return preparationProfile;\n+    }\n+\n+    public LMProfileConfig setPreparationProfile(String preparationProfile) {\n+        validateProfileName(preparationProfile);\n+        if (maximumLMWeight >= 0)\n+            throw new IllegalArgumentException(\"Using non-default maximum_lm_weight and preparation_profile at the same time is not allowed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c646f75d2a02c754b4ce983ab64daaf852797b72"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyNTM5NQ==", "bodyText": "Yeah you mean the hints need to be emtpy as well?", "url": "https://github.com/graphhopper/graphhopper/pull/1983#discussion_r407625395", "createdAt": "2020-04-13T18:06:43Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/config/LMProfileConfig.java", "diffHunk": "@@ -47,17 +48,35 @@ void setProfile(String profile) {\n         this.profile = profile;\n     }\n \n+    public boolean usesOtherPreparation() {\n+        return !preparationProfile.equals(\"self\");\n+    }\n+\n+    public String getPreparationProfile() {\n+        return preparationProfile;\n+    }\n+\n+    public LMProfileConfig setPreparationProfile(String preparationProfile) {\n+        validateProfileName(preparationProfile);\n+        if (maximumLMWeight >= 0)\n+            throw new IllegalArgumentException(\"Using non-default maximum_lm_weight and preparation_profile at the same time is not allowed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMDA3Mg=="}, "originalCommit": {"oid": "c646f75d2a02c754b4ce983ab64daaf852797b72"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2MjY5Nw==", "bodyText": "Yes (and could be even checked earlier after parsing?)", "url": "https://github.com/graphhopper/graphhopper/pull/1983#discussion_r407662697", "createdAt": "2020-04-13T19:15:03Z", "author": {"login": "karussell"}, "path": "api/src/main/java/com/graphhopper/config/LMProfileConfig.java", "diffHunk": "@@ -47,17 +48,35 @@ void setProfile(String profile) {\n         this.profile = profile;\n     }\n \n+    public boolean usesOtherPreparation() {\n+        return !preparationProfile.equals(\"self\");\n+    }\n+\n+    public String getPreparationProfile() {\n+        return preparationProfile;\n+    }\n+\n+    public LMProfileConfig setPreparationProfile(String preparationProfile) {\n+        validateProfileName(preparationProfile);\n+        if (maximumLMWeight >= 0)\n+            throw new IllegalArgumentException(\"Using non-default maximum_lm_weight and preparation_profile at the same time is not allowed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMDA3Mg=="}, "originalCommit": {"oid": "c646f75d2a02c754b4ce983ab64daaf852797b72"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2MDIwNQ==", "bodyText": "This is kind of checked during parsing because Jackson uses this setter. And I just noticed there aren't any other 'hints', so checking the maxLMWeight should be sufficient here.", "url": "https://github.com/graphhopper/graphhopper/pull/1983#discussion_r407960205", "createdAt": "2020-04-14T08:33:17Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/config/LMProfileConfig.java", "diffHunk": "@@ -47,17 +48,35 @@ void setProfile(String profile) {\n         this.profile = profile;\n     }\n \n+    public boolean usesOtherPreparation() {\n+        return !preparationProfile.equals(\"self\");\n+    }\n+\n+    public String getPreparationProfile() {\n+        return preparationProfile;\n+    }\n+\n+    public LMProfileConfig setPreparationProfile(String preparationProfile) {\n+        validateProfileName(preparationProfile);\n+        if (maximumLMWeight >= 0)\n+            throw new IllegalArgumentException(\"Using non-default maximum_lm_weight and preparation_profile at the same time is not allowed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMDA3Mg=="}, "originalCommit": {"oid": "c646f75d2a02c754b4ce983ab64daaf852797b72"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDUxMzM4OnYy", "diffSide": "RIGHT", "path": "config-example.yml", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNzo1ODo0MlrOGEvNAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxOToyMDo1MFrOGFdZrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMDg2NA==", "bodyText": "I would introduce an \"advanced\" section or even move this into the docs and link to them from here as this is very special and might be too confusing?", "url": "https://github.com/graphhopper/graphhopper/pull/1983#discussion_r407620864", "createdAt": "2020-04-13T17:58:42Z", "author": {"login": "karussell"}, "path": "config-example.yml", "diffHunk": "@@ -62,7 +62,11 @@ graphhopper:\n \n   # Hybrid mode:\n   # Similar to speed mode, the hybrid mode (Landmarks, LM) also speeds up routing by doing calculating auxiliary data\n-  # in advance. Its not as fast as speed mode, but more flexible.\n+  # in advance. Its not as fast as speed mode, but more flexible. It is possible to use the same preparation for multiple\n+  # profiles which saves memory and preparation time. To do this use e.g. `preparation_profile: my_other_profile` where\n+  # `my_other_profile` is the name of another profile for which an LM profile exists.\n+  # Important: This only will give correct routing results if the weights calculated for the profile are equal or\n+  # larger (for every edge) than those calculated for the profile that was used for the preparation (`my_other_profile`)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c646f75d2a02c754b4ce983ab64daaf852797b72"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyNjAzNQ==", "bodyText": "Ok you mean not mention preparation_profile here? Which docs should this go into?", "url": "https://github.com/graphhopper/graphhopper/pull/1983#discussion_r407626035", "createdAt": "2020-04-13T18:07:54Z", "author": {"login": "easbar"}, "path": "config-example.yml", "diffHunk": "@@ -62,7 +62,11 @@ graphhopper:\n \n   # Hybrid mode:\n   # Similar to speed mode, the hybrid mode (Landmarks, LM) also speeds up routing by doing calculating auxiliary data\n-  # in advance. Its not as fast as speed mode, but more flexible.\n+  # in advance. Its not as fast as speed mode, but more flexible. It is possible to use the same preparation for multiple\n+  # profiles which saves memory and preparation time. To do this use e.g. `preparation_profile: my_other_profile` where\n+  # `my_other_profile` is the name of another profile for which an LM profile exists.\n+  # Important: This only will give correct routing results if the weights calculated for the profile are equal or\n+  # larger (for every edge) than those calculated for the profile that was used for the preparation (`my_other_profile`)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMDg2NA=="}, "originalCommit": {"oid": "c646f75d2a02c754b4ce983ab64daaf852797b72"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2NDAxMQ==", "bodyText": "I declared the cross-query stuff as 'advanced usage'. If you prefer we can still move this kind of documentation to another place. I kind of like it right there in the configuration file, but most importantly it should be consistent somehow so it is clear where one can find the documentation of the different configuration options.", "url": "https://github.com/graphhopper/graphhopper/pull/1983#discussion_r407964011", "createdAt": "2020-04-14T08:39:28Z", "author": {"login": "easbar"}, "path": "config-example.yml", "diffHunk": "@@ -62,7 +62,11 @@ graphhopper:\n \n   # Hybrid mode:\n   # Similar to speed mode, the hybrid mode (Landmarks, LM) also speeds up routing by doing calculating auxiliary data\n-  # in advance. Its not as fast as speed mode, but more flexible.\n+  # in advance. Its not as fast as speed mode, but more flexible. It is possible to use the same preparation for multiple\n+  # profiles which saves memory and preparation time. To do this use e.g. `preparation_profile: my_other_profile` where\n+  # `my_other_profile` is the name of another profile for which an LM profile exists.\n+  # Important: This only will give correct routing results if the weights calculated for the profile are equal or\n+  # larger (for every edge) than those calculated for the profile that was used for the preparation (`my_other_profile`)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMDg2NA=="}, "originalCommit": {"oid": "c646f75d2a02c754b4ce983ab64daaf852797b72"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2ODM0Mw==", "bodyText": "Btw I could not find any documentation for the maximum_lm_weight parameter.", "url": "https://github.com/graphhopper/graphhopper/pull/1983#discussion_r407968343", "createdAt": "2020-04-14T08:46:23Z", "author": {"login": "easbar"}, "path": "config-example.yml", "diffHunk": "@@ -62,7 +62,11 @@ graphhopper:\n \n   # Hybrid mode:\n   # Similar to speed mode, the hybrid mode (Landmarks, LM) also speeds up routing by doing calculating auxiliary data\n-  # in advance. Its not as fast as speed mode, but more flexible.\n+  # in advance. Its not as fast as speed mode, but more flexible. It is possible to use the same preparation for multiple\n+  # profiles which saves memory and preparation time. To do this use e.g. `preparation_profile: my_other_profile` where\n+  # `my_other_profile` is the name of another profile for which an LM profile exists.\n+  # Important: This only will give correct routing results if the weights calculated for the profile are equal or\n+  # larger (for every edge) than those calculated for the profile that was used for the preparation (`my_other_profile`)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMDg2NA=="}, "originalCommit": {"oid": "c646f75d2a02c754b4ce983ab64daaf852797b72"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3MTk4MA==", "bodyText": "Which docs should this go into?\n\nShould we introduce a profiles.md documentation that could also mention backward compatibility related things?", "url": "https://github.com/graphhopper/graphhopper/pull/1983#discussion_r408271980", "createdAt": "2020-04-14T16:28:12Z", "author": {"login": "karussell"}, "path": "config-example.yml", "diffHunk": "@@ -62,7 +62,11 @@ graphhopper:\n \n   # Hybrid mode:\n   # Similar to speed mode, the hybrid mode (Landmarks, LM) also speeds up routing by doing calculating auxiliary data\n-  # in advance. Its not as fast as speed mode, but more flexible.\n+  # in advance. Its not as fast as speed mode, but more flexible. It is possible to use the same preparation for multiple\n+  # profiles which saves memory and preparation time. To do this use e.g. `preparation_profile: my_other_profile` where\n+  # `my_other_profile` is the name of another profile for which an LM profile exists.\n+  # Important: This only will give correct routing results if the weights calculated for the profile are equal or\n+  # larger (for every edge) than those calculated for the profile that was used for the preparation (`my_other_profile`)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMDg2NA=="}, "originalCommit": {"oid": "c646f75d2a02c754b4ce983ab64daaf852797b72"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1MTk4Mw==", "bodyText": "I opened #1987 for the docs, lets do it after #1859 and #1776 are merged?", "url": "https://github.com/graphhopper/graphhopper/pull/1983#discussion_r408351983", "createdAt": "2020-04-14T18:36:14Z", "author": {"login": "easbar"}, "path": "config-example.yml", "diffHunk": "@@ -62,7 +62,11 @@ graphhopper:\n \n   # Hybrid mode:\n   # Similar to speed mode, the hybrid mode (Landmarks, LM) also speeds up routing by doing calculating auxiliary data\n-  # in advance. Its not as fast as speed mode, but more flexible.\n+  # in advance. Its not as fast as speed mode, but more flexible. It is possible to use the same preparation for multiple\n+  # profiles which saves memory and preparation time. To do this use e.g. `preparation_profile: my_other_profile` where\n+  # `my_other_profile` is the name of another profile for which an LM profile exists.\n+  # Important: This only will give correct routing results if the weights calculated for the profile are equal or\n+  # larger (for every edge) than those calculated for the profile that was used for the preparation (`my_other_profile`)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMDg2NA=="}, "originalCommit": {"oid": "c646f75d2a02c754b4ce983ab64daaf852797b72"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM3Nzc3NA==", "bodyText": "Yes!", "url": "https://github.com/graphhopper/graphhopper/pull/1983#discussion_r408377774", "createdAt": "2020-04-14T19:20:50Z", "author": {"login": "karussell"}, "path": "config-example.yml", "diffHunk": "@@ -62,7 +62,11 @@ graphhopper:\n \n   # Hybrid mode:\n   # Similar to speed mode, the hybrid mode (Landmarks, LM) also speeds up routing by doing calculating auxiliary data\n-  # in advance. Its not as fast as speed mode, but more flexible.\n+  # in advance. Its not as fast as speed mode, but more flexible. It is possible to use the same preparation for multiple\n+  # profiles which saves memory and preparation time. To do this use e.g. `preparation_profile: my_other_profile` where\n+  # `my_other_profile` is the name of another profile for which an LM profile exists.\n+  # Important: This only will give correct routing results if the weights calculated for the profile are equal or\n+  # larger (for every edge) than those calculated for the profile that was used for the preparation (`my_other_profile`)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMDg2NA=="}, "originalCommit": {"oid": "c646f75d2a02c754b4ce983ab64daaf852797b72"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDUyMTAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxODowMDozMFrOGEvRmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoyODozMFrOGFW9Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMjA0Mg==", "bodyText": "What about always using getPreparationProfile here that uses the method usesOtherPreparation internally?", "url": "https://github.com/graphhopper/graphhopper/pull/1983#discussion_r407622042", "createdAt": "2020-04-13T18:00:30Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -861,7 +872,15 @@ public RoutingAlgorithmFactory getAlgorithmFactory(String profile, boolean disab\n         if (chPreparationHandler.isEnabled() && !disableCH) {\n             return chPreparationHandler.getAlgorithmFactory(profile);\n         } else if (lmPreparationHandler.isEnabled() && !disableLM) {\n-            return lmPreparationHandler.getAlgorithmFactory(profile);\n+            for (LMProfileConfig lmp : lmPreparationHandler.getLMProfileConfigs()) {\n+                if (lmp.getProfile().equals(profile)) {\n+                    return lmp.usesOtherPreparation()\n+                            // cross-querying\n+                            ? lmPreparationHandler.getAlgorithmFactory(lmp.getPreparationProfile())\n+                            : lmPreparationHandler.getAlgorithmFactory(lmp.getProfile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c646f75d2a02c754b4ce983ab64daaf852797b72"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyNjU3NA==", "bodyText": "I thought about this also for a moment, but then I did not want to put too much logic into the getter, as it is also used by Jackson for deserialization, but I will have a second look.", "url": "https://github.com/graphhopper/graphhopper/pull/1983#discussion_r407626574", "createdAt": "2020-04-13T18:08:55Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -861,7 +872,15 @@ public RoutingAlgorithmFactory getAlgorithmFactory(String profile, boolean disab\n         if (chPreparationHandler.isEnabled() && !disableCH) {\n             return chPreparationHandler.getAlgorithmFactory(profile);\n         } else if (lmPreparationHandler.isEnabled() && !disableLM) {\n-            return lmPreparationHandler.getAlgorithmFactory(profile);\n+            for (LMProfileConfig lmp : lmPreparationHandler.getLMProfileConfigs()) {\n+                if (lmp.getProfile().equals(profile)) {\n+                    return lmp.usesOtherPreparation()\n+                            // cross-querying\n+                            ? lmPreparationHandler.getAlgorithmFactory(lmp.getPreparationProfile())\n+                            : lmPreparationHandler.getAlgorithmFactory(lmp.getProfile());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMjA0Mg=="}, "originalCommit": {"oid": "c646f75d2a02c754b4ce983ab64daaf852797b72"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzY2MzM0Ng==", "bodyText": "Ah, sure, I did not thought about this. Then we should indeed avoid this or rename the method (resolveProfile?)", "url": "https://github.com/graphhopper/graphhopper/pull/1983#discussion_r407663346", "createdAt": "2020-04-13T19:16:19Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -861,7 +872,15 @@ public RoutingAlgorithmFactory getAlgorithmFactory(String profile, boolean disab\n         if (chPreparationHandler.isEnabled() && !disableCH) {\n             return chPreparationHandler.getAlgorithmFactory(profile);\n         } else if (lmPreparationHandler.isEnabled() && !disableLM) {\n-            return lmPreparationHandler.getAlgorithmFactory(profile);\n+            for (LMProfileConfig lmp : lmPreparationHandler.getLMProfileConfigs()) {\n+                if (lmp.getProfile().equals(profile)) {\n+                    return lmp.usesOtherPreparation()\n+                            // cross-querying\n+                            ? lmPreparationHandler.getAlgorithmFactory(lmp.getPreparationProfile())\n+                            : lmPreparationHandler.getAlgorithmFactory(lmp.getProfile());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMjA0Mg=="}, "originalCommit": {"oid": "c646f75d2a02c754b4ce983ab64daaf852797b72"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2MTg3NA==", "bodyText": "Hm, its only used once this way so I would keep it as is. resolveProfile is too similar to what we call 'resolving the profile' in ProfileResolver imo.", "url": "https://github.com/graphhopper/graphhopper/pull/1983#discussion_r407961874", "createdAt": "2020-04-14T08:36:10Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -861,7 +872,15 @@ public RoutingAlgorithmFactory getAlgorithmFactory(String profile, boolean disab\n         if (chPreparationHandler.isEnabled() && !disableCH) {\n             return chPreparationHandler.getAlgorithmFactory(profile);\n         } else if (lmPreparationHandler.isEnabled() && !disableLM) {\n-            return lmPreparationHandler.getAlgorithmFactory(profile);\n+            for (LMProfileConfig lmp : lmPreparationHandler.getLMProfileConfigs()) {\n+                if (lmp.getProfile().equals(profile)) {\n+                    return lmp.usesOtherPreparation()\n+                            // cross-querying\n+                            ? lmPreparationHandler.getAlgorithmFactory(lmp.getPreparationProfile())\n+                            : lmPreparationHandler.getAlgorithmFactory(lmp.getProfile());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMjA0Mg=="}, "originalCommit": {"oid": "c646f75d2a02c754b4ce983ab64daaf852797b72"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3MjE2Mw==", "bodyText": "Ah, ok. Sure.", "url": "https://github.com/graphhopper/graphhopper/pull/1983#discussion_r408272163", "createdAt": "2020-04-14T16:28:30Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -861,7 +872,15 @@ public RoutingAlgorithmFactory getAlgorithmFactory(String profile, boolean disab\n         if (chPreparationHandler.isEnabled() && !disableCH) {\n             return chPreparationHandler.getAlgorithmFactory(profile);\n         } else if (lmPreparationHandler.isEnabled() && !disableLM) {\n-            return lmPreparationHandler.getAlgorithmFactory(profile);\n+            for (LMProfileConfig lmp : lmPreparationHandler.getLMProfileConfigs()) {\n+                if (lmp.getProfile().equals(profile)) {\n+                    return lmp.usesOtherPreparation()\n+                            // cross-querying\n+                            ? lmPreparationHandler.getAlgorithmFactory(lmp.getPreparationProfile())\n+                            : lmPreparationHandler.getAlgorithmFactory(lmp.getProfile());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMjA0Mg=="}, "originalCommit": {"oid": "c646f75d2a02c754b4ce983ab64daaf852797b72"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDUzMDYxOnYy", "diffSide": "RIGHT", "path": "web-api/src/main/java/com/graphhopper/jackson/LMProfileConfigMixIn.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxODowMzoyNFrOGEvXqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjoyOTowMlrOGFW-qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMzU5NQ==", "bodyText": "The first one is likely still required as snake might do maximum_l_m_weight ... but not tested this.", "url": "https://github.com/graphhopper/graphhopper/pull/1983#discussion_r407623595", "createdAt": "2020-04-13T18:03:24Z", "author": {"login": "karussell"}, "path": "web-api/src/main/java/com/graphhopper/jackson/LMProfileConfigMixIn.java", "diffHunk": "@@ -21,6 +21,10 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n public interface LMProfileConfigMixIn {\n+    // todonow: maybe both of these are no longer needed because of snake case module?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c646f75d2a02c754b4ce983ab64daaf852797b72"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk2NjIzOQ==", "bodyText": "Exactly, without the rule here Jackson apparently expects maximum_lmweight, so the second uppercase letter does not introduce a second underscore, but also the third uppercase letter (W in Weight) does not add an underscore.", "url": "https://github.com/graphhopper/graphhopper/pull/1983#discussion_r407966239", "createdAt": "2020-04-14T08:42:54Z", "author": {"login": "easbar"}, "path": "web-api/src/main/java/com/graphhopper/jackson/LMProfileConfigMixIn.java", "diffHunk": "@@ -21,6 +21,10 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n public interface LMProfileConfigMixIn {\n+    // todonow: maybe both of these are no longer needed because of snake case module?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMzU5NQ=="}, "originalCommit": {"oid": "c646f75d2a02c754b4ce983ab64daaf852797b72"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI3MjU1NA==", "bodyText": "Aha, thanks!", "url": "https://github.com/graphhopper/graphhopper/pull/1983#discussion_r408272554", "createdAt": "2020-04-14T16:29:02Z", "author": {"login": "karussell"}, "path": "web-api/src/main/java/com/graphhopper/jackson/LMProfileConfigMixIn.java", "diffHunk": "@@ -21,6 +21,10 @@\n import com.fasterxml.jackson.annotation.JsonProperty;\n \n public interface LMProfileConfigMixIn {\n+    // todonow: maybe both of these are no longer needed because of snake case module?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzYyMzU5NQ=="}, "originalCommit": {"oid": "c646f75d2a02c754b4ce983ab64daaf852797b72"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4779, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}