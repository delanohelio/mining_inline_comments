{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMzg2MzU0", "number": 1850, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMDo1NTo0M1rODXHnhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTozNTowNVrODYHJrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTY4NjQ0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/AlternativeRouteCH.java", "isResolved": true, "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMDo1NTo0M1rOFcQxqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMTozNjoyMFrOFcRshw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE3OTMwNg==", "bodyText": "@michaz ? Do we want the BaseGraph, the QueryGraph (of the CHGraph) or the CHGraph ?", "url": "https://github.com/graphhopper/graphhopper/pull/1850#discussion_r365179306", "createdAt": "2020-01-10T10:55:43Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/AlternativeRouteCH.java", "diffHunk": "@@ -76,22 +76,21 @@ public boolean apply(final int v, final SPTEntry fromSPTEntry) {\n                 // s -> v and v -> t need not be shortest paths. In fact, they can sometimes be pretty strange.\n                 // We still use this preliminary path to filter for shared path length with other alternatives,\n                 // so we don't have to work so much.\n-                Path preliminaryRoute = createPathExtractor(graph, weighting).extract(fromSPTEntry, toSPTEntry, fromSPTEntry.getWeightOfVisitedPath() + toSPTEntry.getWeightOfVisitedPath());\n+                Path preliminaryRoute = createPathExtractor(graph).extract(fromSPTEntry, toSPTEntry, fromSPTEntry.getWeightOfVisitedPath() + toSPTEntry.getWeightOfVisitedPath());\n                 double preliminaryShare = calculateShare(preliminaryRoute);\n                 if (preliminaryShare > maxShareFactor) {\n                     return true;\n                 }\n \n                 // Okay, now we want the s -> v -> t shortest via-path, so we route s -> v and v -> t\n                 // and glue them together.\n-                DijkstraBidirectionCHNoSOD svRouter = new DijkstraBidirectionCHNoSOD(graph, weighting);\n-                svRouter.setEdgeFilter(additionalEdgeFilter);\n+                DijkstraBidirectionCHNoSOD svRouter = new DijkstraBidirectionCHNoSOD(graph);\n                 final Path svPath = svRouter.calcPath(s, v);\n                 final IntIndexedContainer svNodes = svPath.calcNodes();\n-                DijkstraBidirectionCHNoSOD vtRouter = new DijkstraBidirectionCHNoSOD(graph, weighting);\n-                vtRouter.setEdgeFilter(additionalEdgeFilter);\n+                DijkstraBidirectionCHNoSOD vtRouter = new DijkstraBidirectionCHNoSOD(graph);\n                 final Path vtPath = vtRouter.calcPath(v, t);\n                 final IntIndexedContainer vtNodes = vtPath.calcNodes();\n+                // todonow: which graph do we want here ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cef7ad8087f0c871a554627f98c7d2b3095a014"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE4MzExMA==", "bodyText": "Well, the Path will be a path through the .. well, the graph. :-) Doesn't use shortcuts, but does use the query-graph nodes.\nSo technically, the QueryGraph of the BaseGraph. But the QueryGraph of the CHGraph works as well, I think, since it's a superset.", "url": "https://github.com/graphhopper/graphhopper/pull/1850#discussion_r365183110", "createdAt": "2020-01-10T11:05:11Z", "author": {"login": "michaz"}, "path": "core/src/main/java/com/graphhopper/routing/AlternativeRouteCH.java", "diffHunk": "@@ -76,22 +76,21 @@ public boolean apply(final int v, final SPTEntry fromSPTEntry) {\n                 // s -> v and v -> t need not be shortest paths. In fact, they can sometimes be pretty strange.\n                 // We still use this preliminary path to filter for shared path length with other alternatives,\n                 // so we don't have to work so much.\n-                Path preliminaryRoute = createPathExtractor(graph, weighting).extract(fromSPTEntry, toSPTEntry, fromSPTEntry.getWeightOfVisitedPath() + toSPTEntry.getWeightOfVisitedPath());\n+                Path preliminaryRoute = createPathExtractor(graph).extract(fromSPTEntry, toSPTEntry, fromSPTEntry.getWeightOfVisitedPath() + toSPTEntry.getWeightOfVisitedPath());\n                 double preliminaryShare = calculateShare(preliminaryRoute);\n                 if (preliminaryShare > maxShareFactor) {\n                     return true;\n                 }\n \n                 // Okay, now we want the s -> v -> t shortest via-path, so we route s -> v and v -> t\n                 // and glue them together.\n-                DijkstraBidirectionCHNoSOD svRouter = new DijkstraBidirectionCHNoSOD(graph, weighting);\n-                svRouter.setEdgeFilter(additionalEdgeFilter);\n+                DijkstraBidirectionCHNoSOD svRouter = new DijkstraBidirectionCHNoSOD(graph);\n                 final Path svPath = svRouter.calcPath(s, v);\n                 final IntIndexedContainer svNodes = svPath.calcNodes();\n-                DijkstraBidirectionCHNoSOD vtRouter = new DijkstraBidirectionCHNoSOD(graph, weighting);\n-                vtRouter.setEdgeFilter(additionalEdgeFilter);\n+                DijkstraBidirectionCHNoSOD vtRouter = new DijkstraBidirectionCHNoSOD(graph);\n                 final Path vtPath = vtRouter.calcPath(v, t);\n                 final IntIndexedContainer vtNodes = vtPath.calcNodes();\n+                // todonow: which graph do we want here ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE3OTMwNg=="}, "originalCommit": {"oid": "0cef7ad8087f0c871a554627f98c7d2b3095a014"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE4MzUxMA==", "bodyText": "So you need virtual nodes + edges but you do not want shortcuts ?", "url": "https://github.com/graphhopper/graphhopper/pull/1850#discussion_r365183510", "createdAt": "2020-01-10T11:06:16Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/AlternativeRouteCH.java", "diffHunk": "@@ -76,22 +76,21 @@ public boolean apply(final int v, final SPTEntry fromSPTEntry) {\n                 // s -> v and v -> t need not be shortest paths. In fact, they can sometimes be pretty strange.\n                 // We still use this preliminary path to filter for shared path length with other alternatives,\n                 // so we don't have to work so much.\n-                Path preliminaryRoute = createPathExtractor(graph, weighting).extract(fromSPTEntry, toSPTEntry, fromSPTEntry.getWeightOfVisitedPath() + toSPTEntry.getWeightOfVisitedPath());\n+                Path preliminaryRoute = createPathExtractor(graph).extract(fromSPTEntry, toSPTEntry, fromSPTEntry.getWeightOfVisitedPath() + toSPTEntry.getWeightOfVisitedPath());\n                 double preliminaryShare = calculateShare(preliminaryRoute);\n                 if (preliminaryShare > maxShareFactor) {\n                     return true;\n                 }\n \n                 // Okay, now we want the s -> v -> t shortest via-path, so we route s -> v and v -> t\n                 // and glue them together.\n-                DijkstraBidirectionCHNoSOD svRouter = new DijkstraBidirectionCHNoSOD(graph, weighting);\n-                svRouter.setEdgeFilter(additionalEdgeFilter);\n+                DijkstraBidirectionCHNoSOD svRouter = new DijkstraBidirectionCHNoSOD(graph);\n                 final Path svPath = svRouter.calcPath(s, v);\n                 final IntIndexedContainer svNodes = svPath.calcNodes();\n-                DijkstraBidirectionCHNoSOD vtRouter = new DijkstraBidirectionCHNoSOD(graph, weighting);\n-                vtRouter.setEdgeFilter(additionalEdgeFilter);\n+                DijkstraBidirectionCHNoSOD vtRouter = new DijkstraBidirectionCHNoSOD(graph);\n                 final Path vtPath = vtRouter.calcPath(v, t);\n                 final IntIndexedContainer vtNodes = vtPath.calcNodes();\n+                // todonow: which graph do we want here ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE3OTMwNg=="}, "originalCommit": {"oid": "0cef7ad8087f0c871a554627f98c7d2b3095a014"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE4NDkyMQ==", "bodyText": "Correct, but I think I don't mind if there are shortcuts, I just don't use them.\nThe graph at this point is just used because the constructor of Path wants it, and that Path will not have shortcuts. Because I concatenate it from two \"expanded\" Paths from the CH-router.", "url": "https://github.com/graphhopper/graphhopper/pull/1850#discussion_r365184921", "createdAt": "2020-01-10T11:10:21Z", "author": {"login": "michaz"}, "path": "core/src/main/java/com/graphhopper/routing/AlternativeRouteCH.java", "diffHunk": "@@ -76,22 +76,21 @@ public boolean apply(final int v, final SPTEntry fromSPTEntry) {\n                 // s -> v and v -> t need not be shortest paths. In fact, they can sometimes be pretty strange.\n                 // We still use this preliminary path to filter for shared path length with other alternatives,\n                 // so we don't have to work so much.\n-                Path preliminaryRoute = createPathExtractor(graph, weighting).extract(fromSPTEntry, toSPTEntry, fromSPTEntry.getWeightOfVisitedPath() + toSPTEntry.getWeightOfVisitedPath());\n+                Path preliminaryRoute = createPathExtractor(graph).extract(fromSPTEntry, toSPTEntry, fromSPTEntry.getWeightOfVisitedPath() + toSPTEntry.getWeightOfVisitedPath());\n                 double preliminaryShare = calculateShare(preliminaryRoute);\n                 if (preliminaryShare > maxShareFactor) {\n                     return true;\n                 }\n \n                 // Okay, now we want the s -> v -> t shortest via-path, so we route s -> v and v -> t\n                 // and glue them together.\n-                DijkstraBidirectionCHNoSOD svRouter = new DijkstraBidirectionCHNoSOD(graph, weighting);\n-                svRouter.setEdgeFilter(additionalEdgeFilter);\n+                DijkstraBidirectionCHNoSOD svRouter = new DijkstraBidirectionCHNoSOD(graph);\n                 final Path svPath = svRouter.calcPath(s, v);\n                 final IntIndexedContainer svNodes = svPath.calcNodes();\n-                DijkstraBidirectionCHNoSOD vtRouter = new DijkstraBidirectionCHNoSOD(graph, weighting);\n-                vtRouter.setEdgeFilter(additionalEdgeFilter);\n+                DijkstraBidirectionCHNoSOD vtRouter = new DijkstraBidirectionCHNoSOD(graph);\n                 final Path vtPath = vtRouter.calcPath(v, t);\n                 final IntIndexedContainer vtNodes = vtPath.calcNodes();\n+                // todonow: which graph do we want here ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE3OTMwNg=="}, "originalCommit": {"oid": "0cef7ad8087f0c871a554627f98c7d2b3095a014"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE4NjI0Mw==", "bodyText": "If (as you say) a CHGraph is ultimately something different than a Graph, then this class must conceptually probably get the CHGraph and the Graph, because it calls sub-routers (with the CHGraph), but it also wants to reason about the (pure) Graph.", "url": "https://github.com/graphhopper/graphhopper/pull/1850#discussion_r365186243", "createdAt": "2020-01-10T11:13:53Z", "author": {"login": "michaz"}, "path": "core/src/main/java/com/graphhopper/routing/AlternativeRouteCH.java", "diffHunk": "@@ -76,22 +76,21 @@ public boolean apply(final int v, final SPTEntry fromSPTEntry) {\n                 // s -> v and v -> t need not be shortest paths. In fact, they can sometimes be pretty strange.\n                 // We still use this preliminary path to filter for shared path length with other alternatives,\n                 // so we don't have to work so much.\n-                Path preliminaryRoute = createPathExtractor(graph, weighting).extract(fromSPTEntry, toSPTEntry, fromSPTEntry.getWeightOfVisitedPath() + toSPTEntry.getWeightOfVisitedPath());\n+                Path preliminaryRoute = createPathExtractor(graph).extract(fromSPTEntry, toSPTEntry, fromSPTEntry.getWeightOfVisitedPath() + toSPTEntry.getWeightOfVisitedPath());\n                 double preliminaryShare = calculateShare(preliminaryRoute);\n                 if (preliminaryShare > maxShareFactor) {\n                     return true;\n                 }\n \n                 // Okay, now we want the s -> v -> t shortest via-path, so we route s -> v and v -> t\n                 // and glue them together.\n-                DijkstraBidirectionCHNoSOD svRouter = new DijkstraBidirectionCHNoSOD(graph, weighting);\n-                svRouter.setEdgeFilter(additionalEdgeFilter);\n+                DijkstraBidirectionCHNoSOD svRouter = new DijkstraBidirectionCHNoSOD(graph);\n                 final Path svPath = svRouter.calcPath(s, v);\n                 final IntIndexedContainer svNodes = svPath.calcNodes();\n-                DijkstraBidirectionCHNoSOD vtRouter = new DijkstraBidirectionCHNoSOD(graph, weighting);\n-                vtRouter.setEdgeFilter(additionalEdgeFilter);\n+                DijkstraBidirectionCHNoSOD vtRouter = new DijkstraBidirectionCHNoSOD(graph);\n                 final Path vtPath = vtRouter.calcPath(v, t);\n                 final IntIndexedContainer vtNodes = vtPath.calcNodes();\n+                // todonow: which graph do we want here ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE3OTMwNg=="}, "originalCommit": {"oid": "0cef7ad8087f0c871a554627f98c7d2b3095a014"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE4NzIyNw==", "bodyText": "It looks like the overriden .extract() method does not use the graph at all ? Do you really have to use the Path this way ? Can we not just get a list of edgeiteratorstates + total distance or something ?", "url": "https://github.com/graphhopper/graphhopper/pull/1850#discussion_r365187227", "createdAt": "2020-01-10T11:16:47Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/AlternativeRouteCH.java", "diffHunk": "@@ -76,22 +76,21 @@ public boolean apply(final int v, final SPTEntry fromSPTEntry) {\n                 // s -> v and v -> t need not be shortest paths. In fact, they can sometimes be pretty strange.\n                 // We still use this preliminary path to filter for shared path length with other alternatives,\n                 // so we don't have to work so much.\n-                Path preliminaryRoute = createPathExtractor(graph, weighting).extract(fromSPTEntry, toSPTEntry, fromSPTEntry.getWeightOfVisitedPath() + toSPTEntry.getWeightOfVisitedPath());\n+                Path preliminaryRoute = createPathExtractor(graph).extract(fromSPTEntry, toSPTEntry, fromSPTEntry.getWeightOfVisitedPath() + toSPTEntry.getWeightOfVisitedPath());\n                 double preliminaryShare = calculateShare(preliminaryRoute);\n                 if (preliminaryShare > maxShareFactor) {\n                     return true;\n                 }\n \n                 // Okay, now we want the s -> v -> t shortest via-path, so we route s -> v and v -> t\n                 // and glue them together.\n-                DijkstraBidirectionCHNoSOD svRouter = new DijkstraBidirectionCHNoSOD(graph, weighting);\n-                svRouter.setEdgeFilter(additionalEdgeFilter);\n+                DijkstraBidirectionCHNoSOD svRouter = new DijkstraBidirectionCHNoSOD(graph);\n                 final Path svPath = svRouter.calcPath(s, v);\n                 final IntIndexedContainer svNodes = svPath.calcNodes();\n-                DijkstraBidirectionCHNoSOD vtRouter = new DijkstraBidirectionCHNoSOD(graph, weighting);\n-                vtRouter.setEdgeFilter(additionalEdgeFilter);\n+                DijkstraBidirectionCHNoSOD vtRouter = new DijkstraBidirectionCHNoSOD(graph);\n                 final Path vtPath = vtRouter.calcPath(v, t);\n                 final IntIndexedContainer vtNodes = vtPath.calcNodes();\n+                // todonow: which graph do we want here ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE3OTMwNg=="}, "originalCommit": {"oid": "0cef7ad8087f0c871a554627f98c7d2b3095a014"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE4NzYwMA==", "bodyText": "Ah never mind the path is passed to another method that calls calcEdges (which uses the graph) ...", "url": "https://github.com/graphhopper/graphhopper/pull/1850#discussion_r365187600", "createdAt": "2020-01-10T11:17:57Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/AlternativeRouteCH.java", "diffHunk": "@@ -76,22 +76,21 @@ public boolean apply(final int v, final SPTEntry fromSPTEntry) {\n                 // s -> v and v -> t need not be shortest paths. In fact, they can sometimes be pretty strange.\n                 // We still use this preliminary path to filter for shared path length with other alternatives,\n                 // so we don't have to work so much.\n-                Path preliminaryRoute = createPathExtractor(graph, weighting).extract(fromSPTEntry, toSPTEntry, fromSPTEntry.getWeightOfVisitedPath() + toSPTEntry.getWeightOfVisitedPath());\n+                Path preliminaryRoute = createPathExtractor(graph).extract(fromSPTEntry, toSPTEntry, fromSPTEntry.getWeightOfVisitedPath() + toSPTEntry.getWeightOfVisitedPath());\n                 double preliminaryShare = calculateShare(preliminaryRoute);\n                 if (preliminaryShare > maxShareFactor) {\n                     return true;\n                 }\n \n                 // Okay, now we want the s -> v -> t shortest via-path, so we route s -> v and v -> t\n                 // and glue them together.\n-                DijkstraBidirectionCHNoSOD svRouter = new DijkstraBidirectionCHNoSOD(graph, weighting);\n-                svRouter.setEdgeFilter(additionalEdgeFilter);\n+                DijkstraBidirectionCHNoSOD svRouter = new DijkstraBidirectionCHNoSOD(graph);\n                 final Path svPath = svRouter.calcPath(s, v);\n                 final IntIndexedContainer svNodes = svPath.calcNodes();\n-                DijkstraBidirectionCHNoSOD vtRouter = new DijkstraBidirectionCHNoSOD(graph, weighting);\n-                vtRouter.setEdgeFilter(additionalEdgeFilter);\n+                DijkstraBidirectionCHNoSOD vtRouter = new DijkstraBidirectionCHNoSOD(graph);\n                 final Path vtPath = vtRouter.calcPath(v, t);\n                 final IntIndexedContainer vtNodes = vtPath.calcNodes();\n+                // todonow: which graph do we want here ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE3OTMwNg=="}, "originalCommit": {"oid": "0cef7ad8087f0c871a554627f98c7d2b3095a014"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE4ODE1MA==", "bodyText": "Yeah, the overridden extract is just a relic from something that was there before. If I don't need the Graph at all here, throw it out, no problem.\nBut I do want a Path. A Path through a Graph is something we should have as an element, without having to chop it up into bits. And we should be able to write operations like Concat over it.", "url": "https://github.com/graphhopper/graphhopper/pull/1850#discussion_r365188150", "createdAt": "2020-01-10T11:19:28Z", "author": {"login": "michaz"}, "path": "core/src/main/java/com/graphhopper/routing/AlternativeRouteCH.java", "diffHunk": "@@ -76,22 +76,21 @@ public boolean apply(final int v, final SPTEntry fromSPTEntry) {\n                 // s -> v and v -> t need not be shortest paths. In fact, they can sometimes be pretty strange.\n                 // We still use this preliminary path to filter for shared path length with other alternatives,\n                 // so we don't have to work so much.\n-                Path preliminaryRoute = createPathExtractor(graph, weighting).extract(fromSPTEntry, toSPTEntry, fromSPTEntry.getWeightOfVisitedPath() + toSPTEntry.getWeightOfVisitedPath());\n+                Path preliminaryRoute = createPathExtractor(graph).extract(fromSPTEntry, toSPTEntry, fromSPTEntry.getWeightOfVisitedPath() + toSPTEntry.getWeightOfVisitedPath());\n                 double preliminaryShare = calculateShare(preliminaryRoute);\n                 if (preliminaryShare > maxShareFactor) {\n                     return true;\n                 }\n \n                 // Okay, now we want the s -> v -> t shortest via-path, so we route s -> v and v -> t\n                 // and glue them together.\n-                DijkstraBidirectionCHNoSOD svRouter = new DijkstraBidirectionCHNoSOD(graph, weighting);\n-                svRouter.setEdgeFilter(additionalEdgeFilter);\n+                DijkstraBidirectionCHNoSOD svRouter = new DijkstraBidirectionCHNoSOD(graph);\n                 final Path svPath = svRouter.calcPath(s, v);\n                 final IntIndexedContainer svNodes = svPath.calcNodes();\n-                DijkstraBidirectionCHNoSOD vtRouter = new DijkstraBidirectionCHNoSOD(graph, weighting);\n-                vtRouter.setEdgeFilter(additionalEdgeFilter);\n+                DijkstraBidirectionCHNoSOD vtRouter = new DijkstraBidirectionCHNoSOD(graph);\n                 final Path vtPath = vtRouter.calcPath(v, t);\n                 final IntIndexedContainer vtNodes = vtPath.calcNodes();\n+                // todonow: which graph do we want here ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE3OTMwNg=="}, "originalCommit": {"oid": "0cef7ad8087f0c871a554627f98c7d2b3095a014"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE5MzIyOA==", "bodyText": "Ok I changed to graph.getGraph().getBaseGraph() (sigh). This will be the query graph of the base graph, but we need to get rid of this construct.\n\nA Path through a Graph is something we should have as an element, without having to chop it up into bits\n\n? Can you explain what you mean here ? Where is the path chopped up into bits ?", "url": "https://github.com/graphhopper/graphhopper/pull/1850#discussion_r365193228", "createdAt": "2020-01-10T11:33:13Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/AlternativeRouteCH.java", "diffHunk": "@@ -76,22 +76,21 @@ public boolean apply(final int v, final SPTEntry fromSPTEntry) {\n                 // s -> v and v -> t need not be shortest paths. In fact, they can sometimes be pretty strange.\n                 // We still use this preliminary path to filter for shared path length with other alternatives,\n                 // so we don't have to work so much.\n-                Path preliminaryRoute = createPathExtractor(graph, weighting).extract(fromSPTEntry, toSPTEntry, fromSPTEntry.getWeightOfVisitedPath() + toSPTEntry.getWeightOfVisitedPath());\n+                Path preliminaryRoute = createPathExtractor(graph).extract(fromSPTEntry, toSPTEntry, fromSPTEntry.getWeightOfVisitedPath() + toSPTEntry.getWeightOfVisitedPath());\n                 double preliminaryShare = calculateShare(preliminaryRoute);\n                 if (preliminaryShare > maxShareFactor) {\n                     return true;\n                 }\n \n                 // Okay, now we want the s -> v -> t shortest via-path, so we route s -> v and v -> t\n                 // and glue them together.\n-                DijkstraBidirectionCHNoSOD svRouter = new DijkstraBidirectionCHNoSOD(graph, weighting);\n-                svRouter.setEdgeFilter(additionalEdgeFilter);\n+                DijkstraBidirectionCHNoSOD svRouter = new DijkstraBidirectionCHNoSOD(graph);\n                 final Path svPath = svRouter.calcPath(s, v);\n                 final IntIndexedContainer svNodes = svPath.calcNodes();\n-                DijkstraBidirectionCHNoSOD vtRouter = new DijkstraBidirectionCHNoSOD(graph, weighting);\n-                vtRouter.setEdgeFilter(additionalEdgeFilter);\n+                DijkstraBidirectionCHNoSOD vtRouter = new DijkstraBidirectionCHNoSOD(graph);\n                 final Path vtPath = vtRouter.calcPath(v, t);\n                 final IntIndexedContainer vtNodes = vtPath.calcNodes();\n+                // todonow: which graph do we want here ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE3OTMwNg=="}, "originalCommit": {"oid": "0cef7ad8087f0c871a554627f98c7d2b3095a014"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE5NDM3NQ==", "bodyText": "There should also be some tests for alternative route CH, maybe checking that all returned paths start and end in the right places and the weight is less than twice as big as the best one or something like this ?", "url": "https://github.com/graphhopper/graphhopper/pull/1850#discussion_r365194375", "createdAt": "2020-01-10T11:36:20Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/AlternativeRouteCH.java", "diffHunk": "@@ -76,22 +76,21 @@ public boolean apply(final int v, final SPTEntry fromSPTEntry) {\n                 // s -> v and v -> t need not be shortest paths. In fact, they can sometimes be pretty strange.\n                 // We still use this preliminary path to filter for shared path length with other alternatives,\n                 // so we don't have to work so much.\n-                Path preliminaryRoute = createPathExtractor(graph, weighting).extract(fromSPTEntry, toSPTEntry, fromSPTEntry.getWeightOfVisitedPath() + toSPTEntry.getWeightOfVisitedPath());\n+                Path preliminaryRoute = createPathExtractor(graph).extract(fromSPTEntry, toSPTEntry, fromSPTEntry.getWeightOfVisitedPath() + toSPTEntry.getWeightOfVisitedPath());\n                 double preliminaryShare = calculateShare(preliminaryRoute);\n                 if (preliminaryShare > maxShareFactor) {\n                     return true;\n                 }\n \n                 // Okay, now we want the s -> v -> t shortest via-path, so we route s -> v and v -> t\n                 // and glue them together.\n-                DijkstraBidirectionCHNoSOD svRouter = new DijkstraBidirectionCHNoSOD(graph, weighting);\n-                svRouter.setEdgeFilter(additionalEdgeFilter);\n+                DijkstraBidirectionCHNoSOD svRouter = new DijkstraBidirectionCHNoSOD(graph);\n                 final Path svPath = svRouter.calcPath(s, v);\n                 final IntIndexedContainer svNodes = svPath.calcNodes();\n-                DijkstraBidirectionCHNoSOD vtRouter = new DijkstraBidirectionCHNoSOD(graph, weighting);\n-                vtRouter.setEdgeFilter(additionalEdgeFilter);\n+                DijkstraBidirectionCHNoSOD vtRouter = new DijkstraBidirectionCHNoSOD(graph);\n                 final Path vtPath = vtRouter.calcPath(v, t);\n                 final IntIndexedContainer vtNodes = vtPath.calcNodes();\n+                // todonow: which graph do we want here ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE3OTMwNg=="}, "originalCommit": {"oid": "0cef7ad8087f0c871a554627f98c7d2b3095a014"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTY5MjM4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMDo1Nzo1OFrOFcQ1WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMDo1Nzo1OFrOFcQ1WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE4MDI0OA==", "bodyText": "I already removed the in/outEdgeExplorer for #1835 here. I left a few todos where we can simply move the access flags into the weighting for #1835.", "url": "https://github.com/graphhopper/graphhopper/pull/1850#discussion_r365180248", "createdAt": "2020-01-10T10:57:58Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java", "diffHunk": "@@ -56,8 +57,9 @@ public AbstractRoutingAlgorithm(Graph graph, Weighting weighting, TraversalMode\n         this.traversalMode = traversalMode;\n         this.graph = graph;\n         this.nodeAccess = graph.getNodeAccess();\n-        outEdgeExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.outEdges(flagEncoder));\n-        inEdgeExplorer = graph.createEdgeExplorer(DefaultEdgeFilter.inEdges(flagEncoder));\n+        inEdgeFilter = DefaultEdgeFilter.inEdges(flagEncoder.getAccessEnc());\n+        outEdgeFilter = DefaultEdgeFilter.outEdges(flagEncoder.getAccessEnc());\n+        edgeExplorer = graph.createEdgeExplorer();\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cef7ad8087f0c871a554627f98c7d2b3095a014"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTY5NjExOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/Dijkstra.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMDo1OTowMVrOFcQ3Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQxMDo1OTowMVrOFcQ3Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE4MDc2Ng==", "bodyText": "In #1835 we can remove outEdgeFilter here and strictly rely on the returned weight from Weighting", "url": "https://github.com/graphhopper/graphhopper/pull/1850#discussion_r365180766", "createdAt": "2020-01-10T10:59:01Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/Dijkstra.java", "diffHunk": "@@ -68,19 +67,19 @@ public Path calcPath(int from, int to) {\n     }\n \n     protected void runAlgo() {\n-        EdgeExplorer explorer = outEdgeExplorer;\n         while (true) {\n             visitedNodes++;\n             if (isMaxVisitedNodesExceeded() || finished())\n                 break;\n \n             int currNode = currEdge.adjNode;\n-            EdgeIterator iter = explorer.setBaseNode(currNode);\n+            EdgeIterator iter = edgeExplorer.setBaseNode(currNode);\n             while (iter.next()) {\n                 if (!accept(iter, currEdge.edge))\n                     continue;\n \n-                double tmpWeight = weighting.calcWeight(iter, false, currEdge.edge) + currEdge.weight;\n+                // todo: for #1776/#1835 move the access check into weighting\n+                double tmpWeight = !outEdgeFilter.accept(iter) ? Double.POSITIVE_INFINITY : weighting.calcWeight(iter, false, currEdge.edge) + currEdge.weight;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cef7ad8087f0c871a554627f98c7d2b3095a014"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NjA3MTExOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/AbstractBidirCHAlgo.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOToyNjo0N1rOFdx2xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMDo0MjoxOVrOFeVI2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2OTg2Mw==", "bodyText": "Here the calcWeight operation is done although it could happen that the backward search has no entry and the weight is not used. Might be related to (not very likely):\n\nSo far the query speed seems to decrease by about 10%, I could not find out why exactly this is,\n\nBTW: does this slowdown occur for edge- and node-based queries?", "url": "https://github.com/graphhopper/graphhopper/pull/1850#discussion_r366769863", "createdAt": "2020-01-15T09:26:47Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/AbstractBidirCHAlgo.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.routing;\n+\n+import com.carrotsearch.hppc.IntObjectMap;\n+import com.graphhopper.routing.ch.NodeBasedCHBidirPathExtractor;\n+import com.graphhopper.routing.util.TraversalMode;\n+import com.graphhopper.storage.*;\n+\n+import java.util.PriorityQueue;\n+\n+import static com.graphhopper.util.EdgeIterator.ANY_EDGE;\n+import static com.graphhopper.util.EdgeIterator.NO_EDGE;\n+\n+/**\n+ * Common subclass for bidirectional CH algorithms.\n+ * <p>\n+ *\n+ * @author Peter Karich\n+ * @author easbar\n+ * @see AbstractNonCHBidirAlgo for non-CH bidirectional algorithms\n+ */\n+public abstract class AbstractBidirCHAlgo extends AbstractBidirAlgo implements BidirRoutingAlgorithm {\n+    protected final RoutingCHGraph graph;\n+    protected RoutingCHEdgeExplorer allEdgeExplorer;\n+    protected RoutingCHEdgeExplorer inEdgeExplorer;\n+    protected RoutingCHEdgeExplorer outEdgeExplorer;\n+    protected CHEdgeFilter levelEdgeFilter;\n+\n+    public AbstractBidirCHAlgo(RoutingCHGraph graph, TraversalMode tMode) {\n+        super(tMode);\n+        this.graph = graph;\n+        this.nodeAccess = graph.getGraph().getNodeAccess();\n+        allEdgeExplorer = graph.createAllEdgeExplorer();\n+        outEdgeExplorer = graph.createOutEdgeExplorer();\n+        inEdgeExplorer = graph.createInEdgeExplorer();\n+        levelEdgeFilter = new CHLevelEdgeFilter(graph);\n+        int size = Math.min(Math.max(200, graph.getNodes() / 10), 150_000);\n+        initCollections(size);\n+    }\n+\n+    @Override\n+    protected void initCollections(int size) {\n+        super.initCollections(Math.min(size, 2000));\n+    }\n+\n+    /**\n+     * Creates a new entry of the shortest path tree (a {@link SPTEntry} or one of its subclasses) during a dijkstra\n+     * expansion.\n+     *\n+     * @param edge    the edge that is currently processed for the expansion\n+     * @param incEdge the id of the edge that is incoming to the node the edge is pointed at. usually this is the same as\n+     *                edge.getEdge(), but for edge-based CH and in case edge is a shortcut incEdge is the original edge\n+     *                that is incoming to the node\n+     * @param weight  the weight the shortest path three entry should carry\n+     * @param parent  the parent entry of in the shortest path tree\n+     * @param reverse true if we are currently looking at the backward search, false otherwise\n+     */\n+    protected abstract SPTEntry createEntry(RoutingCHEdgeIteratorState edge, int incEdge, double weight, SPTEntry parent, boolean reverse);\n+\n+    protected BidirPathExtractor createPathExtractor(RoutingCHGraph graph) {\n+        return new NodeBasedCHBidirPathExtractor(graph);\n+    }\n+\n+    @Override\n+    protected void postInitFrom() {\n+        if (fromOutEdge == ANY_EDGE) {\n+            fillEdgesFromUsingFilter(levelEdgeFilter);\n+        } else {\n+            // need to use a local reference here, because additionalEdgeFilter is modified when calling fillEdgesFromUsingFilter\n+            final CHEdgeFilter tmpFilter = levelEdgeFilter;\n+            fillEdgesFromUsingFilter(new CHEdgeFilter() {\n+                @Override\n+                public boolean accept(RoutingCHEdgeIteratorState edgeState) {\n+                    return (tmpFilter == null || tmpFilter.accept(edgeState)) && edgeState.getOrigEdgeFirst() == fromOutEdge;\n+                }\n+            });\n+        }\n+    }\n+\n+    @Override\n+    protected void postInitTo() {\n+        if (toInEdge == ANY_EDGE) {\n+            fillEdgesToUsingFilter(levelEdgeFilter);\n+        } else {\n+            final CHEdgeFilter tmpFilter = levelEdgeFilter;\n+            fillEdgesToUsingFilter(new CHEdgeFilter() {\n+                @Override\n+                public boolean accept(RoutingCHEdgeIteratorState edgeState) {\n+                    return (tmpFilter == null || tmpFilter.accept(edgeState)) && edgeState.getOrigEdgeLast() == toInEdge;\n+                }\n+            });\n+        }\n+    }\n+\n+    /**\n+     * @param edgeFilter edge filter used to fill edges. the {@link #levelEdgeFilter} reference will be set to\n+     *                   edgeFilter by this method, so make sure edgeFilter does not use it directly.\n+     */\n+    protected void fillEdgesFromUsingFilter(CHEdgeFilter edgeFilter) {\n+        // we temporarily ignore the additionalEdgeFilter\n+        CHEdgeFilter tmpFilter = levelEdgeFilter;\n+        levelEdgeFilter = edgeFilter;\n+        finishedFrom = !fillEdgesFrom();\n+        levelEdgeFilter = tmpFilter;\n+    }\n+\n+    /**\n+     * @see #fillEdgesFromUsingFilter(CHEdgeFilter)\n+     */\n+    protected void fillEdgesToUsingFilter(CHEdgeFilter edgeFilter) {\n+        // we temporarily ignore the additionalEdgeFilter\n+        CHEdgeFilter tmpFilter = levelEdgeFilter;\n+        levelEdgeFilter = edgeFilter;\n+        finishedTo = !fillEdgesTo();\n+        levelEdgeFilter = tmpFilter;\n+    }\n+\n+    @Override\n+    public boolean finished() {\n+        // we need to finish BOTH searches for CH!\n+        if (finishedFrom && finishedTo)\n+            return true;\n+\n+        // changed also the final finish condition for CH\n+        return currFrom.weight >= bestWeight && currTo.weight >= bestWeight;\n+    }\n+\n+    @Override\n+    boolean fillEdgesFrom() {\n+        if (pqOpenSetFrom.isEmpty()) {\n+            return false;\n+        }\n+        currFrom = pqOpenSetFrom.poll();\n+        visitedCountFrom++;\n+        if (fromEntryCanBeSkipped()) {\n+            return true;\n+        }\n+        if (fwdSearchCanBeStopped()) {\n+            return false;\n+        }\n+        bestWeightMapOther = bestWeightMapTo;\n+        fillEdges(currFrom, pqOpenSetFrom, bestWeightMapFrom, outEdgeExplorer, false);\n+        return true;\n+    }\n+\n+    @Override\n+    boolean fillEdgesTo() {\n+        if (pqOpenSetTo.isEmpty()) {\n+            return false;\n+        }\n+        currTo = pqOpenSetTo.poll();\n+        visitedCountTo++;\n+        if (toEntryCanBeSkipped()) {\n+            return true;\n+        }\n+        if (bwdSearchCanBeStopped()) {\n+            return false;\n+        }\n+        bestWeightMapOther = bestWeightMapFrom;\n+        fillEdges(currTo, pqOpenSetTo, bestWeightMapTo, inEdgeExplorer, true);\n+        return true;\n+    }\n+\n+    private void fillEdges(SPTEntry currEdge, PriorityQueue<SPTEntry> prioQueue,\n+                           IntObjectMap<SPTEntry> bestWeightMap, RoutingCHEdgeExplorer explorer, boolean reverse) {\n+        RoutingCHEdgeIterator iter = explorer.setBaseNode(currEdge.adjNode);\n+        while (iter.next()) {\n+            if (!accept(iter, currEdge, reverse))\n+                continue;\n+\n+            final double weight = calcWeight(iter, currEdge, reverse);\n+            if (Double.isInfinite(weight)) {\n+                continue;\n+            }\n+            final int origEdgeId = getOrigEdgeId(iter, reverse);\n+            final int traversalId = getTraversalId(iter, origEdgeId, reverse);\n+            SPTEntry entry = bestWeightMap.get(traversalId);\n+            if (entry == null) {\n+                entry = createEntry(iter, origEdgeId, weight, currEdge, reverse);\n+                bestWeightMap.put(traversalId, entry);\n+                prioQueue.add(entry);\n+            } else if (entry.getWeightOfVisitedPath() > weight) {\n+                prioQueue.remove(entry);\n+                updateEntry(entry, iter, origEdgeId, weight, currEdge, reverse);\n+                prioQueue.add(entry);\n+            } else\n+                continue;\n+\n+            if (updateBestPath) {\n+                // only needed for edge-based -> skip the calculation and use dummy value otherwise\n+                double edgeWeight = traversalMode.isEdgeBased() ? calcWeight(iter, reverse, NO_EDGE) : Double.POSITIVE_INFINITY;\n+                updateBestPath(edgeWeight, entry, origEdgeId, traversalId, reverse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d52495a81a317738251d41dadc824405ab8845fe"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjgyMTY1OQ==", "bodyText": "oh good point, its even worse: edge-based CH overrides the updateBestPath method and does not need edgeWeight in any case. will try if this makes the difference but I would guess so.\n\nBTW: does this slowdown occur for edge- and node-based queries?\n\nI think it is more pronounced for edge-based, but even after running many measurements I was not entirely sure", "url": "https://github.com/graphhopper/graphhopper/pull/1850#discussion_r366821659", "createdAt": "2020-01-15T11:15:53Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/AbstractBidirCHAlgo.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.routing;\n+\n+import com.carrotsearch.hppc.IntObjectMap;\n+import com.graphhopper.routing.ch.NodeBasedCHBidirPathExtractor;\n+import com.graphhopper.routing.util.TraversalMode;\n+import com.graphhopper.storage.*;\n+\n+import java.util.PriorityQueue;\n+\n+import static com.graphhopper.util.EdgeIterator.ANY_EDGE;\n+import static com.graphhopper.util.EdgeIterator.NO_EDGE;\n+\n+/**\n+ * Common subclass for bidirectional CH algorithms.\n+ * <p>\n+ *\n+ * @author Peter Karich\n+ * @author easbar\n+ * @see AbstractNonCHBidirAlgo for non-CH bidirectional algorithms\n+ */\n+public abstract class AbstractBidirCHAlgo extends AbstractBidirAlgo implements BidirRoutingAlgorithm {\n+    protected final RoutingCHGraph graph;\n+    protected RoutingCHEdgeExplorer allEdgeExplorer;\n+    protected RoutingCHEdgeExplorer inEdgeExplorer;\n+    protected RoutingCHEdgeExplorer outEdgeExplorer;\n+    protected CHEdgeFilter levelEdgeFilter;\n+\n+    public AbstractBidirCHAlgo(RoutingCHGraph graph, TraversalMode tMode) {\n+        super(tMode);\n+        this.graph = graph;\n+        this.nodeAccess = graph.getGraph().getNodeAccess();\n+        allEdgeExplorer = graph.createAllEdgeExplorer();\n+        outEdgeExplorer = graph.createOutEdgeExplorer();\n+        inEdgeExplorer = graph.createInEdgeExplorer();\n+        levelEdgeFilter = new CHLevelEdgeFilter(graph);\n+        int size = Math.min(Math.max(200, graph.getNodes() / 10), 150_000);\n+        initCollections(size);\n+    }\n+\n+    @Override\n+    protected void initCollections(int size) {\n+        super.initCollections(Math.min(size, 2000));\n+    }\n+\n+    /**\n+     * Creates a new entry of the shortest path tree (a {@link SPTEntry} or one of its subclasses) during a dijkstra\n+     * expansion.\n+     *\n+     * @param edge    the edge that is currently processed for the expansion\n+     * @param incEdge the id of the edge that is incoming to the node the edge is pointed at. usually this is the same as\n+     *                edge.getEdge(), but for edge-based CH and in case edge is a shortcut incEdge is the original edge\n+     *                that is incoming to the node\n+     * @param weight  the weight the shortest path three entry should carry\n+     * @param parent  the parent entry of in the shortest path tree\n+     * @param reverse true if we are currently looking at the backward search, false otherwise\n+     */\n+    protected abstract SPTEntry createEntry(RoutingCHEdgeIteratorState edge, int incEdge, double weight, SPTEntry parent, boolean reverse);\n+\n+    protected BidirPathExtractor createPathExtractor(RoutingCHGraph graph) {\n+        return new NodeBasedCHBidirPathExtractor(graph);\n+    }\n+\n+    @Override\n+    protected void postInitFrom() {\n+        if (fromOutEdge == ANY_EDGE) {\n+            fillEdgesFromUsingFilter(levelEdgeFilter);\n+        } else {\n+            // need to use a local reference here, because additionalEdgeFilter is modified when calling fillEdgesFromUsingFilter\n+            final CHEdgeFilter tmpFilter = levelEdgeFilter;\n+            fillEdgesFromUsingFilter(new CHEdgeFilter() {\n+                @Override\n+                public boolean accept(RoutingCHEdgeIteratorState edgeState) {\n+                    return (tmpFilter == null || tmpFilter.accept(edgeState)) && edgeState.getOrigEdgeFirst() == fromOutEdge;\n+                }\n+            });\n+        }\n+    }\n+\n+    @Override\n+    protected void postInitTo() {\n+        if (toInEdge == ANY_EDGE) {\n+            fillEdgesToUsingFilter(levelEdgeFilter);\n+        } else {\n+            final CHEdgeFilter tmpFilter = levelEdgeFilter;\n+            fillEdgesToUsingFilter(new CHEdgeFilter() {\n+                @Override\n+                public boolean accept(RoutingCHEdgeIteratorState edgeState) {\n+                    return (tmpFilter == null || tmpFilter.accept(edgeState)) && edgeState.getOrigEdgeLast() == toInEdge;\n+                }\n+            });\n+        }\n+    }\n+\n+    /**\n+     * @param edgeFilter edge filter used to fill edges. the {@link #levelEdgeFilter} reference will be set to\n+     *                   edgeFilter by this method, so make sure edgeFilter does not use it directly.\n+     */\n+    protected void fillEdgesFromUsingFilter(CHEdgeFilter edgeFilter) {\n+        // we temporarily ignore the additionalEdgeFilter\n+        CHEdgeFilter tmpFilter = levelEdgeFilter;\n+        levelEdgeFilter = edgeFilter;\n+        finishedFrom = !fillEdgesFrom();\n+        levelEdgeFilter = tmpFilter;\n+    }\n+\n+    /**\n+     * @see #fillEdgesFromUsingFilter(CHEdgeFilter)\n+     */\n+    protected void fillEdgesToUsingFilter(CHEdgeFilter edgeFilter) {\n+        // we temporarily ignore the additionalEdgeFilter\n+        CHEdgeFilter tmpFilter = levelEdgeFilter;\n+        levelEdgeFilter = edgeFilter;\n+        finishedTo = !fillEdgesTo();\n+        levelEdgeFilter = tmpFilter;\n+    }\n+\n+    @Override\n+    public boolean finished() {\n+        // we need to finish BOTH searches for CH!\n+        if (finishedFrom && finishedTo)\n+            return true;\n+\n+        // changed also the final finish condition for CH\n+        return currFrom.weight >= bestWeight && currTo.weight >= bestWeight;\n+    }\n+\n+    @Override\n+    boolean fillEdgesFrom() {\n+        if (pqOpenSetFrom.isEmpty()) {\n+            return false;\n+        }\n+        currFrom = pqOpenSetFrom.poll();\n+        visitedCountFrom++;\n+        if (fromEntryCanBeSkipped()) {\n+            return true;\n+        }\n+        if (fwdSearchCanBeStopped()) {\n+            return false;\n+        }\n+        bestWeightMapOther = bestWeightMapTo;\n+        fillEdges(currFrom, pqOpenSetFrom, bestWeightMapFrom, outEdgeExplorer, false);\n+        return true;\n+    }\n+\n+    @Override\n+    boolean fillEdgesTo() {\n+        if (pqOpenSetTo.isEmpty()) {\n+            return false;\n+        }\n+        currTo = pqOpenSetTo.poll();\n+        visitedCountTo++;\n+        if (toEntryCanBeSkipped()) {\n+            return true;\n+        }\n+        if (bwdSearchCanBeStopped()) {\n+            return false;\n+        }\n+        bestWeightMapOther = bestWeightMapFrom;\n+        fillEdges(currTo, pqOpenSetTo, bestWeightMapTo, inEdgeExplorer, true);\n+        return true;\n+    }\n+\n+    private void fillEdges(SPTEntry currEdge, PriorityQueue<SPTEntry> prioQueue,\n+                           IntObjectMap<SPTEntry> bestWeightMap, RoutingCHEdgeExplorer explorer, boolean reverse) {\n+        RoutingCHEdgeIterator iter = explorer.setBaseNode(currEdge.adjNode);\n+        while (iter.next()) {\n+            if (!accept(iter, currEdge, reverse))\n+                continue;\n+\n+            final double weight = calcWeight(iter, currEdge, reverse);\n+            if (Double.isInfinite(weight)) {\n+                continue;\n+            }\n+            final int origEdgeId = getOrigEdgeId(iter, reverse);\n+            final int traversalId = getTraversalId(iter, origEdgeId, reverse);\n+            SPTEntry entry = bestWeightMap.get(traversalId);\n+            if (entry == null) {\n+                entry = createEntry(iter, origEdgeId, weight, currEdge, reverse);\n+                bestWeightMap.put(traversalId, entry);\n+                prioQueue.add(entry);\n+            } else if (entry.getWeightOfVisitedPath() > weight) {\n+                prioQueue.remove(entry);\n+                updateEntry(entry, iter, origEdgeId, weight, currEdge, reverse);\n+                prioQueue.add(entry);\n+            } else\n+                continue;\n+\n+            if (updateBestPath) {\n+                // only needed for edge-based -> skip the calculation and use dummy value otherwise\n+                double edgeWeight = traversalMode.isEdgeBased() ? calcWeight(iter, reverse, NO_EDGE) : Double.POSITIVE_INFINITY;\n+                updateBestPath(edgeWeight, entry, origEdgeId, traversalId, reverse);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2OTg2Mw=="}, "originalCommit": {"oid": "d52495a81a317738251d41dadc824405ab8845fe"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzM0NzkyOA==", "bodyText": "No, unfortunately this did not fix it. My next best guess is that RoutingCHGraph#getEdgeIteratorState creates two (vs. one) objects, which is relevant for path unpacking. So this could be fixed with #1847", "url": "https://github.com/graphhopper/graphhopper/pull/1850#discussion_r367347928", "createdAt": "2020-01-16T10:42:19Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/AbstractBidirCHAlgo.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.routing;\n+\n+import com.carrotsearch.hppc.IntObjectMap;\n+import com.graphhopper.routing.ch.NodeBasedCHBidirPathExtractor;\n+import com.graphhopper.routing.util.TraversalMode;\n+import com.graphhopper.storage.*;\n+\n+import java.util.PriorityQueue;\n+\n+import static com.graphhopper.util.EdgeIterator.ANY_EDGE;\n+import static com.graphhopper.util.EdgeIterator.NO_EDGE;\n+\n+/**\n+ * Common subclass for bidirectional CH algorithms.\n+ * <p>\n+ *\n+ * @author Peter Karich\n+ * @author easbar\n+ * @see AbstractNonCHBidirAlgo for non-CH bidirectional algorithms\n+ */\n+public abstract class AbstractBidirCHAlgo extends AbstractBidirAlgo implements BidirRoutingAlgorithm {\n+    protected final RoutingCHGraph graph;\n+    protected RoutingCHEdgeExplorer allEdgeExplorer;\n+    protected RoutingCHEdgeExplorer inEdgeExplorer;\n+    protected RoutingCHEdgeExplorer outEdgeExplorer;\n+    protected CHEdgeFilter levelEdgeFilter;\n+\n+    public AbstractBidirCHAlgo(RoutingCHGraph graph, TraversalMode tMode) {\n+        super(tMode);\n+        this.graph = graph;\n+        this.nodeAccess = graph.getGraph().getNodeAccess();\n+        allEdgeExplorer = graph.createAllEdgeExplorer();\n+        outEdgeExplorer = graph.createOutEdgeExplorer();\n+        inEdgeExplorer = graph.createInEdgeExplorer();\n+        levelEdgeFilter = new CHLevelEdgeFilter(graph);\n+        int size = Math.min(Math.max(200, graph.getNodes() / 10), 150_000);\n+        initCollections(size);\n+    }\n+\n+    @Override\n+    protected void initCollections(int size) {\n+        super.initCollections(Math.min(size, 2000));\n+    }\n+\n+    /**\n+     * Creates a new entry of the shortest path tree (a {@link SPTEntry} or one of its subclasses) during a dijkstra\n+     * expansion.\n+     *\n+     * @param edge    the edge that is currently processed for the expansion\n+     * @param incEdge the id of the edge that is incoming to the node the edge is pointed at. usually this is the same as\n+     *                edge.getEdge(), but for edge-based CH and in case edge is a shortcut incEdge is the original edge\n+     *                that is incoming to the node\n+     * @param weight  the weight the shortest path three entry should carry\n+     * @param parent  the parent entry of in the shortest path tree\n+     * @param reverse true if we are currently looking at the backward search, false otherwise\n+     */\n+    protected abstract SPTEntry createEntry(RoutingCHEdgeIteratorState edge, int incEdge, double weight, SPTEntry parent, boolean reverse);\n+\n+    protected BidirPathExtractor createPathExtractor(RoutingCHGraph graph) {\n+        return new NodeBasedCHBidirPathExtractor(graph);\n+    }\n+\n+    @Override\n+    protected void postInitFrom() {\n+        if (fromOutEdge == ANY_EDGE) {\n+            fillEdgesFromUsingFilter(levelEdgeFilter);\n+        } else {\n+            // need to use a local reference here, because additionalEdgeFilter is modified when calling fillEdgesFromUsingFilter\n+            final CHEdgeFilter tmpFilter = levelEdgeFilter;\n+            fillEdgesFromUsingFilter(new CHEdgeFilter() {\n+                @Override\n+                public boolean accept(RoutingCHEdgeIteratorState edgeState) {\n+                    return (tmpFilter == null || tmpFilter.accept(edgeState)) && edgeState.getOrigEdgeFirst() == fromOutEdge;\n+                }\n+            });\n+        }\n+    }\n+\n+    @Override\n+    protected void postInitTo() {\n+        if (toInEdge == ANY_EDGE) {\n+            fillEdgesToUsingFilter(levelEdgeFilter);\n+        } else {\n+            final CHEdgeFilter tmpFilter = levelEdgeFilter;\n+            fillEdgesToUsingFilter(new CHEdgeFilter() {\n+                @Override\n+                public boolean accept(RoutingCHEdgeIteratorState edgeState) {\n+                    return (tmpFilter == null || tmpFilter.accept(edgeState)) && edgeState.getOrigEdgeLast() == toInEdge;\n+                }\n+            });\n+        }\n+    }\n+\n+    /**\n+     * @param edgeFilter edge filter used to fill edges. the {@link #levelEdgeFilter} reference will be set to\n+     *                   edgeFilter by this method, so make sure edgeFilter does not use it directly.\n+     */\n+    protected void fillEdgesFromUsingFilter(CHEdgeFilter edgeFilter) {\n+        // we temporarily ignore the additionalEdgeFilter\n+        CHEdgeFilter tmpFilter = levelEdgeFilter;\n+        levelEdgeFilter = edgeFilter;\n+        finishedFrom = !fillEdgesFrom();\n+        levelEdgeFilter = tmpFilter;\n+    }\n+\n+    /**\n+     * @see #fillEdgesFromUsingFilter(CHEdgeFilter)\n+     */\n+    protected void fillEdgesToUsingFilter(CHEdgeFilter edgeFilter) {\n+        // we temporarily ignore the additionalEdgeFilter\n+        CHEdgeFilter tmpFilter = levelEdgeFilter;\n+        levelEdgeFilter = edgeFilter;\n+        finishedTo = !fillEdgesTo();\n+        levelEdgeFilter = tmpFilter;\n+    }\n+\n+    @Override\n+    public boolean finished() {\n+        // we need to finish BOTH searches for CH!\n+        if (finishedFrom && finishedTo)\n+            return true;\n+\n+        // changed also the final finish condition for CH\n+        return currFrom.weight >= bestWeight && currTo.weight >= bestWeight;\n+    }\n+\n+    @Override\n+    boolean fillEdgesFrom() {\n+        if (pqOpenSetFrom.isEmpty()) {\n+            return false;\n+        }\n+        currFrom = pqOpenSetFrom.poll();\n+        visitedCountFrom++;\n+        if (fromEntryCanBeSkipped()) {\n+            return true;\n+        }\n+        if (fwdSearchCanBeStopped()) {\n+            return false;\n+        }\n+        bestWeightMapOther = bestWeightMapTo;\n+        fillEdges(currFrom, pqOpenSetFrom, bestWeightMapFrom, outEdgeExplorer, false);\n+        return true;\n+    }\n+\n+    @Override\n+    boolean fillEdgesTo() {\n+        if (pqOpenSetTo.isEmpty()) {\n+            return false;\n+        }\n+        currTo = pqOpenSetTo.poll();\n+        visitedCountTo++;\n+        if (toEntryCanBeSkipped()) {\n+            return true;\n+        }\n+        if (bwdSearchCanBeStopped()) {\n+            return false;\n+        }\n+        bestWeightMapOther = bestWeightMapFrom;\n+        fillEdges(currTo, pqOpenSetTo, bestWeightMapTo, inEdgeExplorer, true);\n+        return true;\n+    }\n+\n+    private void fillEdges(SPTEntry currEdge, PriorityQueue<SPTEntry> prioQueue,\n+                           IntObjectMap<SPTEntry> bestWeightMap, RoutingCHEdgeExplorer explorer, boolean reverse) {\n+        RoutingCHEdgeIterator iter = explorer.setBaseNode(currEdge.adjNode);\n+        while (iter.next()) {\n+            if (!accept(iter, currEdge, reverse))\n+                continue;\n+\n+            final double weight = calcWeight(iter, currEdge, reverse);\n+            if (Double.isInfinite(weight)) {\n+                continue;\n+            }\n+            final int origEdgeId = getOrigEdgeId(iter, reverse);\n+            final int traversalId = getTraversalId(iter, origEdgeId, reverse);\n+            SPTEntry entry = bestWeightMap.get(traversalId);\n+            if (entry == null) {\n+                entry = createEntry(iter, origEdgeId, weight, currEdge, reverse);\n+                bestWeightMap.put(traversalId, entry);\n+                prioQueue.add(entry);\n+            } else if (entry.getWeightOfVisitedPath() > weight) {\n+                prioQueue.remove(entry);\n+                updateEntry(entry, iter, origEdgeId, weight, currEdge, reverse);\n+                prioQueue.add(entry);\n+            } else\n+                continue;\n+\n+            if (updateBestPath) {\n+                // only needed for edge-based -> skip the calculation and use dummy value otherwise\n+                double edgeWeight = traversalMode.isEdgeBased() ? calcWeight(iter, reverse, NO_EDGE) : Double.POSITIVE_INFINITY;\n+                updateBestPath(edgeWeight, entry, origEdgeId, traversalId, reverse);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc2OTg2Mw=="}, "originalCommit": {"oid": "d52495a81a317738251d41dadc824405ab8845fe"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NjA3Njc4OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/AStar.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOToyODozOFrOFdx6Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOToyODozOFrOFdx6Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3MDc1MA==", "bodyText": "For clarity it should be better:\n!outEdgeFilter.accept(iter) ? Double.POSITIVE_INFINITY : (weighting.calcWeight(iter, false, currEdge.edge) + currEdge.weightOfVisitedPath);", "url": "https://github.com/graphhopper/graphhopper/pull/1850#discussion_r366770750", "createdAt": "2020-01-15T09:28:38Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/AStar.java", "diffHunk": "@@ -83,19 +86,19 @@ public Path calcPath(int from, int to) {\n \n     private void runAlgo() {\n         double currWeightToGoal, estimationFullWeight;\n-        EdgeExplorer explorer = outEdgeExplorer;\n         while (true) {\n             visitedNodes++;\n             if (isMaxVisitedNodesExceeded() || finished())\n                 break;\n \n             int currNode = currEdge.adjNode;\n-            EdgeIterator iter = explorer.setBaseNode(currNode);\n+            EdgeIterator iter = edgeExplorer.setBaseNode(currNode);\n             while (iter.next()) {\n                 if (!accept(iter, currEdge.edge))\n                     continue;\n \n-                double tmpWeight = weighting.calcWeight(iter, false, currEdge.edge) + currEdge.weightOfVisitedPath;\n+                // todo: for #1776/#1835 move the access check into weighting\n+                double tmpWeight = !outEdgeFilter.accept(iter) ? Double.POSITIVE_INFINITY : weighting.calcWeight(iter, false, currEdge.edge) + currEdge.weightOfVisitedPath;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d52495a81a317738251d41dadc824405ab8845fe"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NjA5NTgyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/AbstractNonCHBidirAlgo.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTozNTowNVrOFdyF-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxMzo1NTo1MVrOFeaHOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3Mzc1NQ==", "bodyText": "What are the use cases for the EdgeFilter for non-CH algos? (For CH there is the CHLevelEdgeFilter, but here?)\nIs it just regarding the vehicle edge and we can remove this code with #1835 ?", "url": "https://github.com/graphhopper/graphhopper/pull/1850#discussion_r366773755", "createdAt": "2020-01-15T09:35:05Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/AbstractNonCHBidirAlgo.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.routing;\n+\n+import com.carrotsearch.hppc.IntObjectMap;\n+import com.graphhopper.routing.util.DefaultEdgeFilter;\n+import com.graphhopper.routing.util.EdgeFilter;\n+import com.graphhopper.routing.util.FlagEncoder;\n+import com.graphhopper.routing.util.TraversalMode;\n+import com.graphhopper.routing.weighting.Weighting;\n+import com.graphhopper.storage.Graph;\n+import com.graphhopper.storage.SPTEntry;\n+import com.graphhopper.util.EdgeExplorer;\n+import com.graphhopper.util.EdgeIterator;\n+import com.graphhopper.util.EdgeIteratorState;\n+\n+import java.util.PriorityQueue;\n+\n+import static com.graphhopper.util.EdgeIterator.ANY_EDGE;\n+\n+/**\n+ * Common subclass for bidirectional algorithms.\n+ *\n+ * @author Peter Karich\n+ * @author easbar\n+ * @see AbstractBidirCHAlgo for bidirectional CH algorithms\n+ */\n+public abstract class AbstractNonCHBidirAlgo extends AbstractBidirAlgo implements BidirRoutingAlgorithm {\n+    protected final Graph graph;\n+    protected final Weighting weighting;\n+    protected final FlagEncoder flagEncoder;\n+    protected EdgeExplorer edgeExplorer;\n+    protected EdgeFilter inEdgeFilter;\n+    protected EdgeFilter outEdgeFilter;\n+    protected EdgeFilter additionalEdgeFilter;\n+\n+    public AbstractNonCHBidirAlgo(Graph graph, Weighting weighting, TraversalMode tMode) {\n+        super(tMode);\n+        this.weighting = weighting;\n+        this.flagEncoder = weighting.getFlagEncoder();\n+        this.graph = graph;\n+        this.nodeAccess = graph.getNodeAccess();\n+        edgeExplorer = graph.createEdgeExplorer();\n+        outEdgeFilter = DefaultEdgeFilter.outEdges(flagEncoder.getAccessEnc());\n+        inEdgeFilter = DefaultEdgeFilter.inEdges(flagEncoder.getAccessEnc());\n+        int size = Math.min(Math.max(200, graph.getNodes() / 10), 150_000);\n+        initCollections(size);\n+    }\n+\n+    /**\n+     * Creates a new entry of the shortest path tree (a {@link SPTEntry} or one of its subclasses) during a dijkstra\n+     * expansion.\n+     *\n+     * @param edge    the edge that is currently processed for the expansion\n+     * @param incEdge the id of the edge that is incoming to the node the edge is pointed at. usually this is the same as\n+     *                edge.getEdge(), but for edge-based CH and in case edge is a shortcut incEdge is the original edge\n+     *                that is incoming to the node\n+     * @param weight  the weight the shortest path three entry should carry\n+     * @param parent  the parent entry of in the shortest path tree\n+     * @param reverse true if we are currently looking at the backward search, false otherwise\n+     */\n+    protected abstract SPTEntry createEntry(EdgeIteratorState edge, int incEdge, double weight, SPTEntry parent, boolean reverse);\n+\n+    protected BidirPathExtractor createPathExtractor(Graph graph, Weighting weighting) {\n+        return new BidirPathExtractor(graph, weighting);\n+    }\n+\n+    protected void postInitFrom() {\n+        if (fromOutEdge == ANY_EDGE) {\n+            fillEdgesFromUsingFilter(additionalEdgeFilter);\n+        } else {\n+            // need to use a local reference here, because additionalEdgeFilter is modified when calling fillEdgesFromUsingFilter\n+            final EdgeFilter tmpFilter = additionalEdgeFilter;\n+            fillEdgesFromUsingFilter(new EdgeFilter() {\n+                @Override\n+                public boolean accept(EdgeIteratorState edgeState) {\n+                    return (tmpFilter == null || tmpFilter.accept(edgeState)) && edgeState.getOrigEdgeFirst() == fromOutEdge;\n+                }\n+            });\n+        }\n+    }\n+\n+    protected void postInitTo() {\n+        if (toInEdge == ANY_EDGE) {\n+            fillEdgesToUsingFilter(additionalEdgeFilter);\n+        } else {\n+            final EdgeFilter tmpFilter = additionalEdgeFilter;\n+            fillEdgesToUsingFilter(new EdgeFilter() {\n+                @Override\n+                public boolean accept(EdgeIteratorState edgeState) {\n+                    return (tmpFilter == null || tmpFilter.accept(edgeState)) && edgeState.getOrigEdgeLast() == toInEdge;\n+                }\n+            });\n+        }\n+    }\n+\n+    /**\n+     * @param edgeFilter edge filter used to fill edges. the {@link #additionalEdgeFilter} reference will be set to\n+     *                   edgeFilter by this method, so make sure edgeFilter does not use it directly.\n+     */\n+    protected void fillEdgesFromUsingFilter(EdgeFilter edgeFilter) {\n+        // we temporarily ignore the additionalEdgeFilter\n+        EdgeFilter tmpFilter = additionalEdgeFilter;\n+        additionalEdgeFilter = edgeFilter;\n+        finishedFrom = !fillEdgesFrom();\n+        additionalEdgeFilter = tmpFilter;\n+    }\n+\n+    /**\n+     * @see #fillEdgesFromUsingFilter(EdgeFilter)\n+     */\n+    protected void fillEdgesToUsingFilter(EdgeFilter edgeFilter) {\n+        // we temporarily ignore the additionalEdgeFilter\n+        EdgeFilter tmpFilter = additionalEdgeFilter;\n+        additionalEdgeFilter = edgeFilter;\n+        finishedTo = !fillEdgesTo();\n+        additionalEdgeFilter = tmpFilter;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d52495a81a317738251d41dadc824405ab8845fe"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjkxMDg1Ng==", "bodyText": "In most cases one can achieve the same effect as using additionalEdgeFilter by returning infinite weight for the corresponding edges in Weighting (or at least this it what it should be like with #1835). The only thing that comes to my mind is the initial routing step for routing with start/target edges where we use the filter to select the start/target edge. But yes we might be able to get rid of the filter entirely for #1835.", "url": "https://github.com/graphhopper/graphhopper/pull/1850#discussion_r366910856", "createdAt": "2020-01-15T14:39:42Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/AbstractNonCHBidirAlgo.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.routing;\n+\n+import com.carrotsearch.hppc.IntObjectMap;\n+import com.graphhopper.routing.util.DefaultEdgeFilter;\n+import com.graphhopper.routing.util.EdgeFilter;\n+import com.graphhopper.routing.util.FlagEncoder;\n+import com.graphhopper.routing.util.TraversalMode;\n+import com.graphhopper.routing.weighting.Weighting;\n+import com.graphhopper.storage.Graph;\n+import com.graphhopper.storage.SPTEntry;\n+import com.graphhopper.util.EdgeExplorer;\n+import com.graphhopper.util.EdgeIterator;\n+import com.graphhopper.util.EdgeIteratorState;\n+\n+import java.util.PriorityQueue;\n+\n+import static com.graphhopper.util.EdgeIterator.ANY_EDGE;\n+\n+/**\n+ * Common subclass for bidirectional algorithms.\n+ *\n+ * @author Peter Karich\n+ * @author easbar\n+ * @see AbstractBidirCHAlgo for bidirectional CH algorithms\n+ */\n+public abstract class AbstractNonCHBidirAlgo extends AbstractBidirAlgo implements BidirRoutingAlgorithm {\n+    protected final Graph graph;\n+    protected final Weighting weighting;\n+    protected final FlagEncoder flagEncoder;\n+    protected EdgeExplorer edgeExplorer;\n+    protected EdgeFilter inEdgeFilter;\n+    protected EdgeFilter outEdgeFilter;\n+    protected EdgeFilter additionalEdgeFilter;\n+\n+    public AbstractNonCHBidirAlgo(Graph graph, Weighting weighting, TraversalMode tMode) {\n+        super(tMode);\n+        this.weighting = weighting;\n+        this.flagEncoder = weighting.getFlagEncoder();\n+        this.graph = graph;\n+        this.nodeAccess = graph.getNodeAccess();\n+        edgeExplorer = graph.createEdgeExplorer();\n+        outEdgeFilter = DefaultEdgeFilter.outEdges(flagEncoder.getAccessEnc());\n+        inEdgeFilter = DefaultEdgeFilter.inEdges(flagEncoder.getAccessEnc());\n+        int size = Math.min(Math.max(200, graph.getNodes() / 10), 150_000);\n+        initCollections(size);\n+    }\n+\n+    /**\n+     * Creates a new entry of the shortest path tree (a {@link SPTEntry} or one of its subclasses) during a dijkstra\n+     * expansion.\n+     *\n+     * @param edge    the edge that is currently processed for the expansion\n+     * @param incEdge the id of the edge that is incoming to the node the edge is pointed at. usually this is the same as\n+     *                edge.getEdge(), but for edge-based CH and in case edge is a shortcut incEdge is the original edge\n+     *                that is incoming to the node\n+     * @param weight  the weight the shortest path three entry should carry\n+     * @param parent  the parent entry of in the shortest path tree\n+     * @param reverse true if we are currently looking at the backward search, false otherwise\n+     */\n+    protected abstract SPTEntry createEntry(EdgeIteratorState edge, int incEdge, double weight, SPTEntry parent, boolean reverse);\n+\n+    protected BidirPathExtractor createPathExtractor(Graph graph, Weighting weighting) {\n+        return new BidirPathExtractor(graph, weighting);\n+    }\n+\n+    protected void postInitFrom() {\n+        if (fromOutEdge == ANY_EDGE) {\n+            fillEdgesFromUsingFilter(additionalEdgeFilter);\n+        } else {\n+            // need to use a local reference here, because additionalEdgeFilter is modified when calling fillEdgesFromUsingFilter\n+            final EdgeFilter tmpFilter = additionalEdgeFilter;\n+            fillEdgesFromUsingFilter(new EdgeFilter() {\n+                @Override\n+                public boolean accept(EdgeIteratorState edgeState) {\n+                    return (tmpFilter == null || tmpFilter.accept(edgeState)) && edgeState.getOrigEdgeFirst() == fromOutEdge;\n+                }\n+            });\n+        }\n+    }\n+\n+    protected void postInitTo() {\n+        if (toInEdge == ANY_EDGE) {\n+            fillEdgesToUsingFilter(additionalEdgeFilter);\n+        } else {\n+            final EdgeFilter tmpFilter = additionalEdgeFilter;\n+            fillEdgesToUsingFilter(new EdgeFilter() {\n+                @Override\n+                public boolean accept(EdgeIteratorState edgeState) {\n+                    return (tmpFilter == null || tmpFilter.accept(edgeState)) && edgeState.getOrigEdgeLast() == toInEdge;\n+                }\n+            });\n+        }\n+    }\n+\n+    /**\n+     * @param edgeFilter edge filter used to fill edges. the {@link #additionalEdgeFilter} reference will be set to\n+     *                   edgeFilter by this method, so make sure edgeFilter does not use it directly.\n+     */\n+    protected void fillEdgesFromUsingFilter(EdgeFilter edgeFilter) {\n+        // we temporarily ignore the additionalEdgeFilter\n+        EdgeFilter tmpFilter = additionalEdgeFilter;\n+        additionalEdgeFilter = edgeFilter;\n+        finishedFrom = !fillEdgesFrom();\n+        additionalEdgeFilter = tmpFilter;\n+    }\n+\n+    /**\n+     * @see #fillEdgesFromUsingFilter(EdgeFilter)\n+     */\n+    protected void fillEdgesToUsingFilter(EdgeFilter edgeFilter) {\n+        // we temporarily ignore the additionalEdgeFilter\n+        EdgeFilter tmpFilter = additionalEdgeFilter;\n+        additionalEdgeFilter = edgeFilter;\n+        finishedTo = !fillEdgesTo();\n+        additionalEdgeFilter = tmpFilter;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3Mzc1NQ=="}, "originalCommit": {"oid": "d52495a81a317738251d41dadc824405ab8845fe"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzQyOTQzNA==", "bodyText": "Yes I just checked with this PR we can get rid of additional edge filter. Shall I do it here or in a follow up PR ?\nI removed the setEdgeFilter methods. Now the (previous) additionalEdgeFilter is only used internally (for 1) CH level filtering and 2) start/target edge filtering)\ne1996be", "url": "https://github.com/graphhopper/graphhopper/pull/1850#discussion_r367429434", "createdAt": "2020-01-16T13:55:51Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/AbstractNonCHBidirAlgo.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.routing;\n+\n+import com.carrotsearch.hppc.IntObjectMap;\n+import com.graphhopper.routing.util.DefaultEdgeFilter;\n+import com.graphhopper.routing.util.EdgeFilter;\n+import com.graphhopper.routing.util.FlagEncoder;\n+import com.graphhopper.routing.util.TraversalMode;\n+import com.graphhopper.routing.weighting.Weighting;\n+import com.graphhopper.storage.Graph;\n+import com.graphhopper.storage.SPTEntry;\n+import com.graphhopper.util.EdgeExplorer;\n+import com.graphhopper.util.EdgeIterator;\n+import com.graphhopper.util.EdgeIteratorState;\n+\n+import java.util.PriorityQueue;\n+\n+import static com.graphhopper.util.EdgeIterator.ANY_EDGE;\n+\n+/**\n+ * Common subclass for bidirectional algorithms.\n+ *\n+ * @author Peter Karich\n+ * @author easbar\n+ * @see AbstractBidirCHAlgo for bidirectional CH algorithms\n+ */\n+public abstract class AbstractNonCHBidirAlgo extends AbstractBidirAlgo implements BidirRoutingAlgorithm {\n+    protected final Graph graph;\n+    protected final Weighting weighting;\n+    protected final FlagEncoder flagEncoder;\n+    protected EdgeExplorer edgeExplorer;\n+    protected EdgeFilter inEdgeFilter;\n+    protected EdgeFilter outEdgeFilter;\n+    protected EdgeFilter additionalEdgeFilter;\n+\n+    public AbstractNonCHBidirAlgo(Graph graph, Weighting weighting, TraversalMode tMode) {\n+        super(tMode);\n+        this.weighting = weighting;\n+        this.flagEncoder = weighting.getFlagEncoder();\n+        this.graph = graph;\n+        this.nodeAccess = graph.getNodeAccess();\n+        edgeExplorer = graph.createEdgeExplorer();\n+        outEdgeFilter = DefaultEdgeFilter.outEdges(flagEncoder.getAccessEnc());\n+        inEdgeFilter = DefaultEdgeFilter.inEdges(flagEncoder.getAccessEnc());\n+        int size = Math.min(Math.max(200, graph.getNodes() / 10), 150_000);\n+        initCollections(size);\n+    }\n+\n+    /**\n+     * Creates a new entry of the shortest path tree (a {@link SPTEntry} or one of its subclasses) during a dijkstra\n+     * expansion.\n+     *\n+     * @param edge    the edge that is currently processed for the expansion\n+     * @param incEdge the id of the edge that is incoming to the node the edge is pointed at. usually this is the same as\n+     *                edge.getEdge(), but for edge-based CH and in case edge is a shortcut incEdge is the original edge\n+     *                that is incoming to the node\n+     * @param weight  the weight the shortest path three entry should carry\n+     * @param parent  the parent entry of in the shortest path tree\n+     * @param reverse true if we are currently looking at the backward search, false otherwise\n+     */\n+    protected abstract SPTEntry createEntry(EdgeIteratorState edge, int incEdge, double weight, SPTEntry parent, boolean reverse);\n+\n+    protected BidirPathExtractor createPathExtractor(Graph graph, Weighting weighting) {\n+        return new BidirPathExtractor(graph, weighting);\n+    }\n+\n+    protected void postInitFrom() {\n+        if (fromOutEdge == ANY_EDGE) {\n+            fillEdgesFromUsingFilter(additionalEdgeFilter);\n+        } else {\n+            // need to use a local reference here, because additionalEdgeFilter is modified when calling fillEdgesFromUsingFilter\n+            final EdgeFilter tmpFilter = additionalEdgeFilter;\n+            fillEdgesFromUsingFilter(new EdgeFilter() {\n+                @Override\n+                public boolean accept(EdgeIteratorState edgeState) {\n+                    return (tmpFilter == null || tmpFilter.accept(edgeState)) && edgeState.getOrigEdgeFirst() == fromOutEdge;\n+                }\n+            });\n+        }\n+    }\n+\n+    protected void postInitTo() {\n+        if (toInEdge == ANY_EDGE) {\n+            fillEdgesToUsingFilter(additionalEdgeFilter);\n+        } else {\n+            final EdgeFilter tmpFilter = additionalEdgeFilter;\n+            fillEdgesToUsingFilter(new EdgeFilter() {\n+                @Override\n+                public boolean accept(EdgeIteratorState edgeState) {\n+                    return (tmpFilter == null || tmpFilter.accept(edgeState)) && edgeState.getOrigEdgeLast() == toInEdge;\n+                }\n+            });\n+        }\n+    }\n+\n+    /**\n+     * @param edgeFilter edge filter used to fill edges. the {@link #additionalEdgeFilter} reference will be set to\n+     *                   edgeFilter by this method, so make sure edgeFilter does not use it directly.\n+     */\n+    protected void fillEdgesFromUsingFilter(EdgeFilter edgeFilter) {\n+        // we temporarily ignore the additionalEdgeFilter\n+        EdgeFilter tmpFilter = additionalEdgeFilter;\n+        additionalEdgeFilter = edgeFilter;\n+        finishedFrom = !fillEdgesFrom();\n+        additionalEdgeFilter = tmpFilter;\n+    }\n+\n+    /**\n+     * @see #fillEdgesFromUsingFilter(EdgeFilter)\n+     */\n+    protected void fillEdgesToUsingFilter(EdgeFilter edgeFilter) {\n+        // we temporarily ignore the additionalEdgeFilter\n+        EdgeFilter tmpFilter = additionalEdgeFilter;\n+        additionalEdgeFilter = edgeFilter;\n+        finishedTo = !fillEdgesTo();\n+        additionalEdgeFilter = tmpFilter;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3Mzc1NQ=="}, "originalCommit": {"oid": "d52495a81a317738251d41dadc824405ab8845fe"}, "originalPosition": 133}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4836, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}