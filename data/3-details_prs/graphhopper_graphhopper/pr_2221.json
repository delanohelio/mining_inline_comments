{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNzI4ODQy", "number": 2221, "title": "OSMReader has problems with ways that reference missing nodes", "bodyText": "Sometimes OSM ways reference nodes that do not exist in the OSM file. This problem was partly fixed in #19 (yes long ago), but only for the case where the missing nodes where somewhere in the middle of a way. However, when the missing nodes are at the beginning of the way I ran into two problems:\n\nIn some cases the entire way is left out and not added to the graph at all\nEven worse: In some cases an edge is added with\nedge.getDistance() != calcDistance(edge.fetchWayGeometry(FetchMode.ALL)).\n\nSuch missing nodes appear frequently when we extract a box using Osmosis. In this case often the first or last nodes are missing, because the way starts/ends outside of the bounding box. See #1984. I am not sure if this can also happen with original OSM files.\nIf this data issue only arises when using certain tools like Osmosis I think we should simply reject such data. Its easy to throw an appropriate error in this case and It should be easy enough use some tool to fix the issue before importing it with GH. In this case maybe we can also get rid of the code that was added for #19. Otherwise we would need to add some code that handles this situation correctly. Even leaving out such ways entirely would be an option IMO, but there should definitely be no edges with inconsistent distances, because this leads to problems like #1984.", "createdAt": "2020-12-21T21:18:13Z", "url": "https://github.com/graphhopper/graphhopper/pull/2221", "merged": true, "mergeCommit": {"oid": "7881b5cccc09f1e825e0c67a8bfb6325869dfa96"}, "closed": true, "closedAt": "2020-12-29T13:25:03Z", "author": {"login": "easbar"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdochSBAH2gAyNTQzNzI4ODQyOmIzYmFiYThmYjg2OGJmMWRhMjNlZDBkMTQ5YWUxMDAwNjgwNzJiYjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdq6q5OAH2gAyNTQzNzI4ODQyOjdmYmFmNTg0MjEzMzAyNjA3N2I4NmFlMWFmNjljNjU5MTAzMWJjNDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b3baba8fb868bf1da23ed0d149ae100068072bb8", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/b3baba8fb868bf1da23ed0d149ae100068072bb8", "committedDate": "2020-12-21T21:07:54Z", "message": "Add tests showing problems with non-existing node refs appearing in OSM ways"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "650bea4a33465760b021ecf86654474399314b3a", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/650bea4a33465760b021ecf86654474399314b3a", "committedDate": "2020-12-21T21:51:45Z", "message": "Simplify edge geometry before the distance is calculated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad65f7f61f30987e58369775520132617185eb0c", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/ad65f7f61f30987e58369775520132617185eb0c", "committedDate": "2020-12-22T06:55:52Z", "message": "Fix gtfs test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e623cc5618eeaf8a60a82d433d0feceea79196c", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/4e623cc5618eeaf8a60a82d433d0feceea79196c", "committedDate": "2020-12-22T09:46:44Z", "message": "Potential fix, but not sure yet, apparently #1984 persists"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fdc5167286dbfd5377496cb35ac84daa6fd1a68", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/4fdc5167286dbfd5377496cb35ac84daa6fd1a68", "committedDate": "2020-12-22T09:47:12Z", "message": "Add comment (remove later)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1b37f127131b49d47e32d73aecd59c739fb9471", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/d1b37f127131b49d47e32d73aecd59c739fb9471", "committedDate": "2020-12-22T12:09:26Z", "message": "Remove unused wayOsmId parameter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c6554374095f4ccff2d95b6d5a25152c2f722df", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/2c6554374095f4ccff2d95b6d5a25152c2f722df", "committedDate": "2020-12-28T18:09:15Z", "message": "Merge branch 'simplify_before_dist' into missing_osm_nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c102333faf4422991677d2767fcc480dab28ba1", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/0c102333faf4422991677d2767fcc480dab28ba1", "committedDate": "2020-12-28T18:41:25Z", "message": "Check point coordinates and distance during OSM reading"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6625050a22a8915d4eba22e7458fe8ee768c6636", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/6625050a22a8915d4eba22e7458fe8ee768c6636", "committedDate": "2020-12-28T18:41:42Z", "message": "Update test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ac8dafcdea29f004df487fa0d5968b2df21ab93", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/4ac8dafcdea29f004df487fa0d5968b2df21ab93", "committedDate": "2020-12-28T18:52:58Z", "message": "add original test (remove later)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b99da492db6b17bc63771426f4b11be53e2694e4", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/b99da492db6b17bc63771426f4b11be53e2694e4", "committedDate": "2020-12-29T10:37:49Z", "message": "Merge branch 'master' into missing_osm_nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14ebbe46b140bc776a8f9586ec5a34187c7f46a7", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/14ebbe46b140bc776a8f9586ec5a34187c7f46a7", "committedDate": "2020-12-29T10:45:23Z", "message": "Remove temporary test and comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NDgxNzc2", "url": "https://github.com/graphhopper/graphhopper/pull/2221#pullrequestreview-559481776", "createdAt": "2020-12-29T10:59:49Z", "commit": {"oid": "14ebbe46b140bc776a8f9586ec5a34187c7f46a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDo1OTo0OVrOIMMuLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMDo1OTo0OVrOIMMuLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY2MjI1Mw==", "bodyText": "Btw one of the major difficulties I had when trying to understand OSMReader is that the node map is used in two different ways during the import. In the first pass it simply separates between nodes that occur in two or more, only one or zero ways. For this we use the TOWER/PILLAR/EMPTY_NODE constants. But then in the second run we use the same map and assign pillar/tower node ids and this leads to very confusing code like this:\n  // skip osmIds with no associated pillar or tower id (e.g. !OSMReader.isBounds)\n                if (tmpNode == TOWER_NODE)\n                    continue;\n\n                if (tmpNode == PILLAR_NODE) {\nwhere tmpNode == TOWER/PILLAR_NODE does not mean that tmpNode is a tower/pillar node but it means something very different(!): Because no 'real' tower/pillar node id was assigned for this node it means that tmpNode does not exist.\nThis is probably the first thing I would clean up in OSMReader, because it really tripped me up. I understand that we probably want to re-use the map for performance reasons, but at least we should use a second reference to it (using a different name) or use some helper methods to make this more clear. Then again I wonder if we could exploit the fact that during the first pass we only need to distinguish three values (zero ways, one way, multiple ways) to achieve faster lookups somehow.", "url": "https://github.com/graphhopper/graphhopper/pull/2221#discussion_r549662253", "createdAt": "2020-12-29T10:59:49Z", "author": {"login": "easbar"}, "path": "reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java", "diffHunk": "@@ -573,10 +573,30 @@ int addTowerNode(long osmId, double lat, double lon, double ele) {\n         final PointList pointList = new PointList(osmNodeIds.size(), nodeAccess.is3D());\n         final List<EdgeIteratorState> newEdges = new ArrayList<>(5);\n         int firstNode = -1;\n-        final int lastIndex = osmNodeIds.size() - 1;\n         int lastInBoundsPillarNode = -1;\n         try {\n-            for (int i = 0; i < osmNodeIds.size(); i++) {\n+            // #2221: ways might include nodes at the beginning or end that do not exist -> skip them\n+            int firstExisting = -1;\n+            int lastExisting = -1;\n+            for (int i = 0; i < osmNodeIds.size(); ++i) {\n+                final long tmpNode = getNodeMap().get(osmNodeIds.get(i));\n+                if (tmpNode > -TOWER_NODE || tmpNode < TOWER_NODE) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14ebbe46b140bc776a8f9586ec5a34187c7f46a7"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NDgyNjI5", "url": "https://github.com/graphhopper/graphhopper/pull/2221#pullrequestreview-559482629", "createdAt": "2020-12-29T11:02:16Z", "commit": {"oid": "14ebbe46b140bc776a8f9586ec5a34187c7f46a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMTowMjoxNlrOIMMwtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOVQxMTowMjoxNlrOIMMwtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTY2MjkwMw==", "bodyText": "The actual fix is a bit lengthy, but rather trivial: We scan the osmNodeIds list from the beginning and end to find the first node that does exist (and skip those that do not exist).", "url": "https://github.com/graphhopper/graphhopper/pull/2221#discussion_r549662903", "createdAt": "2020-12-29T11:02:16Z", "author": {"login": "easbar"}, "path": "reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java", "diffHunk": "@@ -573,10 +573,30 @@ int addTowerNode(long osmId, double lat, double lon, double ele) {\n         final PointList pointList = new PointList(osmNodeIds.size(), nodeAccess.is3D());\n         final List<EdgeIteratorState> newEdges = new ArrayList<>(5);\n         int firstNode = -1;\n-        final int lastIndex = osmNodeIds.size() - 1;\n         int lastInBoundsPillarNode = -1;\n         try {\n-            for (int i = 0; i < osmNodeIds.size(); i++) {\n+            // #2221: ways might include nodes at the beginning or end that do not exist -> skip them\n+            int firstExisting = -1;\n+            int lastExisting = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14ebbe46b140bc776a8f9586ec5a34187c7f46a7"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU5NTI4MjEz", "url": "https://github.com/graphhopper/graphhopper/pull/2221#pullrequestreview-559528213", "createdAt": "2020-12-29T13:17:55Z", "commit": {"oid": "14ebbe46b140bc776a8f9586ec5a34187c7f46a7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fbaf5842133026077b86ae1af69c6591031bc41", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/7fbaf5842133026077b86ae1af69c6591031bc41", "committedDate": "2020-12-29T13:23:24Z", "message": "Merge branch 'master' into missing_osm_nodes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4547, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}