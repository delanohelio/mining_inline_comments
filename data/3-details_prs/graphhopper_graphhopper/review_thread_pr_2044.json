{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMjE1NzYw", "number": 2044, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODoxOTozM1rOD-g9Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODoyMTo0NVrOD-g_nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODc4MjkxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODoxOTozM1rOGYqWNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODoxOTozM1rOGYqWNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUxMjgyMg==", "bodyText": "I made this depend on the encoder, so it might happen that we have multiple profiles (some with and some without turn costs) that use the same encoder (the same access flags) and so we also use the edge-based subnetwork removal for the profiles without turn costs. This means we might remove some subnetworks that are not accessible if we included turn costs also for profiles that ignore turn costs anyway. But this does not seem to be a big problem to me. The (more general) alternative would be running the subnetwork removal per profile, but then we also need access flags per profile. Or maybe no access flags at all but this is another story so I went with the simple solution here. The other extreme would be always using the edge-based subnetwork removal (to make things more simple).", "url": "https://github.com/graphhopper/graphhopper/pull/2044#discussion_r428512822", "createdAt": "2020-05-21T08:19:33Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -1334,15 +1335,28 @@ protected void loadOrPrepareLM(boolean closeEarly) {\n      * Internal method to clean up the graph.\n      */\n     protected void cleanUp() {\n-        int prevNodeCount = ghStorage.getNodes();\n-        PrepareRoutingSubnetworks preparation = new PrepareRoutingSubnetworks(ghStorage, encodingManager.fetchEdgeEncoders());\n+        PrepareRoutingSubnetworks preparation = new PrepareRoutingSubnetworks(ghStorage, buildSubnetworkRemovalJobs());\n         preparation.setMinNetworkSize(minNetworkSize);\n         preparation.doWork();\n-        int currNodeCount = ghStorage.getNodes();\n-        logger.info(\"edges: \" + Helper.nf(ghStorage.getEdges()) + \", nodes \" + Helper.nf(currNodeCount)\n-                + \", there were \" + Helper.nf(preparation.getMaxSubnetworks())\n-                + \" subnetworks. removed them => \" + Helper.nf(prevNodeCount - currNodeCount)\n-                + \" less nodes\");\n+        logger.info(\"nodes: \" + Helper.nf(ghStorage.getNodes()) + \", edges: \" + Helper.nf(ghStorage.getEdges()));\n+    }\n+\n+    private List<PrepareJob> buildSubnetworkRemovalJobs() {\n+        List<FlagEncoder> encoders = encodingManager.fetchEdgeEncoders();\n+        List<PrepareJob> jobs = new ArrayList<>();\n+        for (FlagEncoder encoder : encoders) {\n+            // for encoders with turn costs we do an edge-based subnetwork removal, because they *might* be used with\n+            // a profile with turn_costs=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e635dc4a6f4b056eab582a5bebb8a464f569327a"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODc4ODc3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/subnetwork/PrepareRoutingSubnetworks.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODoyMTo0NVrOGYqaCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwODoyMTo0NVrOGYqaCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODUxMzgwMA==", "bodyText": "We could make this more consistent and also count the number of nodes for edge-based subnetwork removal, but I am not sure if its worth it. For edge-based subnetwork search we only get the edge keys of the components and would have to collect the set of nodes adjacent to these edges to find out how many nodes a component has.", "url": "https://github.com/graphhopper/graphhopper/pull/2044#discussion_r428513800", "createdAt": "2020-05-21T08:21:45Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/routing/subnetwork/PrepareRoutingSubnetworks.java", "diffHunk": "@@ -38,29 +36,31 @@\n /**\n  * Removes nodes/edges which are not part of the 'main' network(s). I.e. mostly nodes with no edges at all but\n  * also small subnetworks which could be bugs in OSM data or 'islands' or indicate otherwise disconnected areas\n- * e.g. via barriers or one way problems - see #86.\n- * <p>\n+ * e.g. via barriers or one way problems - see #86. Subnetworks are removed by disabling access to the corresponding\n+ * edges for a given access encoded value. It is important to search for strongly connected components here (i.e.\n+ * consider that the graph is directed). For example, small areas like parking lots are sometimes connected to the whole\n+ * network through a single one-way road (a mapping error) and have to be removed because otherwise the routing fails\n+ * when starting from such a parking lot.\n  *\n  * @author Peter Karich\n  * @author easbar\n  */\n public class PrepareRoutingSubnetworks {\n     private final Logger logger = LoggerFactory.getLogger(getClass());\n     private final GraphHopperStorage ghStorage;\n-    private final List<FlagEncoder> encoders;\n-    private final List<BooleanEncodedValue> accessEncList;\n+    private final List<PrepareJob> prepareJobs;\n     private int minNetworkSize = 200;\n-    private int subnetworks = -1;\n \n-    public PrepareRoutingSubnetworks(GraphHopperStorage ghStorage, List<FlagEncoder> encoders) {\n+    public PrepareRoutingSubnetworks(GraphHopperStorage ghStorage, List<PrepareJob> prepareJobs) {\n         this.ghStorage = ghStorage;\n-        this.encoders = encoders;\n-        this.accessEncList = new ArrayList<>();\n-        for (FlagEncoder flagEncoder : encoders) {\n-            accessEncList.add(flagEncoder.getAccessEnc());\n-        }\n+        this.prepareJobs = prepareJobs;\n     }\n \n+    /**\n+     * The subnetwork removal removes components with less than {@link #minNetworkSize} nodes from the graph if it is\n+     * run node-based. For edge-based subnetwork removal it removes components with less than 2*{@link #minNetworkSize}\n+     * (directed) edges.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e635dc4a6f4b056eab582a5bebb8a464f569327a"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4808, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}