{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxNjI3NjAw", "number": 2120, "title": "Add binary heap with efficient update operation and use it for node-queue in CH preparation", "bodyText": "So far we use a TreeMap<Integer, Long> to queue the nodes for CH preparation, but this wastes lots of memory. Using jol I find that 1mio nodes take about 64MB:\n   @Test\n    public void testMemory() {\n        GHTreeMapComposed heap = new GHTreeMapComposed();\n        Random rnd = new Random(123);\n        for (int i = 0; i < 1_000_000; i++) {\n            heap.insert(i, rnd.nextFloat());\n        }\n        System.out.println(heap.getSize());\n        System.out.println(GraphLayout.parseInstance(heap).toFootprint());\n    }\n<!-- pom.xml -->\n<dependency>\n  <groupId>org.openjdk.jol</groupId>\n  <artifactId>jol-core</artifactId>\n  <version>0.10</version>\n</dependency>\nand we use an additional float per node to store the old_priorities (another 4MB per 1mio nodes).\nThis PR adds a modified version of IntDoubleBinaryHeap that only uses two ints and a float per node (12MB instead of 68MB for 1mio nodes).\nSee inline comments for more details (The BinaryHeapWithUpdate class especially).", "createdAt": "2020-09-07T20:20:53Z", "url": "https://github.com/graphhopper/graphhopper/pull/2120", "merged": true, "mergeCommit": {"oid": "a2d7399728068cd04134d43288b0d57e36e61254"}, "closed": true, "closedAt": "2020-09-11T13:19:27Z", "author": {"login": "easbar"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdGf-czgH2gAyNDgxNjI3NjAwOjJkMTZjMTc2ODZiNzA3NzBjMjViMzQ2MGVjNDczNDNjOWYyYTNiZmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHvqbPgH2gAyNDgxNjI3NjAwOjVkMmQ0Y2QwNGUzNzU2Mzk1OTgwMWJiMjcyMmUzYjZkZGI0YWRlMzQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2d16c17686b70770c25b3460ec47343c9f2a3bfe", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/2d16c17686b70770c25b3460ec47343c9f2a3bfe", "committedDate": "2020-09-07T09:56:03Z", "message": "Add binary heap with efficient update operation and use it for node-queue in CH preparation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNzAzMjg2", "url": "https://github.com/graphhopper/graphhopper/pull/2120#pullrequestreview-483703286", "createdAt": "2020-09-07T20:22:52Z", "commit": {"oid": "2d16c17686b70770c25b3460ec47343c9f2a3bfe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMDoyMjo1MlrOHOHNHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QyMDoyMjo1MlrOHOHNHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU2MDE1OA==", "bodyText": "I renamed this from IntDouble to IntFloat, because this is what it actually uses. Shall we simply rename it to (GH?)BinaryHeap? Also I removed the BinHeapWrapper interface, because it looked like this was only needed for testing and I achieved the same with a testing interface.", "url": "https://github.com/graphhopper/graphhopper/pull/2120#discussion_r484560158", "createdAt": "2020-09-07T20:22:52Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/apache/commons/collections/IntFloatBinaryHeap.java", "diffHunk": "@@ -15,29 +15,26 @@\n  */\n package com.graphhopper.apache.commons.collections;\n \n-import com.graphhopper.coll.BinHeapWrapper;\n-\n import java.util.Arrays;\n import java.util.NoSuchElementException;\n \n /**\n  * This class is a partial copy of the class org.apache.commons.collections.BinaryHeap for\n- * just the min heap and primitive, sorted double keys and associated int elements.\n+ * just the min heap and primitive, sorted float keys and associated int elements.\n  * <p>\n  * The library can be found here: https://commons.apache.org/proper/commons-collections/\n  */\n-public class IntDoubleBinaryHeap implements BinHeapWrapper<Number, Integer> {\n-\n+public class IntFloatBinaryHeap {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d16c17686b70770c25b3460ec47343c9f2a3bfe"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44ee952333e423a3847f95647d2477d3f304ad67", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/44ee952333e423a3847f95647d2477d3f304ad67", "committedDate": "2020-09-07T20:46:31Z", "message": "Adjust tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MjE4MjQy", "url": "https://github.com/graphhopper/graphhopper/pull/2120#pullrequestreview-484218242", "createdAt": "2020-09-08T14:48:36Z", "commit": {"oid": "44ee952333e423a3847f95647d2477d3f304ad67"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo0ODozN1rOHOg1qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDo0ODozN1rOHOg1qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4MDEzNw==", "bodyText": "@michaz  What do you think about this? The third alternative does not make so much sense because its just like the second but with an extra little detour. This probably now occurs because the shortcuts are slightly different. Or do you think I might have broken something? Defining what an 'acceptable' alternative is on such a small graph is probably rather hard and/or the heuristics aren't even meant to work for such small graphs?", "url": "https://github.com/graphhopper/graphhopper/pull/2120#discussion_r484980137", "createdAt": "2020-09-08T14:48:37Z", "author": {"login": "easbar"}, "path": "core/src/test/java/com/graphhopper/routing/AlternativeRouteEdgeCHTest.java", "diffHunk": "@@ -141,9 +141,10 @@ public void testCalcOtherAlternatives() {\n         hints.putObject(\"alternative_route.max_paths\", 4);\n         AlternativeRouteEdgeCH altDijkstra = new AlternativeRouteEdgeCH(g.getRoutingCHGraph(), hints);\n         List<AlternativeRouteEdgeCH.AlternativeInfo> pathInfos = altDijkstra.calcAlternatives(10, 5);\n-        assertEquals(2, pathInfos.size());\n+        assertEquals(3, pathInfos.size());\n         assertEquals(IntArrayList.from(10, 4, 3, 6, 5), pathInfos.get(0).path.calcNodes());\n         assertEquals(IntArrayList.from(10, 4, 8, 7, 6, 5), pathInfos.get(1).path.calcNodes());\n+        assertEquals(IntArrayList.from(10, 4, 8, 7, 6, 3, 2, 9, 1, 5), pathInfos.get(2).path.calcNodes());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44ee952333e423a3847f95647d2477d3f304ad67"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfdf05122a648bf554ed6b25fa0e12aa348c6dee", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/dfdf05122a648bf554ed6b25fa0e12aa348c6dee", "committedDate": "2020-09-10T20:33:36Z", "message": "Merge branch 'master' into min_heap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d2d4cd04e37563959801bb2722e3b6ddb4ade34", "author": {"user": {"login": "easbar", "name": "Andi"}}, "url": "https://github.com/graphhopper/graphhopper/commit/5d2d4cd04e37563959801bb2722e3b6ddb4ade34", "committedDate": "2020-09-11T06:46:35Z", "message": "Merge branch 'master' into min_heap"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4473, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}