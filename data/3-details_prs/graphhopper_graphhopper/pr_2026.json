{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MzU0MDY1", "number": 2026, "title": "check profile if used for LM or CH preparation", "bodyText": "This fixes #2025\n@easbar the CH and LM stuff is handled differently e.g. CH is coupled to the graph and so the LMConfig is only known at GraphHopper class level. And LM preparation is either loaded or created so this leads to the asymmetric new code (when comparing CH and LM) inside the GraphHopper class.\nIt would be probably better to have this code in Landmark.createLandmarks & loadExisting but for this not only the LMConfig is necessary but also profilesByName. Same is for CH: this should be better encapsulated in PrepareContractionHierarchies.doWork and GraphHopperStorage.loadExisting (hmmh, ok this is also not correct and all the shortcuts etc. should be in CHGraphImpl or something or probably in a separate per-CHProfile-object)", "createdAt": "2020-05-06T21:54:43Z", "url": "https://github.com/graphhopper/graphhopper/pull/2026", "merged": true, "mergeCommit": {"oid": "76397a0d59f064854d611e4ca654cf1fc0c092f1"}, "closed": true, "closedAt": "2020-05-11T13:31:56Z", "author": {"login": "karussell"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcev46rgH2gAyNDE0MzU0MDY1OjY0MDljNjBjM2E4ZTZiN2Q1YjMwYjMxMDZjYTAwZjM2NjkwODhkYTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgPipsgH2gAyNDE0MzU0MDY1OmIzODY3ZjhlZDUxZGU0MTBhNDNhMzJhYzFkODQ0YzBlNzM5YTk4Mjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6409c60c3a8e6b7d5b30b3106ca00f3669088da8", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/6409c60c3a8e6b7d5b30b3106ca00f3669088da8", "committedDate": "2020-05-06T21:51:31Z", "message": "check profile if used for LM or CH preparation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/284b1c7f654455d25812fb48ba699f2f710e1e5e", "committedDate": "2020-05-06T21:54:47Z", "message": "cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MDE1NDMw", "url": "https://github.com/graphhopper/graphhopper/pull/2026#pullrequestreview-407015430", "createdAt": "2020-05-06T21:55:32Z", "commit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTo1NTozMlrOGRm2_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQyMTo1NTozMlrOGRm2_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTExNTY0Nw==", "bodyText": "This is probably better in GraphHopperTest but mocking DataReader is a bit lengthy/ugly.", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r421115647", "createdAt": "2020-05-06T21:55:32Z", "author": {"login": "karussell"}, "path": "reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java", "diffHunk": "@@ -1117,4 +1117,56 @@ private GraphHopper createGraphHopper(String vehicles) {\n                 setEncodingManager(em).\n                 setProfiles(profiles);\n     }\n+\n+    @Test\n+    public void testLoadingWrongCHProfiles() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MjY4NzAz", "url": "https://github.com/graphhopper/graphhopper/pull/2026#pullrequestreview-407268703", "createdAt": "2020-05-07T08:45:40Z", "commit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODo0NTo0MFrOGR0lLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwODo1MzoxN1rOGR04og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0MDQ2MA==", "bodyText": "Looks like this is (no longer(?)) needed?", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r421340460", "createdAt": "2020-05-07T08:45:40Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/storage/CHConfig.java", "diffHunk": "@@ -70,4 +71,13 @@ public int hashCode() {\n         return getName().hashCode();\n     }\n \n+    public int getVersion() {\n+        int hash = Helper.staticHashCode(chGraphName);\n+        hash = 31 * hash + Helper.staticHashCode(weighting.getName());\n+        // if flag encoder is removed we could use weighting.toString\n+        hash = 31 * hash + Helper.staticHashCode(weighting.getFlagEncoder().toString());\n+        hash *= weighting.hasTurnCosts() ? 31 : 62;\n+        hash *= edgeBased ? 31 : 62;\n+        return hash;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0MDk1Nw==", "bodyText": "Why is isEmpty() treated special here? Why is it possible for the hash to be empty?", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r421340957", "createdAt": "2020-05-07T08:46:28Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -979,8 +979,16 @@ protected void postProcessing(boolean closeEarly) {\n \n         if (chPreparationHandler.isEnabled())\n             chPreparationHandler.createPreparations(ghStorage);\n-        if (!isCHPrepared())\n+        if (isCHPrepared()) {\n+            // check loaded profiles\n+            for (CHProfile profile : chPreparationHandler.getCHProfiles()) {\n+                if (!getProfileHash(profile.getProfile()).isEmpty()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0MTE5NQ==", "bodyText": "Can we either call it hash or version (but not both :)) ?", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r421341195", "createdAt": "2020-05-07T08:46:51Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -1264,16 +1272,24 @@ protected void initLocationIndex() {\n     }\n \n     private boolean isCHPrepared() {\n-        return \"true\".equals(ghStorage.getProperties().get(CH.PREPARE + \"done\"))\n-                // remove old property in >0.9\n-                || \"true\".equals(ghStorage.getProperties().get(\"prepare.done\"));\n+        return \"true\".equals(ghStorage.getProperties().get(CH.PREPARE + \"done\"));\n     }\n \n-    private boolean isLMPrepared() {\n-        return \"true\".equals(ghStorage.getProperties().get(Landmark.PREPARE + \"done\"));\n+    private String getProfileHash(String profile) {\n+        return ghStorage.getProperties().get(\"graph.profiles.\" + profile + \".hash\");\n+    }\n+\n+    private void setProfileHash(String profile, int version) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0MTkyMQ==", "bodyText": "Ok ;)", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r421341921", "createdAt": "2020-05-07T08:48:00Z", "author": {"login": "easbar"}, "path": "reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java", "diffHunk": "@@ -1117,4 +1117,56 @@ private GraphHopper createGraphHopper(String vehicles) {\n                 setEncodingManager(em).\n                 setProfiles(profiles);\n     }\n+\n+    @Test\n+    public void testLoadingWrongCHProfiles() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTExNTY0Nw=="}, "originalCommit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0NDI5OQ==", "bodyText": "Hmm toString includes the hints (which is good/required for custom weighting), but unfortunately PMap uses an (unordered) HashMap, so this might go wrong? Shall we use LinkedHashMap in PMap? Or implement some method that returns the string in a deterministic way?", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r421344299", "createdAt": "2020-05-07T08:51:35Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/config/Profile.java", "diffHunk": "@@ -112,4 +113,8 @@ public boolean equals(Object o) {\n     public int hashCode() {\n         return name.hashCode();\n     }\n+\n+    public int getVersion() {\n+        return Helper.staticHashCode(toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0NTQ0Mg==", "bodyText": "Oh but I just realized that also hints does not even include the custom model but only the reference to the custom model file... Shouldn't our check also detect changes in the custom model file?", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r421345442", "createdAt": "2020-05-07T08:53:17Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/config/Profile.java", "diffHunk": "@@ -112,4 +113,8 @@ public boolean equals(Object o) {\n     public int hashCode() {\n         return name.hashCode();\n     }\n+\n+    public int getVersion() {\n+        return Helper.staticHashCode(toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTM0NDI5OQ=="}, "originalCommit": {"oid": "284b1c7f654455d25812fb48ba699f2f710e1e5e"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cef4d8b17f83e95aba6c42143236a10aa518b7c7", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/cef4d8b17f83e95aba6c42143236a10aa518b7c7", "committedDate": "2020-05-07T13:49:56Z", "message": "first things after review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b16e21acf658f5620a46b0e66c2b4492445cfef", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/4b16e21acf658f5620a46b0e66c2b4492445cfef", "committedDate": "2020-05-07T22:23:44Z", "message": "include custom model in tests and use linkedhashmap for pmap to ensure same version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e442b41acdd612c1a803feaa6e52c9d54a1e7e5c", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/e442b41acdd612c1a803feaa6e52c9d54a1e7e5c", "committedDate": "2020-05-08T13:37:21Z", "message": "minor javadocs fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f8b6cadaac379cef0302f8a42f6995b611df1f5", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/4f8b6cadaac379cef0302f8a42f6995b611df1f5", "committedDate": "2020-05-11T11:34:57Z", "message": "ensure toString is not only used for debugging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6efd07719243c5e600bd6c1e8dfe8a8c98861ef", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/d6efd07719243c5e600bd6c1e8dfe8a8c98861ef", "committedDate": "2020-05-11T11:35:09Z", "message": "Merge branch 'master' into profile_hash"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MDk5OTQ2", "url": "https://github.com/graphhopper/graphhopper/pull/2026#pullrequestreview-409099946", "createdAt": "2020-05-11T11:50:27Z", "commit": {"oid": "d6efd07719243c5e600bd6c1e8dfe8a8c98861ef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo1MDoyOFrOGTY5Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo1MDoyOFrOGTY5Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4NDAxMQ==", "bodyText": "Should we not use createContentString also in getVersion() (instead of toString()) now that we have it?", "url": "https://github.com/graphhopper/graphhopper/pull/2026#discussion_r422984011", "createdAt": "2020-05-11T11:50:28Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/routing/util/CustomModel.java", "diffHunk": "@@ -126,14 +126,13 @@ public double getHeadingPenalty() {\n \n     @Override\n     public String toString() {\n-        return \"CustomModel{\" +\n-                \"distanceInfluence=\" + distanceInfluence +\n-                \", speedFactor=\" + speedFactorMap +\n-                \", maxSpeed=\" + maxSpeedMap +\n-                \", maxSpeedFallback=\" + maxSpeedFallback +\n-                \", priorityMap=\" + priorityMap +\n-                \", #areas=\" + areas.size() +\n-                '}';\n+        return createContentString();\n+    }\n+\n+    private String createContentString() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6efd07719243c5e600bd6c1e8dfe8a8c98861ef"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b3867f8ed51de410a43a32ac1d844c0e739a9829", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/b3867f8ed51de410a43a32ac1d844c0e739a9829", "committedDate": "2020-05-11T13:18:05Z", "message": "make it similar for Profile and CustomModel"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4653, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}