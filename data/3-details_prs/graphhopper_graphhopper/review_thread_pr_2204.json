{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM0NTU2MTIx", "number": 2204, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMjoyODozN1rOFC5hKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMjozMDo1NlrOFC5lUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTgzODUxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/util/EdgeIteratorState.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMjoyODozN1rOICSKjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMzo1NzozNFrOICV5Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI2NTY3OA==", "bodyText": "Here also the new method set(property, fwd, bwd) would be required (see #2202)", "url": "https://github.com/graphhopper/graphhopper/pull/2204#discussion_r539265678", "createdAt": "2020-12-09T12:28:37Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/util/EdgeIteratorState.java", "diffHunk": "@@ -171,13 +171,21 @@ public void setBool(boolean reverse, IntsRef ref, boolean value) {\n \n     EdgeIteratorState setReverse(DecimalEncodedValue property, double value);\n \n-    <T extends Enum> T get(EnumEncodedValue<T> property);\n+    <T extends Enum<?>> T get(EnumEncodedValue<T> property);\n \n-    <T extends Enum> EdgeIteratorState set(EnumEncodedValue<T> property, T value);\n+    <T extends Enum<?>> EdgeIteratorState set(EnumEncodedValue<T> property, T value);\n \n-    <T extends Enum> T getReverse(EnumEncodedValue<T> property);\n+    <T extends Enum<?>> T getReverse(EnumEncodedValue<T> property);\n \n-    <T extends Enum> EdgeIteratorState setReverse(EnumEncodedValue<T> property, T value);\n+    <T extends Enum<?>> EdgeIteratorState setReverse(EnumEncodedValue<T> property, T value);\n+    \n+    String get(StringEncodedValue property);\n+    \n+    EdgeIteratorState set(StringEncodedValue property, String value);\n+    \n+    String getReverse(StringEncodedValue property);\n+    \n+    EdgeIteratorState setReverse(StringEncodedValue property, String value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ecd60b27dff63321473cc738fac3e6d5d1b7a20"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTMyNjc2Mw==", "bodyText": "Rebased on master", "url": "https://github.com/graphhopper/graphhopper/pull/2204#discussion_r539326763", "createdAt": "2020-12-09T13:57:34Z", "author": {"login": "otbutz"}, "path": "core/src/main/java/com/graphhopper/util/EdgeIteratorState.java", "diffHunk": "@@ -171,13 +171,21 @@ public void setBool(boolean reverse, IntsRef ref, boolean value) {\n \n     EdgeIteratorState setReverse(DecimalEncodedValue property, double value);\n \n-    <T extends Enum> T get(EnumEncodedValue<T> property);\n+    <T extends Enum<?>> T get(EnumEncodedValue<T> property);\n \n-    <T extends Enum> EdgeIteratorState set(EnumEncodedValue<T> property, T value);\n+    <T extends Enum<?>> EdgeIteratorState set(EnumEncodedValue<T> property, T value);\n \n-    <T extends Enum> T getReverse(EnumEncodedValue<T> property);\n+    <T extends Enum<?>> T getReverse(EnumEncodedValue<T> property);\n \n-    <T extends Enum> EdgeIteratorState setReverse(EnumEncodedValue<T> property, T value);\n+    <T extends Enum<?>> EdgeIteratorState setReverse(EnumEncodedValue<T> property, T value);\n+    \n+    String get(StringEncodedValue property);\n+    \n+    EdgeIteratorState set(StringEncodedValue property, String value);\n+    \n+    String getReverse(StringEncodedValue property);\n+    \n+    EdgeIteratorState setReverse(StringEncodedValue property, String value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI2NTY3OA=="}, "originalCommit": {"oid": "3ecd60b27dff63321473cc738fac3e6d5d1b7a20"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4NTg0OTEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/util/details/StringDetails.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMjozMDo1NlrOICSQrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxMjo1NDo1NVrOICTNHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI2NzI0NQ==", "bodyText": "Here we would need to avoid null values (due to JSON limitation). See DecimalDetails how we do this for infinity.", "url": "https://github.com/graphhopper/graphhopper/pull/2204#discussion_r539267245", "createdAt": "2020-12-09T12:30:56Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/util/details/StringDetails.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.util.details;\n+\n+import com.graphhopper.routing.ev.StringEncodedValue;\n+import com.graphhopper.util.EdgeIteratorState;\n+\n+public class StringDetails extends AbstractPathDetailsBuilder {\n+\n+    private final StringEncodedValue ev;\n+    private String currentVal = null;\n+\n+    public StringDetails(String name, StringEncodedValue ev) {\n+        super(name);\n+        this.ev = ev;\n+    }\n+\n+    @Override\n+    protected Object getCurrentValue() {\n+        return currentVal;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ecd60b27dff63321473cc738fac3e6d5d1b7a20"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI3NTE3Nw==", "bodyText": "Are you sure about that? I can't find a call to the DecimalDetails constructor which doesn't just pass null as the infinity value.", "url": "https://github.com/graphhopper/graphhopper/pull/2204#discussion_r539275177", "createdAt": "2020-12-09T12:43:22Z", "author": {"login": "otbutz"}, "path": "core/src/main/java/com/graphhopper/util/details/StringDetails.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.util.details;\n+\n+import com.graphhopper.routing.ev.StringEncodedValue;\n+import com.graphhopper.util.EdgeIteratorState;\n+\n+public class StringDetails extends AbstractPathDetailsBuilder {\n+\n+    private final StringEncodedValue ev;\n+    private String currentVal = null;\n+\n+    public StringDetails(String name, StringEncodedValue ev) {\n+        super(name);\n+        this.ev = ev;\n+    }\n+\n+    @Override\n+    protected Object getCurrentValue() {\n+        return currentVal;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI2NzI0NQ=="}, "originalCommit": {"oid": "3ecd60b27dff63321473cc738fac3e6d5d1b7a20"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI4MjcxOQ==", "bodyText": "Ups. You are right. I misremembered the illegal chars. It is Infinity and NaN, not infinity and null :)", "url": "https://github.com/graphhopper/graphhopper/pull/2204#discussion_r539282719", "createdAt": "2020-12-09T12:54:55Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/util/details/StringDetails.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ *  Licensed to GraphHopper GmbH under one or more contributor\n+ *  license agreements. See the NOTICE file distributed with this work for\n+ *  additional information regarding copyright ownership.\n+ *\n+ *  GraphHopper GmbH licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except in\n+ *  compliance with the License. You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package com.graphhopper.util.details;\n+\n+import com.graphhopper.routing.ev.StringEncodedValue;\n+import com.graphhopper.util.EdgeIteratorState;\n+\n+public class StringDetails extends AbstractPathDetailsBuilder {\n+\n+    private final StringEncodedValue ev;\n+    private String currentVal = null;\n+\n+    public StringDetails(String name, StringEncodedValue ev) {\n+        super(name);\n+        this.ev = ev;\n+    }\n+\n+    @Override\n+    protected Object getCurrentValue() {\n+        return currentVal;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTI2NzI0NQ=="}, "originalCommit": {"oid": "3ecd60b27dff63321473cc738fac3e6d5d1b7a20"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4679, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}