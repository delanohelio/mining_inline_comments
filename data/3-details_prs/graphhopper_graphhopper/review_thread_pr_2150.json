{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MDIwNTg4", "number": 2150, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzo1OToxMFrOEqbI-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODowMzoxMlrOEqbOIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTIwMzEyOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/storage/Graph.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNzo1OToxMFrOHcn3Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwOTowMTo0N1rOHdplYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3NTI1MA==", "bodyText": "Should we call it getEdgeIteratorState(int) instead?", "url": "https://github.com/graphhopper/graphhopper/pull/2150#discussion_r499775250", "createdAt": "2020-10-05T17:59:10Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/storage/Graph.java", "diffHunk": "@@ -82,6 +82,13 @@\n      */\n     EdgeIteratorState getEdgeIteratorState(int edgeId, int adjNode);\n \n+    /**\n+     * Returns the edge state for the given edge key\n+     *\n+     * @see EdgeIteratorState#getEdgeKey()\n+     */\n+    EdgeIteratorState getEdgeIteratorStateForKey(int edgeKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a425ed5b5237dd1410c3b6262f9db0dbe5d22537"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg1MjA2NA==", "bodyText": "nope", "url": "https://github.com/graphhopper/graphhopper/pull/2150#discussion_r500852064", "createdAt": "2020-10-07T09:01:47Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/storage/Graph.java", "diffHunk": "@@ -82,6 +82,13 @@\n      */\n     EdgeIteratorState getEdgeIteratorState(int edgeId, int adjNode);\n \n+    /**\n+     * Returns the edge state for the given edge key\n+     *\n+     * @see EdgeIteratorState#getEdgeKey()\n+     */\n+    EdgeIteratorState getEdgeIteratorStateForKey(int edgeKey);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3NTI1MA=="}, "originalCommit": {"oid": "a425ed5b5237dd1410c3b6262f9db0dbe5d22537"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTIxMzAzOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/util/EdgeIteratorState.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODowMjoxMlrOHcn9aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNjo1NDo1OFrOHdRLFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3Njg3Mg==", "bodyText": "In #2146 we call this int getEdgeKey(boolean reverse). I would argue that the edge state has only one edge key and reversing the key is out of its scope, so I left out the reverse parameter. The reverse key can be obtained using GHUtility.getReverseKey(edgeState.getEdgeKey()), which of course is a bit less comfortable, especially in cases like this:\nint key = edgeState.getEdgeKey();\nif (reverse)\n    key = GHUtility.getReverseKey(key);\ncompared to:\nint key = edgeState.getEdgeKey(reverse);\n\nSo not sure...", "url": "https://github.com/graphhopper/graphhopper/pull/2150#discussion_r499776872", "createdAt": "2020-10-05T18:02:12Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/util/EdgeIteratorState.java", "diffHunk": "@@ -73,6 +74,16 @@ public void setBool(boolean reverse, IntsRef ref, boolean value) {\n      */\n     int getEdge();\n \n+    /**\n+     * Returns the edge key of the current edge. The edge id can be derived from the edge key by calling\n+     * {@link GHUtility#getEdgeFromEdgeKey(int)}, but the edge key also contains information about the\n+     * direction of the edge. The edge key is even when the edge is oriented in storage direction and odd\n+     * otherwise. You can use the edge key to retrieve an edge state in the associated direction using\n+     * {@link Graph#getEdgeIteratorStateForKey(int)}. Loop edges are always returned in 'forward' direction even when\n+     * you use an odd edge key.\n+     */\n+    int getEdgeKey();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a425ed5b5237dd1410c3b6262f9db0dbe5d22537"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDAxMjU3NQ==", "bodyText": "Oh yeah, excellent. I\u2018m not a fan of the (boolean reverse) parameter anywhere, I just kept to the convention. Let\u2018s drop it.", "url": "https://github.com/graphhopper/graphhopper/pull/2150#discussion_r500012575", "createdAt": "2020-10-06T05:24:44Z", "author": {"login": "michaz"}, "path": "core/src/main/java/com/graphhopper/util/EdgeIteratorState.java", "diffHunk": "@@ -73,6 +74,16 @@ public void setBool(boolean reverse, IntsRef ref, boolean value) {\n      */\n     int getEdge();\n \n+    /**\n+     * Returns the edge key of the current edge. The edge id can be derived from the edge key by calling\n+     * {@link GHUtility#getEdgeFromEdgeKey(int)}, but the edge key also contains information about the\n+     * direction of the edge. The edge key is even when the edge is oriented in storage direction and odd\n+     * otherwise. You can use the edge key to retrieve an edge state in the associated direction using\n+     * {@link Graph#getEdgeIteratorStateForKey(int)}. Loop edges are always returned in 'forward' direction even when\n+     * you use an odd edge key.\n+     */\n+    int getEdgeKey();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3Njg3Mg=="}, "originalCommit": {"oid": "a425ed5b5237dd1410c3b6262f9db0dbe5d22537"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1MjExNw==", "bodyText": "Ok so we keep edgeState.getEdgeKey() here \ud83d\udc4d", "url": "https://github.com/graphhopper/graphhopper/pull/2150#discussion_r500452117", "createdAt": "2020-10-06T16:54:58Z", "author": {"login": "easbar"}, "path": "core/src/main/java/com/graphhopper/util/EdgeIteratorState.java", "diffHunk": "@@ -73,6 +74,16 @@ public void setBool(boolean reverse, IntsRef ref, boolean value) {\n      */\n     int getEdge();\n \n+    /**\n+     * Returns the edge key of the current edge. The edge id can be derived from the edge key by calling\n+     * {@link GHUtility#getEdgeFromEdgeKey(int)}, but the edge key also contains information about the\n+     * direction of the edge. The edge key is even when the edge is oriented in storage direction and odd\n+     * otherwise. You can use the edge key to retrieve an edge state in the associated direction using\n+     * {@link Graph#getEdgeIteratorStateForKey(int)}. Loop edges are always returned in 'forward' direction even when\n+     * you use an odd edge key.\n+     */\n+    int getEdgeKey();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3Njg3Mg=="}, "originalCommit": {"oid": "a425ed5b5237dd1410c3b6262f9db0dbe5d22537"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyOTIxNjMyOnYy", "diffSide": "RIGHT", "path": "reader-gtfs/src/main/java/com/graphhopper/gtfs/WrapperGraph.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxODowMzoxMlrOHcn_dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwOTowMjowOVrOHdpmVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3NzM5OA==", "bodyText": "@michaz, can you check WrapperGraph here? I was not sure what is and what is not needed here.", "url": "https://github.com/graphhopper/graphhopper/pull/2150#discussion_r499777398", "createdAt": "2020-10-05T18:03:12Z", "author": {"login": "easbar"}, "path": "reader-gtfs/src/main/java/com/graphhopper/gtfs/WrapperGraph.java", "diffHunk": "@@ -112,6 +112,12 @@ public EdgeIteratorState getEdgeIteratorState(int edgeId, int adjNode) {\n         }\n     }\n \n+    @Override\n+    public EdgeIteratorState getEdgeIteratorStateForKey(int edgeKey) {\n+        // todonow?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a425ed5b5237dd1410c3b6262f9db0dbe5d22537"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg1MjMxMQ==", "bodyText": "postponed until we need this method", "url": "https://github.com/graphhopper/graphhopper/pull/2150#discussion_r500852311", "createdAt": "2020-10-07T09:02:09Z", "author": {"login": "easbar"}, "path": "reader-gtfs/src/main/java/com/graphhopper/gtfs/WrapperGraph.java", "diffHunk": "@@ -112,6 +112,12 @@ public EdgeIteratorState getEdgeIteratorState(int edgeId, int adjNode) {\n         }\n     }\n \n+    @Override\n+    public EdgeIteratorState getEdgeIteratorStateForKey(int edgeKey) {\n+        // todonow?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTc3NzM5OA=="}, "originalCommit": {"oid": "a425ed5b5237dd1410c3b6262f9db0dbe5d22537"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4647, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}