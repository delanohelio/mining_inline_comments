{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwNzcyMDIz", "number": 1934, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo1MjoyN1rODjb0Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMzowNDowOVrODzEYzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDgyNTM0OnYy", "diffSide": "RIGHT", "path": "reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo1MjoyN1rOFvPX1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDozNjo0MVrOFyOZOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3OTI1Mg==", "bodyText": "To improve readability also in tests we could remove the comments and reuse the previously defined variable carWithoutTurnCosts=\"profile1\" instead of just \"profile1\"?\nAnd why are the assertMoscowEdge/NodeBased calls removed? Because it is expected to work once the converter is tested?", "url": "https://github.com/graphhopper/graphhopper/pull/1934#discussion_r385079252", "createdAt": "2020-02-27T11:52:27Z", "author": {"login": "karussell"}, "path": "reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java", "diffHunk": "@@ -1385,17 +1416,26 @@ public void testDisablingLM() {\n \n     @Test\n     public void testTurnCostsOnOff() {\n+        final String profile1 = \"profile1\";\n+        final String profile2 = \"profile2\";\n+        final String vehicle = \"car\";\n+        final String weighting = \"fastest\";\n         GraphHopper hopper = createGraphHopper(\"car|turn_costs=true\").\n                 setOSMFile(MOSCOW).\n+                setProfiles(\n+                        new ProfileConfig(profile1).setVehicle(vehicle).setWeighting(weighting).setTurnCosts(false),\n+                        new ProfileConfig(profile2).setVehicle(vehicle).setWeighting(weighting).setTurnCosts(true)\n+                ).\n                 setStoreOnFlush(true);\n         hopper.importOrLoad();\n \n-        // no edge_based parameter -> use edge-based (since encoder supports it and no CH)\n-        assertMoscowEdgeBased(hopper, \"none\", false);\n-        // edge_based=false -> use node-based\n-        assertMoscowNodeBased(hopper, \"false\", false);\n-        // edge_based=true -> use edge-based\n-        assertMoscowEdgeBased(hopper, \"true\", false);\n+        GHRequest req = new GHRequest(55.813357, 37.5958585, 55.811042, 37.594689);\n+        // without turn costs\n+        req.setProfile(\"profile1\");\n+        assertEquals(400, hopper.route(req).getBest().getDistance(), 1);\n+        // with turn costs\n+        req.setProfile(\"profile2\");\n+        assertEquals(1044, hopper.route(req).getBest().getDistance(), 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d2e208acbfa518f6345db3603e8c400b76de483"}, "originalPosition": 869}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwODk1NA==", "bodyText": "To improve readability also in tests we could remove the comments and reuse the previously defined variable carWithoutTurnCosts=\"profile1\" instead of just \"profile1\"?\n\nYes. Good point.\n\nAnd why are the assertMoscowEdge/NodeBased calls removed? Because it is expected to work once the converter is tested?\n\nThey weren't removed, but only inlined, because it no longer made sense to re-use the code in this method", "url": "https://github.com/graphhopper/graphhopper/pull/1934#discussion_r388208954", "createdAt": "2020-03-05T10:36:41Z", "author": {"login": "easbar"}, "path": "reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java", "diffHunk": "@@ -1385,17 +1416,26 @@ public void testDisablingLM() {\n \n     @Test\n     public void testTurnCostsOnOff() {\n+        final String profile1 = \"profile1\";\n+        final String profile2 = \"profile2\";\n+        final String vehicle = \"car\";\n+        final String weighting = \"fastest\";\n         GraphHopper hopper = createGraphHopper(\"car|turn_costs=true\").\n                 setOSMFile(MOSCOW).\n+                setProfiles(\n+                        new ProfileConfig(profile1).setVehicle(vehicle).setWeighting(weighting).setTurnCosts(false),\n+                        new ProfileConfig(profile2).setVehicle(vehicle).setWeighting(weighting).setTurnCosts(true)\n+                ).\n                 setStoreOnFlush(true);\n         hopper.importOrLoad();\n \n-        // no edge_based parameter -> use edge-based (since encoder supports it and no CH)\n-        assertMoscowEdgeBased(hopper, \"none\", false);\n-        // edge_based=false -> use node-based\n-        assertMoscowNodeBased(hopper, \"false\", false);\n-        // edge_based=true -> use edge-based\n-        assertMoscowEdgeBased(hopper, \"true\", false);\n+        GHRequest req = new GHRequest(55.813357, 37.5958585, 55.811042, 37.594689);\n+        // without turn costs\n+        req.setProfile(\"profile1\");\n+        assertEquals(400, hopper.route(req).getBest().getDistance(), 1);\n+        // with turn costs\n+        req.setProfile(\"profile2\");\n+        assertEquals(1044, hopper.route(req).getBest().getDistance(), 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA3OTI1Mg=="}, "originalCommit": {"oid": "1d2e208acbfa518f6345db3603e8c400b76de483"}, "originalPosition": 869}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDgzODM2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/graphhopper/GHRequest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo1Njo0N1rOFvPfog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo1Njo0N1rOFvPfog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MTI1MA==", "bodyText": "Yes to both :) ? (profile should be in hints as long as the DefaultWeightingFactory gets only the HintsMap)", "url": "https://github.com/graphhopper/graphhopper/pull/1934#discussion_r385081250", "createdAt": "2020-02-27T11:56:47Z", "author": {"login": "karussell"}, "path": "api/src/main/java/com/graphhopper/GHRequest.java", "diffHunk": "@@ -34,6 +34,9 @@\n  */\n public class GHRequest {\n     private List<GHPoint> points;\n+    // todonow: keep this here or put it into hints, and even more important: can we remove vehicle+weighting from\n+    // hints?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d2e208acbfa518f6345db3603e8c400b76de483"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg0MTMwOnYy", "diffSide": "RIGHT", "path": "client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo1Nzo0NlrOFvPhbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDozNzo1OFrOFyOcNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MTcxMA==", "bodyText": "Why is this necessary? The only exception should be the key parameter that should go into the URL.", "url": "https://github.com/graphhopper/graphhopper/pull/1934#discussion_r385081710", "createdAt": "2020-02-27T11:57:46Z", "author": {"login": "karussell"}, "path": "client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java", "diffHunk": "@@ -236,6 +236,11 @@ private Request createPostRequest(GHRequest ghRequest) {\n         String url = tmpServiceURL + \"?\";\n         if (!Helper.isEmpty(key))\n             url += \"key=\" + key;\n+        if (!Helper.isEmpty(ghRequest.getProfile())) {\n+            if (!url.endsWith(\"?\"))\n+                url += \"&\";\n+            url += \"profile=\" + ghRequest.getProfile();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d2e208acbfa518f6345db3603e8c400b76de483"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwOTcxOA==", "bodyText": "Ok at some point I thought it would be useful to have profile as url parameter, so one can quickly decide (without looking at the request body) what kind of profile was requested (e.g. when filtering requests).", "url": "https://github.com/graphhopper/graphhopper/pull/1934#discussion_r388209718", "createdAt": "2020-03-05T10:37:58Z", "author": {"login": "easbar"}, "path": "client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java", "diffHunk": "@@ -236,6 +236,11 @@ private Request createPostRequest(GHRequest ghRequest) {\n         String url = tmpServiceURL + \"?\";\n         if (!Helper.isEmpty(key))\n             url += \"key=\" + key;\n+        if (!Helper.isEmpty(ghRequest.getProfile())) {\n+            if (!url.endsWith(\"?\"))\n+                url += \"&\";\n+            url += \"profile=\" + ghRequest.getProfile();\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MTcxMA=="}, "originalCommit": {"oid": "1d2e208acbfa518f6345db3603e8c400b76de483"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDg0NjgxOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo1OTo0N1rOFvPk-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMTo1OTo0N1rOFvPk-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTA4MjYxNw==", "bodyText": "We did this for backward compatibility but we should probably not do this anymore and just ensure that the created profiles follow a certain standard (lower case and no spaces etc)", "url": "https://github.com/graphhopper/graphhopper/pull/1934#discussion_r385082617", "createdAt": "2020-02-27T11:59:47Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/GraphHopper.java", "diffHunk": "@@ -1027,16 +1028,32 @@ public GHResponse route(GHRequest request) {\n         if (locationIndex == null)\n             throw new IllegalStateException(\"Location index not initialized\");\n \n-        // default handling\n-        String vehicle = request.getVehicle();\n-        if (vehicle.isEmpty()) {\n-            vehicle = getDefaultVehicle().toString();\n-            request.setVehicle(vehicle);\n-        }\n-\n         Lock readLock = readWriteLock.readLock();\n         readLock.lock();\n         try {\n+\n+            if (profilesByName.isEmpty()) {\n+                // todonow\n+                throw new IllegalArgumentException(\"XXX\");\n+            }\n+\n+            if (request.getProfile().isEmpty()) {\n+                throw new IllegalArgumentException(\"You need to specify a profile to perform a routing request\");\n+            }\n+\n+            // todonow: make sure trimmed, lower case etc.?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d2e208acbfa518f6345db3603e8c400b76de483"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTc5NzEyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/graphhopper/GHRequest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjo1NToyMVrOGHCCLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMTozMjozM1rOGHKa5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNjU0Mw==", "bodyText": "I wonder if we should remove get/SetVehicle/Weighting from HintsMap now? The problem is that when using GraphHopper as a Java library we pass GHRequest including a HintsMap to GraphHopper#route, but this method no longer accepts weighting/vehicle but needs a profile instead. On the other hand when we use GHRequest on the client side via GraphHopperWeb one can still use vehicle/weighting due to the ProfileResolver in the RouteResource (even though also here profile is the recommended parameter now). We could also  copy&paste GHRequest and HintsMap on the client side and adjust both versions accordingly, but I do not see a real reason to keep vehicle/weighting? When someone is updating the client version there will be a compile error and he/she will be forced to replace setVehicle/Weighting with setProfile, but is this a problem? Using older clients still works of course (because of ProfileResolver).\nUpdate: This is what it would look like without HintsMap: d2cc097. Maybe we could extract a constant for \"vehicle\" and \"weighting\", but otherwise I do not see a reason not to remove it at the moment.", "url": "https://github.com/graphhopper/graphhopper/pull/1934#discussion_r410026543", "createdAt": "2020-04-17T06:55:21Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/GHRequest.java", "diffHunk": "@@ -243,6 +243,8 @@ public String getWeighting() {\n      * By default it supports fastest and shortest. Or specify empty to use default.\n      */\n     public GHRequest setWeighting(String w) {\n+        // todonow: setting weighting/vehicle only works on the client side, but no longer with GHRequest in GraphHopper\n+        // should we remove it?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97b2c8ee6f5d3ad6c215f062cb56fe1772fed943"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1NTk4Mw==", "bodyText": "When someone is updating the client version there will be a compile error and he/she will be forced to replace setVehicle/Weighting with setProfile, but is this a problem?\n\nIn general this would be nice to have. Could we even remove HintsMap completely (replace with PMap)?\nAnd I see hints().putObject(\"vehicle\", \"bike\") is still possible so removing this should not be a problem. (E.g. we might not be fast enough to accept \"profile\" in the public API)", "url": "https://github.com/graphhopper/graphhopper/pull/1934#discussion_r410155983", "createdAt": "2020-04-17T11:13:49Z", "author": {"login": "karussell"}, "path": "api/src/main/java/com/graphhopper/GHRequest.java", "diffHunk": "@@ -243,6 +243,8 @@ public String getWeighting() {\n      * By default it supports fastest and shortest. Or specify empty to use default.\n      */\n     public GHRequest setWeighting(String w) {\n+        // todonow: setting weighting/vehicle only works on the client side, but no longer with GHRequest in GraphHopper\n+        // should we remove it?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNjU0Mw=="}, "originalCommit": {"oid": "97b2c8ee6f5d3ad6c215f062cb56fe1772fed943"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE2Mzk0Mg==", "bodyText": "In general this would be nice to have. Could we even remove HintsMap completely (replace with PMap)?\n\nAbsolutely I already did this here: d2cc097", "url": "https://github.com/graphhopper/graphhopper/pull/1934#discussion_r410163942", "createdAt": "2020-04-17T11:32:33Z", "author": {"login": "easbar"}, "path": "api/src/main/java/com/graphhopper/GHRequest.java", "diffHunk": "@@ -243,6 +243,8 @@ public String getWeighting() {\n      * By default it supports fastest and shortest. Or specify empty to use default.\n      */\n     public GHRequest setWeighting(String w) {\n+        // todonow: setting weighting/vehicle only works on the client side, but no longer with GHRequest in GraphHopper\n+        // should we remove it?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNjU0Mw=="}, "originalCommit": {"oid": "97b2c8ee6f5d3ad6c215f062cb56fe1772fed943"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTc5OTUwOnYy", "diffSide": "RIGHT", "path": "client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjo1NjoxM1rOGHCDsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMTozOToyNFrOGHKmbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNjkyOA==", "bodyText": "I guess this is so because the POST endpoint does not support gpx and we can leave as is here?", "url": "https://github.com/graphhopper/graphhopper/pull/1934#discussion_r410026928", "createdAt": "2020-04-17T06:56:13Z", "author": {"login": "easbar"}, "path": "client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java", "diffHunk": "@@ -248,6 +248,8 @@ public void doNotReadFinishInstruction() {\n \n     @Test\n     public void testSimpleExport() {\n+        // todonow: is it ok/meant to be that export() always uses get (regardless of the setting), looks like our\n+        // POST endpoint does not support gpx yet?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97b2c8ee6f5d3ad6c215f062cb56fe1772fed943"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1NzcxMQ==", "bodyText": "Ah, good catch. I think we should always prefer POST as the request is optionally compressed and has no other limitations (?)\n\nlooks like our POST endpoint does not support gpx yet?\n\ndoPost should support it or why do you think it does not?", "url": "https://github.com/graphhopper/graphhopper/pull/1934#discussion_r410157711", "createdAt": "2020-04-17T11:17:57Z", "author": {"login": "karussell"}, "path": "client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java", "diffHunk": "@@ -248,6 +248,8 @@ public void doNotReadFinishInstruction() {\n \n     @Test\n     public void testSimpleExport() {\n+        // todonow: is it ok/meant to be that export() always uses get (regardless of the setting), looks like our\n+        // POST endpoint does not support gpx yet?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNjkyOA=="}, "originalCommit": {"oid": "97b2c8ee6f5d3ad6c215f062cb56fe1772fed943"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE2Njg5Mg==", "bodyText": "doPost should support it or why do you think it does not?\n\nHm, yes you are right it should already support it. Ok then we should make GraphHopperWeb#export respect the postRequest flag. If I do this the test fails, but maybe thats for another issue. -> #1994", "url": "https://github.com/graphhopper/graphhopper/pull/1934#discussion_r410166892", "createdAt": "2020-04-17T11:39:24Z", "author": {"login": "easbar"}, "path": "client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java", "diffHunk": "@@ -248,6 +248,8 @@ public void doNotReadFinishInstruction() {\n \n     @Test\n     public void testSimpleExport() {\n+        // todonow: is it ok/meant to be that export() always uses get (regardless of the setting), looks like our\n+        // POST endpoint does not support gpx yet?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNjkyOA=="}, "originalCommit": {"oid": "97b2c8ee6f5d3ad6c215f062cb56fe1772fed943"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTgwMTIzOnYy", "diffSide": "RIGHT", "path": "web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjo1NzowMVrOGHCE7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzoyNTozNFrOGHN2Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNzI0NQ==", "bodyText": "Do you remember the reason this is done here instead of in GraphHopper? Can we move it over now?", "url": "https://github.com/graphhopper/graphhopper/pull/1934#discussion_r410027245", "createdAt": "2020-04-17T06:57:01Z", "author": {"login": "easbar"}, "path": "web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java", "diffHunk": "@@ -112,6 +107,7 @@ public Response doGet(\n                     + \"or equal to the number of points (\" + requestPoints.size() + \")\");\n \n         // TODO these checks should be only necessary once in the core, e.g. pointHints problems are currently ignored for POST requests\n+        // todonow: maybe its time to fix this?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97b2c8ee6f5d3ad6c215f062cb56fe1772fed943"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1OTI3Nw==", "bodyText": "Good question. I do not remember a reason why this is here.", "url": "https://github.com/graphhopper/graphhopper/pull/1934#discussion_r410159277", "createdAt": "2020-04-17T11:21:34Z", "author": {"login": "karussell"}, "path": "web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java", "diffHunk": "@@ -112,6 +107,7 @@ public Response doGet(\n                     + \"or equal to the number of points (\" + requestPoints.size() + \")\");\n \n         // TODO these checks should be only necessary once in the core, e.g. pointHints problems are currently ignored for POST requests\n+        // todonow: maybe its time to fix this?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNzI0NQ=="}, "originalCommit": {"oid": "97b2c8ee6f5d3ad6c215f062cb56fe1772fed943"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4NzE4MQ==", "bodyText": "Maybe for backward compatibility? Is it ok to add these checks for POST as well? If yes we can move them into GraphHopper#calcPaths.", "url": "https://github.com/graphhopper/graphhopper/pull/1934#discussion_r410187181", "createdAt": "2020-04-17T12:24:34Z", "author": {"login": "easbar"}, "path": "web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java", "diffHunk": "@@ -112,6 +107,7 @@ public Response doGet(\n                     + \"or equal to the number of points (\" + requestPoints.size() + \")\");\n \n         // TODO these checks should be only necessary once in the core, e.g. pointHints problems are currently ignored for POST requests\n+        // todonow: maybe its time to fix this?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNzI0NQ=="}, "originalCommit": {"oid": "97b2c8ee6f5d3ad6c215f062cb56fe1772fed943"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4ODgwNg==", "bodyText": "But there is more: Also the enableElevation, pointsEmpty checks and the \"start heading\" logic is missing for POST? All this should probably go into GraphHopper#calcPaths as well? Maybe this is also for another issue? -> #1996", "url": "https://github.com/graphhopper/graphhopper/pull/1934#discussion_r410188806", "createdAt": "2020-04-17T12:27:59Z", "author": {"login": "easbar"}, "path": "web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java", "diffHunk": "@@ -112,6 +107,7 @@ public Response doGet(\n                     + \"or equal to the number of points (\" + requestPoints.size() + \")\");\n \n         // TODO these checks should be only necessary once in the core, e.g. pointHints problems are currently ignored for POST requests\n+        // todonow: maybe its time to fix this?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNzI0NQ=="}, "originalCommit": {"oid": "97b2c8ee6f5d3ad6c215f062cb56fe1772fed943"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIyMDEwMw==", "bodyText": "Should be good for POST too, yes. Good idea with the new issue.", "url": "https://github.com/graphhopper/graphhopper/pull/1934#discussion_r410220103", "createdAt": "2020-04-17T13:25:34Z", "author": {"login": "karussell"}, "path": "web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java", "diffHunk": "@@ -112,6 +107,7 @@ public Response doGet(\n                     + \"or equal to the number of points (\" + requestPoints.size() + \")\");\n \n         // TODO these checks should be only necessary once in the core, e.g. pointHints problems are currently ignored for POST requests\n+        // todonow: maybe its time to fix this?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNzI0NQ=="}, "originalCommit": {"oid": "97b2c8ee6f5d3ad6c215f062cb56fe1772fed943"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTgwMTcxOnYy", "diffSide": "RIGHT", "path": "web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNjo1NzoxM1rOGHCFPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMjoyMzo1MlrOGHL0YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNzMyNQ==", "bodyText": "Probably not?", "url": "https://github.com/graphhopper/graphhopper/pull/1934#discussion_r410027325", "createdAt": "2020-04-17T06:57:13Z", "author": {"login": "easbar"}, "path": "web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java", "diffHunk": "@@ -151,10 +148,11 @@ public Response doGet(\n \n         GHResponse ghResponse = graphHopper.route(request);\n \n-        float took = sw.stop().getSeconds();\n+        long took = sw.stop().getNanos() / 1000;\n         String infoStr = httpReq.getRemoteAddr() + \" \" + httpReq.getLocale() + \" \" + httpReq.getHeader(\"User-Agent\");\n+        // todonow: is there any reason we should keep logging vehicle/weighting? maybe to keep track of the number of 'legacy' requests or something?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97b2c8ee6f5d3ad6c215f062cb56fe1772fed943"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE2MDE4Mw==", "bodyText": "I would indeed probably keep it until 2.0?", "url": "https://github.com/graphhopper/graphhopper/pull/1934#discussion_r410160183", "createdAt": "2020-04-17T11:23:36Z", "author": {"login": "karussell"}, "path": "web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java", "diffHunk": "@@ -151,10 +148,11 @@ public Response doGet(\n \n         GHResponse ghResponse = graphHopper.route(request);\n \n-        float took = sw.stop().getSeconds();\n+        long took = sw.stop().getNanos() / 1000;\n         String infoStr = httpReq.getRemoteAddr() + \" \" + httpReq.getLocale() + \" \" + httpReq.getHeader(\"User-Agent\");\n+        // todonow: is there any reason we should keep logging vehicle/weighting? maybe to keep track of the number of 'legacy' requests or something?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNzMyNQ=="}, "originalCommit": {"oid": "97b2c8ee6f5d3ad6c215f062cb56fe1772fed943"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE4Njg0OQ==", "bodyText": "For GET its already contained in httpReq.getQueryString(). Same for algoStr, but I added it explicitly now.", "url": "https://github.com/graphhopper/graphhopper/pull/1934#discussion_r410186849", "createdAt": "2020-04-17T12:23:52Z", "author": {"login": "easbar"}, "path": "web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java", "diffHunk": "@@ -151,10 +148,11 @@ public Response doGet(\n \n         GHResponse ghResponse = graphHopper.route(request);\n \n-        float took = sw.stop().getSeconds();\n+        long took = sw.stop().getNanos() / 1000;\n         String infoStr = httpReq.getRemoteAddr() + \" \" + httpReq.getLocale() + \" \" + httpReq.getHeader(\"User-Agent\");\n+        // todonow: is there any reason we should keep logging vehicle/weighting? maybe to keep track of the number of 'legacy' requests or something?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDAyNzMyNQ=="}, "originalCommit": {"oid": "97b2c8ee6f5d3ad6c215f062cb56fe1772fed943"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODc1ODU0OnYy", "diffSide": "RIGHT", "path": "web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMzowNDowOVrOGHfbpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxMjoyNDozMFrOGHqmew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwODE5OA==", "bodyText": "@easbar for better readability IMO we should use milliseconds: + took/1000f + \"ms...? (or just Math.round(took/1000))", "url": "https://github.com/graphhopper/graphhopper/pull/1934#discussion_r410508198", "createdAt": "2020-04-17T23:04:09Z", "author": {"login": "karussell"}, "path": "web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java", "diffHunk": "@@ -151,10 +148,10 @@ public Response doGet(\n \n         GHResponse ghResponse = graphHopper.route(request);\n \n-        float took = sw.stop().getSeconds();\n+        long took = sw.stop().getNanos() / 1000;\n         String infoStr = httpReq.getRemoteAddr() + \" \" + httpReq.getLocale() + \" \" + httpReq.getHeader(\"User-Agent\");\n         String logStr = httpReq.getQueryString() + \" \" + infoStr + \" \" + requestPoints + \", took:\"\n-                + took + \", \" + algoStr + \", \" + weighting + \", \" + vehicleStr;\n+                + took + \"micros, algo: \" + algoStr + \", profile: \" + profileName + \", \" + weightingVehicleLogStr;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a59067edb773c7d48bdda9cdb9663d261df81e4e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY2MTIxNw==", "bodyText": "Ok micros might still be a bit too optimistic ;) I changed to millisecond with one decimal place", "url": "https://github.com/graphhopper/graphhopper/pull/1934#discussion_r410661217", "createdAt": "2020-04-18T07:16:58Z", "author": {"login": "easbar"}, "path": "web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java", "diffHunk": "@@ -151,10 +148,10 @@ public Response doGet(\n \n         GHResponse ghResponse = graphHopper.route(request);\n \n-        float took = sw.stop().getSeconds();\n+        long took = sw.stop().getNanos() / 1000;\n         String infoStr = httpReq.getRemoteAddr() + \" \" + httpReq.getLocale() + \" \" + httpReq.getHeader(\"User-Agent\");\n         String logStr = httpReq.getQueryString() + \" \" + infoStr + \" \" + requestPoints + \", took:\"\n-                + took + \", \" + algoStr + \", \" + weighting + \", \" + vehicleStr;\n+                + took + \"micros, algo: \" + algoStr + \", profile: \" + profileName + \", \" + weightingVehicleLogStr;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwODE5OA=="}, "originalCommit": {"oid": "a59067edb773c7d48bdda9cdb9663d261df81e4e"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDY5MTE5NQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/graphhopper/graphhopper/pull/1934#discussion_r410691195", "createdAt": "2020-04-18T12:24:30Z", "author": {"login": "karussell"}, "path": "web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java", "diffHunk": "@@ -151,10 +148,10 @@ public Response doGet(\n \n         GHResponse ghResponse = graphHopper.route(request);\n \n-        float took = sw.stop().getSeconds();\n+        long took = sw.stop().getNanos() / 1000;\n         String infoStr = httpReq.getRemoteAddr() + \" \" + httpReq.getLocale() + \" \" + httpReq.getHeader(\"User-Agent\");\n         String logStr = httpReq.getQueryString() + \" \" + infoStr + \" \" + requestPoints + \", took:\"\n-                + took + \", \" + algoStr + \", \" + weighting + \", \" + vehicleStr;\n+                + took + \"micros, algo: \" + algoStr + \", profile: \" + profileName + \", \" + weightingVehicleLogStr;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwODE5OA=="}, "originalCommit": {"oid": "a59067edb773c7d48bdda9cdb9663d261df81e4e"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4734, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}