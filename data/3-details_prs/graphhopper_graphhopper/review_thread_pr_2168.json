{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNjY3MTQz", "number": 2168, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMToxNDo0NlrOEyTI-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjowMjo1N1rOEy4qpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTc3ODQ5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoadAccessParser.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMToxNDo0NlrOHo280Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMToyNjo1M1rOHo3XoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYwNTM5Mw==", "bodyText": "I'd argue that the restrictions are a defining property of a TransportationMode and would move them to the Enum.", "url": "https://github.com/graphhopper/graphhopper/pull/2168#discussion_r512605393", "createdAt": "2020-10-27T11:14:46Z", "author": {"login": "otbutz"}, "path": "core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoadAccessParser.java", "diffHunk": "@@ -60,10 +60,32 @@ public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, boolean fer\n         SpatialRuleSet spatialRuleSet = readerWay.getTag(\"spatial_rule_set\", null);\n         if (spatialRuleSet != null && spatialRuleSet != SpatialRuleSet.EMPTY) {\n             RoadClass roadClass = RoadClass.find(readerWay.getTag(\"highway\", \"\"));\n-            accessValue = spatialRuleSet.getAccess(roadClass, TransportationMode.MOTOR_VEHICLE, YES);\n+            accessValue = spatialRuleSet.getAccess(roadClass, TransportationMode.CAR, YES);\n         }\n-            \n+\n         roadAccessEnc.setEnum(false, edgeFlags, accessValue);\n         return edgeFlags;\n     }\n+\n+    public static List<String> toOSMRestrictions(TransportationMode mode) {\n+        switch (mode) {\n+            case FOOT:\n+                return Arrays.asList(\"foot\", \"access\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6096fbea8db19ee280632c0c955c32134d122b58"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYwNjkyNA==", "bodyText": "But only for OSM data. If you use the transportation mode with anything else, these values might be different?", "url": "https://github.com/graphhopper/graphhopper/pull/2168#discussion_r512606924", "createdAt": "2020-10-27T11:17:27Z", "author": {"login": "boldtrn"}, "path": "core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoadAccessParser.java", "diffHunk": "@@ -60,10 +60,32 @@ public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, boolean fer\n         SpatialRuleSet spatialRuleSet = readerWay.getTag(\"spatial_rule_set\", null);\n         if (spatialRuleSet != null && spatialRuleSet != SpatialRuleSet.EMPTY) {\n             RoadClass roadClass = RoadClass.find(readerWay.getTag(\"highway\", \"\"));\n-            accessValue = spatialRuleSet.getAccess(roadClass, TransportationMode.MOTOR_VEHICLE, YES);\n+            accessValue = spatialRuleSet.getAccess(roadClass, TransportationMode.CAR, YES);\n         }\n-            \n+\n         roadAccessEnc.setEnum(false, edgeFlags, accessValue);\n         return edgeFlags;\n     }\n+\n+    public static List<String> toOSMRestrictions(TransportationMode mode) {\n+        switch (mode) {\n+            case FOOT:\n+                return Arrays.asList(\"foot\", \"access\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYwNTM5Mw=="}, "originalCommit": {"oid": "6096fbea8db19ee280632c0c955c32134d122b58"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYwNzAzMQ==", "bodyText": "The naming is IMO OSM-specific and should be in the parser", "url": "https://github.com/graphhopper/graphhopper/pull/2168#discussion_r512607031", "createdAt": "2020-10-27T11:17:37Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoadAccessParser.java", "diffHunk": "@@ -60,10 +60,32 @@ public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, boolean fer\n         SpatialRuleSet spatialRuleSet = readerWay.getTag(\"spatial_rule_set\", null);\n         if (spatialRuleSet != null && spatialRuleSet != SpatialRuleSet.EMPTY) {\n             RoadClass roadClass = RoadClass.find(readerWay.getTag(\"highway\", \"\"));\n-            accessValue = spatialRuleSet.getAccess(roadClass, TransportationMode.MOTOR_VEHICLE, YES);\n+            accessValue = spatialRuleSet.getAccess(roadClass, TransportationMode.CAR, YES);\n         }\n-            \n+\n         roadAccessEnc.setEnum(false, edgeFlags, accessValue);\n         return edgeFlags;\n     }\n+\n+    public static List<String> toOSMRestrictions(TransportationMode mode) {\n+        switch (mode) {\n+            case FOOT:\n+                return Arrays.asList(\"foot\", \"access\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYwNTM5Mw=="}, "originalCommit": {"oid": "6096fbea8db19ee280632c0c955c32134d122b58"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYxMDMwNA==", "bodyText": "OSM-specific\n\nGood point", "url": "https://github.com/graphhopper/graphhopper/pull/2168#discussion_r512610304", "createdAt": "2020-10-27T11:23:29Z", "author": {"login": "otbutz"}, "path": "core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoadAccessParser.java", "diffHunk": "@@ -60,10 +60,32 @@ public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, boolean fer\n         SpatialRuleSet spatialRuleSet = readerWay.getTag(\"spatial_rule_set\", null);\n         if (spatialRuleSet != null && spatialRuleSet != SpatialRuleSet.EMPTY) {\n             RoadClass roadClass = RoadClass.find(readerWay.getTag(\"highway\", \"\"));\n-            accessValue = spatialRuleSet.getAccess(roadClass, TransportationMode.MOTOR_VEHICLE, YES);\n+            accessValue = spatialRuleSet.getAccess(roadClass, TransportationMode.CAR, YES);\n         }\n-            \n+\n         roadAccessEnc.setEnum(false, edgeFlags, accessValue);\n         return edgeFlags;\n     }\n+\n+    public static List<String> toOSMRestrictions(TransportationMode mode) {\n+        switch (mode) {\n+            case FOOT:\n+                return Arrays.asList(\"foot\", \"access\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYwNTM5Mw=="}, "originalCommit": {"oid": "6096fbea8db19ee280632c0c955c32134d122b58"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYxMjI1Nw==", "bodyText": "Also some restrictions could be not existent in the TransportationMode that exist in OSM", "url": "https://github.com/graphhopper/graphhopper/pull/2168#discussion_r512612257", "createdAt": "2020-10-27T11:26:53Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoadAccessParser.java", "diffHunk": "@@ -60,10 +60,32 @@ public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, boolean fer\n         SpatialRuleSet spatialRuleSet = readerWay.getTag(\"spatial_rule_set\", null);\n         if (spatialRuleSet != null && spatialRuleSet != SpatialRuleSet.EMPTY) {\n             RoadClass roadClass = RoadClass.find(readerWay.getTag(\"highway\", \"\"));\n-            accessValue = spatialRuleSet.getAccess(roadClass, TransportationMode.MOTOR_VEHICLE, YES);\n+            accessValue = spatialRuleSet.getAccess(roadClass, TransportationMode.CAR, YES);\n         }\n-            \n+\n         roadAccessEnc.setEnum(false, edgeFlags, accessValue);\n         return edgeFlags;\n     }\n+\n+    public static List<String> toOSMRestrictions(TransportationMode mode) {\n+        switch (mode) {\n+            case FOOT:\n+                return Arrays.asList(\"foot\", \"access\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYwNTM5Mw=="}, "originalCommit": {"oid": "6096fbea8db19ee280632c0c955c32134d122b58"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMTk5Mzk5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoadAccessParser.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMjowNTo1OVrOHo47Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjozMDoxMVrOHpy8EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYzNzc3NQ==", "bodyText": "Shouldn't we add a case for each mode and throw an exception in default? We could add a unittest to ensure that all TransportationModes return a value for toOSMRestrictions()", "url": "https://github.com/graphhopper/graphhopper/pull/2168#discussion_r512637775", "createdAt": "2020-10-27T12:05:59Z", "author": {"login": "otbutz"}, "path": "core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoadAccessParser.java", "diffHunk": "@@ -60,10 +60,32 @@ public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, boolean fer\n         SpatialRuleSet spatialRuleSet = readerWay.getTag(\"spatial_rule_set\", null);\n         if (spatialRuleSet != null && spatialRuleSet != SpatialRuleSet.EMPTY) {\n             RoadClass roadClass = RoadClass.find(readerWay.getTag(\"highway\", \"\"));\n-            accessValue = spatialRuleSet.getAccess(roadClass, TransportationMode.MOTOR_VEHICLE, YES);\n+            accessValue = spatialRuleSet.getAccess(roadClass, TransportationMode.CAR, YES);\n         }\n-            \n+\n         roadAccessEnc.setEnum(false, edgeFlags, accessValue);\n         return edgeFlags;\n     }\n+\n+    public static List<String> toOSMRestrictions(TransportationMode mode) {\n+        switch (mode) {\n+            case FOOT:\n+                return Arrays.asList(\"foot\", \"access\");\n+            case VEHICLE:\n+                return Arrays.asList(\"vehicle\", \"access\");\n+            case BIKE:\n+                return Arrays.asList(\"bicycle\", \"vehicle\", \"access\");\n+            case MOTOR_VEHICLE:\n+                return Arrays.asList(\"motor_vehicle\", \"vehicle\", \"access\");\n+            case CAR:\n+                return Arrays.asList(\"motorcar\", \"motor_vehicle\", \"vehicle\", \"access\");\n+            case MOTORCYCLE:\n+                return Arrays.asList(\"motorcycle\", \"motor_vehicle\", \"vehicle\", \"access\");\n+            case HGV:\n+                return Arrays.asList(\"hgv\", \"motor_vehicle\", \"vehicle\", \"access\");\n+            default:\n+                return mode.isMotorVehicle() ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6096fbea8db19ee280632c0c955c32134d122b58"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU0MjkwMA==", "bodyText": "Good question. Having this default might make it easier for forks but forcing a complete list of TransportationModes also sounds good.", "url": "https://github.com/graphhopper/graphhopper/pull/2168#discussion_r513542900", "createdAt": "2020-10-28T15:33:50Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoadAccessParser.java", "diffHunk": "@@ -60,10 +60,32 @@ public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, boolean fer\n         SpatialRuleSet spatialRuleSet = readerWay.getTag(\"spatial_rule_set\", null);\n         if (spatialRuleSet != null && spatialRuleSet != SpatialRuleSet.EMPTY) {\n             RoadClass roadClass = RoadClass.find(readerWay.getTag(\"highway\", \"\"));\n-            accessValue = spatialRuleSet.getAccess(roadClass, TransportationMode.MOTOR_VEHICLE, YES);\n+            accessValue = spatialRuleSet.getAccess(roadClass, TransportationMode.CAR, YES);\n         }\n-            \n+\n         roadAccessEnc.setEnum(false, edgeFlags, accessValue);\n         return edgeFlags;\n     }\n+\n+    public static List<String> toOSMRestrictions(TransportationMode mode) {\n+        switch (mode) {\n+            case FOOT:\n+                return Arrays.asList(\"foot\", \"access\");\n+            case VEHICLE:\n+                return Arrays.asList(\"vehicle\", \"access\");\n+            case BIKE:\n+                return Arrays.asList(\"bicycle\", \"vehicle\", \"access\");\n+            case MOTOR_VEHICLE:\n+                return Arrays.asList(\"motor_vehicle\", \"vehicle\", \"access\");\n+            case CAR:\n+                return Arrays.asList(\"motorcar\", \"motor_vehicle\", \"vehicle\", \"access\");\n+            case MOTORCYCLE:\n+                return Arrays.asList(\"motorcycle\", \"motor_vehicle\", \"vehicle\", \"access\");\n+            case HGV:\n+                return Arrays.asList(\"hgv\", \"motor_vehicle\", \"vehicle\", \"access\");\n+            default:\n+                return mode.isMotorVehicle() ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYzNzc3NQ=="}, "originalCommit": {"oid": "6096fbea8db19ee280632c0c955c32134d122b58"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU1NTA1MQ==", "bodyText": "I'd argue that if a fork wants to extend TransportMode they need think about what restrictions are appropriate.", "url": "https://github.com/graphhopper/graphhopper/pull/2168#discussion_r513555051", "createdAt": "2020-10-28T15:48:47Z", "author": {"login": "otbutz"}, "path": "core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoadAccessParser.java", "diffHunk": "@@ -60,10 +60,32 @@ public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, boolean fer\n         SpatialRuleSet spatialRuleSet = readerWay.getTag(\"spatial_rule_set\", null);\n         if (spatialRuleSet != null && spatialRuleSet != SpatialRuleSet.EMPTY) {\n             RoadClass roadClass = RoadClass.find(readerWay.getTag(\"highway\", \"\"));\n-            accessValue = spatialRuleSet.getAccess(roadClass, TransportationMode.MOTOR_VEHICLE, YES);\n+            accessValue = spatialRuleSet.getAccess(roadClass, TransportationMode.CAR, YES);\n         }\n-            \n+\n         roadAccessEnc.setEnum(false, edgeFlags, accessValue);\n         return edgeFlags;\n     }\n+\n+    public static List<String> toOSMRestrictions(TransportationMode mode) {\n+        switch (mode) {\n+            case FOOT:\n+                return Arrays.asList(\"foot\", \"access\");\n+            case VEHICLE:\n+                return Arrays.asList(\"vehicle\", \"access\");\n+            case BIKE:\n+                return Arrays.asList(\"bicycle\", \"vehicle\", \"access\");\n+            case MOTOR_VEHICLE:\n+                return Arrays.asList(\"motor_vehicle\", \"vehicle\", \"access\");\n+            case CAR:\n+                return Arrays.asList(\"motorcar\", \"motor_vehicle\", \"vehicle\", \"access\");\n+            case MOTORCYCLE:\n+                return Arrays.asList(\"motorcycle\", \"motor_vehicle\", \"vehicle\", \"access\");\n+            case HGV:\n+                return Arrays.asList(\"hgv\", \"motor_vehicle\", \"vehicle\", \"access\");\n+            default:\n+                return mode.isMotorVehicle() ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYzNzc3NQ=="}, "originalCommit": {"oid": "6096fbea8db19ee280632c0c955c32134d122b58"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3ODg2MQ==", "bodyText": "The problem is, that if you can't change this when using GraphHopper as a lib, you would actually have to fork it.", "url": "https://github.com/graphhopper/graphhopper/pull/2168#discussion_r513578861", "createdAt": "2020-10-28T16:18:10Z", "author": {"login": "boldtrn"}, "path": "core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoadAccessParser.java", "diffHunk": "@@ -60,10 +60,32 @@ public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, boolean fer\n         SpatialRuleSet spatialRuleSet = readerWay.getTag(\"spatial_rule_set\", null);\n         if (spatialRuleSet != null && spatialRuleSet != SpatialRuleSet.EMPTY) {\n             RoadClass roadClass = RoadClass.find(readerWay.getTag(\"highway\", \"\"));\n-            accessValue = spatialRuleSet.getAccess(roadClass, TransportationMode.MOTOR_VEHICLE, YES);\n+            accessValue = spatialRuleSet.getAccess(roadClass, TransportationMode.CAR, YES);\n         }\n-            \n+\n         roadAccessEnc.setEnum(false, edgeFlags, accessValue);\n         return edgeFlags;\n     }\n+\n+    public static List<String> toOSMRestrictions(TransportationMode mode) {\n+        switch (mode) {\n+            case FOOT:\n+                return Arrays.asList(\"foot\", \"access\");\n+            case VEHICLE:\n+                return Arrays.asList(\"vehicle\", \"access\");\n+            case BIKE:\n+                return Arrays.asList(\"bicycle\", \"vehicle\", \"access\");\n+            case MOTOR_VEHICLE:\n+                return Arrays.asList(\"motor_vehicle\", \"vehicle\", \"access\");\n+            case CAR:\n+                return Arrays.asList(\"motorcar\", \"motor_vehicle\", \"vehicle\", \"access\");\n+            case MOTORCYCLE:\n+                return Arrays.asList(\"motorcycle\", \"motor_vehicle\", \"vehicle\", \"access\");\n+            case HGV:\n+                return Arrays.asList(\"hgv\", \"motor_vehicle\", \"vehicle\", \"access\");\n+            default:\n+                return mode.isMotorVehicle() ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYzNzc3NQ=="}, "originalCommit": {"oid": "6096fbea8db19ee280632c0c955c32134d122b58"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4NDMwNg==", "bodyText": "I do not see a big problem that this is not customizable (it wasn't before and there are currently no use cases known that need this).", "url": "https://github.com/graphhopper/graphhopper/pull/2168#discussion_r513584306", "createdAt": "2020-10-28T16:25:14Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoadAccessParser.java", "diffHunk": "@@ -60,10 +60,32 @@ public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, boolean fer\n         SpatialRuleSet spatialRuleSet = readerWay.getTag(\"spatial_rule_set\", null);\n         if (spatialRuleSet != null && spatialRuleSet != SpatialRuleSet.EMPTY) {\n             RoadClass roadClass = RoadClass.find(readerWay.getTag(\"highway\", \"\"));\n-            accessValue = spatialRuleSet.getAccess(roadClass, TransportationMode.MOTOR_VEHICLE, YES);\n+            accessValue = spatialRuleSet.getAccess(roadClass, TransportationMode.CAR, YES);\n         }\n-            \n+\n         roadAccessEnc.setEnum(false, edgeFlags, accessValue);\n         return edgeFlags;\n     }\n+\n+    public static List<String> toOSMRestrictions(TransportationMode mode) {\n+        switch (mode) {\n+            case FOOT:\n+                return Arrays.asList(\"foot\", \"access\");\n+            case VEHICLE:\n+                return Arrays.asList(\"vehicle\", \"access\");\n+            case BIKE:\n+                return Arrays.asList(\"bicycle\", \"vehicle\", \"access\");\n+            case MOTOR_VEHICLE:\n+                return Arrays.asList(\"motor_vehicle\", \"vehicle\", \"access\");\n+            case CAR:\n+                return Arrays.asList(\"motorcar\", \"motor_vehicle\", \"vehicle\", \"access\");\n+            case MOTORCYCLE:\n+                return Arrays.asList(\"motorcycle\", \"motor_vehicle\", \"vehicle\", \"access\");\n+            case HGV:\n+                return Arrays.asList(\"hgv\", \"motor_vehicle\", \"vehicle\", \"access\");\n+            default:\n+                return mode.isMotorVehicle() ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYzNzc3NQ=="}, "originalCommit": {"oid": "6096fbea8db19ee280632c0c955c32134d122b58"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU4ODI0MQ==", "bodyText": "TransportationMode is an enum so it can't be extended by library users without creating a fork?", "url": "https://github.com/graphhopper/graphhopper/pull/2168#discussion_r513588241", "createdAt": "2020-10-28T16:30:11Z", "author": {"login": "otbutz"}, "path": "core/src/main/java/com/graphhopper/routing/util/parsers/OSMRoadAccessParser.java", "diffHunk": "@@ -60,10 +60,32 @@ public IntsRef handleWayTags(IntsRef edgeFlags, ReaderWay readerWay, boolean fer\n         SpatialRuleSet spatialRuleSet = readerWay.getTag(\"spatial_rule_set\", null);\n         if (spatialRuleSet != null && spatialRuleSet != SpatialRuleSet.EMPTY) {\n             RoadClass roadClass = RoadClass.find(readerWay.getTag(\"highway\", \"\"));\n-            accessValue = spatialRuleSet.getAccess(roadClass, TransportationMode.MOTOR_VEHICLE, YES);\n+            accessValue = spatialRuleSet.getAccess(roadClass, TransportationMode.CAR, YES);\n         }\n-            \n+\n         roadAccessEnc.setEnum(false, edgeFlags, accessValue);\n         return edgeFlags;\n     }\n+\n+    public static List<String> toOSMRestrictions(TransportationMode mode) {\n+        switch (mode) {\n+            case FOOT:\n+                return Arrays.asList(\"foot\", \"access\");\n+            case VEHICLE:\n+                return Arrays.asList(\"vehicle\", \"access\");\n+            case BIKE:\n+                return Arrays.asList(\"bicycle\", \"vehicle\", \"access\");\n+            case MOTOR_VEHICLE:\n+                return Arrays.asList(\"motor_vehicle\", \"vehicle\", \"access\");\n+            case CAR:\n+                return Arrays.asList(\"motorcar\", \"motor_vehicle\", \"vehicle\", \"access\");\n+            case MOTORCYCLE:\n+                return Arrays.asList(\"motorcycle\", \"motor_vehicle\", \"vehicle\", \"access\");\n+            case HGV:\n+                return Arrays.asList(\"hgv\", \"motor_vehicle\", \"vehicle\", \"access\");\n+            default:\n+                return mode.isMotorVehicle() ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYzNzc3NQ=="}, "originalCommit": {"oid": "6096fbea8db19ee280632c0c955c32134d122b58"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNzkyNjc5OnYy", "diffSide": "LEFT", "path": "core/src/main/java/com/graphhopper/routing/util/TransportationMode.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjowMjo1N1rOHpxosg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxNjoxMjoxOFrOHpyGSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU2Njg5OA==", "bodyText": "Do we want to keep the hierarchy here?\ne.g\n    OTHER()\n    FOOT(OTHER)\n    VEHICLE(OTHER)\n    BIKE(VEHICLE),\n    MOTOR_VEHICLE(VEHICLE),\n    CAR(MOTOR_VEHICLE),\n    MOTORCYCLE(MOTOR_VEHICLE),\n    HGV(MOTOR_VEHICLE);\n\n    TransportationMode(TransporationMode parent) {\n         // ...\nThis would allow for constructs like this:\n    HGV.is(VEHICLE) == true", "url": "https://github.com/graphhopper/graphhopper/pull/2168#discussion_r513566898", "createdAt": "2020-10-28T16:02:57Z", "author": {"login": "otbutz"}, "path": "core/src/main/java/com/graphhopper/routing/util/TransportationMode.java", "diffHunk": "@@ -15,28 +15,26 @@\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  */\n-package com.graphhopper.routing.util.spatialrules;\n+package com.graphhopper.routing.util;\n \n /**\n- * Defining different types of transportation.\n- * <p>\n- * We started with a subset of the definition found in the OSM Wiki\n- * https://wiki.openstreetmap.org/wiki/Key:access#Land-based_transportation\n+ * Define different types of transportation that are used to create and populate our encoded values from a data source\n+ * like OpenStreetMap.\n  *\n  * @author Robin Boldt\n+ * @author Peter Karich\n  */\n public enum TransportationMode {\n+    OTHER(false), FOOT(false), VEHICLE(false), BIKE(false),\n+    MOTOR_VEHICLE(true), CAR(true), MOTORCYCLE(true), HGV(true);\n \n-    OTHER(0), MOTOR_VEHICLE(1), BICYCLE(2), FOOT(3);\n+    private final boolean motorVehicle;\n \n-    private final int value;\n-\n-    TransportationMode(int value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6096fbea8db19ee280632c0c955c32134d122b58"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU3NDQ3Mg==", "bodyText": "Not sure. We could also create a second method isVehicle ... I even had this in the enum before but removed it as I did not find a meaningful use case.", "url": "https://github.com/graphhopper/graphhopper/pull/2168#discussion_r513574472", "createdAt": "2020-10-28T16:12:18Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/util/TransportationMode.java", "diffHunk": "@@ -15,28 +15,26 @@\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  */\n-package com.graphhopper.routing.util.spatialrules;\n+package com.graphhopper.routing.util;\n \n /**\n- * Defining different types of transportation.\n- * <p>\n- * We started with a subset of the definition found in the OSM Wiki\n- * https://wiki.openstreetmap.org/wiki/Key:access#Land-based_transportation\n+ * Define different types of transportation that are used to create and populate our encoded values from a data source\n+ * like OpenStreetMap.\n  *\n  * @author Robin Boldt\n+ * @author Peter Karich\n  */\n public enum TransportationMode {\n+    OTHER(false), FOOT(false), VEHICLE(false), BIKE(false),\n+    MOTOR_VEHICLE(true), CAR(true), MOTORCYCLE(true), HGV(true);\n \n-    OTHER(0), MOTOR_VEHICLE(1), BICYCLE(2), FOOT(3);\n+    private final boolean motorVehicle;\n \n-    private final int value;\n-\n-    TransportationMode(int value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzU2Njg5OA=="}, "originalCommit": {"oid": "6096fbea8db19ee280632c0c955c32134d122b58"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4659, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}