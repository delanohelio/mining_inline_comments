{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NTgxNDMx", "number": 2091, "title": "Improve tag extraction", "bodyText": "support for parsing short ton weight limits\n move speed limit parsing into OSMValueExtractor\n utility to check parsers using JSON data provided by https://taginfo.openstreetmap.org/", "createdAt": "2020-07-21T15:28:28Z", "url": "https://github.com/graphhopper/graphhopper/pull/2091", "merged": true, "mergeCommit": {"oid": "3546c2ef8bcd74c128f6598a2b2c775e2f5c8d65"}, "closed": true, "closedAt": "2020-09-23T10:12:01Z", "author": {"login": "otbutz"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3XieDgBqjM1NzQ5MzgwNjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdLoXAYAFqTQ5NDQyNDA0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e50ef56f3fdb6fa16ab091fc02ebe2337317700", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/9e50ef56f3fdb6fa16ab091fc02ebe2337317700", "committedDate": "2020-07-21T15:25:27Z", "message": "Add a test for speedlimit \"none\""}, "afterCommit": {"oid": "7386ce0fd47b86542934a12287c2346f30f696a7", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/7386ce0fd47b86542934a12287c2346f30f696a7", "committedDate": "2020-07-22T09:36:35Z", "message": "Use the same Delta for all tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7386ce0fd47b86542934a12287c2346f30f696a7", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/7386ce0fd47b86542934a12287c2346f30f696a7", "committedDate": "2020-07-22T09:36:35Z", "message": "Use the same Delta for all tests"}, "afterCommit": {"oid": "5e10c292e74c34a3fe3c238d80dc18fb31a4d62c", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/5e10c292e74c34a3fe3c238d80dc18fb31a4d62c", "committedDate": "2020-07-22T10:02:08Z", "message": "Use the same Delta for all tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0NjkyMzI4", "url": "https://github.com/graphhopper/graphhopper/pull/2091#pullrequestreview-454692328", "createdAt": "2020-07-24T07:47:31Z", "commit": {"oid": "5e10c292e74c34a3fe3c238d80dc18fb31a4d62c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNzo0NzozMVrOG2mHeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQwNzo0NzozMVrOG2mHeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTkwMDc5Mw==", "bodyText": "is this separate method necessary because of getMaxSpeed? If we do this breaking change shouldn't we refactor everything to use NaN instead of negative values? ... ah, but it can still happen that a speed value is set or mapped 0 ... hmmh", "url": "https://github.com/graphhopper/graphhopper/pull/2091#discussion_r459900793", "createdAt": "2020-07-24T07:47:31Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java", "diffHunk": "@@ -222,20 +223,35 @@ public double getMaxSpeed() {\n     }\n \n     /**\n-     * @return -1 if no maxspeed found\n+     * @return {@link Double#NaN} if no maxspeed found\n      */\n     protected double getMaxSpeed(ReaderWay way) {\n-        double maxSpeed = parseSpeed(way.getTag(\"maxspeed\"));\n-        double fwdSpeed = parseSpeed(way.getTag(\"maxspeed:forward\"));\n-        if (fwdSpeed >= 0 && (maxSpeed < 0 || fwdSpeed < maxSpeed))\n+        double maxSpeed = OSMValueExtractor.stringToKmh(way.getTag(\"maxspeed\"));\n+        double fwdSpeed = OSMValueExtractor.stringToKmh(way.getTag(\"maxspeed:forward\"));\n+        if (isValidSpeed(fwdSpeed) && (!isValidSpeed(maxSpeed) || fwdSpeed < maxSpeed))\n             maxSpeed = fwdSpeed;\n \n-        double backSpeed = parseSpeed(way.getTag(\"maxspeed:backward\"));\n-        if (backSpeed >= 0 && (maxSpeed < 0 || backSpeed < maxSpeed))\n+        double backSpeed = OSMValueExtractor.stringToKmh(way.getTag(\"maxspeed:backward\"));\n+        if (isValidSpeed(backSpeed) && (!isValidSpeed(maxSpeed) || backSpeed < maxSpeed))\n             maxSpeed = backSpeed;\n \n         return maxSpeed;\n     }\n+    \n+    /**\n+     * @return <i>true</i> if the given speed is not {@link Double#NaN} or negative\n+     */\n+    protected boolean isValidSpeed(double speed) {\n+        return !Double.isNaN(speed) && speed >= 0;\n+    }\n+\n+    /**\n+     * @return <i>true</i> if the given speed is not {@link Double#NaN} and is\n+     *         bigger than zero\n+     */\n+    protected boolean isPositiveSpeed(double speed) {\n+        return !Double.isNaN(speed) && speed > 0;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5e10c292e74c34a3fe3c238d80dc18fb31a4d62c"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b0a9ef0d00bedc113545073d80c562aee6de5be1", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/b0a9ef0d00bedc113545073d80c562aee6de5be1", "committedDate": "2020-07-23T08:15:00Z", "message": "Add tag extractor test utility"}, "afterCommit": {"oid": "c2b9191823e0e251d3d33865f9ec97f3b86cd605", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/c2b9191823e0e251d3d33865f9ec97f3b86cd605", "committedDate": "2020-07-28T08:26:49Z", "message": "Add tag extractor test utility"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e27d60ec91eee847033d2d4e353f2e4c562a2c29", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/e27d60ec91eee847033d2d4e353f2e4c562a2c29", "committedDate": "2020-07-29T14:52:00Z", "message": "Ignore speeds below the storeable minimum"}, "afterCommit": {"oid": "ab9b6461c4a34368f6833bad9318a5d135d839bf", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/ab9b6461c4a34368f6833bad9318a5d135d839bf", "committedDate": "2020-07-29T15:04:35Z", "message": "Ignore speeds below the storeable minimum"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNjQ0NjEx", "url": "https://github.com/graphhopper/graphhopper/pull/2091#pullrequestreview-460644611", "createdAt": "2020-08-04T09:23:15Z", "commit": {"oid": "ab9b6461c4a34368f6833bad9318a5d135d839bf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOToyMzoxNVrOG7YZvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOToyMzoxNVrOG7YZvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkxODk3NA==", "bodyText": "This is not that easy and dependent on how the EncodedValue for the speed is configured. So we could easily store 0.1km/h with enough bits...", "url": "https://github.com/graphhopper/graphhopper/pull/2091#discussion_r464918974", "createdAt": "2020-08-04T09:23:15Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/ev/MaxSpeed.java", "diffHunk": "@@ -33,6 +33,10 @@\n      * The speed value used for road sections without known speed limit.\n      */\n     public static final double UNSET_SPEED = Double.POSITIVE_INFINITY;\n+    /**\n+     * The lowest speed value which can be stored.\n+     */\n+    public static final double MINIMUM_STOREABLE_SPEED = 5;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9b6461c4a34368f6833bad9318a5d135d839bf"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNjQ2MjA5", "url": "https://github.com/graphhopper/graphhopper/pull/2091#pullrequestreview-460646209", "createdAt": "2020-08-04T09:25:25Z", "commit": {"oid": "ab9b6461c4a34368f6833bad9318a5d135d839bf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOToyNToyNVrOG7Ye4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOToyNToyNVrOG7Ye4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyMDI5MA==", "bodyText": "I would not do this and instead ignore all these soft tags. IMO tagging a height with such a value is a tagging issue and we should not use it or even convert it into an explicit max height.", "url": "https://github.com/graphhopper/graphhopper/pull/2091#discussion_r464920290", "createdAt": "2020-08-04T09:25:25Z", "author": {"login": "karussell"}, "path": "core/src/main/java/com/graphhopper/routing/util/parsers/helpers/OSMValueExtractor.java", "diffHunk": "@@ -80,6 +86,12 @@ public static double stringToMeter(String value) {\n         value = FEET_PATTERN.matcher(value).replaceAll(\"ft\");\n         if (isInvalidValue(value))\n             return Double.NaN;\n+        \n+        // only used for maxheight\n+        if (\"below_default\".equals(value)) {\n+            return 2; // assume that cars are able to pass\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9b6461c4a34368f6833bad9318a5d135d839bf"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b5900929bc44e1856f29c9df178a9deee873d4f", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/0b5900929bc44e1856f29c9df178a9deee873d4f", "committedDate": "2020-08-11T13:09:41Z", "message": "Add support for parsing short tons"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e50e9c9795fe73c3e476bfdb0e56f71dd76c28e", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/7e50e9c9795fe73c3e476bfdb0e56f71dd76c28e", "committedDate": "2020-08-11T13:09:41Z", "message": "Extend unittest to check for short ton conversion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce38b7968fc35b62d0f4496d12dfbaee6c8f3293", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/ce38b7968fc35b62d0f4496d12dfbaee6c8f3293", "committedDate": "2020-08-11T13:09:41Z", "message": "Move speed parser logic into OSMValueExtractor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8352840608a509afe0282f58b4273a0f929e284f", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/8352840608a509afe0282f58b4273a0f929e284f", "committedDate": "2020-08-11T13:09:42Z", "message": "Use Double.NaN for unparseable speed values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e55b755ca6d62143f1f47330c30a6745b30e9f0f", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/e55b755ca6d62143f1f47330c30a6745b30e9f0f", "committedDate": "2020-08-11T13:09:42Z", "message": "Add a test for speedlimit \"none\""}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7427d0c6cd58ec9b00fde82f9d738387eb8e35b2", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/7427d0c6cd58ec9b00fde82f9d738387eb8e35b2", "committedDate": "2020-08-11T13:09:42Z", "message": "Use the same Delta for all tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc92a04812f9b278f015ddcd413d0ec338d67530", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/bc92a04812f9b278f015ddcd413d0ec338d67530", "committedDate": "2020-08-11T13:09:42Z", "message": "Add tag extractor test utility"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3b1b8cf700f260de1858d042ef4e8531aa6d0b9", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/c3b1b8cf700f260de1858d042ef4e8531aa6d0b9", "committedDate": "2020-08-11T13:09:42Z", "message": "Ignore non-positive speed values"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab9b6461c4a34368f6833bad9318a5d135d839bf", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/ab9b6461c4a34368f6833bad9318a5d135d839bf", "committedDate": "2020-07-29T15:04:35Z", "message": "Ignore speeds below the storeable minimum"}, "afterCommit": {"oid": "c3b1b8cf700f260de1858d042ef4e8531aa6d0b9", "author": {"user": null}, "url": "https://github.com/graphhopper/graphhopper/commit/c3b1b8cf700f260de1858d042ef4e8531aa6d0b9", "committedDate": "2020-08-11T13:09:42Z", "message": "Ignore non-positive speed values"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28f5478d5df9edd73090c408e396add428c3987d", "author": {"user": {"login": "karussell", "name": "Peter"}}, "url": "https://github.com/graphhopper/graphhopper/commit/28f5478d5df9edd73090c408e396add428c3987d", "committedDate": "2020-09-23T08:31:29Z", "message": "Merge branch 'master' into extractor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NDI0MDQ2", "url": "https://github.com/graphhopper/graphhopper/pull/2091#pullrequestreview-494424046", "createdAt": "2020-09-23T08:31:44Z", "commit": {"oid": "28f5478d5df9edd73090c408e396add428c3987d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4679, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}