{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3ODc4NDEx", "number": 2456, "title": "Add function name lookup for c++ functions.", "bodyText": "add function name lookup for c++ functions\nWhen compiled with Clang++, C++ functions have only been resolved by their linkage name (i.e. when calling a C(++) function from javascript, one had to call them by their linkage names). Now, an additional lookup is done to also look for the C++ function name (such that calling a C++ function from javascript/... by its 'real' name is enabled).", "createdAt": "2020-05-14T09:43:41Z", "url": "https://github.com/oracle/graal/pull/2456", "merged": true, "mergeCommit": {"oid": "7ed1a1fb160aa9ee9ab679eb3636b62175b2f87f"}, "closed": true, "closedAt": "2020-06-03T14:49:44Z", "author": {"login": "pichristoph"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcif9oegBqjMzNDczNTQ1MDE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclrvFzAH2gAyNDE3ODc4NDExOjdlZDFhMWZiMTYwYWE5ZWU5YWI2NzllYjM2MzZiNjIxNzViMmY4N2Y=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4dc6eb9a616ee09c43fd820b9fec037d6caf52d1", "author": {"user": {"login": "pichristoph", "name": null}}, "url": "https://github.com/oracle/graal/commit/4dc6eb9a616ee09c43fd820b9fec037d6caf52d1", "committedDate": "2020-05-14T09:31:05Z", "message": "Merge branch 'feature/cppsupport' of https://github.com/pichristoph/graal into feature/cppsupport\n\nupdate after rebase"}, "afterCommit": {"oid": "4e52b81c387a730c731595ee87f72a0edc0a783d", "author": {"user": {"login": "pichristoph", "name": null}}, "url": "https://github.com/oracle/graal/commit/4e52b81c387a730c731595ee87f72a0edc0a783d", "committedDate": "2020-05-18T13:32:38Z", "message": "Fix primary checkstyle error in Javadoc comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fa928e7004f2ef7853f49acc1afc611b4e494b5c", "author": {"user": {"login": "pichristoph", "name": null}}, "url": "https://github.com/oracle/graal/commit/fa928e7004f2ef7853f49acc1afc611b4e494b5c", "committedDate": "2020-05-18T15:41:36Z", "message": "Add polyglot function to declare classes"}, "afterCommit": {"oid": "4e52b81c387a730c731595ee87f72a0edc0a783d", "author": {"user": {"login": "pichristoph", "name": null}}, "url": "https://github.com/oracle/graal/commit/4e52b81c387a730c731595ee87f72a0edc0a783d", "committedDate": "2020-05-18T13:32:38Z", "message": "Fix primary checkstyle error in Javadoc comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a6ca8716ce4b44f73a816a22ebd222d3a9acd54e", "author": {"user": {"login": "pichristoph", "name": null}}, "url": "https://github.com/oracle/graal/commit/a6ca8716ce4b44f73a816a22ebd222d3a9acd54e", "committedDate": "2020-05-25T08:45:02Z", "message": "Create class-like InteropType data structure to also store methods"}, "afterCommit": {"oid": "4e52b81c387a730c731595ee87f72a0edc0a783d", "author": {"user": {"login": "pichristoph", "name": null}}, "url": "https://github.com/oracle/graal/commit/4e52b81c387a730c731595ee87f72a0edc0a783d", "committedDate": "2020-05-18T13:32:38Z", "message": "Fix primary checkstyle error in Javadoc comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4e52b81c387a730c731595ee87f72a0edc0a783d", "author": {"user": {"login": "pichristoph", "name": null}}, "url": "https://github.com/oracle/graal/commit/4e52b81c387a730c731595ee87f72a0edc0a783d", "committedDate": "2020-05-18T13:32:38Z", "message": "Fix primary checkstyle error in Javadoc comment"}, "afterCommit": {"oid": "0f4757d7a2a419f49b8f332ed2d4a7e03d4de972", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/0f4757d7a2a419f49b8f332ed2d4a7e03d4de972", "committedDate": "2020-05-25T14:47:48Z", "message": "Fix primary checkstyle error in Javadoc comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1132d347f0cfc5d484b26fe99bd5d89c0286b2ad", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/1132d347f0cfc5d484b26fe99bd5d89c0286b2ad", "committedDate": "2020-05-25T15:24:13Z", "message": "add access to 'displayable' function name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0c311b52b12cd826753d75ffbf8bef6658a6256", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/a0c311b52b12cd826753d75ffbf8bef6658a6256", "committedDate": "2020-05-25T15:24:29Z", "message": "add looking for linkage/displayName while looking for functions\n\nIn order to call methods by their 'real' declared name even if the LLVM\nbitcode provides only the linkage name in the signature, a different\nlookup has to be done."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59faf9e35b1e8798155f226397be5407139ef9f2", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/59faf9e35b1e8798155f226397be5407139ef9f2", "committedDate": "2020-05-25T15:24:30Z", "message": "add tests for looking up C++ function names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b9f22916f45d0617d22e6a3e7b779a412ce948f", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/8b9f22916f45d0617d22e6a3e7b779a412ce948f", "committedDate": "2020-05-25T15:24:32Z", "message": "Fix primary checkstyle error in Javadoc comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f4757d7a2a419f49b8f332ed2d4a7e03d4de972", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/0f4757d7a2a419f49b8f332ed2d4a7e03d4de972", "committedDate": "2020-05-25T14:47:48Z", "message": "Fix primary checkstyle error in Javadoc comment"}, "afterCommit": {"oid": "8b9f22916f45d0617d22e6a3e7b779a412ce948f", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/8b9f22916f45d0617d22e6a3e7b779a412ce948f", "committedDate": "2020-05-25T15:24:32Z", "message": "Fix primary checkstyle error in Javadoc comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3OTk0NTQx", "url": "https://github.com/oracle/graal/pull/2456#pullrequestreview-417994541", "createdAt": "2020-05-26T06:11:44Z", "commit": {"oid": "8b9f22916f45d0617d22e6a3e7b779a412ce948f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoxMTo0NFrOGaP3Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNjoxOTozMlrOGaQByw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3NjA4Mw==", "bodyText": "I think this is not needed and makes it harder to understand. The caller (LLVMParser) can call parser.parseLinkageName(runtime) directly.", "url": "https://github.com/oracle/graal/pull/2456#discussion_r430176083", "createdAt": "2020-05-26T06:11:44Z", "author": {"login": "zapster"}, "path": "sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/LazyToTruffleConverterImpl.java", "diffHunk": "@@ -508,4 +508,8 @@ private void copyStructArgumentsToFrame(List<LLVMStatementNode> initializers, No\n \n         return formalParamInits;\n     }\n+\n+    public void resolveLinkageName() {\n+        parser.parseLinkageName(runtime);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9f22916f45d0617d22e6a3e7b779a412ce948f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3NjQzNg==", "bodyText": "I think we should have Javadoc that mentions that  MetadataSubprogramOnly throws.", "url": "https://github.com/oracle/graal/pull/2456#discussion_r430176436", "createdAt": "2020-05-26T06:12:49Z", "author": {"login": "zapster"}, "path": "sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/listeners/FunctionMDOnly.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates.\n+ *\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are\n+ * permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of\n+ * conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and/or other materials provided\n+ * with the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written\n+ * permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n+ * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n+ * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n+ * OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.oracle.truffle.llvm.parser.listeners;\n+\n+import com.oracle.truffle.llvm.parser.model.IRScope;\n+import com.oracle.truffle.llvm.parser.model.functions.FunctionDefinition;\n+import com.oracle.truffle.llvm.parser.scanner.Block;\n+import com.oracle.truffle.llvm.parser.scanner.RecordBuffer;\n+\n+public final class FunctionMDOnly implements ParserListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9f22916f45d0617d22e6a3e7b779a412ce948f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3Njg3Mg==", "bodyText": "I think we should mention why it is ok that exit is never called in the case where MetadataSubprogramOnly throws.", "url": "https://github.com/oracle/graal/pull/2456#discussion_r430176872", "createdAt": "2020-05-26T06:14:06Z", "author": {"login": "zapster"}, "path": "sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/listeners/FunctionMDOnly.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates.\n+ *\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are\n+ * permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of\n+ * conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and/or other materials provided\n+ * with the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written\n+ * permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n+ * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n+ * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n+ * OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.oracle.truffle.llvm.parser.listeners;\n+\n+import com.oracle.truffle.llvm.parser.model.IRScope;\n+import com.oracle.truffle.llvm.parser.model.functions.FunctionDefinition;\n+import com.oracle.truffle.llvm.parser.scanner.Block;\n+import com.oracle.truffle.llvm.parser.scanner.RecordBuffer;\n+\n+public final class FunctionMDOnly implements ParserListener {\n+\n+    private final FunctionDefinition function;\n+\n+    private final Types types;\n+\n+    private final IRScope scope;\n+\n+    public FunctionMDOnly(IRScope scope, Types types, FunctionDefinition function) {\n+        this.scope = scope;\n+        this.types = types;\n+        this.function = function;\n+    }\n+\n+    public void setupScope() {\n+        scope.startLocalScope(function);\n+\n+    }\n+\n+    @Override\n+    public ParserListener enter(Block block) {\n+        switch (block) {\n+            case METADATA:\n+            case METADATA_ATTACHMENT:\n+            case METADATA_KIND:\n+                return new MetadataSubprogramOnly(types, scope);\n+\n+            default:\n+                return ParserListener.DEFAULT;\n+        }\n+    }\n+\n+    @Override\n+    public void exit() {\n+        // no linkageName found", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9f22916f45d0617d22e6a3e7b779a412ce948f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3Nzc4OA==", "bodyText": "Please add Javadoc that describes what this class is used for (finding MDSubprogram) and how the result is returned (via throwing MDSubprogramParserException).", "url": "https://github.com/oracle/graal/pull/2456#discussion_r430177788", "createdAt": "2020-05-26T06:16:46Z", "author": {"login": "zapster"}, "path": "sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/listeners/MetadataSubprogramOnly.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates.\n+ *\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are\n+ * permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of\n+ * conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and/or other materials provided\n+ * with the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written\n+ * permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n+ * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n+ * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n+ * OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.oracle.truffle.llvm.parser.listeners;\n+\n+import com.oracle.truffle.llvm.parser.metadata.MDBaseNode;\n+import com.oracle.truffle.llvm.parser.metadata.MDString;\n+import com.oracle.truffle.llvm.parser.metadata.MDSubprogram;\n+import com.oracle.truffle.llvm.parser.model.IRScope;\n+import com.oracle.truffle.llvm.parser.scanner.RecordBuffer;\n+\n+public class MetadataSubprogramOnly extends Metadata {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9f22916f45d0617d22e6a3e7b779a412ce948f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3ODE2Ng==", "bodyText": "For readability, I'd change for LLVM from C++, ... to for LLVM code produced from C++ sources", "url": "https://github.com/oracle/graal/pull/2456#discussion_r430178166", "createdAt": "2020-05-26T06:17:54Z", "author": {"login": "zapster"}, "path": "sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/model/functions/FunctionDefinition.java", "diffHunk": "@@ -91,6 +93,21 @@ public String getSourceName() {\n         return SourceFunction.DEFAULT_SOURCE_NAME.equals(scopeName) ? null : scopeName;\n     }\n \n+    public String getDisplayName() {\n+        // for LLVM from C++, function.name stores the linkage name, but not 'original' C++ name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9f22916f45d0617d22e6a3e7b779a412ce948f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3ODQzMQ==", "bodyText": "Multiline comments (/* */) and proper sentences to make the formatter happy.", "url": "https://github.com/oracle/graal/pull/2456#discussion_r430178431", "createdAt": "2020-05-26T06:18:35Z", "author": {"login": "zapster"}, "path": "sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/model/functions/LazyFunctionParser.java", "diffHunk": "@@ -77,4 +79,23 @@ public void parse(DebugInfoFunctionProcessor diProcessor, Source bitcodeSource,\n             }\n         }\n     }\n+\n+    public void parseLinkageName(LLVMParserRuntime runtime) {\n+        synchronized (scope) {\n+            FunctionMDOnly parser = new FunctionMDOnly(scope, types, function);\n+            try {\n+                parser.setupScope();\n+                scanner.scanBlock(parser);\n+            } catch (MDSubprogramParsedException e) {\n+                // if linkageName/displayName is found, an exception is thrown (s.t.\n+                // parsing/searching does not have to be continued)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9f22916f45d0617d22e6a3e7b779a412ce948f"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE3ODc2Mw==", "bodyText": "I'd create a new test class for testing C++ members (e.g. CxxMembersTest). Not a blocker, though.", "url": "https://github.com/oracle/graal/pull/2456#discussion_r430178763", "createdAt": "2020-05-26T06:19:32Z", "author": {"login": "zapster"}, "path": "sulong/tests/com.oracle.truffle.llvm.tests/src/com/oracle/truffle/llvm/tests/interop/MembersTest.java", "diffHunk": "@@ -41,19 +41,26 @@\n public class MembersTest extends InteropTestBase {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b9f22916f45d0617d22e6a3e7b779a412ce948f"}, "originalPosition": 1}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bac2bc4264299829148707f07a1c994d75d2f707", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/bac2bc4264299829148707f07a1c994d75d2f707", "committedDate": "2020-05-26T11:22:10Z", "message": "Add SulongEngineOption for C++ interop features, minor style fixes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a75e0b6be915aea0c34fc5143c374e3a887b76f", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/7a75e0b6be915aea0c34fc5143c374e3a887b76f", "committedDate": "2020-05-26T13:58:49Z", "message": "Enable SulongEngineOption for interop tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5OTIyMTMy", "url": "https://github.com/oracle/graal/pull/2456#pullrequestreview-419922132", "createdAt": "2020-05-28T09:12:47Z", "commit": {"oid": "7a75e0b6be915aea0c34fc5143c374e3a887b76f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOToxMjo0N1rOGbsg4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwOToxMjo0N1rOGbsg4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTY5NDA1MA==", "bodyText": "You can use parserRuntime.getContext() here, that's more efficient. LLVMLanguage.getContext() needs to look up the context from a thread-local.", "url": "https://github.com/oracle/graal/pull/2456#discussion_r431694050", "createdAt": "2020-05-28T09:12:47Z", "author": {"login": "rschatz"}, "path": "sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/LLVMParser.java", "diffHunk": "@@ -126,6 +128,10 @@ private void defineFunction(FunctionSymbol functionSymbol, ModelModule model, Da\n         LLVMFunction llvmFunction = LLVMFunction.create(functionSymbol.getName(), library, function, functionSymbol.getType(), runtime.getBitcodeID(), functionSymbol.getIndex(),\n                         functionDefinition.isExported());\n         runtime.getFileScope().register(llvmFunction);\n+        final boolean cxxInterop = LLVMLanguage.getContext().getEnv().getOptions().get(SulongEngineOption.CXX_INTEROP);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a75e0b6be915aea0c34fc5143c374e3a887b76f"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d306e79b11dd9f32ae2fba734dc61991da9651cf", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/d306e79b11dd9f32ae2fba734dc61991da9651cf", "committedDate": "2020-05-28T09:40:25Z", "message": "Improve efficiency by replacing LLVMLanguage.getContext()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5OTkxMjQ3", "url": "https://github.com/oracle/graal/pull/2456#pullrequestreview-419991247", "createdAt": "2020-05-28T10:50:20Z", "commit": {"oid": "d306e79b11dd9f32ae2fba734dc61991da9651cf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDo1MDoyMVrOGbvxjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMDo1MDoyMVrOGbvxjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc0NzQ2OQ==", "bodyText": "that import looks wrong", "url": "https://github.com/oracle/graal/pull/2456#discussion_r431747469", "createdAt": "2020-05-28T10:50:21Z", "author": {"login": "zapster"}, "path": "sulong/projects/com.oracle.truffle.llvm.parser/src/com/oracle/truffle/llvm/parser/LLVMParser.java", "diffHunk": "@@ -53,6 +53,8 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.antlr.v4.runtime.ParserRuleContext;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d306e79b11dd9f32ae2fba734dc61991da9651cf"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ed1a1fb160aa9ee9ab679eb3636b62175b2f87f", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/7ed1a1fb160aa9ee9ab679eb3636b62175b2f87f", "committedDate": "2020-05-28T10:58:38Z", "message": "Remove unneeded imports"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1006, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}