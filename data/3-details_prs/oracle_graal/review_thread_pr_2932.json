{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2NzcxODgy", "number": 2932, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzowMjowMlrOEvw7NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzozNjoyNlrOEvx_DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTIwMTE2OnYy", "diffSide": "RIGHT", "path": "sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/interop/access/LLVMInteropType.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzowMjowMlrOHk7Nxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzowMjowMlrOHk7Nxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ4MDk2Nw==", "bodyText": "Here, I am not sure whether this solution is correct, because from an interop view point, this is an UnknownIdentifierException (=i.e. the foreign object, e.g. JavaScript, does not have a specific field/method). However, from a C++ side, it is an array access by index.", "url": "https://github.com/oracle/graal/pull/2932#discussion_r508480967", "createdAt": "2020-10-20T13:02:02Z", "author": {"login": "pichristoph"}, "path": "sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/interop/access/LLVMInteropType.java", "diffHunk": "@@ -313,27 +391,124 @@ public Method findMethodByArgumentsWithSelf(String memberName, Object[] argument\n                     return method;\n                 }\n             }\n-            if (superclass != null) {\n-                return superclass.findMethodByArgumentsWithSelf(memberName, arguments);\n-            } else if (expectedArgCount >= 0) {\n+            for (Clazz c : superclasses) {\n+                Method m = c.findMethodByArgumentsWithSelf(memberName, arguments);\n+                if (m != null) {\n+                    return m;\n+                }\n+            }\n+            if (expectedArgCount >= 0) {\n                 throw ArityException.create(expectedArgCount, arguments.length - 1);\n             }\n             return null;\n         }\n \n-        public Method findMethodByArguments(Object receiver, String memberName, Object[] arguments) throws ArityException, UnknownIdentifierException {\n-            Object[] newArgs = new Object[arguments.length + 1];\n-            newArgs[0] = receiver;\n-            for (int i = 1; i < arguments.length; i++) {\n-                newArgs[i] = arguments[i - 1];\n+    }\n+\n+    public static final class VTable {\n+        final HashMap<Long, Method> table;\n+        final Clazz clazz;\n+\n+        VTable(Clazz clazz) {\n+            this.clazz = clazz;\n+            this.table = new HashMap<>();\n+            List<Clazz> list = new LinkedList<>(clazz.getSuperClasses());\n+            list.add(0, clazz);\n+            do {\n+                Clazz c = list.remove(0);\n+                list.addAll(c.superclasses);\n+                for (Method m : c.methods) {\n+                    if (m != null && m.getVirtualIndex() >= 0) {\n+                        table.putIfAbsent(m.virtualIndex, m);\n+                    }\n+                }\n+            } while (list.size() > 0);\n+        }\n+\n+        public LLVMInteropType.Method findMethod(long virtualIndex) {\n+            final LLVMInteropType.Method m = table.get(virtualIndex);\n+            if (m == null) {\n+                CompilerDirectives.transferToInterpreter();\n+                throw new NoSuchElementException(String.format(\"No method in %s with virtualIndex %d\", clazz.name, virtualIndex));\n             }\n-            Method method = findMethodByArgumentsWithSelf(memberName, newArgs);\n-            if (method == null) {\n-                throw UnknownIdentifierException.create(memberName);\n+            return m;\n+        }\n+    }\n+\n+    @ExportLibrary(value = InteropLibrary.class)\n+    public static final class VTableObjectPair implements TruffleObject {\n+        private final VTable vtable;\n+        private final Object foreign;\n+\n+        private VTableObjectPair(VTable vtable, Object foreign) {\n+            this.vtable = vtable;\n+            this.foreign = foreign;\n+        }\n+\n+        public static VTableObjectPair create(VTable vtable, Object foreign) {\n+            return new VTableObjectPair(vtable, foreign);\n+        }\n+\n+        @SuppressWarnings(\"static-method\")\n+        @ExportMessage\n+        boolean hasArrayElements() {\n+            return true;\n+        }\n+\n+        @ExportMessage\n+        Object readArrayElement(long index) throws UnsupportedMessageException {\n+            try {\n+                final String methodName = vtable.findMethod(index).getName();\n+                try {\n+                    Object readMember = InteropLibrary.getUncached(foreign).readMember(foreign, methodName);\n+                    return new RemoveSelfArgument(readMember);\n+                } catch (UnknownIdentifierException e) {\n+                    final String msg = String.format(\"External method %s (identifier \\\"%s\\\") not found in type %s\", methodName, e.getUnknownIdentifier(), foreign.getClass().getSimpleName());\n+                    throw new IllegalStateException(msg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca75b79fe919107edee725562a8a909aca56fc7b"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTIwODQyOnYy", "diffSide": "RIGHT", "path": "sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/interop/access/LLVMInteropVtableAccessNode.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzowMzozOVrOHk7SLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzowMzozOVrOHk7SLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ4MjA5Mw==", "bodyText": "Here, maybe there is a fast operation to get the pointer size (8 bytes) appropriately, if the '8' should not be hard-coded here.", "url": "https://github.com/oracle/graal/pull/2932#discussion_r508482093", "createdAt": "2020-10-20T13:03:39Z", "author": {"login": "pichristoph"}, "path": "sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/interop/access/LLVMInteropVtableAccessNode.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates.\n+ *\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are\n+ * permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of\n+ * conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and/or other materials provided\n+ * with the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written\n+ * permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n+ * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n+ * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n+ * OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.oracle.truffle.llvm.runtime.interop.access;\n+\n+import com.oracle.truffle.api.dsl.GenerateUncached;\n+import com.oracle.truffle.api.dsl.Specialization;\n+import com.oracle.truffle.api.interop.ArityException;\n+import com.oracle.truffle.api.interop.InteropLibrary;\n+import com.oracle.truffle.api.interop.UnsupportedMessageException;\n+import com.oracle.truffle.api.interop.UnsupportedTypeException;\n+import com.oracle.truffle.api.library.CachedLibrary;\n+import com.oracle.truffle.llvm.runtime.nodes.api.LLVMLoadNode;\n+import com.oracle.truffle.llvm.runtime.nodes.api.LLVMNode;\n+import com.oracle.truffle.llvm.runtime.pointer.LLVMPointer;\n+\n+@GenerateUncached\n+public abstract class LLVMInteropVtableAccessNode extends LLVMNode {\n+    abstract Object execute(Object vtablePointer, long virtualIndex, Object[] arguments) throws UnsupportedTypeException, ArityException, UnsupportedMessageException;\n+\n+    public static LLVMInteropVtableAccessNode create() {\n+        return LLVMInteropVtableAccessNodeGen.create();\n+    }\n+\n+    @Specialization\n+    Object doPointer(LLVMPointer vtablePointer, long virtualIndex, Object[] arguments, @CachedLibrary(limit = \"5\") InteropLibrary interop)\n+                    throws UnsupportedTypeException, ArityException, UnsupportedMessageException {\n+\n+        LLVMPointer vtableElementPointer = vtablePointer.increment(virtualIndex * 8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca75b79fe919107edee725562a8a909aca56fc7b"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTM3NDg0OnYy", "diffSide": "RIGHT", "path": "sulong/tests/com.oracle.truffle.llvm.tests.interop.native/interop/vtableTest1.cpp", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzozNjoyNlrOHk85WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzozNjoyNlrOHk85WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUwODUwNQ==", "bodyText": "Maybe there is a way to remove this method and make its declaration abstract (virtual int foo(int x)=0) if it works together with compilation of gate tests.", "url": "https://github.com/oracle/graal/pull/2932#discussion_r508508505", "createdAt": "2020-10-20T13:36:26Z", "author": {"login": "pichristoph"}, "path": "sulong/tests/com.oracle.truffle.llvm.tests.interop.native/interop/vtableTest1.cpp", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates.\n+ *\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are\n+ * permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of\n+ * conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and/or other materials provided\n+ * with the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written\n+ * permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n+ * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n+ * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n+ * OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+#include <polyglot.h>\n+\n+//-----------------------------------------test via polyglot API\n+\n+class A {\n+public:\n+    int k;\n+    virtual int foo(int x);\n+};\n+\n+int A::foo(int x) {\n+    return 0 * x;\n+} //dummy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca75b79fe919107edee725562a8a909aca56fc7b"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 716, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}