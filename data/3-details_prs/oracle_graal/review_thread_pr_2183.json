{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4ODk2ODc4", "number": 2183, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTo0OToyMlrODiYFlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODoxNTo1MVrODjXhnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzcyODIwOnYy", "diffSide": "RIGHT", "path": "sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/nodes/asm/syscall/LLVMSyscallNode.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNTo0OToyMlrOFtllzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQxMToxODowOVrOFuCTgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM0NjEyNQ==", "bodyText": "I'd rename cachedsyscallNum to cachedSyscallNum.", "url": "https://github.com/oracle/graal/pull/2183#discussion_r383346125", "createdAt": "2020-02-24T15:49:22Z", "author": {"login": "zapster"}, "path": "sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/nodes/asm/syscall/LLVMSyscallNode.java", "diffHunk": "@@ -41,29 +41,29 @@\n import com.oracle.truffle.llvm.runtime.memory.LLVMSyscallOperationNode;\n import com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode;\n \n-@NodeChild(\"rax\")\n-@NodeChild(\"rdi\")\n-@NodeChild(\"rsi\")\n-@NodeChild(\"rdx\")\n-@NodeChild(\"r10\")\n-@NodeChild(\"r8\")\n-@NodeChild(\"r9\")\n-public abstract class LLVMAMD64SyscallNode extends LLVMExpressionNode {\n+@NodeChild(\"syscallNum\")\n+@NodeChild(\"arg1\")\n+@NodeChild(\"arg2\")\n+@NodeChild(\"arg3\")\n+@NodeChild(\"arg4\")\n+@NodeChild(\"arg5\")\n+@NodeChild(\"arg6\")\n+public abstract class LLVMSyscallNode extends LLVMExpressionNode {\n     protected static final int NUM_SYSCALLS = 332;\n \n-    protected LLVMSyscallOperationNode createNode(long rax) {\n-        return LLVMLanguage.getLanguage().getCapability(PlatformCapability.class).createSyscallNode(rax);\n+    protected LLVMSyscallOperationNode createNode(long syscallNum) {\n+        return LLVMLanguage.getLanguage().getCapability(PlatformCapability.class).createSyscallNode(syscallNum);\n     }\n \n-    @Specialization(guards = \"rax == cachedRax\", limit = \"NUM_SYSCALLS\")\n-    protected long cachedSyscall(@SuppressWarnings(\"unused\") long rax, Object rdi, Object rsi, Object rdx, Object r10, Object r8, Object r9,\n-                    @Cached(\"rax\") @SuppressWarnings(\"unused\") long cachedRax,\n-                    @Cached(\"createNode(rax)\") LLVMSyscallOperationNode node,\n+    @Specialization(guards = \"syscallNum == cachedsyscallNum\", limit = \"NUM_SYSCALLS\")\n+    protected long cachedSyscall(@SuppressWarnings(\"unused\") long syscallNum, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6,\n+                    @Cached(\"syscallNum\") @SuppressWarnings(\"unused\") long cachedsyscallNum,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f58aa9040f50146dc53fbaff98c425a3a51ba27d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxNjMyMw==", "bodyText": "Done.", "url": "https://github.com/oracle/graal/pull/2183#discussion_r383816323", "createdAt": "2020-02-25T11:17:33Z", "author": {"login": "a74nh"}, "path": "sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/nodes/asm/syscall/LLVMSyscallNode.java", "diffHunk": "@@ -41,29 +41,29 @@\n import com.oracle.truffle.llvm.runtime.memory.LLVMSyscallOperationNode;\n import com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode;\n \n-@NodeChild(\"rax\")\n-@NodeChild(\"rdi\")\n-@NodeChild(\"rsi\")\n-@NodeChild(\"rdx\")\n-@NodeChild(\"r10\")\n-@NodeChild(\"r8\")\n-@NodeChild(\"r9\")\n-public abstract class LLVMAMD64SyscallNode extends LLVMExpressionNode {\n+@NodeChild(\"syscallNum\")\n+@NodeChild(\"arg1\")\n+@NodeChild(\"arg2\")\n+@NodeChild(\"arg3\")\n+@NodeChild(\"arg4\")\n+@NodeChild(\"arg5\")\n+@NodeChild(\"arg6\")\n+public abstract class LLVMSyscallNode extends LLVMExpressionNode {\n     protected static final int NUM_SYSCALLS = 332;\n \n-    protected LLVMSyscallOperationNode createNode(long rax) {\n-        return LLVMLanguage.getLanguage().getCapability(PlatformCapability.class).createSyscallNode(rax);\n+    protected LLVMSyscallOperationNode createNode(long syscallNum) {\n+        return LLVMLanguage.getLanguage().getCapability(PlatformCapability.class).createSyscallNode(syscallNum);\n     }\n \n-    @Specialization(guards = \"rax == cachedRax\", limit = \"NUM_SYSCALLS\")\n-    protected long cachedSyscall(@SuppressWarnings(\"unused\") long rax, Object rdi, Object rsi, Object rdx, Object r10, Object r8, Object r9,\n-                    @Cached(\"rax\") @SuppressWarnings(\"unused\") long cachedRax,\n-                    @Cached(\"createNode(rax)\") LLVMSyscallOperationNode node,\n+    @Specialization(guards = \"syscallNum == cachedsyscallNum\", limit = \"NUM_SYSCALLS\")\n+    protected long cachedSyscall(@SuppressWarnings(\"unused\") long syscallNum, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6,\n+                    @Cached(\"syscallNum\") @SuppressWarnings(\"unused\") long cachedsyscallNum,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM0NjEyNQ=="}, "originalCommit": {"oid": "f58aa9040f50146dc53fbaff98c425a3a51ba27d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzgxNjU3OA==", "bodyText": "(along with the travis formatting fixes)", "url": "https://github.com/oracle/graal/pull/2183#discussion_r383816578", "createdAt": "2020-02-25T11:18:09Z", "author": {"login": "a74nh"}, "path": "sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/nodes/asm/syscall/LLVMSyscallNode.java", "diffHunk": "@@ -41,29 +41,29 @@\n import com.oracle.truffle.llvm.runtime.memory.LLVMSyscallOperationNode;\n import com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode;\n \n-@NodeChild(\"rax\")\n-@NodeChild(\"rdi\")\n-@NodeChild(\"rsi\")\n-@NodeChild(\"rdx\")\n-@NodeChild(\"r10\")\n-@NodeChild(\"r8\")\n-@NodeChild(\"r9\")\n-public abstract class LLVMAMD64SyscallNode extends LLVMExpressionNode {\n+@NodeChild(\"syscallNum\")\n+@NodeChild(\"arg1\")\n+@NodeChild(\"arg2\")\n+@NodeChild(\"arg3\")\n+@NodeChild(\"arg4\")\n+@NodeChild(\"arg5\")\n+@NodeChild(\"arg6\")\n+public abstract class LLVMSyscallNode extends LLVMExpressionNode {\n     protected static final int NUM_SYSCALLS = 332;\n \n-    protected LLVMSyscallOperationNode createNode(long rax) {\n-        return LLVMLanguage.getLanguage().getCapability(PlatformCapability.class).createSyscallNode(rax);\n+    protected LLVMSyscallOperationNode createNode(long syscallNum) {\n+        return LLVMLanguage.getLanguage().getCapability(PlatformCapability.class).createSyscallNode(syscallNum);\n     }\n \n-    @Specialization(guards = \"rax == cachedRax\", limit = \"NUM_SYSCALLS\")\n-    protected long cachedSyscall(@SuppressWarnings(\"unused\") long rax, Object rdi, Object rsi, Object rdx, Object r10, Object r8, Object r9,\n-                    @Cached(\"rax\") @SuppressWarnings(\"unused\") long cachedRax,\n-                    @Cached(\"createNode(rax)\") LLVMSyscallOperationNode node,\n+    @Specialization(guards = \"syscallNum == cachedsyscallNum\", limit = \"NUM_SYSCALLS\")\n+    protected long cachedSyscall(@SuppressWarnings(\"unused\") long syscallNum, Object arg1, Object arg2, Object arg3, Object arg4, Object arg5, Object arg6,\n+                    @Cached(\"syscallNum\") @SuppressWarnings(\"unused\") long cachedsyscallNum,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzM0NjEyNQ=="}, "originalCommit": {"oid": "f58aa9040f50146dc53fbaff98c425a3a51ba27d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDEyMDU5OnYy", "diffSide": "RIGHT", "path": "sulong/projects/com.oracle.truffle.llvm.parser.factories/src/com/oracle/truffle/llvm/parser/factories/LinuxAArch64PlatformCapability.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODoxNToyMlrOFvIrFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODo0NjoxN1rOFvJfJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk2OTQ5Mw==", "bodyText": "Please drop the \"All rights reserved.\" In the BSD header this is superfluous since its already there just 2 lines below.", "url": "https://github.com/oracle/graal/pull/2183#discussion_r384969493", "createdAt": "2020-02-27T08:15:22Z", "author": {"login": "zapster"}, "path": "sulong/projects/com.oracle.truffle.llvm.parser.factories/src/com/oracle/truffle/llvm/parser/factories/LinuxAArch64PlatformCapability.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates.\n+ * Copyright (c) 2020, Arm Limited. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b4691ec6e7b33ec70556fad5091364a5f81b1d7"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk4MjgyMw==", "bodyText": "Done.", "url": "https://github.com/oracle/graal/pull/2183#discussion_r384982823", "createdAt": "2020-02-27T08:46:17Z", "author": {"login": "a74nh"}, "path": "sulong/projects/com.oracle.truffle.llvm.parser.factories/src/com/oracle/truffle/llvm/parser/factories/LinuxAArch64PlatformCapability.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates.\n+ * Copyright (c) 2020, Arm Limited. All rights reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk2OTQ5Mw=="}, "originalCommit": {"oid": "7b4691ec6e7b33ec70556fad5091364a5f81b1d7"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NDEyMTkxOnYy", "diffSide": "RIGHT", "path": "sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/nodes/asm/syscall/linux/aarch64/LinuxAArch64Syscall.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODoxNTo1MVrOFvIr5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QwODo0Njo0MVrOFvJfzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk2OTcwMQ==", "bodyText": "Please drop the \"All rights reserved.\" In the BSD header this is superfluous since its already there just 2 lines below.", "url": "https://github.com/oracle/graal/pull/2183#discussion_r384969701", "createdAt": "2020-02-27T08:15:51Z", "author": {"login": "zapster"}, "path": "sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/nodes/asm/syscall/linux/aarch64/LinuxAArch64Syscall.java", "diffHunk": "@@ -0,0 +1,331 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates.\n+ * Copyright (c) 2020, Arm Limited. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b4691ec6e7b33ec70556fad5091364a5f81b1d7"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk4Mjk5MQ==", "bodyText": "Done.", "url": "https://github.com/oracle/graal/pull/2183#discussion_r384982991", "createdAt": "2020-02-27T08:46:41Z", "author": {"login": "a74nh"}, "path": "sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/nodes/asm/syscall/linux/aarch64/LinuxAArch64Syscall.java", "diffHunk": "@@ -0,0 +1,331 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates.\n+ * Copyright (c) 2020, Arm Limited. All rights reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDk2OTcwMQ=="}, "originalCommit": {"oid": "7b4691ec6e7b33ec70556fad5091364a5f81b1d7"}, "originalPosition": 3}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 828, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}