{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MjY0NDM2", "number": 2359, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODo1MDo0NlrOD0YjQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODo1MDo0NlrOD0YjQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjU0Nzg0OnYy", "diffSide": "RIGHT", "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/SecurityServicesFeature.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODo1MDo0NlrOGJTXLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNzoxNDo0OVrOGJnCUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNzU5OQ==", "bodyText": "Since sun.security.provider.AbstractDrbg$SeederHolder is a shared class this should be enabled for Linux/Darwin platforms too, not only Windows, so please just remove JNIRegistrationUtil.isWindows().", "url": "https://github.com/oracle/graal/pull/2359#discussion_r412407599", "createdAt": "2020-04-21T18:50:46Z", "author": {"login": "cstancu"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/SecurityServicesFeature.java", "diffHunk": "@@ -109,6 +109,11 @@ public void duringSetup(DuringSetupAccess access) {\n         ImageSingletons.lookup(RuntimeClassInitializationSupport.class).rerunInitialization(clazz(access, \"sun.security.provider.SeedGenerator\"), \"for substitutions\");\n         ImageSingletons.lookup(RuntimeClassInitializationSupport.class).rerunInitialization(clazz(access, \"sun.security.provider.SecureRandom$SeederHolder\"), \"for substitutions\");\n \n+        if(JNIRegistrationUtil.isWindows() && JavaVersionUtil.JAVA_SPEC >= 11) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ffe508715b301ae2e4db7355024d5c7ce3ef642"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcyOTkzOQ==", "bodyText": "@cstancu Thank you for the comment. I will.\nAs I am learning this, could you take a minute to explain why the bug does not manifest on Linux for me, please? The class is used even with my Linux native-image build:\n$ grep AbstractDrbg /home/karm/workspaceRH/UUID/reports/build_time_classes_20200422_090211.txt\nsun.security.provider.AbstractDrbg\nsun.security.provider.AbstractDrbg$$Lambda$674/0x00000007c0bd8c40\nsun.security.provider.AbstractDrbg$NonceProvider\nsun.security.provider.AbstractDrbg$SeederHolder\nsun.security.provider.AbstractDrbg$SeederHolder$$Lambda$680/0x00000007c0bdf440\n\nAlthough it is apparently not necessary to re-initialize it at runtime to get a new seed on startup, see:\n$ strace ./main \n\naccess(\"/dev/random\", R_OK)             = 0\naccess(\"/dev/random\", R_OK)             = 0\naccess(\"/dev/urandom\", R_OK)            = 0\nlstat(\"/dev\", {st_mode=S_IFDIR|0755, st_size=4200, ...}) = 0\nlstat(\"/dev/random\", {st_mode=S_IFCHR|0666, st_rdev=makedev(1, 8), ...}) = 0\nopen(\"/dev/random\", O_RDONLY)           = 3\nfstat(3, {st_mode=S_IFCHR|0666, st_rdev=makedev(1, 8), ...}) = 0\nlstat(\"/dev\", {st_mode=S_IFDIR|0755, st_size=4200, ...}) = 0\nlstat(\"/dev/urandom\", {st_mode=S_IFCHR|0666, st_rdev=makedev(1, 9), ...}) = 0\nopen(\"/dev/urandom\", O_RDONLY)          = 4\nfstat(4, {st_mode=S_IFCHR|0666, st_rdev=makedev(1, 9), ...}) = 0\nread(4, \"\\327?\\206LS\\r\\235x\\332\\3723b|tv'\\304\\202=\\254\", 20) = 20\nread(4, \"^\\310\\333 \\37\\\"\\1\\0323\\23\\34\\346U\\224S\\374\\23\\354?\\235%]\\2\\213\\356P\\26\\355\\351l\\207l\"..., 256) = 256\n\nThank you for your time.\nK.", "url": "https://github.com/oracle/graal/pull/2359#discussion_r412729939", "createdAt": "2020-04-22T07:14:49Z", "author": {"login": "Karm"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/SecurityServicesFeature.java", "diffHunk": "@@ -109,6 +109,11 @@ public void duringSetup(DuringSetupAccess access) {\n         ImageSingletons.lookup(RuntimeClassInitializationSupport.class).rerunInitialization(clazz(access, \"sun.security.provider.SeedGenerator\"), \"for substitutions\");\n         ImageSingletons.lookup(RuntimeClassInitializationSupport.class).rerunInitialization(clazz(access, \"sun.security.provider.SecureRandom$SeederHolder\"), \"for substitutions\");\n \n+        if(JNIRegistrationUtil.isWindows() && JavaVersionUtil.JAVA_SPEC >= 11) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNzU5OQ=="}, "originalCommit": {"oid": "3ffe508715b301ae2e4db7355024d5c7ce3ef642"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 862, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}