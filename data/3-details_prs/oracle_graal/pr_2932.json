{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2NzcxODgy", "number": 2932, "title": "Feature/cppvirtual: C++/LLVM virtual method resolving and virtual field access via interop calls", "bodyText": "Enables resolving of virtual methods via Tuffle's InteropLibrary, and also accessing fields that are virtually inherited (C++).\nAlso created for internal discussion with Sulong team.", "createdAt": "2020-10-20T12:52:21Z", "url": "https://github.com/oracle/graal/pull/2932", "merged": true, "mergeCommit": {"oid": "ed26a993dcc1719b2ba012303b728993230b45dc"}, "closed": true, "closedAt": "2021-06-15T01:36:23Z", "author": {"login": "pichristoph"}, "timelineItems": {"totalCount": 67, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUYaMPgFqTUxMjY4MTM2Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdoqWAFgBqjQxNDAxMDI0MzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNjgxMzYy", "url": "https://github.com/oracle/graal/pull/2932#pullrequestreview-512681362", "createdAt": "2020-10-20T13:02:02Z", "commit": {"oid": "ca75b79fe919107edee725562a8a909aca56fc7b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzowMjowMlrOHk7Nxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzowMjowMlrOHk7Nxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ4MDk2Nw==", "bodyText": "Here, I am not sure whether this solution is correct, because from an interop view point, this is an UnknownIdentifierException (=i.e. the foreign object, e.g. JavaScript, does not have a specific field/method). However, from a C++ side, it is an array access by index.", "url": "https://github.com/oracle/graal/pull/2932#discussion_r508480967", "createdAt": "2020-10-20T13:02:02Z", "author": {"login": "pichristoph"}, "path": "sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/interop/access/LLVMInteropType.java", "diffHunk": "@@ -313,27 +391,124 @@ public Method findMethodByArgumentsWithSelf(String memberName, Object[] argument\n                     return method;\n                 }\n             }\n-            if (superclass != null) {\n-                return superclass.findMethodByArgumentsWithSelf(memberName, arguments);\n-            } else if (expectedArgCount >= 0) {\n+            for (Clazz c : superclasses) {\n+                Method m = c.findMethodByArgumentsWithSelf(memberName, arguments);\n+                if (m != null) {\n+                    return m;\n+                }\n+            }\n+            if (expectedArgCount >= 0) {\n                 throw ArityException.create(expectedArgCount, arguments.length - 1);\n             }\n             return null;\n         }\n \n-        public Method findMethodByArguments(Object receiver, String memberName, Object[] arguments) throws ArityException, UnknownIdentifierException {\n-            Object[] newArgs = new Object[arguments.length + 1];\n-            newArgs[0] = receiver;\n-            for (int i = 1; i < arguments.length; i++) {\n-                newArgs[i] = arguments[i - 1];\n+    }\n+\n+    public static final class VTable {\n+        final HashMap<Long, Method> table;\n+        final Clazz clazz;\n+\n+        VTable(Clazz clazz) {\n+            this.clazz = clazz;\n+            this.table = new HashMap<>();\n+            List<Clazz> list = new LinkedList<>(clazz.getSuperClasses());\n+            list.add(0, clazz);\n+            do {\n+                Clazz c = list.remove(0);\n+                list.addAll(c.superclasses);\n+                for (Method m : c.methods) {\n+                    if (m != null && m.getVirtualIndex() >= 0) {\n+                        table.putIfAbsent(m.virtualIndex, m);\n+                    }\n+                }\n+            } while (list.size() > 0);\n+        }\n+\n+        public LLVMInteropType.Method findMethod(long virtualIndex) {\n+            final LLVMInteropType.Method m = table.get(virtualIndex);\n+            if (m == null) {\n+                CompilerDirectives.transferToInterpreter();\n+                throw new NoSuchElementException(String.format(\"No method in %s with virtualIndex %d\", clazz.name, virtualIndex));\n             }\n-            Method method = findMethodByArgumentsWithSelf(memberName, newArgs);\n-            if (method == null) {\n-                throw UnknownIdentifierException.create(memberName);\n+            return m;\n+        }\n+    }\n+\n+    @ExportLibrary(value = InteropLibrary.class)\n+    public static final class VTableObjectPair implements TruffleObject {\n+        private final VTable vtable;\n+        private final Object foreign;\n+\n+        private VTableObjectPair(VTable vtable, Object foreign) {\n+            this.vtable = vtable;\n+            this.foreign = foreign;\n+        }\n+\n+        public static VTableObjectPair create(VTable vtable, Object foreign) {\n+            return new VTableObjectPair(vtable, foreign);\n+        }\n+\n+        @SuppressWarnings(\"static-method\")\n+        @ExportMessage\n+        boolean hasArrayElements() {\n+            return true;\n+        }\n+\n+        @ExportMessage\n+        Object readArrayElement(long index) throws UnsupportedMessageException {\n+            try {\n+                final String methodName = vtable.findMethod(index).getName();\n+                try {\n+                    Object readMember = InteropLibrary.getUncached(foreign).readMember(foreign, methodName);\n+                    return new RemoveSelfArgument(readMember);\n+                } catch (UnknownIdentifierException e) {\n+                    final String msg = String.format(\"External method %s (identifier \\\"%s\\\") not found in type %s\", methodName, e.getUnknownIdentifier(), foreign.getClass().getSimpleName());\n+                    throw new IllegalStateException(msg);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca75b79fe919107edee725562a8a909aca56fc7b"}, "originalPosition": 253}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNjgyODcx", "url": "https://github.com/oracle/graal/pull/2932#pullrequestreview-512682871", "createdAt": "2020-10-20T13:03:39Z", "commit": {"oid": "ca75b79fe919107edee725562a8a909aca56fc7b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzowMzozOVrOHk7SLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzowMzozOVrOHk7SLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ4MjA5Mw==", "bodyText": "Here, maybe there is a fast operation to get the pointer size (8 bytes) appropriately, if the '8' should not be hard-coded here.", "url": "https://github.com/oracle/graal/pull/2932#discussion_r508482093", "createdAt": "2020-10-20T13:03:39Z", "author": {"login": "pichristoph"}, "path": "sulong/projects/com.oracle.truffle.llvm.runtime/src/com/oracle/truffle/llvm/runtime/interop/access/LLVMInteropVtableAccessNode.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates.\n+ *\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are\n+ * permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of\n+ * conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and/or other materials provided\n+ * with the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written\n+ * permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n+ * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n+ * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n+ * OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+package com.oracle.truffle.llvm.runtime.interop.access;\n+\n+import com.oracle.truffle.api.dsl.GenerateUncached;\n+import com.oracle.truffle.api.dsl.Specialization;\n+import com.oracle.truffle.api.interop.ArityException;\n+import com.oracle.truffle.api.interop.InteropLibrary;\n+import com.oracle.truffle.api.interop.UnsupportedMessageException;\n+import com.oracle.truffle.api.interop.UnsupportedTypeException;\n+import com.oracle.truffle.api.library.CachedLibrary;\n+import com.oracle.truffle.llvm.runtime.nodes.api.LLVMLoadNode;\n+import com.oracle.truffle.llvm.runtime.nodes.api.LLVMNode;\n+import com.oracle.truffle.llvm.runtime.pointer.LLVMPointer;\n+\n+@GenerateUncached\n+public abstract class LLVMInteropVtableAccessNode extends LLVMNode {\n+    abstract Object execute(Object vtablePointer, long virtualIndex, Object[] arguments) throws UnsupportedTypeException, ArityException, UnsupportedMessageException;\n+\n+    public static LLVMInteropVtableAccessNode create() {\n+        return LLVMInteropVtableAccessNodeGen.create();\n+    }\n+\n+    @Specialization\n+    Object doPointer(LLVMPointer vtablePointer, long virtualIndex, Object[] arguments, @CachedLibrary(limit = \"5\") InteropLibrary interop)\n+                    throws UnsupportedTypeException, ArityException, UnsupportedMessageException {\n+\n+        LLVMPointer vtableElementPointer = vtablePointer.increment(virtualIndex * 8);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca75b79fe919107edee725562a8a909aca56fc7b"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNzE4ODA5", "url": "https://github.com/oracle/graal/pull/2932#pullrequestreview-512718809", "createdAt": "2020-10-20T13:36:26Z", "commit": {"oid": "ca75b79fe919107edee725562a8a909aca56fc7b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzozNjoyNlrOHk85WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzozNjoyNlrOHk85WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUwODUwNQ==", "bodyText": "Maybe there is a way to remove this method and make its declaration abstract (virtual int foo(int x)=0) if it works together with compilation of gate tests.", "url": "https://github.com/oracle/graal/pull/2932#discussion_r508508505", "createdAt": "2020-10-20T13:36:26Z", "author": {"login": "pichristoph"}, "path": "sulong/tests/com.oracle.truffle.llvm.tests.interop.native/interop/vtableTest1.cpp", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates.\n+ *\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are\n+ * permitted provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of\n+ * conditions and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and/or other materials provided\n+ * with the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written\n+ * permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS\n+ * OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n+ * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n+ * COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n+ * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\n+ * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED\n+ * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n+ * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n+ * OF THE POSSIBILITY OF SUCH DAMAGE.\n+ */\n+\n+#include <polyglot.h>\n+\n+//-----------------------------------------test via polyglot API\n+\n+class A {\n+public:\n+    int k;\n+    virtual int foo(int x);\n+};\n+\n+int A::foo(int x) {\n+    return 0 * x;\n+} //dummy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca75b79fe919107edee725562a8a909aca56fc7b"}, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "74fdfcbd344add470d8c4837c6dc413d0618ac9e", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/74fdfcbd344add470d8c4837c6dc413d0618ac9e", "committedDate": "2020-11-10T13:17:23Z", "message": "expand tests for virtually inherited fields"}, "afterCommit": {"oid": "0c342577d7cbe9f73de411f526abc611bfbda6cd", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/0c342577d7cbe9f73de411f526abc611bfbda6cd", "committedDate": "2020-11-17T13:33:14Z", "message": "expand tests for virtually inherited fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "248aa23b2a24154ed5ef4fd0460c9a893a2b8849", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/248aa23b2a24154ed5ef4fd0460c9a893a2b8849", "committedDate": "2020-12-22T12:39:17Z", "message": "Add class type to interop type structure"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dca1a8c9244aa0e1d8d8b2cdb25ce3a699a69eb5", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/dca1a8c9244aa0e1d8d8b2cdb25ce3a699a69eb5", "committedDate": "2020-12-22T12:39:17Z", "message": "make C++ method names accessible"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41d424a7460d82278c7d80bf7c240ca3cb820833", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/41d424a7460d82278c7d80bf7c240ca3cb820833", "committedDate": "2020-12-22T12:39:17Z", "message": "enable C++ method calling via Sulong interoperability"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd12af204e328dd82a3241f048cb4cd8f47c56e1", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/bd12af204e328dd82a3241f048cb4cd8f47c56e1", "committedDate": "2020-12-22T12:39:17Z", "message": "Enable interop constructor calling and method/constructor arity checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2de7a65146af52ed8b69fa85b68d3f4be2dfeb6a", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/2de7a65146af52ed8b69fa85b68d3f4be2dfeb6a", "committedDate": "2020-12-22T12:39:17Z", "message": "enable access of inherited fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faf4ae45e7398a905727513250339611b9a46fbd", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/faf4ae45e7398a905727513250339611b9a46fbd", "committedDate": "2020-12-22T12:39:17Z", "message": "remove unnecessary method call"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d864d29109a124d03d33432d0263d43cfbe0071", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/5d864d29109a124d03d33432d0263d43cfbe0071", "committedDate": "2020-12-22T12:39:17Z", "message": "add tests for inherited field access"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e96cc87763c706b82828b3d6b4e2a94789b43ed4", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/e96cc87763c706b82828b3d6b4e2a94789b43ed4", "committedDate": "2020-12-22T12:39:17Z", "message": "enable superclass lookup for inherited field access"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59cb63909ef15be655d52b9ec7c8159a74192e9f", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/59cb63909ef15be655d52b9ec7c8159a74192e9f", "committedDate": "2020-12-22T12:39:17Z", "message": "update expected value of test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "898bf22e99fc783ad9caff223c273951d43b15c6", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/898bf22e99fc783ad9caff223c273951d43b15c6", "committedDate": "2020-12-22T12:39:17Z", "message": "register superclasses for inherited field access if not done yet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79c77d06504116e31c75c65cfd2aac07ccc7daf6", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/79c77d06504116e31c75c65cfd2aac07ccc7daf6", "committedDate": "2020-12-22T12:39:17Z", "message": "fix: function pointer members are not interpreted as clazz methods any more"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcc6b7e70a4ee47aa9bf88b8747c03c2f515cf70", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/dcc6b7e70a4ee47aa9bf88b8747c03c2f515cf70", "committedDate": "2020-12-22T12:39:17Z", "message": "enable calling (C++) struct function pointers (not interpreted as C++ classes)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9783a77a1b99f9bafb4d04da4915e08aa9308743", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/9783a77a1b99f9bafb4d04da4915e08aa9308743", "committedDate": "2020-12-22T12:39:17Z", "message": "store virtual(table) index in method objects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "391bb8c0ce1e3423d7ae7c0f69a0f0583e947e47", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/391bb8c0ce1e3423d7ae7c0f69a0f0583e947e47", "committedDate": "2020-12-22T12:39:18Z", "message": "enable calling methods with dummy virtual implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6134bc152fb68cf87c81c611158f48a29c9ed1a5", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/6134bc152fb68cf87c81c611158f48a29c9ed1a5", "committedDate": "2020-12-22T12:39:18Z", "message": "include parent classes when building virtual method table (vtable)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4959a94eb8d003e0815bb6c9ca05f2dd9c6aec69", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/4959a94eb8d003e0815bb6c9ca05f2dd9c6aec69", "committedDate": "2020-12-22T12:39:18Z", "message": "fix method typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b44647f23a3508299f1650b6247707ed3faa25a", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/2b44647f23a3508299f1650b6247707ed3faa25a", "committedDate": "2020-12-22T12:39:18Z", "message": "test draft for virtual method resolving of foreign objects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3787b919f2e86a25ef2f06915b4423c9a9af83d2", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/3787b919f2e86a25ef2f06915b4423c9a9af83d2", "committedDate": "2020-12-22T12:39:18Z", "message": "finished tests for virtual method calls for foreign objects"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd44fe3476375957007542018df1c553daf3eb1a", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/dd44fe3476375957007542018df1c553daf3eb1a", "committedDate": "2020-12-22T12:39:18Z", "message": "add missing copyright headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "414600f25fc6080453545c309e7a95350dbd7f0d", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/414600f25fc6080453545c309e7a95350dbd7f0d", "committedDate": "2020-12-22T12:41:56Z", "message": "enable basic version of virtual method resolving for interop method calls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b82939709e68cbacc9ece0576d83d497094bd80", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/8b82939709e68cbacc9ece0576d83d497094bd80", "committedDate": "2020-12-22T12:41:56Z", "message": "expand tests for virtual method resolving"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b25c8ac589b16e307830539285c4e9ff9a1fd132", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/b25c8ac589b16e307830539285c4e9ff9a1fd132", "committedDate": "2020-12-22T12:41:56Z", "message": "add tests for multiple inheritance/vtable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69680e591a4746a2217be07bdaeb1f00e2aee512", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/69680e591a4746a2217be07bdaeb1f00e2aee512", "committedDate": "2020-12-22T12:42:52Z", "message": "enable multiple inheritance for interop, update tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8402f3b780024623017844e3f2aad355fe0986c6", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/8402f3b780024623017844e3f2aad355fe0986c6", "committedDate": "2020-12-22T12:42:52Z", "message": "fix copyright year"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1457e73ec68a994ae0f1efa469354c4c7055b4e", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/e1457e73ec68a994ae0f1efa469354c4c7055b4e", "committedDate": "2020-12-22T12:42:52Z", "message": "fix parameter error for virtual and non-virtual method thunks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c35afe6497a239eb6d84113b216f049e0a7dd5f", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/5c35afe6497a239eb6d84113b216f049e0a7dd5f", "committedDate": "2020-12-22T12:42:52Z", "message": "treat vtable as a struct member"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1e00329b1e85eafd3b4571834deb06ca10787da", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/d1e00329b1e85eafd3b4571834deb06ca10787da", "committedDate": "2020-12-22T12:43:51Z", "message": "restructure invokeMember message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ffa242554d991196f22e9890074391c63a66a53", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/5ffa242554d991196f22e9890074391c63a66a53", "committedDate": "2020-12-22T12:43:51Z", "message": "remove unnecessary execute message"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad6e3bdf935f0c4ebfb79b80ef52d0601552aa91", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/ad6e3bdf935f0c4ebfb79b80ef52d0601552aa91", "committedDate": "2020-12-22T12:43:52Z", "message": "adjust isMemberInvocable() method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44b1511a21b84fa030ec9ad227fcaea46064d5df", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/44b1511a21b84fa030ec9ad227fcaea46064d5df", "committedDate": "2020-12-22T12:43:52Z", "message": "remove unnecessary helper method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcb77dd02bd6a673a18c6bada5d7f3452edd54b9", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/bcb77dd02bd6a673a18c6bada5d7f3452edd54b9", "committedDate": "2020-12-22T12:43:52Z", "message": "replace functional 'set to list' duplication"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1419c99e6cc903b18b7d3da4f1c2b01e497d3e5", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/c1419c99e6cc903b18b7d3da4f1c2b01e497d3e5", "committedDate": "2020-12-22T12:43:52Z", "message": "remove unnecessary cached arguments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e293fb23739fa07f90cfea901440f6029bee340", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/8e293fb23739fa07f90cfea901440f6029bee340", "committedDate": "2020-12-22T12:43:52Z", "message": "enable access for vtable in LLVMInteropTypes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "652377abd61fa4f55a19e21b5d26a65d19f8336f", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/652377abd61fa4f55a19e21b5d26a65d19f8336f", "committedDate": "2020-12-22T12:43:52Z", "message": "restructure virtual method resolving with nodes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "900a980b934f31e05227e30cec41d7bb2259b982", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/900a980b934f31e05227e30cec41d7bb2259b982", "committedDate": "2020-12-22T12:43:52Z", "message": "remove 'too directly' native way of computing method pointers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5712f18e1f65205580eb9abd87444e94d5bd5344", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/5712f18e1f65205580eb9abd87444e94d5bd5344", "committedDate": "2020-12-22T12:43:52Z", "message": "remove direct memory access for virtual method resolving"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6af140078d3c418742cc27510025edd12e58dac8", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/6af140078d3c418742cc27510025edd12e58dac8", "committedDate": "2020-12-22T12:43:52Z", "message": "remove unnecessarily cached arguments and their 'unused' warnings"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a72f69bc37d151fb6763fc1ac614bb678ddcf4f1", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/a72f69bc37d151fb6763fc1ac614bb678ddcf4f1", "committedDate": "2020-12-22T12:43:52Z", "message": "remove redundant macro 'POLYGLOT_DECLARE_CLASS'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71fd3a0b8e6e2415f7eb06c093509ee7b98d24f5", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/71fd3a0b8e6e2415f7eb06c093509ee7b98d24f5", "committedDate": "2020-12-22T12:45:18Z", "message": "apply changes due to rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4b1ae7cd3c14d7f2715704498726ff95615e384", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/d4b1ae7cd3c14d7f2715704498726ff95615e384", "committedDate": "2020-12-22T12:45:18Z", "message": "remove print method (used for debugging)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "749a34e5542e068fb9566c4321b3ace18c6d7804", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/749a34e5542e068fb9566c4321b3ace18c6d7804", "committedDate": "2020-12-22T12:45:18Z", "message": "store inheritance information"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b99478459a5b39d6d3ca155086a12cfd9588004e", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/b99478459a5b39d6d3ca155086a12cfd9588004e", "committedDate": "2020-12-22T12:45:18Z", "message": "resolve field reading correctly for virtual inherited classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5840ecf0de5712fee5ba5bea5a6ff9620d63a572", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/5840ecf0de5712fee5ba5bea5a6ff9620d63a572", "committedDate": "2020-12-22T12:45:19Z", "message": "enable access (read+write) for virtually inherited fields of classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4ff0d8e2c6e95fa2183452eaebf0fc7b848d358", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/e4ff0d8e2c6e95fa2183452eaebf0fc7b848d358", "committedDate": "2020-12-22T12:45:19Z", "message": "add tests for virtually inherited fields (read+write)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88c39adb610d684f661487a0f22ee5cd427747b5", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/88c39adb610d684f661487a0f22ee5cd427747b5", "committedDate": "2020-12-22T12:45:19Z", "message": "seperate virtual and non-virtual field access (r+w)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b89717bdb6c3bb31e6a48ecc545a539e4257337", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/1b89717bdb6c3bb31e6a48ecc545a539e4257337", "committedDate": "2020-12-22T12:45:19Z", "message": "fix virtual interop field access via new getMemberPointerNode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dad253694039f5a50ceccc651957791f9f6f33cb", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/dad253694039f5a50ceccc651957791f9f6f33cb", "committedDate": "2020-12-22T12:45:19Z", "message": "expand tests for virtually inherited fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da4e28b7ee3242906c17364a6b890f57e1b63848", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/da4e28b7ee3242906c17364a6b890f57e1b63848", "committedDate": "2020-12-22T12:46:40Z", "message": "first restructuring for efficient class resolving"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8242e3dcba5fab1222cacc18a26802c41a947fcf", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/8242e3dcba5fab1222cacc18a26802c41a947fcf", "committedDate": "2020-12-22T12:46:40Z", "message": "restructuring for more efficient class resolving"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0677b79d7f47c805f19cfcf098134f2ee2d9a767", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/0677b79d7f47c805f19cfcf098134f2ee2d9a767", "committedDate": "2020-12-22T12:46:40Z", "message": "add write checks to field access tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1b19c81ef1a5516e05172897b465a0371ba3479", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/e1b19c81ef1a5516e05172897b465a0371ba3479", "committedDate": "2020-12-22T12:46:40Z", "message": "simplified field access chain for class fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c12f64b70f2495d4f0952f662330edf08b2ef01", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/5c12f64b70f2495d4f0952f662330edf08b2ef01", "committedDate": "2020-12-22T12:46:40Z", "message": "remove unnecessary member lookup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3787fe4f22f43c8adfb9d7e4c5ef61d12fb8fdc", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/e3787fe4f22f43c8adfb9d7e4c5ef61d12fb8fdc", "committedDate": "2020-12-22T12:46:40Z", "message": "simplified interop foreign field access"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e18371e3b8a40216f565ef91b59c56d936d86630", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/e18371e3b8a40216f565ef91b59c56d936d86630", "committedDate": "2020-12-22T12:46:40Z", "message": "add and expand interop tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43d28e1b2161d278585e9fe4c5c03f249bb835a8", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/43d28e1b2161d278585e9fe4c5c03f249bb835a8", "committedDate": "2020-12-22T12:46:40Z", "message": "add internal virtual method resolving tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6e42e7c9bed1e62c13f5bfda9b3380a1004d5d6", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/d6e42e7c9bed1e62c13f5bfda9b3380a1004d5d6", "committedDate": "2020-12-22T12:46:40Z", "message": "remove string concatenation and add inheritance flag for interop class access"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a19b308a4b1d451baec468be9f6bfb6d3f65c0e0", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/a19b308a4b1d451baec468be9f6bfb6d3f65c0e0", "committedDate": "2020-12-22T12:47:17Z", "message": "removed node creation at runtime for (virtually inherited) class members"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76ee89fc47d98f96290911eee13e3ad8fee2b5f1", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/76ee89fc47d98f96290911eee13e3ad8fee2b5f1", "committedDate": "2020-12-22T12:47:17Z", "message": "fix style issues for cached arguments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed3084f72ee55a2c461f08cb644cac3a918fe3a9", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/ed3084f72ee55a2c461f08cb644cac3a918fe3a9", "committedDate": "2020-12-22T12:47:17Z", "message": "style and code fix of interop invoke"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ca8c97bbda05907f553f1ce6c49a7f96f5f8246", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/4ca8c97bbda05907f553f1ce6c49a7f96f5f8246", "committedDate": "2020-12-22T12:47:17Z", "message": "remove hash as check for cached parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6a167d9b0bf86bcef70c6c2f85522e491b9b0ce", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/f6a167d9b0bf86bcef70c6c2f85522e491b9b0ce", "committedDate": "2020-12-22T12:47:17Z", "message": "fix node caching and style issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e471d01d226d261835e3cf8461d5c781909a0c33", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/e471d01d226d261835e3cf8461d5c781909a0c33", "committedDate": "2020-12-22T13:13:33Z", "message": "changes due to rebase (polyglot.h import changed)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "677b661b69500d234c11fa74a9c4264a6c977f9a", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/677b661b69500d234c11fa74a9c4264a6c977f9a", "committedDate": "2020-12-22T10:32:21Z", "message": "fix node caching and style issues"}, "afterCommit": {"oid": "e471d01d226d261835e3cf8461d5c781909a0c33", "author": {"user": null}, "url": "https://github.com/oracle/graal/commit/e471d01d226d261835e3cf8461d5c781909a0c33", "committedDate": "2020-12-22T13:13:33Z", "message": "changes due to rebase (polyglot.h import changed)"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 953, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}