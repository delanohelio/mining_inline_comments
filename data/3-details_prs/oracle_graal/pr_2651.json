{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0MDk5MjIx", "number": 2651, "title": "Reads around unsafe volatile read should not be commoned", "bodyText": "The following sequence:\nv1 = Read of field\nv2 = Unsafe volatile read\nv3 = Read of field\n// use of v1 & v3\nis erroneously transformed to:\nv1 = Read of field\nv2 = Unsafe volatile read\n// use of v1 only\nby PEReadEliminationClosure\nthat is first and last reads of field are commoned.", "createdAt": "2020-07-03T14:59:40Z", "url": "https://github.com/oracle/graal/pull/2651", "merged": true, "mergeCommit": {"oid": "c61a7d2015b74cecb738c413305054ee4c212ea1"}, "closed": true, "closedAt": "2020-07-07T11:57:12Z", "author": {"login": "rwestrel"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcxV7e-gBqjM1MTE1NTUwNzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyQaLNABqjM1MTU2ODU4MjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c8d7cf236caccf9c44192e619bf83612bb268e76", "author": {"user": {"login": "rwestrel", "name": "Roland Westrelin"}}, "url": "https://github.com/oracle/graal/commit/c8d7cf236caccf9c44192e619bf83612bb268e76", "committedDate": "2020-07-03T14:56:40Z", "message": "Reads around unsafe volatile read should not be commoned"}, "afterCommit": {"oid": "3320039222d445f80974ea4504889cb5bf33b00e", "author": {"user": {"login": "rwestrel", "name": "Roland Westrelin"}}, "url": "https://github.com/oracle/graal/commit/3320039222d445f80974ea4504889cb5bf33b00e", "committedDate": "2020-07-03T16:20:09Z", "message": "Reads around unsafe volatile read should not be commoned"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3320039222d445f80974ea4504889cb5bf33b00e", "author": {"user": {"login": "rwestrel", "name": "Roland Westrelin"}}, "url": "https://github.com/oracle/graal/commit/3320039222d445f80974ea4504889cb5bf33b00e", "committedDate": "2020-07-03T16:20:09Z", "message": "Reads around unsafe volatile read should not be commoned"}, "afterCommit": {"oid": "07a90293531455266de7f231b18432dee03b7921", "author": {"user": {"login": "rwestrel", "name": "Roland Westrelin"}}, "url": "https://github.com/oracle/graal/commit/07a90293531455266de7f231b18432dee03b7921", "committedDate": "2020-07-06T10:00:28Z", "message": "Reads around unsafe volatile read should not be commoned"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07a90293531455266de7f231b18432dee03b7921", "author": {"user": {"login": "rwestrel", "name": "Roland Westrelin"}}, "url": "https://github.com/oracle/graal/commit/07a90293531455266de7f231b18432dee03b7921", "committedDate": "2020-07-06T10:00:28Z", "message": "Reads around unsafe volatile read should not be commoned"}, "afterCommit": {"oid": "84006c20a89efb505e0dc887b5547d7ca4f2fd09", "author": {"user": {"login": "rwestrel", "name": "Roland Westrelin"}}, "url": "https://github.com/oracle/graal/commit/84006c20a89efb505e0dc887b5547d7ca4f2fd09", "committedDate": "2020-07-06T11:40:50Z", "message": "Reads around unsafe volatile read should not be commoned"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMDIwMDEz", "url": "https://github.com/oracle/graal/pull/2651#pullrequestreview-443020013", "createdAt": "2020-07-06T12:13:25Z", "commit": {"oid": "84006c20a89efb505e0dc887b5547d7ca4f2fd09"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjoxMzoyNVrOGtUuBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjoxNDoxOFrOGtUvsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE3ODU2NQ==", "bodyText": "Any particular reason for those newlines? If not pls remove them", "url": "https://github.com/oracle/graal/pull/2651#discussion_r450178565", "createdAt": "2020-07-06T12:13:25Z", "author": {"login": "davleopo"}, "path": "compiler/src/org.graalvm.compiler.core.test/src/org/graalvm/compiler/core/test/ReadAroundUnsafeVolatileReadShouldNotCommon.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Red Hat Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package org.graalvm.compiler.core.test;\n+\n+import jdk.vm.ci.meta.ResolvedJavaMethod;\n+import org.graalvm.compiler.core.common.type.IntegerStamp;\n+import org.graalvm.compiler.core.common.type.Stamp;\n+import org.graalvm.compiler.nodes.NodeView;\n+import org.graalvm.compiler.nodes.StructuredGraph;\n+import org.graalvm.compiler.nodes.memory.ReadNode;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+// See https://bugs.openjdk.java.net/browse/JDK-8248598\n+public class ReadAroundUnsafeVolatileReadShouldNotCommon extends GraalCompilerTest {\n+    private static int field;\n+    private Thread thread;\n+    private static long[] array = new long[1];\n+\n+    static {\n+        arrayBaseOffset = UNSAFE.arrayBaseOffset(long[].class);\n+    }\n+\n+    private static int arrayBaseOffset;\n+\n+    public static int testMethod1() {\n+        int v = field;\n+\n+        UNSAFE.putLongVolatile(array, arrayBaseOffset, 1);\n+        while (UNSAFE.getLongVolatile(array, arrayBaseOffset) != 2) {\n+            // wait for other thread\n+        }\n+\n+        return v + field; // field load shouldn't common with one above.\n+    }\n+\n+    @Test\n+    public void test1() {\n+        test(\"testMethod1\");\n+    }\n+\n+    @Override\n+    protected void before(ResolvedJavaMethod method) {\n+        field = 0;\n+        UNSAFE.putLongVolatile(array, arrayBaseOffset, 0);\n+        thread = new Thread() {\n+            @Override\n+            public void run() {\n+                while (UNSAFE.getLongVolatile(array, arrayBaseOffset) != 1) {\n+                    // wait for test thread to start\n+                }\n+                field = 0x42;\n+                UNSAFE.putLongVolatile(array, arrayBaseOffset, 2);\n+            }\n+        };\n+        thread.start();\n+    }\n+\n+    @Override\n+    protected void after() {\n+        try {\n+            thread.join();\n+        } catch (InterruptedException e) {\n+        }\n+    }\n+\n+    public static int testMethod2(int offset) {\n+        int v = field;\n+\n+        long v2 = UNSAFE.getLongVolatile(array, offset);\n+\n+        return v + field + (int) v2; // field load shouldn't common with one above.\n+    }\n+\n+    @Test\n+    public void test2() {\n+        final StructuredGraph graph = getFinalGraph(\"testMethod2\");\n+        Assert.assertEquals(2, getFieldReads(graph));\n+    }\n+\n+    public static int testMethod3(int offset) {\n+        int v = field;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84006c20a89efb505e0dc887b5547d7ca4f2fd09"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE3ODk5Mw==", "bodyText": "Could you rename that to have the word \"test\" in its title somehow?", "url": "https://github.com/oracle/graal/pull/2651#discussion_r450178993", "createdAt": "2020-07-06T12:14:18Z", "author": {"login": "davleopo"}, "path": "compiler/src/org.graalvm.compiler.core.test/src/org/graalvm/compiler/core/test/ReadAroundUnsafeVolatileReadShouldNotCommon.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Red Hat Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+\n+package org.graalvm.compiler.core.test;\n+\n+import jdk.vm.ci.meta.ResolvedJavaMethod;\n+import org.graalvm.compiler.core.common.type.IntegerStamp;\n+import org.graalvm.compiler.core.common.type.Stamp;\n+import org.graalvm.compiler.nodes.NodeView;\n+import org.graalvm.compiler.nodes.StructuredGraph;\n+import org.graalvm.compiler.nodes.memory.ReadNode;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+// See https://bugs.openjdk.java.net/browse/JDK-8248598\n+public class ReadAroundUnsafeVolatileReadShouldNotCommon extends GraalCompilerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84006c20a89efb505e0dc887b5547d7ca4f2fd09"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5729a1ef748ebaf4e66891b520aff2c67e63bb6", "author": {"user": {"login": "rwestrel", "name": "Roland Westrelin"}}, "url": "https://github.com/oracle/graal/commit/f5729a1ef748ebaf4e66891b520aff2c67e63bb6", "committedDate": "2020-07-06T12:26:58Z", "message": "Reads around unsafe volatile read should not be commoned"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "84006c20a89efb505e0dc887b5547d7ca4f2fd09", "author": {"user": {"login": "rwestrel", "name": "Roland Westrelin"}}, "url": "https://github.com/oracle/graal/commit/84006c20a89efb505e0dc887b5547d7ca4f2fd09", "committedDate": "2020-07-06T11:40:50Z", "message": "Reads around unsafe volatile read should not be commoned"}, "afterCommit": {"oid": "f5729a1ef748ebaf4e66891b520aff2c67e63bb6", "author": {"user": {"login": "rwestrel", "name": "Roland Westrelin"}}, "url": "https://github.com/oracle/graal/commit/f5729a1ef748ebaf4e66891b520aff2c67e63bb6", "committedDate": "2020-07-06T12:26:58Z", "message": "Reads around unsafe volatile read should not be commoned"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1047, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}