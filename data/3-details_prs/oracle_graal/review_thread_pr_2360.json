{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NDM0Mjk3", "number": 2360, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNDo0MTo1MlrODzOnHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNDo0ODo1NFrODzOp-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDQzMzU2OnYy", "diffSide": "RIGHT", "path": "compiler/src/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/IntrinsicGraphBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNDo0MTo1MlrOGHriEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQwMjoxMjoyNVrOGHw2Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwNjQ0OQ==", "bodyText": "This should just be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            AbstractBeginNode normalSuccessor;\n          \n          \n            \n                            if (withExceptionNode instanceof SingleMemoryKill) {\n          \n          \n            \n                                normalSuccessor = graph.add(KillingBeginNode.create(((SingleMemoryKill) withExceptionNode).getKilledLocationIdentity()));\n          \n          \n            \n                            } else if (withExceptionNode instanceof MultiMemoryKill) {\n          \n          \n            \n                                normalSuccessor = graph.add(MultiKillingBeginNode.create(((MultiMemoryKill) withExceptionNode).getKilledLocationIdentities()));\n          \n          \n            \n                            } else {\n          \n          \n            \n                                assert !(withExceptionNode instanceof MemoryKill) : \"missing a MemoryKill\";\n          \n          \n            \n                                normalSuccessor = graph.add(new BeginNode());\n          \n          \n            \n                            }\n          \n          \n            \n                            AbstractBeginNode normalSuccessor = withExceptionNode.createNextBegin();\n          \n      \n    \n    \n  \n\nLooks good to me otherwise.", "url": "https://github.com/oracle/graal/pull/2360#discussion_r410706449", "createdAt": "2020-04-18T14:41:52Z", "author": {"login": "gergo-"}, "path": "compiler/src/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/IntrinsicGraphBuilder.java", "diffHunk": "@@ -134,12 +146,46 @@ protected IntrinsicGraphBuilder(OptionValues options, DebugContext debug, CorePr\n                 FixedWithNextNode fixedWithNextNode = (FixedWithNextNode) fixedNode;\n                 assert fixedWithNextNode.next() == null : \"cannot append instruction to instruction which isn't end\";\n                 lastInstr = fixedWithNextNode;\n+\n+            } else if (fixedNode instanceof WithExceptionNode) {\n+                WithExceptionNode withExceptionNode = (WithExceptionNode) fixedNode;\n+                AbstractBeginNode normalSuccessor;\n+                if (withExceptionNode instanceof SingleMemoryKill) {\n+                    normalSuccessor = graph.add(KillingBeginNode.create(((SingleMemoryKill) withExceptionNode).getKilledLocationIdentity()));\n+                } else if (withExceptionNode instanceof MultiMemoryKill) {\n+                    normalSuccessor = graph.add(MultiKillingBeginNode.create(((MultiMemoryKill) withExceptionNode).getKilledLocationIdentities()));\n+                } else {\n+                    assert !(withExceptionNode instanceof MemoryKill) : \"missing a MemoryKill\";\n+                    normalSuccessor = graph.add(new BeginNode());\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c858675537ceef8035c9cccd64528f15e30747e7"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc5MzQ5MA==", "bodyText": "Thanks, didn't know that method exists. But I'm glad it does.", "url": "https://github.com/oracle/graal/pull/2360#discussion_r410793490", "createdAt": "2020-04-19T02:12:25Z", "author": {"login": "christianwimmer"}, "path": "compiler/src/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/IntrinsicGraphBuilder.java", "diffHunk": "@@ -134,12 +146,46 @@ protected IntrinsicGraphBuilder(OptionValues options, DebugContext debug, CorePr\n                 FixedWithNextNode fixedWithNextNode = (FixedWithNextNode) fixedNode;\n                 assert fixedWithNextNode.next() == null : \"cannot append instruction to instruction which isn't end\";\n                 lastInstr = fixedWithNextNode;\n+\n+            } else if (fixedNode instanceof WithExceptionNode) {\n+                WithExceptionNode withExceptionNode = (WithExceptionNode) fixedNode;\n+                AbstractBeginNode normalSuccessor;\n+                if (withExceptionNode instanceof SingleMemoryKill) {\n+                    normalSuccessor = graph.add(KillingBeginNode.create(((SingleMemoryKill) withExceptionNode).getKilledLocationIdentity()));\n+                } else if (withExceptionNode instanceof MultiMemoryKill) {\n+                    normalSuccessor = graph.add(MultiKillingBeginNode.create(((MultiMemoryKill) withExceptionNode).getKilledLocationIdentities()));\n+                } else {\n+                    assert !(withExceptionNode instanceof MemoryKill) : \"missing a MemoryKill\";\n+                    normalSuccessor = graph.add(new BeginNode());\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwNjQ0OQ=="}, "originalCommit": {"oid": "c858675537ceef8035c9cccd64528f15e30747e7"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MDQ0MDkxOnYy", "diffSide": "RIGHT", "path": "compiler/src/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/IntrinsicGraphBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNDo0ODo1NFrOGHrlew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNDo0ODo1NFrOGHrlew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwNzMyMw==", "bodyText": "typo: Exeption", "url": "https://github.com/oracle/graal/pull/2360#discussion_r410707323", "createdAt": "2020-04-18T14:48:54Z", "author": {"login": "gergo-"}, "path": "compiler/src/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/IntrinsicGraphBuilder.java", "diffHunk": "@@ -134,12 +146,46 @@ protected IntrinsicGraphBuilder(OptionValues options, DebugContext debug, CorePr\n                 FixedWithNextNode fixedWithNextNode = (FixedWithNextNode) fixedNode;\n                 assert fixedWithNextNode.next() == null : \"cannot append instruction to instruction which isn't end\";\n                 lastInstr = fixedWithNextNode;\n+\n+            } else if (fixedNode instanceof WithExceptionNode) {\n+                WithExceptionNode withExceptionNode = (WithExceptionNode) fixedNode;\n+                AbstractBeginNode normalSuccessor;\n+                if (withExceptionNode instanceof SingleMemoryKill) {\n+                    normalSuccessor = graph.add(KillingBeginNode.create(((SingleMemoryKill) withExceptionNode).getKilledLocationIdentity()));\n+                } else if (withExceptionNode instanceof MultiMemoryKill) {\n+                    normalSuccessor = graph.add(MultiKillingBeginNode.create(((MultiMemoryKill) withExceptionNode).getKilledLocationIdentities()));\n+                } else {\n+                    assert !(withExceptionNode instanceof MemoryKill) : \"missing a MemoryKill\";\n+                    normalSuccessor = graph.add(new BeginNode());\n+                }\n+                ExceptionObjectNode exceptionSuccessor = graph.add(new ExceptionObjectNode(getMetaAccess()));\n+                setExeptionState(exceptionSuccessor);\n+                exceptionSuccessor.setNext(graph.add(new UnwindNode(exceptionSuccessor)));\n+\n+                if (unwindCreated) {\n+                    throw GraalError.shouldNotReachHere(\"Intrinsic graph can only have one node with an exception edge\");\n+                }\n+                unwindCreated = true;\n+\n+                withExceptionNode.setNext(normalSuccessor);\n+                withExceptionNode.setExceptionEdge(exceptionSuccessor);\n+                lastInstr = normalSuccessor;\n+\n             } else {\n                 lastInstr = null;\n             }\n         }\n     }\n \n+    /**\n+     * Currently unimplemented here, but implemented in subclasses that need it.\n+     *\n+     * @param exceptionObject The node that needs an exception state.\n+     */\n+    protected void setExeptionState(ExceptionObjectNode exceptionObject) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c858675537ceef8035c9cccd64528f15e30747e7"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 864, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}