{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1ODA2NDg1", "number": 2364, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMTowNjo1N1rOD0sptA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMTowNjo1N1rOD0sptA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NTg0MTE2OnYy", "diffSide": "RIGHT", "path": "compiler/src/org.graalvm.compiler.phases.common/src/org/graalvm/compiler/phases/common/UseTrappingNullChecksPhase.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMTowNjo1N1rOGJwoPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwMzowNTozMVrOGMOysg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4NzEwMw==", "bodyText": "Couldn't there be multiple uncompress usages?", "url": "https://github.com/oracle/graal/pull/2364#discussion_r412887103", "createdAt": "2020-04-22T11:06:57Z", "author": {"login": "dougxc"}, "path": "compiler/src/org.graalvm.compiler.phases.common/src/org/graalvm/compiler/phases/common/UseTrappingNullChecksPhase.java", "diffHunk": "@@ -287,4 +292,22 @@ private static void replaceWithTrappingNullCheck(AbstractDeoptimizeNode deopt, I\n         GraphUtil.killCFG(trappingContinuation);\n         GraphUtil.tryKillUnused(isNullNode);\n     }\n+\n+    private static NullCheckNode tryUseUncompressedNullCheck(ValueNode value, IsNullNode isNullNode) {\n+        assert isNullNode.getValue().equals(value);\n+        CompressionNode uncompressed = null;\n+        for (Node usage : value.usages()) {\n+            if (usage instanceof CompressionNode) {\n+                if (((CompressionNode) usage).getOp() == CompressionNode.CompressionOp.Uncompress) {\n+                    assert ((CompressionNode) usage).getValue().equals(value);\n+                    uncompressed = (CompressionNode) usage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32032617a8714f69968d002d225834e8783b9010"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQ5MjMyOA==", "bodyText": "I searched the codes that the uncompress is mostly generated together with its input. And If there are multiple uncompress usages, would they be optimized to a single one by GVN? If it exists the corner cases, I think we'd better add the restriction of the single usage of uncompress.", "url": "https://github.com/oracle/graal/pull/2364#discussion_r413492328", "createdAt": "2020-04-23T04:03:16Z", "author": {"login": "XiaohongGong"}, "path": "compiler/src/org.graalvm.compiler.phases.common/src/org/graalvm/compiler/phases/common/UseTrappingNullChecksPhase.java", "diffHunk": "@@ -287,4 +292,22 @@ private static void replaceWithTrappingNullCheck(AbstractDeoptimizeNode deopt, I\n         GraphUtil.killCFG(trappingContinuation);\n         GraphUtil.tryKillUnused(isNullNode);\n     }\n+\n+    private static NullCheckNode tryUseUncompressedNullCheck(ValueNode value, IsNullNode isNullNode) {\n+        assert isNullNode.getValue().equals(value);\n+        CompressionNode uncompressed = null;\n+        for (Node usage : value.usages()) {\n+            if (usage instanceof CompressionNode) {\n+                if (((CompressionNode) usage).getOp() == CompressionNode.CompressionOp.Uncompress) {\n+                    assert ((CompressionNode) usage).getValue().equals(value);\n+                    uncompressed = (CompressionNode) usage;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4NzEwMw=="}, "originalCommit": {"oid": "32032617a8714f69968d002d225834e8783b9010"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYwMjAzNA==", "bodyText": "Yes, please add the restriction and only apply the transformation if there is a single uncompress usage.", "url": "https://github.com/oracle/graal/pull/2364#discussion_r413602034", "createdAt": "2020-04-23T08:06:13Z", "author": {"login": "dougxc"}, "path": "compiler/src/org.graalvm.compiler.phases.common/src/org/graalvm/compiler/phases/common/UseTrappingNullChecksPhase.java", "diffHunk": "@@ -287,4 +292,22 @@ private static void replaceWithTrappingNullCheck(AbstractDeoptimizeNode deopt, I\n         GraphUtil.killCFG(trappingContinuation);\n         GraphUtil.tryKillUnused(isNullNode);\n     }\n+\n+    private static NullCheckNode tryUseUncompressedNullCheck(ValueNode value, IsNullNode isNullNode) {\n+        assert isNullNode.getValue().equals(value);\n+        CompressionNode uncompressed = null;\n+        for (Node usage : value.usages()) {\n+            if (usage instanceof CompressionNode) {\n+                if (((CompressionNode) usage).getOp() == CompressionNode.CompressionOp.Uncompress) {\n+                    assert ((CompressionNode) usage).getValue().equals(value);\n+                    uncompressed = (CompressionNode) usage;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4NzEwMw=="}, "originalCommit": {"oid": "32032617a8714f69968d002d225834e8783b9010"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzYwMjg2NQ==", "bodyText": "OK! Thank you for review! I will update soon!", "url": "https://github.com/oracle/graal/pull/2364#discussion_r413602865", "createdAt": "2020-04-23T08:07:24Z", "author": {"login": "XiaohongGong"}, "path": "compiler/src/org.graalvm.compiler.phases.common/src/org/graalvm/compiler/phases/common/UseTrappingNullChecksPhase.java", "diffHunk": "@@ -287,4 +292,22 @@ private static void replaceWithTrappingNullCheck(AbstractDeoptimizeNode deopt, I\n         GraphUtil.killCFG(trappingContinuation);\n         GraphUtil.tryKillUnused(isNullNode);\n     }\n+\n+    private static NullCheckNode tryUseUncompressedNullCheck(ValueNode value, IsNullNode isNullNode) {\n+        assert isNullNode.getValue().equals(value);\n+        CompressionNode uncompressed = null;\n+        for (Node usage : value.usages()) {\n+            if (usage instanceof CompressionNode) {\n+                if (((CompressionNode) usage).getOp() == CompressionNode.CompressionOp.Uncompress) {\n+                    assert ((CompressionNode) usage).getValue().equals(value);\n+                    uncompressed = (CompressionNode) usage;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4NzEwMw=="}, "originalCommit": {"oid": "32032617a8714f69968d002d225834e8783b9010"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTIwMzE0Mw==", "bodyText": "Hi @dougxc I'v updated the patch according to your comment. So could you please take a look at it again? Thanks!", "url": "https://github.com/oracle/graal/pull/2364#discussion_r415203143", "createdAt": "2020-04-26T03:30:22Z", "author": {"login": "XiaohongGong"}, "path": "compiler/src/org.graalvm.compiler.phases.common/src/org/graalvm/compiler/phases/common/UseTrappingNullChecksPhase.java", "diffHunk": "@@ -287,4 +292,22 @@ private static void replaceWithTrappingNullCheck(AbstractDeoptimizeNode deopt, I\n         GraphUtil.killCFG(trappingContinuation);\n         GraphUtil.tryKillUnused(isNullNode);\n     }\n+\n+    private static NullCheckNode tryUseUncompressedNullCheck(ValueNode value, IsNullNode isNullNode) {\n+        assert isNullNode.getValue().equals(value);\n+        CompressionNode uncompressed = null;\n+        for (Node usage : value.usages()) {\n+            if (usage instanceof CompressionNode) {\n+                if (((CompressionNode) usage).getOp() == CompressionNode.CompressionOp.Uncompress) {\n+                    assert ((CompressionNode) usage).getValue().equals(value);\n+                    uncompressed = (CompressionNode) usage;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4NzEwMw=="}, "originalCommit": {"oid": "32032617a8714f69968d002d225834e8783b9010"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTM1MzYzMg==", "bodyText": "Looks good. I've started the process of integration.", "url": "https://github.com/oracle/graal/pull/2364#discussion_r415353632", "createdAt": "2020-04-26T17:01:13Z", "author": {"login": "dougxc"}, "path": "compiler/src/org.graalvm.compiler.phases.common/src/org/graalvm/compiler/phases/common/UseTrappingNullChecksPhase.java", "diffHunk": "@@ -287,4 +292,22 @@ private static void replaceWithTrappingNullCheck(AbstractDeoptimizeNode deopt, I\n         GraphUtil.killCFG(trappingContinuation);\n         GraphUtil.tryKillUnused(isNullNode);\n     }\n+\n+    private static NullCheckNode tryUseUncompressedNullCheck(ValueNode value, IsNullNode isNullNode) {\n+        assert isNullNode.getValue().equals(value);\n+        CompressionNode uncompressed = null;\n+        for (Node usage : value.usages()) {\n+            if (usage instanceof CompressionNode) {\n+                if (((CompressionNode) usage).getOp() == CompressionNode.CompressionOp.Uncompress) {\n+                    assert ((CompressionNode) usage).getValue().equals(value);\n+                    uncompressed = (CompressionNode) usage;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4NzEwMw=="}, "originalCommit": {"oid": "32032617a8714f69968d002d225834e8783b9010"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTQ3ODQ1MA==", "bodyText": "Thanks again for your review!", "url": "https://github.com/oracle/graal/pull/2364#discussion_r415478450", "createdAt": "2020-04-27T03:05:31Z", "author": {"login": "XiaohongGong"}, "path": "compiler/src/org.graalvm.compiler.phases.common/src/org/graalvm/compiler/phases/common/UseTrappingNullChecksPhase.java", "diffHunk": "@@ -287,4 +292,22 @@ private static void replaceWithTrappingNullCheck(AbstractDeoptimizeNode deopt, I\n         GraphUtil.killCFG(trappingContinuation);\n         GraphUtil.tryKillUnused(isNullNode);\n     }\n+\n+    private static NullCheckNode tryUseUncompressedNullCheck(ValueNode value, IsNullNode isNullNode) {\n+        assert isNullNode.getValue().equals(value);\n+        CompressionNode uncompressed = null;\n+        for (Node usage : value.usages()) {\n+            if (usage instanceof CompressionNode) {\n+                if (((CompressionNode) usage).getOp() == CompressionNode.CompressionOp.Uncompress) {\n+                    assert ((CompressionNode) usage).getValue().equals(value);\n+                    uncompressed = (CompressionNode) usage;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjg4NzEwMw=="}, "originalCommit": {"oid": "32032617a8714f69968d002d225834e8783b9010"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 869, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}