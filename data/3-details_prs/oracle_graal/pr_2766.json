{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5ODcxNTA4", "number": 2766, "title": "Fixing AArch64 emitCompare and zr/sp issues", "bodyText": "Previously the AArch64 emitCompare was issuing many unnecessary loads.\nIn addition, some of the logic for using zr/sp within cmp, sub(s), and\nadd(s) needed to be fixed.", "createdAt": "2020-08-19T01:40:25Z", "url": "https://github.com/oracle/graal/pull/2766", "merged": true, "mergeCommit": {"oid": "0b0090d5bf7eb4df3e1e3d90df26e0aa50a70a5a"}, "closed": true, "closedAt": "2020-08-19T21:41:30Z", "author": {"login": "teshull"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAXo4HAFqTQ3MDIxMzIxMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAeY8dAFqTQ3MDY0NzQ4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMjEzMjEz", "url": "https://github.com/oracle/graal/pull/2766#pullrequestreview-470213213", "createdAt": "2020-08-19T07:57:34Z", "commit": {"oid": "2c7fd2ed978304ffbbdabe8385652048789730ea"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzo1NzozNFrOHC7Njg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODo0NzoyOFrOHC9gTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgyOTMyNg==", "bodyText": "+1 because AArch64Assembler.java needs more asserts.", "url": "https://github.com/oracle/graal/pull/2766#discussion_r472829326", "createdAt": "2020-08-19T07:57:34Z", "author": {"login": "a74nh"}, "path": "compiler/src/org.graalvm.compiler.asm.aarch64/src/org/graalvm/compiler/asm/aarch64/AArch64Assembler.java", "diffHunk": "@@ -1936,6 +1936,9 @@ public void subs(int size, Register dst, Register src1, Register src2, ShiftType\n     }\n \n     private void addSubShiftedInstruction(Instruction instr, Register dst, Register src1, Register src2, ShiftType shiftType, int imm, InstructionType type) {\n+        assert !dst.equals(sp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7fd2ed978304ffbbdabe8385652048789730ea"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgzNzI5NA==", "bodyText": "Probably drop the LSL from the method name. Graal's ExtendType enum doesn't mention LSL.", "url": "https://github.com/oracle/graal/pull/2766#discussion_r472837294", "createdAt": "2020-08-19T08:06:32Z", "author": {"login": "a74nh"}, "path": "compiler/src/org.graalvm.compiler.asm.aarch64/src/org/graalvm/compiler/asm/aarch64/AArch64MacroAssembler.java", "diffHunk": "@@ -919,17 +919,25 @@ public void cset(int size, Register dst, ConditionFlag condition) {\n         super.csinc(size, dst, zr, zr, condition.negate());\n     }\n \n+    private static ExtendType getLSLExtendType(int size) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7fd2ed978304ffbbdabe8385652048789730ea"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg0MDY0Ng==", "bodyText": "Why drop the super. here? Is it because x might be sp?", "url": "https://github.com/oracle/graal/pull/2766#discussion_r472840646", "createdAt": "2020-08-19T08:10:19Z", "author": {"login": "a74nh"}, "path": "compiler/src/org.graalvm.compiler.asm.aarch64/src/org/graalvm/compiler/asm/aarch64/AArch64MacroAssembler.java", "diffHunk": "@@ -1802,28 +1813,24 @@ public void fmadd(int size, Register dst, Register src1, Register src2, Register\n      * Compares x and y and sets condition flags.\n      *\n      * @param size register size. Has to be 32 or 64.\n-     * @param x general purpose register. May not be null or stackpointer.\n+     * @param x general purpose register. May not be null.\n      * @param y general purpose register. May not be null or stackpointer.\n      */\n     public void cmp(int size, Register x, Register y) {\n         assert size == 32 || size == 64;\n-        super.subs(size, zr, x, y, ShiftType.LSL, 0);\n+        subs(size, zr, x, y);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7fd2ed978304ffbbdabe8385652048789730ea"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg0Mzc1OA==", "bodyText": "Do we want a assert(isComparisonImmediate(y)) check here?", "url": "https://github.com/oracle/graal/pull/2766#discussion_r472843758", "createdAt": "2020-08-19T08:13:37Z", "author": {"login": "a74nh"}, "path": "compiler/src/org.graalvm.compiler.asm.aarch64/src/org/graalvm/compiler/asm/aarch64/AArch64MacroAssembler.java", "diffHunk": "@@ -1802,28 +1813,24 @@ public void fmadd(int size, Register dst, Register src1, Register src2, Register\n      * Compares x and y and sets condition flags.\n      *\n      * @param size register size. Has to be 32 or 64.\n-     * @param x general purpose register. May not be null or stackpointer.\n+     * @param x general purpose register. May not be null.\n      * @param y general purpose register. May not be null or stackpointer.\n      */\n     public void cmp(int size, Register x, Register y) {\n         assert size == 32 || size == 64;\n-        super.subs(size, zr, x, y, ShiftType.LSL, 0);\n+        subs(size, zr, x, y);\n     }\n \n     /**\n      * Compares x to y and sets condition flags.\n      *\n      * @param size register size. Has to be 32 or 64.\n-     * @param x general purpose register. May not be null or stackpointer.\n+     * @param x general purpose register. May not be null or zero-register.\n      * @param y comparison immediate, {@link #isComparisonImmediate(long)} has to be true for it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7fd2ed978304ffbbdabe8385652048789730ea"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1Mzc5Nw==", "bodyText": "Ok, this turns \"cmp(sp,sp)\" into \"mov(r10,sp); cmp(r10,sp)\"\nFor cosmetic reasons, I want to say that you should update the right so that it does \"mov(r10,sp); cmp(r10,r10)\". But it's not going to make any difference.", "url": "https://github.com/oracle/graal/pull/2766#discussion_r472853797", "createdAt": "2020-08-19T08:26:15Z", "author": {"login": "a74nh"}, "path": "compiler/src/org.graalvm.compiler.core.aarch64/src/org/graalvm/compiler/core/aarch64/AArch64LIRGenerator.java", "diffHunk": "@@ -384,31 +385,44 @@ protected boolean emitCompare(PlatformKind cmpKind, Value a, Value b, Condition\n                 bExt = arithmeticLIRGen.emitSignExtend(b, compareBytes * 8, 64);\n             }\n \n-            if (LIRValueUtil.isVariable(bExt)) {\n-                left = load(bExt);\n+            /*\n+             * The AArch64 comparison instruction can treat register 31 as the stack pointer\n+             * register for the left operand, but not for the right operand.\n+             */\n+            boolean aIsStackPointer = ValueUtil.isRegister(aExt) && ValueUtil.asRegister(aExt).equals(AArch64.sp);\n+            boolean bIsStackPointer = ValueUtil.isRegister(bExt) && ValueUtil.asRegister(bExt).equals(AArch64.sp);\n+\n+            if (aIsStackPointer && bIsStackPointer) {\n+                // move b to a non-sp register", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7fd2ed978304ffbbdabe8385652048789730ea"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg2Njg5NA==", "bodyText": "All the changes in this patch make sense individually. But, I can't see what's actually removing the unnecessary loads. Is it the use of loadReg instead or load?", "url": "https://github.com/oracle/graal/pull/2766#discussion_r472866894", "createdAt": "2020-08-19T08:47:28Z", "author": {"login": "a74nh"}, "path": "compiler/src/org.graalvm.compiler.core.aarch64/src/org/graalvm/compiler/core/aarch64/AArch64LIRGenerator.java", "diffHunk": "@@ -384,31 +385,44 @@ protected boolean emitCompare(PlatformKind cmpKind, Value a, Value b, Condition\n                 bExt = arithmeticLIRGen.emitSignExtend(b, compareBytes * 8, 64);\n             }\n \n-            if (LIRValueUtil.isVariable(bExt)) {\n-                left = load(bExt);\n+            /*\n+             * The AArch64 comparison instruction can treat register 31 as the stack pointer\n+             * register for the left operand, but not for the right operand.\n+             */\n+            boolean aIsStackPointer = ValueUtil.isRegister(aExt) && ValueUtil.asRegister(aExt).equals(AArch64.sp);\n+            boolean bIsStackPointer = ValueUtil.isRegister(bExt) && ValueUtil.asRegister(bExt).equals(AArch64.sp);\n+\n+            if (aIsStackPointer && bIsStackPointer) {\n+                // move b to a non-sp register\n+                bIsStackPointer = false;\n+                bExt = emitMove(bExt);\n+            }\n+\n+            if (bIsStackPointer || (!aIsStackPointer && LIRValueUtil.isVariable(bExt))) {\n+                left = bExt;\n                 right = loadNonConst(aExt);\n                 mirrored = true;\n             } else {\n-                left = load(aExt);\n+                left = aExt;\n                 right = loadNonConst(bExt);\n                 mirrored = false;\n             }\n-            append(new AArch64Compare.CompareOp(left, loadNonCompareConst(right)));\n+            append(new AArch64Compare.CompareOp(loadReg(left), loadNonCompareConst(right)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7fd2ed978304ffbbdabe8385652048789730ea"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "46140f9f7b2110afd3bda5c70ae6d171f7a06604", "author": {"user": {"login": "teshull", "name": "Tom Shull"}}, "url": "https://github.com/oracle/graal/commit/46140f9f7b2110afd3bda5c70ae6d171f7a06604", "committedDate": "2020-08-19T15:43:07Z", "message": "Fixing AArch64 emitCompare and zr/sp issues\n\nPreviously the AArch64 emitCompare was issuing many unnecessary loads.\nIn addition, some of the logic for using zr/sp within cmp, sub(s), and\nadd(s) needed to be fixed."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2c7fd2ed978304ffbbdabe8385652048789730ea", "author": {"user": {"login": "teshull", "name": "Tom Shull"}}, "url": "https://github.com/oracle/graal/commit/2c7fd2ed978304ffbbdabe8385652048789730ea", "committedDate": "2020-08-19T01:27:07Z", "message": "Fixing AArch64 emitCompare and zr/sp issues\n\nPreviously the AArch64 emitCompare was issuing many unnecessary loads.\nIn addition, some of the logic for using zr/sp within cmp, sub(s), and\nadd(s) needed to be fixed."}, "afterCommit": {"oid": "46140f9f7b2110afd3bda5c70ae6d171f7a06604", "author": {"user": {"login": "teshull", "name": "Tom Shull"}}, "url": "https://github.com/oracle/graal/commit/46140f9f7b2110afd3bda5c70ae6d171f7a06604", "committedDate": "2020-08-19T15:43:07Z", "message": "Fixing AArch64 emitCompare and zr/sp issues\n\nPreviously the AArch64 emitCompare was issuing many unnecessary loads.\nIn addition, some of the logic for using zr/sp within cmp, sub(s), and\nadd(s) needed to be fixed."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNjQ3NDgx", "url": "https://github.com/oracle/graal/pull/2766#pullrequestreview-470647481", "createdAt": "2020-08-19T16:41:38Z", "commit": {"oid": "46140f9f7b2110afd3bda5c70ae6d171f7a06604"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 918, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}