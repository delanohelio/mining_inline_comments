{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0ODIxNjc3", "number": 2960, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo0NzowOVrOE1Qb5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMDoxMTo0OVrOFAjwtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0Mjc5MjcwOnYy", "diffSide": "RIGHT", "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo0NzowOVrOHtbZzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo0NzowOVrOHtbZzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM5Njk0MA==", "bodyText": "21.0", "url": "https://github.com/oracle/graal/pull/2960#discussion_r517396940", "createdAt": "2020-11-04T14:47:09Z", "author": {"login": "vjovanov"}, "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java", "diffHunk": "@@ -84,6 +86,31 @@ static boolean includedIn(Class<? extends Platform> platformGroup) {\n         return platformGroup.isInstance(ImageSingletons.lookup(Platform.class));\n     }\n \n+    /**\n+     * Returns string representing Platform's OS name\n+     * <p>\n+     * This method should be implemented either in final class or as default in respective OS\n+     * interface.\n+     *\n+     * @since 20.3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332c191834da183d20218c30092767dec48c2e32"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjgwMzczOnYy", "diffSide": "RIGHT", "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo0OTozNFrOHtbgjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo0OTozNFrOHtbgjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzM5ODY2OA==", "bodyText": "the string representation", "url": "https://github.com/oracle/graal/pull/2960#discussion_r517398668", "createdAt": "2020-11-04T14:49:34Z", "author": {"login": "vjovanov"}, "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java", "diffHunk": "@@ -84,6 +86,31 @@ static boolean includedIn(Class<? extends Platform> platformGroup) {\n         return platformGroup.isInstance(ImageSingletons.lookup(Platform.class));\n     }\n \n+    /**\n+     * Returns string representing Platform's OS name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332c191834da183d20218c30092767dec48c2e32"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjgyMzA4OnYy", "diffSide": "RIGHT", "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo1Mzo1M1rOHtbs8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo1Mzo1M1rOHtbs8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwMTg0MQ==", "bodyText": "a final class\nas default is unclear", "url": "https://github.com/oracle/graal/pull/2960#discussion_r517401841", "createdAt": "2020-11-04T14:53:53Z", "author": {"login": "vjovanov"}, "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java", "diffHunk": "@@ -84,6 +86,31 @@ static boolean includedIn(Class<? extends Platform> platformGroup) {\n         return platformGroup.isInstance(ImageSingletons.lookup(Platform.class));\n     }\n \n+    /**\n+     * Returns string representing Platform's OS name\n+     * <p>\n+     * This method should be implemented either in final class or as default in respective OS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332c191834da183d20218c30092767dec48c2e32"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MjgzMjI1OnYy", "diffSide": "RIGHT", "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo1NTo0M1rOHtbypw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNDo1NTo0M1rOHtbypw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwMzMwMw==", "bodyText": "I don't think we need WINDOWS_BASE?", "url": "https://github.com/oracle/graal/pull/2960#discussion_r517403303", "createdAt": "2020-11-04T14:55:43Z", "author": {"login": "vjovanov"}, "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java", "diffHunk": "@@ -113,26 +171,54 @@ static boolean includedIn(Class<? extends Platform> platformGroup) {\n      *\n      * @since 19.0\n      */\n-    interface LINUX extends InternalPlatform.PLATFORM_JNI {\n+    interface LINUX extends LINUX_BASE {\n+        default String getOS() {\n+            return \"linux\";\n+        }\n+    }\n \n+    /**\n+     * Supported operating system: Android.\n+     *\n+     * @since 20.3\n+     */\n+    interface ANDROID extends LINUX_BASE {\n+        default String getOS() {\n+            return \"android\";\n+        }\n     }\n \n     /**\n      * Supported operating system: Darwin (MacOS).\n      *\n      * @since 19.0\n      */\n-    interface DARWIN extends InternalPlatform.PLATFORM_JNI {\n+    interface DARWIN extends DARWIN_BASE {\n+        default String getOS() {\n+            return \"darwin\";\n+        }\n+    }\n \n+    /**\n+     * Supported operating system: iOS.\n+     *\n+     * @since 20.3\n+     */\n+    interface IOS extends DARWIN_BASE {\n+        default String getOS() {\n+            return \"ios\";\n+        }\n     }\n \n     /**\n      * Supported operating system: Windows.\n      *\n      * @since 19.0\n      */\n-    interface WINDOWS extends InternalPlatform.PLATFORM_JNI {\n-\n+    interface WINDOWS extends WINDOWS_BASE {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332c191834da183d20218c30092767dec48c2e32"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0Mjg3Mzk5OnYy", "diffSide": "LEFT", "path": "substratevm/src/com.oracle.objectfile/src/com/oracle/objectfile/macho/MachOObjectFile.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNTowNDoyM1rOHtcMgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxNTowNDoyM1rOHtcMgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzQwOTkyMg==", "bodyText": "We  should fix this function.", "url": "https://github.com/oracle/graal/pull/2960#discussion_r517409922", "createdAt": "2020-11-04T15:04:23Z", "author": {"login": "vjovanov"}, "path": "substratevm/src/com.oracle.objectfile/src/com/oracle/objectfile/macho/MachOObjectFile.java", "diffHunk": "@@ -80,7 +82,7 @@\n      * Create an empty Mach-O object file.\n      */\n     public MachOObjectFile(int pageSize) {\n-        this(pageSize, MachOCpuType.from(System.getProperty(\"svm.targetArch\") == null ? System.getProperty(\"os.arch\") : System.getProperty(\"svm.targetArch\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "332c191834da183d20218c30092767dec48c2e32"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NzI5Mjc2OnYy", "diffSide": "RIGHT", "path": "substratevm/src/com.oracle.svm.core.posix/src/com/oracle/svm/core/posix/linux/libc/MuslLibC.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMToxMzoxM1rOH-U9mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMzo0NToxMlrOH-cXZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTExNzIwOA==", "bodyText": "@gradinac can we use >= here?", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535117208", "createdAt": "2020-12-03T11:13:13Z", "author": {"login": "vjovanov"}, "path": "substratevm/src/com.oracle.svm.core.posix/src/com/oracle/svm/core/posix/linux/libc/MuslLibC.java", "diffHunk": "@@ -70,4 +61,14 @@ public boolean hasIsolatedNamespaces() {\n     public boolean requiresLibCSpecificStaticJDKLibraries() {\n         return true;\n     }\n+\n+    @Override\n+    public void checkIfLibCSupported() {\n+        if (!SubstrateOptions.StaticExecutable.getValue()) {\n+            throw UserError.abort(\"Musl can only be used for statically linked executables.\");\n+        }\n+        if (JavaVersionUtil.JAVA_SPEC != 11) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db981fa1fb8fa3059c76cbb730f3733daac94cf"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTIzODUwMg==", "bodyText": "The change should work out of the box, but it hasn't been tested yet. I think we should do it as part of a separate PR.", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535238502", "createdAt": "2020-12-03T13:45:12Z", "author": {"login": "gradinac"}, "path": "substratevm/src/com.oracle.svm.core.posix/src/com/oracle/svm/core/posix/linux/libc/MuslLibC.java", "diffHunk": "@@ -70,4 +61,14 @@ public boolean hasIsolatedNamespaces() {\n     public boolean requiresLibCSpecificStaticJDKLibraries() {\n         return true;\n     }\n+\n+    @Override\n+    public void checkIfLibCSupported() {\n+        if (!SubstrateOptions.StaticExecutable.getValue()) {\n+            throw UserError.abort(\"Musl can only be used for statically linked executables.\");\n+        }\n+        if (JavaVersionUtil.JAVA_SPEC != 11) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTExNzIwOA=="}, "originalCommit": {"oid": "7db981fa1fb8fa3059c76cbb730f3733daac94cf"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NzI5ODQ0OnYy", "diffSide": "RIGHT", "path": "substratevm/src/com.oracle.svm.core.posix/src/com/oracle/svm/core/posix/linux/libc/MuslLibC.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMToxNDoxNVrOH-VBWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMzo1MDoxMVrOH-clKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTExODE3MQ==", "bodyText": "@gradinac why can't we use Musl with dynamic linking?", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535118171", "createdAt": "2020-12-03T11:14:15Z", "author": {"login": "vjovanov"}, "path": "substratevm/src/com.oracle.svm.core.posix/src/com/oracle/svm/core/posix/linux/libc/MuslLibC.java", "diffHunk": "@@ -70,4 +61,14 @@ public boolean hasIsolatedNamespaces() {\n     public boolean requiresLibCSpecificStaticJDKLibraries() {\n         return true;\n     }\n+\n+    @Override\n+    public void checkIfLibCSupported() {\n+        if (!SubstrateOptions.StaticExecutable.getValue()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db981fa1fb8fa3059c76cbb730f3733daac94cf"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTI0MjAyNA==", "bodyText": "The users would be required to have a dynamic musl linker installed in order to be able to run both the C query code and the generated native-image. I remember hitting segfaults when I tried this out a while back, most likely due to the generated executable picking the wrong dynamic linker/libraries.\nWe haven't really had any use-cases for this functionality yet as well - those who do use musl have so far been only interested in creating static native-images. We can of course enable and support this if users request such a feature.", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535242024", "createdAt": "2020-12-03T13:50:11Z", "author": {"login": "gradinac"}, "path": "substratevm/src/com.oracle.svm.core.posix/src/com/oracle/svm/core/posix/linux/libc/MuslLibC.java", "diffHunk": "@@ -70,4 +61,14 @@ public boolean hasIsolatedNamespaces() {\n     public boolean requiresLibCSpecificStaticJDKLibraries() {\n         return true;\n     }\n+\n+    @Override\n+    public void checkIfLibCSupported() {\n+        if (!SubstrateOptions.StaticExecutable.getValue()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTExODE3MQ=="}, "originalCommit": {"oid": "7db981fa1fb8fa3059c76cbb730f3733daac94cf"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NzM1MDYzOnYy", "diffSide": "RIGHT", "path": "substratevm/src/com.oracle.svm.core.windows/src/com/oracle/svm/core/windows/WindowsSystemPropertiesSupport.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMToyMjoyMFrOH-Vi0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxMjowODo0MFrOH_OISA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEyNjczOQ==", "bodyText": "Why don't we solve this right away?", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535126739", "createdAt": "2020-12-03T11:22:20Z", "author": {"login": "vjovanov"}, "path": "substratevm/src/com.oracle.svm.core.windows/src/com/oracle/svm/core/windows/WindowsSystemPropertiesSupport.java", "diffHunk": "@@ -122,13 +132,194 @@ private static String toJavaString(WCharPointer wcString, UnsignedWord length) {\n         return CTypeConversion.toJavaString((CCharPointer) wcString, SizeOf.unsigned(WCharPointer.class).multiply(length), StandardCharsets.UTF_16LE);\n     }\n \n+    private Pair<String, String> cachedOsNameAndVersion;\n+\n+    @Override\n+    protected String osNameValue() {\n+        if (cachedOsNameAndVersion == null) {\n+            cachedOsNameAndVersion = getOsNameAndVersion();\n+        }\n+        return cachedOsNameAndVersion.getLeft();\n+    }\n+\n     @Override\n     protected String osVersionValue() {\n-        ByteBuffer versionBytes = ByteBuffer.allocate(4);\n-        versionBytes.putInt(SysinfoAPI.GetVersion());\n-        int majorVersion = versionBytes.get(3);\n-        int minorVersion = versionBytes.get(2);\n-        return majorVersion + \".\" + minorVersion;\n+        if (cachedOsNameAndVersion == null) {\n+            cachedOsNameAndVersion = getOsNameAndVersion();\n+        }\n+        return cachedOsNameAndVersion.getRight();\n+    }\n+\n+    public Pair<String, String> getOsNameAndVersion() {\n+        /*\n+         * Reimplementation of code from java_props_md.c\n+         */\n+        SysinfoAPI.OSVERSIONINFOEXA ver = StackValue.get(SysinfoAPI.OSVERSIONINFOEXA.class);\n+        ver.dwOSVersionInfoSize(SizeOf.get(SysinfoAPI.OSVERSIONINFOEXA.class));\n+        SysinfoAPI.GetVersionExA(ver);\n+\n+        boolean is64bit = true; /* ATM we only support 64-bit Windows OS's */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db981fa1fb8fa3059c76cbb730f3733daac94cf"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEyODQzNA==", "bodyText": "I would add a number of bits to architecture.", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535128434", "createdAt": "2020-12-03T11:23:54Z", "author": {"login": "vjovanov"}, "path": "substratevm/src/com.oracle.svm.core.windows/src/com/oracle/svm/core/windows/WindowsSystemPropertiesSupport.java", "diffHunk": "@@ -122,13 +132,194 @@ private static String toJavaString(WCharPointer wcString, UnsignedWord length) {\n         return CTypeConversion.toJavaString((CCharPointer) wcString, SizeOf.unsigned(WCharPointer.class).multiply(length), StandardCharsets.UTF_16LE);\n     }\n \n+    private Pair<String, String> cachedOsNameAndVersion;\n+\n+    @Override\n+    protected String osNameValue() {\n+        if (cachedOsNameAndVersion == null) {\n+            cachedOsNameAndVersion = getOsNameAndVersion();\n+        }\n+        return cachedOsNameAndVersion.getLeft();\n+    }\n+\n     @Override\n     protected String osVersionValue() {\n-        ByteBuffer versionBytes = ByteBuffer.allocate(4);\n-        versionBytes.putInt(SysinfoAPI.GetVersion());\n-        int majorVersion = versionBytes.get(3);\n-        int minorVersion = versionBytes.get(2);\n-        return majorVersion + \".\" + minorVersion;\n+        if (cachedOsNameAndVersion == null) {\n+            cachedOsNameAndVersion = getOsNameAndVersion();\n+        }\n+        return cachedOsNameAndVersion.getRight();\n+    }\n+\n+    public Pair<String, String> getOsNameAndVersion() {\n+        /*\n+         * Reimplementation of code from java_props_md.c\n+         */\n+        SysinfoAPI.OSVERSIONINFOEXA ver = StackValue.get(SysinfoAPI.OSVERSIONINFOEXA.class);\n+        ver.dwOSVersionInfoSize(SizeOf.get(SysinfoAPI.OSVERSIONINFOEXA.class));\n+        SysinfoAPI.GetVersionExA(ver);\n+\n+        boolean is64bit = true; /* ATM we only support 64-bit Windows OS's */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEyNjczOQ=="}, "originalCommit": {"oid": "7db981fa1fb8fa3059c76cbb730f3733daac94cf"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA1MzgzMg==", "bodyText": "I implemented a workaround similar to this, since it was the least painful fix to do.\nIn the improbable case that in the future there are supported Windows systems which are using 64 bit architecture which name doesn't end with \"64\", this class will require changes anyway in order to support that system's naming convention.", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536053832", "createdAt": "2020-12-04T12:08:40Z", "author": {"login": "lazar-mitrovic"}, "path": "substratevm/src/com.oracle.svm.core.windows/src/com/oracle/svm/core/windows/WindowsSystemPropertiesSupport.java", "diffHunk": "@@ -122,13 +132,194 @@ private static String toJavaString(WCharPointer wcString, UnsignedWord length) {\n         return CTypeConversion.toJavaString((CCharPointer) wcString, SizeOf.unsigned(WCharPointer.class).multiply(length), StandardCharsets.UTF_16LE);\n     }\n \n+    private Pair<String, String> cachedOsNameAndVersion;\n+\n+    @Override\n+    protected String osNameValue() {\n+        if (cachedOsNameAndVersion == null) {\n+            cachedOsNameAndVersion = getOsNameAndVersion();\n+        }\n+        return cachedOsNameAndVersion.getLeft();\n+    }\n+\n     @Override\n     protected String osVersionValue() {\n-        ByteBuffer versionBytes = ByteBuffer.allocate(4);\n-        versionBytes.putInt(SysinfoAPI.GetVersion());\n-        int majorVersion = versionBytes.get(3);\n-        int minorVersion = versionBytes.get(2);\n-        return majorVersion + \".\" + minorVersion;\n+        if (cachedOsNameAndVersion == null) {\n+            cachedOsNameAndVersion = getOsNameAndVersion();\n+        }\n+        return cachedOsNameAndVersion.getRight();\n+    }\n+\n+    public Pair<String, String> getOsNameAndVersion() {\n+        /*\n+         * Reimplementation of code from java_props_md.c\n+         */\n+        SysinfoAPI.OSVERSIONINFOEXA ver = StackValue.get(SysinfoAPI.OSVERSIONINFOEXA.class);\n+        ver.dwOSVersionInfoSize(SizeOf.get(SysinfoAPI.OSVERSIONINFOEXA.class));\n+        SysinfoAPI.GetVersionExA(ver);\n+\n+        boolean is64bit = true; /* ATM we only support 64-bit Windows OS's */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEyNjczOQ=="}, "originalCommit": {"oid": "7db981fa1fb8fa3059c76cbb730f3733daac94cf"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NzM4NjQxOnYy", "diffSide": "RIGHT", "path": "substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMToyNzo0N1rOH-V5gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjoyMjo1NlrOH-lEsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzMjU0NQ==", "bodyText": "the linker call", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535132545", "createdAt": "2020-12-03T11:27:47Z", "author": {"login": "vjovanov"}, "path": "substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java", "diffHunk": "@@ -140,6 +144,9 @@ public static void setDebugInfoValueUpdateHandler(ValueUpdateHandler updateHandl\n     @Option(help = \"Path passed to the linker as the -rpath (list of comma-separated directories)\")//\n     public static final HostedOptionKey<String[]> LinkerRPath = new HostedOptionKey<>(null);\n \n+    @Option(help = \"String which would be appended to linker call\")//", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db981fa1fb8fa3059c76cbb730f3733daac94cf"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM4MTE2OA==", "bodyText": "Fixed", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535381168", "createdAt": "2020-12-03T16:22:56Z", "author": {"login": "lazar-mitrovic"}, "path": "substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java", "diffHunk": "@@ -140,6 +144,9 @@ public static void setDebugInfoValueUpdateHandler(ValueUpdateHandler updateHandl\n     @Option(help = \"Path passed to the linker as the -rpath (list of comma-separated directories)\")//\n     public static final HostedOptionKey<String[]> LinkerRPath = new HostedOptionKey<>(null);\n \n+    @Option(help = \"String which would be appended to linker call\")//", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzMjU0NQ=="}, "originalCommit": {"oid": "7db981fa1fb8fa3059c76cbb730f3733daac94cf"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NzM4Nzg4OnYy", "diffSide": "RIGHT", "path": "substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/VMInspection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMToyODowM1rOH-V6gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjoyMzowNlrOH-lFMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzMjgwMQ==", "bodyText": "Unrelated change.", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535132801", "createdAt": "2020-12-03T11:28:03Z", "author": {"login": "vjovanov"}, "path": "substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/VMInspection.java", "diffHunk": "@@ -97,7 +97,7 @@ public static boolean isEnabled() {\n \n class DumpAllStacks implements SignalHandler {\n     static void install() {\n-        Signal.handle(Platform.includedIn(WINDOWS.class) ? new Signal(\"BREAK\") : new Signal(\"QUIT\"), new DumpAllStacks());\n+        Signal.handle(Platform.includedIn(Platform.WINDOWS.class) ? new Signal(\"BREAK\") : new Signal(\"QUIT\"), new DumpAllStacks());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db981fa1fb8fa3059c76cbb730f3733daac94cf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM4MTI5Nw==", "bodyText": "Fixed", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535381297", "createdAt": "2020-12-03T16:23:06Z", "author": {"login": "lazar-mitrovic"}, "path": "substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/VMInspection.java", "diffHunk": "@@ -97,7 +97,7 @@ public static boolean isEnabled() {\n \n class DumpAllStacks implements SignalHandler {\n     static void install() {\n-        Signal.handle(Platform.includedIn(WINDOWS.class) ? new Signal(\"BREAK\") : new Signal(\"QUIT\"), new DumpAllStacks());\n+        Signal.handle(Platform.includedIn(Platform.WINDOWS.class) ? new Signal(\"BREAK\") : new Signal(\"QUIT\"), new DumpAllStacks());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzMjgwMQ=="}, "originalCommit": {"oid": "7db981fa1fb8fa3059c76cbb730f3733daac94cf"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NzQxODMyOnYy", "diffSide": "RIGHT", "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/NativeImageGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMTozMzowNlrOH-WOYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjoyMzoxNVrOH-lFlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzNzg4OA==", "bodyText": "I think this line can be returned back.", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535137888", "createdAt": "2020-12-03T11:33:06Z", "author": {"login": "vjovanov"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/NativeImageGenerator.java", "diffHunk": "@@ -314,57 +315,64 @@ public NativeImageGenerator(ImageClassLoader loader, HostedOptionProvider option\n         optionProvider.getRuntimeValues().put(GraalOptions.EagerSnippets, true);\n     }\n \n-    public static Platform defaultPlatform(ClassLoader classLoader) {\n+    public static Platform loadPlatform(ClassLoader classLoader, String platformClassName) throws ClassNotFoundException {\n+        Class<?> platformClass;\n+\n+        platformClass = classLoader.loadClass(platformClassName);\n+\n+        Object result;\n+        try {\n+            result = ReflectionUtil.newInstance(platformClass);\n+        } catch (ReflectionUtilError ex) {\n+            throw UserError.abort(ex.getCause(), \"Could not instantiate platform class %s. Ensure the class is not abstract and has a no-argument constructor.\", platformClassName);\n+        }\n+\n+        if (!(result instanceof Platform)) {\n+            throw UserError.abort(\"Platform class %s does not implement %s\", platformClassName, Platform.class.getTypeName());\n+        }\n+        return (Platform) result;\n+    }\n+\n+    public static Platform loadPlatform(String os, String arch) {\n+        ServiceLoader<Platform> loader = ServiceLoader.load(Platform.class);\n+        for (Platform platform : loader) {\n+            if (platform.getOS().equals(os) && platform.getArchitecture().equals(arch)) {\n+                return platform;\n+            }\n+        }\n+        throw UserError.abort(\"Platform specified as \" + os + \"-\" + arch +\n+                        \" isn't supported.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db981fa1fb8fa3059c76cbb730f3733daac94cf"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM4MTM5Ng==", "bodyText": "Fixed", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535381396", "createdAt": "2020-12-03T16:23:15Z", "author": {"login": "lazar-mitrovic"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/NativeImageGenerator.java", "diffHunk": "@@ -314,57 +315,64 @@ public NativeImageGenerator(ImageClassLoader loader, HostedOptionProvider option\n         optionProvider.getRuntimeValues().put(GraalOptions.EagerSnippets, true);\n     }\n \n-    public static Platform defaultPlatform(ClassLoader classLoader) {\n+    public static Platform loadPlatform(ClassLoader classLoader, String platformClassName) throws ClassNotFoundException {\n+        Class<?> platformClass;\n+\n+        platformClass = classLoader.loadClass(platformClassName);\n+\n+        Object result;\n+        try {\n+            result = ReflectionUtil.newInstance(platformClass);\n+        } catch (ReflectionUtilError ex) {\n+            throw UserError.abort(ex.getCause(), \"Could not instantiate platform class %s. Ensure the class is not abstract and has a no-argument constructor.\", platformClassName);\n+        }\n+\n+        if (!(result instanceof Platform)) {\n+            throw UserError.abort(\"Platform class %s does not implement %s\", platformClassName, Platform.class.getTypeName());\n+        }\n+        return (Platform) result;\n+    }\n+\n+    public static Platform loadPlatform(String os, String arch) {\n+        ServiceLoader<Platform> loader = ServiceLoader.load(Platform.class);\n+        for (Platform platform : loader) {\n+            if (platform.getOS().equals(os) && platform.getArchitecture().equals(arch)) {\n+                return platform;\n+            }\n+        }\n+        throw UserError.abort(\"Platform specified as \" + os + \"-\" + arch +\n+                        \" isn't supported.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzNzg4OA=="}, "originalCommit": {"oid": "7db981fa1fb8fa3059c76cbb730f3733daac94cf"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NzQyMTA5OnYy", "diffSide": "RIGHT", "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/ServiceLoaderFeature.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMTozMzozM1rOH-WQLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNjoyMzoyNFrOH-lGBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzODM0OA==", "bodyText": "I don't see a need for an extra line here.", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535138348", "createdAt": "2020-12-03T11:33:33Z", "author": {"login": "vjovanov"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/ServiceLoaderFeature.java", "diffHunk": "@@ -103,7 +103,9 @@\n      */\n     private static final Set<String> SERVICES_TO_SKIP = new HashSet<>(Arrays.asList(\n                     \"java.security.Provider\",                       // see SecurityServicesFeature\n-                    \"sun.util.locale.provider.LocaleDataMetaInfo\"   // see LocaleSubstitutions\n+                    \"sun.util.locale.provider.LocaleDataMetaInfo\",  // see LocaleSubstitutions\n+                    \"org.graalvm.nativeimage.Platform\"  // type shouldn't be reachable after\n+                                                        // intrinsification", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db981fa1fb8fa3059c76cbb730f3733daac94cf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzODk0Mg==", "bodyText": "I would also describe better why is this necessary.", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535138942", "createdAt": "2020-12-03T11:34:11Z", "author": {"login": "vjovanov"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/ServiceLoaderFeature.java", "diffHunk": "@@ -103,7 +103,9 @@\n      */\n     private static final Set<String> SERVICES_TO_SKIP = new HashSet<>(Arrays.asList(\n                     \"java.security.Provider\",                       // see SecurityServicesFeature\n-                    \"sun.util.locale.provider.LocaleDataMetaInfo\"   // see LocaleSubstitutions\n+                    \"sun.util.locale.provider.LocaleDataMetaInfo\",  // see LocaleSubstitutions\n+                    \"org.graalvm.nativeimage.Platform\"  // type shouldn't be reachable after\n+                                                        // intrinsification", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzODM0OA=="}, "originalCommit": {"oid": "7db981fa1fb8fa3059c76cbb730f3733daac94cf"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTM4MTUxMA==", "bodyText": "Fixed", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535381510", "createdAt": "2020-12-03T16:23:24Z", "author": {"login": "lazar-mitrovic"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/ServiceLoaderFeature.java", "diffHunk": "@@ -103,7 +103,9 @@\n      */\n     private static final Set<String> SERVICES_TO_SKIP = new HashSet<>(Arrays.asList(\n                     \"java.security.Provider\",                       // see SecurityServicesFeature\n-                    \"sun.util.locale.provider.LocaleDataMetaInfo\"   // see LocaleSubstitutions\n+                    \"sun.util.locale.provider.LocaleDataMetaInfo\",  // see LocaleSubstitutions\n+                    \"org.graalvm.nativeimage.Platform\"  // type shouldn't be reachable after\n+                                                        // intrinsification", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTEzODM0OA=="}, "originalCommit": {"oid": "7db981fa1fb8fa3059c76cbb730f3733daac94cf"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NzQ1MzE5OnYy", "diffSide": "RIGHT", "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/c/CAnnotationProcessorCache.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxMTozOTowNlrOH-Wk8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNzoyMDo0NVrOH-oIdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE0MzY2NA==", "bodyText": "This is hard to understand.", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535143664", "createdAt": "2020-12-03T11:39:06Z", "author": {"login": "vjovanov"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/c/CAnnotationProcessorCache.java", "diffHunk": "@@ -66,7 +72,23 @@\n \n     public static class Options {\n         @Option(help = \"Indicate the C Annotation Processor to use previously cached native information when generating C Type information.\")//\n-        public static final HostedOptionKey<Boolean> UseCAPCache = new HostedOptionKey<>(false);\n+        public static final HostedOptionKey<Boolean> UseCAPCache = new HostedOptionKey<Boolean>(false) {\n+            @Override\n+            public Boolean getValueOrDefault(UnmodifiableEconomicMap<OptionKey<?>, Object> values) {\n+                if (!values.containsKey(this)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7db981fa1fb8fa3059c76cbb730f3733daac94cf"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQzMTI4NQ==", "bodyText": "Should be fixed.", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535431285", "createdAt": "2020-12-03T17:20:45Z", "author": {"login": "lazar-mitrovic"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/c/CAnnotationProcessorCache.java", "diffHunk": "@@ -66,7 +72,23 @@\n \n     public static class Options {\n         @Option(help = \"Indicate the C Annotation Processor to use previously cached native information when generating C Type information.\")//\n-        public static final HostedOptionKey<Boolean> UseCAPCache = new HostedOptionKey<>(false);\n+        public static final HostedOptionKey<Boolean> UseCAPCache = new HostedOptionKey<Boolean>(false) {\n+            @Override\n+            public Boolean getValueOrDefault(UnmodifiableEconomicMap<OptionKey<?>, Object> values) {\n+                if (!values.containsKey(this)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTE0MzY2NA=="}, "originalCommit": {"oid": "7db981fa1fb8fa3059c76cbb730f3733daac94cf"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTI3ODM0OnYy", "diffSide": "RIGHT", "path": "substratevm/src/com.oracle.objectfile/src/com/oracle/objectfile/macho/MachOObjectFile.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMDowMjo1NVrOH-6wXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODo1ODo1NVrOH_d5eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNjQxMg==", "bodyText": "How is it ever possible that ImageSingletons.lookup(Platform.class).getArchitecture() does not return the correct architecture?\nI think a goal of this PR should be to remove the system properties svm.targetArch and svm.targetName", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535736412", "createdAt": "2020-12-04T00:02:55Z", "author": {"login": "christianwimmer"}, "path": "substratevm/src/com.oracle.objectfile/src/com/oracle/objectfile/macho/MachOObjectFile.java", "diffHunk": "@@ -80,7 +82,7 @@\n      * Create an empty Mach-O object file.\n      */\n     public MachOObjectFile(int pageSize) {\n-        this(pageSize, MachOCpuType.from(System.getProperty(\"svm.targetArch\") == null ? System.getProperty(\"os.arch\") : System.getProperty(\"svm.targetArch\")));\n+        this(pageSize, MachOCpuType.from(System.getProperty(\"svm.targetArch\") == null ? ImageSingletons.lookup(Platform.class).getArchitecture() : System.getProperty(\"svm.targetArch\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "887bc8e2d381ed23a440203b37efc38cbd2ac8e4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA0MDEzMg==", "bodyText": "I was trying to make this PR additive without breaking any of existing use-cases (for example Gluon Substrate, or non public platforms). My reasoning was that after this PR is accepted, removal of these non-api ways to specify non standard os.name/os.arch shouldn't be an issue.", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536040132", "createdAt": "2020-12-04T11:43:32Z", "author": {"login": "lazar-mitrovic"}, "path": "substratevm/src/com.oracle.objectfile/src/com/oracle/objectfile/macho/MachOObjectFile.java", "diffHunk": "@@ -80,7 +82,7 @@\n      * Create an empty Mach-O object file.\n      */\n     public MachOObjectFile(int pageSize) {\n-        this(pageSize, MachOCpuType.from(System.getProperty(\"svm.targetArch\") == null ? System.getProperty(\"os.arch\") : System.getProperty(\"svm.targetArch\")));\n+        this(pageSize, MachOCpuType.from(System.getProperty(\"svm.targetArch\") == null ? ImageSingletons.lookup(Platform.class).getArchitecture() : System.getProperty(\"svm.targetArch\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNjQxMg=="}, "originalCommit": {"oid": "887bc8e2d381ed23a440203b37efc38cbd2ac8e4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI4NzM2NA==", "bodyText": "I'm talking here about internal usages of these system properties. I'm fine if we keep them set in the image builder for another release. But all internal usages should go away immediately in this PR.", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536287364", "createdAt": "2020-12-04T18:15:08Z", "author": {"login": "christianwimmer"}, "path": "substratevm/src/com.oracle.objectfile/src/com/oracle/objectfile/macho/MachOObjectFile.java", "diffHunk": "@@ -80,7 +82,7 @@\n      * Create an empty Mach-O object file.\n      */\n     public MachOObjectFile(int pageSize) {\n-        this(pageSize, MachOCpuType.from(System.getProperty(\"svm.targetArch\") == null ? System.getProperty(\"os.arch\") : System.getProperty(\"svm.targetArch\")));\n+        this(pageSize, MachOCpuType.from(System.getProperty(\"svm.targetArch\") == null ? ImageSingletons.lookup(Platform.class).getArchitecture() : System.getProperty(\"svm.targetArch\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNjQxMg=="}, "originalCommit": {"oid": "887bc8e2d381ed23a440203b37efc38cbd2ac8e4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwMTI5Ng==", "bodyText": "Oh now I get it, you are right. I'll change this asap.", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536301296", "createdAt": "2020-12-04T18:40:00Z", "author": {"login": "lazar-mitrovic"}, "path": "substratevm/src/com.oracle.objectfile/src/com/oracle/objectfile/macho/MachOObjectFile.java", "diffHunk": "@@ -80,7 +82,7 @@\n      * Create an empty Mach-O object file.\n      */\n     public MachOObjectFile(int pageSize) {\n-        this(pageSize, MachOCpuType.from(System.getProperty(\"svm.targetArch\") == null ? System.getProperty(\"os.arch\") : System.getProperty(\"svm.targetArch\")));\n+        this(pageSize, MachOCpuType.from(System.getProperty(\"svm.targetArch\") == null ? ImageSingletons.lookup(Platform.class).getArchitecture() : System.getProperty(\"svm.targetArch\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNjQxMg=="}, "originalCommit": {"oid": "887bc8e2d381ed23a440203b37efc38cbd2ac8e4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxMjE4NA==", "bodyText": "Should be fixed now.", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536312184", "createdAt": "2020-12-04T18:58:55Z", "author": {"login": "lazar-mitrovic"}, "path": "substratevm/src/com.oracle.objectfile/src/com/oracle/objectfile/macho/MachOObjectFile.java", "diffHunk": "@@ -80,7 +82,7 @@\n      * Create an empty Mach-O object file.\n      */\n     public MachOObjectFile(int pageSize) {\n-        this(pageSize, MachOCpuType.from(System.getProperty(\"svm.targetArch\") == null ? System.getProperty(\"os.arch\") : System.getProperty(\"svm.targetArch\")));\n+        this(pageSize, MachOCpuType.from(System.getProperty(\"svm.targetArch\") == null ? ImageSingletons.lookup(Platform.class).getArchitecture() : System.getProperty(\"svm.targetArch\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNjQxMg=="}, "originalCommit": {"oid": "887bc8e2d381ed23a440203b37efc38cbd2ac8e4"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTI4NDg4OnYy", "diffSide": "RIGHT", "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMDowNToyOFrOH-6z6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTo0MToyMFrOH_fa4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNzMyMw==", "bodyText": "I don't think we should introduce these BASE interfaces. We get a too deep and confusing hierarchy. I would not know when to use LINUX vs. LINUX_BASE in a Platforms annotation.", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535737323", "createdAt": "2020-12-04T00:05:28Z", "author": {"login": "christianwimmer"}, "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java", "diffHunk": "@@ -103,6 +136,33 @@ static boolean includedIn(Class<? extends Platform> platformGroup) {\n      */\n     interface AARCH64 extends Platform {\n \n+        /**\n+         * Returns string representing AARCH64 architecture.\n+         *\n+         * @since 21.0\n+         */\n+        default String getArchitecture() {\n+            return \"aarch64\";\n+        }\n+    }\n+\n+    /*\n+     * Operating system bases.\n+     */\n+    /**\n+     * Interface encapsulating all linux-derived operating systems.\n+     *\n+     * @since 21.0\n+     */\n+    interface LINUX_BASE extends InternalPlatform.PLATFORM_JNI {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "887bc8e2d381ed23a440203b37efc38cbd2ac8e4"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjAwMDkxMw==", "bodyText": "You would always use LINUX_BASE unless it is Android specific or Linux specific. What would be a more minimal approach to handle Android and iOS specific things?\nThey are a separate platform and this hierarchy tends to reflect that in the most minimal way we could find.", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536000913", "createdAt": "2020-12-04T10:35:35Z", "author": {"login": "vjovanov"}, "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java", "diffHunk": "@@ -103,6 +136,33 @@ static boolean includedIn(Class<? extends Platform> platformGroup) {\n      */\n     interface AARCH64 extends Platform {\n \n+        /**\n+         * Returns string representing AARCH64 architecture.\n+         *\n+         * @since 21.0\n+         */\n+        default String getArchitecture() {\n+            return \"aarch64\";\n+        }\n+    }\n+\n+    /*\n+     * Operating system bases.\n+     */\n+    /**\n+     * Interface encapsulating all linux-derived operating systems.\n+     *\n+     * @since 21.0\n+     */\n+    interface LINUX_BASE extends InternalPlatform.PLATFORM_JNI {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNzMyMw=="}, "originalCommit": {"oid": "887bc8e2d381ed23a440203b37efc38cbd2ac8e4"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjA1MzY5Mg==", "bodyText": "One idea would be to call it LINUX_FAMILY to make things clear?", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536053692", "createdAt": "2020-12-04T12:08:26Z", "author": {"login": "vjovanov"}, "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java", "diffHunk": "@@ -103,6 +136,33 @@ static boolean includedIn(Class<? extends Platform> platformGroup) {\n      */\n     interface AARCH64 extends Platform {\n \n+        /**\n+         * Returns string representing AARCH64 architecture.\n+         *\n+         * @since 21.0\n+         */\n+        default String getArchitecture() {\n+            return \"aarch64\";\n+        }\n+    }\n+\n+    /*\n+     * Operating system bases.\n+     */\n+    /**\n+     * Interface encapsulating all linux-derived operating systems.\n+     *\n+     * @since 21.0\n+     */\n+    interface LINUX_BASE extends InternalPlatform.PLATFORM_JNI {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNzMyMw=="}, "originalCommit": {"oid": "887bc8e2d381ed23a440203b37efc38cbd2ac8e4"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI4NjkxMw==", "bodyText": "Maybe better example for why this approach would be beneficial is regarding current Apple developments. ATM Darwin base/family contains 3 different operating systems on Aarch64 architecture (iOS, iPadOS and MacOS). Without some kind of base platform, differences between those systems would need to be implemented by opting-out and bunch of checks throughout the code base.\nAs for Android/Linux, differences are largely based on LibC (glibc/bionic), however our current approach means that there would be a bunch of extra checks (for AWT for example, since Android doesn't include Xserver) in order to separate those two.\nIf we ever mean to add this kind of abstraction, it would be best that it is done now, since changes at a later date would probably be API breaking. Otherwise, all those changes are located in latest commit of this PR, so they are easily revertable.", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536286913", "createdAt": "2020-12-04T18:14:24Z", "author": {"login": "lazar-mitrovic"}, "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java", "diffHunk": "@@ -103,6 +136,33 @@ static boolean includedIn(Class<? extends Platform> platformGroup) {\n      */\n     interface AARCH64 extends Platform {\n \n+        /**\n+         * Returns string representing AARCH64 architecture.\n+         *\n+         * @since 21.0\n+         */\n+        default String getArchitecture() {\n+            return \"aarch64\";\n+        }\n+    }\n+\n+    /*\n+     * Operating system bases.\n+     */\n+    /**\n+     * Interface encapsulating all linux-derived operating systems.\n+     *\n+     * @since 21.0\n+     */\n+    interface LINUX_BASE extends InternalPlatform.PLATFORM_JNI {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNzMyMw=="}, "originalCommit": {"oid": "887bc8e2d381ed23a440203b37efc38cbd2ac8e4"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI5MTI0Nw==", "bodyText": "Did you notice that you just said \"use LINUX_BASE unless it is Linux specific\" - which is exactly my point of confusion?\nIs there really anything that cannot be modeled using ANDROID_AARCH64 and the other leaf platforms for Linux? That would be best.\nIf we really need an intermediate platform, I would leave \"LINUX\" as it is to include every flavor including Android (the bulk of all usages) and introduce a LINUX_SERVER to distinguish it from ANDROID. That avoids all the renamings in this PR, and all future problems where people will write new Platforms annotations wrongly with LINUX that then breaks Android.", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536291247", "createdAt": "2020-12-04T18:21:48Z", "author": {"login": "christianwimmer"}, "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java", "diffHunk": "@@ -103,6 +136,33 @@ static boolean includedIn(Class<? extends Platform> platformGroup) {\n      */\n     interface AARCH64 extends Platform {\n \n+        /**\n+         * Returns string representing AARCH64 architecture.\n+         *\n+         * @since 21.0\n+         */\n+        default String getArchitecture() {\n+            return \"aarch64\";\n+        }\n+    }\n+\n+    /*\n+     * Operating system bases.\n+     */\n+    /**\n+     * Interface encapsulating all linux-derived operating systems.\n+     *\n+     * @since 21.0\n+     */\n+    interface LINUX_BASE extends InternalPlatform.PLATFORM_JNI {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNzMyMw=="}, "originalCommit": {"oid": "887bc8e2d381ed23a440203b37efc38cbd2ac8e4"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMyODcxMA==", "bodyText": "You are right, from Wikipedia:\n\nLinux is a family of open-source Unix-like operating systems based on the Linux kernel.\nDarwin is an open-source Unix-like operating system first released by Apple Inc. Darwin forms the core set of components upon which macOS (previously OS X and Mac OS X), iOS, watchOS, tvOS, and iPadOS are based.\n\nI think we can then use e.g., macOS and iOS to distinguish things on the Darwin side. And for Linux we could use another name (this can be done in a separate PR).\nI am not in favor of LINUX_SERVER because it can also be used on desktops. Maybe, 'LINUX_DISTRIBUTION' but we can cross that bridge when we get there.\nThis commit was anyhow made last as a proposal.", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536328710", "createdAt": "2020-12-04T19:25:54Z", "author": {"login": "vjovanov"}, "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java", "diffHunk": "@@ -103,6 +136,33 @@ static boolean includedIn(Class<? extends Platform> platformGroup) {\n      */\n     interface AARCH64 extends Platform {\n \n+        /**\n+         * Returns string representing AARCH64 architecture.\n+         *\n+         * @since 21.0\n+         */\n+        default String getArchitecture() {\n+            return \"aarch64\";\n+        }\n+    }\n+\n+    /*\n+     * Operating system bases.\n+     */\n+    /**\n+     * Interface encapsulating all linux-derived operating systems.\n+     *\n+     * @since 21.0\n+     */\n+    interface LINUX_BASE extends InternalPlatform.PLATFORM_JNI {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNzMyMw=="}, "originalCommit": {"oid": "887bc8e2d381ed23a440203b37efc38cbd2ac8e4"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMzNzEyMw==", "bodyText": "Commit reverted.", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536337123", "createdAt": "2020-12-04T19:41:20Z", "author": {"login": "lazar-mitrovic"}, "path": "sdk/src/org.graalvm.nativeimage/src/org/graalvm/nativeimage/Platform.java", "diffHunk": "@@ -103,6 +136,33 @@ static boolean includedIn(Class<? extends Platform> platformGroup) {\n      */\n     interface AARCH64 extends Platform {\n \n+        /**\n+         * Returns string representing AARCH64 architecture.\n+         *\n+         * @since 21.0\n+         */\n+        default String getArchitecture() {\n+            return \"aarch64\";\n+        }\n+    }\n+\n+    /*\n+     * Operating system bases.\n+     */\n+    /**\n+     * Interface encapsulating all linux-derived operating systems.\n+     *\n+     * @since 21.0\n+     */\n+    interface LINUX_BASE extends InternalPlatform.PLATFORM_JNI {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczNzMyMw=="}, "originalCommit": {"oid": "887bc8e2d381ed23a440203b37efc38cbd2ac8e4"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2MTMwMjI4OnYy", "diffSide": "RIGHT", "path": "substratevm/src/com.oracle.svm.core.windows/src/com/oracle/svm/core/windows/WindowsSystemPropertiesSupport.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQwMDoxMTo0OVrOH-69bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODoxNjowMFrOH_cabA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczOTc1OA==", "bodyText": "@pejovica FYI", "url": "https://github.com/oracle/graal/pull/2960#discussion_r535739758", "createdAt": "2020-12-04T00:11:49Z", "author": {"login": "christianwimmer"}, "path": "substratevm/src/com.oracle.svm.core.windows/src/com/oracle/svm/core/windows/WindowsSystemPropertiesSupport.java", "diffHunk": "@@ -122,13 +132,194 @@ private static String toJavaString(WCharPointer wcString, UnsignedWord length) {\n         return CTypeConversion.toJavaString((CCharPointer) wcString, SizeOf.unsigned(WCharPointer.class).multiply(length), StandardCharsets.UTF_16LE);\n     }\n \n+    private Pair<String, String> cachedOsNameAndVersion;\n+\n+    @Override\n+    protected String osNameValue() {\n+        if (cachedOsNameAndVersion == null) {\n+            cachedOsNameAndVersion = getOsNameAndVersion();\n+        }\n+        return cachedOsNameAndVersion.getLeft();\n+    }\n+\n     @Override\n     protected String osVersionValue() {\n-        ByteBuffer versionBytes = ByteBuffer.allocate(4);\n-        versionBytes.putInt(SysinfoAPI.GetVersion());\n-        int majorVersion = versionBytes.get(3);\n-        int minorVersion = versionBytes.get(2);\n-        return majorVersion + \".\" + minorVersion;\n+        if (cachedOsNameAndVersion == null) {\n+            cachedOsNameAndVersion = getOsNameAndVersion();\n+        }\n+        return cachedOsNameAndVersion.getRight();\n+    }\n+\n+    public Pair<String, String> getOsNameAndVersion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "887bc8e2d381ed23a440203b37efc38cbd2ac8e4"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI4Nzg1Mg==", "bodyText": "Pejovi\u0107 was working with me on this commit", "url": "https://github.com/oracle/graal/pull/2960#discussion_r536287852", "createdAt": "2020-12-04T18:16:00Z", "author": {"login": "lazar-mitrovic"}, "path": "substratevm/src/com.oracle.svm.core.windows/src/com/oracle/svm/core/windows/WindowsSystemPropertiesSupport.java", "diffHunk": "@@ -122,13 +132,194 @@ private static String toJavaString(WCharPointer wcString, UnsignedWord length) {\n         return CTypeConversion.toJavaString((CCharPointer) wcString, SizeOf.unsigned(WCharPointer.class).multiply(length), StandardCharsets.UTF_16LE);\n     }\n \n+    private Pair<String, String> cachedOsNameAndVersion;\n+\n+    @Override\n+    protected String osNameValue() {\n+        if (cachedOsNameAndVersion == null) {\n+            cachedOsNameAndVersion = getOsNameAndVersion();\n+        }\n+        return cachedOsNameAndVersion.getLeft();\n+    }\n+\n     @Override\n     protected String osVersionValue() {\n-        ByteBuffer versionBytes = ByteBuffer.allocate(4);\n-        versionBytes.putInt(SysinfoAPI.GetVersion());\n-        int majorVersion = versionBytes.get(3);\n-        int minorVersion = versionBytes.get(2);\n-        return majorVersion + \".\" + minorVersion;\n+        if (cachedOsNameAndVersion == null) {\n+            cachedOsNameAndVersion = getOsNameAndVersion();\n+        }\n+        return cachedOsNameAndVersion.getRight();\n+    }\n+\n+    public Pair<String, String> getOsNameAndVersion() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTczOTc1OA=="}, "originalCommit": {"oid": "887bc8e2d381ed23a440203b37efc38cbd2ac8e4"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 723, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}