{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MDQ4OTg4", "number": 2459, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzowNzoyMVrOD_jCAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoxNDo0MVrOD_9pRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTYwODM1OnYy", "diffSide": "RIGHT", "path": "substratevm/DEBUGINFO.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzowNzoyMVrOGaROcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODowNDo1N1rOGa99Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE5ODM4NQ==", "bodyText": "s/use dot/used to", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430198385", "createdAt": "2020-05-26T07:07:21Z", "author": {"login": "olpaw"}, "path": "substratevm/DEBUGINFO.md", "diffHunk": "@@ -16,14 +16,16 @@ argument to the GenerateDebugInfo option.\n \n The GenerateDebugInfo option also enables caching of sources for any\n JDK runtime classes, GraalVM classes and application classes which can\n-be located during native image generation. The cache is created under\n-local subdirectory sources. It is used to configure source file search\n-path roots for the debugger. Files in the cache are located in a\n-directory hierarchy that matches the file path information included in\n-the native image debug records. The source cache should contain all\n-the files needed to debug the generated image and nothing more. This\n-local cache provides a convenient way of making just the necessary\n-sources available to the debugger/IDE when debugging a native image.\n+be located during native image generation. By default the cache is\n+created under local subdirectory sources (a command line option can be\n+use dot specifiy an alternative location). It is used to configure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc3cb87f363410e674f12280a0ea59ddf0d1b2bc"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzMTIzMA==", "bodyText": "done", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430931230", "createdAt": "2020-05-27T08:04:57Z", "author": {"login": "adinn"}, "path": "substratevm/DEBUGINFO.md", "diffHunk": "@@ -16,14 +16,16 @@ argument to the GenerateDebugInfo option.\n \n The GenerateDebugInfo option also enables caching of sources for any\n JDK runtime classes, GraalVM classes and application classes which can\n-be located during native image generation. The cache is created under\n-local subdirectory sources. It is used to configure source file search\n-path roots for the debugger. Files in the cache are located in a\n-directory hierarchy that matches the file path information included in\n-the native image debug records. The source cache should contain all\n-the files needed to debug the generated image and nothing more. This\n-local cache provides a convenient way of making just the necessary\n-sources available to the debugger/IDE when debugging a native image.\n+be located during native image generation. By default the cache is\n+created under local subdirectory sources (a command line option can be\n+use dot specifiy an alternative location). It is used to configure", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDE5ODM4NQ=="}, "originalCommit": {"oid": "bc3cb87f363410e674f12280a0ea59ddf0d1b2bc"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTYzMDc1OnYy", "diffSide": "RIGHT", "path": "substratevm/mx.substratevm/mx_substratevm.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzoxNDo0MVrOGaRcHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODowNTowOFrOGa99gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIwMTg4NQ==", "bodyText": "replace all print with mx.log", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430201885", "createdAt": "2020-05-26T07:14:41Z", "author": {"login": "olpaw"}, "path": "substratevm/mx.substratevm/mx_substratevm.py", "diffHunk": "@@ -700,6 +711,36 @@ def _collector(x):\n         if actual_output != expected_output:\n             raise Exception('Unexpected output: ' + str(actual_output) + \"  !=  \" + str(expected_output))\n \n+def _debuginfotest(native_image, javac_command, path, build_only, args):\n+    mkpath(path)\n+    parent = os.path.dirname(path)\n+    print(\"parent=%s\"%parent)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc3cb87f363410e674f12280a0ea59ddf0d1b2bc"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzMTMyOQ==", "bodyText": "done", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430931329", "createdAt": "2020-05-27T08:05:08Z", "author": {"login": "adinn"}, "path": "substratevm/mx.substratevm/mx_substratevm.py", "diffHunk": "@@ -700,6 +711,36 @@ def _collector(x):\n         if actual_output != expected_output:\n             raise Exception('Unexpected output: ' + str(actual_output) + \"  !=  \" + str(expected_output))\n \n+def _debuginfotest(native_image, javac_command, path, build_only, args):\n+    mkpath(path)\n+    parent = os.path.dirname(path)\n+    print(\"parent=%s\"%parent)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIwMTg4NQ=="}, "originalCommit": {"oid": "bc3cb87f363410e674f12280a0ea59ddf0d1b2bc"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTY1MzU0OnYy", "diffSide": "RIGHT", "path": "substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzoyMjoxNFrOGaRqRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODowNToxN1rOGa99zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIwNTUxMA==", "bodyText": "It's better to issue an error message here instead of silently fixing a users bad option argument. Otherwise we are breeding such command line invocations.", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430205510", "createdAt": "2020-05-26T07:22:14Z", "author": {"login": "olpaw"}, "path": "substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java", "diffHunk": "@@ -469,4 +469,14 @@ protected void onValueUpdate(EconomicMap<OptionKey<?>, Object> values, Integer o\n     @Option(help = \"Search path for source files for Application or GraalVM classes (list of comma-separated directories or jar files)\")//\n     public static final HostedOptionKey<String[]> DebugInfoSourceSearchPath = new HostedOptionKey<String[]>(null) {\n     };\n+    @Option(help = \"Directory under which to create source file cache for Application or GraalVM classes\")//\n+    public static final HostedOptionKey<String> DebugInfoSourceCacheRoot = new HostedOptionKey<String>(\"sources\") {\n+        @Override\n+        protected void onValueUpdate(EconomicMap<OptionKey<?>, Object> values, String oldValue, String newValue) {\n+            // disallow null or empty string\n+            if (newValue == null || newValue.length() == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc3cb87f363410e674f12280a0ea59ddf0d1b2bc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMzOTc1NQ==", "bodyText": "Ok. What would be the appropriate way to make the user aware of the error? Do I throw an exception to stop the native image run? Should Can log an error message and force an exit? Or do I log a warning message, reset the value to the default and carry on. Is there a standard API to implement the latter actions?", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430339755", "createdAt": "2020-05-26T11:22:31Z", "author": {"login": "adinn"}, "path": "substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java", "diffHunk": "@@ -469,4 +469,14 @@ protected void onValueUpdate(EconomicMap<OptionKey<?>, Object> values, Integer o\n     @Option(help = \"Search path for source files for Application or GraalVM classes (list of comma-separated directories or jar files)\")//\n     public static final HostedOptionKey<String[]> DebugInfoSourceSearchPath = new HostedOptionKey<String[]>(null) {\n     };\n+    @Option(help = \"Directory under which to create source file cache for Application or GraalVM classes\")//\n+    public static final HostedOptionKey<String> DebugInfoSourceCacheRoot = new HostedOptionKey<String>(\"sources\") {\n+        @Override\n+        protected void onValueUpdate(EconomicMap<OptionKey<?>, Object> values, String oldValue, String newValue) {\n+            // disallow null or empty string\n+            if (newValue == null || newValue.length() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIwNTUxMA=="}, "originalCommit": {"oid": "bc3cb87f363410e674f12280a0ea59ddf0d1b2bc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM1OTI3MA==", "bodyText": "See e.g. NativeImageOptions.getCStandard() on how we usually do this.", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430359270", "createdAt": "2020-05-26T12:01:16Z", "author": {"login": "olpaw"}, "path": "substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java", "diffHunk": "@@ -469,4 +469,14 @@ protected void onValueUpdate(EconomicMap<OptionKey<?>, Object> values, Integer o\n     @Option(help = \"Search path for source files for Application or GraalVM classes (list of comma-separated directories or jar files)\")//\n     public static final HostedOptionKey<String[]> DebugInfoSourceSearchPath = new HostedOptionKey<String[]>(null) {\n     };\n+    @Option(help = \"Directory under which to create source file cache for Application or GraalVM classes\")//\n+    public static final HostedOptionKey<String> DebugInfoSourceCacheRoot = new HostedOptionKey<String>(\"sources\") {\n+        @Override\n+        protected void onValueUpdate(EconomicMap<OptionKey<?>, Object> values, String oldValue, String newValue) {\n+            // disallow null or empty string\n+            if (newValue == null || newValue.length() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIwNTUxMA=="}, "originalCommit": {"oid": "bc3cb87f363410e674f12280a0ea59ddf0d1b2bc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM4Mjc3Mg==", "bodyText": "Ok, thanks. Got it.", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430382772", "createdAt": "2020-05-26T12:44:01Z", "author": {"login": "adinn"}, "path": "substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java", "diffHunk": "@@ -469,4 +469,14 @@ protected void onValueUpdate(EconomicMap<OptionKey<?>, Object> values, Integer o\n     @Option(help = \"Search path for source files for Application or GraalVM classes (list of comma-separated directories or jar files)\")//\n     public static final HostedOptionKey<String[]> DebugInfoSourceSearchPath = new HostedOptionKey<String[]>(null) {\n     };\n+    @Option(help = \"Directory under which to create source file cache for Application or GraalVM classes\")//\n+    public static final HostedOptionKey<String> DebugInfoSourceCacheRoot = new HostedOptionKey<String>(\"sources\") {\n+        @Override\n+        protected void onValueUpdate(EconomicMap<OptionKey<?>, Object> values, String oldValue, String newValue) {\n+            // disallow null or empty string\n+            if (newValue == null || newValue.length() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIwNTUxMA=="}, "originalCommit": {"oid": "bc3cb87f363410e674f12280a0ea59ddf0d1b2bc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzMTQwNQ==", "bodyText": "done", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430931405", "createdAt": "2020-05-27T08:05:17Z", "author": {"login": "adinn"}, "path": "substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java", "diffHunk": "@@ -469,4 +469,14 @@ protected void onValueUpdate(EconomicMap<OptionKey<?>, Object> values, Integer o\n     @Option(help = \"Search path for source files for Application or GraalVM classes (list of comma-separated directories or jar files)\")//\n     public static final HostedOptionKey<String[]> DebugInfoSourceSearchPath = new HostedOptionKey<String[]>(null) {\n     };\n+    @Option(help = \"Directory under which to create source file cache for Application or GraalVM classes\")//\n+    public static final HostedOptionKey<String> DebugInfoSourceCacheRoot = new HostedOptionKey<String>(\"sources\") {\n+        @Override\n+        protected void onValueUpdate(EconomicMap<OptionKey<?>, Object> values, String oldValue, String newValue) {\n+            // disallow null or empty string\n+            if (newValue == null || newValue.length() == 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIwNTUxMA=="}, "originalCommit": {"oid": "bc3cb87f363410e674f12280a0ea59ddf0d1b2bc"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTcyODY1OnYy", "diffSide": "RIGHT", "path": "substratevm/mx.substratevm/mx_substratevm.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzo0NTozMlrOGaSZQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzo0NTozMlrOGaSZQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxNzUzOQ==", "bodyText": "Providing a custom javac-command does not make much sense. Since your test is in the com.oracle.svm.test project it will be built automatically as part of running mx build anyway (building it again is redundant). You can use classpath('com.oracle.svm.test') to get the classpath argument you need to pass to native-image when you want to build Hello.", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430217539", "createdAt": "2020-05-26T07:45:32Z", "author": {"login": "olpaw"}, "path": "substratevm/mx.substratevm/mx_substratevm.py", "diffHunk": "@@ -1008,6 +1049,29 @@ def helloworld(args, config=None):\n     )\n \n \n+@mx.command(suite_name=suite.name, command_name='debuginfotest', usage_msg='[options]')\n+def debuginfotest(args, config=None):\n+    \"\"\"\n+    builds a debuginfo Hello native image and tests it with gdb.\n+    \"\"\"\n+    parser = ArgumentParser(prog='mx debuginfotest')\n+    all_args = ['--output-path', '--javac-command', '--build-only']\n+    masked_args = [_mask(arg, all_args) for arg in args]\n+    parser.add_argument(all_args[0], metavar='<output-path>', nargs=1, help='Path of the generated image', default=[svmbuild_dir(suite)])\n+    parser.add_argument(all_args[1], metavar='<javac-command>', help='A javac command to be used', default=mx.get_jdk().javac)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc3cb87f363410e674f12280a0ea59ddf0d1b2bc"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTczMzAyOnYy", "diffSide": "RIGHT", "path": "substratevm/mx.substratevm/mx_substratevm.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzo0NjozNVrOGaSbzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODowNToyOVrOGa9-Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxODE5MQ==", "bodyText": "See https://github.com/oracle/graal/pull/2459/files#r430217539", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430218191", "createdAt": "2020-05-26T07:46:35Z", "author": {"login": "olpaw"}, "path": "substratevm/mx.substratevm/mx_substratevm.py", "diffHunk": "@@ -700,6 +711,36 @@ def _collector(x):\n         if actual_output != expected_output:\n             raise Exception('Unexpected output: ' + str(actual_output) + \"  !=  \" + str(expected_output))\n \n+def _debuginfotest(native_image, javac_command, path, build_only, args):\n+    mkpath(path)\n+    parent = os.path.dirname(path)\n+    print(\"parent=%s\"%parent)\n+    sourcepath = join(parent, 'src/com.oracle.svm.test/src/')\n+    print(\"sourcepath=%s\"%sourcepath)\n+    sourcecache = join(path, 'sources')\n+    print(\"sourcecache=%s\"%sourcecache)\n+    hello_source = join(sourcepath, 'hello/Hello.java')\n+    print('javac %s'%(['-sourcepath', sourcepath, '-d', path, hello_source]))\n+    mx.run(javac_command + ['-sourcepath', sourcepath, '-d', path, hello_source])", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc3cb87f363410e674f12280a0ea59ddf0d1b2bc"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzMTUxOQ==", "bodyText": "done", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430931519", "createdAt": "2020-05-27T08:05:29Z", "author": {"login": "adinn"}, "path": "substratevm/mx.substratevm/mx_substratevm.py", "diffHunk": "@@ -700,6 +711,36 @@ def _collector(x):\n         if actual_output != expected_output:\n             raise Exception('Unexpected output: ' + str(actual_output) + \"  !=  \" + str(expected_output))\n \n+def _debuginfotest(native_image, javac_command, path, build_only, args):\n+    mkpath(path)\n+    parent = os.path.dirname(path)\n+    print(\"parent=%s\"%parent)\n+    sourcepath = join(parent, 'src/com.oracle.svm.test/src/')\n+    print(\"sourcepath=%s\"%sourcepath)\n+    sourcecache = join(path, 'sources')\n+    print(\"sourcecache=%s\"%sourcecache)\n+    hello_source = join(sourcepath, 'hello/Hello.java')\n+    print('javac %s'%(['-sourcepath', sourcepath, '-d', path, hello_source]))\n+    mx.run(javac_command + ['-sourcepath', sourcepath, '-d', path, hello_source])", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxODE5MQ=="}, "originalCommit": {"oid": "bc3cb87f363410e674f12280a0ea59ddf0d1b2bc"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTg5NTk0OnYy", "diffSide": "RIGHT", "path": "substratevm/mx.substratevm/mx_substratevm.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODozMTo1M1rOGaUBZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODowNTo0MlrOGa9-vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0NDE5Nw==", "bodyText": "No need to hardcode src/com.oracle.svm.test/src/. You can use mx.project('com.oracle.svm.test').source_dirs()", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430244197", "createdAt": "2020-05-26T08:31:53Z", "author": {"login": "olpaw"}, "path": "substratevm/mx.substratevm/mx_substratevm.py", "diffHunk": "@@ -700,6 +711,36 @@ def _collector(x):\n         if actual_output != expected_output:\n             raise Exception('Unexpected output: ' + str(actual_output) + \"  !=  \" + str(expected_output))\n \n+def _debuginfotest(native_image, javac_command, path, build_only, args):\n+    mkpath(path)\n+    parent = os.path.dirname(path)\n+    print(\"parent=%s\"%parent)\n+    sourcepath = join(parent, 'src/com.oracle.svm.test/src/')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc3cb87f363410e674f12280a0ea59ddf0d1b2bc"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzMTY0Nw==", "bodyText": "done", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430931647", "createdAt": "2020-05-27T08:05:42Z", "author": {"login": "adinn"}, "path": "substratevm/mx.substratevm/mx_substratevm.py", "diffHunk": "@@ -700,6 +711,36 @@ def _collector(x):\n         if actual_output != expected_output:\n             raise Exception('Unexpected output: ' + str(actual_output) + \"  !=  \" + str(expected_output))\n \n+def _debuginfotest(native_image, javac_command, path, build_only, args):\n+    mkpath(path)\n+    parent = os.path.dirname(path)\n+    print(\"parent=%s\"%parent)\n+    sourcepath = join(parent, 'src/com.oracle.svm.test/src/')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0NDE5Nw=="}, "originalCommit": {"oid": "bc3cb87f363410e674f12280a0ea59ddf0d1b2bc"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTkyNTAxOnYy", "diffSide": "RIGHT", "path": "substratevm/mx.substratevm/testhello.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODozOTozNlrOGaUTfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODowODo1MFrOGa-F8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0ODgyOQ==", "bodyText": "s/sued/used", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430248829", "createdAt": "2020-05-26T08:39:36Z", "author": {"login": "olpaw"}, "path": "substratevm/mx.substratevm/testhello.py", "diffHunk": "@@ -0,0 +1,227 @@\n+# pylint: skip-file\n+#\n+# A test script for use from gdb. It can be sued to drive execution of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc3cb87f363410e674f12280a0ea59ddf0d1b2bc"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzMzQ4OQ==", "bodyText": "done", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430933489", "createdAt": "2020-05-27T08:08:50Z", "author": {"login": "adinn"}, "path": "substratevm/mx.substratevm/testhello.py", "diffHunk": "@@ -0,0 +1,227 @@\n+# pylint: skip-file\n+#\n+# A test script for use from gdb. It can be sued to drive execution of", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI0ODgyOQ=="}, "originalCommit": {"oid": "bc3cb87f363410e674f12280a0ea59ddf0d1b2bc"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTk0NTAzOnYy", "diffSide": "RIGHT", "path": "substratevm/mx.substratevm/testhello.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODo0NDo1OFrOGaUgMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzowODoxM1rOGa8GRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1MjA4Mw==", "bodyText": "you could use\nself.rexps = [re.compile(regexp) for regexp in regexps]", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430252083", "createdAt": "2020-05-26T08:44:58Z", "author": {"login": "olpaw"}, "path": "substratevm/mx.substratevm/testhello.py", "diffHunk": "@@ -0,0 +1,227 @@\n+# pylint: skip-file\n+#\n+# A test script for use from gdb. It can be sued to drive execution of\n+# a native image version of test app Hello and check that the debug\n+# info is valid.\n+#\n+# Assumes you have already executed\n+#\n+# $ javac hello/Hello.java\n+# $ mx native-image -H:GenerateDebugInfo=1 hello.hello\n+#\n+# Run test\n+#\n+# gdb -d /path/to/sources/src -d /path/to/sources/graal -d /path/to/sources/jdk -x testhello.py /path/to/hello\n+#\n+# exit status 0 means all is well 1 means test failed\n+#\n+# n.b. assumes the sourcefile cache is in local dir sources\n+\n+import re\n+import sys\n+\n+# A helper class which checks that a sequence of lines of output\n+# from a gdb command matches a sequence of per-line regular\n+# expressions\n+\n+class Checker:\n+    # Create a checker to check gdb command output text.\n+    # name - string to help identify the check if we have a failure.\n+    # regexps - a list of regular expressions which must match.\n+    # successive lines of checked\n+    def __init__(self, name, regexps):\n+        self.name = name\n+        compiled = []\n+        if not isinstance(regexps, list):\n+            regexps = [regexps]\n+        for regexp in regexps:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc3cb87f363410e674f12280a0ea59ddf0d1b2bc"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMDgwNA==", "bodyText": "After this change the following bits\ncompiled = []\n\nfor regexp in regexps:\n    compiled.append(re.compile(regexp))\n\nare dead code. Please remove them.", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430900804", "createdAt": "2020-05-27T07:08:13Z", "author": {"login": "olpaw"}, "path": "substratevm/mx.substratevm/testhello.py", "diffHunk": "@@ -0,0 +1,227 @@\n+# pylint: skip-file\n+#\n+# A test script for use from gdb. It can be sued to drive execution of\n+# a native image version of test app Hello and check that the debug\n+# info is valid.\n+#\n+# Assumes you have already executed\n+#\n+# $ javac hello/Hello.java\n+# $ mx native-image -H:GenerateDebugInfo=1 hello.hello\n+#\n+# Run test\n+#\n+# gdb -d /path/to/sources/src -d /path/to/sources/graal -d /path/to/sources/jdk -x testhello.py /path/to/hello\n+#\n+# exit status 0 means all is well 1 means test failed\n+#\n+# n.b. assumes the sourcefile cache is in local dir sources\n+\n+import re\n+import sys\n+\n+# A helper class which checks that a sequence of lines of output\n+# from a gdb command matches a sequence of per-line regular\n+# expressions\n+\n+class Checker:\n+    # Create a checker to check gdb command output text.\n+    # name - string to help identify the check if we have a failure.\n+    # regexps - a list of regular expressions which must match.\n+    # successive lines of checked\n+    def __init__(self, name, regexps):\n+        self.name = name\n+        compiled = []\n+        if not isinstance(regexps, list):\n+            regexps = [regexps]\n+        for regexp in regexps:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1MjA4Mw=="}, "originalCommit": {"oid": "bc3cb87f363410e674f12280a0ea59ddf0d1b2bc"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3OTk1MzkzOnYy", "diffSide": "RIGHT", "path": "substratevm/mx.substratevm/testhello.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwODo0NzoxOVrOGaUl0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODowNzozNFrOGa-C6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1MzUyMA==", "bodyText": "s/split('\\n')/splitlines()", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430253520", "createdAt": "2020-05-26T08:47:19Z", "author": {"login": "olpaw"}, "path": "substratevm/mx.substratevm/testhello.py", "diffHunk": "@@ -0,0 +1,227 @@\n+# pylint: skip-file\n+#\n+# A test script for use from gdb. It can be sued to drive execution of\n+# a native image version of test app Hello and check that the debug\n+# info is valid.\n+#\n+# Assumes you have already executed\n+#\n+# $ javac hello/Hello.java\n+# $ mx native-image -H:GenerateDebugInfo=1 hello.hello\n+#\n+# Run test\n+#\n+# gdb -d /path/to/sources/src -d /path/to/sources/graal -d /path/to/sources/jdk -x testhello.py /path/to/hello\n+#\n+# exit status 0 means all is well 1 means test failed\n+#\n+# n.b. assumes the sourcefile cache is in local dir sources\n+\n+import re\n+import sys\n+\n+# A helper class which checks that a sequence of lines of output\n+# from a gdb command matches a sequence of per-line regular\n+# expressions\n+\n+class Checker:\n+    # Create a checker to check gdb command output text.\n+    # name - string to help identify the check if we have a failure.\n+    # regexps - a list of regular expressions which must match.\n+    # successive lines of checked\n+    def __init__(self, name, regexps):\n+        self.name = name\n+        compiled = []\n+        if not isinstance(regexps, list):\n+            regexps = [regexps]\n+        for regexp in regexps:\n+            compiled.append(re.compile(regexp))\n+        self.rexps = compiled\n+\n+    # Check that successive lines of a gdb command's output text\n+    # match the corresponding regexp patterns provided when this\n+    # Checker was created.\n+    # text - the full output of a gdb comand run by calling\n+    # gdb.execute and passing to_string = True.\n+    # Exits with status 1 if there are less lines in the text\n+    # than regexp patterns or if any line fails to match the\n+    # corresponding pattern otherwise prints the text and returns\n+    # the set of matches.\n+    def check(self, text, skip_fails=True):\n+        lines = text.split('\\n')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc3cb87f363410e674f12280a0ea59ddf0d1b2bc"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzMjcxMg==", "bodyText": "done", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430932712", "createdAt": "2020-05-27T08:07:34Z", "author": {"login": "adinn"}, "path": "substratevm/mx.substratevm/testhello.py", "diffHunk": "@@ -0,0 +1,227 @@\n+# pylint: skip-file\n+#\n+# A test script for use from gdb. It can be sued to drive execution of\n+# a native image version of test app Hello and check that the debug\n+# info is valid.\n+#\n+# Assumes you have already executed\n+#\n+# $ javac hello/Hello.java\n+# $ mx native-image -H:GenerateDebugInfo=1 hello.hello\n+#\n+# Run test\n+#\n+# gdb -d /path/to/sources/src -d /path/to/sources/graal -d /path/to/sources/jdk -x testhello.py /path/to/hello\n+#\n+# exit status 0 means all is well 1 means test failed\n+#\n+# n.b. assumes the sourcefile cache is in local dir sources\n+\n+import re\n+import sys\n+\n+# A helper class which checks that a sequence of lines of output\n+# from a gdb command matches a sequence of per-line regular\n+# expressions\n+\n+class Checker:\n+    # Create a checker to check gdb command output text.\n+    # name - string to help identify the check if we have a failure.\n+    # regexps - a list of regular expressions which must match.\n+    # successive lines of checked\n+    def __init__(self, name, regexps):\n+        self.name = name\n+        compiled = []\n+        if not isinstance(regexps, list):\n+            regexps = [regexps]\n+        for regexp in regexps:\n+            compiled.append(re.compile(regexp))\n+        self.rexps = compiled\n+\n+    # Check that successive lines of a gdb command's output text\n+    # match the corresponding regexp patterns provided when this\n+    # Checker was created.\n+    # text - the full output of a gdb comand run by calling\n+    # gdb.execute and passing to_string = True.\n+    # Exits with status 1 if there are less lines in the text\n+    # than regexp patterns or if any line fails to match the\n+    # corresponding pattern otherwise prints the text and returns\n+    # the set of matches.\n+    def check(self, text, skip_fails=True):\n+        lines = text.split('\\n')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDI1MzUyMA=="}, "originalCommit": {"oid": "bc3cb87f363410e674f12280a0ea59ddf0d1b2bc"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDMxODg3OnYy", "diffSide": "RIGHT", "path": "substratevm/mx.substratevm/testhello.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDozMDowNVrOGaYPRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDozMDowNVrOGaYPRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxMzI4Nw==", "bodyText": "0x([0-9a-f]+ is a common substring that might be worth reusing .i.e use\naddress_pattern_str = '0x([0-9a-f]+'", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430313287", "createdAt": "2020-05-26T10:30:05Z", "author": {"login": "olpaw"}, "path": "substratevm/mx.substratevm/testhello.py", "diffHunk": "@@ -0,0 +1,227 @@\n+# pylint: skip-file\n+#\n+# A test script for use from gdb. It can be sued to drive execution of\n+# a native image version of test app Hello and check that the debug\n+# info is valid.\n+#\n+# Assumes you have already executed\n+#\n+# $ javac hello/Hello.java\n+# $ mx native-image -H:GenerateDebugInfo=1 hello.hello\n+#\n+# Run test\n+#\n+# gdb -d /path/to/sources/src -d /path/to/sources/graal -d /path/to/sources/jdk -x testhello.py /path/to/hello\n+#\n+# exit status 0 means all is well 1 means test failed\n+#\n+# n.b. assumes the sourcefile cache is in local dir sources\n+\n+import re\n+import sys\n+\n+# A helper class which checks that a sequence of lines of output\n+# from a gdb command matches a sequence of per-line regular\n+# expressions\n+\n+class Checker:\n+    # Create a checker to check gdb command output text.\n+    # name - string to help identify the check if we have a failure.\n+    # regexps - a list of regular expressions which must match.\n+    # successive lines of checked\n+    def __init__(self, name, regexps):\n+        self.name = name\n+        compiled = []\n+        if not isinstance(regexps, list):\n+            regexps = [regexps]\n+        for regexp in regexps:\n+            compiled.append(re.compile(regexp))\n+        self.rexps = compiled\n+\n+    # Check that successive lines of a gdb command's output text\n+    # match the corresponding regexp patterns provided when this\n+    # Checker was created.\n+    # text - the full output of a gdb comand run by calling\n+    # gdb.execute and passing to_string = True.\n+    # Exits with status 1 if there are less lines in the text\n+    # than regexp patterns or if any line fails to match the\n+    # corresponding pattern otherwise prints the text and returns\n+    # the set of matches.\n+    def check(self, text, skip_fails=True):\n+        lines = text.split('\\n')\n+        rexps = self.rexps\n+        num_lines = len(lines)\n+        num_rexps = len(rexps)\n+        line_idx = 0\n+        matches = []\n+        for i in range(0, (num_rexps)):\n+            rexp = rexps[i]\n+            match = None\n+            while line_idx < num_lines and match is None:\n+                line = lines[line_idx]\n+                match = rexp.match(line)\n+                if  match is None:\n+                    if not skip_fails:\n+                        print('Checker %s: match %d failed at line %d %s\\n'%(self.name, i, line_idx, line))\n+                        print(self)\n+                        print(text)\n+                        sys.exit(1)\n+                else:\n+                    matches.append(match)\n+                line_idx += 1\n+        if len(matches) < num_rexps:\n+            print('Checker %s: insufficient matching lines %d for regular expressions %d'%(self.name, len(matches), num_rexps))\n+            print(self)\n+            print(text)\n+            sys.exit(1)\n+        print(text)\n+        return matches\n+\n+    # Format a Checker as a string\n+    def __str__(self):\n+        rexps = self.rexps\n+        result = 'Checker %s '%(self.name)\n+        result += '{\\n'\n+        for rexp in rexps:\n+            result += '  %s\\n'%(rexp)\n+        result += '}\\n'\n+        return result\n+\n+def execute(command):\n+    print('(gdb) %s'%(command))\n+    return gdb.execute(command, to_string=True)\n+\n+# Configure this gdb session\n+\n+# ensure file listings show only the current line\n+execute(\"set listsize 1\")\n+\n+# Start of actual test code\n+#\n+\n+def test():\n+\n+    # disable prompting to continue output\n+    execute(\"set pagination off\")\n+    # set a break point at hello.Hello::main\n+    # expect \"Breakpoint 1 at 0x[0-9a-f]+: file hello.Hello.java, line 64.\"\n+    exec_string = execute(\"break hello.Hello::main\")\n+    rexp = \"Breakpoint 1 at 0x([0-9a-f]+): file hello/Hello\\\\.java, line 64\\\\.\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc3cb87f363410e674f12280a0ea59ddf0d1b2bc"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MDM0Mzc0OnYy", "diffSide": "RIGHT", "path": "substratevm/mx.substratevm/testhello.py", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMDozODowNlrOGaYfTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODowNzo0MlrOGa-DNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxNzM4OQ==", "bodyText": "Using raw strings will make your patterns much more readable.\nhttps://docs.python.org/3/library/re.html?highlight=raw%20string%20notation", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430317389", "createdAt": "2020-05-26T10:38:06Z", "author": {"login": "olpaw"}, "path": "substratevm/mx.substratevm/testhello.py", "diffHunk": "@@ -0,0 +1,227 @@\n+# pylint: skip-file\n+#\n+# A test script for use from gdb. It can be sued to drive execution of\n+# a native image version of test app Hello and check that the debug\n+# info is valid.\n+#\n+# Assumes you have already executed\n+#\n+# $ javac hello/Hello.java\n+# $ mx native-image -H:GenerateDebugInfo=1 hello.hello\n+#\n+# Run test\n+#\n+# gdb -d /path/to/sources/src -d /path/to/sources/graal -d /path/to/sources/jdk -x testhello.py /path/to/hello\n+#\n+# exit status 0 means all is well 1 means test failed\n+#\n+# n.b. assumes the sourcefile cache is in local dir sources\n+\n+import re\n+import sys\n+\n+# A helper class which checks that a sequence of lines of output\n+# from a gdb command matches a sequence of per-line regular\n+# expressions\n+\n+class Checker:\n+    # Create a checker to check gdb command output text.\n+    # name - string to help identify the check if we have a failure.\n+    # regexps - a list of regular expressions which must match.\n+    # successive lines of checked\n+    def __init__(self, name, regexps):\n+        self.name = name\n+        compiled = []\n+        if not isinstance(regexps, list):\n+            regexps = [regexps]\n+        for regexp in regexps:\n+            compiled.append(re.compile(regexp))\n+        self.rexps = compiled\n+\n+    # Check that successive lines of a gdb command's output text\n+    # match the corresponding regexp patterns provided when this\n+    # Checker was created.\n+    # text - the full output of a gdb comand run by calling\n+    # gdb.execute and passing to_string = True.\n+    # Exits with status 1 if there are less lines in the text\n+    # than regexp patterns or if any line fails to match the\n+    # corresponding pattern otherwise prints the text and returns\n+    # the set of matches.\n+    def check(self, text, skip_fails=True):\n+        lines = text.split('\\n')\n+        rexps = self.rexps\n+        num_lines = len(lines)\n+        num_rexps = len(rexps)\n+        line_idx = 0\n+        matches = []\n+        for i in range(0, (num_rexps)):\n+            rexp = rexps[i]\n+            match = None\n+            while line_idx < num_lines and match is None:\n+                line = lines[line_idx]\n+                match = rexp.match(line)\n+                if  match is None:\n+                    if not skip_fails:\n+                        print('Checker %s: match %d failed at line %d %s\\n'%(self.name, i, line_idx, line))\n+                        print(self)\n+                        print(text)\n+                        sys.exit(1)\n+                else:\n+                    matches.append(match)\n+                line_idx += 1\n+        if len(matches) < num_rexps:\n+            print('Checker %s: insufficient matching lines %d for regular expressions %d'%(self.name, len(matches), num_rexps))\n+            print(self)\n+            print(text)\n+            sys.exit(1)\n+        print(text)\n+        return matches\n+\n+    # Format a Checker as a string\n+    def __str__(self):\n+        rexps = self.rexps\n+        result = 'Checker %s '%(self.name)\n+        result += '{\\n'\n+        for rexp in rexps:\n+            result += '  %s\\n'%(rexp)\n+        result += '}\\n'\n+        return result\n+\n+def execute(command):\n+    print('(gdb) %s'%(command))\n+    return gdb.execute(command, to_string=True)\n+\n+# Configure this gdb session\n+\n+# ensure file listings show only the current line\n+execute(\"set listsize 1\")\n+\n+# Start of actual test code\n+#\n+\n+def test():\n+\n+    # disable prompting to continue output\n+    execute(\"set pagination off\")\n+    # set a break point at hello.Hello::main\n+    # expect \"Breakpoint 1 at 0x[0-9a-f]+: file hello.Hello.java, line 64.\"\n+    exec_string = execute(\"break hello.Hello::main\")\n+    rexp = \"Breakpoint 1 at 0x([0-9a-f]+): file hello/Hello\\\\.java, line 64\\\\.\"\n+    checker = Checker('break main', rexp)\n+    checker.check(exec_string)\n+\n+    # run the program\n+    execute(\"run\")\n+\n+    # list the line at the breakpoint\n+    # expect \"64\t        Greeter greeter = Greeter.greeter(args);\"\n+    exec_string = execute(\"list\")\n+    checker = Checker(\"list bp 1\", \"64[ \\t]+Greeter greeter = Greeter\\\\.greeter\\\\(args\\\\);\")\n+    checker.check(exec_string, skip_fails=False)\n+\n+    # run a backtrace\n+    # expect \"#0  hello.Hello::main(java.lang.String[]).* at hello.Hello.java:64\"\n+    # expect \"#1  0x[0-9a-f]+ in com.oracle.svm.core.code.IsolateEnterStub::JavaMainWrapper_run_.* at [a-z/]+/JavaMainWrapper.java:[0-9]+\"\n+    exec_string = execute(\"backtrace\")\n+    checker = Checker(\"backtrace hello.Hello::main\",\n+                      [\"#0[ \\t]+hello\\\\.Hello::main\\\\(java\\\\.lang\\\\.String\\\\[\\\\]\\\\).* at hello/Hello\\\\.java:64\",\n+                       \"#1[ \\t]+0x[0-9a-f]+ in com\\\\.oracle\\\\.svm\\\\.core\\\\.code\\\\.IsolateEnterStub::JavaMainWrapper_run_.* at [a-z/]+/JavaMainWrapper\\\\.java:[0-9]+\"\n+                      ])\n+    checker.check(exec_string, skip_fails=False)\n+\n+    # look up PrintStream::println methods\n+    # expect \"All functions matching regular expression \"java.io.PrintStream::println\":\"\n+    # expect \"\"\n+    # expect \"File java.base/java/io/PrintStream.java:\"\n+    # expect \"      void java.io.PrintStream::println(java.lang.Object)(void);\"\n+    # expect \"      void java.io.PrintStream::println(java.lang.String)(void);\"\n+    exec_string = execute(\"info func java.io.PrintStream::println\")\n+#    checker = Checker(\"info func java.io.PrintStream::println\",\n+#                      [\"All functions matching regular expression \\\"java\\\\.io\\\\.PrintStream::println\\\":\",\n+#                       \"\",\n+#                       \"File .*java/io/PrintStream.java:\",\n+#                       \"[ \\t]*void java.io.PrintStream::println\\\\(java\\\\.lang\\\\.Object\\\\)\\\\(void\\\\);\",\n+#                       \"[ \\t]*void java.io.PrintStream::println\\\\(java\\\\.lang\\\\.String\\\\)\\\\(void\\\\);\",\n+#                      ])\n+    checker = Checker(\"info func java.io.PrintStream::println\",\n+                      \"[ \\t]*void java.io.PrintStream::println\\\\(java\\\\.lang\\\\.String\\\\)\")\n+    checker.check(exec_string)\n+\n+    # set a break point at PrintStream::println(String)\n+    # expect \"Breakpoint 2 at 0x[0-9a-f]+: java.base/java/io/PrintStream.java, line [0-9]+.\"\n+    exec_string = execute(\"break java.io.PrintStream::println(java.lang.String)\")\n+    rexp = \"Breakpoint 2 at 0x([0-9a-f]+): file .*java/io/PrintStream\\\\.java, line [0-9]+\\\\.\"\n+    checker = Checker('break println', rexp)\n+    checker.check(exec_string, skip_fails=False)\n+\n+    # step into method call\n+    execute(\"step\")\n+\n+    # list current line\n+    # expect \"31\t            if (args.length == 0) {\"\n+    exec_string = execute(\"list\")\n+    rexp = \"31[ \\t]+if \\\\(args\\\\.length == 0\\\\) {\"\n+    checker = Checker('list hello.Hello.Greeter::greeter', rexp)\n+    checker.check(exec_string, skip_fails=False)\n+\n+    # run a backtrace\n+    # expect \"#0  hello.Hello.greeter::greeter(java.lang.String[]).* at hello.Hello.java:31\"\n+    # expect \"#1  0x[0-9a-f]+ in hello.Hello::main(java.lang.String[]).* at hello.Hello.java:64\"\n+    # expect \"#2  0x[0-9a-f]+ in com.oracle.svm.core.code.IsolateEnterStub::JavaMainWrapper_run_.* at [a-z/]+/JavaMainWrapper.java:[0-9]+\"\n+    exec_string = execute(\"backtrace\")\n+    checker = Checker(\"backtrace hello.Hello.Greeter::greeter\",\n+                      [\"#0[ \\t]+hello\\\\.Hello\\\\.Greeter::greeter\\\\(java\\\\.lang\\\\.String\\\\[\\\\]\\\\).* at hello/Hello\\\\.java:31\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc3cb87f363410e674f12280a0ea59ddf0d1b2bc"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkzMjc5MA==", "bodyText": "done", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430932790", "createdAt": "2020-05-27T08:07:42Z", "author": {"login": "adinn"}, "path": "substratevm/mx.substratevm/testhello.py", "diffHunk": "@@ -0,0 +1,227 @@\n+# pylint: skip-file\n+#\n+# A test script for use from gdb. It can be sued to drive execution of\n+# a native image version of test app Hello and check that the debug\n+# info is valid.\n+#\n+# Assumes you have already executed\n+#\n+# $ javac hello/Hello.java\n+# $ mx native-image -H:GenerateDebugInfo=1 hello.hello\n+#\n+# Run test\n+#\n+# gdb -d /path/to/sources/src -d /path/to/sources/graal -d /path/to/sources/jdk -x testhello.py /path/to/hello\n+#\n+# exit status 0 means all is well 1 means test failed\n+#\n+# n.b. assumes the sourcefile cache is in local dir sources\n+\n+import re\n+import sys\n+\n+# A helper class which checks that a sequence of lines of output\n+# from a gdb command matches a sequence of per-line regular\n+# expressions\n+\n+class Checker:\n+    # Create a checker to check gdb command output text.\n+    # name - string to help identify the check if we have a failure.\n+    # regexps - a list of regular expressions which must match.\n+    # successive lines of checked\n+    def __init__(self, name, regexps):\n+        self.name = name\n+        compiled = []\n+        if not isinstance(regexps, list):\n+            regexps = [regexps]\n+        for regexp in regexps:\n+            compiled.append(re.compile(regexp))\n+        self.rexps = compiled\n+\n+    # Check that successive lines of a gdb command's output text\n+    # match the corresponding regexp patterns provided when this\n+    # Checker was created.\n+    # text - the full output of a gdb comand run by calling\n+    # gdb.execute and passing to_string = True.\n+    # Exits with status 1 if there are less lines in the text\n+    # than regexp patterns or if any line fails to match the\n+    # corresponding pattern otherwise prints the text and returns\n+    # the set of matches.\n+    def check(self, text, skip_fails=True):\n+        lines = text.split('\\n')\n+        rexps = self.rexps\n+        num_lines = len(lines)\n+        num_rexps = len(rexps)\n+        line_idx = 0\n+        matches = []\n+        for i in range(0, (num_rexps)):\n+            rexp = rexps[i]\n+            match = None\n+            while line_idx < num_lines and match is None:\n+                line = lines[line_idx]\n+                match = rexp.match(line)\n+                if  match is None:\n+                    if not skip_fails:\n+                        print('Checker %s: match %d failed at line %d %s\\n'%(self.name, i, line_idx, line))\n+                        print(self)\n+                        print(text)\n+                        sys.exit(1)\n+                else:\n+                    matches.append(match)\n+                line_idx += 1\n+        if len(matches) < num_rexps:\n+            print('Checker %s: insufficient matching lines %d for regular expressions %d'%(self.name, len(matches), num_rexps))\n+            print(self)\n+            print(text)\n+            sys.exit(1)\n+        print(text)\n+        return matches\n+\n+    # Format a Checker as a string\n+    def __str__(self):\n+        rexps = self.rexps\n+        result = 'Checker %s '%(self.name)\n+        result += '{\\n'\n+        for rexp in rexps:\n+            result += '  %s\\n'%(rexp)\n+        result += '}\\n'\n+        return result\n+\n+def execute(command):\n+    print('(gdb) %s'%(command))\n+    return gdb.execute(command, to_string=True)\n+\n+# Configure this gdb session\n+\n+# ensure file listings show only the current line\n+execute(\"set listsize 1\")\n+\n+# Start of actual test code\n+#\n+\n+def test():\n+\n+    # disable prompting to continue output\n+    execute(\"set pagination off\")\n+    # set a break point at hello.Hello::main\n+    # expect \"Breakpoint 1 at 0x[0-9a-f]+: file hello.Hello.java, line 64.\"\n+    exec_string = execute(\"break hello.Hello::main\")\n+    rexp = \"Breakpoint 1 at 0x([0-9a-f]+): file hello/Hello\\\\.java, line 64\\\\.\"\n+    checker = Checker('break main', rexp)\n+    checker.check(exec_string)\n+\n+    # run the program\n+    execute(\"run\")\n+\n+    # list the line at the breakpoint\n+    # expect \"64\t        Greeter greeter = Greeter.greeter(args);\"\n+    exec_string = execute(\"list\")\n+    checker = Checker(\"list bp 1\", \"64[ \\t]+Greeter greeter = Greeter\\\\.greeter\\\\(args\\\\);\")\n+    checker.check(exec_string, skip_fails=False)\n+\n+    # run a backtrace\n+    # expect \"#0  hello.Hello::main(java.lang.String[]).* at hello.Hello.java:64\"\n+    # expect \"#1  0x[0-9a-f]+ in com.oracle.svm.core.code.IsolateEnterStub::JavaMainWrapper_run_.* at [a-z/]+/JavaMainWrapper.java:[0-9]+\"\n+    exec_string = execute(\"backtrace\")\n+    checker = Checker(\"backtrace hello.Hello::main\",\n+                      [\"#0[ \\t]+hello\\\\.Hello::main\\\\(java\\\\.lang\\\\.String\\\\[\\\\]\\\\).* at hello/Hello\\\\.java:64\",\n+                       \"#1[ \\t]+0x[0-9a-f]+ in com\\\\.oracle\\\\.svm\\\\.core\\\\.code\\\\.IsolateEnterStub::JavaMainWrapper_run_.* at [a-z/]+/JavaMainWrapper\\\\.java:[0-9]+\"\n+                      ])\n+    checker.check(exec_string, skip_fails=False)\n+\n+    # look up PrintStream::println methods\n+    # expect \"All functions matching regular expression \"java.io.PrintStream::println\":\"\n+    # expect \"\"\n+    # expect \"File java.base/java/io/PrintStream.java:\"\n+    # expect \"      void java.io.PrintStream::println(java.lang.Object)(void);\"\n+    # expect \"      void java.io.PrintStream::println(java.lang.String)(void);\"\n+    exec_string = execute(\"info func java.io.PrintStream::println\")\n+#    checker = Checker(\"info func java.io.PrintStream::println\",\n+#                      [\"All functions matching regular expression \\\"java\\\\.io\\\\.PrintStream::println\\\":\",\n+#                       \"\",\n+#                       \"File .*java/io/PrintStream.java:\",\n+#                       \"[ \\t]*void java.io.PrintStream::println\\\\(java\\\\.lang\\\\.Object\\\\)\\\\(void\\\\);\",\n+#                       \"[ \\t]*void java.io.PrintStream::println\\\\(java\\\\.lang\\\\.String\\\\)\\\\(void\\\\);\",\n+#                      ])\n+    checker = Checker(\"info func java.io.PrintStream::println\",\n+                      \"[ \\t]*void java.io.PrintStream::println\\\\(java\\\\.lang\\\\.String\\\\)\")\n+    checker.check(exec_string)\n+\n+    # set a break point at PrintStream::println(String)\n+    # expect \"Breakpoint 2 at 0x[0-9a-f]+: java.base/java/io/PrintStream.java, line [0-9]+.\"\n+    exec_string = execute(\"break java.io.PrintStream::println(java.lang.String)\")\n+    rexp = \"Breakpoint 2 at 0x([0-9a-f]+): file .*java/io/PrintStream\\\\.java, line [0-9]+\\\\.\"\n+    checker = Checker('break println', rexp)\n+    checker.check(exec_string, skip_fails=False)\n+\n+    # step into method call\n+    execute(\"step\")\n+\n+    # list current line\n+    # expect \"31\t            if (args.length == 0) {\"\n+    exec_string = execute(\"list\")\n+    rexp = \"31[ \\t]+if \\\\(args\\\\.length == 0\\\\) {\"\n+    checker = Checker('list hello.Hello.Greeter::greeter', rexp)\n+    checker.check(exec_string, skip_fails=False)\n+\n+    # run a backtrace\n+    # expect \"#0  hello.Hello.greeter::greeter(java.lang.String[]).* at hello.Hello.java:31\"\n+    # expect \"#1  0x[0-9a-f]+ in hello.Hello::main(java.lang.String[]).* at hello.Hello.java:64\"\n+    # expect \"#2  0x[0-9a-f]+ in com.oracle.svm.core.code.IsolateEnterStub::JavaMainWrapper_run_.* at [a-z/]+/JavaMainWrapper.java:[0-9]+\"\n+    exec_string = execute(\"backtrace\")\n+    checker = Checker(\"backtrace hello.Hello.Greeter::greeter\",\n+                      [\"#0[ \\t]+hello\\\\.Hello\\\\.Greeter::greeter\\\\(java\\\\.lang\\\\.String\\\\[\\\\]\\\\).* at hello/Hello\\\\.java:31\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDMxNzM4OQ=="}, "originalCommit": {"oid": "bc3cb87f363410e674f12280a0ea59ddf0d1b2bc"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Mzk1MjU4OnYy", "diffSide": "RIGHT", "path": "substratevm/mx.substratevm/testhello.py", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzowOToxMFrOGa8H2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzowOToxMFrOGa8H2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMTIwOA==", "bodyText": "Very nice! \ud83d\udc4d", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430901208", "createdAt": "2020-05-27T07:09:10Z", "author": {"login": "olpaw"}, "path": "substratevm/mx.substratevm/testhello.py", "diffHunk": "@@ -101,12 +101,20 @@ def execute(command):\n \n def test():\n \n+    # define some useful patterns\n+    address_pattern = '0x[0-9a-f]+'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006f2a8e822e29611cd6b054d4a1cb5fe0059f5e"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4Mzk2ODcxOnYy", "diffSide": "RIGHT", "path": "substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzoxNDo0MVrOGa8SPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwODozODoxOVrOGa_K7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMzg3MQ==", "bodyText": "Now that you have that abstraction in-between you could take the checking one level further by returning a Path here and react on InvalidPathException during construction (Paths.get) with a sensible UserError.abort message.", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430903871", "createdAt": "2020-05-27T07:14:41Z", "author": {"login": "olpaw"}, "path": "substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java", "diffHunk": "@@ -470,13 +472,13 @@ protected void onValueUpdate(EconomicMap<OptionKey<?>, Object> values, Integer o\n     public static final HostedOptionKey<String[]> DebugInfoSourceSearchPath = new HostedOptionKey<String[]>(null) {\n     };\n     @Option(help = \"Directory under which to create source file cache for Application or GraalVM classes\")//\n-    public static final HostedOptionKey<String> DebugInfoSourceCacheRoot = new HostedOptionKey<String>(\"sources\") {\n-        @Override\n-        protected void onValueUpdate(EconomicMap<OptionKey<?>, Object> values, String oldValue, String newValue) {\n-            // disallow null or empty string\n-            if (newValue == null || newValue.length() == 0) {\n-                DebugInfoSourceCacheRoot.update(values, oldValue);\n-            }\n+    public static final HostedOptionKey<String> DebugInfoSourceCacheRoot = new HostedOptionKey<String>(\"sources\");\n+\n+    public static String getDebugInfoSourceCacheRoot() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006f2a8e822e29611cd6b054d4a1cb5fe0059f5e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk1MTE1MQ==", "bodyText": "done", "url": "https://github.com/oracle/graal/pull/2459#discussion_r430951151", "createdAt": "2020-05-27T08:38:19Z", "author": {"login": "adinn"}, "path": "substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/SubstrateOptions.java", "diffHunk": "@@ -470,13 +472,13 @@ protected void onValueUpdate(EconomicMap<OptionKey<?>, Object> values, Integer o\n     public static final HostedOptionKey<String[]> DebugInfoSourceSearchPath = new HostedOptionKey<String[]>(null) {\n     };\n     @Option(help = \"Directory under which to create source file cache for Application or GraalVM classes\")//\n-    public static final HostedOptionKey<String> DebugInfoSourceCacheRoot = new HostedOptionKey<String>(\"sources\") {\n-        @Override\n-        protected void onValueUpdate(EconomicMap<OptionKey<?>, Object> values, String oldValue, String newValue) {\n-            // disallow null or empty string\n-            if (newValue == null || newValue.length() == 0) {\n-                DebugInfoSourceCacheRoot.update(values, oldValue);\n-            }\n+    public static final HostedOptionKey<String> DebugInfoSourceCacheRoot = new HostedOptionKey<String>(\"sources\");\n+\n+    public static String getDebugInfoSourceCacheRoot() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkwMzg3MQ=="}, "originalCommit": {"oid": "006f2a8e822e29611cd6b054d4a1cb5fe0059f5e"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 757, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}