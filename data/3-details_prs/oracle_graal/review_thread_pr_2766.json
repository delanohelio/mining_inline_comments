{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5ODcxNTA4", "number": 2766, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzo1NzozNFrOEZ20lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODo0NzoyOFrOEZ4OMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTQ4MDUzOnYy", "diffSide": "RIGHT", "path": "compiler/src/org.graalvm.compiler.asm.aarch64/src/org/graalvm/compiler/asm/aarch64/AArch64Assembler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzo1NzozNFrOHC7Njg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwNzo1NzozNFrOHC7Njg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgyOTMyNg==", "bodyText": "+1 because AArch64Assembler.java needs more asserts.", "url": "https://github.com/oracle/graal/pull/2766#discussion_r472829326", "createdAt": "2020-08-19T07:57:34Z", "author": {"login": "a74nh"}, "path": "compiler/src/org.graalvm.compiler.asm.aarch64/src/org/graalvm/compiler/asm/aarch64/AArch64Assembler.java", "diffHunk": "@@ -1936,6 +1936,9 @@ public void subs(int size, Register dst, Register src1, Register src2, ShiftType\n     }\n \n     private void addSubShiftedInstruction(Instruction instr, Register dst, Register src1, Register src2, ShiftType shiftType, int imm, InstructionType type) {\n+        assert !dst.equals(sp);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7fd2ed978304ffbbdabe8385652048789730ea"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTUyNzgzOnYy", "diffSide": "RIGHT", "path": "compiler/src/org.graalvm.compiler.asm.aarch64/src/org/graalvm/compiler/asm/aarch64/AArch64MacroAssembler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODowNjozMlrOHC7srg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDozMzo1NlrOHDKVWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgzNzI5NA==", "bodyText": "Probably drop the LSL from the method name. Graal's ExtendType enum doesn't mention LSL.", "url": "https://github.com/oracle/graal/pull/2766#discussion_r472837294", "createdAt": "2020-08-19T08:06:32Z", "author": {"login": "a74nh"}, "path": "compiler/src/org.graalvm.compiler.asm.aarch64/src/org/graalvm/compiler/asm/aarch64/AArch64MacroAssembler.java", "diffHunk": "@@ -919,17 +919,25 @@ public void cset(int size, Register dst, ConditionFlag condition) {\n         super.csinc(size, dst, zr, zr, condition.negate());\n     }\n \n+    private static ExtendType getLSLExtendType(int size) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7fd2ed978304ffbbdabe8385652048789730ea"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA3NzA4Mw==", "bodyText": "I wanted to have LSL in the name, since that is what I'm trying to encode there (it just so happens which type is LSL depends on the instruction size)", "url": "https://github.com/oracle/graal/pull/2766#discussion_r473077083", "createdAt": "2020-08-19T14:33:56Z", "author": {"login": "teshull"}, "path": "compiler/src/org.graalvm.compiler.asm.aarch64/src/org/graalvm/compiler/asm/aarch64/AArch64MacroAssembler.java", "diffHunk": "@@ -919,17 +919,25 @@ public void cset(int size, Register dst, ConditionFlag condition) {\n         super.csinc(size, dst, zr, zr, condition.negate());\n     }\n \n+    private static ExtendType getLSLExtendType(int size) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgzNzI5NA=="}, "originalCommit": {"oid": "2c7fd2ed978304ffbbdabe8385652048789730ea"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTU0NzM4OnYy", "diffSide": "RIGHT", "path": "compiler/src/org.graalvm.compiler.asm.aarch64/src/org/graalvm/compiler/asm/aarch64/AArch64MacroAssembler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODoxMDoxOVrOHC75xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDoyNDowOFrOHDJ3oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg0MDY0Ng==", "bodyText": "Why drop the super. here? Is it because x might be sp?", "url": "https://github.com/oracle/graal/pull/2766#discussion_r472840646", "createdAt": "2020-08-19T08:10:19Z", "author": {"login": "a74nh"}, "path": "compiler/src/org.graalvm.compiler.asm.aarch64/src/org/graalvm/compiler/asm/aarch64/AArch64MacroAssembler.java", "diffHunk": "@@ -1802,28 +1813,24 @@ public void fmadd(int size, Register dst, Register src1, Register src2, Register\n      * Compares x and y and sets condition flags.\n      *\n      * @param size register size. Has to be 32 or 64.\n-     * @param x general purpose register. May not be null or stackpointer.\n+     * @param x general purpose register. May not be null.\n      * @param y general purpose register. May not be null or stackpointer.\n      */\n     public void cmp(int size, Register x, Register y) {\n         assert size == 32 || size == 64;\n-        super.subs(size, zr, x, y, ShiftType.LSL, 0);\n+        subs(size, zr, x, y);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7fd2ed978304ffbbdabe8385652048789730ea"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2OTQ3Mw==", "bodyText": "Yes, I dropped the super so that it can call the aarch64macroassembler subs, which handles more combinations of xzr and sp", "url": "https://github.com/oracle/graal/pull/2766#discussion_r473069473", "createdAt": "2020-08-19T14:24:08Z", "author": {"login": "teshull"}, "path": "compiler/src/org.graalvm.compiler.asm.aarch64/src/org/graalvm/compiler/asm/aarch64/AArch64MacroAssembler.java", "diffHunk": "@@ -1802,28 +1813,24 @@ public void fmadd(int size, Register dst, Register src1, Register src2, Register\n      * Compares x and y and sets condition flags.\n      *\n      * @param size register size. Has to be 32 or 64.\n-     * @param x general purpose register. May not be null or stackpointer.\n+     * @param x general purpose register. May not be null.\n      * @param y general purpose register. May not be null or stackpointer.\n      */\n     public void cmp(int size, Register x, Register y) {\n         assert size == 32 || size == 64;\n-        super.subs(size, zr, x, y, ShiftType.LSL, 0);\n+        subs(size, zr, x, y);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg0MDY0Ng=="}, "originalCommit": {"oid": "2c7fd2ed978304ffbbdabe8385652048789730ea"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTU2NTUzOnYy", "diffSide": "RIGHT", "path": "compiler/src/org.graalvm.compiler.asm.aarch64/src/org/graalvm/compiler/asm/aarch64/AArch64MacroAssembler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODoxMzozN1rOHC8F7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDo0Njo0NlrOHDK7fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg0Mzc1OA==", "bodyText": "Do we want a assert(isComparisonImmediate(y)) check here?", "url": "https://github.com/oracle/graal/pull/2766#discussion_r472843758", "createdAt": "2020-08-19T08:13:37Z", "author": {"login": "a74nh"}, "path": "compiler/src/org.graalvm.compiler.asm.aarch64/src/org/graalvm/compiler/asm/aarch64/AArch64MacroAssembler.java", "diffHunk": "@@ -1802,28 +1813,24 @@ public void fmadd(int size, Register dst, Register src1, Register src2, Register\n      * Compares x and y and sets condition flags.\n      *\n      * @param size register size. Has to be 32 or 64.\n-     * @param x general purpose register. May not be null or stackpointer.\n+     * @param x general purpose register. May not be null.\n      * @param y general purpose register. May not be null or stackpointer.\n      */\n     public void cmp(int size, Register x, Register y) {\n         assert size == 32 || size == 64;\n-        super.subs(size, zr, x, y, ShiftType.LSL, 0);\n+        subs(size, zr, x, y);\n     }\n \n     /**\n      * Compares x to y and sets condition flags.\n      *\n      * @param size register size. Has to be 32 or 64.\n-     * @param x general purpose register. May not be null or stackpointer.\n+     * @param x general purpose register. May not be null or zero-register.\n      * @param y comparison immediate, {@link #isComparisonImmediate(long)} has to be true for it.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7fd2ed978304ffbbdabe8385652048789730ea"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4Njg0Ng==", "bodyText": "Yeah, I agree. done", "url": "https://github.com/oracle/graal/pull/2766#discussion_r473086846", "createdAt": "2020-08-19T14:46:46Z", "author": {"login": "teshull"}, "path": "compiler/src/org.graalvm.compiler.asm.aarch64/src/org/graalvm/compiler/asm/aarch64/AArch64MacroAssembler.java", "diffHunk": "@@ -1802,28 +1813,24 @@ public void fmadd(int size, Register dst, Register src1, Register src2, Register\n      * Compares x and y and sets condition flags.\n      *\n      * @param size register size. Has to be 32 or 64.\n-     * @param x general purpose register. May not be null or stackpointer.\n+     * @param x general purpose register. May not be null.\n      * @param y general purpose register. May not be null or stackpointer.\n      */\n     public void cmp(int size, Register x, Register y) {\n         assert size == 32 || size == 64;\n-        super.subs(size, zr, x, y, ShiftType.LSL, 0);\n+        subs(size, zr, x, y);\n     }\n \n     /**\n      * Compares x to y and sets condition flags.\n      *\n      * @param size register size. Has to be 32 or 64.\n-     * @param x general purpose register. May not be null or stackpointer.\n+     * @param x general purpose register. May not be null or zero-register.\n      * @param y comparison immediate, {@link #isComparisonImmediate(long)} has to be true for it.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg0Mzc1OA=="}, "originalCommit": {"oid": "2c7fd2ed978304ffbbdabe8385652048789730ea"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTYyNjEwOnYy", "diffSide": "RIGHT", "path": "compiler/src/org.graalvm.compiler.core.aarch64/src/org/graalvm/compiler/core/aarch64/AArch64LIRGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODoyNjoxNVrOHC8tJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNToyODo1N1rOHDM0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1Mzc5Nw==", "bodyText": "Ok, this turns \"cmp(sp,sp)\" into \"mov(r10,sp); cmp(r10,sp)\"\nFor cosmetic reasons, I want to say that you should update the right so that it does \"mov(r10,sp); cmp(r10,r10)\". But it's not going to make any difference.", "url": "https://github.com/oracle/graal/pull/2766#discussion_r472853797", "createdAt": "2020-08-19T08:26:15Z", "author": {"login": "a74nh"}, "path": "compiler/src/org.graalvm.compiler.core.aarch64/src/org/graalvm/compiler/core/aarch64/AArch64LIRGenerator.java", "diffHunk": "@@ -384,31 +385,44 @@ protected boolean emitCompare(PlatformKind cmpKind, Value a, Value b, Condition\n                 bExt = arithmeticLIRGen.emitSignExtend(b, compareBytes * 8, 64);\n             }\n \n-            if (LIRValueUtil.isVariable(bExt)) {\n-                left = load(bExt);\n+            /*\n+             * The AArch64 comparison instruction can treat register 31 as the stack pointer\n+             * register for the left operand, but not for the right operand.\n+             */\n+            boolean aIsStackPointer = ValueUtil.isRegister(aExt) && ValueUtil.asRegister(aExt).equals(AArch64.sp);\n+            boolean bIsStackPointer = ValueUtil.isRegister(bExt) && ValueUtil.asRegister(bExt).equals(AArch64.sp);\n+\n+            if (aIsStackPointer && bIsStackPointer) {\n+                // move b to a non-sp register", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7fd2ed978304ffbbdabe8385652048789730ea"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzExNzc1MA==", "bodyText": "true. changed", "url": "https://github.com/oracle/graal/pull/2766#discussion_r473117750", "createdAt": "2020-08-19T15:28:57Z", "author": {"login": "teshull"}, "path": "compiler/src/org.graalvm.compiler.core.aarch64/src/org/graalvm/compiler/core/aarch64/AArch64LIRGenerator.java", "diffHunk": "@@ -384,31 +385,44 @@ protected boolean emitCompare(PlatformKind cmpKind, Value a, Value b, Condition\n                 bExt = arithmeticLIRGen.emitSignExtend(b, compareBytes * 8, 64);\n             }\n \n-            if (LIRValueUtil.isVariable(bExt)) {\n-                left = load(bExt);\n+            /*\n+             * The AArch64 comparison instruction can treat register 31 as the stack pointer\n+             * register for the left operand, but not for the right operand.\n+             */\n+            boolean aIsStackPointer = ValueUtil.isRegister(aExt) && ValueUtil.asRegister(aExt).equals(AArch64.sp);\n+            boolean bIsStackPointer = ValueUtil.isRegister(bExt) && ValueUtil.asRegister(bExt).equals(AArch64.sp);\n+\n+            if (aIsStackPointer && bIsStackPointer) {\n+                // move b to a non-sp register", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg1Mzc5Nw=="}, "originalCommit": {"oid": "2c7fd2ed978304ffbbdabe8385652048789730ea"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTcwOTk1OnYy", "diffSide": "RIGHT", "path": "compiler/src/org.graalvm.compiler.core.aarch64/src/org/graalvm/compiler/core/aarch64/AArch64LIRGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODo0NzoyOFrOHC9gTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDozOToxM1rOHDKllA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg2Njg5NA==", "bodyText": "All the changes in this patch make sense individually. But, I can't see what's actually removing the unnecessary loads. Is it the use of loadReg instead or load?", "url": "https://github.com/oracle/graal/pull/2766#discussion_r472866894", "createdAt": "2020-08-19T08:47:28Z", "author": {"login": "a74nh"}, "path": "compiler/src/org.graalvm.compiler.core.aarch64/src/org/graalvm/compiler/core/aarch64/AArch64LIRGenerator.java", "diffHunk": "@@ -384,31 +385,44 @@ protected boolean emitCompare(PlatformKind cmpKind, Value a, Value b, Condition\n                 bExt = arithmeticLIRGen.emitSignExtend(b, compareBytes * 8, 64);\n             }\n \n-            if (LIRValueUtil.isVariable(bExt)) {\n-                left = load(bExt);\n+            /*\n+             * The AArch64 comparison instruction can treat register 31 as the stack pointer\n+             * register for the left operand, but not for the right operand.\n+             */\n+            boolean aIsStackPointer = ValueUtil.isRegister(aExt) && ValueUtil.asRegister(aExt).equals(AArch64.sp);\n+            boolean bIsStackPointer = ValueUtil.isRegister(bExt) && ValueUtil.asRegister(bExt).equals(AArch64.sp);\n+\n+            if (aIsStackPointer && bIsStackPointer) {\n+                // move b to a non-sp register\n+                bIsStackPointer = false;\n+                bExt = emitMove(bExt);\n+            }\n+\n+            if (bIsStackPointer || (!aIsStackPointer && LIRValueUtil.isVariable(bExt))) {\n+                left = bExt;\n                 right = loadNonConst(aExt);\n                 mirrored = true;\n             } else {\n-                left = load(aExt);\n+                left = aExt;\n                 right = loadNonConst(bExt);\n                 mirrored = false;\n             }\n-            append(new AArch64Compare.CompareOp(left, loadNonCompareConst(right)));\n+            append(new AArch64Compare.CompareOp(loadReg(left), loadNonCompareConst(right)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c7fd2ed978304ffbbdabe8385652048789730ea"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4MTIzNg==", "bodyText": "Yes. Using load will introduce moves for values already assigned a registervalue. In general it would be a good idea to remove all unneeded loads in the code", "url": "https://github.com/oracle/graal/pull/2766#discussion_r473081236", "createdAt": "2020-08-19T14:39:13Z", "author": {"login": "teshull"}, "path": "compiler/src/org.graalvm.compiler.core.aarch64/src/org/graalvm/compiler/core/aarch64/AArch64LIRGenerator.java", "diffHunk": "@@ -384,31 +385,44 @@ protected boolean emitCompare(PlatformKind cmpKind, Value a, Value b, Condition\n                 bExt = arithmeticLIRGen.emitSignExtend(b, compareBytes * 8, 64);\n             }\n \n-            if (LIRValueUtil.isVariable(bExt)) {\n-                left = load(bExt);\n+            /*\n+             * The AArch64 comparison instruction can treat register 31 as the stack pointer\n+             * register for the left operand, but not for the right operand.\n+             */\n+            boolean aIsStackPointer = ValueUtil.isRegister(aExt) && ValueUtil.asRegister(aExt).equals(AArch64.sp);\n+            boolean bIsStackPointer = ValueUtil.isRegister(bExt) && ValueUtil.asRegister(bExt).equals(AArch64.sp);\n+\n+            if (aIsStackPointer && bIsStackPointer) {\n+                // move b to a non-sp register\n+                bIsStackPointer = false;\n+                bExt = emitMove(bExt);\n+            }\n+\n+            if (bIsStackPointer || (!aIsStackPointer && LIRValueUtil.isVariable(bExt))) {\n+                left = bExt;\n                 right = loadNonConst(aExt);\n                 mirrored = true;\n             } else {\n-                left = load(aExt);\n+                left = aExt;\n                 right = loadNonConst(bExt);\n                 mirrored = false;\n             }\n-            append(new AArch64Compare.CompareOp(left, loadNonCompareConst(right)));\n+            append(new AArch64Compare.CompareOp(loadReg(left), loadNonCompareConst(right)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg2Njg5NA=="}, "originalCommit": {"oid": "2c7fd2ed978304ffbbdabe8385652048789730ea"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 709, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}