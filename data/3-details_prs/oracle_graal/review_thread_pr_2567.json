{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0MTYxMjkz", "number": 2567, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzoxMzo1N1rOEGCIAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoyMTowNVrOEGDo4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzYxNzI4OnYy", "diffSide": "RIGHT", "path": "truffle/src/com.oracle.truffle.dsl.processor/src/com/oracle/truffle/dsl/processor/model/SpecializationData.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzoxMzo1N1rOGklR9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzo0MjowNFrOGkmSwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMjcyNw==", "bodyText": "Maybe rename this field reachableUncached to makle it clearer what it means.\nA specialization is not uncached by itself.\nAt the same time it would make sense to rename SpecializationData#reachable to reachableCached.", "url": "https://github.com/oracle/graal/pull/2567#discussion_r441012727", "createdAt": "2020-06-16T17:13:57Z", "author": {"login": "chumer"}, "path": "truffle/src/com.oracle.truffle.dsl.processor/src/com/oracle/truffle/dsl/processor/model/SpecializationData.java", "diffHunk": "@@ -353,10 +355,18 @@ public void setReachable(boolean reachable) {\n         this.reachable = reachable;\n     }\n \n+    public void setUncached(boolean uncached) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2de7cf0854ce46fd91f9e87fd4be46fb212917b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyNDMxMw==", "bodyText": "This would be confusing. The isUncached field does not mean \"is it reachable in the uncached node?\", but rather \"is this specialization taken into account when generating the uncached node?\". It has nothing to do with actual reachability, just a helper field.\nI've only cached it here to avoid some map lookups, but honestly maybe we'd be better off just doing those lookups and not add more fields here?", "url": "https://github.com/oracle/graal/pull/2567#discussion_r441024313", "createdAt": "2020-06-16T17:33:19Z", "author": {"login": "kustosz"}, "path": "truffle/src/com.oracle.truffle.dsl.processor/src/com/oracle/truffle/dsl/processor/model/SpecializationData.java", "diffHunk": "@@ -353,10 +355,18 @@ public void setReachable(boolean reachable) {\n         this.reachable = reachable;\n     }\n \n+    public void setUncached(boolean uncached) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMjcyNw=="}, "originalCommit": {"oid": "a2de7cf0854ce46fd91f9e87fd4be46fb212917b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyOTMxMg==", "bodyText": "You are right. Sorry for my confusion.", "url": "https://github.com/oracle/graal/pull/2567#discussion_r441029312", "createdAt": "2020-06-16T17:42:04Z", "author": {"login": "chumer"}, "path": "truffle/src/com.oracle.truffle.dsl.processor/src/com/oracle/truffle/dsl/processor/model/SpecializationData.java", "diffHunk": "@@ -353,10 +355,18 @@ public void setReachable(boolean reachable) {\n         this.reachable = reachable;\n     }\n \n+    public void setUncached(boolean uncached) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxMjcyNw=="}, "originalCommit": {"oid": "a2de7cf0854ce46fd91f9e87fd4be46fb212917b"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NzYyNDkzOnYy", "diffSide": "RIGHT", "path": "truffle/src/com.oracle.truffle.dsl.processor/src/com/oracle/truffle/dsl/processor/parser/NodeParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzoxNjoxOFrOGklXNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNzozNDowNVrOGkmA7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxNDA2OQ==", "bodyText": "I think this could be merged into initializeReachability. It is fine if this one computes cached and uncached reachability.", "url": "https://github.com/oracle/graal/pull/2567#discussion_r441014069", "createdAt": "2020-06-16T17:16:18Z", "author": {"login": "chumer"}, "path": "truffle/src/com.oracle.truffle.dsl.processor/src/com/oracle/truffle/dsl/processor/parser/NodeParser.java", "diffHunk": "@@ -1748,6 +1749,13 @@ private void collectIncludes(SpecializationData specialization, Set<Specializati\n         }\n     }\n \n+    private static void initializeUncached(final NodeData node) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2de7cf0854ce46fd91f9e87fd4be46fb212917b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAyNDc0OA==", "bodyText": "Again, the intializeReachability methods computes both kinds of reachability. This one only initializes a helper field.", "url": "https://github.com/oracle/graal/pull/2567#discussion_r441024748", "createdAt": "2020-06-16T17:34:05Z", "author": {"login": "kustosz"}, "path": "truffle/src/com.oracle.truffle.dsl.processor/src/com/oracle/truffle/dsl/processor/parser/NodeParser.java", "diffHunk": "@@ -1748,6 +1749,13 @@ private void collectIncludes(SpecializationData specialization, Set<Specializati\n         }\n     }\n \n+    private static void initializeUncached(final NodeData node) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTAxNDA2OQ=="}, "originalCommit": {"oid": "a2de7cf0854ce46fd91f9e87fd4be46fb212917b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Nzg1ODY1OnYy", "diffSide": "RIGHT", "path": "truffle/src/com.oracle.truffle.dsl.processor/src/com/oracle/truffle/dsl/processor/parser/NodeParser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoxOTo1OVrOGkntiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwOTozOTo1OVrOGk-Asw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1MjU1Mg==", "bodyText": "initializeUncached uses SpecializationData.getReplaces indirectly that gets initialized in resolveReplaces later.\nHow about we merge initializeUncached with resolveReplaces. And rename SpecializationData#uncached to Specialization#replaced. This probably needs to be a flattened set again in order to fix the failing test.", "url": "https://github.com/oracle/graal/pull/2567#discussion_r441052552", "createdAt": "2020-06-16T18:19:59Z", "author": {"login": "chumer"}, "path": "truffle/src/com.oracle.truffle.dsl.processor/src/com/oracle/truffle/dsl/processor/parser/NodeParser.java", "diffHunk": "@@ -1576,6 +1576,7 @@ private void initializeSpecializations(List<? extends Element> elements, final N\n         initializeUninitialized(node);\n         initializeOrder(node);\n         initializePolymorphism(node); // requires specializations\n+        initializeUncached(node);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2de7cf0854ce46fd91f9e87fd4be46fb212917b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3NTM0OA==", "bodyText": "Done, indeed makes the code simpler :)", "url": "https://github.com/oracle/graal/pull/2567#discussion_r441075348", "createdAt": "2020-06-16T18:58:41Z", "author": {"login": "kustosz"}, "path": "truffle/src/com.oracle.truffle.dsl.processor/src/com/oracle/truffle/dsl/processor/parser/NodeParser.java", "diffHunk": "@@ -1576,6 +1576,7 @@ private void initializeSpecializations(List<? extends Element> elements, final N\n         initializeUninitialized(node);\n         initializeOrder(node);\n         initializePolymorphism(node); // requires specializations\n+        initializeUncached(node);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1MjU1Mg=="}, "originalCommit": {"oid": "a2de7cf0854ce46fd91f9e87fd4be46fb212917b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQxNzkwNw==", "bodyText": "Perfect. Thanks!", "url": "https://github.com/oracle/graal/pull/2567#discussion_r441417907", "createdAt": "2020-06-17T09:39:59Z", "author": {"login": "chumer"}, "path": "truffle/src/com.oracle.truffle.dsl.processor/src/com/oracle/truffle/dsl/processor/parser/NodeParser.java", "diffHunk": "@@ -1576,6 +1576,7 @@ private void initializeSpecializations(List<? extends Element> elements, final N\n         initializeUninitialized(node);\n         initializeOrder(node);\n         initializePolymorphism(node); // requires specializations\n+        initializeUncached(node);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1MjU1Mg=="}, "originalCommit": {"oid": "a2de7cf0854ce46fd91f9e87fd4be46fb212917b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0Nzg2NTMxOnYy", "diffSide": "RIGHT", "path": "truffle/src/com.oracle.truffle.api.dsl.test/src/com/oracle/truffle/api/dsl/test/ReachabilityTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxODoyMTowNlrOGknxiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwOTozOTo0MlrOGk-AEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1MzU3OQ==", "bodyText": "Here is a failing test.\n\n @GenerateUncached\n    abstract static class ReachabilityUncached4 extends ReachabilityUncached {\n\n        @Specialization\n        int s0(@Cached(\"foo()\") int cached) {\n            return cached;\n        }\n\n        @Specialization(replaces = \"s0\")\n        int s1() {\n            return 1;\n        }\n\n        @Specialization(replaces = \"s1\")\n        int s2() {\n            return 1;\n        }\n    }\n\n\nI think that one should work too but doesn't.", "url": "https://github.com/oracle/graal/pull/2567#discussion_r441053579", "createdAt": "2020-06-16T18:21:06Z", "author": {"login": "chumer"}, "path": "truffle/src/com.oracle.truffle.api.dsl.test/src/com/oracle/truffle/api/dsl/test/ReachabilityTest.java", "diffHunk": "@@ -301,4 +304,62 @@ int do1() throws RuntimeException {\n \n     }\n \n+    abstract static class ReachabilityUncached extends Node {\n+        abstract int execute();\n+\n+        int foo() {\n+            return 0;\n+        }\n+    }\n+\n+    @GenerateUncached\n+    abstract static class ReachabilityUncached1 extends ReachabilityUncached {\n+        @Specialization\n+        int doCached(@Cached(\"foo()\") int cached) {\n+            return cached;\n+        }\n+\n+        @Specialization(replaces = \"doCached\")\n+        int doUncached() {\n+            return 1;\n+        }\n+    }\n+\n+    @GenerateUncached\n+    abstract static class ReachabilityUncached2 extends ReachabilityUncached {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2de7cf0854ce46fd91f9e87fd4be46fb212917b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA3NjMzNQ==", "bodyText": "I don't understand what's wrong with this example. It fails with Specialization is not reachable. It is shadowed by s0(int).. And that is true \u2013 s1 is replaced and as such is never a part of the uncached node. So normal rules apply here (as if @GenerateUncached was not present).", "url": "https://github.com/oracle/graal/pull/2567#discussion_r441076335", "createdAt": "2020-06-16T19:00:32Z", "author": {"login": "kustosz"}, "path": "truffle/src/com.oracle.truffle.api.dsl.test/src/com/oracle/truffle/api/dsl/test/ReachabilityTest.java", "diffHunk": "@@ -301,4 +304,62 @@ int do1() throws RuntimeException {\n \n     }\n \n+    abstract static class ReachabilityUncached extends Node {\n+        abstract int execute();\n+\n+        int foo() {\n+            return 0;\n+        }\n+    }\n+\n+    @GenerateUncached\n+    abstract static class ReachabilityUncached1 extends ReachabilityUncached {\n+        @Specialization\n+        int doCached(@Cached(\"foo()\") int cached) {\n+            return cached;\n+        }\n+\n+        @Specialization(replaces = \"doCached\")\n+        int doUncached() {\n+            return 1;\n+        }\n+    }\n+\n+    @GenerateUncached\n+    abstract static class ReachabilityUncached2 extends ReachabilityUncached {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1MzU3OQ=="}, "originalCommit": {"oid": "a2de7cf0854ce46fd91f9e87fd4be46fb212917b"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQxNzc0NQ==", "bodyText": "You are right. I tried somehow to construct a case where the missing handling of transitivity was a problem. But it seems it never was.", "url": "https://github.com/oracle/graal/pull/2567#discussion_r441417745", "createdAt": "2020-06-17T09:39:42Z", "author": {"login": "chumer"}, "path": "truffle/src/com.oracle.truffle.api.dsl.test/src/com/oracle/truffle/api/dsl/test/ReachabilityTest.java", "diffHunk": "@@ -301,4 +304,62 @@ int do1() throws RuntimeException {\n \n     }\n \n+    abstract static class ReachabilityUncached extends Node {\n+        abstract int execute();\n+\n+        int foo() {\n+            return 0;\n+        }\n+    }\n+\n+    @GenerateUncached\n+    abstract static class ReachabilityUncached1 extends ReachabilityUncached {\n+        @Specialization\n+        int doCached(@Cached(\"foo()\") int cached) {\n+            return cached;\n+        }\n+\n+        @Specialization(replaces = \"doCached\")\n+        int doUncached() {\n+            return 1;\n+        }\n+    }\n+\n+    @GenerateUncached\n+    abstract static class ReachabilityUncached2 extends ReachabilityUncached {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTA1MzU3OQ=="}, "originalCommit": {"oid": "a2de7cf0854ce46fd91f9e87fd4be46fb212917b"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 772, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}