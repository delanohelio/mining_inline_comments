{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3NDA4NzU4", "number": 2455, "title": "[GR-23150] Fix several JDK 15 related issues with native-image", "bodyText": "This PR fixes\n\nAdd isHidden substitution to java.lang.Class\nFix MethodHandleIntrinsic needed since Hidden classes were introduced\nFix issue with Nashorn being removed in JDK 15\nAdd loadLibrary method to BootLoader", "createdAt": "2020-05-13T14:39:12Z", "url": "https://github.com/oracle/graal/pull/2455", "merged": true, "mergeCommit": {"oid": "77e15138596caea7707618c7e315e79f5b814e2e"}, "closed": true, "closedAt": "2020-05-28T02:14:49Z", "author": {"login": "bobvandette"}, "timelineItems": {"totalCount": 39, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcagBJuAH2gAyNDE3NDA4NzU4OmRkMDRhYzk0MjYzNjFjMGI1YzE5NGUzYjlmZjBhYTY0ZWU2MDRhNmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclcoUwAH2gAyNDE3NDA4NzU4OmZjMjMxOTkzZDcwZWUyOWNlYzNkN2I4M2ZkNGU2M2QyZmUwMmQ5MjU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "dd04ac9426361c0b5c194e3b9ff0aa64ee604a6a", "author": {"user": {"login": "jerboaa", "name": "Severin Gehwolf"}}, "url": "https://github.com/oracle/graal/commit/dd04ac9426361c0b5c194e3b9ff0aa64ee604a6a", "committedDate": "2020-04-23T17:06:20Z", "message": "Only add nashorn check on JDK 14 or earlier\n\nJDK 15 removed nashorn with:\nhttps://bugs.openjdk.java.net/browse/JDK-8241749\n\nCloses #2365"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa5c7e14cc1995230dde40e6086f62a0911cc1ea", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/fa5c7e14cc1995230dde40e6086f62a0911cc1ea", "committedDate": "2020-05-13T14:03:04Z", "message": "Merge branch 'openjdk-15-nashorn-removal' of jerboaa/graal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e87157537f618e4702317b9657d2bc10f07069fa", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/e87157537f618e4702317b9657d2bc10f07069fa", "committedDate": "2020-05-13T14:10:44Z", "message": "Add loadLibrary substitution to jdk.internal.loader.BootLoader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "01631c22922a4507408447485461e60e55ab26c9", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/01631c22922a4507408447485461e60e55ab26c9", "committedDate": "2020-05-13T14:16:10Z", "message": "Add isHidden substitution for java.lang.Class in JDK 15"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b33e3dc362bc63edaffbe7bd56f890a95f764f0", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/7b33e3dc362bc63edaffbe7bd56f890a95f764f0", "committedDate": "2020-05-13T14:17:32Z", "message": "Fix #2383 Addition of Hidden Classes in JDK15 breaks native-image"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fe26e7ca966728c63a84b9847ad42aab6b069c8", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/0fe26e7ca966728c63a84b9847ad42aab6b069c8", "committedDate": "2020-05-13T14:19:57Z", "message": "Merge branch 'master' of oracle/graal"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTExMDA2", "url": "https://github.com/oracle/graal/pull/2455#pullrequestreview-411111006", "createdAt": "2020-05-13T16:44:56Z", "commit": {"oid": "0fe26e7ca966728c63a84b9847ad42aab6b069c8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo0NDo1NlrOGU6dkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo1NTowMVrOGU62gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MjU0Ng==", "bodyText": "You cannot just ignore InstanceOfNode and FixedGuardNode. That would mean you omit necessary type checks.", "url": "https://github.com/oracle/graal/pull/2455#discussion_r424582546", "createdAt": "2020-05-13T16:44:56Z", "author": {"login": "christianwimmer"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/phases/IntrinsifyMethodHandlesInvocationPlugin.java", "diffHunk": "@@ -487,10 +490,15 @@ private void processInvokeWithMethodHandle(GraphBuilderContext b, Replacements r\n              */\n             Node singleFunctionality = null;\n             ReturnNode singleReturn = null;\n+            ValueNode singleNewInstance = null;\n             for (Node node : graph.getNodes()) {\n                 if (node == graph.start() || node instanceof ParameterNode || node instanceof ConstantNode || node instanceof FrameState) {\n                     /* Ignore the allowed framework around the nodes we care about. */\n-                } else if (node instanceof MethodCallTargetNode) {\n+                } else if (node instanceof DynamicNewInstanceNode && singleNewInstance == null && ((DynamicNewInstanceNode) node).getInstanceType().isConstant()) {\n+                    singleNewInstance = (DynamicNewInstanceNode) node;\n+                } else if (node instanceof NewInstanceNode && singleNewInstance == null) {\n+                    singleNewInstance = (NewInstanceNode) node;\n+                } else if (node instanceof MethodCallTargetNode || node instanceof InstanceOfNode || node instanceof FixedGuardNode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fe26e7ca966728c63a84b9847ad42aab6b069c8"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4MzI1OA==", "bodyText": "We need to immediately have a complete implementation. So you need to preserve this information from the image generator in a flag in DynamicHub so that you can return it here.", "url": "https://github.com/oracle/graal/pull/2455#discussion_r424583258", "createdAt": "2020-05-13T16:46:01Z", "author": {"login": "christianwimmer"}, "path": "substratevm/src/com.oracle.svm.core/src/com/oracle/svm/core/hub/DynamicHub.java", "diffHunk": "@@ -755,6 +756,12 @@ private boolean isAnonymousClass() {\n         }\n     }\n \n+    @Substitute\n+    @TargetElement(onlyWith = JDK15OrLater.class)\n+    public boolean isHidden() {\n+        throw VMError.shouldNotReachHere();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fe26e7ca966728c63a84b9847ad42aab6b069c8"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NzAyMQ==", "bodyText": "Why is such a  DynamicNewInstanceNode not canonicalized to a NewInstanceNode? Because the type is not initialized yet?", "url": "https://github.com/oracle/graal/pull/2455#discussion_r424587021", "createdAt": "2020-05-13T16:51:53Z", "author": {"login": "christianwimmer"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/phases/IntrinsifyMethodHandlesInvocationPlugin.java", "diffHunk": "@@ -487,10 +490,15 @@ private void processInvokeWithMethodHandle(GraphBuilderContext b, Replacements r\n              */\n             Node singleFunctionality = null;\n             ReturnNode singleReturn = null;\n+            ValueNode singleNewInstance = null;\n             for (Node node : graph.getNodes()) {\n                 if (node == graph.start() || node instanceof ParameterNode || node instanceof ConstantNode || node instanceof FrameState) {\n                     /* Ignore the allowed framework around the nodes we care about. */\n-                } else if (node instanceof MethodCallTargetNode) {\n+                } else if (node instanceof DynamicNewInstanceNode && singleNewInstance == null && ((DynamicNewInstanceNode) node).getInstanceType().isConstant()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fe26e7ca966728c63a84b9847ad42aab6b069c8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4Nzg5NA==", "bodyText": "Why do you need this class initialization check for the invoke when there is a singleNewInstance?", "url": "https://github.com/oracle/graal/pull/2455#discussion_r424587894", "createdAt": "2020-05-13T16:53:19Z", "author": {"login": "christianwimmer"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/phases/IntrinsifyMethodHandlesInvocationPlugin.java", "diffHunk": "@@ -516,12 +524,26 @@ private void processInvokeWithMethodHandle(GraphBuilderContext b, Replacements r\n \n             JavaKind returnResultKind = b.getInvokeReturnType().getJavaKind().getStackKind();\n             ValueNode transplantedSingleFunctionality = null;\n+            NewInstanceNode transplantedNewInstance = null;\n             if (singleFunctionality instanceof Invoke) {\n+\n                 Invoke singleInvoke = (Invoke) singleFunctionality;\n                 MethodCallTargetNode singleCallTarget = (MethodCallTargetNode) singleInvoke.callTarget();\n                 ResolvedJavaMethod resolvedTarget = lookup(singleCallTarget.targetMethod());\n \n-                maybeEmitClassInitialization(b, singleCallTarget.invokeKind() == InvokeKind.Static, resolvedTarget.getDeclaringClass());\n+                if (singleNewInstance != null) {\n+                    ResolvedJavaType type = null;\n+                    if (singleNewInstance instanceof DynamicNewInstanceNode) {\n+                        type = lookup(originalProviders.getConstantReflection().asJavaType(((DynamicNewInstanceNode) singleNewInstance).getInstanceType().asConstant()));\n+                    }\n+                    if (singleNewInstance instanceof NewInstanceNode) {\n+                        type = lookup(((NewInstanceNode) singleNewInstance).instanceClass());\n+                    }\n+                    maybeEmitClassInitialization(b, true, resolvedTarget.getDeclaringClass());\n+                    transplantedNewInstance = b.add(new SubstrateNewInstanceNode(type, true));\n+                } else {\n+                    maybeEmitClassInitialization(b, singleCallTarget.invokeKind() == InvokeKind.Static, resolvedTarget.getDeclaringClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fe26e7ca966728c63a84b9847ad42aab6b069c8"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4ODkzMQ==", "bodyText": "What happens if there is a singleNewInstance but singleFunctionality is not an Invoke?", "url": "https://github.com/oracle/graal/pull/2455#discussion_r424588931", "createdAt": "2020-05-13T16:55:01Z", "author": {"login": "christianwimmer"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/phases/IntrinsifyMethodHandlesInvocationPlugin.java", "diffHunk": "@@ -516,12 +524,26 @@ private void processInvokeWithMethodHandle(GraphBuilderContext b, Replacements r\n \n             JavaKind returnResultKind = b.getInvokeReturnType().getJavaKind().getStackKind();\n             ValueNode transplantedSingleFunctionality = null;\n+            NewInstanceNode transplantedNewInstance = null;\n             if (singleFunctionality instanceof Invoke) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fe26e7ca966728c63a84b9847ad42aab6b069c8"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02c936de7cbe06019c7319945972e51c2935f91d", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/02c936de7cbe06019c7319945972e51c2935f91d", "committedDate": "2020-05-13T22:08:31Z", "message": "Add ClassCast Check and fix style error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b56f75aa42775199247a44ebaacb3709b994755c", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/b56f75aa42775199247a44ebaacb3709b994755c", "committedDate": "2020-05-14T19:49:40Z", "message": "add JDK15 isHidden attribute to DynamicHub"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a79a7e42fc0a7bfb8c932cb4bb97d3e0c085d7d0", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/a79a7e42fc0a7bfb8c932cb4bb97d3e0c085d7d0", "committedDate": "2020-05-15T15:13:30Z", "message": "Fix style check error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23c1a334ecac4f9e1448bceec862085e192d57a0", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/23c1a334ecac4f9e1448bceec862085e192d57a0", "committedDate": "2020-05-15T17:21:24Z", "message": "Merge branch master into topic/GR-23150"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56851772a74bae8e53cb0a6219e5be0c8c9552df", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/56851772a74bae8e53cb0a6219e5be0c8c9552df", "committedDate": "2020-05-19T14:40:04Z", "message": "Fix #2468 Datagram socket in JDK 15 breaks native-image"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12878852bdb4c3c6c58225f0a59bf8f93e53cc94", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/12878852bdb4c3c6c58225f0a59bf8f93e53cc94", "committedDate": "2020-05-19T14:42:02Z", "message": "Merge 'master' of bobvandette/graal into topic/GR-23150"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f469afa0f05f42da15181b902828edc55baa2dd8", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/f469afa0f05f42da15181b902828edc55baa2dd8", "committedDate": "2020-05-19T14:45:08Z", "message": "Merge branch 'master' into topic/GR-23150"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f256dc69254aeb3f8c09c2ab504edaee2f5be24a", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/f256dc69254aeb3f8c09c2ab504edaee2f5be24a", "committedDate": "2020-05-19T17:06:04Z", "message": "Merge branch 'master' oracle/graal"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d245184d672a8fb77c4b6c333b3fa53dd9a89385", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/d245184d672a8fb77c4b6c333b3fa53dd9a89385", "committedDate": "2020-05-19T17:16:28Z", "message": "SubstrateNewInstanceNode has been removed.  NewInstanceNode is now sufficient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39e408e2a608fa6b46b958942bd6e2800be6237c", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/39e408e2a608fa6b46b958942bd6e2800be6237c", "committedDate": "2020-05-19T17:17:35Z", "message": "Merge branch 'master' of bobvandette/graal into topic/GR-23150"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22a2d9ca5bddb029e24a0b9d35cc145be30c1d72", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/22a2d9ca5bddb029e24a0b9d35cc145be30c1d72", "committedDate": "2020-05-19T18:09:57Z", "message": "restore DatagramSocketCheckOldImpl for JDK versions < 15"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0Njc1NTAw", "url": "https://github.com/oracle/graal/pull/2455#pullrequestreview-414675500", "createdAt": "2020-05-19T17:36:43Z", "commit": {"oid": "d245184d672a8fb77c4b6c333b3fa53dd9a89385"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzozNjo0M1rOGXrVRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxOTowNjoxMVrOGXupqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ4MDM4OQ==", "bodyText": "Certainly a high overhead to do the reflective lookup every time. You could store the Method in s static final field.", "url": "https://github.com/oracle/graal/pull/2455#discussion_r427480389", "createdAt": "2020-05-19T17:36:43Z", "author": {"login": "christianwimmer"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/SVMHost.java", "diffHunk": "@@ -296,8 +298,22 @@ private DynamicHub createHub(AnalysisType type) {\n          */\n         String sourceFileName = stringTable.deduplicate(type.getSourceFileName(), true);\n \n+        /*\n+         * JDK 15 added support for Hidden Classes. Record if this javaClass is hidden.\n+         */\n+        boolean isHidden = false;\n+        if (JavaVersionUtil.JAVA_SPEC >= 15) {\n+            try {\n+                Method isHiddenMethod = Class.class.getMethod(\"isHidden\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d245184d672a8fb77c4b6c333b3fa53dd9a89385"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ4MTA2Nw==", "bodyText": "We usually just use throw VMError.shouldNotReachHere(e) to convert impossible checked exceptions into unchecked. No need to build a fancy error message.", "url": "https://github.com/oracle/graal/pull/2455#discussion_r427481067", "createdAt": "2020-05-19T17:37:48Z", "author": {"login": "christianwimmer"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/SVMHost.java", "diffHunk": "@@ -296,8 +298,22 @@ private DynamicHub createHub(AnalysisType type) {\n          */\n         String sourceFileName = stringTable.deduplicate(type.getSourceFileName(), true);\n \n+        /*\n+         * JDK 15 added support for Hidden Classes. Record if this javaClass is hidden.\n+         */\n+        boolean isHidden = false;\n+        if (JavaVersionUtil.JAVA_SPEC >= 15) {\n+            try {\n+                Method isHiddenMethod = Class.class.getMethod(\"isHidden\");\n+                isHidden = (boolean) isHiddenMethod.invoke(javaClass);\n+            } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n+                String message = \"Exception trying to lookup or call isHidden on class: \" + javaClass + \" \" + e;\n+                throw new UnsupportedFeatureException(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d245184d672a8fb77c4b6c333b3fa53dd9a89385"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ4MjQ2Ng==", "bodyText": "Why is it safe to remove this code?", "url": "https://github.com/oracle/graal/pull/2455#discussion_r427482466", "createdAt": "2020-05-19T17:40:04Z", "author": {"login": "christianwimmer"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/jdk/JNIRegistrationJavaNet.java", "diffHunk": "@@ -115,14 +114,6 @@ public void beforeAnalysis(BeforeAnalysisAccess a) {\n         a.registerReachabilityHandler(JNIRegistrationJavaNet::registerDatagramPacketInit,\n                         method(a, \"java.net.DatagramPacket\", \"init\"));\n \n-        if (JavaVersionUtil.JAVA_SPEC >= 15) {\n-            a.registerReachabilityHandler(JNIRegistrationJavaNet::registerDatagramSocketCheckOldImpl,\n-                            method(a, \"java.net.DatagramSocket\", \"checkOldImpl\", java.net.DatagramSocketImpl.class));\n-        } else {\n-            a.registerReachabilityHandler(JNIRegistrationJavaNet::registerDatagramSocketCheckOldImpl,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d245184d672a8fb77c4b6c333b3fa53dd9a89385"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ4Mzc0Mw==", "bodyText": "That cannot be a VMError but needs to be properly reported like any other unsupported condition, via reportUnsupportedFeature.\nBut why actually introduce this restriction? You can easily refactor your code below to transplant the singleNewInstance independently from the invoke.", "url": "https://github.com/oracle/graal/pull/2455#discussion_r427483743", "createdAt": "2020-05-19T17:42:05Z", "author": {"login": "christianwimmer"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/phases/IntrinsifyMethodHandlesInvocationPlugin.java", "diffHunk": "@@ -502,6 +510,10 @@ private void processInvokeWithMethodHandle(GraphBuilderContext b, Replacements r\n                 }\n             }\n \n+            if (singleNewInstance != null && !(singleFunctionality instanceof Invoke)) {\n+                throw VMError.shouldNotReachHere(\"singleFunctionality != Invoke with non null singleNewInstance\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d245184d672a8fb77c4b6c333b3fa53dd9a89385"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUzMzk5Mw==", "bodyText": "You also need a maybeEmitClassInitialization before the NewInstanceNode, otherwise you might allocate a non-initialized class.", "url": "https://github.com/oracle/graal/pull/2455#discussion_r427533993", "createdAt": "2020-05-19T19:04:54Z", "author": {"login": "christianwimmer"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/phases/IntrinsifyMethodHandlesInvocationPlugin.java", "diffHunk": "@@ -516,13 +528,26 @@ private void processInvokeWithMethodHandle(GraphBuilderContext b, Replacements r\n \n             JavaKind returnResultKind = b.getInvokeReturnType().getJavaKind().getStackKind();\n             ValueNode transplantedSingleFunctionality = null;\n+            ValueNode transplantedNewInstance = null;\n             if (singleFunctionality instanceof Invoke) {\n+\n                 Invoke singleInvoke = (Invoke) singleFunctionality;\n                 MethodCallTargetNode singleCallTarget = (MethodCallTargetNode) singleInvoke.callTarget();\n                 ResolvedJavaMethod resolvedTarget = lookup(singleCallTarget.targetMethod());\n \n-                maybeEmitClassInitialization(b, singleCallTarget.invokeKind() == InvokeKind.Static, resolvedTarget.getDeclaringClass());\n+                if (singleNewInstance != null) {\n+                    ResolvedJavaType type = null;\n+                    if (singleNewInstance instanceof DynamicNewInstanceNode) {\n+                        type = lookup(originalProviders.getConstantReflection().asJavaType(((DynamicNewInstanceNode) singleNewInstance).getInstanceType().asConstant()));\n+                    }\n+                    if (singleNewInstance instanceof NewInstanceNode) {\n+                        type = lookup(((NewInstanceNode) singleNewInstance).instanceClass());\n+                    }\n+                    ValueNode newInstance = b.add(new NewInstanceNode(type, true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22a2d9ca5bddb029e24a0b9d35cc145be30c1d72"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzUzNDc2MA==", "bodyText": "How do you know the classCastStamp applies to the newinstance node?", "url": "https://github.com/oracle/graal/pull/2455#discussion_r427534760", "createdAt": "2020-05-19T19:06:11Z", "author": {"login": "christianwimmer"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/phases/IntrinsifyMethodHandlesInvocationPlugin.java", "diffHunk": "@@ -516,13 +528,26 @@ private void processInvokeWithMethodHandle(GraphBuilderContext b, Replacements r\n \n             JavaKind returnResultKind = b.getInvokeReturnType().getJavaKind().getStackKind();\n             ValueNode transplantedSingleFunctionality = null;\n+            ValueNode transplantedNewInstance = null;\n             if (singleFunctionality instanceof Invoke) {\n+\n                 Invoke singleInvoke = (Invoke) singleFunctionality;\n                 MethodCallTargetNode singleCallTarget = (MethodCallTargetNode) singleInvoke.callTarget();\n                 ResolvedJavaMethod resolvedTarget = lookup(singleCallTarget.targetMethod());\n \n-                maybeEmitClassInitialization(b, singleCallTarget.invokeKind() == InvokeKind.Static, resolvedTarget.getDeclaringClass());\n+                if (singleNewInstance != null) {\n+                    ResolvedJavaType type = null;\n+                    if (singleNewInstance instanceof DynamicNewInstanceNode) {\n+                        type = lookup(originalProviders.getConstantReflection().asJavaType(((DynamicNewInstanceNode) singleNewInstance).getInstanceType().asConstant()));\n+                    }\n+                    if (singleNewInstance instanceof NewInstanceNode) {\n+                        type = lookup(((NewInstanceNode) singleNewInstance).instanceClass());\n+                    }\n+                    ValueNode newInstance = b.add(new NewInstanceNode(type, true));\n+                    transplantedNewInstance = maybeEmitClassCast(b, classCastStamp, newInstance);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22a2d9ca5bddb029e24a0b9d35cc145be30c1d72"}, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "22a2d9ca5bddb029e24a0b9d35cc145be30c1d72", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/22a2d9ca5bddb029e24a0b9d35cc145be30c1d72", "committedDate": "2020-05-19T18:09:57Z", "message": "restore DatagramSocketCheckOldImpl for JDK versions < 15"}, "afterCommit": {"oid": "c158c4e4f33f9527a32d89533fdd6fb0ba6c3106", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/c158c4e4f33f9527a32d89533fdd6fb0ba6c3106", "committedDate": "2020-05-19T21:13:01Z", "message": "restore DatagramSocketCheckOldImpl for JDK versions < 15"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NDkwNzUy", "url": "https://github.com/oracle/graal/pull/2455#pullrequestreview-418490752", "createdAt": "2020-05-26T16:49:10Z", "commit": {"oid": "1d5541bc66713e12b1d2600b1f9c9913a7d527b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjo0OToxMVrOGanXkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNjo0OToxMVrOGanXkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDU2MTE3MQ==", "bodyText": "I just merged 18bdfdd which ensures that DynamicNewInstanceNode with a constant class is always constant folded to a NewInstanceNode. Please remove this check now (and everything else related to DynamicNewInstanceNode in this PR), it should no longer be necessary.", "url": "https://github.com/oracle/graal/pull/2455#discussion_r430561171", "createdAt": "2020-05-26T16:49:11Z", "author": {"login": "christianwimmer"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/phases/IntrinsifyMethodHandlesInvocationPlugin.java", "diffHunk": "@@ -487,9 +492,14 @@ private void processInvokeWithMethodHandle(GraphBuilderContext b, Replacements r\n              */\n             Node singleFunctionality = null;\n             ReturnNode singleReturn = null;\n+            ValueNode singleNewInstance = null;\n             for (Node node : graph.getNodes()) {\n                 if (node == graph.start() || node instanceof ParameterNode || node instanceof ConstantNode || node instanceof FrameState) {\n                     /* Ignore the allowed framework around the nodes we care about. */\n+                } else if (node instanceof DynamicNewInstanceNode && singleNewInstance == null && ((DynamicNewInstanceNode) node).getInstanceType().isConstant()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d5541bc66713e12b1d2600b1f9c9913a7d527b6"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d40e0186be8f9f8ed81966006e1be30a045c7cb8", "author": {"user": {"login": "jerboaa", "name": "Severin Gehwolf"}}, "url": "https://github.com/oracle/graal/commit/d40e0186be8f9f8ed81966006e1be30a045c7cb8", "committedDate": "2020-05-26T18:22:51Z", "message": "Only add nashorn check on JDK 14 or earlier\n\nJDK 15 removed nashorn with:\nhttps://bugs.openjdk.java.net/browse/JDK-8241749\n\nCloses #2365"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "282d35a0872f29dc7f29fded19a485fb8378f070", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/282d35a0872f29dc7f29fded19a485fb8378f070", "committedDate": "2020-05-26T18:22:51Z", "message": "Add loadLibrary substitution to jdk.internal.loader.BootLoader"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dedf9d3cee01c25ff983c235555a5015bed97f33", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/dedf9d3cee01c25ff983c235555a5015bed97f33", "committedDate": "2020-05-26T18:22:51Z", "message": "Add isHidden substitution for java.lang.Class in JDK 15"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad1123cd1a7600c1643f52d06dcf2d1a1e806b50", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/ad1123cd1a7600c1643f52d06dcf2d1a1e806b50", "committedDate": "2020-05-26T18:22:51Z", "message": "Fix #2383 Addition of Hidden Classes in JDK15 breaks native-image"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c96a3add46133b9f471b2335905ed5ab4d1b0c3", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/7c96a3add46133b9f471b2335905ed5ab4d1b0c3", "committedDate": "2020-05-26T18:22:51Z", "message": "Add ClassCast Check and fix style error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fbfaed56db560cc4607f6571abd899c5681f548", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/6fbfaed56db560cc4607f6571abd899c5681f548", "committedDate": "2020-05-26T18:22:52Z", "message": "add JDK15 isHidden attribute to DynamicHub"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea74ed4ddd2b840038ca8032e287f31b8bbd2922", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/ea74ed4ddd2b840038ca8032e287f31b8bbd2922", "committedDate": "2020-05-26T18:22:52Z", "message": "Fix style check error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02d0a13ae9cbdc00d880410e9117c8d69d95dd00", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/02d0a13ae9cbdc00d880410e9117c8d69d95dd00", "committedDate": "2020-05-26T18:22:52Z", "message": "Fix #2468 Datagram socket in JDK 15 breaks native-image"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bdb9319fc47104bb325351e94b33c76394e2379b", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/bdb9319fc47104bb325351e94b33c76394e2379b", "committedDate": "2020-05-26T18:22:52Z", "message": "SubstrateNewInstanceNode has been removed.  NewInstanceNode is now sufficient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3b489898baf0a10215a84d7fdf78e96027afdd6", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/a3b489898baf0a10215a84d7fdf78e96027afdd6", "committedDate": "2020-05-26T18:22:52Z", "message": "restore DatagramSocketCheckOldImpl for JDK versions < 15"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96eed5fe44215f62a6dc1f508787059782dc1d74", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/96eed5fe44215f62a6dc1f508787059782dc1d74", "committedDate": "2020-05-26T18:22:52Z", "message": "Fixes based on review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36cee2ac7c485643d3c3a6b0dcb658b2302055ce", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/36cee2ac7c485643d3c3a6b0dcb658b2302055ce", "committedDate": "2020-05-26T20:03:37Z", "message": "remove DynamicNewInstance from MethodHandle Intrinsification"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1d5541bc66713e12b1d2600b1f9c9913a7d527b6", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/1d5541bc66713e12b1d2600b1f9c9913a7d527b6", "committedDate": "2020-05-20T17:53:19Z", "message": "Fixes based on review comments"}, "afterCommit": {"oid": "36cee2ac7c485643d3c3a6b0dcb658b2302055ce", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/36cee2ac7c485643d3c3a6b0dcb658b2302055ce", "committedDate": "2020-05-26T20:03:37Z", "message": "remove DynamicNewInstance from MethodHandle Intrinsification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6037cd1ae5366bd7ea09a4a48e3c830529a31595", "author": {"user": {"login": "bobvandette", "name": "Bob Vandette"}}, "url": "https://github.com/oracle/graal/commit/6037cd1ae5366bd7ea09a4a48e3c830529a31595", "committedDate": "2020-05-26T20:12:06Z", "message": "merge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e25af3146c53b736fb429fc2b938d33968f24d8", "author": {"user": {"login": "christianwimmer", "name": "Christian Wimmer"}}, "url": "https://github.com/oracle/graal/commit/3e25af3146c53b736fb429fc2b938d33968f24d8", "committedDate": "2020-05-27T17:19:54Z", "message": "Be more defensive when bcis are not unique"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09e46f164a878c4e96d1da3e1cd89ca47775ad9a", "author": {"user": {"login": "christianwimmer", "name": "Christian Wimmer"}}, "url": "https://github.com/oracle/graal/commit/09e46f164a878c4e96d1da3e1cd89ca47775ad9a", "committedDate": "2020-05-27T17:20:26Z", "message": "Do not use class literals for classes no longer existing in JDK 15"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ede8f4dcfc61f36afb2343793aaf145d5f7e0e1", "author": {"user": {"login": "christianwimmer", "name": "Christian Wimmer"}}, "url": "https://github.com/oracle/graal/commit/1ede8f4dcfc61f36afb2343793aaf145d5f7e0e1", "committedDate": "2020-05-27T17:21:07Z", "message": "Adapt to JDK 15 class loader changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc231993d70ee29cec3d7b83fd4e63d2fe02d925", "author": {"user": {"login": "christianwimmer", "name": "Christian Wimmer"}}, "url": "https://github.com/oracle/graal/commit/fc231993d70ee29cec3d7b83fd4e63d2fe02d925", "committedDate": "2020-05-27T17:22:40Z", "message": "Allow constant folding of DynamicNewInstanceNode when intrinsifying method handles"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1002, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}