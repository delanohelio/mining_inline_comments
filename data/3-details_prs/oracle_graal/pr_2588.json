{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MDk2MDM2", "number": 2588, "title": "Add intrinsics for floating point Math.min/Math.max on AArch64", "bodyText": "Emit fmin/fmax instructions when Math.min()/Math.max() function is called with single or double precision floating point values on AArch64. The existing mechanism emits cmp+csel combination for the integer variants of Math.min()/Math.max().\nRelevant snippet of the microbenchmark is shown below (only the double variant for Math.max() is shown for brevity).\n@Benchmark\npublic void jmhTimeMaxDouble() {\n    double res = 0.0d;\n    for (int i = 0; i < NUM_INVOKES; ++i) {\n        double a = rand_double[i % NUM_RANDS];\n        double b = rand_double[(i + 1) % NUM_RANDS];\n        res += Math.max(a, b);\n    }\n    res_double = res;\n}\n\nPerformance results on an A72 AArch64 machine\nBefore:\nBenchmark         Mode  Cnt    Score   Error  Units\njmhTimeMaxDouble  avgt   15  288.019 \u00b1 5.645  ns/op\njmhTimeMaxFloat   avgt   15  283.060 \u00b1 4.367  ns/op\njmhTimeMinDouble  avgt   15  282.940 \u00b1 3.823  ns/op\njmhTimeMinFloat   avgt   15  279.740 \u00b1 2.278  ns/op\n\nAfter:\nBenchmark         Mode  Cnt   Score   Error  Units\njmhTimeMaxDouble  avgt   15  98.860 \u00b1 0.010  ns/op\njmhTimeMaxFloat   avgt   15  98.847 \u00b1 0.008  ns/op\njmhTimeMinDouble  avgt   15  98.867 \u00b1 0.024  ns/op\njmhTimeMinFloat   avgt   15  98.855 \u00b1 0.016  ns/op\n\nChange-Id: Ic3b9de4aa096a8af699cfe5d0f0b8c83ca86b208", "createdAt": "2020-06-19T13:16:03Z", "url": "https://github.com/oracle/graal/pull/2588", "merged": true, "mergeCommit": {"oid": "953e1c8cd75ae7166ec67288cf3863bd19d0b9fe"}, "closed": true, "closedAt": "2020-10-09T01:43:45Z", "author": {"login": "SwapnilGaikwad"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcxSvSngBqjM1MTA5MDUwODY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdN8p6WABqjM4MjQ0NTk1MTE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6124d83cea53849bfa95c558d86248a6e8fd2da5", "author": {"user": {"login": "SwapnilGaikwad", "name": null}}, "url": "https://github.com/oracle/graal/commit/6124d83cea53849bfa95c558d86248a6e8fd2da5", "committedDate": "2020-06-19T13:12:40Z", "message": "Add intrinsics for floating point Math.min/Math.max on AArch64\n\nEmit \"fmin/fmax\" instructions when Math.min()/Math.max() function is\ncalled with single or double precision floating point values on AArch64.\nThe existing mechanism emits cmp+csel combination for the integer\nvariants of Math.min()/Math.max().\n\nRelevant snippet of the microbenchmark is shown below (only the double\nvariant for Math.max() is shown for brevity).\n\n@Benchmark\npublic void jmhTimeMaxDouble() {\n    double res = 0.0d;\n    for (int i = 0; i < NUM_INVOKES; ++i) {\n        double a = rand_double[i % NUM_RANDS];\n        double b = rand_double[(i + 1) % NUM_RANDS];\n        res += Math.max(a, b);\n    }\n    res_double = res;\n}\n\nPerformance results on an A72 AArch64 machine\n\nBefore:\nBenchmark         Mode  Cnt    Score   Error  Units\njmhTimeMaxDouble  avgt   15  288.019 \u00b1 5.645  ns/op\njmhTimeMaxFloat   avgt   15  283.060 \u00b1 4.367  ns/op\njmhTimeMinDouble  avgt   15  282.940 \u00b1 3.823  ns/op\njmhTimeMinFloat   avgt   15  279.740 \u00b1 2.278  ns/op\n\nAfter:\nBenchmark         Mode  Cnt   Score   Error  Units\njmhTimeMaxDouble  avgt   15  98.860 \u00b1 0.010  ns/op\njmhTimeMaxFloat   avgt   15  98.847 \u00b1 0.008  ns/op\njmhTimeMinDouble  avgt   15  98.867 \u00b1 0.024  ns/op\njmhTimeMinFloat   avgt   15  98.855 \u00b1 0.016  ns/op\n\nChange-Id: Ic3b9de4aa096a8af699cfe5d0f0b8c83ca86b208"}, "afterCommit": {"oid": "d1267fbd41fcbee180c66cd5b2760659764046f3", "author": {"user": {"login": "SwapnilGaikwad", "name": null}}, "url": "https://github.com/oracle/graal/commit/d1267fbd41fcbee180c66cd5b2760659764046f3", "committedDate": "2020-07-03T12:37:26Z", "message": "Add intrinsics for floating point Math.min/Math.max on AArch64\n\nEmit \"fmin/fmax\" instructions when Math.min()/Math.max() function is\ncalled with single or double precision floating point values on AArch64.\nThe existing mechanism emits cmp+csel combination for the integer\nvariants of Math.min()/Math.max().\n\nChange-Id: Ic3b9de4aa096a8af699cfe5d0f0b8c83ca86b208"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDU1NTIy", "url": "https://github.com/oracle/graal/pull/2588#pullrequestreview-463455522", "createdAt": "2020-08-07T16:44:17Z", "commit": {"oid": "d1267fbd41fcbee180c66cd5b2760659764046f3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjo0NDoxOFrOG9gtTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNjo0NDoxOFrOG9gtTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzE1MjIwNA==", "bodyText": "Since Max/Min are associative, I believe also hooks for them must be added into BinaryArithmeticNode.reassociate", "url": "https://github.com/oracle/graal/pull/2588#discussion_r467152204", "createdAt": "2020-08-07T16:44:18Z", "author": {"login": "teshull"}, "path": "compiler/src/org.graalvm.compiler.core.common/src/org/graalvm/compiler/core/common/type/FloatStamp.java", "diffHunk": "@@ -910,6 +910,76 @@ public Stamp foldStamp(Stamp s) {\n \n                     null, null, null,\n \n+                    new BinaryOp.Max(true, true) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1267fbd41fcbee180c66cd5b2760659764046f3"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d1267fbd41fcbee180c66cd5b2760659764046f3", "author": {"user": {"login": "SwapnilGaikwad", "name": null}}, "url": "https://github.com/oracle/graal/commit/d1267fbd41fcbee180c66cd5b2760659764046f3", "committedDate": "2020-07-03T12:37:26Z", "message": "Add intrinsics for floating point Math.min/Math.max on AArch64\n\nEmit \"fmin/fmax\" instructions when Math.min()/Math.max() function is\ncalled with single or double precision floating point values on AArch64.\nThe existing mechanism emits cmp+csel combination for the integer\nvariants of Math.min()/Math.max().\n\nChange-Id: Ic3b9de4aa096a8af699cfe5d0f0b8c83ca86b208"}, "afterCommit": {"oid": "73342c8c948fde7d48fc4b77af4923d06bd055de", "author": {"user": {"login": "SwapnilGaikwad", "name": null}}, "url": "https://github.com/oracle/graal/commit/73342c8c948fde7d48fc4b77af4923d06bd055de", "committedDate": "2020-08-26T10:57:12Z", "message": "Add intrinsics for floating point Math.min/Math.max on AArch64\n\nEmit \"fmin/fmax\" instructions when Math.min()/Math.max() function is\ncalled with single or double precision floating point values on AArch64.\nThe existing mechanism emits cmp+csel combination for the integer\nvariants of Math.min()/Math.max().\n\nChange-Id: Ic3b9de4aa096a8af699cfe5d0f0b8c83ca86b208"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73342c8c948fde7d48fc4b77af4923d06bd055de", "author": {"user": {"login": "SwapnilGaikwad", "name": null}}, "url": "https://github.com/oracle/graal/commit/73342c8c948fde7d48fc4b77af4923d06bd055de", "committedDate": "2020-08-26T10:57:12Z", "message": "Add intrinsics for floating point Math.min/Math.max on AArch64\n\nEmit \"fmin/fmax\" instructions when Math.min()/Math.max() function is\ncalled with single or double precision floating point values on AArch64.\nThe existing mechanism emits cmp+csel combination for the integer\nvariants of Math.min()/Math.max().\n\nChange-Id: Ic3b9de4aa096a8af699cfe5d0f0b8c83ca86b208"}, "afterCommit": {"oid": "0112744b46bad63e756876dfc1c469e72ee81bfe", "author": {"user": {"login": "SwapnilGaikwad", "name": null}}, "url": "https://github.com/oracle/graal/commit/0112744b46bad63e756876dfc1c469e72ee81bfe", "committedDate": "2020-08-27T15:55:15Z", "message": "Add intrinsics for floating point Math.min/Math.max on AArch64\n\nEmit \"fmin/fmax\" instructions when Math.min()/Math.max() function is\ncalled with single or double precision floating point values on AArch64.\nThe existing mechanism emits cmp+csel combination for the integer\nvariants of Math.min()/Math.max().\n\nChange-Id: Ic3b9de4aa096a8af699cfe5d0f0b8c83ca86b208"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNzk1OTYz", "url": "https://github.com/oracle/graal/pull/2588#pullrequestreview-490795963", "createdAt": "2020-09-17T16:44:50Z", "commit": {"oid": "0112744b46bad63e756876dfc1c469e72ee81bfe"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNzk5NTU1", "url": "https://github.com/oracle/graal/pull/2588#pullrequestreview-490799555", "createdAt": "2020-09-17T16:49:07Z", "commit": {"oid": "0112744b46bad63e756876dfc1c469e72ee81bfe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo0OTowN1rOHTsU9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo1MjozMlrOHTsdIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxMTI1NA==", "bodyText": "Can you tighten the bounds of the returned stamp? Since this is a max operation, we know the lower bound will be max(stamp1.lowerBound(), stamp2.lowerBound()) and the upper bound likewise will be the max of the two stamps' upper bounds.", "url": "https://github.com/oracle/graal/pull/2588#discussion_r490411254", "createdAt": "2020-09-17T16:49:07Z", "author": {"login": "teshull"}, "path": "compiler/src/org.graalvm.compiler.core.common/src/org/graalvm/compiler/core/common/type/FloatStamp.java", "diffHunk": "@@ -910,6 +910,76 @@ public Stamp foldStamp(Stamp s) {\n \n                     null, null, null,\n \n+                    new BinaryOp.Max(true, true) {\n+\n+                        @Override\n+                        public Constant foldConstant(Constant const1, Constant const2) {\n+                            PrimitiveConstant a = (PrimitiveConstant) const1;\n+                            PrimitiveConstant b = (PrimitiveConstant) const2;\n+                            assert a.getJavaKind() == b.getJavaKind();\n+                            switch (a.getJavaKind()) {\n+                                case Float:\n+                                    return JavaConstant.forFloat(Math.max(a.asFloat(), b.asFloat()));\n+                                case Double:\n+                                    return JavaConstant.forDouble(Math.max(a.asDouble(), b.asDouble()));\n+                                default:\n+                                    throw GraalError.shouldNotReachHere();\n+                            }\n+                        }\n+\n+                        @Override\n+                        public Stamp foldStamp(Stamp s1, Stamp s2) {\n+                            if (s1.isEmpty()) {\n+                                return s1;\n+                            }\n+                            if (s2.isEmpty()) {\n+                                return s2;\n+                            }\n+                            FloatStamp stamp1 = (FloatStamp) s1;\n+                            FloatStamp stamp2 = (FloatStamp) s2;\n+                            Stamp folded = maybeFoldConstant(this, stamp1, stamp2);\n+                            if (folded != null) {\n+                                return folded;\n+                            }\n+                            return stamp1.unrestricted();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0112744b46bad63e756876dfc1c469e72ee81bfe"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxMTc2OQ==", "bodyText": "Same thing as the comment above, except this time the upper/lower bounds would be the min of the two stamps' respective values", "url": "https://github.com/oracle/graal/pull/2588#discussion_r490411769", "createdAt": "2020-09-17T16:49:56Z", "author": {"login": "teshull"}, "path": "compiler/src/org.graalvm.compiler.core.common/src/org/graalvm/compiler/core/common/type/FloatStamp.java", "diffHunk": "@@ -910,6 +910,76 @@ public Stamp foldStamp(Stamp s) {\n \n                     null, null, null,\n \n+                    new BinaryOp.Max(true, true) {\n+\n+                        @Override\n+                        public Constant foldConstant(Constant const1, Constant const2) {\n+                            PrimitiveConstant a = (PrimitiveConstant) const1;\n+                            PrimitiveConstant b = (PrimitiveConstant) const2;\n+                            assert a.getJavaKind() == b.getJavaKind();\n+                            switch (a.getJavaKind()) {\n+                                case Float:\n+                                    return JavaConstant.forFloat(Math.max(a.asFloat(), b.asFloat()));\n+                                case Double:\n+                                    return JavaConstant.forDouble(Math.max(a.asDouble(), b.asDouble()));\n+                                default:\n+                                    throw GraalError.shouldNotReachHere();\n+                            }\n+                        }\n+\n+                        @Override\n+                        public Stamp foldStamp(Stamp s1, Stamp s2) {\n+                            if (s1.isEmpty()) {\n+                                return s1;\n+                            }\n+                            if (s2.isEmpty()) {\n+                                return s2;\n+                            }\n+                            FloatStamp stamp1 = (FloatStamp) s1;\n+                            FloatStamp stamp2 = (FloatStamp) s2;\n+                            Stamp folded = maybeFoldConstant(this, stamp1, stamp2);\n+                            if (folded != null) {\n+                                return folded;\n+                            }\n+                            return stamp1.unrestricted();\n+                        }\n+                    },\n+\n+                    new BinaryOp.Min(true, true) {\n+\n+                        @Override\n+                        public Constant foldConstant(Constant const1, Constant const2) {\n+                            PrimitiveConstant a = (PrimitiveConstant) const1;\n+                            PrimitiveConstant b = (PrimitiveConstant) const2;\n+                            assert a.getJavaKind() == b.getJavaKind();\n+                            switch (a.getJavaKind()) {\n+                                case Float:\n+                                    return JavaConstant.forFloat(Math.min(a.asFloat(), b.asFloat()));\n+                                case Double:\n+                                    return JavaConstant.forDouble(Math.min(a.asDouble(), b.asDouble()));\n+                                default:\n+                                    throw GraalError.shouldNotReachHere();\n+                            }\n+                        }\n+\n+                        @Override\n+                        public Stamp foldStamp(Stamp s1, Stamp s2) {\n+                            if (s1.isEmpty()) {\n+                                return s1;\n+                            }\n+                            if (s2.isEmpty()) {\n+                                return s2;\n+                            }\n+                            FloatStamp stamp1 = (FloatStamp) s1;\n+                            FloatStamp stamp2 = (FloatStamp) s2;\n+                            Stamp folded = maybeFoldConstant(this, stamp1, stamp2);\n+                            if (folded != null) {\n+                                return folded;\n+                            }\n+                            return stamp1.unrestricted();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0112744b46bad63e756876dfc1c469e72ee81bfe"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxMjQ5MQ==", "bodyText": "Can you create a shared abstract superclass for the Max and Min nodes, called MinMaxNode, and lift the common logic into this class?", "url": "https://github.com/oracle/graal/pull/2588#discussion_r490412491", "createdAt": "2020-09-17T16:51:09Z", "author": {"login": "teshull"}, "path": "compiler/src/org.graalvm.compiler.nodes/src/org/graalvm/compiler/nodes/calc/MaxNode.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+package org.graalvm.compiler.nodes.calc;\n+\n+import org.graalvm.compiler.core.common.type.ArithmeticOpTable;\n+import org.graalvm.compiler.core.common.type.ArithmeticOpTable.BinaryOp;\n+import org.graalvm.compiler.core.common.type.ArithmeticOpTable.BinaryOp.Max;\n+import org.graalvm.compiler.core.common.type.Stamp;\n+import org.graalvm.compiler.graph.NodeClass;\n+import org.graalvm.compiler.graph.spi.Canonicalizable.BinaryCommutative;\n+import org.graalvm.compiler.graph.spi.CanonicalizerTool;\n+import org.graalvm.compiler.lir.gen.ArithmeticLIRGeneratorTool;\n+import org.graalvm.compiler.nodeinfo.NodeInfo;\n+import org.graalvm.compiler.nodes.ConstantNode;\n+import org.graalvm.compiler.nodes.NodeView;\n+import org.graalvm.compiler.nodes.ValueNode;\n+import org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool;\n+\n+import jdk.vm.ci.meta.Value;\n+\n+@NodeInfo(shortName = \"MAX\")\n+public class MaxNode extends BinaryArithmeticNode<Max> implements NarrowableArithmeticNode, BinaryCommutative<ValueNode> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0112744b46bad63e756876dfc1c469e72ee81bfe"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxMzM0NA==", "bodyText": "Can you add the assert assert stamp instanceof FloatStamp?", "url": "https://github.com/oracle/graal/pull/2588#discussion_r490413344", "createdAt": "2020-09-17T16:52:32Z", "author": {"login": "teshull"}, "path": "compiler/src/org.graalvm.compiler.nodes/src/org/graalvm/compiler/nodes/calc/MaxNode.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+package org.graalvm.compiler.nodes.calc;\n+\n+import org.graalvm.compiler.core.common.type.ArithmeticOpTable;\n+import org.graalvm.compiler.core.common.type.ArithmeticOpTable.BinaryOp;\n+import org.graalvm.compiler.core.common.type.ArithmeticOpTable.BinaryOp.Max;\n+import org.graalvm.compiler.core.common.type.Stamp;\n+import org.graalvm.compiler.graph.NodeClass;\n+import org.graalvm.compiler.graph.spi.Canonicalizable.BinaryCommutative;\n+import org.graalvm.compiler.graph.spi.CanonicalizerTool;\n+import org.graalvm.compiler.lir.gen.ArithmeticLIRGeneratorTool;\n+import org.graalvm.compiler.nodeinfo.NodeInfo;\n+import org.graalvm.compiler.nodes.ConstantNode;\n+import org.graalvm.compiler.nodes.NodeView;\n+import org.graalvm.compiler.nodes.ValueNode;\n+import org.graalvm.compiler.nodes.spi.NodeLIRBuilderTool;\n+\n+import jdk.vm.ci.meta.Value;\n+\n+@NodeInfo(shortName = \"MAX\")\n+public class MaxNode extends BinaryArithmeticNode<Max> implements NarrowableArithmeticNode, BinaryCommutative<ValueNode> {\n+\n+    public static final NodeClass<MaxNode> TYPE = NodeClass.create(MaxNode.class);\n+\n+    public MaxNode(ValueNode x, ValueNode y) {\n+        super(TYPE, getArithmeticOpTable(x).getMax(), x, y);\n+    }\n+\n+    @Override\n+    protected BinaryOp<Max> getOp(ArithmeticOpTable table) {\n+        return table.getMax();\n+    }\n+\n+    public static ValueNode create(ValueNode x, ValueNode y, NodeView view) {\n+        BinaryOp<Max> op = ArithmeticOpTable.forStamp(x.stamp(view)).getMax();\n+        Stamp stamp = op.foldStamp(x.stamp(view), y.stamp(view));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0112744b46bad63e756876dfc1c469e72ee81bfe"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0112744b46bad63e756876dfc1c469e72ee81bfe", "author": {"user": {"login": "SwapnilGaikwad", "name": null}}, "url": "https://github.com/oracle/graal/commit/0112744b46bad63e756876dfc1c469e72ee81bfe", "committedDate": "2020-08-27T15:55:15Z", "message": "Add intrinsics for floating point Math.min/Math.max on AArch64\n\nEmit \"fmin/fmax\" instructions when Math.min()/Math.max() function is\ncalled with single or double precision floating point values on AArch64.\nThe existing mechanism emits cmp+csel combination for the integer\nvariants of Math.min()/Math.max().\n\nChange-Id: Ic3b9de4aa096a8af699cfe5d0f0b8c83ca86b208"}, "afterCommit": {"oid": "32f8ee8c7d3840861e269a278037c3a0849a5f7b", "author": {"user": {"login": "SwapnilGaikwad", "name": null}}, "url": "https://github.com/oracle/graal/commit/32f8ee8c7d3840861e269a278037c3a0849a5f7b", "committedDate": "2020-09-30T08:37:27Z", "message": "Add intrinsics for floating point Math.min/Math.max on AArch64\n\nEmit \"fmin/fmax\" instructions when Math.min()/Math.max() function is\ncalled with single or double precision floating point values on AArch64.\nThe existing mechanism emits cmp+csel combination for the integer\nvariants of Math.min()/Math.max().\n\nChange-Id: Ic3b9de4aa096a8af699cfe5d0f0b8c83ca86b208"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec3fb4041b4e2304b94b7bdfb7ab1eb0132777e5", "author": {"user": {"login": "SwapnilGaikwad", "name": null}}, "url": "https://github.com/oracle/graal/commit/ec3fb4041b4e2304b94b7bdfb7ab1eb0132777e5", "committedDate": "2020-09-30T13:17:37Z", "message": "Add intrinsics for floating point Math.min/Math.max on AArch64\n\nEmit \"fmin/fmax\" instructions when Math.min()/Math.max() function is\ncalled with single or double precision floating point values on AArch64.\nThe existing mechanism emits cmp+csel combination for the integer\nvariants of Math.min()/Math.max().\n\nChange-Id: Ic3b9de4aa096a8af699cfe5d0f0b8c83ca86b208"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32f8ee8c7d3840861e269a278037c3a0849a5f7b", "author": {"user": {"login": "SwapnilGaikwad", "name": null}}, "url": "https://github.com/oracle/graal/commit/32f8ee8c7d3840861e269a278037c3a0849a5f7b", "committedDate": "2020-09-30T08:37:27Z", "message": "Add intrinsics for floating point Math.min/Math.max on AArch64\n\nEmit \"fmin/fmax\" instructions when Math.min()/Math.max() function is\ncalled with single or double precision floating point values on AArch64.\nThe existing mechanism emits cmp+csel combination for the integer\nvariants of Math.min()/Math.max().\n\nChange-Id: Ic3b9de4aa096a8af699cfe5d0f0b8c83ca86b208"}, "afterCommit": {"oid": "ec3fb4041b4e2304b94b7bdfb7ab1eb0132777e5", "author": {"user": {"login": "SwapnilGaikwad", "name": null}}, "url": "https://github.com/oracle/graal/commit/ec3fb4041b4e2304b94b7bdfb7ab1eb0132777e5", "committedDate": "2020-09-30T13:17:37Z", "message": "Add intrinsics for floating point Math.min/Math.max on AArch64\n\nEmit \"fmin/fmax\" instructions when Math.min()/Math.max() function is\ncalled with single or double precision floating point values on AArch64.\nThe existing mechanism emits cmp+csel combination for the integer\nvariants of Math.min()/Math.max().\n\nChange-Id: Ic3b9de4aa096a8af699cfe5d0f0b8c83ca86b208"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1030, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}