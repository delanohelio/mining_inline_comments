{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzODA2NTQ5", "number": 2695, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMToxMzo0OFrOESw7FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMToxMzo0OFrOESw7FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTExMzgxOnYy", "diffSide": "RIGHT", "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/image/NativeImageDebugInfoProvider.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMToxMzo0OFrOG4H4gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxNjo1Nzo0MlrOG4V4xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMjU5Mg==", "bodyText": "Shouldn't this be:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            declaringClass = ((HostedType) declaringClass).getWrapped();\n          \n          \n            \n                            declaringClass = ((HostedType) declaringClass).getWrapped().getWrapped();\n          \n      \n    \n    \n  \n\n?", "url": "https://github.com/oracle/graal/pull/2695#discussion_r461502592", "createdAt": "2020-07-28T11:13:48Z", "author": {"login": "zakkak"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/image/NativeImageDebugInfoProvider.java", "diffHunk": "@@ -309,8 +314,9 @@ private void computeFullFilePathAndCachePath() {\n                 clazz = ((OriginalClassProvider) declaringClass).getJavaClass();\n             }\n             /*\n-             * HostedType and AnalysisType punt calls to getSourceFilename to the wrapped class so\n-             * for consistency we need to do the path lookup relative to the wrapped class.\n+             * HostedType wraps an AnalysisType and both HostedType and AnalysisType punt calls to\n+             * getSourceFilename to the wrapped class so for consistency we need to do the path\n+             * lookup relative to the doubly unwrapped HostedType.\n              */\n             if (declaringClass instanceof HostedType) {\n                 declaringClass = ((HostedType) declaringClass).getWrapped();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "275d58e1815ab9550d1af274ad1e40e2ebbd6f94"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYxNjA5NQ==", "bodyText": "No, I don't think so. The result of that single getWrapped() call is an AnalysisType. The next if detects that and unwraps a second time. That second if also deals with the case where an AnalysisType comes in direct.", "url": "https://github.com/oracle/graal/pull/2695#discussion_r461616095", "createdAt": "2020-07-28T14:16:18Z", "author": {"login": "adinn"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/image/NativeImageDebugInfoProvider.java", "diffHunk": "@@ -309,8 +314,9 @@ private void computeFullFilePathAndCachePath() {\n                 clazz = ((OriginalClassProvider) declaringClass).getJavaClass();\n             }\n             /*\n-             * HostedType and AnalysisType punt calls to getSourceFilename to the wrapped class so\n-             * for consistency we need to do the path lookup relative to the wrapped class.\n+             * HostedType wraps an AnalysisType and both HostedType and AnalysisType punt calls to\n+             * getSourceFilename to the wrapped class so for consistency we need to do the path\n+             * lookup relative to the doubly unwrapped HostedType.\n              */\n             if (declaringClass instanceof HostedType) {\n                 declaringClass = ((HostedType) declaringClass).getWrapped();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMjU5Mg=="}, "originalCommit": {"oid": "275d58e1815ab9550d1af274ad1e40e2ebbd6f94"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTYxOTUwNA==", "bodyText": "Indeed. So a potential optimization would be to change the following if in an else if since the result of HostedType#getWrapped() returns an AnalysisType as you point out.\nI might be nit-picking here :)", "url": "https://github.com/oracle/graal/pull/2695#discussion_r461619504", "createdAt": "2020-07-28T14:20:29Z", "author": {"login": "zakkak"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/image/NativeImageDebugInfoProvider.java", "diffHunk": "@@ -309,8 +314,9 @@ private void computeFullFilePathAndCachePath() {\n                 clazz = ((OriginalClassProvider) declaringClass).getJavaClass();\n             }\n             /*\n-             * HostedType and AnalysisType punt calls to getSourceFilename to the wrapped class so\n-             * for consistency we need to do the path lookup relative to the wrapped class.\n+             * HostedType wraps an AnalysisType and both HostedType and AnalysisType punt calls to\n+             * getSourceFilename to the wrapped class so for consistency we need to do the path\n+             * lookup relative to the doubly unwrapped HostedType.\n              */\n             if (declaringClass instanceof HostedType) {\n                 declaringClass = ((HostedType) declaringClass).getWrapped();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMjU5Mg=="}, "originalCommit": {"oid": "275d58e1815ab9550d1af274ad1e40e2ebbd6f94"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTY1NzY0MA==", "bodyText": "On a second thought, I think this should be fixed, because as it stands it only works because the if statements are in the correct order, making it easy to break things with a simple reordering without any clear indication that these two  statements should not be reordered.", "url": "https://github.com/oracle/graal/pull/2695#discussion_r461657640", "createdAt": "2020-07-28T15:08:08Z", "author": {"login": "zakkak"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/image/NativeImageDebugInfoProvider.java", "diffHunk": "@@ -309,8 +314,9 @@ private void computeFullFilePathAndCachePath() {\n                 clazz = ((OriginalClassProvider) declaringClass).getJavaClass();\n             }\n             /*\n-             * HostedType and AnalysisType punt calls to getSourceFilename to the wrapped class so\n-             * for consistency we need to do the path lookup relative to the wrapped class.\n+             * HostedType wraps an AnalysisType and both HostedType and AnalysisType punt calls to\n+             * getSourceFilename to the wrapped class so for consistency we need to do the path\n+             * lookup relative to the doubly unwrapped HostedType.\n              */\n             if (declaringClass instanceof HostedType) {\n                 declaringClass = ((HostedType) declaringClass).getWrapped();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMjU5Mg=="}, "originalCommit": {"oid": "275d58e1815ab9550d1af274ad1e40e2ebbd6f94"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTczMjAzOQ==", "bodyText": "The if cascade is correct and the comment provides the information which explains why. However, I agree it does not spell it out. I will change the comment to make this easier to infer:\n        /*\n         * HostedType wraps an AnalysisType and both HostedType and AnalysisType punt calls to\n         * getSourceFilename to the wrapped class so for consistency we need to do the path\n         * lookup relative to the doubly unwrapped HostedType or singly unwrapped AnalysisType.\n         */\n\nI'm not sure we need to protect any further against programmers who transpose conditional operations that side-effect the elements of their conditions. Instead I recommend we just reject their contributions. ;-)", "url": "https://github.com/oracle/graal/pull/2695#discussion_r461732039", "createdAt": "2020-07-28T16:57:42Z", "author": {"login": "adinn"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/image/NativeImageDebugInfoProvider.java", "diffHunk": "@@ -309,8 +314,9 @@ private void computeFullFilePathAndCachePath() {\n                 clazz = ((OriginalClassProvider) declaringClass).getJavaClass();\n             }\n             /*\n-             * HostedType and AnalysisType punt calls to getSourceFilename to the wrapped class so\n-             * for consistency we need to do the path lookup relative to the wrapped class.\n+             * HostedType wraps an AnalysisType and both HostedType and AnalysisType punt calls to\n+             * getSourceFilename to the wrapped class so for consistency we need to do the path\n+             * lookup relative to the doubly unwrapped HostedType.\n              */\n             if (declaringClass instanceof HostedType) {\n                 declaringClass = ((HostedType) declaringClass).getWrapped();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMjU5Mg=="}, "originalCommit": {"oid": "275d58e1815ab9550d1af274ad1e40e2ebbd6f94"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 798, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}