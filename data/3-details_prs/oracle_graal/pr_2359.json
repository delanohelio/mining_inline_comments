{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MjY0NDM2", "number": 2359, "title": "Reinitialize random seed at runtime in Windows Native image, JDK 11", "bodyText": "Fixes issue #2265\nCode used to test it\nimport java.security.SecureRandom;\nimport java.util.UUID;\nimport java.util.stream.Collectors;\nimport java.util.stream.IntStream;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, UUID: \" + UUID.randomUUID().toString());\n        IntStream intStream = new SecureRandom().ints(10, 0, 100);\n        System.out.println(\"Hello, secureRandom: \" + intStream.boxed().collect(Collectors.toList()));\n    }\n}\nJDK 11\nFixes the issue #2265, tested with GraalVM substratevm,compiler,sdk HEAD 753b137, system: Windows 2019 Server, Visual Studio 2019, Windows 10 SDK.\nSET JAVA_HOME=C:\\Users\\Administrator\\source\\graal\\sdk\\mxbuild\\windows-amd64\\GRAALVM_UNKNOWN_JAVA11\\graalvm-unknown-java11-20.1.0-dev\nSET GRAALVM_HOME=%JAVA_HOME%\nset PATH=%GRAALVM_HOME%\\bin;%PATH%\n\nOutput \u2714\ufe0f\nC:\\Users\\Administrator\\source\\UUID\\src\\com\\company\n\u03bb  javac Main.java && native-image -H:+ReportExceptionStackTraces -H:+TraceClassInitialization -H:+PrintClassInitialization Main\n\nC:\\Users\\Administrator\\source\\UUID\\src\\com\\company\n\u03bb main\nHello, UUID: e01bdeec-4fe5-48b3-a1f0-8324a5411284\nHello, secureRandom: [2, 78, 90, 68, 98, 17, 22, 12, 1, 94]\n\nC:\\Users\\Administrator\\source\\UUID\\src\\com\\company\n\u03bb main\nHello, UUID: a0f76a24-cdfd-45e9-9018-f718b49fa1f8\nHello, secureRandom: [55, 26, 11, 91, 44, 8, 40, 69, 98, 66]\n\nJDK 8\nI had some troubles building GraalVM substratevm,compiler,sdk HEAD 753b137 on WIndows 2019. I finally managed that with: Visual Studio 2010, Windows 7.1 SDK. I had to swap JVMCI_20_1_b01 for  JVMCI_20_0_b03 in GraalHotSpotVMConfig.java to make the substratevm build work:\ncompiler/src/org.graalvm.compiler.hotspot/src/org/graalvm/compiler/hotspot/GraalHotSpotVMConfig.java\n\n     public final boolean CPU_HAS_INTEL_JCC_ERRATUM = getFieldValue(\"VM_Version::_has_intel_jcc_erratum\", Boolean.class, \"bool\",\n-                    true, \"amd64\".equals(osArch) && (JVMCI ? jvmciGE(JVMCI_20_1_b01) : JDK >= 15));\n+                    true, \"amd64\".equals(osArch) && (JVMCI ? jvmciGE(JVMCI_20_0_b03) : JDK >= 15));\n\nWithout this change, I kept getting:\nException during JVMCI compiler initialization:\njdk.vm.ci.common.JVMCIError: VM config values not expected to be present in JDK 8 jvmci-20.0-b03 windows-amd64 (java.home=C:\\Users\\Administrator\\source\\graal\\sdk\\mxbuild\\windows-amd64\\GRAALVM_0945E895A1_JAVA8_STAGE1\\graalvm-0945e895a1-java8-20.1.0-dev\\jre, java.vm.name=OpenJDK 64-Bit Server VM GraalVM 20.1.0-dev, java.vm.version=25.252-b05-jvmci-20.0-b03):\n    VM_Version::_has_intel_jcc_erratum at org.graalvm.compiler.hotspot.GraalHotSpotVMConfig.<init>(GraalHotSpotVMConfig.java:900) [value: Field[name=VM_Version::_has_intel_jcc_erratum, type=bool, offset=0, address=0x536fd638, value=true]]\n\n        at org.graalvm.compiler.hotspot.GraalHotSpotVMConfigAccess.reportErrors(GraalHotSpotVMConfigAccess.java:224)\n        at org.graalvm.compiler.hotspot.GraalHotSpotVMConfig.<init>(GraalHotSpotVMConfig.java:67)\n        at org.graalvm.compiler.hotspot.HotSpotGraalRuntime.<init>(HotSpotGraalRuntime.java:161)\n        at org.graalvm.compiler.hotspot.HotSpotGraalCompilerFactory.createCompiler(HotSpotGraalCompilerFactory.java:156)\n        at org.graalvm.compiler.hotspot.HotSpotGraalCompilerFactory.createCompiler(HotSpotGraalCompilerFactory.java:134)\n        at org.graalvm.compiler.hotspot.HotSpotGraalCompilerFactory.createCompiler(HotSpotGraalCompilerFactory.java:52)\n        at jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.getCompiler(HotSpotJVMCIRuntime.java:599)\n        at jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.compileMethod(HotSpotJVMCIRuntime.java:667)\n\nOnce I had it built, I tested the example code and I realized the bug does not exist for JDK 8 based native-image in the current GraalVM codebase, hence JavaVersionUtil.JAVA_SPEC >= 11 in the commit.\nOutput \u2714\ufe0f\nC:\\Users\\Administrator\\source\\UUID\\src\\com\\company\n\u03bb main\nHello, UUID: a7fe8786-3494-4a56-93d6-494e4d777a7f\nHello, secureRandom: [32, 0, 11, 49, 33, 55, 28, 24, 76, 28]\n\nC:\\Users\\Administrator\\source\\UUID\\src\\com\\company\n\u03bb main\nHello, UUID: ccd42f3f-530a-4a7d-9b87-1ed6b2f24085\nHello, secureRandom: [49, 3, 27, 10, 80, 38, 59, 73, 27, 21]", "createdAt": "2020-04-17T17:53:27Z", "url": "https://github.com/oracle/graal/pull/2359", "merged": true, "mergeCommit": {"oid": "1d980edb3691291a0fd0f925198ba19941070341"}, "closed": true, "closedAt": "2020-04-24T21:40:43Z", "author": {"login": "Karm"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZmsAhgBqjMyNTM3ODk3OTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcagfIqgFqTM5OTMyOTMzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8d415e2a02e79a8eed8d88d9f9c2154f0b71ec41", "author": {"user": {"login": "Karm", "name": "Michal Karm Babacek"}}, "url": "https://github.com/oracle/graal/commit/8d415e2a02e79a8eed8d88d9f9c2154f0b71ec41", "committedDate": "2020-04-17T17:50:05Z", "message": "[WIP] Reinitialize random seed at runtime in Windows Native image\n\nWIP, tetsed on JDK 11; JDk 8 is pending..."}, "afterCommit": {"oid": "3ffe508715b301ae2e4db7355024d5c7ce3ef642", "author": {"user": {"login": "Karm", "name": "Michal Karm Babacek"}}, "url": "https://github.com/oracle/graal/commit/3ffe508715b301ae2e4db7355024d5c7ce3ef642", "committedDate": "2020-04-20T22:14:33Z", "message": "Reinitialize random seed at runtime in Windows Native image\n\nJDK 11 needs this tweak to have fresh seed for random number\ngenerator on each native image start.\n\nJDK 8 does not hold the seed in a static final field in\nsun.security.provider.AbstractDrbg$SeederHolder so\nit doesn't have this problem."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NTgzMDQ3", "url": "https://github.com/oracle/graal/pull/2359#pullrequestreview-397583047", "createdAt": "2020-04-21T18:50:46Z", "commit": {"oid": "3ffe508715b301ae2e4db7355024d5c7ce3ef642"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODo1MDo0NlrOGJTXLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODo1MDo0NlrOGJTXLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQwNzU5OQ==", "bodyText": "Since sun.security.provider.AbstractDrbg$SeederHolder is a shared class this should be enabled for Linux/Darwin platforms too, not only Windows, so please just remove JNIRegistrationUtil.isWindows().", "url": "https://github.com/oracle/graal/pull/2359#discussion_r412407599", "createdAt": "2020-04-21T18:50:46Z", "author": {"login": "cstancu"}, "path": "substratevm/src/com.oracle.svm.hosted/src/com/oracle/svm/hosted/SecurityServicesFeature.java", "diffHunk": "@@ -109,6 +109,11 @@ public void duringSetup(DuringSetupAccess access) {\n         ImageSingletons.lookup(RuntimeClassInitializationSupport.class).rerunInitialization(clazz(access, \"sun.security.provider.SeedGenerator\"), \"for substitutions\");\n         ImageSingletons.lookup(RuntimeClassInitializationSupport.class).rerunInitialization(clazz(access, \"sun.security.provider.SecureRandom$SeederHolder\"), \"for substitutions\");\n \n+        if(JNIRegistrationUtil.isWindows() && JavaVersionUtil.JAVA_SPEC >= 11) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ffe508715b301ae2e4db7355024d5c7ce3ef642"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d980edb3691291a0fd0f925198ba19941070341", "author": {"user": {"login": "Karm", "name": "Michal Karm Babacek"}}, "url": "https://github.com/oracle/graal/commit/1d980edb3691291a0fd0f925198ba19941070341", "committedDate": "2020-04-22T22:44:22Z", "message": "Reinitialize random seed at runtime in Windows Native image\n\nJDK 11 needs this tweak to have fresh seed for random number\ngenerator on each native image start.\n\nJDK 8 does not hold the seed in a static final field in\nsun.security.provider.AbstractDrbg$SeederHolder so\nit doesn't have this problem."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ffe508715b301ae2e4db7355024d5c7ce3ef642", "author": {"user": {"login": "Karm", "name": "Michal Karm Babacek"}}, "url": "https://github.com/oracle/graal/commit/3ffe508715b301ae2e4db7355024d5c7ce3ef642", "committedDate": "2020-04-20T22:14:33Z", "message": "Reinitialize random seed at runtime in Windows Native image\n\nJDK 11 needs this tweak to have fresh seed for random number\ngenerator on each native image start.\n\nJDK 8 does not hold the seed in a static final field in\nsun.security.provider.AbstractDrbg$SeederHolder so\nit doesn't have this problem."}, "afterCommit": {"oid": "1d980edb3691291a0fd0f925198ba19941070341", "author": {"user": {"login": "Karm", "name": "Michal Karm Babacek"}}, "url": "https://github.com/oracle/graal/commit/1d980edb3691291a0fd0f925198ba19941070341", "committedDate": "2020-04-22T22:44:22Z", "message": "Reinitialize random seed at runtime in Windows Native image\n\nJDK 11 needs this tweak to have fresh seed for random number\ngenerator on each native image start.\n\nJDK 8 does not hold the seed in a static final field in\nsun.security.provider.AbstractDrbg$SeederHolder so\nit doesn't have this problem."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MzI5MzMz", "url": "https://github.com/oracle/graal/pull/2359#pullrequestreview-399329333", "createdAt": "2020-04-23T17:39:05Z", "commit": {"oid": "1d980edb3691291a0fd0f925198ba19941070341"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1142, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}