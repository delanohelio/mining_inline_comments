{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMDcyNjgz", "number": 2945, "title": "Work around the absence of SpeculationReasonEncoding in OpenJDK11", "bodyText": "Fixes #2933\nNote that this PR fixes only the specific issue discussed in #2933, which is necessary to create a Mandrel build based on graalvm's master.  Even after merging this PR parts of GraalVM will fail to build using OpenJDK 11, for instance mx --primary-suite-path substratevm --components='Native Image' build will fail.", "createdAt": "2020-10-27T21:11:05Z", "url": "https://github.com/oracle/graal/pull/2945", "merged": true, "mergeCommit": {"oid": "0ed0307b1129dac119f1b60c89260ceff90bd065"}, "closed": true, "closedAt": "2020-12-07T20:50:30Z", "author": {"login": "zakkak"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWvofYAFqTUxODE1NTU3NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdf5Bs0AFqTUzODIwOTU2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MTU1NTc0", "url": "https://github.com/oracle/graal/pull/2945#pullrequestreview-518155574", "createdAt": "2020-10-27T21:13:20Z", "commit": {"oid": "a75bea48ba1ecddf5e2e3ece06ead4e72bb5d7e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMToxMzoyMFrOHpRO5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMToxMzoyMFrOHpRO5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAzNjAwNg==", "bodyText": "This and getEntryPoint are final in vanilla openjdk11", "url": "https://github.com/oracle/graal/pull/2945#discussion_r513036006", "createdAt": "2020-10-27T21:13:20Z", "author": {"login": "zakkak"}, "path": "substratevm/src/com.oracle.svm.graal/src/com/oracle/svm/graal/isolated/IsolatedCodeInstallBridge.java", "diffHunk": "@@ -59,16 +59,6 @@ public IsolatedCodeInstallBridge(ClientHandle<? extends SubstrateInstalledCode.A\n     private static final String DO_NOT_CALL_REASON = IsolatedCodeInstallBridge.class.getSimpleName() +\n                     \" only acts as an accessor for cross-isolate data. None of the implemented methods may be called.\";\n \n-    @Override\n-    public long getAddress() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a75bea48ba1ecddf5e2e3ece06ead4e72bb5d7e9"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MTU2NTA0", "url": "https://github.com/oracle/graal/pull/2945#pullrequestreview-518156504", "createdAt": "2020-10-27T21:14:49Z", "commit": {"oid": "a75bea48ba1ecddf5e2e3ece06ead4e72bb5d7e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMToxNDo0OVrOHpRSLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMToxNDo0OVrOHpRSLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAzNjg0NA==", "bodyText": "This is still an early version to get some feedback. Error checking will be improved once we agree on the core changes.", "url": "https://github.com/oracle/graal/pull/2945#discussion_r513036844", "createdAt": "2020-10-27T21:14:49Z", "author": {"login": "zakkak"}, "path": "substratevm/src/com.oracle.svm.graal/src/com/oracle/svm/graal/isolated/IsolatedSpeculationLog.java", "diffHunk": "@@ -48,19 +54,63 @@ public void collectFailedSpeculations() {\n         collectFailedSpeculations0(IsolatedCompileContext.get().getClient(), handle);\n     }\n \n+    class SpeculationReasonInvocationHandler implements InvocationHandler {\n+        @Override\n+        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+            return IsolatedSpeculationReasonEncoding.class.getDeclaredMethod(method.getName(), method.getParameterTypes()).invoke(args);\n+        }\n+    }\n+\n+    class SpeculationReasonEncodingSupplier implements Supplier<Object> {\n+        private Object speculationReasonEncodingProxy;\n+\n+        SpeculationReasonEncodingSupplier(Object speculationReasonEncodingProxy) {\n+            this.speculationReasonEncodingProxy = speculationReasonEncodingProxy;\n+        }\n+\n+        @Override\n+        public Object get() {\n+            try {\n+                return speculationReasonEncodingProxy.getClass().getDeclaredConstructor().newInstance();\n+            } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n+                e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a75bea48ba1ecddf5e2e3ece06ead4e72bb5d7e9"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MTU3MTQz", "url": "https://github.com/oracle/graal/pull/2945#pullrequestreview-518157143", "createdAt": "2020-10-27T21:15:45Z", "commit": {"oid": "a75bea48ba1ecddf5e2e3ece06ead4e72bb5d7e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMToxNTo0NVrOHpRUFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMToxNTo0NVrOHpRUFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAzNzMzNA==", "bodyText": "Proxy and reflection accessors will eventually be cached in static variables as requested in #2933 (comment)", "url": "https://github.com/oracle/graal/pull/2945#discussion_r513037334", "createdAt": "2020-10-27T21:15:45Z", "author": {"login": "zakkak"}, "path": "substratevm/src/com.oracle.svm.graal/src/com/oracle/svm/graal/isolated/IsolatedSpeculationLog.java", "diffHunk": "@@ -48,19 +54,63 @@ public void collectFailedSpeculations() {\n         collectFailedSpeculations0(IsolatedCompileContext.get().getClient(), handle);\n     }\n \n+    class SpeculationReasonInvocationHandler implements InvocationHandler {\n+        @Override\n+        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+            return IsolatedSpeculationReasonEncoding.class.getDeclaredMethod(method.getName(), method.getParameterTypes()).invoke(args);\n+        }\n+    }\n+\n+    class SpeculationReasonEncodingSupplier implements Supplier<Object> {\n+        private Object speculationReasonEncodingProxy;\n+\n+        SpeculationReasonEncodingSupplier(Object speculationReasonEncodingProxy) {\n+            this.speculationReasonEncodingProxy = speculationReasonEncodingProxy;\n+        }\n+\n+        @Override\n+        public Object get() {\n+            try {\n+                return speculationReasonEncodingProxy.getClass().getDeclaredConstructor().newInstance();\n+            } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n+                e.printStackTrace();\n+            }\n+            return null;\n+        }\n+    }\n+\n+    private byte[] getByteArray(SpeculationReason reason) {\n+        byte[] bytes = null;\n+        if (reason instanceof UnencodedSpeculationReason) {\n+            Object encoding = ((UnencodedSpeculationReason) reason).encode();\n+            assert encoding instanceof IsolatedSpeculationReasonEncoding;\n+            bytes = ((IsolatedSpeculationReasonEncoding) encoding).getByteArray();\n+        } else {\n+            try {\n+                Class<?> speculationReasonEncodingClass = Class.forName(\"jdk.vm.ci.meta.SpeculationLog$SpeculationReasonEncoding\");\n+                final Object speculationReasonEncodingProxy = Proxy.newProxyInstance(speculationReasonEncodingClass.getClassLoader(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a75bea48ba1ecddf5e2e3ece06ead4e72bb5d7e9"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MTU4NjE2", "url": "https://github.com/oracle/graal/pull/2945#pullrequestreview-518158616", "createdAt": "2020-10-27T21:18:04Z", "commit": {"oid": "a75bea48ba1ecddf5e2e3ece06ead4e72bb5d7e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMToxODowNFrOHpRYZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMToxODowNFrOHpRYZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAzODQzNw==", "bodyText": "I am not sure about this. Please make sure to review thoroughly.", "url": "https://github.com/oracle/graal/pull/2945#discussion_r513038437", "createdAt": "2020-10-27T21:18:04Z", "author": {"login": "zakkak"}, "path": "substratevm/src/com.oracle.svm.graal/src/com/oracle/svm/graal/isolated/IsolatedSpeculationLog.java", "diffHunk": "@@ -48,19 +54,63 @@ public void collectFailedSpeculations() {\n         collectFailedSpeculations0(IsolatedCompileContext.get().getClient(), handle);\n     }\n \n+    class SpeculationReasonInvocationHandler implements InvocationHandler {\n+        @Override\n+        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+            return IsolatedSpeculationReasonEncoding.class.getDeclaredMethod(method.getName(), method.getParameterTypes()).invoke(args);\n+        }\n+    }\n+\n+    class SpeculationReasonEncodingSupplier implements Supplier<Object> {\n+        private Object speculationReasonEncodingProxy;\n+\n+        SpeculationReasonEncodingSupplier(Object speculationReasonEncodingProxy) {\n+            this.speculationReasonEncodingProxy = speculationReasonEncodingProxy;\n+        }\n+\n+        @Override\n+        public Object get() {\n+            try {\n+                return speculationReasonEncodingProxy.getClass().getDeclaredConstructor().newInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a75bea48ba1ecddf5e2e3ece06ead4e72bb5d7e9"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MTU5MzQw", "url": "https://github.com/oracle/graal/pull/2945#pullrequestreview-518159340", "createdAt": "2020-10-27T21:19:12Z", "commit": {"oid": "a75bea48ba1ecddf5e2e3ece06ead4e72bb5d7e9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMToxOToxM1rOHpRacw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMToxOToxM1rOHpRacw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAzODk2Mw==", "bodyText": "SVM code should not be referenced in non-SVM projects.", "url": "https://github.com/oracle/graal/pull/2945#discussion_r513038963", "createdAt": "2020-10-27T21:19:13Z", "author": {"login": "dougxc"}, "path": "compiler/src/org.graalvm.compiler.serviceprovider/src/org/graalvm/compiler/serviceprovider/UnencodedSpeculationReason.java", "diffHunk": "@@ -60,4 +66,66 @@ public int hashCode() {\n     public String toString() {\n         return String.format(\"%s@%d%s\", groupName, groupId, Arrays.toString(context));\n     }\n+\n+    /** Adapted from {@code jdk.vm.ci.meta.EncodedSpeculationReason#encode}. */\n+    public Object encode() {\n+        if (encoding == null) {\n+            try {\n+                Class<?> c = Class.forName(\"com.oracle.svm.graal.isolated.IsolatedSpeculationReasonEncoding\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a75bea48ba1ecddf5e2e3ece06ead4e72bb5d7e9"}, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a75bea48ba1ecddf5e2e3ece06ead4e72bb5d7e9", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/a75bea48ba1ecddf5e2e3ece06ead4e72bb5d7e9", "committedDate": "2020-10-27T21:04:52Z", "message": "Work around the absence or SpeculationReasonEncoding in OpenJDK11"}, "afterCommit": {"oid": "c215690bf8832fcf3f1aca997c457fad99029282", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/c215690bf8832fcf3f1aca997c457fad99029282", "committedDate": "2020-10-27T21:46:21Z", "message": "Work around the absence of SpeculationReasonEncoding in OpenJDK11"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c215690bf8832fcf3f1aca997c457fad99029282", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/c215690bf8832fcf3f1aca997c457fad99029282", "committedDate": "2020-10-27T21:46:21Z", "message": "Work around the absence of SpeculationReasonEncoding in OpenJDK11"}, "afterCommit": {"oid": "e81a8ff1b727a7192fc54955ef147d5caaed9ab1", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/e81a8ff1b727a7192fc54955ef147d5caaed9ab1", "committedDate": "2020-10-27T21:47:31Z", "message": "Work around the absence of SpeculationReasonEncoding in OpenJDK11"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNDgwMTgx", "url": "https://github.com/oracle/graal/pull/2945#pullrequestreview-521480181", "createdAt": "2020-11-02T09:56:20Z", "commit": {"oid": "e81a8ff1b727a7192fc54955ef147d5caaed9ab1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e81a8ff1b727a7192fc54955ef147d5caaed9ab1", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/e81a8ff1b727a7192fc54955ef147d5caaed9ab1", "committedDate": "2020-10-27T21:47:31Z", "message": "Work around the absence of SpeculationReasonEncoding in OpenJDK11"}, "afterCommit": {"oid": "6c6664598166480dc6347e1dad8a237c2fd884e2", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/6c6664598166480dc6347e1dad8a237c2fd884e2", "committedDate": "2020-11-02T15:09:17Z", "message": "Work around the absence of SpeculationReasonEncoding in OpenJDK11"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c6664598166480dc6347e1dad8a237c2fd884e2", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/6c6664598166480dc6347e1dad8a237c2fd884e2", "committedDate": "2020-11-02T15:09:17Z", "message": "Work around the absence of SpeculationReasonEncoding in OpenJDK11"}, "afterCommit": {"oid": "59a23eee247546eebebcd2bb104e72b182151720", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/59a23eee247546eebebcd2bb104e72b182151720", "committedDate": "2020-11-02T15:12:29Z", "message": "Work around the absence of SpeculationReasonEncoding in OpenJDK11"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNzE5NDg3", "url": "https://github.com/oracle/graal/pull/2945#pullrequestreview-521719487", "createdAt": "2020-11-02T15:13:53Z", "commit": {"oid": "59a23eee247546eebebcd2bb104e72b182151720"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNToxMzo1M1rOHsImYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNToxMzo1M1rOHsImYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA0MDI5MA==", "bodyText": "Should we cache the encodings here?", "url": "https://github.com/oracle/graal/pull/2945#discussion_r516040290", "createdAt": "2020-11-02T15:13:53Z", "author": {"login": "zakkak"}, "path": "substratevm/src/com.oracle.svm.graal/src/com/oracle/svm/graal/isolated/IsolatedSpeculationLog.java", "diffHunk": "@@ -48,19 +58,115 @@ public void collectFailedSpeculations() {\n         collectFailedSpeculations0(IsolatedCompileContext.get().getClient(), handle);\n     }\n \n+    static class SpeculationReasonInvocationHandler implements InvocationHandler {\n+        @Override\n+        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+            return IsolatedSpeculationReasonEncoding.class.getDeclaredMethod(method.getName(), method.getParameterTypes()).invoke(args);\n+        }\n+    }\n+\n+    static class SpeculationReasonEncodingSupplier implements Supplier<Object> {\n+        private final Object speculationReasonEncodingProxy;\n+\n+        SpeculationReasonEncodingSupplier(Object speculationReasonEncodingProxy) {\n+            this.speculationReasonEncodingProxy = speculationReasonEncodingProxy;\n+        }\n+\n+        @Override\n+        public Object get() {\n+            try {\n+                return speculationReasonEncodingProxy.getClass().getDeclaredConstructor().newInstance();\n+            } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n+                e.printStackTrace();\n+            }\n+            return null;\n+        }\n+    }\n+\n+    private byte[] getByteArray(SpeculationReason reason) {\n+        byte[] bytes = null;\n+        if (reason instanceof UnencodedSpeculationReason) {\n+            IsolatedSpeculationReasonEncoding encoding = encode((UnencodedSpeculationReason) reason);\n+            bytes = encoding.getByteArray();\n+        } else {\n+            try {\n+                Class<?> speculationReasonEncodingClass = Class.forName(\"jdk.vm.ci.meta.SpeculationLog$SpeculationReasonEncoding\");\n+                final Object speculationReasonEncodingProxy = Proxy.newProxyInstance(speculationReasonEncodingClass.getClassLoader(),\n+                                new Class<?>[]{speculationReasonEncodingClass},\n+                                new SpeculationReasonInvocationHandler());\n+                IsolatedSpeculationReasonEncoding encoding = (IsolatedSpeculationReasonEncoding) Class.forName(\"jdk.vm.ci.meta.EncodedSpeculationReason\").getDeclaredMethod(\"encode\").invoke(new SpeculationReasonEncodingSupplier(speculationReasonEncodingProxy));\n+                bytes = encoding.getByteArray();\n+            } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException | ClassNotFoundException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        return bytes;\n+    }\n+\n+    /** Adapted from {@code jdk.vm.ci.meta.EncodedSpeculationReason#encode}. */\n+    public IsolatedSpeculationReasonEncoding encode(UnencodedSpeculationReason reason) {\n+        IsolatedSpeculationReasonEncoding encoding = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a23eee247546eebebcd2bb104e72b182151720"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2MTQ4MDc2", "url": "https://github.com/oracle/graal/pull/2945#pullrequestreview-526148076", "createdAt": "2020-11-09T11:11:09Z", "commit": {"oid": "59a23eee247546eebebcd2bb104e72b182151720"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMToxMTowOVrOHvpuWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxMzo1NDowM1rOHvv6Vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcyODczMQ==", "bodyText": "Remove throws clause: does not throw these exceptions any longer.", "url": "https://github.com/oracle/graal/pull/2945#discussion_r519728731", "createdAt": "2020-11-09T11:11:09Z", "author": {"login": "peter-hofer"}, "path": "substratevm/src/com.oracle.svm.graal/src/com/oracle/svm/graal/isolated/IsolatedSpeculationLog.java", "diffHunk": "@@ -48,19 +58,115 @@ public void collectFailedSpeculations() {\n         collectFailedSpeculations0(IsolatedCompileContext.get().getClient(), handle);\n     }\n \n+    static class SpeculationReasonInvocationHandler implements InvocationHandler {\n+        @Override\n+        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+            return IsolatedSpeculationReasonEncoding.class.getDeclaredMethod(method.getName(), method.getParameterTypes()).invoke(args);\n+        }\n+    }\n+\n+    static class SpeculationReasonEncodingSupplier implements Supplier<Object> {\n+        private final Object speculationReasonEncodingProxy;\n+\n+        SpeculationReasonEncodingSupplier(Object speculationReasonEncodingProxy) {\n+            this.speculationReasonEncodingProxy = speculationReasonEncodingProxy;\n+        }\n+\n+        @Override\n+        public Object get() {\n+            try {\n+                return speculationReasonEncodingProxy.getClass().getDeclaredConstructor().newInstance();\n+            } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n+                e.printStackTrace();\n+            }\n+            return null;\n+        }\n+    }\n+\n+    private byte[] getByteArray(SpeculationReason reason) {\n+        byte[] bytes = null;\n+        if (reason instanceof UnencodedSpeculationReason) {\n+            IsolatedSpeculationReasonEncoding encoding = encode((UnencodedSpeculationReason) reason);\n+            bytes = encoding.getByteArray();\n+        } else {\n+            try {\n+                Class<?> speculationReasonEncodingClass = Class.forName(\"jdk.vm.ci.meta.SpeculationLog$SpeculationReasonEncoding\");\n+                final Object speculationReasonEncodingProxy = Proxy.newProxyInstance(speculationReasonEncodingClass.getClassLoader(),\n+                                new Class<?>[]{speculationReasonEncodingClass},\n+                                new SpeculationReasonInvocationHandler());\n+                IsolatedSpeculationReasonEncoding encoding = (IsolatedSpeculationReasonEncoding) Class.forName(\"jdk.vm.ci.meta.EncodedSpeculationReason\").getDeclaredMethod(\"encode\").invoke(new SpeculationReasonEncodingSupplier(speculationReasonEncodingProxy));\n+                bytes = encoding.getByteArray();\n+            } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException | ClassNotFoundException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        return bytes;\n+    }\n+\n+    /** Adapted from {@code jdk.vm.ci.meta.EncodedSpeculationReason#encode}. */\n+    public IsolatedSpeculationReasonEncoding encode(UnencodedSpeculationReason reason) {\n+        IsolatedSpeculationReasonEncoding encoding = null;\n+        try {\n+            encoding = new IsolatedSpeculationReasonEncoding();\n+            int groupId = UnencodedSpeculationReason.class.getField(\"groupId\").getInt(reason);\n+            Object[] context = (Object[]) UnencodedSpeculationReason.class.getField(\"context\").get(reason);\n+            encoding.addInt(groupId);\n+            for (Object o : context) {\n+                if (o == null) {\n+                    encoding.addInt(0);\n+                } else {\n+                    addNonNullObject(encoding, o);\n+                }\n+            }\n+        } catch (IllegalAccessException | InvocationTargetException | NoSuchFieldException e) {\n+            e.printStackTrace();\n+        }\n+        return encoding;\n+    }\n+\n+    /** Copied from {@code jdk.vm.ci.meta.EncodedSpeculationReason#addNonNullObject}. */\n+    static void addNonNullObject(IsolatedSpeculationReasonEncoding encoding, Object o) throws InvocationTargetException, IllegalAccessException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a23eee247546eebebcd2bb104e72b182151720"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTcyODg3Mw==", "bodyText": "Should be a cast to Character.", "url": "https://github.com/oracle/graal/pull/2945#discussion_r519728873", "createdAt": "2020-11-09T11:11:24Z", "author": {"login": "peter-hofer"}, "path": "substratevm/src/com.oracle.svm.graal/src/com/oracle/svm/graal/isolated/IsolatedSpeculationLog.java", "diffHunk": "@@ -48,19 +58,115 @@ public void collectFailedSpeculations() {\n         collectFailedSpeculations0(IsolatedCompileContext.get().getClient(), handle);\n     }\n \n+    static class SpeculationReasonInvocationHandler implements InvocationHandler {\n+        @Override\n+        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+            return IsolatedSpeculationReasonEncoding.class.getDeclaredMethod(method.getName(), method.getParameterTypes()).invoke(args);\n+        }\n+    }\n+\n+    static class SpeculationReasonEncodingSupplier implements Supplier<Object> {\n+        private final Object speculationReasonEncodingProxy;\n+\n+        SpeculationReasonEncodingSupplier(Object speculationReasonEncodingProxy) {\n+            this.speculationReasonEncodingProxy = speculationReasonEncodingProxy;\n+        }\n+\n+        @Override\n+        public Object get() {\n+            try {\n+                return speculationReasonEncodingProxy.getClass().getDeclaredConstructor().newInstance();\n+            } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n+                e.printStackTrace();\n+            }\n+            return null;\n+        }\n+    }\n+\n+    private byte[] getByteArray(SpeculationReason reason) {\n+        byte[] bytes = null;\n+        if (reason instanceof UnencodedSpeculationReason) {\n+            IsolatedSpeculationReasonEncoding encoding = encode((UnencodedSpeculationReason) reason);\n+            bytes = encoding.getByteArray();\n+        } else {\n+            try {\n+                Class<?> speculationReasonEncodingClass = Class.forName(\"jdk.vm.ci.meta.SpeculationLog$SpeculationReasonEncoding\");\n+                final Object speculationReasonEncodingProxy = Proxy.newProxyInstance(speculationReasonEncodingClass.getClassLoader(),\n+                                new Class<?>[]{speculationReasonEncodingClass},\n+                                new SpeculationReasonInvocationHandler());\n+                IsolatedSpeculationReasonEncoding encoding = (IsolatedSpeculationReasonEncoding) Class.forName(\"jdk.vm.ci.meta.EncodedSpeculationReason\").getDeclaredMethod(\"encode\").invoke(new SpeculationReasonEncodingSupplier(speculationReasonEncodingProxy));\n+                bytes = encoding.getByteArray();\n+            } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException | ClassNotFoundException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        return bytes;\n+    }\n+\n+    /** Adapted from {@code jdk.vm.ci.meta.EncodedSpeculationReason#encode}. */\n+    public IsolatedSpeculationReasonEncoding encode(UnencodedSpeculationReason reason) {\n+        IsolatedSpeculationReasonEncoding encoding = null;\n+        try {\n+            encoding = new IsolatedSpeculationReasonEncoding();\n+            int groupId = UnencodedSpeculationReason.class.getField(\"groupId\").getInt(reason);\n+            Object[] context = (Object[]) UnencodedSpeculationReason.class.getField(\"context\").get(reason);\n+            encoding.addInt(groupId);\n+            for (Object o : context) {\n+                if (o == null) {\n+                    encoding.addInt(0);\n+                } else {\n+                    addNonNullObject(encoding, o);\n+                }\n+            }\n+        } catch (IllegalAccessException | InvocationTargetException | NoSuchFieldException e) {\n+            e.printStackTrace();\n+        }\n+        return encoding;\n+    }\n+\n+    /** Copied from {@code jdk.vm.ci.meta.EncodedSpeculationReason#addNonNullObject}. */\n+    static void addNonNullObject(IsolatedSpeculationReasonEncoding encoding, Object o) throws InvocationTargetException, IllegalAccessException {\n+        Class<?> c = o.getClass();\n+        if (c == String.class) {\n+            encoding.addString((String) o);\n+        } else if (c == Byte.class) {\n+            encoding.addByte((Byte) o);\n+        } else if (c == Short.class) {\n+            encoding.addShort((Short) o);\n+        } else if (c == Character.class) {\n+            encoding.addShort((Short) o);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a23eee247546eebebcd2bb104e72b182151720"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTczMDM0OA==", "bodyText": "Must use getDeclaredField: these fields are package-private.", "url": "https://github.com/oracle/graal/pull/2945#discussion_r519730348", "createdAt": "2020-11-09T11:14:09Z", "author": {"login": "peter-hofer"}, "path": "substratevm/src/com.oracle.svm.graal/src/com/oracle/svm/graal/isolated/IsolatedSpeculationLog.java", "diffHunk": "@@ -48,19 +58,115 @@ public void collectFailedSpeculations() {\n         collectFailedSpeculations0(IsolatedCompileContext.get().getClient(), handle);\n     }\n \n+    static class SpeculationReasonInvocationHandler implements InvocationHandler {\n+        @Override\n+        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+            return IsolatedSpeculationReasonEncoding.class.getDeclaredMethod(method.getName(), method.getParameterTypes()).invoke(args);\n+        }\n+    }\n+\n+    static class SpeculationReasonEncodingSupplier implements Supplier<Object> {\n+        private final Object speculationReasonEncodingProxy;\n+\n+        SpeculationReasonEncodingSupplier(Object speculationReasonEncodingProxy) {\n+            this.speculationReasonEncodingProxy = speculationReasonEncodingProxy;\n+        }\n+\n+        @Override\n+        public Object get() {\n+            try {\n+                return speculationReasonEncodingProxy.getClass().getDeclaredConstructor().newInstance();\n+            } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n+                e.printStackTrace();\n+            }\n+            return null;\n+        }\n+    }\n+\n+    private byte[] getByteArray(SpeculationReason reason) {\n+        byte[] bytes = null;\n+        if (reason instanceof UnencodedSpeculationReason) {\n+            IsolatedSpeculationReasonEncoding encoding = encode((UnencodedSpeculationReason) reason);\n+            bytes = encoding.getByteArray();\n+        } else {\n+            try {\n+                Class<?> speculationReasonEncodingClass = Class.forName(\"jdk.vm.ci.meta.SpeculationLog$SpeculationReasonEncoding\");\n+                final Object speculationReasonEncodingProxy = Proxy.newProxyInstance(speculationReasonEncodingClass.getClassLoader(),\n+                                new Class<?>[]{speculationReasonEncodingClass},\n+                                new SpeculationReasonInvocationHandler());\n+                IsolatedSpeculationReasonEncoding encoding = (IsolatedSpeculationReasonEncoding) Class.forName(\"jdk.vm.ci.meta.EncodedSpeculationReason\").getDeclaredMethod(\"encode\").invoke(new SpeculationReasonEncodingSupplier(speculationReasonEncodingProxy));\n+                bytes = encoding.getByteArray();\n+            } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException | ClassNotFoundException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        return bytes;\n+    }\n+\n+    /** Adapted from {@code jdk.vm.ci.meta.EncodedSpeculationReason#encode}. */\n+    public IsolatedSpeculationReasonEncoding encode(UnencodedSpeculationReason reason) {\n+        IsolatedSpeculationReasonEncoding encoding = null;\n+        try {\n+            encoding = new IsolatedSpeculationReasonEncoding();\n+            int groupId = UnencodedSpeculationReason.class.getField(\"groupId\").getInt(reason);\n+            Object[] context = (Object[]) UnencodedSpeculationReason.class.getField(\"context\").get(reason);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a23eee247546eebebcd2bb104e72b182151720"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc4MDAzNw==", "bodyText": "Must use signature for lookup and pass receiver:\n                IsolatedSpeculationReasonEncoding encoding = (IsolatedSpeculationReasonEncoding) Class.forName(\"jdk.vm.ci.meta.EncodedSpeculationReason\").getDeclaredMethod(\"encode\", Supplier.class)\n                                .invoke(reason, new SpeculationReasonEncodingSupplier(speculationReasonEncodingProxy));", "url": "https://github.com/oracle/graal/pull/2945#discussion_r519780037", "createdAt": "2020-11-09T12:45:51Z", "author": {"login": "peter-hofer"}, "path": "substratevm/src/com.oracle.svm.graal/src/com/oracle/svm/graal/isolated/IsolatedSpeculationLog.java", "diffHunk": "@@ -48,19 +58,115 @@ public void collectFailedSpeculations() {\n         collectFailedSpeculations0(IsolatedCompileContext.get().getClient(), handle);\n     }\n \n+    static class SpeculationReasonInvocationHandler implements InvocationHandler {\n+        @Override\n+        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+            return IsolatedSpeculationReasonEncoding.class.getDeclaredMethod(method.getName(), method.getParameterTypes()).invoke(args);\n+        }\n+    }\n+\n+    static class SpeculationReasonEncodingSupplier implements Supplier<Object> {\n+        private final Object speculationReasonEncodingProxy;\n+\n+        SpeculationReasonEncodingSupplier(Object speculationReasonEncodingProxy) {\n+            this.speculationReasonEncodingProxy = speculationReasonEncodingProxy;\n+        }\n+\n+        @Override\n+        public Object get() {\n+            try {\n+                return speculationReasonEncodingProxy.getClass().getDeclaredConstructor().newInstance();\n+            } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n+                e.printStackTrace();\n+            }\n+            return null;\n+        }\n+    }\n+\n+    private byte[] getByteArray(SpeculationReason reason) {\n+        byte[] bytes = null;\n+        if (reason instanceof UnencodedSpeculationReason) {\n+            IsolatedSpeculationReasonEncoding encoding = encode((UnencodedSpeculationReason) reason);\n+            bytes = encoding.getByteArray();\n+        } else {\n+            try {\n+                Class<?> speculationReasonEncodingClass = Class.forName(\"jdk.vm.ci.meta.SpeculationLog$SpeculationReasonEncoding\");\n+                final Object speculationReasonEncodingProxy = Proxy.newProxyInstance(speculationReasonEncodingClass.getClassLoader(),\n+                                new Class<?>[]{speculationReasonEncodingClass},\n+                                new SpeculationReasonInvocationHandler());\n+                IsolatedSpeculationReasonEncoding encoding = (IsolatedSpeculationReasonEncoding) Class.forName(\"jdk.vm.ci.meta.EncodedSpeculationReason\").getDeclaredMethod(\"encode\").invoke(new SpeculationReasonEncodingSupplier(speculationReasonEncodingProxy));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a23eee247546eebebcd2bb104e72b182151720"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTc4OTExMw==", "bodyText": "Looks like we can only do that using a WeakIdentityHashMap, but I wouldn't now unless it proves to have a performance impact.", "url": "https://github.com/oracle/graal/pull/2945#discussion_r519789113", "createdAt": "2020-11-09T13:01:31Z", "author": {"login": "peter-hofer"}, "path": "substratevm/src/com.oracle.svm.graal/src/com/oracle/svm/graal/isolated/IsolatedSpeculationLog.java", "diffHunk": "@@ -48,19 +58,115 @@ public void collectFailedSpeculations() {\n         collectFailedSpeculations0(IsolatedCompileContext.get().getClient(), handle);\n     }\n \n+    static class SpeculationReasonInvocationHandler implements InvocationHandler {\n+        @Override\n+        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+            return IsolatedSpeculationReasonEncoding.class.getDeclaredMethod(method.getName(), method.getParameterTypes()).invoke(args);\n+        }\n+    }\n+\n+    static class SpeculationReasonEncodingSupplier implements Supplier<Object> {\n+        private final Object speculationReasonEncodingProxy;\n+\n+        SpeculationReasonEncodingSupplier(Object speculationReasonEncodingProxy) {\n+            this.speculationReasonEncodingProxy = speculationReasonEncodingProxy;\n+        }\n+\n+        @Override\n+        public Object get() {\n+            try {\n+                return speculationReasonEncodingProxy.getClass().getDeclaredConstructor().newInstance();\n+            } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n+                e.printStackTrace();\n+            }\n+            return null;\n+        }\n+    }\n+\n+    private byte[] getByteArray(SpeculationReason reason) {\n+        byte[] bytes = null;\n+        if (reason instanceof UnencodedSpeculationReason) {\n+            IsolatedSpeculationReasonEncoding encoding = encode((UnencodedSpeculationReason) reason);\n+            bytes = encoding.getByteArray();\n+        } else {\n+            try {\n+                Class<?> speculationReasonEncodingClass = Class.forName(\"jdk.vm.ci.meta.SpeculationLog$SpeculationReasonEncoding\");\n+                final Object speculationReasonEncodingProxy = Proxy.newProxyInstance(speculationReasonEncodingClass.getClassLoader(),\n+                                new Class<?>[]{speculationReasonEncodingClass},\n+                                new SpeculationReasonInvocationHandler());\n+                IsolatedSpeculationReasonEncoding encoding = (IsolatedSpeculationReasonEncoding) Class.forName(\"jdk.vm.ci.meta.EncodedSpeculationReason\").getDeclaredMethod(\"encode\").invoke(new SpeculationReasonEncodingSupplier(speculationReasonEncodingProxy));\n+                bytes = encoding.getByteArray();\n+            } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException | ClassNotFoundException e) {\n+                e.printStackTrace();\n+            }\n+        }\n+        return bytes;\n+    }\n+\n+    /** Adapted from {@code jdk.vm.ci.meta.EncodedSpeculationReason#encode}. */\n+    public IsolatedSpeculationReasonEncoding encode(UnencodedSpeculationReason reason) {\n+        IsolatedSpeculationReasonEncoding encoding = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA0MDI5MA=="}, "originalCommit": {"oid": "59a23eee247546eebebcd2bb104e72b182151720"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgxNjI3OA==", "bodyText": "Please do cache the proxy class Proxy.newProxyInstance(...).getClass() in a static final field. Reflection accessors do not need to be cached as long as its arguments are compile-time constants.", "url": "https://github.com/oracle/graal/pull/2945#discussion_r519816278", "createdAt": "2020-11-09T13:32:16Z", "author": {"login": "peter-hofer"}, "path": "substratevm/src/com.oracle.svm.graal/src/com/oracle/svm/graal/isolated/IsolatedSpeculationLog.java", "diffHunk": "@@ -48,19 +54,63 @@ public void collectFailedSpeculations() {\n         collectFailedSpeculations0(IsolatedCompileContext.get().getClient(), handle);\n     }\n \n+    class SpeculationReasonInvocationHandler implements InvocationHandler {\n+        @Override\n+        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+            return IsolatedSpeculationReasonEncoding.class.getDeclaredMethod(method.getName(), method.getParameterTypes()).invoke(args);\n+        }\n+    }\n+\n+    class SpeculationReasonEncodingSupplier implements Supplier<Object> {\n+        private Object speculationReasonEncodingProxy;\n+\n+        SpeculationReasonEncodingSupplier(Object speculationReasonEncodingProxy) {\n+            this.speculationReasonEncodingProxy = speculationReasonEncodingProxy;\n+        }\n+\n+        @Override\n+        public Object get() {\n+            try {\n+                return speculationReasonEncodingProxy.getClass().getDeclaredConstructor().newInstance();\n+            } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n+                e.printStackTrace();\n+            }\n+            return null;\n+        }\n+    }\n+\n+    private byte[] getByteArray(SpeculationReason reason) {\n+        byte[] bytes = null;\n+        if (reason instanceof UnencodedSpeculationReason) {\n+            Object encoding = ((UnencodedSpeculationReason) reason).encode();\n+            assert encoding instanceof IsolatedSpeculationReasonEncoding;\n+            bytes = ((IsolatedSpeculationReasonEncoding) encoding).getByteArray();\n+        } else {\n+            try {\n+                Class<?> speculationReasonEncodingClass = Class.forName(\"jdk.vm.ci.meta.SpeculationLog$SpeculationReasonEncoding\");\n+                final Object speculationReasonEncodingProxy = Proxy.newProxyInstance(speculationReasonEncodingClass.getClassLoader(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAzNzMzNA=="}, "originalCommit": {"oid": "a75bea48ba1ecddf5e2e3ece06ead4e72bb5d7e9"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgxODIwMA==", "bodyText": "Probably best to just do PROXY_CLASS.getDeclaredConstructor(...).newInstance() here so the native image build can fold the reflective instantiation.", "url": "https://github.com/oracle/graal/pull/2945#discussion_r519818200", "createdAt": "2020-11-09T13:35:24Z", "author": {"login": "peter-hofer"}, "path": "substratevm/src/com.oracle.svm.graal/src/com/oracle/svm/graal/isolated/IsolatedSpeculationLog.java", "diffHunk": "@@ -48,19 +58,115 @@ public void collectFailedSpeculations() {\n         collectFailedSpeculations0(IsolatedCompileContext.get().getClient(), handle);\n     }\n \n+    static class SpeculationReasonInvocationHandler implements InvocationHandler {\n+        @Override\n+        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+            return IsolatedSpeculationReasonEncoding.class.getDeclaredMethod(method.getName(), method.getParameterTypes()).invoke(args);\n+        }\n+    }\n+\n+    static class SpeculationReasonEncodingSupplier implements Supplier<Object> {\n+        private final Object speculationReasonEncodingProxy;\n+\n+        SpeculationReasonEncodingSupplier(Object speculationReasonEncodingProxy) {\n+            this.speculationReasonEncodingProxy = speculationReasonEncodingProxy;\n+        }\n+\n+        @Override\n+        public Object get() {\n+            try {\n+                return speculationReasonEncodingProxy.getClass().getDeclaredConstructor().newInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a23eee247546eebebcd2bb104e72b182151720"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgyMDM4NA==", "bodyText": "The invoke call is missing a receiver of type IsolatedSpeculationReasonEncoding, which should first be instantiated in the supplier and passed to this invocation handler class via a constructor.", "url": "https://github.com/oracle/graal/pull/2945#discussion_r519820384", "createdAt": "2020-11-09T13:39:01Z", "author": {"login": "peter-hofer"}, "path": "substratevm/src/com.oracle.svm.graal/src/com/oracle/svm/graal/isolated/IsolatedSpeculationLog.java", "diffHunk": "@@ -48,19 +58,115 @@ public void collectFailedSpeculations() {\n         collectFailedSpeculations0(IsolatedCompileContext.get().getClient(), handle);\n     }\n \n+    static class SpeculationReasonInvocationHandler implements InvocationHandler {\n+        @Override\n+        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+            return IsolatedSpeculationReasonEncoding.class.getDeclaredMethod(method.getName(), method.getParameterTypes()).invoke(args);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a23eee247546eebebcd2bb104e72b182151720"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgyMTM4Ng==", "bodyText": "Please name this method encodeAsByteArray.", "url": "https://github.com/oracle/graal/pull/2945#discussion_r519821386", "createdAt": "2020-11-09T13:40:37Z", "author": {"login": "peter-hofer"}, "path": "substratevm/src/com.oracle.svm.graal/src/com/oracle/svm/graal/isolated/IsolatedSpeculationLog.java", "diffHunk": "@@ -48,19 +58,115 @@ public void collectFailedSpeculations() {\n         collectFailedSpeculations0(IsolatedCompileContext.get().getClient(), handle);\n     }\n \n+    static class SpeculationReasonInvocationHandler implements InvocationHandler {\n+        @Override\n+        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+            return IsolatedSpeculationReasonEncoding.class.getDeclaredMethod(method.getName(), method.getParameterTypes()).invoke(args);\n+        }\n+    }\n+\n+    static class SpeculationReasonEncodingSupplier implements Supplier<Object> {\n+        private final Object speculationReasonEncodingProxy;\n+\n+        SpeculationReasonEncodingSupplier(Object speculationReasonEncodingProxy) {\n+            this.speculationReasonEncodingProxy = speculationReasonEncodingProxy;\n+        }\n+\n+        @Override\n+        public Object get() {\n+            try {\n+                return speculationReasonEncodingProxy.getClass().getDeclaredConstructor().newInstance();\n+            } catch (InstantiationException | IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {\n+                e.printStackTrace();\n+            }\n+            return null;\n+        }\n+    }\n+\n+    private byte[] getByteArray(SpeculationReason reason) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59a23eee247546eebebcd2bb104e72b182151720"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzMDEwMg==", "bodyText": "I doubt the image build can optimize the reflective accesses, and on top of repeatedly doing lookups at runtime, we will need to register the methods of IsolatedSpeculationReasonEncoding as reflectively accessible in a Feature during the image build.\nSo I'd rather avoid this proxy, but I don't see how we can have a class that directly implements SpeculationReasonEncoding when that interface cannot be referenced in the code.", "url": "https://github.com/oracle/graal/pull/2945#discussion_r519830102", "createdAt": "2020-11-09T13:54:03Z", "author": {"login": "peter-hofer"}, "path": "substratevm/src/com.oracle.svm.graal/src/com/oracle/svm/graal/isolated/IsolatedSpeculationLog.java", "diffHunk": "@@ -48,19 +58,115 @@ public void collectFailedSpeculations() {\n         collectFailedSpeculations0(IsolatedCompileContext.get().getClient(), handle);\n     }\n \n+    static class SpeculationReasonInvocationHandler implements InvocationHandler {\n+        @Override\n+        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+            return IsolatedSpeculationReasonEncoding.class.getDeclaredMethod(method.getName(), method.getParameterTypes()).invoke(args);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgyMDM4NA=="}, "originalCommit": {"oid": "59a23eee247546eebebcd2bb104e72b182151720"}, "originalPosition": 33}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "59a23eee247546eebebcd2bb104e72b182151720", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/59a23eee247546eebebcd2bb104e72b182151720", "committedDate": "2020-11-02T15:12:29Z", "message": "Work around the absence of SpeculationReasonEncoding in OpenJDK11"}, "afterCommit": {"oid": "02915bf4e9fc3cc1c0a8f2f56e885394ccb17b2f", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/02915bf4e9fc3cc1c0a8f2f56e885394ccb17b2f", "committedDate": "2020-11-10T15:57:44Z", "message": "Work around the absence of SpeculationReasonEncoding in OpenJDK11"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "02915bf4e9fc3cc1c0a8f2f56e885394ccb17b2f", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/02915bf4e9fc3cc1c0a8f2f56e885394ccb17b2f", "committedDate": "2020-11-10T15:57:44Z", "message": "Work around the absence of SpeculationReasonEncoding in OpenJDK11"}, "afterCommit": {"oid": "cc4e19fc9c906397a0168509cce1ebf83be05e3b", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/cc4e19fc9c906397a0168509cce1ebf83be05e3b", "committedDate": "2020-11-10T21:49:20Z", "message": "Work around the absence of SpeculationReasonEncoding in OpenJDK11"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cc4e19fc9c906397a0168509cce1ebf83be05e3b", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/cc4e19fc9c906397a0168509cce1ebf83be05e3b", "committedDate": "2020-11-10T21:49:20Z", "message": "Work around the absence of SpeculationReasonEncoding in OpenJDK11"}, "afterCommit": {"oid": "71a5d51119850601cc7bd3f6df56749d9c780779", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/71a5d51119850601cc7bd3f6df56749d9c780779", "committedDate": "2020-11-10T21:57:44Z", "message": "Work around the absence of SpeculationReasonEncoding in OpenJDK11"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MjM2MzI4", "url": "https://github.com/oracle/graal/pull/2945#pullrequestreview-528236328", "createdAt": "2020-11-11T14:45:46Z", "commit": {"oid": "71a5d51119850601cc7bd3f6df56749d9c780779"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDo0NTo0NlrOHxQM5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDo0NTo0NlrOHxQM5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQwNzcxOA==", "bodyText": "There is a (significant) chance that this class is initialized during the image build and not only when encountering a class other than UnencodedSpeculationReason at runtime, in which case this will likely break the image build. Therefore, we have to just set all the static fields to null in that case.", "url": "https://github.com/oracle/graal/pull/2945#discussion_r521407718", "createdAt": "2020-11-11T14:45:46Z", "author": {"login": "peter-hofer"}, "path": "substratevm/src/com.oracle.svm.graal/src/com/oracle/svm/graal/isolated/IsolatedSpeculationLog.java", "diffHunk": "@@ -48,19 +58,140 @@ public void collectFailedSpeculations() {\n         collectFailedSpeculations0(IsolatedCompileContext.get().getClient(), handle);\n     }\n \n+    static class SpeculationReasonInvocationHandler implements InvocationHandler {\n+        private final IsolatedSpeculationReasonEncoding receiver;\n+\n+        SpeculationReasonInvocationHandler(IsolatedSpeculationReasonEncoding receiver) {\n+            this.receiver = receiver;\n+        }\n+\n+        @Override\n+        public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+            return IsolatedSpeculationReasonEncoding.class.getDeclaredMethod(method.getName(), method.getParameterTypes()).invoke(receiver, args);\n+        }\n+    }\n+\n+    static class SpeculationReasonEncodingSupplier implements Supplier<Object> {\n+        private static final Class<?> SPECULATION_REASON_ENCODING_PROXY_CLASS;\n+        private static final Constructor<?> SPECULATION_REASON_ENCODING_PROXY_CONSTRUCTOR;\n+        private static final Class<?> SPECULATION_REASON_ENCODING_CLASS;\n+        private static final String SPECULATION_REASON_ENCODING_NAME = \"jdk.vm.ci.meta.SpeculationLog$SpeculationReasonEncoding\";\n+\n+        static {\n+            Class<?> speculationReasonEncodingClass = null;\n+            try {\n+                speculationReasonEncodingClass = Class.forName(SPECULATION_REASON_ENCODING_NAME);\n+            } catch (ClassNotFoundException e) {\n+                VMError.shouldNotReachHere(SPECULATION_REASON_ENCODING_NAME +\n+                                \" not found in JDK. UnencodedSpeculationReason should have been used as SpeculationReason\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71a5d51119850601cc7bd3f6df56749d9c780779"}, "originalPosition": 48}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "71a5d51119850601cc7bd3f6df56749d9c780779", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/71a5d51119850601cc7bd3f6df56749d9c780779", "committedDate": "2020-11-10T21:57:44Z", "message": "Work around the absence of SpeculationReasonEncoding in OpenJDK11"}, "afterCommit": {"oid": "8fada26ee40bb164d87f10a18f23cdfc82c7039a", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/8fada26ee40bb164d87f10a18f23cdfc82c7039a", "committedDate": "2020-11-11T18:02:34Z", "message": "Work around the absence of SpeculationReasonEncoding in OpenJDK11"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8fada26ee40bb164d87f10a18f23cdfc82c7039a", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/8fada26ee40bb164d87f10a18f23cdfc82c7039a", "committedDate": "2020-11-11T18:02:34Z", "message": "Work around the absence of SpeculationReasonEncoding in OpenJDK11"}, "afterCommit": {"oid": "d488c9f9c16d9e94a4a328e2028c949a3dfaf53a", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/d488c9f9c16d9e94a4a328e2028c949a3dfaf53a", "committedDate": "2020-11-14T02:27:24Z", "message": "Work around the absence of SpeculationReasonEncoding in OpenJDK11"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d488c9f9c16d9e94a4a328e2028c949a3dfaf53a", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/d488c9f9c16d9e94a4a328e2028c949a3dfaf53a", "committedDate": "2020-11-14T02:27:24Z", "message": "Work around the absence of SpeculationReasonEncoding in OpenJDK11"}, "afterCommit": {"oid": "93257038538f3bf852d2f363d4ebfb34889663e8", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/93257038538f3bf852d2f363d4ebfb34889663e8", "committedDate": "2020-11-16T06:30:45Z", "message": "Work around the absence of SpeculationReasonEncoding in OpenJDK11"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMTA4MTA5", "url": "https://github.com/oracle/graal/pull/2945#pullrequestreview-531108109", "createdAt": "2020-11-16T08:45:54Z", "commit": {"oid": "93257038538f3bf852d2f363d4ebfb34889663e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODo0NTo1NFrOHztBOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODo0NTo1NFrOHztBOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk3NzAxNw==", "bodyText": "If I understand the review conversation, these reflective accesses will be converted to non-reflective accesses during image building. A comment should be added somewhere here explaining that. Does the added unit test check that this happens?", "url": "https://github.com/oracle/graal/pull/2945#discussion_r523977017", "createdAt": "2020-11-16T08:45:54Z", "author": {"login": "dougxc"}, "path": "substratevm/src/com.oracle.svm.graal/src/com/oracle/svm/graal/isolated/IsolatedSpeculationLog.java", "diffHunk": "@@ -48,19 +53,89 @@ public void collectFailedSpeculations() {\n         collectFailedSpeculations0(IsolatedCompileContext.get().getClient(), handle);\n     }\n \n+    private static byte[] encodeAsByteArray(SpeculationReason reason) {\n+        int groupId = 0;\n+        Object[] context = null;\n+        try {\n+            final Field groupIdField;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93257038538f3bf852d2f363d4ebfb34889663e8"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "93257038538f3bf852d2f363d4ebfb34889663e8", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/93257038538f3bf852d2f363d4ebfb34889663e8", "committedDate": "2020-11-16T06:30:45Z", "message": "Work around the absence of SpeculationReasonEncoding in OpenJDK11"}, "afterCommit": {"oid": "237e3fa9836b76fa062b64231b96779393d51ffa", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/237e3fa9836b76fa062b64231b96779393d51ffa", "committedDate": "2020-11-16T11:35:54Z", "message": "Work around the absence of SpeculationReasonEncoding in OpenJDK11"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50f65e5e24ca923a340ea6cc04e24a92046abbe6", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/50f65e5e24ca923a340ea6cc04e24a92046abbe6", "committedDate": "2020-11-24T11:48:13Z", "message": "Work around the absence of SpeculationReasonEncoding in OpenJDK11"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ed0307b1129dac119f1b60c89260ceff90bd065", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/0ed0307b1129dac119f1b60c89260ceff90bd065", "committedDate": "2020-11-24T12:10:57Z", "message": "Use jdk.vm.ci.meta.EncodedSpeculationReason with jdk8"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "237e3fa9836b76fa062b64231b96779393d51ffa", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/237e3fa9836b76fa062b64231b96779393d51ffa", "committedDate": "2020-11-16T11:35:54Z", "message": "Work around the absence of SpeculationReasonEncoding in OpenJDK11"}, "afterCommit": {"oid": "0ed0307b1129dac119f1b60c89260ceff90bd065", "author": {"user": {"login": "zakkak", "name": "Foivos"}}, "url": "https://github.com/oracle/graal/commit/0ed0307b1129dac119f1b60c89260ceff90bd065", "committedDate": "2020-11-24T12:10:57Z", "message": "Use jdk.vm.ci.meta.EncodedSpeculationReason with jdk8"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3OTE0MzM5", "url": "https://github.com/oracle/graal/pull/2945#pullrequestreview-537914339", "createdAt": "2020-11-24T21:02:06Z", "commit": {"oid": "0ed0307b1129dac119f1b60c89260ceff90bd065"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTowMjowN1rOH5VBeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTowMjowN1rOH5VBeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg3NTMyMQ==", "bodyText": "This comment should also explain why copying is necessary so that no one is tempted to \"uncopy\" it.", "url": "https://github.com/oracle/graal/pull/2945#discussion_r529875321", "createdAt": "2020-11-24T21:02:07Z", "author": {"login": "dougxc"}, "path": "substratevm/src/com.oracle.svm.graal/src/com/oracle/svm/graal/isolated/SpeculationReasonEncodingClone.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright (c) 2012, 2020, Oracle and/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ */\n+package com.oracle.svm.graal.isolated;\n+\n+import jdk.vm.ci.meta.ResolvedJavaField;\n+import jdk.vm.ci.meta.ResolvedJavaMethod;\n+import jdk.vm.ci.meta.ResolvedJavaType;\n+\n+/** Copied from {@code jdk.vm.ci.hotspot.HotSpotSpeculationEncoding.SpeculationReasonEncoding}. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ed0307b1129dac119f1b60c89260ceff90bd065"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MjA5NTY4", "url": "https://github.com/oracle/graal/pull/2945#pullrequestreview-538209568", "createdAt": "2020-11-25T07:15:20Z", "commit": {"oid": "0ed0307b1129dac119f1b60c89260ceff90bd065"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzoxNToyMFrOH5l2tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNzoxNToyMFrOH5l2tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDE1MTA5NQ==", "bodyText": "Feedback from internal review:\n\nInstead of reflection, it is better to use a method handle returned by MethodHandles.lookup().unreflectGetter and stored in a static final field. The method handle is then really intrinsified to a direct field access.", "url": "https://github.com/oracle/graal/pull/2945#discussion_r530151095", "createdAt": "2020-11-25T07:15:20Z", "author": {"login": "peter-hofer"}, "path": "substratevm/src/com.oracle.svm.graal/src/com/oracle/svm/graal/isolated/IsolatedSpeculationLog.java", "diffHunk": "@@ -48,19 +53,95 @@ public void collectFailedSpeculations() {\n         collectFailedSpeculations0(IsolatedCompileContext.get().getClient(), handle);\n     }\n \n+    private static byte[] encodeAsByteArray(SpeculationReason reason) {\n+        int groupId = 0;\n+        Object[] context = null;\n+        try {\n+            final Field groupIdField;\n+            final Field contextField;\n+            /*\n+             * The following reflective accesses do not add runtime overhead as they are being\n+             * converted to direct accesses during image building. Maintaining two separate paths\n+             * that invoke {@code getDeclaredField} ensures that the analysis will be able to\n+             * optimize the reflective accesses and convert them to direct ones.\n+             */\n+            if (reason instanceof UnencodedSpeculationReason) {\n+                final Class<?> klass = UnencodedSpeculationReason.class;\n+                groupIdField = klass.getDeclaredField(\"groupId\");\n+                contextField = klass.getDeclaredField(\"context\");\n+            } else {\n+                final Class<?> klass = Class.forName(\"jdk.vm.ci.meta.EncodedSpeculationReason\");\n+                groupIdField = klass.getDeclaredField(\"groupId\");\n+                contextField = klass.getDeclaredField(\"context\");\n+            }\n+            groupIdField.setAccessible(true);\n+            groupId = groupIdField.getInt(reason);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ed0307b1129dac119f1b60c89260ceff90bd065"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 959, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}