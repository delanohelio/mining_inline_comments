{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NDM0Mjk3", "number": 2360, "title": "Support WithExceptionNode in IntrinsicGraphBuilder", "bodyText": "Fixes a problem introduced by the recent addition of ArrayCopyWithExceptionNode. When System.arraycopy is compiled as a root method, the IntrinsicGraphBuilder needs to properly link the control flow and also create the exception unwind nodes.", "createdAt": "2020-04-18T03:02:43Z", "url": "https://github.com/oracle/graal/pull/2360", "merged": true, "mergeCommit": {"oid": "4520ef442221845f8df1b74378290210377106a5"}, "closed": true, "closedAt": "2020-04-19T23:25:56Z", "author": {"login": "christianwimmer"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcY29fRAFqTM5NTkxOTYyNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZA7-jABqjMyNDg1ODQxNDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1OTE5NjI2", "url": "https://github.com/oracle/graal/pull/2360#pullrequestreview-395919626", "createdAt": "2020-04-18T14:41:52Z", "commit": {"oid": "c858675537ceef8035c9cccd64528f15e30747e7"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNDo0MTo1MlrOGHriEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNDo0MTo1MlrOGHriEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwNjQ0OQ==", "bodyText": "This should just be:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            AbstractBeginNode normalSuccessor;\n          \n          \n            \n                            if (withExceptionNode instanceof SingleMemoryKill) {\n          \n          \n            \n                                normalSuccessor = graph.add(KillingBeginNode.create(((SingleMemoryKill) withExceptionNode).getKilledLocationIdentity()));\n          \n          \n            \n                            } else if (withExceptionNode instanceof MultiMemoryKill) {\n          \n          \n            \n                                normalSuccessor = graph.add(MultiKillingBeginNode.create(((MultiMemoryKill) withExceptionNode).getKilledLocationIdentities()));\n          \n          \n            \n                            } else {\n          \n          \n            \n                                assert !(withExceptionNode instanceof MemoryKill) : \"missing a MemoryKill\";\n          \n          \n            \n                                normalSuccessor = graph.add(new BeginNode());\n          \n          \n            \n                            }\n          \n          \n            \n                            AbstractBeginNode normalSuccessor = withExceptionNode.createNextBegin();\n          \n      \n    \n    \n  \n\nLooks good to me otherwise.", "url": "https://github.com/oracle/graal/pull/2360#discussion_r410706449", "createdAt": "2020-04-18T14:41:52Z", "author": {"login": "gergo-"}, "path": "compiler/src/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/IntrinsicGraphBuilder.java", "diffHunk": "@@ -134,12 +146,46 @@ protected IntrinsicGraphBuilder(OptionValues options, DebugContext debug, CorePr\n                 FixedWithNextNode fixedWithNextNode = (FixedWithNextNode) fixedNode;\n                 assert fixedWithNextNode.next() == null : \"cannot append instruction to instruction which isn't end\";\n                 lastInstr = fixedWithNextNode;\n+\n+            } else if (fixedNode instanceof WithExceptionNode) {\n+                WithExceptionNode withExceptionNode = (WithExceptionNode) fixedNode;\n+                AbstractBeginNode normalSuccessor;\n+                if (withExceptionNode instanceof SingleMemoryKill) {\n+                    normalSuccessor = graph.add(KillingBeginNode.create(((SingleMemoryKill) withExceptionNode).getKilledLocationIdentity()));\n+                } else if (withExceptionNode instanceof MultiMemoryKill) {\n+                    normalSuccessor = graph.add(MultiKillingBeginNode.create(((MultiMemoryKill) withExceptionNode).getKilledLocationIdentities()));\n+                } else {\n+                    assert !(withExceptionNode instanceof MemoryKill) : \"missing a MemoryKill\";\n+                    normalSuccessor = graph.add(new BeginNode());\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c858675537ceef8035c9cccd64528f15e30747e7"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1OTIwMjE1", "url": "https://github.com/oracle/graal/pull/2360#pullrequestreview-395920215", "createdAt": "2020-04-18T14:48:54Z", "commit": {"oid": "c858675537ceef8035c9cccd64528f15e30747e7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNDo0ODo1NFrOGHrlew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQxNDo0ODo1NFrOGHrlew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcwNzMyMw==", "bodyText": "typo: Exeption", "url": "https://github.com/oracle/graal/pull/2360#discussion_r410707323", "createdAt": "2020-04-18T14:48:54Z", "author": {"login": "gergo-"}, "path": "compiler/src/org.graalvm.compiler.replacements/src/org/graalvm/compiler/replacements/IntrinsicGraphBuilder.java", "diffHunk": "@@ -134,12 +146,46 @@ protected IntrinsicGraphBuilder(OptionValues options, DebugContext debug, CorePr\n                 FixedWithNextNode fixedWithNextNode = (FixedWithNextNode) fixedNode;\n                 assert fixedWithNextNode.next() == null : \"cannot append instruction to instruction which isn't end\";\n                 lastInstr = fixedWithNextNode;\n+\n+            } else if (fixedNode instanceof WithExceptionNode) {\n+                WithExceptionNode withExceptionNode = (WithExceptionNode) fixedNode;\n+                AbstractBeginNode normalSuccessor;\n+                if (withExceptionNode instanceof SingleMemoryKill) {\n+                    normalSuccessor = graph.add(KillingBeginNode.create(((SingleMemoryKill) withExceptionNode).getKilledLocationIdentity()));\n+                } else if (withExceptionNode instanceof MultiMemoryKill) {\n+                    normalSuccessor = graph.add(MultiKillingBeginNode.create(((MultiMemoryKill) withExceptionNode).getKilledLocationIdentities()));\n+                } else {\n+                    assert !(withExceptionNode instanceof MemoryKill) : \"missing a MemoryKill\";\n+                    normalSuccessor = graph.add(new BeginNode());\n+                }\n+                ExceptionObjectNode exceptionSuccessor = graph.add(new ExceptionObjectNode(getMetaAccess()));\n+                setExeptionState(exceptionSuccessor);\n+                exceptionSuccessor.setNext(graph.add(new UnwindNode(exceptionSuccessor)));\n+\n+                if (unwindCreated) {\n+                    throw GraalError.shouldNotReachHere(\"Intrinsic graph can only have one node with an exception edge\");\n+                }\n+                unwindCreated = true;\n+\n+                withExceptionNode.setNext(normalSuccessor);\n+                withExceptionNode.setExceptionEdge(exceptionSuccessor);\n+                lastInstr = normalSuccessor;\n+\n             } else {\n                 lastInstr = null;\n             }\n         }\n     }\n \n+    /**\n+     * Currently unimplemented here, but implemented in subclasses that need it.\n+     *\n+     * @param exceptionObject The node that needs an exception state.\n+     */\n+    protected void setExeptionState(ExceptionObjectNode exceptionObject) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c858675537ceef8035c9cccd64528f15e30747e7"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b6ab04484877b0b7268abd2c911d66fac4025ff", "author": {"user": {"login": "christianwimmer", "name": "Christian Wimmer"}}, "url": "https://github.com/oracle/graal/commit/3b6ab04484877b0b7268abd2c911d66fac4025ff", "committedDate": "2020-04-19T02:17:26Z", "message": "Support WithExceptionNode in IntrinsicGraphBuilder"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c858675537ceef8035c9cccd64528f15e30747e7", "author": {"user": {"login": "christianwimmer", "name": "Christian Wimmer"}}, "url": "https://github.com/oracle/graal/commit/c858675537ceef8035c9cccd64528f15e30747e7", "committedDate": "2020-04-18T02:47:27Z", "message": "Support WithExceptionNode in IntrinsicGraphBuilder"}, "afterCommit": {"oid": "3b6ab04484877b0b7268abd2c911d66fac4025ff", "author": {"user": {"login": "christianwimmer", "name": "Christian Wimmer"}}, "url": "https://github.com/oracle/graal/commit/3b6ab04484877b0b7268abd2c911d66fac4025ff", "committedDate": "2020-04-19T02:17:26Z", "message": "Support WithExceptionNode in IntrinsicGraphBuilder"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1145, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}