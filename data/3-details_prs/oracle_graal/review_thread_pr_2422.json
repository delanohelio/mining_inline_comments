{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNzc4NjM2", "number": 2422, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxNDozOVrOD4MNlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxNDozOVrOD4MNlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjQ2OTMyOnYy", "diffSide": "RIGHT", "path": "substratevm/src/com.oracle.svm.configure/src/com/oracle/svm/configure/trace/AccessAdvisor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQyMDoxNDozOVrOGO4uFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxMDo1MDowMFrOGShh_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2MjU0OQ==", "bodyText": "A small question - could this also work like copyBuiltinCallerFilterTree?  It would copy accessWithoutCallerFilter, and then we could remove\n        if (callerClass.get() == null && !accessWithoutCallerFilter.treeIncludes(queriedClass.get())) {\n            return true;\n        }\n\nfrom the shouldIgnore call?", "url": "https://github.com/oracle/graal/pull/2422#discussion_r418262549", "createdAt": "2020-04-30T20:14:39Z", "author": {"login": "gradinac"}, "path": "substratevm/src/com.oracle.svm.configure/src/com/oracle/svm/configure/trace/AccessAdvisor.java", "diffHunk": "@@ -67,16 +67,18 @@ public static RuleNode copyBuiltinCallerFilterTree() {\n         return internalCallerFilter.copy();\n     }\n \n+    public static RuleNode copyBuiltinAccessFilterTree() {\n+        RuleNode root = RuleNode.createRoot();\n+        root.addOrGetChildren(\"**\", RuleNode.Inclusion.Include);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e15b432fe93d1af135045bcd75d71c4b6e8dce5"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTYwNDgwMg==", "bodyText": "I'm not sure if I understand correctly. It would probably be fine to merge the two filters, but accessWithoutCallerFilter is specifically for cases in which we don't know the caller class and it's very likely an internal access (JVMCI, Libgraal, JVM startup) where we assume it shouldn't end up in the user configuration, so I'd prefer to keep it separate.", "url": "https://github.com/oracle/graal/pull/2422#discussion_r421604802", "createdAt": "2020-05-07T15:42:48Z", "author": {"login": "peter-hofer"}, "path": "substratevm/src/com.oracle.svm.configure/src/com/oracle/svm/configure/trace/AccessAdvisor.java", "diffHunk": "@@ -67,16 +67,18 @@ public static RuleNode copyBuiltinCallerFilterTree() {\n         return internalCallerFilter.copy();\n     }\n \n+    public static RuleNode copyBuiltinAccessFilterTree() {\n+        RuleNode root = RuleNode.createRoot();\n+        root.addOrGetChildren(\"**\", RuleNode.Inclusion.Include);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2MjU0OQ=="}, "originalCommit": {"oid": "2e15b432fe93d1af135045bcd75d71c4b6e8dce5"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjA3NjkyNA==", "bodyText": "Ahh, I overlooked the purpose initially, my bad. I agree, it's best to keep it separate.", "url": "https://github.com/oracle/graal/pull/2422#discussion_r422076924", "createdAt": "2020-05-08T10:50:00Z", "author": {"login": "gradinac"}, "path": "substratevm/src/com.oracle.svm.configure/src/com/oracle/svm/configure/trace/AccessAdvisor.java", "diffHunk": "@@ -67,16 +67,18 @@ public static RuleNode copyBuiltinCallerFilterTree() {\n         return internalCallerFilter.copy();\n     }\n \n+    public static RuleNode copyBuiltinAccessFilterTree() {\n+        RuleNode root = RuleNode.createRoot();\n+        root.addOrGetChildren(\"**\", RuleNode.Inclusion.Include);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODI2MjU0OQ=="}, "originalCommit": {"oid": "2e15b432fe93d1af135045bcd75d71c4b6e8dce5"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 901, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}