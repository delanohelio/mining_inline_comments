{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5NjkzMzgx", "number": 4907, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNTo1MDo0NFrODvMUoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTo0NjoxMlrODwdjKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODExNTUzOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNTo1MDo0NFrOGBeWww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNTo1MDo0NFrOGBeWww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE5OTEwNw==", "bodyText": "Setting a key here seems unnecessary since the setting with XX  on line 215 should clear TTL.", "url": "https://github.com/apache/geode/pull/4907#discussion_r404199107", "createdAt": "2020-04-06T15:50:44Z", "author": {"login": "sabbey37"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java", "diffHunk": "@@ -92,13 +92,282 @@ public static void tearDown() {\n     server.shutdown();\n   }\n \n+\n+  @Test\n+  public void testSET_shouldSetStringValueToKey_givenEmptyKey() {\n+\n+    String key = \"key\";\n+    String value = \"value\";\n+\n+    String result = jedis.get(key);\n+    assertThat(result).isNull();\n+\n+    jedis.set(key, value);\n+    result = jedis.get(key);\n+    assertThat(result).isEqualTo(value);\n+  }\n+\n+  @Test\n+  public void testSET_shouldSetStringValueToKey_givenKeyContainingOtherDataType() {\n+    String key = \"key\";\n+    String stringValue = \"value\";\n+\n+    jedis.sadd(key, \"member1\", \"member2\");\n+\n+    jedis.set(key, stringValue);\n+    String result = jedis.get(key);\n+\n+    assertThat(result).isEqualTo(stringValue);\n+  }\n+\n+  @Test\n+  public void testSET_shouldHonorNX_evenIfKeyContainsOtherDataType() {\n+    String key = \"key\";\n+    String stringValue = \"value\";\n+\n+    jedis.sadd(key, \"member1\", \"member2\");\n+    SetParams setParams = new SetParams();\n+    setParams.nx();\n+\n+    String result = jedis.set(key, stringValue, setParams);\n+    assertThat(result).isNull();\n+  }\n+\n+  @Test\n+  public void testSET_shouldHonorXX_evenIfKeyContainsOtherDataType() {\n+    String key = \"key\";\n+    String stringValue = \"value\";\n+\n+    jedis.sadd(key, \"member1\", \"member2\");\n+    SetParams setParams = new SetParams();\n+    setParams.xx();\n+\n+    jedis.set(key, stringValue, setParams);\n+    String result = jedis.get(key);\n+\n+    assertThat(result).isEqualTo(stringValue);\n+  }\n+\n+  @Test\n+  public void testSET_shouldAccept_EX_argumentToSetExpireTime() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int secondsUntilExpiration = 20;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.ex(secondsUntilExpiration);\n+\n+    jedis.set(key, value, setParams);\n+\n+    Long result = jedis.ttl(key);\n+\n+    assertThat(result).isGreaterThan(15l);\n+  }\n+\n+  @Test\n+  public void testSET_shouldAccept_PX_argumentToSetExpireTime() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int millisecondsUntilExpiration = 20000;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.px(millisecondsUntilExpiration);\n+\n+    jedis.set(key, value, setParams);\n+\n+    Long result = jedis.ttl(key);\n+\n+    assertThat(result).isGreaterThan(15l);\n+  }\n+\n+  @Test\n+  public void testSET_shouldClearPreviousTTL_onSuccess() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int secondsUntilExpiration = 20;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.ex(secondsUntilExpiration);\n+\n+    jedis.set(key, value, setParams);\n+\n+    jedis.set(key, \"other value\");\n+\n+    Long result = jedis.ttl(key);\n+\n+    assertThat(result).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void testSET_shouldClearPreviousTTL_onXXSuccess() {\n+    String key = \"xx_key\";\n+    String value = \"did exist\";\n+    int secondsUntilExpiration = 20;\n+    SetParams setParamsXX = new SetParams();\n+    setParamsXX.xx();\n+    SetParams setParamsEX = new SetParams();\n+    setParamsEX.ex(secondsUntilExpiration);\n+    String result_EX = jedis.set(key, value, setParamsEX);\n+    assertThat(result_EX).isEqualTo(\"OK\");\n+    assertThat(jedis.ttl(key)).isGreaterThan(15L);\n+    jedis.set(key, value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1268b2d23a34bd52f0fc91b4423b74de67fc0255"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwODExODQxOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNTo1MToyN1rOGBeYrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wNlQxNTo1MToyN1rOGBeYrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDE5OTU5Nw==", "bodyText": "This parameter is not used.", "url": "https://github.com/apache/geode/pull/4907#discussion_r404199597", "createdAt": "2020-04-06T15:51:27Z", "author": {"login": "sabbey37"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java", "diffHunk": "@@ -92,13 +92,282 @@ public static void tearDown() {\n     server.shutdown();\n   }\n \n+\n+  @Test\n+  public void testSET_shouldSetStringValueToKey_givenEmptyKey() {\n+\n+    String key = \"key\";\n+    String value = \"value\";\n+\n+    String result = jedis.get(key);\n+    assertThat(result).isNull();\n+\n+    jedis.set(key, value);\n+    result = jedis.get(key);\n+    assertThat(result).isEqualTo(value);\n+  }\n+\n+  @Test\n+  public void testSET_shouldSetStringValueToKey_givenKeyContainingOtherDataType() {\n+    String key = \"key\";\n+    String stringValue = \"value\";\n+\n+    jedis.sadd(key, \"member1\", \"member2\");\n+\n+    jedis.set(key, stringValue);\n+    String result = jedis.get(key);\n+\n+    assertThat(result).isEqualTo(stringValue);\n+  }\n+\n+  @Test\n+  public void testSET_shouldHonorNX_evenIfKeyContainsOtherDataType() {\n+    String key = \"key\";\n+    String stringValue = \"value\";\n+\n+    jedis.sadd(key, \"member1\", \"member2\");\n+    SetParams setParams = new SetParams();\n+    setParams.nx();\n+\n+    String result = jedis.set(key, stringValue, setParams);\n+    assertThat(result).isNull();\n+  }\n+\n+  @Test\n+  public void testSET_shouldHonorXX_evenIfKeyContainsOtherDataType() {\n+    String key = \"key\";\n+    String stringValue = \"value\";\n+\n+    jedis.sadd(key, \"member1\", \"member2\");\n+    SetParams setParams = new SetParams();\n+    setParams.xx();\n+\n+    jedis.set(key, stringValue, setParams);\n+    String result = jedis.get(key);\n+\n+    assertThat(result).isEqualTo(stringValue);\n+  }\n+\n+  @Test\n+  public void testSET_shouldAccept_EX_argumentToSetExpireTime() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int secondsUntilExpiration = 20;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.ex(secondsUntilExpiration);\n+\n+    jedis.set(key, value, setParams);\n+\n+    Long result = jedis.ttl(key);\n+\n+    assertThat(result).isGreaterThan(15l);\n+  }\n+\n+  @Test\n+  public void testSET_shouldAccept_PX_argumentToSetExpireTime() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int millisecondsUntilExpiration = 20000;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.px(millisecondsUntilExpiration);\n+\n+    jedis.set(key, value, setParams);\n+\n+    Long result = jedis.ttl(key);\n+\n+    assertThat(result).isGreaterThan(15l);\n+  }\n+\n+  @Test\n+  public void testSET_shouldClearPreviousTTL_onSuccess() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int secondsUntilExpiration = 20;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.ex(secondsUntilExpiration);\n+\n+    jedis.set(key, value, setParams);\n+\n+    jedis.set(key, \"other value\");\n+\n+    Long result = jedis.ttl(key);\n+\n+    assertThat(result).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void testSET_shouldClearPreviousTTL_onXXSuccess() {\n+    String key = \"xx_key\";\n+    String value = \"did exist\";\n+    int secondsUntilExpiration = 20;\n+    SetParams setParamsXX = new SetParams();\n+    setParamsXX.xx();\n+    SetParams setParamsEX = new SetParams();\n+    setParamsEX.ex(secondsUntilExpiration);\n+    String result_EX = jedis.set(key, value, setParamsEX);\n+    assertThat(result_EX).isEqualTo(\"OK\");\n+    assertThat(jedis.ttl(key)).isGreaterThan(15L);\n+    jedis.set(key, value);\n+\n+    String result_XX = jedis.set(key, value, setParamsXX);\n+\n+    assertThat(result_XX).isEqualTo(\"OK\");\n+    Long result = jedis.ttl(key);\n+    assertThat(result).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void testSET_should_not_clearPreviousTTL_onFailure() {\n+    String key_NX = \"nx_key\";\n+    String value_NX = \"set only if key did not exist\";\n+    int secondsUntilExpiration = 20;\n+\n+    SetParams setParamsEX = new SetParams();\n+    setParamsEX.ex(secondsUntilExpiration);\n+\n+    SetParams setParamsXX = new SetParams();\n+    setParamsXX.xx();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1268b2d23a34bd52f0fc91b4423b74de67fc0255"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTA5OTI1OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDozMToxN1rOGDbYQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToyMDo0N1rOGDdimw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0NzQ5MA==", "bodyText": "the names of these tests are inconsistent:\nhere Does_not_Exist has underscores when the convention suggests no underscores and camelCase\nthe word HONOR used above seems inconsistent with the other language of the the test names.", "url": "https://github.com/apache/geode/pull/4907#discussion_r406247490", "createdAt": "2020-04-09T14:31:17Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java", "diffHunk": "@@ -92,13 +93,328 @@ public static void tearDown() {\n     server.shutdown();\n   }\n \n+\n+  @Test\n+  public void testSET_shouldSetStringValueToKey_givenEmptyKey() {\n+\n+    String key = \"key\";\n+    String value = \"value\";\n+\n+    String result = jedis.get(key);\n+    assertThat(result).isNull();\n+\n+    jedis.set(key, value);\n+    result = jedis.get(key);\n+    assertThat(result).isEqualTo(value);\n+  }\n+\n+  @Test\n+  public void testSET_shouldSetStringValueToKey_givenKeyContainingOtherDataType() {\n+    String key = \"key\";\n+    String stringValue = \"value\";\n+\n+    jedis.sadd(key, \"member1\", \"member2\");\n+\n+    jedis.set(key, stringValue);\n+    String result = jedis.get(key);\n+\n+    assertThat(result).isEqualTo(stringValue);\n+  }\n+\n+  @Test\n+  public void testSET_shouldHonorNX_evenIfKeyContainsOtherDataType() {\n+    String key = \"key\";\n+    String stringValue = \"value\";\n+\n+    jedis.sadd(key, \"member1\", \"member2\");\n+    SetParams setParams = new SetParams();\n+    setParams.nx();\n+\n+    String result = jedis.set(key, stringValue, setParams);\n+    assertThat(result).isNull();\n+  }\n+\n+  @Test\n+  public void testSET_shouldHonorXX_evenIfKeyContainsOtherDataType() {\n+    String key = \"key\";\n+    String stringValue = \"value\";\n+\n+    jedis.sadd(key, \"member1\", \"member2\");\n+    SetParams setParams = new SetParams();\n+    setParams.xx();\n+\n+    jedis.set(key, stringValue, setParams);\n+    String result = jedis.get(key);\n+\n+    assertThat(result).isEqualTo(stringValue);\n+  }\n+\n+  @Test\n+  public void testSET_shouldAccept_EX_argumentToSetExpireTime() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int secondsUntilExpiration = 20;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.ex(secondsUntilExpiration);\n+\n+    jedis.set(key, value, setParams);\n+\n+    Long result = jedis.ttl(key);\n+\n+    assertThat(result).isGreaterThan(15l);\n+  }\n+\n+  @Test\n+  public void testSET_with_Negative_EX_time_shouldReturnError() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int millisecondsUntilExpiration = -1;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.ex(millisecondsUntilExpiration);\n+\n+    assertThatThrownBy(() -> jedis.set(key, value, setParams))\n+        .isInstanceOf(JedisDataException.class)\n+        .hasMessageContaining(RedisConstants.ERROR_INVALID_EXPIRE_TIME);\n+  }\n+\n+  @Test\n+  public void testSET_shouldAccept_PX_argumentToSetExpireTime() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int millisecondsUntilExpiration = 20000;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.px(millisecondsUntilExpiration);\n+\n+    jedis.set(key, value, setParams);\n+\n+    Long result = jedis.ttl(key);\n+\n+    assertThat(result).isGreaterThan(15l);\n+  }\n+\n+  @Test\n+  public void testSET_with_Negative_PX_time_shouldReturnError() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int millisecondsUntilExpiration = -1;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.px(millisecondsUntilExpiration);\n+\n+    assertThatThrownBy(() -> jedis.set(key, value, setParams))\n+        .isInstanceOf(JedisDataException.class)\n+        .hasMessageContaining(RedisConstants.ERROR_INVALID_EXPIRE_TIME);\n+  }\n+\n+  @Test\n+  public void testSET_shouldClearPreviousTTL_onSuccess() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int secondsUntilExpiration = 20;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.ex(secondsUntilExpiration);\n+\n+    jedis.set(key, value, setParams);\n+\n+    jedis.set(key, \"other value\");\n+\n+    Long result = jedis.ttl(key);\n+\n+    assertThat(result).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void testSET_shouldClearPreviousTTL_onXXSuccess() {\n+    String key = \"xx_key\";\n+    String value = \"did exist\";\n+    int secondsUntilExpiration = 20;\n+    SetParams setParamsXX = new SetParams();\n+    setParamsXX.xx();\n+    SetParams setParamsEX = new SetParams();\n+    setParamsEX.ex(secondsUntilExpiration);\n+    String result_EX = jedis.set(key, value, setParamsEX);\n+    assertThat(result_EX).isEqualTo(\"OK\");\n+    assertThat(jedis.ttl(key)).isGreaterThan(15L);\n+\n+    String result_XX = jedis.set(key, value, setParamsXX);\n+\n+    assertThat(result_XX).isEqualTo(\"OK\");\n+    Long result = jedis.ttl(key);\n+    assertThat(result).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void testSET_should_not_clearPreviousTTL_onFailure() {\n+    String key_NX = \"nx_key\";\n+    String value_NX = \"set only if key did not exist\";\n+    int secondsUntilExpiration = 20;\n+\n+    SetParams setParamsEX = new SetParams();\n+    setParamsEX.ex(secondsUntilExpiration);\n+\n+    SetParams setParamsNX = new SetParams();\n+    setParamsNX.nx();\n+\n+    jedis.set(key_NX, value_NX, setParamsEX);\n+    String result_NX = jedis.set(key_NX, value_NX, setParamsNX);\n+    assertThat(result_NX).isNull();\n+\n+    Long result = jedis.ttl(key_NX);\n+    assertThat(result).isGreaterThan(15L);\n+  }\n+\n+  @Test\n+  @Ignore\n+  public void testSET_with_KEEPTTL_shouldRetainPreviousTTL_OnSuccess() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int secondsToExpire = 30;\n+\n+    SetParams setParamsEx = new SetParams();\n+    setParamsEx.ex(secondsToExpire);\n+\n+    jedis.set(key, value, setParamsEx);\n+\n+    SetParams setParamsKeepTTL = new SetParams();\n+    // setParamsKeepTTL.keepTtl();\n+    // Jedis Doesn't support KEEPTTL yet.\n+\n+    jedis.set(key, \"newValue\", setParamsKeepTTL);\n+\n+    Long result = jedis.ttl(key);\n+    assertThat(result).isGreaterThan(15L);\n+  }\n+\n+  @Test\n+  public void testSET_shouldAccept_NX_argumentToOnlySetKeyIfIt_Does_not_Exist() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe28f03732f06454b8a0dc76ba37907e6717f512"}, "originalPosition": 231}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4MjkwNw==", "bodyText": "done", "url": "https://github.com/apache/geode/pull/4907#discussion_r406282907", "createdAt": "2020-04-09T15:20:47Z", "author": {"login": "xtreme-prasath"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java", "diffHunk": "@@ -92,13 +93,328 @@ public static void tearDown() {\n     server.shutdown();\n   }\n \n+\n+  @Test\n+  public void testSET_shouldSetStringValueToKey_givenEmptyKey() {\n+\n+    String key = \"key\";\n+    String value = \"value\";\n+\n+    String result = jedis.get(key);\n+    assertThat(result).isNull();\n+\n+    jedis.set(key, value);\n+    result = jedis.get(key);\n+    assertThat(result).isEqualTo(value);\n+  }\n+\n+  @Test\n+  public void testSET_shouldSetStringValueToKey_givenKeyContainingOtherDataType() {\n+    String key = \"key\";\n+    String stringValue = \"value\";\n+\n+    jedis.sadd(key, \"member1\", \"member2\");\n+\n+    jedis.set(key, stringValue);\n+    String result = jedis.get(key);\n+\n+    assertThat(result).isEqualTo(stringValue);\n+  }\n+\n+  @Test\n+  public void testSET_shouldHonorNX_evenIfKeyContainsOtherDataType() {\n+    String key = \"key\";\n+    String stringValue = \"value\";\n+\n+    jedis.sadd(key, \"member1\", \"member2\");\n+    SetParams setParams = new SetParams();\n+    setParams.nx();\n+\n+    String result = jedis.set(key, stringValue, setParams);\n+    assertThat(result).isNull();\n+  }\n+\n+  @Test\n+  public void testSET_shouldHonorXX_evenIfKeyContainsOtherDataType() {\n+    String key = \"key\";\n+    String stringValue = \"value\";\n+\n+    jedis.sadd(key, \"member1\", \"member2\");\n+    SetParams setParams = new SetParams();\n+    setParams.xx();\n+\n+    jedis.set(key, stringValue, setParams);\n+    String result = jedis.get(key);\n+\n+    assertThat(result).isEqualTo(stringValue);\n+  }\n+\n+  @Test\n+  public void testSET_shouldAccept_EX_argumentToSetExpireTime() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int secondsUntilExpiration = 20;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.ex(secondsUntilExpiration);\n+\n+    jedis.set(key, value, setParams);\n+\n+    Long result = jedis.ttl(key);\n+\n+    assertThat(result).isGreaterThan(15l);\n+  }\n+\n+  @Test\n+  public void testSET_with_Negative_EX_time_shouldReturnError() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int millisecondsUntilExpiration = -1;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.ex(millisecondsUntilExpiration);\n+\n+    assertThatThrownBy(() -> jedis.set(key, value, setParams))\n+        .isInstanceOf(JedisDataException.class)\n+        .hasMessageContaining(RedisConstants.ERROR_INVALID_EXPIRE_TIME);\n+  }\n+\n+  @Test\n+  public void testSET_shouldAccept_PX_argumentToSetExpireTime() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int millisecondsUntilExpiration = 20000;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.px(millisecondsUntilExpiration);\n+\n+    jedis.set(key, value, setParams);\n+\n+    Long result = jedis.ttl(key);\n+\n+    assertThat(result).isGreaterThan(15l);\n+  }\n+\n+  @Test\n+  public void testSET_with_Negative_PX_time_shouldReturnError() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int millisecondsUntilExpiration = -1;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.px(millisecondsUntilExpiration);\n+\n+    assertThatThrownBy(() -> jedis.set(key, value, setParams))\n+        .isInstanceOf(JedisDataException.class)\n+        .hasMessageContaining(RedisConstants.ERROR_INVALID_EXPIRE_TIME);\n+  }\n+\n+  @Test\n+  public void testSET_shouldClearPreviousTTL_onSuccess() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int secondsUntilExpiration = 20;\n+\n+    SetParams setParams = new SetParams();\n+    setParams.ex(secondsUntilExpiration);\n+\n+    jedis.set(key, value, setParams);\n+\n+    jedis.set(key, \"other value\");\n+\n+    Long result = jedis.ttl(key);\n+\n+    assertThat(result).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void testSET_shouldClearPreviousTTL_onXXSuccess() {\n+    String key = \"xx_key\";\n+    String value = \"did exist\";\n+    int secondsUntilExpiration = 20;\n+    SetParams setParamsXX = new SetParams();\n+    setParamsXX.xx();\n+    SetParams setParamsEX = new SetParams();\n+    setParamsEX.ex(secondsUntilExpiration);\n+    String result_EX = jedis.set(key, value, setParamsEX);\n+    assertThat(result_EX).isEqualTo(\"OK\");\n+    assertThat(jedis.ttl(key)).isGreaterThan(15L);\n+\n+    String result_XX = jedis.set(key, value, setParamsXX);\n+\n+    assertThat(result_XX).isEqualTo(\"OK\");\n+    Long result = jedis.ttl(key);\n+    assertThat(result).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void testSET_should_not_clearPreviousTTL_onFailure() {\n+    String key_NX = \"nx_key\";\n+    String value_NX = \"set only if key did not exist\";\n+    int secondsUntilExpiration = 20;\n+\n+    SetParams setParamsEX = new SetParams();\n+    setParamsEX.ex(secondsUntilExpiration);\n+\n+    SetParams setParamsNX = new SetParams();\n+    setParamsNX.nx();\n+\n+    jedis.set(key_NX, value_NX, setParamsEX);\n+    String result_NX = jedis.set(key_NX, value_NX, setParamsNX);\n+    assertThat(result_NX).isNull();\n+\n+    Long result = jedis.ttl(key_NX);\n+    assertThat(result).isGreaterThan(15L);\n+  }\n+\n+  @Test\n+  @Ignore\n+  public void testSET_with_KEEPTTL_shouldRetainPreviousTTL_OnSuccess() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    int secondsToExpire = 30;\n+\n+    SetParams setParamsEx = new SetParams();\n+    setParamsEx.ex(secondsToExpire);\n+\n+    jedis.set(key, value, setParamsEx);\n+\n+    SetParams setParamsKeepTTL = new SetParams();\n+    // setParamsKeepTTL.keepTtl();\n+    // Jedis Doesn't support KEEPTTL yet.\n+\n+    jedis.set(key, \"newValue\", setParamsKeepTTL);\n+\n+    Long result = jedis.ttl(key);\n+    assertThat(result).isGreaterThan(15L);\n+  }\n+\n+  @Test\n+  public void testSET_shouldAccept_NX_argumentToOnlySetKeyIfIt_Does_not_Exist() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0NzQ5MA=="}, "originalCommit": {"oid": "fe28f03732f06454b8a0dc76ba37907e6717f512"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTExMzM0OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNDozNDoyMFrOGDbg_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNToyMDo1MFrOGDdiuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0OTcyNg==", "bodyText": "i think this test belongs in the HSET tests, not in the strings.\nConsider moving it?\nAnother option might be moving all the tests that re-write keys into a single test, so that context is in one place.", "url": "https://github.com/apache/geode/pull/4907#discussion_r406249726", "createdAt": "2020-04-09T14:34:20Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java", "diffHunk": "@@ -270,10 +586,10 @@ public void testGetSet_whenWrongType_shouldReturnError() {\n \n   @Test\n   public void testSet_keyExistsWithDifferentDataType_returnsRedisDataTypeMismatchException() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe28f03732f06454b8a0dc76ba37907e6717f512"}, "originalPosition": 363}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI1MDU3NQ==", "bodyText": "also, we might want to test that set overrides the hset, if we are not doing so already", "url": "https://github.com/apache/geode/pull/4907#discussion_r406250575", "createdAt": "2020-04-09T14:35:29Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java", "diffHunk": "@@ -270,10 +586,10 @@ public void testGetSet_whenWrongType_shouldReturnError() {\n \n   @Test\n   public void testSet_keyExistsWithDifferentDataType_returnsRedisDataTypeMismatchException() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0OTcyNg=="}, "originalCommit": {"oid": "fe28f03732f06454b8a0dc76ba37907e6717f512"}, "originalPosition": 363}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI4MjkzNw==", "bodyText": "done", "url": "https://github.com/apache/geode/pull/4907#discussion_r406282937", "createdAt": "2020-04-09T15:20:50Z", "author": {"login": "xtreme-prasath"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/StringsIntegrationTest.java", "diffHunk": "@@ -270,10 +586,10 @@ public void testGetSet_whenWrongType_shouldReturnError() {\n \n   @Test\n   public void testSet_keyExistsWithDifferentDataType_returnsRedisDataTypeMismatchException() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjI0OTcyNg=="}, "originalCommit": {"oid": "fe28f03732f06454b8a0dc76ba37907e6717f512"}, "originalPosition": 363}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTQyMzc2OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/KeyRegistrar.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTo0NjoxMlrOGDenWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxOTo0MDowNFrOGDmwVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMwMDUwNA==", "bodyText": "I think the extra containsKey call is not needed in this method. Region.get will return null if a region does not contain the key and null will not be equal to REDIS_PROTECTED.\nSo I advise you get rid of the containsKey call.", "url": "https://github.com/apache/geode/pull/4907#discussion_r406300504", "createdAt": "2020-04-09T15:46:12Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/KeyRegistrar.java", "diffHunk": "@@ -76,16 +76,26 @@ public void validate(ByteArrayWrapper key, RedisDataType type) {\n     }\n   }\n \n+  /**\n+   * Checks if the given key is a protected string in GeodeRedis\n+   *\n+   * @param key Key to check\n+   */\n+  public boolean isProtected(ByteArrayWrapper key) {\n+    return redisMetaRegion.containsKey(key.toString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c0cb2547a5cfe35ad031c4bf428afcf2b858442"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQzMzg3OQ==", "bodyText": "Good call Darrel. Addressed that.", "url": "https://github.com/apache/geode/pull/4907#discussion_r406433879", "createdAt": "2020-04-09T19:40:04Z", "author": {"login": "xtreme-prasath"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/KeyRegistrar.java", "diffHunk": "@@ -76,16 +76,26 @@ public void validate(ByteArrayWrapper key, RedisDataType type) {\n     }\n   }\n \n+  /**\n+   * Checks if the given key is a protected string in GeodeRedis\n+   *\n+   * @param key Key to check\n+   */\n+  public boolean isProtected(ByteArrayWrapper key) {\n+    return redisMetaRegion.containsKey(key.toString())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMwMDUwNA=="}, "originalCommit": {"oid": "4c0cb2547a5cfe35ad031c4bf428afcf2b858442"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4251, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}