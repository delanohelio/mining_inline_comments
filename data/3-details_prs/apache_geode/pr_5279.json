{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MzA2OTM0", "number": 5279, "title": "GEODE-8287: Added another condition to cause the indexed value to be \u2026", "bodyText": "\u2026used\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-06-19T21:43:52Z", "url": "https://github.com/apache/geode/pull/5279", "merged": true, "mergeCommit": {"oid": "827f8651b02d90a8ad7dfa3dca62af3c06ca6b6c"}, "closed": true, "closedAt": "2020-06-25T15:58:47Z", "author": {"login": "boglesby"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcs6InJgH2gAyNDM3MzA2OTM0OjMzNTIxNmFlNTM2YWVhNjlkOWM1OGE0YzU1NTM4MDdlYzIyMGY1ZjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuiJ7ggH2gAyNDM3MzA2OTM0OjkzMDVlYjRjMWZiZTg1NzM5MTRkYzgwMjQ4OTg4ZWI4ODkyZjMzN2Q=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "335216ae536aea69d9c58a4c5553807ec220f5f3", "author": {"user": {"login": "boglesby", "name": "Barry Oglesby"}}, "url": "https://github.com/apache/geode/commit/335216ae536aea69d9c58a4c5553807ec220f5f3", "committedDate": "2020-06-19T21:42:39Z", "message": "GEODE-8287: Added another condition to cause the indexed value to be used"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e6b396a8af4fc184b0c8b48dde6e58702c9422c", "author": {"user": {"login": "boglesby", "name": "Barry Oglesby"}}, "url": "https://github.com/apache/geode/commit/5e6b396a8af4fc184b0c8b48dde6e58702c9422c", "committedDate": "2020-06-23T20:47:02Z", "message": "GEODE-8287: Added unit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e84d99aec1475e1689f5672dd26565ebd7a45253", "author": {"user": {"login": "boglesby", "name": "Barry Oglesby"}}, "url": "https://github.com/apache/geode/commit/e84d99aec1475e1689f5672dd26565ebd7a45253", "committedDate": "2020-06-23T23:32:31Z", "message": "GEODE-8287: Cleaned up unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODA1NDMy", "url": "https://github.com/apache/geode/pull/5279#pullrequestreview-436805432", "createdAt": "2020-06-24T16:18:59Z", "commit": {"oid": "e84d99aec1475e1689f5672dd26565ebd7a45253"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjoxODo1OVrOGoZjHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjoxODo1OVrOGoZjHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAxNDgxNA==", "bodyText": "There was some discussion on the dev channel to avoid single line multiple variable declarations. Maybe, can split it up\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                int numProducts = 1000, numInstruments = 100;\n          \n          \n            \n                int numProducts = 1000;\n          \n          \n            \n                int numInstruments = 100;", "url": "https://github.com/apache/geode/pull/5279#discussion_r445014814", "createdAt": "2020-06-24T16:18:59Z", "author": {"login": "nabarunnag"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/IndexUsageInJoinQueryDistributedTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.query.dunit;\n+\n+import static org.apache.geode.cache.RegionShortcut.REPLICATE;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.query.IndexExistsException;\n+import org.apache.geode.cache.query.IndexNameConflictException;\n+import org.apache.geode.cache.query.Query;\n+import org.apache.geode.cache.query.QueryService;\n+import org.apache.geode.cache.query.RegionNotFoundException;\n+import org.apache.geode.distributed.internal.DistributionStats;\n+import org.apache.geode.distributed.internal.InternalDistributedSystem;\n+import org.apache.geode.pdx.PdxReader;\n+import org.apache.geode.pdx.PdxSerializable;\n+import org.apache.geode.pdx.PdxWriter;\n+import org.apache.geode.test.dunit.rules.ClientVM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.OQLIndexTest;\n+import org.apache.geode.test.junit.rules.serializable.SerializableTestName;\n+\n+@Category({OQLIndexTest.class})\n+public class IndexUsageInJoinQueryDistributedTest implements Serializable {\n+\n+  private MemberVM locator;\n+\n+  private MemberVM server;\n+\n+  private ClientVM client;\n+\n+  private static final String PRODUCT_REGION_NAME = \"product\";\n+\n+  private static final String INSTRUMENT_REGION_NAME = \"instrument\";\n+\n+  @Rule\n+  public ClusterStartupRule clusterRule = new ClusterStartupRule();\n+\n+  @Rule\n+  public SerializableTestName testName = new SerializableTestName();\n+\n+  @Test\n+  public void testSecondIndexUsedWhenExecutingJoinQuery() throws Exception {\n+    // Start Locator\n+    locator = clusterRule.startLocatorVM(0);\n+\n+    // Start server\n+    server = clusterRule.startServerVM(1, locator.getPort());\n+\n+    // Create server regions\n+    server.invoke(() -> createServerRegionsAndIndexes());\n+\n+    // Start client\n+    client = clusterRule.startClientVM(2, c -> c.withLocatorConnection(locator.getPort()));\n+\n+    // Create client regions\n+    client.invoke(() -> createClientRegions());\n+\n+    // Load regions\n+    int numProducts = 1000, numInstruments = 100;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e84d99aec1475e1689f5672dd26565ebd7a45253"}, "originalPosition": 86}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09db74304b4015d988740ee506a4f12426439be9", "author": {"user": {"login": "boglesby", "name": "Barry Oglesby"}}, "url": "https://github.com/apache/geode/commit/09db74304b4015d988740ee506a4f12426439be9", "committedDate": "2020-06-24T16:26:47Z", "message": "GEODE-8287: Cleaned up unit test\n\nCo-authored-by: Nabarun Nag <nabarunnag@users.noreply.github.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODE3NzQy", "url": "https://github.com/apache/geode/pull/5279#pullrequestreview-436817742", "createdAt": "2020-06-24T16:34:33Z", "commit": {"oid": "09db74304b4015d988740ee506a4f12426439be9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozNDozM1rOGoaIog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjozNDozM1rOGoaIog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAyNDQxOA==", "bodyText": "Could the uses of \"/\" here be replaced with Region.SEPARATOR, to remain consistent with the rest of the codebase?", "url": "https://github.com/apache/geode/pull/5279#discussion_r445024418", "createdAt": "2020-06-24T16:34:33Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/IndexUsageInJoinQueryDistributedTest.java", "diffHunk": "@@ -0,0 +1,210 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.query.dunit;\n+\n+import static org.apache.geode.cache.RegionShortcut.REPLICATE;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.query.IndexExistsException;\n+import org.apache.geode.cache.query.IndexNameConflictException;\n+import org.apache.geode.cache.query.Query;\n+import org.apache.geode.cache.query.QueryService;\n+import org.apache.geode.cache.query.RegionNotFoundException;\n+import org.apache.geode.distributed.internal.DistributionStats;\n+import org.apache.geode.distributed.internal.InternalDistributedSystem;\n+import org.apache.geode.pdx.PdxReader;\n+import org.apache.geode.pdx.PdxSerializable;\n+import org.apache.geode.pdx.PdxWriter;\n+import org.apache.geode.test.dunit.rules.ClientVM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.OQLIndexTest;\n+import org.apache.geode.test.junit.rules.serializable.SerializableTestName;\n+\n+@Category({OQLIndexTest.class})\n+public class IndexUsageInJoinQueryDistributedTest implements Serializable {\n+\n+  private MemberVM locator;\n+\n+  private MemberVM server;\n+\n+  private ClientVM client;\n+\n+  private static final String PRODUCT_REGION_NAME = \"product\";\n+\n+  private static final String INSTRUMENT_REGION_NAME = \"instrument\";\n+\n+  @Rule\n+  public ClusterStartupRule clusterRule = new ClusterStartupRule();\n+\n+  @Rule\n+  public SerializableTestName testName = new SerializableTestName();\n+\n+  @Test\n+  public void testSecondIndexUsedWhenExecutingJoinQuery() throws Exception {\n+    // Start Locator\n+    locator = clusterRule.startLocatorVM(0);\n+\n+    // Start server\n+    server = clusterRule.startServerVM(1, locator.getPort());\n+\n+    // Create server regions\n+    server.invoke(() -> createServerRegionsAndIndexes());\n+\n+    // Start client\n+    client = clusterRule.startClientVM(2, c -> c.withLocatorConnection(locator.getPort()));\n+\n+    // Create client regions\n+    client.invoke(() -> createClientRegions());\n+\n+    // Load regions\n+    int numProducts = 1000;\n+    int numInstruments = 100;\n+    client.invoke(() -> loadRegions(numProducts, numInstruments));\n+\n+    // Get number of deserializations before query\n+    long deserializationsBeforeQuery = server.invoke(() -> getDeserializations());\n+\n+    // Execute query\n+    client.invoke(() -> executeQuery(numInstruments));\n+\n+    // Get number of deserializations after query\n+    long deserializationsAfterQuery = server.invoke(() -> getDeserializations());\n+\n+    // Verify number of deserializations during query\n+    // 1 for each instrument in the instrumentTypesIndex (100)\n+    // For each instrument, 1 product in the productIdKeyIndex (100)\n+    // 1 for the bind parameter\n+    assertThat(deserializationsAfterQuery - deserializationsBeforeQuery)\n+        .isEqualTo((numInstruments * 2) + 1);\n+  }\n+\n+  private void createServerRegionsAndIndexes()\n+      throws RegionNotFoundException, IndexNameConflictException, IndexExistsException {\n+    Cache cache = ClusterStartupRule.getCache();\n+    QueryService queryService = cache.getQueryService();\n+    Region productRegion = cache.createRegionFactory(REPLICATE).create(PRODUCT_REGION_NAME);\n+    queryService.createKeyIndex(\"productIdKeyIndex\", \"productId\", productRegion.getFullPath());\n+    Region instrumentRegion = cache.createRegionFactory(REPLICATE).create(INSTRUMENT_REGION_NAME);\n+    queryService.createIndex(\"instrumentTypesIndex\", \"types['TYPE']\",\n+        instrumentRegion.getFullPath());\n+  }\n+\n+  private void createClientRegions() {\n+    ClientCache cache = ClusterStartupRule.getClientCache();\n+    cache.createClientRegionFactory(ClientRegionShortcut.PROXY).create(PRODUCT_REGION_NAME);\n+    cache.createClientRegionFactory(ClientRegionShortcut.PROXY).create(INSTRUMENT_REGION_NAME);\n+  }\n+\n+  private void loadRegions(int numProducts, int numInstruments) {\n+    ClientCache cache = ClusterStartupRule.getClientCache();\n+    Region productRegion = cache.getRegion(PRODUCT_REGION_NAME);\n+    Region instrumentRegion = cache.getRegion(INSTRUMENT_REGION_NAME);\n+\n+    // Load product region\n+    for (int i = 0; i < numProducts; i++) {\n+      String productId = String.valueOf(i);\n+      Product product = new Product(productId);\n+      productRegion.put(productId, product);\n+    }\n+\n+    // Load instrument region\n+    for (int i = 0; i < numInstruments; i++) {\n+      String instrumentId = String.valueOf(i);\n+      Map<String, String> types = new HashMap<>();\n+      types.put(\"TYPE\", \"TYPE1\");\n+      Instrument instrument = new Instrument(instrumentId, \"0\", types);\n+      instrumentRegion.put(instrumentId, instrument);\n+    }\n+  }\n+\n+  private void executeQuery(int numInstruments) throws Exception {\n+    String queryString =\n+        \"<trace> select i,p from /instrument i, /product p where i.productId = p.productId and i.types['TYPE']=$1\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09db74304b4015d988740ee506a4f12426439be9"}, "originalPosition": 148}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e610c9fe32c42cff296cc09730912bd2fa7d7b8", "author": {"user": {"login": "boglesby", "name": "Barry Oglesby"}}, "url": "https://github.com/apache/geode/commit/9e610c9fe32c42cff296cc09730912bd2fa7d7b8", "committedDate": "2020-06-24T16:47:24Z", "message": "GEODE-8287: Cleaned up unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODM4Njc1", "url": "https://github.com/apache/geode/pull/5279#pullrequestreview-436838675", "createdAt": "2020-06-24T17:01:29Z", "commit": {"oid": "9e610c9fe32c42cff296cc09730912bd2fa7d7b8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9305eb4c1fbe8573914dc80248988eb8892f337d", "author": {"user": {"login": "boglesby", "name": "Barry Oglesby"}}, "url": "https://github.com/apache/geode/commit/9305eb4c1fbe8573914dc80248988eb8892f337d", "committedDate": "2020-06-24T22:54:13Z", "message": "GEODE-8287: Force CI to re-run"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4499, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}