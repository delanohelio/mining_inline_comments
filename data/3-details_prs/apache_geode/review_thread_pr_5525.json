{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4OTc2Nzc5", "number": 5525, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzoyOTo1NVrOEkwqZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjowNDoyM1rOEkyXUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTgxNDc4OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/net/BufferPool.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzoyOTo1NVrOHT44EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMzoyOTo1NVrOHT44EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDYxNjg0OA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/geode/pull/5525#discussion_r490616848", "createdAt": "2020-09-17T23:29:55Z", "author": {"login": "echobravopapa"}, "path": "geode-core/src/main/java/org/apache/geode/internal/net/BufferPool.java", "diffHunk": "@@ -98,14 +101,18 @@ private ByteBuffer acquireDirectBuffer(int size, boolean send) {\n \n     if (useDirectBuffers) {\n       if (size <= MEDIUM_BUFFER_SIZE) {\n-        return acquirePredefinedFixedBuffer(send, size);\n+        result = acquirePredefinedFixedBuffer(send, size);\n       } else {\n-        return acquireLargeBuffer(send, size);\n+        result = acquireLargeBuffer(send, size);\n       }\n-    } else {\n-      // if we are using heap buffers then don't bother with keeping them around\n-      result = ByteBuffer.allocate(size);\n+      if (result.capacity() > size) {\n+        result.position(0).limit(size);\n+        result = result.slice();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ba3ff69fc36743f479b103232f6144e4dd2c25"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDAyNjIzOnYy", "diffSide": "RIGHT", "path": "geode-core/src/test/java/org/apache/geode/internal/net/BufferPoolTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMToyNjowMVrOHT6yNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjozNjoxOVrOHUUQ7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY0ODExOA==", "bodyText": "These should be called something like smallBuffer and largerBuffer or something, based on this comment.", "url": "https://github.com/apache/geode/pull/5525#discussion_r490648118", "createdAt": "2020-09-18T01:26:01Z", "author": {"login": "Bill"}, "path": "geode-core/src/test/java/org/apache/geode/internal/net/BufferPoolTest.java", "diffHunk": "@@ -133,27 +135,42 @@ public void checkBufferSizeAfterAllocation() throws Exception {\n \n   @Test\n   public void checkBufferSizeAfterAcquire() throws Exception {\n+    // allocate a small buffer and a larger buffer. Check their sizes, etc and then\n+    // release and reacquire them. They should be from separate buffer pools so there\n+    // should still be a small buffer and a larger buffer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ba3ff69fc36743f479b103232f6144e4dd2c25"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2NTU4MQ==", "bodyText": "I'm retracting that comment since these variable names existed before this PR.\nAny such changes should be pursued in connection with a refactoring ticket.", "url": "https://github.com/apache/geode/pull/5525#discussion_r491065581", "createdAt": "2020-09-18T16:36:19Z", "author": {"login": "Bill"}, "path": "geode-core/src/test/java/org/apache/geode/internal/net/BufferPoolTest.java", "diffHunk": "@@ -133,27 +135,42 @@ public void checkBufferSizeAfterAllocation() throws Exception {\n \n   @Test\n   public void checkBufferSizeAfterAcquire() throws Exception {\n+    // allocate a small buffer and a larger buffer. Check their sizes, etc and then\n+    // release and reacquire them. They should be from separate buffer pools so there\n+    // should still be a small buffer and a larger buffer.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY0ODExOA=="}, "originalCommit": {"oid": "b7ba3ff69fc36743f479b103232f6144e4dd2c25"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDAzNTkyOnYy", "diffSide": "RIGHT", "path": "geode-core/src/test/java/org/apache/geode/internal/net/BufferPoolTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMTozMToxM1rOHT63uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjozNjozNlrOHUURew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY0OTUzMQ==", "bodyText": "This test would make more sense if I knew where this magic number, 4096, came from. Recommend either referencing the pertinent constant directly or at least including a comment here.\nSame comment for 32768 on next line\u2026", "url": "https://github.com/apache/geode/pull/5525#discussion_r490649531", "createdAt": "2020-09-18T01:31:13Z", "author": {"login": "Bill"}, "path": "geode-core/src/test/java/org/apache/geode/internal/net/BufferPoolTest.java", "diffHunk": "@@ -133,27 +135,42 @@ public void checkBufferSizeAfterAllocation() throws Exception {\n \n   @Test\n   public void checkBufferSizeAfterAcquire() throws Exception {\n+    // allocate a small buffer and a larger buffer. Check their sizes, etc and then\n+    // release and reacquire them. They should be from separate buffer pools so there\n+    // should still be a small buffer and a larger buffer.\n     ByteBuffer buffer = bufferPool.acquireDirectReceiveBuffer(100);\n \n     ByteBuffer newBuffer =\n         bufferPool.acquireDirectReceiveBuffer(10000);\n-    assertThat(buffer.capacity()).isGreaterThanOrEqualTo(4096);\n-    assertThat(newBuffer.capacity()).isGreaterThanOrEqualTo(32768);\n+    assertThat(buffer.capacity()).isEqualTo(100);\n+    assertThat(newBuffer.capacity()).isEqualTo(10000);\n+    assertThat(buffer.isDirect()).isTrue();\n+    assertThat(newBuffer.isDirect()).isTrue();\n+    assertThat(bufferPool.getPoolableBuffer(buffer).capacity())\n+        .isGreaterThanOrEqualTo(4096);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ba3ff69fc36743f479b103232f6144e4dd2c25"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2NTcyMw==", "bodyText": "I'm retracting that comment since these constants existed before this PR.\nAny such changes should be pursued in connection with a refactoring ticket.", "url": "https://github.com/apache/geode/pull/5525#discussion_r491065723", "createdAt": "2020-09-18T16:36:36Z", "author": {"login": "Bill"}, "path": "geode-core/src/test/java/org/apache/geode/internal/net/BufferPoolTest.java", "diffHunk": "@@ -133,27 +135,42 @@ public void checkBufferSizeAfterAllocation() throws Exception {\n \n   @Test\n   public void checkBufferSizeAfterAcquire() throws Exception {\n+    // allocate a small buffer and a larger buffer. Check their sizes, etc and then\n+    // release and reacquire them. They should be from separate buffer pools so there\n+    // should still be a small buffer and a larger buffer.\n     ByteBuffer buffer = bufferPool.acquireDirectReceiveBuffer(100);\n \n     ByteBuffer newBuffer =\n         bufferPool.acquireDirectReceiveBuffer(10000);\n-    assertThat(buffer.capacity()).isGreaterThanOrEqualTo(4096);\n-    assertThat(newBuffer.capacity()).isGreaterThanOrEqualTo(32768);\n+    assertThat(buffer.capacity()).isEqualTo(100);\n+    assertThat(newBuffer.capacity()).isEqualTo(10000);\n+    assertThat(buffer.isDirect()).isTrue();\n+    assertThat(newBuffer.isDirect()).isTrue();\n+    assertThat(bufferPool.getPoolableBuffer(buffer).capacity())\n+        .isGreaterThanOrEqualTo(4096);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY0OTUzMQ=="}, "originalCommit": {"oid": "b7ba3ff69fc36743f479b103232f6144e4dd2c25"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDA2NzQ3OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/net/BufferPool.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMTo0OTowOVrOHT7KDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjozNzoyNlrOHUUTFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY1NDIyMw==", "bodyText": "The comment on method acquirePredefinedFixedBuffer() now lies. It says:\n  /**\n   * Acquire direct buffer with predefined default capacity (4096 or 32768)\n   */\n\nBut that method no longer returns buffers with predefined capacity.\nAlso that method's name seems wrong since it doesn't return a buffer with a predefined capacity at all, rather, it returns a buffer of the specified size. brainf*rt\nIf I am understanding the method in question, perhaps this would be more accurate (also eliminates the word \"fixed\" from the method name since I don't think that is pertinent):\n  /**\n   * Acquire direct buffer of size <= MEDIUM_BUFFER_SIZE\n   *\n   * Caller ensures that size <= MEDIUM_BUFFER_SIZE on entry. This method\n   * will not check that!\n   */\n  private ByteBuffer acquireSmallToMediumBuffer(boolean send, int size) {", "url": "https://github.com/apache/geode/pull/5525#discussion_r490654223", "createdAt": "2020-09-18T01:49:09Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/internal/net/BufferPool.java", "diffHunk": "@@ -98,14 +101,18 @@ private ByteBuffer acquireDirectBuffer(int size, boolean send) {\n \n     if (useDirectBuffers) {\n       if (size <= MEDIUM_BUFFER_SIZE) {\n-        return acquirePredefinedFixedBuffer(send, size);\n+        result = acquirePredefinedFixedBuffer(send, size);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ba3ff69fc36743f479b103232f6144e4dd2c25"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxNjIxNQ==", "bodyText": "I didn't change that private method and AFAIK the comment is still accurate", "url": "https://github.com/apache/geode/pull/5525#discussion_r491016215", "createdAt": "2020-09-18T15:11:13Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/main/java/org/apache/geode/internal/net/BufferPool.java", "diffHunk": "@@ -98,14 +101,18 @@ private ByteBuffer acquireDirectBuffer(int size, boolean send) {\n \n     if (useDirectBuffers) {\n       if (size <= MEDIUM_BUFFER_SIZE) {\n-        return acquirePredefinedFixedBuffer(send, size);\n+        result = acquirePredefinedFixedBuffer(send, size);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY1NDIyMw=="}, "originalCommit": {"oid": "b7ba3ff69fc36743f479b103232f6144e4dd2c25"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA0NDIxOA==", "bodyText": "I would prefer to just remove the magic numbers from the comment.  I don't think the method rename is warranted.", "url": "https://github.com/apache/geode/pull/5525#discussion_r491044218", "createdAt": "2020-09-18T15:58:08Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/main/java/org/apache/geode/internal/net/BufferPool.java", "diffHunk": "@@ -98,14 +101,18 @@ private ByteBuffer acquireDirectBuffer(int size, boolean send) {\n \n     if (useDirectBuffers) {\n       if (size <= MEDIUM_BUFFER_SIZE) {\n-        return acquirePredefinedFixedBuffer(send, size);\n+        result = acquirePredefinedFixedBuffer(send, size);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY1NDIyMw=="}, "originalCommit": {"oid": "b7ba3ff69fc36743f479b103232f6144e4dd2c25"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2NjEzMw==", "bodyText": "I'm retracting that comment since this method name existed before this PR and was arguably already wrong before this PR.\nAny such changes should be pursued in connection with a refactoring ticket.", "url": "https://github.com/apache/geode/pull/5525#discussion_r491066133", "createdAt": "2020-09-18T16:37:26Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/internal/net/BufferPool.java", "diffHunk": "@@ -98,14 +101,18 @@ private ByteBuffer acquireDirectBuffer(int size, boolean send) {\n \n     if (useDirectBuffers) {\n       if (size <= MEDIUM_BUFFER_SIZE) {\n-        return acquirePredefinedFixedBuffer(send, size);\n+        result = acquirePredefinedFixedBuffer(send, size);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY1NDIyMw=="}, "originalCommit": {"oid": "b7ba3ff69fc36743f479b103232f6144e4dd2c25"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDA5MzYyOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/net/BufferPool.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwMjowNDoyM1rOHT7ZqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNTo1OTo1MVrOHUTDAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY1ODIxNg==", "bodyText": "It is awful that this method has to reflect on every single returned ByteBuffer.\nWould it impose too much overhead for us to define our own hierarchy underneath that abstract class to do the work (polymorphically) of returning the buffer to the pool? I realize that would entail three classes. But I wonder if they would be small (in lines-of-code). That would eliminate the possibility of an InternalGemFireException here and that would be valuable.", "url": "https://github.com/apache/geode/pull/5525#discussion_r490658216", "createdAt": "2020-09-18T02:04:23Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/internal/net/BufferPool.java", "diffHunk": "@@ -295,19 +302,48 @@ void releaseBuffer(BufferPool.BufferType type, ByteBuffer buffer) {\n   /**\n    * Releases a previously acquired buffer.\n    */\n-  private void releaseBuffer(ByteBuffer bb, boolean send) {\n-    if (bb.isDirect()) {\n-      BBSoftReference bbRef = new BBSoftReference(bb, send);\n-      if (bb.capacity() <= SMALL_BUFFER_SIZE) {\n+  private void releaseBuffer(ByteBuffer buffer, boolean send) {\n+    if (buffer.isDirect()) {\n+      buffer = getPoolableBuffer(buffer);\n+      BBSoftReference bbRef = new BBSoftReference(buffer, send);\n+      if (buffer.capacity() <= SMALL_BUFFER_SIZE) {\n         bufferSmallQueue.offer(bbRef);\n-      } else if (bb.capacity() <= MEDIUM_BUFFER_SIZE) {\n+      } else if (buffer.capacity() <= MEDIUM_BUFFER_SIZE) {\n         bufferMiddleQueue.offer(bbRef);\n       } else {\n         bufferLargeQueue.offer(bbRef);\n       }\n     } else {\n-      updateBufferStats(-bb.capacity(), send, false);\n+      updateBufferStats(-buffer.capacity(), send, false);\n+    }\n+  }\n+\n+  /**\n+   * If we hand out a buffer that is larger than the requested size we create a\n+   * \"slice\" of the buffer having the requested capacity and hand that out instead.\n+   * When we put the buffer back in the pool we need to find the original, non-sliced,\n+   * buffer. This is held in DirectBuffer in its \"attachment\" field, which is a public\n+   * method, though DirectBuffer is package-private.\n+   */\n+  @VisibleForTesting\n+  public ByteBuffer getPoolableBuffer(ByteBuffer buffer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7ba3ff69fc36743f479b103232f6144e4dd2c25"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxMzAxNA==", "bodyText": "That seems like an expensive change that would disturb a lot of code.", "url": "https://github.com/apache/geode/pull/5525#discussion_r491013014", "createdAt": "2020-09-18T15:06:10Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/main/java/org/apache/geode/internal/net/BufferPool.java", "diffHunk": "@@ -295,19 +302,48 @@ void releaseBuffer(BufferPool.BufferType type, ByteBuffer buffer) {\n   /**\n    * Releases a previously acquired buffer.\n    */\n-  private void releaseBuffer(ByteBuffer bb, boolean send) {\n-    if (bb.isDirect()) {\n-      BBSoftReference bbRef = new BBSoftReference(bb, send);\n-      if (bb.capacity() <= SMALL_BUFFER_SIZE) {\n+  private void releaseBuffer(ByteBuffer buffer, boolean send) {\n+    if (buffer.isDirect()) {\n+      buffer = getPoolableBuffer(buffer);\n+      BBSoftReference bbRef = new BBSoftReference(buffer, send);\n+      if (buffer.capacity() <= SMALL_BUFFER_SIZE) {\n         bufferSmallQueue.offer(bbRef);\n-      } else if (bb.capacity() <= MEDIUM_BUFFER_SIZE) {\n+      } else if (buffer.capacity() <= MEDIUM_BUFFER_SIZE) {\n         bufferMiddleQueue.offer(bbRef);\n       } else {\n         bufferLargeQueue.offer(bbRef);\n       }\n     } else {\n-      updateBufferStats(-bb.capacity(), send, false);\n+      updateBufferStats(-buffer.capacity(), send, false);\n+    }\n+  }\n+\n+  /**\n+   * If we hand out a buffer that is larger than the requested size we create a\n+   * \"slice\" of the buffer having the requested capacity and hand that out instead.\n+   * When we put the buffer back in the pool we need to find the original, non-sliced,\n+   * buffer. This is held in DirectBuffer in its \"attachment\" field, which is a public\n+   * method, though DirectBuffer is package-private.\n+   */\n+  @VisibleForTesting\n+  public ByteBuffer getPoolableBuffer(ByteBuffer buffer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY1ODIxNg=="}, "originalCommit": {"oid": "b7ba3ff69fc36743f479b103232f6144e4dd2c25"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTAxODc2NQ==", "bodyText": "That\u2019s fine. But I did want to run it by you.\nSubclassing from a byte buffer class would entail making large (lots of methods), new classes huh?\nThe alternative would be to return something that is not a byte buffer, but rather has-a byte buffer. In that case things that call our BufferPool methods would get one of those (non-byte-buffer) things, and that would perturb lots of calling code.", "url": "https://github.com/apache/geode/pull/5525#discussion_r491018765", "createdAt": "2020-09-18T15:15:20Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/internal/net/BufferPool.java", "diffHunk": "@@ -295,19 +302,48 @@ void releaseBuffer(BufferPool.BufferType type, ByteBuffer buffer) {\n   /**\n    * Releases a previously acquired buffer.\n    */\n-  private void releaseBuffer(ByteBuffer bb, boolean send) {\n-    if (bb.isDirect()) {\n-      BBSoftReference bbRef = new BBSoftReference(bb, send);\n-      if (bb.capacity() <= SMALL_BUFFER_SIZE) {\n+  private void releaseBuffer(ByteBuffer buffer, boolean send) {\n+    if (buffer.isDirect()) {\n+      buffer = getPoolableBuffer(buffer);\n+      BBSoftReference bbRef = new BBSoftReference(buffer, send);\n+      if (buffer.capacity() <= SMALL_BUFFER_SIZE) {\n         bufferSmallQueue.offer(bbRef);\n-      } else if (bb.capacity() <= MEDIUM_BUFFER_SIZE) {\n+      } else if (buffer.capacity() <= MEDIUM_BUFFER_SIZE) {\n         bufferMiddleQueue.offer(bbRef);\n       } else {\n         bufferLargeQueue.offer(bbRef);\n       }\n     } else {\n-      updateBufferStats(-bb.capacity(), send, false);\n+      updateBufferStats(-buffer.capacity(), send, false);\n+    }\n+  }\n+\n+  /**\n+   * If we hand out a buffer that is larger than the requested size we create a\n+   * \"slice\" of the buffer having the requested capacity and hand that out instead.\n+   * When we put the buffer back in the pool we need to find the original, non-sliced,\n+   * buffer. This is held in DirectBuffer in its \"attachment\" field, which is a public\n+   * method, though DirectBuffer is package-private.\n+   */\n+  @VisibleForTesting\n+  public ByteBuffer getPoolableBuffer(ByteBuffer buffer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY1ODIxNg=="}, "originalCommit": {"oid": "b7ba3ff69fc36743f479b103232f6144e4dd2c25"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA0NTYzNA==", "bodyText": "Subclassing ByteBuffer isn't possible due to the class having final methods.  Introducing a new class seems desirable but would affect a lot of code and this needs to be backported to 1.12 and 1.13 support branches.  In such cases it's best to keep code changes to a minimum.", "url": "https://github.com/apache/geode/pull/5525#discussion_r491045634", "createdAt": "2020-09-18T15:59:51Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/main/java/org/apache/geode/internal/net/BufferPool.java", "diffHunk": "@@ -295,19 +302,48 @@ void releaseBuffer(BufferPool.BufferType type, ByteBuffer buffer) {\n   /**\n    * Releases a previously acquired buffer.\n    */\n-  private void releaseBuffer(ByteBuffer bb, boolean send) {\n-    if (bb.isDirect()) {\n-      BBSoftReference bbRef = new BBSoftReference(bb, send);\n-      if (bb.capacity() <= SMALL_BUFFER_SIZE) {\n+  private void releaseBuffer(ByteBuffer buffer, boolean send) {\n+    if (buffer.isDirect()) {\n+      buffer = getPoolableBuffer(buffer);\n+      BBSoftReference bbRef = new BBSoftReference(buffer, send);\n+      if (buffer.capacity() <= SMALL_BUFFER_SIZE) {\n         bufferSmallQueue.offer(bbRef);\n-      } else if (bb.capacity() <= MEDIUM_BUFFER_SIZE) {\n+      } else if (buffer.capacity() <= MEDIUM_BUFFER_SIZE) {\n         bufferMiddleQueue.offer(bbRef);\n       } else {\n         bufferLargeQueue.offer(bbRef);\n       }\n     } else {\n-      updateBufferStats(-bb.capacity(), send, false);\n+      updateBufferStats(-buffer.capacity(), send, false);\n+    }\n+  }\n+\n+  /**\n+   * If we hand out a buffer that is larger than the requested size we create a\n+   * \"slice\" of the buffer having the requested capacity and hand that out instead.\n+   * When we put the buffer back in the pool we need to find the original, non-sliced,\n+   * buffer. This is held in DirectBuffer in its \"attachment\" field, which is a public\n+   * method, though DirectBuffer is package-private.\n+   */\n+  @VisibleForTesting\n+  public ByteBuffer getPoolableBuffer(ByteBuffer buffer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDY1ODIxNg=="}, "originalCommit": {"oid": "b7ba3ff69fc36743f479b103232f6144e4dd2c25"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4804, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}