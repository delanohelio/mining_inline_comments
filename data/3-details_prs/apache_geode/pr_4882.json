{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NDUwNTA5", "number": 4882, "title": "GEODE-7912: cacheWriter should be triggered when PR.clear", "bodyText": "Co-authored-by: Anil <agingade@pivotal.io>\n    Co-authored-by: Xiaojian Zhou <gzhou@pivotal.io>\n\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-03-30T07:08:17Z", "url": "https://github.com/apache/geode/pull/4882", "merged": true, "mergeCommit": {"oid": "04e20810c24a179fb8b7b306ca58657a3e3ed011"}, "closed": true, "closedAt": "2020-03-31T02:34:36Z", "author": {"login": "gesterzhou"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcSpC_zAH2gAyMzk1NDUwNTA5OmI0MTJkMjE2NjgzZmJjMjhmYmM1ZmU4ZmI2ZDM2ZDVlZGFhN2Q5MmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcS3Mj2gH2gAyMzk1NDUwNTA5OjdjMjg2ODhkMGZmYThhMTA3MjUxNDMwZDk0MjI1NTFlNjQ0Yzc2NDk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b412d216683fbc28fbc5fe8fb6d36d5edaa7d92f", "author": {"user": {"login": "gesterzhou", "name": "Xiaojian Zhou"}}, "url": "https://github.com/apache/geode/commit/b412d216683fbc28fbc5fe8fb6d36d5edaa7d92f", "committedDate": "2020-03-30T07:06:06Z", "message": "GEODE-7912: cacheWriter should be triggered when PR.clear\n\n        Co-authored-by: Anil <agingade@pivotal.io>\n        Co-authored-by: Xiaojian Zhou <gzhou@pivotal.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MDcxMjQ0", "url": "https://github.com/apache/geode/pull/4882#pullrequestreview-384071244", "createdAt": "2020-03-30T17:22:58Z", "commit": {"oid": "b412d216683fbc28fbc5fe8fb6d36d5edaa7d92f"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzoyMjo1OFrOF90PRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxNzozNzozNVrOF900TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2MzMzMw==", "bodyText": "Typo here, this should be destroysByRegion.", "url": "https://github.com/apache/geode/pull/4882#discussion_r400363333", "createdAt": "2020-03-30T17:22:58Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -211,8 +357,52 @@ public void afterRegionClear(RegionEvent event) {\n       clears.incrementAndGet();\n     }\n \n+    @Override\n+    public void afterRegionDestroy(RegionEvent event) {\n+      Region region = event.getRegion();\n+      logger.info(\"Region \" + region.getFullPath() + \" is destroyed.\");\n+      destroyes.incrementAndGet();\n+    }\n+\n     int getClears() {\n       return clears.get();\n     }\n+\n+    int getDestroys() {\n+      return destroyes.get();\n+    }\n+  }\n+\n+  public static HashMap<String, AtomicInteger> clearsByRegion = new HashMap<>();\n+  public static HashMap<String, AtomicInteger> destroyesByRegion = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b412d216683fbc28fbc5fe8fb6d36d5edaa7d92f"}, "originalPosition": 289}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2NzYxMQ==", "bodyText": "It seems inefficient and confusing to set the cache writer for all three data stores, then to immediately remove the writers for datastores1 and 2. Could you instead just pass false as the second argument for initDataStore() for those datastores?", "url": "https://github.com/apache/geode/pull/4882#discussion_r400367611", "createdAt": "2020-03-30T17:29:30Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -171,38 +183,172 @@ private void verifyCacheListenerTriggerCount(MemberVM serverVM) {\n     }\n   }\n \n+  SerializableCallableIF<Integer> getWriterClears = () -> {\n+    int clears =\n+        clearsByRegion.get(REGION_NAME) == null ? 0 : clearsByRegion.get(REGION_NAME).get();\n+    return clears;\n+  };\n+\n+  SerializableCallableIF<Integer> getWriterDestroys = () -> {\n+    int destroys =\n+        destroyesByRegion.get(REGION_NAME) == null ? 0 : destroyesByRegion.get(REGION_NAME).get();\n+    return destroys;\n+  };\n+\n+  void configureServers(boolean dataStoreWithWriter, boolean accessorWithWriter) {\n+    dataStore1.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore2.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore3.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    accessor.invoke(() -> initAccessor(true, accessorWithWriter));\n+    // make sure only datastore3 has cacheWriter\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+    dataStore2.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b412d216683fbc28fbc5fe8fb6d36d5edaa7d92f"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2ODU3OA==", "bodyText": "Typo here, this should be destroys.", "url": "https://github.com/apache/geode/pull/4882#discussion_r400368578", "createdAt": "2020-03-30T17:30:58Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -171,38 +183,172 @@ private void verifyCacheListenerTriggerCount(MemberVM serverVM) {\n     }\n   }\n \n+  SerializableCallableIF<Integer> getWriterClears = () -> {\n+    int clears =\n+        clearsByRegion.get(REGION_NAME) == null ? 0 : clearsByRegion.get(REGION_NAME).get();\n+    return clears;\n+  };\n+\n+  SerializableCallableIF<Integer> getWriterDestroys = () -> {\n+    int destroys =\n+        destroyesByRegion.get(REGION_NAME) == null ? 0 : destroyesByRegion.get(REGION_NAME).get();\n+    return destroys;\n+  };\n+\n+  void configureServers(boolean dataStoreWithWriter, boolean accessorWithWriter) {\n+    dataStore1.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore2.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore3.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    accessor.invoke(() -> initAccessor(true, accessorWithWriter));\n+    // make sure only datastore3 has cacheWriter\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+    dataStore2.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+  }\n+\n+  @Test\n+  public void normalClearFromDataStoreWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    dataStore3.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+    // verifyCacheListenerTriggerCount(dataStore1);\n+\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(0);\n+\n+    dataStore3.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(0);\n+  }\n+\n   @Test\n-  public void normalClearFromDataStore() {\n+  public void normalClearFromDataStoreWithoutWriterOnDataStore() {\n+    configureServers(false, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     accessor.invoke(() -> feed(false));\n     verifyServerRegionSize(NUM_ENTRIES);\n     dataStore1.invoke(() -> getRegion(false).clear());\n     verifyServerRegionSize(0);\n-    verifyCacheListenerTriggerCount(dataStore1);\n+    // verifyCacheListenerTriggerCount(dataStore1);\n+\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(1);\n+\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(1);\n   }\n \n   @Test\n-  public void normalClearFromAccessor() {\n+  public void normalClearFromAccessorWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     accessor.invoke(() -> feed(false));\n     verifyServerRegionSize(NUM_ENTRIES);\n     accessor.invoke(() -> getRegion(false).clear());\n     verifyServerRegionSize(0);\n-    verifyCacheListenerTriggerCount(accessor);\n+    // verifyCacheListenerTriggerCount(accessor);\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(1);\n+\n+    accessor.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(1);\n+  }\n+\n+  @Test\n+  public void normalClearFromAccessorWithoutWriterButWithWriterOnDataStore() {\n+    configureServers(true, false);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    accessor.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+    // verifyCacheListenerTriggerCount(accessor);\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(0);\n+\n+    accessor.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(0);\n   }\n \n   @Test\n   public void normalClearFromClient() {\n+    configureServers(true, false);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     client1.invoke(() -> feed(true));\n     verifyClientRegionSize(NUM_ENTRIES);\n     verifyServerRegionSize(NUM_ENTRIES);\n \n     client1.invoke(() -> getRegion(true).clear());\n     verifyServerRegionSize(0);\n     verifyClientRegionSize(0);\n-    verifyCacheListenerTriggerCount(null);\n+    // verifyCacheListenerTriggerCount(null);\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(0);\n+\n+    client1.invoke(() -> {\n+      Region region = getRegion(true);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(0);\n   }\n \n   private static class CountingCacheListener extends CacheListenerAdapter {\n     private final AtomicInteger clears = new AtomicInteger();\n+    private final AtomicInteger destroyes = new AtomicInteger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b412d216683fbc28fbc5fe8fb6d36d5edaa7d92f"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2OTYzMg==", "bodyText": "Is there something missing here, or can this comment be removed?", "url": "https://github.com/apache/geode/pull/4882#discussion_r400369632", "createdAt": "2020-03-30T17:32:40Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -171,38 +183,172 @@ private void verifyCacheListenerTriggerCount(MemberVM serverVM) {\n     }\n   }\n \n+  SerializableCallableIF<Integer> getWriterClears = () -> {\n+    int clears =\n+        clearsByRegion.get(REGION_NAME) == null ? 0 : clearsByRegion.get(REGION_NAME).get();\n+    return clears;\n+  };\n+\n+  SerializableCallableIF<Integer> getWriterDestroys = () -> {\n+    int destroys =\n+        destroyesByRegion.get(REGION_NAME) == null ? 0 : destroyesByRegion.get(REGION_NAME).get();\n+    return destroys;\n+  };\n+\n+  void configureServers(boolean dataStoreWithWriter, boolean accessorWithWriter) {\n+    dataStore1.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore2.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore3.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    accessor.invoke(() -> initAccessor(true, accessorWithWriter));\n+    // make sure only datastore3 has cacheWriter\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+    dataStore2.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+  }\n+\n+  @Test\n+  public void normalClearFromDataStoreWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    dataStore3.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+    // verifyCacheListenerTriggerCount(dataStore1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b412d216683fbc28fbc5fe8fb6d36d5edaa7d92f"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MjQ1Mw==", "bodyText": "Remove commented code.", "url": "https://github.com/apache/geode/pull/4882#discussion_r400372453", "createdAt": "2020-03-30T17:36:59Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -171,38 +183,172 @@ private void verifyCacheListenerTriggerCount(MemberVM serverVM) {\n     }\n   }\n \n+  SerializableCallableIF<Integer> getWriterClears = () -> {\n+    int clears =\n+        clearsByRegion.get(REGION_NAME) == null ? 0 : clearsByRegion.get(REGION_NAME).get();\n+    return clears;\n+  };\n+\n+  SerializableCallableIF<Integer> getWriterDestroys = () -> {\n+    int destroys =\n+        destroyesByRegion.get(REGION_NAME) == null ? 0 : destroyesByRegion.get(REGION_NAME).get();\n+    return destroys;\n+  };\n+\n+  void configureServers(boolean dataStoreWithWriter, boolean accessorWithWriter) {\n+    dataStore1.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore2.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore3.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    accessor.invoke(() -> initAccessor(true, accessorWithWriter));\n+    // make sure only datastore3 has cacheWriter\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+    dataStore2.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+  }\n+\n+  @Test\n+  public void normalClearFromDataStoreWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    dataStore3.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+    // verifyCacheListenerTriggerCount(dataStore1);\n+\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(0);\n+\n+    dataStore3.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(0);\n+  }\n+\n   @Test\n-  public void normalClearFromDataStore() {\n+  public void normalClearFromDataStoreWithoutWriterOnDataStore() {\n+    configureServers(false, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     accessor.invoke(() -> feed(false));\n     verifyServerRegionSize(NUM_ENTRIES);\n     dataStore1.invoke(() -> getRegion(false).clear());\n     verifyServerRegionSize(0);\n-    verifyCacheListenerTriggerCount(dataStore1);\n+    // verifyCacheListenerTriggerCount(dataStore1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b412d216683fbc28fbc5fe8fb6d36d5edaa7d92f"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MjU3Mg==", "bodyText": "Remove commented code.", "url": "https://github.com/apache/geode/pull/4882#discussion_r400372572", "createdAt": "2020-03-30T17:37:12Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -171,38 +183,172 @@ private void verifyCacheListenerTriggerCount(MemberVM serverVM) {\n     }\n   }\n \n+  SerializableCallableIF<Integer> getWriterClears = () -> {\n+    int clears =\n+        clearsByRegion.get(REGION_NAME) == null ? 0 : clearsByRegion.get(REGION_NAME).get();\n+    return clears;\n+  };\n+\n+  SerializableCallableIF<Integer> getWriterDestroys = () -> {\n+    int destroys =\n+        destroyesByRegion.get(REGION_NAME) == null ? 0 : destroyesByRegion.get(REGION_NAME).get();\n+    return destroys;\n+  };\n+\n+  void configureServers(boolean dataStoreWithWriter, boolean accessorWithWriter) {\n+    dataStore1.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore2.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore3.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    accessor.invoke(() -> initAccessor(true, accessorWithWriter));\n+    // make sure only datastore3 has cacheWriter\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+    dataStore2.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+  }\n+\n+  @Test\n+  public void normalClearFromDataStoreWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    dataStore3.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+    // verifyCacheListenerTriggerCount(dataStore1);\n+\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(0);\n+\n+    dataStore3.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(0);\n+  }\n+\n   @Test\n-  public void normalClearFromDataStore() {\n+  public void normalClearFromDataStoreWithoutWriterOnDataStore() {\n+    configureServers(false, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     accessor.invoke(() -> feed(false));\n     verifyServerRegionSize(NUM_ENTRIES);\n     dataStore1.invoke(() -> getRegion(false).clear());\n     verifyServerRegionSize(0);\n-    verifyCacheListenerTriggerCount(dataStore1);\n+    // verifyCacheListenerTriggerCount(dataStore1);\n+\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(1);\n+\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(1);\n   }\n \n   @Test\n-  public void normalClearFromAccessor() {\n+  public void normalClearFromAccessorWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     accessor.invoke(() -> feed(false));\n     verifyServerRegionSize(NUM_ENTRIES);\n     accessor.invoke(() -> getRegion(false).clear());\n     verifyServerRegionSize(0);\n-    verifyCacheListenerTriggerCount(accessor);\n+    // verifyCacheListenerTriggerCount(accessor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b412d216683fbc28fbc5fe8fb6d36d5edaa7d92f"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MjczMw==", "bodyText": "Remove commented code.", "url": "https://github.com/apache/geode/pull/4882#discussion_r400372733", "createdAt": "2020-03-30T17:37:26Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -171,38 +183,172 @@ private void verifyCacheListenerTriggerCount(MemberVM serverVM) {\n     }\n   }\n \n+  SerializableCallableIF<Integer> getWriterClears = () -> {\n+    int clears =\n+        clearsByRegion.get(REGION_NAME) == null ? 0 : clearsByRegion.get(REGION_NAME).get();\n+    return clears;\n+  };\n+\n+  SerializableCallableIF<Integer> getWriterDestroys = () -> {\n+    int destroys =\n+        destroyesByRegion.get(REGION_NAME) == null ? 0 : destroyesByRegion.get(REGION_NAME).get();\n+    return destroys;\n+  };\n+\n+  void configureServers(boolean dataStoreWithWriter, boolean accessorWithWriter) {\n+    dataStore1.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore2.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore3.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    accessor.invoke(() -> initAccessor(true, accessorWithWriter));\n+    // make sure only datastore3 has cacheWriter\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+    dataStore2.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+  }\n+\n+  @Test\n+  public void normalClearFromDataStoreWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    dataStore3.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+    // verifyCacheListenerTriggerCount(dataStore1);\n+\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(0);\n+\n+    dataStore3.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(0);\n+  }\n+\n   @Test\n-  public void normalClearFromDataStore() {\n+  public void normalClearFromDataStoreWithoutWriterOnDataStore() {\n+    configureServers(false, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     accessor.invoke(() -> feed(false));\n     verifyServerRegionSize(NUM_ENTRIES);\n     dataStore1.invoke(() -> getRegion(false).clear());\n     verifyServerRegionSize(0);\n-    verifyCacheListenerTriggerCount(dataStore1);\n+    // verifyCacheListenerTriggerCount(dataStore1);\n+\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(1);\n+\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(1);\n   }\n \n   @Test\n-  public void normalClearFromAccessor() {\n+  public void normalClearFromAccessorWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     accessor.invoke(() -> feed(false));\n     verifyServerRegionSize(NUM_ENTRIES);\n     accessor.invoke(() -> getRegion(false).clear());\n     verifyServerRegionSize(0);\n-    verifyCacheListenerTriggerCount(accessor);\n+    // verifyCacheListenerTriggerCount(accessor);\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(1);\n+\n+    accessor.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(1);\n+  }\n+\n+  @Test\n+  public void normalClearFromAccessorWithoutWriterButWithWriterOnDataStore() {\n+    configureServers(true, false);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    accessor.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+    // verifyCacheListenerTriggerCount(accessor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b412d216683fbc28fbc5fe8fb6d36d5edaa7d92f"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM3MjgxMw==", "bodyText": "Remove commented code.", "url": "https://github.com/apache/geode/pull/4882#discussion_r400372813", "createdAt": "2020-03-30T17:37:35Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -171,38 +183,172 @@ private void verifyCacheListenerTriggerCount(MemberVM serverVM) {\n     }\n   }\n \n+  SerializableCallableIF<Integer> getWriterClears = () -> {\n+    int clears =\n+        clearsByRegion.get(REGION_NAME) == null ? 0 : clearsByRegion.get(REGION_NAME).get();\n+    return clears;\n+  };\n+\n+  SerializableCallableIF<Integer> getWriterDestroys = () -> {\n+    int destroys =\n+        destroyesByRegion.get(REGION_NAME) == null ? 0 : destroyesByRegion.get(REGION_NAME).get();\n+    return destroys;\n+  };\n+\n+  void configureServers(boolean dataStoreWithWriter, boolean accessorWithWriter) {\n+    dataStore1.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore2.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore3.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    accessor.invoke(() -> initAccessor(true, accessorWithWriter));\n+    // make sure only datastore3 has cacheWriter\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+    dataStore2.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+  }\n+\n+  @Test\n+  public void normalClearFromDataStoreWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    dataStore3.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+    // verifyCacheListenerTriggerCount(dataStore1);\n+\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(0);\n+\n+    dataStore3.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(0);\n+  }\n+\n   @Test\n-  public void normalClearFromDataStore() {\n+  public void normalClearFromDataStoreWithoutWriterOnDataStore() {\n+    configureServers(false, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     accessor.invoke(() -> feed(false));\n     verifyServerRegionSize(NUM_ENTRIES);\n     dataStore1.invoke(() -> getRegion(false).clear());\n     verifyServerRegionSize(0);\n-    verifyCacheListenerTriggerCount(dataStore1);\n+    // verifyCacheListenerTriggerCount(dataStore1);\n+\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(1);\n+\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(1);\n   }\n \n   @Test\n-  public void normalClearFromAccessor() {\n+  public void normalClearFromAccessorWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     accessor.invoke(() -> feed(false));\n     verifyServerRegionSize(NUM_ENTRIES);\n     accessor.invoke(() -> getRegion(false).clear());\n     verifyServerRegionSize(0);\n-    verifyCacheListenerTriggerCount(accessor);\n+    // verifyCacheListenerTriggerCount(accessor);\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(1);\n+\n+    accessor.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(1);\n+  }\n+\n+  @Test\n+  public void normalClearFromAccessorWithoutWriterButWithWriterOnDataStore() {\n+    configureServers(true, false);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    accessor.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+    // verifyCacheListenerTriggerCount(accessor);\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(0);\n+\n+    accessor.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(0);\n   }\n \n   @Test\n   public void normalClearFromClient() {\n+    configureServers(true, false);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     client1.invoke(() -> feed(true));\n     verifyClientRegionSize(NUM_ENTRIES);\n     verifyServerRegionSize(NUM_ENTRIES);\n \n     client1.invoke(() -> getRegion(true).clear());\n     verifyServerRegionSize(0);\n     verifyClientRegionSize(0);\n-    verifyCacheListenerTriggerCount(null);\n+    // verifyCacheListenerTriggerCount(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b412d216683fbc28fbc5fe8fb6d36d5edaa7d92f"}, "originalPosition": 246}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3437617085ff9416bcf5c163a692a2bc45a2d9c5", "author": {"user": {"login": "gesterzhou", "name": "Xiaojian Zhou"}}, "url": "https://github.com/apache/geode/commit/3437617085ff9416bcf5c163a692a2bc45a2d9c5", "committedDate": "2020-03-30T18:13:35Z", "message": "fix based on review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MTM1NDQw", "url": "https://github.com/apache/geode/pull/4882#pullrequestreview-384135440", "createdAt": "2020-03-30T18:48:48Z", "commit": {"oid": "3437617085ff9416bcf5c163a692a2bc45a2d9c5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0MTI3Nzg5", "url": "https://github.com/apache/geode/pull/4882#pullrequestreview-384127789", "createdAt": "2020-03-30T18:38:09Z", "commit": {"oid": "3437617085ff9416bcf5c163a692a2bc45a2d9c5"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODozODowOVrOF93GFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxODo1MToxMVrOF93j5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMDEzMg==", "bodyText": "I agree with Donal, doing this we are testing the behavior of AttributesMutator, not for clear.", "url": "https://github.com/apache/geode/pull/4882#discussion_r400410132", "createdAt": "2020-03-30T18:38:09Z", "author": {"login": "agingade"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -171,38 +183,172 @@ private void verifyCacheListenerTriggerCount(MemberVM serverVM) {\n     }\n   }\n \n+  SerializableCallableIF<Integer> getWriterClears = () -> {\n+    int clears =\n+        clearsByRegion.get(REGION_NAME) == null ? 0 : clearsByRegion.get(REGION_NAME).get();\n+    return clears;\n+  };\n+\n+  SerializableCallableIF<Integer> getWriterDestroys = () -> {\n+    int destroys =\n+        destroyesByRegion.get(REGION_NAME) == null ? 0 : destroyesByRegion.get(REGION_NAME).get();\n+    return destroys;\n+  };\n+\n+  void configureServers(boolean dataStoreWithWriter, boolean accessorWithWriter) {\n+    dataStore1.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore2.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore3.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    accessor.invoke(() -> initAccessor(true, accessorWithWriter));\n+    // make sure only datastore3 has cacheWriter\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+    dataStore2.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2NzYxMQ=="}, "originalCommit": {"oid": "b412d216683fbc28fbc5fe8fb6d36d5edaa7d92f"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMTcxMA==", "bodyText": "There is \"PartitionedRegionLoaderWriterDUnitTest\" specific to testing loader and writers on PR. Probably we should move these tests over there.", "url": "https://github.com/apache/geode/pull/4882#discussion_r400411710", "createdAt": "2020-03-30T18:40:51Z", "author": {"login": "agingade"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -104,14 +102,21 @@ private void initClientCache() {\n     region.registerInterestForAllKeys(InterestResultPolicy.KEYS);\n   }\n \n-  private void initDataStore() {\n-    getCache().createRegionFactory(getRegionShortCut())\n-        .setPartitionAttributes(new PartitionAttributesFactory().setTotalNumBuckets(10).create())\n-        .addCacheListener(new CountingCacheListener())\n-        .create(REGION_NAME);\n+  private void initDataStore(boolean withListener, boolean withWriter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3437617085ff9416bcf5c163a692a2bc45a2d9c5"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMjM4NQ==", "bodyText": "The test is doing region destroy but the name suggests it is for clear. All the tests are doing region destroy, rather than clear.", "url": "https://github.com/apache/geode/pull/4882#discussion_r400412385", "createdAt": "2020-03-30T18:42:03Z", "author": {"login": "agingade"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -171,26 +183,146 @@ private void verifyCacheListenerTriggerCount(MemberVM serverVM) {\n     }\n   }\n \n+  SerializableCallableIF<Integer> getWriterClears = () -> {\n+    int clears =\n+        clearsByRegion.get(REGION_NAME) == null ? 0 : clearsByRegion.get(REGION_NAME).get();\n+    return clears;\n+  };\n+\n+  SerializableCallableIF<Integer> getWriterDestroys = () -> {\n+    int destroys =\n+        destroysByRegion.get(REGION_NAME) == null ? 0 : destroysByRegion.get(REGION_NAME).get();\n+    return destroys;\n+  };\n+\n+  void configureServers(boolean dataStoreWithWriter, boolean accessorWithWriter) {\n+    dataStore1.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore2.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore3.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    accessor.invoke(() -> initAccessor(true, accessorWithWriter));\n+    // make sure only datastore3 has cacheWriter\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+    dataStore2.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+  }\n+\n+  @Test\n+  public void normalClearFromDataStoreWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    dataStore3.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+    verifyCacheListenerTriggerCount(dataStore3);\n+\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(0);\n+\n+    dataStore3.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3437617085ff9416bcf5c163a692a2bc45a2d9c5"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxMzkwNg==", "bodyText": "Does this PR requires CacheListener testing.", "url": "https://github.com/apache/geode/pull/4882#discussion_r400413906", "createdAt": "2020-03-30T18:44:38Z", "author": {"login": "agingade"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearDUnitTest.java", "diffHunk": "@@ -171,38 +183,172 @@ private void verifyCacheListenerTriggerCount(MemberVM serverVM) {\n     }\n   }\n \n+  SerializableCallableIF<Integer> getWriterClears = () -> {\n+    int clears =\n+        clearsByRegion.get(REGION_NAME) == null ? 0 : clearsByRegion.get(REGION_NAME).get();\n+    return clears;\n+  };\n+\n+  SerializableCallableIF<Integer> getWriterDestroys = () -> {\n+    int destroys =\n+        destroyesByRegion.get(REGION_NAME) == null ? 0 : destroyesByRegion.get(REGION_NAME).get();\n+    return destroys;\n+  };\n+\n+  void configureServers(boolean dataStoreWithWriter, boolean accessorWithWriter) {\n+    dataStore1.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore2.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    dataStore3.invoke(() -> initDataStore(true, dataStoreWithWriter));\n+    accessor.invoke(() -> initAccessor(true, accessorWithWriter));\n+    // make sure only datastore3 has cacheWriter\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+    dataStore2.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.getAttributesMutator().setCacheWriter(null);\n+    });\n+  }\n+\n+  @Test\n+  public void normalClearFromDataStoreWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    dataStore3.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+    // verifyCacheListenerTriggerCount(dataStore1);\n+\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(0);\n+\n+    dataStore3.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(0);\n+  }\n+\n   @Test\n-  public void normalClearFromDataStore() {\n+  public void normalClearFromDataStoreWithoutWriterOnDataStore() {\n+    configureServers(false, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     accessor.invoke(() -> feed(false));\n     verifyServerRegionSize(NUM_ENTRIES);\n     dataStore1.invoke(() -> getRegion(false).clear());\n     verifyServerRegionSize(0);\n-    verifyCacheListenerTriggerCount(dataStore1);\n+    // verifyCacheListenerTriggerCount(dataStore1);\n+\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(1);\n+\n+    dataStore1.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(1);\n   }\n \n   @Test\n-  public void normalClearFromAccessor() {\n+  public void normalClearFromAccessorWithWriterOnDataStore() {\n+    configureServers(true, true);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     accessor.invoke(() -> feed(false));\n     verifyServerRegionSize(NUM_ENTRIES);\n     accessor.invoke(() -> getRegion(false).clear());\n     verifyServerRegionSize(0);\n-    verifyCacheListenerTriggerCount(accessor);\n+    // verifyCacheListenerTriggerCount(accessor);\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(1);\n+\n+    accessor.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(1);\n+  }\n+\n+  @Test\n+  public void normalClearFromAccessorWithoutWriterButWithWriterOnDataStore() {\n+    configureServers(true, false);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n+    accessor.invoke(() -> feed(false));\n+    verifyServerRegionSize(NUM_ENTRIES);\n+    accessor.invoke(() -> getRegion(false).clear());\n+    verifyServerRegionSize(0);\n+    // verifyCacheListenerTriggerCount(accessor);\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(0);\n+\n+    accessor.invoke(() -> {\n+      Region region = getRegion(false);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(0);\n   }\n \n   @Test\n   public void normalClearFromClient() {\n+    configureServers(true, false);\n+    client1.invoke(this::initClientCache);\n+    client2.invoke(this::initClientCache);\n+\n     client1.invoke(() -> feed(true));\n     verifyClientRegionSize(NUM_ENTRIES);\n     verifyServerRegionSize(NUM_ENTRIES);\n \n     client1.invoke(() -> getRegion(true).clear());\n     verifyServerRegionSize(0);\n     verifyClientRegionSize(0);\n-    verifyCacheListenerTriggerCount(null);\n+    // verifyCacheListenerTriggerCount(null);\n+    assertThat(dataStore1.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterClears)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterClears)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterClears)).isEqualTo(0);\n+\n+    client1.invoke(() -> {\n+      Region region = getRegion(true);\n+      region.destroyRegion();\n+    });\n+    assertThat(dataStore1.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore2.invoke(getWriterDestroys)).isEqualTo(0);\n+    assertThat(dataStore3.invoke(getWriterDestroys)).isEqualTo(1);\n+    assertThat(accessor.invoke(getWriterDestroys)).isEqualTo(0);\n   }\n \n   private static class CountingCacheListener extends CacheListenerAdapter {\n     private final AtomicInteger clears = new AtomicInteger();\n+    private final AtomicInteger destroyes = new AtomicInteger();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDM2ODU3OA=="}, "originalCommit": {"oid": "b412d216683fbc28fbc5fe8fb6d36d5edaa7d92f"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDQxNzc2Ng==", "bodyText": "Can the caller pass in the Processor. We could avoid checking for operation.\nAlso is paction -> processorAction ? can we make it clear. Sorry for nitpicking. Just wanted to be clear with what we are doing.", "url": "https://github.com/apache/geode/pull/4882#discussion_r400417766", "createdAt": "2020-03-30T18:51:11Z", "author": {"login": "agingade"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegion.java", "diffHunk": "@@ -4428,6 +4431,35 @@ public Object getFromLocalBucket(int bucketId, final Object key, final Object aC\n     return null;\n   }\n \n+  boolean triggerWriter(RegionEventImpl event) {\n+    CacheWriter localWriter = basicGetWriter();\n+    Set netWriteRecipients = localWriter == null ? this.distAdvisor.adviseNetWrite() : null;\n+\n+    if (localWriter == null && (netWriteRecipients == null || netWriteRecipients.isEmpty())) {\n+      return false;\n+    }\n+\n+    final long start = getCachePerfStats().startCacheWriterCall();\n+    try {\n+      SearchLoadAndWriteProcessor processor = SearchLoadAndWriteProcessor.getProcessor();\n+      String theKey = \"preDestroyRegion\";\n+      int paction = 0;\n+      if (event.getOperation().isRegionDestroy()) {\n+        theKey = \"preDestroyRegion\";\n+        paction = SearchLoadAndWriteProcessor.BEFOREREGIONDESTROY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3437617085ff9416bcf5c163a692a2bc45a2d9c5"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c28688d0ffa8a107251430d9422551e644c7649", "author": {"user": {"login": "gesterzhou", "name": "Xiaojian Zhou"}}, "url": "https://github.com/apache/geode/commit/7c28688d0ffa8a107251430d9422551e644c7649", "committedDate": "2020-03-30T23:35:13Z", "message": "adjust the test case and remove the listener part"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4960, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}