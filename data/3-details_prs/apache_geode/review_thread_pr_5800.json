{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNjM3NDU3", "number": 5800, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoxMjoyOVrOE_uP0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoxMjoyOVrOE_uP0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1MjUzNDU2OnYy", "diffSide": "RIGHT", "path": "geode-assembly/src/integrationTest/java/org/apache/geode/BundledJarsJUnitTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzoxMjoyOVrOH9lbpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNzo0MjoyNFrOH9msrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzODQ3MA==", "bodyText": "This change looks good, however, BundledJarsJUnitTest is not the only test that has this problem; AssemblyContentsIntegrationTest and GeodeDependencyJarIntegrationTest also need essentially the same change.", "url": "https://github.com/apache/geode/pull/5800#discussion_r534338470", "createdAt": "2020-12-02T17:12:29Z", "author": {"login": "yozaner1324"}, "path": "geode-assembly/src/integrationTest/java/org/apache/geode/BundledJarsJUnitTest.java", "diffHunk": "@@ -67,7 +67,7 @@ public void verifyBundledJarsHaveNotChanged() throws IOException {\n         sortedJars.entrySet().stream().map(entry -> removeVersion(entry.getKey()));\n     Set<String> bundledJarNames = new TreeSet<>(lines.collect(Collectors.toSet()));\n \n-    Files.write(Paths.get(\"bundled_jars.txt\"), bundledJarNames);\n+    Files.write(Paths.get(\"..\", \"bundled_jars.txt\"), bundledJarNames);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "235b59eda3af0419e558284c9608daf3a9b71bb4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM1NjMwMQ==", "bodyText": "I did a scan of the integration test output to spot this kind of file. I found AssemblyContentsIntegrationTest and GeodeDependencyJarIntegrationTest. I will fix those. If you know of others, let me know.", "url": "https://github.com/apache/geode/pull/5800#discussion_r534356301", "createdAt": "2020-12-02T17:38:02Z", "author": {"login": "demery-pivotal"}, "path": "geode-assembly/src/integrationTest/java/org/apache/geode/BundledJarsJUnitTest.java", "diffHunk": "@@ -67,7 +67,7 @@ public void verifyBundledJarsHaveNotChanged() throws IOException {\n         sortedJars.entrySet().stream().map(entry -> removeVersion(entry.getKey()));\n     Set<String> bundledJarNames = new TreeSet<>(lines.collect(Collectors.toSet()));\n \n-    Files.write(Paths.get(\"bundled_jars.txt\"), bundledJarNames);\n+    Files.write(Paths.get(\"..\", \"bundled_jars.txt\"), bundledJarNames);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzODQ3MA=="}, "originalCommit": {"oid": "235b59eda3af0419e558284c9608daf3a9b71bb4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDM1OTIxNQ==", "bodyText": "The three mentioned tests are the only ones I'm aware of that write files that need to be accessed after the test runs. I searched for all other occurrences of \"Files.write\" and none seemed important. I'm not sure there is a better way to identify which files are important vs random temp files.", "url": "https://github.com/apache/geode/pull/5800#discussion_r534359215", "createdAt": "2020-12-02T17:42:24Z", "author": {"login": "yozaner1324"}, "path": "geode-assembly/src/integrationTest/java/org/apache/geode/BundledJarsJUnitTest.java", "diffHunk": "@@ -67,7 +67,7 @@ public void verifyBundledJarsHaveNotChanged() throws IOException {\n         sortedJars.entrySet().stream().map(entry -> removeVersion(entry.getKey()));\n     Set<String> bundledJarNames = new TreeSet<>(lines.collect(Collectors.toSet()));\n \n-    Files.write(Paths.get(\"bundled_jars.txt\"), bundledJarNames);\n+    Files.write(Paths.get(\"..\", \"bundled_jars.txt\"), bundledJarNames);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDMzODQ3MA=="}, "originalCommit": {"oid": "235b59eda3af0419e558284c9608daf3a9b71bb4"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4531, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}