{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MzMyMjQ4", "number": 5281, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMzowNjo1NFrOEIKcpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMzowNzoxN1rOEIM7fQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTk1MjM2OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/SerializableRestoreRedundancyResultsImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMzowNjo1NFrOGn9jBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDozMTo0M1rOGoCkVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU1NjAzNw==", "bodyText": "This could be replaced with totalPrimaryTransferTime += details.getPrimaryTransferTime();", "url": "https://github.com/apache/geode/pull/5281#discussion_r444556037", "createdAt": "2020-06-23T23:06:54Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/SerializableRestoreRedundancyResultsImpl.java", "diffHunk": "@@ -39,7 +39,8 @@\n   public void addPrimaryReassignmentDetails(PartitionRebalanceInfo details) {\n     totalPrimaryTransfersCompleted += details.getPrimaryTransfersCompleted();\n     totalPrimaryTransferTime =\n-        totalPrimaryTransferTime.plusMillis(details.getPrimaryTransferTime());\n+        totalPrimaryTransferTime + details.getPrimaryTransferTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00385e14cb30197fe0e9a3fd9a37b7110c188a6c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzODI5NA==", "bodyText": "done", "url": "https://github.com/apache/geode/pull/5281#discussion_r444638294", "createdAt": "2020-06-24T04:31:43Z", "author": {"login": "mhansonp"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/SerializableRestoreRedundancyResultsImpl.java", "diffHunk": "@@ -39,7 +39,8 @@\n   public void addPrimaryReassignmentDetails(PartitionRebalanceInfo details) {\n     totalPrimaryTransfersCompleted += details.getPrimaryTransfersCompleted();\n     totalPrimaryTransferTime =\n-        totalPrimaryTransferTime.plusMillis(details.getPrimaryTransferTime());\n+        totalPrimaryTransferTime + details.getPrimaryTransferTime();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU1NjAzNw=="}, "originalCommit": {"oid": "00385e14cb30197fe0e9a3fd9a37b7110c188a6c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTk4OTkyOnYy", "diffSide": "RIGHT", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/control/SerializableRestoreRedundancyResultsImplTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMzoyNTowOFrOGn949w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDozMTozNVrOGoCkNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU2MTY1NQ==", "bodyText": "This test sets multiple fields but does not verify all of them. Would it be possible to confirm that all data in the object is correctly serialized and deserialized, not just the message and status fields?", "url": "https://github.com/apache/geode/pull/5281#discussion_r444561655", "createdAt": "2020-06-23T23:25:08Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/control/SerializableRestoreRedundancyResultsImplTest.java", "diffHunk": "@@ -153,39 +157,64 @@ public void addRegionResultsAddsToCorrectInternalMapAndAddsPrimaryReassignmentDe\n     when(regionResults.getSatisfiedRedundancyRegionResults())\n         .thenReturn(Collections.singletonMap(successfulRegionName, successfulRegionResult));\n     when(regionResults.getTotalPrimaryTransfersCompleted()).thenReturn(transfersCompleted);\n-    when(regionResults.getTotalPrimaryTransferTime()).thenReturn(Duration.ofMillis(transferTime));\n+    when(regionResults.getTotalPrimaryTransferTime()).thenReturn(transferTime);\n \n     results.addRegionResults(regionResults);\n \n     Map<String, RegionRedundancyStatus> zeroRedundancyResults =\n         results.getZeroRedundancyRegionResults();\n-    assertThat(zeroRedundancyResults.size(), is(1));\n-    assertThat(zeroRedundancyResults.get(zeroRedundancyRegionName), is(zeroRedundancyRegionResult));\n+    assertThat(zeroRedundancyResults.size()).isEqualTo(1);\n+    assertThat(zeroRedundancyResults.get(zeroRedundancyRegionName))\n+        .isEqualTo(zeroRedundancyRegionResult);\n \n     Map<String, RegionRedundancyStatus> underRedundancyResults =\n         results.getUnderRedundancyRegionResults();\n-    assertThat(underRedundancyResults.size(), is(1));\n-    assertThat(underRedundancyResults.get(underRedundancyRegionName),\n-        is(underRedundancyRegionResult));\n+    assertThat(underRedundancyResults.size()).isEqualTo(1);\n+    assertThat(underRedundancyResults.get(underRedundancyRegionName))\n+        .isEqualTo(underRedundancyRegionResult);\n \n     Map<String, RegionRedundancyStatus> successfulRegionResults =\n         results.getSatisfiedRedundancyRegionResults();\n-    assertThat(successfulRegionResults.size(), is(1));\n-    assertThat(successfulRegionResults.get(successfulRegionName), is(successfulRegionResult));\n+    assertThat(successfulRegionResults.size()).isEqualTo(1);\n+    assertThat(successfulRegionResults.get(successfulRegionName)).isEqualTo(successfulRegionResult);\n \n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime);\n   }\n \n   @Test\n   public void addPrimaryDetailsUpdatesValue() {\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(0));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(0L));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(0);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(0L);\n     results.addPrimaryReassignmentDetails(details);\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime);\n     results.addPrimaryReassignmentDetails(details);\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted * 2));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime * 2));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted * 2);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime * 2);\n+  }\n+\n+  @Test\n+  public void testSerializable() throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00385e14cb30197fe0e9a3fd9a37b7110c188a6c"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzODI2MA==", "bodyText": "done. assertThat(value).isEqualToComparingFieldByField(restoreRedundancyResults);", "url": "https://github.com/apache/geode/pull/5281#discussion_r444638260", "createdAt": "2020-06-24T04:31:35Z", "author": {"login": "mhansonp"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/control/SerializableRestoreRedundancyResultsImplTest.java", "diffHunk": "@@ -153,39 +157,64 @@ public void addRegionResultsAddsToCorrectInternalMapAndAddsPrimaryReassignmentDe\n     when(regionResults.getSatisfiedRedundancyRegionResults())\n         .thenReturn(Collections.singletonMap(successfulRegionName, successfulRegionResult));\n     when(regionResults.getTotalPrimaryTransfersCompleted()).thenReturn(transfersCompleted);\n-    when(regionResults.getTotalPrimaryTransferTime()).thenReturn(Duration.ofMillis(transferTime));\n+    when(regionResults.getTotalPrimaryTransferTime()).thenReturn(transferTime);\n \n     results.addRegionResults(regionResults);\n \n     Map<String, RegionRedundancyStatus> zeroRedundancyResults =\n         results.getZeroRedundancyRegionResults();\n-    assertThat(zeroRedundancyResults.size(), is(1));\n-    assertThat(zeroRedundancyResults.get(zeroRedundancyRegionName), is(zeroRedundancyRegionResult));\n+    assertThat(zeroRedundancyResults.size()).isEqualTo(1);\n+    assertThat(zeroRedundancyResults.get(zeroRedundancyRegionName))\n+        .isEqualTo(zeroRedundancyRegionResult);\n \n     Map<String, RegionRedundancyStatus> underRedundancyResults =\n         results.getUnderRedundancyRegionResults();\n-    assertThat(underRedundancyResults.size(), is(1));\n-    assertThat(underRedundancyResults.get(underRedundancyRegionName),\n-        is(underRedundancyRegionResult));\n+    assertThat(underRedundancyResults.size()).isEqualTo(1);\n+    assertThat(underRedundancyResults.get(underRedundancyRegionName))\n+        .isEqualTo(underRedundancyRegionResult);\n \n     Map<String, RegionRedundancyStatus> successfulRegionResults =\n         results.getSatisfiedRedundancyRegionResults();\n-    assertThat(successfulRegionResults.size(), is(1));\n-    assertThat(successfulRegionResults.get(successfulRegionName), is(successfulRegionResult));\n+    assertThat(successfulRegionResults.size()).isEqualTo(1);\n+    assertThat(successfulRegionResults.get(successfulRegionName)).isEqualTo(successfulRegionResult);\n \n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime);\n   }\n \n   @Test\n   public void addPrimaryDetailsUpdatesValue() {\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(0));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(0L));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(0);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(0L);\n     results.addPrimaryReassignmentDetails(details);\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime);\n     results.addPrimaryReassignmentDetails(details);\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted * 2));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime * 2));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted * 2);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime * 2);\n+  }\n+\n+  @Test\n+  public void testSerializable() throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU2MTY1NQ=="}, "originalCommit": {"oid": "00385e14cb30197fe0e9a3fd9a37b7110c188a6c"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDAwMDYyOnYy", "diffSide": "RIGHT", "path": "geode-management/src/main/java/org/apache/geode/management/internal/operation/RestoreRedundancyResultsImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QyMzozMDo0NlrOGn9_lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDozMjo1N1rOGoClYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU2MzM1MQ==", "bodyText": "This can be replaced with totalPrimaryTransferTime += results.getTotalPrimaryTransferTime();", "url": "https://github.com/apache/geode/pull/5281#discussion_r444563351", "createdAt": "2020-06-23T23:30:46Z", "author": {"login": "DonalEvans"}, "path": "geode-management/src/main/java/org/apache/geode/management/internal/operation/RestoreRedundancyResultsImpl.java", "diffHunk": "@@ -38,24 +37,55 @@\n   public static final String PRIMARY_TRANSFER_TIME = \"Total primary transfer time (ms) = \";\n   private static final long serialVersionUID = -1174735246756963521L;\n \n-  protected Map<String, RegionRedundancyStatus> zeroRedundancyRegions = new HashMap<>();\n-  protected Map<String, RegionRedundancyStatus> underRedundancyRegions = new HashMap<>();\n-  protected Map<String, RegionRedundancyStatus> satisfiedRedundancyRegions = new HashMap<>();\n+  protected Map<String, RegionRedundancyStatus> zeroRedundancyRegionsResults = new HashMap<>();\n+  protected Map<String, RegionRedundancyStatus> underRedundancyRegionsResults = new HashMap<>();\n+  protected Map<String, RegionRedundancyStatus> satisfiedRedundancyRegionsResults = new HashMap<>();\n \n   protected int totalPrimaryTransfersCompleted;\n-  protected Duration totalPrimaryTransferTime = Duration.ZERO;\n+  protected long totalPrimaryTransferTime = 0;\n   protected boolean success = true;\n   protected String statusMessage;\n   protected final List<String> includedRegionsWithNoMembers = new ArrayList<>();\n+  private RegionRedundancyStatus regionResult;\n+\n+  public void setZeroRedundancyRegionsResults(\n+      Map<String, RegionRedundancyStatus> zeroRedundancyRegionsResults) {\n+    this.zeroRedundancyRegionsResults = zeroRedundancyRegionsResults;\n+  }\n+\n+  public void setUnderRedundancyRegionsResults(\n+      Map<String, RegionRedundancyStatus> underRedundancyRegionsResults) {\n+    this.underRedundancyRegionsResults = underRedundancyRegionsResults;\n+  }\n+\n+  public void setSatisfiedRedundancyRegionsResults(\n+      Map<String, RegionRedundancyStatus> satisfiedRedundancyRegionsResults) {\n+    this.satisfiedRedundancyRegionsResults = satisfiedRedundancyRegionsResults;\n+  }\n+\n+  public void setTotalPrimaryTransfersCompleted(int totalPrimaryTransfersCompleted) {\n+    this.totalPrimaryTransfersCompleted = totalPrimaryTransfersCompleted;\n+  }\n+\n+  public void setTotalPrimaryTransferTime(long totalPrimaryTransferTime) {\n+    this.totalPrimaryTransferTime = totalPrimaryTransferTime;\n+  }\n+\n+  public void setRegionResult(RegionRedundancyStatus regionResult) {\n+    this.regionResult = regionResult;\n+  }\n+\n+\n+  public RestoreRedundancyResultsImpl() {}\n \n \n   public void addRegionResults(RestoreRedundancyResults results) {\n-    satisfiedRedundancyRegions.putAll(results.getSatisfiedRedundancyRegionResults());\n-    underRedundancyRegions.putAll(results.getUnderRedundancyRegionResults());\n-    zeroRedundancyRegions.putAll(results.getZeroRedundancyRegionResults());\n+    satisfiedRedundancyRegionsResults.putAll(results.getSatisfiedRedundancyRegionResults());\n+    underRedundancyRegionsResults.putAll(results.getUnderRedundancyRegionResults());\n+    zeroRedundancyRegionsResults.putAll(results.getZeroRedundancyRegionResults());\n     totalPrimaryTransfersCompleted += results.getTotalPrimaryTransfersCompleted();\n     totalPrimaryTransferTime =\n-        totalPrimaryTransferTime.plus(results.getTotalPrimaryTransferTime());\n+        totalPrimaryTransferTime + results.getTotalPrimaryTransferTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00385e14cb30197fe0e9a3fd9a37b7110c188a6c"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzODU2Mw==", "bodyText": "done.", "url": "https://github.com/apache/geode/pull/5281#discussion_r444638563", "createdAt": "2020-06-24T04:32:57Z", "author": {"login": "mhansonp"}, "path": "geode-management/src/main/java/org/apache/geode/management/internal/operation/RestoreRedundancyResultsImpl.java", "diffHunk": "@@ -38,24 +37,55 @@\n   public static final String PRIMARY_TRANSFER_TIME = \"Total primary transfer time (ms) = \";\n   private static final long serialVersionUID = -1174735246756963521L;\n \n-  protected Map<String, RegionRedundancyStatus> zeroRedundancyRegions = new HashMap<>();\n-  protected Map<String, RegionRedundancyStatus> underRedundancyRegions = new HashMap<>();\n-  protected Map<String, RegionRedundancyStatus> satisfiedRedundancyRegions = new HashMap<>();\n+  protected Map<String, RegionRedundancyStatus> zeroRedundancyRegionsResults = new HashMap<>();\n+  protected Map<String, RegionRedundancyStatus> underRedundancyRegionsResults = new HashMap<>();\n+  protected Map<String, RegionRedundancyStatus> satisfiedRedundancyRegionsResults = new HashMap<>();\n \n   protected int totalPrimaryTransfersCompleted;\n-  protected Duration totalPrimaryTransferTime = Duration.ZERO;\n+  protected long totalPrimaryTransferTime = 0;\n   protected boolean success = true;\n   protected String statusMessage;\n   protected final List<String> includedRegionsWithNoMembers = new ArrayList<>();\n+  private RegionRedundancyStatus regionResult;\n+\n+  public void setZeroRedundancyRegionsResults(\n+      Map<String, RegionRedundancyStatus> zeroRedundancyRegionsResults) {\n+    this.zeroRedundancyRegionsResults = zeroRedundancyRegionsResults;\n+  }\n+\n+  public void setUnderRedundancyRegionsResults(\n+      Map<String, RegionRedundancyStatus> underRedundancyRegionsResults) {\n+    this.underRedundancyRegionsResults = underRedundancyRegionsResults;\n+  }\n+\n+  public void setSatisfiedRedundancyRegionsResults(\n+      Map<String, RegionRedundancyStatus> satisfiedRedundancyRegionsResults) {\n+    this.satisfiedRedundancyRegionsResults = satisfiedRedundancyRegionsResults;\n+  }\n+\n+  public void setTotalPrimaryTransfersCompleted(int totalPrimaryTransfersCompleted) {\n+    this.totalPrimaryTransfersCompleted = totalPrimaryTransfersCompleted;\n+  }\n+\n+  public void setTotalPrimaryTransferTime(long totalPrimaryTransferTime) {\n+    this.totalPrimaryTransferTime = totalPrimaryTransferTime;\n+  }\n+\n+  public void setRegionResult(RegionRedundancyStatus regionResult) {\n+    this.regionResult = regionResult;\n+  }\n+\n+\n+  public RestoreRedundancyResultsImpl() {}\n \n \n   public void addRegionResults(RestoreRedundancyResults results) {\n-    satisfiedRedundancyRegions.putAll(results.getSatisfiedRedundancyRegionResults());\n-    underRedundancyRegions.putAll(results.getUnderRedundancyRegionResults());\n-    zeroRedundancyRegions.putAll(results.getZeroRedundancyRegionResults());\n+    satisfiedRedundancyRegionsResults.putAll(results.getSatisfiedRedundancyRegionResults());\n+    underRedundancyRegionsResults.putAll(results.getUnderRedundancyRegionResults());\n+    zeroRedundancyRegionsResults.putAll(results.getZeroRedundancyRegionResults());\n     totalPrimaryTransfersCompleted += results.getTotalPrimaryTransfersCompleted();\n     totalPrimaryTransferTime =\n-        totalPrimaryTransferTime.plus(results.getTotalPrimaryTransferTime());\n+        totalPrimaryTransferTime + results.getTotalPrimaryTransferTime();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU2MzM1MQ=="}, "originalCommit": {"oid": "00385e14cb30197fe0e9a3fd9a37b7110c188a6c"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDM1OTAxOnYy", "diffSide": "RIGHT", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/control/SerializableRestoreRedundancyResultsImplTest.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMzowNzoxN1rOGoBaaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo1MToyMlrOGoawrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYxOTM2OQ==", "bodyText": "you can use assertJ's isEqualToComparingFieldByField method to compare all the fields are the same", "url": "https://github.com/apache/geode/pull/5281#discussion_r444619369", "createdAt": "2020-06-24T03:07:17Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/control/SerializableRestoreRedundancyResultsImplTest.java", "diffHunk": "@@ -153,39 +157,64 @@ public void addRegionResultsAddsToCorrectInternalMapAndAddsPrimaryReassignmentDe\n     when(regionResults.getSatisfiedRedundancyRegionResults())\n         .thenReturn(Collections.singletonMap(successfulRegionName, successfulRegionResult));\n     when(regionResults.getTotalPrimaryTransfersCompleted()).thenReturn(transfersCompleted);\n-    when(regionResults.getTotalPrimaryTransferTime()).thenReturn(Duration.ofMillis(transferTime));\n+    when(regionResults.getTotalPrimaryTransferTime()).thenReturn(transferTime);\n \n     results.addRegionResults(regionResults);\n \n     Map<String, RegionRedundancyStatus> zeroRedundancyResults =\n         results.getZeroRedundancyRegionResults();\n-    assertThat(zeroRedundancyResults.size(), is(1));\n-    assertThat(zeroRedundancyResults.get(zeroRedundancyRegionName), is(zeroRedundancyRegionResult));\n+    assertThat(zeroRedundancyResults.size()).isEqualTo(1);\n+    assertThat(zeroRedundancyResults.get(zeroRedundancyRegionName))\n+        .isEqualTo(zeroRedundancyRegionResult);\n \n     Map<String, RegionRedundancyStatus> underRedundancyResults =\n         results.getUnderRedundancyRegionResults();\n-    assertThat(underRedundancyResults.size(), is(1));\n-    assertThat(underRedundancyResults.get(underRedundancyRegionName),\n-        is(underRedundancyRegionResult));\n+    assertThat(underRedundancyResults.size()).isEqualTo(1);\n+    assertThat(underRedundancyResults.get(underRedundancyRegionName))\n+        .isEqualTo(underRedundancyRegionResult);\n \n     Map<String, RegionRedundancyStatus> successfulRegionResults =\n         results.getSatisfiedRedundancyRegionResults();\n-    assertThat(successfulRegionResults.size(), is(1));\n-    assertThat(successfulRegionResults.get(successfulRegionName), is(successfulRegionResult));\n+    assertThat(successfulRegionResults.size()).isEqualTo(1);\n+    assertThat(successfulRegionResults.get(successfulRegionName)).isEqualTo(successfulRegionResult);\n \n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime);\n   }\n \n   @Test\n   public void addPrimaryDetailsUpdatesValue() {\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(0));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(0L));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(0);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(0L);\n     results.addPrimaryReassignmentDetails(details);\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime);\n     results.addPrimaryReassignmentDetails(details);\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted * 2));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime * 2));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted * 2);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime * 2);\n+  }\n+\n+  @Test\n+  public void testSerializable() throws JsonProcessingException {\n+\n+    RestoreRedundancyResultsImpl restoreRedundancyResults = new RestoreRedundancyResultsImpl();\n+    restoreRedundancyResults.setStatusMessage(\"Test\");\n+    restoreRedundancyResults.setSuccess(true);\n+    restoreRedundancyResults.setTotalPrimaryTransfersCompleted(150);\n+    restoreRedundancyResults.setTotalPrimaryTransferTime(250);\n+    RegionRedundancyStatusImpl regionRedundancyStatus = new RegionRedundancyStatusImpl();\n+    regionRedundancyStatus.setActualRedundancy(1);\n+    regionRedundancyStatus.setConfiguredRedundancy(1);\n+    regionRedundancyStatus.setRegionName(\"/foo\");\n+    regionRedundancyStatus.setStatus(SATISFIED);\n+    restoreRedundancyResults.addRegionResult(regionRedundancyStatus);\n+    String jsonString = geodeMapper.writeValueAsString(restoreRedundancyResults);\n+    // deserialize the class\n+    RestoreRedundancyResultsImpl value =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "00385e14cb30197fe0e9a3fd9a37b7110c188a6c"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzODY4Ng==", "bodyText": "done", "url": "https://github.com/apache/geode/pull/5281#discussion_r444638686", "createdAt": "2020-06-24T04:33:31Z", "author": {"login": "mhansonp"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/control/SerializableRestoreRedundancyResultsImplTest.java", "diffHunk": "@@ -153,39 +157,64 @@ public void addRegionResultsAddsToCorrectInternalMapAndAddsPrimaryReassignmentDe\n     when(regionResults.getSatisfiedRedundancyRegionResults())\n         .thenReturn(Collections.singletonMap(successfulRegionName, successfulRegionResult));\n     when(regionResults.getTotalPrimaryTransfersCompleted()).thenReturn(transfersCompleted);\n-    when(regionResults.getTotalPrimaryTransferTime()).thenReturn(Duration.ofMillis(transferTime));\n+    when(regionResults.getTotalPrimaryTransferTime()).thenReturn(transferTime);\n \n     results.addRegionResults(regionResults);\n \n     Map<String, RegionRedundancyStatus> zeroRedundancyResults =\n         results.getZeroRedundancyRegionResults();\n-    assertThat(zeroRedundancyResults.size(), is(1));\n-    assertThat(zeroRedundancyResults.get(zeroRedundancyRegionName), is(zeroRedundancyRegionResult));\n+    assertThat(zeroRedundancyResults.size()).isEqualTo(1);\n+    assertThat(zeroRedundancyResults.get(zeroRedundancyRegionName))\n+        .isEqualTo(zeroRedundancyRegionResult);\n \n     Map<String, RegionRedundancyStatus> underRedundancyResults =\n         results.getUnderRedundancyRegionResults();\n-    assertThat(underRedundancyResults.size(), is(1));\n-    assertThat(underRedundancyResults.get(underRedundancyRegionName),\n-        is(underRedundancyRegionResult));\n+    assertThat(underRedundancyResults.size()).isEqualTo(1);\n+    assertThat(underRedundancyResults.get(underRedundancyRegionName))\n+        .isEqualTo(underRedundancyRegionResult);\n \n     Map<String, RegionRedundancyStatus> successfulRegionResults =\n         results.getSatisfiedRedundancyRegionResults();\n-    assertThat(successfulRegionResults.size(), is(1));\n-    assertThat(successfulRegionResults.get(successfulRegionName), is(successfulRegionResult));\n+    assertThat(successfulRegionResults.size()).isEqualTo(1);\n+    assertThat(successfulRegionResults.get(successfulRegionName)).isEqualTo(successfulRegionResult);\n \n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime);\n   }\n \n   @Test\n   public void addPrimaryDetailsUpdatesValue() {\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(0));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(0L));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(0);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(0L);\n     results.addPrimaryReassignmentDetails(details);\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime);\n     results.addPrimaryReassignmentDetails(details);\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted * 2));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime * 2));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted * 2);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime * 2);\n+  }\n+\n+  @Test\n+  public void testSerializable() throws JsonProcessingException {\n+\n+    RestoreRedundancyResultsImpl restoreRedundancyResults = new RestoreRedundancyResultsImpl();\n+    restoreRedundancyResults.setStatusMessage(\"Test\");\n+    restoreRedundancyResults.setSuccess(true);\n+    restoreRedundancyResults.setTotalPrimaryTransfersCompleted(150);\n+    restoreRedundancyResults.setTotalPrimaryTransferTime(250);\n+    RegionRedundancyStatusImpl regionRedundancyStatus = new RegionRedundancyStatusImpl();\n+    regionRedundancyStatus.setActualRedundancy(1);\n+    regionRedundancyStatus.setConfiguredRedundancy(1);\n+    regionRedundancyStatus.setRegionName(\"/foo\");\n+    regionRedundancyStatus.setStatus(SATISFIED);\n+    restoreRedundancyResults.addRegionResult(regionRedundancyStatus);\n+    String jsonString = geodeMapper.writeValueAsString(restoreRedundancyResults);\n+    // deserialize the class\n+    RestoreRedundancyResultsImpl value =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYxOTM2OQ=="}, "originalCommit": {"oid": "00385e14cb30197fe0e9a3fd9a37b7110c188a6c"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4MTIxNg==", "bodyText": "did you forget to push your commit?", "url": "https://github.com/apache/geode/pull/5281#discussion_r444981216", "createdAt": "2020-06-24T15:28:38Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/control/SerializableRestoreRedundancyResultsImplTest.java", "diffHunk": "@@ -153,39 +157,64 @@ public void addRegionResultsAddsToCorrectInternalMapAndAddsPrimaryReassignmentDe\n     when(regionResults.getSatisfiedRedundancyRegionResults())\n         .thenReturn(Collections.singletonMap(successfulRegionName, successfulRegionResult));\n     when(regionResults.getTotalPrimaryTransfersCompleted()).thenReturn(transfersCompleted);\n-    when(regionResults.getTotalPrimaryTransferTime()).thenReturn(Duration.ofMillis(transferTime));\n+    when(regionResults.getTotalPrimaryTransferTime()).thenReturn(transferTime);\n \n     results.addRegionResults(regionResults);\n \n     Map<String, RegionRedundancyStatus> zeroRedundancyResults =\n         results.getZeroRedundancyRegionResults();\n-    assertThat(zeroRedundancyResults.size(), is(1));\n-    assertThat(zeroRedundancyResults.get(zeroRedundancyRegionName), is(zeroRedundancyRegionResult));\n+    assertThat(zeroRedundancyResults.size()).isEqualTo(1);\n+    assertThat(zeroRedundancyResults.get(zeroRedundancyRegionName))\n+        .isEqualTo(zeroRedundancyRegionResult);\n \n     Map<String, RegionRedundancyStatus> underRedundancyResults =\n         results.getUnderRedundancyRegionResults();\n-    assertThat(underRedundancyResults.size(), is(1));\n-    assertThat(underRedundancyResults.get(underRedundancyRegionName),\n-        is(underRedundancyRegionResult));\n+    assertThat(underRedundancyResults.size()).isEqualTo(1);\n+    assertThat(underRedundancyResults.get(underRedundancyRegionName))\n+        .isEqualTo(underRedundancyRegionResult);\n \n     Map<String, RegionRedundancyStatus> successfulRegionResults =\n         results.getSatisfiedRedundancyRegionResults();\n-    assertThat(successfulRegionResults.size(), is(1));\n-    assertThat(successfulRegionResults.get(successfulRegionName), is(successfulRegionResult));\n+    assertThat(successfulRegionResults.size()).isEqualTo(1);\n+    assertThat(successfulRegionResults.get(successfulRegionName)).isEqualTo(successfulRegionResult);\n \n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime);\n   }\n \n   @Test\n   public void addPrimaryDetailsUpdatesValue() {\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(0));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(0L));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(0);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(0L);\n     results.addPrimaryReassignmentDetails(details);\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime);\n     results.addPrimaryReassignmentDetails(details);\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted * 2));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime * 2));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted * 2);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime * 2);\n+  }\n+\n+  @Test\n+  public void testSerializable() throws JsonProcessingException {\n+\n+    RestoreRedundancyResultsImpl restoreRedundancyResults = new RestoreRedundancyResultsImpl();\n+    restoreRedundancyResults.setStatusMessage(\"Test\");\n+    restoreRedundancyResults.setSuccess(true);\n+    restoreRedundancyResults.setTotalPrimaryTransfersCompleted(150);\n+    restoreRedundancyResults.setTotalPrimaryTransferTime(250);\n+    RegionRedundancyStatusImpl regionRedundancyStatus = new RegionRedundancyStatusImpl();\n+    regionRedundancyStatus.setActualRedundancy(1);\n+    regionRedundancyStatus.setConfiguredRedundancy(1);\n+    regionRedundancyStatus.setRegionName(\"/foo\");\n+    regionRedundancyStatus.setStatus(SATISFIED);\n+    restoreRedundancyResults.addRegionResult(regionRedundancyStatus);\n+    String jsonString = geodeMapper.writeValueAsString(restoreRedundancyResults);\n+    // deserialize the class\n+    RestoreRedundancyResultsImpl value =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYxOTM2OQ=="}, "originalCommit": {"oid": "00385e14cb30197fe0e9a3fd9a37b7110c188a6c"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAxOTIzNg==", "bodyText": "Nope it is failing... It doesn't like the objects in the satisfiedregion lists.", "url": "https://github.com/apache/geode/pull/5281#discussion_r445019236", "createdAt": "2020-06-24T16:26:07Z", "author": {"login": "mhansonp"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/control/SerializableRestoreRedundancyResultsImplTest.java", "diffHunk": "@@ -153,39 +157,64 @@ public void addRegionResultsAddsToCorrectInternalMapAndAddsPrimaryReassignmentDe\n     when(regionResults.getSatisfiedRedundancyRegionResults())\n         .thenReturn(Collections.singletonMap(successfulRegionName, successfulRegionResult));\n     when(regionResults.getTotalPrimaryTransfersCompleted()).thenReturn(transfersCompleted);\n-    when(regionResults.getTotalPrimaryTransferTime()).thenReturn(Duration.ofMillis(transferTime));\n+    when(regionResults.getTotalPrimaryTransferTime()).thenReturn(transferTime);\n \n     results.addRegionResults(regionResults);\n \n     Map<String, RegionRedundancyStatus> zeroRedundancyResults =\n         results.getZeroRedundancyRegionResults();\n-    assertThat(zeroRedundancyResults.size(), is(1));\n-    assertThat(zeroRedundancyResults.get(zeroRedundancyRegionName), is(zeroRedundancyRegionResult));\n+    assertThat(zeroRedundancyResults.size()).isEqualTo(1);\n+    assertThat(zeroRedundancyResults.get(zeroRedundancyRegionName))\n+        .isEqualTo(zeroRedundancyRegionResult);\n \n     Map<String, RegionRedundancyStatus> underRedundancyResults =\n         results.getUnderRedundancyRegionResults();\n-    assertThat(underRedundancyResults.size(), is(1));\n-    assertThat(underRedundancyResults.get(underRedundancyRegionName),\n-        is(underRedundancyRegionResult));\n+    assertThat(underRedundancyResults.size()).isEqualTo(1);\n+    assertThat(underRedundancyResults.get(underRedundancyRegionName))\n+        .isEqualTo(underRedundancyRegionResult);\n \n     Map<String, RegionRedundancyStatus> successfulRegionResults =\n         results.getSatisfiedRedundancyRegionResults();\n-    assertThat(successfulRegionResults.size(), is(1));\n-    assertThat(successfulRegionResults.get(successfulRegionName), is(successfulRegionResult));\n+    assertThat(successfulRegionResults.size()).isEqualTo(1);\n+    assertThat(successfulRegionResults.get(successfulRegionName)).isEqualTo(successfulRegionResult);\n \n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime);\n   }\n \n   @Test\n   public void addPrimaryDetailsUpdatesValue() {\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(0));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(0L));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(0);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(0L);\n     results.addPrimaryReassignmentDetails(details);\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime);\n     results.addPrimaryReassignmentDetails(details);\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted * 2));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime * 2));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted * 2);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime * 2);\n+  }\n+\n+  @Test\n+  public void testSerializable() throws JsonProcessingException {\n+\n+    RestoreRedundancyResultsImpl restoreRedundancyResults = new RestoreRedundancyResultsImpl();\n+    restoreRedundancyResults.setStatusMessage(\"Test\");\n+    restoreRedundancyResults.setSuccess(true);\n+    restoreRedundancyResults.setTotalPrimaryTransfersCompleted(150);\n+    restoreRedundancyResults.setTotalPrimaryTransferTime(250);\n+    RegionRedundancyStatusImpl regionRedundancyStatus = new RegionRedundancyStatusImpl();\n+    regionRedundancyStatus.setActualRedundancy(1);\n+    regionRedundancyStatus.setConfiguredRedundancy(1);\n+    regionRedundancyStatus.setRegionName(\"/foo\");\n+    regionRedundancyStatus.setStatus(SATISFIED);\n+    restoreRedundancyResults.addRegionResult(regionRedundancyStatus);\n+    String jsonString = geodeMapper.writeValueAsString(restoreRedundancyResults);\n+    // deserialize the class\n+    RestoreRedundancyResultsImpl value =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYxOTM2OQ=="}, "originalCommit": {"oid": "00385e14cb30197fe0e9a3fd9a37b7110c188a6c"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAxOTU0OA==", "bodyText": "sorry hash maps.", "url": "https://github.com/apache/geode/pull/5281#discussion_r445019548", "createdAt": "2020-06-24T16:26:33Z", "author": {"login": "mhansonp"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/control/SerializableRestoreRedundancyResultsImplTest.java", "diffHunk": "@@ -153,39 +157,64 @@ public void addRegionResultsAddsToCorrectInternalMapAndAddsPrimaryReassignmentDe\n     when(regionResults.getSatisfiedRedundancyRegionResults())\n         .thenReturn(Collections.singletonMap(successfulRegionName, successfulRegionResult));\n     when(regionResults.getTotalPrimaryTransfersCompleted()).thenReturn(transfersCompleted);\n-    when(regionResults.getTotalPrimaryTransferTime()).thenReturn(Duration.ofMillis(transferTime));\n+    when(regionResults.getTotalPrimaryTransferTime()).thenReturn(transferTime);\n \n     results.addRegionResults(regionResults);\n \n     Map<String, RegionRedundancyStatus> zeroRedundancyResults =\n         results.getZeroRedundancyRegionResults();\n-    assertThat(zeroRedundancyResults.size(), is(1));\n-    assertThat(zeroRedundancyResults.get(zeroRedundancyRegionName), is(zeroRedundancyRegionResult));\n+    assertThat(zeroRedundancyResults.size()).isEqualTo(1);\n+    assertThat(zeroRedundancyResults.get(zeroRedundancyRegionName))\n+        .isEqualTo(zeroRedundancyRegionResult);\n \n     Map<String, RegionRedundancyStatus> underRedundancyResults =\n         results.getUnderRedundancyRegionResults();\n-    assertThat(underRedundancyResults.size(), is(1));\n-    assertThat(underRedundancyResults.get(underRedundancyRegionName),\n-        is(underRedundancyRegionResult));\n+    assertThat(underRedundancyResults.size()).isEqualTo(1);\n+    assertThat(underRedundancyResults.get(underRedundancyRegionName))\n+        .isEqualTo(underRedundancyRegionResult);\n \n     Map<String, RegionRedundancyStatus> successfulRegionResults =\n         results.getSatisfiedRedundancyRegionResults();\n-    assertThat(successfulRegionResults.size(), is(1));\n-    assertThat(successfulRegionResults.get(successfulRegionName), is(successfulRegionResult));\n+    assertThat(successfulRegionResults.size()).isEqualTo(1);\n+    assertThat(successfulRegionResults.get(successfulRegionName)).isEqualTo(successfulRegionResult);\n \n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime);\n   }\n \n   @Test\n   public void addPrimaryDetailsUpdatesValue() {\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(0));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(0L));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(0);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(0L);\n     results.addPrimaryReassignmentDetails(details);\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime);\n     results.addPrimaryReassignmentDetails(details);\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted * 2));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime * 2));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted * 2);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime * 2);\n+  }\n+\n+  @Test\n+  public void testSerializable() throws JsonProcessingException {\n+\n+    RestoreRedundancyResultsImpl restoreRedundancyResults = new RestoreRedundancyResultsImpl();\n+    restoreRedundancyResults.setStatusMessage(\"Test\");\n+    restoreRedundancyResults.setSuccess(true);\n+    restoreRedundancyResults.setTotalPrimaryTransfersCompleted(150);\n+    restoreRedundancyResults.setTotalPrimaryTransferTime(250);\n+    RegionRedundancyStatusImpl regionRedundancyStatus = new RegionRedundancyStatusImpl();\n+    regionRedundancyStatus.setActualRedundancy(1);\n+    regionRedundancyStatus.setConfiguredRedundancy(1);\n+    regionRedundancyStatus.setRegionName(\"/foo\");\n+    regionRedundancyStatus.setStatus(SATISFIED);\n+    restoreRedundancyResults.addRegionResult(regionRedundancyStatus);\n+    String jsonString = geodeMapper.writeValueAsString(restoreRedundancyResults);\n+    // deserialize the class\n+    RestoreRedundancyResultsImpl value =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYxOTM2OQ=="}, "originalCommit": {"oid": "00385e14cb30197fe0e9a3fd9a37b7110c188a6c"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzNDY3MA==", "bodyText": "assertThat(value).usingRecursiveComparison().isEqualTo(restoreRedundancyResults);\n\nworked", "url": "https://github.com/apache/geode/pull/5281#discussion_r445034670", "createdAt": "2020-06-24T16:51:22Z", "author": {"login": "mhansonp"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/control/SerializableRestoreRedundancyResultsImplTest.java", "diffHunk": "@@ -153,39 +157,64 @@ public void addRegionResultsAddsToCorrectInternalMapAndAddsPrimaryReassignmentDe\n     when(regionResults.getSatisfiedRedundancyRegionResults())\n         .thenReturn(Collections.singletonMap(successfulRegionName, successfulRegionResult));\n     when(regionResults.getTotalPrimaryTransfersCompleted()).thenReturn(transfersCompleted);\n-    when(regionResults.getTotalPrimaryTransferTime()).thenReturn(Duration.ofMillis(transferTime));\n+    when(regionResults.getTotalPrimaryTransferTime()).thenReturn(transferTime);\n \n     results.addRegionResults(regionResults);\n \n     Map<String, RegionRedundancyStatus> zeroRedundancyResults =\n         results.getZeroRedundancyRegionResults();\n-    assertThat(zeroRedundancyResults.size(), is(1));\n-    assertThat(zeroRedundancyResults.get(zeroRedundancyRegionName), is(zeroRedundancyRegionResult));\n+    assertThat(zeroRedundancyResults.size()).isEqualTo(1);\n+    assertThat(zeroRedundancyResults.get(zeroRedundancyRegionName))\n+        .isEqualTo(zeroRedundancyRegionResult);\n \n     Map<String, RegionRedundancyStatus> underRedundancyResults =\n         results.getUnderRedundancyRegionResults();\n-    assertThat(underRedundancyResults.size(), is(1));\n-    assertThat(underRedundancyResults.get(underRedundancyRegionName),\n-        is(underRedundancyRegionResult));\n+    assertThat(underRedundancyResults.size()).isEqualTo(1);\n+    assertThat(underRedundancyResults.get(underRedundancyRegionName))\n+        .isEqualTo(underRedundancyRegionResult);\n \n     Map<String, RegionRedundancyStatus> successfulRegionResults =\n         results.getSatisfiedRedundancyRegionResults();\n-    assertThat(successfulRegionResults.size(), is(1));\n-    assertThat(successfulRegionResults.get(successfulRegionName), is(successfulRegionResult));\n+    assertThat(successfulRegionResults.size()).isEqualTo(1);\n+    assertThat(successfulRegionResults.get(successfulRegionName)).isEqualTo(successfulRegionResult);\n \n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime);\n   }\n \n   @Test\n   public void addPrimaryDetailsUpdatesValue() {\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(0));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(0L));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(0);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(0L);\n     results.addPrimaryReassignmentDetails(details);\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime);\n     results.addPrimaryReassignmentDetails(details);\n-    assertThat(results.getTotalPrimaryTransfersCompleted(), is(transfersCompleted * 2));\n-    assertThat(results.getTotalPrimaryTransferTime().toMillis(), is(transferTime * 2));\n+    assertThat(results.getTotalPrimaryTransfersCompleted()).isEqualTo(transfersCompleted * 2);\n+    assertThat(results.getTotalPrimaryTransferTime()).isEqualTo(transferTime * 2);\n+  }\n+\n+  @Test\n+  public void testSerializable() throws JsonProcessingException {\n+\n+    RestoreRedundancyResultsImpl restoreRedundancyResults = new RestoreRedundancyResultsImpl();\n+    restoreRedundancyResults.setStatusMessage(\"Test\");\n+    restoreRedundancyResults.setSuccess(true);\n+    restoreRedundancyResults.setTotalPrimaryTransfersCompleted(150);\n+    restoreRedundancyResults.setTotalPrimaryTransferTime(250);\n+    RegionRedundancyStatusImpl regionRedundancyStatus = new RegionRedundancyStatusImpl();\n+    regionRedundancyStatus.setActualRedundancy(1);\n+    regionRedundancyStatus.setConfiguredRedundancy(1);\n+    regionRedundancyStatus.setRegionName(\"/foo\");\n+    regionRedundancyStatus.setStatus(SATISFIED);\n+    restoreRedundancyResults.addRegionResult(regionRedundancyStatus);\n+    String jsonString = geodeMapper.writeValueAsString(restoreRedundancyResults);\n+    // deserialize the class\n+    RestoreRedundancyResultsImpl value =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYxOTM2OQ=="}, "originalCommit": {"oid": "00385e14cb30197fe0e9a3fd9a37b7110c188a6c"}, "originalPosition": 192}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4027, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}