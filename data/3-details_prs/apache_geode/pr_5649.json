{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3ODA5ODIz", "number": 5649, "title": "GEODE-8637: Give each test worker a unique working dir", "bodyText": "Before running a test task, wrap its TestFramework in a wrapper that creates a unique working dir for each new test worker.\nThe affected test tasks are:\n\nacceptanceTest\ndistributedTest\nintegrationTest\nuiTest\nupgradeTest\nAll repeat*Test tasks", "createdAt": "2020-10-21T19:21:40Z", "url": "https://github.com/apache/geode/pull/5649", "merged": true, "mergeCommit": {"oid": "e65f57928224808305b3ef8d1286d55e656a4894"}, "closed": true, "closedAt": "2020-10-27T20:30:40Z", "author": {"login": "demery-pivotal"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdU0C7dgFqTUxNDE4NjQ0NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWrSM1ABqjM5MjY4MjMyOTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MTg2NDQ1", "url": "https://github.com/apache/geode/pull/5649#pullrequestreview-514186445", "createdAt": "2020-10-21T21:07:23Z", "commit": {"oid": "5fa02e9466c4f1b2422e9a33172738dd6547f1b6"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTowNzoyM1rOHmFdkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMToxMzowOVrOHmFucw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY5NzQyNA==", "bodyText": "I wonder if we need/want this gemfire.properties file anymore? As far as I'm concerned tests shouldn't be running with a gemfire.properties file lying around anyway?\nI see we have TestPropertiesWriter that creates a properties file. But all it has is log-level=config, which is the default anyway...", "url": "https://github.com/apache/geode/pull/5649#discussion_r509697424", "createdAt": "2020-10-21T21:07:23Z", "author": {"login": "upthewaterspout"}, "path": "buildSrc/src/main/java/org/apache/geode/gradle/RunInSubdirectoryTestFramework.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.gradle;\n+\n+import static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.gradle.api.Action;\n+import org.gradle.api.internal.tasks.testing.TestFramework;\n+import org.gradle.api.internal.tasks.testing.WorkerTestClassProcessorFactory;\n+import org.gradle.api.internal.tasks.testing.detection.TestFrameworkDetector;\n+import org.gradle.api.tasks.testing.TestFrameworkOptions;\n+import org.gradle.process.internal.JavaExecHandleBuilder;\n+import org.gradle.process.internal.worker.WorkerProcessBuilder;\n+\n+/**\n+ * Wraps a test framework to run each test worker in a separate working directory.\n+ */\n+public class RunInSubdirectoryTestFramework implements TestFramework {\n+  private static final String GEMFIRE_PROPERTIES = \"gemfire.properties\";\n+  private final AtomicLong workerId = new AtomicLong();\n+  private final TestFramework delegate;\n+\n+  public RunInSubdirectoryTestFramework(TestFramework delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public TestFrameworkDetector getDetector() {\n+    return delegate.getDetector();\n+  }\n+\n+  @Override\n+  public TestFrameworkOptions getOptions() {\n+    return delegate.getOptions();\n+  }\n+\n+  @Override\n+  public WorkerTestClassProcessorFactory getProcessorFactory() {\n+    return delegate.getProcessorFactory();\n+  }\n+\n+  /**\n+   * Return an action that configures the test worker builder to run the test worker in a unique\n+   * subdirectory of the task's working directory.\n+   */\n+  @Override\n+  public Action<WorkerProcessBuilder> getWorkerConfigurationAction() {\n+    return workerProcessBuilder -> {\n+      delegate.getWorkerConfigurationAction().execute(workerProcessBuilder);\n+      JavaExecHandleBuilder javaCommand = workerProcessBuilder.getJavaCommand();\n+\n+      Path taskWorkingDir = javaCommand.getWorkingDir().toPath();\n+      String workerWorkingDirName = String.format(\"test-worker-%06d\", workerId.incrementAndGet());\n+      Path workerWorkingDir = taskWorkingDir.resolve(workerWorkingDirName);\n+\n+      createWorkingDir(workerWorkingDir);\n+      copyGemFirePropertiesFile(taskWorkingDir, workerWorkingDir);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fa02e9466c4f1b2422e9a33172738dd6547f1b6"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwMTc0Nw==", "bodyText": "Huh, I wonder if you could do something like javaCommand.setExecutable(\"docker\") ... to run the workers in a docker container ;)", "url": "https://github.com/apache/geode/pull/5649#discussion_r509701747", "createdAt": "2020-10-21T21:13:09Z", "author": {"login": "upthewaterspout"}, "path": "buildSrc/src/main/java/org/apache/geode/gradle/RunInSubdirectoryTestFramework.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.gradle;\n+\n+import static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.gradle.api.Action;\n+import org.gradle.api.internal.tasks.testing.TestFramework;\n+import org.gradle.api.internal.tasks.testing.WorkerTestClassProcessorFactory;\n+import org.gradle.api.internal.tasks.testing.detection.TestFrameworkDetector;\n+import org.gradle.api.tasks.testing.TestFrameworkOptions;\n+import org.gradle.process.internal.JavaExecHandleBuilder;\n+import org.gradle.process.internal.worker.WorkerProcessBuilder;\n+\n+/**\n+ * Wraps a test framework to run each test worker in a separate working directory.\n+ */\n+public class RunInSubdirectoryTestFramework implements TestFramework {\n+  private static final String GEMFIRE_PROPERTIES = \"gemfire.properties\";\n+  private final AtomicLong workerId = new AtomicLong();\n+  private final TestFramework delegate;\n+\n+  public RunInSubdirectoryTestFramework(TestFramework delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public TestFrameworkDetector getDetector() {\n+    return delegate.getDetector();\n+  }\n+\n+  @Override\n+  public TestFrameworkOptions getOptions() {\n+    return delegate.getOptions();\n+  }\n+\n+  @Override\n+  public WorkerTestClassProcessorFactory getProcessorFactory() {\n+    return delegate.getProcessorFactory();\n+  }\n+\n+  /**\n+   * Return an action that configures the test worker builder to run the test worker in a unique\n+   * subdirectory of the task's working directory.\n+   */\n+  @Override\n+  public Action<WorkerProcessBuilder> getWorkerConfigurationAction() {\n+    return workerProcessBuilder -> {\n+      delegate.getWorkerConfigurationAction().execute(workerProcessBuilder);\n+      JavaExecHandleBuilder javaCommand = workerProcessBuilder.getJavaCommand();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fa02e9466c4f1b2422e9a33172738dd6547f1b6"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0MjA2MDQx", "url": "https://github.com/apache/geode/pull/5649#pullrequestreview-514206041", "createdAt": "2020-10-21T21:39:04Z", "commit": {"oid": "5fa02e9466c4f1b2422e9a33172738dd6547f1b6"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTozOTowNFrOHmG8XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTozOTowNFrOHmG8XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyMTY5Mg==", "bodyText": "The gemfire.properties files, in all its incarnations, has been a thorn to me, because the writing of it causes a repack of geode-core.jar, which triggers all kinds of downstream effects.", "url": "https://github.com/apache/geode/pull/5649#discussion_r509721692", "createdAt": "2020-10-21T21:39:04Z", "author": {"login": "rhoughton-pivot"}, "path": "buildSrc/src/main/java/org/apache/geode/gradle/RunInSubdirectoryTestFramework.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.gradle;\n+\n+import static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.gradle.api.Action;\n+import org.gradle.api.internal.tasks.testing.TestFramework;\n+import org.gradle.api.internal.tasks.testing.WorkerTestClassProcessorFactory;\n+import org.gradle.api.internal.tasks.testing.detection.TestFrameworkDetector;\n+import org.gradle.api.tasks.testing.TestFrameworkOptions;\n+import org.gradle.process.internal.JavaExecHandleBuilder;\n+import org.gradle.process.internal.worker.WorkerProcessBuilder;\n+\n+/**\n+ * Wraps a test framework to run each test worker in a separate working directory.\n+ */\n+public class RunInSubdirectoryTestFramework implements TestFramework {\n+  private static final String GEMFIRE_PROPERTIES = \"gemfire.properties\";\n+  private final AtomicLong workerId = new AtomicLong();\n+  private final TestFramework delegate;\n+\n+  public RunInSubdirectoryTestFramework(TestFramework delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public TestFrameworkDetector getDetector() {\n+    return delegate.getDetector();\n+  }\n+\n+  @Override\n+  public TestFrameworkOptions getOptions() {\n+    return delegate.getOptions();\n+  }\n+\n+  @Override\n+  public WorkerTestClassProcessorFactory getProcessorFactory() {\n+    return delegate.getProcessorFactory();\n+  }\n+\n+  /**\n+   * Return an action that configures the test worker builder to run the test worker in a unique\n+   * subdirectory of the task's working directory.\n+   */\n+  @Override\n+  public Action<WorkerProcessBuilder> getWorkerConfigurationAction() {\n+    return workerProcessBuilder -> {\n+      delegate.getWorkerConfigurationAction().execute(workerProcessBuilder);\n+      JavaExecHandleBuilder javaCommand = workerProcessBuilder.getJavaCommand();\n+\n+      Path taskWorkingDir = javaCommand.getWorkingDir().toPath();\n+      String workerWorkingDirName = String.format(\"test-worker-%06d\", workerId.incrementAndGet());\n+      Path workerWorkingDir = taskWorkingDir.resolve(workerWorkingDirName);\n+\n+      createWorkingDir(workerWorkingDir);\n+      copyGemFirePropertiesFile(taskWorkingDir, workerWorkingDir);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY5NzQyNA=="}, "originalCommit": {"oid": "5fa02e9466c4f1b2422e9a33172738dd6547f1b6"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0OTI3ODIx", "url": "https://github.com/apache/geode/pull/5649#pullrequestreview-514927821", "createdAt": "2020-10-22T16:47:41Z", "commit": {"oid": "5fa02e9466c4f1b2422e9a33172738dd6547f1b6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1MDA3MjE3", "url": "https://github.com/apache/geode/pull/5649#pullrequestreview-515007217", "createdAt": "2020-10-22T18:28:31Z", "commit": {"oid": "5fa02e9466c4f1b2422e9a33172738dd6547f1b6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODoyODozMVrOHmumNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODoyODozMVrOHmumNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM3MTM4MQ==", "bodyText": "If taskPropertiesFile does not exist, will it affect javaCommand.setWorkingDir(workerWorkingDir); (line 78)? Or will it have some unexpected behavior when running tests?", "url": "https://github.com/apache/geode/pull/5649#discussion_r510371381", "createdAt": "2020-10-22T18:28:31Z", "author": {"login": "jchen21"}, "path": "buildSrc/src/main/java/org/apache/geode/gradle/RunInSubdirectoryTestFramework.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.gradle;\n+\n+import static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.gradle.api.Action;\n+import org.gradle.api.internal.tasks.testing.TestFramework;\n+import org.gradle.api.internal.tasks.testing.WorkerTestClassProcessorFactory;\n+import org.gradle.api.internal.tasks.testing.detection.TestFrameworkDetector;\n+import org.gradle.api.tasks.testing.TestFrameworkOptions;\n+import org.gradle.process.internal.JavaExecHandleBuilder;\n+import org.gradle.process.internal.worker.WorkerProcessBuilder;\n+\n+/**\n+ * Wraps a test framework to run each test worker in a separate working directory.\n+ */\n+public class RunInSubdirectoryTestFramework implements TestFramework {\n+  private static final String GEMFIRE_PROPERTIES = \"gemfire.properties\";\n+  private final AtomicLong workerId = new AtomicLong();\n+  private final TestFramework delegate;\n+\n+  public RunInSubdirectoryTestFramework(TestFramework delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public TestFrameworkDetector getDetector() {\n+    return delegate.getDetector();\n+  }\n+\n+  @Override\n+  public TestFrameworkOptions getOptions() {\n+    return delegate.getOptions();\n+  }\n+\n+  @Override\n+  public WorkerTestClassProcessorFactory getProcessorFactory() {\n+    return delegate.getProcessorFactory();\n+  }\n+\n+  /**\n+   * Return an action that configures the test worker builder to run the test worker in a unique\n+   * subdirectory of the task's working directory.\n+   */\n+  @Override\n+  public Action<WorkerProcessBuilder> getWorkerConfigurationAction() {\n+    return workerProcessBuilder -> {\n+      delegate.getWorkerConfigurationAction().execute(workerProcessBuilder);\n+      JavaExecHandleBuilder javaCommand = workerProcessBuilder.getJavaCommand();\n+\n+      Path taskWorkingDir = javaCommand.getWorkingDir().toPath();\n+      String workerWorkingDirName = String.format(\"test-worker-%06d\", workerId.incrementAndGet());\n+      Path workerWorkingDir = taskWorkingDir.resolve(workerWorkingDirName);\n+\n+      createWorkingDir(workerWorkingDir);\n+      copyGemFirePropertiesFile(taskWorkingDir, workerWorkingDir);\n+\n+      javaCommand.setWorkingDir(workerWorkingDir);\n+    };\n+  }\n+\n+  private void copyGemFirePropertiesFile(Path taskWorkingDir, Path workerWorkingDir) {\n+    Path taskPropertiesFile = taskWorkingDir.resolve(GEMFIRE_PROPERTIES);\n+    if (!Files.exists(taskPropertiesFile)) {\n+      return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fa02e9466c4f1b2422e9a33172738dd6547f1b6"}, "originalPosition": 85}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5fa02e9466c4f1b2422e9a33172738dd6547f1b6", "author": {"user": {"login": "demery-pivotal", "name": "Dale Emery"}}, "url": "https://github.com/apache/geode/commit/5fa02e9466c4f1b2422e9a33172738dd6547f1b6", "committedDate": "2020-10-21T19:27:05Z", "message": "Fix typo in variable name"}, "afterCommit": {"oid": "167400f7709c5ed6b7ca3938191a4443c8e3de9b", "author": {"user": {"login": "demery-pivotal", "name": "Dale Emery"}}, "url": "https://github.com/apache/geode/commit/167400f7709c5ed6b7ca3938191a4443c8e3de9b", "committedDate": "2020-10-22T20:19:29Z", "message": "Fix typo in variable name"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "167400f7709c5ed6b7ca3938191a4443c8e3de9b", "author": {"user": {"login": "demery-pivotal", "name": "Dale Emery"}}, "url": "https://github.com/apache/geode/commit/167400f7709c5ed6b7ca3938191a4443c8e3de9b", "committedDate": "2020-10-22T20:19:29Z", "message": "Fix typo in variable name"}, "afterCommit": {"oid": "5a56f668f1751ebe88d59bf640835307bb82c4d0", "author": {"user": {"login": "demery-pivotal", "name": "Dale Emery"}}, "url": "https://github.com/apache/geode/commit/5a56f668f1751ebe88d59bf640835307bb82c4d0", "committedDate": "2020-10-26T16:08:25Z", "message": "Fix typo in variable name"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5a56f668f1751ebe88d59bf640835307bb82c4d0", "author": {"user": {"login": "demery-pivotal", "name": "Dale Emery"}}, "url": "https://github.com/apache/geode/commit/5a56f668f1751ebe88d59bf640835307bb82c4d0", "committedDate": "2020-10-26T16:08:25Z", "message": "Fix typo in variable name"}, "afterCommit": {"oid": "0f6994d6fb3bdac6e09cd01662b31497794e420a", "author": {"user": {"login": "demery-pivotal", "name": "Dale Emery"}}, "url": "https://github.com/apache/geode/commit/0f6994d6fb3bdac6e09cd01662b31497794e420a", "committedDate": "2020-10-26T18:51:34Z", "message": "Fix typo in variable name"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f6994d6fb3bdac6e09cd01662b31497794e420a", "author": {"user": {"login": "demery-pivotal", "name": "Dale Emery"}}, "url": "https://github.com/apache/geode/commit/0f6994d6fb3bdac6e09cd01662b31497794e420a", "committedDate": "2020-10-26T18:51:34Z", "message": "Fix typo in variable name"}, "afterCommit": {"oid": "485f5dc7b69ff376d7a0415c64a194415cb9e8b4", "author": {"user": {"login": "demery-pivotal", "name": "Dale Emery"}}, "url": "https://github.com/apache/geode/commit/485f5dc7b69ff376d7a0415c64a194415cb9e8b4", "committedDate": "2020-10-26T21:01:44Z", "message": "Fix typo in variable name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bde6212f4e6c86ad46e85b65db412a4eb6598adb", "author": {"user": {"login": "demery-pivotal", "name": "Dale Emery"}}, "url": "https://github.com/apache/geode/commit/bde6212f4e6c86ad46e85b65db412a4eb6598adb", "committedDate": "2020-10-27T16:07:45Z", "message": "Give each test worker a unique working dir\n\nBefore running a test task, wrap its TestFramework in a wrapper that\ncreates a unique working dir for each new test worker."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7ccb84e64c60738705c1075f94d2a8354127bc9", "author": {"user": {"login": "demery-pivotal", "name": "Dale Emery"}}, "url": "https://github.com/apache/geode/commit/c7ccb84e64c60738705c1075f94d2a8354127bc9", "committedDate": "2020-10-27T16:07:45Z", "message": "Fix typo in variable name"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "485f5dc7b69ff376d7a0415c64a194415cb9e8b4", "author": {"user": {"login": "demery-pivotal", "name": "Dale Emery"}}, "url": "https://github.com/apache/geode/commit/485f5dc7b69ff376d7a0415c64a194415cb9e8b4", "committedDate": "2020-10-26T21:01:44Z", "message": "Fix typo in variable name"}, "afterCommit": {"oid": "c7ccb84e64c60738705c1075f94d2a8354127bc9", "author": {"user": {"login": "demery-pivotal", "name": "Dale Emery"}}, "url": "https://github.com/apache/geode/commit/c7ccb84e64c60738705c1075f94d2a8354127bc9", "committedDate": "2020-10-27T16:07:45Z", "message": "Fix typo in variable name"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3956, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}