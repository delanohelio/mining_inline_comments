{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MDQ5MDg2", "number": 4966, "title": "GEODE-7851: Pulse logout requests end of OAuth session", "bodyText": "When Pulse is configured to use OAuth, and a user logs out of Pulse,\nPulse redirects the browser to a page where the user can take action to\nend their session. The available actions depend on the OAuth provider,\nbut may include revoking the token or logging out of the OAuth provider\nentirely.\nMain changes:\n\n\nChanged OAuthSecurityConfig to install two logout handlers: A\nRepositoryLogoutHandler (renamed from LogoutHandler) and an\nOidcClientInitiatedLogoutSuccessHandler.\n\n\nAdded a pulse.security.oauth.endSessionEndpoint property to specify\nthe URL to which the OidcClientInitiatedLogoutSuccessHandler should\nredirect the browser on logout.\n\n\nConfigured the OAuthSecurityConfig to add the \"end session endpoint\"\nproperty value to the client configuration metadata.  On logout, the\nOidcClientInitiatedLogoutSuccessHandler redirects the browser to this\nendpoint, where the user can take action to end the session.\n\n\nIn the OAuthClientConfig class (extracted from OAuthSecurityConfig),\nrestored the code to explicitly list the scopes that Pulse is\nrequesting, in particular to list \"openid\" in the scopes. Though\nauthentication works just fine without that explicit list, the\nOidcClientInitiatedLogoutSuccessHandler does not. The\nOidcClientInitiatedLogoutSuccessHandler handles logout only if the the\nprincipal is an OidcUser. If \"openid\" is not explicitly listed in the\nclient's scopes. Spring creates OAuth2User principals instead of\nOidcUser principals, and OidcClientInitiatedLogoutSuccessHandler\nreturn without redirecting the browser.\n\n\nAlso refactored to support the above changes:\n\n\nMoved the oauth client service configuration from OAuthSecurityConfig\nto a new OAuthClientConfig class. This breaks Respository's dependence\non OAuthSecurityConfig, which in turn (through the LogoutHandler)\ndepended on Repository. Repository now gets its\nOAuth2AuthorizedClientService from the OAuthClientConfig class, which\ndoes not in turn depend on Repository.\n\n\nMarked two Repository constructors as non-required. Spring will pick\nwhichever one has the most dependencies it can satisfy. So if the\nprofile specifies an OAuth2AuthorizedClientService, Spring will call\nthe constructor that takes one of those. Otherwise Spring will call\nthe no-args constructor.\n\n\nRenamed LogoutHandler to RepositoryLogoutHandler to better reflect its\nspecific responsibilities.\n\n\nChanged RepositoryLogoutHandler to implement LogoutHandler instead of\nLogoutSuccessHandler. Now it does its work during logout instead of\nafter.\n\n\nChanged DefaultSecurityConfig to specify the logout success URL\ndirectly instead of via a logout success handler. (OAuthSecurityConfig\nno longer needs a logout success URL, because the OIDC logout handler\nredirects to the OAuth provider instead.)\n\n\nCo-authored-by: Dale Emery demery@pivotal.io\nCo-authored-by: Joris Melchior joris.melchior@gmail.com\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n[NA] If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-04-16T00:10:59Z", "url": "https://github.com/apache/geode/pull/4966", "merged": true, "mergeCommit": {"oid": "d09b26a900e05c18dc7ee93e44f4c455bb81ba29"}, "closed": true, "closedAt": "2020-04-20T13:30:57Z", "author": {"login": "demery-pivotal"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYBNIpgH2gAyNDA0MDQ5MDg2OmY5ZDk0NzkyYWE3ZTI1MWUyODNmMzYyMzQ4ZTU4NjIzODg5NGRhYjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYpegzAFqTM5NTgxNzEyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f9d94792aa7e251e283f362348e586238894dab4", "author": {"user": {"login": "demery-pivotal", "name": "Dale Emery"}}, "url": "https://github.com/apache/geode/commit/f9d94792aa7e251e283f362348e586238894dab4", "committedDate": "2020-04-16T00:04:31Z", "message": "GEODE-7851: Pulse logout requests end of OAuth session\n\nWhen Pulse is configured to use OAuth, and a user logs out of Pulse,\nPulse redirects the browser to a page where the user can take action to\nend their session. The available actions depend on the OAuth provider,\nbut may include revoking the token or logging out of the OAuth provider\nentirely.\n\nMain changes:\n\n- Changed OAuthSecurityConfig to install two logout handlers: A\n  RepositoryLogoutHandler (renamed from LogoutHandler) and an\n  OidcClientInitiatedLogoutSuccessHandler.\n\n- Added a pulse.security.oauth.endSessionEndpoint property to specify\n  the URL to which the OidcClientInitiatedLogoutSuccessHandler should\n  redirect the browser on logout.\n\n- Configured the OAuthSecurityConfig to add the \"end session endpoint\"\n  property value to the client configuration metadata.  On logout, the\n  OidcClientInitiatedLogoutSuccessHandler redirects the browser to this\n  endpoint, where the user can take action to end the session.\n\n- In the OAuthClientConfig class (extracted from OAuthSecurityConfig),\n  restored the code to explicitly list the scopes that Pulse is\n  requesting, in particular to list \"openid\" in the scopes. Though\n  authentication works just fine without that explicit list, the\n  OidcClientInitiatedLogoutSuccessHandler does not. The\n  OidcClientInitiatedLogoutSuccessHandler handles logout only if the the\n  principal is an OidcUser. If \"openid\" is not explicitly listed in the\n  client's scopes. Spring creates OAuth2User principals instead of\n  OidcUser principals, and OidcClientInitiatedLogoutSuccessHandler\n  return without redirecting the browser.\n\nAlso refactored to support the above changes:\n\n- Moved the oauth client service configuration from OAuthSecurityConfig\n  to a new OAuthClientConfig class. This breaks Respository's dependence\n  on OAuthSecurityConfig, which in turn (through the LogoutHandler)\n  depended on Repository. Repository now gets its\n  OAuth2AuthorizedClientService from the OAuthClientConfig class, which\n  does not in turn depend on Repository.\n\n- Marked two Repository constructors as non-required. Spring will pick\n  whichever one has the most dependencies it can satisfy. So if the\n  profile specifies an OAuth2AuthorizedClientService, Spring will call\n  the constructor that takes one of those. Otherwise Spring will call\n  the no-args constructor.\n\n- Renamed LogoutHandler to RepositoryLogoutHandler to better reflect its\n  specific responsibilities.\n\n- Changed RepositoryLogoutHandler to implement LogoutHandler instead of\n  LogoutSuccessHandler. Now it does its work *during* logout instead of\n  *after.*\n\n- Changed DefaultSecurityConfig to specify the logout success URL\n  directly instead of via a logout success handler. (OAuthSecurityConfig\n  no longer needs a logout success URL, because the OIDC logout handler\n  redirects to the OAuth provider instead.)\n\nCo-authored-by: Dale Emery <demery@pivotal.io>\nCo-authored-by: Joris Melchior <joris.melchior@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "410ffcadf5dbbdccb9fadb7cdcbeba592e6cd092", "author": {"user": {"login": "demery-pivotal", "name": "Dale Emery"}}, "url": "https://github.com/apache/geode/commit/410ffcadf5dbbdccb9fadb7cdcbeba592e6cd092", "committedDate": "2020-04-16T18:05:27Z", "message": "Change 'End-User' to 'end user' in docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODA4NDAx", "url": "https://github.com/apache/geode/pull/4966#pullrequestreview-395808401", "createdAt": "2020-04-17T22:30:17Z", "commit": {"oid": "410ffcadf5dbbdccb9fadb7cdcbeba592e6cd092"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjozMDoxN1rOGHe6vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjozMTozMVrOGHe76A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5OTc3Mg==", "bodyText": "Any particular reason we move this out of the OauthSecurityConfig?", "url": "https://github.com/apache/geode/pull/4966#discussion_r410499772", "createdAt": "2020-04-17T22:30:17Z", "author": {"login": "jinmeiliao"}, "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/security/OAuthClientConfig.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse.internal.security;\n+\n+import static java.util.Collections.singletonMap;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.oidc.web.logout.OidcClientInitiatedLogoutSuccessHandler;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+\n+/**\n+ * Configures Pulse to use the OAuth 2 provider defined by properties in {@code pulse.properties}.\n+ */\n+@Configuration\n+@Profile(\"pulse.authentication.oauth\")\n+@PropertySource(\"classpath:pulse.properties\")\n+public class OAuthClientConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "410ffcadf5dbbdccb9fadb7cdcbeba592e6cd092"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMDA3Mg==", "bodyText": "Is this \"end_session_endpoint\" provider specific? i.e. it's a strictly UAA thing or others have that as well? Can it be null?", "url": "https://github.com/apache/geode/pull/4966#discussion_r410500072", "createdAt": "2020-04-17T22:31:31Z", "author": {"login": "jinmeiliao"}, "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/security/OAuthClientConfig.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse.internal.security;\n+\n+import static java.util.Collections.singletonMap;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.oidc.web.logout.OidcClientInitiatedLogoutSuccessHandler;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+\n+/**\n+ * Configures Pulse to use the OAuth 2 provider defined by properties in {@code pulse.properties}.\n+ */\n+@Configuration\n+@Profile(\"pulse.authentication.oauth\")\n+@PropertySource(\"classpath:pulse.properties\")\n+public class OAuthClientConfig {\n+  @Value(\"${pulse.oauth.providerId}\")\n+  private String providerId;\n+  @Value(\"${pulse.oauth.providerName}\")\n+  private String providerName;\n+  @Value(\"${pulse.oauth.clientId}\")\n+  private String clientId;\n+  @Value(\"${pulse.oauth.clientSecret}\")\n+  private String clientSecret;\n+  @Value(\"${pulse.oauth.authorizationUri}\")\n+  private String authorizationUri;\n+  @Value(\"${pulse.oauth.tokenUri}\")\n+  private String tokenUri;\n+  @Value(\"${pulse.oauth.userInfoUri}\")\n+  private String userInfoUri;\n+  @Value(\"${pulse.oauth.jwkSetUri}\")\n+  private String jwkSetUri;\n+  @Value(\"${pulse.oauth.endSessionEndpoint}\")\n+  private String endSessionEndpoint;\n+  @Value(\"${pulse.oauth.userNameAttributeName}\")\n+  private String userNameAttributeName;\n+\n+  @Bean\n+  ClientRegistration clientRegistration() {\n+    return ClientRegistration.withRegistrationId(providerId)\n+        .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\n+        .redirectUriTemplate(\"{baseUrl}/login/oauth2/code/{registrationId}\")\n+        .clientId(clientId)\n+        .clientSecret(clientSecret)\n+        .scope(\"openid\", \"CLUSTER:READ\", \"CLUSTER:WRITE\", \"DATA:READ\", \"DATA:WRITE\")\n+        .authorizationUri(authorizationUri)\n+        .tokenUri(tokenUri)\n+        .userInfoUri(userInfoUri)\n+        .jwkSetUri(jwkSetUri)\n+        .providerConfigurationMetadata(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "410ffcadf5dbbdccb9fadb7cdcbeba592e6cd092"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1ODE3MTI5", "url": "https://github.com/apache/geode/pull/4966#pullrequestreview-395817129", "createdAt": "2020-04-17T22:59:42Z", "commit": {"oid": "410ffcadf5dbbdccb9fadb7cdcbeba592e6cd092"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4818, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}