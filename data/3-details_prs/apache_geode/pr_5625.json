{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNTU2MDg3", "number": 5625, "title": "GEODE-8609: Create a dunit suspect file per VM", "bodyText": "Create a new dunit_suspect log for each VM. The logs will now\nbe named dunit_suspect-vm<VMID>.log. The locator VM and the test\nrunner VM will have logs named dunit_suspect-locator.log and\ndunit_suspect-local.log respectively.\n\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-10-14T18:18:11Z", "url": "https://github.com/apache/geode/pull/5625", "merged": true, "mergeCommit": {"oid": "84ac0863ed4d08bb02c1a96982c89f8627994184"}, "closed": true, "closedAt": "2020-10-28T13:55:01Z", "author": {"login": "jdeppe-pivotal"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdShMbjgH2gAyNTAzNTU2MDg3OjJjZDIyMDIzYmYyMmYxOTNjZmYyZmY3MzM2MTBjYmEyY2Q0MGQ3ZmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWvtFUgFqTUxODE1ODgwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2cd22023bf22f193cff2ff733610cba2cd40d7fe", "author": {"user": {"login": "jdeppe-pivotal", "name": "Jens Deppe"}}, "url": "https://github.com/apache/geode/commit/2cd22023bf22f193cff2ff733610cba2cd40d7fe", "committedDate": "2020-10-14T18:08:19Z", "message": "GEODE-8609: Create a dunit suspect file per VM\n\n- Create a new `dunit_suspect` log for each VM. The logs will now\n  be named `dunit_suspect-vm<VMID>.log`. The locator VM and the test\n  runner VM will have logs named `dunit_suspect-locator.log` and\n  `dunit_suspect-local.log` respectively."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4ODA1MDQx", "url": "https://github.com/apache/geode/pull/5625#pullrequestreview-508805041", "createdAt": "2020-10-14T22:09:24Z", "commit": {"oid": "2cd22023bf22f193cff2ff733610cba2cd40d7fe"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjowOToyNVrOHhnT9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQyMjowOToyNVrOHhnT9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTAwOTE0MQ==", "bodyText": "This will fail on the first log file with suspect strings, and so will not report suspect strings from the remaining log files. If you move this check after the for loop in closeAndCheckForSuspects(), it will be able to report suspect strings from all log files.", "url": "https://github.com/apache/geode/pull/5625#discussion_r505009141", "createdAt": "2020-10-14T22:09:25Z", "author": {"login": "demery-pivotal"}, "path": "geode-dunit/src/main/java/org/apache/geode/test/dunit/internal/DUnitLauncher.java", "diffHunk": "@@ -343,59 +339,120 @@ public static void init(MasterRemote master) {\n     System.setProperty(LAUNCHED_PROPERTY, \"true\");\n   }\n \n+  private static List<File> getDunitSuspectFiles() {\n+    File[] suspectFiles = getDunitSuspectsDir()\n+        .listFiles((dir, name) -> name.startsWith(SUSPECT_FILENAME_PREFIX));\n+\n+    return Arrays.asList(suspectFiles);\n+  }\n+\n+  private static File getDunitSuspectsDir() {\n+    return Paths.get(getWorkspaceDir()).toFile();\n+  }\n+\n+  private static void deleteDunitSuspectFiles() {\n+    getDunitSuspectFiles().forEach(File::delete);\n+  }\n+\n+  private static File createDunitSuspectFile(int vmId, String workingDir) {\n+    String suffix;\n+\n+    switch (vmId) {\n+      case -2:\n+        suffix = \"locator\";\n+        break;\n+      case -1:\n+        suffix = \"local\";\n+        break;\n+      default:\n+        suffix = \"vm\" + vmId;\n+    }\n+\n+    File dunitSuspect = new File(getDunitSuspectsDir(),\n+        String.format(\"%s-%s.log\", SUSPECT_FILENAME_PREFIX, suffix));\n+    dunitSuspect.deleteOnExit();\n+\n+    return dunitSuspect;\n+  }\n+\n+  private static String getWorkspaceDir() {\n+    String workspaceDir = System.getProperty(DUnitLauncher.WORKSPACE_DIR_PARAM);\n+    workspaceDir = workspaceDir == null ? new File(\".\").getAbsolutePath() : workspaceDir;\n+\n+    return workspaceDir;\n+  }\n+\n   public static void closeAndCheckForSuspects() {\n-    if (isLaunched()) {\n-      final List<Pattern> expectedStrings = ExpectedStrings.create(\"dunit\");\n-      final LogConsumer logConsumer = new LogConsumer(true, expectedStrings, \"log4j\", 5);\n+    if (!isLaunched()) {\n+      return;\n+    }\n \n-      final StringBuilder suspectStringBuilder = new StringBuilder();\n+    List<File> suspectFiles = getDunitSuspectFiles();\n \n-      BufferedReader buffReader = null;\n-      FileChannel fileChannel = null;\n-      try {\n-        fileChannel = new FileOutputStream(DUNIT_SUSPECT_FILE, true).getChannel();\n-        buffReader = new BufferedReader(new FileReader(DUNIT_SUSPECT_FILE));\n-      } catch (FileNotFoundException e) {\n-        System.err.println(\"Could not find the suspect string output file: \" + e);\n-        return;\n-      }\n+    if (suspectFiles.isEmpty()) {\n+      throw new IllegalStateException(\"No dunit suspect log files found in '\"\n+          + getDunitSuspectsDir().getAbsolutePath()\n+          + \"' - perhaps a rule that is cleaning up before suspect processing has already run.\");\n+    }\n+\n+    for (File suspect : suspectFiles) {\n+      checkSuspectFile(suspect);\n+    }\n+  }\n+\n+  public static void checkSuspectFile(File suspectFile) {\n+    final List<Pattern> expectedStrings = ExpectedStrings.create(\"dunit\");\n+    final LogConsumer logConsumer = new LogConsumer(true, expectedStrings,\n+        suspectFile.getName(), 5);\n+\n+    final StringBuilder suspectStringBuilder = new StringBuilder();\n+\n+    BufferedReader buffReader;\n+    FileChannel fileChannel;\n+    try {\n+      fileChannel = new FileOutputStream(suspectFile, true).getChannel();\n+      buffReader = new BufferedReader(new FileReader(suspectFile));\n+    } catch (FileNotFoundException e) {\n+      System.err.println(\"Could not find the suspect string output file: \" + e);\n+      return;\n+    }\n+\n+    try {\n+      String line;\n       try {\n-        String line;\n-        try {\n-          while ((line = buffReader.readLine()) != null) {\n-            final StringBuilder builder = logConsumer.consume(line);\n-            if (builder != null) {\n-              suspectStringBuilder.append(builder);\n-            }\n+        while ((line = buffReader.readLine()) != null) {\n+          final StringBuilder builder = logConsumer.consume(line);\n+          if (builder != null) {\n+            suspectStringBuilder.append(builder);\n           }\n-        } catch (IOException e) {\n-          System.err.println(\"Could not read the suspect string output file: \" + e);\n         }\n+      } catch (IOException e) {\n+        System.err.println(\"Could not read the suspect string output file: \" + e);\n+      }\n \n-        try {\n-          fileChannel.truncate(0);\n-        } catch (IOException e) {\n-          System.err.println(\"Could not truncate the suspect string output file: \" + e);\n-        }\n+      try {\n+        fileChannel.truncate(0);\n+      } catch (IOException e) {\n+        System.err.println(\"Could not truncate the suspect string output file: \" + e);\n+      }\n \n-      } finally {\n-        try {\n-          buffReader.close();\n-          fileChannel.close();\n-        } catch (IOException e) {\n-          System.err.println(\"Could not close the suspect string output file: \" + e);\n-        }\n+    } finally {\n+      try {\n+        buffReader.close();\n+        fileChannel.close();\n+      } catch (IOException e) {\n+        System.err.println(\"Could not close the suspect string output file: \" + e);\n       }\n+    }\n \n-      if (suspectStringBuilder.length() != 0) {\n-        System.err.println(\"Suspicious strings were written to the log during this run.\\n\"\n-            + \"Fix the strings or use IgnoredException.addIgnoredException to ignore.\\n\"\n-            + suspectStringBuilder);\n+    if (suspectStringBuilder.length() != 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2cd22023bf22f193cff2ff733610cba2cd40d7fe"}, "originalPosition": 207}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a66864d3d50a8715c0de7c987aa518b7db179f8d", "author": {"user": {"login": "jdeppe-pivotal", "name": "Jens Deppe"}}, "url": "https://github.com/apache/geode/commit/a66864d3d50a8715c0de7c987aa518b7db179f8d", "committedDate": "2020-10-15T15:51:27Z", "message": "Review updates. Add ignored exception to locator VM"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "225cb0875b1504d9ffddcfa8990cac1ab397568d", "author": {"user": {"login": "jdeppe-pivotal", "name": "Jens Deppe"}}, "url": "https://github.com/apache/geode/commit/225cb0875b1504d9ffddcfa8990cac1ab397568d", "committedDate": "2020-10-15T15:55:06Z", "message": "Fix failing tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5NTQ4MTMw", "url": "https://github.com/apache/geode/pull/5625#pullrequestreview-509548130", "createdAt": "2020-10-15T16:13:55Z", "commit": {"oid": "225cb0875b1504d9ffddcfa8990cac1ab397568d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoxMzo1NVrOHiPmIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoxMzo1NVrOHiPmIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY2OTE1Mg==", "bodyText": "An alternative is to create a StringBuilder here and pass it into checkSuspectFile() to collect the suspects. That way the strings can be included in the assertion failure message.", "url": "https://github.com/apache/geode/pull/5625#discussion_r505669152", "createdAt": "2020-10-15T16:13:55Z", "author": {"login": "demery-pivotal"}, "path": "geode-dunit/src/main/java/org/apache/geode/test/dunit/internal/DUnitLauncher.java", "diffHunk": "@@ -395,12 +395,18 @@ public static void closeAndCheckForSuspects() {\n           + \"' - perhaps a rule that is cleaning up before suspect processing has already run.\");\n     }\n \n+    boolean ok = true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "225cb0875b1504d9ffddcfa8990cac1ab397568d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "384206da3f595063e0f7c1f5ee5b66820a0dc9ce", "author": {"user": {"login": "jdeppe-pivotal", "name": "Jens Deppe"}}, "url": "https://github.com/apache/geode/commit/384206da3f595063e0f7c1f5ee5b66820a0dc9ce", "committedDate": "2020-10-15T19:08:04Z", "message": "Apply review fixes which also fixed some of the failing tests. Have LogConsumer return Strings instead of StringBuilders"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e031ef5631216b2c5663fe2a3c40b5932fb2fa61", "author": {"user": {"login": "jdeppe-pivotal", "name": "Jens Deppe"}}, "url": "https://github.com/apache/geode/commit/e031ef5631216b2c5663fe2a3c40b5932fb2fa61", "committedDate": "2020-10-15T20:59:07Z", "message": "Bah humbug!"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21a6d23c288e0353c3b7b6eaf9205557807997bc", "author": {"user": {"login": "jdeppe-pivotal", "name": "Jens Deppe"}}, "url": "https://github.com/apache/geode/commit/21a6d23c288e0353c3b7b6eaf9205557807997bc", "committedDate": "2020-10-27T19:55:57Z", "message": "Leaving in the bad regexp which will be addressed by a subsequent Jira"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MTU4ODAy", "url": "https://github.com/apache/geode/pull/5625#pullrequestreview-518158802", "createdAt": "2020-10-27T21:18:21Z", "commit": {"oid": "21a6d23c288e0353c3b7b6eaf9205557807997bc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4106, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}