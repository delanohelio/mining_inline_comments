{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MjQxOTc1", "number": 5665, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzo0MzozN1rOEyebEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzo0MzozN1rOEyebEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMzYyNzA2OnYy", "diffSide": "RIGHT", "path": "geode-core/src/test/java/org/apache/geode/internal/tcp/ConnectionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzo0MzozN1rOHpI5Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxODoyMTowN1rOHpKpLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg5OTQzMA==", "bodyText": "I don't like that we verify that getConduit is called 1 time. I understand after looking at the code but it seems rather indirect logically and brittle. I would prefer that you extract the block of code in notifyHandshakeWaiter starting at line 810 into a method named \"clearSSLInputBuffer\". Then this test can assert that clearSSLInputBuffer is only called 1 time. This would be much clearer and less brittle and would not increase the diffs much", "url": "https://github.com/apache/geode/pull/5665#discussion_r512899430", "createdAt": "2020-10-27T17:43:37Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-core/src/test/java/org/apache/geode/internal/tcp/ConnectionTest.java", "diffHunk": "@@ -113,4 +114,35 @@ public void connectTimeoutIsShortWhenAlerting() throws UnknownHostException {\n       assertThat(connection.getP2PConnectTimeout(distributionConfig)).isEqualTo(100);\n     });\n   }\n+\n+  @Test\n+  public void notifyHandshakeWaiterShouldPositionByteBufferOnlyOnce() throws Exception {\n+    ConnectionTable connectionTable = mock(ConnectionTable.class);\n+    Distribution distribution = mock(Distribution.class);\n+    DistributionManager distributionManager = mock(DistributionManager.class);\n+    DMStats dmStats = mock(DMStats.class);\n+    CancelCriterion stopper = mock(CancelCriterion.class);\n+    SocketCloser socketCloser = mock(SocketCloser.class);\n+    TCPConduit tcpConduit = mock(TCPConduit.class);\n+\n+    when(connectionTable.getBufferPool()).thenReturn(new BufferPool(dmStats));\n+    when(connectionTable.getConduit()).thenReturn(tcpConduit);\n+    when(connectionTable.getDM()).thenReturn(distributionManager);\n+    when(connectionTable.getSocketCloser()).thenReturn(socketCloser);\n+    when(distributionManager.getDistribution()).thenReturn(distribution);\n+    when(stopper.cancelInProgress()).thenReturn(null);\n+    when(tcpConduit.getCancelCriterion()).thenReturn(stopper);\n+    when(tcpConduit.getDM()).thenReturn(distributionManager);\n+    when(tcpConduit.getSocketId()).thenReturn(new InetSocketAddress(getLocalHost(), 10337));\n+    when(tcpConduit.getStats()).thenReturn(dmStats);\n+\n+    SocketChannel channel = SocketChannel.open();\n+\n+    Connection connection = new Connection(connectionTable, channel.socket());\n+    connection = spy(connection);\n+    connection.setSharedUnorderedForTest();\n+    connection.run();\n+\n+    verify(connection, times(1)).getConduit();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "907c9f609a7b14526b0f7d4a4cdb7d33987b6cb1"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjkyODA0NQ==", "bodyText": "fixed.", "url": "https://github.com/apache/geode/pull/5665#discussion_r512928045", "createdAt": "2020-10-27T18:21:07Z", "author": {"login": "gesterzhou"}, "path": "geode-core/src/test/java/org/apache/geode/internal/tcp/ConnectionTest.java", "diffHunk": "@@ -113,4 +114,35 @@ public void connectTimeoutIsShortWhenAlerting() throws UnknownHostException {\n       assertThat(connection.getP2PConnectTimeout(distributionConfig)).isEqualTo(100);\n     });\n   }\n+\n+  @Test\n+  public void notifyHandshakeWaiterShouldPositionByteBufferOnlyOnce() throws Exception {\n+    ConnectionTable connectionTable = mock(ConnectionTable.class);\n+    Distribution distribution = mock(Distribution.class);\n+    DistributionManager distributionManager = mock(DistributionManager.class);\n+    DMStats dmStats = mock(DMStats.class);\n+    CancelCriterion stopper = mock(CancelCriterion.class);\n+    SocketCloser socketCloser = mock(SocketCloser.class);\n+    TCPConduit tcpConduit = mock(TCPConduit.class);\n+\n+    when(connectionTable.getBufferPool()).thenReturn(new BufferPool(dmStats));\n+    when(connectionTable.getConduit()).thenReturn(tcpConduit);\n+    when(connectionTable.getDM()).thenReturn(distributionManager);\n+    when(connectionTable.getSocketCloser()).thenReturn(socketCloser);\n+    when(distributionManager.getDistribution()).thenReturn(distribution);\n+    when(stopper.cancelInProgress()).thenReturn(null);\n+    when(tcpConduit.getCancelCriterion()).thenReturn(stopper);\n+    when(tcpConduit.getDM()).thenReturn(distributionManager);\n+    when(tcpConduit.getSocketId()).thenReturn(new InetSocketAddress(getLocalHost(), 10337));\n+    when(tcpConduit.getStats()).thenReturn(dmStats);\n+\n+    SocketChannel channel = SocketChannel.open();\n+\n+    Connection connection = new Connection(connectionTable, channel.socket());\n+    connection = spy(connection);\n+    connection.setSharedUnorderedForTest();\n+    connection.run();\n+\n+    verify(connection, times(1)).getConduit();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg5OTQzMA=="}, "originalCommit": {"oid": "907c9f609a7b14526b0f7d4a4cdb7d33987b6cb1"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4579, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}