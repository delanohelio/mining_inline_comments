{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyNzA3ODE0", "number": 5473, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMToxOToyNlrOEcP0sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMDoxNDozN1rOEcVjlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDU0ODMyOnYy", "diffSide": "LEFT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/Oplog.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMToxOToyNlrOHGqI-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzo0ODozM1rOHGySrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0MzkyOQ==", "bodyText": "Did you decrease protection here?", "url": "https://github.com/apache/geode/pull/5473#discussion_r476743929", "createdAt": "2020-08-25T21:19:26Z", "author": {"login": "mhansonp"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/Oplog.java", "diffHunk": "@@ -3583,7 +3597,7 @@ private void basicCreate(DiskRegion dr, DiskEntry entry, ValueWrapper value, byt\n             logger.trace(LogMarker.PERSIST_WRITES_VERBOSE,\n                 \"basicCreate: id=<{}> key=<{}> valueOffset={} userBits={} valueLen={} valueBytes={} drId={} versionTag={} oplog#{}\",\n                 abs(id.getKeyId()), entry.getKey(), startPosForSynchOp, userBits,\n-                (value != null ? value.getLength() : 0), value.getBytesAsString(), dr.getId(), tag,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45f04b8da7c3071352c3805af465896cf13406f3"}, "originalPosition": 287}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg3NzQ4NQ==", "bodyText": "In a sense, yes. The warning was being generated because checking if value was null here implied that it could be null before/after this check, and that calling methods on it could produce an NPE. However, when examining the code path, value should never be null at this point, so the check was redundant.", "url": "https://github.com/apache/geode/pull/5473#discussion_r476877485", "createdAt": "2020-08-25T23:48:33Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/Oplog.java", "diffHunk": "@@ -3583,7 +3597,7 @@ private void basicCreate(DiskRegion dr, DiskEntry entry, ValueWrapper value, byt\n             logger.trace(LogMarker.PERSIST_WRITES_VERBOSE,\n                 \"basicCreate: id=<{}> key=<{}> valueOffset={} userBits={} valueLen={} valueBytes={} drId={} versionTag={} oplog#{}\",\n                 abs(id.getKeyId()), entry.getKey(), startPosForSynchOp, userBits,\n-                (value != null ? value.getLength() : 0), value.getBytesAsString(), dr.getId(), tag,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0MzkyOQ=="}, "originalCommit": {"oid": "45f04b8da7c3071352c3805af465896cf13406f3"}, "originalPosition": 287}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDU4MjEzOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/Oplog.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMToyNToyOFrOHGqepQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMzo0OTo1NVrOHGyX0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0OTQ3Nw==", "bodyText": "Is the first part of the test required? \"if (!olf.RAFClosed\" It sits below an assert that in order to pass must be true.", "url": "https://github.com/apache/geode/pull/5473#discussion_r476749477", "createdAt": "2020-08-25T21:25:28Z", "author": {"login": "mhansonp"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/Oplog.java", "diffHunk": "@@ -5653,7 +5667,7 @@ private void deleteFile(final OplogFile olf) {\n       if (!olf.f.exists())\n         return;\n       assert olf.RAFClosed;\n-      if (!olf.RAFClosed || olf.raf != null) {\n+      if (!olf.RAFClosed && olf.raf != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45f04b8da7c3071352c3805af465896cf13406f3"}, "originalPosition": 297}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc1NjQ2NA==", "bodyText": "Actually, with the new code, this if statement should never be true because of the assert above.", "url": "https://github.com/apache/geode/pull/5473#discussion_r476756464", "createdAt": "2020-08-25T21:33:23Z", "author": {"login": "mhansonp"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/Oplog.java", "diffHunk": "@@ -5653,7 +5667,7 @@ private void deleteFile(final OplogFile olf) {\n       if (!olf.f.exists())\n         return;\n       assert olf.RAFClosed;\n-      if (!olf.RAFClosed || olf.raf != null) {\n+      if (!olf.RAFClosed && olf.raf != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0OTQ3Nw=="}, "originalCommit": {"oid": "45f04b8da7c3071352c3805af465896cf13406f3"}, "originalPosition": 297}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg3ODA2NA==", "bodyText": "Good catch. I'll remove the first part.", "url": "https://github.com/apache/geode/pull/5473#discussion_r476878064", "createdAt": "2020-08-25T23:49:14Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/Oplog.java", "diffHunk": "@@ -5653,7 +5667,7 @@ private void deleteFile(final OplogFile olf) {\n       if (!olf.f.exists())\n         return;\n       assert olf.RAFClosed;\n-      if (!olf.RAFClosed || olf.raf != null) {\n+      if (!olf.RAFClosed && olf.raf != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0OTQ3Nw=="}, "originalCommit": {"oid": "45f04b8da7c3071352c3805af465896cf13406f3"}, "originalPosition": 297}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg3ODgwMw==", "bodyText": "Other than that, it all looks good.", "url": "https://github.com/apache/geode/pull/5473#discussion_r476878803", "createdAt": "2020-08-25T23:49:55Z", "author": {"login": "mhansonp"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/Oplog.java", "diffHunk": "@@ -5653,7 +5667,7 @@ private void deleteFile(final OplogFile olf) {\n       if (!olf.f.exists())\n         return;\n       assert olf.RAFClosed;\n-      if (!olf.RAFClosed || olf.raf != null) {\n+      if (!olf.RAFClosed && olf.raf != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc0OTQ3Nw=="}, "originalCommit": {"oid": "45f04b8da7c3071352c3805af465896cf13406f3"}, "originalPosition": 297}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDYxMDM3OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegion.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMTozMDozNlrOHGqxBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMDowMDowMVrOHGzCig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc1NDE4Mw==", "bodyText": "Is there a reason you reduced protection after adding it in elsewhere?", "url": "https://github.com/apache/geode/pull/5473#discussion_r476754183", "createdAt": "2020-08-25T21:30:36Z", "author": {"login": "mhansonp"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegion.java", "diffHunk": "@@ -2641,9 +2640,7 @@ private VersionedObjectList sendMsgByBucket(final Integer bucketId, PutAllPRMess\n             retryTime.waitToRetryNode();\n           }\n           event.setPossibleDuplicate(true);\n-          if (prMsg != null) {\n-            prMsg.setPossibleDuplicate(true);\n-          }\n+          prMsg.setPossibleDuplicate(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45f04b8da7c3071352c3805af465896cf13406f3"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njg4OTczOA==", "bodyText": "As with the other removed null check in Oplog.java, prMsg should never be null in this method, so checking if it is null here simply causes LGTM to assume that it may be null everywhere and complain any time a method is called on it without first checking if it's null.", "url": "https://github.com/apache/geode/pull/5473#discussion_r476889738", "createdAt": "2020-08-26T00:00:01Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegion.java", "diffHunk": "@@ -2641,9 +2640,7 @@ private VersionedObjectList sendMsgByBucket(final Integer bucketId, PutAllPRMess\n             retryTime.waitToRetryNode();\n           }\n           event.setPossibleDuplicate(true);\n-          if (prMsg != null) {\n-            prMsg.setPossibleDuplicate(true);\n-          }\n+          prMsg.setPossibleDuplicate(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njc1NDE4Mw=="}, "originalCommit": {"oid": "45f04b8da7c3071352c3805af465896cf13406f3"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MTQ4NzU2OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/cache/query/internal/NullToken.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQwMDoxNDozN1rOHGzzlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQyMToyMDoyNlrOHHeKRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkwMjI5Mg==", "bodyText": "Since lgtm is not a \"normal\" warning to suppress, it may be worth explaining this somewhere why we are suppressing it (rather than fixing it).  Also it seems like we're using both @SuppressWarnings(\"lgtm[]) and comments // lgtm[] should be using one consistently or is there certain use cases that require one or the other?", "url": "https://github.com/apache/geode/pull/5473#discussion_r476902292", "createdAt": "2020-08-26T00:14:37Z", "author": {"login": "moleske"}, "path": "geode-core/src/main/java/org/apache/geode/cache/query/internal/NullToken.java", "diffHunk": "@@ -33,6 +33,7 @@\n  */\n public class NullToken implements DataSerializableFixedID, Comparable {\n \n+  @SuppressWarnings(\"lgtm[java/useless-null-check]\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d7674902f9f77dc66d18a6c3d5c711e7ab30b33"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Njk5ODM4Mg==", "bodyText": "Good call on explaining the suppression here and other places the annotation is used. As for the different approaches to suppressing, LGTM requires that inline suppressions contain no line breaks, which would not be possible for some of the lines due to the spotless plugin automatically wrapping comments that extend too far to the right. In those cases, the @SuppressWarnings annotation is used, but is not used throughout because it would potentially mask other, legitimate alerts in methods that are currently present or that get introduced at a later date.", "url": "https://github.com/apache/geode/pull/5473#discussion_r476998382", "createdAt": "2020-08-26T02:40:54Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/cache/query/internal/NullToken.java", "diffHunk": "@@ -33,6 +33,7 @@\n  */\n public class NullToken implements DataSerializableFixedID, Comparable {\n \n+  @SuppressWarnings(\"lgtm[java/useless-null-check]\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkwMjI5Mg=="}, "originalCommit": {"oid": "5d7674902f9f77dc66d18a6c3d5c711e7ab30b33"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU3OTc2Mw==", "bodyText": "Ok, the comments in the code help.  I do wonder if we should make the link you posted available somewhere (like the readme or contributing.)\nAnd as long as we put @SuppressWarnings at the lowest possible level that should prevent the accident masking of other suppressions so that looks good.", "url": "https://github.com/apache/geode/pull/5473#discussion_r477579763", "createdAt": "2020-08-26T20:47:32Z", "author": {"login": "moleske"}, "path": "geode-core/src/main/java/org/apache/geode/cache/query/internal/NullToken.java", "diffHunk": "@@ -33,6 +33,7 @@\n  */\n public class NullToken implements DataSerializableFixedID, Comparable {\n \n+  @SuppressWarnings(\"lgtm[java/useless-null-check]\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkwMjI5Mg=="}, "originalCommit": {"oid": "5d7674902f9f77dc66d18a6c3d5c711e7ab30b33"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzU5NjIzMQ==", "bodyText": "I'll try to write up and add a section about LGTM alerts in the appropriate section of the wiki/docs.\nI've tried to use the inline comment approach wherever possible, since that suppresses only the specified warning on the single line with the comment, so it's much more surgical than the annotation, which on a large method could have a fairly big blanket effect.", "url": "https://github.com/apache/geode/pull/5473#discussion_r477596231", "createdAt": "2020-08-26T21:20:26Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/cache/query/internal/NullToken.java", "diffHunk": "@@ -33,6 +33,7 @@\n  */\n public class NullToken implements DataSerializableFixedID, Comparable {\n \n+  @SuppressWarnings(\"lgtm[java/useless-null-check]\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjkwMjI5Mg=="}, "originalCommit": {"oid": "5d7674902f9f77dc66d18a6c3d5c711e7ab30b33"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4753, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}