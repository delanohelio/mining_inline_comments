{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNTYwNzM1", "number": 4925, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODozNjo0NVrODwHdHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODo0MjowMlrODwHkvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzgwMzgyOnYy", "diffSide": "RIGHT", "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIAcceptanceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODozNjo0NVrOGC7-QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODo1MTozMFrOGC8gMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczMjkyOQ==", "bodyText": "I would not have spelled that name correctly, kudos William", "url": "https://github.com/apache/geode/pull/4925#discussion_r405732929", "createdAt": "2020-04-08T18:36:45Z", "author": {"login": "echobravopapa"}, "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIAcceptanceTest.java", "diffHunk": "@@ -87,7 +87,7 @@ public void connectToSNIProxyDocker() {\n         .port(15443)\n         .getExternalPort();\n     ClientCache cache = new ClientCacheFactory(gemFireProps)\n-        .addPoolLocator(\"locator\", 10334)\n+        .addPoolLocator(\"locator-maeve\", 10334)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f2e10550267faf00c85d4fc259779cd6d202555"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc0MTYxOQ==", "bodyText": "\ud83e\udd20", "url": "https://github.com/apache/geode/pull/4925#discussion_r405741619", "createdAt": "2020-04-08T18:51:30Z", "author": {"login": "Bill"}, "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIAcceptanceTest.java", "diffHunk": "@@ -87,7 +87,7 @@ public void connectToSNIProxyDocker() {\n         .port(15443)\n         .getExternalPort();\n     ClientCache cache = new ClientCacheFactory(gemFireProps)\n-        .addPoolLocator(\"locator\", 10334)\n+        .addPoolLocator(\"locator-maeve\", 10334)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczMjkyOQ=="}, "originalCommit": {"oid": "5f2e10550267faf00c85d4fc259779cd6d202555"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzgyMzM1OnYy", "diffSide": "RIGHT", "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/DualServerSNIAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODo0MjowMlrOGC8KoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMTo1MjoxMFrOGDCTAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczNjA5Ng==", "bodyText": "other than a reason to reference clementine what is dualServerTest2 accomplishing?\nI wonder if a test that is meant to fail where we attempt to cross the streams would be a useful addition....", "url": "https://github.com/apache/geode/pull/4925#discussion_r405736096", "createdAt": "2020-04-08T18:42:02Z", "author": {"login": "echobravopapa"}, "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/DualServerSNIAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.client.sni;\n+\n+import static com.palantir.docker.compose.execution.DockerComposeExecArgument.arguments;\n+import static com.palantir.docker.compose.execution.DockerComposeExecOption.options;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENABLED_COMPONENTS;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENDPOINT_IDENTIFICATION_ENABLED;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_KEYSTORE_TYPE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_REQUIRE_AUTHENTICATION;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE_PASSWORD;\n+import static org.apache.geode.test.util.ResourceUtils.createTempFileFromResource;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Properties;\n+\n+import com.palantir.docker.compose.DockerComposeRule;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.client.proxy.ProxySocketFactories;\n+import org.apache.geode.test.junit.rules.IgnoreOnWindowsRule;\n+\n+public class DualServerSNIAcceptanceTest {\n+\n+  private static final URL DOCKER_COMPOSE_PATH =\n+      ClientSNIAcceptanceTest.class.getResource(\"docker-compose.yml\");\n+\n+  // Docker compose does not work on windows in CI. Ignore this test on windows\n+  // Using a RuleChain to make sure we ignore the test before the rule comes into play\n+  @ClassRule\n+  public static TestRule ignoreOnWindowsRule = new IgnoreOnWindowsRule();\n+\n+  @Rule\n+  public DockerComposeRule docker = DockerComposeRule.builder()\n+      .file(DOCKER_COMPOSE_PATH.getPath())\n+      .build();\n+\n+  private Properties gemFireProps;\n+  private ClientCache cache;\n+\n+  @Before\n+  public void before() throws IOException, InterruptedException {\n+    docker.exec(options(\"-T\"), \"geode\",\n+        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter-2.gfsh\"));\n+\n+    final String trustStorePath =\n+        createTempFileFromResource(ClientSNIAcceptanceTest.class,\n+            \"geode-config/truststore.jks\")\n+                .getAbsolutePath();\n+\n+    gemFireProps = new Properties();\n+    gemFireProps.setProperty(SSL_ENABLED_COMPONENTS, \"all\");\n+    gemFireProps.setProperty(SSL_KEYSTORE_TYPE, \"jks\");\n+    gemFireProps.setProperty(SSL_REQUIRE_AUTHENTICATION, \"false\");\n+\n+    gemFireProps.setProperty(SSL_TRUSTSTORE, trustStorePath);\n+    gemFireProps.setProperty(SSL_TRUSTSTORE_PASSWORD, \"geode\");\n+    gemFireProps.setProperty(SSL_ENDPOINT_IDENTIFICATION_ENABLED, \"true\");\n+  }\n+\n+\n+  @After\n+  public void after() {\n+    if (cache != null) {\n+      cache.close();\n+      cache = null;\n+    }\n+  }\n+\n+  @Test\n+  public void dualServerTest() {\n+    verifyPutAndGet(\"group-dolores\", \"region-dolores\");\n+  }\n+\n+  @Test\n+  public void dualServerTest2() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f2e10550267faf00c85d4fc259779cd6d202555"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzMTEzOQ==", "bodyText": "ok @echobravopapa I added a couple \"unreachability\" tests in the latest commit", "url": "https://github.com/apache/geode/pull/4925#discussion_r405831139", "createdAt": "2020-04-08T21:39:41Z", "author": {"login": "Bill"}, "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/DualServerSNIAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.client.sni;\n+\n+import static com.palantir.docker.compose.execution.DockerComposeExecArgument.arguments;\n+import static com.palantir.docker.compose.execution.DockerComposeExecOption.options;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENABLED_COMPONENTS;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENDPOINT_IDENTIFICATION_ENABLED;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_KEYSTORE_TYPE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_REQUIRE_AUTHENTICATION;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE_PASSWORD;\n+import static org.apache.geode.test.util.ResourceUtils.createTempFileFromResource;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Properties;\n+\n+import com.palantir.docker.compose.DockerComposeRule;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.client.proxy.ProxySocketFactories;\n+import org.apache.geode.test.junit.rules.IgnoreOnWindowsRule;\n+\n+public class DualServerSNIAcceptanceTest {\n+\n+  private static final URL DOCKER_COMPOSE_PATH =\n+      ClientSNIAcceptanceTest.class.getResource(\"docker-compose.yml\");\n+\n+  // Docker compose does not work on windows in CI. Ignore this test on windows\n+  // Using a RuleChain to make sure we ignore the test before the rule comes into play\n+  @ClassRule\n+  public static TestRule ignoreOnWindowsRule = new IgnoreOnWindowsRule();\n+\n+  @Rule\n+  public DockerComposeRule docker = DockerComposeRule.builder()\n+      .file(DOCKER_COMPOSE_PATH.getPath())\n+      .build();\n+\n+  private Properties gemFireProps;\n+  private ClientCache cache;\n+\n+  @Before\n+  public void before() throws IOException, InterruptedException {\n+    docker.exec(options(\"-T\"), \"geode\",\n+        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter-2.gfsh\"));\n+\n+    final String trustStorePath =\n+        createTempFileFromResource(ClientSNIAcceptanceTest.class,\n+            \"geode-config/truststore.jks\")\n+                .getAbsolutePath();\n+\n+    gemFireProps = new Properties();\n+    gemFireProps.setProperty(SSL_ENABLED_COMPONENTS, \"all\");\n+    gemFireProps.setProperty(SSL_KEYSTORE_TYPE, \"jks\");\n+    gemFireProps.setProperty(SSL_REQUIRE_AUTHENTICATION, \"false\");\n+\n+    gemFireProps.setProperty(SSL_TRUSTSTORE, trustStorePath);\n+    gemFireProps.setProperty(SSL_TRUSTSTORE_PASSWORD, \"geode\");\n+    gemFireProps.setProperty(SSL_ENDPOINT_IDENTIFICATION_ENABLED, \"true\");\n+  }\n+\n+\n+  @After\n+  public void after() {\n+    if (cache != null) {\n+      cache.close();\n+      cache = null;\n+    }\n+  }\n+\n+  @Test\n+  public void dualServerTest() {\n+    verifyPutAndGet(\"group-dolores\", \"region-dolores\");\n+  }\n+\n+  @Test\n+  public void dualServerTest2() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczNjA5Ng=="}, "originalCommit": {"oid": "5f2e10550267faf00c85d4fc259779cd6d202555"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgzNjU0Ng==", "bodyText": "test the test", "url": "https://github.com/apache/geode/pull/4925#discussion_r405836546", "createdAt": "2020-04-08T21:52:10Z", "author": {"login": "Bill"}, "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/DualServerSNIAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.client.sni;\n+\n+import static com.palantir.docker.compose.execution.DockerComposeExecArgument.arguments;\n+import static com.palantir.docker.compose.execution.DockerComposeExecOption.options;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENABLED_COMPONENTS;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENDPOINT_IDENTIFICATION_ENABLED;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_KEYSTORE_TYPE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_REQUIRE_AUTHENTICATION;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE_PASSWORD;\n+import static org.apache.geode.test.util.ResourceUtils.createTempFileFromResource;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Properties;\n+\n+import com.palantir.docker.compose.DockerComposeRule;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.client.proxy.ProxySocketFactories;\n+import org.apache.geode.test.junit.rules.IgnoreOnWindowsRule;\n+\n+public class DualServerSNIAcceptanceTest {\n+\n+  private static final URL DOCKER_COMPOSE_PATH =\n+      ClientSNIAcceptanceTest.class.getResource(\"docker-compose.yml\");\n+\n+  // Docker compose does not work on windows in CI. Ignore this test on windows\n+  // Using a RuleChain to make sure we ignore the test before the rule comes into play\n+  @ClassRule\n+  public static TestRule ignoreOnWindowsRule = new IgnoreOnWindowsRule();\n+\n+  @Rule\n+  public DockerComposeRule docker = DockerComposeRule.builder()\n+      .file(DOCKER_COMPOSE_PATH.getPath())\n+      .build();\n+\n+  private Properties gemFireProps;\n+  private ClientCache cache;\n+\n+  @Before\n+  public void before() throws IOException, InterruptedException {\n+    docker.exec(options(\"-T\"), \"geode\",\n+        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter-2.gfsh\"));\n+\n+    final String trustStorePath =\n+        createTempFileFromResource(ClientSNIAcceptanceTest.class,\n+            \"geode-config/truststore.jks\")\n+                .getAbsolutePath();\n+\n+    gemFireProps = new Properties();\n+    gemFireProps.setProperty(SSL_ENABLED_COMPONENTS, \"all\");\n+    gemFireProps.setProperty(SSL_KEYSTORE_TYPE, \"jks\");\n+    gemFireProps.setProperty(SSL_REQUIRE_AUTHENTICATION, \"false\");\n+\n+    gemFireProps.setProperty(SSL_TRUSTSTORE, trustStorePath);\n+    gemFireProps.setProperty(SSL_TRUSTSTORE_PASSWORD, \"geode\");\n+    gemFireProps.setProperty(SSL_ENDPOINT_IDENTIFICATION_ENABLED, \"true\");\n+  }\n+\n+\n+  @After\n+  public void after() {\n+    if (cache != null) {\n+      cache.close();\n+      cache = null;\n+    }\n+  }\n+\n+  @Test\n+  public void dualServerTest() {\n+    verifyPutAndGet(\"group-dolores\", \"region-dolores\");\n+  }\n+\n+  @Test\n+  public void dualServerTest2() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczNjA5Ng=="}, "originalCommit": {"oid": "5f2e10550267faf00c85d4fc259779cd6d202555"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4274, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}