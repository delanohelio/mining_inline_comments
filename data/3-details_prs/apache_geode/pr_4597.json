{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMzg2MTMx", "number": 4597, "title": "GEODE-7703: Catch IndexWriter Exceptions", "bodyText": "The IndexWriter initialization might fail when other threads are\nupdating the fileAndChunkRegion, which can be triggered by other normal\noperations (query, event listener, close, reindex, etc.). This doesn't\nhappen often and, instead of propagating the exception to the caller\nand failing, Geode now catches it and returns null to let the callers\nretry.\n\nAdded unit and distrbuted tests.\nReturn null instead of re-throwing the IOException while building\nthe Lucene IndexWriter.\n\nCo-authored-by: Xiaojian Zhou gzhou@pivotal.io\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-01-15T23:32:36Z", "url": "https://github.com/apache/geode/pull/4597", "merged": true, "mergeCommit": {"oid": "9f4d70b849d7f7094fc78e589587bd28be65f122"}, "closed": true, "closedAt": "2020-01-17T22:24:36Z", "author": {"login": "jujoramos"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6uMU5AH2gAyMzYzMzg2MTMxOmUyNGYxYTQ0ZGQzNGZmYmE5MzYyMGExMzk5NGQzMTY1ZmYwY2RiMTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb7Sg1cgH2gAyMzYzMzg2MTMxOmNkMzM5NGVmNTEyOTU5NWMyZmZlZWIzYjllOWYyZmNkYTFiNWUxOWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e24f1a44dd34ffba93620a13994d3165ff0cdb12", "author": {"user": {"login": "jujoramos", "name": "Juan Jos\u00e9 Ramos"}}, "url": "https://github.com/apache/geode/commit/e24f1a44dd34ffba93620a13994d3165ff0cdb12", "committedDate": "2020-01-15T23:31:38Z", "message": "GEODE-7703: Catch IndexWriter Exceptions\n\nThe IndexWriter initialization might fail when other threads are\nupdating the fileAndChunkRegion, which can be triggered by other normal\noperations (query, event listener, close, reindex, etc.). This doesn't\nhappen often and, instead of propagating the exception to the caller\nand failing, Geode now catches it and returns null to let the callers\nretry.\n\n- Added unit and distrbuted tests.\n- Return null instead of re-throwing the IOException while building\n  the Lucene IndexWriter.\n\nCo-authored-by: Xiaojian Zhou <gzhou@pivotal.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fa8a473d23e543303fd8a6c2adf68bd41664d96", "author": {"user": {"login": "jujoramos", "name": "Juan Jos\u00e9 Ramos"}}, "url": "https://github.com/apache/geode/commit/6fa8a473d23e543303fd8a6c2adf68bd41664d96", "committedDate": "2020-01-16T00:09:41Z", "message": "GEODE-7703: Log stack trace exception information."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b638f121c695253f8068edd5a5ede388bca1a89d", "author": {"user": {"login": "jujoramos", "name": "Juan Jos\u00e9 Ramos"}}, "url": "https://github.com/apache/geode/commit/b638f121c695253f8068edd5a5ede388bca1a89d", "committedDate": "2020-01-16T00:17:42Z", "message": "GEODE-7703: Reduce test wait time."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNjA2NjUw", "url": "https://github.com/apache/geode/pull/4597#pullrequestreview-343606650", "createdAt": "2020-01-16T00:18:38Z", "commit": {"oid": "b638f121c695253f8068edd5a5ede388bca1a89d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MzAzMzE4", "url": "https://github.com/apache/geode/pull/4597#pullrequestreview-344303318", "createdAt": "2020-01-17T00:32:41Z", "commit": {"oid": "b638f121c695253f8068edd5a5ede388bca1a89d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMDozMjo0MVrOFerv0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMDozMjo0MVrOFerv0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcxODM1NA==", "bodyText": "Does this test need to be parameterized if there is only one parameter?", "url": "https://github.com/apache/geode/pull/4597#discussion_r367718354", "createdAt": "2020-01-17T00:32:41Z", "author": {"login": "DonalEvans"}, "path": "geode-lucene/src/distributedTest/java/org/apache/geode/cache/lucene/internal/IndexRepositoryFactoryDistributedTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.lucene.internal;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+\n+import junitparams.JUnitParamsRunner;\n+import junitparams.Parameters;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import org.apache.geode.DataSerializable;\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.PartitionAttributesFactory;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.lucene.LuceneService;\n+import org.apache.geode.cache.lucene.LuceneServiceProvider;\n+import org.apache.geode.cache.lucene.test.LuceneTestUtilities;\n+import org.apache.geode.distributed.DistributedLockService;\n+import org.apache.geode.internal.cache.BucketRegion;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.internal.cache.PartitionedRegionDataStore;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+@RunWith(JUnitParamsRunner.class)\n+public class IndexRepositoryFactoryDistributedTest implements Serializable {\n+  private static final String INDEX_NAME = \"index\";\n+  private static final String REGION_NAME = \"region\";\n+  private static final String DEFAULT_FIELD = \"text\";\n+  protected int locatorPort;\n+  protected MemberVM locator, dataStore1, dataStore2;\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule(5);\n+\n+  @Before\n+  public void setUp() {\n+    locator = cluster.startLocatorVM(0);\n+    locatorPort = locator.getPort();\n+    dataStore1 = cluster.startServerVM(1, locatorPort);\n+    dataStore2 = cluster.startServerVM(2, locatorPort);\n+  }\n+\n+  private Cache getCache() {\n+    Cache cache = ClusterStartupRule.getCache();\n+    assertThat(cache).isNotNull();\n+\n+    return cache;\n+  }\n+\n+  private void initDataStoreAndLuceneIndex(RegionShortcut regionShortcut) {\n+    Cache cache = getCache();\n+    LuceneService luceneService = LuceneServiceProvider.get(cache);\n+    luceneService.createIndexFactory().setFields(DEFAULT_FIELD).create(INDEX_NAME, REGION_NAME);\n+\n+    cache.<Integer, TestObject>createRegionFactory(regionShortcut)\n+        .setPartitionAttributes(new PartitionAttributesFactory<Integer, TestObject>()\n+            .setTotalNumBuckets(1).create())\n+        .create(REGION_NAME);\n+  }\n+\n+  private void insertEntries() {\n+    Cache cache = getCache();\n+    Region<Integer, TestObject> region = cache.getRegion(REGION_NAME);\n+    IntStream.range(0, 1000).forEach(i -> region.put(i, new TestObject(\"hello world\" + i)));\n+  }\n+\n+  private void assertPrimariesAndSecondaries(int primaries, int secondaries) {\n+    Cache cache = getCache();\n+    PartitionedRegionDataStore partitionedRegionDataStore =\n+        ((PartitionedRegion) cache.getRegion(REGION_NAME)).getDataStore();\n+    assertThat(partitionedRegionDataStore.getAllLocalPrimaryBucketIds().size())\n+        .isEqualTo(primaries);\n+    assertThat((partitionedRegionDataStore.getAllLocalBucketIds().size()\n+        - partitionedRegionDataStore.getAllLocalPrimaryBucketIds().size())).isEqualTo(secondaries);\n+  }\n+\n+  private BucketRegion getFileAndChunkBucket() {\n+    Cache cache = getCache();\n+    LuceneServiceImpl luceneService = (LuceneServiceImpl) LuceneServiceProvider.get(cache);\n+    InternalLuceneIndex index =\n+        (InternalLuceneIndex) luceneService.getIndex(INDEX_NAME, REGION_NAME);\n+    LuceneIndexForPartitionedRegion indexForPR = (LuceneIndexForPartitionedRegion) index;\n+    PartitionedRegion fileRegion = indexForPR.getFileAndChunkRegion();\n+\n+    return PartitionedRepositoryManager.indexRepositoryFactory.getMatchingBucket(fileRegion, 0);\n+  }\n+\n+  @Test\n+  @Parameters({\"PARTITION_REDUNDANT\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b638f121c695253f8068edd5a5ede388bca1a89d"}, "originalPosition": 117}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd3394ef5129595c2ffeeb3b9e9f2fcda1b5e19f", "author": {"user": {"login": "jujoramos", "name": "Juan Jos\u00e9 Ramos"}}, "url": "https://github.com/apache/geode/commit/cd3394ef5129595c2ffeeb3b9e9f2fcda1b5e19f", "committedDate": "2020-01-17T17:50:37Z", "message": "GEODE-7703: simplify test and remove unused annotations."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3850, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}