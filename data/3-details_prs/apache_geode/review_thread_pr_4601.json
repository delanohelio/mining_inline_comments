{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzOTA1NTIz", "number": 4601, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo0NDoxN1rODY24wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODoxNjo1OFrODY5hVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzkxNjgwOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/management/internal/api/GeodeClusterManagementServiceConnectionConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo0NDoxN1rOFe9Byg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODoyNDowOVrOFfBZxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwMTQ4Mg==", "bodyText": "this pretty much holds the same stuff as BasicClusterManagementServiceConnectionConfig. Is there anyway to make this delegate to that or inherit that?", "url": "https://github.com/apache/geode/pull/4601#discussion_r368001482", "createdAt": "2020-01-17T15:44:17Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/api/GeodeClusterManagementServiceConnectionConfig.java", "diffHunk": "@@ -44,62 +48,105 @@\n import org.apache.geode.internal.net.SocketCreatorFactory;\n import org.apache.geode.internal.security.SecurableCommunicationChannel;\n import org.apache.geode.logging.internal.log4j.api.LogService;\n-import org.apache.geode.management.api.ClusterManagementService;\n-import org.apache.geode.management.builder.ClusterManagementServiceBuilder;\n-import org.apache.geode.management.internal.PlainClusterManagementServiceBuilder;\n+import org.apache.geode.management.api.ClusterManagementServiceConnectionConfig;\n+import org.apache.geode.management.client.ClusterManagementServiceBuilder;\n import org.apache.geode.management.internal.SSLUtil;\n import org.apache.geode.management.internal.configuration.messages.ClusterManagementServiceInfo;\n import org.apache.geode.management.internal.configuration.messages.ClusterManagementServiceInfoRequest;\n import org.apache.geode.management.internal.functions.GetMemberInformationFunction;\n import org.apache.geode.management.runtime.MemberInformation;\n import org.apache.geode.security.AuthInitialize;\n \n+/**\n+ * Concrete implementation of {@link ClusterManagementServiceConnectionConfig} which can be used\n+ * to derive most (if not all) of the connection properties from an existing {@link Cache} or\n+ * {@link ClientCache}.\n+ *\n+ * @see ClusterManagementServiceBuilder\n+ */\n+@Experimental\n+public class GeodeClusterManagementServiceConnectionConfig", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90880b1989dbdb5095fdda1f8337a1f123287d51"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MzE1Ng==", "bodyText": "It now delegates.", "url": "https://github.com/apache/geode/pull/4601#discussion_r368073156", "createdAt": "2020-01-17T18:24:09Z", "author": {"login": "yozaner1324"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/api/GeodeClusterManagementServiceConnectionConfig.java", "diffHunk": "@@ -44,62 +48,105 @@\n import org.apache.geode.internal.net.SocketCreatorFactory;\n import org.apache.geode.internal.security.SecurableCommunicationChannel;\n import org.apache.geode.logging.internal.log4j.api.LogService;\n-import org.apache.geode.management.api.ClusterManagementService;\n-import org.apache.geode.management.builder.ClusterManagementServiceBuilder;\n-import org.apache.geode.management.internal.PlainClusterManagementServiceBuilder;\n+import org.apache.geode.management.api.ClusterManagementServiceConnectionConfig;\n+import org.apache.geode.management.client.ClusterManagementServiceBuilder;\n import org.apache.geode.management.internal.SSLUtil;\n import org.apache.geode.management.internal.configuration.messages.ClusterManagementServiceInfo;\n import org.apache.geode.management.internal.configuration.messages.ClusterManagementServiceInfoRequest;\n import org.apache.geode.management.internal.functions.GetMemberInformationFunction;\n import org.apache.geode.management.runtime.MemberInformation;\n import org.apache.geode.security.AuthInitialize;\n \n+/**\n+ * Concrete implementation of {@link ClusterManagementServiceConnectionConfig} which can be used\n+ * to derive most (if not all) of the connection properties from an existing {@link Cache} or\n+ * {@link ClientCache}.\n+ *\n+ * @see ClusterManagementServiceBuilder\n+ */\n+@Experimental\n+public class GeodeClusterManagementServiceConnectionConfig", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwMTQ4Mg=="}, "originalCommit": {"oid": "90880b1989dbdb5095fdda1f8337a1f123287d51"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDIxNjE5OnYy", "diffSide": "RIGHT", "path": "geode-assembly/src/acceptanceTest/resources/ManagementClientCreateRegion.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzoyNDowMFrOFe_9IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODoyNToyOVrOFfBbwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0OTQ0MQ==", "bodyText": "shouldn't this be just \"build()\"?", "url": "https://github.com/apache/geode/pull/4601#discussion_r368049441", "createdAt": "2020-01-17T17:24:00Z", "author": {"login": "jinmeiliao"}, "path": "geode-assembly/src/acceptanceTest/resources/ManagementClientCreateRegion.java", "diffHunk": "@@ -31,14 +31,15 @@ public static void main(String[] args) throws Exception {\n     if (useSsl) {\n       // The default SSLContext will pull in all necessary javax.net.ssl properties\n       cms =\n-          ClusterManagementServiceBuilder.buildWithHostAddress()\n-              .setHostAddress(\"localhost\", httpPort)\n-              .setSslContext(SSLContext.getDefault()).build();\n+          new ClusterManagementServiceBuilder().setConnectionConfig(\n+              new BasicClusterManagementServiceConnectionConfig(\"localhost\", port)\n+                  .setSslContext(SSLContext.getDefault()))\n+              .buildWithHostAddress();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90880b1989dbdb5095fdda1f8337a1f123287d51"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MzY2Ng==", "bodyText": "You're right, that file had several errors that I didn't catch because it wasn't being compiled. I fixed this and the other problems.", "url": "https://github.com/apache/geode/pull/4601#discussion_r368073666", "createdAt": "2020-01-17T18:25:29Z", "author": {"login": "yozaner1324"}, "path": "geode-assembly/src/acceptanceTest/resources/ManagementClientCreateRegion.java", "diffHunk": "@@ -31,14 +31,15 @@ public static void main(String[] args) throws Exception {\n     if (useSsl) {\n       // The default SSLContext will pull in all necessary javax.net.ssl properties\n       cms =\n-          ClusterManagementServiceBuilder.buildWithHostAddress()\n-              .setHostAddress(\"localhost\", httpPort)\n-              .setSslContext(SSLContext.getDefault()).build();\n+          new ClusterManagementServiceBuilder().setConnectionConfig(\n+              new BasicClusterManagementServiceConnectionConfig(\"localhost\", port)\n+                  .setSslContext(SSLContext.getDefault()))\n+              .buildWithHostAddress();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA0OTQ0MQ=="}, "originalCommit": {"oid": "90880b1989dbdb5095fdda1f8337a1f123287d51"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDIyMzc3OnYy", "diffSide": "RIGHT", "path": "geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeployToMultiGroupDUnitTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzoyNzowNFrOFfAB7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMDowODowMVrOFfD-Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1MDY3MQ==", "bodyText": "\"BasicClusterManagementServiceConnectionConfig\" seems like an awful long name? Any thing shorter and sweeter? Preferably not something \"Basic\" :-).\nMaybe just ConnectionConfig and CacheConnectionConfig", "url": "https://github.com/apache/geode/pull/4601#discussion_r368050671", "createdAt": "2020-01-17T17:27:04Z", "author": {"login": "jinmeiliao"}, "path": "geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeployToMultiGroupDUnitTest.java", "diffHunk": "@@ -64,10 +65,10 @@ public static void beforeClass() throws Exception {\n     server1 = cluster.startServerVM(1, \"group1\", locator.getPort());\n     server2 = cluster.startServerVM(2, \"group2\", locator.getPort());\n \n-    client =\n-        ClusterManagementServiceBuilder.buildWithHostAddress()\n-            .setHostAddress(\"localhost\", locator.getHttpPort())\n-            .build();\n+    client = new ClusterManagementServiceBuilder().setConnectionConfig(\n+        new BasicClusterManagementServiceConnectionConfig(\"localhost\", locator.getHttpPort()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90880b1989dbdb5095fdda1f8337a1f123287d51"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3NDA4Nw==", "bodyText": "It does seem pretty cumbersome. I changed the names to be shorter.", "url": "https://github.com/apache/geode/pull/4601#discussion_r368074087", "createdAt": "2020-01-17T18:26:32Z", "author": {"login": "yozaner1324"}, "path": "geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeployToMultiGroupDUnitTest.java", "diffHunk": "@@ -64,10 +65,10 @@ public static void beforeClass() throws Exception {\n     server1 = cluster.startServerVM(1, \"group1\", locator.getPort());\n     server2 = cluster.startServerVM(2, \"group2\", locator.getPort());\n \n-    client =\n-        ClusterManagementServiceBuilder.buildWithHostAddress()\n-            .setHostAddress(\"localhost\", locator.getHttpPort())\n-            .build();\n+    client = new ClusterManagementServiceBuilder().setConnectionConfig(\n+        new BasicClusterManagementServiceConnectionConfig(\"localhost\", locator.getHttpPort()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1MDY3MQ=="}, "originalCommit": {"oid": "90880b1989dbdb5095fdda1f8337a1f123287d51"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3NjE1Mg==", "bodyText": "Maybe instead of ConnectionConfigImpl which implies it's an internal implementation, change it to \"BaseConnectionConfig\"?", "url": "https://github.com/apache/geode/pull/4601#discussion_r368076152", "createdAt": "2020-01-17T18:31:31Z", "author": {"login": "jinmeiliao"}, "path": "geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeployToMultiGroupDUnitTest.java", "diffHunk": "@@ -64,10 +65,10 @@ public static void beforeClass() throws Exception {\n     server1 = cluster.startServerVM(1, \"group1\", locator.getPort());\n     server2 = cluster.startServerVM(2, \"group2\", locator.getPort());\n \n-    client =\n-        ClusterManagementServiceBuilder.buildWithHostAddress()\n-            .setHostAddress(\"localhost\", locator.getHttpPort())\n-            .build();\n+    client = new ClusterManagementServiceBuilder().setConnectionConfig(\n+        new BasicClusterManagementServiceConnectionConfig(\"localhost\", locator.getHttpPort()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1MDY3MQ=="}, "originalCommit": {"oid": "90880b1989dbdb5095fdda1f8337a1f123287d51"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODExNTMwMg==", "bodyText": "Done", "url": "https://github.com/apache/geode/pull/4601#discussion_r368115302", "createdAt": "2020-01-17T20:08:01Z", "author": {"login": "yozaner1324"}, "path": "geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeployToMultiGroupDUnitTest.java", "diffHunk": "@@ -64,10 +65,10 @@ public static void beforeClass() throws Exception {\n     server1 = cluster.startServerVM(1, \"group1\", locator.getPort());\n     server2 = cluster.startServerVM(2, \"group2\", locator.getPort());\n \n-    client =\n-        ClusterManagementServiceBuilder.buildWithHostAddress()\n-            .setHostAddress(\"localhost\", locator.getHttpPort())\n-            .build();\n+    client = new ClusterManagementServiceBuilder().setConnectionConfig(\n+        new BasicClusterManagementServiceConnectionConfig(\"localhost\", locator.getHttpPort()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA1MDY3MQ=="}, "originalCommit": {"oid": "90880b1989dbdb5095fdda1f8337a1f123287d51"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDMzNjQ0OnYy", "diffSide": "RIGHT", "path": "geode-management/src/main/java/org/apache/geode/management/api/ClusterManagementServiceTransport.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODoxMjoyOVrOFfBHOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODo1Mjo0MFrOFfCGxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2ODQxMQ==", "bodyText": "Is there a strong reason not to use Class<? extends ClusterManagementListOperationsResult<V> for responseType? If not, please use that.", "url": "https://github.com/apache/geode/pull/4601#discussion_r368068411", "createdAt": "2020-01-17T18:12:29Z", "author": {"login": "demery-pivotal"}, "path": "geode-management/src/main/java/org/apache/geode/management/api/ClusterManagementServiceTransport.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.management.api;\n+\n+import org.apache.geode.annotations.Experimental;\n+import org.apache.geode.management.configuration.AbstractConfiguration;\n+import org.apache.geode.management.runtime.OperationResult;\n+import org.apache.geode.management.runtime.RuntimeInfo;\n+\n+/**\n+ * Interface which abstracts the transport between the CMS client and the endpoint. Currently only\n+ * an http implementation exists. However it does allow for different implementations; perhaps\n+ * something that doesn't use {@code RestTemplate}. This interface supports the operations from\n+ * {@link ClusterManagementService}.\n+ */\n+@Experimental\n+public interface ClusterManagementServiceTransport {\n+\n+  /**\n+   * Submit a message with a specific command. This supports the\n+   * {@link ClusterManagementService#create}\n+   * and {@link ClusterManagementService#delete} commands.\n+   *\n+   * @param configMessage configuration object\n+   * @param command the command to use\n+   * @param responseType the expected response class\n+   * @param <T> configuration object which extends {@link AbstractConfiguration}\n+   * @return {@link ClusterManagementRealizationResult}\n+   */\n+  <T extends AbstractConfiguration<?>> ClusterManagementRealizationResult submitMessage(\n+      T configMessage, CommandType command,\n+      Class<? extends ClusterManagementRealizationResult> responseType);\n+\n+  /**\n+   * Submit a message with a specific command which returns a list result. This supports the\n+   * {@link ClusterManagementService#list(AbstractConfiguration)} command.\n+   *\n+   * @param configMessage configuration object\n+   * @param responseType the expected response class\n+   * @param <T> configuration object which extends {@link AbstractConfiguration}\n+   * @return {@link ClusterManagementListResult}\n+   */\n+  <T extends AbstractConfiguration<R>, R extends RuntimeInfo> ClusterManagementListResult<T, R> submitMessageForList(\n+      T configMessage, Class<? extends ClusterManagementListResult> responseType);\n+\n+  /**\n+   * Submit a message with a specific command which returns a single result. This supports the\n+   * {@link ClusterManagementService#get} command.\n+   *\n+   * @param configMessage configuration object\n+   * @param responseType the expected response class\n+   * @param <T> configuration object which extends {@link AbstractConfiguration}\n+   * @return {@link ClusterManagementGetResult}\n+   */\n+  <T extends AbstractConfiguration<R>, R extends RuntimeInfo> ClusterManagementGetResult<T, R> submitMessageForGet(\n+      T configMessage, Class<? extends ClusterManagementGetResult> responseType);\n+\n+  /**\n+   * Submit a message for a specific command which returns a list result of operations in progress.\n+   * This supports the {@link ClusterManagementService#list(ClusterManagementOperation)} command.\n+   *\n+   * @param responseType the expected response class\n+   * @param <A> operation of type {@link ClusterManagementOperation}\n+   * @return {@link ClusterManagementListResult}\n+   */\n+  <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementListOperationsResult<V> submitMessageForListOperation(\n+      A opType, Class<? extends ClusterManagementListOperationsResult> responseType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90880b1989dbdb5095fdda1f8337a1f123287d51"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA4NDY3OA==", "bodyText": "We can't do that because of type erasure. To call that method we would have to do something like ClusterManagementListOperationsResult<V>.class which isn't allowed.", "url": "https://github.com/apache/geode/pull/4601#discussion_r368084678", "createdAt": "2020-01-17T18:52:40Z", "author": {"login": "yozaner1324"}, "path": "geode-management/src/main/java/org/apache/geode/management/api/ClusterManagementServiceTransport.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.management.api;\n+\n+import org.apache.geode.annotations.Experimental;\n+import org.apache.geode.management.configuration.AbstractConfiguration;\n+import org.apache.geode.management.runtime.OperationResult;\n+import org.apache.geode.management.runtime.RuntimeInfo;\n+\n+/**\n+ * Interface which abstracts the transport between the CMS client and the endpoint. Currently only\n+ * an http implementation exists. However it does allow for different implementations; perhaps\n+ * something that doesn't use {@code RestTemplate}. This interface supports the operations from\n+ * {@link ClusterManagementService}.\n+ */\n+@Experimental\n+public interface ClusterManagementServiceTransport {\n+\n+  /**\n+   * Submit a message with a specific command. This supports the\n+   * {@link ClusterManagementService#create}\n+   * and {@link ClusterManagementService#delete} commands.\n+   *\n+   * @param configMessage configuration object\n+   * @param command the command to use\n+   * @param responseType the expected response class\n+   * @param <T> configuration object which extends {@link AbstractConfiguration}\n+   * @return {@link ClusterManagementRealizationResult}\n+   */\n+  <T extends AbstractConfiguration<?>> ClusterManagementRealizationResult submitMessage(\n+      T configMessage, CommandType command,\n+      Class<? extends ClusterManagementRealizationResult> responseType);\n+\n+  /**\n+   * Submit a message with a specific command which returns a list result. This supports the\n+   * {@link ClusterManagementService#list(AbstractConfiguration)} command.\n+   *\n+   * @param configMessage configuration object\n+   * @param responseType the expected response class\n+   * @param <T> configuration object which extends {@link AbstractConfiguration}\n+   * @return {@link ClusterManagementListResult}\n+   */\n+  <T extends AbstractConfiguration<R>, R extends RuntimeInfo> ClusterManagementListResult<T, R> submitMessageForList(\n+      T configMessage, Class<? extends ClusterManagementListResult> responseType);\n+\n+  /**\n+   * Submit a message with a specific command which returns a single result. This supports the\n+   * {@link ClusterManagementService#get} command.\n+   *\n+   * @param configMessage configuration object\n+   * @param responseType the expected response class\n+   * @param <T> configuration object which extends {@link AbstractConfiguration}\n+   * @return {@link ClusterManagementGetResult}\n+   */\n+  <T extends AbstractConfiguration<R>, R extends RuntimeInfo> ClusterManagementGetResult<T, R> submitMessageForGet(\n+      T configMessage, Class<? extends ClusterManagementGetResult> responseType);\n+\n+  /**\n+   * Submit a message for a specific command which returns a list result of operations in progress.\n+   * This supports the {@link ClusterManagementService#list(ClusterManagementOperation)} command.\n+   *\n+   * @param responseType the expected response class\n+   * @param <A> operation of type {@link ClusterManagementOperation}\n+   * @return {@link ClusterManagementListResult}\n+   */\n+  <A extends ClusterManagementOperation<V>, V extends OperationResult> ClusterManagementListOperationsResult<V> submitMessageForListOperation(\n+      A opType, Class<? extends ClusterManagementListOperationsResult> responseType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2ODQxMQ=="}, "originalCommit": {"oid": "90880b1989dbdb5095fdda1f8337a1f123287d51"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NDM0ODM3OnYy", "diffSide": "RIGHT", "path": "geode-management/src/test/java/org/apache/geode/management/client/ClusterManagementServiceBuilderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxODoxNjo1OFrOFfBOXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QyMDowMTowOVrOFfD04g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MDIzOQ==", "bodyText": "These tests seem to verify only that the builder doesn't throw. Surely there's something more test here.", "url": "https://github.com/apache/geode/pull/4601#discussion_r368070239", "createdAt": "2020-01-17T18:16:58Z", "author": {"login": "demery-pivotal"}, "path": "geode-management/src/test/java/org/apache/geode/management/client/ClusterManagementServiceBuilderTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management.client;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.springframework.web.client.RestTemplate;\n+\n+import org.apache.geode.management.api.BasicClusterManagementServiceConnectionConfig;\n+import org.apache.geode.management.api.ClusterManagementServiceConnectionConfig;\n+import org.apache.geode.management.api.RestTemplateClusterManagementServiceTransport;\n+\n+public class ClusterManagementServiceBuilderTest {\n+\n+  private static ClusterManagementServiceConnectionConfig connectionConfig;\n+\n+  @BeforeClass\n+  public static void setup() {\n+    connectionConfig = new BasicClusterManagementServiceConnectionConfig(\"localhost\", 7777);\n+  }\n+\n+  @Test\n+  public void buildWithTransportOnlyHavingConnectionConfig() {\n+    new ClusterManagementServiceBuilder().setTransport(\n+        new RestTemplateClusterManagementServiceTransport(connectionConfig)).build();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90880b1989dbdb5095fdda1f8337a1f123287d51"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODExMjg2Ng==", "bodyText": "You're totally right, I'm updating it to also test that the CMS client that gets built is able to connect properly.", "url": "https://github.com/apache/geode/pull/4601#discussion_r368112866", "createdAt": "2020-01-17T20:01:09Z", "author": {"login": "yozaner1324"}, "path": "geode-management/src/test/java/org/apache/geode/management/client/ClusterManagementServiceBuilderTest.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management.client;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.springframework.web.client.RestTemplate;\n+\n+import org.apache.geode.management.api.BasicClusterManagementServiceConnectionConfig;\n+import org.apache.geode.management.api.ClusterManagementServiceConnectionConfig;\n+import org.apache.geode.management.api.RestTemplateClusterManagementServiceTransport;\n+\n+public class ClusterManagementServiceBuilderTest {\n+\n+  private static ClusterManagementServiceConnectionConfig connectionConfig;\n+\n+  @BeforeClass\n+  public static void setup() {\n+    connectionConfig = new BasicClusterManagementServiceConnectionConfig(\"localhost\", 7777);\n+  }\n+\n+  @Test\n+  public void buildWithTransportOnlyHavingConnectionConfig() {\n+    new ClusterManagementServiceBuilder().setTransport(\n+        new RestTemplateClusterManagementServiceTransport(connectionConfig)).build();\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA3MDIzOQ=="}, "originalCommit": {"oid": "90880b1989dbdb5095fdda1f8337a1f123287d51"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3845, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}