{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMzMxMzg4", "number": 5246, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDowMzozMVrOEGJfkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDowMzozMVrOEGJfkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0ODgyNDQ5OnYy", "diffSide": "RIGHT", "path": "extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/AbstractCommitSessionValve.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDowMzozMVrOGkxJfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwMDowMzozMVrOGkxJfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTIwNzE2Ng==", "bodyText": "Can you change this to use the AbstractCommitSessionValve's Logger (the static log variable) instead of the Context's logger? I'm not sure why its like this, but if we use the AbstractCommitSessionValve's Logger, then only 1 line in logging.properties is necessary to debug this class rather than 2:\norg.apache.geode.modules.session.level = FINE", "url": "https://github.com/apache/geode/pull/5246#discussion_r441207166", "createdAt": "2020-06-17T00:03:31Z", "author": {"login": "boglesby"}, "path": "extensions/geode-modules/src/main/java/org/apache/geode/modules/session/catalina/AbstractCommitSessionValve.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.modules.session.catalina;\n+\n+import static org.apache.geode.util.internal.UncheckedUtils.uncheckedCast;\n+\n+import java.io.IOException;\n+\n+import javax.servlet.ServletException;\n+\n+import org.apache.catalina.Context;\n+import org.apache.catalina.Manager;\n+import org.apache.catalina.connector.Request;\n+import org.apache.catalina.connector.Response;\n+import org.apache.catalina.valves.ValveBase;\n+import org.apache.juli.logging.Log;\n+import org.apache.juli.logging.LogFactory;\n+\n+\n+public abstract class AbstractCommitSessionValve<SelfT extends AbstractCommitSessionValve<?>>\n+    extends ValveBase {\n+\n+  private static final Log log = LogFactory.getLog(AbstractCommitSessionValve.class);\n+\n+  protected static final String info =\n+      \"org.apache.geode.modules.session.catalina.CommitSessionValve/1.0\";\n+\n+  AbstractCommitSessionValve() {\n+    log.info(\"Initialized\");\n+  }\n+\n+  @Override\n+  public void invoke(final Request request, final Response response)\n+      throws IOException, ServletException {\n+    // Invoke the next Valve\n+    try {\n+      getNext().invoke(request, wrapResponse(response));\n+    } finally {\n+      commitSession(request);\n+    }\n+  }\n+\n+  /**\n+   * Commit session only if DeltaSessionManager is in place.\n+   *\n+   * @param request to commit session from.\n+   */\n+  protected static <SelfT extends AbstractCommitSessionValve<?>> void commitSession(\n+      final Request request) {\n+    final Context context = request.getContext();\n+    final Manager manager = context.getManager();\n+    if (manager instanceof DeltaSessionManager) {\n+      final DeltaSessionFacade session = (DeltaSessionFacade) request.getSession(false);\n+      if (session != null) {\n+        final DeltaSessionManager<SelfT> deltaSessionManager = uncheckedCast(manager);\n+        final Log contextLogger = context.getLogger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9959568668839eb8ba5501d06f6b595f27707ffe"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3995, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}