{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1MzgyMTky", "number": 5188, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODozOTo0OFrOEB4AXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjoxMDoxM1rOEFmlrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDAxNjMxOnYy", "diffSide": "LEFT", "path": "geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODozOTo0OVrOGd_RrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxODozOTo0OVrOGd_RrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDA5ODYwNA==", "bodyText": "This code change could loose code coverage for the constructor LocatorClusterManagementService(InternalCache cache, InternalConfigurationPersistenceService persistenceService). I don't see this constructor is covered anywhere else.", "url": "https://github.com/apache/geode/pull/5188#discussion_r434098604", "createdAt": "2020-06-02T18:39:49Z", "author": {"login": "jchen21"}, "path": "geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java", "diffHunk": "@@ -125,22 +127,48 @@ public void before() throws Exception {\n     doReturn(true).when(persistenceService).lockSharedConfiguration();\n     doNothing().when(persistenceService).unlockSharedConfiguration();\n     operationManager = mock(OperationManager.class);\n+    dLockService = mock(DistributedLockService.class);\n+\n     service =\n         spy(new LocatorClusterManagementService(cache, persistenceService, managers, validators,\n             memberValidator, cacheElementValidator, operationManager));\n+    doReturn(dLockService).when(service).getCmsDlockService();\n \n     regionConfig = new Region();\n     regionConfig.setName(\"region1\");\n \n     rebalanceOperation = new RebalanceOperation();\n   }\n \n+  @Test\n+  public void lockAndUnlockCalledAtCreate() {\n+    try {\n+      service.create(regionConfig);\n+    } catch (Exception ignore) {\n+    }\n+\n+    verify(dLockService).lock(LocatorClusterManagementService.CMS_NAME, -1, -1);\n+    verify(dLockService).unlock(LocatorClusterManagementService.CMS_NAME);\n+  }\n+\n+  @Test\n+  public void lockAndUnlockCalledAtDelete() {\n+    try {\n+      service.delete(regionConfig);\n+    } catch (Exception ignore) {\n+    }\n+\n+    verify(dLockService).lock(LocatorClusterManagementService.CMS_NAME, -1, -1);\n+    verify(dLockService).unlock(LocatorClusterManagementService.CMS_NAME);\n+  }\n+\n   @Test\n   public void create_persistenceIsNull() {\n     org.apache.geode.cache.Region<Object, Object> region =\n         mock(org.apache.geode.cache.Region.class);\n     when(cache.getRegion(any())).thenReturn(region);\n-    service = new LocatorClusterManagementService(cache, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1344f6c2a2f054520c5cacec585fce9f066019d7"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDExNDEwOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/management/internal/api/LocatorClusterManagementService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTowODo0NlrOGeAQhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTowODo0NlrOGeAQhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDExNDY5Mg==", "bodyText": "It would be better to add some comment for this constant.", "url": "https://github.com/apache/geode/pull/5188#discussion_r434114692", "createdAt": "2020-06-02T19:08:46Z", "author": {"login": "jchen21"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/api/LocatorClusterManagementService.java", "diffHunk": "@@ -105,7 +107,12 @@\n import org.apache.geode.management.runtime.OperationResult;\n import org.apache.geode.management.runtime.RuntimeInfo;\n \n+/**\n+ * each locator will have one instance of this running if enabled\n+ */\n public class LocatorClusterManagementService implements ClusterManagementService {\n+  @VisibleForTesting\n+  static final String CMS_NAME = \"CMS_LOCK_SERVICE\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1344f6c2a2f054520c5cacec585fce9f066019d7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjMyNDYzOnYy", "diffSide": "RIGHT", "path": "geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/InternalLocatorClusterManagementServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODowNjowNlrOGf4RnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODowNjowNlrOGf4RnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA4MTA1Mg==", "bodyText": "I recommend moving all the field and var creations at the top, then move all the when blocks together, order both blocks in some way (I alphabetize), and then consider moving the subject(s) under test to the bottom of the setup method.\nI also recommend cleaning up any statics in tearDown that you've configured in setUp. For example: how to undo this statement in tearDown:\nBaseManagementService.setManagementService(cache, managementService);\n\nThe statics will still have this configured after each test completes.", "url": "https://github.com/apache/geode/pull/5188#discussion_r436081052", "createdAt": "2020-06-05T18:06:06Z", "author": {"login": "kirklund"}, "path": "geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/InternalLocatorClusterManagementServiceIntegrationTest.java", "diffHunk": "@@ -56,13 +57,38 @@ public void tearDown() {\n     }\n   }\n \n+  @Before\n+  public void setup() throws URISyntaxException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ce5ccb05c54fd2edc292fc9d68dc54db25992fd"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjM0ODc3OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/management/internal/api/LocatorClusterManagementService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODoxMTo0NVrOGf4gxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQyMToxMTowMFrOGgwj3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA4NDkzNQ==", "bodyText": "Let's move away from lazy-initializing and mutable fields and just make it final.\nI'm assuming you made it mutable for testing. This is where you typically want to chain more than one constructor. One of the constructors needs @VisibleForTesting and pass in the DistributedLockService (as a mock or whatever). The main public constructor can then create the DistributedLockService and pass it as a parameter to the next constructor. The test would use the next constructor that accepts a DistributedLockService.", "url": "https://github.com/apache/geode/pull/5188#discussion_r436084935", "createdAt": "2020-06-05T18:11:45Z", "author": {"login": "kirklund"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/api/LocatorClusterManagementService.java", "diffHunk": "@@ -114,6 +122,7 @@\n   private final MemberValidator memberValidator;\n   private final CommonConfigurationValidator commonValidator;\n   private final InternalCache cache;\n+  private DistributedLockService cmsDlockService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ce5ccb05c54fd2edc292fc9d68dc54db25992fd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzAwMzIzMA==", "bodyText": "I tried your approach, but that affects lots of other integration tests that uses some API in InternalLocator that would start the cms service and hit error when they can't get the dlockservice to inject to it. So I had to revert it back", "url": "https://github.com/apache/geode/pull/5188#discussion_r437003230", "createdAt": "2020-06-08T21:11:00Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/api/LocatorClusterManagementService.java", "diffHunk": "@@ -114,6 +122,7 @@\n   private final MemberValidator memberValidator;\n   private final CommonConfigurationValidator commonValidator;\n   private final InternalCache cache;\n+  private DistributedLockService cmsDlockService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA4NDkzNQ=="}, "originalCommit": {"oid": "2ce5ccb05c54fd2edc292fc9d68dc54db25992fd"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzExOTUwOnYy", "diffSide": "RIGHT", "path": "geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/InternalLocatorClusterManagementServiceIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMzo0NTozM1rOGgAD7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMzo0NTozM1rOGgAD7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIwODYyMA==", "bodyText": "With these changes does this test need to become a unit test rather than an integration test?", "url": "https://github.com/apache/geode/pull/5188#discussion_r436208620", "createdAt": "2020-06-05T23:45:33Z", "author": {"login": "mhansonp"}, "path": "geode-core/src/integrationTest/java/org/apache/geode/distributed/internal/InternalLocatorClusterManagementServiceIntegrationTest.java", "diffHunk": "@@ -56,13 +57,38 @@ public void tearDown() {\n     }\n   }\n \n+  @Before\n+  public void setup() throws URISyntaxException {\n+    distributionConfig = mock(DistributionConfigImpl.class);\n+    cache = mock(InternalCacheForClientAccess.class);\n+    managementService = mock(BaseManagementService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ce5ccb05c54fd2edc292fc9d68dc54db25992fd"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDc5MjM0OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/management/internal/BaseManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxOToxNzo0OVrOGiC9iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQyMTozNDo0MVrOGiveyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM1MzI5MQ==", "bodyText": "Looking at BaseManagementService, this is the only instances.remove statement to remove an entry from the HashMap. Entries are put to the HashMap, but never removed individually. There is instances.clear, but it removes everything in the HashMap. This concern maybe outside the scope of this JIRA ticket though.", "url": "https://github.com/apache/geode/pull/5188#discussion_r438353291", "createdAt": "2020-06-10T19:17:49Z", "author": {"login": "jchen21"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/BaseManagementService.java", "diffHunk": "@@ -94,6 +94,13 @@ public static void setManagementService(InternalCacheForClientAccess cache,\n     }\n   }\n \n+  @VisibleForTesting\n+  public static void clearManagementService(InternalCacheForClientAccess cache) {\n+    synchronized (instances) {\n+      instances.remove(cache);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b43402ca618b8f9a25edbe7c2bbdbc40da34925d"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTA4MjY5Ng==", "bodyText": "yeah, this is legacy code. for testing purpose, I had to add this here.", "url": "https://github.com/apache/geode/pull/5188#discussion_r439082696", "createdAt": "2020-06-11T21:34:41Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/BaseManagementService.java", "diffHunk": "@@ -94,6 +94,13 @@ public static void setManagementService(InternalCacheForClientAccess cache,\n     }\n   }\n \n+  @VisibleForTesting\n+  public static void clearManagementService(InternalCacheForClientAccess cache) {\n+    synchronized (instances) {\n+      instances.remove(cache);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODM1MzI5MQ=="}, "originalCommit": {"oid": "b43402ca618b8f9a25edbe7c2bbdbc40da34925d"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzA5NjI0OnYy", "diffSide": "RIGHT", "path": "geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjowNzo1MFrOGj49Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1ODowMVrOGj6y_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI4NjU1MQ==", "bodyText": "Is create expected to throw some Exception every time this test runs? If not, then let's remove the try-catch and add throws Exception clause to the method.", "url": "https://github.com/apache/geode/pull/5188#discussion_r440286551", "createdAt": "2020-06-15T16:07:50Z", "author": {"login": "kirklund"}, "path": "geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java", "diffHunk": "@@ -125,16 +127,41 @@ public void before() throws Exception {\n     doReturn(true).when(persistenceService).lockSharedConfiguration();\n     doNothing().when(persistenceService).unlockSharedConfiguration();\n     operationManager = mock(OperationManager.class);\n+    dLockService = mock(DistributedLockService.class);\n+\n     service =\n         spy(new LocatorClusterManagementService(cache, persistenceService, managers, validators,\n             memberValidator, cacheElementValidator, operationManager));\n+    doReturn(dLockService).when(service).getCmsDlockService();\n \n     regionConfig = new Region();\n     regionConfig.setName(\"region1\");\n \n     rebalanceOperation = new RebalanceOperation();\n   }\n \n+  @Test\n+  public void lockAndUnlockCalledAtCreate() {\n+    try {\n+      service.create(regionConfig);\n+    } catch (Exception ignore) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b43402ca618b8f9a25edbe7c2bbdbc40da34925d"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNjY3MA==", "bodyText": "same as \"delete\" case.", "url": "https://github.com/apache/geode/pull/5188#discussion_r440316670", "createdAt": "2020-06-15T16:58:01Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java", "diffHunk": "@@ -125,16 +127,41 @@ public void before() throws Exception {\n     doReturn(true).when(persistenceService).lockSharedConfiguration();\n     doNothing().when(persistenceService).unlockSharedConfiguration();\n     operationManager = mock(OperationManager.class);\n+    dLockService = mock(DistributedLockService.class);\n+\n     service =\n         spy(new LocatorClusterManagementService(cache, persistenceService, managers, validators,\n             memberValidator, cacheElementValidator, operationManager));\n+    doReturn(dLockService).when(service).getCmsDlockService();\n \n     regionConfig = new Region();\n     regionConfig.setName(\"region1\");\n \n     rebalanceOperation = new RebalanceOperation();\n   }\n \n+  @Test\n+  public void lockAndUnlockCalledAtCreate() {\n+    try {\n+      service.create(regionConfig);\n+    } catch (Exception ignore) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI4NjU1MQ=="}, "originalCommit": {"oid": "b43402ca618b8f9a25edbe7c2bbdbc40da34925d"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzA5ODUzOnYy", "diffSide": "RIGHT", "path": "geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjowODoyNFrOGj4-qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1NzoyMVrOGj6xaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI4Njg4OA==", "bodyText": "Can we remove try-block and use throws Exception?", "url": "https://github.com/apache/geode/pull/5188#discussion_r440286888", "createdAt": "2020-06-15T16:08:24Z", "author": {"login": "kirklund"}, "path": "geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java", "diffHunk": "@@ -125,16 +127,41 @@ public void before() throws Exception {\n     doReturn(true).when(persistenceService).lockSharedConfiguration();\n     doNothing().when(persistenceService).unlockSharedConfiguration();\n     operationManager = mock(OperationManager.class);\n+    dLockService = mock(DistributedLockService.class);\n+\n     service =\n         spy(new LocatorClusterManagementService(cache, persistenceService, managers, validators,\n             memberValidator, cacheElementValidator, operationManager));\n+    doReturn(dLockService).when(service).getCmsDlockService();\n \n     regionConfig = new Region();\n     regionConfig.setName(\"region1\");\n \n     rebalanceOperation = new RebalanceOperation();\n   }\n \n+  @Test\n+  public void lockAndUnlockCalledAtCreate() {\n+    try {\n+      service.create(regionConfig);\n+    } catch (Exception ignore) {\n+    }\n+\n+    verify(dLockService).lock(LocatorClusterManagementService.CMS_DLOCK_SERVICE_NAME, -1, -1);\n+    verify(dLockService).unlock(LocatorClusterManagementService.CMS_DLOCK_SERVICE_NAME);\n+  }\n+\n+  @Test\n+  public void lockAndUnlockCalledAtDelete() {\n+    try {\n+      service.delete(regionConfig);\n+    } catch (Exception ignore) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b43402ca618b8f9a25edbe7c2bbdbc40da34925d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNjI2NA==", "bodyText": "in this test setup, a NPE will already be thrown. This test is to make sure the two calls always get called when any exception happens. I changed the test method to be lockAndUnlockCalledAtDeleteWithException. And added the verification to another test setup when deletion is successful.", "url": "https://github.com/apache/geode/pull/5188#discussion_r440316264", "createdAt": "2020-06-15T16:57:21Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/test/java/org/apache/geode/management/internal/api/LocatorClusterManagementServiceTest.java", "diffHunk": "@@ -125,16 +127,41 @@ public void before() throws Exception {\n     doReturn(true).when(persistenceService).lockSharedConfiguration();\n     doNothing().when(persistenceService).unlockSharedConfiguration();\n     operationManager = mock(OperationManager.class);\n+    dLockService = mock(DistributedLockService.class);\n+\n     service =\n         spy(new LocatorClusterManagementService(cache, persistenceService, managers, validators,\n             memberValidator, cacheElementValidator, operationManager));\n+    doReturn(dLockService).when(service).getCmsDlockService();\n \n     regionConfig = new Region();\n     regionConfig.setName(\"region1\");\n \n     rebalanceOperation = new RebalanceOperation();\n   }\n \n+  @Test\n+  public void lockAndUnlockCalledAtCreate() {\n+    try {\n+      service.create(regionConfig);\n+    } catch (Exception ignore) {\n+    }\n+\n+    verify(dLockService).lock(LocatorClusterManagementService.CMS_DLOCK_SERVICE_NAME, -1, -1);\n+    verify(dLockService).unlock(LocatorClusterManagementService.CMS_DLOCK_SERVICE_NAME);\n+  }\n+\n+  @Test\n+  public void lockAndUnlockCalledAtDelete() {\n+    try {\n+      service.delete(regionConfig);\n+    } catch (Exception ignore) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI4Njg4OA=="}, "originalCommit": {"oid": "b43402ca618b8f9a25edbe7c2bbdbc40da34925d"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MzEwNTcyOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/management/internal/api/LocatorClusterManagementService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjoxMDoxM1rOGj5DIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxNjo1NzozM1rOGj6x1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI4ODAzMw==", "bodyText": "This method should be synchronized since cmsDlockService is lazy initialized.", "url": "https://github.com/apache/geode/pull/5188#discussion_r440288033", "createdAt": "2020-06-15T16:10:13Z", "author": {"login": "kirklund"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/api/LocatorClusterManagementService.java", "diffHunk": "@@ -154,6 +163,24 @@ public LocatorClusterManagementService(\n     this.operationManager = operationManager;\n   }\n \n+  @VisibleForTesting\n+  DistributedLockService getCmsDlockService() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b43402ca618b8f9a25edbe7c2bbdbc40da34925d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDMxNjM3NQ==", "bodyText": "good catch.", "url": "https://github.com/apache/geode/pull/5188#discussion_r440316375", "createdAt": "2020-06-15T16:57:33Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/api/LocatorClusterManagementService.java", "diffHunk": "@@ -154,6 +163,24 @@ public LocatorClusterManagementService(\n     this.operationManager = operationManager;\n   }\n \n+  @VisibleForTesting\n+  DistributedLockService getCmsDlockService() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI4ODAzMw=="}, "originalCommit": {"oid": "b43402ca618b8f9a25edbe7c2bbdbc40da34925d"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3940, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}