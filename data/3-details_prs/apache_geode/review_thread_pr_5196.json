{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2NzIwOTI5", "number": 5196, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOToyOTowOFrOECtCaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMzo1Mjo1NFrOEDMoWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjcwNTA1OnYy", "diffSide": "RIGHT", "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithPulseAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxOToyOTowOFrOGfUyiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzowNzo0N1rOGf2dDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ5OTY1Ng==", "bodyText": "Why locatorLogFile exits for this test, while ``locatorLogFile` doesn't exist for the other tests in this pull request? Can you share what configuration makes this difference?", "url": "https://github.com/apache/geode/pull/5196#discussion_r435499656", "createdAt": "2020-06-04T19:29:08Z", "author": {"login": "jchen21"}, "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithPulseAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.launchers;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.file.Path;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.test.assertj.LogFileAssert;\n+import org.apache.geode.test.junit.rules.RequiresGeodeHome;\n+\n+public class LocatorLauncherWithPulseAcceptanceTest {\n+\n+  private static final String LOCATOR_NAME = \"the-locator\";\n+\n+  private int locatorPort;\n+  private int httpServicePort;\n+  private Process locator;\n+  private Path geodeDependencies;\n+  private Path stdoutFile;\n+  private Path locatorLogFile;\n+  private Path pulseLogFile;\n+\n+  @Rule\n+  public RequiresGeodeHome requiresGeodeHome = new RequiresGeodeHome();\n+  @Rule\n+  public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Before\n+  public void setUpGeodeDependencies() {\n+    Path geodeHome = requiresGeodeHome.getGeodeHome().toPath();\n+    geodeDependencies = geodeHome.resolve(\"lib/geode-dependencies.jar\");\n+\n+    assertThat(geodeDependencies).exists();\n+  }\n+\n+  @Before\n+  public void setUpOutputFiles() {\n+    stdoutFile = temporaryFolder.getRoot().toPath().resolve(\"stdout.txt\");\n+    locatorLogFile = temporaryFolder.getRoot().toPath().resolve(LOCATOR_NAME + \".log\");\n+    pulseLogFile = temporaryFolder.getRoot().toPath().resolve(\"pulse.log\");\n+  }\n+\n+  @Before\n+  public void setUpRandomPorts() {\n+    int[] ports = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n+    locatorPort = ports[0];\n+    httpServicePort = ports[1];\n+  }\n+\n+  @After\n+  public void stopLocator() throws Exception {\n+    if (locator != null) {\n+      locator.destroyForcibly().waitFor(4, TimeUnit.SECONDS);\n+    }\n+  }\n+\n+  @Test\n+  public void locatorLauncherStartsPulse() throws Exception {\n+    ProcessBuilder processBuilder = new ProcessBuilder()\n+        .redirectErrorStream(true)\n+        .redirectOutput(stdoutFile.toFile())\n+        .directory(temporaryFolder.getRoot())\n+        .command(\"java\",\n+            \"-Dgemfire.http-service-port=\" + httpServicePort,\n+            \"-Dgemfire.jmx-manager-start=true\",\n+            \"-Djava.awt.headless=true\",\n+            \"-cp\", geodeDependencies.toFile().getAbsolutePath(),\n+            \"org.apache.geode.distributed.LocatorLauncher\", \"start\", LOCATOR_NAME,\n+            \"--port\", String.valueOf(locatorPort));\n+\n+    System.out.println(\"Launching command: \" + processBuilder.command());\n+\n+    locator = processBuilder\n+        .start();\n+\n+    assertThat(locator.isAlive()).isTrue();\n+\n+    await().untilAsserted(() -> {\n+      LogFileAssert.assertThat(locatorLogFile.toFile())\n+          .exists()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d647d0e9655965bf440d305aad2de3dfb7195216"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA1MTIxMg==", "bodyText": "LocatorLauncherWithPulseAcceptanceTest is the only test in this PR that doesn't provide a custom log4j2 xml file. So that means, it'll create a locator log file.\nThe other tests all use a custom log4j2 xml file which turns off logging to a file and turns on logging to stdout. These tests assert that the locator log file doesn't exist to help verify that the custom log4j2 xml file for that test was actually used.\nThe tests that use a custom log file include \"WithCustomLogConfig\" somewhere in the name of the test class, whereas LocatorLauncherWithPulseAcceptanceTest does not.", "url": "https://github.com/apache/geode/pull/5196#discussion_r436051212", "createdAt": "2020-06-05T17:07:47Z", "author": {"login": "kirklund"}, "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithPulseAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.launchers;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.nio.file.Path;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.test.assertj.LogFileAssert;\n+import org.apache.geode.test.junit.rules.RequiresGeodeHome;\n+\n+public class LocatorLauncherWithPulseAcceptanceTest {\n+\n+  private static final String LOCATOR_NAME = \"the-locator\";\n+\n+  private int locatorPort;\n+  private int httpServicePort;\n+  private Process locator;\n+  private Path geodeDependencies;\n+  private Path stdoutFile;\n+  private Path locatorLogFile;\n+  private Path pulseLogFile;\n+\n+  @Rule\n+  public RequiresGeodeHome requiresGeodeHome = new RequiresGeodeHome();\n+  @Rule\n+  public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Before\n+  public void setUpGeodeDependencies() {\n+    Path geodeHome = requiresGeodeHome.getGeodeHome().toPath();\n+    geodeDependencies = geodeHome.resolve(\"lib/geode-dependencies.jar\");\n+\n+    assertThat(geodeDependencies).exists();\n+  }\n+\n+  @Before\n+  public void setUpOutputFiles() {\n+    stdoutFile = temporaryFolder.getRoot().toPath().resolve(\"stdout.txt\");\n+    locatorLogFile = temporaryFolder.getRoot().toPath().resolve(LOCATOR_NAME + \".log\");\n+    pulseLogFile = temporaryFolder.getRoot().toPath().resolve(\"pulse.log\");\n+  }\n+\n+  @Before\n+  public void setUpRandomPorts() {\n+    int[] ports = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n+    locatorPort = ports[0];\n+    httpServicePort = ports[1];\n+  }\n+\n+  @After\n+  public void stopLocator() throws Exception {\n+    if (locator != null) {\n+      locator.destroyForcibly().waitFor(4, TimeUnit.SECONDS);\n+    }\n+  }\n+\n+  @Test\n+  public void locatorLauncherStartsPulse() throws Exception {\n+    ProcessBuilder processBuilder = new ProcessBuilder()\n+        .redirectErrorStream(true)\n+        .redirectOutput(stdoutFile.toFile())\n+        .directory(temporaryFolder.getRoot())\n+        .command(\"java\",\n+            \"-Dgemfire.http-service-port=\" + httpServicePort,\n+            \"-Dgemfire.jmx-manager-start=true\",\n+            \"-Djava.awt.headless=true\",\n+            \"-cp\", geodeDependencies.toFile().getAbsolutePath(),\n+            \"org.apache.geode.distributed.LocatorLauncher\", \"start\", LOCATOR_NAME,\n+            \"--port\", String.valueOf(locatorPort));\n+\n+    System.out.println(\"Launching command: \" + processBuilder.command());\n+\n+    locator = processBuilder\n+        .start();\n+\n+    assertThat(locator.isAlive()).isTrue();\n+\n+    await().untilAsserted(() -> {\n+      LogFileAssert.assertThat(locatorLogFile.toFile())\n+          .exists()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ5OTY1Ng=="}, "originalCommit": {"oid": "d647d0e9655965bf440d305aad2de3dfb7195216"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjMyMjM0OnYy", "diffSide": "RIGHT", "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODowNToyNlrOGf4QNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODowNToyNlrOGf4QNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA4MDY5Mw==", "bodyText": "My understanding is that once GEODE-8197 related bug is fixed, this @Ignore annotation will be removed.", "url": "https://github.com/apache/geode/pull/5196#discussion_r436080693", "createdAt": "2020-06-05T18:05:26Z", "author": {"login": "jchen21"}, "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.launchers;\n+\n+import static java.nio.file.Files.copy;\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.apache.geode.test.util.ResourceUtils.createFileFromResource;\n+import static org.apache.geode.test.util.ResourceUtils.getResource;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.test.assertj.LogFileAssert;\n+import org.apache.geode.test.junit.rules.RequiresGeodeHome;\n+\n+public class LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTest {\n+\n+  private static final String CONFIG_WITH_GEODE_PLUGINS_FILE_NAME =\n+      \"LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTestWithGeodePlugins.xml\";\n+  private static final String CONFIG_WITHOUT_GEODE_PLUGINS_FILE_NAME =\n+      \"LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTestWithoutGeodePlugins.xml\";\n+  private static final String LOCATOR_NAME = \"the-locator\";\n+\n+  private int locatorPort;\n+  private int httpServicePort;\n+  private Path configWithGeodePluginsFile;\n+  private Path configWithoutGeodePluginsFile;\n+  private Process locator;\n+  private Path geodeDependencies;\n+  private Path stdoutFile;\n+  private Path locatorLogFile;\n+  private Path pulseLogFile;\n+\n+  @Rule\n+  public RequiresGeodeHome requiresGeodeHome = new RequiresGeodeHome();\n+  @Rule\n+  public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Before\n+  public void setUpLogConfigFiles() {\n+    configWithGeodePluginsFile = createFileFromResource(\n+        getResource(CONFIG_WITH_GEODE_PLUGINS_FILE_NAME), temporaryFolder.getRoot(),\n+        CONFIG_WITH_GEODE_PLUGINS_FILE_NAME)\n+            .toPath();\n+\n+    configWithoutGeodePluginsFile = createFileFromResource(\n+        getResource(CONFIG_WITHOUT_GEODE_PLUGINS_FILE_NAME), temporaryFolder.getRoot(),\n+        CONFIG_WITHOUT_GEODE_PLUGINS_FILE_NAME)\n+            .toPath();\n+  }\n+\n+  @Before\n+  public void setUpGeodeDependencies() {\n+    Path geodeHome = requiresGeodeHome.getGeodeHome().toPath();\n+    geodeDependencies = geodeHome.resolve(\"lib/geode-dependencies.jar\");\n+\n+    assertThat(geodeDependencies).exists();\n+  }\n+\n+  @Before\n+  public void setUpOutputFiles() {\n+    stdoutFile = temporaryFolder.getRoot().toPath().resolve(\"stdout.txt\");\n+    locatorLogFile = temporaryFolder.getRoot().toPath().resolve(LOCATOR_NAME + \".log\");\n+    pulseLogFile = temporaryFolder.getRoot().toPath().resolve(\"pulse.log\");\n+  }\n+\n+  @Before\n+  public void setUpRandomPorts() {\n+    int[] ports = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n+    locatorPort = ports[0];\n+    httpServicePort = ports[1];\n+  }\n+\n+  @After\n+  public void stopLocator() throws Exception {\n+    if (locator != null) {\n+      locator.destroyForcibly().waitFor(4, TimeUnit.SECONDS);\n+    }\n+  }\n+\n+  @Test\n+  public void locatorLauncherUsesSpecifiedConfigFileWithoutGeodePlugins() throws Exception {\n+    ProcessBuilder processBuilder = new ProcessBuilder()\n+        .redirectErrorStream(true)\n+        .redirectOutput(stdoutFile.toFile())\n+        .directory(temporaryFolder.getRoot())\n+        .command(\"java\",\n+            \"-Dgemfire.http-service-port=\" + httpServicePort,\n+            \"-Dgemfire.jmx-manager-start=true\",\n+            \"-Djava.awt.headless=true\",\n+            \"-Dlog4j.configurationFile=\" + configWithoutGeodePluginsFile.toAbsolutePath(),\n+            \"-cp\", geodeDependencies.toFile().getAbsolutePath(),\n+            \"org.apache.geode.distributed.LocatorLauncher\", \"start\", LOCATOR_NAME,\n+            \"--port\", String.valueOf(locatorPort));\n+\n+    System.out.println(\"Launching command: \" + processBuilder.command());\n+\n+    locator = processBuilder\n+        .start();\n+\n+    assertThat(locator.isAlive()).isTrue();\n+\n+    await().untilAsserted(() -> {\n+      assertThat(locatorLogFile)\n+          .doesNotExist();\n+\n+      assertThat(pulseLogFile)\n+          .doesNotExist();\n+\n+      LogFileAssert.assertThat(stdoutFile.toFile())\n+          .exists()\n+          .contains(\"Located war: geode-pulse\")\n+          .contains(\"Adding webapp /pulse\")\n+          .contains(\"Starting server location for Distribution Locator\")\n+          .doesNotContain(\"geode-pulse war file was not found\")\n+          .doesNotContain(\"java.lang.IllegalStateException: No factory method found for class\");\n+    });\n+  }\n+\n+  @Test\n+  public void locatorLauncherUsesConfigFileInClasspathWithoutGeodePlugins() throws Exception {\n+    copy(configWithoutGeodePluginsFile, temporaryFolder.getRoot().toPath().resolve(\"log4j2.xml\"));\n+\n+    String classpath = temporaryFolder.getRoot().getAbsolutePath() + File.pathSeparator +\n+        geodeDependencies.toFile().getAbsolutePath();\n+\n+    ProcessBuilder processBuilder = new ProcessBuilder()\n+        .redirectErrorStream(true)\n+        .redirectOutput(stdoutFile.toFile())\n+        .directory(temporaryFolder.getRoot())\n+        .command(\"java\",\n+            \"-Dgemfire.http-service-port=\" + httpServicePort,\n+            \"-Dgemfire.jmx-manager-start=true\",\n+            \"-Djava.awt.headless=true\",\n+            \"-cp\", classpath,\n+            \"org.apache.geode.distributed.LocatorLauncher\", \"start\", LOCATOR_NAME,\n+            \"--port\", String.valueOf(locatorPort));\n+\n+    System.out.println(\"Launching command: \" + processBuilder.command());\n+\n+    locator = processBuilder\n+        .start();\n+\n+    assertThat(locator.isAlive()).isTrue();\n+\n+    await().untilAsserted(() -> {\n+      assertThat(locatorLogFile)\n+          .doesNotExist();\n+\n+      assertThat(pulseLogFile)\n+          .doesNotExist();\n+\n+      LogFileAssert.assertThat(stdoutFile.toFile())\n+          .exists()\n+          .contains(\"Located war: geode-pulse\")\n+          .contains(\"Adding webapp /pulse\")\n+          .contains(\"Starting server location for Distribution Locator\")\n+          .doesNotContain(\"geode-pulse war file was not found\")\n+          .doesNotContain(\"java.lang.IllegalStateException: No factory method found for class\");\n+    });\n+  }\n+\n+  @Test\n+  @Ignore(\"GEODE-8197\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d647d0e9655965bf440d305aad2de3dfb7195216"}, "originalPosition": 186}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjMyMzI4OnYy", "diffSide": "RIGHT", "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODowNTo0MVrOGf4QxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMjowODo0OVrOGf-txA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA4MDgzNg==", "bodyText": "My understanding is that once GEODE-8197 related bug is fixed, this @Ignore annotation will be removed.", "url": "https://github.com/apache/geode/pull/5196#discussion_r436080836", "createdAt": "2020-06-05T18:05:41Z", "author": {"login": "jchen21"}, "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.launchers;\n+\n+import static java.nio.file.Files.copy;\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.apache.geode.test.util.ResourceUtils.createFileFromResource;\n+import static org.apache.geode.test.util.ResourceUtils.getResource;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.test.assertj.LogFileAssert;\n+import org.apache.geode.test.junit.rules.RequiresGeodeHome;\n+\n+public class LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTest {\n+\n+  private static final String CONFIG_WITH_GEODE_PLUGINS_FILE_NAME =\n+      \"LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTestWithGeodePlugins.xml\";\n+  private static final String CONFIG_WITHOUT_GEODE_PLUGINS_FILE_NAME =\n+      \"LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTestWithoutGeodePlugins.xml\";\n+  private static final String LOCATOR_NAME = \"the-locator\";\n+\n+  private int locatorPort;\n+  private int httpServicePort;\n+  private Path configWithGeodePluginsFile;\n+  private Path configWithoutGeodePluginsFile;\n+  private Process locator;\n+  private Path geodeDependencies;\n+  private Path stdoutFile;\n+  private Path locatorLogFile;\n+  private Path pulseLogFile;\n+\n+  @Rule\n+  public RequiresGeodeHome requiresGeodeHome = new RequiresGeodeHome();\n+  @Rule\n+  public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Before\n+  public void setUpLogConfigFiles() {\n+    configWithGeodePluginsFile = createFileFromResource(\n+        getResource(CONFIG_WITH_GEODE_PLUGINS_FILE_NAME), temporaryFolder.getRoot(),\n+        CONFIG_WITH_GEODE_PLUGINS_FILE_NAME)\n+            .toPath();\n+\n+    configWithoutGeodePluginsFile = createFileFromResource(\n+        getResource(CONFIG_WITHOUT_GEODE_PLUGINS_FILE_NAME), temporaryFolder.getRoot(),\n+        CONFIG_WITHOUT_GEODE_PLUGINS_FILE_NAME)\n+            .toPath();\n+  }\n+\n+  @Before\n+  public void setUpGeodeDependencies() {\n+    Path geodeHome = requiresGeodeHome.getGeodeHome().toPath();\n+    geodeDependencies = geodeHome.resolve(\"lib/geode-dependencies.jar\");\n+\n+    assertThat(geodeDependencies).exists();\n+  }\n+\n+  @Before\n+  public void setUpOutputFiles() {\n+    stdoutFile = temporaryFolder.getRoot().toPath().resolve(\"stdout.txt\");\n+    locatorLogFile = temporaryFolder.getRoot().toPath().resolve(LOCATOR_NAME + \".log\");\n+    pulseLogFile = temporaryFolder.getRoot().toPath().resolve(\"pulse.log\");\n+  }\n+\n+  @Before\n+  public void setUpRandomPorts() {\n+    int[] ports = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n+    locatorPort = ports[0];\n+    httpServicePort = ports[1];\n+  }\n+\n+  @After\n+  public void stopLocator() throws Exception {\n+    if (locator != null) {\n+      locator.destroyForcibly().waitFor(4, TimeUnit.SECONDS);\n+    }\n+  }\n+\n+  @Test\n+  public void locatorLauncherUsesSpecifiedConfigFileWithoutGeodePlugins() throws Exception {\n+    ProcessBuilder processBuilder = new ProcessBuilder()\n+        .redirectErrorStream(true)\n+        .redirectOutput(stdoutFile.toFile())\n+        .directory(temporaryFolder.getRoot())\n+        .command(\"java\",\n+            \"-Dgemfire.http-service-port=\" + httpServicePort,\n+            \"-Dgemfire.jmx-manager-start=true\",\n+            \"-Djava.awt.headless=true\",\n+            \"-Dlog4j.configurationFile=\" + configWithoutGeodePluginsFile.toAbsolutePath(),\n+            \"-cp\", geodeDependencies.toFile().getAbsolutePath(),\n+            \"org.apache.geode.distributed.LocatorLauncher\", \"start\", LOCATOR_NAME,\n+            \"--port\", String.valueOf(locatorPort));\n+\n+    System.out.println(\"Launching command: \" + processBuilder.command());\n+\n+    locator = processBuilder\n+        .start();\n+\n+    assertThat(locator.isAlive()).isTrue();\n+\n+    await().untilAsserted(() -> {\n+      assertThat(locatorLogFile)\n+          .doesNotExist();\n+\n+      assertThat(pulseLogFile)\n+          .doesNotExist();\n+\n+      LogFileAssert.assertThat(stdoutFile.toFile())\n+          .exists()\n+          .contains(\"Located war: geode-pulse\")\n+          .contains(\"Adding webapp /pulse\")\n+          .contains(\"Starting server location for Distribution Locator\")\n+          .doesNotContain(\"geode-pulse war file was not found\")\n+          .doesNotContain(\"java.lang.IllegalStateException: No factory method found for class\");\n+    });\n+  }\n+\n+  @Test\n+  public void locatorLauncherUsesConfigFileInClasspathWithoutGeodePlugins() throws Exception {\n+    copy(configWithoutGeodePluginsFile, temporaryFolder.getRoot().toPath().resolve(\"log4j2.xml\"));\n+\n+    String classpath = temporaryFolder.getRoot().getAbsolutePath() + File.pathSeparator +\n+        geodeDependencies.toFile().getAbsolutePath();\n+\n+    ProcessBuilder processBuilder = new ProcessBuilder()\n+        .redirectErrorStream(true)\n+        .redirectOutput(stdoutFile.toFile())\n+        .directory(temporaryFolder.getRoot())\n+        .command(\"java\",\n+            \"-Dgemfire.http-service-port=\" + httpServicePort,\n+            \"-Dgemfire.jmx-manager-start=true\",\n+            \"-Djava.awt.headless=true\",\n+            \"-cp\", classpath,\n+            \"org.apache.geode.distributed.LocatorLauncher\", \"start\", LOCATOR_NAME,\n+            \"--port\", String.valueOf(locatorPort));\n+\n+    System.out.println(\"Launching command: \" + processBuilder.command());\n+\n+    locator = processBuilder\n+        .start();\n+\n+    assertThat(locator.isAlive()).isTrue();\n+\n+    await().untilAsserted(() -> {\n+      assertThat(locatorLogFile)\n+          .doesNotExist();\n+\n+      assertThat(pulseLogFile)\n+          .doesNotExist();\n+\n+      LogFileAssert.assertThat(stdoutFile.toFile())\n+          .exists()\n+          .contains(\"Located war: geode-pulse\")\n+          .contains(\"Adding webapp /pulse\")\n+          .contains(\"Starting server location for Distribution Locator\")\n+          .doesNotContain(\"geode-pulse war file was not found\")\n+          .doesNotContain(\"java.lang.IllegalStateException: No factory method found for class\");\n+    });\n+  }\n+\n+  @Test\n+  @Ignore(\"GEODE-8197\")\n+  public void locatorLauncherUsesSpecifiedConfigFileWithGeodePlugins() throws Exception {\n+    ProcessBuilder processBuilder = new ProcessBuilder()\n+        .redirectErrorStream(true)\n+        .redirectOutput(stdoutFile.toFile())\n+        .directory(temporaryFolder.getRoot())\n+        .command(\"java\",\n+            \"-Dgemfire.http-service-port=\" + httpServicePort,\n+            \"-Dgemfire.jmx-manager-start=true\",\n+            \"-Djava.awt.headless=true\",\n+            \"-Dlog4j.configurationFile=\" + configWithGeodePluginsFile.toAbsolutePath(),\n+            \"-cp\", geodeDependencies.toFile().getAbsolutePath(),\n+            \"org.apache.geode.distributed.LocatorLauncher\", \"start\", LOCATOR_NAME,\n+            \"--port\", String.valueOf(locatorPort));\n+\n+    System.out.println(\"Launching command: \" + processBuilder.command());\n+\n+    locator = processBuilder\n+        .start();\n+\n+    assertThat(locator.isAlive()).isTrue();\n+\n+    await().untilAsserted(() -> {\n+      assertThat(locatorLogFile)\n+          .doesNotExist();\n+\n+      assertThat(pulseLogFile)\n+          .doesNotExist();\n+\n+      LogFileAssert.assertThat(stdoutFile.toFile())\n+          .exists()\n+          .contains(\"Located war: geode-pulse\")\n+          .contains(\"Adding webapp /pulse\")\n+          .contains(\"Starting server location for Distribution Locator\")\n+          .doesNotContain(\"geode-pulse war file was not found\")\n+          .doesNotContain(\"java.lang.IllegalStateException: No factory method found for class\");\n+    });\n+  }\n+\n+  @Test\n+  @Ignore(\"GEODE-8197\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d647d0e9655965bf440d305aad2de3dfb7195216"}, "originalPosition": 226}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4NjU2NA==", "bodyText": "Yes. This PR is only creating new tests. I'll follow up in the future with a fix and reenable the two new tests that are currently disabled with \"GEODE-8197\". Right now these two tests will fail.", "url": "https://github.com/apache/geode/pull/5196#discussion_r436186564", "createdAt": "2020-06-05T22:08:49Z", "author": {"login": "kirklund"}, "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,268 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.launchers;\n+\n+import static java.nio.file.Files.copy;\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.apache.geode.test.util.ResourceUtils.createFileFromResource;\n+import static org.apache.geode.test.util.ResourceUtils.getResource;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.nio.file.Path;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.test.assertj.LogFileAssert;\n+import org.apache.geode.test.junit.rules.RequiresGeodeHome;\n+\n+public class LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTest {\n+\n+  private static final String CONFIG_WITH_GEODE_PLUGINS_FILE_NAME =\n+      \"LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTestWithGeodePlugins.xml\";\n+  private static final String CONFIG_WITHOUT_GEODE_PLUGINS_FILE_NAME =\n+      \"LocatorLauncherWithPulseAndCustomLogConfigAcceptanceTestWithoutGeodePlugins.xml\";\n+  private static final String LOCATOR_NAME = \"the-locator\";\n+\n+  private int locatorPort;\n+  private int httpServicePort;\n+  private Path configWithGeodePluginsFile;\n+  private Path configWithoutGeodePluginsFile;\n+  private Process locator;\n+  private Path geodeDependencies;\n+  private Path stdoutFile;\n+  private Path locatorLogFile;\n+  private Path pulseLogFile;\n+\n+  @Rule\n+  public RequiresGeodeHome requiresGeodeHome = new RequiresGeodeHome();\n+  @Rule\n+  public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Before\n+  public void setUpLogConfigFiles() {\n+    configWithGeodePluginsFile = createFileFromResource(\n+        getResource(CONFIG_WITH_GEODE_PLUGINS_FILE_NAME), temporaryFolder.getRoot(),\n+        CONFIG_WITH_GEODE_PLUGINS_FILE_NAME)\n+            .toPath();\n+\n+    configWithoutGeodePluginsFile = createFileFromResource(\n+        getResource(CONFIG_WITHOUT_GEODE_PLUGINS_FILE_NAME), temporaryFolder.getRoot(),\n+        CONFIG_WITHOUT_GEODE_PLUGINS_FILE_NAME)\n+            .toPath();\n+  }\n+\n+  @Before\n+  public void setUpGeodeDependencies() {\n+    Path geodeHome = requiresGeodeHome.getGeodeHome().toPath();\n+    geodeDependencies = geodeHome.resolve(\"lib/geode-dependencies.jar\");\n+\n+    assertThat(geodeDependencies).exists();\n+  }\n+\n+  @Before\n+  public void setUpOutputFiles() {\n+    stdoutFile = temporaryFolder.getRoot().toPath().resolve(\"stdout.txt\");\n+    locatorLogFile = temporaryFolder.getRoot().toPath().resolve(LOCATOR_NAME + \".log\");\n+    pulseLogFile = temporaryFolder.getRoot().toPath().resolve(\"pulse.log\");\n+  }\n+\n+  @Before\n+  public void setUpRandomPorts() {\n+    int[] ports = AvailablePortHelper.getRandomAvailableTCPPorts(2);\n+    locatorPort = ports[0];\n+    httpServicePort = ports[1];\n+  }\n+\n+  @After\n+  public void stopLocator() throws Exception {\n+    if (locator != null) {\n+      locator.destroyForcibly().waitFor(4, TimeUnit.SECONDS);\n+    }\n+  }\n+\n+  @Test\n+  public void locatorLauncherUsesSpecifiedConfigFileWithoutGeodePlugins() throws Exception {\n+    ProcessBuilder processBuilder = new ProcessBuilder()\n+        .redirectErrorStream(true)\n+        .redirectOutput(stdoutFile.toFile())\n+        .directory(temporaryFolder.getRoot())\n+        .command(\"java\",\n+            \"-Dgemfire.http-service-port=\" + httpServicePort,\n+            \"-Dgemfire.jmx-manager-start=true\",\n+            \"-Djava.awt.headless=true\",\n+            \"-Dlog4j.configurationFile=\" + configWithoutGeodePluginsFile.toAbsolutePath(),\n+            \"-cp\", geodeDependencies.toFile().getAbsolutePath(),\n+            \"org.apache.geode.distributed.LocatorLauncher\", \"start\", LOCATOR_NAME,\n+            \"--port\", String.valueOf(locatorPort));\n+\n+    System.out.println(\"Launching command: \" + processBuilder.command());\n+\n+    locator = processBuilder\n+        .start();\n+\n+    assertThat(locator.isAlive()).isTrue();\n+\n+    await().untilAsserted(() -> {\n+      assertThat(locatorLogFile)\n+          .doesNotExist();\n+\n+      assertThat(pulseLogFile)\n+          .doesNotExist();\n+\n+      LogFileAssert.assertThat(stdoutFile.toFile())\n+          .exists()\n+          .contains(\"Located war: geode-pulse\")\n+          .contains(\"Adding webapp /pulse\")\n+          .contains(\"Starting server location for Distribution Locator\")\n+          .doesNotContain(\"geode-pulse war file was not found\")\n+          .doesNotContain(\"java.lang.IllegalStateException: No factory method found for class\");\n+    });\n+  }\n+\n+  @Test\n+  public void locatorLauncherUsesConfigFileInClasspathWithoutGeodePlugins() throws Exception {\n+    copy(configWithoutGeodePluginsFile, temporaryFolder.getRoot().toPath().resolve(\"log4j2.xml\"));\n+\n+    String classpath = temporaryFolder.getRoot().getAbsolutePath() + File.pathSeparator +\n+        geodeDependencies.toFile().getAbsolutePath();\n+\n+    ProcessBuilder processBuilder = new ProcessBuilder()\n+        .redirectErrorStream(true)\n+        .redirectOutput(stdoutFile.toFile())\n+        .directory(temporaryFolder.getRoot())\n+        .command(\"java\",\n+            \"-Dgemfire.http-service-port=\" + httpServicePort,\n+            \"-Dgemfire.jmx-manager-start=true\",\n+            \"-Djava.awt.headless=true\",\n+            \"-cp\", classpath,\n+            \"org.apache.geode.distributed.LocatorLauncher\", \"start\", LOCATOR_NAME,\n+            \"--port\", String.valueOf(locatorPort));\n+\n+    System.out.println(\"Launching command: \" + processBuilder.command());\n+\n+    locator = processBuilder\n+        .start();\n+\n+    assertThat(locator.isAlive()).isTrue();\n+\n+    await().untilAsserted(() -> {\n+      assertThat(locatorLogFile)\n+          .doesNotExist();\n+\n+      assertThat(pulseLogFile)\n+          .doesNotExist();\n+\n+      LogFileAssert.assertThat(stdoutFile.toFile())\n+          .exists()\n+          .contains(\"Located war: geode-pulse\")\n+          .contains(\"Adding webapp /pulse\")\n+          .contains(\"Starting server location for Distribution Locator\")\n+          .doesNotContain(\"geode-pulse war file was not found\")\n+          .doesNotContain(\"java.lang.IllegalStateException: No factory method found for class\");\n+    });\n+  }\n+\n+  @Test\n+  @Ignore(\"GEODE-8197\")\n+  public void locatorLauncherUsesSpecifiedConfigFileWithGeodePlugins() throws Exception {\n+    ProcessBuilder processBuilder = new ProcessBuilder()\n+        .redirectErrorStream(true)\n+        .redirectOutput(stdoutFile.toFile())\n+        .directory(temporaryFolder.getRoot())\n+        .command(\"java\",\n+            \"-Dgemfire.http-service-port=\" + httpServicePort,\n+            \"-Dgemfire.jmx-manager-start=true\",\n+            \"-Djava.awt.headless=true\",\n+            \"-Dlog4j.configurationFile=\" + configWithGeodePluginsFile.toAbsolutePath(),\n+            \"-cp\", geodeDependencies.toFile().getAbsolutePath(),\n+            \"org.apache.geode.distributed.LocatorLauncher\", \"start\", LOCATOR_NAME,\n+            \"--port\", String.valueOf(locatorPort));\n+\n+    System.out.println(\"Launching command: \" + processBuilder.command());\n+\n+    locator = processBuilder\n+        .start();\n+\n+    assertThat(locator.isAlive()).isTrue();\n+\n+    await().untilAsserted(() -> {\n+      assertThat(locatorLogFile)\n+          .doesNotExist();\n+\n+      assertThat(pulseLogFile)\n+          .doesNotExist();\n+\n+      LogFileAssert.assertThat(stdoutFile.toFile())\n+          .exists()\n+          .contains(\"Located war: geode-pulse\")\n+          .contains(\"Adding webapp /pulse\")\n+          .contains(\"Starting server location for Distribution Locator\")\n+          .doesNotContain(\"geode-pulse war file was not found\")\n+          .doesNotContain(\"java.lang.IllegalStateException: No factory method found for class\");\n+    });\n+  }\n+\n+  @Test\n+  @Ignore(\"GEODE-8197\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA4MDgzNg=="}, "originalCommit": {"oid": "d647d0e9655965bf440d305aad2de3dfb7195216"}, "originalPosition": 226}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzg4MTIwOnYy", "diffSide": "RIGHT", "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithCustomLogConfigAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNlQyMzo1Mjo1NFrOGgGPAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNzoxMjoxM1rOGgoCBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwOTc2MA==", "bodyText": "If system property java.home is defined, please use System.getProperty(\"java.home\")+\"/bin/java\" instead.  Only use java if system property java.home is not defined", "url": "https://github.com/apache/geode/pull/5196#discussion_r436309760", "createdAt": "2020-06-06T23:52:54Z", "author": {"login": "onichols-pivotal"}, "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithCustomLogConfigAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.launchers;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.apache.geode.test.util.ResourceUtils.createFileFromResource;\n+import static org.apache.geode.test.util.ResourceUtils.getResource;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.test.assertj.LogFileAssert;\n+import org.apache.geode.test.junit.rules.RequiresGeodeHome;\n+\n+public class LocatorLauncherWithCustomLogConfigAcceptanceTest {\n+\n+  private static final String CONFIG_FILE_NAME =\n+      \"LocatorLauncherWithCustomLogConfigAcceptanceTest.xml\";\n+  private static final String LOCATOR_NAME = \"the-locator\";\n+\n+  private int locatorPort;\n+  private Path configFile;\n+  private Process locator;\n+  private Path geodeDependencies;\n+  private Path stdoutFile;\n+  private Path locatorLogFile;\n+  private Path pulseLogFile;\n+\n+  @Rule\n+  public RequiresGeodeHome requiresGeodeHome = new RequiresGeodeHome();\n+  @Rule\n+  public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Before\n+  public void setUpLogConfigFile() {\n+    configFile = createFileFromResource(getResource(CONFIG_FILE_NAME), temporaryFolder.getRoot(),\n+        CONFIG_FILE_NAME)\n+            .toPath();\n+  }\n+\n+  @Before\n+  public void setUpGeodeDependencies() {\n+    Path geodeHome = requiresGeodeHome.getGeodeHome().toPath();\n+    geodeDependencies = geodeHome.resolve(\"lib/geode-dependencies.jar\");\n+\n+    assertThat(geodeDependencies).exists();\n+  }\n+\n+  @Before\n+  public void setUpOutputFiles() {\n+    stdoutFile = temporaryFolder.getRoot().toPath().resolve(\"stdout.txt\");\n+    locatorLogFile = temporaryFolder.getRoot().toPath().resolve(LOCATOR_NAME + \".log\");\n+    pulseLogFile = temporaryFolder.getRoot().toPath().resolve(\"pulse.log\");\n+  }\n+\n+  @Before\n+  public void setUpRandomPorts() {\n+    locatorPort = AvailablePortHelper.getRandomAvailableTCPPort();\n+  }\n+\n+  @After\n+  public void stopLocator() throws Exception {\n+    if (locator != null) {\n+      locator.destroyForcibly().waitFor(4, TimeUnit.SECONDS);\n+    }\n+  }\n+\n+  @Test\n+  public void locatorLauncherUsesLog4jConfigurationFile() throws Exception {\n+    ProcessBuilder processBuilder = new ProcessBuilder()\n+        .redirectErrorStream(true)\n+        .redirectOutput(stdoutFile.toFile())\n+        .directory(temporaryFolder.getRoot())\n+        .command(\"java\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3157c674d8c1e4a2f41ba9524361b2a80a1cee0d"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg2MzQ5NA==", "bodyText": "Thanks Owen!", "url": "https://github.com/apache/geode/pull/5196#discussion_r436863494", "createdAt": "2020-06-08T17:12:13Z", "author": {"login": "kirklund"}, "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/launchers/LocatorLauncherWithCustomLogConfigAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.launchers;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.apache.geode.test.util.ResourceUtils.createFileFromResource;\n+import static org.apache.geode.test.util.ResourceUtils.getResource;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.test.assertj.LogFileAssert;\n+import org.apache.geode.test.junit.rules.RequiresGeodeHome;\n+\n+public class LocatorLauncherWithCustomLogConfigAcceptanceTest {\n+\n+  private static final String CONFIG_FILE_NAME =\n+      \"LocatorLauncherWithCustomLogConfigAcceptanceTest.xml\";\n+  private static final String LOCATOR_NAME = \"the-locator\";\n+\n+  private int locatorPort;\n+  private Path configFile;\n+  private Process locator;\n+  private Path geodeDependencies;\n+  private Path stdoutFile;\n+  private Path locatorLogFile;\n+  private Path pulseLogFile;\n+\n+  @Rule\n+  public RequiresGeodeHome requiresGeodeHome = new RequiresGeodeHome();\n+  @Rule\n+  public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+\n+  @Before\n+  public void setUpLogConfigFile() {\n+    configFile = createFileFromResource(getResource(CONFIG_FILE_NAME), temporaryFolder.getRoot(),\n+        CONFIG_FILE_NAME)\n+            .toPath();\n+  }\n+\n+  @Before\n+  public void setUpGeodeDependencies() {\n+    Path geodeHome = requiresGeodeHome.getGeodeHome().toPath();\n+    geodeDependencies = geodeHome.resolve(\"lib/geode-dependencies.jar\");\n+\n+    assertThat(geodeDependencies).exists();\n+  }\n+\n+  @Before\n+  public void setUpOutputFiles() {\n+    stdoutFile = temporaryFolder.getRoot().toPath().resolve(\"stdout.txt\");\n+    locatorLogFile = temporaryFolder.getRoot().toPath().resolve(LOCATOR_NAME + \".log\");\n+    pulseLogFile = temporaryFolder.getRoot().toPath().resolve(\"pulse.log\");\n+  }\n+\n+  @Before\n+  public void setUpRandomPorts() {\n+    locatorPort = AvailablePortHelper.getRandomAvailableTCPPort();\n+  }\n+\n+  @After\n+  public void stopLocator() throws Exception {\n+    if (locator != null) {\n+      locator.destroyForcibly().waitFor(4, TimeUnit.SECONDS);\n+    }\n+  }\n+\n+  @Test\n+  public void locatorLauncherUsesLog4jConfigurationFile() throws Exception {\n+    ProcessBuilder processBuilder = new ProcessBuilder()\n+        .redirectErrorStream(true)\n+        .redirectOutput(stdoutFile.toFile())\n+        .directory(temporaryFolder.getRoot())\n+        .command(\"java\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMwOTc2MA=="}, "originalCommit": {"oid": "3157c674d8c1e4a2f41ba9524361b2a80a1cee0d"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3949, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}