{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMTcwNTI1", "number": 4830, "title": "GEODE-7852: Adding a SocketFactory configuration for client Pools", "bodyText": "Adding the ability to provide a SocketFactory to a client pool for use in\ncreating sockets. Adding an implementation of this SocketFactory that\nconfigures the pool to use an SNI proxy.\nAdding an automated test of the SniSocketFactory that uses docker compose to launch the locator and server in docker containers, and uses a real SNI proxy to ensure that clients connect to those locators and servers through the proxy.", "createdAt": "2020-03-19T18:34:48Z", "url": "https://github.com/apache/geode/pull/4830", "merged": true, "mergeCommit": {"oid": "53f1e1a81c3b58989a835d37f94466eb3dfc752f"}, "closed": true, "closedAt": "2020-03-20T20:40:25Z", "author": {"login": "upthewaterspout"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPQR0AgH2gAyMzkxMTcwNTI1OmFjYTgxZjQ2ZTU4OGE1YzkyZDJmYjU0Yjg1NjY5ZmViZDc4NjM2MjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPlbqfgH2gAyMzkxMTcwNTI1OmExODQzMGYzMDhjMWRjOGM1YWFkNDMwYTE0NjBkM2Q5MDdiY2RmY2U=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "aca81f46e588a5c92d2fb54b85669febd7863626", "author": {"user": {"login": "upthewaterspout", "name": "Dan Smith"}}, "url": "https://github.com/apache/geode/commit/aca81f46e588a5c92d2fb54b85669febd7863626", "committedDate": "2020-03-19T18:32:53Z", "message": "GEODE-7852: Adding a SocketFactory configuration for client Pools\n\nAdding the ability to provide a SocketFactory to a client pool for use in\ncreating sockets. Adding an implementation of this SocketFactory that\nconfigures the pool to use an SNI proxy."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44783d9b843f0c60debeb4d3adeede1add9e79a1", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/44783d9b843f0c60debeb4d3adeede1add9e79a1", "committedDate": "2020-03-19T18:37:49Z", "message": "GEODE-7837: SNI proxy automated test\n\nAdding an automated test of the SniSocketFactory"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "94c6d058c53031f4c59b813ebedef49337b419a1", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/94c6d058c53031f4c59b813ebedef49337b419a1", "committedDate": "2020-03-19T18:33:06Z", "message": "GEODE-7837: SNI proxy automated test\n\nAdding an automated test of the SniSocketFactory"}, "afterCommit": {"oid": "44783d9b843f0c60debeb4d3adeede1add9e79a1", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/44783d9b843f0c60debeb4d3adeede1add9e79a1", "committedDate": "2020-03-19T18:37:49Z", "message": "GEODE-7837: SNI proxy automated test\n\nAdding an automated test of the SniSocketFactory"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MDAwMjQ5", "url": "https://github.com/apache/geode/pull/4830#pullrequestreview-378000249", "createdAt": "2020-03-19T18:46:43Z", "commit": {"oid": "44783d9b843f0c60debeb4d3adeede1add9e79a1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo0Njo0M1rOF4735Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo1MDoxN1rOF47_yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI0NTU0MQ==", "bodyText": "Delete commented code.", "url": "https://github.com/apache/geode/pull/4830#discussion_r395245541", "createdAt": "2020-03-19T18:46:43Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-assembly/src/acceptanceTest/resources/org/apache/geode/client/docker-compose.yml", "diffHunk": "@@ -0,0 +1,48 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+version: '3'\n+services:\n+  geode:\n+    container_name: 'geode'\n+    image: 'geode:develop'\n+    expose:\n+      - '10334'\n+      - '40404'\n+#   entrypoint: gfsh", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44783d9b843f0c60debeb4d3adeede1add9e79a1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI0NzA2Mg==", "bodyText": "Please don't leave raw type warnings. Use proper generic types or suppress warnings if generics can't work here.\npublic static class TestFunction implements Function<Void> ... {\n...\npublic void execute<FunctionContext<Void> context);\n}", "url": "https://github.com/apache/geode/pull/4830#discussion_r395247062", "createdAt": "2020-03-19T18:49:23Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/cache/client/SocketFactoryDUnitTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.net.SocketAddress;\n+import java.util.Arrays;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.DataSerializable;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+\n+public class SocketFactoryDUnitTest {\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+  private int locatorPort;\n+  private int serverPort;\n+\n+  @Before\n+  public void createCluster() {\n+    locatorPort = cluster.startLocatorVM(0).getPort();\n+    serverPort = cluster.startServerVM(1, locatorPort).getPort();\n+  }\n+\n+  @Test\n+  public void customSocketFactoryUsedForLocators() throws IOException {\n+    ClientCache client = new ClientCacheFactory()\n+        // Add a locator with the wrong hostname\n+        .addPoolLocator(\"notarealhostname\", locatorPort)\n+        // Set a socket factory that switches the hostname back\n+        .setPoolSocketFactory(new ChangeHostSocketFactory(\"localhost\"))\n+        .create();\n+\n+    // Verify the socket factory switched the hostname so we can connect\n+    verifyConnection(client);\n+  }\n+\n+  @Test\n+  public void customSocketFactoryUsedForServers() {\n+    ClientCache client = new ClientCacheFactory()\n+        // Add a locator with the wrong hostname\n+        .addPoolServer(\"notarealhostname\", serverPort)\n+        // Set a socket factory that switches the hostname back\n+        .setPoolSocketFactory(new ChangeHostSocketFactory(\"localhost\"))\n+        .create();\n+\n+\n+    // Verify the socket factory switched the hostname so we can connect\n+    verifyConnection(client);\n+  }\n+\n+  private void verifyConnection(ClientCache client) {\n+    // Verify connectivity with servers\n+    Object functionResult =\n+        FunctionService.onServers(client).execute(new TestFunction()).getResult();\n+\n+    assertThat(functionResult).isEqualTo(Arrays.asList(\"test\"));\n+  }\n+\n+\n+  public static class TestFunction implements Function, DataSerializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44783d9b843f0c60debeb4d3adeede1add9e79a1"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI0NzU2Mw==", "bodyText": "Cleanup rawtype warnings.", "url": "https://github.com/apache/geode/pull/4830#discussion_r395247563", "createdAt": "2020-03-19T18:50:17Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/cache/client/SocketFactoryDUnitTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.net.SocketAddress;\n+import java.util.Arrays;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.DataSerializable;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+\n+public class SocketFactoryDUnitTest {\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+  private int locatorPort;\n+  private int serverPort;\n+\n+  @Before\n+  public void createCluster() {\n+    locatorPort = cluster.startLocatorVM(0).getPort();\n+    serverPort = cluster.startServerVM(1, locatorPort).getPort();\n+  }\n+\n+  @Test\n+  public void customSocketFactoryUsedForLocators() throws IOException {\n+    ClientCache client = new ClientCacheFactory()\n+        // Add a locator with the wrong hostname\n+        .addPoolLocator(\"notarealhostname\", locatorPort)\n+        // Set a socket factory that switches the hostname back\n+        .setPoolSocketFactory(new ChangeHostSocketFactory(\"localhost\"))\n+        .create();\n+\n+    // Verify the socket factory switched the hostname so we can connect\n+    verifyConnection(client);\n+  }\n+\n+  @Test\n+  public void customSocketFactoryUsedForServers() {\n+    ClientCache client = new ClientCacheFactory()\n+        // Add a locator with the wrong hostname\n+        .addPoolServer(\"notarealhostname\", serverPort)\n+        // Set a socket factory that switches the hostname back\n+        .setPoolSocketFactory(new ChangeHostSocketFactory(\"localhost\"))\n+        .create();\n+\n+\n+    // Verify the socket factory switched the hostname so we can connect\n+    verifyConnection(client);\n+  }\n+\n+  private void verifyConnection(ClientCache client) {\n+    // Verify connectivity with servers\n+    Object functionResult =\n+        FunctionService.onServers(client).execute(new TestFunction()).getResult();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44783d9b843f0c60debeb4d3adeede1add9e79a1"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6d00653cc964de5924d43dace07b5374e482977", "author": {"user": {"login": "upthewaterspout", "name": "Dan Smith"}}, "url": "https://github.com/apache/geode/commit/f6d00653cc964de5924d43dace07b5374e482977", "committedDate": "2020-03-19T18:59:56Z", "message": "Splitting up the keystores in the acceptance test\n\nUsing a different keystore for each process so that they present the correct\nkey to the client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7702054ccf99a67b027c41b57046d5b71891bbfe", "author": {"user": {"login": "upthewaterspout", "name": "Dan Smith"}}, "url": "https://github.com/apache/geode/commit/7702054ccf99a67b027c41b57046d5b71891bbfe", "committedDate": "2020-03-19T22:47:12Z", "message": "Removing raw type warnings from SocketFactoryDUnitTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c110aed42d3c8b3ecd3c0717f33f88f9e8e963a6", "author": {"user": {"login": "upthewaterspout", "name": "Dan Smith"}}, "url": "https://github.com/apache/geode/commit/c110aed42d3c8b3ecd3c0717f33f88f9e8e963a6", "committedDate": "2020-03-19T22:47:31Z", "message": "Using a ephemeral port for the haproxy in ClientSNIAcceptanceTest\n\nRemoving the use of a fixed port in this test, so that the test will not fail\nif the port is already bound."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc3aa61d5736456c9c80a39f3c56b2f875710436", "author": {"user": {"login": "upthewaterspout", "name": "Dan Smith"}}, "url": "https://github.com/apache/geode/commit/bc3aa61d5736456c9c80a39f3c56b2f875710436", "committedDate": "2020-03-19T23:46:27Z", "message": "Removing unused client keystore file from ClientSNIAcceptanceTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ffc0c815787dc6f69ebba6591f519a47d5ad1ef", "author": {"user": {"login": "upthewaterspout", "name": "Dan Smith"}}, "url": "https://github.com/apache/geode/commit/1ffc0c815787dc6f69ebba6591f519a47d5ad1ef", "committedDate": "2020-03-20T15:39:06Z", "message": "Missed one block of commented out code in haproxy.cfg\n\nRemoving the last bit of commented out code."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NTk2OTMx", "url": "https://github.com/apache/geode/pull/4830#pullrequestreview-378596931", "createdAt": "2020-03-20T15:44:14Z", "commit": {"oid": "1ffc0c815787dc6f69ebba6591f519a47d5ad1ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzQ2MzA5", "url": "https://github.com/apache/geode/pull/4830#pullrequestreview-378746309", "createdAt": "2020-03-20T19:08:24Z", "commit": {"oid": "1ffc0c815787dc6f69ebba6591f519a47d5ad1ef"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzQ4MTE5", "url": "https://github.com/apache/geode/pull/4830#pullrequestreview-378748119", "createdAt": "2020-03-20T19:11:24Z", "commit": {"oid": "f6d00653cc964de5924d43dace07b5374e482977"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a18430f308c1dc8c5aad430a1460d3d907bcdfce", "author": {"user": {"login": "upthewaterspout", "name": "Dan Smith"}}, "url": "https://github.com/apache/geode/commit/a18430f308c1dc8c5aad430a1460d3d907bcdfce", "committedDate": "2020-03-20T19:11:39Z", "message": "adding FunctionInterface, final field\n\nFixing some minor review comments\n - Adding @FunctionInterface to the SocketFactory\n - adding a missing *final* to a field"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4895, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}