{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MTI0NDc1", "number": 5370, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjozNTozNFrOEOdMkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo1MzoxMlrOEPMZVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTkzODczOnYy", "diffSide": "RIGHT", "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjozNTozNFrOGxnucw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjozNTozNFrOGxnucw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY4NDI3NQ==", "bodyText": "Please put private members after all public ones.", "url": "https://github.com/apache/geode/pull/5370#discussion_r454684275", "createdAt": "2020-07-14T22:35:34Z", "author": {"login": "Bill"}, "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java", "diffHunk": "@@ -328,4 +330,58 @@ public void noDispatchWhenSick() throws MemberShunnedException, MemberStartupExc\n     assertThat(spy.getStartupEvents()).isEmpty();\n   }\n \n+  private void addSurpriseMemberWithVersion(Version version) {\n+    MemberIdentifier surpriseMember = myMemberId;\n+    surpriseMember.setVmViewId(3);\n+    surpriseMember.setVersionObjectForTest(version);\n+    manager.addSurpriseMember(surpriseMember);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe8392accfc75ba05993ee6311e345ac313488b6"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTk1ODc1OnYy", "diffSide": "RIGHT", "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjo0NDoxMFrOGxn6RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjo0NDoxMFrOGxn6RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY4NzMwMQ==", "bodyText": "It is not clear from looking at this method that it is ok to mutate the object referenced by myMemberId. Off-hand it seems like that field refers to a member id representing the \"local\" member. So either way it seems wrong to modify it here to be the surprise member.\nI recommend you construct a new member id here for one-time use.", "url": "https://github.com/apache/geode/pull/5370#discussion_r454687301", "createdAt": "2020-07-14T22:44:10Z", "author": {"login": "Bill"}, "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java", "diffHunk": "@@ -328,4 +330,58 @@ public void noDispatchWhenSick() throws MemberShunnedException, MemberStartupExc\n     assertThat(spy.getStartupEvents()).isEmpty();\n   }\n \n+  private void addSurpriseMemberWithVersion(Version version) {\n+    MemberIdentifier surpriseMember = myMemberId;\n+    surpriseMember.setVmViewId(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe8392accfc75ba05993ee6311e345ac313488b6"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTk4MjEyOnYy", "diffSide": "RIGHT", "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjo1Mzo0NVrOGxoIEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjo1Mzo0NVrOGxoIEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5MDgzMw==", "bodyText": "This test and the next two all follow the same pattern. Can you refactor out the commonality?", "url": "https://github.com/apache/geode/pull/5370#discussion_r454690833", "createdAt": "2020-07-14T22:53:45Z", "author": {"login": "Bill"}, "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java", "diffHunk": "@@ -328,4 +330,58 @@ public void noDispatchWhenSick() throws MemberShunnedException, MemberStartupExc\n     assertThat(spy.getStartupEvents()).isEmpty();\n   }\n \n+  private void addSurpriseMemberWithVersion(Version version) {\n+    MemberIdentifier surpriseMember = myMemberId;\n+    surpriseMember.setVmViewId(3);\n+    surpriseMember.setVersionObjectForTest(version);\n+    manager.addSurpriseMember(surpriseMember);\n+  }\n+\n+  @Test\n+  public void testMulticastWithOldVersionSurpriseMember() {\n+    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n+    addSurpriseMemberWithVersion(Version.GEODE_1_1_0);\n+\n+    assertTrue(manager.containsOldVersionMember(view, Version.CURRENT));\n+  }\n+\n+  @Test\n+  public void testMulticastWithCurrentVersionSurpriseMember() {\n+    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n+    addSurpriseMemberWithVersion(Version.CURRENT);\n+\n+    assertFalse(manager.containsOldVersionMember(view, Version.CURRENT));\n+  }\n+\n+  @Test\n+  public void testMulticastWithHigherVersionSurpriseMember() {\n+    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n+    addSurpriseMemberWithVersion(Version.CURRENT);\n+\n+    assertFalse(manager.containsOldVersionMember(view, Version.GEODE_1_1_0));\n+  }\n+\n+  @Test\n+  public void testMulticastWithOldVersionViewMember() {\n+    members.get(0).setVersionObjectForTest(Version.GEODE_1_1_0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe8392accfc75ba05993ee6311e345ac313488b6"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTk4MzE5OnYy", "diffSide": "RIGHT", "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjo1NDoxNFrOGxoIsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjo1NDoxNFrOGxoIsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5MDk5Mg==", "bodyText": "This test and the next two follow the same pattern. Can you factor out the common code?", "url": "https://github.com/apache/geode/pull/5370#discussion_r454690992", "createdAt": "2020-07-14T22:54:14Z", "author": {"login": "Bill"}, "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java", "diffHunk": "@@ -328,4 +330,58 @@ public void noDispatchWhenSick() throws MemberShunnedException, MemberStartupExc\n     assertThat(spy.getStartupEvents()).isEmpty();\n   }\n \n+  private void addSurpriseMemberWithVersion(Version version) {\n+    MemberIdentifier surpriseMember = myMemberId;\n+    surpriseMember.setVmViewId(3);\n+    surpriseMember.setVersionObjectForTest(version);\n+    manager.addSurpriseMember(surpriseMember);\n+  }\n+\n+  @Test\n+  public void testMulticastWithOldVersionSurpriseMember() {\n+    MembershipView<MemberIdentifier> view = new MembershipView<>(myMemberId, 2, members);\n+    addSurpriseMemberWithVersion(Version.GEODE_1_1_0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe8392accfc75ba05993ee6311e345ac313488b6"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTk4Mzg2OnYy", "diffSide": "RIGHT", "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/GMSMembership.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjo1NDozNFrOGxoJHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjo1NDozNFrOGxoJHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5MTEwMA==", "bodyText": "great to get rid of the superfluous parameter!", "url": "https://github.com/apache/geode/pull/5370#discussion_r454691100", "createdAt": "2020-07-14T22:54:34Z", "author": {"login": "Bill"}, "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/GMSMembership.java", "diffHunk": "@@ -359,7 +360,7 @@ boolean isDistributionMessage() {\n   /**\n    * Analyze a given view object, generate events as appropriate\n    */\n-  public void processView(long newViewId, MembershipView<ID> newView) {\n+  public void processView(MembershipView<ID> newView) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe8392accfc75ba05993ee6311e345ac313488b6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNTk4NTQ2OnYy", "diffSide": "RIGHT", "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/GMSMembership.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjo1NToxOFrOGxoKDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQyMjo1NToxOFrOGxoKDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDY5MTM0MQ==", "bodyText": "yess", "url": "https://github.com/apache/geode/pull/5370#discussion_r454691341", "createdAt": "2020-07-14T22:55:18Z", "author": {"login": "Bill"}, "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/GMSMembership.java", "diffHunk": "@@ -531,6 +515,12 @@ public void processView(long newViewId, MembershipView<ID> newView) {\n     }\n   }\n \n+  protected boolean containsOldVersionMember(MembershipView<ID> newView,\n+      VersionOrdinal referenceVersion) {\n+    return Stream.concat(surpriseMembers.keySet().stream(), newView.getMembers().stream())\n+        .anyMatch(member -> referenceVersion.isNewerThan(member.getVersionOrdinalObject()));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe8392accfc75ba05993ee6311e345ac313488b6"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODkzNjIzOnYy", "diffSide": "RIGHT", "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTozNzo0MlrOGyD-ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTozNzo0MlrOGyD-ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0NzIwMw==", "bodyText": "A small point: this routine will set every member's version to memberVersion. I think it would be a better test if only one member's version was set to memberVersion and the rest were set to Version.CURRENT.", "url": "https://github.com/apache/geode/pull/5370#discussion_r455147203", "createdAt": "2020-07-15T15:37:42Z", "author": {"login": "Bill"}, "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java", "diffHunk": "@@ -328,4 +332,63 @@ public void noDispatchWhenSick() throws MemberShunnedException, MemberStartupExc\n     assertThat(spy.getStartupEvents()).isEmpty();\n   }\n \n+  @Test\n+  public void testIsMulticastAllowedWithOldVersionSurpriseMember() {\n+    MembershipView<MemberIdentifier> view = createMembershipView(Version.CURRENT);\n+    manager.addSurpriseMember(createSurpriseMember(OLDER_THAN_CURRENT_VERSION));\n+\n+    manager.processView(view);\n+\n+    assertThat(manager.getGMSManager().isMulticastAllowed()).isFalse();\n+  }\n+\n+  @Test\n+  public void testIsMulticastAllowedWithCurrentVersionSurpriseMember() {\n+    MembershipView<MemberIdentifier> view = createMembershipView(Version.CURRENT);\n+    manager.addSurpriseMember(createSurpriseMember(Version.CURRENT));\n+\n+    manager.processView(view);\n+\n+    assertThat(manager.getGMSManager().isMulticastAllowed()).isTrue();\n+  }\n+\n+  @Test\n+  public void testIsMulticastAllowedWithOldVersionViewMember() {\n+    MembershipView<MemberIdentifier> view = createMembershipView(OLDER_THAN_CURRENT_VERSION);\n+\n+    manager.processView(view);\n+\n+    assertThat(manager.getGMSManager().isMulticastAllowed()).isFalse();\n+  }\n+\n+  @Test\n+  public void testMulticastAllowedWithCurrentVersionViewMember() {\n+    MembershipView<MemberIdentifier> view = createMembershipView(Version.CURRENT);\n+\n+    manager.processView(view);\n+\n+    assertThat(manager.getGMSManager().isMulticastAllowed()).isTrue();\n+  }\n+\n+  private MemberIdentifier createSurpriseMember(Version version) {\n+    MemberIdentifier surpriseMember = createMemberID(DEFAULT_PORT + 5);\n+    surpriseMember.setVmViewId(3);\n+    surpriseMember.setVersionObjectForTest(version);\n+    return surpriseMember;\n+  }\n+\n+  private MembershipView<MemberIdentifier> createMembershipView(Version version) {\n+    List<MemberIdentifier> viewMembers = createMemberIdentifiers(version);\n+    return new MembershipView<>(myMemberId, 2, viewMembers);\n+  }\n+\n+  private List<MemberIdentifier> createMemberIdentifiers(Version memberVersion) {\n+    List<MemberIdentifier> viewMembers = new ArrayList<>();\n+    for (int i = 0; i < 2; ++i) {\n+      MemberIdentifier memberIdentifier = createMemberID(DEFAULT_PORT + 6 + i);\n+      memberIdentifier.setVersionObjectForTest(memberVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1882966b93cbc9227945cb35c906b5763e47456b"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzY3MTg4OnYy", "diffSide": "RIGHT", "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/GMSMemberData.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo1MzoxMlrOGyxbyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo1MzoxMlrOGyxbyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg5MTkxNA==", "bodyText": "Let's set versionOrdinal (object reference) directly here and eliminate MemberData.setVersionOrdinal(short) entirely. The method shouldn't exist at all. We should not be passing a short ordinal to a MemberData.\nThere are three places MemberData.setVersionOrdinal(short) is called:\n\nhere: just set the field directly\nreadEssentialData(): replace setVersionOrdinal(VersioningIO.readOrdinal(in)); with setVersion(Versioning. getVersionOrdinal(VersioningIO.readOrdinal(in)))\nGMSMemberDataVersionJUnitTest.testSetVersionOrdinal(): delete this test method", "url": "https://github.com/apache/geode/pull/5370#discussion_r455891914", "createdAt": "2020-07-16T15:53:12Z", "author": {"login": "Bill"}, "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/GMSMemberData.java", "diffHunk": "@@ -507,8 +507,8 @@ public void setVmKind(int vmKind) {\n \n \n   @Override\n-  public void setVersion(Version v) {\n-    setVersionOrdinal(v.ordinal());\n+  public void setVersion(VersionOrdinal versionOrdinal) {\n+    setVersionOrdinal(versionOrdinal.ordinal());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12991bc5ae47d92e5f2b2bf4b8fd2560a3b70517"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3926, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}