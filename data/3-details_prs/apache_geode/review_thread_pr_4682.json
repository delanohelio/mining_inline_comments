{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNTU2NDUw", "number": 4682, "reviewThreads": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTowNjoyMlrODemxlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNjo1ODoxM1rODfQdlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDE5MTU5OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/ExecutionHandlerContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTowNjoyMlrOFn1jTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjoxMDowMlrOFoPLhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxNjE3Mg==", "bodyText": "Does this mean that every RedisAdapter will have a PubSub instance, even if it is not required?", "url": "https://github.com/apache/geode/pull/4682#discussion_r377316172", "createdAt": "2020-02-10T21:06:22Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/ExecutionHandlerContext.java", "diffHunk": "@@ -86,6 +88,11 @@ public KeyRegistrar getKeyRegistrar() {\n   }\n \n   private KeyRegistrar keyRegistrar;\n+  private PubSub pubSub;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczNjA3MA==", "bodyText": "Only one PubSub is created for the lifetime of the adapter. Each ExecutionContextHandler receives a reference to it.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377736070", "createdAt": "2020-02-11T16:10:02Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/ExecutionHandlerContext.java", "diffHunk": "@@ -86,6 +88,11 @@ public KeyRegistrar getKeyRegistrar() {\n   }\n \n   private KeyRegistrar keyRegistrar;\n+  private PubSub pubSub;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxNjE3Mg=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDE5NTY2OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTowNzo0NFrOFn1l2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNjoyNjozMlrOFo1fDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxNjgyNw==", "bodyText": "Why would this not be an Interface? Then at least there is the ability that one could have another implementation of this, without tightly coupling the code.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377316827", "createdAt": "2020-02-10T21:07:44Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzczNzA4Nw==", "bodyText": "I think that would definitely be a good thing if we find there is a need for multiple implementations. For now it's just a concrete class.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377737087", "createdAt": "2020-02-11T16:11:32Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxNjgyNw=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc0NDUwMg==", "bodyText": "Can we then just add an interface and an implementation... It is easier to do this BEFORE rather than after. Also it makes it easier to achieve loose coupling.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377744502", "createdAt": "2020-02-11T16:22:56Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxNjgyNw=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM2MzY2Mg==", "bodyText": "Done", "url": "https://github.com/apache/geode/pull/4682#discussion_r378363662", "createdAt": "2020-02-12T16:26:32Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxNjgyNw=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDIxMDg2OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Subscriber.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToxMjo0MFrOFn1vGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxOToyMDo0NFrOFoV4lA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxOTE5Mw==", "bodyText": "Is this timeout an SLA or just best guess? What happens if a message takes 2s to send, is that bad? Maybe a timeout that can be either configured or maybe a little more lenient?", "url": "https://github.com/apache/geode/pull/4682#discussion_r377319193", "createdAt": "2020-02-10T21:12:40Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Subscriber.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+\n+class Subscriber {\n+  public final Client client;\n+  public final String channel;\n+  private ExecutionHandlerContext context;\n+\n+  public Subscriber(Client client, String channel,\n+      ExecutionHandlerContext context) {\n+\n+    this.client = client;\n+    this.channel = channel;\n+    this.context = context;\n+  }\n+\n+  public boolean isEqualTo(String channel, Client client) {\n+    return channel.equals(this.channel) && client.equals(this.client);\n+  }\n+\n+  public boolean publishMessage(String channel, String message) {\n+    ByteBuf messageByteBuffer;\n+    try {\n+      messageByteBuffer = Coder.getArrayResponse(context.getByteBufAllocator(),\n+          Arrays.asList(\"message\", channel, message));\n+    } catch (CoderException e) {\n+      throw new RuntimeException(e);\n+    }\n+\n+    CountDownLatch latch = new CountDownLatch(1);\n+\n+    ChannelFutureListener channelFutureListener = future -> latch.countDown();\n+\n+    ChannelFuture channelFuture =\n+        context.writeToChannelWithListener(messageByteBuffer, channelFutureListener);\n+\n+    try {\n+      latch.await(1, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0NTkwOA==", "bodyText": "Fixed code", "url": "https://github.com/apache/geode/pull/4682#discussion_r377845908", "createdAt": "2020-02-11T19:20:44Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Subscriber.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+\n+class Subscriber {\n+  public final Client client;\n+  public final String channel;\n+  private ExecutionHandlerContext context;\n+\n+  public Subscriber(Client client, String channel,\n+      ExecutionHandlerContext context) {\n+\n+    this.client = client;\n+    this.channel = channel;\n+    this.context = context;\n+  }\n+\n+  public boolean isEqualTo(String channel, Client client) {\n+    return channel.equals(this.channel) && client.equals(this.client);\n+  }\n+\n+  public boolean publishMessage(String channel, String message) {\n+    ByteBuf messageByteBuffer;\n+    try {\n+      messageByteBuffer = Coder.getArrayResponse(context.getByteBufAllocator(),\n+          Arrays.asList(\"message\", channel, message));\n+    } catch (CoderException e) {\n+      throw new RuntimeException(e);\n+    }\n+\n+    CountDownLatch latch = new CountDownLatch(1);\n+\n+    ChannelFutureListener channelFutureListener = future -> latch.countDown();\n+\n+    ChannelFuture channelFuture =\n+        context.writeToChannelWithListener(messageByteBuffer, channelFutureListener);\n+\n+    try {\n+      latch.await(1, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxOTE5Mw=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDIyMTQyOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToxNjoxNlrOFn11ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToxNjoxNlrOFn11ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMyMDg2Nw==", "bodyText": "what is s here? I don't have an IDE to tell me what this is supposed to be", "url": "https://github.com/apache/geode/pull/4682#discussion_r377320867", "createdAt": "2020-02-10T21:16:16Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {\n+  public static final String REDIS_PUB_SUB_FUNCTION_ID = \"redisPubSubFunctionID\";\n+\n+  Subscribers subscribers = new Subscribers();\n+\n+  public long publish(String channel, String message) {\n+    ResultCollector<?, ?> subscriberCountCollector = FunctionService\n+        .onMembers()\n+        .setArguments(new String[] {channel, message})\n+        .execute(REDIS_PUB_SUB_FUNCTION_ID);\n+\n+    List<Long> subscriberCounts = (List<Long>) subscriberCountCollector.getResult();\n+    long totalSubscribers = 0;\n+    for (long subscriberCount : subscriberCounts) {\n+      totalSubscribers += subscriberCount;\n+    }\n+    return totalSubscribers;\n+  }\n+\n+  public long subscribe(String channel, ExecutionHandlerContext context, Client client) {\n+    if (subscribers.exists(channel, client)) {\n+      return subscribers.findSubscribers(client).size();\n+    }\n+    Subscriber subscriber = new Subscriber(client, channel, context);\n+    subscribers.add(subscriber);\n+    return subscribers.findSubscribers(client).size();\n+  }\n+\n+  public void registerPublishFunction() {\n+    FunctionService.registerFunction(new Function() {\n+      @Override\n+      public String getId() {\n+        return REDIS_PUB_SUB_FUNCTION_ID;\n+      }\n+\n+      @Override\n+      public void execute(FunctionContext context) {\n+        String[] publishMessage = (String[]) context.getArguments();\n+        long subscriberCount = publishMessageToSubscribers(publishMessage[0], publishMessage[1]);\n+        context.getResultSender().lastResult(subscriberCount);\n+      }\n+    });\n+  }\n+\n+  public long unsubscribe(String channel, Client client) {\n+    this.subscribers.remove(channel, client);\n+    return this.subscribers.findSubscribers(client).size();\n+  }\n+\n+  private long publishMessageToSubscribers(String channel, String message) {\n+    Map<Boolean, List<Subscriber>> results = this.subscribers\n+        .findSubscribers(channel)\n+        .stream()\n+        .collect(Collectors.partitioningBy(s -> s.publishMessage(channel, message)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDIyMzAwOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToxNjo0NFrOFn12lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToxNjo0NFrOFn12lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMyMTEwOQ==", "bodyText": "s = subscriber?", "url": "https://github.com/apache/geode/pull/4682#discussion_r377321109", "createdAt": "2020-02-10T21:16:44Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {\n+  public static final String REDIS_PUB_SUB_FUNCTION_ID = \"redisPubSubFunctionID\";\n+\n+  Subscribers subscribers = new Subscribers();\n+\n+  public long publish(String channel, String message) {\n+    ResultCollector<?, ?> subscriberCountCollector = FunctionService\n+        .onMembers()\n+        .setArguments(new String[] {channel, message})\n+        .execute(REDIS_PUB_SUB_FUNCTION_ID);\n+\n+    List<Long> subscriberCounts = (List<Long>) subscriberCountCollector.getResult();\n+    long totalSubscribers = 0;\n+    for (long subscriberCount : subscriberCounts) {\n+      totalSubscribers += subscriberCount;\n+    }\n+    return totalSubscribers;\n+  }\n+\n+  public long subscribe(String channel, ExecutionHandlerContext context, Client client) {\n+    if (subscribers.exists(channel, client)) {\n+      return subscribers.findSubscribers(client).size();\n+    }\n+    Subscriber subscriber = new Subscriber(client, channel, context);\n+    subscribers.add(subscriber);\n+    return subscribers.findSubscribers(client).size();\n+  }\n+\n+  public void registerPublishFunction() {\n+    FunctionService.registerFunction(new Function() {\n+      @Override\n+      public String getId() {\n+        return REDIS_PUB_SUB_FUNCTION_ID;\n+      }\n+\n+      @Override\n+      public void execute(FunctionContext context) {\n+        String[] publishMessage = (String[]) context.getArguments();\n+        long subscriberCount = publishMessageToSubscribers(publishMessage[0], publishMessage[1]);\n+        context.getResultSender().lastResult(subscriberCount);\n+      }\n+    });\n+  }\n+\n+  public long unsubscribe(String channel, Client client) {\n+    this.subscribers.remove(channel, client);\n+    return this.subscribers.findSubscribers(client).size();\n+  }\n+\n+  private long publishMessageToSubscribers(String channel, String message) {\n+    Map<Boolean, List<Subscriber>> results = this.subscribers\n+        .findSubscribers(channel)\n+        .stream()\n+        .collect(Collectors.partitioningBy(s -> s.publishMessage(channel, message)));\n+\n+    prune(results.get(false));\n+\n+    return results.get(true).size();\n+  }\n+\n+  private void prune(List<Subscriber> failedSubscribers) {\n+    failedSubscribers.forEach(subscriber -> {\n+      if (subscriber.client.isDead()) {\n+        subscribers.remove(subscriber.client);\n+      }\n+    });\n+  }\n+\n+  private class Subscribers {\n+    List<Subscriber> subscribers = new ArrayList<>();\n+\n+    private boolean exists(String channel, Client client) {\n+      return subscribers.stream().anyMatch((s) -> s.isEqualTo(channel, client));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDIyMzMzOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToxNjo1MVrOFn12xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToxNjo1MVrOFn12xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMyMTE1Nw==", "bodyText": "s = subscriber?", "url": "https://github.com/apache/geode/pull/4682#discussion_r377321157", "createdAt": "2020-02-10T21:16:51Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {\n+  public static final String REDIS_PUB_SUB_FUNCTION_ID = \"redisPubSubFunctionID\";\n+\n+  Subscribers subscribers = new Subscribers();\n+\n+  public long publish(String channel, String message) {\n+    ResultCollector<?, ?> subscriberCountCollector = FunctionService\n+        .onMembers()\n+        .setArguments(new String[] {channel, message})\n+        .execute(REDIS_PUB_SUB_FUNCTION_ID);\n+\n+    List<Long> subscriberCounts = (List<Long>) subscriberCountCollector.getResult();\n+    long totalSubscribers = 0;\n+    for (long subscriberCount : subscriberCounts) {\n+      totalSubscribers += subscriberCount;\n+    }\n+    return totalSubscribers;\n+  }\n+\n+  public long subscribe(String channel, ExecutionHandlerContext context, Client client) {\n+    if (subscribers.exists(channel, client)) {\n+      return subscribers.findSubscribers(client).size();\n+    }\n+    Subscriber subscriber = new Subscriber(client, channel, context);\n+    subscribers.add(subscriber);\n+    return subscribers.findSubscribers(client).size();\n+  }\n+\n+  public void registerPublishFunction() {\n+    FunctionService.registerFunction(new Function() {\n+      @Override\n+      public String getId() {\n+        return REDIS_PUB_SUB_FUNCTION_ID;\n+      }\n+\n+      @Override\n+      public void execute(FunctionContext context) {\n+        String[] publishMessage = (String[]) context.getArguments();\n+        long subscriberCount = publishMessageToSubscribers(publishMessage[0], publishMessage[1]);\n+        context.getResultSender().lastResult(subscriberCount);\n+      }\n+    });\n+  }\n+\n+  public long unsubscribe(String channel, Client client) {\n+    this.subscribers.remove(channel, client);\n+    return this.subscribers.findSubscribers(client).size();\n+  }\n+\n+  private long publishMessageToSubscribers(String channel, String message) {\n+    Map<Boolean, List<Subscriber>> results = this.subscribers\n+        .findSubscribers(channel)\n+        .stream()\n+        .collect(Collectors.partitioningBy(s -> s.publishMessage(channel, message)));\n+\n+    prune(results.get(false));\n+\n+    return results.get(true).size();\n+  }\n+\n+  private void prune(List<Subscriber> failedSubscribers) {\n+    failedSubscribers.forEach(subscriber -> {\n+      if (subscriber.client.isDead()) {\n+        subscribers.remove(subscriber.client);\n+      }\n+    });\n+  }\n+\n+  private class Subscribers {\n+    List<Subscriber> subscribers = new ArrayList<>();\n+\n+    private boolean exists(String channel, Client client) {\n+      return subscribers.stream().anyMatch((s) -> s.isEqualTo(channel, client));\n+    }\n+\n+    private List<Subscriber> findSubscribers(Client client) {\n+      return subscribers.stream().filter((s) -> s.client.equals(client))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDIyMzU2OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToxNjo1NlrOFn125Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToxNjo1NlrOFn125Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMyMTE4OQ==", "bodyText": "s = subscriber?", "url": "https://github.com/apache/geode/pull/4682#discussion_r377321189", "createdAt": "2020-02-10T21:16:56Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {\n+  public static final String REDIS_PUB_SUB_FUNCTION_ID = \"redisPubSubFunctionID\";\n+\n+  Subscribers subscribers = new Subscribers();\n+\n+  public long publish(String channel, String message) {\n+    ResultCollector<?, ?> subscriberCountCollector = FunctionService\n+        .onMembers()\n+        .setArguments(new String[] {channel, message})\n+        .execute(REDIS_PUB_SUB_FUNCTION_ID);\n+\n+    List<Long> subscriberCounts = (List<Long>) subscriberCountCollector.getResult();\n+    long totalSubscribers = 0;\n+    for (long subscriberCount : subscriberCounts) {\n+      totalSubscribers += subscriberCount;\n+    }\n+    return totalSubscribers;\n+  }\n+\n+  public long subscribe(String channel, ExecutionHandlerContext context, Client client) {\n+    if (subscribers.exists(channel, client)) {\n+      return subscribers.findSubscribers(client).size();\n+    }\n+    Subscriber subscriber = new Subscriber(client, channel, context);\n+    subscribers.add(subscriber);\n+    return subscribers.findSubscribers(client).size();\n+  }\n+\n+  public void registerPublishFunction() {\n+    FunctionService.registerFunction(new Function() {\n+      @Override\n+      public String getId() {\n+        return REDIS_PUB_SUB_FUNCTION_ID;\n+      }\n+\n+      @Override\n+      public void execute(FunctionContext context) {\n+        String[] publishMessage = (String[]) context.getArguments();\n+        long subscriberCount = publishMessageToSubscribers(publishMessage[0], publishMessage[1]);\n+        context.getResultSender().lastResult(subscriberCount);\n+      }\n+    });\n+  }\n+\n+  public long unsubscribe(String channel, Client client) {\n+    this.subscribers.remove(channel, client);\n+    return this.subscribers.findSubscribers(client).size();\n+  }\n+\n+  private long publishMessageToSubscribers(String channel, String message) {\n+    Map<Boolean, List<Subscriber>> results = this.subscribers\n+        .findSubscribers(channel)\n+        .stream()\n+        .collect(Collectors.partitioningBy(s -> s.publishMessage(channel, message)));\n+\n+    prune(results.get(false));\n+\n+    return results.get(true).size();\n+  }\n+\n+  private void prune(List<Subscriber> failedSubscribers) {\n+    failedSubscribers.forEach(subscriber -> {\n+      if (subscriber.client.isDead()) {\n+        subscribers.remove(subscriber.client);\n+      }\n+    });\n+  }\n+\n+  private class Subscribers {\n+    List<Subscriber> subscribers = new ArrayList<>();\n+\n+    private boolean exists(String channel, Client client) {\n+      return subscribers.stream().anyMatch((s) -> s.isEqualTo(channel, client));\n+    }\n+\n+    private List<Subscriber> findSubscribers(Client client) {\n+      return subscribers.stream().filter((s) -> s.client.equals(client))\n+          .collect(Collectors.toList());\n+    }\n+\n+    private List<Subscriber> findSubscribers(String channel) {\n+      return subscribers.stream().filter((s) -> s.channel.equals(channel))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDIyNTcwOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToxNzo0M1rOFn14RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToxNzo0M1rOFn14RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMyMTU0MQ==", "bodyText": "Seems we are lacking some consistency... Here we specifically name the param subscriber, but higher up we just call it s", "url": "https://github.com/apache/geode/pull/4682#discussion_r377321541", "createdAt": "2020-02-10T21:17:43Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {\n+  public static final String REDIS_PUB_SUB_FUNCTION_ID = \"redisPubSubFunctionID\";\n+\n+  Subscribers subscribers = new Subscribers();\n+\n+  public long publish(String channel, String message) {\n+    ResultCollector<?, ?> subscriberCountCollector = FunctionService\n+        .onMembers()\n+        .setArguments(new String[] {channel, message})\n+        .execute(REDIS_PUB_SUB_FUNCTION_ID);\n+\n+    List<Long> subscriberCounts = (List<Long>) subscriberCountCollector.getResult();\n+    long totalSubscribers = 0;\n+    for (long subscriberCount : subscriberCounts) {\n+      totalSubscribers += subscriberCount;\n+    }\n+    return totalSubscribers;\n+  }\n+\n+  public long subscribe(String channel, ExecutionHandlerContext context, Client client) {\n+    if (subscribers.exists(channel, client)) {\n+      return subscribers.findSubscribers(client).size();\n+    }\n+    Subscriber subscriber = new Subscriber(client, channel, context);\n+    subscribers.add(subscriber);\n+    return subscribers.findSubscribers(client).size();\n+  }\n+\n+  public void registerPublishFunction() {\n+    FunctionService.registerFunction(new Function() {\n+      @Override\n+      public String getId() {\n+        return REDIS_PUB_SUB_FUNCTION_ID;\n+      }\n+\n+      @Override\n+      public void execute(FunctionContext context) {\n+        String[] publishMessage = (String[]) context.getArguments();\n+        long subscriberCount = publishMessageToSubscribers(publishMessage[0], publishMessage[1]);\n+        context.getResultSender().lastResult(subscriberCount);\n+      }\n+    });\n+  }\n+\n+  public long unsubscribe(String channel, Client client) {\n+    this.subscribers.remove(channel, client);\n+    return this.subscribers.findSubscribers(client).size();\n+  }\n+\n+  private long publishMessageToSubscribers(String channel, String message) {\n+    Map<Boolean, List<Subscriber>> results = this.subscribers\n+        .findSubscribers(channel)\n+        .stream()\n+        .collect(Collectors.partitioningBy(s -> s.publishMessage(channel, message)));\n+\n+    prune(results.get(false));\n+\n+    return results.get(true).size();\n+  }\n+\n+  private void prune(List<Subscriber> failedSubscribers) {\n+    failedSubscribers.forEach(subscriber -> {\n+      if (subscriber.client.isDead()) {\n+        subscribers.remove(subscriber.client);\n+      }\n+    });\n+  }\n+\n+  private class Subscribers {\n+    List<Subscriber> subscribers = new ArrayList<>();\n+\n+    private boolean exists(String channel, Client client) {\n+      return subscribers.stream().anyMatch((s) -> s.isEqualTo(channel, client));\n+    }\n+\n+    private List<Subscriber> findSubscribers(Client client) {\n+      return subscribers.stream().filter((s) -> s.client.equals(client))\n+          .collect(Collectors.toList());\n+    }\n+\n+    private List<Subscriber> findSubscribers(String channel) {\n+      return subscribers.stream().filter((s) -> s.channel.equals(channel))\n+          .collect(Collectors.toList());\n+    }\n+\n+    public void add(Subscriber subscriber) {\n+      this.subscribers.add(subscriber);\n+    }\n+\n+    public void remove(String channel, Client client) {\n+      this.subscribers.removeIf((subscriber) -> subscriber.isEqualTo(channel, client));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDIyOTE0OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToxODo1NVrOFn16bQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToxODo1NVrOFn16bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMyMjA5Mw==", "bodyText": "Maybe some JavaDoc here.. what is this class and why do we care....", "url": "https://github.com/apache/geode/pull/4682#discussion_r377322093", "createdAt": "2020-02-10T21:18:55Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDI1NDA1OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToyNzoyN1rOFn2KRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjo1ODowNVrOFoRFyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMyNjE0OA==", "bodyText": "Why not a LinkedList if every operation is a \"iterate\" over all entries. No benefit to using ArrayList if you don't use the indexing or ordering.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377326148", "createdAt": "2020-02-10T21:27:27Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {\n+  public static final String REDIS_PUB_SUB_FUNCTION_ID = \"redisPubSubFunctionID\";\n+\n+  Subscribers subscribers = new Subscribers();\n+\n+  public long publish(String channel, String message) {\n+    ResultCollector<?, ?> subscriberCountCollector = FunctionService\n+        .onMembers()\n+        .setArguments(new String[] {channel, message})\n+        .execute(REDIS_PUB_SUB_FUNCTION_ID);\n+\n+    List<Long> subscriberCounts = (List<Long>) subscriberCountCollector.getResult();\n+    long totalSubscribers = 0;\n+    for (long subscriberCount : subscriberCounts) {\n+      totalSubscribers += subscriberCount;\n+    }\n+    return totalSubscribers;\n+  }\n+\n+  public long subscribe(String channel, ExecutionHandlerContext context, Client client) {\n+    if (subscribers.exists(channel, client)) {\n+      return subscribers.findSubscribers(client).size();\n+    }\n+    Subscriber subscriber = new Subscriber(client, channel, context);\n+    subscribers.add(subscriber);\n+    return subscribers.findSubscribers(client).size();\n+  }\n+\n+  public void registerPublishFunction() {\n+    FunctionService.registerFunction(new Function() {\n+      @Override\n+      public String getId() {\n+        return REDIS_PUB_SUB_FUNCTION_ID;\n+      }\n+\n+      @Override\n+      public void execute(FunctionContext context) {\n+        String[] publishMessage = (String[]) context.getArguments();\n+        long subscriberCount = publishMessageToSubscribers(publishMessage[0], publishMessage[1]);\n+        context.getResultSender().lastResult(subscriberCount);\n+      }\n+    });\n+  }\n+\n+  public long unsubscribe(String channel, Client client) {\n+    this.subscribers.remove(channel, client);\n+    return this.subscribers.findSubscribers(client).size();\n+  }\n+\n+  private long publishMessageToSubscribers(String channel, String message) {\n+    Map<Boolean, List<Subscriber>> results = this.subscribers\n+        .findSubscribers(channel)\n+        .stream()\n+        .collect(Collectors.partitioningBy(s -> s.publishMessage(channel, message)));\n+\n+    prune(results.get(false));\n+\n+    return results.get(true).size();\n+  }\n+\n+  private void prune(List<Subscriber> failedSubscribers) {\n+    failedSubscribers.forEach(subscriber -> {\n+      if (subscriber.client.isDead()) {\n+        subscribers.remove(subscriber.client);\n+      }\n+    });\n+  }\n+\n+  private class Subscribers {\n+    List<Subscriber> subscribers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc2MzUxNw==", "bodyText": "We're coding to the interface and not the concrete class. It could easily be changed if the need arises.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377763517", "createdAt": "2020-02-11T16:52:08Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {\n+  public static final String REDIS_PUB_SUB_FUNCTION_ID = \"redisPubSubFunctionID\";\n+\n+  Subscribers subscribers = new Subscribers();\n+\n+  public long publish(String channel, String message) {\n+    ResultCollector<?, ?> subscriberCountCollector = FunctionService\n+        .onMembers()\n+        .setArguments(new String[] {channel, message})\n+        .execute(REDIS_PUB_SUB_FUNCTION_ID);\n+\n+    List<Long> subscriberCounts = (List<Long>) subscriberCountCollector.getResult();\n+    long totalSubscribers = 0;\n+    for (long subscriberCount : subscriberCounts) {\n+      totalSubscribers += subscriberCount;\n+    }\n+    return totalSubscribers;\n+  }\n+\n+  public long subscribe(String channel, ExecutionHandlerContext context, Client client) {\n+    if (subscribers.exists(channel, client)) {\n+      return subscribers.findSubscribers(client).size();\n+    }\n+    Subscriber subscriber = new Subscriber(client, channel, context);\n+    subscribers.add(subscriber);\n+    return subscribers.findSubscribers(client).size();\n+  }\n+\n+  public void registerPublishFunction() {\n+    FunctionService.registerFunction(new Function() {\n+      @Override\n+      public String getId() {\n+        return REDIS_PUB_SUB_FUNCTION_ID;\n+      }\n+\n+      @Override\n+      public void execute(FunctionContext context) {\n+        String[] publishMessage = (String[]) context.getArguments();\n+        long subscriberCount = publishMessageToSubscribers(publishMessage[0], publishMessage[1]);\n+        context.getResultSender().lastResult(subscriberCount);\n+      }\n+    });\n+  }\n+\n+  public long unsubscribe(String channel, Client client) {\n+    this.subscribers.remove(channel, client);\n+    return this.subscribers.findSubscribers(client).size();\n+  }\n+\n+  private long publishMessageToSubscribers(String channel, String message) {\n+    Map<Boolean, List<Subscriber>> results = this.subscribers\n+        .findSubscribers(channel)\n+        .stream()\n+        .collect(Collectors.partitioningBy(s -> s.publishMessage(channel, message)));\n+\n+    prune(results.get(false));\n+\n+    return results.get(true).size();\n+  }\n+\n+  private void prune(List<Subscriber> failedSubscribers) {\n+    failedSubscribers.forEach(subscriber -> {\n+      if (subscriber.client.isDead()) {\n+        subscribers.remove(subscriber.client);\n+      }\n+    });\n+  }\n+\n+  private class Subscribers {\n+    List<Subscriber> subscribers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMyNjE0OA=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc2NzM2OA==", "bodyText": "ArrayLists create heavier constructs under the hood, regardless of \"I'm coding against that interface\". All I'm asking is, given that you know you will never use  indexing, would a LinkedList not suffice?", "url": "https://github.com/apache/geode/pull/4682#discussion_r377767368", "createdAt": "2020-02-11T16:58:05Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {\n+  public static final String REDIS_PUB_SUB_FUNCTION_ID = \"redisPubSubFunctionID\";\n+\n+  Subscribers subscribers = new Subscribers();\n+\n+  public long publish(String channel, String message) {\n+    ResultCollector<?, ?> subscriberCountCollector = FunctionService\n+        .onMembers()\n+        .setArguments(new String[] {channel, message})\n+        .execute(REDIS_PUB_SUB_FUNCTION_ID);\n+\n+    List<Long> subscriberCounts = (List<Long>) subscriberCountCollector.getResult();\n+    long totalSubscribers = 0;\n+    for (long subscriberCount : subscriberCounts) {\n+      totalSubscribers += subscriberCount;\n+    }\n+    return totalSubscribers;\n+  }\n+\n+  public long subscribe(String channel, ExecutionHandlerContext context, Client client) {\n+    if (subscribers.exists(channel, client)) {\n+      return subscribers.findSubscribers(client).size();\n+    }\n+    Subscriber subscriber = new Subscriber(client, channel, context);\n+    subscribers.add(subscriber);\n+    return subscribers.findSubscribers(client).size();\n+  }\n+\n+  public void registerPublishFunction() {\n+    FunctionService.registerFunction(new Function() {\n+      @Override\n+      public String getId() {\n+        return REDIS_PUB_SUB_FUNCTION_ID;\n+      }\n+\n+      @Override\n+      public void execute(FunctionContext context) {\n+        String[] publishMessage = (String[]) context.getArguments();\n+        long subscriberCount = publishMessageToSubscribers(publishMessage[0], publishMessage[1]);\n+        context.getResultSender().lastResult(subscriberCount);\n+      }\n+    });\n+  }\n+\n+  public long unsubscribe(String channel, Client client) {\n+    this.subscribers.remove(channel, client);\n+    return this.subscribers.findSubscribers(client).size();\n+  }\n+\n+  private long publishMessageToSubscribers(String channel, String message) {\n+    Map<Boolean, List<Subscriber>> results = this.subscribers\n+        .findSubscribers(channel)\n+        .stream()\n+        .collect(Collectors.partitioningBy(s -> s.publishMessage(channel, message)));\n+\n+    prune(results.get(false));\n+\n+    return results.get(true).size();\n+  }\n+\n+  private void prune(List<Subscriber> failedSubscribers) {\n+    failedSubscribers.forEach(subscriber -> {\n+      if (subscriber.client.isDead()) {\n+        subscribers.remove(subscriber.client);\n+      }\n+    });\n+  }\n+\n+  private class Subscribers {\n+    List<Subscriber> subscribers = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMyNjE0OA=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDMyMDAxOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/pubsub/PublishExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTo0OTowMlrOFn2zag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjo1NTo0OVrOFoQ_yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzNjY4Mg==", "bodyText": "I wonder if one should expose the PubSub world here... maybe have the context have a publish method, which then delegates to the internal PubSub. To me it is a little like feature envy... Where instead of having the ExecutionHandlerContext handle the publish, we first have to know that there is a PubSub and then ask it to do work  -- https://refactoring.guru/smells/feature-envy", "url": "https://github.com/apache/geode/pull/4682#discussion_r377336682", "createdAt": "2020-02-10T21:49:02Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/pubsub/PublishExecutor.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.pubsub;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import org.apache.geode.redis.internal.Coder;\n+import org.apache.geode.redis.internal.Command;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+import org.apache.geode.redis.internal.Executor;\n+\n+public class PublishExecutor implements Executor {\n+  @Override\n+  public void executeCommand(Command command, ExecutionHandlerContext context) {\n+    byte[] channelName = command.getProcessedCommand().get(1);\n+    byte[] message = command.getProcessedCommand().get(2);\n+    long publishCount = context.getPubSub().publish(new String(channelName), new String(message));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc2NTgzNA==", "bodyText": "It's a good point. We realize that context is very overloaded right now and we're planning on refactoring in the future.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377765834", "createdAt": "2020-02-11T16:55:49Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/pubsub/PublishExecutor.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.pubsub;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import org.apache.geode.redis.internal.Coder;\n+import org.apache.geode.redis.internal.Command;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+import org.apache.geode.redis.internal.Executor;\n+\n+public class PublishExecutor implements Executor {\n+  @Override\n+  public void executeCommand(Command command, ExecutionHandlerContext context) {\n+    byte[] channelName = command.getProcessedCommand().get(1);\n+    byte[] message = command.getProcessedCommand().get(2);\n+    long publishCount = context.getPubSub().publish(new String(channelName), new String(message));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzNjY4Mg=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDMyMzg1OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/pubsub/SubscribeExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTo1MDoxN1rOFn21rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjo1NjoxMFrOFoRAvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzNzI2Mw==", "bodyText": "See same comment on the PublishExecutor. I don't think we should expose the PubSub here.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377337263", "createdAt": "2020-02-10T21:50:17Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/pubsub/SubscribeExecutor.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.pubsub;\n+\n+import java.util.ArrayList;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import org.apache.geode.redis.internal.Coder;\n+import org.apache.geode.redis.internal.CoderException;\n+import org.apache.geode.redis.internal.Command;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+import org.apache.geode.redis.internal.executor.AbstractExecutor;\n+\n+public class SubscribeExecutor extends AbstractExecutor {\n+\n+  @Override\n+  public void executeCommand(Command command, ExecutionHandlerContext context) {\n+    ArrayList<ArrayList<Object>> items = new ArrayList<>();\n+    for (int i = 1; i < command.getProcessedCommand().size(); i++) {\n+      ArrayList<Object> item = new ArrayList<>();\n+      byte[] channelName = command.getProcessedCommand().get(i);\n+      long subscribedChannels =\n+          context.getPubSub().subscribe(new String(channelName), context, context.getClient());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc2NjA3OA==", "bodyText": "Ditto above.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377766078", "createdAt": "2020-02-11T16:56:10Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/pubsub/SubscribeExecutor.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.pubsub;\n+\n+import java.util.ArrayList;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import org.apache.geode.redis.internal.Coder;\n+import org.apache.geode.redis.internal.CoderException;\n+import org.apache.geode.redis.internal.Command;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+import org.apache.geode.redis.internal.executor.AbstractExecutor;\n+\n+public class SubscribeExecutor extends AbstractExecutor {\n+\n+  @Override\n+  public void executeCommand(Command command, ExecutionHandlerContext context) {\n+    ArrayList<ArrayList<Object>> items = new ArrayList<>();\n+    for (int i = 1; i < command.getProcessedCommand().size(); i++) {\n+      ArrayList<Object> item = new ArrayList<>();\n+      byte[] channelName = command.getProcessedCommand().get(i);\n+      long subscribedChannels =\n+          context.getPubSub().subscribe(new String(channelName), context, context.getClient());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzNzI2Mw=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDMyNjAzOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/pubsub/UnsubscribeExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTo1MDo1OVrOFn22_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjo1NjoxOFrOFoRBIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzNzU5OQ==", "bodyText": "See above in PublishExecutor and SubscribeExecutor", "url": "https://github.com/apache/geode/pull/4682#discussion_r377337599", "createdAt": "2020-02-10T21:50:59Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/pubsub/UnsubscribeExecutor.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.pubsub;\n+\n+import java.util.ArrayList;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import org.apache.geode.redis.internal.Coder;\n+import org.apache.geode.redis.internal.CoderException;\n+import org.apache.geode.redis.internal.Command;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+import org.apache.geode.redis.internal.executor.AbstractExecutor;\n+\n+public class UnsubscribeExecutor extends AbstractExecutor {\n+\n+  @Override\n+  public void executeCommand(Command command, ExecutionHandlerContext context) {\n+    byte[] channelName = command.getProcessedCommand().get(1);\n+    long subscriptionCount =\n+        context.getPubSub().unsubscribe(new String(channelName), context.getClient());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc2NjE3Ng==", "bodyText": "Same ditto", "url": "https://github.com/apache/geode/pull/4682#discussion_r377766176", "createdAt": "2020-02-11T16:56:18Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/pubsub/UnsubscribeExecutor.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.pubsub;\n+\n+import java.util.ArrayList;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import org.apache.geode.redis.internal.Coder;\n+import org.apache.geode.redis.internal.CoderException;\n+import org.apache.geode.redis.internal.Command;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+import org.apache.geode.redis.internal.executor.AbstractExecutor;\n+\n+public class UnsubscribeExecutor extends AbstractExecutor {\n+\n+  @Override\n+  public void executeCommand(Command command, ExecutionHandlerContext context) {\n+    byte[] channelName = command.getProcessedCommand().get(1);\n+    long subscriptionCount =\n+        context.getPubSub().unsubscribe(new String(channelName), context.getClient());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzNzU5OQ=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDMyNzQzOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/pubsub/UnsubscribeExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTo1MToyNlrOFn231A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTo1MToyNlrOFn231A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzNzgxMg==", "bodyText": "Maybe have a logger?", "url": "https://github.com/apache/geode/pull/4682#discussion_r377337812", "createdAt": "2020-02-10T21:51:26Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/pubsub/UnsubscribeExecutor.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.pubsub;\n+\n+import java.util.ArrayList;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import org.apache.geode.redis.internal.Coder;\n+import org.apache.geode.redis.internal.CoderException;\n+import org.apache.geode.redis.internal.Command;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+import org.apache.geode.redis.internal.executor.AbstractExecutor;\n+\n+public class UnsubscribeExecutor extends AbstractExecutor {\n+\n+  @Override\n+  public void executeCommand(Command command, ExecutionHandlerContext context) {\n+    byte[] channelName = command.getProcessedCommand().get(1);\n+    long subscriptionCount =\n+        context.getPubSub().unsubscribe(new String(channelName), context.getClient());\n+\n+    ArrayList<Object> items = new ArrayList<>();\n+    items.add(\"unsubscribe\");\n+    items.add(channelName);\n+    items.add(subscriptionCount);\n+    ByteBuf response = null;\n+    try {\n+      response = Coder.getArrayResponse(context.getByteBufAllocator(), items);\n+    } catch (CoderException e) {\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDMyODIzOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/pubsub/SubscribeExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTo1MTozN1rOFn24RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTo1MTozN1rOFn24RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzNzkyNQ==", "bodyText": "Maybe have a logger?", "url": "https://github.com/apache/geode/pull/4682#discussion_r377337925", "createdAt": "2020-02-10T21:51:37Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/pubsub/SubscribeExecutor.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.pubsub;\n+\n+import java.util.ArrayList;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import org.apache.geode.redis.internal.Coder;\n+import org.apache.geode.redis.internal.CoderException;\n+import org.apache.geode.redis.internal.Command;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+import org.apache.geode.redis.internal.executor.AbstractExecutor;\n+\n+public class SubscribeExecutor extends AbstractExecutor {\n+\n+  @Override\n+  public void executeCommand(Command command, ExecutionHandlerContext context) {\n+    ArrayList<ArrayList<Object>> items = new ArrayList<>();\n+    for (int i = 1; i < command.getProcessedCommand().size(); i++) {\n+      ArrayList<Object> item = new ArrayList<>();\n+      byte[] channelName = command.getProcessedCommand().get(i);\n+      long subscribedChannels =\n+          context.getPubSub().subscribe(new String(channelName), context, context.getClient());\n+\n+      item.add(\"subscribe\");\n+      item.add(channelName);\n+      item.add(subscribedChannels);\n+\n+      items.add(item);\n+    }\n+\n+    writeResponse(command, context, items);\n+  }\n+\n+  private void writeResponse(Command command, ExecutionHandlerContext context,\n+      ArrayList<ArrayList<Object>> items) {\n+    ByteBuf bigResponse = context.getByteBufAllocator().buffer();\n+    items.forEach(item -> {\n+      ByteBuf response = null;\n+      try {\n+        response = Coder.getArrayResponse(context.getByteBufAllocator(), item);\n+      } catch (CoderException e) {\n+        e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDMzNTM1OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Subscriber.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTo1Mzo1NVrOFn28wA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzoxMzoxNlrOFoRqWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzOTA3Mg==", "bodyText": "Maybe add Comparable onto the class. Then one does not have to go outside of \"standard\" Java conventions, but creating a isEqualTo method", "url": "https://github.com/apache/geode/pull/4682#discussion_r377339072", "createdAt": "2020-02-10T21:53:55Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Subscriber.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+\n+class Subscriber {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc3Mjk0Mg==", "bodyText": "I don't think that will work since Comparable only uses a single type and isEqualTo requires multiple types.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377772942", "createdAt": "2020-02-11T17:07:07Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Subscriber.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+\n+class Subscriber {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzOTA3Mg=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc3NjcyOQ==", "bodyText": "Yes thank you. I do see that now.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377776729", "createdAt": "2020-02-11T17:13:16Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Subscriber.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+\n+class Subscriber {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzOTA3Mg=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDMzNzYxOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/RedisCommandType.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTo1NDo0MVrOFn2-KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzoxODoxNVrOFoR1XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzOTQzMw==", "bodyText": "Is this thread safe?", "url": "https://github.com/apache/geode/pull/4682#discussion_r377339433", "createdAt": "2020-02-10T21:54:41Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/RedisCommandType.java", "diffHunk": "@@ -2595,6 +2598,69 @@ public RedisDataType getDataType() {\n     }\n   },\n \n+  /***************************************\n+   ********** Publish Subscribe **********\n+   ***************************************/\n+  /**\n+   * SUBSCRIBE channel...\n+   * <p>\n+   * subscribe to channel\n+   */\n+  SUBSCRIBE {\n+    private Executor executor;\n+\n+    @Override\n+    public Executor getExecutor() {\n+      if (executor == null) {\n+        executor = new SubscribeExecutor();\n+      }\n+      return executor;\n+    }\n+\n+    private final RedisDataType dataType = RedisDataType.REDIS_PUBSUB;\n+\n+    @Override\n+    public RedisDataType getDataType() {\n+      return this.dataType;\n+    }\n+  },\n+  PUBLISH {\n+    private Executor executor;\n+\n+    @Override\n+    public Executor getExecutor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc3NzgxNQ==", "bodyText": "Not really, but since this pattern is used throughout all the commands I think it would be better to make that change in a separate PR and cover all the commands.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377777815", "createdAt": "2020-02-11T17:15:17Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/RedisCommandType.java", "diffHunk": "@@ -2595,6 +2598,69 @@ public RedisDataType getDataType() {\n     }\n   },\n \n+  /***************************************\n+   ********** Publish Subscribe **********\n+   ***************************************/\n+  /**\n+   * SUBSCRIBE channel...\n+   * <p>\n+   * subscribe to channel\n+   */\n+  SUBSCRIBE {\n+    private Executor executor;\n+\n+    @Override\n+    public Executor getExecutor() {\n+      if (executor == null) {\n+        executor = new SubscribeExecutor();\n+      }\n+      return executor;\n+    }\n+\n+    private final RedisDataType dataType = RedisDataType.REDIS_PUBSUB;\n+\n+    @Override\n+    public RedisDataType getDataType() {\n+      return this.dataType;\n+    }\n+  },\n+  PUBLISH {\n+    private Executor executor;\n+\n+    @Override\n+    public Executor getExecutor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzOTQzMw=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc3OTU0OA==", "bodyText": "Could we please raise one and address accordingly", "url": "https://github.com/apache/geode/pull/4682#discussion_r377779548", "createdAt": "2020-02-11T17:18:15Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/RedisCommandType.java", "diffHunk": "@@ -2595,6 +2598,69 @@ public RedisDataType getDataType() {\n     }\n   },\n \n+  /***************************************\n+   ********** Publish Subscribe **********\n+   ***************************************/\n+  /**\n+   * SUBSCRIBE channel...\n+   * <p>\n+   * subscribe to channel\n+   */\n+  SUBSCRIBE {\n+    private Executor executor;\n+\n+    @Override\n+    public Executor getExecutor() {\n+      if (executor == null) {\n+        executor = new SubscribeExecutor();\n+      }\n+      return executor;\n+    }\n+\n+    private final RedisDataType dataType = RedisDataType.REDIS_PUBSUB;\n+\n+    @Override\n+    public RedisDataType getDataType() {\n+      return this.dataType;\n+    }\n+  },\n+  PUBLISH {\n+    private Executor executor;\n+\n+    @Override\n+    public Executor getExecutor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzOTQzMw=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDMzNzg2OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/RedisCommandType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTo1NDo0NVrOFn2-TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzoxNToyN1rOFoRu9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzOTQ2OA==", "bodyText": "Is this thread safe?", "url": "https://github.com/apache/geode/pull/4682#discussion_r377339468", "createdAt": "2020-02-10T21:54:45Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/RedisCommandType.java", "diffHunk": "@@ -2595,6 +2598,69 @@ public RedisDataType getDataType() {\n     }\n   },\n \n+  /***************************************\n+   ********** Publish Subscribe **********\n+   ***************************************/\n+  /**\n+   * SUBSCRIBE channel...\n+   * <p>\n+   * subscribe to channel\n+   */\n+  SUBSCRIBE {\n+    private Executor executor;\n+\n+    @Override\n+    public Executor getExecutor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc3NzkwOA==", "bodyText": "Ditto", "url": "https://github.com/apache/geode/pull/4682#discussion_r377777908", "createdAt": "2020-02-11T17:15:27Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/RedisCommandType.java", "diffHunk": "@@ -2595,6 +2598,69 @@ public RedisDataType getDataType() {\n     }\n   },\n \n+  /***************************************\n+   ********** Publish Subscribe **********\n+   ***************************************/\n+  /**\n+   * SUBSCRIBE channel...\n+   * <p>\n+   * subscribe to channel\n+   */\n+  SUBSCRIBE {\n+    private Executor executor;\n+\n+    @Override\n+    public Executor getExecutor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzOTQ2OA=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDMzODIyOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/RedisCommandType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTo1NDo1MlrOFn2-gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzoxNTozNFrOFoRvOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzOTUyMA==", "bodyText": "Is this thread safe?", "url": "https://github.com/apache/geode/pull/4682#discussion_r377339520", "createdAt": "2020-02-10T21:54:52Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/RedisCommandType.java", "diffHunk": "@@ -2595,6 +2598,69 @@ public RedisDataType getDataType() {\n     }\n   },\n \n+  /***************************************\n+   ********** Publish Subscribe **********\n+   ***************************************/\n+  /**\n+   * SUBSCRIBE channel...\n+   * <p>\n+   * subscribe to channel\n+   */\n+  SUBSCRIBE {\n+    private Executor executor;\n+\n+    @Override\n+    public Executor getExecutor() {\n+      if (executor == null) {\n+        executor = new SubscribeExecutor();\n+      }\n+      return executor;\n+    }\n+\n+    private final RedisDataType dataType = RedisDataType.REDIS_PUBSUB;\n+\n+    @Override\n+    public RedisDataType getDataType() {\n+      return this.dataType;\n+    }\n+  },\n+  PUBLISH {\n+    private Executor executor;\n+\n+    @Override\n+    public Executor getExecutor() {\n+      if (executor == null) {\n+        executor = new PublishExecutor();\n+      }\n+      return executor;\n+    }\n+\n+    private final RedisDataType dataType = RedisDataType.REDIS_PUBSUB;\n+\n+    @Override\n+    public RedisDataType getDataType() {\n+      return this.dataType;\n+    }\n+  },\n+  UNSUBSCRIBE {\n+    private Executor executor;\n+\n+    @Override\n+    public Executor getExecutor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc3Nzk3Ng==", "bodyText": "Ditto", "url": "https://github.com/apache/geode/pull/4682#discussion_r377777976", "createdAt": "2020-02-11T17:15:34Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/RedisCommandType.java", "diffHunk": "@@ -2595,6 +2598,69 @@ public RedisDataType getDataType() {\n     }\n   },\n \n+  /***************************************\n+   ********** Publish Subscribe **********\n+   ***************************************/\n+  /**\n+   * SUBSCRIBE channel...\n+   * <p>\n+   * subscribe to channel\n+   */\n+  SUBSCRIBE {\n+    private Executor executor;\n+\n+    @Override\n+    public Executor getExecutor() {\n+      if (executor == null) {\n+        executor = new SubscribeExecutor();\n+      }\n+      return executor;\n+    }\n+\n+    private final RedisDataType dataType = RedisDataType.REDIS_PUBSUB;\n+\n+    @Override\n+    public RedisDataType getDataType() {\n+      return this.dataType;\n+    }\n+  },\n+  PUBLISH {\n+    private Executor executor;\n+\n+    @Override\n+    public Executor getExecutor() {\n+      if (executor == null) {\n+        executor = new PublishExecutor();\n+      }\n+      return executor;\n+    }\n+\n+    private final RedisDataType dataType = RedisDataType.REDIS_PUBSUB;\n+\n+    @Override\n+    public RedisDataType getDataType() {\n+      return this.dataType;\n+    }\n+  },\n+  UNSUBSCRIBE {\n+    private Executor executor;\n+\n+    @Override\n+    public Executor getExecutor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMzOTUyMA=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDM0MjIzOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/ExecutionHandlerContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTo1NjoxOVrOFn3BIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMTo1NjoxOVrOFn3BIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM0MDE5NQ==", "bodyText": "Maybe make this final, if you are going through all the effort of constructor initialization and private", "url": "https://github.com/apache/geode/pull/4682#discussion_r377340195", "createdAt": "2020-02-10T21:56:19Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/ExecutionHandlerContext.java", "diffHunk": "@@ -86,6 +88,11 @@ public KeyRegistrar getKeyRegistrar() {\n   }\n \n   private KeyRegistrar keyRegistrar;\n+  private PubSub pubSub;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDQxNjA5OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Coder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjoyMToxNFrOFn3uow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjoyMToxNFrOFn3uow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MTg0Mw==", "bodyText": "Maybe treat the final String.valueof(d) as the else then at least it seams one have thought of all the combinations.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377351843", "createdAt": "2020-02-10T22:21:14Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Coder.java", "diffHunk": "@@ -436,16 +452,18 @@ public static String bytesToString(byte[] bytes) {\n   }\n \n   public static String doubleToString(double d) {\n-    if (d == Double.POSITIVE_INFINITY)\n+    if (d == Double.POSITIVE_INFINITY) {\n       return \"Infinity\";\n-    else if (d == Double.NEGATIVE_INFINITY)\n+    } else if (d == Double.NEGATIVE_INFINITY) {\n       return \"-Infinity\";\n+    }\n     return String.valueOf(d);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDQxNjYxOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Coder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjoyMToyN1rOFn3vAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjoyMToyN1rOFn3vAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1MTkzNg==", "bodyText": "What about strings with \"whitespaces\"?", "url": "https://github.com/apache/geode/pull/4682#discussion_r377351936", "createdAt": "2020-02-10T22:21:27Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Coder.java", "diffHunk": "@@ -436,16 +452,18 @@ public static String bytesToString(byte[] bytes) {\n   }\n \n   public static String doubleToString(double d) {\n-    if (d == Double.POSITIVE_INFINITY)\n+    if (d == Double.POSITIVE_INFINITY) {\n       return \"Infinity\";\n-    else if (d == Double.NEGATIVE_INFINITY)\n+    } else if (d == Double.NEGATIVE_INFINITY) {\n       return \"-Infinity\";\n+    }\n     return String.valueOf(d);\n   }\n \n   public static byte[] stringToBytes(String string) {\n-    if (string == null || string.equals(\"\"))\n+    if (string == null || string.equals(\"\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDQzNDQ3OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/ExecutionHandlerContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjoyNzo0MVrOFn36JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzoyNDoyMVrOFoSDdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1NDc4OA==", "bodyText": "Why do we need to expose the PubSub externally?", "url": "https://github.com/apache/geode/pull/4682#discussion_r377354788", "createdAt": "2020-02-10T22:27:41Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/ExecutionHandlerContext.java", "diffHunk": "@@ -86,6 +88,11 @@ public KeyRegistrar getKeyRegistrar() {\n   }\n \n   private KeyRegistrar keyRegistrar;\n+  private PubSub pubSub;\n+\n+  public PubSub getPubSub() {\n+    return pubSub;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc4MzE1OA==", "bodyText": "It is used by the various Executors that deal with pub/sub. Once ExecutionContextHandler is refactored, this should not be necessary.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377783158", "createdAt": "2020-02-11T17:24:21Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/ExecutionHandlerContext.java", "diffHunk": "@@ -86,6 +88,11 @@ public KeyRegistrar getKeyRegistrar() {\n   }\n \n   private KeyRegistrar keyRegistrar;\n+  private PubSub pubSub;\n+\n+  public PubSub getPubSub() {\n+    return pubSub;\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM1NDc4OA=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDQ3ODM2OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo0MzoyMVrOFn4Uqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo0MzoyMVrOFn4Uqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2MTU3OQ==", "bodyText": "why is this package protected and not private? or even private final?", "url": "https://github.com/apache/geode/pull/4682#discussion_r377361579", "createdAt": "2020-02-10T22:43:21Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {\n+  public static final String REDIS_PUB_SUB_FUNCTION_ID = \"redisPubSubFunctionID\";\n+\n+  Subscribers subscribers = new Subscribers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDQ4MTcwOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo0NDoyNVrOFn4Wng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo0NDoyNVrOFn4Wng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2MjA3OA==", "bodyText": "Everywhere where there are collections, streams are used. Why not here? Why not a collect function? Consistency...", "url": "https://github.com/apache/geode/pull/4682#discussion_r377362078", "createdAt": "2020-02-10T22:44:25Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {\n+  public static final String REDIS_PUB_SUB_FUNCTION_ID = \"redisPubSubFunctionID\";\n+\n+  Subscribers subscribers = new Subscribers();\n+\n+  public long publish(String channel, String message) {\n+    ResultCollector<?, ?> subscriberCountCollector = FunctionService\n+        .onMembers()\n+        .setArguments(new String[] {channel, message})\n+        .execute(REDIS_PUB_SUB_FUNCTION_ID);\n+\n+    List<Long> subscriberCounts = (List<Long>) subscriberCountCollector.getResult();\n+    long totalSubscribers = 0;\n+    for (long subscriberCount : subscriberCounts) {\n+      totalSubscribers += subscriberCount;\n+    }\n+    return totalSubscribers;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDQ4NTE2OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo0NTo1NFrOFn4YzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjo1ODo0N1rOFocQ-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2MjYzNg==", "bodyText": "I think this might be a little fragile. What happens if there are NOT 2 entries or even 0... What if there are no arguments and it is null?", "url": "https://github.com/apache/geode/pull/4682#discussion_r377362636", "createdAt": "2020-02-10T22:45:54Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {\n+  public static final String REDIS_PUB_SUB_FUNCTION_ID = \"redisPubSubFunctionID\";\n+\n+  Subscribers subscribers = new Subscribers();\n+\n+  public long publish(String channel, String message) {\n+    ResultCollector<?, ?> subscriberCountCollector = FunctionService\n+        .onMembers()\n+        .setArguments(new String[] {channel, message})\n+        .execute(REDIS_PUB_SUB_FUNCTION_ID);\n+\n+    List<Long> subscriberCounts = (List<Long>) subscriberCountCollector.getResult();\n+    long totalSubscribers = 0;\n+    for (long subscriberCount : subscriberCounts) {\n+      totalSubscribers += subscriberCount;\n+    }\n+    return totalSubscribers;\n+  }\n+\n+  public long subscribe(String channel, ExecutionHandlerContext context, Client client) {\n+    if (subscribers.exists(channel, client)) {\n+      return subscribers.findSubscribers(client).size();\n+    }\n+    Subscriber subscriber = new Subscriber(client, channel, context);\n+    subscribers.add(subscriber);\n+    return subscribers.findSubscribers(client).size();\n+  }\n+\n+  public void registerPublishFunction() {\n+    FunctionService.registerFunction(new Function() {\n+      @Override\n+      public String getId() {\n+        return REDIS_PUB_SUB_FUNCTION_ID;\n+      }\n+\n+      @Override\n+      public void execute(FunctionContext context) {\n+        String[] publishMessage = (String[]) context.getArguments();\n+        long subscriberCount = publishMessageToSubscribers(publishMessage[0], publishMessage[1]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NDQyMQ==", "bodyText": "This function call is fairly tightly controlled - higher level calling methods should already ensure correct parameterization.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377794421", "createdAt": "2020-02-11T17:45:29Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {\n+  public static final String REDIS_PUB_SUB_FUNCTION_ID = \"redisPubSubFunctionID\";\n+\n+  Subscribers subscribers = new Subscribers();\n+\n+  public long publish(String channel, String message) {\n+    ResultCollector<?, ?> subscriberCountCollector = FunctionService\n+        .onMembers()\n+        .setArguments(new String[] {channel, message})\n+        .execute(REDIS_PUB_SUB_FUNCTION_ID);\n+\n+    List<Long> subscriberCounts = (List<Long>) subscriberCountCollector.getResult();\n+    long totalSubscribers = 0;\n+    for (long subscriberCount : subscriberCounts) {\n+      totalSubscribers += subscriberCount;\n+    }\n+    return totalSubscribers;\n+  }\n+\n+  public long subscribe(String channel, ExecutionHandlerContext context, Client client) {\n+    if (subscribers.exists(channel, client)) {\n+      return subscribers.findSubscribers(client).size();\n+    }\n+    Subscriber subscriber = new Subscriber(client, channel, context);\n+    subscribers.add(subscriber);\n+    return subscribers.findSubscribers(client).size();\n+  }\n+\n+  public void registerPublishFunction() {\n+    FunctionService.registerFunction(new Function() {\n+      @Override\n+      public String getId() {\n+        return REDIS_PUB_SUB_FUNCTION_ID;\n+      }\n+\n+      @Override\n+      public void execute(FunctionContext context) {\n+        String[] publishMessage = (String[]) context.getArguments();\n+        long subscriberCount = publishMessageToSubscribers(publishMessage[0], publishMessage[1]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2MjYzNg=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NzYxMg==", "bodyText": "Can I quote you on this? Can we please add validation BEFORE invoking.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377797612", "createdAt": "2020-02-11T17:51:07Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {\n+  public static final String REDIS_PUB_SUB_FUNCTION_ID = \"redisPubSubFunctionID\";\n+\n+  Subscribers subscribers = new Subscribers();\n+\n+  public long publish(String channel, String message) {\n+    ResultCollector<?, ?> subscriberCountCollector = FunctionService\n+        .onMembers()\n+        .setArguments(new String[] {channel, message})\n+        .execute(REDIS_PUB_SUB_FUNCTION_ID);\n+\n+    List<Long> subscriberCounts = (List<Long>) subscriberCountCollector.getResult();\n+    long totalSubscribers = 0;\n+    for (long subscriberCount : subscriberCounts) {\n+      totalSubscribers += subscriberCount;\n+    }\n+    return totalSubscribers;\n+  }\n+\n+  public long subscribe(String channel, ExecutionHandlerContext context, Client client) {\n+    if (subscribers.exists(channel, client)) {\n+      return subscribers.findSubscribers(client).size();\n+    }\n+    Subscriber subscriber = new Subscriber(client, channel, context);\n+    subscribers.add(subscriber);\n+    return subscribers.findSubscribers(client).size();\n+  }\n+\n+  public void registerPublishFunction() {\n+    FunctionService.registerFunction(new Function() {\n+      @Override\n+      public String getId() {\n+        return REDIS_PUB_SUB_FUNCTION_ID;\n+      }\n+\n+      @Override\n+      public void execute(FunctionContext context) {\n+        String[] publishMessage = (String[]) context.getArguments();\n+        long subscriberCount = publishMessageToSubscribers(publishMessage[0], publishMessage[1]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2MjYzNg=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1MDQ1Ng==", "bodyText": "Added validation", "url": "https://github.com/apache/geode/pull/4682#discussion_r377950456", "createdAt": "2020-02-11T22:58:47Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {\n+  public static final String REDIS_PUB_SUB_FUNCTION_ID = \"redisPubSubFunctionID\";\n+\n+  Subscribers subscribers = new Subscribers();\n+\n+  public long publish(String channel, String message) {\n+    ResultCollector<?, ?> subscriberCountCollector = FunctionService\n+        .onMembers()\n+        .setArguments(new String[] {channel, message})\n+        .execute(REDIS_PUB_SUB_FUNCTION_ID);\n+\n+    List<Long> subscriberCounts = (List<Long>) subscriberCountCollector.getResult();\n+    long totalSubscribers = 0;\n+    for (long subscriberCount : subscriberCounts) {\n+      totalSubscribers += subscriberCount;\n+    }\n+    return totalSubscribers;\n+  }\n+\n+  public long subscribe(String channel, ExecutionHandlerContext context, Client client) {\n+    if (subscribers.exists(channel, client)) {\n+      return subscribers.findSubscribers(client).size();\n+    }\n+    Subscriber subscriber = new Subscriber(client, channel, context);\n+    subscribers.add(subscriber);\n+    return subscribers.findSubscribers(client).size();\n+  }\n+\n+  public void registerPublishFunction() {\n+    FunctionService.registerFunction(new Function() {\n+      @Override\n+      public String getId() {\n+        return REDIS_PUB_SUB_FUNCTION_ID;\n+      }\n+\n+      @Override\n+      public void execute(FunctionContext context) {\n+        String[] publishMessage = (String[]) context.getArguments();\n+        long subscriberCount = publishMessageToSubscribers(publishMessage[0], publishMessage[1]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2MjYzNg=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDUwMDI0OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/GeodeRedisServer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo1MToyN1rOFn4iFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNjo0Nzo1MlrOFo2VCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NTAxMw==", "bodyText": "Why explicitly call registerPublishFunction if this can be done inside the constructor? Why is this method even required?", "url": "https://github.com/apache/geode/pull/4682#discussion_r377365013", "createdAt": "2020-02-10T22:51:27Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/GeodeRedisServer.java", "diffHunk": "@@ -730,4 +740,11 @@ private static String getLogLevel(String arg) {\n     }\n     return logLevel;\n   }\n+\n+  private PubSub createPubSub() {\n+    PubSub pubSub = new PubSub();\n+    pubSub.registerPublishFunction();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NjM3OA==", "bodyText": "It ensures that the PubSub instance is fully constructed before use - since the Function requires a reference to it.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377796378", "createdAt": "2020-02-11T17:48:46Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/GeodeRedisServer.java", "diffHunk": "@@ -730,4 +740,11 @@ private static String getLogLevel(String arg) {\n     }\n     return logLevel;\n   }\n+\n+  private PubSub createPubSub() {\n+    PubSub pubSub = new PubSub();\n+    pubSub.registerPublishFunction();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NTAxMw=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NzE3NA==", "bodyText": "Let me rephrase, given that there are no dependencies as input parameters, the registering of Functions can happen at construction time.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377797174", "createdAt": "2020-02-11T17:50:14Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/GeodeRedisServer.java", "diffHunk": "@@ -730,4 +740,11 @@ private static String getLogLevel(String arg) {\n     }\n     return logLevel;\n   }\n+\n+  private PubSub createPubSub() {\n+    PubSub pubSub = new PubSub();\n+    pubSub.registerPublishFunction();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NTAxMw=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 248}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM3NzQ4Mg==", "bodyText": "Done", "url": "https://github.com/apache/geode/pull/4682#discussion_r378377482", "createdAt": "2020-02-12T16:47:52Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/GeodeRedisServer.java", "diffHunk": "@@ -730,4 +740,11 @@ private static String getLogLevel(String arg) {\n     }\n     return logLevel;\n   }\n+\n+  private PubSub createPubSub() {\n+    PubSub pubSub = new PubSub();\n+    pubSub.registerPublishFunction();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NTAxMw=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 248}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDUwNDg3OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/GeodeRedisServer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo1MzowNlrOFn4k1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMjoxMTowN1rOFobCRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NTcxNw==", "bodyText": "This initialization could have been done on line 263, where the field is declared.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377365717", "createdAt": "2020-02-10T22:53:06Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/GeodeRedisServer.java", "diffHunk": "@@ -446,6 +449,7 @@ private void initializeRedis() {\n         throw assErr;\n       }\n       this.keyRegistrar = new KeyRegistrar(redisMetaData);\n+      this.pubSub = createPubSub();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc5NzMxNA==", "bodyText": "That is true.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377797314", "createdAt": "2020-02-11T17:50:32Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/GeodeRedisServer.java", "diffHunk": "@@ -446,6 +449,7 @@ private void initializeRedis() {\n         throw assErr;\n       }\n       this.keyRegistrar = new KeyRegistrar(redisMetaData);\n+      this.pubSub = createPubSub();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NTcxNw=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkyMTM3OQ==", "bodyText": "But I don't see any immediate value in changing it.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377921379", "createdAt": "2020-02-11T21:51:38Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/GeodeRedisServer.java", "diffHunk": "@@ -446,6 +449,7 @@ private void initializeRedis() {\n         throw assErr;\n       }\n       this.keyRegistrar = new KeyRegistrar(redisMetaData);\n+      this.pubSub = createPubSub();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NTcxNw=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkzMDMxMA==", "bodyText": "Also, you can use new PubSub as the registerFunction can (and should) be called in the constructor of PubSub otherwise one is exposing knowledge that does not need to be exposed.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377930310", "createdAt": "2020-02-11T22:11:07Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/GeodeRedisServer.java", "diffHunk": "@@ -446,6 +449,7 @@ private void initializeRedis() {\n         throw assErr;\n       }\n       this.keyRegistrar = new KeyRegistrar(redisMetaData);\n+      this.pubSub = createPubSub();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2NTcxNw=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 123}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDUxOTk3OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMjo1ODo0OVrOFn4t7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzoxMjowNFrOFocj1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2ODA0Ng==", "bodyText": "This is very inefficient. First iterate over all subscribers to see if there is a match. Then iterate over all subscribers again to return a count. Maybe one can findSubscribers if count = 0 then add other wise return count", "url": "https://github.com/apache/geode/pull/4682#discussion_r377368046", "createdAt": "2020-02-10T22:58:49Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {\n+  public static final String REDIS_PUB_SUB_FUNCTION_ID = \"redisPubSubFunctionID\";\n+\n+  Subscribers subscribers = new Subscribers();\n+\n+  public long publish(String channel, String message) {\n+    ResultCollector<?, ?> subscriberCountCollector = FunctionService\n+        .onMembers()\n+        .setArguments(new String[] {channel, message})\n+        .execute(REDIS_PUB_SUB_FUNCTION_ID);\n+\n+    List<Long> subscriberCounts = (List<Long>) subscriberCountCollector.getResult();\n+    long totalSubscribers = 0;\n+    for (long subscriberCount : subscriberCounts) {\n+      totalSubscribers += subscriberCount;\n+    }\n+    return totalSubscribers;\n+  }\n+\n+  public long subscribe(String channel, ExecutionHandlerContext context, Client client) {\n+    if (subscribers.exists(channel, client)) {\n+      return subscribers.findSubscribers(client).size();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxMTg0Ng==", "bodyText": "I'm not sure I understand. We need to know two things:\n1 - has a client already subscribed to a channel\n2 - how many subscriptions a client currently has\nIn order to address both of these concerns, the findSubscribers method would probably need to be inlined which seems like it would be less readable.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377811846", "createdAt": "2020-02-11T18:18:28Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {\n+  public static final String REDIS_PUB_SUB_FUNCTION_ID = \"redisPubSubFunctionID\";\n+\n+  Subscribers subscribers = new Subscribers();\n+\n+  public long publish(String channel, String message) {\n+    ResultCollector<?, ?> subscriberCountCollector = FunctionService\n+        .onMembers()\n+        .setArguments(new String[] {channel, message})\n+        .execute(REDIS_PUB_SUB_FUNCTION_ID);\n+\n+    List<Long> subscriberCounts = (List<Long>) subscriberCountCollector.getResult();\n+    long totalSubscribers = 0;\n+    for (long subscriberCount : subscriberCounts) {\n+      totalSubscribers += subscriberCount;\n+    }\n+    return totalSubscribers;\n+  }\n+\n+  public long subscribe(String channel, ExecutionHandlerContext context, Client client) {\n+    if (subscribers.exists(channel, client)) {\n+      return subscribers.findSubscribers(client).size();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2ODA0Ng=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgyODA0Ng==", "bodyText": "You are correct.\nThat said.. What is the max number of Pub/Sub combinations we can expect? How does this approach scale?\nMaybe two maps <channel,List> and <client,List> ?", "url": "https://github.com/apache/geode/pull/4682#discussion_r377828046", "createdAt": "2020-02-11T18:48:29Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {\n+  public static final String REDIS_PUB_SUB_FUNCTION_ID = \"redisPubSubFunctionID\";\n+\n+  Subscribers subscribers = new Subscribers();\n+\n+  public long publish(String channel, String message) {\n+    ResultCollector<?, ?> subscriberCountCollector = FunctionService\n+        .onMembers()\n+        .setArguments(new String[] {channel, message})\n+        .execute(REDIS_PUB_SUB_FUNCTION_ID);\n+\n+    List<Long> subscriberCounts = (List<Long>) subscriberCountCollector.getResult();\n+    long totalSubscribers = 0;\n+    for (long subscriberCount : subscriberCounts) {\n+      totalSubscribers += subscriberCount;\n+    }\n+    return totalSubscribers;\n+  }\n+\n+  public long subscribe(String channel, ExecutionHandlerContext context, Client client) {\n+    if (subscribers.exists(channel, client)) {\n+      return subscribers.findSubscribers(client).size();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2ODA0Ng=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1MDk0OA==", "bodyText": "Could we leave optimization until it's actually determined that it is needed?", "url": "https://github.com/apache/geode/pull/4682#discussion_r377950948", "createdAt": "2020-02-11T23:00:15Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {\n+  public static final String REDIS_PUB_SUB_FUNCTION_ID = \"redisPubSubFunctionID\";\n+\n+  Subscribers subscribers = new Subscribers();\n+\n+  public long publish(String channel, String message) {\n+    ResultCollector<?, ?> subscriberCountCollector = FunctionService\n+        .onMembers()\n+        .setArguments(new String[] {channel, message})\n+        .execute(REDIS_PUB_SUB_FUNCTION_ID);\n+\n+    List<Long> subscriberCounts = (List<Long>) subscriberCountCollector.getResult();\n+    long totalSubscribers = 0;\n+    for (long subscriberCount : subscriberCounts) {\n+      totalSubscribers += subscriberCount;\n+    }\n+    return totalSubscribers;\n+  }\n+\n+  public long subscribe(String channel, ExecutionHandlerContext context, Client client) {\n+    if (subscribers.exists(channel, client)) {\n+      return subscribers.findSubscribers(client).size();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2ODA0Ng=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1NTI4NQ==", "bodyText": "I agree, premature optimization.... But I'd be interested in what the \"normal\" usage on this would be. Maybe we add a load testing ticket on this, to see what load this construct can take. Is it 100's or 1000's or even 10,000's...\nBut I think it would be good to understand when it will slow down / break.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377955285", "createdAt": "2020-02-11T23:12:04Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {\n+  public static final String REDIS_PUB_SUB_FUNCTION_ID = \"redisPubSubFunctionID\";\n+\n+  Subscribers subscribers = new Subscribers();\n+\n+  public long publish(String channel, String message) {\n+    ResultCollector<?, ?> subscriberCountCollector = FunctionService\n+        .onMembers()\n+        .setArguments(new String[] {channel, message})\n+        .execute(REDIS_PUB_SUB_FUNCTION_ID);\n+\n+    List<Long> subscriberCounts = (List<Long>) subscriberCountCollector.getResult();\n+    long totalSubscribers = 0;\n+    for (long subscriberCount : subscriberCounts) {\n+      totalSubscribers += subscriberCount;\n+    }\n+    return totalSubscribers;\n+  }\n+\n+  public long subscribe(String channel, ExecutionHandlerContext context, Client client) {\n+    if (subscribers.exists(channel, client)) {\n+      return subscribers.findSubscribers(client).size();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2ODA0Ng=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNDUyMzk1OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMzowMDoyMlrOFn4wPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxODoyNDo0MlrOFoUAAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2ODYzOA==", "bodyText": "Are we concerned about thread safety here or not? Because, if we would have done a count of all subscribers before adding, then we don't have to iterate all subscribers again just to in all reality do previousCount + 1", "url": "https://github.com/apache/geode/pull/4682#discussion_r377368638", "createdAt": "2020-02-10T23:00:22Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {\n+  public static final String REDIS_PUB_SUB_FUNCTION_ID = \"redisPubSubFunctionID\";\n+\n+  Subscribers subscribers = new Subscribers();\n+\n+  public long publish(String channel, String message) {\n+    ResultCollector<?, ?> subscriberCountCollector = FunctionService\n+        .onMembers()\n+        .setArguments(new String[] {channel, message})\n+        .execute(REDIS_PUB_SUB_FUNCTION_ID);\n+\n+    List<Long> subscriberCounts = (List<Long>) subscriberCountCollector.getResult();\n+    long totalSubscribers = 0;\n+    for (long subscriberCount : subscriberCounts) {\n+      totalSubscribers += subscriberCount;\n+    }\n+    return totalSubscribers;\n+  }\n+\n+  public long subscribe(String channel, ExecutionHandlerContext context, Client client) {\n+    if (subscribers.exists(channel, client)) {\n+      return subscribers.findSubscribers(client).size();\n+    }\n+    Subscriber subscriber = new Subscriber(client, channel, context);\n+    subscribers.add(subscriber);\n+    return subscribers.findSubscribers(client).size();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxNTA0Mg==", "bodyText": "I think that's just a different approach - also valid, but just different....", "url": "https://github.com/apache/geode/pull/4682#discussion_r377815042", "createdAt": "2020-02-11T18:24:42Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PubSub.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n+\n+public class PubSub {\n+  public static final String REDIS_PUB_SUB_FUNCTION_ID = \"redisPubSubFunctionID\";\n+\n+  Subscribers subscribers = new Subscribers();\n+\n+  public long publish(String channel, String message) {\n+    ResultCollector<?, ?> subscriberCountCollector = FunctionService\n+        .onMembers()\n+        .setArguments(new String[] {channel, message})\n+        .execute(REDIS_PUB_SUB_FUNCTION_ID);\n+\n+    List<Long> subscriberCounts = (List<Long>) subscriberCountCollector.getResult();\n+    long totalSubscribers = 0;\n+    for (long subscriberCount : subscriberCounts) {\n+      totalSubscribers += subscriberCount;\n+    }\n+    return totalSubscribers;\n+  }\n+\n+  public long subscribe(String channel, ExecutionHandlerContext context, Client client) {\n+    if (subscribers.exists(channel, client)) {\n+      return subscribers.findSubscribers(client).size();\n+    }\n+    Subscriber subscriber = new Subscriber(client, channel, context);\n+    subscribers.add(subscriber);\n+    return subscribers.findSubscribers(client).size();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzM2ODYzOA=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzE2NzMyOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Subscriber.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzoxNDo0OVrOFoRttQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQyMjowMjoxOFrOFpAKfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc3NzU4OQ==", "bodyText": "There is no null checking happening. Can we really assume that the input channel and client are non-null?", "url": "https://github.com/apache/geode/pull/4682#discussion_r377777589", "createdAt": "2020-02-11T17:14:49Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Subscriber.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+\n+class Subscriber {\n+  public final Client client;\n+  public final String channel;\n+  private ExecutionHandlerContext context;\n+\n+  public Subscriber(Client client, String channel,\n+      ExecutionHandlerContext context) {\n+\n+    this.client = client;\n+    this.channel = channel;\n+    this.context = context;\n+  }\n+\n+  public boolean isEqualTo(String channel, Client client) {\n+    return channel.equals(this.channel) && client.equals(this.client);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxNzYzMg==", "bodyText": "Null checking is handled by the respective equals methods.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377817632", "createdAt": "2020-02-11T18:29:10Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Subscriber.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+\n+class Subscriber {\n+  public final Client client;\n+  public final String channel;\n+  private ExecutionHandlerContext context;\n+\n+  public Subscriber(Client client, String channel,\n+      ExecutionHandlerContext context) {\n+\n+    this.client = client;\n+    this.channel = channel;\n+    this.context = context;\n+  }\n+\n+  public boolean isEqualTo(String channel, Client client) {\n+    return channel.equals(this.channel) && client.equals(this.client);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc3NzU4OQ=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxODI4NQ==", "bodyText": "So, you can 100% guarantee that the fields are ALWAYS non-null?", "url": "https://github.com/apache/geode/pull/4682#discussion_r377818285", "createdAt": "2020-02-11T18:30:24Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Subscriber.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+\n+class Subscriber {\n+  public final Client client;\n+  public final String channel;\n+  private ExecutionHandlerContext context;\n+\n+  public Subscriber(Client client, String channel,\n+      ExecutionHandlerContext context) {\n+\n+    this.client = client;\n+    this.channel = channel;\n+    this.context = context;\n+  }\n+\n+  public boolean isEqualTo(String channel, Client client) {\n+    return channel.equals(this.channel) && client.equals(this.client);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc3NzU4OQ=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzgxODk0OQ==", "bodyText": "another approach is that the equals method is this.channel.equals(channel. This way the constructor can ensure that the instance channel field is non-null AND your isEqualsTo is null-safe", "url": "https://github.com/apache/geode/pull/4682#discussion_r377818949", "createdAt": "2020-02-11T18:31:38Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Subscriber.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+\n+class Subscriber {\n+  public final Client client;\n+  public final String channel;\n+  private ExecutionHandlerContext context;\n+\n+  public Subscriber(Client client, String channel,\n+      ExecutionHandlerContext context) {\n+\n+    this.client = client;\n+    this.channel = channel;\n+    this.context = context;\n+  }\n+\n+  public boolean isEqualTo(String channel, Client client) {\n+    return channel.equals(this.channel) && client.equals(this.client);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc3NzU4OQ=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzg0OTMyMw==", "bodyText": "Yes, you're correct.", "url": "https://github.com/apache/geode/pull/4682#discussion_r377849323", "createdAt": "2020-02-11T19:26:52Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Subscriber.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+\n+class Subscriber {\n+  public final Client client;\n+  public final String channel;\n+  private ExecutionHandlerContext context;\n+\n+  public Subscriber(Client client, String channel,\n+      ExecutionHandlerContext context) {\n+\n+    this.client = client;\n+    this.channel = channel;\n+    this.context = context;\n+  }\n+\n+  public boolean isEqualTo(String channel, Client client) {\n+    return channel.equals(this.channel) && client.equals(this.client);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc3NzU4OQ=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM4MzE5MA==", "bodyText": "This implementation is not \"optimal\". If you makes sure the channel and client on the Subscriber is non-null, then your isEqualsTo method implementation changes. Then the comparison this.channel.equals(channel) && this.client.equals(client) is cleaner. There is no requirement to continually check if the method parameters are non-null, because it does not matter.", "url": "https://github.com/apache/geode/pull/4682#discussion_r378383190", "createdAt": "2020-02-12T16:56:37Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Subscriber.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+\n+class Subscriber {\n+  public final Client client;\n+  public final String channel;\n+  private ExecutionHandlerContext context;\n+\n+  public Subscriber(Client client, String channel,\n+      ExecutionHandlerContext context) {\n+\n+    this.client = client;\n+    this.channel = channel;\n+    this.context = context;\n+  }\n+\n+  public boolean isEqualTo(String channel, Client client) {\n+    return channel.equals(this.channel) && client.equals(this.client);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc3NzU4OQ=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODUzODYyMA==", "bodyText": "Fixed", "url": "https://github.com/apache/geode/pull/4682#discussion_r378538620", "createdAt": "2020-02-12T22:02:18Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Subscriber.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+\n+class Subscriber {\n+  public final Client client;\n+  public final String channel;\n+  private ExecutionHandlerContext context;\n+\n+  public Subscriber(Client client, String channel,\n+      ExecutionHandlerContext context) {\n+\n+    this.client = client;\n+    this.channel = channel;\n+    this.context = context;\n+  }\n+\n+  public boolean isEqualTo(String channel, Client client) {\n+    return channel.equals(this.channel) && client.equals(this.client);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc3NzU4OQ=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNzE3NTcxOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Subscriber.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNzoxNzoxM1rOFoRy8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQyMzowMDo1M1rOFocTxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc3ODkyOA==", "bodyText": "Would we not prefer a checked exception here?", "url": "https://github.com/apache/geode/pull/4682#discussion_r377778928", "createdAt": "2020-02-11T17:17:13Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Subscriber.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+\n+class Subscriber {\n+  public final Client client;\n+  public final String channel;\n+  private ExecutionHandlerContext context;\n+\n+  public Subscriber(Client client, String channel,\n+      ExecutionHandlerContext context) {\n+\n+    this.client = client;\n+    this.channel = channel;\n+    this.context = context;\n+  }\n+\n+  public boolean isEqualTo(String channel, Client client) {\n+    return channel.equals(this.channel) && client.equals(this.client);\n+  }\n+\n+  public boolean publishMessage(String channel, String message) {\n+    ByteBuf messageByteBuffer;\n+    try {\n+      messageByteBuffer = Coder.getArrayResponse(context.getByteBufAllocator(),\n+          Arrays.asList(\"message\", channel, message));\n+    } catch (CoderException e) {\n+      throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzkyMDk2Ng==", "bodyText": "Removed this exception in favor of returning null", "url": "https://github.com/apache/geode/pull/4682#discussion_r377920966", "createdAt": "2020-02-11T21:50:46Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Subscriber.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+\n+class Subscriber {\n+  public final Client client;\n+  public final String channel;\n+  private ExecutionHandlerContext context;\n+\n+  public Subscriber(Client client, String channel,\n+      ExecutionHandlerContext context) {\n+\n+    this.client = client;\n+    this.channel = channel;\n+    this.context = context;\n+  }\n+\n+  public boolean isEqualTo(String channel, Client client) {\n+    return channel.equals(this.channel) && client.equals(this.client);\n+  }\n+\n+  public boolean publishMessage(String channel, String message) {\n+    ByteBuf messageByteBuffer;\n+    try {\n+      messageByteBuffer = Coder.getArrayResponse(context.getByteBufAllocator(),\n+          Arrays.asList(\"message\", channel, message));\n+    } catch (CoderException e) {\n+      throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc3ODkyOA=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzk1MTE3Mg==", "bodyText": "Removed the exception in favor of an explicit return", "url": "https://github.com/apache/geode/pull/4682#discussion_r377951172", "createdAt": "2020-02-11T23:00:53Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Subscriber.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+\n+class Subscriber {\n+  public final Client client;\n+  public final String channel;\n+  private ExecutionHandlerContext context;\n+\n+  public Subscriber(Client client, String channel,\n+      ExecutionHandlerContext context) {\n+\n+    this.client = client;\n+    this.channel = channel;\n+    this.context = context;\n+  }\n+\n+  public boolean isEqualTo(String channel, Client client) {\n+    return channel.equals(this.channel) && client.equals(this.client);\n+  }\n+\n+  public boolean publishMessage(String channel, String message) {\n+    ByteBuf messageByteBuffer;\n+    try {\n+      messageByteBuffer = Coder.getArrayResponse(context.getByteBufAllocator(),\n+          Arrays.asList(\"message\", channel, message));\n+    } catch (CoderException e) {\n+      throw new RuntimeException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc3ODkyOA=="}, "originalCommit": {"oid": "d8924a8105294286fc38cb6f2a8e602df512382e"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MTAyMTY2OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/pubsub/PublishExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNjo1ODoxM1rOFo2vCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNzoyNDo1OFrOFo3rug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM4NDEzOA==", "bodyText": "Feature envy. Can we please change.", "url": "https://github.com/apache/geode/pull/4682#discussion_r378384138", "createdAt": "2020-02-12T16:58:13Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/pubsub/PublishExecutor.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.pubsub;\n+\n+import java.util.List;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import org.apache.geode.redis.internal.Coder;\n+import org.apache.geode.redis.internal.Command;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+import org.apache.geode.redis.internal.Executor;\n+import org.apache.geode.redis.internal.RedisConstants.ArityDef;\n+\n+public class PublishExecutor implements Executor {\n+\n+\n+  @Override\n+  public void executeCommand(Command command, ExecutionHandlerContext context) {\n+    List<byte[]> args = command.getProcessedCommand();\n+    if (args.size() != 3) {\n+      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ArityDef.PUBLISH));\n+      return;\n+    }\n+\n+    String channelName = new String(args.get(1));\n+    String message = new String(args.get(2));\n+    long publishCount = context.getPubSub().publish(channelName, message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0eaf5c7e151dae6d5d6574e459d62bf5046cf76b"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM5OTY3NA==", "bodyText": "I've raised GEODE-7793 (Refactor ExecutionHandlerContext to avoid 'feature-envy') to address this.", "url": "https://github.com/apache/geode/pull/4682#discussion_r378399674", "createdAt": "2020-02-12T17:24:58Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/pubsub/PublishExecutor.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.pubsub;\n+\n+import java.util.List;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import org.apache.geode.redis.internal.Coder;\n+import org.apache.geode.redis.internal.Command;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+import org.apache.geode.redis.internal.Executor;\n+import org.apache.geode.redis.internal.RedisConstants.ArityDef;\n+\n+public class PublishExecutor implements Executor {\n+\n+\n+  @Override\n+  public void executeCommand(Command command, ExecutionHandlerContext context) {\n+    List<byte[]> args = command.getProcessedCommand();\n+    if (args.size() != 3) {\n+      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ArityDef.PUBLISH));\n+      return;\n+    }\n+\n+    String channelName = new String(args.get(1));\n+    String message = new String(args.get(2));\n+    long publishCount = context.getPubSub().publish(channelName, message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM4NDEzOA=="}, "originalCommit": {"oid": "0eaf5c7e151dae6d5d6574e459d62bf5046cf76b"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3753, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}