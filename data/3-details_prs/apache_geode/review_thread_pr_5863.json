{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxNTUwOTk0", "number": 5863, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODoyMDoyN1rOFLY5_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMjo1ODo1OFrOFMsklw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3NDg2NzE3OnYy", "diffSide": "RIGHT", "path": "geode-docs/tools_modules/gfsh/command-pages/export.html.md.erb", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxODoyMDoyN1rOIOiJ5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxOTozMDowNVrOIOkYYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjExMDU2NQ==", "bodyText": "I'd like to see these format descriptions/improvements in the description of the parameters.\nI think that your wording is adequate, but I came up with this possibility for a rewrite of the added info for the end time info.  Use it if you like.\n\"An end time specified by only a date implements a time of 00:00. This exports logs written up until 23:59:59.999 on the date prior to the one specified.\"", "url": "https://github.com/apache/geode/pull/5863#discussion_r552110565", "createdAt": "2021-01-05T18:20:27Z", "author": {"login": "karensmolermiller"}, "path": "geode-docs/tools_modules/gfsh/command-pages/export.html.md.erb", "diffHunk": "@@ -183,7 +183,9 @@ Latest\\server1\\region2_20121001.gfd on host : 192.0.2.0\n \n Export logs to a given directory.\n \n-All files that have logs in the specified time range will be exported. If no time range is specified, all logs will be exported.\n+All files that have logs in the specified time range will be exported. If no time range is specified, all logs will be exported. It should be noted that when specifying an `--end-time` argument using a date only, the time is assumed to be `00:00`, meaning that no logs that were written on the date provided will be exported, only those written up until `23:59:59.999` on the day prior.\n+\n+When using the `yyyy/MM/dd/HH/mm/ss/SSS/z` format for `--start-time` or `--end-time`, the time zone, denoted `z`, should be specified as either a 3-letter time zone such as `PST` or as an offset to GMT/UTC such as `GMT+08:00`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d52ed20de9adbddc824f1f85deac043fad54e09"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjE0NzA0MA==", "bodyText": "I've moved the format descriptions to the table section as requested, and used your rewrite, since it's far more concise and clear.", "url": "https://github.com/apache/geode/pull/5863#discussion_r552147040", "createdAt": "2021-01-05T19:30:05Z", "author": {"login": "DonalEvans"}, "path": "geode-docs/tools_modules/gfsh/command-pages/export.html.md.erb", "diffHunk": "@@ -183,7 +183,9 @@ Latest\\server1\\region2_20121001.gfd on host : 192.0.2.0\n \n Export logs to a given directory.\n \n-All files that have logs in the specified time range will be exported. If no time range is specified, all logs will be exported.\n+All files that have logs in the specified time range will be exported. If no time range is specified, all logs will be exported. It should be noted that when specifying an `--end-time` argument using a date only, the time is assumed to be `00:00`, meaning that no logs that were written on the date provided will be exported, only those written up until `23:59:59.999` on the day prior.\n+\n+When using the `yyyy/MM/dd/HH/mm/ss/SSS/z` format for `--start-time` or `--end-time`, the time zone, denoted `z`, should be specified as either a 3-letter time zone such as `PST` or as an offset to GMT/UTC such as `GMT+08:00`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjExMDU2NQ=="}, "originalCommit": {"oid": "9d52ed20de9adbddc824f1f85deac043fad54e09"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4ODU3MzMxOnYy", "diffSide": "RIGHT", "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ExportLogsInterceptor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMjo1ODoxNlrOIQj9Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMzoxMTozNVrOIQkMbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDIzNzE5MQ==", "bodyText": "Might be a nitpick. Is it possible to append the ParseException error message as well?", "url": "https://github.com/apache/geode/pull/5863#discussion_r554237191", "createdAt": "2021-01-08T22:58:16Z", "author": {"login": "pivotal-eshu"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ExportLogsInterceptor.java", "diffHunk": "@@ -106,8 +159,78 @@ public ResultModel postExecution(GfshParseResult parseResult, ResultModel comman\n     }\n \n     // if there is no downloaded file. File is saved on the locator/manager.\n-    return ResultModel.createInfo(\n-        \"Logs exported to the connected member's file system: \"\n-            + commandResult.getFileToDownload().toString());\n+    output.append(\"Logs exported to the connected member's file system: \")\n+        .append(commandResult.getFileToDownload().toString());\n+    return ResultModel.createInfo(output.toString());\n+  }\n+\n+  private ResultModel checkStartAndEndFormat(String start, String end) {\n+    StringBuilder formatErrorMessage = new StringBuilder();\n+    boolean formatError = false;\n+    if (start != null && !DATE_AND_TIME_PATTERN.matcher(start).matches()\n+        && !DATE_ONLY_PATTERN.matcher(start).matches()) {\n+      formatErrorMessage.append(EXPORT_LOGS__STARTTIME);\n+      formatError = true;\n+    }\n+\n+    if (end != null && !DATE_AND_TIME_PATTERN.matcher(end).matches()\n+        && !DATE_ONLY_PATTERN.matcher(end).matches()) {\n+      if (formatError) {\n+        formatErrorMessage.append(\" and \");\n+      }\n+      formatErrorMessage.append(EXPORT_LOGS__ENDTIME);\n+      formatError = true;\n+    }\n+\n+    if (formatError) {\n+      formatErrorMessage.append(\" had incorrect format. Valid formats are \")\n+          .append(ONLY_DATE_FORMAT).append(\" and \").append(FORMAT);\n+      return ResultModel.createError(formatErrorMessage.toString());\n+    }\n+    return null;\n+  }\n+\n+  private ResultModel checkStartAndEndParsing(String start, String end) {\n+    StringBuilder parseErrorMessage = new StringBuilder();\n+    boolean parseError = false;\n+\n+    SimpleDateFormat dateAndTimeFormat = new SimpleDateFormat(FORMAT);\n+    SimpleDateFormat dateOnlyFormat = new SimpleDateFormat(ONLY_DATE_FORMAT);\n+    if (start != null) {\n+      try {\n+        // If the input is intended to be parsed as date and time, use the date and time format\n+        if (start.length() > 10) {\n+          dateAndTimeFormat.parse(start);\n+        } else {\n+          dateOnlyFormat.parse(start);\n+        }\n+      } catch (ParseException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47901eeafe9313bcc9fab65f6e0b5afcd441fab3"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDI0MTEzMg==", "bodyText": "The error message from the ParseException is simply \"Unparseable date: \" followed by the user input, so it doesn't add any useful information here.", "url": "https://github.com/apache/geode/pull/5863#discussion_r554241132", "createdAt": "2021-01-08T23:11:35Z", "author": {"login": "DonalEvans"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ExportLogsInterceptor.java", "diffHunk": "@@ -106,8 +159,78 @@ public ResultModel postExecution(GfshParseResult parseResult, ResultModel comman\n     }\n \n     // if there is no downloaded file. File is saved on the locator/manager.\n-    return ResultModel.createInfo(\n-        \"Logs exported to the connected member's file system: \"\n-            + commandResult.getFileToDownload().toString());\n+    output.append(\"Logs exported to the connected member's file system: \")\n+        .append(commandResult.getFileToDownload().toString());\n+    return ResultModel.createInfo(output.toString());\n+  }\n+\n+  private ResultModel checkStartAndEndFormat(String start, String end) {\n+    StringBuilder formatErrorMessage = new StringBuilder();\n+    boolean formatError = false;\n+    if (start != null && !DATE_AND_TIME_PATTERN.matcher(start).matches()\n+        && !DATE_ONLY_PATTERN.matcher(start).matches()) {\n+      formatErrorMessage.append(EXPORT_LOGS__STARTTIME);\n+      formatError = true;\n+    }\n+\n+    if (end != null && !DATE_AND_TIME_PATTERN.matcher(end).matches()\n+        && !DATE_ONLY_PATTERN.matcher(end).matches()) {\n+      if (formatError) {\n+        formatErrorMessage.append(\" and \");\n+      }\n+      formatErrorMessage.append(EXPORT_LOGS__ENDTIME);\n+      formatError = true;\n+    }\n+\n+    if (formatError) {\n+      formatErrorMessage.append(\" had incorrect format. Valid formats are \")\n+          .append(ONLY_DATE_FORMAT).append(\" and \").append(FORMAT);\n+      return ResultModel.createError(formatErrorMessage.toString());\n+    }\n+    return null;\n+  }\n+\n+  private ResultModel checkStartAndEndParsing(String start, String end) {\n+    StringBuilder parseErrorMessage = new StringBuilder();\n+    boolean parseError = false;\n+\n+    SimpleDateFormat dateAndTimeFormat = new SimpleDateFormat(FORMAT);\n+    SimpleDateFormat dateOnlyFormat = new SimpleDateFormat(ONLY_DATE_FORMAT);\n+    if (start != null) {\n+      try {\n+        // If the input is intended to be parsed as date and time, use the date and time format\n+        if (start.length() > 10) {\n+          dateAndTimeFormat.parse(start);\n+        } else {\n+          dateOnlyFormat.parse(start);\n+        }\n+      } catch (ParseException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDIzNzE5MQ=="}, "originalCommit": {"oid": "47901eeafe9313bcc9fab65f6e0b5afcd441fab3"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ4ODU3NDk1OnYy", "diffSide": "RIGHT", "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ExportLogsInterceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMjo1ODo1OFrOIQj9_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wOFQyMjo1ODo1OFrOIQj9_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDIzNzQzNg==", "bodyText": "Same here as well.", "url": "https://github.com/apache/geode/pull/5863#discussion_r554237436", "createdAt": "2021-01-08T22:58:58Z", "author": {"login": "pivotal-eshu"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ExportLogsInterceptor.java", "diffHunk": "@@ -106,8 +159,78 @@ public ResultModel postExecution(GfshParseResult parseResult, ResultModel comman\n     }\n \n     // if there is no downloaded file. File is saved on the locator/manager.\n-    return ResultModel.createInfo(\n-        \"Logs exported to the connected member's file system: \"\n-            + commandResult.getFileToDownload().toString());\n+    output.append(\"Logs exported to the connected member's file system: \")\n+        .append(commandResult.getFileToDownload().toString());\n+    return ResultModel.createInfo(output.toString());\n+  }\n+\n+  private ResultModel checkStartAndEndFormat(String start, String end) {\n+    StringBuilder formatErrorMessage = new StringBuilder();\n+    boolean formatError = false;\n+    if (start != null && !DATE_AND_TIME_PATTERN.matcher(start).matches()\n+        && !DATE_ONLY_PATTERN.matcher(start).matches()) {\n+      formatErrorMessage.append(EXPORT_LOGS__STARTTIME);\n+      formatError = true;\n+    }\n+\n+    if (end != null && !DATE_AND_TIME_PATTERN.matcher(end).matches()\n+        && !DATE_ONLY_PATTERN.matcher(end).matches()) {\n+      if (formatError) {\n+        formatErrorMessage.append(\" and \");\n+      }\n+      formatErrorMessage.append(EXPORT_LOGS__ENDTIME);\n+      formatError = true;\n+    }\n+\n+    if (formatError) {\n+      formatErrorMessage.append(\" had incorrect format. Valid formats are \")\n+          .append(ONLY_DATE_FORMAT).append(\" and \").append(FORMAT);\n+      return ResultModel.createError(formatErrorMessage.toString());\n+    }\n+    return null;\n+  }\n+\n+  private ResultModel checkStartAndEndParsing(String start, String end) {\n+    StringBuilder parseErrorMessage = new StringBuilder();\n+    boolean parseError = false;\n+\n+    SimpleDateFormat dateAndTimeFormat = new SimpleDateFormat(FORMAT);\n+    SimpleDateFormat dateOnlyFormat = new SimpleDateFormat(ONLY_DATE_FORMAT);\n+    if (start != null) {\n+      try {\n+        // If the input is intended to be parsed as date and time, use the date and time format\n+        if (start.length() > 10) {\n+          dateAndTimeFormat.parse(start);\n+        } else {\n+          dateOnlyFormat.parse(start);\n+        }\n+      } catch (ParseException e) {\n+        parseErrorMessage.append(EXPORT_LOGS__STARTTIME);\n+        parseError = true;\n+      }\n+    }\n+\n+    if (end != null) {\n+      try {\n+        // If the input is intended to be parsed as date and time, use the date and time format\n+        if (end.length() > 10) {\n+          dateAndTimeFormat.parse(end);\n+        } else {\n+          dateOnlyFormat.parse(end);\n+        }\n+      } catch (ParseException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47901eeafe9313bcc9fab65f6e0b5afcd441fab3"}, "originalPosition": 175}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4864, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}