{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNjk0NzM2", "number": 5344, "title": "GEODE-8330: Structural Improvements to Versioning", "bodyText": "GEODE-8330\nThis is a follow-on PR to the versioning repair done in GEODE-8240. During the work for that ticket we saw lots of little things that needed cleaning up, but we didn't want to do them in that other PR because we had a couple releases waiting for that work. Also we didn't want to increase the complexity of the back-porting work.\nThis PR centers on improvements to the Versioning factory https://github.com/apache/geode/pull/5344/files#diff-98ef6d6138fd23032a433b5e4d592beeR29\nThat factory provides two methods:\n\nstatic VersionOrdinal getVersionOrdinal(final short ordinal)\nstatic Version getKnownVersion(final VersionOrdinal anyVersion, Version returnWhenUnknown)\n\nThe first is used to find the known or unknown version for a short version ordinal value recovered via deserialization. It's returned as a VersionOrdinal (unknown version reference) because in general we don't know if the short will designate a known version (Version). The second method is a safe downcast for the result from the first method. If anyVersion refers to a known version then it is simply downcast and returned, otherwise returnWhenUnknown is returned.\nPackage protection on UnknownVersion keeps construction inside the package and the only place we construct those is in the factory (Versioning). As was the case before this PR, instances of known versions (Version) are constructable only inside Version.java.\nReview Needed\nThis PR eliminates throwing of UnsupportedSerializationVersionException by versioning code. After this PR, the only place that exception is thrown is in TcpServer.\nBecause that exception is no longer thrown, these locales required nontrivial refactoring that would benefit from review:\n\nClientRegistrationMetadata.getAndValidateClientVersion() https://github.com/apache/geode/pull/5344/files#diff-a9fb60b1fcc060dc57ed2bb00f3a604fR117\nServerSideHandshakeFactory.readClientVersion() https://github.com/apache/geode/pull/5344/files#diff-561a1b83fe67d82f661fc2f0d84a80d6R70\nTcpClient.requestToServer() https://github.com/apache/geode/pull/5344/files#diff-614b2350ec08835b7b2179bdef94ff35R153\nTcpServer.processOneConnect() https://github.com/apache/geode/pull/5344/files#diff-094a0faa5954f653b2b3b51d50469854R429\n\nDetails\n\n got rid of confusing and wrong inheritance relationship between VersionOrdinalImpl and Version: now Version (i.e. known version) and UnknownVersion both extend AbstractVersion which implements VersionOrdinal\u2014improved naming of this hierarchy will come, probably in a follow-on PR since it would touch lots of files\n fleshed-out Versioning factory\n\n added Version getKnownVersion(final VersionOrdinal anyVersion, Version returnWhenUnknown) method that simply downcasts anyVersion if it can\n now there is exactly one way to construct a version (VersionOrdinal) from a short, and there is exactly one way to get a known version (Version) from a VersionOrdinal\n\n\n version acquisition no longer throws exceptions ever\n eliminated InternalDistributedMember.getVersionObject() in favor of Versioning.getKnownVersion(Versioning.getVersionOrdinal(ver), Version.CURRENT): the latter makes it clear to maintainers that Version.CURRENT will be used as a stand-in for unknown versions\n moved I/O logic to a separate class, VersioningIO\n eliminated tons of redundant and unused methods in Version\n\nType hierarchy is now:\n\nNames in bold aren't as clear as we'd like so they'll change eventually, in a follow-on PR:\nVersion will become KnownVersion\nVersionOrdinal will become Version yay\nPR Checklist\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?", "createdAt": "2020-07-02T19:06:53Z", "url": "https://github.com/apache/geode/pull/5344", "merged": true, "mergeCommit": {"oid": "868d4bc4298cdd77fe4677bb1535d486cade8693"}, "closed": true, "closedAt": "2020-07-07T19:23:57Z", "author": {"login": "Bill"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcxCAafAH2gAyNDQzNjk0NzM2OjUzY2Y1ZjAyMzhiODBmNzJiZTRiMWYwZjBlZWMyZTM1MGRlODYyOTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyog9fAH2gAyNDQzNjk0NzM2OmY1N2I2MjI4MzcwMWY3NjNjMjQyOGFjYjNlNGIyZDA5NTAzOTVhNjg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "53cf5f0238b80f72be4b1f0f0eec2e350de86291", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/53cf5f0238b80f72be4b1f0f0eec2e350de86291", "committedDate": "2020-07-02T17:08:38Z", "message": "versioning cleanup structural changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce44217a735e04def8738ada8a6128d1d047b8ba", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/ce44217a735e04def8738ada8a6128d1d047b8ba", "committedDate": "2020-07-02T18:57:44Z", "message": "factor IO code into VersioningIO; inlined some redundant methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26f49ad202dc4a533031d917cd9cbf6b993f9c32", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/26f49ad202dc4a533031d917cd9cbf6b993f9c32", "committedDate": "2020-07-02T19:02:50Z", "message": "correct over-ambitious overloading"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95415b884bbf997aca1a2ed2993f2391de080868", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/95415b884bbf997aca1a2ed2993f2391de080868", "committedDate": "2020-07-02T19:34:11Z", "message": "analyze core serializables fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d95afe64c98bef09f0be43e7c3ebfe43a35f87ad", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/d95afe64c98bef09f0be43e7c3ebfe43a35f87ad", "committedDate": "2020-07-02T20:50:14Z", "message": "fix Lucene rolling upgrade test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "508c0fe36304af69b0422fc896fcd6fb8fd94348", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/508c0fe36304af69b0422fc896fcd6fb8fd94348", "committedDate": "2020-07-02T21:24:34Z", "message": "spA"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7d6a5daee7cabd1e8b70d432e0612d25c55f079", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/a7d6a5daee7cabd1e8b70d432e0612d25c55f079", "committedDate": "2020-07-06T18:42:45Z", "message": "eliminate search in Versioning factory; add test cases"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMzM0MTE3", "url": "https://github.com/apache/geode/pull/5344#pullrequestreview-443334117", "createdAt": "2020-07-06T19:00:36Z", "commit": {"oid": "a7d6a5daee7cabd1e8b70d432e0612d25c55f079"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowMDozNlrOGtjiVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOToxMTowOVrOGtj2Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMTMzNQ==", "bodyText": "I think this should be pulled out of the loop.  It's invariant, so we don't need to be doing this calculation every time we invoke fillInValue().", "url": "https://github.com/apache/geode/pull/5344#discussion_r450421335", "createdAt": "2020-07-06T19:00:36Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/InitialImageOperation.java", "diffHunk": "@@ -2038,7 +2039,8 @@ protected boolean chunkEntries(DistributedRegion rgn, int chunkSizeInBytes,\n                     entry.key = key;\n                     entry.setVersionTag(stamp.asVersionTag());\n                     fillRes = mapEntry.fillInValue(rgn, entry, in, rgn.getDistributionManager(),\n-                        sender.getVersionObject());\n+                        Versioning", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7d6a5daee7cabd1e8b70d432e0612d25c55f079"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMTUyMA==", "bodyText": "same here - pull it out of the loop", "url": "https://github.com/apache/geode/pull/5344#discussion_r450421520", "createdAt": "2020-07-06T19:00:56Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/InitialImageOperation.java", "diffHunk": "@@ -2050,7 +2052,8 @@ protected boolean chunkEntries(DistributedRegion rgn, int chunkSizeInBytes,\n                   entry = new InitialImageOperation.Entry();\n                   entry.key = key;\n                   fillRes = mapEntry.fillInValue(rgn, entry, in, rgn.getDistributionManager(),\n-                      sender.getVersionObject());\n+                      Versioning", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7d6a5daee7cabd1e8b70d432e0612d25c55f079"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyNDEyNw==", "bodyText": "It seems like it would be more efficient to have an isKnownVersion() method than to be using instanceof.", "url": "https://github.com/apache/geode/pull/5344#discussion_r450424127", "createdAt": "2020-07-06T19:06:30Z", "author": {"login": "bschuchardt"}, "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/Versioning.java", "diffHunk": "@@ -26,11 +26,40 @@\n public class Versioning {\n   private Versioning() {}\n \n+  /**\n+   * Make a VersionOrdinal for the short ordinal value.\n+   *\n+   * If the short ordinal represents a known version (Version) then return\n+   * that instead of constructing a new VersionOrdinal.\n+   *\n+   * @return a known version (Version) if possible, otherwise a VersionOrdinal.\n+   */\n   public static VersionOrdinal getVersionOrdinal(final short ordinal) {\n-    try {\n-      return Version.fromOrdinal(ordinal);\n-    } catch (final UnsupportedSerializationVersionException e) {\n-      return new VersionOrdinalImpl(ordinal);\n+    final Version knownVersion = Version.getKnownVersion(ordinal, null);\n+    if (knownVersion == null) {\n+      return new UnknownVersion(ordinal);\n+    } else {\n+      return knownVersion;\n+    }\n+  }\n+\n+  /**\n+   * Return the known version (Version) for the VersionOrdinal, if possible.\n+   * Otherwise return the returnWhenUnknown Version. This method essentially\n+   * downcasts a {@link VersionOrdinal} to a known version {@link Version}\n+   *\n+   * @param anyVersion came from a call to {@link #getVersionOrdinal(short)} or this\n+   *        method\n+   * @param returnWhenUnknown will be returned if anyVersion does not represent\n+   *        a known version\n+   * @return a known version\n+   */\n+  public static Version getKnownVersion(final VersionOrdinal anyVersion,\n+      Version returnWhenUnknown) {\n+    if (anyVersion instanceof Version) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7d6a5daee7cabd1e8b70d432e0612d25c55f079"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyNjQ2Nw==", "bodyText": "You're using this pattern a lot.  Versioning.getVersionOrdinal() is going to possibly create an unknown version object and then getKnownVersion() is going to throw it away.  Is there a way to do this w/o creating an object?  Maybe Versioning.getKnownVersion(short, default)?", "url": "https://github.com/apache/geode/pull/5344#discussion_r450426467", "createdAt": "2020-07-06T19:11:09Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/Oplog.java", "diffHunk": "@@ -2077,13 +2078,13 @@ private void readGemfireVersionRecord(DataInput dis, File f) throws IOException\n   }\n \n   private Version readProductVersionRecord(DataInput dis, File f) throws IOException {\n-    Version recoveredGFVersion;\n-    short ver = Version.readOrdinal(dis);\n-    try {\n-      recoveredGFVersion = Version.fromOrdinal(ver);\n-    } catch (UnsupportedSerializationVersionException e) {\n+    short ver = VersioningIO.readOrdinal(dis);\n+    final Version recoveredGFVersion =\n+        Versioning.getKnownVersion(\n+            Versioning.getVersionOrdinal(ver), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7d6a5daee7cabd1e8b70d432e0612d25c55f079"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "442b71ec6b82d0ada188e59aa00672a12644804b", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/442b71ec6b82d0ada188e59aa00672a12644804b", "committedDate": "2020-07-06T22:09:31Z", "message": "hoist version detecton out of loops"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzOTY0Mjgw", "url": "https://github.com/apache/geode/pull/5344#pullrequestreview-443964280", "createdAt": "2020-07-07T14:45:41Z", "commit": {"oid": "95415b884bbf997aca1a2ed2993f2391de080868"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f57b62283701f763c2428acb3e4b2d0950395a68", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/f57b62283701f763c2428acb3e4b2d0950395a68", "committedDate": "2020-07-07T16:34:30Z", "message": "improved naming in Versioning: getKnownVersionOrDefault"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4351, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}