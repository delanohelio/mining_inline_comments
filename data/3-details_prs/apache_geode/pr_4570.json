{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMTk4ODk0", "number": 4570, "title": "GEODE-7655:Restore context with distinct state after a recursion step.", "bodyText": "* After a recursion step within Compiled Select's evaluate statement, the distinct flag was lost for the outer query.\n* The solution was to reset the distinct state back using a temp variable to store the initial distinct flag value.\n* Also, in this diff a else part section was missing converting PDX strings to normal strings for comparison of distinct.\n* When we place this else section converting the PDX string to string for distinct comparison, we don't need to perform this check in the 'element' query function.\n\nRemoving the JPMC related configurations\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-01-07T22:21:35Z", "url": "https://github.com/apache/geode/pull/4570", "merged": true, "mergeCommit": {"oid": "edf0663a7e6f46e4adaf8cefa0245db3d09c12d2"}, "closed": true, "closedAt": "2020-01-08T17:42:57Z", "author": {"login": "nabarunnag"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4IVhPAH2gAyMzYwMTk4ODk0OmJlYjIwNzZhODU1ZDBiYmUzMzRkYzBkZWJhMTZhZjEyYzBjNjllYjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb4VicbgFqTMzOTg2Nzk5MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "beb2076a855d0bbe334dc0deba16af12c0c69eb6", "author": {"user": {"login": "nabarunnag", "name": "Nabarun Nag"}}, "url": "https://github.com/apache/geode/commit/beb2076a855d0bbe334dc0deba16af12c0c69eb6", "committedDate": "2020-01-07T22:17:26Z", "message": "GEODE-7655:Restore context with distinct state after a recursion step.\n\n\t* After a recursion step within Compiled Select's evaluate statement, the distinct flag was lost for the outer query.\n\t* The solution was to reset the distinct state back using a temp variable to store the initial distinct flag value.\n\t* Also, in this diff a else part section was missing converting PDX strings to normal strings for comparison of distinct.\n\t* When we place this else section converting the PDX string to string for distinct comparison, we don't need to perform this check in the 'element' query function.\n\nRemoving the JPMC related configurations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5ODY3OTkx", "url": "https://github.com/apache/geode/pull/4570#pullrequestreview-339867991", "createdAt": "2020-01-08T13:39:06Z", "commit": {"oid": "beb2076a855d0bbe334dc0deba16af12c0c69eb6"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMzozOTowN1rOFbXHMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMzozOTowN1rOFbXHMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIzNDU0Nw==", "bodyText": "Nitpick: this chunk of code can be replaced with something \"easier\" to read:\n  @Rule\n  public ServerStarterRule server =\n      new ServerStarterRule()\n          .withRegion(RegionShortcut.REPLICATE, \"product\")\n          .withProperty(SERIALIZABLE_OBJECT_FILTER, \"org.apache.geode.management.internal.cli.commands.*\")\n          .withPdxSerializer(new ReflectionBasedAutoSerializer(\"org.apache.geode.management.internal.cli.commands.*\"))\n          .withAutoStart();\n\n  @Test\n  public void classCastExceptionShouldNotBeThrownWhileExecutionNestedQueries() throws Exception {\n      Cache cache = server.getCache();\n      Region<Integer, Product> region = cache.getRegion(\"product\");\n      (...)\n}", "url": "https://github.com/apache/geode/pull/4570#discussion_r364234547", "createdAt": "2020-01-08T13:39:07Z", "author": {"login": "jujoramos"}, "path": "geode-dunit/src/main/java/org/apache/geode/management/internal/cli/commands/NestedQueryClassCastExceptionFailureDUnitTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.cli.commands;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.SERIALIZABLE_OBJECT_FILTER;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Properties;\n+import java.util.TreeMap;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.query.QueryService;\n+import org.apache.geode.cache.query.SelectResults;\n+import org.apache.geode.cache.server.CacheServer;\n+import org.apache.geode.pdx.ReflectionBasedAutoSerializer;\n+import org.apache.geode.test.dunit.Host;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.version.VersionManager;\n+\n+public class NestedQueryClassCastExceptionFailureDUnitTest {\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Test\n+  public void classCastExceptionShouldNotBeThrownWhileExecutionNestedQueries() {\n+    Host host = Host.getHost(0);\n+    VM server = host.getVM(VersionManager.CURRENT_VERSION, 0);\n+    server.invoke(() -> {\n+      Properties properties = new Properties();\n+      properties.put(SERIALIZABLE_OBJECT_FILTER,\n+          \"org.apache.geode.management.internal.cli.commands.*\");\n+      Cache cache = new CacheFactory(properties)\n+          .setPdxSerializer(new ReflectionBasedAutoSerializer(\n+              \"org.apache.geode.management.internal.cli.commands.*\"))\n+          .create();\n+\n+      CacheServer cacheServer = cache.addCacheServer();\n+      cacheServer.setPort(0);\n+      cacheServer.start();\n+      Region region = cache.createRegionFactory(RegionShortcut.REPLICATE).create(\"product\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beb2076a855d0bbe334dc0deba16af12c0c69eb6"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3818, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}