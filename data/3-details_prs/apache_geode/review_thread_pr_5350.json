{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MDcyMTY5", "number": 5350, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTowODoxMVrOEMp77w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMjoxMTo0M1rOENEuhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzA1NDU1OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/OperationState.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMTowODoxMVrOGu5SHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMTowMjozNlrOGvhsVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyNjIwNg==", "bodyText": "this is just one line operation, is this not atomic? If not, can we put the synchronize on the method?", "url": "https://github.com/apache/geode/pull/5350#discussion_r451826206", "createdAt": "2020-07-08T21:08:11Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/OperationState.java", "diffHunk": "@@ -28,12 +28,25 @@\n  */\n public class OperationState<A extends ClusterManagementOperation<V>, V extends OperationResult>\n     implements Identifiable<String> {\n+  private static final long serialVersionUID = 8212319653561969588L;\n   private final String opId;\n   private final A operation;\n   private final Date operationStart;\n   private Date operationEnd;\n   private V result;\n   private Throwable throwable;\n+  private String locator;\n+\n+  public String getLocator() {\n+    return this.locator;\n+  }\n+\n+  public void setLocator(\n+      String locator) {\n+    synchronized (this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "830650f602214758bb0535ea0467b668f9aef26e"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4ODI3Nw==", "bodyText": "This is for consistency. setOperationEnd() does the same.", "url": "https://github.com/apache/geode/pull/5350#discussion_r452488277", "createdAt": "2020-07-09T21:02:36Z", "author": {"login": "jchen21"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/OperationState.java", "diffHunk": "@@ -28,12 +28,25 @@\n  */\n public class OperationState<A extends ClusterManagementOperation<V>, V extends OperationResult>\n     implements Identifiable<String> {\n+  private static final long serialVersionUID = 8212319653561969588L;\n   private final String opId;\n   private final A operation;\n   private final Date operationStart;\n   private Date operationEnd;\n   private V result;\n   private Throwable throwable;\n+  private String locator;\n+\n+  public String getLocator() {\n+    return this.locator;\n+  }\n+\n+  public void setLocator(\n+      String locator) {\n+    synchronized (this) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgyNjIwNg=="}, "originalCommit": {"oid": "830650f602214758bb0535ea0467b668f9aef26e"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNzEwMDAxOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/OperationStateStore.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQyMToyNDoxNVrOGu5u7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMTowMzoxNVrOGvhtyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzMzU4Mg==", "bodyText": "instead of adding this interface, you can change the method of recordStart() to add the a locator id parameter, since when started, we should always know what locator started this operation.", "url": "https://github.com/apache/geode/pull/5350#discussion_r451833582", "createdAt": "2020-07-08T21:24:15Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/OperationStateStore.java", "diffHunk": "@@ -53,6 +53,8 @@\n    */\n   <V extends OperationResult> void recordEnd(String opId, V result, Throwable exception);\n \n+  void recordLocator(String opId, String locator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "830650f602214758bb0535ea0467b668f9aef26e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjQ4ODY0OA==", "bodyText": "Good point.", "url": "https://github.com/apache/geode/pull/5350#discussion_r452488648", "createdAt": "2020-07-09T21:03:15Z", "author": {"login": "jchen21"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/OperationStateStore.java", "diffHunk": "@@ -53,6 +53,8 @@\n    */\n   <V extends OperationResult> void recordEnd(String opId, V result, Throwable exception);\n \n+  void recordLocator(String opId, String locator);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTgzMzU4Mg=="}, "originalCommit": {"oid": "830650f602214758bb0535ea0467b668f9aef26e"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTQzODU1OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/OperationState.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMjowOToyMFrOGvjfdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzowNzo1NVrOGvkrzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxNzc1MQ==", "bodyText": "Can this be DistributedID than a String ID. That way we can avoid converting to string in other places?", "url": "https://github.com/apache/geode/pull/5350#discussion_r452517751", "createdAt": "2020-07-09T22:09:20Z", "author": {"login": "agingade"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/OperationState.java", "diffHunk": "@@ -28,12 +28,25 @@\n  */\n public class OperationState<A extends ClusterManagementOperation<V>, V extends OperationResult>\n     implements Identifiable<String> {\n+  private static final long serialVersionUID = 8212319653561969588L;\n   private final String opId;\n   private final A operation;\n   private final Date operationStart;\n   private Date operationEnd;\n   private V result;\n   private Throwable throwable;\n+  private String locator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "830650f602214758bb0535ea0467b668f9aef26e"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNzI5Mg==", "bodyText": "Do you mean InternalDistributedMember when you talk about DistributedID? I was using the InternalDistributedMember as the type for locator field. But it is a large object with many fields. We only need to identify the locator, so a String type of a member's ID should be good.", "url": "https://github.com/apache/geode/pull/5350#discussion_r452537292", "createdAt": "2020-07-09T23:07:55Z", "author": {"login": "jchen21"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/OperationState.java", "diffHunk": "@@ -28,12 +28,25 @@\n  */\n public class OperationState<A extends ClusterManagementOperation<V>, V extends OperationResult>\n     implements Identifiable<String> {\n+  private static final long serialVersionUID = 8212319653561969588L;\n   private final String opId;\n   private final A operation;\n   private final Date operationStart;\n   private Date operationEnd;\n   private V result;\n   private Throwable throwable;\n+  private String locator;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxNzc1MQ=="}, "originalCommit": {"oid": "830650f602214758bb0535ea0467b668f9aef26e"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTQ0MzkwOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/OperationHistoryManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMjoxMTo0M1rOGvjisQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMjo1OToxNFrOGvkhLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxODU3Nw==", "bodyText": "Does it need to be compared? can it be changed to \"equals\"....", "url": "https://github.com/apache/geode/pull/5350#discussion_r452518577", "createdAt": "2020-07-09T22:11:43Z", "author": {"login": "agingade"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/OperationHistoryManager.java", "diffHunk": "@@ -90,6 +95,27 @@ private static boolean isExpired(long expirationTime, OperationState<?, ?> opera\n     return operationEnd.getTime() <= expirationTime;\n   }\n \n+  private OperationState<?, ?> validateLocator(OperationState<?, ?> operationState) {\n+    if (isLocatorOffline(operationState)) {\n+      operationState.setOperationEnd(new Date(), null,\n+          new RuntimeException(\"Locator that initiated the Rest API operation is offline: \"\n+              + operationState.getLocator()));\n+    }\n+\n+    return operationState;\n+  }\n+\n+  private boolean isLocatorOffline(OperationState operationState) {\n+    if (operationState.getOperationEnd() == null\n+        && (operationState.getLocator() != null)\n+        && cache.getMyId().toString().compareTo(operationState.getLocator()) != 0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "830650f602214758bb0535ea0467b668f9aef26e"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzNDU3NA==", "bodyText": "Good point!", "url": "https://github.com/apache/geode/pull/5350#discussion_r452534574", "createdAt": "2020-07-09T22:59:14Z", "author": {"login": "jchen21"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/operation/OperationHistoryManager.java", "diffHunk": "@@ -90,6 +95,27 @@ private static boolean isExpired(long expirationTime, OperationState<?, ?> opera\n     return operationEnd.getTime() <= expirationTime;\n   }\n \n+  private OperationState<?, ?> validateLocator(OperationState<?, ?> operationState) {\n+    if (isLocatorOffline(operationState)) {\n+      operationState.setOperationEnd(new Date(), null,\n+          new RuntimeException(\"Locator that initiated the Rest API operation is offline: \"\n+              + operationState.getLocator()));\n+    }\n+\n+    return operationState;\n+  }\n+\n+  private boolean isLocatorOffline(OperationState operationState) {\n+    if (operationState.getOperationEnd() == null\n+        && (operationState.getLocator() != null)\n+        && cache.getMyId().toString().compareTo(operationState.getLocator()) != 0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxODU3Nw=="}, "originalCommit": {"oid": "830650f602214758bb0535ea0467b668f9aef26e"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3911, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}