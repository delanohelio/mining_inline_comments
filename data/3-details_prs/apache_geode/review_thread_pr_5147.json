{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxNjQ2OTgy", "number": 5147, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMDoyMTozMFrOD-yniA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMTowMzo1MVrOEARjhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTY3NjI0OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/cache/Region.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMDoyMTozMFrOGZG9Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNzowNDoxMFrOGZeBSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4MTU3OA==", "bodyText": "\"the entries\" are they in two different lines or it is my browser. If they are two lines, it will be nice to have in the same line.", "url": "https://github.com/apache/geode/pull/5147#discussion_r428981578", "createdAt": "2020-05-22T00:21:30Z", "author": {"login": "agingade"}, "path": "geode-core/src/main/java/org/apache/geode/cache/Region.java", "diffHunk": "@@ -1359,10 +1359,30 @@ Object selectValue(String queryPredicate) throws FunctionDomainException, TypeMi\n    * in the specified map. This operation will be distributed to other caches if the scope is not\n    * <code>Scope.LOCAL</code>.\n    *\n-   * @param map the key/value pairs to put in this region.\n-   * @since GemFire 5.0\n+   * If any exception is thrown due to this call, it can imply that there may have been a partial\n+   * update performed on the region. Use putAll from within a transaction to get atomicity with all\n+   * the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d14cb54837f26a72b292b6cadfd82c17633dfb3d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTM1OTQzNQ==", "bodyText": "fixed.", "url": "https://github.com/apache/geode/pull/5147#discussion_r429359435", "createdAt": "2020-05-22T17:04:10Z", "author": {"login": "gesterzhou"}, "path": "geode-core/src/main/java/org/apache/geode/cache/Region.java", "diffHunk": "@@ -1359,10 +1359,30 @@ Object selectValue(String queryPredicate) throws FunctionDomainException, TypeMi\n    * in the specified map. This operation will be distributed to other caches if the scope is not\n    * <code>Scope.LOCAL</code>.\n    *\n-   * @param map the key/value pairs to put in this region.\n-   * @since GemFire 5.0\n+   * If any exception is thrown due to this call, it can imply that there may have been a partial\n+   * update performed on the region. Use putAll from within a transaction to get atomicity with all\n+   * the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4MTU3OA=="}, "originalCommit": {"oid": "d14cb54837f26a72b292b6cadfd82c17633dfb3d"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MTY3OTk2OnYy", "diffSide": "RIGHT", "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PutAllClientServerDistributedTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMDoyMzozOVrOGZG_jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwMDoyMzozOVrOGZG_jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODk4MjE1Nw==", "bodyText": "May be changing it to \"throwsExpectedExceptions\"?", "url": "https://github.com/apache/geode/pull/5147#discussion_r428982157", "createdAt": "2020-05-22T00:23:39Z", "author": {"login": "agingade"}, "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PutAllClientServerDistributedTest.java", "diffHunk": "@@ -1827,6 +1829,135 @@ public void testPartialKeyInLocalRegion() {\n     });\n   }\n \n+  /**\n+   * Verify all the possible exceptions a putAll/put/removeAll/destroy could return\n+   */\n+  @Test\n+  public void testPutAllReturnsExceptions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d14cb54837f26a72b292b6cadfd82c17633dfb3d"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MzcyOTgzOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/cache/Region.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNToxNzo1NVrOGZa6Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNToxNzo1NVrOGZa6Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMwODQ5MA==", "bodyText": "This sentence is missing some pronouns, and the last sentence might be worded better.  Here's my attempt at a rewrite:\nIf an exception is thrown due to this call, it can imply that there may have been a partial\n\nupdate performed on the region. Use putAll from within a transaction to obtain\nan atomic update.", "url": "https://github.com/apache/geode/pull/5147#discussion_r429308490", "createdAt": "2020-05-22T15:17:55Z", "author": {"login": "karensmolermiller"}, "path": "geode-core/src/main/java/org/apache/geode/cache/Region.java", "diffHunk": "@@ -1359,10 +1359,30 @@ Object selectValue(String queryPredicate) throws FunctionDomainException, TypeMi\n    * in the specified map. This operation will be distributed to other caches if the scope is not\n    * <code>Scope.LOCAL</code>.\n    *\n-   * @param map the key/value pairs to put in this region.\n-   * @since GemFire 5.0\n+   * If any exception is thrown due to this call, it can imply that there may have been a partial\n+   * update performed on the region. Use putAll from within a transaction to get atomicity with all\n+   * the\n+   * entries.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d14cb54837f26a72b292b6cadfd82c17633dfb3d"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzIyNTg1OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/cache/Region.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMTowMjoxMVrOGbdApA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMToyMjo0OVrOGbdohw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ0MDAzNg==", "bodyText": "Please slightly reword LeaseExpiredException (in BOTH putall signatures):\nif the lease expired on a distributed lock, for regions with Scope.GLOBAL", "url": "https://github.com/apache/geode/pull/5147#discussion_r431440036", "createdAt": "2020-05-27T21:02:11Z", "author": {"login": "karensmolermiller"}, "path": "geode-core/src/main/java/org/apache/geode/cache/Region.java", "diffHunk": "@@ -1362,49 +1362,77 @@ Object selectValue(String queryPredicate) throws FunctionDomainException, TypeMi\n    * <code>Scope.LOCAL</code>.\n    *\n    * If an exception is thrown due to this call, it can imply that there may have been a partial\n-   * update performed on the region. Use putAll from within a transaction to to obtain an atomic\n-   * update.\n+   * update performed on the region.\n    * <p>\n    *\n    * @see java.util.Map#putAll(Map map)\n-   * @param map the key/value pairs to put in this region.\n+   * @param map the key/value pairs to put in this region\n+   * @throws ServerOperationException if called from a client, and the server throws an exception\n+   *         such as CacheWriterException, PartitionedRegionStorageException or LowMemoryException.\n+   *         These server exceptions become the ServerOperationException cause\n+   * @throws ServerConnectivityException if called from a client, and the server throws\n+   *         CancelException. CancelException will be the ServerConnectivityException cause\n    * @throws NullPointerException if key is null or if value is null (use invalidate instead), or if\n    *         the key or value do not meet serializability requirements\n    * @throws ClassCastException if key does not satisfy the keyConstraint\n-   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock\n-   *         for Scope.GLOBAL\n-   * @throws TimeoutException if timed out getting distributed lock for Scope.GLOBAL\n+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed\n+   *         lock for regions with Scope.GLOBAL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "854ec9c4d62395bfd79e4f9bd5d2b724bae6d212"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ1MDI0Nw==", "bodyText": "fixed", "url": "https://github.com/apache/geode/pull/5147#discussion_r431450247", "createdAt": "2020-05-27T21:22:49Z", "author": {"login": "gesterzhou"}, "path": "geode-core/src/main/java/org/apache/geode/cache/Region.java", "diffHunk": "@@ -1362,49 +1362,77 @@ Object selectValue(String queryPredicate) throws FunctionDomainException, TypeMi\n    * <code>Scope.LOCAL</code>.\n    *\n    * If an exception is thrown due to this call, it can imply that there may have been a partial\n-   * update performed on the region. Use putAll from within a transaction to to obtain an atomic\n-   * update.\n+   * update performed on the region.\n    * <p>\n    *\n    * @see java.util.Map#putAll(Map map)\n-   * @param map the key/value pairs to put in this region.\n+   * @param map the key/value pairs to put in this region\n+   * @throws ServerOperationException if called from a client, and the server throws an exception\n+   *         such as CacheWriterException, PartitionedRegionStorageException or LowMemoryException.\n+   *         These server exceptions become the ServerOperationException cause\n+   * @throws ServerConnectivityException if called from a client, and the server throws\n+   *         CancelException. CancelException will be the ServerConnectivityException cause\n    * @throws NullPointerException if key is null or if value is null (use invalidate instead), or if\n    *         the key or value do not meet serializability requirements\n    * @throws ClassCastException if key does not satisfy the keyConstraint\n-   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed lock\n-   *         for Scope.GLOBAL\n-   * @throws TimeoutException if timed out getting distributed lock for Scope.GLOBAL\n+   * @throws org.apache.geode.distributed.LeaseExpiredException if lease expired on distributed\n+   *         lock for regions with Scope.GLOBAL", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ0MDAzNg=="}, "originalCommit": {"oid": "854ec9c4d62395bfd79e4f9bd5d2b724bae6d212"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NzIzMDc4OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/cache/Region.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMTowMzo1MVrOGbdD3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QyMToyMjo0MVrOGbdoRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ0MDg2Mw==", "bodyText": "Please slightly reword NullPointerException (in BOTH putAll signatures):\nif the key is null, if the value is null (use invalidate instead), or if the key or value do not meet serialization requirements", "url": "https://github.com/apache/geode/pull/5147#discussion_r431440863", "createdAt": "2020-05-27T21:03:51Z", "author": {"login": "karensmolermiller"}, "path": "geode-core/src/main/java/org/apache/geode/cache/Region.java", "diffHunk": "@@ -1362,49 +1362,77 @@ Object selectValue(String queryPredicate) throws FunctionDomainException, TypeMi\n    * <code>Scope.LOCAL</code>.\n    *\n    * If an exception is thrown due to this call, it can imply that there may have been a partial\n-   * update performed on the region. Use putAll from within a transaction to to obtain an atomic\n-   * update.\n+   * update performed on the region.\n    * <p>\n    *\n    * @see java.util.Map#putAll(Map map)\n-   * @param map the key/value pairs to put in this region.\n+   * @param map the key/value pairs to put in this region\n+   * @throws ServerOperationException if called from a client, and the server throws an exception\n+   *         such as CacheWriterException, PartitionedRegionStorageException or LowMemoryException.\n+   *         These server exceptions become the ServerOperationException cause\n+   * @throws ServerConnectivityException if called from a client, and the server throws\n+   *         CancelException. CancelException will be the ServerConnectivityException cause\n    * @throws NullPointerException if key is null or if value is null (use invalidate instead), or if\n    *         the key or value do not meet serializability requirements", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "854ec9c4d62395bfd79e4f9bd5d2b724bae6d212"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ1MDE4Mg==", "bodyText": "fixed.", "url": "https://github.com/apache/geode/pull/5147#discussion_r431450182", "createdAt": "2020-05-27T21:22:41Z", "author": {"login": "gesterzhou"}, "path": "geode-core/src/main/java/org/apache/geode/cache/Region.java", "diffHunk": "@@ -1362,49 +1362,77 @@ Object selectValue(String queryPredicate) throws FunctionDomainException, TypeMi\n    * <code>Scope.LOCAL</code>.\n    *\n    * If an exception is thrown due to this call, it can imply that there may have been a partial\n-   * update performed on the region. Use putAll from within a transaction to to obtain an atomic\n-   * update.\n+   * update performed on the region.\n    * <p>\n    *\n    * @see java.util.Map#putAll(Map map)\n-   * @param map the key/value pairs to put in this region.\n+   * @param map the key/value pairs to put in this region\n+   * @throws ServerOperationException if called from a client, and the server throws an exception\n+   *         such as CacheWriterException, PartitionedRegionStorageException or LowMemoryException.\n+   *         These server exceptions become the ServerOperationException cause\n+   * @throws ServerConnectivityException if called from a client, and the server throws\n+   *         CancelException. CancelException will be the ServerConnectivityException cause\n    * @throws NullPointerException if key is null or if value is null (use invalidate instead), or if\n    *         the key or value do not meet serializability requirements", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTQ0MDg2Mw=="}, "originalCommit": {"oid": "854ec9c4d62395bfd79e4f9bd5d2b724bae6d212"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4094, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}