{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NTE4MjMy", "number": 4819, "title": "GEODE-7885: Improve RedisLockService - fix synchronization and memory leak", "bodyText": "RedisLockService was not able to automatically free keys/locks after\nunlocking since keys were also beging referenced in regions.\nFix synchronization while iterating over keySet to avoid\nConcurrentModifiactionExceptions.\n\nCo-Authored-By: Sarah Abbey sabbey@pivotal.io\nCo-Authored-By: Ray Ingles ringles@pivotal.io\nCo-Authored-By: John Hutchison jhutchison@pivotal.io", "createdAt": "2020-03-16T22:08:33Z", "url": "https://github.com/apache/geode/pull/4819", "merged": true, "mergeCommit": {"oid": "32cadc2e0bf75f4ca265c3f55897434d1d0f7035"}, "closed": true, "closedAt": "2020-03-18T18:07:47Z", "author": {"login": "jdeppe-pivotal"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOVf3XAH2gAyMzg5NTE4MjMyOjk0Mzk0NWZiZDVmNDUzN2ZlNjU5NTQ2NzRjYzNmOTNmMmZjN2ZlNjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcO5t8yAFqTM3NzAwMTQ2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "943945fbd5f4537fe65954674cc3f93f2fc7fe68", "author": {"user": {"login": "jdeppe-pivotal", "name": "Jens Deppe"}}, "url": "https://github.com/apache/geode/commit/943945fbd5f4537fe65954674cc3f93f2fc7fe68", "committedDate": "2020-03-16T22:03:50Z", "message": "GEODE-7885: Improve RedisLockService - fix synchronization and memory leak\n\n- RedisLockService was not able to automatically free keys/locks after\n  unlocking since keys were also beging referenced in regions.\n- Fix synchronization while iterating over keySet to avoid\n  ConcurrentModifiactionExceptions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b67ce414c08df5ce6cbaf0cbeefcb7b5903fc0b5", "author": {"user": {"login": "jdeppe-pivotal", "name": "Jens Deppe"}}, "url": "https://github.com/apache/geode/commit/b67ce414c08df5ce6cbaf0cbeefcb7b5903fc0b5", "committedDate": "2020-03-17T13:56:32Z", "message": "Fix dependency housekeeping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b7d31b6a56a19e6a2c5ac36ca44ab35b3581914", "author": {"user": {"login": "jdeppe-pivotal", "name": "Jens Deppe"}}, "url": "https://github.com/apache/geode/commit/6b7d31b6a56a19e6a2c5ac36ca44ab35b3581914", "committedDate": "2020-03-17T18:25:10Z", "message": "Add test for lock service key leakage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5b010a7474ec6989992f06f10d646daba972b63", "author": {"user": {"login": "jdeppe-pivotal", "name": "Jens Deppe"}}, "url": "https://github.com/apache/geode/commit/d5b010a7474ec6989992f06f10d646daba972b63", "committedDate": "2020-03-17T20:45:26Z", "message": "Add test for ConcurrentModificationException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dec035d4ee645f8835be8ec735dbd6a54948e3ef", "author": {"user": {"login": "jdeppe-pivotal", "name": "Jens Deppe"}}, "url": "https://github.com/apache/geode/commit/dec035d4ee645f8835be8ec735dbd6a54948e3ef", "committedDate": "2020-03-17T21:40:52Z", "message": "spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NDQ1MDg2", "url": "https://github.com/apache/geode/pull/4819#pullrequestreview-376445086", "createdAt": "2020-03-17T22:20:22Z", "commit": {"oid": "dec035d4ee645f8835be8ec735dbd6a54948e3ef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoyMDoyMlrOF3wEWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoyMDoyMlrOF3wEWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwMzU0Ng==", "bodyText": "I don't understand this logic. If weakReferencesTolocks.putIfAbsent(lockKey, lock) returns a value, then you already have a reference to the lockKey. OR am I mistaken about this?", "url": "https://github.com/apache/geode/pull/4819#discussion_r394003546", "createdAt": "2020-03-17T22:20:22Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/RedisLockService.java", "diffHunk": "@@ -70,29 +71,38 @@ public AutoCloseableLock lock(ByteArrayWrapper key) throws InterruptedException\n       throw new IllegalArgumentException(\"key cannot be null\");\n     }\n \n+    KeyHashIdentifier lockKey = new KeyHashIdentifier(key.toBytes());\n     Lock lock = new ReentrantLock();\n-    Lock oldLock = map.putIfAbsent(key, lock);\n+    Lock oldLock = weakReferencesTolocks.putIfAbsent(lockKey, lock);\n+\n     if (oldLock != null) {\n       lock = oldLock;\n-      // we need to get a reference to the actual key object so that the backing WeakHashMap does\n-      // not clean it up.\n-      for (ByteArrayWrapper keyInSet : map.keySet()) {\n-        if (keyInSet.equals(key)) {\n-          key = keyInSet;\n-          break;\n-        }\n-      }\n+\n+      // we need to get a reference to the actual key object\n+      // so that the backing WeakHashMap does not clean it up\n+      // when garbage collection happens.\n+      lockKey = getReferenceToLockKey(lockKey);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dec035d4ee645f8835be8ec735dbd6a54948e3ef"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NDQ2Njkz", "url": "https://github.com/apache/geode/pull/4819#pullrequestreview-376446693", "createdAt": "2020-03-17T22:23:54Z", "commit": {"oid": "dec035d4ee645f8835be8ec735dbd6a54948e3ef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoyMzo1NVrOF3wJ_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMjoyMzo1NVrOF3wJ_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDAwNDk4OQ==", "bodyText": "you can just return keyInSet without having to set it onto referenceToLockKey and return null on line 105", "url": "https://github.com/apache/geode/pull/4819#discussion_r394004989", "createdAt": "2020-03-17T22:23:55Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/RedisLockService.java", "diffHunk": "@@ -70,29 +71,38 @@ public AutoCloseableLock lock(ByteArrayWrapper key) throws InterruptedException\n       throw new IllegalArgumentException(\"key cannot be null\");\n     }\n \n+    KeyHashIdentifier lockKey = new KeyHashIdentifier(key.toBytes());\n     Lock lock = new ReentrantLock();\n-    Lock oldLock = map.putIfAbsent(key, lock);\n+    Lock oldLock = weakReferencesTolocks.putIfAbsent(lockKey, lock);\n+\n     if (oldLock != null) {\n       lock = oldLock;\n-      // we need to get a reference to the actual key object so that the backing WeakHashMap does\n-      // not clean it up.\n-      for (ByteArrayWrapper keyInSet : map.keySet()) {\n-        if (keyInSet.equals(key)) {\n-          key = keyInSet;\n-          break;\n-        }\n-      }\n+\n+      // we need to get a reference to the actual key object\n+      // so that the backing WeakHashMap does not clean it up\n+      // when garbage collection happens.\n+      lockKey = getReferenceToLockKey(lockKey);\n     }\n \n     if (!lock.tryLock(timeoutMS, TimeUnit.MILLISECONDS)) {\n-      throw new TimeoutException(\"Couldn't get lock for \" + key.toString());\n+      throw new TimeoutException(\"Couldn't get lock for \" + lockKey.toString());\n     }\n \n-    return new AutoCloseableLock(key, lock);\n+    return new AutoCloseableLock(lockKey, lock);\n   }\n \n-  int getMapSize() {\n-    return map.size();\n+  private KeyHashIdentifier getReferenceToLockKey(KeyHashIdentifier lockKey) {\n+    KeyHashIdentifier referenceToLockKey = null;\n+\n+    synchronized (weakReferencesTolocks) {\n+      for (KeyHashIdentifier keyInSet : weakReferencesTolocks.keySet()) {\n+        if (keyInSet.equals(lockKey)) {\n+          referenceToLockKey = keyInSet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dec035d4ee645f8835be8ec735dbd6a54948e3ef"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d175f85310acd8581049814824bd426a61401c79", "author": {"user": {"login": "jdeppe-pivotal", "name": "Jens Deppe"}}, "url": "https://github.com/apache/geode/commit/d175f85310acd8581049814824bd426a61401c79", "committedDate": "2020-03-18T04:43:46Z", "message": "Locking is hard to get right"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f4a86f7cc8aba6f9edb3ecfbb5a887d07209ae5", "author": {"user": {"login": "jdeppe-pivotal", "name": "Jens Deppe"}}, "url": "https://github.com/apache/geode/commit/4f4a86f7cc8aba6f9edb3ecfbb5a887d07209ae5", "committedDate": "2020-03-18T15:29:22Z", "message": "Review updates - move lock creation out of loop"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDAxNDY1", "url": "https://github.com/apache/geode/pull/4819#pullrequestreview-377001465", "createdAt": "2020-03-18T15:53:56Z", "commit": {"oid": "d175f85310acd8581049814824bd426a61401c79"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo1Mzo1NlrOF4LlVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo1NDoyM1rOF4Lm3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1NDM1OQ==", "bodyText": "please use real names not two characters...", "url": "https://github.com/apache/geode/pull/4819#discussion_r394454359", "createdAt": "2020-03-18T15:53:56Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/RedisLockServiceIntegrationTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;\n+import static org.apache.geode.distributed.ConfigurationProperties.LOG_LEVEL;\n+import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.GemFireCache;\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.test.awaitility.GeodeAwaitility;\n+\n+public class RedisLockServiceIntegrationTest {\n+\n+  private static final int REDIS_CLIENT_TIMEOUT = 100000;\n+  private static GeodeRedisServer server;\n+  private static GemFireCache cache;\n+  private static Jedis jedis;\n+  private static int port = 6379;\n+\n+  @BeforeClass\n+  public static void setUp() {\n+    CacheFactory cf = new CacheFactory();\n+    cf.set(LOG_LEVEL, \"warn\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d175f85310acd8581049814824bd426a61401c79"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1NDc1MA==", "bodyText": "real names... not 3 character variable names", "url": "https://github.com/apache/geode/pull/4819#discussion_r394454750", "createdAt": "2020-03-18T15:54:23Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/GeodeRedisServer.java", "diffHunk": "@@ -507,9 +510,17 @@ private void initializeRedis() {\n     registerLockServiceMBean();\n   }\n \n+  @VisibleForTesting\n+  public RedisLockService getLockService() {\n+    return hashLockService;\n+  }\n+\n   private void registerLockServiceMBean() {\n+    ManagementService sms = SystemManagementService.getManagementService(cache);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d175f85310acd8581049814824bd426a61401c79"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4876, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}