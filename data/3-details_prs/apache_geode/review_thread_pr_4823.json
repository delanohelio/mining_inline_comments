{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMTkxMTI5", "number": 4823, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzo1MDo1MFrODpUS1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODo0MToxNFrODp-jJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjUwNzA4OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/management/internal/ManagementAgent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzo1MDo1MFrOF4azXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzo1MDo1MFrOF4azXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwMzcxMA==", "bodyText": "this code repeats \"spring.profiles.active\" four times. Consider changing it to just call System.setProperty once (at the end). You could introduce a localvar \"String activeProfileValue\" and have each of these lines set that local var.", "url": "https://github.com/apache/geode/pull/4823#discussion_r394703710", "createdAt": "2020-03-18T23:50:50Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/ManagementAgent.java", "diffHunk": "@@ -192,9 +194,20 @@ private void loadWebApplications() {\n         logger.debug(message);\n       }\n     } else {\n+      String[] authTokenEnabledComponents = config.getSecurityAuthTokenEnabledComponents();\n+      boolean pulseOauth = Arrays.stream(authTokenEnabledComponents)\n+          .anyMatch(AuthTokenEnabledComponents::hasPulse);\n       String pwFile = this.config.getJmxManagerPasswordFile();\n-      if (securityService.isIntegratedSecurity() || StringUtils.isNotBlank(pwFile)) {\n+      if (securityService.isIntegratedSecurity()) {\n+        if (pulseOauth) {\n+          System.setProperty(\"spring.profiles.active\", \"pulse.authentication.oauth\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49726156d3275a9f7f8822afccaa4358125000e0"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjUxMjU4OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/management/internal/ManagementAgent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzo1MzozM1rOF4a2tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzo1MzozM1rOF4a2tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNDU2NA==", "bodyText": "Since you only use \"pulseOauth\" inside the if(isIntegratedSecurity) would it be better to initialize the variable inside that if?", "url": "https://github.com/apache/geode/pull/4823#discussion_r394704564", "createdAt": "2020-03-18T23:53:33Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/ManagementAgent.java", "diffHunk": "@@ -192,9 +194,20 @@ private void loadWebApplications() {\n         logger.debug(message);\n       }\n     } else {\n+      String[] authTokenEnabledComponents = config.getSecurityAuthTokenEnabledComponents();\n+      boolean pulseOauth = Arrays.stream(authTokenEnabledComponents)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49726156d3275a9f7f8822afccaa4358125000e0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NjUyMjA1OnYy", "diffSide": "RIGHT", "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/security/OauthSecurityConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzo1ODozNlrOF4a8lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMToyODo1OVrOF4c7RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNjA2OQ==", "bodyText": "It looks like we only have uaa support here. So if a customer is using oauth2 will it only work with uaa or can the configure it for some other oauth2 authentication server?", "url": "https://github.com/apache/geode/pull/4823#discussion_r394706069", "createdAt": "2020-03-18T23:58:36Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/security/OauthSecurityConfig.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse.internal.security;\n+\n+import static org.springframework.security.config.Customizer.withDefaults;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+\n+@Configuration\n+@EnableWebSecurity\n+@EnableGlobalMethodSecurity(prePostEnabled = true)\n+@Profile(\"pulse.authentication.oauth\")\n+@PropertySource(\"classpath:pulse.properties\")\n+public class OauthSecurityConfig extends WebSecurityConfigurerAdapter {\n+  @Value(\"${pulse.oauth.provider}\")\n+  private String providerId;\n+  @Value(\"${pulse.oauth.clientId}\")\n+  private String clientId;\n+  @Value(\"${pulse.oauth.clientSecret}\")\n+  private String clientSecret;\n+  @Value(\"${pulse.oauth.authorizationUri}\")\n+  private String authorizationUri;\n+  @Value(\"${pulse.oauth.tokenUri}\")\n+  private String tokenUri;\n+  @Value(\"${pulse.oauth.userInfoUri}\")\n+  private String userInfoUri;\n+  @Value(\"${pulse.oauth.jwkSetUri}\")\n+  private String jwkSetUri;\n+  @Value(\"${pulse.oauth.userNameAttributeName}\")\n+  private String userNameAttributeName;\n+\n+  @Override\n+  protected void configure(HttpSecurity http) throws Exception {\n+    http.authorizeRequests(authorize -> authorize\n+        .anyRequest().authenticated())\n+        .oauth2Login(withDefaults());\n+  }\n+\n+  @Bean\n+  public ClientRegistrationRepository clientRegistrationRepository() {\n+    return new InMemoryClientRegistrationRepository(this.uaaClientRegistration());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49726156d3275a9f7f8822afccaa4358125000e0"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDczODUwMQ==", "bodyText": "actually that name can be changed", "url": "https://github.com/apache/geode/pull/4823#discussion_r394738501", "createdAt": "2020-03-19T01:28:59Z", "author": {"login": "jinmeiliao"}, "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/security/OauthSecurityConfig.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse.internal.security;\n+\n+import static org.springframework.security.config.Customizer.withDefaults;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+\n+@Configuration\n+@EnableWebSecurity\n+@EnableGlobalMethodSecurity(prePostEnabled = true)\n+@Profile(\"pulse.authentication.oauth\")\n+@PropertySource(\"classpath:pulse.properties\")\n+public class OauthSecurityConfig extends WebSecurityConfigurerAdapter {\n+  @Value(\"${pulse.oauth.provider}\")\n+  private String providerId;\n+  @Value(\"${pulse.oauth.clientId}\")\n+  private String clientId;\n+  @Value(\"${pulse.oauth.clientSecret}\")\n+  private String clientSecret;\n+  @Value(\"${pulse.oauth.authorizationUri}\")\n+  private String authorizationUri;\n+  @Value(\"${pulse.oauth.tokenUri}\")\n+  private String tokenUri;\n+  @Value(\"${pulse.oauth.userInfoUri}\")\n+  private String userInfoUri;\n+  @Value(\"${pulse.oauth.jwkSetUri}\")\n+  private String jwkSetUri;\n+  @Value(\"${pulse.oauth.userNameAttributeName}\")\n+  private String userNameAttributeName;\n+\n+  @Override\n+  protected void configure(HttpSecurity http) throws Exception {\n+    http.authorizeRequests(authorize -> authorize\n+        .anyRequest().authenticated())\n+        .oauth2Login(withDefaults());\n+  }\n+\n+  @Bean\n+  public ClientRegistrationRepository clientRegistrationRepository() {\n+    return new InMemoryClientRegistrationRepository(this.uaaClientRegistration());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNjA2OQ=="}, "originalCommit": {"oid": "49726156d3275a9f7f8822afccaa4358125000e0"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODkxMjkyOnYy", "diffSide": "RIGHT", "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/security/OauthSecurityConfig.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTowMDo1MVrOF4yjIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNjoyNzoxNlrOF42cPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5Mjc3MA==", "bodyText": "Do we need to add something here to take of where the app goes after logging out? For OAuth this should be different from Default or Gemfire flows I believe.", "url": "https://github.com/apache/geode/pull/4823#discussion_r395092770", "createdAt": "2020-03-19T15:00:51Z", "author": {"login": "jmelchio"}, "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/security/OauthSecurityConfig.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse.internal.security;\n+\n+import static org.springframework.security.config.Customizer.withDefaults;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+\n+@Configuration\n+@EnableWebSecurity\n+@EnableGlobalMethodSecurity(prePostEnabled = true)\n+@Profile(\"pulse.authentication.oauth\")\n+@PropertySource(\"classpath:pulse.properties\")\n+public class OauthSecurityConfig extends WebSecurityConfigurerAdapter {\n+  @Value(\"${pulse.oauth.provider}\")\n+  private String providerId;\n+  @Value(\"${pulse.oauth.clientId}\")\n+  private String clientId;\n+  @Value(\"${pulse.oauth.clientSecret}\")\n+  private String clientSecret;\n+  @Value(\"${pulse.oauth.authorizationUri}\")\n+  private String authorizationUri;\n+  @Value(\"${pulse.oauth.tokenUri}\")\n+  private String tokenUri;\n+  @Value(\"${pulse.oauth.userInfoUri}\")\n+  private String userInfoUri;\n+  @Value(\"${pulse.oauth.jwkSetUri}\")\n+  private String jwkSetUri;\n+  @Value(\"${pulse.oauth.userNameAttributeName}\")\n+  private String userNameAttributeName;\n+\n+  @Override\n+  protected void configure(HttpSecurity http) throws Exception {\n+    http.authorizeRequests(authorize -> authorize\n+        .anyRequest().authenticated())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5NDU4MA==", "bodyText": "In your test, what does it do?", "url": "https://github.com/apache/geode/pull/4823#discussion_r395094580", "createdAt": "2020-03-19T15:03:11Z", "author": {"login": "jinmeiliao"}, "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/security/OauthSecurityConfig.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse.internal.security;\n+\n+import static org.springframework.security.config.Customizer.withDefaults;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+\n+@Configuration\n+@EnableWebSecurity\n+@EnableGlobalMethodSecurity(prePostEnabled = true)\n+@Profile(\"pulse.authentication.oauth\")\n+@PropertySource(\"classpath:pulse.properties\")\n+public class OauthSecurityConfig extends WebSecurityConfigurerAdapter {\n+  @Value(\"${pulse.oauth.provider}\")\n+  private String providerId;\n+  @Value(\"${pulse.oauth.clientId}\")\n+  private String clientId;\n+  @Value(\"${pulse.oauth.clientSecret}\")\n+  private String clientSecret;\n+  @Value(\"${pulse.oauth.authorizationUri}\")\n+  private String authorizationUri;\n+  @Value(\"${pulse.oauth.tokenUri}\")\n+  private String tokenUri;\n+  @Value(\"${pulse.oauth.userInfoUri}\")\n+  private String userInfoUri;\n+  @Value(\"${pulse.oauth.jwkSetUri}\")\n+  private String jwkSetUri;\n+  @Value(\"${pulse.oauth.userNameAttributeName}\")\n+  private String userNameAttributeName;\n+\n+  @Override\n+  protected void configure(HttpSecurity http) throws Exception {\n+    http.authorizeRequests(authorize -> authorize\n+        .anyRequest().authenticated())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5Mjc3MA=="}, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5NjYzMg==", "bodyText": "Does this PR need to update some of the doc files to describe how to configure pulse to use oauth2?\n\nYes, I will add a task to the tracker story to update the doc. PR for that is to be followed.", "url": "https://github.com/apache/geode/pull/4823#discussion_r395096632", "createdAt": "2020-03-19T15:05:53Z", "author": {"login": "jinmeiliao"}, "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/security/OauthSecurityConfig.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse.internal.security;\n+\n+import static org.springframework.security.config.Customizer.withDefaults;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+\n+@Configuration\n+@EnableWebSecurity\n+@EnableGlobalMethodSecurity(prePostEnabled = true)\n+@Profile(\"pulse.authentication.oauth\")\n+@PropertySource(\"classpath:pulse.properties\")\n+public class OauthSecurityConfig extends WebSecurityConfigurerAdapter {\n+  @Value(\"${pulse.oauth.provider}\")\n+  private String providerId;\n+  @Value(\"${pulse.oauth.clientId}\")\n+  private String clientId;\n+  @Value(\"${pulse.oauth.clientSecret}\")\n+  private String clientSecret;\n+  @Value(\"${pulse.oauth.authorizationUri}\")\n+  private String authorizationUri;\n+  @Value(\"${pulse.oauth.tokenUri}\")\n+  private String tokenUri;\n+  @Value(\"${pulse.oauth.userInfoUri}\")\n+  private String userInfoUri;\n+  @Value(\"${pulse.oauth.jwkSetUri}\")\n+  private String jwkSetUri;\n+  @Value(\"${pulse.oauth.userNameAttributeName}\")\n+  private String userNameAttributeName;\n+\n+  @Override\n+  protected void configure(HttpSecurity http) throws Exception {\n+    http.authorizeRequests(authorize -> authorize\n+        .anyRequest().authenticated())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5Mjc3MA=="}, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTExNDU4Ng==", "bodyText": "In your test, what does it do?\n\nDon't have that covered in test yet but it follows the logoutHandler set up in the DefaultSecurityConfig. In the OAuth case I think it should invalidate the token someway. I assume there is a built-in way that Spring handles this so we should try to make use of that.", "url": "https://github.com/apache/geode/pull/4823#discussion_r395114586", "createdAt": "2020-03-19T15:29:19Z", "author": {"login": "jmelchio"}, "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/security/OauthSecurityConfig.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse.internal.security;\n+\n+import static org.springframework.security.config.Customizer.withDefaults;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+\n+@Configuration\n+@EnableWebSecurity\n+@EnableGlobalMethodSecurity(prePostEnabled = true)\n+@Profile(\"pulse.authentication.oauth\")\n+@PropertySource(\"classpath:pulse.properties\")\n+public class OauthSecurityConfig extends WebSecurityConfigurerAdapter {\n+  @Value(\"${pulse.oauth.provider}\")\n+  private String providerId;\n+  @Value(\"${pulse.oauth.clientId}\")\n+  private String clientId;\n+  @Value(\"${pulse.oauth.clientSecret}\")\n+  private String clientSecret;\n+  @Value(\"${pulse.oauth.authorizationUri}\")\n+  private String authorizationUri;\n+  @Value(\"${pulse.oauth.tokenUri}\")\n+  private String tokenUri;\n+  @Value(\"${pulse.oauth.userInfoUri}\")\n+  private String userInfoUri;\n+  @Value(\"${pulse.oauth.jwkSetUri}\")\n+  private String jwkSetUri;\n+  @Value(\"${pulse.oauth.userNameAttributeName}\")\n+  private String userNameAttributeName;\n+\n+  @Override\n+  protected void configure(HttpSecurity http) throws Exception {\n+    http.authorizeRequests(authorize -> authorize\n+        .anyRequest().authenticated())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5Mjc3MA=="}, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTE1NjU0Mw==", "bodyText": "In this changeset, I have OauthSecurityConfig directly extends WebSecurityConfigurerAdapter. It does not use anything defined in DefaultSecurityConfig. So I hope spring would pick up the flow.", "url": "https://github.com/apache/geode/pull/4823#discussion_r395156543", "createdAt": "2020-03-19T16:27:16Z", "author": {"login": "jinmeiliao"}, "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/security/OauthSecurityConfig.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse.internal.security;\n+\n+import static org.springframework.security.config.Customizer.withDefaults;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+\n+@Configuration\n+@EnableWebSecurity\n+@EnableGlobalMethodSecurity(prePostEnabled = true)\n+@Profile(\"pulse.authentication.oauth\")\n+@PropertySource(\"classpath:pulse.properties\")\n+public class OauthSecurityConfig extends WebSecurityConfigurerAdapter {\n+  @Value(\"${pulse.oauth.provider}\")\n+  private String providerId;\n+  @Value(\"${pulse.oauth.clientId}\")\n+  private String clientId;\n+  @Value(\"${pulse.oauth.clientSecret}\")\n+  private String clientSecret;\n+  @Value(\"${pulse.oauth.authorizationUri}\")\n+  private String authorizationUri;\n+  @Value(\"${pulse.oauth.tokenUri}\")\n+  private String tokenUri;\n+  @Value(\"${pulse.oauth.userInfoUri}\")\n+  private String userInfoUri;\n+  @Value(\"${pulse.oauth.jwkSetUri}\")\n+  private String jwkSetUri;\n+  @Value(\"${pulse.oauth.userNameAttributeName}\")\n+  private String userNameAttributeName;\n+\n+  @Override\n+  protected void configure(HttpSecurity http) throws Exception {\n+    http.authorizeRequests(authorize -> authorize\n+        .anyRequest().authenticated())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5Mjc3MA=="}, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzQwNDUzOnYy", "diffSide": "RIGHT", "path": "geode-assembly/src/integrationTest/java/org/apache/geode/tools/pulse/PulseSecurityConfigOauthProfileTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODozMjozM1rOF5fB2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxOTozNjoyNVrOF5g4bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMTUyOQ==", "bodyText": "It looks as if this uses the /management API itself to somehow mimic UAA (or some other OAuth server). How does that work?", "url": "https://github.com/apache/geode/pull/4823#discussion_r395821529", "createdAt": "2020-03-20T18:32:33Z", "author": {"login": "demery-pivotal"}, "path": "geode-assembly/src/integrationTest/java/org/apache/geode/tools/pulse/PulseSecurityConfigOauthProfileTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse;\n+\n+import static org.apache.geode.test.junit.rules.HttpResponseAssert.assertResponse;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.util.Properties;\n+\n+import org.apache.http.HttpResponse;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.examples.SimpleSecurityManager;\n+import org.apache.geode.test.junit.categories.PulseTest;\n+import org.apache.geode.test.junit.rules.GeodeHttpClientRule;\n+import org.apache.geode.test.junit.rules.LocatorStarterRule;\n+\n+@Category({PulseTest.class})\n+public class PulseSecurityConfigOauthProfileTest {\n+  // this test just makes sure the property file in the locator's working dir\n+  // gets properly read and used in the oauth security configuration\n+\n+  @ClassRule\n+  public static LocatorStarterRule locator =\n+      new LocatorStarterRule().withHttpService()\n+          .withSecurityManager(SimpleSecurityManager.class)\n+          .withProperty(\"security-auth-token-enabled-components\", \"pulse\");\n+\n+  private static File pulsePropertyFile;\n+\n+  @BeforeClass\n+  public static void setup() throws Exception {\n+    // copy the pulse.properties to the locator's working dir. Pulse will use the locator's working\n+    // dir as classpath to search for this property file\n+    pulsePropertyFile = new File(locator.getWorkingDir(), \"pulse.properties\");\n+    Properties properties = new Properties();\n+    properties.setProperty(\"pulse.oauth.provider\", \"uaa\");\n+    properties.setProperty(\"pulse.oauth.clientId\", \"pulse\");\n+    properties.setProperty(\"pulse.oauth.clientSecret\", \"secret\");\n+    // have the authorization uri point to a known uri that locator itself can serve\n+    properties.setProperty(\"pulse.oauth.authorizationUri\",\n+        \"http://localhost:\" + locator.getHttpPort() + \"/management\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg1MTIzOA==", "bodyText": "this changeset only makes sure pulse can be configured to talk to an authorizationUri. Whatever happens after that, is going to be in Joris's PR.", "url": "https://github.com/apache/geode/pull/4823#discussion_r395851238", "createdAt": "2020-03-20T19:35:02Z", "author": {"login": "jinmeiliao"}, "path": "geode-assembly/src/integrationTest/java/org/apache/geode/tools/pulse/PulseSecurityConfigOauthProfileTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse;\n+\n+import static org.apache.geode.test.junit.rules.HttpResponseAssert.assertResponse;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.util.Properties;\n+\n+import org.apache.http.HttpResponse;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.examples.SimpleSecurityManager;\n+import org.apache.geode.test.junit.categories.PulseTest;\n+import org.apache.geode.test.junit.rules.GeodeHttpClientRule;\n+import org.apache.geode.test.junit.rules.LocatorStarterRule;\n+\n+@Category({PulseTest.class})\n+public class PulseSecurityConfigOauthProfileTest {\n+  // this test just makes sure the property file in the locator's working dir\n+  // gets properly read and used in the oauth security configuration\n+\n+  @ClassRule\n+  public static LocatorStarterRule locator =\n+      new LocatorStarterRule().withHttpService()\n+          .withSecurityManager(SimpleSecurityManager.class)\n+          .withProperty(\"security-auth-token-enabled-components\", \"pulse\");\n+\n+  private static File pulsePropertyFile;\n+\n+  @BeforeClass\n+  public static void setup() throws Exception {\n+    // copy the pulse.properties to the locator's working dir. Pulse will use the locator's working\n+    // dir as classpath to search for this property file\n+    pulsePropertyFile = new File(locator.getWorkingDir(), \"pulse.properties\");\n+    Properties properties = new Properties();\n+    properties.setProperty(\"pulse.oauth.provider\", \"uaa\");\n+    properties.setProperty(\"pulse.oauth.clientId\", \"pulse\");\n+    properties.setProperty(\"pulse.oauth.clientSecret\", \"secret\");\n+    // have the authorization uri point to a known uri that locator itself can serve\n+    properties.setProperty(\"pulse.oauth.authorizationUri\",\n+        \"http://localhost:\" + locator.getHttpPort() + \"/management\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMTUyOQ=="}, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg1MTg4NA==", "bodyText": "As the test comment states \"this test just makes sure the property file in the locator's working dir\ngets properly read and used in the oauth security configuration\". so it only makes sure the configuration in the property file gets used by Pulse, exactly where that URI points to, is irrelavant.", "url": "https://github.com/apache/geode/pull/4823#discussion_r395851884", "createdAt": "2020-03-20T19:36:25Z", "author": {"login": "jinmeiliao"}, "path": "geode-assembly/src/integrationTest/java/org/apache/geode/tools/pulse/PulseSecurityConfigOauthProfileTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse;\n+\n+import static org.apache.geode.test.junit.rules.HttpResponseAssert.assertResponse;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.util.Properties;\n+\n+import org.apache.http.HttpResponse;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.examples.SimpleSecurityManager;\n+import org.apache.geode.test.junit.categories.PulseTest;\n+import org.apache.geode.test.junit.rules.GeodeHttpClientRule;\n+import org.apache.geode.test.junit.rules.LocatorStarterRule;\n+\n+@Category({PulseTest.class})\n+public class PulseSecurityConfigOauthProfileTest {\n+  // this test just makes sure the property file in the locator's working dir\n+  // gets properly read and used in the oauth security configuration\n+\n+  @ClassRule\n+  public static LocatorStarterRule locator =\n+      new LocatorStarterRule().withHttpService()\n+          .withSecurityManager(SimpleSecurityManager.class)\n+          .withProperty(\"security-auth-token-enabled-components\", \"pulse\");\n+\n+  private static File pulsePropertyFile;\n+\n+  @BeforeClass\n+  public static void setup() throws Exception {\n+    // copy the pulse.properties to the locator's working dir. Pulse will use the locator's working\n+    // dir as classpath to search for this property file\n+    pulsePropertyFile = new File(locator.getWorkingDir(), \"pulse.properties\");\n+    Properties properties = new Properties();\n+    properties.setProperty(\"pulse.oauth.provider\", \"uaa\");\n+    properties.setProperty(\"pulse.oauth.clientId\", \"pulse\");\n+    properties.setProperty(\"pulse.oauth.clientSecret\", \"secret\");\n+    // have the authorization uri point to a known uri that locator itself can serve\n+    properties.setProperty(\"pulse.oauth.authorizationUri\",\n+        \"http://localhost:\" + locator.getHttpPort() + \"/management\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMTUyOQ=="}, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzQxNDI5OnYy", "diffSide": "RIGHT", "path": "geode-assembly/src/integrationTest/java/org/apache/geode/tools/pulse/PulseSecurityConfigOauthProfileTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODozNTo1MVrOF5fILw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxOTo1Njo1N1rOF5hc2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMzE1MQ==", "bodyText": "Why only once? This looks fragile: If someone changes the page to show these words more than once, the test will fail, even if the request redirects properly.", "url": "https://github.com/apache/geode/pull/4823#discussion_r395823151", "createdAt": "2020-03-20T18:35:51Z", "author": {"login": "demery-pivotal"}, "path": "geode-assembly/src/integrationTest/java/org/apache/geode/tools/pulse/PulseSecurityConfigOauthProfileTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse;\n+\n+import static org.apache.geode.test.junit.rules.HttpResponseAssert.assertResponse;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.util.Properties;\n+\n+import org.apache.http.HttpResponse;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.examples.SimpleSecurityManager;\n+import org.apache.geode.test.junit.categories.PulseTest;\n+import org.apache.geode.test.junit.rules.GeodeHttpClientRule;\n+import org.apache.geode.test.junit.rules.LocatorStarterRule;\n+\n+@Category({PulseTest.class})\n+public class PulseSecurityConfigOauthProfileTest {\n+  // this test just makes sure the property file in the locator's working dir\n+  // gets properly read and used in the oauth security configuration\n+\n+  @ClassRule\n+  public static LocatorStarterRule locator =\n+      new LocatorStarterRule().withHttpService()\n+          .withSecurityManager(SimpleSecurityManager.class)\n+          .withProperty(\"security-auth-token-enabled-components\", \"pulse\");\n+\n+  private static File pulsePropertyFile;\n+\n+  @BeforeClass\n+  public static void setup() throws Exception {\n+    // copy the pulse.properties to the locator's working dir. Pulse will use the locator's working\n+    // dir as classpath to search for this property file\n+    pulsePropertyFile = new File(locator.getWorkingDir(), \"pulse.properties\");\n+    Properties properties = new Properties();\n+    properties.setProperty(\"pulse.oauth.provider\", \"uaa\");\n+    properties.setProperty(\"pulse.oauth.clientId\", \"pulse\");\n+    properties.setProperty(\"pulse.oauth.clientSecret\", \"secret\");\n+    // have the authorization uri point to a known uri that locator itself can serve\n+    properties.setProperty(\"pulse.oauth.authorizationUri\",\n+        \"http://localhost:\" + locator.getHttpPort() + \"/management\");\n+\n+    properties.store(new FileWriter(pulsePropertyFile), null);\n+    locator.startLocator();\n+  }\n+\n+  @AfterClass\n+  public static void cleanup() {\n+    pulsePropertyFile.delete();\n+  }\n+\n+  @Rule\n+  public GeodeHttpClientRule client = new GeodeHttpClientRule(locator::getHttpPort);\n+\n+  @Test\n+  public void testLogin() throws Exception {\n+    HttpResponse response = client.get(\"/pulse/login.html\");\n+    // the request is redirect to the authorization uri configured before\n+    assertResponse(response).hasStatusCode(200).hasResponseBody()\n+        .containsOnlyOnce(\"latest\")\n+        .containsOnlyOnce(\"supported\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg1NDI1Mw==", "bodyText": "This is a random URL I picked up only for testing purpose. I happen to pick the /management uri, which returns json content {\"latest\":\"...\", \"supported\":[...]}. It is just a way to test the redirect works. It's not likely that url response would change and if it does, yes, developer will need to change the test.", "url": "https://github.com/apache/geode/pull/4823#discussion_r395854253", "createdAt": "2020-03-20T19:41:28Z", "author": {"login": "jinmeiliao"}, "path": "geode-assembly/src/integrationTest/java/org/apache/geode/tools/pulse/PulseSecurityConfigOauthProfileTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse;\n+\n+import static org.apache.geode.test.junit.rules.HttpResponseAssert.assertResponse;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.util.Properties;\n+\n+import org.apache.http.HttpResponse;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.examples.SimpleSecurityManager;\n+import org.apache.geode.test.junit.categories.PulseTest;\n+import org.apache.geode.test.junit.rules.GeodeHttpClientRule;\n+import org.apache.geode.test.junit.rules.LocatorStarterRule;\n+\n+@Category({PulseTest.class})\n+public class PulseSecurityConfigOauthProfileTest {\n+  // this test just makes sure the property file in the locator's working dir\n+  // gets properly read and used in the oauth security configuration\n+\n+  @ClassRule\n+  public static LocatorStarterRule locator =\n+      new LocatorStarterRule().withHttpService()\n+          .withSecurityManager(SimpleSecurityManager.class)\n+          .withProperty(\"security-auth-token-enabled-components\", \"pulse\");\n+\n+  private static File pulsePropertyFile;\n+\n+  @BeforeClass\n+  public static void setup() throws Exception {\n+    // copy the pulse.properties to the locator's working dir. Pulse will use the locator's working\n+    // dir as classpath to search for this property file\n+    pulsePropertyFile = new File(locator.getWorkingDir(), \"pulse.properties\");\n+    Properties properties = new Properties();\n+    properties.setProperty(\"pulse.oauth.provider\", \"uaa\");\n+    properties.setProperty(\"pulse.oauth.clientId\", \"pulse\");\n+    properties.setProperty(\"pulse.oauth.clientSecret\", \"secret\");\n+    // have the authorization uri point to a known uri that locator itself can serve\n+    properties.setProperty(\"pulse.oauth.authorizationUri\",\n+        \"http://localhost:\" + locator.getHttpPort() + \"/management\");\n+\n+    properties.store(new FileWriter(pulsePropertyFile), null);\n+    locator.startLocator();\n+  }\n+\n+  @AfterClass\n+  public static void cleanup() {\n+    pulsePropertyFile.delete();\n+  }\n+\n+  @Rule\n+  public GeodeHttpClientRule client = new GeodeHttpClientRule(locator::getHttpPort);\n+\n+  @Test\n+  public void testLogin() throws Exception {\n+    HttpResponse response = client.get(\"/pulse/login.html\");\n+    // the request is redirect to the authorization uri configured before\n+    assertResponse(response).hasStatusCode(200).hasResponseBody()\n+        .containsOnlyOnce(\"latest\")\n+        .containsOnlyOnce(\"supported\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMzE1MQ=="}, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg1NDgxMQ==", "bodyText": "Why only once? This looks fragile: If someone changes the page to show these words more than once, the test will fail, even if the request redirects properly.\n\nFrom what I know that is highly unlikely. I think it is safe in this case.", "url": "https://github.com/apache/geode/pull/4823#discussion_r395854811", "createdAt": "2020-03-20T19:42:45Z", "author": {"login": "jmelchio"}, "path": "geode-assembly/src/integrationTest/java/org/apache/geode/tools/pulse/PulseSecurityConfigOauthProfileTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse;\n+\n+import static org.apache.geode.test.junit.rules.HttpResponseAssert.assertResponse;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.util.Properties;\n+\n+import org.apache.http.HttpResponse;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.examples.SimpleSecurityManager;\n+import org.apache.geode.test.junit.categories.PulseTest;\n+import org.apache.geode.test.junit.rules.GeodeHttpClientRule;\n+import org.apache.geode.test.junit.rules.LocatorStarterRule;\n+\n+@Category({PulseTest.class})\n+public class PulseSecurityConfigOauthProfileTest {\n+  // this test just makes sure the property file in the locator's working dir\n+  // gets properly read and used in the oauth security configuration\n+\n+  @ClassRule\n+  public static LocatorStarterRule locator =\n+      new LocatorStarterRule().withHttpService()\n+          .withSecurityManager(SimpleSecurityManager.class)\n+          .withProperty(\"security-auth-token-enabled-components\", \"pulse\");\n+\n+  private static File pulsePropertyFile;\n+\n+  @BeforeClass\n+  public static void setup() throws Exception {\n+    // copy the pulse.properties to the locator's working dir. Pulse will use the locator's working\n+    // dir as classpath to search for this property file\n+    pulsePropertyFile = new File(locator.getWorkingDir(), \"pulse.properties\");\n+    Properties properties = new Properties();\n+    properties.setProperty(\"pulse.oauth.provider\", \"uaa\");\n+    properties.setProperty(\"pulse.oauth.clientId\", \"pulse\");\n+    properties.setProperty(\"pulse.oauth.clientSecret\", \"secret\");\n+    // have the authorization uri point to a known uri that locator itself can serve\n+    properties.setProperty(\"pulse.oauth.authorizationUri\",\n+        \"http://localhost:\" + locator.getHttpPort() + \"/management\");\n+\n+    properties.store(new FileWriter(pulsePropertyFile), null);\n+    locator.startLocator();\n+  }\n+\n+  @AfterClass\n+  public static void cleanup() {\n+    pulsePropertyFile.delete();\n+  }\n+\n+  @Rule\n+  public GeodeHttpClientRule client = new GeodeHttpClientRule(locator::getHttpPort);\n+\n+  @Test\n+  public void testLogin() throws Exception {\n+    HttpResponse response = client.get(\"/pulse/login.html\");\n+    // the request is redirect to the authorization uri configured before\n+    assertResponse(response).hasStatusCode(200).hasResponseBody()\n+        .containsOnlyOnce(\"latest\")\n+        .containsOnlyOnce(\"supported\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMzE1MQ=="}, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg1OTQxOA==", "bodyText": "Each assertion should express a requirement that the test cares about. \"Only once\" is not a requirement here. Fix it.", "url": "https://github.com/apache/geode/pull/4823#discussion_r395859418", "createdAt": "2020-03-20T19:53:03Z", "author": {"login": "demery-pivotal"}, "path": "geode-assembly/src/integrationTest/java/org/apache/geode/tools/pulse/PulseSecurityConfigOauthProfileTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse;\n+\n+import static org.apache.geode.test.junit.rules.HttpResponseAssert.assertResponse;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.util.Properties;\n+\n+import org.apache.http.HttpResponse;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.examples.SimpleSecurityManager;\n+import org.apache.geode.test.junit.categories.PulseTest;\n+import org.apache.geode.test.junit.rules.GeodeHttpClientRule;\n+import org.apache.geode.test.junit.rules.LocatorStarterRule;\n+\n+@Category({PulseTest.class})\n+public class PulseSecurityConfigOauthProfileTest {\n+  // this test just makes sure the property file in the locator's working dir\n+  // gets properly read and used in the oauth security configuration\n+\n+  @ClassRule\n+  public static LocatorStarterRule locator =\n+      new LocatorStarterRule().withHttpService()\n+          .withSecurityManager(SimpleSecurityManager.class)\n+          .withProperty(\"security-auth-token-enabled-components\", \"pulse\");\n+\n+  private static File pulsePropertyFile;\n+\n+  @BeforeClass\n+  public static void setup() throws Exception {\n+    // copy the pulse.properties to the locator's working dir. Pulse will use the locator's working\n+    // dir as classpath to search for this property file\n+    pulsePropertyFile = new File(locator.getWorkingDir(), \"pulse.properties\");\n+    Properties properties = new Properties();\n+    properties.setProperty(\"pulse.oauth.provider\", \"uaa\");\n+    properties.setProperty(\"pulse.oauth.clientId\", \"pulse\");\n+    properties.setProperty(\"pulse.oauth.clientSecret\", \"secret\");\n+    // have the authorization uri point to a known uri that locator itself can serve\n+    properties.setProperty(\"pulse.oauth.authorizationUri\",\n+        \"http://localhost:\" + locator.getHttpPort() + \"/management\");\n+\n+    properties.store(new FileWriter(pulsePropertyFile), null);\n+    locator.startLocator();\n+  }\n+\n+  @AfterClass\n+  public static void cleanup() {\n+    pulsePropertyFile.delete();\n+  }\n+\n+  @Rule\n+  public GeodeHttpClientRule client = new GeodeHttpClientRule(locator::getHttpPort);\n+\n+  @Test\n+  public void testLogin() throws Exception {\n+    HttpResponse response = client.get(\"/pulse/login.html\");\n+    // the request is redirect to the authorization uri configured before\n+    assertResponse(response).hasStatusCode(200).hasResponseBody()\n+        .containsOnlyOnce(\"latest\")\n+        .containsOnlyOnce(\"supported\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMzE1MQ=="}, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg2MTIxMQ==", "bodyText": "done.", "url": "https://github.com/apache/geode/pull/4823#discussion_r395861211", "createdAt": "2020-03-20T19:56:57Z", "author": {"login": "jinmeiliao"}, "path": "geode-assembly/src/integrationTest/java/org/apache/geode/tools/pulse/PulseSecurityConfigOauthProfileTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse;\n+\n+import static org.apache.geode.test.junit.rules.HttpResponseAssert.assertResponse;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.util.Properties;\n+\n+import org.apache.http.HttpResponse;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.examples.SimpleSecurityManager;\n+import org.apache.geode.test.junit.categories.PulseTest;\n+import org.apache.geode.test.junit.rules.GeodeHttpClientRule;\n+import org.apache.geode.test.junit.rules.LocatorStarterRule;\n+\n+@Category({PulseTest.class})\n+public class PulseSecurityConfigOauthProfileTest {\n+  // this test just makes sure the property file in the locator's working dir\n+  // gets properly read and used in the oauth security configuration\n+\n+  @ClassRule\n+  public static LocatorStarterRule locator =\n+      new LocatorStarterRule().withHttpService()\n+          .withSecurityManager(SimpleSecurityManager.class)\n+          .withProperty(\"security-auth-token-enabled-components\", \"pulse\");\n+\n+  private static File pulsePropertyFile;\n+\n+  @BeforeClass\n+  public static void setup() throws Exception {\n+    // copy the pulse.properties to the locator's working dir. Pulse will use the locator's working\n+    // dir as classpath to search for this property file\n+    pulsePropertyFile = new File(locator.getWorkingDir(), \"pulse.properties\");\n+    Properties properties = new Properties();\n+    properties.setProperty(\"pulse.oauth.provider\", \"uaa\");\n+    properties.setProperty(\"pulse.oauth.clientId\", \"pulse\");\n+    properties.setProperty(\"pulse.oauth.clientSecret\", \"secret\");\n+    // have the authorization uri point to a known uri that locator itself can serve\n+    properties.setProperty(\"pulse.oauth.authorizationUri\",\n+        \"http://localhost:\" + locator.getHttpPort() + \"/management\");\n+\n+    properties.store(new FileWriter(pulsePropertyFile), null);\n+    locator.startLocator();\n+  }\n+\n+  @AfterClass\n+  public static void cleanup() {\n+    pulsePropertyFile.delete();\n+  }\n+\n+  @Rule\n+  public GeodeHttpClientRule client = new GeodeHttpClientRule(locator::getHttpPort);\n+\n+  @Test\n+  public void testLogin() throws Exception {\n+    HttpResponse response = client.get(\"/pulse/login.html\");\n+    // the request is redirect to the authorization uri configured before\n+    assertResponse(response).hasStatusCode(200).hasResponseBody()\n+        .containsOnlyOnce(\"latest\")\n+        .containsOnlyOnce(\"supported\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMzE1MQ=="}, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzQxNTkxOnYy", "diffSide": "RIGHT", "path": "geode-assembly/src/integrationTest/java/org/apache/geode/tools/pulse/PulseSecurityConfigOauthProfileTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODozNjoyNFrOF5fJRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODozNjoyNFrOF5fJRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMzQzMA==", "bodyText": "Capitalize the A in OAuth (here and elsewhere)", "url": "https://github.com/apache/geode/pull/4823#discussion_r395823430", "createdAt": "2020-03-20T18:36:24Z", "author": {"login": "demery-pivotal"}, "path": "geode-assembly/src/integrationTest/java/org/apache/geode/tools/pulse/PulseSecurityConfigOauthProfileTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse;\n+\n+import static org.apache.geode.test.junit.rules.HttpResponseAssert.assertResponse;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.util.Properties;\n+\n+import org.apache.http.HttpResponse;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.examples.SimpleSecurityManager;\n+import org.apache.geode.test.junit.categories.PulseTest;\n+import org.apache.geode.test.junit.rules.GeodeHttpClientRule;\n+import org.apache.geode.test.junit.rules.LocatorStarterRule;\n+\n+@Category({PulseTest.class})\n+public class PulseSecurityConfigOauthProfileTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzQyNzYwOnYy", "diffSide": "RIGHT", "path": "geode-pulse/src/integrationTest/java/org/apache/geode/tools/pulse/security/OauthSecurityConfigTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODo0MDoxOFrOF5fQ3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxOTo0MjowOVrOF5hCyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyNTM3Mw==", "bodyText": "xyz.com is an actual domain name. Please use a test-specific domain name such as:\n\nexample.com (example.com is intended mostly for documentation, but people use it for testing)\n<any-subdomain>.test (.test is a special top-level domain name designed for testing)\n<any-subdomain>.example (.example is another special top-level domain name)", "url": "https://github.com/apache/geode/pull/4823#discussion_r395825373", "createdAt": "2020-03-20T18:40:18Z", "author": {"login": "demery-pivotal"}, "path": "geode-pulse/src/integrationTest/java/org/apache/geode/tools/pulse/security/OauthSecurityConfigTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse.security;\n+\n+import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrlPattern;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.web.GenericXmlWebContextLoader;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+@RunWith(SpringRunner.class)\n+@ContextConfiguration(locations = {\"classpath*:WEB-INF/pulse-servlet.xml\"},\n+    loader = GenericXmlWebContextLoader.class)\n+@WebAppConfiguration\n+@ActiveProfiles({\"pulse.authentication.oauth\"})\n+public class OauthSecurityConfigTest {\n+  @Autowired\n+  private WebApplicationContext context;\n+\n+  private MockMvc mvc;\n+\n+  @Before\n+  public void setup() {\n+    mvc = MockMvcBuilders\n+        .webAppContextSetup(context)\n+        .apply(springSecurity())\n+        .build();\n+  }\n+\n+  @Test\n+  public void redirectToOauth() throws Exception {\n+    mvc.perform(get(\"/login.html\")).andExpect(status().is3xxRedirection())\n+        .andExpect(redirectedUrl((\"http://localhost/oauth2/authorization/uaa\")));\n+\n+    mvc.perform(get(\"http://localhost/oauth2/authorization/uaa\"))\n+        .andExpect(status().is3xxRedirection())\n+        .andExpect(redirectedUrlPattern(\"http://xyz.com/uaa/oauth/**\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg1NDUzNw==", "bodyText": "will do", "url": "https://github.com/apache/geode/pull/4823#discussion_r395854537", "createdAt": "2020-03-20T19:42:09Z", "author": {"login": "jinmeiliao"}, "path": "geode-pulse/src/integrationTest/java/org/apache/geode/tools/pulse/security/OauthSecurityConfigTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse.security;\n+\n+import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrlPattern;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.web.GenericXmlWebContextLoader;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+@RunWith(SpringRunner.class)\n+@ContextConfiguration(locations = {\"classpath*:WEB-INF/pulse-servlet.xml\"},\n+    loader = GenericXmlWebContextLoader.class)\n+@WebAppConfiguration\n+@ActiveProfiles({\"pulse.authentication.oauth\"})\n+public class OauthSecurityConfigTest {\n+  @Autowired\n+  private WebApplicationContext context;\n+\n+  private MockMvc mvc;\n+\n+  @Before\n+  public void setup() {\n+    mvc = MockMvcBuilders\n+        .webAppContextSetup(context)\n+        .apply(springSecurity())\n+        .build();\n+  }\n+\n+  @Test\n+  public void redirectToOauth() throws Exception {\n+    mvc.perform(get(\"/login.html\")).andExpect(status().is3xxRedirection())\n+        .andExpect(redirectedUrl((\"http://localhost/oauth2/authorization/uaa\")));\n+\n+    mvc.perform(get(\"http://localhost/oauth2/authorization/uaa\"))\n+        .andExpect(status().is3xxRedirection())\n+        .andExpect(redirectedUrlPattern(\"http://xyz.com/uaa/oauth/**\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyNTM3Mw=="}, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1MzQzMDE1OnYy", "diffSide": "RIGHT", "path": "geode-pulse/src/integrationTest/resources/pulse.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODo0MToxNFrOF5fSjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxOTo0MjoxN1rOF5hDAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyNTgwNQ==", "bodyText": "Someone else owns xyz.com, so we should not use it.", "url": "https://github.com/apache/geode/pull/4823#discussion_r395825805", "createdAt": "2020-03-20T18:41:14Z", "author": {"login": "demery-pivotal"}, "path": "geode-pulse/src/integrationTest/resources/pulse.properties", "diffHunk": "@@ -0,0 +1,23 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+# agreements. See the NOTICE file distributed with this work for additional information regarding\n+# copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+# copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software distributed under the License\n+# is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+# or implied. See the License for the specific language governing permissions and limitations under\n+# the License.\n+#\n+\n+pulse.oauth.provider=uaa\n+pulse.oauth.clientId=pulse\n+pulse.oauth.clientSecret=secret\n+pulse.oauth.authorizationUri=http://xyz.com/uaa/oauth/authorize\n+pulse.oauth.tokenUri=http://xyz.com/uaa/oauth/token\n+pulse.oauth.userInfoUri=http://xyz.com/uaa/userinfo\n+pulse.oauth.jwkSetUri=http://xyz.com/uaa/token_keys", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTg1NDU5NQ==", "bodyText": "will do.", "url": "https://github.com/apache/geode/pull/4823#discussion_r395854595", "createdAt": "2020-03-20T19:42:17Z", "author": {"login": "jinmeiliao"}, "path": "geode-pulse/src/integrationTest/resources/pulse.properties", "diffHunk": "@@ -0,0 +1,23 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+# agreements. See the NOTICE file distributed with this work for additional information regarding\n+# copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+# copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software distributed under the License\n+# is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+# or implied. See the License for the specific language governing permissions and limitations under\n+# the License.\n+#\n+\n+pulse.oauth.provider=uaa\n+pulse.oauth.clientId=pulse\n+pulse.oauth.clientSecret=secret\n+pulse.oauth.authorizationUri=http://xyz.com/uaa/oauth/authorize\n+pulse.oauth.tokenUri=http://xyz.com/uaa/oauth/token\n+pulse.oauth.userInfoUri=http://xyz.com/uaa/userinfo\n+pulse.oauth.jwkSetUri=http://xyz.com/uaa/token_keys", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyNTgwNQ=="}, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4395, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}