{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwODQ1MTU0", "number": 5612, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoyMzoyMVrOEuEyPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoyOTo0OFrOEuE9SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzQ4MzUwOnYy", "diffSide": "RIGHT", "path": "geode-junit/src/main/java/org/apache/geode/test/junit/rules/RandomRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoyMzoyMVrOHiP9nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoyMzoyMVrOHiP9nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY3NTE2NQ==", "bodyText": "Would it be useful to have an additional constructor that takes a Random, or a Supplier<Random>?", "url": "https://github.com/apache/geode/pull/5612#discussion_r505675165", "createdAt": "2020-10-15T16:23:21Z", "author": {"login": "demery-pivotal"}, "path": "geode-junit/src/main/java/org/apache/geode/test/junit/rules/RandomRule.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.test.junit.rules;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.StreamSupport.stream;\n+\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import org.apache.geode.test.junit.rules.serializable.SerializableStatement;\n+import org.apache.geode.test.junit.rules.serializable.SerializableTestRule;\n+\n+@SuppressWarnings({\"serial\", \"unused\", \"WeakerAccess\", \"NumericCastThatLosesPrecision\"})\n+public class RandomRule extends Random implements GsRandom, SerializableTestRule {\n+\n+  private final AtomicReference<Random> random = new AtomicReference<>();\n+  private final long seed;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad5e9a8de719e2d7c672292bbefaf96652353047"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzUwMTI2OnYy", "diffSide": "RIGHT", "path": "geode-junit/src/test/java/org/apache/geode/test/junit/rules/RandomRuleTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoyNzo0MlrOHiQItw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoyNzo0MlrOHiQItw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY3ODAwNw==", "bodyText": "Test for empty varargs?", "url": "https://github.com/apache/geode/pull/5612#discussion_r505678007", "createdAt": "2020-10-15T16:27:42Z", "author": {"login": "demery-pivotal"}, "path": "geode-junit/src/test/java/org/apache/geode/test/junit/rules/RandomRuleTest.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.test.junit.rules;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.singleton;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+public class RandomRuleTest {\n+\n+  @Rule\n+  public RandomRule randomRule = new RandomRule();\n+\n+  @Test\n+  public void iterableWithOneElementReturnsThatElement() {\n+    String value = randomRule.next(singleton(\"item\"));\n+\n+    assertThat(value).isEqualTo(\"item\");\n+  }\n+\n+  @Test\n+  public void nullNullIterableThrowsNullPointerException() {\n+    Iterable<String> iterable = null;\n+\n+    Throwable thrown = catchThrowable(() -> randomRule.next(iterable));\n+\n+    assertThat(thrown).isInstanceOf(NullPointerException.class);\n+  }\n+\n+  @Test\n+  public void emptyIterableThrowsIllegalArgumentException() {\n+    Throwable thrown = catchThrowable(() -> randomRule.next(emptyList()));\n+\n+    assertThat(thrown).isInstanceOf(IllegalArgumentException.class);\n+  }\n+\n+  @Test\n+  public void iterableWithTwoElementsReturnsRandomElement() {\n+    String value = randomRule.next(asList(\"one\", \"two\"));\n+\n+    assertThat(value).isIn(\"one\", \"two\");\n+  }\n+\n+  @Test\n+  public void iterableWithManyElementsReturnsRandomElement() {\n+    String value = randomRule.next(asList(\"one\", \"two\", \"three\"));\n+\n+    assertThat(value).isIn(\"one\", \"two\", \"three\");\n+  }\n+\n+  @Test\n+  public void varArgsWithOneElementReturnsThatElement() {\n+    String value = randomRule.next(\"item\");\n+\n+    assertThat(value).isEqualTo(\"item\");\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad5e9a8de719e2d7c672292bbefaf96652353047"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NzUxMTc3OnYy", "diffSide": "RIGHT", "path": "geode-junit/src/main/java/org/apache/geode/test/junit/rules/RandomRule.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoyOTo0OFrOHiQPFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxNjoyOTo0OFrOHiQPFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTY3OTYzOA==", "bodyText": "\"\u2026 from the specified var args \u2026\" or \"\u2026 from the specified values \u2026\"", "url": "https://github.com/apache/geode/pull/5612#discussion_r505679638", "createdAt": "2020-10-15T16:29:48Z", "author": {"login": "demery-pivotal"}, "path": "geode-junit/src/main/java/org/apache/geode/test/junit/rules/RandomRule.java", "diffHunk": "@@ -0,0 +1,271 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.test.junit.rules;\n+\n+import static java.util.Arrays.asList;\n+import static java.util.Objects.requireNonNull;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.StreamSupport.stream;\n+\n+import java.util.List;\n+import java.util.Random;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.runner.Description;\n+import org.junit.runners.model.Statement;\n+\n+import org.apache.geode.test.junit.rules.serializable.SerializableStatement;\n+import org.apache.geode.test.junit.rules.serializable.SerializableTestRule;\n+\n+@SuppressWarnings({\"serial\", \"unused\", \"WeakerAccess\", \"NumericCastThatLosesPrecision\"})\n+public class RandomRule extends Random implements GsRandom, SerializableTestRule {\n+\n+  private final AtomicReference<Random> random = new AtomicReference<>();\n+  private final long seed;\n+\n+  public RandomRule() {\n+    this(0);\n+  }\n+\n+  public RandomRule(long seed) {\n+    this.seed = seed;\n+  }\n+\n+  @Override\n+  public Statement apply(final Statement base, final Description description) {\n+    return statement(base);\n+  }\n+\n+  private Statement statement(final Statement base) {\n+    return new SerializableStatement() {\n+      @Override\n+      public void evaluate() throws Throwable {\n+        before();\n+        try {\n+          base.evaluate();\n+        } finally {\n+          // nothing\n+        }\n+      }\n+    };\n+  }\n+\n+  private void before() {\n+    random.set(newRandom());\n+  }\n+\n+  /**\n+   * Returns the next pseudorandom, uniformly distributed {@code boolean} value from this random\n+   * number generator's sequence.\n+   *\n+   * @return the next pseudorandom, uniformly distributed {@code boolean} value from this random\n+   *         number generator's sequence.\n+   */\n+  @Override\n+  public boolean nextBoolean() {\n+    return next(1) == 0;\n+  }\n+\n+  /**\n+   * Returns the next pseudorandom, uniformly distributed {@code char} value from this random number\n+   * generator's sequence There is a hack here to prevent '}' so as to eliminate the possibility of\n+   * generating a sequence which would falsely get marked as a suspect string while we are matching\n+   * the pattern {@code {[0-9]+}}.\n+   *\n+   * @return the next pseudorandom, uniformly distributed {@code char} value from this random number\n+   *         generator's sequence.\n+   */\n+  @Override\n+  public char nextChar() {\n+    char c = (char) next(16);\n+    if (c == '}') {\n+      c = nextChar(); // prevent right bracket, try again\n+    }\n+    return c;\n+  }\n+\n+  /**\n+   * Returns the next pseudorandom, uniformly distributed {@code byte} value from this random number\n+   * generator's sequence.\n+   *\n+   * @return the next pseudorandom, uniformly distributed {@code byte} value from this random\n+   *         number generator's sequence.\n+   */\n+  @Override\n+  public byte nextByte() {\n+    return (byte) next(8);\n+  }\n+\n+  /**\n+   * Returns the next pseudorandom, uniformly distributed {@code double} value from this random\n+   * number generator's sequence within a range from 0 to max.\n+   *\n+   * @param max the maximum range (inclusive) for the pseudorandom.\n+   * @return the next pseudorandom, uniformly distributed {@code double} value from this random\n+   *         number generator's sequence.\n+   */\n+  @Override\n+  public double nextDouble(double max) {\n+    return nextDouble(0.0, max);\n+  }\n+\n+  /**\n+   * Returns the next pseudorandom, uniformly distributed {@code double} value from this random\n+   * number generator's sequence within a range from min to max.\n+   *\n+   * @param min the minimum range (inclusive) for the pseudorandom.\n+   * @param max the maximum range (inclusive) for the pseudorandom.\n+   * @return the next pseudorandom, uniformly distributed {@code double} value from this random\n+   *         number generator's sequence.\n+   */\n+  @Override\n+  public double nextDouble(double min, double max) {\n+    return nextDouble() * (max - min) + min;\n+  }\n+\n+  /**\n+   * Returns the next pseudorandom, uniformly distributed {@code short} value from this random\n+   * number generator's sequence.\n+   *\n+   * @return the next pseudorandom, uniformly distributed {@code short} value from this random\n+   *         number generator's sequence.\n+   */\n+  @Override\n+  public short nextShort() {\n+    return (short) nextChar();\n+  }\n+\n+  /**\n+   * Returns the next pseudorandom, uniformly distributed {@code long} value from this random number\n+   * generator's sequence within a range from 0 to max.\n+   *\n+   * @param max the maximum range (inclusive) for the pseudorandom.\n+   * @return the next pseudorandom, uniformly distributed {@code long} value from this random number\n+   *         generator's sequence.\n+   */\n+  @Override\n+  public long nextLong(long max) {\n+    if (max == Long.MAX_VALUE) {\n+      max--;\n+    }\n+    return Math.abs(nextLong()) % (max + 1);\n+  }\n+\n+  /**\n+   * Returns the next pseudorandom, uniformly distributed {@code long} value from this random number\n+   * generator's sequence within a range from min to max.\n+   *\n+   * @param min the minimum range (inclusive) for the pseudorandom.\n+   * @param max the maximum range (inclusive) for the pseudorandom.\n+   * @return the next pseudorandom, uniformly distributed {@code long} value from this random number\n+   *         generator's sequence.\n+   */\n+  @Override\n+  public long nextLong(long min, long max) {\n+    return nextLong(max - min) + min;\n+  }\n+\n+  /**\n+   * Returns the next pseudorandom, uniformly distributed {@code int} value from this random number\n+   * generator's sequence within a range from 0 to max (inclusive -- which is different from\n+   * {@link Random#nextInt}).\n+   *\n+   * @param max the maximum range (inclusive) for the pseudorandom.\n+   * @return the next pseudorandom, uniformly distributed {@code int} value from this random number\n+   *         generator's sequence.\n+   */\n+  @Override\n+  public int nextInt(int max) {\n+    if (max == Integer.MAX_VALUE) {\n+      max--;\n+    }\n+\n+    int theNext = nextInt();\n+    // Math.abs behaves badly when given min int, so avoid\n+    if (theNext == Integer.MIN_VALUE) {\n+      theNext = Integer.MIN_VALUE + 1;\n+    }\n+    return Math.abs(theNext) % (max + 1);\n+  }\n+\n+  /**\n+   * Returns the next pseudorandom, uniformly distributed {@code int} value from this random number\n+   * generator's sequence within a range from min to max. If max < min, returns 0.\n+   *\n+   * @param min the minimum range (inclusive) for the pseudorandom.\n+   * @param max the maximum range (inclusive) for the pseudorandom.\n+   * @return the next pseudorandom, uniformly distributed {@code int} value from this random number\n+   *         generator's sequence.\n+   */\n+  @Override\n+  public int nextInt(int min, int max) {\n+    if (max < min) {\n+      return 0; // handle max == 0 and avoid divide-by-zero exceptions\n+    }\n+\n+    return nextInt(max - min) + min;\n+  }\n+\n+  /**\n+   * Returns the next pseudorandom, uniformly distributed element from the specified iterable as\n+   * indexed by this random number generator's sequence.\n+   *\n+   * @param iterable the range of values (inclusive) for the pseudorandom.\n+   * @return the next pseudorandom, uniformly distributed element from the specified iterable as\n+   *         indexed by this random number generator's sequence.\n+   * @throws NullPointerException if iterable is null.\n+   * @throws IllegalArgumentException if iterable is empty.\n+   */\n+  public <T> T next(Iterable<T> iterable) {\n+    List<T> list = requireNonNulls(requireNonEmpty(stream(iterable.spliterator(), false)\n+        .collect(toList())));\n+    return list.get(nextInt(0, list.size() - 1));\n+  }\n+\n+  /**\n+   * Returns the next pseudorandom, uniformly distributed element from the specified iterable as", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad5e9a8de719e2d7c672292bbefaf96652353047"}, "originalPosition": 238}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4693, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}