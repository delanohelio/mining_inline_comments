{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3ODU1MTA4", "number": 4900, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMzoyNDowNlrODuJ2AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMzo1Nzo1OFrODuKP5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzIyMzY5OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionSingleHopDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMzoyNDowNlrOF__7-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMzoyNDowNlrOF__7-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1MjE1NA==", "bodyText": "dunitrunner revealed that testMetadataIsSameOnAllServersAndClients fails intermittently with underlying BindExceptions thrown when restarting server in vm0 or vm1 with the same port those two vms used to have a CacheServer running on.\nThe only way to fix this is to use a Locator in the pool instead of hardcoded server ports, and allow the CacheServers to come back up on any port.", "url": "https://github.com/apache/geode/pull/4900#discussion_r402652154", "createdAt": "2020-04-02T23:24:06Z", "author": {"login": "kirklund"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionSingleHopDUnitTest.java", "diffHunk": "@@ -620,61 +666,63 @@ public void testMetadataFetchOnlyThroughputAll() {\n     int redundantCopies = 3;\n     int totalNumberOfBuckets = 4;\n \n-    int port0 = vm0.invoke(() -> createServer(redundantCopies, totalNumberOfBuckets));\n-    int port1 = vm1.invoke(() -> createServer(redundantCopies, totalNumberOfBuckets));\n-    int port2 = vm2.invoke(() -> createServer(redundantCopies, totalNumberOfBuckets));\n-    int port3 = vm3.invoke(() -> createServer(redundantCopies, totalNumberOfBuckets));\n+    int port0 = vm0.invoke(() -> createServer(-1, redundantCopies, totalNumberOfBuckets));\n+    int port1 = vm1.invoke(() -> createServer(-1, redundantCopies, totalNumberOfBuckets));\n+    int port2 = vm2.invoke(() -> createServer(-1, redundantCopies, totalNumberOfBuckets));\n+    int port3 = vm3.invoke(() -> createServer(-1, redundantCopies, totalNumberOfBuckets));\n+    createClient(100, true, false, true, port0, port1, port2, port3);\n \n-    createClient(port0, port1, port2, port3);\n+    Region<Object, Object> partitionedRegion = getRegion(PARTITIONED_REGION_NAME);\n \n-    putAll();\n+    doPutAlls(partitionedRegion);\n \n-    ClientMetadataService clientMetadataService = cache.getClientMetadataService();\n+    ClientMetadataService clientMetadataService = CLIENT.get().getClientMetadataService();\n     Map<String, ClientPartitionAdvisor> clientPRMetadata =\n         clientMetadataService.getClientPRMetadata_TEST_ONLY();\n+    ClientPartitionAdvisor prMetadata = clientPRMetadata.get(partitionedRegion.getFullPath());\n \n     await().untilAsserted(() -> {\n-      assertThat(clientPRMetadata).hasSize(1);\n-    });\n-\n-    assertThat(clientPRMetadata).containsKey(testRegion.getFullPath());\n-\n-    ClientPartitionAdvisor prMetadata = clientPRMetadata.get(testRegion.getFullPath());\n-\n-    await().untilAsserted(() -> {\n-      assertThat(prMetadata.getBucketServerLocationsMap_TEST_ONLY()).hasSize(totalNumberOfBuckets);\n+      assertThat(clientPRMetadata)\n+          .hasSize(1)\n+          .containsKey(partitionedRegion.getFullPath());\n+      assertThat(prMetadata.getBucketServerLocationsMap_TEST_ONLY())\n+          .hasSize(totalNumberOfBuckets);\n     });\n   }\n \n   @Test\n   public void testMetadataIsSameOnAllServersAndClients() {\n+    int locatorPort = DUnitEnv.get().getLocatorPort();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d66b03dd069c611fc13292a1ef8a671cab172f3a"}, "originalPosition": 866}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzIyNzE0OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionSingleHopDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMzoyNTo0NVrOF__-DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMzoyNTo0NVrOF__-DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY1MjY4NQ==", "bodyText": "dunitrunner revealed intermittent failures in testSingleHopWithHAWithLocator with an underlying BindException as the cause.\nThe easiest fix is to change startLocator to use port zero and then return whatever port the Locator ended up binding to.", "url": "https://github.com/apache/geode/pull/4900#discussion_r402652685", "createdAt": "2020-04-02T23:25:45Z", "author": {"login": "kirklund"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionSingleHopDUnitTest.java", "diffHunk": "@@ -386,75 +428,70 @@ public void testSingleHopWithHA() {\n \n     // again update\n     for (int i = 1; i <= 16; i++) {\n-      testRegion.put(i, i + 10);\n+      partitionedRegion.put(i, i + 10);\n     }\n   }\n \n   @Test\n   public void testSingleHopWithHAWithLocator() {\n-    int port3 = AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);\n-    String locator = \"localhost[\" + port3 + \"]\";\n+    int locatorPort = vm3.invoke(() -> startLocator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d66b03dd069c611fc13292a1ef8a671cab172f3a"}, "originalPosition": 515}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NzI4OTk5OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionSingleHopDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMzo1Nzo1OFrOGAAj2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMzo1Nzo1OFrOGAAj2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjY2MjM2Mw==", "bodyText": "dunitrunner revealed flaky failures in testClientMetadataForPersistentPrs caused by underlying BindExceptions.\nThe fix involves pointing the client at the servers via the locator and then let the servers use whatever ports they can find instead of restarting the servers with a previously used port.", "url": "https://github.com/apache/geode/pull/4900#discussion_r402662363", "createdAt": "2020-04-02T23:57:58Z", "author": {"login": "kirklund"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionSingleHopDUnitTest.java", "diffHunk": "@@ -868,585 +916,338 @@ public void testMetadataIsSameOnAllServersAndClientsHA() {\n   public void testClientMetadataForPersistentPrs() throws Exception {\n     LATCH.set(new CountDownLatch(4));\n \n-    int port0 = vm0.invoke(() -> createPersistentPrsAndServer());\n-    int port1 = vm1.invoke(() -> createPersistentPrsAndServer());\n-    int port2 = vm2.invoke(() -> createPersistentPrsAndServer());\n-    int port3 = vm3.invoke(() -> createPersistentPrsAndServer());\n+    int locatorPort = DUnitEnv.get().getLocatorPort();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73be88e2e979389d3bb3a9ce22f9d03690c1bd3f"}, "originalPosition": 1095}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4240, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}