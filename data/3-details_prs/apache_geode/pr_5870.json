{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQzNzM2MzYx", "number": 5870, "title": "GEODE-5922: concurrency problems in SerialGatewaySenderQueue", "bodyText": "reverting 3ed37a7, which caused enqueuing time for async queues to triple.\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-12-21T21:34:57Z", "url": "https://github.com/apache/geode/pull/5870", "merged": true, "mergeCommit": {"oid": "ab16f68c7c3b121af00c3aca64a92d9809cb6019"}, "closed": true, "closedAt": "2021-01-06T17:56:55Z", "author": {"login": "bschuchardt"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdoc3h2AH2gAyNTQzNzM2MzYxOmY4YjA0ZjA5MDU1M2Y3ZTc5MGE2YTY5NjRmMWE5NWRiN2FkMGJiZTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdth-VlgFqTU2Mjg0NTg3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f8b04f090553f7e790a6a6964f1a95db7ad0bbe5", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/f8b04f090553f7e790a6a6964f1a95db7ad0bbe5", "committedDate": "2020-12-21T21:32:12Z", "message": "GEODE-5922: concurrency problems in SerialGatewaySenderQueue\n\nreverting 3ed37a754d789bb52cf190db23088e819955fd58 for performance testing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYxNDM5NTgy", "url": "https://github.com/apache/geode/pull/5870#pullrequestreview-561439582", "createdAt": "2021-01-05T00:26:23Z", "commit": {"oid": "f8b04f090553f7e790a6a6964f1a95db7ad0bbe5"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMDoyNjoyM1rOIOF51Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwMDozMzozOVrOIOGB-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY0NzcwMQ==", "bodyText": "Do we having testing around this now synchronized method?", "url": "https://github.com/apache/geode/pull/5870#discussion_r551647701", "createdAt": "2021-01-05T00:26:23Z", "author": {"login": "echobravopapa"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/serial/SerialGatewaySenderQueue.java", "diffHunk": "@@ -255,23 +247,18 @@ public void destroy() {\n   }\n \n   @Override\n-  public boolean put(Object event) throws CacheException {\n-    lock.writeLock().lock();\n-    try {\n-      GatewaySenderEventImpl eventImpl = (GatewaySenderEventImpl) event;\n-      final Region r = eventImpl.getRegion();\n-      final boolean isPDXRegion =\n-          (r instanceof DistributedRegion && r.getName().equals(PeerTypeRegistration.REGION_NAME));\n-      final boolean isWbcl =\n-          this.regionName.startsWith(AsyncEventQueueImpl.ASYNC_EVENT_QUEUE_PREFIX);\n-      if (!(isPDXRegion && isWbcl)) {\n-        putAndGetKey(event);\n-        return true;\n-      }\n-      return false;\n-    } finally {\n-      lock.writeLock().unlock();\n+  public synchronized boolean put(Object event) throws CacheException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8b04f090553f7e790a6a6964f1a95db7ad0bbe5"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTY0OTc4NQ==", "bodyText": "I was going to ask why this was re-ordered, but its just the diff making it look that way...", "url": "https://github.com/apache/geode/pull/5870#discussion_r551649785", "createdAt": "2021-01-05T00:33:39Z", "author": {"login": "echobravopapa"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/serial/SerialGatewaySenderQueue.java", "diffHunk": "@@ -316,71 +304,66 @@ public AsyncEvent take() throws CacheException {\n    * have peeked. If the entry was not peeked, this method will silently return.\n    */\n   @Override\n-  public void remove() throws CacheException {\n-    lock.writeLock().lock();\n+  public synchronized void remove() throws CacheException {\n+    if (peekedIds.isEmpty()) {\n+      return;\n+    }\n+    Long key = peekedIds.remove();\n+    boolean isExtraPeeked = extraPeekedIds.remove(key);\n     try {\n-      if (peekedIds.isEmpty()) {\n-        return;\n+      // Increment the head key\n+      if (!isExtraPeeked) {\n+        updateHeadKey(key.longValue());\n       }\n-      Long key = peekedIds.remove();\n-      boolean isExtraPeeked = extraPeekedIds.remove(key);\n-      try {\n-        // Increment the head key\n-        if (!isExtraPeeked) {\n-          updateHeadKey(key.longValue());\n-        }\n-        removeIndex(key);\n-        // Remove the entry at that key with a callback arg signifying it is\n-        // a WAN queue so that AbstractRegionEntry.destroy can get the value\n-        // even if it has been evicted to disk. In the normal case, the\n-        // AbstractRegionEntry.destroy only gets the value in the VM.\n-        this.region.localDestroy(key, WAN_QUEUE_TOKEN);\n-        this.stats.decQueueSize();\n-\n-      } catch (EntryNotFoundException ok) {\n-        // this is acceptable because the conflation can remove entries\n-        // out from underneath us.\n-        if (logger.isDebugEnabled()) {\n-          logger.debug(\n-              \"{}: Did not destroy entry at {} it was not there. It should have been removed by conflation.\",\n-              this, key);\n-        }\n+      removeIndex(key);\n+      // Remove the entry at that key with a callback arg signifying it is\n+      // a WAN queue so that AbstractRegionEntry.destroy can get the value\n+      // even if it has been evicted to disk. In the normal case, the\n+      // AbstractRegionEntry.destroy only gets the value in the VM.\n+      this.region.localDestroy(key, WAN_QUEUE_TOKEN);\n+      this.stats.decQueueSize();\n+\n+    } catch (EntryNotFoundException ok) {\n+      // this is acceptable because the conflation can remove entries\n+      // out from underneath us.\n+      if (logger.isDebugEnabled()) {\n+        logger.debug(\n+            \"{}: Did not destroy entry at {} it was not there. It should have been removed by conflation.\",\n+            this, key);\n       }\n+    }\n \n-      boolean wasEmpty = this.lastDispatchedKey == this.lastDestroyedKey;\n-      if (!isExtraPeeked) {\n+    boolean wasEmpty = this.lastDispatchedKey == this.lastDestroyedKey;\n+    if (!isExtraPeeked) {\n+      this.lastDispatchedKey = key;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8b04f090553f7e790a6a6964f1a95db7ad0bbe5"}, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYyODQ1ODc1", "url": "https://github.com/apache/geode/pull/5870#pullrequestreview-562845875", "createdAt": "2021-01-06T16:18:47Z", "commit": {"oid": "f8b04f090553f7e790a6a6964f1a95db7ad0bbe5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4290, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}