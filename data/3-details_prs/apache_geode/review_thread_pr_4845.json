{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMjc2OTQy", "number": 4845, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjo1MjoxNVrODrABPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzo0OTo0OFrODrp2Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2NDE1Njc4OnYy", "diffSide": "RIGHT", "path": "geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeploymentManagementRedployDUnitTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMjo1MjoxNVrOF7GC_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMzowMTo1N1rOF7GSIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwOTM3Mg==", "bodyText": "What is the sleep waiting for? What does \"settle\" mean? Seems like whatever it means couldn't we then do a file system await to figure out if the file has settled?", "url": "https://github.com/apache/geode/pull/4845#discussion_r397509372", "createdAt": "2020-03-24T22:52:15Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeploymentManagementRedployDUnitTest.java", "diffHunk": "@@ -134,14 +135,16 @@ public void redeployJarsWithNewVersionsOfFunctionsAndMultipleLocators() {\n     server.invoke(() -> assertThatCanLoad(JAR_NAME_A, FUNCTION_A));\n     server.invoke(() -> assertThatFunctionHasVersion(FUNCTION_A, VERSION1));\n \n-\n     deployment.setFile(jarAVersion2);\n     assertManagementResult(client.create(deployment)).isSuccessful();\n     server.invoke(() -> assertThatCanLoad(JAR_NAME_A, FUNCTION_A));\n     server.invoke(() -> assertThatFunctionHasVersion(FUNCTION_A, VERSION2));\n \n     server.stop(false);\n \n+    // GEODE-7902: wait for a while for new jars to settle in the file system", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bfb95c562d82fb676fa9482701ad5c3628f0b33"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxMjA2MQ==", "bodyText": "Would an awaitUntilAsserted() around the final assertion (or the final two) suffice, or is it necessary to wait (for whatever the condition is) before doing the restart?\nIf awaitUntilAsserted() works, that's a much more robust fix than a fixed-duration sleep.", "url": "https://github.com/apache/geode/pull/4845#discussion_r397512061", "createdAt": "2020-03-24T22:58:54Z", "author": {"login": "demery-pivotal"}, "path": "geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeploymentManagementRedployDUnitTest.java", "diffHunk": "@@ -134,14 +135,16 @@ public void redeployJarsWithNewVersionsOfFunctionsAndMultipleLocators() {\n     server.invoke(() -> assertThatCanLoad(JAR_NAME_A, FUNCTION_A));\n     server.invoke(() -> assertThatFunctionHasVersion(FUNCTION_A, VERSION1));\n \n-\n     deployment.setFile(jarAVersion2);\n     assertManagementResult(client.create(deployment)).isSuccessful();\n     server.invoke(() -> assertThatCanLoad(JAR_NAME_A, FUNCTION_A));\n     server.invoke(() -> assertThatFunctionHasVersion(FUNCTION_A, VERSION2));\n \n     server.stop(false);\n \n+    // GEODE-7902: wait for a while for new jars to settle in the file system", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwOTM3Mg=="}, "originalCommit": {"oid": "3bfb95c562d82fb676fa9482701ad5c3628f0b33"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUxMzI1MA==", "bodyText": "I believe the wait has to be before the server restarts to get the new version of jars from one of the locators.", "url": "https://github.com/apache/geode/pull/4845#discussion_r397513250", "createdAt": "2020-03-24T23:01:57Z", "author": {"login": "jinmeiliao"}, "path": "geode-assembly/src/distributedTest/java/org/apache/geode/management/internal/rest/DeploymentManagementRedployDUnitTest.java", "diffHunk": "@@ -134,14 +135,16 @@ public void redeployJarsWithNewVersionsOfFunctionsAndMultipleLocators() {\n     server.invoke(() -> assertThatCanLoad(JAR_NAME_A, FUNCTION_A));\n     server.invoke(() -> assertThatFunctionHasVersion(FUNCTION_A, VERSION1));\n \n-\n     deployment.setFile(jarAVersion2);\n     assertManagementResult(client.create(deployment)).isSuccessful();\n     server.invoke(() -> assertThatCanLoad(JAR_NAME_A, FUNCTION_A));\n     server.invoke(() -> assertThatFunctionHasVersion(FUNCTION_A, VERSION2));\n \n     server.stop(false);\n \n+    // GEODE-7902: wait for a while for new jars to settle in the file system", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzUwOTM3Mg=="}, "originalCommit": {"oid": "3bfb95c562d82fb676fa9482701ad5c3628f0b33"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTAxMDA2OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/management/internal/configuration/functions/DownloadJarFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzo0OTo0OFrOF8Hxuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTozMTo1MlrOF8Mr-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4NjI5OQ==", "bodyText": "This should be replaced with an await so we don't get stuck here forever.", "url": "https://github.com/apache/geode/pull/4845#discussion_r398586299", "createdAt": "2020-03-26T13:49:48Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/configuration/functions/DownloadJarFunction.java", "diffHunk": "@@ -61,6 +61,13 @@ public void execute(FunctionContext<Object[]> context) {\n         RemoteInputStreamServer istream = null;\n         try {\n           File jarFile = sharedConfig.getPathToJarOnThisLocator(group, jarName).toFile();\n+          // if file is modified within the last second, wait for a second before downloading it\n+          // It looks like if the file was modified within the same second, the file downloaded\n+          // will be the old content. On mac/linux, the lastModified time of the file is already\n+          // reported to the precision of seconds.\n+          if (jarFile.lastModified() > System.currentTimeMillis() - 1000) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13d39c0e7d87f219510ccf72af05a3bb822fec2c"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2Njc0Nw==", "bodyText": "I tried that but await isn't available in core.", "url": "https://github.com/apache/geode/pull/4845#discussion_r398666747", "createdAt": "2020-03-26T15:31:52Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/configuration/functions/DownloadJarFunction.java", "diffHunk": "@@ -61,6 +61,13 @@ public void execute(FunctionContext<Object[]> context) {\n         RemoteInputStreamServer istream = null;\n         try {\n           File jarFile = sharedConfig.getPathToJarOnThisLocator(group, jarName).toFile();\n+          // if file is modified within the last second, wait for a second before downloading it\n+          // It looks like if the file was modified within the same second, the file downloaded\n+          // will be the old content. On mac/linux, the lastModified time of the file is already\n+          // reported to the precision of seconds.\n+          if (jarFile.lastModified() > System.currentTimeMillis() - 1000) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4NjI5OQ=="}, "originalCommit": {"oid": "13d39c0e7d87f219510ccf72af05a3bb822fec2c"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4420, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}