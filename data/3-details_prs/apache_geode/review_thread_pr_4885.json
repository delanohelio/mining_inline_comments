{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1ODUxMzUy", "number": 4885, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNToyNzoyMFrODs85Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMzowMDowNlrODtUVYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDYxNjM0OnYy", "diffSide": "RIGHT", "path": "geode-web-api/src/main/java/org/apache/geode/rest/internal/web/controllers/PdxBasedCrudController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNToyNzoyMFrOF-F1RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzo0NDo0OVrOF-hHFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1MTU4OQ==", "bodyText": "Have you considered just using the Spring annotations and patterns to match the remainder of the URL path?\n@RequestMapping(value = \"/{region}/**\", ...)\nand\nString[] keys = request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE).split(\",\")", "url": "https://github.com/apache/geode/pull/4885#discussion_r400651589", "createdAt": "2020-03-31T05:27:20Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-web-api/src/main/java/org/apache/geode/rest/internal/web/controllers/PdxBasedCrudController.java", "diffHunk": "@@ -295,12 +296,13 @@ protected String getRestApiVersion() {\n       @ApiResponse(code = 500, message = \"GemFire throws an error or exception.\")})\n   @PreAuthorize(\"@securityService.authorize('WRITE', #region, #keys)\")\n   public ResponseEntity<?> update(@PathVariable(\"region\") String region,\n-      @PathVariable(\"keys\") final String[] keys,\n+      @PathVariable(\"keys\") String[] keys,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22a52e3ee2780bf7b0825e347929fb0ef95796c5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA3MTA1MA==", "bodyText": "It is not clear to me why using /** would be an better than the current solution. The current code is allowing spring to parse the pathvar into an array of String. Why is your way of doing it explicitly better? And how does this relate to supporting a slash in a key? Would your solution not require the keys to be encoded by the user? This /** solution is discouraged here: https://www.baeldung.com/spring-slash-character-in-url but so is encoding/decoding. The current code base already did decoding of each {region} pathvar so that is why I went with also decoding the {keys} pathvar. Also if we don't decode then the swagger page will not work with keys because swagger automatically encodes path and query vars when you execute the apis from the web page.", "url": "https://github.com/apache/geode/pull/4885#discussion_r401071050", "createdAt": "2020-03-31T17:00:45Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-web-api/src/main/java/org/apache/geode/rest/internal/web/controllers/PdxBasedCrudController.java", "diffHunk": "@@ -295,12 +296,13 @@ protected String getRestApiVersion() {\n       @ApiResponse(code = 500, message = \"GemFire throws an error or exception.\")})\n   @PreAuthorize(\"@securityService.authorize('WRITE', #region, #keys)\")\n   public ResponseEntity<?> update(@PathVariable(\"region\") String region,\n-      @PathVariable(\"keys\") final String[] keys,\n+      @PathVariable(\"keys\") String[] keys,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1MTU4OQ=="}, "originalCommit": {"oid": "22a52e3ee2780bf7b0825e347929fb0ef95796c5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA5ODUxNw==", "bodyText": "It relates to supporting slashes in the path without needing to encode them. It makes sense to do it they way you proposed if we are already expecting the region to be encoded.", "url": "https://github.com/apache/geode/pull/4885#discussion_r401098517", "createdAt": "2020-03-31T17:44:49Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-web-api/src/main/java/org/apache/geode/rest/internal/web/controllers/PdxBasedCrudController.java", "diffHunk": "@@ -295,12 +296,13 @@ protected String getRestApiVersion() {\n       @ApiResponse(code = 500, message = \"GemFire throws an error or exception.\")})\n   @PreAuthorize(\"@securityService.authorize('WRITE', #region, #keys)\")\n   public ResponseEntity<?> update(@PathVariable(\"region\") String region,\n-      @PathVariable(\"keys\") final String[] keys,\n+      @PathVariable(\"keys\") String[] keys,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY1MTU4OQ=="}, "originalCommit": {"oid": "22a52e3ee2780bf7b0825e347929fb0ef95796c5"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODQ0OTk2OnYy", "diffSide": "RIGHT", "path": "geode-web-api/src/integrationTest/java/org/apache/geode/rest/internal/web/controllers/RestAccessControllerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjo1Njo1N1rOF-rI5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMzoxODo0MlrOF-rj7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2MjgyMA==", "bodyText": "Curious... why write it like this?", "url": "https://github.com/apache/geode/pull/4885#discussion_r401262820", "createdAt": "2020-03-31T22:56:57Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-web-api/src/integrationTest/java/org/apache/geode/rest/internal/web/controllers/RestAccessControllerTest.java", "diffHunk": "@@ -182,8 +183,7 @@ public void postEntry() throws Exception {\n   @Test\n   @WithMockUser\n   public void postEntryWithSlashKey() throws Exception {\n-    String decodedKey = \"1/2\";\n-    String key = URLEncoder.encode(decodedKey, \"UTF-8\");\n+    String key = \"1\" + SLASH + \"2\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc60b74adfc566d213636cbaa5e85551f6ab7728"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2OTc0MQ==", "bodyText": "I just wanted on easy way to be able to change the value of SLASH and have all the tests use it. I was curious about other special characters", "url": "https://github.com/apache/geode/pull/4885#discussion_r401269741", "createdAt": "2020-03-31T23:18:42Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-web-api/src/integrationTest/java/org/apache/geode/rest/internal/web/controllers/RestAccessControllerTest.java", "diffHunk": "@@ -182,8 +183,7 @@ public void postEntry() throws Exception {\n   @Test\n   @WithMockUser\n   public void postEntryWithSlashKey() throws Exception {\n-    String decodedKey = \"1/2\";\n-    String key = URLEncoder.encode(decodedKey, \"UTF-8\");\n+    String key = \"1\" + SLASH + \"2\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2MjgyMA=="}, "originalCommit": {"oid": "cc60b74adfc566d213636cbaa5e85551f6ab7728"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODQ1MjM5OnYy", "diffSide": "RIGHT", "path": "geode-web-api/src/main/java/org/apache/geode/rest/internal/web/controllers/PdxBasedCrudController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMjo1ODowOFrOF-rKcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMzo0Mzo1NlrOF-sB_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2MzIxOA==", "bodyText": "So does doing this now effect any swagger documentation or code generation?", "url": "https://github.com/apache/geode/pull/4885#discussion_r401263218", "createdAt": "2020-03-31T22:58:08Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-web-api/src/main/java/org/apache/geode/rest/internal/web/controllers/PdxBasedCrudController.java", "diffHunk": "@@ -196,10 +198,9 @@ protected String getRestApiVersion() {\n    * Reading data for set of keys\n    *\n    * @param region gemfire region name\n-   * @param keys string containing comma separated keys\n    * @return JSON document\n    */\n-  @RequestMapping(method = RequestMethod.GET, value = \"/{region}/{keys}\",\n+  @RequestMapping(method = RequestMethod.GET, value = \"/{region}/**\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc60b74adfc566d213636cbaa5e85551f6ab7728"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3NjQ3MQ==", "bodyText": "swagger shows the endpoint as /v1/{region}/** which seems okay\nBut if you click try it out it gives you no way (that I could find) to specify a value for the **", "url": "https://github.com/apache/geode/pull/4885#discussion_r401276471", "createdAt": "2020-03-31T23:40:51Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-web-api/src/main/java/org/apache/geode/rest/internal/web/controllers/PdxBasedCrudController.java", "diffHunk": "@@ -196,10 +198,9 @@ protected String getRestApiVersion() {\n    * Reading data for set of keys\n    *\n    * @param region gemfire region name\n-   * @param keys string containing comma separated keys\n    * @return JSON document\n    */\n-  @RequestMapping(method = RequestMethod.GET, value = \"/{region}/{keys}\",\n+  @RequestMapping(method = RequestMethod.GET, value = \"/{region}/**\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2MzIxOA=="}, "originalCommit": {"oid": "cc60b74adfc566d213636cbaa5e85551f6ab7728"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3NzQzNw==", "bodyText": "Feels like there is no real good solution to this problem.", "url": "https://github.com/apache/geode/pull/4885#discussion_r401277437", "createdAt": "2020-03-31T23:43:56Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-web-api/src/main/java/org/apache/geode/rest/internal/web/controllers/PdxBasedCrudController.java", "diffHunk": "@@ -196,10 +198,9 @@ protected String getRestApiVersion() {\n    * Reading data for set of keys\n    *\n    * @param region gemfire region name\n-   * @param keys string containing comma separated keys\n    * @return JSON document\n    */\n-  @RequestMapping(method = RequestMethod.GET, value = \"/{region}/{keys}\",\n+  @RequestMapping(method = RequestMethod.GET, value = \"/{region}/**\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2MzIxOA=="}, "originalCommit": {"oid": "cc60b74adfc566d213636cbaa5e85551f6ab7728"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4ODQ1NjY3OnYy", "diffSide": "RIGHT", "path": "geode-web-api/src/main/java/org/apache/geode/rest/internal/web/controllers/AbstractBaseController.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMzowMDowNlrOF-rNCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMzoyMzoxMFrOF-rpaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2Mzg4Mw==", "bodyText": "Did request.getAttribute(HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE) not work?", "url": "https://github.com/apache/geode/pull/4885#discussion_r401263883", "createdAt": "2020-03-31T23:00:06Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-web-api/src/main/java/org/apache/geode/rest/internal/web/controllers/AbstractBaseController.java", "diffHunk": "@@ -983,4 +974,16 @@ protected QueryService getQueryService() {\n     targetedMembers.add(cache.getDistributedSystem().getDistributedMember());\n     return targetedMembers;\n   }\n+\n+  protected String[] parseKeys(HttpServletRequest request, String region) {\n+    String uri = request.getRequestURI();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc60b74adfc566d213636cbaa5e85551f6ab7728"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2OTMzNw==", "bodyText": "No it did not. It gave the entire uri. This was in the context of the RestAccessControllerTest", "url": "https://github.com/apache/geode/pull/4885#discussion_r401269337", "createdAt": "2020-03-31T23:17:19Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-web-api/src/main/java/org/apache/geode/rest/internal/web/controllers/AbstractBaseController.java", "diffHunk": "@@ -983,4 +974,16 @@ protected QueryService getQueryService() {\n     targetedMembers.add(cache.getDistributedSystem().getDistributedMember());\n     return targetedMembers;\n   }\n+\n+  protected String[] parseKeys(HttpServletRequest request, String region) {\n+    String uri = request.getRequestURI();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2Mzg4Mw=="}, "originalCommit": {"oid": "cc60b74adfc566d213636cbaa5e85551f6ab7728"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI3MTE0Nw==", "bodyText": "Another thing that did not do what was expected was \"request.getContextPath()\". It returned an empty string. I found an example that expected it to be the first part of the URL up to the start of {region}.", "url": "https://github.com/apache/geode/pull/4885#discussion_r401271147", "createdAt": "2020-03-31T23:23:10Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-web-api/src/main/java/org/apache/geode/rest/internal/web/controllers/AbstractBaseController.java", "diffHunk": "@@ -983,4 +974,16 @@ protected QueryService getQueryService() {\n     targetedMembers.add(cache.getDistributedSystem().getDistributedMember());\n     return targetedMembers;\n   }\n+\n+  protected String[] parseKeys(HttpServletRequest request, String region) {\n+    String uri = request.getRequestURI();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTI2Mzg4Mw=="}, "originalCommit": {"oid": "cc60b74adfc566d213636cbaa5e85551f6ab7728"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4223, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}