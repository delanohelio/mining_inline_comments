{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5NDU0MDQ3", "number": 5526, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDowNzowMVrOElrPPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMTowMDoxOVrOEl1llg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTQxMTgwOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/acceptanceTest/java/org/apache/geode/redis/internal/executor/server/InfoRedisAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDowNzowMVrOHVRvHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTozNTozMFrOHVW6Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA3MjczNQ==", "bodyText": "Please name this class InfoNativeRedisAcceptanceTest to be consistent with the other native acceptance tests.", "url": "https://github.com/apache/geode/pull/5526#discussion_r492072735", "createdAt": "2020-09-21T14:07:01Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/acceptanceTest/java/org/apache/geode/redis/internal/executor/server/InfoRedisAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.server;\n+\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.NativeRedisTestRule;\n+\n+public class InfoRedisAcceptanceTest extends InfoIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1713ba9717670881366fba2c38d0993967eb288a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1NzQ5NA==", "bodyText": "done, thanks", "url": "https://github.com/apache/geode/pull/5526#discussion_r492157494", "createdAt": "2020-09-21T15:35:30Z", "author": {"login": "jhutchison"}, "path": "geode-redis/src/acceptanceTest/java/org/apache/geode/redis/internal/executor/server/InfoRedisAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.server;\n+\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.NativeRedisTestRule;\n+\n+public class InfoRedisAcceptanceTest extends InfoIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA3MjczNQ=="}, "originalCommit": {"oid": "1713ba9717670881366fba2c38d0993967eb288a"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTUxMjE2OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/server/InfoExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNDoyMzoyNlrOHVSt_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTo0MjozM1rOHVXM4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA4ODgyOQ==", "bodyText": "I think this can be replaced with a constraint in RedisCommandType.", "url": "https://github.com/apache/geode/pull/5526#discussion_r492088829", "createdAt": "2020-09-21T14:23:26Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/server/InfoExecutor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.server;\n+\n+import java.util.List;\n+\n+import org.apache.geode.redis.internal.ParameterRequirements.RedisParametersMismatchException;\n+import org.apache.geode.redis.internal.RedisConstants;\n+import org.apache.geode.redis.internal.data.ByteArrayWrapper;\n+import org.apache.geode.redis.internal.executor.AbstractExecutor;\n+import org.apache.geode.redis.internal.executor.RedisResponse;\n+import org.apache.geode.redis.internal.netty.Command;\n+import org.apache.geode.redis.internal.netty.ExecutionHandlerContext;\n+\n+public class InfoExecutor extends AbstractExecutor {\n+\n+  @Override\n+  public RedisResponse executeCommand(Command command,\n+      ExecutionHandlerContext context) {\n+    String result;\n+    List<ByteArrayWrapper> commands =\n+        command.getProcessedCommandWrappers();\n+\n+    if (containsTooManyParameters(commands)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1713ba9717670881366fba2c38d0993967eb288a"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE2MjI3NA==", "bodyText": "as per discussion-  will create a flavor of ParameterRequirements that allows for mesg parameter (the reason we did this to begin with)", "url": "https://github.com/apache/geode/pull/5526#discussion_r492162274", "createdAt": "2020-09-21T15:42:33Z", "author": {"login": "jhutchison"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/server/InfoExecutor.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.server;\n+\n+import java.util.List;\n+\n+import org.apache.geode.redis.internal.ParameterRequirements.RedisParametersMismatchException;\n+import org.apache.geode.redis.internal.RedisConstants;\n+import org.apache.geode.redis.internal.data.ByteArrayWrapper;\n+import org.apache.geode.redis.internal.executor.AbstractExecutor;\n+import org.apache.geode.redis.internal.executor.RedisResponse;\n+import org.apache.geode.redis.internal.netty.Command;\n+import org.apache.geode.redis.internal.netty.ExecutionHandlerContext;\n+\n+public class InfoExecutor extends AbstractExecutor {\n+\n+  @Override\n+  public RedisResponse executeCommand(Command command,\n+      ExecutionHandlerContext context) {\n+    String result;\n+    List<ByteArrayWrapper> commands =\n+        command.getProcessedCommandWrappers();\n+\n+    if (containsTooManyParameters(commands)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA4ODgyOQ=="}, "originalCommit": {"oid": "1713ba9717670881366fba2c38d0993967eb288a"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4MTEwNzQyOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/netty/Command.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQyMTowMDoxOVrOHViPow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxNToxNzoxOVrOHV_cCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0MzIwMw==", "bodyText": "Maybe a nit, but it feels like this is now hidden in a class that is unrelated to anything about parameters. I much preferred your previous idea about passing the 'special' error message in at the constraint level - i.e. in RedisCommandType. Perhaps too much refactoring, but also consider making ParameterRequirements abstract and pulling this method into that class. It feels like a more natural place for it.", "url": "https://github.com/apache/geode/pull/5526#discussion_r492343203", "createdAt": "2020-09-21T21:00:19Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/netty/Command.java", "diffHunk": "@@ -183,8 +184,16 @@ public boolean isOfType(RedisCommandType type) {\n   }\n \n   public String wrongNumberOfArgumentsError() {\n-    return String.format(\"wrong number of arguments for '%s' command\",\n-        getCommandType().toString().toLowerCase());\n+    String result;\n+\n+    if (getCommandType().equals(RedisCommandType.INFO)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a06099ab0f01bc345c4c2d9639ecc833f94f532e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjgyMTUxMg==", "bodyText": "yeah, we discussed that same thing.  I think we both saw this point but decided not to make the change because we had just finished doing it the other way.  Anyway, just pushed a commit that implements it the way we originally discussed (with the parameter being passed in when the command is declared in the RedisCommandTypes file).", "url": "https://github.com/apache/geode/pull/5526#discussion_r492821512", "createdAt": "2020-09-22T15:17:19Z", "author": {"login": "jhutchison"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/netty/Command.java", "diffHunk": "@@ -183,8 +184,16 @@ public boolean isOfType(RedisCommandType type) {\n   }\n \n   public String wrongNumberOfArgumentsError() {\n-    return String.format(\"wrong number of arguments for '%s' command\",\n-        getCommandType().toString().toLowerCase());\n+    String result;\n+\n+    if (getCommandType().equals(RedisCommandType.INFO)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjM0MzIwMw=="}, "originalCommit": {"oid": "a06099ab0f01bc345c4c2d9639ecc833f94f532e"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4808, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}