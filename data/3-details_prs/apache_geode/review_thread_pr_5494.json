{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MjgzMzYw", "number": 5494, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODoxMDozMlrOEfkoQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODoxMDozMlrOEfkoQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNTQxNDQzOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/AbstractGatewaySenderEventProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxODoxMDozMlrOHL7TgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQxOTozNToxNVrOHMALfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2ODAzMw==", "bodyText": "This null check is redundant, since it's implicitly included in the instanceof check.", "url": "https://github.com/apache/geode/pull/5494#discussion_r482268033", "createdAt": "2020-09-02T18:10:32Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/AbstractGatewaySenderEventProcessor.java", "diffHunk": "@@ -1037,24 +1039,32 @@ public void handleSuccessBatchAck(int batchId) {\n       }\n       eventQueueRemove(events.size());\n \n-      final GatewaySenderStats statistics = this.sender.getStatistics();\n+      logThresholdExceededAlerts(events);\n+    }\n+  }\n \n-      // Log an alert for each event if necessary\n-      if (this.sender.getAlertThreshold() > 0) {\n-        Iterator it = events.iterator();\n-        long currentTime = System.currentTimeMillis();\n-        while (it.hasNext()) {\n+  protected void logThresholdExceededAlerts(List<GatewaySenderEventImpl> events) {\n+    // Log an alert for each event if necessary\n+    if (getSender().getAlertThreshold() > 0) {\n+      Iterator it = events.iterator();\n+      long currentTime = System.currentTimeMillis();\n+      while (it.hasNext()) {\n+        try {\n           Object o = it.next();\n           if (o != null && o instanceof GatewaySenderEventImpl) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ab19ec86c5e70ab1ae852b0c6a74825bc2ccec1"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjM0NzkwMQ==", "bodyText": "Thanks for reviewing this change. I tend to not change existing code if I can help it, but since I pulled this method out, I'll refactor it. it could use other work too.", "url": "https://github.com/apache/geode/pull/5494#discussion_r482347901", "createdAt": "2020-09-02T19:35:15Z", "author": {"login": "boglesby"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/AbstractGatewaySenderEventProcessor.java", "diffHunk": "@@ -1037,24 +1039,32 @@ public void handleSuccessBatchAck(int batchId) {\n       }\n       eventQueueRemove(events.size());\n \n-      final GatewaySenderStats statistics = this.sender.getStatistics();\n+      logThresholdExceededAlerts(events);\n+    }\n+  }\n \n-      // Log an alert for each event if necessary\n-      if (this.sender.getAlertThreshold() > 0) {\n-        Iterator it = events.iterator();\n-        long currentTime = System.currentTimeMillis();\n-        while (it.hasNext()) {\n+  protected void logThresholdExceededAlerts(List<GatewaySenderEventImpl> events) {\n+    // Log an alert for each event if necessary\n+    if (getSender().getAlertThreshold() > 0) {\n+      Iterator it = events.iterator();\n+      long currentTime = System.currentTimeMillis();\n+      while (it.hasNext()) {\n+        try {\n           Object o = it.next();\n           if (o != null && o instanceof GatewaySenderEventImpl) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjI2ODAzMw=="}, "originalCommit": {"oid": "0ab19ec86c5e70ab1ae852b0c6a74825bc2ccec1"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4772, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}