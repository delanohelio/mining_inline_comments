{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MTA1OTU4", "number": 5364, "title": "GEODE-8351: DUnit tests for Delta Propagation", "bodyText": "Need to confirm that when deltas are propagated, the data is correctly stored on the secondary", "createdAt": "2020-07-09T21:36:23Z", "url": "https://github.com/apache/geode/pull/5364", "merged": true, "mergeCommit": {"oid": "1ebd307ae1ae87c53f0ff6b8f0c83ab2feda93cd"}, "closed": true, "closedAt": "2020-07-14T14:02:01Z", "author": {"login": "sabbey37"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczWAoKgH2gAyNDQ3MTA1OTU4OjAxMTEyNDQxY2YxZWFmNmJjZjk2NzY3MzQ0ZGJlYmMwNDlhZWE0YjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc02e5fAFqTQ0ODEzMjc5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "01112441cf1eaf6bcf96767344dbebc049aea4b1", "author": {"user": {"login": "sabbey37", "name": "Sarah"}}, "url": "https://github.com/apache/geode/commit/01112441cf1eaf6bcf96767344dbebc049aea4b1", "committedDate": "2020-07-09T21:34:49Z", "message": "GEODE-8351: DUnit tests for Delta Propagation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MDA1MjI4", "url": "https://github.com/apache/geode/pull/5364#pullrequestreview-446005228", "createdAt": "2020-07-09T22:15:37Z", "commit": {"oid": "01112441cf1eaf6bcf96767344dbebc049aea4b1"}, "state": "DISMISSED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMjoxNTozN1rOGvjoIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMjoyNDoxNFrOGvj0Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUxOTk2OA==", "bodyText": "I think you want this to be \"append\" instead of \"set\".", "url": "https://github.com/apache/geode/pull/5364#discussion_r452519968", "createdAt": "2020-07-09T22:15:37Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/internal/data/DeltaDUnitTest.java", "diffHunk": "@@ -0,0 +1,339 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.data;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.MAX_WAIT_TIME_RECONNECT;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.partition.PartitionRegionHelper;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.test.awaitility.GeodeAwaitility;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.dunit.rules.RedisClusterStartupRule;\n+\n+public class DeltaDUnitTest {\n+\n+  @ClassRule\n+  public static RedisClusterStartupRule clusterStartUp = new RedisClusterStartupRule(4);\n+\n+  private static final String LOCAL_HOST = \"127.0.0.1\";\n+  private static final int SET_SIZE = 10;\n+  private static final int JEDIS_TIMEOUT =\n+      Math.toIntExact(GeodeAwaitility.getTimeout().toMillis());\n+  private static Jedis jedis1;\n+  private static Jedis jedis2;\n+\n+  private static Properties locatorProperties;\n+\n+  private static MemberVM locator;\n+  private static MemberVM server1;\n+  private static MemberVM server2;\n+\n+  private static int redisServerPort1;\n+  private static int redisServerPort2;\n+\n+  @BeforeClass\n+  public static void classSetup() {\n+    locatorProperties = new Properties();\n+    locatorProperties.setProperty(MAX_WAIT_TIME_RECONNECT, \"15000\");\n+\n+    locator = clusterStartUp.startLocatorVM(0, locatorProperties);\n+    server1 = clusterStartUp.startRedisVM(1, locator.getPort());\n+    server2 = clusterStartUp.startRedisVM(2, locator.getPort());\n+\n+    redisServerPort1 = clusterStartUp.getRedisPort(1);\n+    redisServerPort2 = clusterStartUp.getRedisPort(2);\n+\n+    jedis1 = new Jedis(LOCAL_HOST, redisServerPort1, JEDIS_TIMEOUT);\n+    jedis2 = new Jedis(LOCAL_HOST, redisServerPort2, JEDIS_TIMEOUT);\n+  }\n+\n+  @Before\n+  public void testSetup() {\n+    jedis1.flushAll();\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    jedis1.disconnect();\n+    jedis2.disconnect();\n+\n+    server1.stop();\n+    server2.stop();\n+  }\n+\n+  @Test\n+  public void shouldCorrectlyPropagateDeltaToSecondaryServer_whenAppending() {\n+    String key = \"key\";\n+    String baseValue = \"value-\";\n+    jedis1.set(key, baseValue);\n+    for (int i = 0; i < SET_SIZE; i++) {\n+      jedis1.set(key, String.valueOf(i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01112441cf1eaf6bcf96767344dbebc049aea4b1"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyMDk3OQ==", "bodyText": "instead of SET_SIZE in this context should be something like APPEND_COUNT?", "url": "https://github.com/apache/geode/pull/5364#discussion_r452520979", "createdAt": "2020-07-09T22:18:21Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/internal/data/DeltaDUnitTest.java", "diffHunk": "@@ -0,0 +1,339 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.data;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.MAX_WAIT_TIME_RECONNECT;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.partition.PartitionRegionHelper;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.test.awaitility.GeodeAwaitility;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.dunit.rules.RedisClusterStartupRule;\n+\n+public class DeltaDUnitTest {\n+\n+  @ClassRule\n+  public static RedisClusterStartupRule clusterStartUp = new RedisClusterStartupRule(4);\n+\n+  private static final String LOCAL_HOST = \"127.0.0.1\";\n+  private static final int SET_SIZE = 10;\n+  private static final int JEDIS_TIMEOUT =\n+      Math.toIntExact(GeodeAwaitility.getTimeout().toMillis());\n+  private static Jedis jedis1;\n+  private static Jedis jedis2;\n+\n+  private static Properties locatorProperties;\n+\n+  private static MemberVM locator;\n+  private static MemberVM server1;\n+  private static MemberVM server2;\n+\n+  private static int redisServerPort1;\n+  private static int redisServerPort2;\n+\n+  @BeforeClass\n+  public static void classSetup() {\n+    locatorProperties = new Properties();\n+    locatorProperties.setProperty(MAX_WAIT_TIME_RECONNECT, \"15000\");\n+\n+    locator = clusterStartUp.startLocatorVM(0, locatorProperties);\n+    server1 = clusterStartUp.startRedisVM(1, locator.getPort());\n+    server2 = clusterStartUp.startRedisVM(2, locator.getPort());\n+\n+    redisServerPort1 = clusterStartUp.getRedisPort(1);\n+    redisServerPort2 = clusterStartUp.getRedisPort(2);\n+\n+    jedis1 = new Jedis(LOCAL_HOST, redisServerPort1, JEDIS_TIMEOUT);\n+    jedis2 = new Jedis(LOCAL_HOST, redisServerPort2, JEDIS_TIMEOUT);\n+  }\n+\n+  @Before\n+  public void testSetup() {\n+    jedis1.flushAll();\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    jedis1.disconnect();\n+    jedis2.disconnect();\n+\n+    server1.stop();\n+    server2.stop();\n+  }\n+\n+  @Test\n+  public void shouldCorrectlyPropagateDeltaToSecondaryServer_whenAppending() {\n+    String key = \"key\";\n+    String baseValue = \"value-\";\n+    jedis1.set(key, baseValue);\n+    for (int i = 0; i < SET_SIZE; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01112441cf1eaf6bcf96767344dbebc049aea4b1"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyMTY1NQ==", "bodyText": "extract this chunk of code that into a single method that checks that the primary and secondary are consistent.", "url": "https://github.com/apache/geode/pull/5364#discussion_r452521655", "createdAt": "2020-07-09T22:20:07Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/internal/data/DeltaDUnitTest.java", "diffHunk": "@@ -0,0 +1,339 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.data;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.MAX_WAIT_TIME_RECONNECT;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.partition.PartitionRegionHelper;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.test.awaitility.GeodeAwaitility;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.dunit.rules.RedisClusterStartupRule;\n+\n+public class DeltaDUnitTest {\n+\n+  @ClassRule\n+  public static RedisClusterStartupRule clusterStartUp = new RedisClusterStartupRule(4);\n+\n+  private static final String LOCAL_HOST = \"127.0.0.1\";\n+  private static final int SET_SIZE = 10;\n+  private static final int JEDIS_TIMEOUT =\n+      Math.toIntExact(GeodeAwaitility.getTimeout().toMillis());\n+  private static Jedis jedis1;\n+  private static Jedis jedis2;\n+\n+  private static Properties locatorProperties;\n+\n+  private static MemberVM locator;\n+  private static MemberVM server1;\n+  private static MemberVM server2;\n+\n+  private static int redisServerPort1;\n+  private static int redisServerPort2;\n+\n+  @BeforeClass\n+  public static void classSetup() {\n+    locatorProperties = new Properties();\n+    locatorProperties.setProperty(MAX_WAIT_TIME_RECONNECT, \"15000\");\n+\n+    locator = clusterStartUp.startLocatorVM(0, locatorProperties);\n+    server1 = clusterStartUp.startRedisVM(1, locator.getPort());\n+    server2 = clusterStartUp.startRedisVM(2, locator.getPort());\n+\n+    redisServerPort1 = clusterStartUp.getRedisPort(1);\n+    redisServerPort2 = clusterStartUp.getRedisPort(2);\n+\n+    jedis1 = new Jedis(LOCAL_HOST, redisServerPort1, JEDIS_TIMEOUT);\n+    jedis2 = new Jedis(LOCAL_HOST, redisServerPort2, JEDIS_TIMEOUT);\n+  }\n+\n+  @Before\n+  public void testSetup() {\n+    jedis1.flushAll();\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    jedis1.disconnect();\n+    jedis2.disconnect();\n+\n+    server1.stop();\n+    server2.stop();\n+  }\n+\n+  @Test\n+  public void shouldCorrectlyPropagateDeltaToSecondaryServer_whenAppending() {\n+    String key = \"key\";\n+    String baseValue = \"value-\";\n+    jedis1.set(key, baseValue);\n+    for (int i = 0; i < SET_SIZE; i++) {\n+      jedis1.set(key, String.valueOf(i));\n+\n+      String server1LocalValue = server1.invoke(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01112441cf1eaf6bcf96767344dbebc049aea4b1"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUyMzA2Nw==", "bodyText": "Instead of using the RedisData's toString (which might not show all fields) try converting it to a byte array. You can use BlobHelper.serializeToBlob and then have this return the byte array. Then use the JDK Arrays.equals(byte[], byte[]) to see if they are equal. If they are not you will want to use BlobHelper.deserializeBlob(byte[]) to report the objects that are not equal.", "url": "https://github.com/apache/geode/pull/5364#discussion_r452523067", "createdAt": "2020-07-09T22:24:14Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/internal/data/DeltaDUnitTest.java", "diffHunk": "@@ -0,0 +1,339 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.data;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.MAX_WAIT_TIME_RECONNECT;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.partition.PartitionRegionHelper;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.test.awaitility.GeodeAwaitility;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.dunit.rules.RedisClusterStartupRule;\n+\n+public class DeltaDUnitTest {\n+\n+  @ClassRule\n+  public static RedisClusterStartupRule clusterStartUp = new RedisClusterStartupRule(4);\n+\n+  private static final String LOCAL_HOST = \"127.0.0.1\";\n+  private static final int SET_SIZE = 10;\n+  private static final int JEDIS_TIMEOUT =\n+      Math.toIntExact(GeodeAwaitility.getTimeout().toMillis());\n+  private static Jedis jedis1;\n+  private static Jedis jedis2;\n+\n+  private static Properties locatorProperties;\n+\n+  private static MemberVM locator;\n+  private static MemberVM server1;\n+  private static MemberVM server2;\n+\n+  private static int redisServerPort1;\n+  private static int redisServerPort2;\n+\n+  @BeforeClass\n+  public static void classSetup() {\n+    locatorProperties = new Properties();\n+    locatorProperties.setProperty(MAX_WAIT_TIME_RECONNECT, \"15000\");\n+\n+    locator = clusterStartUp.startLocatorVM(0, locatorProperties);\n+    server1 = clusterStartUp.startRedisVM(1, locator.getPort());\n+    server2 = clusterStartUp.startRedisVM(2, locator.getPort());\n+\n+    redisServerPort1 = clusterStartUp.getRedisPort(1);\n+    redisServerPort2 = clusterStartUp.getRedisPort(2);\n+\n+    jedis1 = new Jedis(LOCAL_HOST, redisServerPort1, JEDIS_TIMEOUT);\n+    jedis2 = new Jedis(LOCAL_HOST, redisServerPort2, JEDIS_TIMEOUT);\n+  }\n+\n+  @Before\n+  public void testSetup() {\n+    jedis1.flushAll();\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    jedis1.disconnect();\n+    jedis2.disconnect();\n+\n+    server1.stop();\n+    server2.stop();\n+  }\n+\n+  @Test\n+  public void shouldCorrectlyPropagateDeltaToSecondaryServer_whenAppending() {\n+    String key = \"key\";\n+    String baseValue = \"value-\";\n+    jedis1.set(key, baseValue);\n+    for (int i = 0; i < SET_SIZE; i++) {\n+      jedis1.set(key, String.valueOf(i));\n+\n+      String server1LocalValue = server1.invoke(() -> {\n+        InternalCache cache = ClusterStartupRule.getCache();\n+        Region<ByteArrayWrapper, RedisData> region = cache.getRegion(\"__REDIS_DATA\");\n+        Region<ByteArrayWrapper, RedisData> localRegion =\n+            PartitionRegionHelper.getLocalData(region);\n+\n+        RedisData localValue = localRegion.get(new ByteArrayWrapper(key.getBytes()));\n+        return localValue.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01112441cf1eaf6bcf96767344dbebc049aea4b1"}, "originalPosition": 110}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60d3958128939658da76173e689f7c21de4529ce", "author": {"user": {"login": "sabbey37", "name": "Sarah"}}, "url": "https://github.com/apache/geode/commit/60d3958128939658da76173e689f7c21de4529ce", "committedDate": "2020-07-13T16:19:14Z", "message": "PR review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77b56e3ff9068be03c2e7e88457d4b2b8617f7c6", "author": {"user": {"login": "sabbey37", "name": "Sarah"}}, "url": "https://github.com/apache/geode/commit/77b56e3ff9068be03c2e7e88457d4b2b8617f7c6", "committedDate": "2020-07-13T17:28:17Z", "message": "ignores unchecked casts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MTMyNTg2", "url": "https://github.com/apache/geode/pull/5364#pullrequestreview-448132586", "createdAt": "2020-07-14T13:58:33Z", "commit": {"oid": "77b56e3ff9068be03c2e7e88457d4b2b8617f7c6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzo1ODozM1rOGxU8yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxMzo1ODozM1rOGxU8yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDM3NjY0OA==", "bodyText": "key is unused since it is captured by the lambdas and not used anywhere else other than the function being passed in. Don't worry about changing it unless there is something else you happen to also change before we merge in.", "url": "https://github.com/apache/geode/pull/5364#discussion_r454376648", "createdAt": "2020-07-14T13:58:33Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/internal/data/DeltaDUnitTest.java", "diffHunk": "@@ -0,0 +1,315 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.data;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.MAX_WAIT_TIME_RECONNECT;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.function.Function;\n+\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.partition.PartitionRegionHelper;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.util.BlobHelper;\n+import org.apache.geode.test.awaitility.GeodeAwaitility;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.dunit.rules.RedisClusterStartupRule;\n+\n+@SuppressWarnings(\"unchecked\")\n+public class DeltaDUnitTest {\n+\n+  @ClassRule\n+  public static RedisClusterStartupRule clusterStartUp = new RedisClusterStartupRule(4);\n+\n+  private static final String LOCAL_HOST = \"127.0.0.1\";\n+  private static final int ITERATION_COUNT = 1000;\n+  private static final int JEDIS_TIMEOUT =\n+      Math.toIntExact(GeodeAwaitility.getTimeout().toMillis());\n+  private static Jedis jedis1;\n+  private static Jedis jedis2;\n+\n+  private static Properties locatorProperties;\n+\n+  private static MemberVM locator;\n+  private static MemberVM server1;\n+  private static MemberVM server2;\n+\n+  private static int redisServerPort1;\n+  private static int redisServerPort2;\n+\n+  @BeforeClass\n+  public static void classSetup() {\n+    locatorProperties = new Properties();\n+    locatorProperties.setProperty(MAX_WAIT_TIME_RECONNECT, \"15000\");\n+\n+    locator = clusterStartUp.startLocatorVM(0, locatorProperties);\n+    server1 = clusterStartUp.startRedisVM(1, locator.getPort());\n+    server2 = clusterStartUp.startRedisVM(2, locator.getPort());\n+\n+    redisServerPort1 = clusterStartUp.getRedisPort(1);\n+    redisServerPort2 = clusterStartUp.getRedisPort(2);\n+\n+    jedis1 = new Jedis(LOCAL_HOST, redisServerPort1, JEDIS_TIMEOUT);\n+    jedis2 = new Jedis(LOCAL_HOST, redisServerPort2, JEDIS_TIMEOUT);\n+  }\n+\n+  @Before\n+  public void testSetup() {\n+    jedis1.flushAll();\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    jedis1.disconnect();\n+    jedis2.disconnect();\n+\n+    server1.stop();\n+    server2.stop();\n+  }\n+\n+  @Test\n+  public void shouldCorrectlyPropagateDeltaToSecondaryServer_whenAppending() {\n+    String key = \"key\";\n+    String baseValue = \"value-\";\n+    jedis1.set(key, baseValue);\n+    for (int i = 0; i < ITERATION_COUNT; i++) {\n+      jedis1.append(key, String.valueOf(i));\n+\n+      byte[] server1LocalValue = server1.invoke(() -> (byte[]) getLocalData(key, r -> {\n+        RedisData localValue = r.get(new ByteArrayWrapper(key.getBytes()));\n+\n+        try {\n+          return BlobHelper.serializeToBlob(localValue);\n+        } catch (IOException e) {\n+          throw new RuntimeException(e);\n+        }\n+      }));\n+\n+      byte[] server2LocalValue = server2.invoke(() -> (byte[]) getLocalData(key, r -> {\n+        RedisData localValue = r.get(new ByteArrayWrapper(key.getBytes()));\n+\n+        try {\n+          return BlobHelper.serializeToBlob(localValue);\n+        } catch (IOException e) {\n+          throw new RuntimeException(e);\n+        }\n+      }));\n+\n+      assertThat(Arrays.equals(server1LocalValue, server2LocalValue));\n+    }\n+  }\n+\n+  @Test\n+  public void shouldCorrectlyPropagateDeltaToSecondaryServer_whenAddingToSet() {\n+    String key = \"key\";\n+\n+    List<String> members = makeMemberList(ITERATION_COUNT, \"member-\");\n+    for (String member : members) {\n+      jedis1.sadd(key, member);\n+      Set<ByteArrayWrapper> server1LocalSet =\n+          server1.invoke(() -> (Set<ByteArrayWrapper>) getLocalData(key, r -> {\n+            RedisSet localSet = (RedisSet) r.get(new ByteArrayWrapper(key.getBytes()));\n+            if (localSet == null) {\n+              return null;\n+            }\n+            return localSet.smembers();\n+          }));\n+\n+      Set<ByteArrayWrapper> server2LocalSet =\n+          server2.invoke(() -> (Set<ByteArrayWrapper>) getLocalData(key, r -> {\n+            RedisSet localSet = (RedisSet) r.get(new ByteArrayWrapper(key.getBytes()));\n+            if (localSet == null) {\n+              return null;\n+            }\n+            return localSet.smembers();\n+          }));\n+\n+      assertThat(server1LocalSet).containsExactlyInAnyOrder(server2LocalSet.toArray(\n+          new ByteArrayWrapper[] {}));\n+    }\n+  }\n+\n+  @Test\n+  public void shouldCorrectlyPropagateDeltaToSecondaryServer_whenRemovingFromSet() {\n+    String key = \"key\";\n+\n+    List<String> members = makeMemberList(ITERATION_COUNT, \"member-\");\n+    jedis1.sadd(key, members.toArray(new String[] {}));\n+\n+    for (String member : members) {\n+      jedis1.srem(key, member);\n+      Set<ByteArrayWrapper> server1LocalSet =\n+          server1.invoke(() -> (Set<ByteArrayWrapper>) getLocalData(key, r -> {\n+            RedisSet localSet = (RedisSet) r.get(new ByteArrayWrapper(key.getBytes()));\n+            if (localSet == null) {\n+              return null;\n+            }\n+            return localSet.smembers();\n+          }));\n+\n+      Set<ByteArrayWrapper> server2LocalSet =\n+          server2.invoke(() -> (Set<ByteArrayWrapper>) getLocalData(key, r -> {\n+            RedisSet localSet = (RedisSet) r.get(new ByteArrayWrapper(key.getBytes()));\n+            if (localSet == null) {\n+              return null;\n+            }\n+            return localSet.smembers();\n+          }));\n+\n+      if (server1LocalSet == null || server2LocalSet == null) {\n+        assertThat(server1LocalSet).isEqualTo(server2LocalSet);\n+      } else {\n+        assertThat(server1LocalSet).containsExactlyInAnyOrder(server2LocalSet.toArray(\n+            new ByteArrayWrapper[] {}));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void shouldCorrectlyPropagateDeltaToSecondaryServer_whenAddingToHash() {\n+    String key = \"key\";\n+\n+    Map<String, String> testMap = makeHashMap(ITERATION_COUNT, \"field-\", \"value-\");\n+\n+    for (String field : testMap.keySet()) {\n+      jedis1.hset(key, field, testMap.get(field));\n+\n+      Collection<ByteArrayWrapper> server1LocalHash =\n+          server1.invoke(() -> (Collection<ByteArrayWrapper>) getLocalData(key, r -> {\n+            RedisHash localSet = (RedisHash) r.get(new ByteArrayWrapper(key.getBytes()));\n+            return localSet.hgetall();\n+          }));\n+\n+      Collection<ByteArrayWrapper> server2LocalHash =\n+          server2.invoke(() -> (Collection<ByteArrayWrapper>) getLocalData(key, r -> {\n+            RedisHash localSet = (RedisHash) r.get(new ByteArrayWrapper(key.getBytes()));\n+            return localSet.hgetall();\n+          }));\n+\n+      assertThat(server1LocalHash).containsExactlyInAnyOrder(server2LocalHash.toArray(\n+          new ByteArrayWrapper[] {}));\n+    }\n+  }\n+\n+  @Test\n+  public void shouldCorrectlyPropagateDeltaToSecondaryServer_whenRemovingFromHash() {\n+    String key = \"key\";\n+\n+    Map<String, String> testMap = makeHashMap(ITERATION_COUNT, \"field-\", \"value-\");\n+    jedis1.hset(key, testMap);\n+\n+    for (String field : testMap.keySet()) {\n+      jedis1.hdel(key, field, testMap.get(field));\n+\n+      Collection<ByteArrayWrapper> server1LocalHash =\n+          server1.invoke(() -> (Collection<ByteArrayWrapper>) getLocalData(key, r -> {\n+            RedisHash localSet = (RedisHash) r.get(new ByteArrayWrapper(key.getBytes()));\n+            if (localSet == null) {\n+              return null;\n+            }\n+            return localSet.hgetall();\n+          }));\n+\n+      Collection<ByteArrayWrapper> server2LocalHash =\n+          server2.invoke(() -> (Collection<ByteArrayWrapper>) getLocalData(key, r -> {\n+            RedisHash localSet = (RedisHash) r.get(new ByteArrayWrapper(key.getBytes()));\n+            if (localSet == null) {\n+              return null;\n+            }\n+            return localSet.hgetall();\n+          }));\n+\n+      if (server1LocalHash == null || server2LocalHash == null) {\n+        assertThat(server1LocalHash).isEqualTo(server2LocalHash);\n+      } else {\n+        assertThat(server1LocalHash).containsExactlyInAnyOrder(server2LocalHash.toArray(\n+            new ByteArrayWrapper[] {}));\n+      }\n+    }\n+  }\n+\n+  @Test\n+  public void shouldCorrectlyPropagateDeltaToSecondaryServer_whenExpiring() {\n+    String baseKey = \"key-\";\n+\n+    for (int i = 0; i < ITERATION_COUNT; i++) {\n+      String key = baseKey + i;\n+      jedis1.set(key, \"value\");\n+      jedis1.expire(key, 20);\n+      long server1LocalExpirtionTimestamp = server1.invoke(() -> (long) getLocalData(key, r -> {\n+        RedisData localSet = r.get(new ByteArrayWrapper(key.getBytes()));\n+        if (localSet == null) {\n+          return null;\n+        }\n+        return localSet.getExpirationTimestamp();\n+      }));\n+\n+      long server2LocalExpirationTimestamp = server2.invoke(() -> (long) getLocalData(key, r -> {\n+        RedisData localSet = r.get(new ByteArrayWrapper(key.getBytes()));\n+        if (localSet == null) {\n+          return null;\n+        }\n+        return localSet.getExpirationTimestamp();\n+      }));\n+\n+      assertThat(server1LocalExpirtionTimestamp).isEqualTo(server2LocalExpirationTimestamp);\n+    }\n+  }\n+\n+  private static Object getLocalData(String key,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77b56e3ff9068be03c2e7e88457d4b2b8617f7c6"}, "originalPosition": 289}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4MTMyNzk5", "url": "https://github.com/apache/geode/pull/5364#pullrequestreview-448132799", "createdAt": "2020-07-14T13:58:46Z", "commit": {"oid": "77b56e3ff9068be03c2e7e88457d4b2b8617f7c6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4377, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}