{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU4ODM4MjAy", "number": 4558, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxOTo0MTo0N1rODWEUTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMToxMTo1OFrODWFnDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDY1OTk3OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/InternalLocator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxOTo0MTo0N1rOFanR3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxOTo0MTo0N1rOFanR3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ1MDg0NQ==", "bodyText": "this looks a lot cleaner!", "url": "https://github.com/apache/geode/pull/4558#discussion_r363450845", "createdAt": "2020-01-06T19:41:47Z", "author": {"login": "echobravopapa"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/InternalLocator.java", "diffHunk": "@@ -913,41 +944,7 @@ public void stop(boolean forcedDisconnect, boolean stopForReconnect, boolean wai\n       locatorDiscoverer = null;\n     }\n \n-    if (server.isAlive()) {\n-      logger.info(\"Stopping {}\", this);\n-      try {\n-        new TcpClient(\n-            asTcpSocketCreator(\n-                SocketCreatorFactory\n-                    .getSocketCreatorForComponent(SecurableCommunicationChannel.LOCATOR)),\n-            InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n-            InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer())\n-                .stop(bindAddress, getPort());\n-      } catch (ConnectException ignore) {\n-        // must not be running\n-      }\n-\n-      boolean interrupted = Thread.interrupted();\n-      try {\n-        // TcpServer up to SHUTDOWN_WAIT_TIME for its executor pool to shut down.\n-        // We wait 2 * SHUTDOWN_WAIT_TIME here to account for that shutdown, and then our own.\n-        server.join(TcpServer.SHUTDOWN_WAIT_TIME * 2);\n-\n-      } catch (InterruptedException ex) {\n-        interrupted = true;\n-        logger.warn(\"Interrupted while stopping {}\", this, ex);\n-\n-        // Continue running -- doing our best to stop everything...\n-      } finally {\n-        if (interrupted) {\n-          Thread.currentThread().interrupt();\n-        }\n-      }\n-\n-      if (server.isAlive()) {\n-        logger.fatal(\"Could not stop {} in 60 seconds\", this);\n-      }\n-    }\n+    membershipLocator.stop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a1f28eebd4c2c07feb7905fe08fc8fa1691bc6"}, "originalPosition": 351}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDY2MjAxOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/InternalLocator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxOTo0Mjo0M1rOFanTOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxOTo1MToxM1rOFangqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ1MTE5Mg==", "bodyText": "How did this signal all the handlers before...?", "url": "https://github.com/apache/geode/pull/4558#discussion_r363451192", "createdAt": "2020-01-06T19:42:43Z", "author": {"login": "echobravopapa"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/InternalLocator.java", "diffHunk": "@@ -1197,8 +1193,9 @@ private void restartWithSystem(InternalDistributedSystem newSystem, InternalCach\n     logger.info(\"Locator restart: initializing TcpServer\");\n \n     try {\n-      handler.restarting(newSystem, newCache, configurationPersistenceService);\n-      server.restarting();\n+      restartHandlers.forEach(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a1f28eebd4c2c07feb7905fe08fc8fa1691bc6"}, "originalPosition": 396}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ1NDYzNA==", "bodyText": "The old handler variable was a PrimaryHandler, which broadcast the handler.restarting() call.", "url": "https://github.com/apache/geode/pull/4558#discussion_r363454634", "createdAt": "2020-01-06T19:51:13Z", "author": {"login": "upthewaterspout"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/InternalLocator.java", "diffHunk": "@@ -1197,8 +1193,9 @@ private void restartWithSystem(InternalDistributedSystem newSystem, InternalCach\n     logger.info(\"Locator restart: initializing TcpServer\");\n \n     try {\n-      handler.restarting(newSystem, newCache, configurationPersistenceService);\n-      server.restarting();\n+      restartHandlers.forEach(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ1MTE5Mg=="}, "originalCommit": {"oid": "52a1f28eebd4c2c07feb7905fe08fc8fa1691bc6"}, "originalPosition": 396}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDY3MzI5OnYy", "diffSide": "RIGHT", "path": "geode-tcp-server/src/distributedTest/java/org/apache/geode/distributed/internal/tcpserver/TcpServerJUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxOTo0NzoyNlrOFanapA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQxOTo0NzoyNlrOFanapA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ1MzA5Mg==", "bodyText": "inlining FTW!", "url": "https://github.com/apache/geode/pull/4558#discussion_r363453092", "createdAt": "2020-01-06T19:47:26Z", "author": {"login": "echobravopapa"}, "path": "geode-tcp-server/src/distributedTest/java/org/apache/geode/distributed/internal/tcpserver/TcpServerJUnitTest.java", "diffHunk": "@@ -83,8 +89,20 @@ private void start(TcpHandler handler) throws IOException {\n     port = getNeverUsedPort();\n \n     stats = new SimpleStats();\n-    server = new TcpServerFactory().makeTcpServer(port, localhost, handler,\n-        stats, \"server thread\", null);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a1f28eebd4c2c07feb7905fe08fc8fa1691bc6"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDg2MDY1OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/membership/gms/MembershipLocatorBuilderImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMTowNzowNFrOFapQLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMjozNjoyMlrOFarRJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4MzE4Mw==", "bodyText": "What attributes are optional with this builder?   It looks like MembershipLocatorImpl will throw an NPE if a MembershipConfig isn't supplied.", "url": "https://github.com/apache/geode/pull/4558#discussion_r363483183", "createdAt": "2020-01-06T21:07:04Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/membership/gms/MembershipLocatorBuilderImpl.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.distributed.internal.membership.gms;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.file.Path;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Supplier;\n+\n+import org.apache.geode.distributed.internal.membership.api.MemberIdentifier;\n+import org.apache.geode.distributed.internal.membership.api.MembershipConfig;\n+import org.apache.geode.distributed.internal.membership.api.MembershipConfigurationException;\n+import org.apache.geode.distributed.internal.membership.api.MembershipLocator;\n+import org.apache.geode.distributed.internal.membership.api.MembershipLocatorBuilder;\n+import org.apache.geode.distributed.internal.membership.api.MembershipLocatorStatistics;\n+import org.apache.geode.distributed.internal.membership.gms.locator.MembershipLocatorImpl;\n+import org.apache.geode.distributed.internal.tcpserver.ProtocolChecker;\n+import org.apache.geode.distributed.internal.tcpserver.TcpHandler;\n+import org.apache.geode.distributed.internal.tcpserver.TcpSocketCreator;\n+import org.apache.geode.internal.serialization.ObjectDeserializer;\n+import org.apache.geode.internal.serialization.ObjectSerializer;\n+\n+public final class MembershipLocatorBuilderImpl<ID extends MemberIdentifier> implements\n+    MembershipLocatorBuilder<ID> {\n+  private int port = 0;\n+  private InetAddress bindAddress = null;\n+  private ProtocolChecker protocolChecker = (socket, input, firstByte) -> false;\n+  private TcpHandler fallbackHandler = new TcpHandlerNoOp();\n+  private MembershipLocatorStatistics locatorStats = new MembershipLocatorStatisticsNoOp();\n+  private boolean locatorsAreCoordinators = true;\n+  private TcpSocketCreator socketCreator;\n+  private ObjectSerializer objectSerializer;\n+  private ObjectDeserializer objectDeserializer;\n+  private Path workingDirectory;\n+  private MembershipConfig config;\n+  private Supplier<ExecutorService> executorServiceSupplier;\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setPort(int port) {\n+    this.port = port;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setBindAddress(InetAddress bindAddress) {\n+    this.bindAddress = bindAddress;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setProtocolChecker(ProtocolChecker protocolChecker) {\n+    this.protocolChecker = protocolChecker;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setExecutorServiceSupplier(\n+      Supplier<ExecutorService> executorServiceSupplier) {\n+    this.executorServiceSupplier = executorServiceSupplier;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setSocketCreator(TcpSocketCreator socketCreator) {\n+    this.socketCreator = socketCreator;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setObjectSerializer(ObjectSerializer objectSerializer) {\n+    this.objectSerializer = objectSerializer;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setObjectDeserializer(ObjectDeserializer objectDeserializer) {\n+    this.objectDeserializer = objectDeserializer;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setFallbackHandler(TcpHandler fallbackHandler) {\n+    this.fallbackHandler = fallbackHandler;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setLocatorsAreCoordinators(boolean locatorsAreCoordinators) {\n+    this.locatorsAreCoordinators = locatorsAreCoordinators;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setLocatorStats(MembershipLocatorStatistics locatorStats) {\n+    this.locatorStats = locatorStats;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setWorkingDirectory(Path workingDirectory) {\n+    this.workingDirectory = workingDirectory;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setConfig(MembershipConfig config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a1f28eebd4c2c07feb7905fe08fc8fa1691bc6"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4OTA1Mw==", "bodyText": "Anything that doesn't have a default is required. Are you suggesting some additional documentation or other way of indicating what attributes are optional?", "url": "https://github.com/apache/geode/pull/4558#discussion_r363489053", "createdAt": "2020-01-06T21:22:19Z", "author": {"login": "upthewaterspout"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/membership/gms/MembershipLocatorBuilderImpl.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.distributed.internal.membership.gms;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.file.Path;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Supplier;\n+\n+import org.apache.geode.distributed.internal.membership.api.MemberIdentifier;\n+import org.apache.geode.distributed.internal.membership.api.MembershipConfig;\n+import org.apache.geode.distributed.internal.membership.api.MembershipConfigurationException;\n+import org.apache.geode.distributed.internal.membership.api.MembershipLocator;\n+import org.apache.geode.distributed.internal.membership.api.MembershipLocatorBuilder;\n+import org.apache.geode.distributed.internal.membership.api.MembershipLocatorStatistics;\n+import org.apache.geode.distributed.internal.membership.gms.locator.MembershipLocatorImpl;\n+import org.apache.geode.distributed.internal.tcpserver.ProtocolChecker;\n+import org.apache.geode.distributed.internal.tcpserver.TcpHandler;\n+import org.apache.geode.distributed.internal.tcpserver.TcpSocketCreator;\n+import org.apache.geode.internal.serialization.ObjectDeserializer;\n+import org.apache.geode.internal.serialization.ObjectSerializer;\n+\n+public final class MembershipLocatorBuilderImpl<ID extends MemberIdentifier> implements\n+    MembershipLocatorBuilder<ID> {\n+  private int port = 0;\n+  private InetAddress bindAddress = null;\n+  private ProtocolChecker protocolChecker = (socket, input, firstByte) -> false;\n+  private TcpHandler fallbackHandler = new TcpHandlerNoOp();\n+  private MembershipLocatorStatistics locatorStats = new MembershipLocatorStatisticsNoOp();\n+  private boolean locatorsAreCoordinators = true;\n+  private TcpSocketCreator socketCreator;\n+  private ObjectSerializer objectSerializer;\n+  private ObjectDeserializer objectDeserializer;\n+  private Path workingDirectory;\n+  private MembershipConfig config;\n+  private Supplier<ExecutorService> executorServiceSupplier;\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setPort(int port) {\n+    this.port = port;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setBindAddress(InetAddress bindAddress) {\n+    this.bindAddress = bindAddress;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setProtocolChecker(ProtocolChecker protocolChecker) {\n+    this.protocolChecker = protocolChecker;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setExecutorServiceSupplier(\n+      Supplier<ExecutorService> executorServiceSupplier) {\n+    this.executorServiceSupplier = executorServiceSupplier;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setSocketCreator(TcpSocketCreator socketCreator) {\n+    this.socketCreator = socketCreator;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setObjectSerializer(ObjectSerializer objectSerializer) {\n+    this.objectSerializer = objectSerializer;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setObjectDeserializer(ObjectDeserializer objectDeserializer) {\n+    this.objectDeserializer = objectDeserializer;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setFallbackHandler(TcpHandler fallbackHandler) {\n+    this.fallbackHandler = fallbackHandler;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setLocatorsAreCoordinators(boolean locatorsAreCoordinators) {\n+    this.locatorsAreCoordinators = locatorsAreCoordinators;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setLocatorStats(MembershipLocatorStatistics locatorStats) {\n+    this.locatorStats = locatorStats;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setWorkingDirectory(Path workingDirectory) {\n+    this.workingDirectory = workingDirectory;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setConfig(MembershipConfig config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4MzE4Mw=="}, "originalCommit": {"oid": "52a1f28eebd4c2c07feb7905fe08fc8fa1691bc6"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzUxNjE5OA==", "bodyText": "I guess it would be less error prone if the builder constructor took all of the required settings and then you could set the optional ones with setXYZ() methods.", "url": "https://github.com/apache/geode/pull/4558#discussion_r363516198", "createdAt": "2020-01-06T22:36:22Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/membership/gms/MembershipLocatorBuilderImpl.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.distributed.internal.membership.gms;\n+\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.file.Path;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Supplier;\n+\n+import org.apache.geode.distributed.internal.membership.api.MemberIdentifier;\n+import org.apache.geode.distributed.internal.membership.api.MembershipConfig;\n+import org.apache.geode.distributed.internal.membership.api.MembershipConfigurationException;\n+import org.apache.geode.distributed.internal.membership.api.MembershipLocator;\n+import org.apache.geode.distributed.internal.membership.api.MembershipLocatorBuilder;\n+import org.apache.geode.distributed.internal.membership.api.MembershipLocatorStatistics;\n+import org.apache.geode.distributed.internal.membership.gms.locator.MembershipLocatorImpl;\n+import org.apache.geode.distributed.internal.tcpserver.ProtocolChecker;\n+import org.apache.geode.distributed.internal.tcpserver.TcpHandler;\n+import org.apache.geode.distributed.internal.tcpserver.TcpSocketCreator;\n+import org.apache.geode.internal.serialization.ObjectDeserializer;\n+import org.apache.geode.internal.serialization.ObjectSerializer;\n+\n+public final class MembershipLocatorBuilderImpl<ID extends MemberIdentifier> implements\n+    MembershipLocatorBuilder<ID> {\n+  private int port = 0;\n+  private InetAddress bindAddress = null;\n+  private ProtocolChecker protocolChecker = (socket, input, firstByte) -> false;\n+  private TcpHandler fallbackHandler = new TcpHandlerNoOp();\n+  private MembershipLocatorStatistics locatorStats = new MembershipLocatorStatisticsNoOp();\n+  private boolean locatorsAreCoordinators = true;\n+  private TcpSocketCreator socketCreator;\n+  private ObjectSerializer objectSerializer;\n+  private ObjectDeserializer objectDeserializer;\n+  private Path workingDirectory;\n+  private MembershipConfig config;\n+  private Supplier<ExecutorService> executorServiceSupplier;\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setPort(int port) {\n+    this.port = port;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setBindAddress(InetAddress bindAddress) {\n+    this.bindAddress = bindAddress;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setProtocolChecker(ProtocolChecker protocolChecker) {\n+    this.protocolChecker = protocolChecker;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setExecutorServiceSupplier(\n+      Supplier<ExecutorService> executorServiceSupplier) {\n+    this.executorServiceSupplier = executorServiceSupplier;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setSocketCreator(TcpSocketCreator socketCreator) {\n+    this.socketCreator = socketCreator;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setObjectSerializer(ObjectSerializer objectSerializer) {\n+    this.objectSerializer = objectSerializer;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setObjectDeserializer(ObjectDeserializer objectDeserializer) {\n+    this.objectDeserializer = objectDeserializer;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setFallbackHandler(TcpHandler fallbackHandler) {\n+    this.fallbackHandler = fallbackHandler;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setLocatorsAreCoordinators(boolean locatorsAreCoordinators) {\n+    this.locatorsAreCoordinators = locatorsAreCoordinators;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setLocatorStats(MembershipLocatorStatistics locatorStats) {\n+    this.locatorStats = locatorStats;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setWorkingDirectory(Path workingDirectory) {\n+    this.workingDirectory = workingDirectory;\n+    return this;\n+  }\n+\n+  @Override\n+  public MembershipLocatorBuilder<ID> setConfig(MembershipConfig config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4MzE4Mw=="}, "originalCommit": {"oid": "52a1f28eebd4c2c07feb7905fe08fc8fa1691bc6"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NDg3MTgyOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/membership/gms/locator/MembershipLocatorImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMToxMTo1OFrOFapXaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wNlQyMToxMTo1OFrOFapXaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzQ4NTAzMg==", "bodyText": "NPE here if no config is supplied.", "url": "https://github.com/apache/geode/pull/4558#discussion_r363485032", "createdAt": "2020-01-06T21:11:58Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/membership/gms/locator/MembershipLocatorImpl.java", "diffHunk": "@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.distributed.internal.membership.gms.locator;\n+\n+\n+import java.io.IOException;\n+import java.net.ConnectException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.SocketAddress;\n+import java.net.UnknownHostException;\n+import java.nio.file.Path;\n+import java.util.concurrent.ExecutorService;\n+import java.util.function.Supplier;\n+\n+import org.apache.logging.log4j.Logger;\n+\n+import org.apache.geode.distributed.internal.membership.api.MemberIdentifier;\n+import org.apache.geode.distributed.internal.membership.api.Membership;\n+import org.apache.geode.distributed.internal.membership.api.MembershipConfig;\n+import org.apache.geode.distributed.internal.membership.api.MembershipConfigurationException;\n+import org.apache.geode.distributed.internal.membership.api.MembershipLocator;\n+import org.apache.geode.distributed.internal.membership.api.MembershipLocatorStatistics;\n+import org.apache.geode.distributed.internal.tcpserver.ProtocolChecker;\n+import org.apache.geode.distributed.internal.tcpserver.TcpClient;\n+import org.apache.geode.distributed.internal.tcpserver.TcpHandler;\n+import org.apache.geode.distributed.internal.tcpserver.TcpServer;\n+import org.apache.geode.distributed.internal.tcpserver.TcpSocketCreator;\n+import org.apache.geode.internal.inet.LocalHostUtil;\n+import org.apache.geode.internal.serialization.ObjectDeserializer;\n+import org.apache.geode.internal.serialization.ObjectSerializer;\n+import org.apache.geode.logging.internal.log4j.api.LogService;\n+import org.apache.geode.util.internal.GeodeGlossary;\n+\n+public class MembershipLocatorImpl<ID extends MemberIdentifier> implements MembershipLocator<ID> {\n+  private static final Logger logger = LogService.getLogger();\n+\n+  private final TcpServer server;\n+  /**\n+   * the TcpHandler used for peer location\n+   */\n+  private final PrimaryHandler handler;\n+  private final GMSLocator<ID> gmsLocator;\n+  private final TcpClient locatorClient;\n+\n+  public MembershipLocatorImpl(int port, InetAddress bindAddress,\n+      ProtocolChecker protocolChecker,\n+      Supplier<ExecutorService> executorServiceSupplier,\n+      TcpSocketCreator socketCreator, ObjectSerializer objectSerializer,\n+      ObjectDeserializer objectDeserializer,\n+      TcpHandler fallbackHandler,\n+      boolean locatorsAreCoordinators,\n+      MembershipLocatorStatistics locatorStats, Path workingDirectory,\n+      MembershipConfig config)\n+      throws MembershipConfigurationException, UnknownHostException {\n+    handler = new PrimaryHandler(fallbackHandler, config.getLocatorWaitTime());\n+    String host = bindAddress == null ? LocalHostUtil.getLocalHost().getHostName()\n+        : bindAddress.getHostName();\n+    String threadName = \"Distribution Locator on \" + host + \": \" + port;\n+\n+    this.server = new TcpServer(port, bindAddress, handler,\n+        threadName, protocolChecker,\n+        locatorStats::getStatTime,\n+        executorServiceSupplier,\n+        socketCreator,\n+        objectSerializer,\n+        objectDeserializer,\n+        GeodeGlossary.GEMFIRE_PREFIX + \"TcpServer.READ_TIMEOUT\",\n+        GeodeGlossary.GEMFIRE_PREFIX + \"TcpServer.BACKLOG\");\n+\n+    locatorClient = new TcpClient(socketCreator,\n+        objectSerializer,\n+        objectDeserializer);\n+    gmsLocator =\n+        new GMSLocator<>(bindAddress, config.getLocators(), locatorsAreCoordinators,\n+            config.isNetworkPartitionDetectionEnabled(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a1f28eebd4c2c07feb7905fe08fc8fa1691bc6"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3788, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}