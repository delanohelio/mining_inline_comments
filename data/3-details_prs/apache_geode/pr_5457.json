{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NTQ4NDgw", "number": 5457, "title": "GEODE-8430: add dunit test to verify tombstoneGC will not happen in u\u2026", "bodyText": "\u2026ninitialized region\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-08-13T17:59:15Z", "url": "https://github.com/apache/geode/pull/5457", "merged": true, "mergeCommit": {"oid": "515fd92f9c6b2265fe677518db7f47b0a6e71a8f"}, "closed": true, "closedAt": "2020-08-14T00:30:17Z", "author": {"login": "gesterzhou"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-jm3dgH2gAyNDY3NTQ4NDgwOjdiMmU5MWI1MTZmZWM5MjRlMGU2YjQwMzI3NmM1YWU1ODZkNjczZjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-pfUPAFqTQ2NzIzNzkyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7b2e91b516fec924e0e6b403276c5ae586d673f9", "author": {"user": {"login": "gesterzhou", "name": "Xiaojian Zhou"}}, "url": "https://github.com/apache/geode/commit/7b2e91b516fec924e0e6b403276c5ae586d673f9", "committedDate": "2020-08-13T17:38:31Z", "message": "GEODE-8430: add dunit test to verify tombstoneGC will not happen in uninitialized region"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3MjM3OTI4", "url": "https://github.com/apache/geode/pull/5457#pullrequestreview-467237928", "createdAt": "2020-08-14T00:28:52Z", "commit": {"oid": "7b2e91b516fec924e0e6b403276c5ae586d673f9"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDoyODo1MlrOHAin1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDoyODo1MlrOHAin1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMyOTMwMQ==", "bodyText": ".join() is deprecated, in the future you might just want to use await.", "url": "https://github.com/apache/geode/pull/5457#discussion_r470329301", "createdAt": "2020-08-14T00:28:52Z", "author": {"login": "mhansonp"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/GIIDeltaDUnitTest.java", "diffHunk": "@@ -1552,6 +1552,95 @@ public String description() {\n     waitForToVerifyRVV(P, memberR, 6, null, 0); // P's rvv=r6, gc=0\n   }\n \n+  /**\n+   * vm0 and vm1 are peers, each holds a DR. Let P and R have the same RVV and RVVGC: P7,R6, RVVGC\n+   * is P0,R0. vm1 becomes offline then restarts. Use testHook to pause the GII, then do tombstone\n+   * GC triggered by expireBatch (not by forceGC) at R only. The tombstone GC will be executed at P,\n+   * but ignored at R, because P has not started providing GII and R is not initialized yet.\n+   * The deltaGII should send nothing to R since the RVVs are the same. So after\n+   * GII, P and R will have different tombstone number. But P's tombstones should be expired.\n+   */\n+  @Test\n+  public void testExpiredTombstoneSkippedGCAtRequesterOnly() throws Throwable {\n+    prepareForEachTest();\n+    final DiskStoreID memberP = getMemberID(P);\n+    final DiskStoreID memberR = getMemberID(R);\n+\n+    assertEquals(0, SLOW_DISTRIBUTION_MS);\n+    prepareCommonTestData(6);\n+\n+    // let r4,r5,r6 to succeed\n+    doOnePut(R, 4, \"key4\");\n+    doOneDestroy(R, 5, \"key5\");\n+    doOnePut(R, 6, \"key1\");\n+\n+    waitForToVerifyRVV(R, memberP, 6, null, 0); // P's rvv=p6, gc=0\n+    waitForToVerifyRVV(R, memberR, 6, null, 0); // P's rvv=r6, gc=0\n+    // now the rvv and rvvgc at P and R should be the same\n+\n+    // save R's rvv in byte array, check if it will be fullGII\n+    byte[] R_rvv_bytes = getRVVByteArray(R, REGION_NAME);\n+    // shutdown R and restart\n+    closeCache(R);\n+\n+    // let p7 to succeed\n+    doOnePut(P, 7, \"key1\");\n+\n+    waitForToVerifyRVV(P, memberP, 7, null, 0); // P's rvv=p7, gc=0\n+    waitForToVerifyRVV(P, memberR, 6, null, 0); // P's rvv=r6, gc=0\n+\n+    // add test hook\n+    P.invoke(new SerializableRunnable() {\n+      @Override\n+      public void run() {\n+        Mycallback myDuringPackingImage =\n+            new Mycallback(GIITestHookType.AfterReceivedRequestImage, REGION_NAME);\n+        setGIITestHook(myDuringPackingImage);\n+      }\n+    });\n+\n+    checkIfFullGII(P, REGION_NAME, R_rvv_bytes, false);\n+\n+    // restart R and gii, it will be blocked at test hook\n+    AsyncInvocation async3 = createDistributedRegionAsync(R);\n+    // 8\n+    waitForCallbackStarted(P, GIITestHookType.AfterReceivedRequestImage);\n+    int count = getDeltaGIICount(P);\n+    assertEquals(0, count);\n+\n+    // let tombstone expired at both P & R to trigger tombstoneGC.\n+    // Wait for tombstone is GCed at P, but still exists in R\n+    changeTombstoneTimout(R, MAX_WAIT);\n+    changeTombstoneTimout(P, MAX_WAIT);\n+    pause((int) MAX_WAIT);\n+    forceGC(R, 3);\n+    forceGC(P, 3);\n+\n+    // let GII continue\n+    P.invoke(() -> resetGIITestHook(GIITestHookType.AfterReceivedRequestImage, true));\n+    async3.join(MAX_WAIT * 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b2e91b516fec924e0e6b403276c5ae586d673f9"}, "originalPosition": 109}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4137, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}