{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNTMxMDkz", "number": 4922, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjo0MjoxMVrODwE1HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo0MTo0MlrODx-Q-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzM3MzczOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/cache/query/internal/CumulativeNonDistinctResults.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjo0MjoxMVrOGC3vQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNjo0MjoxMVrOGC3vQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTY2MzU1NQ==", "bodyText": "You might want to remove this one :-)", "url": "https://github.com/apache/geode/pull/4922#discussion_r405663555", "createdAt": "2020-04-08T16:42:11Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/cache/query/internal/CumulativeNonDistinctResults.java", "diffHunk": "@@ -177,6 +177,7 @@ public CumulativeNonDistinctResultsCollection(Collection<? extends Collection<E>\n       this.results = results;\n       this.limit = limit;\n       this.collectionsMetdata = collectionsMetadata;\n+      System.out.println(\"JASON\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "02f76cc0dac6935ada48ce4222367b8444947578"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDc0MjUwOnYy", "diffSide": "LEFT", "path": "geode-core/src/integrationTest/resources/org/apache/geode/codeAnalysis/sanctionedDataSerializables.txt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo0NDowNVrOGFXl5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo0NDowNVrOGFXl5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MjU5Nw==", "bodyText": "Did you intentionally remove all the above sanctionedDataSerializables.txt ?, they don't seem related to the issu e fixed by this PR.", "url": "https://github.com/apache/geode/pull/4922#discussion_r408282597", "createdAt": "2020-04-14T16:44:05Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/integrationTest/resources/org/apache/geode/codeAnalysis/sanctionedDataSerializables.txt", "diffHunk": "@@ -282,74 +282,6 @@ toData,12\n toDataPre_GFE_7_1_0_0,12\n toDataPre_GFE_9_0_0_0,12\n \n-org/apache/geode/distributed/internal/membership/adapter/LocalViewMessage,2\n-fromData,8\n-toData,8\n-\n-org/apache/geode/distributed/internal/membership/gms/GMSMembershipView,2\n-fromData,121\n-toData,72\n-\n-org/apache/geode/distributed/internal/membership/gms/locator/FindCoordinatorRequest,2\n-fromData,112\n-toData,132\n-\n-org/apache/geode/distributed/internal/membership/gms/locator/FindCoordinatorResponse,2\n-fromData,130\n-toData,114\n-\n-org/apache/geode/distributed/internal/membership/gms/locator/GetViewRequest,2\n-fromData,1\n-toData,1\n-\n-org/apache/geode/distributed/internal/membership/gms/locator/GetViewResponse,2\n-fromData,20\n-toData,17\n-\n-org/apache/geode/distributed/internal/membership/gms/messages/FinalCheckPassedMessage,2\n-fromData,20\n-toData,17\n-\n-org/apache/geode/distributed/internal/membership/gms/messages/HeartbeatMessage,2\n-fromData,11\n-toData,11\n-\n-org/apache/geode/distributed/internal/membership/gms/messages/HeartbeatRequestMessage,2\n-fromData,30\n-toData,27\n-\n-org/apache/geode/distributed/internal/membership/gms/messages/InstallViewMessage,2\n-fromData,60\n-toData,56\n-\n-org/apache/geode/distributed/internal/membership/gms/messages/JoinRequestMessage,2\n-fromData,63\n-toData,60\n-\n-org/apache/geode/distributed/internal/membership/gms/messages/JoinResponseMessage,2\n-fromData,63\n-toData,57\n-\n-org/apache/geode/distributed/internal/membership/gms/messages/LeaveRequestMessage,2\n-fromData,28\n-toData,25\n-\n-org/apache/geode/distributed/internal/membership/gms/messages/NetworkPartitionMessage,2\n-fromData,1\n-toData,1\n-\n-org/apache/geode/distributed/internal/membership/gms/messages/RemoveMemberMessage,2\n-fromData,28\n-toData,25\n-\n-org/apache/geode/distributed/internal/membership/gms/messages/SuspectMembersMessage,2\n-fromData,63\n-toData,92\n-\n-org/apache/geode/distributed/internal/membership/gms/messages/ViewAckMessage,2\n-fromData,40\n-toData,37\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae024c31b77a831dd14ba0fd69a5d9ca96768e77"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDc0NDI1OnYy", "diffSide": "LEFT", "path": "geode-core/src/integrationTest/resources/org/apache/geode/codeAnalysis/sanctionedDataSerializables.txt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo0NDozNFrOGFXnGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo0NDozNFrOGFXnGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MjkwNA==", "bodyText": "Same as with the others: should these be removed?.", "url": "https://github.com/apache/geode/pull/4922#discussion_r408282904", "createdAt": "2020-04-14T16:44:34Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/integrationTest/resources/org/apache/geode/codeAnalysis/sanctionedDataSerializables.txt", "diffHunk": "@@ -358,14 +290,6 @@ org/apache/geode/distributed/internal/streaming/StreamingOperation$StreamingRepl\n fromData,425\n toData,86\n \n-org/apache/geode/distributed/internal/tcpserver/InfoResponse,2\n-fromData,9\n-toData,9\n-\n-org/apache/geode/distributed/internal/tcpserver/VersionResponse,2\n-fromData,11\n-toData,11\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae024c31b77a831dd14ba0fd69a5d9ca96768e77"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDc0NTgxOnYy", "diffSide": "LEFT", "path": "geode-core/src/integrationTest/resources/org/apache/geode/codeAnalysis/sanctionedDataSerializables.txt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo0NDo1OFrOGFXoGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo0NDo1OFrOGFXoGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI4MzE2MA==", "bodyText": "Same as with the others: should this be removed?.", "url": "https://github.com/apache/geode/pull/4922#discussion_r408283160", "createdAt": "2020-04-14T16:44:58Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/integrationTest/resources/org/apache/geode/codeAnalysis/sanctionedDataSerializables.txt", "diffHunk": "@@ -578,9 +502,6 @@ org/apache/geode/internal/admin/remote/LicenseInfoResponse,2\n fromData,18\n toData,15\n \n-org/apache/geode/internal/admin/remote/MissingPersistentIDsRequest,1\n-fromData,7\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae024c31b77a831dd14ba0fd69a5d9ca96768e77"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzI1NTgyOnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/MultiServerPartitionedRegionQueryDUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODozODoxMFrOGFvkFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODozODoxMFrOGFvkFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3NTM0OQ==", "bodyText": "This one can be declared as static final REGION_NAME as it's a constant.", "url": "https://github.com/apache/geode/pull/4922#discussion_r408675349", "createdAt": "2020-04-15T08:38:10Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/MultiServerPartitionedRegionQueryDUnitTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.query.dunit;\n+\n+import static org.apache.geode.test.dunit.VM.getVM;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Properties;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.execute.FunctionAdapter;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionException;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.query.FunctionDomainException;\n+import org.apache.geode.cache.query.NameResolutionException;\n+import org.apache.geode.cache.query.Query;\n+import org.apache.geode.cache.query.QueryInvocationTargetException;\n+import org.apache.geode.cache.query.QueryService;\n+import org.apache.geode.cache.query.SelectResults;\n+import org.apache.geode.cache.query.TypeMismatchException;\n+import org.apache.geode.cache.server.CacheServer;\n+import org.apache.geode.distributed.internal.DistributionConfig;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.ClientCacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+\n+public class MultiServerPartitionedRegionQueryDUnitTest implements Serializable {\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule();\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+  @Rule\n+  public ClientCacheRule clientCacheRule = new ClientCacheRule();\n+\n+  private VM server1, server2, client;\n+  private String regionName = \"region\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "698b81bba238a3198bf5aad37018d683231dded3"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzI1ODA0OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/MultiServerPartitionedRegionQueryDUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODozODo0NFrOGFvlbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODozODo0NFrOGFvlbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3NTY5Mg==", "bodyText": "Can be replaced with int port = server1.invoke(this::createServerAndRegion);.", "url": "https://github.com/apache/geode/pull/4922#discussion_r408675692", "createdAt": "2020-04-15T08:38:44Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/MultiServerPartitionedRegionQueryDUnitTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.query.dunit;\n+\n+import static org.apache.geode.test.dunit.VM.getVM;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Properties;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.execute.FunctionAdapter;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionException;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.query.FunctionDomainException;\n+import org.apache.geode.cache.query.NameResolutionException;\n+import org.apache.geode.cache.query.Query;\n+import org.apache.geode.cache.query.QueryInvocationTargetException;\n+import org.apache.geode.cache.query.QueryService;\n+import org.apache.geode.cache.query.SelectResults;\n+import org.apache.geode.cache.query.TypeMismatchException;\n+import org.apache.geode.cache.server.CacheServer;\n+import org.apache.geode.distributed.internal.DistributionConfig;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.ClientCacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+\n+public class MultiServerPartitionedRegionQueryDUnitTest implements Serializable {\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule();\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+  @Rule\n+  public ClientCacheRule clientCacheRule = new ClientCacheRule();\n+\n+  private VM server1, server2, client;\n+  private String regionName = \"region\";\n+\n+  @Before\n+  public void setup() {\n+    server1 = getVM(0);\n+    server2 = getVM(1);\n+    client = getVM(2);\n+  }\n+\n+  @Test\n+  public void cumulativeResultsToDataShouldWriteToTheCorrectStreamNotCauseCorruption() {\n+    int numPuts = 10;\n+    int port = server1.invoke(() -> {\n+      return createServerAndRegion();\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "698b81bba238a3198bf5aad37018d683231dded3"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzI1OTI1OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/MultiServerPartitionedRegionQueryDUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODozOTowMVrOGFvmLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODozOTowMVrOGFvmLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3NTg4Nw==", "bodyText": "Can be replaced with server2.invoke((SerializableRunnableIF) this::createServerAndRegion);.", "url": "https://github.com/apache/geode/pull/4922#discussion_r408675887", "createdAt": "2020-04-15T08:39:01Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/MultiServerPartitionedRegionQueryDUnitTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.query.dunit;\n+\n+import static org.apache.geode.test.dunit.VM.getVM;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Properties;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.execute.FunctionAdapter;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionException;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.query.FunctionDomainException;\n+import org.apache.geode.cache.query.NameResolutionException;\n+import org.apache.geode.cache.query.Query;\n+import org.apache.geode.cache.query.QueryInvocationTargetException;\n+import org.apache.geode.cache.query.QueryService;\n+import org.apache.geode.cache.query.SelectResults;\n+import org.apache.geode.cache.query.TypeMismatchException;\n+import org.apache.geode.cache.server.CacheServer;\n+import org.apache.geode.distributed.internal.DistributionConfig;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.ClientCacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+\n+public class MultiServerPartitionedRegionQueryDUnitTest implements Serializable {\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule();\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+  @Rule\n+  public ClientCacheRule clientCacheRule = new ClientCacheRule();\n+\n+  private VM server1, server2, client;\n+  private String regionName = \"region\";\n+\n+  @Before\n+  public void setup() {\n+    server1 = getVM(0);\n+    server2 = getVM(1);\n+    client = getVM(2);\n+  }\n+\n+  @Test\n+  public void cumulativeResultsToDataShouldWriteToTheCorrectStreamNotCauseCorruption() {\n+    int numPuts = 10;\n+    int port = server1.invoke(() -> {\n+      return createServerAndRegion();\n+    });\n+    server2.invoke(() -> {\n+      createServerAndRegion();\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "698b81bba238a3198bf5aad37018d683231dded3"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzI2NTQ2OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/MultiServerPartitionedRegionQueryDUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo0MDozMFrOGFvp1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo0MDozMFrOGFvp1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3NjgyMQ==", "bodyText": "We are replacing usages of JUnit asserts for assert4j, we can change this before merging the pull request to make sure we don't need to revisit this test in the future.", "url": "https://github.com/apache/geode/pull/4922#discussion_r408676821", "createdAt": "2020-04-15T08:40:30Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/MultiServerPartitionedRegionQueryDUnitTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.query.dunit;\n+\n+import static org.apache.geode.test.dunit.VM.getVM;\n+import static org.junit.Assert.assertEquals;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "698b81bba238a3198bf5aad37018d683231dded3"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzI2OTY5OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/MultiServerPartitionedRegionQueryDUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo0MTo0MlrOGFvscg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo0MTo0MlrOGFvscg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY3NzQ5MA==", "bodyText": "This field is never used.", "url": "https://github.com/apache/geode/pull/4922#discussion_r408677490", "createdAt": "2020-04-15T08:41:42Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/cache/query/dunit/MultiServerPartitionedRegionQueryDUnitTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.query.dunit;\n+\n+import static org.apache.geode.test.dunit.VM.getVM;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Properties;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.execute.FunctionAdapter;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionException;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.query.FunctionDomainException;\n+import org.apache.geode.cache.query.NameResolutionException;\n+import org.apache.geode.cache.query.Query;\n+import org.apache.geode.cache.query.QueryInvocationTargetException;\n+import org.apache.geode.cache.query.QueryService;\n+import org.apache.geode.cache.query.SelectResults;\n+import org.apache.geode.cache.query.TypeMismatchException;\n+import org.apache.geode.cache.server.CacheServer;\n+import org.apache.geode.distributed.internal.DistributionConfig;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.ClientCacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+\n+public class MultiServerPartitionedRegionQueryDUnitTest implements Serializable {\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule();\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+  @Rule\n+  public ClientCacheRule clientCacheRule = new ClientCacheRule();\n+\n+  private VM server1, server2, client;\n+  private String regionName = \"region\";\n+\n+  @Before\n+  public void setup() {\n+    server1 = getVM(0);\n+    server2 = getVM(1);\n+    client = getVM(2);\n+  }\n+\n+  @Test\n+  public void cumulativeResultsToDataShouldWriteToTheCorrectStreamNotCauseCorruption() {\n+    int numPuts = 10;\n+    int port = server1.invoke(() -> {\n+      return createServerAndRegion();\n+    });\n+    server2.invoke(() -> {\n+      createServerAndRegion();\n+    });\n+\n+    String hostname = server1.getHost().getHostName();\n+    client.invoke(() -> {\n+      ClientCacheFactory ccf = new ClientCacheFactory();\n+      ccf.addPoolServer(hostname, port);\n+      clientCacheRule.createClientCache(ccf);\n+      ClientCache clientCache = clientCacheRule.getClientCache();\n+      Region region =\n+          clientCache.createClientRegionFactory(ClientRegionShortcut.PROXY).create(regionName);\n+      IntStream.range(0, numPuts).forEach(id -> region.put(\"key-\" + id, new TestObject(id)));\n+      ArrayList results = (ArrayList) FunctionService.onRegion(region)\n+          .execute(new QueryWithoutTurningIntoListFunction(regionName,\n+              \"select distinct r.id, r.name from /\" + regionName + \" r, /\" + regionName\n+                  + \" t where t.id = r.id order by r.id\"))\n+          .getResult();\n+      SelectResults rs = (SelectResults) results.get(0);\n+      assertEquals(numPuts, rs.size());\n+    });\n+  }\n+\n+  @Test\n+  public void nwayMergeResultsToDataShouldWriteToTheCorrectStreamAndNotCauseCorruption() {\n+    int numPuts = 10;\n+    int port = server1.invoke(() -> {\n+      return createServerAndRegion();\n+    });\n+    server2.invoke(() -> {\n+      createServerAndRegion();\n+    });\n+\n+    String hostname = server1.getHost().getHostName();\n+    client.invoke(() -> {\n+      ClientCacheFactory ccf = new ClientCacheFactory();\n+      ccf.addPoolServer(hostname, port);\n+      clientCacheRule.createClientCache(ccf);\n+      ClientCache clientCache = clientCacheRule.getClientCache();\n+      Region region =\n+          clientCache.createClientRegionFactory(ClientRegionShortcut.PROXY).create(regionName);\n+      IntStream.range(0, numPuts).forEach(id -> region.put(\"key-\" + id, new TestObject(id)));\n+      ArrayList results = (ArrayList) FunctionService.onRegion(region)\n+          .execute(new QueryWithoutTurningIntoListFunction(regionName,\n+              \"select distinct r.id, r.name from /\" + regionName + \" r, /\" + regionName\n+                  + \" t where t.id = r.id order by r.id\"))\n+          .getResult();\n+      SelectResults rs = (SelectResults) results.get(0);\n+      assertEquals(numPuts, rs.size());\n+    });\n+  }\n+\n+  private int createServerAndRegion() throws IOException {\n+    Properties props = new Properties();\n+    props.setProperty(DistributionConfig.VALIDATE_SERIALIZABLE_OBJECTS_NAME, \"true\");\n+    props.setProperty(DistributionConfig.SERIALIZABLE_OBJECT_FILTER_NAME, \"*\");\n+    cacheRule.createCache(new CacheFactory(props).setPdxReadSerialized(true));\n+    Cache cache = cacheRule.getCache();\n+    CacheServer cs = cache.addCacheServer();\n+    cs.setPort(0);\n+    cs.start();\n+    cache.createRegionFactory(RegionShortcut.PARTITION).create(regionName);\n+    return cs.getPort();\n+  }\n+\n+  public static class TestObject implements Serializable {\n+    public int id;\n+    public String name;\n+\n+    public TestObject(int id) {\n+      this.id = id;\n+      this.name = \"Name:\" + id;\n+    }\n+  }\n+\n+  public static class QueryWithoutTurningIntoListFunction extends FunctionAdapter {\n+\n+    private String regionName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "698b81bba238a3198bf5aad37018d683231dded3"}, "originalPosition": 157}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4268, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}