{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5MDgxMDg1", "number": 5000, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzo0MTozMVrOD4XrPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzo0OTo0M1rOD4X0CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDM0NzQ5OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzo0MTozMVrOGPJ--A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzo0MTozMVrOGPJ--A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0NTQwMA==", "bodyText": "The exception is never thrown, it can be deleted.", "url": "https://github.com/apache/geode/pull/5000#discussion_r418545400", "createdAt": "2020-05-01T13:41:31Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+\n+import java.io.Serializable;\n+\n+import javax.management.ObjectName;\n+\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TestName;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.GfshTest;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+import org.apache.geode.test.junit.rules.serializable.SerializableTestName;\n+\n+@Category({GfshTest.class})\n+public class MemberMXBeanDistributedTest implements\n+    Serializable {\n+\n+  private static MemberVM locator, server1, server2, server3, server4;\n+\n+  @ClassRule\n+  public static ClusterStartupRule lsRule = new ClusterStartupRule();\n+\n+  @ClassRule\n+  public static GfshCommandRule gfsh = new GfshCommandRule();\n+\n+  @Rule\n+  public TestName testName = new SerializableTestName();\n+\n+  @BeforeClass\n+  public static void before() throws Exception {\n+    locator = lsRule.startLocatorVM(0);\n+    server1 = lsRule.startServerVM(1, \"\", locator.getPort());\n+    server2 = lsRule.startServerVM(2, \"\", locator.getPort());\n+    server3 = lsRule.startServerVM(3, \"\", locator.getPort());\n+    server4 = lsRule.startServerVM(4, \"\", locator.getPort());\n+\n+    gfsh.connectAndVerify(locator);\n+  }\n+\n+  @Test\n+  public void testBucketCount() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68648b49231d55077094f888ab3e58547f03510"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDM1MDg0OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzo0Mjo0NVrOGPKBBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzo0Mjo0NVrOGPKBBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0NTkyNQ==", "bodyText": "Unused variable, it can be deleted.", "url": "https://github.com/apache/geode/pull/5000#discussion_r418545925", "createdAt": "2020-05-01T13:42:45Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+\n+import java.io.Serializable;\n+\n+import javax.management.ObjectName;\n+\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TestName;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.GfshTest;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+import org.apache.geode.test.junit.rules.serializable.SerializableTestName;\n+\n+@Category({GfshTest.class})\n+public class MemberMXBeanDistributedTest implements\n+    Serializable {\n+\n+  private static MemberVM locator, server1, server2, server3, server4;\n+\n+  @ClassRule\n+  public static ClusterStartupRule lsRule = new ClusterStartupRule();\n+\n+  @ClassRule\n+  public static GfshCommandRule gfsh = new GfshCommandRule();\n+\n+  @Rule\n+  public TestName testName = new SerializableTestName();\n+\n+  @BeforeClass\n+  public static void before() throws Exception {\n+    locator = lsRule.startLocatorVM(0);\n+    server1 = lsRule.startServerVM(1, \"\", locator.getPort());\n+    server2 = lsRule.startServerVM(2, \"\", locator.getPort());\n+    server3 = lsRule.startServerVM(3, \"\", locator.getPort());\n+    server4 = lsRule.startServerVM(4, \"\", locator.getPort());\n+\n+    gfsh.connectAndVerify(locator);\n+  }\n+\n+  @Test\n+  public void testBucketCount() throws InterruptedException {\n+    String regionName = \"testCreateRegion\";\n+\n+    gfsh.executeAndAssertThat(\"create region\"\n+        + \" --name=\" + regionName\n+        + \" --type=PARTITION_PERSISTENT\"\n+        + \" --total-num-buckets=1000\").statusIsSuccess();\n+\n+    gfsh.executeAndAssertThat(\"query --query=\\\"select * from /\" + regionName + \"\\\"\")\n+        .statusIsSuccess();\n+\n+    server1.invoke(() -> waitBucketsToInitialize(245));\n+    server2.invoke(() -> waitBucketsToInitialize(245));\n+    server3.invoke(() -> waitBucketsToInitialize(245));\n+    server4.invoke(() -> waitBucketsToInitialize(245));\n+\n+    for (int i = 1; i < 4; i++) {\n+      final String tempname = \"/\" + regionName + i;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68648b49231d55077094f888ab3e58547f03510"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDM1Njc0OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzo0NDo1NFrOGPKEhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzo0NDo1NFrOGPKEhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0NjgyMg==", "bodyText": "You don't need to execute the query for buckets to get created, it's easier (and cleaner) to execute PartitionRegionHelper.assignBucketsToPartitions(Region<?, ?> region).\nYou can have a look at PartitionedRegionAttributesMutatorDUnitTest for examples.", "url": "https://github.com/apache/geode/pull/5000#discussion_r418546822", "createdAt": "2020-05-01T13:44:54Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+\n+import java.io.Serializable;\n+\n+import javax.management.ObjectName;\n+\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TestName;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.GfshTest;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+import org.apache.geode.test.junit.rules.serializable.SerializableTestName;\n+\n+@Category({GfshTest.class})\n+public class MemberMXBeanDistributedTest implements\n+    Serializable {\n+\n+  private static MemberVM locator, server1, server2, server3, server4;\n+\n+  @ClassRule\n+  public static ClusterStartupRule lsRule = new ClusterStartupRule();\n+\n+  @ClassRule\n+  public static GfshCommandRule gfsh = new GfshCommandRule();\n+\n+  @Rule\n+  public TestName testName = new SerializableTestName();\n+\n+  @BeforeClass\n+  public static void before() throws Exception {\n+    locator = lsRule.startLocatorVM(0);\n+    server1 = lsRule.startServerVM(1, \"\", locator.getPort());\n+    server2 = lsRule.startServerVM(2, \"\", locator.getPort());\n+    server3 = lsRule.startServerVM(3, \"\", locator.getPort());\n+    server4 = lsRule.startServerVM(4, \"\", locator.getPort());\n+\n+    gfsh.connectAndVerify(locator);\n+  }\n+\n+  @Test\n+  public void testBucketCount() throws InterruptedException {\n+    String regionName = \"testCreateRegion\";\n+\n+    gfsh.executeAndAssertThat(\"create region\"\n+        + \" --name=\" + regionName\n+        + \" --type=PARTITION_PERSISTENT\"\n+        + \" --total-num-buckets=1000\").statusIsSuccess();\n+\n+    gfsh.executeAndAssertThat(\"query --query=\\\"select * from /\" + regionName + \"\\\"\")\n+        .statusIsSuccess();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68648b49231d55077094f888ab3e58547f03510"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDM3MDAxOnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMzo0OTo0M1rOGPKMaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxNToxNzo0NlrOGPMiXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0ODg0Mw==", "bodyText": "The test might become flaky due to the assertions used (waitBucketsToInitialize(X) -> getTotalBucketCount() >= X). Maybe it's better to assert the total number of buckets instead?.", "url": "https://github.com/apache/geode/pull/5000#discussion_r418548843", "createdAt": "2020-05-01T13:49:43Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+\n+import java.io.Serializable;\n+\n+import javax.management.ObjectName;\n+\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TestName;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.GfshTest;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+import org.apache.geode.test.junit.rules.serializable.SerializableTestName;\n+\n+@Category({GfshTest.class})\n+public class MemberMXBeanDistributedTest implements", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a68648b49231d55077094f888ab3e58547f03510"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU4NzIyOQ==", "bodyText": "Thanx for comments.", "url": "https://github.com/apache/geode/pull/5000#discussion_r418587229", "createdAt": "2020-05-01T15:17:46Z", "author": {"login": "mivanac"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/management/MemberMXBeanDistributedTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.management;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+\n+import java.io.Serializable;\n+\n+import javax.management.ObjectName;\n+\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TestName;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.GfshTest;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+import org.apache.geode.test.junit.rules.serializable.SerializableTestName;\n+\n+@Category({GfshTest.class})\n+public class MemberMXBeanDistributedTest implements", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODU0ODg0Mw=="}, "originalCommit": {"oid": "a68648b49231d55077094f888ab3e58547f03510"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4130, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}