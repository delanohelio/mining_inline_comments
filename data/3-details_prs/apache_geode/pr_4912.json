{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMDQxMzM0", "number": 4912, "title": "Decouple geode in sadd,srem,smembers", "bodyText": "This commit builds a GeodeRedisSetSynchronized class that brings\ntogether \"set\" methods.  These three are necessary for Spring-Session so\nthey are the only ones included.\nHey team,\nThe commit brings together two ideas in this PR:\n\nIt synchronizes all calls to the set (at least sadd,srem,smembers) via compute.\nIt decouples all geode related code from the Executors.  We have discussed this a couple times, but I wanted to show it, and see if you all are on board.", "createdAt": "2020-04-07T05:09:46Z", "url": "https://github.com/apache/geode/pull/4912", "merged": true, "mergeCommit": {"oid": "50ce2796d813e6092c8ceb4c94541e288d6efc39"}, "closed": true, "closedAt": "2020-04-10T20:16:01Z", "author": {"login": "prettyClouds"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcVT8PMgBqjMyMTAwNTM5NDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWUUlWAH2gAyNDAwMDQxMzM0OjgxYzFiZGNmODcyMGEyNWU0MTM5OWYzZTQzMDZiY2Q2MzZlMjZkN2M=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "92ee7c6dd9c8a22353e3e871aaf6eca38e86778f", "author": {"user": {"login": "prettyClouds", "name": "Murtuza Boxwala"}}, "url": "https://github.com/apache/geode/commit/92ee7c6dd9c8a22353e3e871aaf6eca38e86778f", "committedDate": "2020-04-07T14:02:08Z", "message": "hset hmset hdel hgetall"}, "afterCommit": {"oid": "e3fd166511ba93b06b848eec96349d6a26770c9d", "author": {"user": {"login": "prettyClouds", "name": "Murtuza Boxwala"}}, "url": "https://github.com/apache/geode/commit/e3fd166511ba93b06b848eec96349d6a26770c9d", "committedDate": "2020-04-07T14:11:40Z", "message": "hset hmset hdel hgetall"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e3fd166511ba93b06b848eec96349d6a26770c9d", "author": {"user": {"login": "prettyClouds", "name": "Murtuza Boxwala"}}, "url": "https://github.com/apache/geode/commit/e3fd166511ba93b06b848eec96349d6a26770c9d", "committedDate": "2020-04-07T14:11:40Z", "message": "hset hmset hdel hgetall"}, "afterCommit": {"oid": "bff909db2efc69b71aba497e87399255675cf222", "author": {"user": {"login": "prettyClouds", "name": "Murtuza Boxwala"}}, "url": "https://github.com/apache/geode/commit/bff909db2efc69b71aba497e87399255675cf222", "committedDate": "2020-04-07T14:15:36Z", "message": "hset hmset hdel hgetall"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MjkyNzYz", "url": "https://github.com/apache/geode/pull/4912#pullrequestreview-389292763", "createdAt": "2020-04-07T16:33:34Z", "commit": {"oid": "bff909db2efc69b71aba497e87399255675cf222"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjozMzozNFrOGCMLMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjo0MDo1NVrOGCMeSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk0OTgwOQ==", "bodyText": "Why the change to REPLICATE region type as the default? Should it be PARTITION_REDUNDANT, perhaps?", "url": "https://github.com/apache/geode/pull/4912#discussion_r404949809", "createdAt": "2020-04-07T16:33:34Z", "author": {"login": "upthewaterspout"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/GeodeRedisServer.java", "diffHunk": "@@ -306,7 +306,7 @@\n    * @return {@link RegionShortcut}\n    */\n   private static RegionShortcut setRegionType() {\n-    String regionType = System.getProperty(DEFAULT_REGION_SYS_PROP_NAME, \"PARTITION\");\n+    String regionType = System.getProperty(DEFAULT_REGION_SYS_PROP_NAME, \"REPLICATE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bff909db2efc69b71aba497e87399255675cf222"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1MTU1OA==", "bodyText": "Because you set methods are never modifying the old value in place, I think would be safe just to return the result of region.get() here, without the compute or the copying.", "url": "https://github.com/apache/geode/pull/4912#discussion_r404951558", "createdAt": "2020-04-07T16:36:13Z", "author": {"login": "upthewaterspout"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/GeodeRedisHashSynchronized.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.hash;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.redis.internal.ByteArrayWrapper;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+import org.apache.geode.redis.internal.RedisDataType;\n+\n+class GeodeRedisHashSynchronized implements RedisHash {\n+  private final ByteArrayWrapper key;\n+  private final ExecutionHandlerContext context;\n+\n+  public GeodeRedisHashSynchronized(ByteArrayWrapper key, ExecutionHandlerContext context) {\n+    this.key = key;\n+    this.context = context;\n+  }\n+\n+  @Override\n+  public int hset(List<ByteArrayWrapper> fieldsToSet,\n+      boolean NX) {\n+    AtomicInteger fieldsAdded = new AtomicInteger();\n+\n+    Map<ByteArrayWrapper, ByteArrayWrapper> computedHash =\n+        region().compute(key, (_unused_, oldHash) -> {\n+\n+          fieldsAdded.set(0);\n+          HashMap<ByteArrayWrapper, ByteArrayWrapper> newHash;\n+          if (oldHash == null) {\n+            newHash = new HashMap<>();\n+          } else {\n+            newHash = new HashMap<>(oldHash);\n+          }\n+\n+          for (int i = 0; i < fieldsToSet.size(); i += 2) {\n+            ByteArrayWrapper field = fieldsToSet.get(i);\n+            ByteArrayWrapper value = fieldsToSet.get(i + 1);\n+\n+            Object abc;\n+            if (NX) {\n+              abc = newHash.putIfAbsent(field, value);\n+            } else {\n+              abc = newHash.put(field, value);\n+            }\n+\n+            if (abc == null) {\n+              fieldsAdded.getAndIncrement();\n+            }\n+          }\n+\n+          return newHash;\n+        });\n+\n+    if (computedHash != null) {\n+      context.getKeyRegistrar().register(this.key, RedisDataType.REDIS_HASH);\n+    }\n+\n+    return fieldsAdded.get();\n+  }\n+\n+  @Override\n+  public int hdel(List<ByteArrayWrapper> subList) {\n+    AtomicLong numDeleted = new AtomicLong();\n+    region().computeIfPresent(key, (_unused_, oldHash) -> {\n+      HashMap<ByteArrayWrapper, ByteArrayWrapper> newHash = new HashMap<>(oldHash);\n+      for (ByteArrayWrapper fieldToRemove : subList) {\n+        Object oldValue = newHash.remove(fieldToRemove);\n+        if (oldValue != null) {\n+          numDeleted.incrementAndGet();\n+        }\n+      }\n+      return newHash;\n+    });\n+    return numDeleted.intValue();\n+  }\n+\n+  @Override\n+  public Collection<Map.Entry<ByteArrayWrapper, ByteArrayWrapper>> hgetall() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bff909db2efc69b71aba497e87399255675cf222"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1NDI1Nw==", "bodyText": "Might want to comment about why you called fieldsAdded.set(0) (because compute can be called multiple times).\nThe logic you used in the set methods to just call fieldsAdded.set(newHash.size() - oldHash.size()) might be less confusing to someone reading the code.", "url": "https://github.com/apache/geode/pull/4912#discussion_r404954257", "createdAt": "2020-04-07T16:40:14Z", "author": {"login": "upthewaterspout"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/GeodeRedisHashSynchronized.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.hash;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.redis.internal.ByteArrayWrapper;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+import org.apache.geode.redis.internal.RedisDataType;\n+\n+class GeodeRedisHashSynchronized implements RedisHash {\n+  private final ByteArrayWrapper key;\n+  private final ExecutionHandlerContext context;\n+\n+  public GeodeRedisHashSynchronized(ByteArrayWrapper key, ExecutionHandlerContext context) {\n+    this.key = key;\n+    this.context = context;\n+  }\n+\n+  @Override\n+  public int hset(List<ByteArrayWrapper> fieldsToSet,\n+      boolean NX) {\n+    AtomicInteger fieldsAdded = new AtomicInteger();\n+\n+    Map<ByteArrayWrapper, ByteArrayWrapper> computedHash =\n+        region().compute(key, (_unused_, oldHash) -> {\n+\n+          fieldsAdded.set(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bff909db2efc69b71aba497e87399255675cf222"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk1NDY5Nw==", "bodyText": "Need to set numDeleted to 0 at the beginning of the compute block.", "url": "https://github.com/apache/geode/pull/4912#discussion_r404954697", "createdAt": "2020-04-07T16:40:55Z", "author": {"login": "upthewaterspout"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/GeodeRedisHashSynchronized.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.hash;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.redis.internal.ByteArrayWrapper;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+import org.apache.geode.redis.internal.RedisDataType;\n+\n+class GeodeRedisHashSynchronized implements RedisHash {\n+  private final ByteArrayWrapper key;\n+  private final ExecutionHandlerContext context;\n+\n+  public GeodeRedisHashSynchronized(ByteArrayWrapper key, ExecutionHandlerContext context) {\n+    this.key = key;\n+    this.context = context;\n+  }\n+\n+  @Override\n+  public int hset(List<ByteArrayWrapper> fieldsToSet,\n+      boolean NX) {\n+    AtomicInteger fieldsAdded = new AtomicInteger();\n+\n+    Map<ByteArrayWrapper, ByteArrayWrapper> computedHash =\n+        region().compute(key, (_unused_, oldHash) -> {\n+\n+          fieldsAdded.set(0);\n+          HashMap<ByteArrayWrapper, ByteArrayWrapper> newHash;\n+          if (oldHash == null) {\n+            newHash = new HashMap<>();\n+          } else {\n+            newHash = new HashMap<>(oldHash);\n+          }\n+\n+          for (int i = 0; i < fieldsToSet.size(); i += 2) {\n+            ByteArrayWrapper field = fieldsToSet.get(i);\n+            ByteArrayWrapper value = fieldsToSet.get(i + 1);\n+\n+            Object abc;\n+            if (NX) {\n+              abc = newHash.putIfAbsent(field, value);\n+            } else {\n+              abc = newHash.put(field, value);\n+            }\n+\n+            if (abc == null) {\n+              fieldsAdded.getAndIncrement();\n+            }\n+          }\n+\n+          return newHash;\n+        });\n+\n+    if (computedHash != null) {\n+      context.getKeyRegistrar().register(this.key, RedisDataType.REDIS_HASH);\n+    }\n+\n+    return fieldsAdded.get();\n+  }\n+\n+  @Override\n+  public int hdel(List<ByteArrayWrapper> subList) {\n+    AtomicLong numDeleted = new AtomicLong();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bff909db2efc69b71aba497e87399255675cf222"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDkyMTgz", "url": "https://github.com/apache/geode/pull/4912#pullrequestreview-389492183", "createdAt": "2020-04-07T21:09:08Z", "commit": {"oid": "c1147c3f8d683548f9ab4c404b7e93ab13cc9331"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTI5NTc4", "url": "https://github.com/apache/geode/pull/4912#pullrequestreview-389529578", "createdAt": "2020-04-07T22:17:38Z", "commit": {"oid": "bff909db2efc69b71aba497e87399255675cf222"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjoxNzozOVrOGCYKDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMjoxNzozOVrOGCYKDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTE0NjEyNw==", "bodyText": "I would suggest a refactor to the name here-  this class seems like it's more about operating on sets than being a container for data?", "url": "https://github.com/apache/geode/pull/4912#discussion_r405146127", "createdAt": "2020-04-07T22:17:39Z", "author": {"login": "jhutchison"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/GeodeRedisSetSynchronized.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.set;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Set;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.redis.internal.ByteArrayWrapper;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+\n+class GeodeRedisSetSynchronized implements RedisSet {\n+\n+  private ByteArrayWrapper key;\n+  private ExecutionHandlerContext context;\n+\n+  public GeodeRedisSetSynchronized(ByteArrayWrapper key, ExecutionHandlerContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bff909db2efc69b71aba497e87399255675cf222"}, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c1147c3f8d683548f9ab4c404b7e93ab13cc9331", "author": {"user": {"login": "prettyClouds", "name": "Murtuza Boxwala"}}, "url": "https://github.com/apache/geode/commit/c1147c3f8d683548f9ab4c404b7e93ab13cc9331", "committedDate": "2020-04-07T17:25:52Z", "message": "fixes"}, "afterCommit": {"oid": "8720be195b72bede8cc8be2e3da56a5004424c5b", "author": {"user": {"login": "prettyClouds", "name": "Murtuza Boxwala"}}, "url": "https://github.com/apache/geode/commit/8720be195b72bede8cc8be2e3da56a5004424c5b", "committedDate": "2020-04-09T19:13:10Z", "message": "fixes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "137495ff72e6811863dc5b551417d1a0b49fe292", "author": {"user": {"login": "prettyClouds", "name": "Murtuza Boxwala"}}, "url": "https://github.com/apache/geode/commit/137495ff72e6811863dc5b551417d1a0b49fe292", "committedDate": "2020-04-09T21:52:55Z", "message": "do not use compute for \"getters\""}, "afterCommit": {"oid": "6c131d5c40a4b488c50d4f19597de4b938922eea", "author": {"user": {"login": "prettyClouds", "name": "Murtuza Boxwala"}}, "url": "https://github.com/apache/geode/commit/6c131d5c40a4b488c50d4f19597de4b938922eea", "committedDate": "2020-04-09T21:55:56Z", "message": "do not use compute for \"getters\""}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e3a0788e2633bd4076386738d5ba5665e75e590", "author": {"user": {"login": "prettyClouds", "name": "Murtuza Boxwala"}}, "url": "https://github.com/apache/geode/commit/3e3a0788e2633bd4076386738d5ba5665e75e590", "committedDate": "2020-04-09T21:59:21Z", "message": "Decouple geode in sadd,srem,smembers\n\nThis commit builds a GeodeRedisSetSynchronized class that brings\ntogether \"set\" methods.  These three are necessary for Spring-Session so\nthey are the only ones included."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d41234c52a86840e0b29c2967f03651597a07a5", "author": {"user": {"login": "prettyClouds", "name": "Murtuza Boxwala"}}, "url": "https://github.com/apache/geode/commit/9d41234c52a86840e0b29c2967f03651597a07a5", "committedDate": "2020-04-09T21:59:21Z", "message": "hset hmset hdel hgetall"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b099828eba8b4813b221dade071e6fddf91ff73", "author": {"user": {"login": "prettyClouds", "name": "Murtuza Boxwala"}}, "url": "https://github.com/apache/geode/commit/5b099828eba8b4813b221dade071e6fddf91ff73", "committedDate": "2020-04-09T21:59:21Z", "message": "fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56e793ac549806b6e02682cae9b00beebe5abf8d", "author": {"user": {"login": "prettyClouds", "name": "Murtuza Boxwala"}}, "url": "https://github.com/apache/geode/commit/56e793ac549806b6e02682cae9b00beebe5abf8d", "committedDate": "2020-04-09T21:59:21Z", "message": "do not use compute for \"getters\""}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c131d5c40a4b488c50d4f19597de4b938922eea", "author": {"user": {"login": "prettyClouds", "name": "Murtuza Boxwala"}}, "url": "https://github.com/apache/geode/commit/6c131d5c40a4b488c50d4f19597de4b938922eea", "committedDate": "2020-04-09T21:55:56Z", "message": "do not use compute for \"getters\""}, "afterCommit": {"oid": "56e793ac549806b6e02682cae9b00beebe5abf8d", "author": {"user": {"login": "prettyClouds", "name": "Murtuza Boxwala"}}, "url": "https://github.com/apache/geode/commit/56e793ac549806b6e02682cae9b00beebe5abf8d", "committedDate": "2020-04-09T21:59:21Z", "message": "do not use compute for \"getters\""}}, {"__typename": "PullRequestCommit", "commit": {"oid": "81c1bdcf8720a25e41399f3e4306bcd636e26d7c", "author": {"user": {"login": "prettyClouds", "name": "Murtuza Boxwala"}}, "url": "https://github.com/apache/geode/commit/81c1bdcf8720a25e41399f3e4306bcd636e26d7c", "committedDate": "2020-04-10T17:13:00Z", "message": "spA"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4752, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}