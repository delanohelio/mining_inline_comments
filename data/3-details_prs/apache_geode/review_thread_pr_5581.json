{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1ODU1NTgz", "number": 5581, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMToxMTowNFrOEpocDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMToxMTowNFrOEpocDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDg5NjEzOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/FilterProfile.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMToxMTowNFrOHba9Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMToxMTowNFrOHba9Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxNTIzNA==", "bodyText": "This can be simplified to return localFilterInfo == null;", "url": "https://github.com/apache/geode/pull/5581#discussion_r498515234", "createdAt": "2020-10-01T21:11:04Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/FilterProfile.java", "diffHunk": "@@ -1126,27 +1126,75 @@ public FilterRoutingInfo getFilterRoutingInfoPart1(CacheEvent event, Profile[] p\n    */\n   public FilterRoutingInfo getFilterRoutingInfoPart2(FilterRoutingInfo part1Info,\n       CacheEvent event) {\n+    return getFilterRoutingInfoPart2(part1Info, event, false);\n+  }\n+\n+  public FilterRoutingInfo getFilterRoutingInfoPart2(FilterRoutingInfo part1Info,\n+      CacheEvent event, boolean computeInterestRoutingInfo) {\n     FilterRoutingInfo result = part1Info;\n     if (localProfile.hasCacheServer) {\n       // bug #45520 - CQ events arriving out of order causes result set\n       // inconsistency, so don't compute routings for events in conflict\n       boolean isInConflict =\n           event.getOperation().isEntry() && ((EntryEventImpl) event).isConcurrencyConflict();\n       CqService cqService = getCqService(event.getRegion());\n-      if (!isInConflict && cqService.isRunning()\n-          && this.region != null /*\n-                                  * && !( this.region.isUsedForPartitionedRegionBucket() || //\n-                                  * partitioned region CQ this.region instanceof PartitionedRegion)\n-                                  */) { // processing is done in part 1\n+      if (!isInConflict && cqService.isRunning() && region != null) {\n         if (result == null) {\n           result = new FilterRoutingInfo();\n         }\n         if (logger.isDebugEnabled()) {\n           logger.debug(\"getting local cq matches for {}\", event);\n         }\n-        fillInCQRoutingInfo(event, true, NO_PROFILES, result);\n+        setLocalCQRoutingInfo(event, result);\n       }\n+      result = setLocalInterestRoutingInfo(event, result, computeInterestRoutingInfo);\n+    }\n+    return result;\n+  }\n+\n+  void setLocalCQRoutingInfo(CacheEvent event, FilterRoutingInfo result) {\n+    if (isCQRoutingNeeded(event)) {\n+      fillInCQRoutingInfo(event, true, NO_PROFILES, result);\n+    } else {\n+      result.setLocalFilterInfo(getLocalFilterInfo(event));\n+    }\n+  }\n+\n+  boolean isCQRoutingNeeded(CacheEvent event) {\n+    if (!isTransactionalEvent(event)) {\n+      return true;\n+    }\n+    FilterInfo localFilterInfo = getLocalFilterInfo(event);\n+    if (localFilterInfo != null) {\n+      return false;\n+    }\n+    return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93a34ee028b657e72b486473b851051b1a4a83d6"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4665, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}