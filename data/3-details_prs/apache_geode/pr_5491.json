{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NTQwOTUw", "number": 5491, "title": "GEODE-8473: Hang in ReplyProcessor21 when forced-disconnect does not establish a cancellation cause", "bodyText": "ReplyProcessor21 will not stop waiting for responses to a message during a Forced Disconnect unless ClusterDistributionManager is informed of the disconnect.  It sets a rootCause in its CancelCriterion that is polled by ReplyProcessor21's StoppableCountDownLatch.\nThis commit ensures that ClusterDistributionManager is notified of the disconnect so that it can perform this action.\nThis is a follow-up PR to GEODE-8467, which ensures that a DisconnectThread is launched to execute the GMSMembership.uncleanShutdown() method.\n@kamilla1201\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-08-31T21:05:44Z", "url": "https://github.com/apache/geode/pull/5491", "merged": true, "mergeCommit": {"oid": "c48c0c378f90bb2912e018856a1f6e3a46a610e8"}, "closed": true, "closedAt": "2020-09-16T16:16:41Z", "author": {"login": "bschuchardt"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEZNwVgH2gAyNDc2NTQwOTUwOjBmZmE1YTIxMDYxMTk3ZjFkN2I1NjIxYTE3OGE3YTc4NDhkYWUyNjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHjeeQAFqTQ4NjExNTU0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0ffa5a21061197f1d7b5621a178a7a7848dae262", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/0ffa5a21061197f1d7b5621a178a7a7848dae262", "committedDate": "2020-08-31T20:55:35Z", "message": "GEODE-8473: Hang in ReplyProcessor21 when forced-disconnect does not establish a cancellation cause\n\nEnsure that the cache is informed of a forced-disconnect in the\nDisconnectThread.  This is a follow-on commit to GEODE-8467, which\nensured that the DisconnectThread is launched in the presence of cache\nXML generation failure.  This commit adds a try/catch in\nGMSMembership.uncleanShutdown() to ensure that the up-stream\nClusterDistributionManager is informed of the failure so it can set the\n\"rootCause\" in its CancelCriterion.  ReplyProcessor21 and other objects\nthat poll for this \"rootCause\" will then be released from waiting for\nresponses to messages sent to other members of the cluster."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgwOTgzNTQz", "url": "https://github.com/apache/geode/pull/5491#pullrequestreview-480983543", "createdAt": "2020-09-02T16:14:15Z", "commit": {"oid": "0ffa5a21061197f1d7b5621a178a7a7848dae262"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2MTE1NTQ0", "url": "https://github.com/apache/geode/pull/5491#pullrequestreview-486115544", "createdAt": "2020-09-10T16:34:12Z", "commit": {"oid": "0ffa5a21061197f1d7b5621a178a7a7848dae262"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjozNDoxMlrOHP8bhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNjozNDozMVrOHP8cXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4MDc3NQ==", "bodyText": "you tested it all!", "url": "https://github.com/apache/geode/pull/5491#discussion_r486480775", "createdAt": "2020-09-10T16:34:12Z", "author": {"login": "Bill"}, "path": "geode-membership/src/integrationTest/java/org/apache/geode/distributed/internal/membership/gms/GMSMembershipJUnitTest.java", "diffHunk": "@@ -396,6 +399,18 @@ public void testMulticastAllowedWithNewVersionViewMember() {\n     assertThat(manager.getGMSManager().isMulticastAllowed()).isTrue();\n   }\n \n+  @Test\n+  public void membershipInvokesUpstreamListenerDuringForcedDisconnect() {\n+    // have an exception interrupt the shutdown process and ensure that a thread is\n+    // launched to inform the cache of shutdown\n+    IllegalStateException expectedException = new IllegalStateException();\n+    doThrow(expectedException).when(services).emergencyClose();\n+    assertThatThrownBy(() -> manager.uncleanShutdown(\"For testing\",\n+        new MemberDisconnectedException(\"For Testing\")))\n+            .isEqualTo(expectedException);\n+    verify(listener).membershipFailure(isA(String.class), isA(Throwable.class));\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ffa5a21061197f1d7b5621a178a7a7848dae262"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ4MDk5MA==", "bodyText": "solid", "url": "https://github.com/apache/geode/pull/5491#discussion_r486480990", "createdAt": "2020-09-10T16:34:31Z", "author": {"login": "Bill"}, "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/GMSMembership.java", "diffHunk": "@@ -1267,25 +1267,27 @@ public void shutdown() {\n   public void uncleanShutdown(String reason, final Exception e) {\n     inhibitForcedDisconnectLogging(false);\n \n-    if (services.getShutdownCause() == null) {\n-      services.setShutdownCause(e);\n-    }\n-\n-    if (cleanupTimer != null && !cleanupTimer.isShutdown()) {\n-      cleanupTimer.shutdownNow();\n-    }\n+    try {\n+      if (services.getShutdownCause() == null) {\n+        services.setShutdownCause(e);\n+      }\n \n-    lifecycleListener.disconnect(e);\n+      if (cleanupTimer != null && !cleanupTimer.isShutdown()) {\n+        cleanupTimer.shutdownNow();\n+      }\n \n-    // first shut down communication so we don't do any more harm to other\n-    // members\n-    services.emergencyClose();\n+      lifecycleListener.disconnect(e);\n \n-    if (e != null) {\n-      try {\n-        listener.membershipFailure(reason, e);\n-      } catch (RuntimeException re) {\n-        logger.warn(\"Exception caught while shutting down\", re);\n+      // first shut down communication so we don't do any more harm to other\n+      // members\n+      services.emergencyClose();\n+    } finally {\n+      if (e != null) {\n+        try {\n+          listener.membershipFailure(reason, e);\n+        } catch (RuntimeException re) {\n+          logger.warn(\"Exception caught while shutting down\", re);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ffa5a21061197f1d7b5621a178a7a7848dae262"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4182, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}