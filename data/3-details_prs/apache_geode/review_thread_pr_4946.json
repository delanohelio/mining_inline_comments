{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMTk3MjAy", "number": 4946, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjoyNDo1NVrODxTDgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMjo1MDo1MVrODxajbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDE5MDExOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/PubSubIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjoyNDo1NVrOGEsCXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjoyNDo1NVrOGEsCXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2ODk4OA==", "bodyText": "instead of size() != 0 !isEmpty() is a bit better", "url": "https://github.com/apache/geode/pull/4946#discussion_r407568988", "createdAt": "2020-04-13T16:24:55Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/PubSubIntegrationTest.java", "diffHunk": "@@ -253,11 +251,14 @@ public void testPatternSubscribe() {\n \n     waitFor(() -> mockSubscriber.getSubscribedChannels() == 1);\n \n-    Long result = publisher.publish(\"salutations\", \"hello\");\n+    String message = \"hello-\" + System.currentTimeMillis();\n+\n+    Long result = publisher.publish(\"salutations\", message);\n     assertThat(result).isEqualTo(1);\n \n     assertThat(mockSubscriber.getReceivedMessages()).isEmpty();\n-    assertThat(mockSubscriber.getReceivedPMessages()).containsExactly(\"hello\");\n+    GeodeAwaitility.await().until(() -> mockSubscriber.getReceivedPMessages().size() != 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043092eb14740026246a3244414a7adc6a5dcdc5"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMDE5NDk0OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/PubSubIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNjoyNjoyM1rOGEsFXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMjowMzo1M1rOGE28JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2OTc1OA==", "bodyText": "It seems like this old assert that we have no receivedMessages should be AFTER the new await that we did receive a PMessage. I could be wrong about this but it seems like you should have the test wait for the event and then do the asserts", "url": "https://github.com/apache/geode/pull/4946#discussion_r407569758", "createdAt": "2020-04-13T16:26:23Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/PubSubIntegrationTest.java", "diffHunk": "@@ -253,11 +251,14 @@ public void testPatternSubscribe() {\n \n     waitFor(() -> mockSubscriber.getSubscribedChannels() == 1);\n \n-    Long result = publisher.publish(\"salutations\", \"hello\");\n+    String message = \"hello-\" + System.currentTimeMillis();\n+\n+    Long result = publisher.publish(\"salutations\", message);\n     assertThat(result).isEqualTo(1);\n \n     assertThat(mockSubscriber.getReceivedMessages()).isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "043092eb14740026246a3244414a7adc6a5dcdc5"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzcyNDA1Ng==", "bodyText": "There are actually 2 categories of received messages - one is as a result of a 'regular' subscription and one is as a result of a pattern subscription. They are both sent and processed separately. So it doesn't matter in which order these asserts are done in. In this case I just want to make sure I received 1 'pmessage' and did not receive any other messages.", "url": "https://github.com/apache/geode/pull/4946#discussion_r407724056", "createdAt": "2020-04-13T21:11:56Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/PubSubIntegrationTest.java", "diffHunk": "@@ -253,11 +251,14 @@ public void testPatternSubscribe() {\n \n     waitFor(() -> mockSubscriber.getSubscribedChannels() == 1);\n \n-    Long result = publisher.publish(\"salutations\", \"hello\");\n+    String message = \"hello-\" + System.currentTimeMillis();\n+\n+    Long result = publisher.publish(\"salutations\", message);\n     assertThat(result).isEqualTo(1);\n \n     assertThat(mockSubscriber.getReceivedMessages()).isEmpty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2OTc1OA=="}, "originalCommit": {"oid": "043092eb14740026246a3244414a7adc6a5dcdc5"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc0NzYyMA==", "bodyText": "But if you made sure AFTER you had received the message you are expecting, you would give the test more of a chance to catch that it also received the unexpected message. I don't think you should wait for something you never expect to happen; that would cause all tests to take too long to run. I'm okay if you leave the test as is", "url": "https://github.com/apache/geode/pull/4946#discussion_r407747620", "createdAt": "2020-04-13T22:03:53Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/PubSubIntegrationTest.java", "diffHunk": "@@ -253,11 +251,14 @@ public void testPatternSubscribe() {\n \n     waitFor(() -> mockSubscriber.getSubscribedChannels() == 1);\n \n-    Long result = publisher.publish(\"salutations\", \"hello\");\n+    String message = \"hello-\" + System.currentTimeMillis();\n+\n+    Long result = publisher.publish(\"salutations\", message);\n     assertThat(result).isEqualTo(1);\n \n     assertThat(mockSubscriber.getReceivedMessages()).isEmpty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzU2OTc1OA=="}, "originalCommit": {"oid": "043092eb14740026246a3244414a7adc6a5dcdc5"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTQxODY4OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/PubSubIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMjo1MDo1MVrOGE3-nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwMzo1NTozNVrOGE9SGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc2NDYzOQ==", "bodyText": "Doesn't this need to be !isEmpty()?", "url": "https://github.com/apache/geode/pull/4946#discussion_r407764639", "createdAt": "2020-04-13T22:50:51Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/PubSubIntegrationTest.java", "diffHunk": "@@ -253,11 +251,14 @@ public void testPatternSubscribe() {\n \n     waitFor(() -> mockSubscriber.getSubscribedChannels() == 1);\n \n-    Long result = publisher.publish(\"salutations\", \"hello\");\n+    String message = \"hello-\" + System.currentTimeMillis();\n+\n+    Long result = publisher.publish(\"salutations\", message);\n     assertThat(result).isEqualTo(1);\n \n     assertThat(mockSubscriber.getReceivedMessages()).isEmpty();\n-    assertThat(mockSubscriber.getReceivedPMessages()).containsExactly(\"hello\");\n+    GeodeAwaitility.await().until(() -> mockSubscriber.getReceivedPMessages().isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf2f2b1cb36e1225b6154d408a9415cf4333bd06"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzg1MTU0Nw==", "bodyText": "Doh! Thanks.", "url": "https://github.com/apache/geode/pull/4946#discussion_r407851547", "createdAt": "2020-04-14T03:55:35Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/PubSubIntegrationTest.java", "diffHunk": "@@ -253,11 +251,14 @@ public void testPatternSubscribe() {\n \n     waitFor(() -> mockSubscriber.getSubscribedChannels() == 1);\n \n-    Long result = publisher.publish(\"salutations\", \"hello\");\n+    String message = \"hello-\" + System.currentTimeMillis();\n+\n+    Long result = publisher.publish(\"salutations\", message);\n     assertThat(result).isEqualTo(1);\n \n     assertThat(mockSubscriber.getReceivedMessages()).isEmpty();\n-    assertThat(mockSubscriber.getReceivedPMessages()).containsExactly(\"hello\");\n+    GeodeAwaitility.await().until(() -> mockSubscriber.getReceivedPMessages().isEmpty());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc2NDYzOQ=="}, "originalCommit": {"oid": "bf2f2b1cb36e1225b6154d408a9415cf4333bd06"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4311, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}