{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MjEyOTM1", "number": 5191, "title": "GEODE-8198: Revise docs description of putAll()", "bodyText": "This PR changes the user guide to go with the Javadocs update that was in GEODE-8171.", "createdAt": "2020-06-01T21:02:38Z", "url": "https://github.com/apache/geode/pull/5191", "merged": true, "mergeCommit": {"oid": "90980027e8258f112ecd5667ca2f1ea5046f8557"}, "closed": true, "closedAt": "2020-06-04T21:56:45Z", "author": {"login": "karensmolermiller"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcnGooEAH2gAyNDI2MjEyOTM1OmI5NGExODA0NjBkNDBhZDY5OGE5ODE2MzRlNWY0M2E2ZWUwODk3ZmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoFMdLgFqTQyNDg1ODIzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b94a180460d40ad698a981634e5f43a6ee0897fa", "author": {"user": null}, "url": "https://github.com/apache/geode/commit/b94a180460d40ad698a981634e5f43a6ee0897fa", "committedDate": "2020-06-01T20:52:56Z", "message": "GEODE-8198: Revise docs description of putAll()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMTg1Njc4", "url": "https://github.com/apache/geode/pull/5191#pullrequestreview-422185678", "createdAt": "2020-06-01T21:12:14Z", "commit": {"oid": "b94a180460d40ad698a981634e5f43a6ee0897fa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMToxMjoxNFrOGdaUWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMToxMjoxNFrOGdaUWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5MzA4MQ==", "bodyText": "Actually the order of processing for keys in the map is not guaranteed. But we don't have to mention it.", "url": "https://github.com/apache/geode/pull/5191#discussion_r433493081", "createdAt": "2020-06-01T21:12:14Z", "author": {"login": "gesterzhou"}, "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,36 +60,90 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n \n-**Example:**\n+The updates to the cache are done individually in the order in which\n+they were placed in the `Map`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b94a180460d40ad698a981634e5f43a6ee0897fa"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMTkwMDQx", "url": "https://github.com/apache/geode/pull/5191#pullrequestreview-422190041", "createdAt": "2020-06-01T21:19:23Z", "commit": {"oid": "b94a180460d40ad698a981634e5f43a6ee0897fa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMToxOToyM1rOGdahSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMToxOToyM1rOGdahSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5NjM5NA==", "bodyText": "If you explicitly talking about PR's putAll here, you might have to also have a chapter to talk about DR's putAll. Their behavior are different.", "url": "https://github.com/apache/geode/pull/5191#discussion_r433496394", "createdAt": "2020-06-01T21:19:23Z", "author": {"login": "gesterzhou"}, "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,36 +60,90 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n \n-**Example:**\n+The updates to the cache are done individually in the order in which\n+they were placed in the `Map`.\n+For partitioned regions,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b94a180460d40ad698a981634e5f43a6ee0897fa"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjEwMDQ5", "url": "https://github.com/apache/geode/pull/5191#pullrequestreview-422210049", "createdAt": "2020-06-01T21:56:37Z", "commit": {"oid": "b94a180460d40ad698a981634e5f43a6ee0897fa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMTo1NjozN1rOGdbd-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMTo1NjozN1rOGdbd-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxMTkyOA==", "bodyText": "\"Either\" is singular, so \"If either.. is thrown...\"", "url": "https://github.com/apache/geode/pull/5191#discussion_r433511928", "createdAt": "2020-06-01T21:56:37Z", "author": {"login": "davebarnes97"}, "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,36 +60,90 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n \n-**Example:**\n+The updates to the cache are done individually in the order in which\n+they were placed in the `Map`.\n+For partitioned regions,\n+multiple events are sent as a single message to the primary buckets\n+and then distributed to the secondary buckets.\n+\n+The design of a client application within a client-server design pattern\n+faces the possibility that a partial operation can occur.\n+Some, all, or none of the specified entries may be completed with `putAll`.\n+If either `ServerOperationException` or `ServerConnectivityException` are", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b94a180460d40ad698a981634e5f43a6ee0897fa"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjEyNjM2", "url": "https://github.com/apache/geode/pull/5191#pullrequestreview-422212636", "createdAt": "2020-06-01T22:01:43Z", "commit": {"oid": "b94a180460d40ad698a981634e5f43a6ee0897fa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjE0Njcw", "url": "https://github.com/apache/geode/pull/5191#pullrequestreview-422214670", "createdAt": "2020-06-01T22:06:02Z", "commit": {"oid": "b94a180460d40ad698a981634e5f43a6ee0897fa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNjowM1rOGdbsAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjowNjowM1rOGdbsAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUxNTUyMQ==", "bodyText": "Line 144-146 looks like duplicate of line 133-135.", "url": "https://github.com/apache/geode/pull/5191#discussion_r433515521", "createdAt": "2020-06-01T22:06:03Z", "author": {"login": "jchen21"}, "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,36 +60,90 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n \n-**Example:**\n+The updates to the cache are done individually in the order in which\n+they were placed in the `Map`.\n+For partitioned regions,\n+multiple events are sent as a single message to the primary buckets\n+and then distributed to the secondary buckets.\n+\n+The design of a client application within a client-server design pattern\n+faces the possibility that a partial operation can occur.\n+Some, all, or none of the specified entries may be completed with `putAll`.\n+If either `ServerOperationException` or `ServerConnectivityException` are\n+thrown,\n+it can indicate an incomplete operation.\n \n ``` pre\n-void putAll(String command) throws CacheException \n-{ \n-// Get Entry keys and values into Strings key1, ... keyN and value1, ... valueN \n-  Map map = new LinkedHashMap(); \n-  map.put(key1, value1)); \n-  ...\n-  map.put(keyN, valueN));\n-  this.currRegion.putAll(map); \n+int retry = 0;\n+RuntimeException rte = null;\n+while (retry < 3) {\n+  try {\n+    region.putAll(map);\n+  } catch (ServerOperationException e) {\n+    if (e.getCause() instanceof TimeoutException\n+        || e.getCause() instanceof LowMemoryException) {\n+      // Retry due to transient error.\n+      retry++;\n+    } else {\n+      rte = e;\n+      break;\n+    }\n+  } catch (ServerConnectivityException e) {\n+    // Retry due to transient error.\n+    retry++;\n+  }\n+}\n+\n+if (retry == 3) {\n+  System.out.println(\"3 putAll operations tried, and all failed.\");\n+} else if (rte != null) {\n+  System.out.println(\"putAll failed due to \" + rte);\n+  throw rte;\n }\n ```\n \n+A thrown exception of `ServerConnectivityException` with a cause of\n+`TimeoutException` or `LowMemoryException` can be a transient error.\n+A limited quantity of retries of the `putAll` may result in a completed\n+operation.\n+A repeated timeout may imply that the `read-timeout` value is not\n+long enough to complete the bulk operation;\n+use the `org.apache.geode.cache.client.PoolFactory.setReadTimeout`\n+method to set the `read-timeout` value.\n+\n+Client applications that cannot tolerate partial completion of a `putAll`\n+operation may embed the operation into a transaction.\n+See [Transactions](../../developing/transactions/chapter_overview.html)\n+for details.\n+\n+**Note:**\n+The processing of a map with many entries and/or extra-large data values\n+may affect system performance and cause cache update timeouts,\n+especially if the region uses overflow or persistence to disk.\n+\n+## <a id=\"removeAll_method\" class=\"no-quick-link\"></a>The removeAll Operation\n+\n+The batch operation `Region.removeAll`\n+\n The updates to the cache are done individually in the order in which they were placed in the `Map`. For partitioned regions, multiple events are sent as a single message to the primary buckets and then distributed to the secondary buckets.\n \n **Note:**\n-The processing of maps with very many entries and/or very large data may affect system performance and cause cache update timeouts, especially if the region uses overflow or persistence to disk.\n+The processing of a map with many entries and/or extra-large data values", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b94a180460d40ad698a981634e5f43a6ee0897fa"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjM0Mzk5", "url": "https://github.com/apache/geode/pull/5191#pullrequestreview-422234399", "createdAt": "2020-06-01T22:54:27Z", "commit": {"oid": "b94a180460d40ad698a981634e5f43a6ee0897fa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjo1NDoyN1rOGdcqEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjo1NDoyN1rOGdcqEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzMTQwOQ==", "bodyText": "Here should be ServerOperationException.", "url": "https://github.com/apache/geode/pull/5191#discussion_r433531409", "createdAt": "2020-06-01T22:54:27Z", "author": {"login": "gesterzhou"}, "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,36 +60,90 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n \n-**Example:**\n+The updates to the cache are done individually in the order in which\n+they were placed in the `Map`.\n+For partitioned regions,\n+multiple events are sent as a single message to the primary buckets\n+and then distributed to the secondary buckets.\n+\n+The design of a client application within a client-server design pattern\n+faces the possibility that a partial operation can occur.\n+Some, all, or none of the specified entries may be completed with `putAll`.\n+If either `ServerOperationException` or `ServerConnectivityException` are\n+thrown,\n+it can indicate an incomplete operation.\n \n ``` pre\n-void putAll(String command) throws CacheException \n-{ \n-// Get Entry keys and values into Strings key1, ... keyN and value1, ... valueN \n-  Map map = new LinkedHashMap(); \n-  map.put(key1, value1)); \n-  ...\n-  map.put(keyN, valueN));\n-  this.currRegion.putAll(map); \n+int retry = 0;\n+RuntimeException rte = null;\n+while (retry < 3) {\n+  try {\n+    region.putAll(map);\n+  } catch (ServerOperationException e) {\n+    if (e.getCause() instanceof TimeoutException\n+        || e.getCause() instanceof LowMemoryException) {\n+      // Retry due to transient error.\n+      retry++;\n+    } else {\n+      rte = e;\n+      break;\n+    }\n+  } catch (ServerConnectivityException e) {\n+    // Retry due to transient error.\n+    retry++;\n+  }\n+}\n+\n+if (retry == 3) {\n+  System.out.println(\"3 putAll operations tried, and all failed.\");\n+} else if (rte != null) {\n+  System.out.println(\"putAll failed due to \" + rte);\n+  throw rte;\n }\n ```\n \n+A thrown exception of `ServerConnectivityException` with a cause of", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b94a180460d40ad698a981634e5f43a6ee0897fa"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMjM1MDQ3", "url": "https://github.com/apache/geode/pull/5191#pullrequestreview-422235047", "createdAt": "2020-06-01T22:56:10Z", "commit": {"oid": "b94a180460d40ad698a981634e5f43a6ee0897fa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjo1NjoxMFrOGdcsTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMjo1NjoxMFrOGdcsTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzUzMTk4Mg==", "bodyText": "could also cause LowMemoryException", "url": "https://github.com/apache/geode/pull/5191#discussion_r433531982", "createdAt": "2020-06-01T22:56:10Z", "author": {"login": "gesterzhou"}, "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,36 +60,90 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n \n-**Example:**\n+The updates to the cache are done individually in the order in which\n+they were placed in the `Map`.\n+For partitioned regions,\n+multiple events are sent as a single message to the primary buckets\n+and then distributed to the secondary buckets.\n+\n+The design of a client application within a client-server design pattern\n+faces the possibility that a partial operation can occur.\n+Some, all, or none of the specified entries may be completed with `putAll`.\n+If either `ServerOperationException` or `ServerConnectivityException` are\n+thrown,\n+it can indicate an incomplete operation.\n \n ``` pre\n-void putAll(String command) throws CacheException \n-{ \n-// Get Entry keys and values into Strings key1, ... keyN and value1, ... valueN \n-  Map map = new LinkedHashMap(); \n-  map.put(key1, value1)); \n-  ...\n-  map.put(keyN, valueN));\n-  this.currRegion.putAll(map); \n+int retry = 0;\n+RuntimeException rte = null;\n+while (retry < 3) {\n+  try {\n+    region.putAll(map);\n+  } catch (ServerOperationException e) {\n+    if (e.getCause() instanceof TimeoutException\n+        || e.getCause() instanceof LowMemoryException) {\n+      // Retry due to transient error.\n+      retry++;\n+    } else {\n+      rte = e;\n+      break;\n+    }\n+  } catch (ServerConnectivityException e) {\n+    // Retry due to transient error.\n+    retry++;\n+  }\n+}\n+\n+if (retry == 3) {\n+  System.out.println(\"3 putAll operations tried, and all failed.\");\n+} else if (rte != null) {\n+  System.out.println(\"putAll failed due to \" + rte);\n+  throw rte;\n }\n ```\n \n+A thrown exception of `ServerConnectivityException` with a cause of\n+`TimeoutException` or `LowMemoryException` can be a transient error.\n+A limited quantity of retries of the `putAll` may result in a completed\n+operation.\n+A repeated timeout may imply that the `read-timeout` value is not\n+long enough to complete the bulk operation;\n+use the `org.apache.geode.cache.client.PoolFactory.setReadTimeout`\n+method to set the `read-timeout` value.\n+\n+Client applications that cannot tolerate partial completion of a `putAll`\n+operation may embed the operation into a transaction.\n+See [Transactions](../../developing/transactions/chapter_overview.html)\n+for details.\n+\n+**Note:**\n+The processing of a map with many entries and/or extra-large data values", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b94a180460d40ad698a981634e5f43a6ee0897fa"}, "originalPosition": 99}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb1ccfb57625e227e4a71d7db886c087549a9a7d", "author": {"user": null}, "url": "https://github.com/apache/geode/commit/fb1ccfb57625e227e4a71d7db886c087549a9a7d", "committedDate": "2020-06-02T17:57:06Z", "message": "GEODE-8198 putAll docs revision to address review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9827524c7d0e92ce9c841ec9dc613641a18a1d51", "author": {"user": null}, "url": "https://github.com/apache/geode/commit/9827524c7d0e92ce9c841ec9dc613641a18a1d51", "committedDate": "2020-06-02T20:21:52Z", "message": "GEODE-8198: Final edits on docs for putAll()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDM0NTc0", "url": "https://github.com/apache/geode/pull/5191#pullrequestreview-423034574", "createdAt": "2020-06-02T20:30:43Z", "commit": {"oid": "9827524c7d0e92ce9c841ec9dc613641a18a1d51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDozMDo0M1rOGeC4PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDozMDo0M1rOGeC4PQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE1NzYyOQ==", "bodyText": "should be multiple keys, not multiple events, because there's only one event per putAll. Latter for replicated region, you said \"a single event\".", "url": "https://github.com/apache/geode/pull/5191#discussion_r434157629", "createdAt": "2020-06-02T20:30:43Z", "author": {"login": "gesterzhou"}, "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,39 +60,91 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n+For partitioned regions,\n+multiple events are sent as a single message to each primary bucket", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9827524c7d0e92ce9c841ec9dc613641a18a1d51"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDM1Njg1", "url": "https://github.com/apache/geode/pull/5191#pullrequestreview-423035685", "createdAt": "2020-06-02T20:32:27Z", "commit": {"oid": "9827524c7d0e92ce9c841ec9dc613641a18a1d51"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "776975453c5826f03e5440491324084098cd49ba", "author": {"user": null}, "url": "https://github.com/apache/geode/commit/776975453c5826f03e5440491324084098cd49ba", "committedDate": "2020-06-02T20:42:20Z", "message": "GEODE-8198: Fix a last detail on the revision of docs for putAll"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDUxMzg1", "url": "https://github.com/apache/geode/pull/5191#pullrequestreview-423051385", "createdAt": "2020-06-02T20:56:28Z", "commit": {"oid": "776975453c5826f03e5440491324084098cd49ba"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDo1NjoyOFrOGeDrNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwMDo1NToyM1rOGeIpWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MDY3Ng==", "bodyText": "Its key-value(s) (or entries).", "url": "https://github.com/apache/geode/pull/5191#discussion_r434170676", "createdAt": "2020-06-02T20:56:28Z", "author": {"login": "agingade"}, "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,39 +60,91 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n+For partitioned regions,\n+multiple keys are sent as a single message to each primary bucket", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "776975453c5826f03e5440491324084098cd49ba"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MDg2Ng==", "bodyText": "Its key-value(s) (or entries).", "url": "https://github.com/apache/geode/pull/5191#discussion_r434170866", "createdAt": "2020-06-02T20:56:48Z", "author": {"login": "agingade"}, "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,39 +60,91 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n+For partitioned regions,\n+multiple keys are sent as a single message to each primary bucket\n+and then distributed to the secondary buckets.\n+For replicated regions, the keys are sent to one server.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "776975453c5826f03e5440491324084098cd49ba"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MTIwNQ==", "bodyText": "entry - entries", "url": "https://github.com/apache/geode/pull/5191#discussion_r434171205", "createdAt": "2020-06-02T20:57:26Z", "author": {"login": "agingade"}, "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,39 +60,91 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n+For partitioned regions,\n+multiple keys are sent as a single message to each primary bucket\n+and then distributed to the secondary buckets.\n+For replicated regions, the keys are sent to one server.\n+After applying all entry updates to that server,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "776975453c5826f03e5440491324084098cd49ba"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MzYwNA==", "bodyText": "The partial update can happen with non-client pattern (calling putAll in embedded application or in function execution)...In that case the application won't see ServerConnectivity or ServerOperation exception, do we want to call that out...", "url": "https://github.com/apache/geode/pull/5191#discussion_r434173604", "createdAt": "2020-06-02T21:02:13Z", "author": {"login": "agingade"}, "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,39 +60,91 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n+For partitioned regions,\n+multiple keys are sent as a single message to each primary bucket\n+and then distributed to the secondary buckets.\n+For replicated regions, the keys are sent to one server.\n+After applying all entry updates to that server,\n+that server distributes the event to the other servers that host the region.\n \n-**Example:**\n+The design of a client application within a client-server design pattern", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "776975453c5826f03e5440491324084098cd49ba"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI1MjEyMQ==", "bodyText": "To make the error handling consistent, I modified the sample code.\npublic void testPutAll() throws Exception {\nThrowable throwable = null;\nMap map = new LinkedHashMap();\nRegion region;\n// Retry in case of transient exception.\nfor (int retry = 0; retry < 3; retry++) {\n  throwable = null;\n  try {\n    region.putAll(map);\n  } catch (ServerOperationException e) {\n    throwable = e.getCause();\n    if (!(e.getCause() instanceof TimeoutException || e.getCause() instanceof LowMemoryException)) {\n      // Non transient exception. Skip retry.\n      break;\n    }\n  } catch (ServerConnectivityException e) {\n    throwable = e;\n  }\n}\n\nif (throwable != null) {\n  // Take appropriate action, like throwing the exception or logging the message.\n  System.out.println(\"putAll failed due to \" + throwable);\n  throw new Exception(throwable);\n}\n\n}\nI have shown the sample code to Gester and he is fine with this new code.", "url": "https://github.com/apache/geode/pull/5191#discussion_r434252121", "createdAt": "2020-06-03T00:55:23Z", "author": {"login": "agingade"}, "path": "geode-docs/basic_config/data_entries_custom_classes/managing_data_entries.html.md.erb", "diffHunk": "@@ -60,39 +60,91 @@ You can also use the `gfsh put` command to add entries to a region, and the `get\n \n If you want only to create the entry (with a null value and with method failure if the entry already exists), use `Region.create` instead.\n \n-## <a id=\"managing_data_entries__section_7578349EA26A4621B732FE851D71A84F\" class=\"no-quick-link\"></a>Batch Operations (getAll, putAll, removeAll)\n+## <a id=\"getAll_method\" class=\"no-quick-link\"></a>The getAll Operation\n \n-<%=vars.product_name%> provides three APIs to perform batch operations on multiple region entries:\n+The batch operation `Region.getAll`\n+takes a collection of keys and returns a `Map` of key-value pairs for\n+the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n \n--   `Region.getAll`\n--   `Region.putAll`\n--   `Region.removeAll`\n+## <a id=\"putAll_method\" class=\"no-quick-link\"></a>The putAll Operation\n \n-The `getAll` method takes a collection of keys and returns a `Map` of values for the provided keys. If a given key does not exist in the region, then that key's value in the returned map will be null.\n+The batch operation `Region.putAll`\n+takes a `Map` of key-value pairs, puts them into the cache,\n+and distributes them in a single operation.\n \n-The `putAll` method takes a `Map` of key-value pairs and puts them into the cache and distributes them in a single operation.\n+For partitioned regions,\n+multiple keys are sent as a single message to each primary bucket\n+and then distributed to the secondary buckets.\n+For replicated regions, the keys are sent to one server.\n+After applying all entry updates to that server,\n+that server distributes the event to the other servers that host the region.\n \n-**Example:**\n+The design of a client application within a client-server design pattern\n+faces the possibility that a partial operation can occur.\n+Some, all, or none of the specified entries may be completed with `putAll`.\n+If either `ServerOperationException` or `ServerConnectivityException` is\n+thrown,\n+it can indicate an incomplete operation.\n \n ``` pre\n-void putAll(String command) throws CacheException \n-{ \n-// Get Entry keys and values into Strings key1, ... keyN and value1, ... valueN \n-  Map map = new LinkedHashMap(); \n-  map.put(key1, value1)); \n-  ...\n-  map.put(keyN, valueN));\n-  this.currRegion.putAll(map); \n+int retry = 0;\n+RuntimeException rte = null;\n+while (retry < 3) {\n+  try {\n+    region.putAll(map);\n+  } catch (ServerOperationException e) {\n+    if (e.getCause() instanceof TimeoutException\n+        || e.getCause() instanceof LowMemoryException) {\n+      // Retry due to transient error.\n+      retry++;\n+    } else {\n+      rte = e;\n+      break;\n+    }\n+  } catch (ServerConnectivityException e) {\n+    // Retry due to transient error.\n+    retry++;\n+  }\n+}\n+\n+if (retry == 3) {\n+  System.out.println(\"3 putAll operations tried, and all failed.\");\n+} else if (rte != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "776975453c5826f03e5440491324084098cd49ba"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f4b64a6181640cc94e0ce5ef7da7ce0bed12c1f", "author": {"user": null}, "url": "https://github.com/apache/geode/commit/0f4b64a6181640cc94e0ce5ef7da7ce0bed12c1f", "committedDate": "2020-06-04T20:19:43Z", "message": "GEODE-8198: Revise docs for describing putAll\n  - Revised the code example\n  - Removed putAll prose on internal implementation details\n  - Revised wording to clarify"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODU4MjMz", "url": "https://github.com/apache/geode/pull/5191#pullrequestreview-424858233", "createdAt": "2020-06-04T21:46:11Z", "commit": {"oid": "0f4b64a6181640cc94e0ce5ef7da7ce0bed12c1f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4406, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}