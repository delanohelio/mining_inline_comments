{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NDA1NTU5", "number": 5079, "title": "GEODE-8094: Create HA test to ensure Spring Boot sessions expire correctly", "bodyText": "Co-authored-by: Murtuza Boxwala mboxwala@vmware.com\nCo-authored-by: Raymond Ingles ringles@vmware.com\nCo-authored-by: Jens Deppe jdeppe@vmware.com\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-05-08T19:54:55Z", "url": "https://github.com/apache/geode/pull/5079", "merged": true, "mergeCommit": {"oid": "4fff1f9fde1b1401c68722c015f65267bf5da971"}, "closed": true, "closedAt": "2020-05-15T15:29:26Z", "author": {"login": "jdeppe-pivotal"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcg6P0jAFqTQxMDk2NjUzNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABchc3aZgFqTQxMjQwNTc3Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwOTY2NTM2", "url": "https://github.com/apache/geode/pull/5079#pullrequestreview-410966536", "createdAt": "2020-05-13T14:12:34Z", "commit": {"oid": "8e2263ec3a1eb2a387e6c6dc487f13dc8b111133"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoxMjozNFrOGUzmgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDozMTowOFrOGU0edg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ3MDE0Nw==", "bodyText": "This is cool... should we add this annotation to our other tests? What is the intent?", "url": "https://github.com/apache/geode/pull/5079#discussion_r424470147", "createdAt": "2020-05-13T14:12:34Z", "author": {"login": "sabbey37"}, "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/session/RedisSessionDistDUnitTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.redis.session;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Map;\n+\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.test.junit.categories.RedisTest;\n+\n+@Category({RedisTest.class})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e2263ec3a1eb2a387e6c6dc487f13dc8b111133"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4MDY2NA==", "bodyText": "Not sure if something weird happened with a rename, but could this parameter could just be named \"server\"?", "url": "https://github.com/apache/geode/pull/5079#discussion_r424480664", "createdAt": "2020-05-13T14:26:16Z", "author": {"login": "sabbey37"}, "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/session/SessionDUnitTest.java", "diffHunk": "@@ -80,137 +84,62 @@ public static void setup() {\n     cluster.startLocatorVM(LOCATOR);\n     startRedisServer(SERVER1);\n     startRedisServer(SERVER2);\n-    startSpringApp(APP1, SERVER1, SERVER2);\n-    startSpringApp(APP2, SERVER2, SERVER1);\n \n-    jedis = new Jedis(\"localhost\", ports.get(SERVER1), JEDIS_TIMEOUT);\n-  }\n-\n-  @After\n-  public void cleanupAfterTest() {\n-    jedis.flushAll();\n+    jedisConnetedToServer1 = new Jedis(\"localhost\", ports.get(SERVER1), JEDIS_TIMEOUT);\n   }\n \n   @AfterClass\n   public static void cleanupAfterClass() {\n-    jedis.disconnect();\n-  }\n-\n-  @Test\n-  public void should_beAbleToCreateASession_storedInRedis() {\n-    String sessionCookie = createNewSessionWithNote(APP1, \"note1\");\n-    String sessionId = getSessionId(sessionCookie);\n-\n-    Map<String, String> sessionInfo =\n-        jedis.hgetAll(\"spring:session:sessions:\" + sessionId);\n-\n-    assertThat(sessionInfo.get(\"sessionAttr:NOTES\")).contains(\"note1\");\n-  }\n-\n-  @Test\n-  public void should_storeSession() {\n-    String sessionCookie = createNewSessionWithNote(APP1, \"note1\");\n-\n-    String[] sessionNotes = getSessionNotes(APP2, sessionCookie);\n-\n-    assertThat(sessionNotes).containsExactly(\"note1\");\n-  }\n-\n-  @Test\n-  public void should_propagateSession_toOtherServers() {\n-    String sessionCookie = createNewSessionWithNote(APP1, \"noteFromClient1\");\n-\n-    String[] sessionNotes = getSessionNotes(APP2, sessionCookie);\n-\n-    assertThat(sessionNotes).containsExactly(\"noteFromClient1\");\n-  }\n-\n-  @Test\n-  public void should_getSessionFromServer1_whenServer2GoesDown() {\n-    String sessionCookie = createNewSessionWithNote(APP2, \"noteFromClient2\");\n-    cluster.crashVM(SERVER2);\n-    try {\n-      String[] sessionNotes = getSessionNotes(APP1, sessionCookie);\n-\n-      assertThat(sessionNotes).containsExactly(\"noteFromClient2\");\n-    } finally {\n-      startRedisServer(SERVER2);\n-    }\n-  }\n-\n-  @Test\n-  public void should_getSessionFromServer_whenServerGoesDownAndIsRestarted() {\n-    String sessionCookie = createNewSessionWithNote(APP2, \"noteFromClient2\");\n-    cluster.crashVM(SERVER2);\n-    addNoteToSession(APP1, sessionCookie);\n-    startRedisServer(SERVER2);\n-\n-    String[] sessionNotes = getSessionNotes(APP2, sessionCookie);\n-\n-    assertThat(sessionNotes).containsExactly(\"noteFromClient2\", \"noteFromClient1\");\n-  }\n-\n-  @Test\n-  public void should_getSession_whenServer2GoesDown_andAppFailsOverToServer1() {\n-    String sessionCookie = createNewSessionWithNote(APP2, \"noteFromClient2\");\n-    cluster.crashVM(SERVER2);\n-\n-    try {\n-      String[] sessionNotes = getSessionNotes(APP2, sessionCookie);\n-\n-      assertThat(sessionNotes).containsExactly(\"noteFromClient2\");\n-    } finally {\n-      startRedisServer(SERVER2);\n-    }\n-  }\n-\n-  @Test\n-  public void should_getSessionCreatedByApp2_whenApp2GoesDown_andClientConnectsToApp1() {\n-    String sessionCookie = createNewSessionWithNote(APP2, \"noteFromClient2\");\n+    jedisConnetedToServer1.disconnect();\n+    stopSpringApp(APP1);\n     stopSpringApp(APP2);\n+  }\n \n-    try {\n-      String[] sessionNotes = getSessionNotes(APP1, sessionCookie);\n-\n-      assertThat(sessionNotes).containsExactly(\"noteFromClient2\");\n-    } finally {\n-      startSpringApp(APP2, SERVER1, SERVER2);\n-    }\n-\n+  @After\n+  public void cleanupAfterTest() {\n+    jedisConnetedToServer1.flushAll();\n   }\n \n-  private static void startRedisServer(int server1) {\n+  protected static void startRedisServer(int server1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e2263ec3a1eb2a387e6c6dc487f13dc8b111133"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4MTA2NA==", "bodyText": "same as above: could this parameter could just be named \"server\"?", "url": "https://github.com/apache/geode/pull/5079#discussion_r424481064", "createdAt": "2020-05-13T14:26:46Z", "author": {"login": "sabbey37"}, "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/session/SessionDUnitTest.java", "diffHunk": "@@ -80,137 +84,62 @@ public static void setup() {\n     cluster.startLocatorVM(LOCATOR);\n     startRedisServer(SERVER1);\n     startRedisServer(SERVER2);\n-    startSpringApp(APP1, SERVER1, SERVER2);\n-    startSpringApp(APP2, SERVER2, SERVER1);\n \n-    jedis = new Jedis(\"localhost\", ports.get(SERVER1), JEDIS_TIMEOUT);\n-  }\n-\n-  @After\n-  public void cleanupAfterTest() {\n-    jedis.flushAll();\n+    jedisConnetedToServer1 = new Jedis(\"localhost\", ports.get(SERVER1), JEDIS_TIMEOUT);\n   }\n \n   @AfterClass\n   public static void cleanupAfterClass() {\n-    jedis.disconnect();\n-  }\n-\n-  @Test\n-  public void should_beAbleToCreateASession_storedInRedis() {\n-    String sessionCookie = createNewSessionWithNote(APP1, \"note1\");\n-    String sessionId = getSessionId(sessionCookie);\n-\n-    Map<String, String> sessionInfo =\n-        jedis.hgetAll(\"spring:session:sessions:\" + sessionId);\n-\n-    assertThat(sessionInfo.get(\"sessionAttr:NOTES\")).contains(\"note1\");\n-  }\n-\n-  @Test\n-  public void should_storeSession() {\n-    String sessionCookie = createNewSessionWithNote(APP1, \"note1\");\n-\n-    String[] sessionNotes = getSessionNotes(APP2, sessionCookie);\n-\n-    assertThat(sessionNotes).containsExactly(\"note1\");\n-  }\n-\n-  @Test\n-  public void should_propagateSession_toOtherServers() {\n-    String sessionCookie = createNewSessionWithNote(APP1, \"noteFromClient1\");\n-\n-    String[] sessionNotes = getSessionNotes(APP2, sessionCookie);\n-\n-    assertThat(sessionNotes).containsExactly(\"noteFromClient1\");\n-  }\n-\n-  @Test\n-  public void should_getSessionFromServer1_whenServer2GoesDown() {\n-    String sessionCookie = createNewSessionWithNote(APP2, \"noteFromClient2\");\n-    cluster.crashVM(SERVER2);\n-    try {\n-      String[] sessionNotes = getSessionNotes(APP1, sessionCookie);\n-\n-      assertThat(sessionNotes).containsExactly(\"noteFromClient2\");\n-    } finally {\n-      startRedisServer(SERVER2);\n-    }\n-  }\n-\n-  @Test\n-  public void should_getSessionFromServer_whenServerGoesDownAndIsRestarted() {\n-    String sessionCookie = createNewSessionWithNote(APP2, \"noteFromClient2\");\n-    cluster.crashVM(SERVER2);\n-    addNoteToSession(APP1, sessionCookie);\n-    startRedisServer(SERVER2);\n-\n-    String[] sessionNotes = getSessionNotes(APP2, sessionCookie);\n-\n-    assertThat(sessionNotes).containsExactly(\"noteFromClient2\", \"noteFromClient1\");\n-  }\n-\n-  @Test\n-  public void should_getSession_whenServer2GoesDown_andAppFailsOverToServer1() {\n-    String sessionCookie = createNewSessionWithNote(APP2, \"noteFromClient2\");\n-    cluster.crashVM(SERVER2);\n-\n-    try {\n-      String[] sessionNotes = getSessionNotes(APP2, sessionCookie);\n-\n-      assertThat(sessionNotes).containsExactly(\"noteFromClient2\");\n-    } finally {\n-      startRedisServer(SERVER2);\n-    }\n-  }\n-\n-  @Test\n-  public void should_getSessionCreatedByApp2_whenApp2GoesDown_andClientConnectsToApp1() {\n-    String sessionCookie = createNewSessionWithNote(APP2, \"noteFromClient2\");\n+    jedisConnetedToServer1.disconnect();\n+    stopSpringApp(APP1);\n     stopSpringApp(APP2);\n+  }\n \n-    try {\n-      String[] sessionNotes = getSessionNotes(APP1, sessionCookie);\n-\n-      assertThat(sessionNotes).containsExactly(\"noteFromClient2\");\n-    } finally {\n-      startSpringApp(APP2, SERVER1, SERVER2);\n-    }\n-\n+  @After\n+  public void cleanupAfterTest() {\n+    jedisConnetedToServer1.flushAll();\n   }\n \n-  private static void startRedisServer(int server1) {\n+  protected static void startRedisServer(int server1) {\n     cluster.startServerVM(server1, redisProperties(server1),\n         cluster.getMember(LOCATOR).getPort());\n+\n+    cluster.getVM(server1).invoke(\"Set logging level to DEBUG\", () -> {\n+      Logger logger = LogManager.getLogger(\"org.apache.geode.redis.internal\");\n+      Configurator.setAllLevels(logger.getName(), Level.getLevel(\"DEBUG\"));\n+      FastLogger.setDelegating(true);\n+    });\n   }\n \n   private static Properties redisProperties(int server2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e2263ec3a1eb2a387e6c6dc487f13dc8b111133"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ4NDQ3MA==", "bodyText": "It was an awesome idea to make this an abstract class!", "url": "https://github.com/apache/geode/pull/5079#discussion_r424484470", "createdAt": "2020-05-13T14:31:08Z", "author": {"login": "sabbey37"}, "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/session/SessionDUnitTest.java", "diffHunk": "@@ -40,33 +40,37 @@\n import redis.clients.jedis.Jedis;\n \n import org.apache.geode.internal.AvailablePortHelper;\n-import org.apache.geode.redis.springRedisTestApplication.RedisSpringTestApplication;\n+import org.apache.geode.logging.internal.log4j.api.FastLogger;\n+import org.apache.geode.redis.session.springRedisTestApplication.RedisSpringTestApplication;\n import org.apache.geode.test.awaitility.GeodeAwaitility;\n import org.apache.geode.test.dunit.VM;\n import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n import org.apache.geode.test.dunit.rules.DistributedRestoreSystemProperties;\n-import org.apache.geode.test.junit.categories.RedisTest;\n \n-@Category({RedisTest.class})\n-public class RedisSessionDistDUnitTest implements Serializable {\n+public abstract class SessionDUnitTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e2263ec3a1eb2a387e6c6dc487f13dc8b111133"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMTE1OTY4", "url": "https://github.com/apache/geode/pull/5079#pullrequestreview-411115968", "createdAt": "2020-05-13T16:50:53Z", "commit": {"oid": "8e2263ec3a1eb2a387e6c6dc487f13dc8b111133"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo1MDo1M1rOGU6s4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNjo1MDo1M1rOGU6s4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU4NjQ2NQ==", "bodyText": "Could this copy call and the release call two lines down be moved into getPrintableByteBuf? Or maybe this whole block should be moved to a method named \"logResponse(command)\". Seems like the \"release\" call should be in a \"finally\" block in case an exception is thrown.", "url": "https://github.com/apache/geode/pull/5079#discussion_r424586465", "createdAt": "2020-05-13T16:50:53Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/ExecutionHandlerContext.java", "diffHunk": "@@ -216,6 +217,13 @@ private void executeCommand(ChannelHandlerContext ctx, Command command) throws E\n         executeWithoutTransaction(command);\n       }\n \n+      if (logger.isDebugEnabled() && command.getResponse() != null) {\n+        ByteBuf response = command.getResponse()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e2263ec3a1eb2a387e6c6dc487f13dc8b111133"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07a8d3add5a9fdf4f9f6035a125718809ca46a07", "author": {"user": {"login": "jdeppe-pivotal", "name": "Jens Deppe"}}, "url": "https://github.com/apache/geode/commit/07a8d3add5a9fdf4f9f6035a125718809ca46a07", "committedDate": "2020-05-14T21:06:10Z", "message": "GEODE-8094: Create HA test to ensure Spring Boot sessions expire correctly\n\nCo-authored-by: Murtuza Boxwala <mboxwala@vmware.com>\nCo-authored-by: Raymond Ingles <ringles@vmware.com>\nCo-authored-by: Jens Deppe <jdeppe@vmware.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cba229072e3b68d85941705fb8f6dd7cbc471035", "author": {"user": {"login": "jdeppe-pivotal", "name": "Jens Deppe"}}, "url": "https://github.com/apache/geode/commit/cba229072e3b68d85941705fb8f6dd7cbc471035", "committedDate": "2020-05-14T21:06:10Z", "message": "Fix jetty-starter build problem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f0980ede60f0287e3123af611f2e809d0b52c72", "author": {"user": {"login": "jdeppe-pivotal", "name": "Jens Deppe"}}, "url": "https://github.com/apache/geode/commit/9f0980ede60f0287e3123af611f2e809d0b52c72", "committedDate": "2020-05-14T21:06:10Z", "message": "Disable test that needs proper implementation for expire\n\n- Enable debug logging just for the redis module\n\nCo-authored-by: Jens Deppe <jdeppe@vmware.com>\nCo-authored-by: Ray Ingles <ringles@vmware.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dcf7c4633fb050d66f2bbc1fc4bf849bd706d8f9", "author": {"user": {"login": "jdeppe-pivotal", "name": "Jens Deppe"}}, "url": "https://github.com/apache/geode/commit/dcf7c4633fb050d66f2bbc1fc4bf849bd706d8f9", "committedDate": "2020-05-14T21:06:10Z", "message": "Fix checkPom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad7997b2036304161fa76221c359390245de0e06", "author": {"user": {"login": "jdeppe-pivotal", "name": "Jens Deppe"}}, "url": "https://github.com/apache/geode/commit/ad7997b2036304161fa76221c359390245de0e06", "committedDate": "2020-05-14T21:06:10Z", "message": "Allow for different session timeouts across inherited classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cf1770cbd79a37afe998599d6e1fa40d0dad6fb", "author": {"user": {"login": "jdeppe-pivotal", "name": "Jens Deppe"}}, "url": "https://github.com/apache/geode/commit/5cf1770cbd79a37afe998599d6e1fa40d0dad6fb", "committedDate": "2020-05-14T21:06:10Z", "message": "Fix default session timeout"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "363b1bf5e47a170aaa6c189faa195b9c5bf749dd", "author": {"user": {"login": "jdeppe-pivotal", "name": "Jens Deppe"}}, "url": "https://github.com/apache/geode/commit/363b1bf5e47a170aaa6c189faa195b9c5bf749dd", "committedDate": "2020-05-14T21:06:10Z", "message": "Review updates"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e2263ec3a1eb2a387e6c6dc487f13dc8b111133", "author": {"user": {"login": "jdeppe-pivotal", "name": "Jens Deppe"}}, "url": "https://github.com/apache/geode/commit/8e2263ec3a1eb2a387e6c6dc487f13dc8b111133", "committedDate": "2020-05-12T00:08:32Z", "message": "Fix default session timeout"}, "afterCommit": {"oid": "363b1bf5e47a170aaa6c189faa195b9c5bf749dd", "author": {"user": {"login": "jdeppe-pivotal", "name": "Jens Deppe"}}, "url": "https://github.com/apache/geode/commit/363b1bf5e47a170aaa6c189faa195b9c5bf749dd", "committedDate": "2020-05-14T21:06:10Z", "message": "Review updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f08d1703b17689009ddff3a099d798fb2c97edf5", "author": {"user": {"login": "jdeppe-pivotal", "name": "Jens Deppe"}}, "url": "https://github.com/apache/geode/commit/f08d1703b17689009ddff3a099d798fb2c97edf5", "committedDate": "2020-05-14T21:09:20Z", "message": "More review changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNDA1Nzc2", "url": "https://github.com/apache/geode/pull/5079#pullrequestreview-412405776", "createdAt": "2020-05-15T07:23:27Z", "commit": {"oid": "f08d1703b17689009ddff3a099d798fb2c97edf5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4710, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}