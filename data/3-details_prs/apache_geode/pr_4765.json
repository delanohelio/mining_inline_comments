{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMjE5MDIz", "number": 4765, "title": "GEODE-7808: standardize on use of HostAndPort for creating connections", "bodyText": "The base commits for this PR have already been approved and passed PR checks.  This revision reverts the removal of the SocketCreator InetAddress->hostname cache as it severely impacted Benchmark performance in CI runs.  Removal of that cache wasn't part of the charter for this PR, and reinstating it has no impact on the standardization of use of HostAndPort for creating connections.\nI have not reverted a number of places that used SocketCreator to get the hostname for localhost.  Those all go to LocalHostUtil and access the same InetAddress, which will have a cached hostname and won't affect performance.\nI've run Benchmark tests against the impacted tests on this branch and results show that performance is no longer affected.\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-03-03T22:22:11Z", "url": "https://github.com/apache/geode/pull/4765", "merged": true, "mergeCommit": {"oid": "5c2b959e98a6330ecaeddb4d26e11ea29f7a2d7f"}, "closed": true, "closedAt": "2020-03-04T21:06:56Z", "author": {"login": "bschuchardt"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcIlEmHgH2gAyMzgzMjE5MDIzOjJmN2E4MjUwNDI3ODFjMTY3MzkwZjgwNWQzYWExNWI1OTk5MmU3MjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKa2TNAFqTM2OTAwMDEzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2f7a825042781c167390f805d3aa15b59992e723", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/2f7a825042781c167390f805d3aa15b59992e723", "committedDate": "2020-02-28T00:48:59Z", "message": "Squashed merge of feature/GEODE-7808\n\nremoved HostAddress\nrenamed LocatorAddress to HostAndPort\nmodified TcpClient methods to take a HostAndPort argument instead of\nInetAddress\nmodified SocketCreator to take a HostAndPort argument instead of\nInetAddress"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccab59dad5789bb77139209eeb313600f88ea6f2", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/ccab59dad5789bb77139209eeb313600f88ea6f2", "committedDate": "2020-02-28T00:49:50Z", "message": "GEODE-7808 - standardize on use of HostAndPort for connection formation\n\nThis continues a previous PR that passed and was approved for merge.\nThis commit raises up several methods from SocketCreator into the\nTcpSocketCreator interface.  This is an intermediate commit.  A\nsubsequent commit will refactor TcpSocketCreator to separate the client\nand server methods for creating server-sockets and client connections to\nserver-sockets."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5add2691a27de08d76688949c32d9e7ac129e16a", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/5add2691a27de08d76688949c32d9e7ac129e16a", "committedDate": "2020-02-28T00:49:50Z", "message": "refactored socket-creators to separate concerns\n\nServerSocketCreator holds methods for non-client comms\nClientSocketCreator holds methods that clients should use for comms\nAdvancedSocketCreator holds methods for people who need to get around\nthe limitations of the other two interfaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7074e333f5cf3ec73c6b727a260f28237462eb5", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/e7074e333f5cf3ec73c6b727a260f28237462eb5", "committedDate": "2020-02-28T16:50:10Z", "message": "adding missing interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e182126559239b8ca65859a91f82c4c2499503e", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/4e182126559239b8ca65859a91f82c4c2499503e", "committedDate": "2020-02-28T18:06:51Z", "message": "move code out of inner-classes into first-class classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce9ef7c361829bbee2a37e6935c131dcb776c320", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/ce9ef7c361829bbee2a37e6935c131dcb776c320", "committedDate": "2020-03-02T19:21:19Z", "message": "renaming interfaces and methods to be less confusing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a46d2e144f5344c422552f6675b1e9d287482aaf", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/a46d2e144f5344c422552f6675b1e9d287482aaf", "committedDate": "2020-03-03T21:46:43Z", "message": "reinstate SocketCreator ip to hostname cache for performance"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4Mzg4OTQw", "url": "https://github.com/apache/geode/pull/4765#pullrequestreview-368388940", "createdAt": "2020-03-03T22:59:19Z", "commit": {"oid": "a46d2e144f5344c422552f6675b1e9d287482aaf"}, "state": "APPROVED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMjo1OToxOVrOFxZvjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMzozNzowNFrOFxajAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0NjMxOQ==", "bodyText": "is this name a recursive acronym?", "url": "https://github.com/apache/geode/pull/4765#discussion_r387346319", "createdAt": "2020-03-03T22:59:19Z", "author": {"login": "echobravopapa"}, "path": "geode-core/src/main/java/org/apache/geode/internal/net/SCAdvancedSocketCreator.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.net;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+\n+import javax.net.SocketFactory;\n+\n+import org.apache.geode.GemFireConfigException;\n+import org.apache.geode.SystemConnectException;\n+import org.apache.geode.distributed.internal.tcpserver.AdvancedSocketCreatorImpl;\n+import org.apache.geode.distributed.internal.tcpserver.ConnectionWatcher;\n+import org.apache.geode.distributed.internal.tcpserver.HostAndPort;\n+\n+class SCAdvancedSocketCreator extends AdvancedSocketCreatorImpl {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d2e144f5344c422552f6675b1e9d287482aaf"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0NzAxMQ==", "bodyText": "the SC prefix is clearly a convention, but what does it stand for?", "url": "https://github.com/apache/geode/pull/4765#discussion_r387347011", "createdAt": "2020-03-03T23:00:59Z", "author": {"login": "echobravopapa"}, "path": "geode-core/src/main/java/org/apache/geode/internal/net/SCClientSocketCreator.java", "diffHunk": "@@ -12,16 +12,24 @@\n  * or implied. See the License for the specific language governing permissions and limitations under\n  * the License.\n  */\n-package org.apache.geode.distributed.internal.membership.gms.membership;\n+package org.apache.geode.internal.net;\n \n-import java.net.InetSocketAddress;\n+import java.io.IOException;\n+import java.net.Socket;\n \n-import org.apache.geode.distributed.internal.tcpserver.LocatorAddress;\n+import org.apache.geode.distributed.internal.tcpserver.ClientSocketCreatorImpl;\n \n-public class HostAddress extends LocatorAddress {\n+class SCClientSocketCreator extends ClientSocketCreatorImpl {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d2e144f5344c422552f6675b1e9d287482aaf"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM0OTI1OQ==", "bodyText": "an aside,  SINGLETON sticks out - but doesn't seem to be the kind of singleton we want to be rid of....", "url": "https://github.com/apache/geode/pull/4765#discussion_r387349259", "createdAt": "2020-03-03T23:07:06Z", "author": {"login": "echobravopapa"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/JmxManagerLocatorRequest.java", "diffHunk": "@@ -87,7 +84,8 @@ public static JmxManagerLocatorResponse send(String locatorHost, int locatorPort\n     TcpClient client = new TcpClient(socketCreator,\n         InternalDataSerializer.getDSFIDSerializer().getObjectSerializer(),\n         InternalDataSerializer.getDSFIDSerializer().getObjectDeserializer());\n-    Object responseFromServer = client.requestToServer(inetSockAddr, SINGLETON, msTimeout, true);\n+    Object responseFromServer = client.requestToServer(new HostAndPort(locatorHost, locatorPort),\n+        SINGLETON, msTimeout, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d2e144f5344c422552f6675b1e9d287482aaf"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1ODAxOQ==", "bodyText": "I know it was existing, but add could just be address... a nit I know", "url": "https://github.com/apache/geode/pull/4765#discussion_r387358019", "createdAt": "2020-03-03T23:32:36Z", "author": {"login": "echobravopapa"}, "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/MemberIdentifierImpl.java", "diffHunk": "@@ -436,9 +436,9 @@ public void addFixedToString(StringBuilder sb, boolean useIpAddress) {\n     String host;\n \n     InetAddress add = getInetAddress();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d2e144f5344c422552f6675b1e9d287482aaf"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1ODY3Ng==", "bodyText": "I really like the clarity here!!!", "url": "https://github.com/apache/geode/pull/4765#discussion_r387358676", "createdAt": "2020-03-03T23:34:37Z", "author": {"login": "echobravopapa"}, "path": "geode-tcp-server/src/main/java/org/apache/geode/distributed/internal/tcpserver/TcpSocketCreator.java", "diffHunk": "@@ -15,34 +15,24 @@\n \n package org.apache.geode.distributed.internal.tcpserver;\n \n-import java.io.IOException;\n-import java.net.InetAddress;\n-import java.net.ServerSocket;\n-import java.net.Socket;\n \n \n /**\n  * Create sockets for TcpServer (and TcpClient).\n  */\n public interface TcpSocketCreator {\n-  boolean useSSL();\n-\n-  ServerSocket createServerSocket(int nport, int backlog) throws IOException;\n-\n-  ServerSocket createServerSocket(int nport, int backlog, InetAddress bindAddr)\n-      throws IOException;\n-\n-  ServerSocket createServerSocketUsingPortRange(InetAddress ba, int backlog,\n-      boolean isBindAddress, boolean useNIO, int tcpBufferSize, int[] tcpPortRange,\n-      boolean sslConnection) throws IOException;\n-\n-  Socket connect(InetAddress inetadd, int port, int timeout,\n-      ConnectionWatcher optionalWatcher, boolean clientSide) throws IOException;\n-\n-  Socket connect(InetAddress inetadd, int port, int timeout,\n-      ConnectionWatcher optionalWatcher, boolean clientSide, int socketBufferSize,\n-      boolean sslConnection) throws IOException;\n-\n-  void handshakeIfSocketIsSSL(Socket socket, int timeout) throws IOException;\n-\n+  /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d2e144f5344c422552f6675b1e9d287482aaf"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM1OTQ5MQ==", "bodyText": "we might want to expunge this literal bug number and replace with the issue/feature, if that's not what the rest of comment is already doing...", "url": "https://github.com/apache/geode/pull/4765#discussion_r387359491", "createdAt": "2020-03-03T23:37:04Z", "author": {"login": "echobravopapa"}, "path": "geode-tcp-server/src/main/java/org/apache/geode/distributed/internal/tcpserver/AdvancedSocketCreatorImpl.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.distributed.internal.tcpserver;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.nio.channels.ServerSocketChannel;\n+import java.util.concurrent.ThreadLocalRandom;\n+\n+import org.apache.geode.util.internal.GeodeGlossary;\n+\n+public class AdvancedSocketCreatorImpl implements AdvancedSocketCreator {\n+\n+  public static final boolean ENABLE_TCP_KEEP_ALIVE;\n+\n+  static {\n+    // bug #49484 - customers want tcp/ip keep-alive turned on by default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d2e144f5344c422552f6675b1e9d287482aaf"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4NDMxMTI2", "url": "https://github.com/apache/geode/pull/4765#pullrequestreview-368431126", "createdAt": "2020-03-04T00:50:19Z", "commit": {"oid": "a46d2e144f5344c422552f6675b1e9d287482aaf"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDo1MDoyMFrOFxb8FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwMDo1MzoyN1rOFxb_wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MjI5Mg==", "bodyText": "I don't see this method called anywhere. Is this dead code?", "url": "https://github.com/apache/geode/pull/4765#discussion_r387382292", "createdAt": "2020-03-04T00:50:20Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/internal/net/SocketCreator.java", "diffHunk": "@@ -149,6 +153,41 @@ public static InetAddress getLocalHost() throws UnknownHostException {\n     return LocalHostUtil.getLocalHost();\n   }\n \n+\n+  /**\n+   * returns the host name for the given inet address, using a local cache of names to avoid dns\n+   * hits and duplicate strings\n+   */\n+  public static String getHostName(InetAddress addr) {\n+    String result = hostNames.get(addr);\n+    if (result == null) {\n+      result = addr.getHostName();\n+      hostNames.put(addr, result);\n+    }\n+    return result;\n+  }\n+\n+  /**\n+   * returns the host name for the given inet address, using a local cache of names to avoid dns\n+   * hits and duplicate strings\n+   */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d2e144f5344c422552f6675b1e9d287482aaf"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4Mjk0Mw==", "bodyText": "Ah ok I see we're calling getHostString() to avoid reverse-lookup if an address was originally specified (instead of a hostname/FQDN).", "url": "https://github.com/apache/geode/pull/4765#discussion_r387382943", "createdAt": "2020-03-04T00:52:30Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/cache/client/internal/ExplicitConnectionSourceImpl.java", "diffHunk": "@@ -61,7 +61,7 @@\n   ExplicitConnectionSourceImpl(List<InetSocketAddress> contacts) {\n     ArrayList<ServerLocation> serverList = new ArrayList<>(contacts.size());\n     for (InetSocketAddress addr : contacts) {\n-      serverList.add(new ServerLocation(addr.getHostName(), addr.getPort()));\n+      serverList.add(new ServerLocation(addr.getHostString(), addr.getPort()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d2e144f5344c422552f6675b1e9d287482aaf"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzM4MzIzMw==", "bodyText": "\u2026and this call (to SocketCreator.getHostName()) is ok because the reverse lookup is cached, right?", "url": "https://github.com/apache/geode/pull/4765#discussion_r387383233", "createdAt": "2020-03-04T00:53:27Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/membership/InternalDistributedMember.java", "diffHunk": "@@ -100,7 +100,7 @@ public InternalDistributedMember(InetAddress i, int membershipPort, boolean spli\n   }\n \n   private static String getHostName(InetAddress i) {\n-    return SocketCreator.resolve_dns ? i.getHostName() : i.getHostAddress();\n+    return SocketCreator.resolve_dns ? SocketCreator.getHostName(i) : i.getHostAddress();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a46d2e144f5344c422552f6675b1e9d287482aaf"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2db3826cadd3cfa4438d5f20092ea9b34bd8cff", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/e2db3826cadd3cfa4438d5f20092ea9b34bd8cff", "committedDate": "2020-03-04T16:27:47Z", "message": "changes from review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4OTk1NTk2", "url": "https://github.com/apache/geode/pull/4765#pullrequestreview-368995596", "createdAt": "2020-03-04T17:55:30Z", "commit": {"oid": "e2db3826cadd3cfa4438d5f20092ea9b34bd8cff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzo1NTozMFrOFx3jQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNzo1NTozMFrOFx3jQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzNDY5MQ==", "bodyText": "getSocketInetAddress() will try to resolve the hostname stored in addr, by constructing an InetSocketAddress from the hostname and port. Address resolution boils down to utimately calling InetAddress.getByName(hostname)", "url": "https://github.com/apache/geode/pull/4765#discussion_r387834691", "createdAt": "2020-03-04T17:55:30Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/internal/net/SCAdvancedSocketCreator.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.net;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+\n+import javax.net.SocketFactory;\n+\n+import org.apache.geode.GemFireConfigException;\n+import org.apache.geode.SystemConnectException;\n+import org.apache.geode.distributed.internal.tcpserver.AdvancedSocketCreatorImpl;\n+import org.apache.geode.distributed.internal.tcpserver.ConnectionWatcher;\n+import org.apache.geode.distributed.internal.tcpserver.HostAndPort;\n+\n+class SCAdvancedSocketCreator extends AdvancedSocketCreatorImpl {\n+  final SocketCreator coreSocketCreator;\n+\n+  protected SCAdvancedSocketCreator(SocketCreator socketCreator) {\n+    super(socketCreator);\n+    coreSocketCreator = socketCreator;\n+  }\n+\n+  @Override\n+  public void handshakeIfSocketIsSSL(Socket socket, int timeout) throws IOException {\n+    coreSocketCreator.handshakeIfSocketIsSSL(socket, timeout);\n+  }\n+\n+  @Override\n+  public Socket connect(HostAndPort addr, int timeout,\n+      ConnectionWatcher optionalWatcher, boolean allowClientSocketFactory, int socketBufferSize,\n+      boolean useSSL) throws IOException {\n+\n+    coreSocketCreator.printConfig();\n+\n+    if (!useSSL) {\n+      return super.connect(addr, timeout, optionalWatcher, allowClientSocketFactory,\n+          socketBufferSize,\n+          useSSL);\n+    }\n+\n+    // create an SSL connection\n+\n+    Socket socket;\n+    InetSocketAddress sockaddr = addr.getSocketInetAddress();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2db3826cadd3cfa4438d5f20092ea9b34bd8cff"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5MDAwMTM2", "url": "https://github.com/apache/geode/pull/4765#pullrequestreview-369000136", "createdAt": "2020-03-04T18:02:10Z", "commit": {"oid": "e2db3826cadd3cfa4438d5f20092ea9b34bd8cff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODowMjoxMFrOFx3xRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODowMjoxMFrOFx3xRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzgzODI3Nw==", "bodyText": "\u2026then, if address resolution failed, we try InetAddress.getByName() again. With the exact same hostname.\nTwo things:\n\nI don't see how this second address resolution will ever work if the first one failed (barring some rare race with DNS data)\nIn the case where we enter the conditional at line 61, we end up with sockaddr referring to an InetSocketAddress that has a null address and no hostname at all. Wheres if we do not enter the conditional sockaddr refers to an InetSocketAddress that has both hostname and port.\n\nShould we remove this conditional entirely?", "url": "https://github.com/apache/geode/pull/4765#discussion_r387838277", "createdAt": "2020-03-04T18:02:10Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/internal/net/SCAdvancedSocketCreator.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.net;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+\n+import javax.net.SocketFactory;\n+\n+import org.apache.geode.GemFireConfigException;\n+import org.apache.geode.SystemConnectException;\n+import org.apache.geode.distributed.internal.tcpserver.AdvancedSocketCreatorImpl;\n+import org.apache.geode.distributed.internal.tcpserver.ConnectionWatcher;\n+import org.apache.geode.distributed.internal.tcpserver.HostAndPort;\n+\n+class SCAdvancedSocketCreator extends AdvancedSocketCreatorImpl {\n+  final SocketCreator coreSocketCreator;\n+\n+  protected SCAdvancedSocketCreator(SocketCreator socketCreator) {\n+    super(socketCreator);\n+    coreSocketCreator = socketCreator;\n+  }\n+\n+  @Override\n+  public void handshakeIfSocketIsSSL(Socket socket, int timeout) throws IOException {\n+    coreSocketCreator.handshakeIfSocketIsSSL(socket, timeout);\n+  }\n+\n+  @Override\n+  public Socket connect(HostAndPort addr, int timeout,\n+      ConnectionWatcher optionalWatcher, boolean allowClientSocketFactory, int socketBufferSize,\n+      boolean useSSL) throws IOException {\n+\n+    coreSocketCreator.printConfig();\n+\n+    if (!useSSL) {\n+      return super.connect(addr, timeout, optionalWatcher, allowClientSocketFactory,\n+          socketBufferSize,\n+          useSSL);\n+    }\n+\n+    // create an SSL connection\n+\n+    Socket socket;\n+    InetSocketAddress sockaddr = addr.getSocketInetAddress();\n+    if (sockaddr.getAddress() == null) {\n+      InetAddress address = InetAddress.getByName(sockaddr.getHostString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2db3826cadd3cfa4438d5f20092ea9b34bd8cff"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4990, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}