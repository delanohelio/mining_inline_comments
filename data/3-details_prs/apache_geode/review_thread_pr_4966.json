{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0MDQ5MDg2", "number": 4966, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjozMDoxN1rODzEDog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjozMTozMVrODzEEWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODcwNDM0OnYy", "diffSide": "RIGHT", "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/security/OAuthClientConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjozMDoxN1rOGHe6vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjozOToyNVrOGHfEQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5OTc3Mg==", "bodyText": "Any particular reason we move this out of the OauthSecurityConfig?", "url": "https://github.com/apache/geode/pull/4966#discussion_r410499772", "createdAt": "2020-04-17T22:30:17Z", "author": {"login": "jinmeiliao"}, "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/security/OAuthClientConfig.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse.internal.security;\n+\n+import static java.util.Collections.singletonMap;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.oidc.web.logout.OidcClientInitiatedLogoutSuccessHandler;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+\n+/**\n+ * Configures Pulse to use the OAuth 2 provider defined by properties in {@code pulse.properties}.\n+ */\n+@Configuration\n+@Profile(\"pulse.authentication.oauth\")\n+@PropertySource(\"classpath:pulse.properties\")\n+public class OAuthClientConfig {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "410ffcadf5dbbdccb9fadb7cdcbeba592e6cd092"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMjIxMA==", "bodyText": "Yes: To break a dependency cycle. For details, see the commit message.", "url": "https://github.com/apache/geode/pull/4966#discussion_r410502210", "createdAt": "2020-04-17T22:39:25Z", "author": {"login": "demery-pivotal"}, "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/security/OAuthClientConfig.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse.internal.security;\n+\n+import static java.util.Collections.singletonMap;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.oidc.web.logout.OidcClientInitiatedLogoutSuccessHandler;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+\n+/**\n+ * Configures Pulse to use the OAuth 2 provider defined by properties in {@code pulse.properties}.\n+ */\n+@Configuration\n+@Profile(\"pulse.authentication.oauth\")\n+@PropertySource(\"classpath:pulse.properties\")\n+public class OAuthClientConfig {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDQ5OTc3Mg=="}, "originalCommit": {"oid": "410ffcadf5dbbdccb9fadb7cdcbeba592e6cd092"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0ODcwNjE3OnYy", "diffSide": "RIGHT", "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/security/OAuthClientConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMjozMTozMVrOGHe76A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QyMzowMDozMFrOGHfYUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMDA3Mg==", "bodyText": "Is this \"end_session_endpoint\" provider specific? i.e. it's a strictly UAA thing or others have that as well? Can it be null?", "url": "https://github.com/apache/geode/pull/4966#discussion_r410500072", "createdAt": "2020-04-17T22:31:31Z", "author": {"login": "jinmeiliao"}, "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/security/OAuthClientConfig.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse.internal.security;\n+\n+import static java.util.Collections.singletonMap;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.oidc.web.logout.OidcClientInitiatedLogoutSuccessHandler;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+\n+/**\n+ * Configures Pulse to use the OAuth 2 provider defined by properties in {@code pulse.properties}.\n+ */\n+@Configuration\n+@Profile(\"pulse.authentication.oauth\")\n+@PropertySource(\"classpath:pulse.properties\")\n+public class OAuthClientConfig {\n+  @Value(\"${pulse.oauth.providerId}\")\n+  private String providerId;\n+  @Value(\"${pulse.oauth.providerName}\")\n+  private String providerName;\n+  @Value(\"${pulse.oauth.clientId}\")\n+  private String clientId;\n+  @Value(\"${pulse.oauth.clientSecret}\")\n+  private String clientSecret;\n+  @Value(\"${pulse.oauth.authorizationUri}\")\n+  private String authorizationUri;\n+  @Value(\"${pulse.oauth.tokenUri}\")\n+  private String tokenUri;\n+  @Value(\"${pulse.oauth.userInfoUri}\")\n+  private String userInfoUri;\n+  @Value(\"${pulse.oauth.jwkSetUri}\")\n+  private String jwkSetUri;\n+  @Value(\"${pulse.oauth.endSessionEndpoint}\")\n+  private String endSessionEndpoint;\n+  @Value(\"${pulse.oauth.userNameAttributeName}\")\n+  private String userNameAttributeName;\n+\n+  @Bean\n+  ClientRegistration clientRegistration() {\n+    return ClientRegistration.withRegistrationId(providerId)\n+        .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\n+        .redirectUriTemplate(\"{baseUrl}/login/oauth2/code/{registrationId}\")\n+        .clientId(clientId)\n+        .clientSecret(clientSecret)\n+        .scope(\"openid\", \"CLUSTER:READ\", \"CLUSTER:WRITE\", \"DATA:READ\", \"DATA:WRITE\")\n+        .authorizationUri(authorizationUri)\n+        .tokenUri(tokenUri)\n+        .userInfoUri(userInfoUri)\n+        .jwkSetUri(jwkSetUri)\n+        .providerConfigurationMetadata(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "410ffcadf5dbbdccb9fadb7cdcbeba592e6cd092"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwNzM0Nw==", "bodyText": "That's defined by a draft standard: https://openid.net/specs/openid-connect-session-1_0.html\nAs far as I can tell, that standard has never been approved, though some OpenID Connect providers do implement it. See for example this Okta documentation: https://developer.okta.com/docs/reference/api/oidc/#well-known-openid-configuration\nThe sad thing is that UAA does not implement it. But redirecting to UAA's \"profile\" page has a similar effect. Not exactly what that draft standard defines, but similar.\nWith the current commit, if you leave the property undefined, Spring assigns the property value expression (\"${pulse.oauth.userNameAttributeName}\") to the field, and the logout success handler fails on logout.\nWe did not try supplying null. I'll run a few experiments now. I think the logout success handler will simply skip the \"end session\" endpoint, and go straight to the \"logout success\" URL (which we will need to define if we allow the end session endpoint to be null).", "url": "https://github.com/apache/geode/pull/4966#discussion_r410507347", "createdAt": "2020-04-17T23:00:30Z", "author": {"login": "demery-pivotal"}, "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/security/OAuthClientConfig.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse.internal.security;\n+\n+import static java.util.Collections.singletonMap;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.oidc.web.logout.OidcClientInitiatedLogoutSuccessHandler;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+\n+/**\n+ * Configures Pulse to use the OAuth 2 provider defined by properties in {@code pulse.properties}.\n+ */\n+@Configuration\n+@Profile(\"pulse.authentication.oauth\")\n+@PropertySource(\"classpath:pulse.properties\")\n+public class OAuthClientConfig {\n+  @Value(\"${pulse.oauth.providerId}\")\n+  private String providerId;\n+  @Value(\"${pulse.oauth.providerName}\")\n+  private String providerName;\n+  @Value(\"${pulse.oauth.clientId}\")\n+  private String clientId;\n+  @Value(\"${pulse.oauth.clientSecret}\")\n+  private String clientSecret;\n+  @Value(\"${pulse.oauth.authorizationUri}\")\n+  private String authorizationUri;\n+  @Value(\"${pulse.oauth.tokenUri}\")\n+  private String tokenUri;\n+  @Value(\"${pulse.oauth.userInfoUri}\")\n+  private String userInfoUri;\n+  @Value(\"${pulse.oauth.jwkSetUri}\")\n+  private String jwkSetUri;\n+  @Value(\"${pulse.oauth.endSessionEndpoint}\")\n+  private String endSessionEndpoint;\n+  @Value(\"${pulse.oauth.userNameAttributeName}\")\n+  private String userNameAttributeName;\n+\n+  @Bean\n+  ClientRegistration clientRegistration() {\n+    return ClientRegistration.withRegistrationId(providerId)\n+        .authorizationGrantType(AuthorizationGrantType.AUTHORIZATION_CODE)\n+        .redirectUriTemplate(\"{baseUrl}/login/oauth2/code/{registrationId}\")\n+        .clientId(clientId)\n+        .clientSecret(clientSecret)\n+        .scope(\"openid\", \"CLUSTER:READ\", \"CLUSTER:WRITE\", \"DATA:READ\", \"DATA:WRITE\")\n+        .authorizationUri(authorizationUri)\n+        .tokenUri(tokenUri)\n+        .userInfoUri(userInfoUri)\n+        .jwkSetUri(jwkSetUri)\n+        .providerConfigurationMetadata(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDUwMDA3Mg=="}, "originalCommit": {"oid": "410ffcadf5dbbdccb9fadb7cdcbeba592e6cd092"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4328, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}