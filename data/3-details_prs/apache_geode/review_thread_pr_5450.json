{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3MDExNzIy", "number": 5450, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo0Njo1OVrOEYHRGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo0OToyOVrOEYHVoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzIwMzQ0OnYy", "diffSide": "RIGHT", "path": "geode-redis/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo0Njo1OVrOHARlAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNjoyNzozNVrOHATIOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1MDA1MQ==", "bodyText": "Should we say something here about the version of redis they should use and how to get the redis-cli installed?", "url": "https://github.com/apache/geode/pull/5450#discussion_r470050051", "createdAt": "2020-08-13T15:46:59Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/README.md", "diffHunk": "@@ -1,78 +1,302 @@\n-# Geode Redis Module\n-\n-## Contents\n-1. [Overview](#overview)\n-2. [Performance Test Scripts](#performance-test)\n-\n-## <a name=\"overview\"></a>Overview\n-\n-The [Redis API for Geode](https://geode.apache.org/docs/guide/12/tools_modules/redis_api_for_geode.html) allows \n-Geode to function as a drop-in replacement for a Redis data store, letting Redis applications \n-take advantage of Geode\u2019s scaling capabilities without changing their client code. Redis clients \n-connect to a Geode server in the same way they connect to a Redis server, using a hostname and a \n-port number.\n-\n-## <a name=\"performance-test\"></a>Performance Test Scripts\n-\n-###The `benchmark.sh` Script\n-To run the performance tests, use the `benchmark.sh` script located in the \n-`geode-redis/src/performanceTest` directory.  This script uses the `redis-benchmark` command to\n-measure performance of various Redis commands in requests per second. It runs the commands in two\n-different ways. First it runs several clients in parallel, all testing the same command. Then it\n-runs all the commands together in parallel, crudely simulating a variety of simultaneous operations.\n-\n-Optional command line arguments for `benchmark.sh`:\n-- `-h` indicates the host to connect to (default: `localhost`)\n-- `-p` indicates the port to connect to (default: `6379`)\n-- `-t` indicates the number of times the `redis-benchmark` command will run (default: `10`)\n-- `-c` indicates the number of times the individual commands will run (default: `100000`)\n-- `-f` indicates an optional prefix for the summary file name\n-\n-The script will output a CSV file called `[optional prefix_]benchmark_summary.csv` which can be\n-easily loaded into any spreadsheet program for analysis.\n-\n-Sample output:\n-```csv\n-Command,Fastest Response Time (Msec),95th-99th Percentile (Msec),Slowest Response Time (Msec),Avg Requests Per Second\n-SET,1,8,43,13329\n-GET,1,4,15,17842\n-INCR,1,5,29,16069\n-MSET,1,7,732,11183\n-Parallel-SET,1,4,20,18460\n-Parallel-GET,1,4,21,18291\n-Parallel-INCR,1,4,20,18271\n-Parallel-MSET,1,4,21,17771\n-```\n+# Redis API for Apache Geode\n+\n+[Introduction](#introduction)  \n+[How To Try It](#how-to-try-it)  \n+[Building Apache Geode](#building-apache-geode)  \n+[Starting a Geode Server with Redis Enabled](#starting-a-server)  \n+[Adding an Additional Geode Redis Server](#adding-a-server)  \n+[Shutting Down](#shutting-down)  \n+[Redis Commands](#redis-commands)  \n+\n+## <a name=\"introduction\"></a>Introduction\n+\n+The Redis API for Geode allow an application to send Redis commands to Geode. This will allow users to \n+switch seamlessly from native Redis to Geode as a data store/caching solution. \n+\n+The API allows Geode to listen for and interpret incoming Redis commands on a designated port.  The \n+current set of supported Redis commands are listed [here](#redis-commands). \n+\n+## <a name=\"how-to-try-it\"></a>How To Try It\n+\n+We\u2019ll build the develop branch of Apache Geode and then connect the Redis-CLI to that instance. Once \n+we have established that the Redis APIs are available, we\u2019ll connect a Spring Session Data Redis \n+application.\n+\n+### <a name=\"building-apache-geode\"></a>Building Apache Geode\n+The Apache Geode source code can be found here\n+\n+1. In a terminal, git clone the Geode repo:\n+    ```commandline\n+    $ git clone https://github.com/apache/geode.git\n+    ```\n+\n+2. Change the working directory to the Geode directory you cloned\n+\t```commandline\n+\t$ cd geode\n+    ```\n+\n+3. Build the Geode application without running the test (REQUIRES JAVA 8)\n+    ```commandline\n+    $ ./gradlew build -x test\n+   ```\n+\n+4. Once the build has completed, navigate to the geode-assembly directory which contains the Apache \n+    Geode Shell - also referred to as GFSH:\n+    ```commandline\n+    $ cd geode-assembly/build/install/apache-geode/bin\n+   ```\n \n-###Benchmark Helper Scripts\n-The `benchmark.sh` script uses several helper scripts. The `execute-operation.sh` script runs a\n-particular instance of `redis-benchmark`. The `summarize-operation-results.sh` script processes the\n-output of `execute-operation.sh`, and the `summarize-batch-results.sh` script processes the output\n-of multiple runs of `summarize-operation-results.sh`.\n+5. Once in that folder run the following command:\n+    ```commandline\n+   $ ./gfsh\n+   ```\n \n-###The `environment-setup.sh` Script\n-The `environment-setup.sh` is optional. It can start a local Geode Redis Adapter, or confirm that a\n-local Redis server is running, then call `benchmark.sh`.\n+You should now see GFSH starting up with a version of 1.14.x.-build.x\n \n-Mandatory command line arguments for `environment-setup.sh`:\n-- either `-g` or `-r`\n+![screenshot of GFSH running in the terminal](gfsh.png)\n \n-`-g` will:\n-- Start a local Geode Redis Server for you\n-- Shut the server down once the benchmark finishes\n+### <a name=\"starting-a-server\"></a>Starting a Geode Server with Redis Enabled\n+Using GFSH enter the following commands:\n \n-`-r` will:\n-- Connect to a Redis server that is already running\n+1. Start a locator. The locator tracks servers and server load. When a client requests a server \n+connection, the locator directs the client to one of the least loaded servers. Learn more. \n+   ```commandline\n+    gfsh> start locator\n+    ``` \n \n-Optional command line arguments for `environment-setup.sh`:\n-- `-f` indicates an optional prefix for the summary file name that will be passed to `benchmark.sh`\n+2. After the locator has started, start a server that will be able to handle incoming Redis commands. \n \n-###The `shacompare.sh` Script\n-The `shacompare.sh` script is used to compare performance between different commits. This script\n-takes in two different commit hashes, checks them out, uses `environment-setup.sh` script to start\n-up the Geode Redis server, and runs the benchmarks for each commit. It generates two summary CSV\n-files, labeled with the short commit hash, that can be compared for performance changes.\n+    For example:\n+    ```commandline\n+    gfsh> start server --name=redisServer1 --locators=localhost[10334] --server-port=0 --redis-port=6379 --redis-bind-address=127.0.0.1\n+    ```\n+    * --name: A name you create for your server.\n+    * --locators: This is the location of the locator you started in step 1. \n+    * --server-port: The port that Geode clients connect to.\n+    * --redis-port: The port that your Redis client will connect to.\n+    * --redis-bind-address: This will be the address your client uses to connect. \n+\n+    Your Geode instance should now be up and running (1 locator and 1 server) and ready to accept Redis \n+    commands.  \n+\n+    **Keep this terminal open and running so that you can easily shutdown the Geode instance when you are \n+    done working locally.**\n+\n+3. To confirm that things are running correctly, in a separate terminal run:\n+      ```commandline", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcd7727d03f81e06a86b3a2e4275b45dd14e5fe9"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA3NTQ0OQ==", "bodyText": "I added a subtle version mention to the intro paragraph, let me know what you think!", "url": "https://github.com/apache/geode/pull/5450#discussion_r470075449", "createdAt": "2020-08-13T16:27:35Z", "author": {"login": "sabbey37"}, "path": "geode-redis/README.md", "diffHunk": "@@ -1,78 +1,302 @@\n-# Geode Redis Module\n-\n-## Contents\n-1. [Overview](#overview)\n-2. [Performance Test Scripts](#performance-test)\n-\n-## <a name=\"overview\"></a>Overview\n-\n-The [Redis API for Geode](https://geode.apache.org/docs/guide/12/tools_modules/redis_api_for_geode.html) allows \n-Geode to function as a drop-in replacement for a Redis data store, letting Redis applications \n-take advantage of Geode\u2019s scaling capabilities without changing their client code. Redis clients \n-connect to a Geode server in the same way they connect to a Redis server, using a hostname and a \n-port number.\n-\n-## <a name=\"performance-test\"></a>Performance Test Scripts\n-\n-###The `benchmark.sh` Script\n-To run the performance tests, use the `benchmark.sh` script located in the \n-`geode-redis/src/performanceTest` directory.  This script uses the `redis-benchmark` command to\n-measure performance of various Redis commands in requests per second. It runs the commands in two\n-different ways. First it runs several clients in parallel, all testing the same command. Then it\n-runs all the commands together in parallel, crudely simulating a variety of simultaneous operations.\n-\n-Optional command line arguments for `benchmark.sh`:\n-- `-h` indicates the host to connect to (default: `localhost`)\n-- `-p` indicates the port to connect to (default: `6379`)\n-- `-t` indicates the number of times the `redis-benchmark` command will run (default: `10`)\n-- `-c` indicates the number of times the individual commands will run (default: `100000`)\n-- `-f` indicates an optional prefix for the summary file name\n-\n-The script will output a CSV file called `[optional prefix_]benchmark_summary.csv` which can be\n-easily loaded into any spreadsheet program for analysis.\n-\n-Sample output:\n-```csv\n-Command,Fastest Response Time (Msec),95th-99th Percentile (Msec),Slowest Response Time (Msec),Avg Requests Per Second\n-SET,1,8,43,13329\n-GET,1,4,15,17842\n-INCR,1,5,29,16069\n-MSET,1,7,732,11183\n-Parallel-SET,1,4,20,18460\n-Parallel-GET,1,4,21,18291\n-Parallel-INCR,1,4,20,18271\n-Parallel-MSET,1,4,21,17771\n-```\n+# Redis API for Apache Geode\n+\n+[Introduction](#introduction)  \n+[How To Try It](#how-to-try-it)  \n+[Building Apache Geode](#building-apache-geode)  \n+[Starting a Geode Server with Redis Enabled](#starting-a-server)  \n+[Adding an Additional Geode Redis Server](#adding-a-server)  \n+[Shutting Down](#shutting-down)  \n+[Redis Commands](#redis-commands)  \n+\n+## <a name=\"introduction\"></a>Introduction\n+\n+The Redis API for Geode allow an application to send Redis commands to Geode. This will allow users to \n+switch seamlessly from native Redis to Geode as a data store/caching solution. \n+\n+The API allows Geode to listen for and interpret incoming Redis commands on a designated port.  The \n+current set of supported Redis commands are listed [here](#redis-commands). \n+\n+## <a name=\"how-to-try-it\"></a>How To Try It\n+\n+We\u2019ll build the develop branch of Apache Geode and then connect the Redis-CLI to that instance. Once \n+we have established that the Redis APIs are available, we\u2019ll connect a Spring Session Data Redis \n+application.\n+\n+### <a name=\"building-apache-geode\"></a>Building Apache Geode\n+The Apache Geode source code can be found here\n+\n+1. In a terminal, git clone the Geode repo:\n+    ```commandline\n+    $ git clone https://github.com/apache/geode.git\n+    ```\n+\n+2. Change the working directory to the Geode directory you cloned\n+\t```commandline\n+\t$ cd geode\n+    ```\n+\n+3. Build the Geode application without running the test (REQUIRES JAVA 8)\n+    ```commandline\n+    $ ./gradlew build -x test\n+   ```\n+\n+4. Once the build has completed, navigate to the geode-assembly directory which contains the Apache \n+    Geode Shell - also referred to as GFSH:\n+    ```commandline\n+    $ cd geode-assembly/build/install/apache-geode/bin\n+   ```\n \n-###Benchmark Helper Scripts\n-The `benchmark.sh` script uses several helper scripts. The `execute-operation.sh` script runs a\n-particular instance of `redis-benchmark`. The `summarize-operation-results.sh` script processes the\n-output of `execute-operation.sh`, and the `summarize-batch-results.sh` script processes the output\n-of multiple runs of `summarize-operation-results.sh`.\n+5. Once in that folder run the following command:\n+    ```commandline\n+   $ ./gfsh\n+   ```\n \n-###The `environment-setup.sh` Script\n-The `environment-setup.sh` is optional. It can start a local Geode Redis Adapter, or confirm that a\n-local Redis server is running, then call `benchmark.sh`.\n+You should now see GFSH starting up with a version of 1.14.x.-build.x\n \n-Mandatory command line arguments for `environment-setup.sh`:\n-- either `-g` or `-r`\n+![screenshot of GFSH running in the terminal](gfsh.png)\n \n-`-g` will:\n-- Start a local Geode Redis Server for you\n-- Shut the server down once the benchmark finishes\n+### <a name=\"starting-a-server\"></a>Starting a Geode Server with Redis Enabled\n+Using GFSH enter the following commands:\n \n-`-r` will:\n-- Connect to a Redis server that is already running\n+1. Start a locator. The locator tracks servers and server load. When a client requests a server \n+connection, the locator directs the client to one of the least loaded servers. Learn more. \n+   ```commandline\n+    gfsh> start locator\n+    ``` \n \n-Optional command line arguments for `environment-setup.sh`:\n-- `-f` indicates an optional prefix for the summary file name that will be passed to `benchmark.sh`\n+2. After the locator has started, start a server that will be able to handle incoming Redis commands. \n \n-###The `shacompare.sh` Script\n-The `shacompare.sh` script is used to compare performance between different commits. This script\n-takes in two different commit hashes, checks them out, uses `environment-setup.sh` script to start\n-up the Geode Redis server, and runs the benchmarks for each commit. It generates two summary CSV\n-files, labeled with the short commit hash, that can be compared for performance changes.\n+    For example:\n+    ```commandline\n+    gfsh> start server --name=redisServer1 --locators=localhost[10334] --server-port=0 --redis-port=6379 --redis-bind-address=127.0.0.1\n+    ```\n+    * --name: A name you create for your server.\n+    * --locators: This is the location of the locator you started in step 1. \n+    * --server-port: The port that Geode clients connect to.\n+    * --redis-port: The port that your Redis client will connect to.\n+    * --redis-bind-address: This will be the address your client uses to connect. \n+\n+    Your Geode instance should now be up and running (1 locator and 1 server) and ready to accept Redis \n+    commands.  \n+\n+    **Keep this terminal open and running so that you can easily shutdown the Geode instance when you are \n+    done working locally.**\n+\n+3. To confirm that things are running correctly, in a separate terminal run:\n+      ```commandline", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1MDA1MQ=="}, "originalCommit": {"oid": "bcd7727d03f81e06a86b3a2e4275b45dd14e5fe9"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzIxNTA0OnYy", "diffSide": "RIGHT", "path": "geode-redis/README.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo0OToyOVrOHARryg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNjoyNzoxN1rOHATHbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1MTc4Ng==", "bodyText": "I think, for this example, the --redis-bind-address is not needed (we listen on all local addresses by default).", "url": "https://github.com/apache/geode/pull/5450#discussion_r470051786", "createdAt": "2020-08-13T15:49:29Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/README.md", "diffHunk": "@@ -1,78 +1,302 @@\n-# Geode Redis Module\n-\n-## Contents\n-1. [Overview](#overview)\n-2. [Performance Test Scripts](#performance-test)\n-\n-## <a name=\"overview\"></a>Overview\n-\n-The [Redis API for Geode](https://geode.apache.org/docs/guide/12/tools_modules/redis_api_for_geode.html) allows \n-Geode to function as a drop-in replacement for a Redis data store, letting Redis applications \n-take advantage of Geode\u2019s scaling capabilities without changing their client code. Redis clients \n-connect to a Geode server in the same way they connect to a Redis server, using a hostname and a \n-port number.\n-\n-## <a name=\"performance-test\"></a>Performance Test Scripts\n-\n-###The `benchmark.sh` Script\n-To run the performance tests, use the `benchmark.sh` script located in the \n-`geode-redis/src/performanceTest` directory.  This script uses the `redis-benchmark` command to\n-measure performance of various Redis commands in requests per second. It runs the commands in two\n-different ways. First it runs several clients in parallel, all testing the same command. Then it\n-runs all the commands together in parallel, crudely simulating a variety of simultaneous operations.\n-\n-Optional command line arguments for `benchmark.sh`:\n-- `-h` indicates the host to connect to (default: `localhost`)\n-- `-p` indicates the port to connect to (default: `6379`)\n-- `-t` indicates the number of times the `redis-benchmark` command will run (default: `10`)\n-- `-c` indicates the number of times the individual commands will run (default: `100000`)\n-- `-f` indicates an optional prefix for the summary file name\n-\n-The script will output a CSV file called `[optional prefix_]benchmark_summary.csv` which can be\n-easily loaded into any spreadsheet program for analysis.\n-\n-Sample output:\n-```csv\n-Command,Fastest Response Time (Msec),95th-99th Percentile (Msec),Slowest Response Time (Msec),Avg Requests Per Second\n-SET,1,8,43,13329\n-GET,1,4,15,17842\n-INCR,1,5,29,16069\n-MSET,1,7,732,11183\n-Parallel-SET,1,4,20,18460\n-Parallel-GET,1,4,21,18291\n-Parallel-INCR,1,4,20,18271\n-Parallel-MSET,1,4,21,17771\n-```\n+# Redis API for Apache Geode\n+\n+[Introduction](#introduction)  \n+[How To Try It](#how-to-try-it)  \n+[Building Apache Geode](#building-apache-geode)  \n+[Starting a Geode Server with Redis Enabled](#starting-a-server)  \n+[Adding an Additional Geode Redis Server](#adding-a-server)  \n+[Shutting Down](#shutting-down)  \n+[Redis Commands](#redis-commands)  \n+\n+## <a name=\"introduction\"></a>Introduction\n+\n+The Redis API for Geode allow an application to send Redis commands to Geode. This will allow users to \n+switch seamlessly from native Redis to Geode as a data store/caching solution. \n+\n+The API allows Geode to listen for and interpret incoming Redis commands on a designated port.  The \n+current set of supported Redis commands are listed [here](#redis-commands). \n+\n+## <a name=\"how-to-try-it\"></a>How To Try It\n+\n+We\u2019ll build the develop branch of Apache Geode and then connect the Redis-CLI to that instance. Once \n+we have established that the Redis APIs are available, we\u2019ll connect a Spring Session Data Redis \n+application.\n+\n+### <a name=\"building-apache-geode\"></a>Building Apache Geode\n+The Apache Geode source code can be found here\n+\n+1. In a terminal, git clone the Geode repo:\n+    ```commandline\n+    $ git clone https://github.com/apache/geode.git\n+    ```\n+\n+2. Change the working directory to the Geode directory you cloned\n+\t```commandline\n+\t$ cd geode\n+    ```\n+\n+3. Build the Geode application without running the test (REQUIRES JAVA 8)\n+    ```commandline\n+    $ ./gradlew build -x test\n+   ```\n+\n+4. Once the build has completed, navigate to the geode-assembly directory which contains the Apache \n+    Geode Shell - also referred to as GFSH:\n+    ```commandline\n+    $ cd geode-assembly/build/install/apache-geode/bin\n+   ```\n \n-###Benchmark Helper Scripts\n-The `benchmark.sh` script uses several helper scripts. The `execute-operation.sh` script runs a\n-particular instance of `redis-benchmark`. The `summarize-operation-results.sh` script processes the\n-output of `execute-operation.sh`, and the `summarize-batch-results.sh` script processes the output\n-of multiple runs of `summarize-operation-results.sh`.\n+5. Once in that folder run the following command:\n+    ```commandline\n+   $ ./gfsh\n+   ```\n \n-###The `environment-setup.sh` Script\n-The `environment-setup.sh` is optional. It can start a local Geode Redis Adapter, or confirm that a\n-local Redis server is running, then call `benchmark.sh`.\n+You should now see GFSH starting up with a version of 1.14.x.-build.x\n \n-Mandatory command line arguments for `environment-setup.sh`:\n-- either `-g` or `-r`\n+![screenshot of GFSH running in the terminal](gfsh.png)\n \n-`-g` will:\n-- Start a local Geode Redis Server for you\n-- Shut the server down once the benchmark finishes\n+### <a name=\"starting-a-server\"></a>Starting a Geode Server with Redis Enabled\n+Using GFSH enter the following commands:\n \n-`-r` will:\n-- Connect to a Redis server that is already running\n+1. Start a locator. The locator tracks servers and server load. When a client requests a server \n+connection, the locator directs the client to one of the least loaded servers. Learn more. \n+   ```commandline\n+    gfsh> start locator\n+    ``` \n \n-Optional command line arguments for `environment-setup.sh`:\n-- `-f` indicates an optional prefix for the summary file name that will be passed to `benchmark.sh`\n+2. After the locator has started, start a server that will be able to handle incoming Redis commands. \n \n-###The `shacompare.sh` Script\n-The `shacompare.sh` script is used to compare performance between different commits. This script\n-takes in two different commit hashes, checks them out, uses `environment-setup.sh` script to start\n-up the Geode Redis server, and runs the benchmarks for each commit. It generates two summary CSV\n-files, labeled with the short commit hash, that can be compared for performance changes.\n+    For example:\n+    ```commandline\n+    gfsh> start server --name=redisServer1 --locators=localhost[10334] --server-port=0 --redis-port=6379 --redis-bind-address=127.0.0.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bcd7727d03f81e06a86b3a2e4275b45dd14e5fe9"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA3NTI0Nw==", "bodyText": "good call, just removed it", "url": "https://github.com/apache/geode/pull/5450#discussion_r470075247", "createdAt": "2020-08-13T16:27:17Z", "author": {"login": "sabbey37"}, "path": "geode-redis/README.md", "diffHunk": "@@ -1,78 +1,302 @@\n-# Geode Redis Module\n-\n-## Contents\n-1. [Overview](#overview)\n-2. [Performance Test Scripts](#performance-test)\n-\n-## <a name=\"overview\"></a>Overview\n-\n-The [Redis API for Geode](https://geode.apache.org/docs/guide/12/tools_modules/redis_api_for_geode.html) allows \n-Geode to function as a drop-in replacement for a Redis data store, letting Redis applications \n-take advantage of Geode\u2019s scaling capabilities without changing their client code. Redis clients \n-connect to a Geode server in the same way they connect to a Redis server, using a hostname and a \n-port number.\n-\n-## <a name=\"performance-test\"></a>Performance Test Scripts\n-\n-###The `benchmark.sh` Script\n-To run the performance tests, use the `benchmark.sh` script located in the \n-`geode-redis/src/performanceTest` directory.  This script uses the `redis-benchmark` command to\n-measure performance of various Redis commands in requests per second. It runs the commands in two\n-different ways. First it runs several clients in parallel, all testing the same command. Then it\n-runs all the commands together in parallel, crudely simulating a variety of simultaneous operations.\n-\n-Optional command line arguments for `benchmark.sh`:\n-- `-h` indicates the host to connect to (default: `localhost`)\n-- `-p` indicates the port to connect to (default: `6379`)\n-- `-t` indicates the number of times the `redis-benchmark` command will run (default: `10`)\n-- `-c` indicates the number of times the individual commands will run (default: `100000`)\n-- `-f` indicates an optional prefix for the summary file name\n-\n-The script will output a CSV file called `[optional prefix_]benchmark_summary.csv` which can be\n-easily loaded into any spreadsheet program for analysis.\n-\n-Sample output:\n-```csv\n-Command,Fastest Response Time (Msec),95th-99th Percentile (Msec),Slowest Response Time (Msec),Avg Requests Per Second\n-SET,1,8,43,13329\n-GET,1,4,15,17842\n-INCR,1,5,29,16069\n-MSET,1,7,732,11183\n-Parallel-SET,1,4,20,18460\n-Parallel-GET,1,4,21,18291\n-Parallel-INCR,1,4,20,18271\n-Parallel-MSET,1,4,21,17771\n-```\n+# Redis API for Apache Geode\n+\n+[Introduction](#introduction)  \n+[How To Try It](#how-to-try-it)  \n+[Building Apache Geode](#building-apache-geode)  \n+[Starting a Geode Server with Redis Enabled](#starting-a-server)  \n+[Adding an Additional Geode Redis Server](#adding-a-server)  \n+[Shutting Down](#shutting-down)  \n+[Redis Commands](#redis-commands)  \n+\n+## <a name=\"introduction\"></a>Introduction\n+\n+The Redis API for Geode allow an application to send Redis commands to Geode. This will allow users to \n+switch seamlessly from native Redis to Geode as a data store/caching solution. \n+\n+The API allows Geode to listen for and interpret incoming Redis commands on a designated port.  The \n+current set of supported Redis commands are listed [here](#redis-commands). \n+\n+## <a name=\"how-to-try-it\"></a>How To Try It\n+\n+We\u2019ll build the develop branch of Apache Geode and then connect the Redis-CLI to that instance. Once \n+we have established that the Redis APIs are available, we\u2019ll connect a Spring Session Data Redis \n+application.\n+\n+### <a name=\"building-apache-geode\"></a>Building Apache Geode\n+The Apache Geode source code can be found here\n+\n+1. In a terminal, git clone the Geode repo:\n+    ```commandline\n+    $ git clone https://github.com/apache/geode.git\n+    ```\n+\n+2. Change the working directory to the Geode directory you cloned\n+\t```commandline\n+\t$ cd geode\n+    ```\n+\n+3. Build the Geode application without running the test (REQUIRES JAVA 8)\n+    ```commandline\n+    $ ./gradlew build -x test\n+   ```\n+\n+4. Once the build has completed, navigate to the geode-assembly directory which contains the Apache \n+    Geode Shell - also referred to as GFSH:\n+    ```commandline\n+    $ cd geode-assembly/build/install/apache-geode/bin\n+   ```\n \n-###Benchmark Helper Scripts\n-The `benchmark.sh` script uses several helper scripts. The `execute-operation.sh` script runs a\n-particular instance of `redis-benchmark`. The `summarize-operation-results.sh` script processes the\n-output of `execute-operation.sh`, and the `summarize-batch-results.sh` script processes the output\n-of multiple runs of `summarize-operation-results.sh`.\n+5. Once in that folder run the following command:\n+    ```commandline\n+   $ ./gfsh\n+   ```\n \n-###The `environment-setup.sh` Script\n-The `environment-setup.sh` is optional. It can start a local Geode Redis Adapter, or confirm that a\n-local Redis server is running, then call `benchmark.sh`.\n+You should now see GFSH starting up with a version of 1.14.x.-build.x\n \n-Mandatory command line arguments for `environment-setup.sh`:\n-- either `-g` or `-r`\n+![screenshot of GFSH running in the terminal](gfsh.png)\n \n-`-g` will:\n-- Start a local Geode Redis Server for you\n-- Shut the server down once the benchmark finishes\n+### <a name=\"starting-a-server\"></a>Starting a Geode Server with Redis Enabled\n+Using GFSH enter the following commands:\n \n-`-r` will:\n-- Connect to a Redis server that is already running\n+1. Start a locator. The locator tracks servers and server load. When a client requests a server \n+connection, the locator directs the client to one of the least loaded servers. Learn more. \n+   ```commandline\n+    gfsh> start locator\n+    ``` \n \n-Optional command line arguments for `environment-setup.sh`:\n-- `-f` indicates an optional prefix for the summary file name that will be passed to `benchmark.sh`\n+2. After the locator has started, start a server that will be able to handle incoming Redis commands. \n \n-###The `shacompare.sh` Script\n-The `shacompare.sh` script is used to compare performance between different commits. This script\n-takes in two different commit hashes, checks them out, uses `environment-setup.sh` script to start\n-up the Geode Redis server, and runs the benchmarks for each commit. It generates two summary CSV\n-files, labeled with the short commit hash, that can be compared for performance changes.\n+    For example:\n+    ```commandline\n+    gfsh> start server --name=redisServer1 --locators=localhost[10334] --server-port=0 --redis-port=6379 --redis-bind-address=127.0.0.1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1MTc4Ng=="}, "originalCommit": {"oid": "bcd7727d03f81e06a86b3a2e4275b45dd14e5fe9"}, "originalPosition": 138}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4730, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}