{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5MTQyMjU4", "number": 5371, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNjo1MTo0N1rOEOjOIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODowNTozNFrOEOzG1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzNjkyNTc4OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/command/RegisterInterestList66.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNjo1MTo0N1rOGxwpOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQwNjo1MjozM1rOGxwqjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgzMDM5NA==", "bodyText": "The important chunk here copied from RegisterInterest61 which already had a bug fix for this issue.", "url": "https://github.com/apache/geode/pull/5371#discussion_r454830394", "createdAt": "2020-07-15T06:51:47Z", "author": {"login": "mhansonp"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/command/RegisterInterestList66.java", "diffHunk": "@@ -163,29 +162,40 @@ public void cmdExecute(final Message clientMessage, final ServerConnection serve\n     }\n     try {\n       securityService.authorize(Resource.DATA, Operation.READ, regionName);\n-      AuthorizeRequest authzRequest = serverConnection.getAuthzRequest();\n-      if (authzRequest != null) {\n+      AuthorizeRequest authorizeRequest = serverConnection.getAuthzRequest();\n+      if (authorizeRequest != null) {\n         if (!DynamicRegionFactory.regionIsDynamicRegionList(regionName)) {\n           RegisterInterestOperationContext registerContext =\n-              authzRequest.registerInterestListAuthorize(regionName, keys, policy);\n-          keys = (List) registerContext.getKey();\n+              authorizeRequest.registerInterestListAuthorize(regionName, keys, policy);\n+          keys = (List<Object>) registerContext.getKey();\n         }\n       }\n       // Register interest\n       serverConnection.getAcceptor().getCacheClientNotifier().registerClientInterest(regionName,\n           keys, serverConnection.getProxyID(), isDurable, sendUpdatesAsInvalidates, true,\n           regionDataPolicyPartBytes[0], true);\n-    } catch (Exception ex) {\n+    } catch (Exception e) {\n       // If an interrupted exception is thrown , rethrow it\n-      checkForInterrupt(serverConnection, ex);\n+      checkForInterrupt(serverConnection, e);\n       // Otherwise, write an exception message and continue\n-      writeChunkedException(clientMessage, ex, serverConnection);\n+      writeChunkedException(clientMessage, e, serverConnection);\n       serverConnection.setAsTrue(RESPONDED);\n       return;\n     }\n \n-    boolean isPrimary = serverConnection.getAcceptor().getCacheClientNotifier()\n-        .getClientProxy(serverConnection.getProxyID()).isPrimary();\n+    CacheClientProxy ccp = serverConnection.getAcceptor().getCacheClientNotifier()\n+        .getClientProxy(serverConnection.getProxyID());\n+\n+    if (ccp == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5ec401afa4be0adb5c6f7927ee4df60fd7d9991"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgzMDczNQ==", "bodyText": "The core issue was an NPE, because there was no cache client proxy returned during shutdown.", "url": "https://github.com/apache/geode/pull/5371#discussion_r454830735", "createdAt": "2020-07-15T06:52:33Z", "author": {"login": "mhansonp"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/command/RegisterInterestList66.java", "diffHunk": "@@ -163,29 +162,40 @@ public void cmdExecute(final Message clientMessage, final ServerConnection serve\n     }\n     try {\n       securityService.authorize(Resource.DATA, Operation.READ, regionName);\n-      AuthorizeRequest authzRequest = serverConnection.getAuthzRequest();\n-      if (authzRequest != null) {\n+      AuthorizeRequest authorizeRequest = serverConnection.getAuthzRequest();\n+      if (authorizeRequest != null) {\n         if (!DynamicRegionFactory.regionIsDynamicRegionList(regionName)) {\n           RegisterInterestOperationContext registerContext =\n-              authzRequest.registerInterestListAuthorize(regionName, keys, policy);\n-          keys = (List) registerContext.getKey();\n+              authorizeRequest.registerInterestListAuthorize(regionName, keys, policy);\n+          keys = (List<Object>) registerContext.getKey();\n         }\n       }\n       // Register interest\n       serverConnection.getAcceptor().getCacheClientNotifier().registerClientInterest(regionName,\n           keys, serverConnection.getProxyID(), isDurable, sendUpdatesAsInvalidates, true,\n           regionDataPolicyPartBytes[0], true);\n-    } catch (Exception ex) {\n+    } catch (Exception e) {\n       // If an interrupted exception is thrown , rethrow it\n-      checkForInterrupt(serverConnection, ex);\n+      checkForInterrupt(serverConnection, e);\n       // Otherwise, write an exception message and continue\n-      writeChunkedException(clientMessage, ex, serverConnection);\n+      writeChunkedException(clientMessage, e, serverConnection);\n       serverConnection.setAsTrue(RESPONDED);\n       return;\n     }\n \n-    boolean isPrimary = serverConnection.getAcceptor().getCacheClientNotifier()\n-        .getClientProxy(serverConnection.getProxyID()).isPrimary();\n+    CacheClientProxy ccp = serverConnection.getAcceptor().getCacheClientNotifier()\n+        .getClientProxy(serverConnection.getProxyID());\n+\n+    if (ccp == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDgzMDM5NA=="}, "originalCommit": {"oid": "e5ec401afa4be0adb5c6f7927ee4df60fd7d9991"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzOTUyODU1OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/command/RegisterInterestList66.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxODowNTozNFrOGyJzbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjo0Mjo0N1rOGyzbGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI0MjYwNg==", "bodyText": "We could change the messaging part...", "url": "https://github.com/apache/geode/pull/5371#discussion_r455242606", "createdAt": "2020-07-15T18:05:34Z", "author": {"login": "agingade"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/command/RegisterInterestList66.java", "diffHunk": "@@ -163,29 +162,40 @@ public void cmdExecute(final Message clientMessage, final ServerConnection serve\n     }\n     try {\n       securityService.authorize(Resource.DATA, Operation.READ, regionName);\n-      AuthorizeRequest authzRequest = serverConnection.getAuthzRequest();\n-      if (authzRequest != null) {\n+      AuthorizeRequest authorizeRequest = serverConnection.getAuthzRequest();\n+      if (authorizeRequest != null) {\n         if (!DynamicRegionFactory.regionIsDynamicRegionList(regionName)) {\n           RegisterInterestOperationContext registerContext =\n-              authzRequest.registerInterestListAuthorize(regionName, keys, policy);\n-          keys = (List) registerContext.getKey();\n+              authorizeRequest.registerInterestListAuthorize(regionName, keys, policy);\n+          keys = (List<Object>) registerContext.getKey();\n         }\n       }\n       // Register interest\n       serverConnection.getAcceptor().getCacheClientNotifier().registerClientInterest(regionName,\n           keys, serverConnection.getProxyID(), isDurable, sendUpdatesAsInvalidates, true,\n           regionDataPolicyPartBytes[0], true);\n-    } catch (Exception ex) {\n+    } catch (Exception e) {\n       // If an interrupted exception is thrown , rethrow it\n-      checkForInterrupt(serverConnection, ex);\n+      checkForInterrupt(serverConnection, e);\n       // Otherwise, write an exception message and continue\n-      writeChunkedException(clientMessage, ex, serverConnection);\n+      writeChunkedException(clientMessage, e, serverConnection);\n       serverConnection.setAsTrue(RESPONDED);\n       return;\n     }\n \n-    boolean isPrimary = serverConnection.getAcceptor().getCacheClientNotifier()\n-        .getClientProxy(serverConnection.getProxyID()).isPrimary();\n+    CacheClientProxy ccp = serverConnection.getAcceptor().getCacheClientNotifier()\n+        .getClientProxy(serverConnection.getProxyID());\n+\n+    if (ccp == null) {\n+      IOException ioException = new IOException(\n+          \"CacheClientProxy for this client is no longer on the server , so registerInterest operation is unsuccessful\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5ec401afa4be0adb5c6f7927ee4df60fd7d9991"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyNDUwNg==", "bodyText": "done", "url": "https://github.com/apache/geode/pull/5371#discussion_r455924506", "createdAt": "2020-07-16T16:42:47Z", "author": {"login": "mhansonp"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/command/RegisterInterestList66.java", "diffHunk": "@@ -163,29 +162,40 @@ public void cmdExecute(final Message clientMessage, final ServerConnection serve\n     }\n     try {\n       securityService.authorize(Resource.DATA, Operation.READ, regionName);\n-      AuthorizeRequest authzRequest = serverConnection.getAuthzRequest();\n-      if (authzRequest != null) {\n+      AuthorizeRequest authorizeRequest = serverConnection.getAuthzRequest();\n+      if (authorizeRequest != null) {\n         if (!DynamicRegionFactory.regionIsDynamicRegionList(regionName)) {\n           RegisterInterestOperationContext registerContext =\n-              authzRequest.registerInterestListAuthorize(regionName, keys, policy);\n-          keys = (List) registerContext.getKey();\n+              authorizeRequest.registerInterestListAuthorize(regionName, keys, policy);\n+          keys = (List<Object>) registerContext.getKey();\n         }\n       }\n       // Register interest\n       serverConnection.getAcceptor().getCacheClientNotifier().registerClientInterest(regionName,\n           keys, serverConnection.getProxyID(), isDurable, sendUpdatesAsInvalidates, true,\n           regionDataPolicyPartBytes[0], true);\n-    } catch (Exception ex) {\n+    } catch (Exception e) {\n       // If an interrupted exception is thrown , rethrow it\n-      checkForInterrupt(serverConnection, ex);\n+      checkForInterrupt(serverConnection, e);\n       // Otherwise, write an exception message and continue\n-      writeChunkedException(clientMessage, ex, serverConnection);\n+      writeChunkedException(clientMessage, e, serverConnection);\n       serverConnection.setAsTrue(RESPONDED);\n       return;\n     }\n \n-    boolean isPrimary = serverConnection.getAcceptor().getCacheClientNotifier()\n-        .getClientProxy(serverConnection.getProxyID()).isPrimary();\n+    CacheClientProxy ccp = serverConnection.getAcceptor().getCacheClientNotifier()\n+        .getClientProxy(serverConnection.getProxyID());\n+\n+    if (ccp == null) {\n+      IOException ioException = new IOException(\n+          \"CacheClientProxy for this client is no longer on the server , so registerInterest operation is unsuccessful\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTI0MjYwNg=="}, "originalCommit": {"oid": "e5ec401afa4be0adb5c6f7927ee4df60fd7d9991"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3928, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}