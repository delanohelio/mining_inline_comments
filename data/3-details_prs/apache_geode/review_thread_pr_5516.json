{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NjQ3NTQ4", "number": 5516, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDoxODo1MFrOEmn_Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzoxMDowM1rOEz_FPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTM2NTM1OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDoxODo1MFrOHWw3Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTo1Njo0OFrOHW-uOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYzMTI3MQ==", "bodyText": "do you need to add some verification code to verify that region is cleared and altered?", "url": "https://github.com/apache/geode/pull/5516#discussion_r493631271", "createdAt": "2020-09-23T14:18:50Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java", "diffHunk": "@@ -0,0 +1,424 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.AttributesMutator;\n+import org.apache.geode.cache.CacheListener;\n+import org.apache.geode.cache.CacheLoader;\n+import org.apache.geode.cache.CacheLoaderException;\n+import org.apache.geode.cache.CacheWriter;\n+import org.apache.geode.cache.CacheWriterException;\n+import org.apache.geode.cache.EntryEvent;\n+import org.apache.geode.cache.ExpirationAction;\n+import org.apache.geode.cache.ExpirationAttributes;\n+import org.apache.geode.cache.LoaderHelper;\n+import org.apache.geode.cache.PartitionedRegionPartialClearException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionEvent;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.distributed.internal.DistributionMessageObserver;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n+\n+public class PartitionedRegionClearWithAlterRegionDUnitTest implements Serializable {\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule();\n+\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+\n+  @Rule\n+  public ExecutorServiceRule executorServiceRule = new ExecutorServiceRule();\n+\n+  private VM server1;\n+\n+  private VM server2;\n+\n+  private VM server3;\n+\n+  private static final String REGION_NAME = \"testRegion\";\n+\n+  private static final int NUM_ENTRIES = 1000000;\n+\n+  private void initialize() {\n+    server1 = VM.getVM(0);\n+    server2 = VM.getVM(1);\n+\n+    server1.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server2.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server1.invoke(() -> {\n+      populateRegion();\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+\n+    server2.invoke(() -> {\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheLoader() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      alterRegionSetCacheLoader();\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c57ae5da6b76b1ba053f44ca946369880b39429"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1ODM2MQ==", "bodyText": "It is verified at line 104 and line 322.", "url": "https://github.com/apache/geode/pull/5516#discussion_r493858361", "createdAt": "2020-09-23T19:56:48Z", "author": {"login": "jchen21"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java", "diffHunk": "@@ -0,0 +1,424 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.AttributesMutator;\n+import org.apache.geode.cache.CacheListener;\n+import org.apache.geode.cache.CacheLoader;\n+import org.apache.geode.cache.CacheLoaderException;\n+import org.apache.geode.cache.CacheWriter;\n+import org.apache.geode.cache.CacheWriterException;\n+import org.apache.geode.cache.EntryEvent;\n+import org.apache.geode.cache.ExpirationAction;\n+import org.apache.geode.cache.ExpirationAttributes;\n+import org.apache.geode.cache.LoaderHelper;\n+import org.apache.geode.cache.PartitionedRegionPartialClearException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionEvent;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.distributed.internal.DistributionMessageObserver;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n+\n+public class PartitionedRegionClearWithAlterRegionDUnitTest implements Serializable {\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule();\n+\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+\n+  @Rule\n+  public ExecutorServiceRule executorServiceRule = new ExecutorServiceRule();\n+\n+  private VM server1;\n+\n+  private VM server2;\n+\n+  private VM server3;\n+\n+  private static final String REGION_NAME = \"testRegion\";\n+\n+  private static final int NUM_ENTRIES = 1000000;\n+\n+  private void initialize() {\n+    server1 = VM.getVM(0);\n+    server2 = VM.getVM(1);\n+\n+    server1.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server2.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server1.invoke(() -> {\n+      populateRegion();\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+\n+    server2.invoke(() -> {\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheLoader() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      alterRegionSetCacheLoader();\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYzMTI3MQ=="}, "originalCommit": {"oid": "3c57ae5da6b76b1ba053f44ca946369880b39429"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4OTM2ODAxOnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDoxOToyMlrOHWw40A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTo1Nzo0NlrOHW-wVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYzMTY5Ng==", "bodyText": "same thing, probably some verification code here and in other tests", "url": "https://github.com/apache/geode/pull/5516#discussion_r493631696", "createdAt": "2020-09-23T14:19:22Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java", "diffHunk": "@@ -0,0 +1,424 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.AttributesMutator;\n+import org.apache.geode.cache.CacheListener;\n+import org.apache.geode.cache.CacheLoader;\n+import org.apache.geode.cache.CacheLoaderException;\n+import org.apache.geode.cache.CacheWriter;\n+import org.apache.geode.cache.CacheWriterException;\n+import org.apache.geode.cache.EntryEvent;\n+import org.apache.geode.cache.ExpirationAction;\n+import org.apache.geode.cache.ExpirationAttributes;\n+import org.apache.geode.cache.LoaderHelper;\n+import org.apache.geode.cache.PartitionedRegionPartialClearException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionEvent;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.distributed.internal.DistributionMessageObserver;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n+\n+public class PartitionedRegionClearWithAlterRegionDUnitTest implements Serializable {\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule();\n+\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+\n+  @Rule\n+  public ExecutorServiceRule executorServiceRule = new ExecutorServiceRule();\n+\n+  private VM server1;\n+\n+  private VM server2;\n+\n+  private VM server3;\n+\n+  private static final String REGION_NAME = \"testRegion\";\n+\n+  private static final int NUM_ENTRIES = 1000000;\n+\n+  private void initialize() {\n+    server1 = VM.getVM(0);\n+    server2 = VM.getVM(1);\n+\n+    server1.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server2.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server1.invoke(() -> {\n+      populateRegion();\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+\n+    server2.invoke(() -> {\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheLoader() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      alterRegionSetCacheLoader();\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }\n+\n+\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheWriter() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      alterRegionSetCacheWriter();\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c57ae5da6b76b1ba053f44ca946369880b39429"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1ODkwMA==", "bodyText": "It is verified at line 123 and line 330.", "url": "https://github.com/apache/geode/pull/5516#discussion_r493858900", "createdAt": "2020-09-23T19:57:46Z", "author": {"login": "jchen21"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java", "diffHunk": "@@ -0,0 +1,424 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.AttributesMutator;\n+import org.apache.geode.cache.CacheListener;\n+import org.apache.geode.cache.CacheLoader;\n+import org.apache.geode.cache.CacheLoaderException;\n+import org.apache.geode.cache.CacheWriter;\n+import org.apache.geode.cache.CacheWriterException;\n+import org.apache.geode.cache.EntryEvent;\n+import org.apache.geode.cache.ExpirationAction;\n+import org.apache.geode.cache.ExpirationAttributes;\n+import org.apache.geode.cache.LoaderHelper;\n+import org.apache.geode.cache.PartitionedRegionPartialClearException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionEvent;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.distributed.internal.DistributionMessageObserver;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n+\n+public class PartitionedRegionClearWithAlterRegionDUnitTest implements Serializable {\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule();\n+\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+\n+  @Rule\n+  public ExecutorServiceRule executorServiceRule = new ExecutorServiceRule();\n+\n+  private VM server1;\n+\n+  private VM server2;\n+\n+  private VM server3;\n+\n+  private static final String REGION_NAME = \"testRegion\";\n+\n+  private static final int NUM_ENTRIES = 1000000;\n+\n+  private void initialize() {\n+    server1 = VM.getVM(0);\n+    server2 = VM.getVM(1);\n+\n+    server1.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server2.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server1.invoke(() -> {\n+      populateRegion();\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+\n+    server2.invoke(() -> {\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheLoader() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      alterRegionSetCacheLoader();\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }\n+\n+\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheWriter() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      alterRegionSetCacheWriter();\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYzMTY5Ng=="}, "originalCommit": {"oid": "3c57ae5da6b76b1ba053f44ca946369880b39429"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTQ1MDQ1OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzowMToyNVrOHrijrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzo0Njo1MVrOHrjHCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxNzAwNQ==", "bodyText": "this should be splited into 2 different call.\nsetInstance should be called in invoke(), alterRegionSetCacheLoader() should be called in async.", "url": "https://github.com/apache/geode/pull/5516#discussion_r515417005", "createdAt": "2020-10-30T23:01:25Z", "author": {"login": "gesterzhou"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java", "diffHunk": "@@ -0,0 +1,533 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.AttributesMutator;\n+import org.apache.geode.cache.CacheListener;\n+import org.apache.geode.cache.CacheLoader;\n+import org.apache.geode.cache.CacheLoaderException;\n+import org.apache.geode.cache.CacheWriter;\n+import org.apache.geode.cache.CacheWriterException;\n+import org.apache.geode.cache.EntryEvent;\n+import org.apache.geode.cache.ExpirationAction;\n+import org.apache.geode.cache.ExpirationAttributes;\n+import org.apache.geode.cache.LoaderHelper;\n+import org.apache.geode.cache.PartitionedRegionPartialClearException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionEvent;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.distributed.internal.ClusterDistributionManager;\n+import org.apache.geode.distributed.internal.DistributionMessage;\n+import org.apache.geode.distributed.internal.DistributionMessageObserver;\n+import org.apache.geode.distributed.internal.InternalDistributedSystem;\n+import org.apache.geode.distributed.internal.membership.api.MembershipManagerHelper;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.DUnitBlackboard;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n+\n+public class PartitionedRegionClearWithAlterRegionDUnitTest implements Serializable {\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule();\n+\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+\n+  @Rule\n+  public ExecutorServiceRule executorServiceRule = new ExecutorServiceRule();\n+\n+  private VM server1;\n+\n+  private VM server2;\n+\n+  private VM server3;\n+\n+  private static volatile DUnitBlackboard blackboard;\n+\n+  private static final String REGION_NAME = \"testRegion\";\n+\n+  private static final int NUM_ENTRIES = 1000000;\n+\n+  private static final String GATE_NAME = \"ALLOW_ALTER_REGION\";\n+\n+  private void initialize() {\n+    server1 = VM.getVM(0);\n+    server2 = VM.getVM(1);\n+\n+    server1.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server2.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server1.invoke(() -> {\n+      populateRegion();\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+\n+    server2.invoke(() -> {\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheLoader() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a95185b4e5f14e5b93845482ddc40cd47fbb4470"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyNDE4NQ==", "bodyText": "Very good point!", "url": "https://github.com/apache/geode/pull/5516#discussion_r515424185", "createdAt": "2020-10-30T23:36:45Z", "author": {"login": "jchen21"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java", "diffHunk": "@@ -0,0 +1,533 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.AttributesMutator;\n+import org.apache.geode.cache.CacheListener;\n+import org.apache.geode.cache.CacheLoader;\n+import org.apache.geode.cache.CacheLoaderException;\n+import org.apache.geode.cache.CacheWriter;\n+import org.apache.geode.cache.CacheWriterException;\n+import org.apache.geode.cache.EntryEvent;\n+import org.apache.geode.cache.ExpirationAction;\n+import org.apache.geode.cache.ExpirationAttributes;\n+import org.apache.geode.cache.LoaderHelper;\n+import org.apache.geode.cache.PartitionedRegionPartialClearException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionEvent;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.distributed.internal.ClusterDistributionManager;\n+import org.apache.geode.distributed.internal.DistributionMessage;\n+import org.apache.geode.distributed.internal.DistributionMessageObserver;\n+import org.apache.geode.distributed.internal.InternalDistributedSystem;\n+import org.apache.geode.distributed.internal.membership.api.MembershipManagerHelper;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.DUnitBlackboard;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n+\n+public class PartitionedRegionClearWithAlterRegionDUnitTest implements Serializable {\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule();\n+\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+\n+  @Rule\n+  public ExecutorServiceRule executorServiceRule = new ExecutorServiceRule();\n+\n+  private VM server1;\n+\n+  private VM server2;\n+\n+  private VM server3;\n+\n+  private static volatile DUnitBlackboard blackboard;\n+\n+  private static final String REGION_NAME = \"testRegion\";\n+\n+  private static final int NUM_ENTRIES = 1000000;\n+\n+  private static final String GATE_NAME = \"ALLOW_ALTER_REGION\";\n+\n+  private void initialize() {\n+    server1 = VM.getVM(0);\n+    server2 = VM.getVM(1);\n+\n+    server1.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server2.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server1.invoke(() -> {\n+      populateRegion();\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+\n+    server2.invoke(() -> {\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheLoader() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxNzAwNQ=="}, "originalCommit": {"oid": "a95185b4e5f14e5b93845482ddc40cd47fbb4470"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyNjA1Ng==", "bodyText": "Fixed.", "url": "https://github.com/apache/geode/pull/5516#discussion_r515426056", "createdAt": "2020-10-30T23:46:51Z", "author": {"login": "jchen21"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java", "diffHunk": "@@ -0,0 +1,533 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.AttributesMutator;\n+import org.apache.geode.cache.CacheListener;\n+import org.apache.geode.cache.CacheLoader;\n+import org.apache.geode.cache.CacheLoaderException;\n+import org.apache.geode.cache.CacheWriter;\n+import org.apache.geode.cache.CacheWriterException;\n+import org.apache.geode.cache.EntryEvent;\n+import org.apache.geode.cache.ExpirationAction;\n+import org.apache.geode.cache.ExpirationAttributes;\n+import org.apache.geode.cache.LoaderHelper;\n+import org.apache.geode.cache.PartitionedRegionPartialClearException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionEvent;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.distributed.internal.ClusterDistributionManager;\n+import org.apache.geode.distributed.internal.DistributionMessage;\n+import org.apache.geode.distributed.internal.DistributionMessageObserver;\n+import org.apache.geode.distributed.internal.InternalDistributedSystem;\n+import org.apache.geode.distributed.internal.membership.api.MembershipManagerHelper;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.DUnitBlackboard;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n+\n+public class PartitionedRegionClearWithAlterRegionDUnitTest implements Serializable {\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule();\n+\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+\n+  @Rule\n+  public ExecutorServiceRule executorServiceRule = new ExecutorServiceRule();\n+\n+  private VM server1;\n+\n+  private VM server2;\n+\n+  private VM server3;\n+\n+  private static volatile DUnitBlackboard blackboard;\n+\n+  private static final String REGION_NAME = \"testRegion\";\n+\n+  private static final int NUM_ENTRIES = 1000000;\n+\n+  private static final String GATE_NAME = \"ALLOW_ALTER_REGION\";\n+\n+  private void initialize() {\n+    server1 = VM.getVM(0);\n+    server2 = VM.getVM(1);\n+\n+    server1.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server2.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server1.invoke(() -> {\n+      populateRegion();\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+\n+    server2.invoke(() -> {\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheLoader() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxNzAwNQ=="}, "originalCommit": {"oid": "a95185b4e5f14e5b93845482ddc40cd47fbb4470"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTQ2MzY1OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzoxMDowM1rOHrirQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMzo0MzoyNFrOHsavtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxODk0Nw==", "bodyText": "(1) why in loader and writer test, you did not use waitForGate?\n(2) you can define singalGate in afterProcessedMessage, afterReceivedMessage respectively to test in different cases", "url": "https://github.com/apache/geode/pull/5516#discussion_r515418947", "createdAt": "2020-10-30T23:10:03Z", "author": {"login": "gesterzhou"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java", "diffHunk": "@@ -0,0 +1,533 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.AttributesMutator;\n+import org.apache.geode.cache.CacheListener;\n+import org.apache.geode.cache.CacheLoader;\n+import org.apache.geode.cache.CacheLoaderException;\n+import org.apache.geode.cache.CacheWriter;\n+import org.apache.geode.cache.CacheWriterException;\n+import org.apache.geode.cache.EntryEvent;\n+import org.apache.geode.cache.ExpirationAction;\n+import org.apache.geode.cache.ExpirationAttributes;\n+import org.apache.geode.cache.LoaderHelper;\n+import org.apache.geode.cache.PartitionedRegionPartialClearException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionEvent;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.distributed.internal.ClusterDistributionManager;\n+import org.apache.geode.distributed.internal.DistributionMessage;\n+import org.apache.geode.distributed.internal.DistributionMessageObserver;\n+import org.apache.geode.distributed.internal.InternalDistributedSystem;\n+import org.apache.geode.distributed.internal.membership.api.MembershipManagerHelper;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.DUnitBlackboard;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n+\n+public class PartitionedRegionClearWithAlterRegionDUnitTest implements Serializable {\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule();\n+\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+\n+  @Rule\n+  public ExecutorServiceRule executorServiceRule = new ExecutorServiceRule();\n+\n+  private VM server1;\n+\n+  private VM server2;\n+\n+  private VM server3;\n+\n+  private static volatile DUnitBlackboard blackboard;\n+\n+  private static final String REGION_NAME = \"testRegion\";\n+\n+  private static final int NUM_ENTRIES = 1000000;\n+\n+  private static final String GATE_NAME = \"ALLOW_ALTER_REGION\";\n+\n+  private void initialize() {\n+    server1 = VM.getVM(0);\n+    server2 = VM.getVM(1);\n+\n+    server1.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server2.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server1.invoke(() -> {\n+      populateRegion();\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+\n+    server2.invoke(() -> {\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheLoader() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      DistributionMessageObserver.setInstance(getDistributionMessageObserver());\n+      alterRegionSetCacheLoader();\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }\n+\n+\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheWriter() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      DistributionMessageObserver.setInstance(getDistributionMessageObserver());\n+      alterRegionSetCacheWriter();\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheListener() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      DistributionMessageObserver.setInstance(getDistributionMessageObserver());\n+      alterRegionSetCacheListener();\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileChangingEviction() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      DistributionMessageObserver.setInstance(getDistributionMessageObserver());\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      AttributesMutator attributesMutator = region.getAttributesMutator();\n+      getBlackboard().waitForGate(GATE_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a95185b4e5f14e5b93845482ddc40cd47fbb4470"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyNTY3Mg==", "bodyText": "(1) The waitForGate is called in alterRegionSetCacheLoader and alterRegionSetCacheWriter.\n(2) I don't see significant difference between afterProcessedMessage and afterReceivedMessage. It's true their timings are different. But is the difference significant enough to make the concurrent alter region behavior different? For example, causing some error or failure etc.? Can you elaborate a bit? Maybe we can talk about it.", "url": "https://github.com/apache/geode/pull/5516#discussion_r515425672", "createdAt": "2020-10-30T23:44:53Z", "author": {"login": "jchen21"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java", "diffHunk": "@@ -0,0 +1,533 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.AttributesMutator;\n+import org.apache.geode.cache.CacheListener;\n+import org.apache.geode.cache.CacheLoader;\n+import org.apache.geode.cache.CacheLoaderException;\n+import org.apache.geode.cache.CacheWriter;\n+import org.apache.geode.cache.CacheWriterException;\n+import org.apache.geode.cache.EntryEvent;\n+import org.apache.geode.cache.ExpirationAction;\n+import org.apache.geode.cache.ExpirationAttributes;\n+import org.apache.geode.cache.LoaderHelper;\n+import org.apache.geode.cache.PartitionedRegionPartialClearException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionEvent;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.distributed.internal.ClusterDistributionManager;\n+import org.apache.geode.distributed.internal.DistributionMessage;\n+import org.apache.geode.distributed.internal.DistributionMessageObserver;\n+import org.apache.geode.distributed.internal.InternalDistributedSystem;\n+import org.apache.geode.distributed.internal.membership.api.MembershipManagerHelper;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.DUnitBlackboard;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n+\n+public class PartitionedRegionClearWithAlterRegionDUnitTest implements Serializable {\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule();\n+\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+\n+  @Rule\n+  public ExecutorServiceRule executorServiceRule = new ExecutorServiceRule();\n+\n+  private VM server1;\n+\n+  private VM server2;\n+\n+  private VM server3;\n+\n+  private static volatile DUnitBlackboard blackboard;\n+\n+  private static final String REGION_NAME = \"testRegion\";\n+\n+  private static final int NUM_ENTRIES = 1000000;\n+\n+  private static final String GATE_NAME = \"ALLOW_ALTER_REGION\";\n+\n+  private void initialize() {\n+    server1 = VM.getVM(0);\n+    server2 = VM.getVM(1);\n+\n+    server1.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server2.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server1.invoke(() -> {\n+      populateRegion();\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+\n+    server2.invoke(() -> {\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheLoader() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      DistributionMessageObserver.setInstance(getDistributionMessageObserver());\n+      alterRegionSetCacheLoader();\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }\n+\n+\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheWriter() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      DistributionMessageObserver.setInstance(getDistributionMessageObserver());\n+      alterRegionSetCacheWriter();\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheListener() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      DistributionMessageObserver.setInstance(getDistributionMessageObserver());\n+      alterRegionSetCacheListener();\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileChangingEviction() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      DistributionMessageObserver.setInstance(getDistributionMessageObserver());\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      AttributesMutator attributesMutator = region.getAttributesMutator();\n+      getBlackboard().waitForGate(GATE_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxODk0Nw=="}, "originalCommit": {"oid": "a95185b4e5f14e5b93845482ddc40cd47fbb4470"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjMzNzU4OQ==", "bodyText": "There is no afterReceivedMessasge in the DistributionMessgeObserver API.\nI have added additional tests with test hook that uses beforeProcessMessage.", "url": "https://github.com/apache/geode/pull/5516#discussion_r516337589", "createdAt": "2020-11-02T23:43:24Z", "author": {"login": "jchen21"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java", "diffHunk": "@@ -0,0 +1,533 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.AttributesMutator;\n+import org.apache.geode.cache.CacheListener;\n+import org.apache.geode.cache.CacheLoader;\n+import org.apache.geode.cache.CacheLoaderException;\n+import org.apache.geode.cache.CacheWriter;\n+import org.apache.geode.cache.CacheWriterException;\n+import org.apache.geode.cache.EntryEvent;\n+import org.apache.geode.cache.ExpirationAction;\n+import org.apache.geode.cache.ExpirationAttributes;\n+import org.apache.geode.cache.LoaderHelper;\n+import org.apache.geode.cache.PartitionedRegionPartialClearException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionEvent;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.distributed.internal.ClusterDistributionManager;\n+import org.apache.geode.distributed.internal.DistributionMessage;\n+import org.apache.geode.distributed.internal.DistributionMessageObserver;\n+import org.apache.geode.distributed.internal.InternalDistributedSystem;\n+import org.apache.geode.distributed.internal.membership.api.MembershipManagerHelper;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.DUnitBlackboard;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n+\n+public class PartitionedRegionClearWithAlterRegionDUnitTest implements Serializable {\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule();\n+\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+\n+  @Rule\n+  public ExecutorServiceRule executorServiceRule = new ExecutorServiceRule();\n+\n+  private VM server1;\n+\n+  private VM server2;\n+\n+  private VM server3;\n+\n+  private static volatile DUnitBlackboard blackboard;\n+\n+  private static final String REGION_NAME = \"testRegion\";\n+\n+  private static final int NUM_ENTRIES = 1000000;\n+\n+  private static final String GATE_NAME = \"ALLOW_ALTER_REGION\";\n+\n+  private void initialize() {\n+    server1 = VM.getVM(0);\n+    server2 = VM.getVM(1);\n+\n+    server1.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server2.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server1.invoke(() -> {\n+      populateRegion();\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+\n+    server2.invoke(() -> {\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheLoader() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      DistributionMessageObserver.setInstance(getDistributionMessageObserver());\n+      alterRegionSetCacheLoader();\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }\n+\n+\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheWriter() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      DistributionMessageObserver.setInstance(getDistributionMessageObserver());\n+      alterRegionSetCacheWriter();\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheListener() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      DistributionMessageObserver.setInstance(getDistributionMessageObserver());\n+      alterRegionSetCacheListener();\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileChangingEviction() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      DistributionMessageObserver.setInstance(getDistributionMessageObserver());\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      AttributesMutator attributesMutator = region.getAttributesMutator();\n+      getBlackboard().waitForGate(GATE_NAME);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxODk0Nw=="}, "originalCommit": {"oid": "a95185b4e5f14e5b93845482ddc40cd47fbb4470"}, "originalPosition": 173}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4801, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}