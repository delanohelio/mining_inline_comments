{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExOTEyMzk1", "number": 5035, "title": "GEODE-8059: replace multiple redis set functions with one CommandFunction", "bodyText": "Thank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-05-01T00:30:19Z", "url": "https://github.com/apache/geode/pull/5035", "merged": true, "mergeCommit": {"oid": "95f0a93886ccc0f547cab141d7597ba5ecb69674"}, "closed": true, "closedAt": "2020-05-05T00:41:41Z", "author": {"login": "dschneider-pivotal"}, "timelineItems": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcc2h16AH2gAyNDExOTEyMzk1OmMzOTczYmM0ZWVkODZhYTZiYzI5OTk4OWM4OGE5ZTI3NTQ2NjcxNTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceISR4gFqTQwNTQxOTYxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c3973bc4eed86aa6bc299989c88a9e2754667159", "author": {"user": {"login": "dschneider-pivotal", "name": "Darrel Schneider"}}, "url": "https://github.com/apache/geode/commit/c3973bc4eed86aa6bc299989c88a9e2754667159", "committedDate": "2020-05-01T00:27:48Z", "message": "replaced multiple redis set function with one CommandFunction"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MDA5MTIy", "url": "https://github.com/apache/geode/pull/5035#pullrequestreview-404009122", "createdAt": "2020-05-01T03:53:18Z", "commit": {"oid": "c3973bc4eed86aa6bc299989c88a9e2754667159"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMzo1MzoxOFrOGPBcMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwNDoxMDoxN1rOGPBnjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQwNTQyNQ==", "bodyText": "I love the use of the RedisCommandType here", "url": "https://github.com/apache/geode/pull/5035#discussion_r418405425", "createdAt": "2020-05-01T03:53:18Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/CommandFunction.java", "diffHunk": "@@ -11,40 +11,55 @@\n  * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n  * or implied. See the License for the specific language governing permissions and limitations under\n  * the License.\n+ *\n  */\n \n-package org.apache.geode.redis.internal.executor.set;\n+package org.apache.geode.redis.internal.executor;\n \n import java.util.ArrayList;\n-import java.util.concurrent.atomic.AtomicBoolean;\n \n import org.apache.geode.cache.Region;\n import org.apache.geode.cache.execute.Function;\n import org.apache.geode.cache.execute.FunctionContext;\n import org.apache.geode.cache.execute.ResultSender;\n import org.apache.geode.internal.cache.execute.RegionFunctionContextImpl;\n import org.apache.geode.redis.internal.ByteArrayWrapper;\n+import org.apache.geode.redis.internal.RedisCommandType;\n+import org.apache.geode.redis.internal.executor.set.DeltaSet;\n \n-class SremFunction implements Function<ArrayList<ByteArrayWrapper>> {\n+public class CommandFunction implements Function<Object[]> {\n \n-  public static final String ID = \"SREM_FUNCTION\";\n+  public static final String ID = \"REDIS_COMMAND_FUNCTION\";\n \n   @SuppressWarnings(\"unchecked\")\n   @Override\n-  public void execute(FunctionContext<ArrayList<ByteArrayWrapper>> context) {\n+  public void execute(FunctionContext<Object[]> context) {\n     RegionFunctionContextImpl regionFunctionContext =\n         (RegionFunctionContextImpl) context;\n     ByteArrayWrapper key =\n         (ByteArrayWrapper) regionFunctionContext.getFilter().iterator().next();\n     Region<ByteArrayWrapper, DeltaSet> localRegion =\n         regionFunctionContext.getLocalDataSet(regionFunctionContext.getDataSet());\n-    ArrayList<ByteArrayWrapper> membersToRemove =\n-        (ArrayList<ByteArrayWrapper>) regionFunctionContext.getArguments();\n-    AtomicBoolean setWasDeleted = new AtomicBoolean();\n-    long membersRemoved = DeltaSet.srem(localRegion, key, membersToRemove, setWasDeleted);\n-    ResultSender<Long> resultSender = regionFunctionContext.getResultSender();\n-    resultSender.sendResult(membersRemoved);\n-    resultSender.lastResult(setWasDeleted.get() ? 1L : 0L);\n+    ResultSender resultSender = regionFunctionContext.getResultSender();\n+    Object[] args = context.getArguments();\n+    RedisCommandType command = (RedisCommandType) args[0];\n+    ArrayList<ByteArrayWrapper> membersToAdd = (ArrayList<ByteArrayWrapper>) args[1];\n+    switch (command) {\n+      case SADD:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3973bc4eed86aa6bc299989c88a9e2754667159"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQwNjE3Ng==", "bodyText": "I think it's odd that the Function abstraction bleeds into DeltaSet via the ResultSender.  It restricts DeltaSet to only run in the context of functions, and adds more responsibility to the class.  What are your thoughts?\nSome alternatives\nSome kind of Decorator Pattern to separate the responsibilities, but still keep the function code really simple\npassing in a more generic consumer into the DeltaSet...that would provide some isolation, but allow for this more asynchronous style of programming.  We could define the consumer in the function, so the resultsender object stays encapsulated in the function.", "url": "https://github.com/apache/geode/pull/5035#discussion_r418406176", "createdAt": "2020-05-01T03:57:23Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/DeltaSet.java", "diffHunk": "@@ -30,10 +30,37 @@\n import org.apache.geode.Delta;\n import org.apache.geode.InvalidDeltaException;\n import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.execute.ResultSender;\n import org.apache.geode.redis.internal.ByteArrayWrapper;\n \n public class DeltaSet implements Delta, DataSerializable {\n \n+  public static void sadd(ResultSender<Long> resultSender,\n+      Region<ByteArrayWrapper, DeltaSet> localRegion, ByteArrayWrapper key,\n+      ArrayList<ByteArrayWrapper> membersToAdd) {\n+    resultSender.lastResult(sadd(localRegion, key, membersToAdd));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3973bc4eed86aa6bc299989c88a9e2754667159"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQwNzk4Ng==", "bodyText": "this line is duplicated in each function. I don't think the resultcollector abstraction really makes sense in our case, because we are really trying to just call this on one server and get back one result.  Can we short circuit this by just calling this  results.getResult().get(0) in executeFunction()", "url": "https://github.com/apache/geode/pull/5035#discussion_r418407986", "createdAt": "2020-05-01T04:08:21Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/GeodeRedisSetWithFunctions.java", "diffHunk": "@@ -40,30 +47,18 @@ public GeodeRedisSetWithFunctions(ByteArrayWrapper key,\n   }\n \n   public static void registerFunctions() {\n-    FunctionService.registerFunction(new SaddFunction());\n-    FunctionService.registerFunction(new SremFunction());\n-    FunctionService.registerFunction(new SmembersFunction());\n-    FunctionService.registerFunction(new SdelFunction());\n+    FunctionService.registerFunction(new CommandFunction());\n   }\n \n   @Override\n   public long sadd(ArrayList<ByteArrayWrapper> membersToAdd) {\n-    ResultCollector<ArrayList<ByteArrayWrapper>, List<Long>> results = FunctionService\n-        .onRegion(region)\n-        .withFilter(Collections.singleton(key))\n-        .setArguments(membersToAdd)\n-        .execute(SaddFunction.ID);\n-\n+    ResultCollector<Object[], List<Long>> results = executeFunction(SADD, membersToAdd);\n     return results.getResult().get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3973bc4eed86aa6bc299989c88a9e2754667159"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODQwODMzNQ==", "bodyText": "Could we just send back an object like SremResult?  this code is dependent on ordering of calls to \"sendResult\" when it doesn't need to be.", "url": "https://github.com/apache/geode/pull/5035#discussion_r418408335", "createdAt": "2020-05-01T04:10:17Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/GeodeRedisSetWithFunctions.java", "diffHunk": "@@ -40,30 +47,18 @@ public GeodeRedisSetWithFunctions(ByteArrayWrapper key,\n   }\n \n   public static void registerFunctions() {\n-    FunctionService.registerFunction(new SaddFunction());\n-    FunctionService.registerFunction(new SremFunction());\n-    FunctionService.registerFunction(new SmembersFunction());\n-    FunctionService.registerFunction(new SdelFunction());\n+    FunctionService.registerFunction(new CommandFunction());\n   }\n \n   @Override\n   public long sadd(ArrayList<ByteArrayWrapper> membersToAdd) {\n-    ResultCollector<ArrayList<ByteArrayWrapper>, List<Long>> results = FunctionService\n-        .onRegion(region)\n-        .withFilter(Collections.singleton(key))\n-        .setArguments(membersToAdd)\n-        .execute(SaddFunction.ID);\n-\n+    ResultCollector<Object[], List<Long>> results = executeFunction(SADD, membersToAdd);\n     return results.getResult().get(0);\n   }\n \n   @Override\n   public long srem(ArrayList<ByteArrayWrapper> membersToRemove, AtomicBoolean setWasDeleted) {\n-    ResultCollector<ArrayList<ByteArrayWrapper>, List<Long>> results = FunctionService\n-        .onRegion(region)\n-        .withFilter(Collections.singleton(key))\n-        .setArguments(membersToRemove)\n-        .execute(SremFunction.ID);\n+    ResultCollector<Object[], List<Long>> results = executeFunction(SREM, membersToRemove);\n     List<Long> resultList = results.getResult();\n     long membersRemoved = resultList.get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3973bc4eed86aa6bc299989c88a9e2754667159"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NDE5NjE4", "url": "https://github.com/apache/geode/pull/5035#pullrequestreview-405419618", "createdAt": "2020-05-04T23:43:01Z", "commit": {"oid": "c3973bc4eed86aa6bc299989c88a9e2754667159"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4649, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}