{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NzY0MDg0", "number": 5577, "title": "GEODE-7845 blocking PR region clear if one or more server versions are too old", "bodyText": "", "createdAt": "2020-09-30T20:18:38Z", "url": "https://github.com/apache/geode/pull/5577", "merged": true, "mergeCommit": {"oid": "55550d31e2fcf63c22eef9153bdc0ac3ec4ba575"}, "closed": true, "closedAt": "2020-10-13T17:10:26Z", "author": {"login": "mhansonp"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOEtCHgFqTQ5OTg1ODk2OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdSLsuogFqTUwNzY1NjE5Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5ODU4OTY5", "url": "https://github.com/apache/geode/pull/5577#pullrequestreview-499858969", "createdAt": "2020-09-30T22:35:39Z", "commit": {"oid": "73e63b73d4c41ac0930053c0376e42dec1dd3efa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjozNTozOVrOHaxq6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjozOTowN1rOHaxvkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzgzODgyNw==", "bodyText": "I think the PR specific exceptions should go in the org.apache.geode.cache.partition package.", "url": "https://github.com/apache/geode/pull/5577#discussion_r497838827", "createdAt": "2020-09-30T22:35:39Z", "author": {"login": "kirklund"}, "path": "geode-core/src/main/java/org/apache/geode/cache/PartitionedRegionVersionException.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73e63b73d4c41ac0930053c0376e42dec1dd3efa"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MDAxOA==", "bodyText": "Optional: We could have allServerVersionsSupportPartitionRegionClear or whatever it's named return a list of incompatible servers. Then you could format a message for PartitionedRegionVersionException which lists out the server names that that were incompatible.", "url": "https://github.com/apache/geode/pull/5577#discussion_r497840018", "createdAt": "2020-09-30T22:39:07Z", "author": {"login": "kirklund"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java", "diffHunk": "@@ -362,6 +367,10 @@ void doClear(RegionEventImpl regionEvent, boolean cacheWrite) {\n       try {\n         Set<Integer> bucketsCleared = clearRegion(regionEvent);\n \n+        if (!partitionedRegion.allServerVersionsSupportPartitionRegionClear()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73e63b73d4c41ac0930053c0376e42dec1dd3efa"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMzU0OTcz", "url": "https://github.com/apache/geode/pull/5577#pullrequestreview-501354973", "createdAt": "2020-10-02T18:23:49Z", "commit": {"oid": "ee7ff58681e6ffb8b77b895cc35334623260c119"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODoyMzo0OVrOHb3cbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxODozMTozOVrOHb3sAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4MTk5Ng==", "bodyText": "I am not very familiar with how PR is implemented, but is getTotalNumberOfBuckets returns the bucket counts for this server only or for the entire region?", "url": "https://github.com/apache/geode/pull/5577#discussion_r498981996", "createdAt": "2020-10-02T18:23:49Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegion.java", "diffHunk": "@@ -5328,6 +5328,22 @@ public int getTotalNumberOfBuckets() {\n     return this.totalNumberOfBuckets;\n   }\n \n+  /**\n+   * This method returns a boolean to indicate if all server versions support Partition Region clear\n+   */\n+  public boolean allServerVersionsSupportPartitionRegionClear() {\n+    for (int i = 0; i < getTotalNumberOfBuckets(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7ff58681e6ffb8b77b895cc35334623260c119"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODk4NTk4Nw==", "bodyText": "why are we doing the check here again? I though we only need to check it before we send out the message.", "url": "https://github.com/apache/geode/pull/5577#discussion_r498985987", "createdAt": "2020-10-02T18:31:39Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java", "diffHunk": "@@ -362,6 +367,10 @@ void doClear(RegionEventImpl regionEvent, boolean cacheWrite) {\n       try {\n         Set<Integer> bucketsCleared = clearRegion(regionEvent);\n \n+        if (!partitionedRegion.allServerVersionsSupportPartitionRegionClear()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MDAxOA=="}, "originalCommit": {"oid": "73e63b73d4c41ac0930053c0376e42dec1dd3efa"}, "originalPosition": 46}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee7ff58681e6ffb8b77b895cc35334623260c119", "author": {"user": {"login": "mhansonp", "name": null}}, "url": "https://github.com/apache/geode/commit/ee7ff58681e6ffb8b77b895cc35334623260c119", "committedDate": "2020-10-02T06:05:52Z", "message": "GEODE-7845: client implementation\n\n- if a server is running an old version when a PR clear is invoked\nby the client, the client will receive a ServerOperationException\nwith a cause of PartitionedRegionVersionException."}, "afterCommit": {"oid": "f7cacfed33f2075ace54789f62eae112de9ffbc8", "author": {"user": {"login": "mhansonp", "name": null}}, "url": "https://github.com/apache/geode/commit/f7cacfed33f2075ace54789f62eae112de9ffbc8", "committedDate": "2020-10-05T17:31:06Z", "message": "GEODE-7845: client implementation\n\n- if a server is running an old version when a PR clear is invoked\nby the client, the client will receive a ServerOperationException\nwith a cause of PartitionedRegionVersionException."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d43a0ad7af6953b0e619713a283f27d32b60721", "author": {"user": {"login": "mhansonp", "name": null}}, "url": "https://github.com/apache/geode/commit/6d43a0ad7af6953b0e619713a283f27d32b60721", "committedDate": "2020-10-05T18:08:32Z", "message": "GEODE-7845: client implementation\n\n- if a server is running an old version when a PR clear is invoked\nby the client, the client will receive a ServerOperationException\nwith a cause of PartitionedRegionVersionException."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b38807d21848acf3572a1ec8dfe45c62d1871c2", "author": {"user": {"login": "mhansonp", "name": null}}, "url": "https://github.com/apache/geode/commit/7b38807d21848acf3572a1ec8dfe45c62d1871c2", "committedDate": "2020-10-05T18:30:40Z", "message": "GEODE-7845: cleanup"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f7cacfed33f2075ace54789f62eae112de9ffbc8", "author": {"user": {"login": "mhansonp", "name": null}}, "url": "https://github.com/apache/geode/commit/f7cacfed33f2075ace54789f62eae112de9ffbc8", "committedDate": "2020-10-05T17:31:06Z", "message": "GEODE-7845: client implementation\n\n- if a server is running an old version when a PR clear is invoked\nby the client, the client will receive a ServerOperationException\nwith a cause of PartitionedRegionVersionException."}, "afterCommit": {"oid": "7b38807d21848acf3572a1ec8dfe45c62d1871c2", "author": {"user": {"login": "mhansonp", "name": null}}, "url": "https://github.com/apache/geode/commit/7b38807d21848acf3572a1ec8dfe45c62d1871c2", "committedDate": "2020-10-05T18:30:40Z", "message": "GEODE-7845: cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e72c30e2db1a33a5c887cd39b138ca62b9b20a95", "author": {"user": {"login": "mhansonp", "name": null}}, "url": "https://github.com/apache/geode/commit/e72c30e2db1a33a5c887cd39b138ca62b9b20a95", "committedDate": "2020-10-08T21:21:47Z", "message": "GEODE-7845: Further Cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1NjAyMjQy", "url": "https://github.com/apache/geode/pull/5577#pullrequestreview-505602242", "createdAt": "2020-10-09T11:52:41Z", "commit": {"oid": "e72c30e2db1a33a5c887cd39b138ca62b9b20a95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMTo1Mjo0MVrOHfGhUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQxMTo1Mjo0MVrOHfGhUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjM3NDczOA==", "bodyText": "The exception name seems a bit miss-leading to me, the \"actual problem\" is the version of the members on which the partition region is hosted, not the region itself. Maybe UnsupportedVersionException, IncompatibleVersionException or something similar?.\nIt would also be good to include at least the id or name of one of the members that's running an unsupported version within the exception message, it will make the user's troubleshooting experience a lot better.", "url": "https://github.com/apache/geode/pull/5577#discussion_r502374738", "createdAt": "2020-10-09T11:52:41Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/cache/PartitionedRegionVersionException.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache;\n+\n+/**\n+ * Indicates a failure to perform an operation on a Partitioned Region due to\n+ * server versions not meeting requirements.\n+ *\n+ * @since GemFire 5.1\n+ */\n+public class PartitionedRegionVersionException extends CacheRuntimeException {\n+  private static final long serialVersionUID = -3004093739855972548L;\n+\n+  public PartitionedRegionVersionException() {\n+    super(\"A server's version was too old to a partition region clear\");\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e72c30e2db1a33a5c887cd39b138ca62b9b20a95"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1ODkwNDUw", "url": "https://github.com/apache/geode/pull/5577#pullrequestreview-505890450", "createdAt": "2020-10-09T18:08:39Z", "commit": {"oid": "e72c30e2db1a33a5c887cd39b138ca62b9b20a95"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2ODA5MDAz", "url": "https://github.com/apache/geode/pull/5577#pullrequestreview-506809003", "createdAt": "2020-10-12T17:46:39Z", "commit": {"oid": "e72c30e2db1a33a5c887cd39b138ca62b9b20a95"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo0NjozOVrOHgH1Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzo0NjozOVrOHgH1Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0NDgxMQ==", "bodyText": "would be nice to have the exception tell which servers are outdated as a verification.", "url": "https://github.com/apache/geode/pull/5577#discussion_r503444811", "createdAt": "2020-10-12T17:46:39Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/upgradeTest/java/org/apache/geode/internal/cache/rollingupgrade/RollingUpgradePartitionRegionClearMixedServerPartitionedRegion.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.rollingupgrade;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+\n+import java.io.File;\n+import java.lang.reflect.Constructor;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameter;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.junit.runners.Parameterized.UseParametersRunnerFactory;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.GemFireCache;\n+import org.apache.geode.cache.PartitionedRegionVersionException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionFactory;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.client.ServerOperationException;\n+import org.apache.geode.cache.server.CacheServer;\n+import org.apache.geode.distributed.DistributedSystem;\n+import org.apache.geode.distributed.internal.DistributionConfig;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.internal.cache.GemFireCacheImpl;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.logging.internal.log4j.api.LogService;\n+import org.apache.geode.test.dunit.DistributedTestUtils;\n+import org.apache.geode.test.dunit.Host;\n+import org.apache.geode.test.dunit.IgnoredException;\n+import org.apache.geode.test.dunit.Invoke;\n+import org.apache.geode.test.dunit.NetworkUtils;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.internal.DUnitLauncher;\n+import org.apache.geode.test.dunit.internal.JUnit4DistributedTestCase;\n+import org.apache.geode.test.junit.runners.CategoryWithParameterizedRunnerFactory;\n+import org.apache.geode.test.version.VersionManager;\n+\n+@RunWith(Parameterized.class)\n+@UseParametersRunnerFactory(CategoryWithParameterizedRunnerFactory.class)\n+public class RollingUpgradePartitionRegionClearMixedServerPartitionedRegion\n+    extends JUnit4DistributedTestCase {\n+\n+  protected static final Logger logger = LogService.getLogger();\n+  protected static GemFireCache cache;\n+  protected static ClientCache clientcache;\n+\n+  @Parameter\n+  public String oldVersion;\n+\n+  @Parameters(name = \"from_v{0}\")\n+  public static Collection<String> data() {\n+    List<String> result = VersionManager.getInstance().getVersionsWithoutCurrent();\n+    if (result.size() < 1) {\n+      throw new RuntimeException(\"No older versions of Geode were found to test against\");\n+    } else {\n+      System.out.println(\"running against these versions: \" + result);\n+    }\n+    return result;\n+  }\n+\n+  @Test\n+  public void testPutAndGetMixedServerPartitionedRegion() throws Exception {\n+    doTestPutAndGetMixedServers(oldVersion);\n+  }\n+\n+  /**\n+   * This test starts up multiple servers from the current code base and multiple servers from the\n+   * old version and executes puts and gets on a new server and old server and verifies that the\n+   * results are present. Note that the puts have overlapping region keys just to test new puts and\n+   * replaces\n+   */\n+  void doTestPutAndGetMixedServers(String oldVersion)\n+      throws Exception {\n+    VM currentServer1 = VM.getVM(VersionManager.CURRENT_VERSION, 0);\n+    VM oldServerAndLocator = VM.getVM(oldVersion, 1);\n+    VM currentServer2 = VM.getVM(VersionManager.CURRENT_VERSION, 2);\n+    VM oldServer2 = VM.getVM(oldVersion, 3);\n+\n+    String regionName = \"aRegion\";\n+\n+    final String serverHostName = NetworkUtils.getServerHostName();\n+    final int port = AvailablePortHelper.getRandomAvailableTCPPort();\n+    oldServerAndLocator.invoke(() -> DistributedTestUtils.deleteLocatorStateFile(port));\n+    try {\n+      final Properties props = getSystemProperties();\n+      props.remove(DistributionConfig.LOCATORS_NAME);\n+\n+      // Fire up the locator and server\n+      oldServerAndLocator.invoke(() -> {\n+        props.put(DistributionConfig.START_LOCATOR_NAME,\n+            \"\" + serverHostName + \"[\" + port + \"]\");\n+        props.put(DistributionConfig.ENABLE_CLUSTER_CONFIGURATION_NAME, \"false\");\n+        cache = createCache(props);\n+        Thread.sleep(5000); // bug in 1.0 - cluster config service not immediately available\n+      });\n+\n+      props.put(DistributionConfig.LOCATORS_NAME, serverHostName + \"[\" + port + \"]\");\n+\n+      // create the cache in all the server VMs.\n+      for (VM vm : Arrays.asList(oldServer2, currentServer1, currentServer2)) {\n+        vm.invoke(() -> {\n+          cache = createCache(props);\n+        });\n+      }\n+      // spin up current version servers\n+      for (VM vm : Arrays.asList(currentServer1, currentServer2)) {\n+        vm.invoke(\n+            () -> assertVersion(cache, VersionManager.getInstance().getCurrentVersionOrdinal()));\n+      }\n+\n+      // create region\n+      for (VM vm : Arrays.asList(currentServer1, currentServer2, oldServerAndLocator, oldServer2)) {\n+        vm.invoke(() -> createRegion(cache, regionName));\n+      }\n+\n+      // put some data in the region to make sure there is something to clear.\n+      putDataSerializableAndVerify(currentServer1, regionName, currentServer2, oldServerAndLocator,\n+          oldServer2);\n+\n+      // invoke Partition Region Clear and verify we didn't touch the old servers.\n+\n+      currentServer1.invoke(() -> {\n+        assertRegionExists(cache, regionName);\n+        PartitionedRegion region = (PartitionedRegion) cache.getRegion(regionName);\n+\n+        Throwable thrown = catchThrowable(region::clear);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e72c30e2db1a33a5c887cd39b138ca62b9b20a95"}, "originalPosition": 154}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "116d82d204d3344b1432f4fc8be213dd79884b7a", "author": {"user": {"login": "mhansonp", "name": null}}, "url": "https://github.com/apache/geode/commit/116d82d204d3344b1432f4fc8be213dd79884b7a", "committedDate": "2020-10-12T23:08:15Z", "message": "GEODE-7845: Changing exception thrown to be more detailed and better named."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2OTcwNzAx", "url": "https://github.com/apache/geode/pull/5577#pullrequestreview-506970701", "createdAt": "2020-10-12T23:15:36Z", "commit": {"oid": "116d82d204d3344b1432f4fc8be213dd79884b7a"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzoxNTozN1rOHgQFoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQyMzoyMjoxN1rOHgQMlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4MDA2NQ==", "bodyText": "this is not correct since this is a new exception", "url": "https://github.com/apache/geode/pull/5577#discussion_r503580065", "createdAt": "2020-10-12T23:15:37Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/main/java/org/apache/geode/cache/ServerVersionMismatchException.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache;\n+\n+import java.util.List;\n+\n+/**\n+ * Indicates a failure to perform an operation on a Partitioned Region due to\n+ * server versions not meeting requirements.\n+ *\n+ * @since GemFire 5.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116d82d204d3344b1432f4fc8be213dd79884b7a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4MDcyMw==", "bodyText": "this is still throwing the old exception?", "url": "https://github.com/apache/geode/pull/5577#discussion_r503580723", "createdAt": "2020-10-12T23:18:07Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegionClear.java", "diffHunk": "@@ -288,8 +292,13 @@ protected void releaseClearLockLocal() {\n       return bucketsOperated;\n     }\n \n+    if (!partitionedRegion.allServerVersionsSupportPartitionRegionClear()) {\n+      throw new PartitionedRegionVersionException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116d82d204d3344b1432f4fc8be213dd79884b7a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4MTYwOA==", "bodyText": "probably would be a good idea for this exception to only take a string message as an argument. Then situations using this exception is free to construct their own messages.", "url": "https://github.com/apache/geode/pull/5577#discussion_r503581608", "createdAt": "2020-10-12T23:21:24Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/main/java/org/apache/geode/cache/ServerVersionMismatchException.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache;\n+\n+import java.util.List;\n+\n+/**\n+ * Indicates a failure to perform an operation on a Partitioned Region due to\n+ * server versions not meeting requirements.\n+ *\n+ * @since GemFire 5.1\n+ */\n+public class ServerVersionMismatchException extends CacheRuntimeException {\n+  private static final long serialVersionUID = -3004093739855972548L;\n+\n+  public ServerVersionMismatchException(List<String> members, String featureName,\n+                                        String version) {\n+    super(\"A server's \" + members + \" version was too old (< \" + version + \") for : \" + featureName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "116d82d204d3344b1432f4fc8be213dd79884b7a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzU4MTg0NQ==", "bodyText": "would be a good idea to verify that the message contains those two server names that has the old version.", "url": "https://github.com/apache/geode/pull/5577#discussion_r503581845", "createdAt": "2020-10-12T23:22:17Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/upgradeTest/java/org/apache/geode/internal/cache/rollingupgrade/RollingUpgradePartitionRegionClearMixedServerPartitionedRegion.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.rollingupgrade;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+\n+import java.io.File;\n+import java.lang.reflect.Constructor;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.logging.log4j.Logger;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameter;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.junit.runners.Parameterized.UseParametersRunnerFactory;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.GemFireCache;\n+import org.apache.geode.cache.PartitionedRegionVersionException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionFactory;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.client.ServerOperationException;\n+import org.apache.geode.cache.server.CacheServer;\n+import org.apache.geode.distributed.DistributedSystem;\n+import org.apache.geode.distributed.internal.DistributionConfig;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.internal.cache.GemFireCacheImpl;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.logging.internal.log4j.api.LogService;\n+import org.apache.geode.test.dunit.DistributedTestUtils;\n+import org.apache.geode.test.dunit.Host;\n+import org.apache.geode.test.dunit.IgnoredException;\n+import org.apache.geode.test.dunit.Invoke;\n+import org.apache.geode.test.dunit.NetworkUtils;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.internal.DUnitLauncher;\n+import org.apache.geode.test.dunit.internal.JUnit4DistributedTestCase;\n+import org.apache.geode.test.junit.runners.CategoryWithParameterizedRunnerFactory;\n+import org.apache.geode.test.version.VersionManager;\n+\n+@RunWith(Parameterized.class)\n+@UseParametersRunnerFactory(CategoryWithParameterizedRunnerFactory.class)\n+public class RollingUpgradePartitionRegionClearMixedServerPartitionedRegion\n+    extends JUnit4DistributedTestCase {\n+\n+  protected static final Logger logger = LogService.getLogger();\n+  protected static GemFireCache cache;\n+  protected static ClientCache clientcache;\n+\n+  @Parameter\n+  public String oldVersion;\n+\n+  @Parameters(name = \"from_v{0}\")\n+  public static Collection<String> data() {\n+    List<String> result = VersionManager.getInstance().getVersionsWithoutCurrent();\n+    if (result.size() < 1) {\n+      throw new RuntimeException(\"No older versions of Geode were found to test against\");\n+    } else {\n+      System.out.println(\"running against these versions: \" + result);\n+    }\n+    return result;\n+  }\n+\n+  @Test\n+  public void testPutAndGetMixedServerPartitionedRegion() throws Exception {\n+    doTestPutAndGetMixedServers(oldVersion);\n+  }\n+\n+  /**\n+   * This test starts up multiple servers from the current code base and multiple servers from the\n+   * old version and executes puts and gets on a new server and old server and verifies that the\n+   * results are present. Note that the puts have overlapping region keys just to test new puts and\n+   * replaces\n+   */\n+  void doTestPutAndGetMixedServers(String oldVersion)\n+      throws Exception {\n+    VM currentServer1 = VM.getVM(VersionManager.CURRENT_VERSION, 0);\n+    VM oldServerAndLocator = VM.getVM(oldVersion, 1);\n+    VM currentServer2 = VM.getVM(VersionManager.CURRENT_VERSION, 2);\n+    VM oldServer2 = VM.getVM(oldVersion, 3);\n+\n+    String regionName = \"aRegion\";\n+\n+    final String serverHostName = NetworkUtils.getServerHostName();\n+    final int port = AvailablePortHelper.getRandomAvailableTCPPort();\n+    oldServerAndLocator.invoke(() -> DistributedTestUtils.deleteLocatorStateFile(port));\n+    try {\n+      final Properties props = getSystemProperties();\n+      props.remove(DistributionConfig.LOCATORS_NAME);\n+\n+      // Fire up the locator and server\n+      oldServerAndLocator.invoke(() -> {\n+        props.put(DistributionConfig.START_LOCATOR_NAME,\n+            \"\" + serverHostName + \"[\" + port + \"]\");\n+        props.put(DistributionConfig.ENABLE_CLUSTER_CONFIGURATION_NAME, \"false\");\n+        cache = createCache(props);\n+        Thread.sleep(5000); // bug in 1.0 - cluster config service not immediately available\n+      });\n+\n+      props.put(DistributionConfig.LOCATORS_NAME, serverHostName + \"[\" + port + \"]\");\n+\n+      // create the cache in all the server VMs.\n+      for (VM vm : Arrays.asList(oldServer2, currentServer1, currentServer2)) {\n+        vm.invoke(() -> {\n+          cache = createCache(props);\n+        });\n+      }\n+      // spin up current version servers\n+      for (VM vm : Arrays.asList(currentServer1, currentServer2)) {\n+        vm.invoke(\n+            () -> assertVersion(cache, VersionManager.getInstance().getCurrentVersionOrdinal()));\n+      }\n+\n+      // create region\n+      for (VM vm : Arrays.asList(currentServer1, currentServer2, oldServerAndLocator, oldServer2)) {\n+        vm.invoke(() -> createRegion(cache, regionName));\n+      }\n+\n+      // put some data in the region to make sure there is something to clear.\n+      putDataSerializableAndVerify(currentServer1, regionName, currentServer2, oldServerAndLocator,\n+          oldServer2);\n+\n+      // invoke Partition Region Clear and verify we didn't touch the old servers.\n+\n+      currentServer1.invoke(() -> {\n+        assertRegionExists(cache, regionName);\n+        PartitionedRegion region = (PartitionedRegion) cache.getRegion(regionName);\n+\n+        Throwable thrown = catchThrowable(region::clear);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ0NDgxMQ=="}, "originalCommit": {"oid": "e72c30e2db1a33a5c887cd39b138ca62b9b20a95"}, "originalPosition": 154}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aa76f2dbd7297987ac98d02c50d982efb331167", "author": {"user": {"login": "mhansonp", "name": null}}, "url": "https://github.com/apache/geode/commit/0aa76f2dbd7297987ac98d02c50d982efb331167", "committedDate": "2020-10-12T23:30:20Z", "message": "Bad rebase fix"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "569a5a7160a35fbb79b7bf0187f50a589e67f687", "author": {"user": {"login": "mhansonp", "name": null}}, "url": "https://github.com/apache/geode/commit/569a5a7160a35fbb79b7bf0187f50a589e67f687", "committedDate": "2020-10-12T23:28:42Z", "message": "Bad merge fix"}, "afterCommit": {"oid": "0aa76f2dbd7297987ac98d02c50d982efb331167", "author": {"user": {"login": "mhansonp", "name": null}}, "url": "https://github.com/apache/geode/commit/0aa76f2dbd7297987ac98d02c50d982efb331167", "committedDate": "2020-10-12T23:30:20Z", "message": "Bad rebase fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e536c37a2472f79e87c1c24a7c604f0db3a3c97", "author": {"user": {"login": "mhansonp", "name": null}}, "url": "https://github.com/apache/geode/commit/3e536c37a2472f79e87c1c24a7c604f0db3a3c97", "committedDate": "2020-10-13T06:13:32Z", "message": "GEODE-7845: A few more fixes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA3NjU2MTky", "url": "https://github.com/apache/geode/pull/5577#pullrequestreview-507656192", "createdAt": "2020-10-13T17:05:41Z", "commit": {"oid": "3e536c37a2472f79e87c1c24a7c604f0db3a3c97"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4056, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}