{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MDgyOTYz", "number": 4640, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTo1MzoyMVrODbReBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToxNjozNlrODbxa7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTI0MzU3OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/GeodeRedisService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTo1MzoyMVrOFiqWTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDoyNDo0MFrOFjKKYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg4OTc0MA==", "bodyText": "Is it possible that the CACHE_SERVICE_CREATE event is already triggered before we call the init method, and then we would just miss it entirely?", "url": "https://github.com/apache/geode/pull/4640#discussion_r371889740", "createdAt": "2020-01-28T15:53:21Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/GeodeRedisService.java", "diffHunk": "@@ -42,6 +45,13 @@ public void close() {\n     stopRedisServer();\n   }\n \n+  @Override\n+  public void handleEvent(ResourceEvent event, Object resource) {\n+    if (event.equals(ResourceEvent.CACHE_SERVICE_CREATE) && resource == this) {\n+      startRedisServer(cache);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f729a0d05329d7239087c993598d1ce32342c5b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQxMDk3Ng==", "bodyText": "I've added a different event now.", "url": "https://github.com/apache/geode/pull/4640#discussion_r372410976", "createdAt": "2020-01-29T14:24:40Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/GeodeRedisService.java", "diffHunk": "@@ -42,6 +45,13 @@ public void close() {\n     stopRedisServer();\n   }\n \n+  @Override\n+  public void handleEvent(ResourceEvent event, Object resource) {\n+    if (event.equals(ResourceEvent.CACHE_SERVICE_CREATE) && resource == this) {\n+      startRedisServer(cache);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg4OTc0MA=="}, "originalCommit": {"oid": "5f729a0d05329d7239087c993598d1ce32342c5b"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTI1MjU4OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/GeodeRedisService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTo1NToyM1rOFiqcAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTo1NToyM1rOFiqcAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg5MTIwMA==", "bodyText": "Should stopRedisServer be invoked in a similar way, i.e. by listening to the cache lifecycle events?", "url": "https://github.com/apache/geode/pull/4640#discussion_r371891200", "createdAt": "2020-01-28T15:55:23Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/GeodeRedisService.java", "diffHunk": "@@ -42,6 +45,13 @@ public void close() {\n     stopRedisServer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f729a0d05329d7239087c993598d1ce32342c5b"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDQ3ODU1OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisUsePersistentRegionDUnitTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwMToxNjozNlrOFjc1IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQxNDozNTo1OVrOFjtJyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNjgzMg==", "bodyText": "Does this actually test that the data structure was persistent? Maybe it would be better to do a restart, or assert on the underlying region type?", "url": "https://github.com/apache/geode/pull/4640#discussion_r372716832", "createdAt": "2020-01-30T01:16:36Z", "author": {"login": "upthewaterspout"}, "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisUsePersistentRegionDUnitTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.test.junit.rules.ServerStarterRule;\n+\n+public class RedisUsePersistentRegionDUnitTest {\n+\n+  @Rule\n+  public final ServerStarterRule server = new ServerStarterRule();\n+\n+  @Test\n+  public void startRedisWithPersistentRegion() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d564a1c201ee390701242ee6bab23c468fd3768"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjk4NDI2Ng==", "bodyText": "Done", "url": "https://github.com/apache/geode/pull/4640#discussion_r372984266", "createdAt": "2020-01-30T14:35:59Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisUsePersistentRegionDUnitTest.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.test.junit.rules.ServerStarterRule;\n+\n+public class RedisUsePersistentRegionDUnitTest {\n+\n+  @Rule\n+  public final ServerStarterRule server = new ServerStarterRule();\n+\n+  @Test\n+  public void startRedisWithPersistentRegion() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjcxNjgzMg=="}, "originalCommit": {"oid": "5d564a1c201ee390701242ee6bab23c468fd3768"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3731, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}