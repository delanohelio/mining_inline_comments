{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NjQ3NTQ4", "number": 5516, "title": "GEODE-7679 Partitioned Region clear is successful while region is being altered", "bodyText": "Thank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-09-16T00:17:52Z", "url": "https://github.com/apache/geode/pull/5516", "merged": true, "mergeCommit": {"oid": "1d0d1de0d26853ca771be4da65f02244037ad6a3"}, "closed": true, "closedAt": "2020-11-03T17:57:49Z", "author": {"login": "jchen21"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLtVwxAFqTQ5NDcxMTkyMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdY8530AFqTUyMjc0MTExNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NzExOTIx", "url": "https://github.com/apache/geode/pull/5516#pullrequestreview-494711921", "createdAt": "2020-09-23T14:18:50Z", "commit": {"oid": "3c57ae5da6b76b1ba053f44ca946369880b39429"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDoxODo1MFrOHWw3Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNDoxOToyMlrOHWw40A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYzMTI3MQ==", "bodyText": "do you need to add some verification code to verify that region is cleared and altered?", "url": "https://github.com/apache/geode/pull/5516#discussion_r493631271", "createdAt": "2020-09-23T14:18:50Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java", "diffHunk": "@@ -0,0 +1,424 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.AttributesMutator;\n+import org.apache.geode.cache.CacheListener;\n+import org.apache.geode.cache.CacheLoader;\n+import org.apache.geode.cache.CacheLoaderException;\n+import org.apache.geode.cache.CacheWriter;\n+import org.apache.geode.cache.CacheWriterException;\n+import org.apache.geode.cache.EntryEvent;\n+import org.apache.geode.cache.ExpirationAction;\n+import org.apache.geode.cache.ExpirationAttributes;\n+import org.apache.geode.cache.LoaderHelper;\n+import org.apache.geode.cache.PartitionedRegionPartialClearException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionEvent;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.distributed.internal.DistributionMessageObserver;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n+\n+public class PartitionedRegionClearWithAlterRegionDUnitTest implements Serializable {\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule();\n+\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+\n+  @Rule\n+  public ExecutorServiceRule executorServiceRule = new ExecutorServiceRule();\n+\n+  private VM server1;\n+\n+  private VM server2;\n+\n+  private VM server3;\n+\n+  private static final String REGION_NAME = \"testRegion\";\n+\n+  private static final int NUM_ENTRIES = 1000000;\n+\n+  private void initialize() {\n+    server1 = VM.getVM(0);\n+    server2 = VM.getVM(1);\n+\n+    server1.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server2.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server1.invoke(() -> {\n+      populateRegion();\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+\n+    server2.invoke(() -> {\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheLoader() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      alterRegionSetCacheLoader();\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c57ae5da6b76b1ba053f44ca946369880b39429"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzYzMTY5Ng==", "bodyText": "same thing, probably some verification code here and in other tests", "url": "https://github.com/apache/geode/pull/5516#discussion_r493631696", "createdAt": "2020-09-23T14:19:22Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java", "diffHunk": "@@ -0,0 +1,424 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.AttributesMutator;\n+import org.apache.geode.cache.CacheListener;\n+import org.apache.geode.cache.CacheLoader;\n+import org.apache.geode.cache.CacheLoaderException;\n+import org.apache.geode.cache.CacheWriter;\n+import org.apache.geode.cache.CacheWriterException;\n+import org.apache.geode.cache.EntryEvent;\n+import org.apache.geode.cache.ExpirationAction;\n+import org.apache.geode.cache.ExpirationAttributes;\n+import org.apache.geode.cache.LoaderHelper;\n+import org.apache.geode.cache.PartitionedRegionPartialClearException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionEvent;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.distributed.internal.DistributionMessageObserver;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n+\n+public class PartitionedRegionClearWithAlterRegionDUnitTest implements Serializable {\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule();\n+\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+\n+  @Rule\n+  public ExecutorServiceRule executorServiceRule = new ExecutorServiceRule();\n+\n+  private VM server1;\n+\n+  private VM server2;\n+\n+  private VM server3;\n+\n+  private static final String REGION_NAME = \"testRegion\";\n+\n+  private static final int NUM_ENTRIES = 1000000;\n+\n+  private void initialize() {\n+    server1 = VM.getVM(0);\n+    server2 = VM.getVM(1);\n+\n+    server1.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server2.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server1.invoke(() -> {\n+      populateRegion();\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+\n+    server2.invoke(() -> {\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheLoader() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      alterRegionSetCacheLoader();\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }\n+\n+\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheWriter() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      alterRegionSetCacheWriter();\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c57ae5da6b76b1ba053f44ca946369880b39429"}, "originalPosition": 132}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1ODAxNDU5", "url": "https://github.com/apache/geode/pull/5516#pullrequestreview-495801459", "createdAt": "2020-09-24T17:36:15Z", "commit": {"oid": "3c57ae5da6b76b1ba053f44ca946369880b39429"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5ODgzNTE5", "url": "https://github.com/apache/geode/pull/5516#pullrequestreview-499883519", "createdAt": "2020-09-30T23:39:52Z", "commit": {"oid": "3c57ae5da6b76b1ba053f44ca946369880b39429"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3c57ae5da6b76b1ba053f44ca946369880b39429", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/3c57ae5da6b76b1ba053f44ca946369880b39429", "committedDate": "2020-09-16T00:26:44Z", "message": "Add missing test"}, "afterCommit": {"oid": "7fb4b3c9a9ab58b8aee9b7fc86809924db7198e4", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/7fb4b3c9a9ab58b8aee9b7fc86809924db7198e4", "committedDate": "2020-10-26T20:43:34Z", "message": "Add missing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27724ecd4cc173e3549ae9235b84bdac6e07cb5c", "author": {"user": {"login": "gesterzhou", "name": "Xiaojian Zhou"}}, "url": "https://github.com/apache/geode/commit/27724ecd4cc173e3549ae9235b84bdac6e07cb5c", "committedDate": "2020-10-30T19:00:43Z", "message": "GEODE-7683: introduce BR.cmnClearRegion\n\nCo-authored-by: Xiaojian Zhou <gzhou@pivotal.io>\n\nGEODE-7684: Create messaging class for PR Clear (#4689)\n\n* Added new message class and test\n\nCo-authored-by: Benjamin Ross <bross@pivotal.io>\nCo-authored-by: Donal Evans <doevans@pivotal.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fed1487889d1edd88d63c3d659d0799ba7743f8f", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/fed1487889d1edd88d63c3d659d0799ba7743f8f", "committedDate": "2020-10-30T19:00:44Z", "message": "Init commit\n\n[]\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "814850f134830204ec9d86329868bd30641e3dee", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/814850f134830204ec9d86329868bd30641e3dee", "committedDate": "2020-10-30T19:00:44Z", "message": "Second commit\n\n[]\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58d0470a47aa91f6ef2cb51e843e7b31d5b92a1e", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/58d0470a47aa91f6ef2cb51e843e7b31d5b92a1e", "committedDate": "2020-10-30T19:00:44Z", "message": "Third commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0ebc5a54432ae2de49dfdf848bf70b1aa1c4fd8", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/a0ebc5a54432ae2de49dfdf848bf70b1aa1c4fd8", "committedDate": "2020-10-30T19:00:44Z", "message": "WIP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34997bfa66a355ced829deb03bcfc567db9ac2fd", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/34997bfa66a355ced829deb03bcfc567db9ac2fd", "committedDate": "2020-10-30T19:00:44Z", "message": "Add more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c525b2fb345e471c6a16282a28edfc616b3b0ee8", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/c525b2fb345e471c6a16282a28edfc616b3b0ee8", "committedDate": "2020-10-30T19:00:44Z", "message": "Add more tests\n\nadd remove server\nsingle server"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4eed652b412eee54164962caad3595a22534c35", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/a4eed652b412eee54164962caad3595a22534c35", "committedDate": "2020-10-30T19:00:44Z", "message": "Remove ignored test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb7663abb0a0247291d7bd2bc93fd1f95666d613", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/eb7663abb0a0247291d7bd2bc93fd1f95666d613", "committedDate": "2020-10-30T19:00:45Z", "message": "spotlessApply"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a7cd2b362e636cba7e3bd78a378ab1017bc35cfc", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/a7cd2b362e636cba7e3bd78a378ab1017bc35cfc", "committedDate": "2020-10-30T19:00:45Z", "message": "Add missing test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b29b980f915e9e336ce6d6775d2ba79fcb9d86af", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/b29b980f915e9e336ce6d6775d2ba79fcb9d86af", "committedDate": "2020-10-30T19:00:45Z", "message": "Remove the code added during conflict resolution"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0a4bedcc4414a0a7b8ad872bd976778b100a7fd", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/c0a4bedcc4414a0a7b8ad872bd976778b100a7fd", "committedDate": "2020-10-26T20:49:26Z", "message": "Remove the code added during conflict resolution"}, "afterCommit": {"oid": "b29b980f915e9e336ce6d6775d2ba79fcb9d86af", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/b29b980f915e9e336ce6d6775d2ba79fcb9d86af", "committedDate": "2020-10-30T19:00:45Z", "message": "Remove the code added during conflict resolution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a95185b4e5f14e5b93845482ddc40cd47fbb4470", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/a95185b4e5f14e5b93845482ddc40cd47fbb4470", "committedDate": "2020-10-30T22:43:31Z", "message": "Make sure clear and alter region are concurrent\n\nAdding DistributionMessageObserver and DUnitBlackboard"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDc4MDQy", "url": "https://github.com/apache/geode/pull/5516#pullrequestreview-521078042", "createdAt": "2020-10-30T23:01:25Z", "commit": {"oid": "a95185b4e5f14e5b93845482ddc40cd47fbb4470"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzowMToyNVrOHrijrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzowMToyNVrOHrijrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxNzAwNQ==", "bodyText": "this should be splited into 2 different call.\nsetInstance should be called in invoke(), alterRegionSetCacheLoader() should be called in async.", "url": "https://github.com/apache/geode/pull/5516#discussion_r515417005", "createdAt": "2020-10-30T23:01:25Z", "author": {"login": "gesterzhou"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java", "diffHunk": "@@ -0,0 +1,533 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.AttributesMutator;\n+import org.apache.geode.cache.CacheListener;\n+import org.apache.geode.cache.CacheLoader;\n+import org.apache.geode.cache.CacheLoaderException;\n+import org.apache.geode.cache.CacheWriter;\n+import org.apache.geode.cache.CacheWriterException;\n+import org.apache.geode.cache.EntryEvent;\n+import org.apache.geode.cache.ExpirationAction;\n+import org.apache.geode.cache.ExpirationAttributes;\n+import org.apache.geode.cache.LoaderHelper;\n+import org.apache.geode.cache.PartitionedRegionPartialClearException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionEvent;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.distributed.internal.ClusterDistributionManager;\n+import org.apache.geode.distributed.internal.DistributionMessage;\n+import org.apache.geode.distributed.internal.DistributionMessageObserver;\n+import org.apache.geode.distributed.internal.InternalDistributedSystem;\n+import org.apache.geode.distributed.internal.membership.api.MembershipManagerHelper;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.DUnitBlackboard;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n+\n+public class PartitionedRegionClearWithAlterRegionDUnitTest implements Serializable {\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule();\n+\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+\n+  @Rule\n+  public ExecutorServiceRule executorServiceRule = new ExecutorServiceRule();\n+\n+  private VM server1;\n+\n+  private VM server2;\n+\n+  private VM server3;\n+\n+  private static volatile DUnitBlackboard blackboard;\n+\n+  private static final String REGION_NAME = \"testRegion\";\n+\n+  private static final int NUM_ENTRIES = 1000000;\n+\n+  private static final String GATE_NAME = \"ALLOW_ALTER_REGION\";\n+\n+  private void initialize() {\n+    server1 = VM.getVM(0);\n+    server2 = VM.getVM(1);\n+\n+    server1.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server2.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server1.invoke(() -> {\n+      populateRegion();\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+\n+    server2.invoke(() -> {\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheLoader() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a95185b4e5f14e5b93845482ddc40cd47fbb4470"}, "originalPosition": 113}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDgwMjUz", "url": "https://github.com/apache/geode/pull/5516#pullrequestreview-521080253", "createdAt": "2020-10-30T23:10:03Z", "commit": {"oid": "a95185b4e5f14e5b93845482ddc40cd47fbb4470"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzoxMDowM1rOHrirQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzoxMDowM1rOHrirQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQxODk0Nw==", "bodyText": "(1) why in loader and writer test, you did not use waitForGate?\n(2) you can define singalGate in afterProcessedMessage, afterReceivedMessage respectively to test in different cases", "url": "https://github.com/apache/geode/pull/5516#discussion_r515418947", "createdAt": "2020-10-30T23:10:03Z", "author": {"login": "gesterzhou"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/PartitionedRegionClearWithAlterRegionDUnitTest.java", "diffHunk": "@@ -0,0 +1,533 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeoutException;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.AttributesMutator;\n+import org.apache.geode.cache.CacheListener;\n+import org.apache.geode.cache.CacheLoader;\n+import org.apache.geode.cache.CacheLoaderException;\n+import org.apache.geode.cache.CacheWriter;\n+import org.apache.geode.cache.CacheWriterException;\n+import org.apache.geode.cache.EntryEvent;\n+import org.apache.geode.cache.ExpirationAction;\n+import org.apache.geode.cache.ExpirationAttributes;\n+import org.apache.geode.cache.LoaderHelper;\n+import org.apache.geode.cache.PartitionedRegionPartialClearException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionEvent;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.distributed.internal.ClusterDistributionManager;\n+import org.apache.geode.distributed.internal.DistributionMessage;\n+import org.apache.geode.distributed.internal.DistributionMessageObserver;\n+import org.apache.geode.distributed.internal.InternalDistributedSystem;\n+import org.apache.geode.distributed.internal.membership.api.MembershipManagerHelper;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.DUnitBlackboard;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n+\n+public class PartitionedRegionClearWithAlterRegionDUnitTest implements Serializable {\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule();\n+\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+\n+  @Rule\n+  public ExecutorServiceRule executorServiceRule = new ExecutorServiceRule();\n+\n+  private VM server1;\n+\n+  private VM server2;\n+\n+  private VM server3;\n+\n+  private static volatile DUnitBlackboard blackboard;\n+\n+  private static final String REGION_NAME = \"testRegion\";\n+\n+  private static final int NUM_ENTRIES = 1000000;\n+\n+  private static final String GATE_NAME = \"ALLOW_ALTER_REGION\";\n+\n+  private void initialize() {\n+    server1 = VM.getVM(0);\n+    server2 = VM.getVM(1);\n+\n+    server1.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server2.invoke(() -> {\n+      cacheRule.createCache();\n+      cacheRule.getCache().createRegionFactory(RegionShortcut.PARTITION).setStatisticsEnabled(true)\n+          .create(REGION_NAME);\n+    });\n+\n+    server1.invoke(() -> {\n+      populateRegion();\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+\n+    server2.invoke(() -> {\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      assertThat(region.size()).isEqualTo(NUM_ENTRIES);\n+    });\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheLoader() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      DistributionMessageObserver.setInstance(getDistributionMessageObserver());\n+      alterRegionSetCacheLoader();\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }\n+\n+\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheWriter() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      DistributionMessageObserver.setInstance(getDistributionMessageObserver());\n+      alterRegionSetCacheWriter();\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileAddingCacheListener() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      DistributionMessageObserver.setInstance(getDistributionMessageObserver());\n+      alterRegionSetCacheListener();\n+    });\n+\n+    AsyncInvocation asyncInvocation2 = server2.invokeAsync(() -> {\n+      cacheRule.getCache().getRegion(REGION_NAME).clear();\n+      assertThat(cacheRule.getCache().getRegion(REGION_NAME).size()).isEqualTo(0);\n+    });\n+\n+    asyncInvocation1.await();\n+    asyncInvocation2.await();\n+  }\n+\n+  @Test\n+  public void testClearRegionWhileChangingEviction() throws InterruptedException {\n+    initialize();\n+\n+    AsyncInvocation asyncInvocation1 = server1.invokeAsync(() -> {\n+      DistributionMessageObserver.setInstance(getDistributionMessageObserver());\n+      Region region = cacheRule.getCache().getRegion(REGION_NAME);\n+      AttributesMutator attributesMutator = region.getAttributesMutator();\n+      getBlackboard().waitForGate(GATE_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a95185b4e5f14e5b93845482ddc40cd47fbb4470"}, "originalPosition": 173}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e56050050549075e50c636269aaebb8c2d94ad8c", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/e56050050549075e50c636269aaebb8c2d94ad8c", "committedDate": "2020-10-30T23:46:16Z", "message": "Fix a bug."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd607a40f13e7fabed6651c310d7850cbbb5c0d8", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/dd607a40f13e7fabed6651c310d7850cbbb5c0d8", "committedDate": "2020-11-02T23:36:57Z", "message": "Add more tests with different test hook\n\nHad tried to add DistributionMessageObserver as parameter of test methods.\nHowever, it ends up with NoSerializableException, even with static methods\nthat returns the observer.\n\nTherefore, it ends up with some code duplication. Because parameterization\nof the observer does not work."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80b8548421a6de61b4bd57175ff6f682eaf379ae", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/80b8548421a6de61b4bd57175ff6f682eaf379ae", "committedDate": "2020-11-03T02:45:51Z", "message": "Ignore failing tests for now\n\nThe failing tests are tracked by GEODE-8680"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyNzQxMTE3", "url": "https://github.com/apache/geode/pull/5516#pullrequestreview-522741117", "createdAt": "2020-11-03T17:48:56Z", "commit": {"oid": "80b8548421a6de61b4bd57175ff6f682eaf379ae"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4217, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}