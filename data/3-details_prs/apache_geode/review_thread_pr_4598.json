{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzNDAyMTgx", "number": 4598, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMTowMzozN1rODYW_ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjo1NDoyNVrODYktNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODY5MTU1OnYy", "diffSide": "RIGHT", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwMTowMzozN1rOFeLNwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNzo0NDozMVrOFeiD7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE4NTM0Ng==", "bodyText": "Is it worth extracting this string to a constant in the PartitionedRegion class so that it can be consistently referred to?", "url": "https://github.com/apache/geode/pull/4598#discussion_r367185346", "createdAt": "2020-01-16T01:03:37Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionTest.java", "diffHunk": "@@ -439,6 +443,66 @@ public void generatePRIdShouldNotThrowNumberFormatExceptionIfAnErrorOccursWhileR\n         .doesNotThrowAnyException();\n   }\n \n+  @Test\n+  public void getDataRegionForWriteThrowsTransactionExceptionIfNotDataStore() {\n+    PartitionedRegion spyPartitionedRegion = spy(partitionedRegion);\n+\n+    KeyInfo keyInfo = mock(KeyInfo.class);\n+    when(keyInfo.getBucketId()).thenReturn(1);\n+    doReturn(null).when(spyPartitionedRegion).getDataStore();\n+\n+    Throwable caughtException =\n+        catchThrowable(() -> spyPartitionedRegion.getDataRegionForWrite(keyInfo));\n+\n+    assertThat(caughtException).isInstanceOf(TransactionException.class).hasMessage(\n+        \"PartitionedRegion Transactions cannot execute on nodes with local max memory zero\");\n+  }\n+\n+  @Test\n+  public void getDataRegionForWriteThrowsTransactionDataRebalancedExceptionIfGetInitializedBucketThrowsForceReattemptException()\n+      throws Exception {\n+    PartitionedRegion spyPartitionedRegion = spy(partitionedRegion);\n+\n+    KeyInfo keyInfo = mock(KeyInfo.class);\n+    Object key = new Object();\n+    PartitionedRegionDataStore dataStore = mock(PartitionedRegionDataStore.class);\n+    when(keyInfo.getBucketId()).thenReturn(1);\n+    when(keyInfo.getKey()).thenReturn(key);\n+    when(keyInfo.isCheckPrimary()).thenReturn(true);\n+    doReturn(dataStore).when(spyPartitionedRegion).getDataStore();\n+    doThrow(new ForceReattemptException(\"\")).when(dataStore)\n+        .getInitializedBucketWithKnownPrimaryForId(key, 1);\n+    doReturn(mock(InternalDistributedMember.class)).when(spyPartitionedRegion).createBucket(1, 0,\n+        null);\n+\n+    Throwable caughtException =\n+        catchThrowable(() -> spyPartitionedRegion.getDataRegionForWrite(keyInfo));\n+\n+    assertThat(caughtException).isInstanceOf(TransactionDataRebalancedException.class)\n+        .hasMessage(\"Transactional data moved, due to rebalancing.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17f29ba93d9423600c4c0f3b407cc9011766f565"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzU1OTY2MA==", "bodyText": "Good idea, will make the change next time.", "url": "https://github.com/apache/geode/pull/4598#discussion_r367559660", "createdAt": "2020-01-16T17:44:31Z", "author": {"login": "pivotal-eshu"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionTest.java", "diffHunk": "@@ -439,6 +443,66 @@ public void generatePRIdShouldNotThrowNumberFormatExceptionIfAnErrorOccursWhileR\n         .doesNotThrowAnyException();\n   }\n \n+  @Test\n+  public void getDataRegionForWriteThrowsTransactionExceptionIfNotDataStore() {\n+    PartitionedRegion spyPartitionedRegion = spy(partitionedRegion);\n+\n+    KeyInfo keyInfo = mock(KeyInfo.class);\n+    when(keyInfo.getBucketId()).thenReturn(1);\n+    doReturn(null).when(spyPartitionedRegion).getDataStore();\n+\n+    Throwable caughtException =\n+        catchThrowable(() -> spyPartitionedRegion.getDataRegionForWrite(keyInfo));\n+\n+    assertThat(caughtException).isInstanceOf(TransactionException.class).hasMessage(\n+        \"PartitionedRegion Transactions cannot execute on nodes with local max memory zero\");\n+  }\n+\n+  @Test\n+  public void getDataRegionForWriteThrowsTransactionDataRebalancedExceptionIfGetInitializedBucketThrowsForceReattemptException()\n+      throws Exception {\n+    PartitionedRegion spyPartitionedRegion = spy(partitionedRegion);\n+\n+    KeyInfo keyInfo = mock(KeyInfo.class);\n+    Object key = new Object();\n+    PartitionedRegionDataStore dataStore = mock(PartitionedRegionDataStore.class);\n+    when(keyInfo.getBucketId()).thenReturn(1);\n+    when(keyInfo.getKey()).thenReturn(key);\n+    when(keyInfo.isCheckPrimary()).thenReturn(true);\n+    doReturn(dataStore).when(spyPartitionedRegion).getDataStore();\n+    doThrow(new ForceReattemptException(\"\")).when(dataStore)\n+        .getInitializedBucketWithKnownPrimaryForId(key, 1);\n+    doReturn(mock(InternalDistributedMember.class)).when(spyPartitionedRegion).createBucket(1, 0,\n+        null);\n+\n+    Throwable caughtException =\n+        catchThrowable(() -> spyPartitionedRegion.getDataRegionForWrite(keyInfo));\n+\n+    assertThat(caughtException).isInstanceOf(TransactionDataRebalancedException.class)\n+        .hasMessage(\"Transactional data moved, due to rebalancing.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzE4NTM0Ng=="}, "originalCommit": {"oid": "17f29ba93d9423600c4c0f3b407cc9011766f565"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MDkzODEzOnYy", "diffSide": "RIGHT", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjo1NDoyNVrOFegjLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQxNjo1NDoyNVrOFegjLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzUzNDg5NA==", "bodyText": "These assertions within the tests can be further simplified by using something like the following:\n    assertThatThrownBy(() -> spyPartitionedRegion.getDataRegionForWrite(keyInfo))\n        .isInstanceOf(TransactionException.class)\n        .hasMessage(\"PartitionedRegion Transactions cannot execute on nodes with local max memory zero\");", "url": "https://github.com/apache/geode/pull/4598#discussion_r367534894", "createdAt": "2020-01-16T16:54:25Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionTest.java", "diffHunk": "@@ -439,6 +443,66 @@ public void generatePRIdShouldNotThrowNumberFormatExceptionIfAnErrorOccursWhileR\n         .doesNotThrowAnyException();\n   }\n \n+  @Test\n+  public void getDataRegionForWriteThrowsTransactionExceptionIfNotDataStore() {\n+    PartitionedRegion spyPartitionedRegion = spy(partitionedRegion);\n+\n+    KeyInfo keyInfo = mock(KeyInfo.class);\n+    when(keyInfo.getBucketId()).thenReturn(1);\n+    doReturn(null).when(spyPartitionedRegion).getDataStore();\n+\n+    Throwable caughtException =\n+        catchThrowable(() -> spyPartitionedRegion.getDataRegionForWrite(keyInfo));\n+\n+    assertThat(caughtException).isInstanceOf(TransactionException.class).hasMessage(\n+        \"PartitionedRegion Transactions cannot execute on nodes with local max memory zero\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17f29ba93d9423600c4c0f3b407cc9011766f565"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3838, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}