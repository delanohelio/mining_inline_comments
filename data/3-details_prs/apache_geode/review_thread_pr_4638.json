{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3Nzc5Njg2", "number": 4638, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxODo1ODoyN1rODbVczQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzo0Nzo1NlrODeBpxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTg5NTgxOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxODo1ODoyN1rOFiwv_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxODo1ODoyN1rOFiwv_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk5NDYyMQ==", "bodyText": "Since we locked the primary bucket just now, should we first unlock it before we throw due to the primary no longer being where we expect?", "url": "https://github.com/apache/geode/pull/4638#discussion_r371994621", "createdAt": "2020-01-28T18:58:27Z", "author": {"login": "BenjaminPerryRoss"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "diffHunk": "@@ -557,6 +558,42 @@ public boolean virtualPut(EntryEventImpl event, boolean ifNew, boolean ifOld,\n     }\n   }\n \n+  @Override\n+  void cmnClearRegion(RegionEventImpl regionEvent, boolean cacheWrite, boolean useRVV) {\n+    boolean enableRVV = useRVV && getConcurrencyChecksEnabled();\n+    RegionVersionVector rvv = null;\n+    if (enableRVV) {\n+      rvv = getVersionVector();\n+    }\n+\n+    // lock the primary from moving\n+    DistributedLockService lockService = DistributedLockService\n+        .getServiceNamed(PartitionedRegionHelper.PARTITION_LOCK_SERVICE_NAME);\n+    String lockName = this.getFullPath();\n+    while (!lockService.lock(lockName, 100, -1)) {\n+      if (!getBucketAdvisor().isPrimary()) {\n+        PartitionedRegionException pre =\n+            new PartitionedRegionException(\n+                \"The bucket \" + this.getId() + \" is no longer a primary. Retry the clear\");\n+        throw pre;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "debcb4ddde543f6e8396b4cdb895642b4474d27b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTIwODI3OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMDozOToxN1rOFloXtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOTowODo0NVrOFmDs4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwMzA2Mg==", "bodyText": "This is opposite of what the comment says", "url": "https://github.com/apache/geode/pull/4638#discussion_r375003062", "createdAt": "2020-02-05T00:39:17Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "diffHunk": "@@ -557,6 +557,34 @@ public boolean virtualPut(EntryEventImpl event, boolean ifNew, boolean ifOld,\n     }\n   }\n \n+  @Override\n+  void cmnClearRegion(RegionEventImpl regionEvent, boolean cacheWrite, boolean useRVV) {\n+    if (getBucketAdvisor().isPrimary()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6328f2e5d073d9682ef37a01409c4e45275a116"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1MDg1MA==", "bodyText": "Yes, I have fixed.", "url": "https://github.com/apache/geode/pull/4638#discussion_r375450850", "createdAt": "2020-02-05T19:08:45Z", "author": {"login": "gesterzhou"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "diffHunk": "@@ -557,6 +557,34 @@ public boolean virtualPut(EntryEventImpl event, boolean ifNew, boolean ifOld,\n     }\n   }\n \n+  @Override\n+  void cmnClearRegion(RegionEventImpl regionEvent, boolean cacheWrite, boolean useRVV) {\n+    if (getBucketAdvisor().isPrimary()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwMzA2Mg=="}, "originalCommit": {"oid": "a6328f2e5d073d9682ef37a01409c4e45275a116"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTIxMDg5OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMDo0MTowN1rOFloZXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNzoyOTozM1rOFm0SvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwMzQ4NA==", "bodyText": "Does this call just return null if it's not enabled?  Do we need the if check?", "url": "https://github.com/apache/geode/pull/4638#discussion_r375003484", "createdAt": "2020-02-05T00:41:07Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "diffHunk": "@@ -557,6 +557,34 @@ public boolean virtualPut(EntryEventImpl event, boolean ifNew, boolean ifOld,\n     }\n   }\n \n+  @Override\n+  void cmnClearRegion(RegionEventImpl regionEvent, boolean cacheWrite, boolean useRVV) {\n+    if (getBucketAdvisor().isPrimary()) {\n+      logger.info(\"Not primary bucket when doing clear, do nothing\");\n+      return;\n+    }\n+\n+    boolean enableRVV = useRVV && getConcurrencyChecksEnabled();\n+    RegionVersionVector rvv = null;\n+    if (enableRVV) {\n+      rvv = getVersionVector();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6328f2e5d073d9682ef37a01409c4e45275a116"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1MDczMw==", "bodyText": "Yes, then just use null for rvv.", "url": "https://github.com/apache/geode/pull/4638#discussion_r375450733", "createdAt": "2020-02-05T19:08:31Z", "author": {"login": "gesterzhou"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "diffHunk": "@@ -557,6 +557,34 @@ public boolean virtualPut(EntryEventImpl event, boolean ifNew, boolean ifOld,\n     }\n   }\n \n+  @Override\n+  void cmnClearRegion(RegionEventImpl regionEvent, boolean cacheWrite, boolean useRVV) {\n+    if (getBucketAdvisor().isPrimary()) {\n+      logger.info(\"Not primary bucket when doing clear, do nothing\");\n+      return;\n+    }\n+\n+    boolean enableRVV = useRVV && getConcurrencyChecksEnabled();\n+    RegionVersionVector rvv = null;\n+    if (enableRVV) {\n+      rvv = getVersionVector();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwMzQ4NA=="}, "originalCommit": {"oid": "a6328f2e5d073d9682ef37a01409c4e45275a116"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ2OTY2MQ==", "bodyText": "If this returns null, then the if check isn't needed.  It'll be null either way.", "url": "https://github.com/apache/geode/pull/4638#discussion_r375469661", "createdAt": "2020-02-05T19:44:13Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "diffHunk": "@@ -557,6 +557,34 @@ public boolean virtualPut(EntryEventImpl event, boolean ifNew, boolean ifOld,\n     }\n   }\n \n+  @Override\n+  void cmnClearRegion(RegionEventImpl regionEvent, boolean cacheWrite, boolean useRVV) {\n+    if (getBucketAdvisor().isPrimary()) {\n+      logger.info(\"Not primary bucket when doing clear, do nothing\");\n+      return;\n+    }\n+\n+    boolean enableRVV = useRVV && getConcurrencyChecksEnabled();\n+    RegionVersionVector rvv = null;\n+    if (enableRVV) {\n+      rvv = getVersionVector();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwMzQ4NA=="}, "originalCommit": {"oid": "a6328f2e5d073d9682ef37a01409c4e45275a116"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzMzI1Mg==", "bodyText": "There's basicLocalClear whose useRVV is false. I need to consider that.", "url": "https://github.com/apache/geode/pull/4638#discussion_r375533252", "createdAt": "2020-02-05T22:01:57Z", "author": {"login": "gesterzhou"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "diffHunk": "@@ -557,6 +557,34 @@ public boolean virtualPut(EntryEventImpl event, boolean ifNew, boolean ifOld,\n     }\n   }\n \n+  @Override\n+  void cmnClearRegion(RegionEventImpl regionEvent, boolean cacheWrite, boolean useRVV) {\n+    if (getBucketAdvisor().isPrimary()) {\n+      logger.info(\"Not primary bucket when doing clear, do nothing\");\n+      return;\n+    }\n+\n+    boolean enableRVV = useRVV && getConcurrencyChecksEnabled();\n+    RegionVersionVector rvv = null;\n+    if (enableRVV) {\n+      rvv = getVersionVector();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwMzQ4NA=="}, "originalCommit": {"oid": "a6328f2e5d073d9682ef37a01409c4e45275a116"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyNDA4NQ==", "bodyText": "Lets think of the case where useRVV is false.\nif (false) {}\nrvv is already null, so rvv ends up null;\nOR\n//remove the if check\nrvv = getVersionVector() <-returns null anyways\nThe end result is the same.  why have the if check?", "url": "https://github.com/apache/geode/pull/4638#discussion_r375624085", "createdAt": "2020-02-06T03:25:44Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "diffHunk": "@@ -557,6 +557,34 @@ public boolean virtualPut(EntryEventImpl event, boolean ifNew, boolean ifOld,\n     }\n   }\n \n+  @Override\n+  void cmnClearRegion(RegionEventImpl regionEvent, boolean cacheWrite, boolean useRVV) {\n+    if (getBucketAdvisor().isPrimary()) {\n+      logger.info(\"Not primary bucket when doing clear, do nothing\");\n+      return;\n+    }\n+\n+    boolean enableRVV = useRVV && getConcurrencyChecksEnabled();\n+    RegionVersionVector rvv = null;\n+    if (enableRVV) {\n+      rvv = getVersionVector();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwMzQ4NA=="}, "originalCommit": {"oid": "a6328f2e5d073d9682ef37a01409c4e45275a116"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI0Njk3Mw==", "bodyText": "In BR.cmnClearRegion(), since we have locked the rvvLock, no more operations will be intiated here. So no need to explicitly use RVV. I will fix this part.", "url": "https://github.com/apache/geode/pull/4638#discussion_r376246973", "createdAt": "2020-02-07T07:29:33Z", "author": {"login": "gesterzhou"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "diffHunk": "@@ -557,6 +557,34 @@ public boolean virtualPut(EntryEventImpl event, boolean ifNew, boolean ifOld,\n     }\n   }\n \n+  @Override\n+  void cmnClearRegion(RegionEventImpl regionEvent, boolean cacheWrite, boolean useRVV) {\n+    if (getBucketAdvisor().isPrimary()) {\n+      logger.info(\"Not primary bucket when doing clear, do nothing\");\n+      return;\n+    }\n+\n+    boolean enableRVV = useRVV && getConcurrencyChecksEnabled();\n+    RegionVersionVector rvv = null;\n+    if (enableRVV) {\n+      rvv = getVersionVector();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwMzQ4NA=="}, "originalCommit": {"oid": "a6328f2e5d073d9682ef37a01409c4e45275a116"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTIxMzQ4OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMDo0Mjo0OFrOFloa8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOTowNjo1NlrOFmDpWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwMzg4OA==", "bodyText": "Shouldn't it only be the origin that distributes?", "url": "https://github.com/apache/geode/pull/4638#discussion_r375003888", "createdAt": "2020-02-05T00:42:48Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "diffHunk": "@@ -557,6 +557,34 @@ public boolean virtualPut(EntryEventImpl event, boolean ifNew, boolean ifOld,\n     }\n   }\n \n+  @Override\n+  void cmnClearRegion(RegionEventImpl regionEvent, boolean cacheWrite, boolean useRVV) {\n+    if (getBucketAdvisor().isPrimary()) {\n+      logger.info(\"Not primary bucket when doing clear, do nothing\");\n+      return;\n+    }\n+\n+    boolean enableRVV = useRVV && getConcurrencyChecksEnabled();\n+    RegionVersionVector rvv = null;\n+    if (enableRVV) {\n+      rvv = getVersionVector();\n+    }\n+\n+    // get rvvLock\n+    Set<InternalDistributedMember> participants =\n+        getCacheDistributionAdvisor().adviseInvalidateRegion();\n+    try {\n+      obtainWriteLocksForClear(regionEvent, participants);\n+      clearRegionLocally(regionEvent, cacheWrite, null);\n+      if (!regionEvent.isOriginRemote() && regionEvent.getOperation().isDistributed()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6328f2e5d073d9682ef37a01409c4e45275a116"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ0OTk0NA==", "bodyText": "Yes, after I carefully reviewed the code, we don't need this check.", "url": "https://github.com/apache/geode/pull/4638#discussion_r375449944", "createdAt": "2020-02-05T19:06:56Z", "author": {"login": "gesterzhou"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "diffHunk": "@@ -557,6 +557,34 @@ public boolean virtualPut(EntryEventImpl event, boolean ifNew, boolean ifOld,\n     }\n   }\n \n+  @Override\n+  void cmnClearRegion(RegionEventImpl regionEvent, boolean cacheWrite, boolean useRVV) {\n+    if (getBucketAdvisor().isPrimary()) {\n+      logger.info(\"Not primary bucket when doing clear, do nothing\");\n+      return;\n+    }\n+\n+    boolean enableRVV = useRVV && getConcurrencyChecksEnabled();\n+    RegionVersionVector rvv = null;\n+    if (enableRVV) {\n+      rvv = getVersionVector();\n+    }\n+\n+    // get rvvLock\n+    Set<InternalDistributedMember> participants =\n+        getCacheDistributionAdvisor().adviseInvalidateRegion();\n+    try {\n+      obtainWriteLocksForClear(regionEvent, participants);\n+      clearRegionLocally(regionEvent, cacheWrite, null);\n+      if (!regionEvent.isOriginRemote() && regionEvent.getOperation().isDistributed()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwMzg4OA=="}, "originalCommit": {"oid": "a6328f2e5d073d9682ef37a01409c4e45275a116"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTIxNjk4OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/DistributedRegion.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMDo0NDo1MlrOFlodDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxOTowNzo1M1rOFmDrLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwNDQyOQ==", "bodyText": "Not part of this diff, but I assume we are taking a less granular lock earlier in the process for the entire partitioned region?", "url": "https://github.com/apache/geode/pull/4638#discussion_r375004429", "createdAt": "2020-02-05T00:44:52Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/DistributedRegion.java", "diffHunk": "@@ -2081,10 +2081,12 @@ private void distributedUnlockForClear() {\n   /**\n    * obtain locks preventing generation of new versions in other members\n    */\n-  private void obtainWriteLocksForClear(RegionEventImpl regionEvent,\n+  protected void obtainWriteLocksForClear(RegionEventImpl regionEvent,\n       Set<InternalDistributedMember> participants) {\n     lockLocallyForClear(getDistributionManager(), getMyId(), regionEvent);\n-    DistributedClearOperation.lockAndFlushToOthers(regionEvent, participants);\n+    if (!isUsedForPartitionedRegionBucket()) {\n+      DistributedClearOperation.lockAndFlushToOthers(regionEvent, participants);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6328f2e5d073d9682ef37a01409c4e45275a116"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ1MDQxMw==", "bodyText": "BR does not need to send msg to secondary to do rvvLock.", "url": "https://github.com/apache/geode/pull/4638#discussion_r375450413", "createdAt": "2020-02-05T19:07:53Z", "author": {"login": "gesterzhou"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/DistributedRegion.java", "diffHunk": "@@ -2081,10 +2081,12 @@ private void distributedUnlockForClear() {\n   /**\n    * obtain locks preventing generation of new versions in other members\n    */\n-  private void obtainWriteLocksForClear(RegionEventImpl regionEvent,\n+  protected void obtainWriteLocksForClear(RegionEventImpl regionEvent,\n       Set<InternalDistributedMember> participants) {\n     lockLocallyForClear(getDistributionManager(), getMyId(), regionEvent);\n-    DistributedClearOperation.lockAndFlushToOthers(regionEvent, participants);\n+    if (!isUsedForPartitionedRegionBucket()) {\n+      DistributedClearOperation.lockAndFlushToOthers(regionEvent, participants);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwNDQyOQ=="}, "originalCommit": {"oid": "a6328f2e5d073d9682ef37a01409c4e45275a116"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjM1MTc0OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMDo0Nzo1NVrOFmGpZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMjoxMDo1MlrOFmI9Cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ5OTExMA==", "bodyText": "I see you made reindexUserDataRegion public. Is this something you need to call here?", "url": "https://github.com/apache/geode/pull/4638#discussion_r375499110", "createdAt": "2020-02-05T20:47:55Z", "author": {"login": "boglesby"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "diffHunk": "@@ -557,6 +557,32 @@ public boolean virtualPut(EntryEventImpl event, boolean ifNew, boolean ifOld,\n     }\n   }\n \n+  @Override\n+  void cmnClearRegion(RegionEventImpl regionEvent, boolean cacheWrite, boolean useRVV) {\n+    if (!getBucketAdvisor().isPrimary()) {\n+      logger.info(\"Not primary bucket when doing clear, do nothing\");\n+      return;\n+    }\n+\n+    boolean enableRVV = useRVV && getConcurrencyChecksEnabled();\n+    RegionVersionVector rvv = null;\n+    if (enableRVV) {\n+      rvv = getVersionVector();\n+    }\n+\n+    // get rvvLock\n+    Set<InternalDistributedMember> participants =\n+        getCacheDistributionAdvisor().adviseInvalidateRegion();\n+    try {\n+      obtainWriteLocksForClear(regionEvent, participants);\n+      clearRegionLocally(regionEvent, cacheWrite, rvv);\n+      distributeClearOperation(regionEvent, rvv, participants);\n+\n+      // TODO: call reindexUserDataRegion if there're lucene indexes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad9169097ca662d38e34ea9fb61a5cc314176c9f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUyODYzMg==", "bodyText": "Yes, that will be called in future as a todo work.", "url": "https://github.com/apache/geode/pull/4638#discussion_r375528632", "createdAt": "2020-02-05T21:51:48Z", "author": {"login": "gesterzhou"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "diffHunk": "@@ -557,6 +557,32 @@ public boolean virtualPut(EntryEventImpl event, boolean ifNew, boolean ifOld,\n     }\n   }\n \n+  @Override\n+  void cmnClearRegion(RegionEventImpl regionEvent, boolean cacheWrite, boolean useRVV) {\n+    if (!getBucketAdvisor().isPrimary()) {\n+      logger.info(\"Not primary bucket when doing clear, do nothing\");\n+      return;\n+    }\n+\n+    boolean enableRVV = useRVV && getConcurrencyChecksEnabled();\n+    RegionVersionVector rvv = null;\n+    if (enableRVV) {\n+      rvv = getVersionVector();\n+    }\n+\n+    // get rvvLock\n+    Set<InternalDistributedMember> participants =\n+        getCacheDistributionAdvisor().adviseInvalidateRegion();\n+    try {\n+      obtainWriteLocksForClear(regionEvent, participants);\n+      clearRegionLocally(regionEvent, cacheWrite, rvv);\n+      distributeClearOperation(regionEvent, rvv, participants);\n+\n+      // TODO: call reindexUserDataRegion if there're lucene indexes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ5OTExMA=="}, "originalCommit": {"oid": "ad9169097ca662d38e34ea9fb61a5cc314176c9f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzNjkwNg==", "bodyText": "But I changed it back for the time being", "url": "https://github.com/apache/geode/pull/4638#discussion_r375536906", "createdAt": "2020-02-05T22:10:52Z", "author": {"login": "gesterzhou"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "diffHunk": "@@ -557,6 +557,32 @@ public boolean virtualPut(EntryEventImpl event, boolean ifNew, boolean ifOld,\n     }\n   }\n \n+  @Override\n+  void cmnClearRegion(RegionEventImpl regionEvent, boolean cacheWrite, boolean useRVV) {\n+    if (!getBucketAdvisor().isPrimary()) {\n+      logger.info(\"Not primary bucket when doing clear, do nothing\");\n+      return;\n+    }\n+\n+    boolean enableRVV = useRVV && getConcurrencyChecksEnabled();\n+    RegionVersionVector rvv = null;\n+    if (enableRVV) {\n+      rvv = getVersionVector();\n+    }\n+\n+    // get rvvLock\n+    Set<InternalDistributedMember> participants =\n+        getCacheDistributionAdvisor().adviseInvalidateRegion();\n+    try {\n+      obtainWriteLocksForClear(regionEvent, participants);\n+      clearRegionLocally(regionEvent, cacheWrite, rvv);\n+      distributeClearOperation(regionEvent, rvv, participants);\n+\n+      // TODO: call reindexUserDataRegion if there're lucene indexes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTQ5OTExMA=="}, "originalCommit": {"oid": "ad9169097ca662d38e34ea9fb61a5cc314176c9f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMjU2MjcyOnYy", "diffSide": "RIGHT", "path": "geode-lucene/src/main/java/org/apache/geode/cache/lucene/internal/IndexRepositoryFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMTo1OTozOFrOFmIqnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQyMTo1OTozOFrOFmIqnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTUzMjE4OQ==", "bodyText": "There is no need to change the scope to public, at least not in this pull request.", "url": "https://github.com/apache/geode/pull/4638#discussion_r375532189", "createdAt": "2020-02-05T21:59:38Z", "author": {"login": "jchen21"}, "path": "geode-lucene/src/main/java/org/apache/geode/cache/lucene/internal/IndexRepositoryFactory.java", "diffHunk": "@@ -152,7 +152,7 @@ protected IndexWriter buildIndexWriter(int bucketId, BucketRegion fileAndChunkBu\n     return new IndexWriter(dir, config);\n   }\n \n-  private boolean reindexUserDataRegion(Integer bucketId, PartitionedRegion userRegion,\n+  public boolean reindexUserDataRegion(Integer bucketId, PartitionedRegion userRegion,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad9169097ca662d38e34ea9fb61a5cc314176c9f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyMzE0NTk4OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwMzoyMDozMVrOFmON7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNzozMTo0NVrOFm0U4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyMzE1MA==", "bodyText": "This is not quite the same.  Is there a reason why we removed the if check?  We will now always set oldMemValue even if it's been initialized?\nwhy wasn't this just a removal of the else and leave the else if? Just want to understand the logic here a bit...", "url": "https://github.com/apache/geode/pull/4638#discussion_r375623150", "createdAt": "2020-02-06T03:20:31Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "diffHunk": "@@ -2087,19 +2113,10 @@ void updateSizeOnClearRegion(int sizeBeforeClear) {\n     if (isDestroyed || isDestroyingDiskRegion) {\n       // If this region is destroyed, mark the stat as destroyed.\n       oldMemValue = bytesInMemory.getAndSet(BUCKET_DESTROYED);\n-\n-    } else if (!isInitialized()) {\n-      // This case is rather special. We clear the region if the GII failed.\n-      // In the case of bucket regions, we know that there will be no concurrent operations\n-      // if GII has failed, because there is not primary. So it's safe to set these\n-      // counters to 0.\n+    } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11afea7c2d2f2320e908972ce34ddf5d3bf3daf9"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI0NzUyMw==", "bodyText": "OK, I will keep the \"else if\" with comments and fix into the \"else\" only.", "url": "https://github.com/apache/geode/pull/4638#discussion_r376247523", "createdAt": "2020-02-07T07:31:45Z", "author": {"login": "gesterzhou"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "diffHunk": "@@ -2087,19 +2113,10 @@ void updateSizeOnClearRegion(int sizeBeforeClear) {\n     if (isDestroyed || isDestroyingDiskRegion) {\n       // If this region is destroyed, mark the stat as destroyed.\n       oldMemValue = bytesInMemory.getAndSet(BUCKET_DESTROYED);\n-\n-    } else if (!isInitialized()) {\n-      // This case is rather special. We clear the region if the GII failed.\n-      // In the case of bucket regions, we know that there will be no concurrent operations\n-      // if GII has failed, because there is not primary. So it's safe to set these\n-      // counters to 0.\n+    } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTYyMzE1MA=="}, "originalCommit": {"oid": "11afea7c2d2f2320e908972ce34ddf5d3bf3daf9"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODEwOTUxOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzo0Nzo1NlrOFm9gPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTowMTozNVrOFnx23w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5Nzg4NQ==", "bodyText": "Do we need to log this message using info level?.\nUsers won't be able to do anything if they see it anyway, so I think we should either delete it or log it as debug.", "url": "https://github.com/apache/geode/pull/4638#discussion_r376397885", "createdAt": "2020-02-07T13:47:56Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "diffHunk": "@@ -557,6 +557,32 @@ public boolean virtualPut(EntryEventImpl event, boolean ifNew, boolean ifOld,\n     }\n   }\n \n+  @Override\n+  void cmnClearRegion(RegionEventImpl regionEvent, boolean cacheWrite, boolean useRVV) {\n+    if (!getBucketAdvisor().isPrimary()) {\n+      logger.info(\"Not primary bucket when doing clear, do nothing\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11afea7c2d2f2320e908972ce34ddf5d3bf3daf9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI1NTY0Nw==", "bodyText": "done", "url": "https://github.com/apache/geode/pull/4638#discussion_r377255647", "createdAt": "2020-02-10T19:01:35Z", "author": {"login": "gesterzhou"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/BucketRegion.java", "diffHunk": "@@ -557,6 +557,32 @@ public boolean virtualPut(EntryEventImpl event, boolean ifNew, boolean ifOld,\n     }\n   }\n \n+  @Override\n+  void cmnClearRegion(RegionEventImpl regionEvent, boolean cacheWrite, boolean useRVV) {\n+    if (!getBucketAdvisor().isPrimary()) {\n+      logger.info(\"Not primary bucket when doing clear, do nothing\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM5Nzg4NQ=="}, "originalCommit": {"oid": "11afea7c2d2f2320e908972ce34ddf5d3bf3daf9"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3726, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}