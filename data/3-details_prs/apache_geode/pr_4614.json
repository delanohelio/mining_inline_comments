{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NjIwOTkx", "number": 4614, "title": "GEODE-7652: MembershipBuilder lets you set the local locator", "bodyText": "GEODE-7652\nThe main goal here is to make it straightforward to start up a locator vis-\u00e0-vis membership. So code that looked like this (in MembershipOnlyJUnitTest):\n    final Membership<MemberIdentifierImpl> membership =\n        MembershipBuilder.<MemberIdentifierImpl>newMembershipBuilder(\n            socketCreator, locatorClient, dsfidSerializer, memberIdFactory)\n            .setConfig(config)\n            .setLifecycleListener(lifeCycleListener)\n            .create();\n\n\n    // TODO - the membership *must* be installed in the locator at this special\n    // point during membership startup for the start to succeed\n    doAnswer(invocation -> {\n      membershipLocator.setMembership(membership);\n      return null;\n    }).when(lifeCycleListener).started();\n\n\n    membership.start();\ncan look like this:\n    final Membership<MemberIdentifierImpl> membership =\n        MembershipBuilder.<MemberIdentifierImpl>newMembershipBuilder(\n            socketCreator,\n            locatorClient,\n            dsfidSerializer,\n            memberIdFactory)\n            .setMembershipLocator(membershipLocator)\n            .setConfig(config)\n            .setLifecycleListener(lifeCycleListener)\n            .create();\n\n    membership.start();\nThis PR eliminates the MembershipLocator.started() method entirely and adds a MembershipBuilder.setMembershipLocator(). So instead of having to install a callback to initialize the locator's membership association, you now do it directly (imperatively) via the builder.\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-01-22T01:35:17Z", "url": "https://github.com/apache/geode/pull/4614", "merged": true, "mergeCommit": {"oid": "d2947640af8c6bf16a650348bf09a28d11d27997"}, "closed": true, "closedAt": "2020-01-30T06:08:08Z", "author": {"login": "Bill"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb8_t-IgFqTM0NzAwNjUyOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_P0WjgBqjI5OTE2MzAxMTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MDA2NTI4", "url": "https://github.com/apache/geode/pull/4614#pullrequestreview-347006528", "createdAt": "2020-01-23T01:04:36Z", "commit": {"oid": "ea048ff97fecd4640ee1a396e73f8586c5c457f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMTowNDozN1rOFgwI7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMTowNDozN1rOFgwI7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg4NzQ2OA==", "bodyText": "removing this method was important! see MembershipBuilder.setMembershipLocator()", "url": "https://github.com/apache/geode/pull/4614#discussion_r369887468", "createdAt": "2020-01-23T01:04:37Z", "author": {"login": "Bill"}, "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/api/LifecycleListener.java", "diffHunk": "@@ -32,13 +32,6 @@\n   void start(\n       final ID memberID);\n \n-  /**\n-   * Invoked when the Membership is starting. All membership services will have been\n-   * initialized and had their \"started\" methods invoked but we will not yet have joined\n-   * the cluster.\n-   */\n-  void started();\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea048ff97fecd4640ee1a396e73f8586c5c457f9"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MDA2ODA3", "url": "https://github.com/apache/geode/pull/4614#pullrequestreview-347006807", "createdAt": "2020-01-23T01:05:35Z", "commit": {"oid": "ea048ff97fecd4640ee1a396e73f8586c5c457f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMTowNTozNVrOFgwJxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMTowNTozNVrOFgwJxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg4NzY4Ng==", "bodyText": "this method on the builder is the replacement for the eliminated started() method on LifecycleListener", "url": "https://github.com/apache/geode/pull/4614#discussion_r369887686", "createdAt": "2020-01-23T01:05:35Z", "author": {"login": "Bill"}, "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/api/MembershipBuilder.java", "diffHunk": "@@ -32,6 +32,8 @@\n \n   MembershipBuilder<ID> setMembershipListener(MembershipListener<ID> membershipListener);\n \n+  MembershipBuilder<ID> setMembershipLocator(MembershipLocator<ID> membershipLocator);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea048ff97fecd4640ee1a396e73f8586c5c457f9"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MDA3MzE4", "url": "https://github.com/apache/geode/pull/4614#pullrequestreview-347007318", "createdAt": "2020-01-23T01:07:18Z", "commit": {"oid": "ea048ff97fecd4640ee1a396e73f8586c5c457f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMTowNzoxOVrOFgwLdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMTowNzoxOVrOFgwLdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg4ODExOA==", "bodyText": "important addition here: if a membership locator was specified, then tell the services about it", "url": "https://github.com/apache/geode/pull/4614#discussion_r369888118", "createdAt": "2020-01-23T01:07:19Z", "author": {"login": "Bill"}, "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/MembershipBuilderImpl.java", "diffHunk": "@@ -99,9 +108,12 @@ public MembershipBuilderImpl(\n   public Membership<ID> create() throws MembershipConfigurationException {\n     GMSMembership<ID> gmsMembership =\n         new GMSMembership<>(membershipListener, messageListener, lifecycleListener);\n-    Services<ID> services =\n+    final Services<ID> services =\n         new Services<>(gmsMembership.getGMSManager(), statistics, authenticator,\n             membershipConfig, serializer, memberFactory, locatorClient, socketCreator);\n+    if (membershipLocator != null) {\n+      services.setLocators(membershipLocator.getLocator(), membershipLocator);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea048ff97fecd4640ee1a396e73f8586c5c457f9"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MDA3OTIx", "url": "https://github.com/apache/geode/pull/4614#pullrequestreview-347007921", "createdAt": "2020-01-23T01:09:33Z", "commit": {"oid": "ea048ff97fecd4640ee1a396e73f8586c5c457f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMTowOTozM1rOFgwNfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMTowOTozM1rOFgwNfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg4ODYzNw==", "bodyText": "This logic here replaces what used to be implemented by callers in their LifecycleListener.started() (overridden) methods. Nice thing about this is it's implemented in one place so clients of the membership subsystem can't screw it up", "url": "https://github.com/apache/geode/pull/4614#discussion_r369888637", "createdAt": "2020-01-23T01:09:33Z", "author": {"login": "Bill"}, "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/Services.java", "diffHunk": "@@ -206,6 +209,18 @@ public void start() throws MemberStartupException {\n       this.joinLeave.started();\n       this.healthMon.started();\n       this.manager.started();\n+\n+      if (membershipLocator != null) {\n+        /*\n+         * Now that all the services have started we can let the membership locator know\n+         * about them. We must do this before telling the manager to joinDistributedSystem()\n+         * later in this method\n+         */\n+        final MembershipLocatorImpl locatorImpl =\n+            (MembershipLocatorImpl) this.membershipLocator;\n+        locatorImpl.setServices(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea048ff97fecd4640ee1a396e73f8586c5c457f9"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MDA4MzIx", "url": "https://github.com/apache/geode/pull/4614#pullrequestreview-347008321", "createdAt": "2020-01-23T01:10:44Z", "commit": {"oid": "ea048ff97fecd4640ee1a396e73f8586c5c457f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMToxMDo0NVrOFgwO6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMToxMDo0NVrOFgwO6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg4OTAwMA==", "bodyText": "what was a setLocator() method is now a setLocators() one. do you hate me for this?\nby way of justification, these two objects are 1-1 in the design. I think it's a Good Thing\u2122 that there are two (smaller) interfaces instead of one (bigger one)", "url": "https://github.com/apache/geode/pull/4614#discussion_r369889000", "createdAt": "2020-01-23T01:10:45Z", "author": {"login": "Bill"}, "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/Services.java", "diffHunk": "@@ -327,12 +342,14 @@ public void memberSuspected(ID initiator,\n     return this.manager;\n   }\n \n-  public Locator<ID> getLocator() {\n-    return this.locator;\n+  public void setLocators(final Locator<ID> locator,\n+      final MembershipLocator<ID> membershipLocator) {\n+    this.locator = locator;\n+    this.membershipLocator = membershipLocator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea048ff97fecd4640ee1a396e73f8586c5c457f9"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3MDA4Nzc2", "url": "https://github.com/apache/geode/pull/4614#pullrequestreview-347008776", "createdAt": "2020-01-23T01:12:19Z", "commit": {"oid": "ea048ff97fecd4640ee1a396e73f8586c5c457f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMToxMjoxOVrOFgwQgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMToxMjoxOVrOFgwQgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg4OTQwOA==", "bodyText": "This method had and has important initialization logic (see new block comment above). This is the code that needs to be invoked after services are _start_ed but before the distributed system is joined.", "url": "https://github.com/apache/geode/pull/4614#discussion_r369889408", "createdAt": "2020-01-23T01:12:19Z", "author": {"login": "Bill"}, "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/locator/GMSLocator.java", "diffHunk": "@@ -132,15 +130,20 @@ public GMSLocator(InetAddress bindAddress, String locatorString, boolean usePref\n     this.objectDeserializer = objectDeserializer;\n   }\n \n-  public synchronized boolean setMembership(Membership<ID> membership) {\n-    if (services == null || services.isStopped()) {\n-      services = ((GMSMembership<ID>) membership).getServices();\n-      localAddress = services.getMessenger().getMemberID();\n+  /**\n+   * Called initially and after each auto-reconnect. See restart handlers in InternalLocator\n+   * up in geode-core. Services must be started before this call.\n+   *\n+   */\n+  public synchronized boolean setServices(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea048ff97fecd4640ee1a396e73f8586c5c457f9"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NDg2MTI3", "url": "https://github.com/apache/geode/pull/4614#pullrequestreview-347486127", "createdAt": "2020-01-23T17:41:54Z", "commit": {"oid": "ea048ff97fecd4640ee1a396e73f8586c5c457f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzo0MTo1NVrOFhG9ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNzo0MTo1NVrOFhG9ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2MTM4Ng==", "bodyText": "Reviewers: I'm looking for your critique of this exception. If somebody passed in a locator, and also specified config parameters to cause this routine to start a locator, it seems to me we want to stop and inform them of the conflict.", "url": "https://github.com/apache/geode/pull/4614#discussion_r370261386", "createdAt": "2020-01-23T17:41:55Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/InternalDistributedSystem.java", "diffHunk": "@@ -853,12 +876,35 @@ private void startSampler() {\n   }\n \n   /**\n+   * Starts a locator in this JVM iff the distribution config wants one started.\n+   *\n+   * @return the membershipLocatorArg if the distribution config has no locator specified;\n+   *         otherwise starts a new InternalLocator and returns its associated MembershipLocator\n+   *\n    * @since GemFire 5.7\n+   * @param membershipLocatorArg an already-running MembershipLocator, or null if none is known\n    */\n-  private void startInitLocator() throws InterruptedException {\n-    String locatorString = originalConfig.getStartLocator();\n-    if (locatorString.length() == 0) {\n-      return;\n+  private MembershipLocator startInitLocator(\n+      final MembershipLocator<InternalDistributedMember> membershipLocatorArg)\n+      throws InterruptedException {\n+\n+    final String locatorString = originalConfig.getStartLocator();\n+    final boolean shouldStartLocator = locatorString.length() > 0;\n+\n+    if (!shouldStartLocator) {\n+      return membershipLocatorArg;\n+    }\n+\n+    /*\n+     * Defensive coding here. InternalLocator's constructor is keeping track of a singleton instance\n+     * and that constructor will throw an exception if we try to have more than one\n+     * InternalLocator in existence at the same time. So in that sense we shouldn't need this check.\n+     * Nevertheless, we'd like the code over here to not rely on that singleton bookkeeping over\n+     * there. So if that singleton logic goes away, this code here might save us.\n+     */\n+    if (membershipLocatorArg != null && shouldStartLocator) {\n+      throw new IllegalStateException(\"Internal error: trying to start a second locator \"\n+          + \"in this JVM\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea048ff97fecd4640ee1a396e73f8586c5c457f9"}, "originalPosition": 135}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NjE4OTUz", "url": "https://github.com/apache/geode/pull/4614#pullrequestreview-347618953", "createdAt": "2020-01-23T21:27:06Z", "commit": {"oid": "ea048ff97fecd4640ee1a396e73f8586c5c457f9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3NjY1MjM4", "url": "https://github.com/apache/geode/pull/4614#pullrequestreview-347665238", "createdAt": "2020-01-23T23:00:35Z", "commit": {"oid": "ea048ff97fecd4640ee1a396e73f8586c5c457f9"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMzowMDozNVrOFhPcCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QyMzowMDozNVrOFhPcCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQwMDI2Nw==", "bodyText": "I'm not sure I would describe this as an \"Internal error\" since it seems like it results from a user's misconfiguration?\nCould we be more specific here - like \"Setting the start-locator property is not supported in dedicated locators launched through gfsh or the Java Locator class?\"", "url": "https://github.com/apache/geode/pull/4614#discussion_r370400267", "createdAt": "2020-01-23T23:00:35Z", "author": {"login": "upthewaterspout"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/InternalDistributedSystem.java", "diffHunk": "@@ -853,12 +876,35 @@ private void startSampler() {\n   }\n \n   /**\n+   * Starts a locator in this JVM iff the distribution config wants one started.\n+   *\n+   * @return the membershipLocatorArg if the distribution config has no locator specified;\n+   *         otherwise starts a new InternalLocator and returns its associated MembershipLocator\n+   *\n    * @since GemFire 5.7\n+   * @param membershipLocatorArg an already-running MembershipLocator, or null if none is known\n    */\n-  private void startInitLocator() throws InterruptedException {\n-    String locatorString = originalConfig.getStartLocator();\n-    if (locatorString.length() == 0) {\n-      return;\n+  private MembershipLocator startInitLocator(\n+      final MembershipLocator<InternalDistributedMember> membershipLocatorArg)\n+      throws InterruptedException {\n+\n+    final String locatorString = originalConfig.getStartLocator();\n+    final boolean shouldStartLocator = locatorString.length() > 0;\n+\n+    if (!shouldStartLocator) {\n+      return membershipLocatorArg;\n+    }\n+\n+    /*\n+     * Defensive coding here. InternalLocator's constructor is keeping track of a singleton instance\n+     * and that constructor will throw an exception if we try to have more than one\n+     * InternalLocator in existence at the same time. So in that sense we shouldn't need this check.\n+     * Nevertheless, we'd like the code over here to not rely on that singleton bookkeeping over\n+     * there. So if that singleton logic goes away, this code here might save us.\n+     */\n+    if (membershipLocatorArg != null && shouldStartLocator) {\n+      throw new IllegalStateException(\"Internal error: trying to start a second locator \"\n+          + \"in this JVM\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDI2MTM4Ng=="}, "originalCommit": {"oid": "ea048ff97fecd4640ee1a396e73f8586c5c457f9"}, "originalPosition": 135}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4MTE3ODI3", "url": "https://github.com/apache/geode/pull/4614#pullrequestreview-348117827", "createdAt": "2020-01-24T17:45:19Z", "commit": {"oid": "ae594b183f693519a78c1cf853088b4cdffec36f"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxNzo0NToxOVrOFhlW4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxOTowODo0M1rOFhnjWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc1OTM5NQ==", "bodyText": "When would there not be a membershipLocator specified?", "url": "https://github.com/apache/geode/pull/4614#discussion_r370759395", "createdAt": "2020-01-24T17:45:19Z", "author": {"login": "echobravopapa"}, "path": "geode-membership/src/main/java/org/apache/geode/distributed/internal/membership/gms/MembershipBuilderImpl.java", "diffHunk": "@@ -99,9 +108,12 @@ public MembershipBuilderImpl(\n   public Membership<ID> create() throws MembershipConfigurationException {\n     GMSMembership<ID> gmsMembership =\n         new GMSMembership<>(membershipListener, messageListener, lifecycleListener);\n-    Services<ID> services =\n+    final Services<ID> services =\n         new Services<>(gmsMembership.getGMSManager(), statistics, authenticator,\n             membershipConfig, serializer, memberFactory, locatorClient, socketCreator);\n+    if (membershipLocator != null) {\n+      services.setLocators(membershipLocator.getLocator(), membershipLocator);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTg4ODExOA=="}, "originalCommit": {"oid": "ea048ff97fecd4640ee1a396e73f8586c5c457f9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDc5NTM1NQ==", "bodyText": "completely aside... is this a TODO for an old bug or what follows was the fix for it? anyone, bueller...", "url": "https://github.com/apache/geode/pull/4614#discussion_r370795355", "createdAt": "2020-01-24T19:08:43Z", "author": {"login": "echobravopapa"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/InternalDistributedSystem.java", "diffHunk": "@@ -751,12 +771,12 @@ private void initialize(SecurityManager securityManager, PostProcessor postProce\n \n       if (!isLoner) {\n         try {\n-          dm = ClusterDistributionManager.create(this);\n+          dm = ClusterDistributionManager.create(this, membershipLocator);\n           // fix bug #46324", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae594b183f693519a78c1cf853088b4cdffec36f"}, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16ed7e10bc88b41a2be93209556084ac48e66278", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/16ed7e10bc88b41a2be93209556084ac48e66278", "committedDate": "2020-01-28T23:00:29Z", "message": "GEODE-7652: cleaned up imperative mess and clarified error msg"}, "afterCommit": {"oid": "e45ba56fae6db091f9456a552e6c7e469d43c27c", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/e45ba56fae6db091f9456a552e6c7e469d43c27c", "committedDate": "2020-01-28T23:11:26Z", "message": "GEODE-7652: cleaned up imperative mess and clarified error msg"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a97b2c4bbdfe9d8a1d9935b8daff26c0a68cd8bd", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/a97b2c4bbdfe9d8a1d9935b8daff26c0a68cd8bd", "committedDate": "2020-01-29T22:19:30Z", "message": "GEODE-7652: fix failing restart tests"}, "afterCommit": {"oid": "8f37c224bb4df70b5f18c46f3c208a4733f98a8d", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/8f37c224bb4df70b5f18c46f3c208a4733f98a8d", "committedDate": "2020-01-29T22:37:58Z", "message": "GEODE-7652: fix failing restart tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2c1079d099887a8baebfcc769c341103efc36b7", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/a2c1079d099887a8baebfcc769c341103efc36b7", "committedDate": "2020-01-30T00:45:42Z", "message": "GEODE-7652: MembershipBuilder lets you set the local locator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c4fda5688dde63a920608b13863fcf3b1355eb4", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/6c4fda5688dde63a920608b13863fcf3b1355eb4", "committedDate": "2020-01-30T00:45:44Z", "message": "GEODE-7652: spotless"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb387be156940912a6225ef606c4e1601b359c37", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/fb387be156940912a6225ef606c4e1601b359c37", "committedDate": "2020-01-30T00:45:44Z", "message": "GEODE-7652: re-break dependency from core to membership internals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2498fee09f2e1787c1d7f934fbc0909941f061c4", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/2498fee09f2e1787c1d7f934fbc0909941f061c4", "committedDate": "2020-01-30T00:50:37Z", "message": "GEODE-7652: eliminate membership LifecycleListener.started callback entirely"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "624fd60ba977a2aead36cccce87ca95f2485f846", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/624fd60ba977a2aead36cccce87ca95f2485f846", "committedDate": "2020-01-30T00:50:37Z", "message": "GEODE-7652: make IDS.startInitLocator work when no locator arg is passed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc2d7c8fa4e2f9396e90bada840c3d9eee246e39", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/bc2d7c8fa4e2f9396e90bada840c3d9eee246e39", "committedDate": "2020-01-30T00:50:37Z", "message": "GEODE_7652: provisional fix to remember locator for recovery"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ca005e83f44b7a645975e2e1272fc9942177f16", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/8ca005e83f44b7a645975e2e1272fc9942177f16", "committedDate": "2020-01-30T00:50:37Z", "message": "GEODE-7652: cleaned up imperative mess and clarified error msg"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "139f3865562fa94b09e954db1b4251cc4a453413", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/139f3865562fa94b09e954db1b4251cc4a453413", "committedDate": "2020-01-30T00:50:37Z", "message": "GEODE-7652: remove archunit violation: was exposing memberships internal Locator interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d86ebb00d17a0ba03effea8a2e232b882a3686b4", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/d86ebb00d17a0ba03effea8a2e232b882a3686b4", "committedDate": "2020-01-30T00:50:37Z", "message": "GEODE-7652: fix failing restart tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f37c224bb4df70b5f18c46f3c208a4733f98a8d", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/8f37c224bb4df70b5f18c46f3c208a4733f98a8d", "committedDate": "2020-01-29T22:37:58Z", "message": "GEODE-7652: fix failing restart tests"}, "afterCommit": {"oid": "d86ebb00d17a0ba03effea8a2e232b882a3686b4", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/d86ebb00d17a0ba03effea8a2e232b882a3686b4", "committedDate": "2020-01-30T00:50:37Z", "message": "GEODE-7652: fix failing restart tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3864, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}