{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYzMzg2MTMx", "number": 4597, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMDozMjo0MVrODYru6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMDozMjo0MVrODYru6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MjA4OTM5OnYy", "diffSide": "RIGHT", "path": "geode-lucene/src/distributedTest/java/org/apache/geode/cache/lucene/internal/IndexRepositoryFactoryDistributedTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QwMDozMjo0MVrOFerv0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNzo1MTo0MFrOFfAnPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcxODM1NA==", "bodyText": "Does this test need to be parameterized if there is only one parameter?", "url": "https://github.com/apache/geode/pull/4597#discussion_r367718354", "createdAt": "2020-01-17T00:32:41Z", "author": {"login": "DonalEvans"}, "path": "geode-lucene/src/distributedTest/java/org/apache/geode/cache/lucene/internal/IndexRepositoryFactoryDistributedTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.lucene.internal;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+\n+import junitparams.JUnitParamsRunner;\n+import junitparams.Parameters;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import org.apache.geode.DataSerializable;\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.PartitionAttributesFactory;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.lucene.LuceneService;\n+import org.apache.geode.cache.lucene.LuceneServiceProvider;\n+import org.apache.geode.cache.lucene.test.LuceneTestUtilities;\n+import org.apache.geode.distributed.DistributedLockService;\n+import org.apache.geode.internal.cache.BucketRegion;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.internal.cache.PartitionedRegionDataStore;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+@RunWith(JUnitParamsRunner.class)\n+public class IndexRepositoryFactoryDistributedTest implements Serializable {\n+  private static final String INDEX_NAME = \"index\";\n+  private static final String REGION_NAME = \"region\";\n+  private static final String DEFAULT_FIELD = \"text\";\n+  protected int locatorPort;\n+  protected MemberVM locator, dataStore1, dataStore2;\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule(5);\n+\n+  @Before\n+  public void setUp() {\n+    locator = cluster.startLocatorVM(0);\n+    locatorPort = locator.getPort();\n+    dataStore1 = cluster.startServerVM(1, locatorPort);\n+    dataStore2 = cluster.startServerVM(2, locatorPort);\n+  }\n+\n+  private Cache getCache() {\n+    Cache cache = ClusterStartupRule.getCache();\n+    assertThat(cache).isNotNull();\n+\n+    return cache;\n+  }\n+\n+  private void initDataStoreAndLuceneIndex(RegionShortcut regionShortcut) {\n+    Cache cache = getCache();\n+    LuceneService luceneService = LuceneServiceProvider.get(cache);\n+    luceneService.createIndexFactory().setFields(DEFAULT_FIELD).create(INDEX_NAME, REGION_NAME);\n+\n+    cache.<Integer, TestObject>createRegionFactory(regionShortcut)\n+        .setPartitionAttributes(new PartitionAttributesFactory<Integer, TestObject>()\n+            .setTotalNumBuckets(1).create())\n+        .create(REGION_NAME);\n+  }\n+\n+  private void insertEntries() {\n+    Cache cache = getCache();\n+    Region<Integer, TestObject> region = cache.getRegion(REGION_NAME);\n+    IntStream.range(0, 1000).forEach(i -> region.put(i, new TestObject(\"hello world\" + i)));\n+  }\n+\n+  private void assertPrimariesAndSecondaries(int primaries, int secondaries) {\n+    Cache cache = getCache();\n+    PartitionedRegionDataStore partitionedRegionDataStore =\n+        ((PartitionedRegion) cache.getRegion(REGION_NAME)).getDataStore();\n+    assertThat(partitionedRegionDataStore.getAllLocalPrimaryBucketIds().size())\n+        .isEqualTo(primaries);\n+    assertThat((partitionedRegionDataStore.getAllLocalBucketIds().size()\n+        - partitionedRegionDataStore.getAllLocalPrimaryBucketIds().size())).isEqualTo(secondaries);\n+  }\n+\n+  private BucketRegion getFileAndChunkBucket() {\n+    Cache cache = getCache();\n+    LuceneServiceImpl luceneService = (LuceneServiceImpl) LuceneServiceProvider.get(cache);\n+    InternalLuceneIndex index =\n+        (InternalLuceneIndex) luceneService.getIndex(INDEX_NAME, REGION_NAME);\n+    LuceneIndexForPartitionedRegion indexForPR = (LuceneIndexForPartitionedRegion) index;\n+    PartitionedRegion fileRegion = indexForPR.getFileAndChunkRegion();\n+\n+    return PartitionedRepositoryManager.indexRepositoryFactory.getMatchingBucket(fileRegion, 0);\n+  }\n+\n+  @Test\n+  @Parameters({\"PARTITION_REDUNDANT\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b638f121c695253f8068edd5a5ede388bca1a89d"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODA2MDIyMw==", "bodyText": "Changed! \ud83d\udc4d", "url": "https://github.com/apache/geode/pull/4597#discussion_r368060223", "createdAt": "2020-01-17T17:51:40Z", "author": {"login": "jujoramos"}, "path": "geode-lucene/src/distributedTest/java/org/apache/geode/cache/lucene/internal/IndexRepositoryFactoryDistributedTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.lucene.internal;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.fail;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+\n+import junitparams.JUnitParamsRunner;\n+import junitparams.Parameters;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.awaitility.core.ConditionTimeoutException;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import org.apache.geode.DataSerializable;\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.PartitionAttributesFactory;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.lucene.LuceneService;\n+import org.apache.geode.cache.lucene.LuceneServiceProvider;\n+import org.apache.geode.cache.lucene.test.LuceneTestUtilities;\n+import org.apache.geode.distributed.DistributedLockService;\n+import org.apache.geode.internal.cache.BucketRegion;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.internal.cache.PartitionedRegionDataStore;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+@RunWith(JUnitParamsRunner.class)\n+public class IndexRepositoryFactoryDistributedTest implements Serializable {\n+  private static final String INDEX_NAME = \"index\";\n+  private static final String REGION_NAME = \"region\";\n+  private static final String DEFAULT_FIELD = \"text\";\n+  protected int locatorPort;\n+  protected MemberVM locator, dataStore1, dataStore2;\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule(5);\n+\n+  @Before\n+  public void setUp() {\n+    locator = cluster.startLocatorVM(0);\n+    locatorPort = locator.getPort();\n+    dataStore1 = cluster.startServerVM(1, locatorPort);\n+    dataStore2 = cluster.startServerVM(2, locatorPort);\n+  }\n+\n+  private Cache getCache() {\n+    Cache cache = ClusterStartupRule.getCache();\n+    assertThat(cache).isNotNull();\n+\n+    return cache;\n+  }\n+\n+  private void initDataStoreAndLuceneIndex(RegionShortcut regionShortcut) {\n+    Cache cache = getCache();\n+    LuceneService luceneService = LuceneServiceProvider.get(cache);\n+    luceneService.createIndexFactory().setFields(DEFAULT_FIELD).create(INDEX_NAME, REGION_NAME);\n+\n+    cache.<Integer, TestObject>createRegionFactory(regionShortcut)\n+        .setPartitionAttributes(new PartitionAttributesFactory<Integer, TestObject>()\n+            .setTotalNumBuckets(1).create())\n+        .create(REGION_NAME);\n+  }\n+\n+  private void insertEntries() {\n+    Cache cache = getCache();\n+    Region<Integer, TestObject> region = cache.getRegion(REGION_NAME);\n+    IntStream.range(0, 1000).forEach(i -> region.put(i, new TestObject(\"hello world\" + i)));\n+  }\n+\n+  private void assertPrimariesAndSecondaries(int primaries, int secondaries) {\n+    Cache cache = getCache();\n+    PartitionedRegionDataStore partitionedRegionDataStore =\n+        ((PartitionedRegion) cache.getRegion(REGION_NAME)).getDataStore();\n+    assertThat(partitionedRegionDataStore.getAllLocalPrimaryBucketIds().size())\n+        .isEqualTo(primaries);\n+    assertThat((partitionedRegionDataStore.getAllLocalBucketIds().size()\n+        - partitionedRegionDataStore.getAllLocalPrimaryBucketIds().size())).isEqualTo(secondaries);\n+  }\n+\n+  private BucketRegion getFileAndChunkBucket() {\n+    Cache cache = getCache();\n+    LuceneServiceImpl luceneService = (LuceneServiceImpl) LuceneServiceProvider.get(cache);\n+    InternalLuceneIndex index =\n+        (InternalLuceneIndex) luceneService.getIndex(INDEX_NAME, REGION_NAME);\n+    LuceneIndexForPartitionedRegion indexForPR = (LuceneIndexForPartitionedRegion) index;\n+    PartitionedRegion fileRegion = indexForPR.getFileAndChunkRegion();\n+\n+    return PartitionedRepositoryManager.indexRepositoryFactory.getMatchingBucket(fileRegion, 0);\n+  }\n+\n+  @Test\n+  @Parameters({\"PARTITION_REDUNDANT\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzcxODM1NA=="}, "originalCommit": {"oid": "b638f121c695253f8068edd5a5ede388bca1a89d"}, "originalPosition": 117}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3836, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}