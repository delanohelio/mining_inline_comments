{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3OTcxNTQw", "number": 4639, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNzo0NDoyOVrODbUBVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMDo0OToyNVrODdLbKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTY2MTY0OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledComparison.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNzo0NDoyOVrOFiucRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNDo1MjoxOFrOFjLMmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk1NjgwNQ==", "bodyText": "Just a question, should this condition be on it's own and does it make sense to give it a score of 0?  Should these types of conditions be waited more heavily or considered \"better?\"  I'm ok with 0 just curious if you tried different cases out :-)", "url": "https://github.com/apache/geode/pull/4639#discussion_r371956805", "createdAt": "2020-01-28T17:44:29Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledComparison.java", "diffHunk": "@@ -296,7 +296,7 @@ public boolean isRangeEvaluatable() {\n   public int getSizeEstimate(ExecutionContext context) throws FunctionDomainException,\n       TypeMismatchException, NameResolutionException, QueryInvocationTargetException {\n     IndexInfo[] idxInfo = getIndexInfo(context);\n-    if (idxInfo == null) {\n+    if ((idxInfo == null) || (idxInfo.length > 1)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f23cea62bd2cd49f42fc4c8ffae190cb47bba384"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM4MjA1MQ==", "bodyText": "Good point, and I think you're right... having more than one index available for a CompiledComparison implies that both the left and right operands are indexed, so that case should have more \"weight\" when compared to an independent operator that would imply scanning the full region.\nWill make the changes and add some more tests, thanks for finding this!.", "url": "https://github.com/apache/geode/pull/4639#discussion_r372382051", "createdAt": "2020-01-29T13:31:12Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledComparison.java", "diffHunk": "@@ -296,7 +296,7 @@ public boolean isRangeEvaluatable() {\n   public int getSizeEstimate(ExecutionContext context) throws FunctionDomainException,\n       TypeMismatchException, NameResolutionException, QueryInvocationTargetException {\n     IndexInfo[] idxInfo = getIndexInfo(context);\n-    if (idxInfo == null) {\n+    if ((idxInfo == null) || (idxInfo.length > 1)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk1NjgwNQ=="}, "originalCommit": {"oid": "f23cea62bd2cd49f42fc4c8ffae190cb47bba384"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjQyNzkyOA==", "bodyText": "Done!", "url": "https://github.com/apache/geode/pull/4639#discussion_r372427928", "createdAt": "2020-01-29T14:52:18Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledComparison.java", "diffHunk": "@@ -296,7 +296,7 @@ public boolean isRangeEvaluatable() {\n   public int getSizeEstimate(ExecutionContext context) throws FunctionDomainException,\n       TypeMismatchException, NameResolutionException, QueryInvocationTargetException {\n     IndexInfo[] idxInfo = getIndexInfo(context);\n-    if (idxInfo == null) {\n+    if ((idxInfo == null) || (idxInfo.length > 1)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk1NjgwNQ=="}, "originalCommit": {"oid": "f23cea62bd2cd49f42fc4c8ffae190cb47bba384"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxOTIyNDc0OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledComparison.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwMDo0OToyNVrOFlohvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwOTozNToyMFrOFlxHow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwNTYyOQ==", "bodyText": "I think if the key is UNDEFINED and we have indexes present, the index actually has a mapping for UNDEFINED so the lookup should itself be really fast so 0 might be ok", "url": "https://github.com/apache/geode/pull/4639#discussion_r375005629", "createdAt": "2020-02-05T00:49:25Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledComparison.java", "diffHunk": "@@ -296,15 +296,23 @@ public boolean isRangeEvaluatable() {\n   public int getSizeEstimate(ExecutionContext context) throws FunctionDomainException,\n       TypeMismatchException, NameResolutionException, QueryInvocationTargetException {\n     IndexInfo[] idxInfo = getIndexInfo(context);\n-    if (idxInfo == null) {\n-      // Asif: This implies it is an independent condition. So evaluate it first\n-      // in filter operand\n+\n+    // Both operands are indexed, evaluate it first in the filter operand.\n+    if (idxInfo != null && idxInfo.length > 1) {\n       return 0;\n     }\n+\n+    // Asif: This implies it is an independent condition. So evaluate it second in filter operand.\n+    if (idxInfo == null) {\n+      return 1;\n+    }\n+\n     assert idxInfo.length == 1;\n     Object key = idxInfo[0].evaluateIndexKey(context);\n+\n+    // Evaluate it second as we do with the independent condition if key was not found.\n     if (key != null && key.equals(QueryService.UNDEFINED)) {\n-      return 0;\n+      return 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97dfc084f47f278094d9be73abe0ef3d863cc751"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTE0NjQwMw==", "bodyText": "Changed! \ud83d\udc4d", "url": "https://github.com/apache/geode/pull/4639#discussion_r375146403", "createdAt": "2020-02-05T09:35:20Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/cache/query/internal/CompiledComparison.java", "diffHunk": "@@ -296,15 +296,23 @@ public boolean isRangeEvaluatable() {\n   public int getSizeEstimate(ExecutionContext context) throws FunctionDomainException,\n       TypeMismatchException, NameResolutionException, QueryInvocationTargetException {\n     IndexInfo[] idxInfo = getIndexInfo(context);\n-    if (idxInfo == null) {\n-      // Asif: This implies it is an independent condition. So evaluate it first\n-      // in filter operand\n+\n+    // Both operands are indexed, evaluate it first in the filter operand.\n+    if (idxInfo != null && idxInfo.length > 1) {\n       return 0;\n     }\n+\n+    // Asif: This implies it is an independent condition. So evaluate it second in filter operand.\n+    if (idxInfo == null) {\n+      return 1;\n+    }\n+\n     assert idxInfo.length == 1;\n     Object key = idxInfo[0].evaluateIndexKey(context);\n+\n+    // Evaluate it second as we do with the independent condition if key was not found.\n     if (key != null && key.equals(QueryService.UNDEFINED)) {\n-      return 0;\n+      return 1;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTAwNTYyOQ=="}, "originalCommit": {"oid": "97dfc084f47f278094d9be73abe0ef3d863cc751"}, "originalPosition": 24}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3728, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}