{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0Nzk4NjI4", "number": 5767, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzoyMjoyM1rOE7ooHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjo0OTozMFrOE7vL9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwOTY3MDY5OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/server/AbstractInfoIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNzoyMjoyM1rOH3ZDlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxODoxMTozN1rOH3bmMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0NDI0Ng==", "bodyText": "This is going to also modify ALL_PROPERTIES since nonStatsProperties is just a reference. I'd suggest making ALL_PROPERTIES immutable with something like\n.collect(Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));\n\nand then it would be evident that you need to make a copy here and other places where this is happening.", "url": "https://github.com/apache/geode/pull/5767#discussion_r527844246", "createdAt": "2020-11-20T17:22:23Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/server/AbstractInfoIntegrationTest.java", "diffHunk": "@@ -98,71 +165,115 @@ public void shouldReturnClusterEnabledProperty() {\n     assertThat(actualResult).contains(expectedResult);\n   }\n \n-  final List<String> SERVER_PROPERTIES =\n-      Arrays.asList(\n-          \"# Server\",\n-          \"redis_version:\",\n-          \"tcp_port:\",\n-          \"redis_mode:\");\n-\n-  final List<String> PERSISTENCE_PROPERTIES =\n-      Arrays.asList(\n-          \"# Persistence\",\n-          \"loading:\");\n-\n-  final List<String> CLUSTER_PROPERTIES =\n-      Arrays.asList(\n-          \"# Cluster\",\n-          \"cluster_enabled:\");\n-\n   @Test\n-  public void shouldReturnServerSectionsGivenServerSectionParameter() {\n+  public void shouldReturnServerSections_givenServerSectionParameter() {\n+    List<String> nonServerProperties = ALL_PROPERTIES;\n+    nonServerProperties.removeAll(SERVER_PROPERTIES);\n+\n     String actualResult = jedis.info(\"server\");\n \n     assertThat(actualResult).contains(SERVER_PROPERTIES);\n-    assertThat(actualResult).doesNotContain(CLUSTER_PROPERTIES);\n-    assertThat(actualResult).doesNotContain(PERSISTENCE_PROPERTIES);\n+    assertThat(actualResult).doesNotContain(nonServerProperties);\n   }\n \n   @Test\n-  public void shouldReturnClusterSectionsGivenClusterSectionParameter() {\n+  public void shouldReturnClusterSections_givenClusterSectionParameter() {\n+    List<String> nonClusterProperties = ALL_PROPERTIES;\n+    nonClusterProperties.removeAll(CLUSTER_PROPERTIES);\n+\n     String actualResult = jedis.info(\"cluster\");\n \n     assertThat(actualResult).contains(CLUSTER_PROPERTIES);\n-    assertThat(actualResult).doesNotContain(SERVER_PROPERTIES);\n-    assertThat(actualResult).doesNotContain(PERSISTENCE_PROPERTIES);\n+    assertThat(actualResult).doesNotContain(nonClusterProperties);\n   }\n \n   @Test\n-  public void shouldReturnPersistenceSectionsGivenPersistenceSectionParameter() {\n+  public void shouldReturnPersistenceSections_givenPersistenceSectionParameter() {\n+    List<String> nonPersistenceProperties = ALL_PROPERTIES;\n+    nonPersistenceProperties.removeAll(PERSISTENCE_PROPERTIES);\n+\n     String actualResult = jedis.info(\"persistence\");\n \n     assertThat(actualResult).contains(PERSISTENCE_PROPERTIES);\n-    assertThat(actualResult).doesNotContain(SERVER_PROPERTIES);\n-    assertThat(actualResult).doesNotContain(CLUSTER_PROPERTIES);\n+    assertThat(actualResult).doesNotContain(nonPersistenceProperties);\n+  }\n+\n+  @Test\n+  public void shouldReturnStatsSections_givenStatsSectionParameter() {\n+    List<String> nonStatsProperties = ALL_PROPERTIES;\n+    nonStatsProperties.removeAll(STATS_PROPERTIES);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7bb410da460b4e7ab40ad31a959f7786130a724"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg4NTg3Mw==", "bodyText": "Done!", "url": "https://github.com/apache/geode/pull/5767#discussion_r527885873", "createdAt": "2020-11-20T18:11:37Z", "author": {"login": "ringles"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/server/AbstractInfoIntegrationTest.java", "diffHunk": "@@ -98,71 +165,115 @@ public void shouldReturnClusterEnabledProperty() {\n     assertThat(actualResult).contains(expectedResult);\n   }\n \n-  final List<String> SERVER_PROPERTIES =\n-      Arrays.asList(\n-          \"# Server\",\n-          \"redis_version:\",\n-          \"tcp_port:\",\n-          \"redis_mode:\");\n-\n-  final List<String> PERSISTENCE_PROPERTIES =\n-      Arrays.asList(\n-          \"# Persistence\",\n-          \"loading:\");\n-\n-  final List<String> CLUSTER_PROPERTIES =\n-      Arrays.asList(\n-          \"# Cluster\",\n-          \"cluster_enabled:\");\n-\n   @Test\n-  public void shouldReturnServerSectionsGivenServerSectionParameter() {\n+  public void shouldReturnServerSections_givenServerSectionParameter() {\n+    List<String> nonServerProperties = ALL_PROPERTIES;\n+    nonServerProperties.removeAll(SERVER_PROPERTIES);\n+\n     String actualResult = jedis.info(\"server\");\n \n     assertThat(actualResult).contains(SERVER_PROPERTIES);\n-    assertThat(actualResult).doesNotContain(CLUSTER_PROPERTIES);\n-    assertThat(actualResult).doesNotContain(PERSISTENCE_PROPERTIES);\n+    assertThat(actualResult).doesNotContain(nonServerProperties);\n   }\n \n   @Test\n-  public void shouldReturnClusterSectionsGivenClusterSectionParameter() {\n+  public void shouldReturnClusterSections_givenClusterSectionParameter() {\n+    List<String> nonClusterProperties = ALL_PROPERTIES;\n+    nonClusterProperties.removeAll(CLUSTER_PROPERTIES);\n+\n     String actualResult = jedis.info(\"cluster\");\n \n     assertThat(actualResult).contains(CLUSTER_PROPERTIES);\n-    assertThat(actualResult).doesNotContain(SERVER_PROPERTIES);\n-    assertThat(actualResult).doesNotContain(PERSISTENCE_PROPERTIES);\n+    assertThat(actualResult).doesNotContain(nonClusterProperties);\n   }\n \n   @Test\n-  public void shouldReturnPersistenceSectionsGivenPersistenceSectionParameter() {\n+  public void shouldReturnPersistenceSections_givenPersistenceSectionParameter() {\n+    List<String> nonPersistenceProperties = ALL_PROPERTIES;\n+    nonPersistenceProperties.removeAll(PERSISTENCE_PROPERTIES);\n+\n     String actualResult = jedis.info(\"persistence\");\n \n     assertThat(actualResult).contains(PERSISTENCE_PROPERTIES);\n-    assertThat(actualResult).doesNotContain(SERVER_PROPERTIES);\n-    assertThat(actualResult).doesNotContain(CLUSTER_PROPERTIES);\n+    assertThat(actualResult).doesNotContain(nonPersistenceProperties);\n+  }\n+\n+  @Test\n+  public void shouldReturnStatsSections_givenStatsSectionParameter() {\n+    List<String> nonStatsProperties = ALL_PROPERTIES;\n+    nonStatsProperties.removeAll(STATS_PROPERTIES);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg0NDI0Ng=="}, "originalCommit": {"oid": "f7bb410da460b4e7ab40ad31a959f7786130a724"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMDc0NTQ5OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/server/AbstractInfoIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjo0OTozMFrOH3jQuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQyMjo0OTozMFrOH3jQuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODAxMTQ1MQ==", "bodyText": "Wow... this seems so hard compared to list.addAll", "url": "https://github.com/apache/geode/pull/5767#discussion_r528011451", "createdAt": "2020-11-20T22:49:30Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/server/AbstractInfoIntegrationTest.java", "diffHunk": "@@ -39,6 +44,71 @@\n   private static final int REDIS_CLIENT_TIMEOUT =\n       Math.toIntExact(GeodeAwaitility.getTimeout().toMillis());\n \n+  final List<String> SERVER_PROPERTIES =\n+      Arrays.asList(\n+          \"# Server\",\n+          \"redis_version:\",\n+          \"redis_mode:\",\n+          \"tcp_port:\",\n+          \"uptime_in_days:\",\n+          \"uptime_in_seconds:\");\n+\n+  final List<String> PERSISTENCE_PROPERTIES =\n+      Arrays.asList(\n+          \"# Persistence\",\n+          \"rdb_changes_since_last_save\",\n+          \"rdb_last_save_time\",\n+          \"loading:\");\n+\n+  final List<String> REPLICATION_PROPERTIES =\n+      Arrays.asList(\n+          \"# Replication\",\n+          \"role:\",\n+          \"connected_slaves:\");\n+\n+  final List<String> CLUSTER_PROPERTIES =\n+      Arrays.asList(\n+          \"# Cluster\",\n+          \"cluster_enabled:\");\n+\n+  final List<String> CLIENTS_PROPERTIES =\n+      Arrays.asList(\n+          \"# Clients\",\n+          \"connected_clients:\",\n+          \"blocked_clients:\");\n+\n+  final List<String> MEMORY_PROPERTIES =\n+      Arrays.asList(\n+          \"# Memory\",\n+          \"used_memory:\",\n+          \"mem_fragmentation_ratio:\");\n+\n+  final List<String> KEYSPACE_PROPERTIES =\n+      Arrays.asList(\n+          \"# Keyspace\",\n+          \"db0:\");\n+\n+  final List<String> STATS_PROPERTIES =\n+      Arrays.asList(\n+          \"# Stats\",\n+          \"total_commands_processed:\",\n+          \"instantaneous_ops_per_sec:\",\n+          \"total_net_input_bytes:\",\n+          \"instantaneous_input_kbps:\",\n+          \"total_connections_received:\",\n+          \"keyspace_hits:\",\n+          \"keyspace_misses:\",\n+          \"evicted_keys:\",\n+          \"rejected_connections:\");\n+\n+\n+  final List<String> ALL_PROPERTIES =\n+      Stream.of(SERVER_PROPERTIES, PERSISTENCE_PROPERTIES, CLUSTER_PROPERTIES,\n+          MEMORY_PROPERTIES, CLIENTS_PROPERTIES, STATS_PROPERTIES, REPLICATION_PROPERTIES)\n+          .flatMap(Collection::stream)\n+          .collect(\n+              Collectors.collectingAndThen(Collectors.toList(), Collections::unmodifiableList));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a981b974949cfe9a5da17f5b185c5dab9860ad99"}, "originalPosition": 82}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4520, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}