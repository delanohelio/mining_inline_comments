{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NDMwMTcx", "number": 4852, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjo0NToxOFrODsJW5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjo0OTo1NVrODsJd-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjE3MjUzOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/ExpireExecutorJUnitTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjo0NToxOFrOF85erw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzozNToyNFrOF87XkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwMDYyMw==", "bodyText": "This and import org.apache.geode.redis.internal.executor.string.GetRangeExecutor are unused according to spotless", "url": "https://github.com/apache/geode/pull/4852#discussion_r399400623", "createdAt": "2020-03-27T16:45:18Z", "author": {"login": "moleske"}, "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/ExpireExecutorJUnitTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.general;\n+\n+import static java.nio.charset.Charset.defaultCharset;\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.nio.charset.Charset;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ebb889f1da13d97e80101dbed553eb21337c916"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyNTkzMw==", "bodyText": "yeah, I confess I was soling on this at the end of the day and couldn't remember how to run spotless.  We'll catch it next commit!", "url": "https://github.com/apache/geode/pull/4852#discussion_r399425933", "createdAt": "2020-03-27T17:26:15Z", "author": {"login": "jhutchison"}, "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/ExpireExecutorJUnitTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.general;\n+\n+import static java.nio.charset.Charset.defaultCharset;\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.nio.charset.Charset;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwMDYyMw=="}, "originalCommit": {"oid": "6ebb889f1da13d97e80101dbed553eb21337c916"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzMTU2OQ==", "bodyText": "./gradlew spotlessApply will auto apply the fixes it can (like removing imports)", "url": "https://github.com/apache/geode/pull/4852#discussion_r399431569", "createdAt": "2020-03-27T17:35:24Z", "author": {"login": "moleske"}, "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/ExpireExecutorJUnitTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.general;\n+\n+import static java.nio.charset.Charset.defaultCharset;\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.nio.charset.Charset;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwMDYyMw=="}, "originalCommit": {"oid": "6ebb889f1da13d97e80101dbed553eb21337c916"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NjE5MDY0OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/ExpireExecutorJUnitTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNjo0OTo1NVrOF85qXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxODoxNToyN1rOF88zDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwMzYxMg==", "bodyText": "The default for verify is times(1), so you can remove the explicit times(1) (same for the tests below)", "url": "https://github.com/apache/geode/pull/4852#discussion_r399403612", "createdAt": "2020-03-27T16:49:55Z", "author": {"login": "moleske"}, "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/ExpireExecutorJUnitTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.general;\n+\n+import static java.nio.charset.Charset.defaultCharset;\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.UnpooledByteBufAllocator;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import org.apache.geode.redis.internal.Command;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+import org.apache.geode.redis.internal.Executor;\n+import org.apache.geode.redis.internal.executor.ExpireExecutor;\n+import org.apache.geode.redis.internal.executor.string.GetRangeExecutor;\n+\n+public class ExpireExecutorJUnitTest {\n+\n+  private ExecutionHandlerContext context;\n+  private Command command;\n+  private UnpooledByteBufAllocator byteBuf;\n+\n+  @Before\n+  public void setUp() {\n+    context = mock(ExecutionHandlerContext.class);\n+    command = mock(Command.class);\n+    byteBuf = new UnpooledByteBufAllocator(false);\n+  }\n+\n+  @Test\n+  public void calledWithTooFewCommandArguments_returnsError() {\n+    Executor executor = new ExpireExecutor();\n+    List<byte[]> commandsAsBytesWithTooFewArguments = new ArrayList<>();\n+    commandsAsBytesWithTooFewArguments.add(\"EXPIRE\".getBytes());\n+    commandsAsBytesWithTooFewArguments.add(\"key\".getBytes());\n+\n+    ArgumentCaptor<ByteBuf> argsErrorCaptor = ArgumentCaptor.forClass(ByteBuf.class);\n+\n+    when(context.getByteBufAllocator()).thenReturn(byteBuf);\n+    when(command.getProcessedCommand()).thenReturn(commandsAsBytesWithTooFewArguments);\n+\n+    executor.executeCommand(command, context);\n+    verify(command, times(1)).setResponse(argsErrorCaptor.capture());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ebb889f1da13d97e80101dbed553eb21337c916"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyNzMzNQ==", "bodyText": "In the past I've adopted a sort of informal convention of leaving  the (unneeded) times(1) in there to  make it really obvious what's going on (in case a reader is not familiar with the default value), but not sure if that actually improves readability or not?  thoughts....?", "url": "https://github.com/apache/geode/pull/4852#discussion_r399427335", "createdAt": "2020-03-27T17:28:34Z", "author": {"login": "jhutchison"}, "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/ExpireExecutorJUnitTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.general;\n+\n+import static java.nio.charset.Charset.defaultCharset;\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.UnpooledByteBufAllocator;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import org.apache.geode.redis.internal.Command;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+import org.apache.geode.redis.internal.Executor;\n+import org.apache.geode.redis.internal.executor.ExpireExecutor;\n+import org.apache.geode.redis.internal.executor.string.GetRangeExecutor;\n+\n+public class ExpireExecutorJUnitTest {\n+\n+  private ExecutionHandlerContext context;\n+  private Command command;\n+  private UnpooledByteBufAllocator byteBuf;\n+\n+  @Before\n+  public void setUp() {\n+    context = mock(ExecutionHandlerContext.class);\n+    command = mock(Command.class);\n+    byteBuf = new UnpooledByteBufAllocator(false);\n+  }\n+\n+  @Test\n+  public void calledWithTooFewCommandArguments_returnsError() {\n+    Executor executor = new ExpireExecutor();\n+    List<byte[]> commandsAsBytesWithTooFewArguments = new ArrayList<>();\n+    commandsAsBytesWithTooFewArguments.add(\"EXPIRE\".getBytes());\n+    commandsAsBytesWithTooFewArguments.add(\"key\".getBytes());\n+\n+    ArgumentCaptor<ByteBuf> argsErrorCaptor = ArgumentCaptor.forClass(ByteBuf.class);\n+\n+    when(context.getByteBufAllocator()).thenReturn(byteBuf);\n+    when(command.getProcessedCommand()).thenReturn(commandsAsBytesWithTooFewArguments);\n+\n+    executor.executeCommand(command, context);\n+    verify(command, times(1)).setResponse(argsErrorCaptor.capture());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwMzYxMg=="}, "originalCommit": {"oid": "6ebb889f1da13d97e80101dbed553eb21337c916"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQzNDMwMA==", "bodyText": "Oh that's interesting.  I haven't run into that, mostly because I rarely want a test to verify something happens multiple times.  I will say when I looked through the test, I was like \"Well that's interesting, there's a times, wonder why\" and then saw \"oh its one, that's boring.\"  So I guess seeing verify with a times is a trigger for me to look closer since it is not doing the normal just one time.  I'm not that strong against it which is why I marked the PR as approved.  Don't want to block good tests on something minor.  I think in the Geode code base we've only put times(someNumber) when that number is not one if you were to go looking in Geode for prior art.", "url": "https://github.com/apache/geode/pull/4852#discussion_r399434300", "createdAt": "2020-03-27T17:39:51Z", "author": {"login": "moleske"}, "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/ExpireExecutorJUnitTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.general;\n+\n+import static java.nio.charset.Charset.defaultCharset;\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.UnpooledByteBufAllocator;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import org.apache.geode.redis.internal.Command;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+import org.apache.geode.redis.internal.Executor;\n+import org.apache.geode.redis.internal.executor.ExpireExecutor;\n+import org.apache.geode.redis.internal.executor.string.GetRangeExecutor;\n+\n+public class ExpireExecutorJUnitTest {\n+\n+  private ExecutionHandlerContext context;\n+  private Command command;\n+  private UnpooledByteBufAllocator byteBuf;\n+\n+  @Before\n+  public void setUp() {\n+    context = mock(ExecutionHandlerContext.class);\n+    command = mock(Command.class);\n+    byteBuf = new UnpooledByteBufAllocator(false);\n+  }\n+\n+  @Test\n+  public void calledWithTooFewCommandArguments_returnsError() {\n+    Executor executor = new ExpireExecutor();\n+    List<byte[]> commandsAsBytesWithTooFewArguments = new ArrayList<>();\n+    commandsAsBytesWithTooFewArguments.add(\"EXPIRE\".getBytes());\n+    commandsAsBytesWithTooFewArguments.add(\"key\".getBytes());\n+\n+    ArgumentCaptor<ByteBuf> argsErrorCaptor = ArgumentCaptor.forClass(ByteBuf.class);\n+\n+    when(context.getByteBufAllocator()).thenReturn(byteBuf);\n+    when(command.getProcessedCommand()).thenReturn(commandsAsBytesWithTooFewArguments);\n+\n+    executor.executeCommand(command, context);\n+    verify(command, times(1)).setResponse(argsErrorCaptor.capture());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwMzYxMg=="}, "originalCommit": {"oid": "6ebb889f1da13d97e80101dbed553eb21337c916"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ1NDk5MA==", "bodyText": "yeah, makes sense.  Will take into consideration in future verifies :)   thanks for the feedback", "url": "https://github.com/apache/geode/pull/4852#discussion_r399454990", "createdAt": "2020-03-27T18:15:27Z", "author": {"login": "jhutchison"}, "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/ExpireExecutorJUnitTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.general;\n+\n+import static java.nio.charset.Charset.defaultCharset;\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.nio.charset.Charset;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.UnpooledByteBufAllocator;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import org.apache.geode.redis.internal.Command;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+import org.apache.geode.redis.internal.Executor;\n+import org.apache.geode.redis.internal.executor.ExpireExecutor;\n+import org.apache.geode.redis.internal.executor.string.GetRangeExecutor;\n+\n+public class ExpireExecutorJUnitTest {\n+\n+  private ExecutionHandlerContext context;\n+  private Command command;\n+  private UnpooledByteBufAllocator byteBuf;\n+\n+  @Before\n+  public void setUp() {\n+    context = mock(ExecutionHandlerContext.class);\n+    command = mock(Command.class);\n+    byteBuf = new UnpooledByteBufAllocator(false);\n+  }\n+\n+  @Test\n+  public void calledWithTooFewCommandArguments_returnsError() {\n+    Executor executor = new ExpireExecutor();\n+    List<byte[]> commandsAsBytesWithTooFewArguments = new ArrayList<>();\n+    commandsAsBytesWithTooFewArguments.add(\"EXPIRE\".getBytes());\n+    commandsAsBytesWithTooFewArguments.add(\"key\".getBytes());\n+\n+    ArgumentCaptor<ByteBuf> argsErrorCaptor = ArgumentCaptor.forClass(ByteBuf.class);\n+\n+    when(context.getByteBufAllocator()).thenReturn(byteBuf);\n+    when(command.getProcessedCommand()).thenReturn(commandsAsBytesWithTooFewArguments);\n+\n+    executor.executeCommand(command, context);\n+    verify(command, times(1)).setResponse(argsErrorCaptor.capture());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQwMzYxMg=="}, "originalCommit": {"oid": "6ebb889f1da13d97e80101dbed553eb21337c916"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4429, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}