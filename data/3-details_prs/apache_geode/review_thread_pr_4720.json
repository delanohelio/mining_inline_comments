{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MjY3NjA5", "number": 4720, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDo1MjoyNlrODih7qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDo1MjoyNlrODih7qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NTM0MTIzOnYy", "diffSide": "RIGHT", "path": "geode-gfsh/build.gradle", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQwMDo1MjoyNlrOFt1KmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMzowMDo0OVrOFuYb7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwMTMwNQ==", "bodyText": "why api and not merely implementation here?", "url": "https://github.com/apache/geode/pull/4720#discussion_r383601305", "createdAt": "2020-02-25T00:52:26Z", "author": {"login": "Bill"}, "path": "geode-gfsh/build.gradle", "diffHunk": "@@ -21,26 +21,33 @@ apply from: \"${project.projectDir}/../gradle/publish-java.gradle\"\n \n dependencies {\n     api(platform(project(':boms:geode-all-bom')))\n-    compile(project(':geode-core'))\n-    compile(project(':geode-logging'))\n-    compile(project(':geode-membership'))\n-    compile(project(':geode-serialization'))\n-    compile(project(':geode-unsafe'))\n \n-    compile('com.healthmarketscience.rmiio:rmiio')\n+    api(project(':geode-core'))\n+    api(project(':geode-common'))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6637a2d80a5e394b58dc1ddf40ef1da2e37241b9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDA2NjU4NQ==", "bodyText": "In geode-gfsh, the non-internal, public abstract class org.apache.geode.management.cli.GfshCommand has public methods such as authorize that takes a ResourePermission.Resource, defined in the  geode-core project. My understanding is, this makes geode-core an API-level dependency of geode-gfsh.\nSimilar reasoning for geode-common, in that it uses org.apache.geode.annotations.Immutable in a non-internal abstract class.", "url": "https://github.com/apache/geode/pull/4720#discussion_r384066585", "createdAt": "2020-02-25T19:08:29Z", "author": {"login": "rhoughton-pivot"}, "path": "geode-gfsh/build.gradle", "diffHunk": "@@ -21,26 +21,33 @@ apply from: \"${project.projectDir}/../gradle/publish-java.gradle\"\n \n dependencies {\n     api(platform(project(':boms:geode-all-bom')))\n-    compile(project(':geode-core'))\n-    compile(project(':geode-logging'))\n-    compile(project(':geode-membership'))\n-    compile(project(':geode-serialization'))\n-    compile(project(':geode-unsafe'))\n \n-    compile('com.healthmarketscience.rmiio:rmiio')\n+    api(project(':geode-core'))\n+    api(project(':geode-common'))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwMTMwNQ=="}, "originalCommit": {"oid": "6637a2d80a5e394b58dc1ddf40ef1da2e37241b9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDExNjM4MQ==", "bodyText": "Golly, I didn't know that GfshCommand was meant to be extended by users. I see it's in a non-internal package. Does that mean we really have to actually support users extending that thing? @jinmeiliao do you have an opinion? Seems to me like it was a mistake to make GfshCommand non-internal.", "url": "https://github.com/apache/geode/pull/4720#discussion_r384116381", "createdAt": "2020-02-25T20:46:23Z", "author": {"login": "Bill"}, "path": "geode-gfsh/build.gradle", "diffHunk": "@@ -21,26 +21,33 @@ apply from: \"${project.projectDir}/../gradle/publish-java.gradle\"\n \n dependencies {\n     api(platform(project(':boms:geode-all-bom')))\n-    compile(project(':geode-core'))\n-    compile(project(':geode-logging'))\n-    compile(project(':geode-membership'))\n-    compile(project(':geode-serialization'))\n-    compile(project(':geode-unsafe'))\n \n-    compile('com.healthmarketscience.rmiio:rmiio')\n+    api(project(':geode-core'))\n+    api(project(':geode-common'))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwMTMwNQ=="}, "originalCommit": {"oid": "6637a2d80a5e394b58dc1ddf40ef1da2e37241b9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEyNTE2MA==", "bodyText": "for a long time there was a vision to make Geode more modular, with each module providing its own gfsh commands (the ability for users to also write their own gfsh commands is sort of a side-effect of this...I too am curious if any users actually have done so).  If we wanted to change course and say that gfsh is a fixed, non-extensible set of commands, we could also get rid of fast-classpath-scanner and a lot of other baggage...", "url": "https://github.com/apache/geode/pull/4720#discussion_r384125160", "createdAt": "2020-02-25T21:05:03Z", "author": {"login": "onichols-pivotal"}, "path": "geode-gfsh/build.gradle", "diffHunk": "@@ -21,26 +21,33 @@ apply from: \"${project.projectDir}/../gradle/publish-java.gradle\"\n \n dependencies {\n     api(platform(project(':boms:geode-all-bom')))\n-    compile(project(':geode-core'))\n-    compile(project(':geode-logging'))\n-    compile(project(':geode-membership'))\n-    compile(project(':geode-serialization'))\n-    compile(project(':geode-unsafe'))\n \n-    compile('com.healthmarketscience.rmiio:rmiio')\n+    api(project(':geode-core'))\n+    api(project(':geode-common'))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwMTMwNQ=="}, "originalCommit": {"oid": "6637a2d80a5e394b58dc1ddf40ef1da2e37241b9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDEzNjIyNg==", "bodyText": "Yes, gfsh commands are meant to be extensible, you can write your own gfsh commands and have them loaded in the command executor. GfshCommand is public for that reason.", "url": "https://github.com/apache/geode/pull/4720#discussion_r384136226", "createdAt": "2020-02-25T21:27:38Z", "author": {"login": "jinmeiliao"}, "path": "geode-gfsh/build.gradle", "diffHunk": "@@ -21,26 +21,33 @@ apply from: \"${project.projectDir}/../gradle/publish-java.gradle\"\n \n dependencies {\n     api(platform(project(':boms:geode-all-bom')))\n-    compile(project(':geode-core'))\n-    compile(project(':geode-logging'))\n-    compile(project(':geode-membership'))\n-    compile(project(':geode-serialization'))\n-    compile(project(':geode-unsafe'))\n \n-    compile('com.healthmarketscience.rmiio:rmiio')\n+    api(project(':geode-core'))\n+    api(project(':geode-common'))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwMTMwNQ=="}, "originalCommit": {"oid": "6637a2d80a5e394b58dc1ddf40ef1da2e37241b9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE3OTE4MA==", "bodyText": "ok thanks. @rhoughton-pivot this code is fine.", "url": "https://github.com/apache/geode/pull/4720#discussion_r384179180", "createdAt": "2020-02-25T23:00:49Z", "author": {"login": "Bill"}, "path": "geode-gfsh/build.gradle", "diffHunk": "@@ -21,26 +21,33 @@ apply from: \"${project.projectDir}/../gradle/publish-java.gradle\"\n \n dependencies {\n     api(platform(project(':boms:geode-all-bom')))\n-    compile(project(':geode-core'))\n-    compile(project(':geode-logging'))\n-    compile(project(':geode-membership'))\n-    compile(project(':geode-serialization'))\n-    compile(project(':geode-unsafe'))\n \n-    compile('com.healthmarketscience.rmiio:rmiio')\n+    api(project(':geode-core'))\n+    api(project(':geode-common'))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzYwMTMwNQ=="}, "originalCommit": {"oid": "6637a2d80a5e394b58dc1ddf40ef1da2e37241b9"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3782, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}