{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1Mjk0NzU5", "number": 5637, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDoxNDoyMFrOE1cbpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTowOTozN1rOFNebZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDc1ODE1OnYy", "diffSide": "RIGHT", "path": "geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/CacheXmlJdbcMappingIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDoxNDoyMFrOHtuTKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODoxNTo0MFrOHv7dWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNjUzOQ==", "bodyText": "Is this replacement of & necessary?", "url": "https://github.com/apache/geode/pull/5637#discussion_r517706539", "createdAt": "2020-11-05T00:14:20Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/CacheXmlJdbcMappingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.connectors.jdbc;\n+\n+import static org.apache.geode.test.util.ResourceUtils.createTempFileFromResource;\n+\n+import org.junit.Rule;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.internal.cache.InternalCache;\n+\n+public class CacheXmlJdbcMappingIntegrationTest extends JdbcMappingIntegrationTest {\n+\n+  @Rule\n+  public RestoreSystemProperties restoreSystemProperties = new RestoreSystemProperties();\n+\n+  @Override\n+  protected InternalCache createCacheAndCreateJdbcMapping(String cacheXmlTestName)\n+      throws Exception {\n+    String url = dbRule.getConnectionUrl().replaceAll(\"&\", \"&amp;\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1MzAzMA==", "bodyText": "When expanding Java system properties like <jndi-binding ... connection-url=\"${TestDataSourceUrl}\"> in cache.xml and the connection string contains '?' such as jdbc:mysql://localhost:3306?user=root&useSSL=false, if the connection string is not escaped, an error will occur when connecting to the database.", "url": "https://github.com/apache/geode/pull/5637#discussion_r519153030", "createdAt": "2020-11-07T08:34:03Z", "author": {"login": "masaki-yamakawa"}, "path": "geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/CacheXmlJdbcMappingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.connectors.jdbc;\n+\n+import static org.apache.geode.test.util.ResourceUtils.createTempFileFromResource;\n+\n+import org.junit.Rule;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.internal.cache.InternalCache;\n+\n+public class CacheXmlJdbcMappingIntegrationTest extends JdbcMappingIntegrationTest {\n+\n+  @Rule\n+  public RestoreSystemProperties restoreSystemProperties = new RestoreSystemProperties();\n+\n+  @Override\n+  protected InternalCache createCacheAndCreateJdbcMapping(String cacheXmlTestName)\n+      throws Exception {\n+    String url = dbRule.getConnectionUrl().replaceAll(\"&\", \"&amp;\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNjUzOQ=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAxOTI4OQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/geode/pull/5637#discussion_r520019289", "createdAt": "2020-11-09T18:15:40Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/CacheXmlJdbcMappingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.connectors.jdbc;\n+\n+import static org.apache.geode.test.util.ResourceUtils.createTempFileFromResource;\n+\n+import org.junit.Rule;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.internal.cache.InternalCache;\n+\n+public class CacheXmlJdbcMappingIntegrationTest extends JdbcMappingIntegrationTest {\n+\n+  @Rule\n+  public RestoreSystemProperties restoreSystemProperties = new RestoreSystemProperties();\n+\n+  @Override\n+  protected InternalCache createCacheAndCreateJdbcMapping(String cacheXmlTestName)\n+      throws Exception {\n+    String url = dbRule.getConnectionUrl().replaceAll(\"&\", \"&amp;\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcwNjUzOQ=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDgwMzgxOnYy", "diffSide": "RIGHT", "path": "geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/GfshJdbcMappingIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDozNjo0MFrOHtutQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNTozNzoyNFrOIRapPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxMzIxNw==", "bodyText": "To create region, data store and mapping etc, I would recommend using GfshRule and execute gfsh commands, instead of calling the internal functions that implement the gfsh commands.", "url": "https://github.com/apache/geode/pull/5637#discussion_r517713217", "createdAt": "2020-11-05T00:36:40Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/GfshJdbcMappingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.connectors.jdbc;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.configuration.JndiBindingsType;\n+import org.apache.geode.cache.configuration.RegionConfig;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.ResultCollector;\n+import org.apache.geode.connectors.jdbc.internal.cli.CreateMappingFunction;\n+import org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunction;\n+import org.apache.geode.connectors.jdbc.internal.configuration.FieldMapping;\n+import org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.management.configuration.RegionType;\n+import org.apache.geode.management.internal.cli.commands.CreateJndiBindingCommand;\n+import org.apache.geode.management.internal.cli.functions.CreateJndiBindingFunction;\n+import org.apache.geode.management.internal.cli.functions.CreateRegionFunctionArgs;\n+import org.apache.geode.management.internal.cli.functions.RegionCreateFunction;\n+import org.apache.geode.management.internal.configuration.converters.RegionConverter;\n+import org.apache.geode.management.internal.functions.CliFunctionResult;\n+import org.apache.geode.management.internal.util.ManagementUtils;\n+\n+public class GfshJdbcMappingIntegrationTest extends JdbcMappingIntegrationTest {\n+\n+  @Override\n+  protected InternalCache createCacheAndCreateJdbcMapping(String cacheXmlTestName)\n+      throws Exception {\n+    InternalCache cache =\n+        (InternalCache) new CacheFactory().set(\"locators\", \"\").set(\"mcast-port\", \"0\").create();\n+    Set<DistributedMember> targetMembers = findMembers(cache, null, null);\n+\n+    CliFunctionResult createRegionFuncResult = executeCreateRegionFunction(targetMembers);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1MzA5NQ==", "bodyText": "I understand that it is recommended to use GfshRule.\nWith this change, I would like to achieve the same behavior in gfsh command and cache.xml.\nSo I have implimented JdbcMappingIntegrationTest class to standardize tests.\nI have used the internal functions because some parts of GfshRule can not verify in case of errors.", "url": "https://github.com/apache/geode/pull/5637#discussion_r519153095", "createdAt": "2020-11-07T08:34:35Z", "author": {"login": "masaki-yamakawa"}, "path": "geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/GfshJdbcMappingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.connectors.jdbc;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.configuration.JndiBindingsType;\n+import org.apache.geode.cache.configuration.RegionConfig;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.ResultCollector;\n+import org.apache.geode.connectors.jdbc.internal.cli.CreateMappingFunction;\n+import org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunction;\n+import org.apache.geode.connectors.jdbc.internal.configuration.FieldMapping;\n+import org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.management.configuration.RegionType;\n+import org.apache.geode.management.internal.cli.commands.CreateJndiBindingCommand;\n+import org.apache.geode.management.internal.cli.functions.CreateJndiBindingFunction;\n+import org.apache.geode.management.internal.cli.functions.CreateRegionFunctionArgs;\n+import org.apache.geode.management.internal.cli.functions.RegionCreateFunction;\n+import org.apache.geode.management.internal.configuration.converters.RegionConverter;\n+import org.apache.geode.management.internal.functions.CliFunctionResult;\n+import org.apache.geode.management.internal.util.ManagementUtils;\n+\n+public class GfshJdbcMappingIntegrationTest extends JdbcMappingIntegrationTest {\n+\n+  @Override\n+  protected InternalCache createCacheAndCreateJdbcMapping(String cacheXmlTestName)\n+      throws Exception {\n+    InternalCache cache =\n+        (InternalCache) new CacheFactory().set(\"locators\", \"\").set(\"mcast-port\", \"0\").create();\n+    Set<DistributedMember> targetMembers = findMembers(cache, null, null);\n+\n+    CliFunctionResult createRegionFuncResult = executeCreateRegionFunction(targetMembers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxMzIxNw=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA4OTE5NA==", "bodyText": "This is an integration test, which tests the behavior of gfsh commands from a user's point view. I don't think this test should use internal functions of specific gfsh command's implementation. The users should not worry about the gfsh implementation.\nAnd I don't recommend using a lot of System.out.println in the tests. Is that for debugging purpose?\nIf you have to use internal functions, I would recommend testing them in a unit test, or some other integration test or dunit that specifically test a specific gfsh command.  You said you use the internal functions because some parts of GfshRule can not verify in case of errors. Can you give a specific example?", "url": "https://github.com/apache/geode/pull/5637#discussion_r520089194", "createdAt": "2020-11-09T20:08:55Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/GfshJdbcMappingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.connectors.jdbc;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.configuration.JndiBindingsType;\n+import org.apache.geode.cache.configuration.RegionConfig;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.ResultCollector;\n+import org.apache.geode.connectors.jdbc.internal.cli.CreateMappingFunction;\n+import org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunction;\n+import org.apache.geode.connectors.jdbc.internal.configuration.FieldMapping;\n+import org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.management.configuration.RegionType;\n+import org.apache.geode.management.internal.cli.commands.CreateJndiBindingCommand;\n+import org.apache.geode.management.internal.cli.functions.CreateJndiBindingFunction;\n+import org.apache.geode.management.internal.cli.functions.CreateRegionFunctionArgs;\n+import org.apache.geode.management.internal.cli.functions.RegionCreateFunction;\n+import org.apache.geode.management.internal.configuration.converters.RegionConverter;\n+import org.apache.geode.management.internal.functions.CliFunctionResult;\n+import org.apache.geode.management.internal.util.ManagementUtils;\n+\n+public class GfshJdbcMappingIntegrationTest extends JdbcMappingIntegrationTest {\n+\n+  @Override\n+  protected InternalCache createCacheAndCreateJdbcMapping(String cacheXmlTestName)\n+      throws Exception {\n+    InternalCache cache =\n+        (InternalCache) new CacheFactory().set(\"locators\", \"\").set(\"mcast-port\", \"0\").create();\n+    Set<DistributedMember> targetMembers = findMembers(cache, null, null);\n+\n+    CliFunctionResult createRegionFuncResult = executeCreateRegionFunction(targetMembers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxMzIxNw=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYzNzYwNQ==", "bodyText": "OK, I will try to implement the test using gfsh commands.", "url": "https://github.com/apache/geode/pull/5637#discussion_r520637605", "createdAt": "2020-11-10T15:11:17Z", "author": {"login": "masaki-yamakawa"}, "path": "geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/GfshJdbcMappingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.connectors.jdbc;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.configuration.JndiBindingsType;\n+import org.apache.geode.cache.configuration.RegionConfig;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.ResultCollector;\n+import org.apache.geode.connectors.jdbc.internal.cli.CreateMappingFunction;\n+import org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunction;\n+import org.apache.geode.connectors.jdbc.internal.configuration.FieldMapping;\n+import org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.management.configuration.RegionType;\n+import org.apache.geode.management.internal.cli.commands.CreateJndiBindingCommand;\n+import org.apache.geode.management.internal.cli.functions.CreateJndiBindingFunction;\n+import org.apache.geode.management.internal.cli.functions.CreateRegionFunctionArgs;\n+import org.apache.geode.management.internal.cli.functions.RegionCreateFunction;\n+import org.apache.geode.management.internal.configuration.converters.RegionConverter;\n+import org.apache.geode.management.internal.functions.CliFunctionResult;\n+import org.apache.geode.management.internal.util.ManagementUtils;\n+\n+public class GfshJdbcMappingIntegrationTest extends JdbcMappingIntegrationTest {\n+\n+  @Override\n+  protected InternalCache createCacheAndCreateJdbcMapping(String cacheXmlTestName)\n+      throws Exception {\n+    InternalCache cache =\n+        (InternalCache) new CacheFactory().set(\"locators\", \"\").set(\"mcast-port\", \"0\").create();\n+    Set<DistributedMember> targetMembers = findMembers(cache, null, null);\n+\n+    CliFunctionResult createRegionFuncResult = executeCreateRegionFunction(targetMembers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxMzIxNw=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg4NDc1MQ==", "bodyText": "I tried to implement the test using GfshRule, but I couldn't do it because I use cache.getService(JdbcConnectorService.class) to get the implementation of JdbcConnectorService to verify FieldMapping, and GfshRule does not allow it.\nAnd I would like to make the condition setting part and the verification part of CacheXmlJdbcMappingIntegrationTest and GfshXmlJdbcMappingIntegrationTest common.\nSo I plan one of the following.\n\nChange the GfshJdbcMappingIntegrationTest to FunctionJdbcMappingIntegrationTest.\nRemove GfshJdbcMappingIntegrationTest. (I can use the describe jdbc-mapping command to verify it, but I don't think I should do that because it would reduce maintainability and make it difficult to commonize tests.)", "url": "https://github.com/apache/geode/pull/5637#discussion_r523884751", "createdAt": "2020-11-16T03:44:01Z", "author": {"login": "masaki-yamakawa"}, "path": "geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/GfshJdbcMappingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.connectors.jdbc;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.configuration.JndiBindingsType;\n+import org.apache.geode.cache.configuration.RegionConfig;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.ResultCollector;\n+import org.apache.geode.connectors.jdbc.internal.cli.CreateMappingFunction;\n+import org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunction;\n+import org.apache.geode.connectors.jdbc.internal.configuration.FieldMapping;\n+import org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.management.configuration.RegionType;\n+import org.apache.geode.management.internal.cli.commands.CreateJndiBindingCommand;\n+import org.apache.geode.management.internal.cli.functions.CreateJndiBindingFunction;\n+import org.apache.geode.management.internal.cli.functions.CreateRegionFunctionArgs;\n+import org.apache.geode.management.internal.cli.functions.RegionCreateFunction;\n+import org.apache.geode.management.internal.configuration.converters.RegionConverter;\n+import org.apache.geode.management.internal.functions.CliFunctionResult;\n+import org.apache.geode.management.internal.util.ManagementUtils;\n+\n+public class GfshJdbcMappingIntegrationTest extends JdbcMappingIntegrationTest {\n+\n+  @Override\n+  protected InternalCache createCacheAndCreateJdbcMapping(String cacheXmlTestName)\n+      throws Exception {\n+    InternalCache cache =\n+        (InternalCache) new CacheFactory().set(\"locators\", \"\").set(\"mcast-port\", \"0\").create();\n+    Set<DistributedMember> targetMembers = findMembers(cache, null, null);\n+\n+    CliFunctionResult createRegionFuncResult = executeCreateRegionFunction(targetMembers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxMzIxNw=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDI3MzQxNA==", "bodyText": "If you want to use gfsh and verify the field mapping, CreateMappingCommandDUnitTest has some good examples which use GfshCommandRule (not GfshRule though). You can see if you would like add some more tests there. Typically, a DUnit is used for testing that involves gfsh commands. In the DUnit, you create a cluster with locator and server(s) and execute the gfsh commands.\nUsing the functions that implement a specific gfsh command in integration tests is discouraged. That is not what an integration test should do.", "url": "https://github.com/apache/geode/pull/5637#discussion_r554273414", "createdAt": "2021-01-09T01:51:03Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/GfshJdbcMappingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.connectors.jdbc;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.configuration.JndiBindingsType;\n+import org.apache.geode.cache.configuration.RegionConfig;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.ResultCollector;\n+import org.apache.geode.connectors.jdbc.internal.cli.CreateMappingFunction;\n+import org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunction;\n+import org.apache.geode.connectors.jdbc.internal.configuration.FieldMapping;\n+import org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.management.configuration.RegionType;\n+import org.apache.geode.management.internal.cli.commands.CreateJndiBindingCommand;\n+import org.apache.geode.management.internal.cli.functions.CreateJndiBindingFunction;\n+import org.apache.geode.management.internal.cli.functions.CreateRegionFunctionArgs;\n+import org.apache.geode.management.internal.cli.functions.RegionCreateFunction;\n+import org.apache.geode.management.internal.configuration.converters.RegionConverter;\n+import org.apache.geode.management.internal.functions.CliFunctionResult;\n+import org.apache.geode.management.internal.util.ManagementUtils;\n+\n+public class GfshJdbcMappingIntegrationTest extends JdbcMappingIntegrationTest {\n+\n+  @Override\n+  protected InternalCache createCacheAndCreateJdbcMapping(String cacheXmlTestName)\n+      throws Exception {\n+    InternalCache cache =\n+        (InternalCache) new CacheFactory().set(\"locators\", \"\").set(\"mcast-port\", \"0\").create();\n+    Set<DistributedMember> targetMembers = findMembers(cache, null, null);\n+\n+    CliFunctionResult createRegionFuncResult = executeCreateRegionFunction(targetMembers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxMzIxNw=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTEzMzI0Nw==", "bodyText": "I removed GfshJdbcMappingIntegrationTest because I no longer need to impliment it.", "url": "https://github.com/apache/geode/pull/5637#discussion_r555133247", "createdAt": "2021-01-11T15:37:24Z", "author": {"login": "masaki-yamakawa"}, "path": "geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/GfshJdbcMappingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.connectors.jdbc;\n+\n+import java.lang.reflect.Constructor;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.configuration.JndiBindingsType;\n+import org.apache.geode.cache.configuration.RegionConfig;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.ResultCollector;\n+import org.apache.geode.connectors.jdbc.internal.cli.CreateMappingFunction;\n+import org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunction;\n+import org.apache.geode.connectors.jdbc.internal.configuration.FieldMapping;\n+import org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping;\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.management.configuration.RegionType;\n+import org.apache.geode.management.internal.cli.commands.CreateJndiBindingCommand;\n+import org.apache.geode.management.internal.cli.functions.CreateJndiBindingFunction;\n+import org.apache.geode.management.internal.cli.functions.CreateRegionFunctionArgs;\n+import org.apache.geode.management.internal.cli.functions.RegionCreateFunction;\n+import org.apache.geode.management.internal.configuration.converters.RegionConverter;\n+import org.apache.geode.management.internal.functions.CliFunctionResult;\n+import org.apache.geode.management.internal.util.ManagementUtils;\n+\n+public class GfshJdbcMappingIntegrationTest extends JdbcMappingIntegrationTest {\n+\n+  @Override\n+  protected InternalCache createCacheAndCreateJdbcMapping(String cacheXmlTestName)\n+      throws Exception {\n+    InternalCache cache =\n+        (InternalCache) new CacheFactory().set(\"locators\", \"\").set(\"mcast-port\", \"0\").create();\n+    Set<DistributedMember> targetMembers = findMembers(cache, null, null);\n+\n+    CliFunctionResult createRegionFuncResult = executeCreateRegionFunction(targetMembers);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxMzIxNw=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDg0NTI3OnYy", "diffSide": "RIGHT", "path": "geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandDUnitTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDo1NzoyMVrOHtvFbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMVQxNTozNjoyOVrOIRammQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxOTQwNw==", "bodyText": "Why this class has to be public?", "url": "https://github.com/apache/geode/pull/5637#discussion_r517719407", "createdAt": "2020-11-05T00:57:21Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandDUnitTest.java", "diffHunk": "@@ -1142,7 +1142,7 @@ public void createMappingWithExistingQueueFails() {\n             + \" must not already exist.\");\n   }\n \n-  private static class Employee implements PdxSerializable {\n+  public static class Employee implements PdxSerializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1MzE4MA==", "bodyText": "In the test, CreatemappingPreconditionCheckFunction is called and executed on several JVMs(Distributed members).\nIn this Function, PDX class such as Employee is instantiated, so I need to be able to access this class even if it runs on another JVM.\nIf it is in private scope, the following exceptions will be thrown\n[error 2020/11/07 12:08:19.411 JST <Function Execution Processor2> tid=69] Could not generate a PdxType for the class org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommandDUnitTest$IdAndName because it did not have a public zero arg constructor. Details: java.lang.IllegalAccessException: Class org.apache.geode.connectors.jdbc.internal.JdbcConnectorServiceImpl can not access a member of class org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommandDUnitTest$IdAndName with modifiers \"public\"\norg.apache.geode.connectors.jdbc.JdbcConnectorException: Could not generate a PdxType for the class org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommandDUnitTest$IdAndName because it did not have a public zero arg constructor. Details: java.lang.IllegalAccessException: Class org.apache.geode.connectors.jdbc.internal.JdbcConnectorServiceImpl can not access a member of class org.apache.geode.connectors.jdbc.internal.cli.CreateMappingCommandDUnitTest$IdAndName with modifiers \"public\"\n    at org.apache.geode.connectors.jdbc.internal.JdbcConnectorServiceImpl.createInstance(JdbcConnectorServiceImpl.java:361)\n    at org.apache.geode.connectors.jdbc.internal.JdbcConnectorServiceImpl.generatePdxTypeForClass(JdbcConnectorServiceImpl.java:334)\n    at org.apache.geode.connectors.jdbc.internal.JdbcConnectorServiceImpl.getPdxTypeForClass(JdbcConnectorServiceImpl.java:320)\n    at org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunction.executeFunction(CreateMappingPreconditionCheckFunction.java:74)\n    at org.apache.geode.management.cli.CliFunction.execute(CliFunction.java:37)\n    ...\n\nOther similar tests like CreateMapingCommandForProxyRegionDUnitTest are also public scope.", "url": "https://github.com/apache/geode/pull/5637#discussion_r519153180", "createdAt": "2020-11-07T08:35:28Z", "author": {"login": "masaki-yamakawa"}, "path": "geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandDUnitTest.java", "diffHunk": "@@ -1142,7 +1142,7 @@ public void createMappingWithExistingQueueFails() {\n             + \" must not already exist.\");\n   }\n \n-  private static class Employee implements PdxSerializable {\n+  public static class Employee implements PdxSerializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxOTQwNw=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NDI3MDg5Mw==", "bodyText": "On the surface, it seems a trivial change from private to public, in order to fix the exception.  However, under the hood, it is doing unnecessary serialization and deserialization of the Employee class. Because getPdxTypeForClass(), generatePdxTypeForClass()  and createInstance() are moved from CreateMappingPreconditionCheckFunction to JdbcConnectorServiceImpl, which is probably because you want to use these methods in RegionMappingConfiguration.\nI would recommend keeping getPdxTypeForClass(), generatePdxTypeForClass()  and createInstance() in CreateMappingPreconditionCheckFunction. And in RegionMappingConfiguration, implement similar methods. Though it looks like duplicating the code, it does avoid unnecessary serialization and deserialization of user defined classes like Employee, which is more important.\nAnd I don't think adding more methods to JdbcConnectorService is necessary. e.g. createDefaultFieldMapping() is something you want to automatically achieve for the users, so it is not necessary be exposed as an API. Just put it as a private method in RegionMappingConfiguration should be good. The same reason applies for getTableMetaDataView() and getPdxTypeForClass.  Basically, keep JdbcConnectorService unchanged.", "url": "https://github.com/apache/geode/pull/5637#discussion_r554270893", "createdAt": "2021-01-09T01:32:22Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandDUnitTest.java", "diffHunk": "@@ -1142,7 +1142,7 @@ public void createMappingWithExistingQueueFails() {\n             + \" must not already exist.\");\n   }\n \n-  private static class Employee implements PdxSerializable {\n+  public static class Employee implements PdxSerializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxOTQwNw=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTEzMjU2OQ==", "bodyText": "Thank you for your detailed explanation. I have reverted the CreateMappingPreconditionCheckFunction and JdbcConnectorService to the original source code. And I have implemented similar methods in RegionMappingConfiguration.", "url": "https://github.com/apache/geode/pull/5637#discussion_r555132569", "createdAt": "2021-01-11T15:36:29Z", "author": {"login": "masaki-yamakawa"}, "path": "geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandDUnitTest.java", "diffHunk": "@@ -1142,7 +1142,7 @@ public void createMappingWithExistingQueueFails() {\n             + \" must not already exist.\");\n   }\n \n-  private static class Employee implements PdxSerializable {\n+  public static class Employee implements PdxSerializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxOTQwNw=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDg0Njk3OnYy", "diffSide": "RIGHT", "path": "geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandDUnitTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDo1ODowOVrOHtvGZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwODozNjoyNVrOHvGmYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxOTY1Mg==", "bodyText": "Why this class has to be public?", "url": "https://github.com/apache/geode/pull/5637#discussion_r517719652", "createdAt": "2020-11-05T00:58:09Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandDUnitTest.java", "diffHunk": "@@ -1185,7 +1185,7 @@ public void fromData(PdxReader reader) {\n     }\n   }\n \n-  private static class EmployeeNumeric implements PdxSerializerObject {\n+  public static class EmployeeNumeric implements PdxSerializerObject {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1MzI0OA==", "bodyText": "The reason is the same as previous one.", "url": "https://github.com/apache/geode/pull/5637#discussion_r519153248", "createdAt": "2020-11-07T08:36:25Z", "author": {"login": "masaki-yamakawa"}, "path": "geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandDUnitTest.java", "diffHunk": "@@ -1185,7 +1185,7 @@ public void fromData(PdxReader reader) {\n     }\n   }\n \n-  private static class EmployeeNumeric implements PdxSerializerObject {\n+  public static class EmployeeNumeric implements PdxSerializerObject {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxOTY1Mg=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDg0NzE1OnYy", "diffSide": "RIGHT", "path": "geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandDUnitTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMDo1ODoxNlrOHtvGgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwODozNjozMlrOHvGmaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxOTY4Mw==", "bodyText": "Why this class has to be public?", "url": "https://github.com/apache/geode/pull/5637#discussion_r517719683", "createdAt": "2020-11-05T00:58:16Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandDUnitTest.java", "diffHunk": "@@ -1234,7 +1234,7 @@ void setRefid(long refid) {\n     }\n   }\n \n-  private static class IdAndName implements PdxSerializable {\n+  public static class IdAndName implements PdxSerializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1MzI1Ng==", "bodyText": "The reason is the same as previous one.", "url": "https://github.com/apache/geode/pull/5637#discussion_r519153256", "createdAt": "2020-11-07T08:36:32Z", "author": {"login": "masaki-yamakawa"}, "path": "geode-connectors/src/distributedTest/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingCommandDUnitTest.java", "diffHunk": "@@ -1234,7 +1234,7 @@ void setRefid(long refid) {\n     }\n   }\n \n-  private static class IdAndName implements PdxSerializable {\n+  public static class IdAndName implements PdxSerializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcxOTY4Mw=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDg1Njg2OnYy", "diffSide": "RIGHT", "path": "geode-connectors/src/main/java/org/apache/geode/connectors/jdbc/internal/JdbcConnectorServiceImpl.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMTowMzoxMlrOHtvMLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMzo0MDo0NFrOHznWdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyMTEzNQ==", "bodyText": "The data source has nothing to do with table metadata or region name. I recommend removing this line of error message.", "url": "https://github.com/apache/geode/pull/5637#discussion_r517721135", "createdAt": "2020-11-05T01:03:12Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/main/java/org/apache/geode/connectors/jdbc/internal/JdbcConnectorServiceImpl.java", "diffHunk": "@@ -210,4 +224,152 @@ private TableMetaDataView getTableMetaDataView(RegionMapping regionMapping,\n               + regionMapping.getDataSourceName() + \"\\\": \", ex);\n     }\n   }\n+\n+  @Override\n+  public TableMetaDataView getTableMetaDataView(RegionMapping regionMapping) {\n+    DataSource dataSource = getDataSource(regionMapping.getDataSourceName());\n+    if (dataSource == null) {\n+      throw new JdbcConnectorException(\"No datasource \\\"\" + regionMapping.getDataSourceName()\n+          + \"\\\" found when getting table meta data \\\"\" + regionMapping.getRegionName() + \"\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1MzMxMg==", "bodyText": "The data source is used to get the table metadata.\nI would like to confirm your suggestion.\nYour suggestion is the following, right?\nif (dataSource == null) {\n//  throw new JdbcConnectorException(\"No datasource \\\"\" + regionMapping.getDataSourceName()\n//      + \"\\\" found when getting table meta data \\\"\" + regionMapping.getRegionName() + \"\\\"\");\n  throw new JdbcConnectorException();\n}", "url": "https://github.com/apache/geode/pull/5637#discussion_r519153312", "createdAt": "2020-11-07T08:37:08Z", "author": {"login": "masaki-yamakawa"}, "path": "geode-connectors/src/main/java/org/apache/geode/connectors/jdbc/internal/JdbcConnectorServiceImpl.java", "diffHunk": "@@ -210,4 +224,152 @@ private TableMetaDataView getTableMetaDataView(RegionMapping regionMapping,\n               + regionMapping.getDataSourceName() + \"\\\": \", ex);\n     }\n   }\n+\n+  @Override\n+  public TableMetaDataView getTableMetaDataView(RegionMapping regionMapping) {\n+    DataSource dataSource = getDataSource(regionMapping.getDataSourceName());\n+    if (dataSource == null) {\n+      throw new JdbcConnectorException(\"No datasource \\\"\" + regionMapping.getDataSourceName()\n+          + \"\\\" found when getting table meta data \\\"\" + regionMapping.getRegionName() + \"\\\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyMTEzNQ=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAyMzU4OA==", "bodyText": "I was trying to say:\nif (dataSource == null) {\n      throw new JdbcConnectorException(\"No datasource \\\"\" + regionMapping.getDataSourceName());\n}\n\nIf you would like to provide more information,\nif (dataSource == null) {\n      throw new JdbcConnectorException(\"No datasource \\\"\" + regionMapping.getDataSourceName()\n          + \"\\\" found when getting table meta data \\\"\" + regionMapping.getTableName() + \"\\\"\");\n}\n\nNote that it is regionMapping.getTableName(), not regionMapping.getRegionName().", "url": "https://github.com/apache/geode/pull/5637#discussion_r520023588", "createdAt": "2020-11-09T18:23:03Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/main/java/org/apache/geode/connectors/jdbc/internal/JdbcConnectorServiceImpl.java", "diffHunk": "@@ -210,4 +224,152 @@ private TableMetaDataView getTableMetaDataView(RegionMapping regionMapping,\n               + regionMapping.getDataSourceName() + \"\\\": \", ex);\n     }\n   }\n+\n+  @Override\n+  public TableMetaDataView getTableMetaDataView(RegionMapping regionMapping) {\n+    DataSource dataSource = getDataSource(regionMapping.getDataSourceName());\n+    if (dataSource == null) {\n+      throw new JdbcConnectorException(\"No datasource \\\"\" + regionMapping.getDataSourceName()\n+          + \"\\\" found when getting table meta data \\\"\" + regionMapping.getRegionName() + \"\\\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyMTEzNQ=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYzNzg3Ng==", "bodyText": "Thank you.\nI would like to fix it as you suggested.", "url": "https://github.com/apache/geode/pull/5637#discussion_r520637876", "createdAt": "2020-11-10T15:11:37Z", "author": {"login": "masaki-yamakawa"}, "path": "geode-connectors/src/main/java/org/apache/geode/connectors/jdbc/internal/JdbcConnectorServiceImpl.java", "diffHunk": "@@ -210,4 +224,152 @@ private TableMetaDataView getTableMetaDataView(RegionMapping regionMapping,\n               + regionMapping.getDataSourceName() + \"\\\": \", ex);\n     }\n   }\n+\n+  @Override\n+  public TableMetaDataView getTableMetaDataView(RegionMapping regionMapping) {\n+    DataSource dataSource = getDataSource(regionMapping.getDataSourceName());\n+    if (dataSource == null) {\n+      throw new JdbcConnectorException(\"No datasource \\\"\" + regionMapping.getDataSourceName()\n+          + \"\\\" found when getting table meta data \\\"\" + regionMapping.getRegionName() + \"\\\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyMTEzNQ=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg4NDE0OA==", "bodyText": "I have fixed it.", "url": "https://github.com/apache/geode/pull/5637#discussion_r523884148", "createdAt": "2020-11-16T03:40:44Z", "author": {"login": "masaki-yamakawa"}, "path": "geode-connectors/src/main/java/org/apache/geode/connectors/jdbc/internal/JdbcConnectorServiceImpl.java", "diffHunk": "@@ -210,4 +224,152 @@ private TableMetaDataView getTableMetaDataView(RegionMapping regionMapping,\n               + regionMapping.getDataSourceName() + \"\\\": \", ex);\n     }\n   }\n+\n+  @Override\n+  public TableMetaDataView getTableMetaDataView(RegionMapping regionMapping) {\n+    DataSource dataSource = getDataSource(regionMapping.getDataSourceName());\n+    if (dataSource == null) {\n+      throw new JdbcConnectorException(\"No datasource \\\"\" + regionMapping.getDataSourceName()\n+          + \"\\\" found when getting table meta data \\\"\" + regionMapping.getRegionName() + \"\\\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyMTEzNQ=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDg1NzM3OnYy", "diffSide": "RIGHT", "path": "geode-connectors/src/main/java/org/apache/geode/connectors/jdbc/internal/JdbcConnectorServiceImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMTowMzoyOFrOHtvMew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMzo0MDo1OFrOHznWoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyMTIxMQ==", "bodyText": "The data source has nothing to do with table metadata or region name. I recommend removing this line of error message.", "url": "https://github.com/apache/geode/pull/5637#discussion_r517721211", "createdAt": "2020-11-05T01:03:28Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/main/java/org/apache/geode/connectors/jdbc/internal/JdbcConnectorServiceImpl.java", "diffHunk": "@@ -210,4 +224,152 @@ private TableMetaDataView getTableMetaDataView(RegionMapping regionMapping,\n               + regionMapping.getDataSourceName() + \"\\\": \", ex);\n     }\n   }\n+\n+  @Override\n+  public TableMetaDataView getTableMetaDataView(RegionMapping regionMapping) {\n+    DataSource dataSource = getDataSource(regionMapping.getDataSourceName());\n+    if (dataSource == null) {\n+      throw new JdbcConnectorException(\"No datasource \\\"\" + regionMapping.getDataSourceName()\n+          + \"\\\" found when getting table meta data \\\"\" + regionMapping.getRegionName() + \"\\\"\");\n+    }\n+    return getTableMetaDataView(regionMapping, dataSource);\n+  }\n+\n+  @Override\n+  public List<FieldMapping> createDefaultFieldMapping(RegionMapping regionMapping,\n+      PdxType pdxType) {\n+    DataSource dataSource = getDataSource(regionMapping.getDataSourceName());\n+    if (dataSource == null) {\n+      throw new JdbcConnectorException(\"No datasource \\\"\" + regionMapping.getDataSourceName()\n+          + \"\\\" found when creating mapping \\\"\" + regionMapping.getRegionName() + \"\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg4NDE5Mw==", "bodyText": "I have fixed it.", "url": "https://github.com/apache/geode/pull/5637#discussion_r523884193", "createdAt": "2020-11-16T03:40:58Z", "author": {"login": "masaki-yamakawa"}, "path": "geode-connectors/src/main/java/org/apache/geode/connectors/jdbc/internal/JdbcConnectorServiceImpl.java", "diffHunk": "@@ -210,4 +224,152 @@ private TableMetaDataView getTableMetaDataView(RegionMapping regionMapping,\n               + regionMapping.getDataSourceName() + \"\\\": \", ex);\n     }\n   }\n+\n+  @Override\n+  public TableMetaDataView getTableMetaDataView(RegionMapping regionMapping) {\n+    DataSource dataSource = getDataSource(regionMapping.getDataSourceName());\n+    if (dataSource == null) {\n+      throw new JdbcConnectorException(\"No datasource \\\"\" + regionMapping.getDataSourceName()\n+          + \"\\\" found when getting table meta data \\\"\" + regionMapping.getRegionName() + \"\\\"\");\n+    }\n+    return getTableMetaDataView(regionMapping, dataSource);\n+  }\n+\n+  @Override\n+  public List<FieldMapping> createDefaultFieldMapping(RegionMapping regionMapping,\n+      PdxType pdxType) {\n+    DataSource dataSource = getDataSource(regionMapping.getDataSourceName());\n+    if (dataSource == null) {\n+      throw new JdbcConnectorException(\"No datasource \\\"\" + regionMapping.getDataSourceName()\n+          + \"\\\" found when creating mapping \\\"\" + regionMapping.getRegionName() + \"\\\"\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyMTIxMQ=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDkwMjgyOnYy", "diffSide": "RIGHT", "path": "geode-connectors/src/main/java/org/apache/geode/connectors/jdbc/internal/xml/RegionMappingConfiguration.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMToyNzowOVrOHtvnIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQyMDozMDozOVrOHwAc6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyODAzNQ==", "bodyText": "Since its implementation is just one line, why not inline it?", "url": "https://github.com/apache/geode/pull/5637#discussion_r517728035", "createdAt": "2020-11-05T01:27:09Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/main/java/org/apache/geode/connectors/jdbc/internal/xml/RegionMappingConfiguration.java", "diffHunk": "@@ -62,4 +77,17 @@ private void createRegionMapping(JdbcConnectorService service,\n       throw new InternalGemFireException(e);\n     }\n   }\n+\n+  private Class<?> loadPdxClass(String className) {\n+    try {\n+      return loadClass(className);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1MzM1MA==", "bodyText": "I have fixed this part.", "url": "https://github.com/apache/geode/pull/5637#discussion_r519153350", "createdAt": "2020-11-07T08:37:35Z", "author": {"login": "masaki-yamakawa"}, "path": "geode-connectors/src/main/java/org/apache/geode/connectors/jdbc/internal/xml/RegionMappingConfiguration.java", "diffHunk": "@@ -62,4 +77,17 @@ private void createRegionMapping(JdbcConnectorService service,\n       throw new InternalGemFireException(e);\n     }\n   }\n+\n+  private Class<?> loadPdxClass(String className) {\n+    try {\n+      return loadClass(className);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyODAzNQ=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDEwMTA5Ng==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/geode/pull/5637#discussion_r520101096", "createdAt": "2020-11-09T20:30:39Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/main/java/org/apache/geode/connectors/jdbc/internal/xml/RegionMappingConfiguration.java", "diffHunk": "@@ -62,4 +77,17 @@ private void createRegionMapping(JdbcConnectorService service,\n       throw new InternalGemFireException(e);\n     }\n   }\n+\n+  private Class<?> loadPdxClass(String className) {\n+    try {\n+      return loadClass(className);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzcyODAzNQ=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDkyODE3OnYy", "diffSide": "LEFT", "path": "geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingPreconditionCheckFunctionTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMTozOTo1OVrOHtv1yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODo0NTo1MlrOHv8hPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzczMTc4Ng==", "bodyText": "Why this test is removed?", "url": "https://github.com/apache/geode/pull/5637#discussion_r517731786", "createdAt": "2020-11-05T01:39:59Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingPreconditionCheckFunctionTest.java", "diffHunk": "@@ -172,16 +168,6 @@ public void executeFunctionThrowsIfDataSourceDoesNotExist() {\n             + DATA_SOURCE_NAME + \"'.\");\n   }\n \n-  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1MzM4MA==", "bodyText": "I changed CreateMappingPreconditionCheckFunction class to use JdbcConnectorService.getTableMetaDataView(regionMapping).\nThis test covered by JdbcConnectorServiceTest.getTableMetaDataViewThrowsExceptionWhenGetConnectionHasSqlException.", "url": "https://github.com/apache/geode/pull/5637#discussion_r519153380", "createdAt": "2020-11-07T08:37:59Z", "author": {"login": "masaki-yamakawa"}, "path": "geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingPreconditionCheckFunctionTest.java", "diffHunk": "@@ -172,16 +168,6 @@ public void executeFunctionThrowsIfDataSourceDoesNotExist() {\n             + DATA_SOURCE_NAME + \"'.\");\n   }\n \n-  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzczMTc4Ng=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzNjY3MA==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/geode/pull/5637#discussion_r520036670", "createdAt": "2020-11-09T18:45:52Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingPreconditionCheckFunctionTest.java", "diffHunk": "@@ -172,16 +168,6 @@ public void executeFunctionThrowsIfDataSourceDoesNotExist() {\n             + DATA_SOURCE_NAME + \"'.\");\n   }\n \n-  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzczMTc4Ng=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NDk0NTAzOnYy", "diffSide": "LEFT", "path": "geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingPreconditionCheckFunctionTest.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQwMTo0ODoxMlrOHtv_YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwMzo0Mjo1NFrOHznYGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzczNDI0MQ==", "bodyText": "Some functions of CreateMappingPreconditionCheckFunction are moved to JdbcConnectorServiceImpl. So if you remove this test here, there should be similar test coverage added in JdbcConnectorServiceTest. In JdbcConnectorServiceTest there are some tests that test ReflectionBasedAutoSerializer. However, those tests don't verify FieldMapping like this test.", "url": "https://github.com/apache/geode/pull/5637#discussion_r517734241", "createdAt": "2020-11-05T01:48:12Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingPreconditionCheckFunctionTest.java", "diffHunk": "@@ -306,45 +292,10 @@ public void executeFunctionThrowsGivenPdxSerializableWithNoZeroArgConstructor()\n             \"Could not generate a PdxType for the class org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunctionTest$PdxClassDummyNoZeroArg because it did not have a public zero arg constructor. Details: java.lang.NoSuchMethodException: org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunctionTest$PdxClassDummyNoZeroArg.<init>()\");\n   }\n \n-  @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTE1MzQxNQ==", "bodyText": "As you mentioned, I have moved some methods.\nIn addition, I have reduced the the particle size of the test.\nThe corresponding test for executionFuncationGivenNonPdxUsesReflectionBasedAutoSerializer is JdbcConnectorServiceTest.getPdxTypeForClassSucceedsWithGivenNonPdxUsesReflectionBasedAutoSerializer.\nThis test verify the PdxType. And then, the PdxType is specified to createDefaultFieldMapping to create the FieldMapping.\ncreateDefaultFieldMapping is tested with JdbcConnectorServiceTest.createDefaultFieldMappingXXX, which verify the FieldMapping at this level.", "url": "https://github.com/apache/geode/pull/5637#discussion_r519153415", "createdAt": "2020-11-07T08:38:47Z", "author": {"login": "masaki-yamakawa"}, "path": "geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingPreconditionCheckFunctionTest.java", "diffHunk": "@@ -306,45 +292,10 @@ public void executeFunctionThrowsGivenPdxSerializableWithNoZeroArgConstructor()\n             \"Could not generate a PdxType for the class org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunctionTest$PdxClassDummyNoZeroArg because it did not have a public zero arg constructor. Details: java.lang.NoSuchMethodException: org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunctionTest$PdxClassDummyNoZeroArg.<init>()\");\n   }\n \n-  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzczNDI0MQ=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDA1NzQwNQ==", "bodyText": "I understand that. However, none of the JdbcConnectorServiceTest.createDefaultFieldMapping* uses ReflectionBasedAutoSerializer. Although those tests do verify the field mapping. I expect there is some test that uses ReflectionBasedAutoSerializer and verifies the field mapping as well, like the test deleted below.", "url": "https://github.com/apache/geode/pull/5637#discussion_r520057405", "createdAt": "2020-11-09T19:13:12Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingPreconditionCheckFunctionTest.java", "diffHunk": "@@ -306,45 +292,10 @@ public void executeFunctionThrowsGivenPdxSerializableWithNoZeroArgConstructor()\n             \"Could not generate a PdxType for the class org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunctionTest$PdxClassDummyNoZeroArg because it did not have a public zero arg constructor. Details: java.lang.NoSuchMethodException: org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunctionTest$PdxClassDummyNoZeroArg.<init>()\");\n   }\n \n-  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzczNDI0MQ=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDYzODQyNQ==", "bodyText": "I will add the test using the ReflectionBasedAutoSerializer and verify the field mapping.", "url": "https://github.com/apache/geode/pull/5637#discussion_r520638425", "createdAt": "2020-11-10T15:12:16Z", "author": {"login": "masaki-yamakawa"}, "path": "geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingPreconditionCheckFunctionTest.java", "diffHunk": "@@ -306,45 +292,10 @@ public void executeFunctionThrowsGivenPdxSerializableWithNoZeroArgConstructor()\n             \"Could not generate a PdxType for the class org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunctionTest$PdxClassDummyNoZeroArg because it did not have a public zero arg constructor. Details: java.lang.NoSuchMethodException: org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunctionTest$PdxClassDummyNoZeroArg.<init>()\");\n   }\n \n-  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzczNDI0MQ=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg4NDU3MA==", "bodyText": "I have added mappingSuccessWhenFieldMappingsAreOmittedWithNonSerializedClass test method that uses ReflectionBasedAutoSerializer to JdbcMappingIntegrationTest", "url": "https://github.com/apache/geode/pull/5637#discussion_r523884570", "createdAt": "2020-11-16T03:42:54Z", "author": {"login": "masaki-yamakawa"}, "path": "geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/cli/CreateMappingPreconditionCheckFunctionTest.java", "diffHunk": "@@ -306,45 +292,10 @@ public void executeFunctionThrowsGivenPdxSerializableWithNoZeroArgConstructor()\n             \"Could not generate a PdxType for the class org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunctionTest$PdxClassDummyNoZeroArg because it did not have a public zero arg constructor. Details: java.lang.NoSuchMethodException: org.apache.geode.connectors.jdbc.internal.cli.CreateMappingPreconditionCheckFunctionTest$PdxClassDummyNoZeroArg.<init>()\");\n   }\n \n-  @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzczNDI0MQ=="}, "originalCommit": {"oid": "784f29f1ae07e98fb6cf39bd95718b8cc05cf726"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2MDA1OTkxOnYy", "diffSide": "RIGHT", "path": "geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/JdbcConnectorServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxODo0OToxOFrOHv8pUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNDoxMTozMVrOHznuuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzODczNg==", "bodyText": "Minor pick. I would recommend some error message for the SQLException, e.g.\n String reason = \"connection failed\";\t\n    when(dataSource.getConnection()).thenThrow(new SQLException(reason));\n\nThe the error message in the next few lines would be Exception thrown while connecting to datasource \\\"dataSource\\\": connection failed, instead of Exception thrown while connecting to datasource \\\"dataSource\\\": null", "url": "https://github.com/apache/geode/pull/5637#discussion_r520038736", "createdAt": "2020-11-09T18:49:18Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/JdbcConnectorServiceTest.java", "diffHunk": "@@ -216,4 +249,213 @@ public void validateMappingSucceedsWithCompositeKeys() {\n     when(mapping.getIds()).thenReturn(KEY_COLUMN_NAME + \",\" + COMPOSITE_KEY_COLUMN_NAME);\n     service.validateMapping(mapping);\n   }\n+\n+  @Test\n+  public void getTableMetaDataViewSucceeds() {\n+    TableMetaDataView result = service.getTableMetaDataView(mapping);\n+    assertThat(result).isEqualTo(view);\n+    verify(manager).getTableMetaDataView(connection, mapping);\n+  }\n+\n+  @Test\n+  public void getTableMetaDataViewThrowsExceptionWhenDataSourceDoesNotExist() {\n+    doReturn(null).when(service).getDataSource(DATA_SOURCE_NAME);\n+    Throwable throwable = catchThrowable(() -> service.getTableMetaDataView(mapping));\n+    assertThat(throwable).isInstanceOf(JdbcConnectorException.class).hasMessageContaining(\n+        String.format(\"No datasource \\\"%s\\\" found when getting table meta data \\\"%s\\\"\",\n+            mapping.getDataSourceName(), mapping.getRegionName()));\n+  }\n+\n+  @Test\n+  public void getTableMetaDataViewThrowsExceptionWhenGetConnectionHasSqlException()\n+      throws SQLException {\n+    when(dataSource.getConnection()).thenThrow(SQLException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fc1417ec80c177e4cb46add831dfdfc4c99224f"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzg5MDM2MA==", "bodyText": "Thank you for your recommendation. I have fixed it.", "url": "https://github.com/apache/geode/pull/5637#discussion_r523890360", "createdAt": "2020-11-16T04:11:31Z", "author": {"login": "masaki-yamakawa"}, "path": "geode-connectors/src/test/java/org/apache/geode/connectors/jdbc/internal/JdbcConnectorServiceTest.java", "diffHunk": "@@ -216,4 +249,213 @@ public void validateMappingSucceedsWithCompositeKeys() {\n     when(mapping.getIds()).thenReturn(KEY_COLUMN_NAME + \",\" + COMPOSITE_KEY_COLUMN_NAME);\n     service.validateMapping(mapping);\n   }\n+\n+  @Test\n+  public void getTableMetaDataViewSucceeds() {\n+    TableMetaDataView result = service.getTableMetaDataView(mapping);\n+    assertThat(result).isEqualTo(view);\n+    verify(manager).getTableMetaDataView(connection, mapping);\n+  }\n+\n+  @Test\n+  public void getTableMetaDataViewThrowsExceptionWhenDataSourceDoesNotExist() {\n+    doReturn(null).when(service).getDataSource(DATA_SOURCE_NAME);\n+    Throwable throwable = catchThrowable(() -> service.getTableMetaDataView(mapping));\n+    assertThat(throwable).isInstanceOf(JdbcConnectorException.class).hasMessageContaining(\n+        String.format(\"No datasource \\\"%s\\\" found when getting table meta data \\\"%s\\\"\",\n+            mapping.getDataSourceName(), mapping.getRegionName()));\n+  }\n+\n+  @Test\n+  public void getTableMetaDataViewThrowsExceptionWhenGetConnectionHasSqlException()\n+      throws SQLException {\n+    when(dataSource.getConnection()).thenThrow(SQLException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDAzODczNg=="}, "originalCommit": {"oid": "7fc1417ec80c177e4cb46add831dfdfc4c99224f"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjU5MTczOnYy", "diffSide": "RIGHT", "path": "geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/CacheXmlJdbcMappingIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMDowOTowNFrOIRsEDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMDowOTowNFrOIRsEDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQxODYzOQ==", "bodyText": "This is a bug. I believe the string in the quote should be WrongPdxName instead of NoPdxName. There is no such file CacheXmlJdbcMappingIntegrationTest.NoPdxName.cache.xml. So the actual error is something like FileNotFoundException returned by getXmlFileForTest(). And the assertion at line 241 and 242 doesn't really catch the bug.", "url": "https://github.com/apache/geode/pull/5637#discussion_r555418639", "createdAt": "2021-01-12T00:09:04Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/CacheXmlJdbcMappingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,284 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.connectors.jdbc;\n+\n+import static org.apache.geode.test.util.ResourceUtils.createTempFileFromResource;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+\n+import java.net.URL;\n+import java.sql.Connection;\n+import java.sql.JDBCType;\n+import java.sql.Statement;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.connectors.jdbc.internal.JdbcConnectorService;\n+import org.apache.geode.connectors.jdbc.internal.configuration.FieldMapping;\n+import org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping;\n+import org.apache.geode.connectors.jdbc.test.junit.rules.DatabaseConnectionRule;\n+import org.apache.geode.connectors.jdbc.test.junit.rules.MySqlConnectionRule;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.jndi.JNDIInvoker;\n+import org.apache.geode.pdx.FieldType;\n+import org.apache.geode.pdx.internal.AutoSerializableManager;\n+\n+public class CacheXmlJdbcMappingIntegrationTest {\n+\n+  private static final URL COMPOSE_RESOURCE_PATH =\n+      CacheXmlJdbcMappingIntegrationTest.class.getResource(\"mysql.yml\");\n+  protected static final String DATA_SOURCE_NAME = \"TestDataSource\";\n+  protected static final String DB_NAME = \"test\";\n+  protected static final String REGION_TABLE_NAME = \"employees\";\n+  protected static final String REGION_NAME = \"Region1\";\n+\n+  @Rule\n+  public RestoreSystemProperties restoreSystemProperties = new RestoreSystemProperties();\n+\n+  private Connection connection;\n+  private Statement statement;\n+  private InternalCache cache;\n+\n+  @ClassRule\n+  public static DatabaseConnectionRule dbRule = new MySqlConnectionRule.Builder()\n+      .file(COMPOSE_RESOURCE_PATH.getPath()).serviceName(\"db\").port(3306).database(DB_NAME).build();\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    System.setProperty(AutoSerializableManager.NO_HARDCODED_EXCLUDES_PARAM, \"true\");\n+    connection = dbRule.getConnection();\n+    statement = connection.createStatement();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    JNDIInvoker.unMapDatasource(DATA_SOURCE_NAME);\n+\n+    if (cache != null) {\n+      cache.close();\n+    }\n+\n+    if (statement == null) {\n+      statement = connection.createStatement();\n+    }\n+    statement.execute(\"Drop table IF EXISTS \" + REGION_TABLE_NAME);\n+    statement.close();\n+\n+    if (connection != null) {\n+      connection.close();\n+    }\n+  }\n+\n+  private InternalCache createCacheAndCreateJdbcMapping(String cacheXmlTestName)\n+      throws Exception {\n+    String url = dbRule.getConnectionUrl().replaceAll(\"&\", \"&amp;\");\n+    System.setProperty(\"TestDataSourceUrl\", url);\n+    InternalCache cache =\n+        (InternalCache) new CacheFactory().set(\"locators\", \"\").set(\"mcast-port\", \"0\")\n+            .set(\"cache-xml-file\", getXmlFileForTest(cacheXmlTestName))\n+            .create();\n+    return cache;\n+  }\n+\n+  private InternalCache createCacheAndCreateJdbcMappingWithNonSerializedClass(\n+      String cacheXmlTestName) throws Exception {\n+    return createCacheAndCreateJdbcMapping(cacheXmlTestName);\n+  }\n+\n+  private InternalCache createCacheAndCreateJdbcMappingWithWrongDataSource(\n+      String cacheXmlTestName) throws Exception {\n+    System.setProperty(\"TestDataSourceUrl\", \"jdbc:mysql://localhost/test\");\n+    InternalCache cache =\n+        (InternalCache) new CacheFactory().set(\"locators\", \"\").set(\"mcast-port\", \"0\")\n+            .set(\"cache-xml-file\", getXmlFileForTest(cacheXmlTestName))\n+            .create();\n+    return cache;\n+  }\n+\n+  private InternalCache createCacheAndCreateJdbcMappingWithWrongPdxName(String cacheXmlTestName)\n+      throws Exception {\n+    String url = dbRule.getConnectionUrl().replaceAll(\"&\", \"&amp;\");\n+    System.setProperty(\"TestDataSourceUrl\", url);\n+    InternalCache cache =\n+        (InternalCache) new CacheFactory().set(\"locators\", \"\").set(\"mcast-port\", \"0\")\n+            .set(\"cache-xml-file\", getXmlFileForTest(cacheXmlTestName))\n+            .create();\n+    return cache;\n+  }\n+\n+  private String getXmlFileForTest(String testName) {\n+    return createTempFileFromResource(getClass(),\n+        getClassSimpleName() + \".\" + testName + \".cache.xml\").getAbsolutePath();\n+  }\n+\n+  private String getClassSimpleName() {\n+    return getClass().getSimpleName();\n+  }\n+\n+  private void createEmployeeTable() throws Exception {\n+    statement.execute(\"Create Table \" + REGION_TABLE_NAME\n+        + \" (id varchar(10) primary key not null, name varchar(10), age int)\");\n+  }\n+\n+  private void createEmployeeTableWithColumnNamesWithUnderscores() throws Exception {\n+    statement.execute(\"Create Table \" + REGION_TABLE_NAME\n+        + \" (id varchar(10) primary key not null, _name varchar(10), _age int)\");\n+  }\n+\n+  private List<FieldMapping> getEmployeeTableFieldMappings() {\n+    List<FieldMapping> fieldMappings = Arrays.asList(\n+        new FieldMapping(\"id\", FieldType.STRING.name(), \"id\", JDBCType.VARCHAR.name(), false),\n+        new FieldMapping(\"name\", FieldType.STRING.name(), \"name\", JDBCType.VARCHAR.name(), true),\n+        new FieldMapping(\"age\", FieldType.INT.name(), \"age\", JDBCType.INTEGER.name(), true));\n+    return fieldMappings;\n+  }\n+\n+  private List<FieldMapping> getEmployeeTableColumnNameWithUnderscoresFieldMappings() {\n+    List<FieldMapping> fieldMappings = Arrays.asList(\n+        new FieldMapping(\"id\", FieldType.STRING.name(), \"id\", JDBCType.VARCHAR.name(), false),\n+        new FieldMapping(\"name\", FieldType.STRING.name(), \"_name\", JDBCType.VARCHAR.name(), true),\n+        new FieldMapping(\"age\", FieldType.INT.name(), \"_age\", JDBCType.INTEGER.name(), true));\n+    return fieldMappings;\n+  }\n+\n+  @Test\n+  public void mappingSuccessWhenFieldMappingsAreExists() throws Exception {\n+    createEmployeeTable();\n+\n+    cache = createCacheAndCreateJdbcMapping(\"FieldMappings\");\n+    JdbcConnectorService service = cache.getService(JdbcConnectorService.class);\n+\n+    RegionMapping mapping = service.getMappingForRegion(REGION_NAME);\n+    assertThat(mapping.getDataSourceName()).isEqualTo(DATA_SOURCE_NAME);\n+    assertThat(mapping.getTableName()).isEqualTo(REGION_TABLE_NAME);\n+    assertThat(mapping.getRegionName()).isEqualTo(REGION_NAME);\n+    assertThat(mapping.getPdxName()).isEqualTo(Employee.class.getName());\n+    assertThat(mapping.getIds()).isEqualTo(\"id\");\n+    assertThat(mapping.getFieldMappings().size()).isEqualTo(3);\n+    assertThat(mapping.getFieldMappings()).containsAll(getEmployeeTableFieldMappings());\n+  }\n+\n+  @Test\n+  public void mappingSuccessWhenFieldMappingsAreOmitted() throws Exception {\n+    createEmployeeTable();\n+\n+    cache = createCacheAndCreateJdbcMapping(\"NoFieldMappings\");\n+    JdbcConnectorService service = cache.getService(JdbcConnectorService.class);\n+\n+    RegionMapping mapping = service.getMappingForRegion(REGION_NAME);\n+    assertThat(mapping.getDataSourceName()).isEqualTo(DATA_SOURCE_NAME);\n+    assertThat(mapping.getTableName()).isEqualTo(REGION_TABLE_NAME);\n+    assertThat(mapping.getRegionName()).isEqualTo(REGION_NAME);\n+    assertThat(mapping.getPdxName()).isEqualTo(Employee.class.getName());\n+    assertThat(mapping.getIds()).isEqualTo(\"id\");\n+    assertThat(mapping.getFieldMappings().size()).isEqualTo(3);\n+    assertThat(mapping.getFieldMappings()).containsAll(getEmployeeTableFieldMappings());\n+  }\n+\n+  @Test\n+  public void mappingSuccessWhenFieldMappingsAreOmittedWithNonSerializedClass() throws Exception {\n+    createEmployeeTable();\n+\n+    cache = createCacheAndCreateJdbcMappingWithNonSerializedClass(\n+        \"NoFieldMappingsWithNonSerializedClass\");\n+    JdbcConnectorService service = cache.getService(JdbcConnectorService.class);\n+\n+    RegionMapping mapping = service.getMappingForRegion(REGION_NAME);\n+    assertThat(mapping.getDataSourceName()).isEqualTo(DATA_SOURCE_NAME);\n+    assertThat(mapping.getTableName()).isEqualTo(REGION_TABLE_NAME);\n+    assertThat(mapping.getRegionName()).isEqualTo(REGION_NAME);\n+    assertThat(mapping.getPdxName()).isEqualTo(NonSerializedEmployee.class.getName());\n+    assertThat(mapping.getIds()).isEqualTo(\"id\");\n+    assertThat(mapping.getFieldMappings().size()).isEqualTo(3);\n+    assertThat(mapping.getFieldMappings()).containsAll(getEmployeeTableFieldMappings());\n+  }\n+\n+  @Test\n+  public void mappingFailureWhenConnectWrongDataSource() {\n+    Throwable throwable =\n+        catchThrowable(() -> createCacheAndCreateJdbcMappingWithWrongDataSource(\"NoFieldMappings\"));\n+\n+    assertThat(throwable).isInstanceOf(JdbcConnectorException.class)\n+        .hasMessage(String.format(\"No datasource \\\"%s\\\" found when creating default field mapping\",\n+            DATA_SOURCE_NAME));\n+  }\n+\n+  @Test\n+  public void mappingFailureWhenTableNotExists() {\n+    Throwable throwable = catchThrowable(() -> createCacheAndCreateJdbcMapping(\"NoFieldMappings\"));\n+\n+    assertThat(throwable).isInstanceOf(JdbcConnectorException.class)\n+        .hasMessage(String.format(\"No table was found that matches \\\"%s\\\"\", REGION_TABLE_NAME));\n+  }\n+\n+  @Test\n+  public void mappingFailureWhenPdxNotExists() throws Exception {\n+    createEmployeeTable();\n+\n+    Throwable throwable =\n+        catchThrowable(() -> createCacheAndCreateJdbcMappingWithWrongPdxName(\"NoPdxName\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135a7797f557bbde0e89a954a79275639f5021f0"}, "originalPosition": 239}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjcwNDc5OnYy", "diffSide": "RIGHT", "path": "geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/CacheXmlJdbcMappingIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMDo1MDoyNFrOIRtHyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMDo1MDoyNFrOIRtHyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQzNTk3Ng==", "bodyText": "This is method implementation is exactly the same as createCacheAndCreateJdbcMapping(). The only difference is the method name. So how about just using createCacheAndCreateJdbcMapping()?", "url": "https://github.com/apache/geode/pull/5637#discussion_r555435976", "createdAt": "2021-01-12T00:50:24Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/CacheXmlJdbcMappingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,284 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.connectors.jdbc;\n+\n+import static org.apache.geode.test.util.ResourceUtils.createTempFileFromResource;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+\n+import java.net.URL;\n+import java.sql.Connection;\n+import java.sql.JDBCType;\n+import java.sql.Statement;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.connectors.jdbc.internal.JdbcConnectorService;\n+import org.apache.geode.connectors.jdbc.internal.configuration.FieldMapping;\n+import org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping;\n+import org.apache.geode.connectors.jdbc.test.junit.rules.DatabaseConnectionRule;\n+import org.apache.geode.connectors.jdbc.test.junit.rules.MySqlConnectionRule;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.jndi.JNDIInvoker;\n+import org.apache.geode.pdx.FieldType;\n+import org.apache.geode.pdx.internal.AutoSerializableManager;\n+\n+public class CacheXmlJdbcMappingIntegrationTest {\n+\n+  private static final URL COMPOSE_RESOURCE_PATH =\n+      CacheXmlJdbcMappingIntegrationTest.class.getResource(\"mysql.yml\");\n+  protected static final String DATA_SOURCE_NAME = \"TestDataSource\";\n+  protected static final String DB_NAME = \"test\";\n+  protected static final String REGION_TABLE_NAME = \"employees\";\n+  protected static final String REGION_NAME = \"Region1\";\n+\n+  @Rule\n+  public RestoreSystemProperties restoreSystemProperties = new RestoreSystemProperties();\n+\n+  private Connection connection;\n+  private Statement statement;\n+  private InternalCache cache;\n+\n+  @ClassRule\n+  public static DatabaseConnectionRule dbRule = new MySqlConnectionRule.Builder()\n+      .file(COMPOSE_RESOURCE_PATH.getPath()).serviceName(\"db\").port(3306).database(DB_NAME).build();\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    System.setProperty(AutoSerializableManager.NO_HARDCODED_EXCLUDES_PARAM, \"true\");\n+    connection = dbRule.getConnection();\n+    statement = connection.createStatement();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    JNDIInvoker.unMapDatasource(DATA_SOURCE_NAME);\n+\n+    if (cache != null) {\n+      cache.close();\n+    }\n+\n+    if (statement == null) {\n+      statement = connection.createStatement();\n+    }\n+    statement.execute(\"Drop table IF EXISTS \" + REGION_TABLE_NAME);\n+    statement.close();\n+\n+    if (connection != null) {\n+      connection.close();\n+    }\n+  }\n+\n+  private InternalCache createCacheAndCreateJdbcMapping(String cacheXmlTestName)\n+      throws Exception {\n+    String url = dbRule.getConnectionUrl().replaceAll(\"&\", \"&amp;\");\n+    System.setProperty(\"TestDataSourceUrl\", url);\n+    InternalCache cache =\n+        (InternalCache) new CacheFactory().set(\"locators\", \"\").set(\"mcast-port\", \"0\")\n+            .set(\"cache-xml-file\", getXmlFileForTest(cacheXmlTestName))\n+            .create();\n+    return cache;\n+  }\n+\n+  private InternalCache createCacheAndCreateJdbcMappingWithNonSerializedClass(\n+      String cacheXmlTestName) throws Exception {\n+    return createCacheAndCreateJdbcMapping(cacheXmlTestName);\n+  }\n+\n+  private InternalCache createCacheAndCreateJdbcMappingWithWrongDataSource(\n+      String cacheXmlTestName) throws Exception {\n+    System.setProperty(\"TestDataSourceUrl\", \"jdbc:mysql://localhost/test\");\n+    InternalCache cache =\n+        (InternalCache) new CacheFactory().set(\"locators\", \"\").set(\"mcast-port\", \"0\")\n+            .set(\"cache-xml-file\", getXmlFileForTest(cacheXmlTestName))\n+            .create();\n+    return cache;\n+  }\n+\n+  private InternalCache createCacheAndCreateJdbcMappingWithWrongPdxName(String cacheXmlTestName)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135a7797f557bbde0e89a954a79275639f5021f0"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjcwNzQ2OnYy", "diffSide": "RIGHT", "path": "geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/CacheXmlJdbcMappingIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMDo1MjowMlrOIRtJcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMDo1MjowMlrOIRtJcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQzNjQwMw==", "bodyText": "This throws Exception can be removed. The same for line 93, 109 and 119.", "url": "https://github.com/apache/geode/pull/5637#discussion_r555436403", "createdAt": "2021-01-12T00:52:02Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/CacheXmlJdbcMappingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,284 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.connectors.jdbc;\n+\n+import static org.apache.geode.test.util.ResourceUtils.createTempFileFromResource;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+\n+import java.net.URL;\n+import java.sql.Connection;\n+import java.sql.JDBCType;\n+import java.sql.Statement;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.connectors.jdbc.internal.JdbcConnectorService;\n+import org.apache.geode.connectors.jdbc.internal.configuration.FieldMapping;\n+import org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping;\n+import org.apache.geode.connectors.jdbc.test.junit.rules.DatabaseConnectionRule;\n+import org.apache.geode.connectors.jdbc.test.junit.rules.MySqlConnectionRule;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.jndi.JNDIInvoker;\n+import org.apache.geode.pdx.FieldType;\n+import org.apache.geode.pdx.internal.AutoSerializableManager;\n+\n+public class CacheXmlJdbcMappingIntegrationTest {\n+\n+  private static final URL COMPOSE_RESOURCE_PATH =\n+      CacheXmlJdbcMappingIntegrationTest.class.getResource(\"mysql.yml\");\n+  protected static final String DATA_SOURCE_NAME = \"TestDataSource\";\n+  protected static final String DB_NAME = \"test\";\n+  protected static final String REGION_TABLE_NAME = \"employees\";\n+  protected static final String REGION_NAME = \"Region1\";\n+\n+  @Rule\n+  public RestoreSystemProperties restoreSystemProperties = new RestoreSystemProperties();\n+\n+  private Connection connection;\n+  private Statement statement;\n+  private InternalCache cache;\n+\n+  @ClassRule\n+  public static DatabaseConnectionRule dbRule = new MySqlConnectionRule.Builder()\n+      .file(COMPOSE_RESOURCE_PATH.getPath()).serviceName(\"db\").port(3306).database(DB_NAME).build();\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    System.setProperty(AutoSerializableManager.NO_HARDCODED_EXCLUDES_PARAM, \"true\");\n+    connection = dbRule.getConnection();\n+    statement = connection.createStatement();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    JNDIInvoker.unMapDatasource(DATA_SOURCE_NAME);\n+\n+    if (cache != null) {\n+      cache.close();\n+    }\n+\n+    if (statement == null) {\n+      statement = connection.createStatement();\n+    }\n+    statement.execute(\"Drop table IF EXISTS \" + REGION_TABLE_NAME);\n+    statement.close();\n+\n+    if (connection != null) {\n+      connection.close();\n+    }\n+  }\n+\n+  private InternalCache createCacheAndCreateJdbcMapping(String cacheXmlTestName)\n+      throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135a7797f557bbde0e89a954a79275639f5021f0"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5NjcwOTMyOnYy", "diffSide": "RIGHT", "path": "geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/CacheXmlJdbcMappingIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMDo1Mjo1NFrOIRtKgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMDo1Mjo1NFrOIRtKgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQzNjY3NQ==", "bodyText": "I would recommend inline this one-line implementation for readability of code.", "url": "https://github.com/apache/geode/pull/5637#discussion_r555436675", "createdAt": "2021-01-12T00:52:54Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/acceptanceTest/java/org/apache/geode/connectors/jdbc/CacheXmlJdbcMappingIntegrationTest.java", "diffHunk": "@@ -0,0 +1,284 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.connectors.jdbc;\n+\n+import static org.apache.geode.test.util.ResourceUtils.createTempFileFromResource;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+\n+import java.net.URL;\n+import java.sql.Connection;\n+import java.sql.JDBCType;\n+import java.sql.Statement;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.contrib.java.lang.system.RestoreSystemProperties;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.connectors.jdbc.internal.JdbcConnectorService;\n+import org.apache.geode.connectors.jdbc.internal.configuration.FieldMapping;\n+import org.apache.geode.connectors.jdbc.internal.configuration.RegionMapping;\n+import org.apache.geode.connectors.jdbc.test.junit.rules.DatabaseConnectionRule;\n+import org.apache.geode.connectors.jdbc.test.junit.rules.MySqlConnectionRule;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.jndi.JNDIInvoker;\n+import org.apache.geode.pdx.FieldType;\n+import org.apache.geode.pdx.internal.AutoSerializableManager;\n+\n+public class CacheXmlJdbcMappingIntegrationTest {\n+\n+  private static final URL COMPOSE_RESOURCE_PATH =\n+      CacheXmlJdbcMappingIntegrationTest.class.getResource(\"mysql.yml\");\n+  protected static final String DATA_SOURCE_NAME = \"TestDataSource\";\n+  protected static final String DB_NAME = \"test\";\n+  protected static final String REGION_TABLE_NAME = \"employees\";\n+  protected static final String REGION_NAME = \"Region1\";\n+\n+  @Rule\n+  public RestoreSystemProperties restoreSystemProperties = new RestoreSystemProperties();\n+\n+  private Connection connection;\n+  private Statement statement;\n+  private InternalCache cache;\n+\n+  @ClassRule\n+  public static DatabaseConnectionRule dbRule = new MySqlConnectionRule.Builder()\n+      .file(COMPOSE_RESOURCE_PATH.getPath()).serviceName(\"db\").port(3306).database(DB_NAME).build();\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    System.setProperty(AutoSerializableManager.NO_HARDCODED_EXCLUDES_PARAM, \"true\");\n+    connection = dbRule.getConnection();\n+    statement = connection.createStatement();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    JNDIInvoker.unMapDatasource(DATA_SOURCE_NAME);\n+\n+    if (cache != null) {\n+      cache.close();\n+    }\n+\n+    if (statement == null) {\n+      statement = connection.createStatement();\n+    }\n+    statement.execute(\"Drop table IF EXISTS \" + REGION_TABLE_NAME);\n+    statement.close();\n+\n+    if (connection != null) {\n+      connection.close();\n+    }\n+  }\n+\n+  private InternalCache createCacheAndCreateJdbcMapping(String cacheXmlTestName)\n+      throws Exception {\n+    String url = dbRule.getConnectionUrl().replaceAll(\"&\", \"&amp;\");\n+    System.setProperty(\"TestDataSourceUrl\", url);\n+    InternalCache cache =\n+        (InternalCache) new CacheFactory().set(\"locators\", \"\").set(\"mcast-port\", \"0\")\n+            .set(\"cache-xml-file\", getXmlFileForTest(cacheXmlTestName))\n+            .create();\n+    return cache;\n+  }\n+\n+  private InternalCache createCacheAndCreateJdbcMappingWithNonSerializedClass(\n+      String cacheXmlTestName) throws Exception {\n+    return createCacheAndCreateJdbcMapping(cacheXmlTestName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135a7797f557bbde0e89a954a79275639f5021f0"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ5Njc0MzQxOnYy", "diffSide": "RIGHT", "path": "geode-connectors/src/main/java/org/apache/geode/connectors/jdbc/internal/xml/RegionMappingConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTowOTozN1rOIRtefg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xMlQwMTowOTozN1rOIRtefg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NTQ0MTc5MA==", "bodyText": "The regionMapping argument is not used, and can be removed.", "url": "https://github.com/apache/geode/pull/5637#discussion_r555441790", "createdAt": "2021-01-12T01:09:37Z", "author": {"login": "jchen21"}, "path": "geode-connectors/src/main/java/org/apache/geode/connectors/jdbc/internal/xml/RegionMappingConfiguration.java", "diffHunk": "@@ -62,4 +96,159 @@ private void createRegionMapping(JdbcConnectorService service,\n       throw new InternalGemFireException(e);\n     }\n   }\n+\n+  protected List<FieldMapping> createDefaultFieldMapping(RegionMapping regionMapping,\n+      PdxType pdxType) {\n+    DataSource dataSource = getDataSource(regionMapping.getDataSourceName());\n+    if (dataSource == null) {\n+      throw new JdbcConnectorException(\"No datasource \\\"\" + regionMapping.getDataSourceName()\n+          + \"\\\" found when creating default field mapping\");\n+    }\n+    TableMetaDataManager manager = getTableMetaDataManager();\n+    try (Connection connection = dataSource.getConnection()) {\n+      TableMetaDataView tableMetaData = manager.getTableMetaDataView(connection, regionMapping);\n+      return createDefaultFieldMapping(regionMapping, pdxType, tableMetaData);\n+    } catch (SQLException e) {\n+      throw JdbcConnectorException.createException(e);\n+    }\n+  }\n+\n+  private List<FieldMapping> createDefaultFieldMapping(RegionMapping regionMapping,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "135a7797f557bbde0e89a954a79275639f5021f0"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4720, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}