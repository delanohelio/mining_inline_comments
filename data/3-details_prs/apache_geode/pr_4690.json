{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczOTkzMTQy", "number": 4690, "title": "GEODE-7746: onServers function throws a NPE if the distributed system is shutdown", "bodyText": "Thank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-02-11T23:52:09Z", "url": "https://github.com/apache/geode/pull/4690", "merged": true, "mergeCommit": {"oid": "54890b3e28bb992a0c1a6069b62de065034d2df4"}, "closed": true, "closedAt": "2020-02-18T18:58:21Z", "author": {"login": "jchen21"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBxi7FAH2gAyMzczOTkzMTQyOmI3M2RhYWEwMGE0ODBhMTQ0ODljMzRlMzNhOTMyNjE3YmU0ZGRkNmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFmfyagFqTM2MDU4MzQ4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b73daaa00a480a14489c34e33a932617be4ddd6b", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/b73daaa00a480a14489c34e33a932617be4ddd6b", "committedDate": "2020-02-06T21:23:30Z", "message": "GEODE-7746: Fix the NullPointerException\n\nAdd null check and throw NoAvailableServersException"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8400ce4d05523a7032ad02d7183803520b794b63", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/8400ce4d05523a7032ad02d7183803520b794b63", "committedDate": "2020-02-07T00:42:22Z", "message": "WIP: add a DUnit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "153b1ac5fa071f6b785f6c00672cd9ffed368c55", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/153b1ac5fa071f6b785f6c00672cd9ffed368c55", "committedDate": "2020-02-11T01:55:26Z", "message": "Add dunit test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f06781261d329060e9cc517384921f9dec49c424", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/f06781261d329060e9cc517384921f9dec49c424", "committedDate": "2020-02-11T23:45:36Z", "message": "Add assertion"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "606a8ea588487f05f1ed97cfba1e4fed2928b322", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/606a8ea588487f05f1ed97cfba1e4fed2928b322", "committedDate": "2020-02-11T23:47:42Z", "message": "Code formatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3MTQ3OTU4", "url": "https://github.com/apache/geode/pull/4690#pullrequestreview-357147958", "createdAt": "2020-02-12T02:12:00Z", "commit": {"oid": "606a8ea588487f05f1ed97cfba1e4fed2928b322"}, "state": "DISMISSED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMjoxMjowMFrOFofq1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMjoxNjowM1rOFofucA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNjIyOA==", "bodyText": "perhaps a more detailed test name describing what the test is trying to test for?", "url": "https://github.com/apache/geode/pull/4690#discussion_r378006228", "createdAt": "2020-02-12T02:12:00Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/execute/FunctionExecutionDUnit.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.execute;\n+\n+import static org.apache.geode.internal.lang.ThrowableUtils.hasCauseType;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionFactory;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.NoAvailableServersException;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.rules.ClientVM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+public class FunctionExecutionDUnit implements Serializable {\n+\n+  public class TestFunction implements Function {\n+\n+    @Override\n+    public void execute(FunctionContext context) {\n+      if (context.getCache().getRegion(\"testRegion\") == null) {\n+        RegionFactory regionFactory = context.getCache().createRegionFactory();\n+        regionFactory.create(\"testRegion\");\n+        context.getResultSender().lastResult(true);\n+      } else {\n+        context.getResultSender().lastResult(false);\n+      }\n+    }\n+\n+    @Override\n+    public String getId() {\n+      return getClass().getSimpleName();\n+    }\n+  }\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Test\n+  public void test() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "606a8ea588487f05f1ed97cfba1e4fed2928b322"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNjQ1OA==", "bodyText": "Perhaps use awaitility instead of spinning?", "url": "https://github.com/apache/geode/pull/4690#discussion_r378006458", "createdAt": "2020-02-12T02:13:01Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/execute/FunctionExecutionDUnit.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.execute;\n+\n+import static org.apache.geode.internal.lang.ThrowableUtils.hasCauseType;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionFactory;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.NoAvailableServersException;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.rules.ClientVM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+public class FunctionExecutionDUnit implements Serializable {\n+\n+  public class TestFunction implements Function {\n+\n+    @Override\n+    public void execute(FunctionContext context) {\n+      if (context.getCache().getRegion(\"testRegion\") == null) {\n+        RegionFactory regionFactory = context.getCache().createRegionFactory();\n+        regionFactory.create(\"testRegion\");\n+        context.getResultSender().lastResult(true);\n+      } else {\n+        context.getResultSender().lastResult(false);\n+      }\n+    }\n+\n+    @Override\n+    public String getId() {\n+      return getClass().getSimpleName();\n+    }\n+  }\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Test\n+  public void test() throws Exception {\n+    MemberVM locator = cluster.startLocatorVM(0);\n+    MemberVM server = cluster.startServerVM(1, locator.getPort());\n+    ClientVM client = cluster.startClientVM(2, c -> c.withLocatorConnection(locator.getPort()));\n+\n+    server.invoke(() -> {\n+      Function function = new TestFunction();\n+      FunctionService.registerFunction(function);\n+    });\n+    AsyncInvocation async = client.invokeAsync(() -> {\n+      ClientCache clientCache = ClusterStartupRule.getClientCache();\n+      while (true) {\n+        FunctionService.onServers(clientCache).execute(\"TestFunction\").getResult();\n+      }\n+    });\n+    server.invoke(() -> {\n+      Region region = null;\n+      while (region == null) {\n+        region = ClusterStartupRule.getCache().getRegion(\"testRegion\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "606a8ea588487f05f1ed97cfba1e4fed2928b322"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNjc4Nw==", "bodyText": "I think there is a chance these asserts don't get called.  I think you'll have to add a throw on line 90-91 so that if the await() doesn't fail, then the test should fail.", "url": "https://github.com/apache/geode/pull/4690#discussion_r378006787", "createdAt": "2020-02-12T02:14:25Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/execute/FunctionExecutionDUnit.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.execute;\n+\n+import static org.apache.geode.internal.lang.ThrowableUtils.hasCauseType;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionFactory;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.NoAvailableServersException;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.rules.ClientVM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+public class FunctionExecutionDUnit implements Serializable {\n+\n+  public class TestFunction implements Function {\n+\n+    @Override\n+    public void execute(FunctionContext context) {\n+      if (context.getCache().getRegion(\"testRegion\") == null) {\n+        RegionFactory regionFactory = context.getCache().createRegionFactory();\n+        regionFactory.create(\"testRegion\");\n+        context.getResultSender().lastResult(true);\n+      } else {\n+        context.getResultSender().lastResult(false);\n+      }\n+    }\n+\n+    @Override\n+    public String getId() {\n+      return getClass().getSimpleName();\n+    }\n+  }\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Test\n+  public void test() throws Exception {\n+    MemberVM locator = cluster.startLocatorVM(0);\n+    MemberVM server = cluster.startServerVM(1, locator.getPort());\n+    ClientVM client = cluster.startClientVM(2, c -> c.withLocatorConnection(locator.getPort()));\n+\n+    server.invoke(() -> {\n+      Function function = new TestFunction();\n+      FunctionService.registerFunction(function);\n+    });\n+    AsyncInvocation async = client.invokeAsync(() -> {\n+      ClientCache clientCache = ClusterStartupRule.getClientCache();\n+      while (true) {\n+        FunctionService.onServers(clientCache).execute(\"TestFunction\").getResult();\n+      }\n+    });\n+    server.invoke(() -> {\n+      Region region = null;\n+      while (region == null) {\n+        region = ClusterStartupRule.getCache().getRegion(\"testRegion\");\n+      }\n+    });\n+    cluster.stop(1);\n+    cluster.stop(0);\n+    waitForException(async);\n+  }\n+\n+  private void waitForException(AsyncInvocation async) {\n+    try {\n+      async.await();\n+    } catch (Throwable e) {\n+      assertThat(hasCauseType(e, NullPointerException.class)).isFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "606a8ea588487f05f1ed97cfba1e4fed2928b322"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNzE1Mg==", "bodyText": "Also, is there a way we can convert to awaitility so there is no chance a test can hang forever?", "url": "https://github.com/apache/geode/pull/4690#discussion_r378007152", "createdAt": "2020-02-12T02:16:03Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/execute/FunctionExecutionDUnit.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.execute;\n+\n+import static org.apache.geode.internal.lang.ThrowableUtils.hasCauseType;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionFactory;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.NoAvailableServersException;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.rules.ClientVM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+public class FunctionExecutionDUnit implements Serializable {\n+\n+  public class TestFunction implements Function {\n+\n+    @Override\n+    public void execute(FunctionContext context) {\n+      if (context.getCache().getRegion(\"testRegion\") == null) {\n+        RegionFactory regionFactory = context.getCache().createRegionFactory();\n+        regionFactory.create(\"testRegion\");\n+        context.getResultSender().lastResult(true);\n+      } else {\n+        context.getResultSender().lastResult(false);\n+      }\n+    }\n+\n+    @Override\n+    public String getId() {\n+      return getClass().getSimpleName();\n+    }\n+  }\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Test\n+  public void test() throws Exception {\n+    MemberVM locator = cluster.startLocatorVM(0);\n+    MemberVM server = cluster.startServerVM(1, locator.getPort());\n+    ClientVM client = cluster.startClientVM(2, c -> c.withLocatorConnection(locator.getPort()));\n+\n+    server.invoke(() -> {\n+      Function function = new TestFunction();\n+      FunctionService.registerFunction(function);\n+    });\n+    AsyncInvocation async = client.invokeAsync(() -> {\n+      ClientCache clientCache = ClusterStartupRule.getClientCache();\n+      while (true) {\n+        FunctionService.onServers(clientCache).execute(\"TestFunction\").getResult();\n+      }\n+    });\n+    server.invoke(() -> {\n+      Region region = null;\n+      while (region == null) {\n+        region = ClusterStartupRule.getCache().getRegion(\"testRegion\");\n+      }\n+    });\n+    cluster.stop(1);\n+    cluster.stop(0);\n+    waitForException(async);\n+  }\n+\n+  private void waitForException(AsyncInvocation async) {\n+    try {\n+      async.await();\n+    } catch (Throwable e) {\n+      assertThat(hasCauseType(e, NullPointerException.class)).isFalse();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNjc4Nw=="}, "originalCommit": {"oid": "606a8ea588487f05f1ed97cfba1e4fed2928b322"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77683491ee4352d8809e3d7c4e9de054dfc14724", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/77683491ee4352d8809e3d7c4e9de054dfc14724", "committedDate": "2020-02-13T02:49:49Z", "message": "Remove the DUnit test\n\nSince the NPE can be reproduced by\nClientServerSessionCacheDUnitTest.startingAClientWithoutServersFails()"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0303da6139ff80ea6bf2e37fdd72f8f6873a8c7a", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/0303da6139ff80ea6bf2e37fdd72f8f6873a8c7a", "committedDate": "2020-02-13T02:43:31Z", "message": "Remove the DUnit test\n\nSince the NPE can be reproduced by\nClientServerSessionCacheDUnitTest.startingAClientWithoutServersFails()"}, "afterCommit": {"oid": "77683491ee4352d8809e3d7c4e9de054dfc14724", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/77683491ee4352d8809e3d7c4e9de054dfc14724", "committedDate": "2020-02-13T02:49:49Z", "message": "Remove the DUnit test\n\nSince the NPE can be reproduced by\nClientServerSessionCacheDUnitTest.startingAClientWithoutServersFails()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3OTI2MTkz", "url": "https://github.com/apache/geode/pull/4690#pullrequestreview-357926193", "createdAt": "2020-02-13T02:55:40Z", "commit": {"oid": "77683491ee4352d8809e3d7c4e9de054dfc14724"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NDE3NDAy", "url": "https://github.com/apache/geode/pull/4690#pullrequestreview-358417402", "createdAt": "2020-02-13T17:37:43Z", "commit": {"oid": "77683491ee4352d8809e3d7c4e9de054dfc14724"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzozNzo0M1rOFpdLnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzozNzo0M1rOFpdLnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAxNDA0NA==", "bodyText": "Now that this changes the exception thrown... will this affect any other parts of function service?  such as retries?", "url": "https://github.com/apache/geode/pull/4690#discussion_r379014044", "createdAt": "2020-02-13T17:37:43Z", "author": {"login": "jhuynh1"}, "path": "extensions/geode-modules/src/distributedTest/java/org/apache/geode/modules/util/ClientServerSessionCacheDUnitTest.java", "diffHunk": "@@ -105,7 +105,7 @@ public void startingAClientWithoutServersFails() {\n     final VM client = VM.getVM(2);\n \n     assertThatThrownBy(() -> client.invoke(this::startClientSessionCache))\n-        .hasCauseInstanceOf(FunctionException.class);\n+        .hasCauseInstanceOf(NoAvailableServersException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77683491ee4352d8809e3d7c4e9de054dfc14724"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NjAxNTU3", "url": "https://github.com/apache/geode/pull/4690#pullrequestreview-358601557", "createdAt": "2020-02-13T22:35:09Z", "commit": {"oid": "77683491ee4352d8809e3d7c4e9de054dfc14724"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNTgzNDg1", "url": "https://github.com/apache/geode/pull/4690#pullrequestreview-360583485", "createdAt": "2020-02-18T18:46:49Z", "commit": {"oid": "77683491ee4352d8809e3d7c4e9de054dfc14724"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3776, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}