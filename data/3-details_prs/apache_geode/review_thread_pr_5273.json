{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NTE4ODkz", "number": 5273, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOToyNTo0NVrOEG4gkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjowODowMFrOEJ2SsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjUyNzU0OnYy", "diffSide": "LEFT", "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/internal/DSFIDSerializerImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOToyNTo0NVrOGl9GTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOToyNTo0NVrOGl9GTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1MTUzMg==", "bodyText": "dead code", "url": "https://github.com/apache/geode/pull/5273#discussion_r442451532", "createdAt": "2020-06-18T19:25:45Z", "author": {"login": "Bill"}, "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/internal/DSFIDSerializerImpl.java", "diffHunk": "@@ -220,20 +220,6 @@ public void invokeToData(Object ds, DataOutput out) throws IOException {\n     }\n   }\n \n-  /**\n-   * Get the Version of the peer or disk store that created this {@link DataOutput}.\n-   * Returns\n-   * zero if the version is same as this member's.\n-   */\n-  public Version getVersionForDataStreamOrNull(DataOutput out) {\n-    // check if this is a versioned data output\n-    if (out instanceof VersionedDataStream) {\n-      return ((VersionedDataStream) out).getVersion();\n-    } else {\n-      return null;\n-    }\n-  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cae5f4ea8e387194cc9ac285ec4e04944775633"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NjUzMDc5OnYy", "diffSide": "LEFT", "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/Version.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOToyNjo0OFrOGl9IYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOToyNjo0OFrOGl9IYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1MjA2Nw==", "bodyText": "this was used in exactly two places and is better accomplished via Version.CURRENT.isEqual(someVersionOrdinal)", "url": "https://github.com/apache/geode/pull/5273#discussion_r442452067", "createdAt": "2020-06-18T19:26:48Z", "author": {"login": "Bill"}, "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/Version.java", "diffHunk": "@@ -635,48 +569,4 @@ public boolean isPre65() {\n         .collect(Collectors.toList());\n   }\n \n-  public boolean isCurrentVersion() {\n-    return this.ordinal == CURRENT.ordinal;\n-  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cae5f4ea8e387194cc9ac285ec4e04944775633"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDQ1ODA1OnYy", "diffSide": "LEFT", "path": "geode-core/src/integrationTest/resources/org/apache/geode/codeAnalysis/sanctionedDataSerializables.txt", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNTowMjo1NFrOGpkSAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMTo1NzozMVrOGpyZdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIzOTIzNQ==", "bodyText": "this removal of MissingPersistentIDsRequest surprised me.  The class still exists in my checkout and is a DSFID.", "url": "https://github.com/apache/geode/pull/5273#discussion_r446239235", "createdAt": "2020-06-26T15:02:54Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/integrationTest/resources/org/apache/geode/codeAnalysis/sanctionedDataSerializables.txt", "diffHunk": "@@ -578,9 +502,6 @@ org/apache/geode/internal/admin/remote/LicenseInfoResponse,2\n fromData,18\n toData,15\n \n-org/apache/geode/internal/admin/remote/MissingPersistentIDsRequest,1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1NjgyNw==", "bodyText": "I re-ran ./gradlew :geode-core:integrationTest --tests=AnalyzeCoreSerializablesJUnitTest and sanctionedDataSerializables.txt did not change. MissingPersistentIDsRequest is still not listed there. I see it ultimately derives from DSFID.", "url": "https://github.com/apache/geode/pull/5273#discussion_r446356827", "createdAt": "2020-06-26T18:56:32Z", "author": {"login": "Bill"}, "path": "geode-core/src/integrationTest/resources/org/apache/geode/codeAnalysis/sanctionedDataSerializables.txt", "diffHunk": "@@ -578,9 +502,6 @@ org/apache/geode/internal/admin/remote/LicenseInfoResponse,2\n fromData,18\n toData,15\n \n-org/apache/geode/internal/admin/remote/MissingPersistentIDsRequest,1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIzOTIzNQ=="}, "originalCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQwNjMyMQ==", "bodyText": "I see why - that class has no fromData/toData methods.  The test just searches for those in parsed class files.  It doesn't care if they're DataSerializable/DSFID.", "url": "https://github.com/apache/geode/pull/5273#discussion_r446406321", "createdAt": "2020-06-26T20:56:43Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/integrationTest/resources/org/apache/geode/codeAnalysis/sanctionedDataSerializables.txt", "diffHunk": "@@ -578,9 +502,6 @@ org/apache/geode/internal/admin/remote/LicenseInfoResponse,2\n fromData,18\n toData,15\n \n-org/apache/geode/internal/admin/remote/MissingPersistentIDsRequest,1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIzOTIzNQ=="}, "originalCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3MDUxNg==", "bodyText": "I wonder if it used to have fromData/toData and now does not? why else would it have showed up in this file previously?", "url": "https://github.com/apache/geode/pull/5273#discussion_r446470516", "createdAt": "2020-06-27T01:57:31Z", "author": {"login": "Bill"}, "path": "geode-core/src/integrationTest/resources/org/apache/geode/codeAnalysis/sanctionedDataSerializables.txt", "diffHunk": "@@ -578,9 +502,6 @@ org/apache/geode/internal/admin/remote/LicenseInfoResponse,2\n fromData,18\n toData,15\n \n-org/apache/geode/internal/admin/remote/MissingPersistentIDsRequest,1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIzOTIzNQ=="}, "originalCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDQ2NzUzOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/cache/client/internal/ClientSideHandshakeImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNTowNTo1MVrOGpkYRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMTo1Nzo0NFrOGpyZkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0MDgzOA==", "bodyText": "This should continue to use Version, not VersionOrdinal.  Using Version ensures that we never create a datastream with an unknown ordinal.  None of our serialization code will know what to do if that should happen.", "url": "https://github.com/apache/geode/pull/5273#discussion_r446240838", "createdAt": "2020-06-26T15:05:51Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/main/java/org/apache/geode/cache/client/internal/ClientSideHandshakeImpl.java", "diffHunk": "@@ -270,7 +271,7 @@ public ServerQueueStatus handshakeWithServer(Connection conn, ServerLocation loc\n   private InternalDistributedMember readServerMember(DataInputStream p_dis) throws IOException {\n \n     byte[] memberBytes = DataSerializer.readByteArray(p_dis);\n-    Version v = StaticSerialization.getVersionForDataStreamOrNull(p_dis);\n+    final VersionOrdinal v = StaticSerialization.getVersionForDataStreamOrNull(p_dis);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3MDU0NQ==", "bodyText": "fixed", "url": "https://github.com/apache/geode/pull/5273#discussion_r446470545", "createdAt": "2020-06-27T01:57:44Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/cache/client/internal/ClientSideHandshakeImpl.java", "diffHunk": "@@ -270,7 +271,7 @@ public ServerQueueStatus handshakeWithServer(Connection conn, ServerLocation loc\n   private InternalDistributedMember readServerMember(DataInputStream p_dis) throws IOException {\n \n     byte[] memberBytes = DataSerializer.readByteArray(p_dis);\n-    Version v = StaticSerialization.getVersionForDataStreamOrNull(p_dis);\n+    final VersionOrdinal v = StaticSerialization.getVersionForDataStreamOrNull(p_dis);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0MDgzOA=="}, "originalCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDQ4NTMyOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/membership/InternalDistributedMember.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxMTowNlrOGpkjpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxODo1MDo0MlrOGprS_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0Mzc1MA==", "bodyText": "This should continue to return a Version, not a VersionOrdinal.  We already have a method for getting the ordinal.", "url": "https://github.com/apache/geode/pull/5273#discussion_r446243750", "createdAt": "2020-06-26T15:11:06Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/membership/InternalDistributedMember.java", "diffHunk": "@@ -549,7 +550,7 @@ public void setVersionObjectForTest(Version v) {\n   }\n \n   @Override\n-  public Version getVersionObject() {\n+  public VersionOrdinal getVersionObject() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM1NDE3Mw==", "bodyText": "Since IDM isa MemberIdentifier this (overridden) method has to return a VersionOrdinal not a Version since, in general, a MemberIdentifier can be for a member that is running an unknown software version.\nI'm renaming MemberIdentifier.getVersionObject() => MemberIdentifier.getVersionOrdinalObject().\nTo summarize the state of IDM version methods this is what it looks like now:\n  // inherited from MemberIdentifier. It has a new name to make the return type explicit\n  @Override\n  public VersionOrdinal getVersionOrdinalObject() {\u2026}\n\n  /**\n   * If this member runs a version known in this JVM then return that Version.\n   * If this member does not run a known version then return Version.CURRENT.\n   *\n   * In various serialization scenarios we want the well-known version for this\n   * member, or, if it doesn't have a well-known version, we want the current\n   * (in this JVM) software version. Rather than have that logic spread around in\n   * the serialization code, it is centralized here.\n   */\n  public Version getVersionObject() {\u2026}\nWe still have lots of ways to get a Version from a short version ordinal. Version class has these static methods:\n\nfromOrdinal(short ordinal) throws UnsupportedSerializationVersionException\nfromOrdinalOrCurrent(short ordinal)\nfromOrdinalNoThrow(short ordinal, boolean returnNullForCurrent)\n\nThere is some unfortunate duplication in those methods. Consolidating that logic is beyond the scope of this PR.", "url": "https://github.com/apache/geode/pull/5273#discussion_r446354173", "createdAt": "2020-06-26T18:50:42Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/membership/InternalDistributedMember.java", "diffHunk": "@@ -549,7 +550,7 @@ public void setVersionObjectForTest(Version v) {\n   }\n \n   @Override\n-  public Version getVersionObject() {\n+  public VersionOrdinal getVersionObject() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0Mzc1MA=="}, "originalCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDQ5NDQ3OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/HeapDataOutputStream.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxMzozMVrOGpkplA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMTo1ODowNFrOGpyZvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NTI2OA==", "bodyText": "same comment about retaining the use of Version in all serialization code.  We need assurance in place that we will never encounter an unknown ordinal during serialization/deserialization.", "url": "https://github.com/apache/geode/pull/5273#discussion_r446245268", "createdAt": "2020-06-26T15:13:31Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/main/java/org/apache/geode/internal/HeapDataOutputStream.java", "diffHunk": "@@ -48,7 +49,7 @@\n     org.apache.geode.internal.serialization.BufferDataOutputStream\n     implements ObjToByteArraySerializer, ByteBufferWriter {\n \n-  public HeapDataOutputStream(Version version) {\n+  public HeapDataOutputStream(VersionOrdinal version) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3MDU4OQ==", "bodyText": "fixed", "url": "https://github.com/apache/geode/pull/5273#discussion_r446470589", "createdAt": "2020-06-27T01:58:04Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/internal/HeapDataOutputStream.java", "diffHunk": "@@ -48,7 +49,7 @@\n     org.apache.geode.internal.serialization.BufferDataOutputStream\n     implements ObjToByteArraySerializer, ByteBufferWriter {\n \n-  public HeapDataOutputStream(Version version) {\n+  public HeapDataOutputStream(VersionOrdinal version) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NTI2OA=="}, "originalCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MDUxMzA4OnYy", "diffSide": "RIGHT", "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/VersionOrdinalImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxODo1N1rOGpk1ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMTo1ODoxMVrOGpyZwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0ODMzMA==", "bodyText": "could this find the name of a Version and use it?  Alternatively just use \"VersionOrdinal\" instead of \"UNKNOWN\"", "url": "https://github.com/apache/geode/pull/5273#discussion_r446248330", "createdAt": "2020-06-26T15:18:57Z", "author": {"login": "bschuchardt"}, "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/VersionOrdinalImpl.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.internal.serialization;\n+\n+public class VersionOrdinalImpl implements VersionOrdinal {\n+\n+  protected final short ordinal;\n+\n+  public VersionOrdinalImpl(final short ordinal) {\n+    this.ordinal = ordinal;\n+  }\n+\n+  @Override\n+  public short ordinal() {\n+    return ordinal;\n+  }\n+\n+  @Override\n+  public int compareTo(final VersionOrdinal other) {\n+    if (other == null) {\n+      return 1;\n+    } else {\n+      return compareTo(other.ordinal());\n+    }\n+  }\n+\n+  /**\n+   * TODO: eliminate this legacy method in favor of requiring callers to construct a\n+   * VersionOrdinalImpl. Inline this logic up in compareTo(VersionOrdinal).\n+   */\n+  public int compareTo(final short other) {\n+    // short min/max can't overflow int, so use (a-b)\n+    final int thisOrdinal = this.ordinal;\n+    final int otherOrdinal = other;\n+    return thisOrdinal - otherOrdinal;\n+  }\n+\n+  @Override\n+  public boolean equals(final Object other) {\n+    if (other == this)\n+      return true;\n+    if (other instanceof VersionOrdinalImpl) {\n+      return this.ordinal == ((VersionOrdinalImpl) other).ordinal;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  public boolean equals(final VersionOrdinal other) {\n+    return other != null && this.ordinal == other.ordinal();\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = 17;\n+    final int mult = 37;\n+    result = mult * result + this.ordinal;\n+    return result;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return toString(ordinal);\n+  }\n+\n+  /**\n+   * TODO: eliminate this legacy method in favor of requiring callers to construct a\n+   * VersionOrdinalImpl. Inline this logic up in toString().\n+   */\n+  public static String toString(short ordinal) {\n+    return \"UNKNOWN[ordinal=\" + ordinal + ']';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3MDU5NA==", "bodyText": "fixed", "url": "https://github.com/apache/geode/pull/5273#discussion_r446470594", "createdAt": "2020-06-27T01:58:11Z", "author": {"login": "Bill"}, "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/VersionOrdinalImpl.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.internal.serialization;\n+\n+public class VersionOrdinalImpl implements VersionOrdinal {\n+\n+  protected final short ordinal;\n+\n+  public VersionOrdinalImpl(final short ordinal) {\n+    this.ordinal = ordinal;\n+  }\n+\n+  @Override\n+  public short ordinal() {\n+    return ordinal;\n+  }\n+\n+  @Override\n+  public int compareTo(final VersionOrdinal other) {\n+    if (other == null) {\n+      return 1;\n+    } else {\n+      return compareTo(other.ordinal());\n+    }\n+  }\n+\n+  /**\n+   * TODO: eliminate this legacy method in favor of requiring callers to construct a\n+   * VersionOrdinalImpl. Inline this logic up in compareTo(VersionOrdinal).\n+   */\n+  public int compareTo(final short other) {\n+    // short min/max can't overflow int, so use (a-b)\n+    final int thisOrdinal = this.ordinal;\n+    final int otherOrdinal = other;\n+    return thisOrdinal - otherOrdinal;\n+  }\n+\n+  @Override\n+  public boolean equals(final Object other) {\n+    if (other == this)\n+      return true;\n+    if (other instanceof VersionOrdinalImpl) {\n+      return this.ordinal == ((VersionOrdinalImpl) other).ordinal;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  public boolean equals(final VersionOrdinal other) {\n+    return other != null && this.ordinal == other.ordinal();\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = 17;\n+    final int mult = 37;\n+    result = mult * result + this.ordinal;\n+    return result;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return toString(ordinal);\n+  }\n+\n+  /**\n+   * TODO: eliminate this legacy method in favor of requiring callers to construct a\n+   * VersionOrdinalImpl. Inline this logic up in toString().\n+   */\n+  public static String toString(short ordinal) {\n+    return \"UNKNOWN[ordinal=\" + ordinal + ']';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0ODMzMA=="}, "originalCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTY4MDc4OnYy", "diffSide": "RIGHT", "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/VersionOrdinalImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjoyNjoxMFrOGpwUnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMjowMTozNFrOGpybMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNjUwOQ==", "bodyText": "we should have a null check on 'other' here", "url": "https://github.com/apache/geode/pull/5273#discussion_r446436509", "createdAt": "2020-06-26T22:26:10Z", "author": {"login": "luissson"}, "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/VersionOrdinalImpl.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.internal.serialization;\n+\n+public class VersionOrdinalImpl implements VersionOrdinal {\n+\n+  protected final short ordinal;\n+\n+  public VersionOrdinalImpl(final short ordinal) {\n+    this.ordinal = ordinal;\n+  }\n+\n+  @Override\n+  public short ordinal() {\n+    return ordinal;\n+  }\n+\n+  @Override\n+  public int compareTo(final VersionOrdinal other) {\n+    if (other == null) {\n+      return 1;\n+    } else {\n+      return compareTo(other.ordinal());\n+    }\n+  }\n+\n+  /**\n+   * TODO: eliminate this legacy method in favor of requiring callers to construct a\n+   * VersionOrdinalImpl. Inline this logic up in compareTo(VersionOrdinal).\n+   */\n+  public int compareTo(final short other) {\n+    // short min/max can't overflow int, so use (a-b)\n+    final int thisOrdinal = this.ordinal;\n+    final int otherOrdinal = other;\n+    return thisOrdinal - otherOrdinal;\n+  }\n+\n+  @Override\n+  public boolean equals(final Object other) {\n+    if (other == this)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3MDk2Mw==", "bodyText": "I think we are ok. If other is null then it cannot be equal to this.\nif other is null the instanceof check will return false", "url": "https://github.com/apache/geode/pull/5273#discussion_r446470963", "createdAt": "2020-06-27T02:01:34Z", "author": {"login": "Bill"}, "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/VersionOrdinalImpl.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.internal.serialization;\n+\n+public class VersionOrdinalImpl implements VersionOrdinal {\n+\n+  protected final short ordinal;\n+\n+  public VersionOrdinalImpl(final short ordinal) {\n+    this.ordinal = ordinal;\n+  }\n+\n+  @Override\n+  public short ordinal() {\n+    return ordinal;\n+  }\n+\n+  @Override\n+  public int compareTo(final VersionOrdinal other) {\n+    if (other == null) {\n+      return 1;\n+    } else {\n+      return compareTo(other.ordinal());\n+    }\n+  }\n+\n+  /**\n+   * TODO: eliminate this legacy method in favor of requiring callers to construct a\n+   * VersionOrdinalImpl. Inline this logic up in compareTo(VersionOrdinal).\n+   */\n+  public int compareTo(final short other) {\n+    // short min/max can't overflow int, so use (a-b)\n+    final int thisOrdinal = this.ordinal;\n+    final int otherOrdinal = other;\n+    return thisOrdinal - otherOrdinal;\n+  }\n+\n+  @Override\n+  public boolean equals(final Object other) {\n+    if (other == this)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNjUwOQ=="}, "originalCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTc0MDc4OnYy", "diffSide": "RIGHT", "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/internal/AbstractSerializationContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMzowNDo0NVrOGpw48w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QwMjowMDoxNVrOGpyayQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0NTgxMQ==", "bodyText": "the return here may be either Version or VersionOrdinal, do we want to upcast or downcast to ensure returning a single type? Doesn't appear to be a problem currently though", "url": "https://github.com/apache/geode/pull/5273#discussion_r446445811", "createdAt": "2020-06-26T23:04:45Z", "author": {"login": "luissson"}, "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/internal/AbstractSerializationContext.java", "diffHunk": "@@ -25,10 +26,10 @@\n  */\n public abstract class AbstractSerializationContext {\n \n-  <IO> Version getVersionForDataStream(final IO in) {\n+  <IO> VersionOrdinal getVersionForDataStream(final IO in) {\n     // check if this is a versioned data input\n     if (in instanceof VersionedDataStream) {\n-      final Version v = ((VersionedDataStream) in).getVersion();\n+      final VersionOrdinal v = ((VersionedDataStream) in).getVersion();\n       return v != null ? v : Version.getCurrentVersion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ3MDg1Nw==", "bodyText": "\"fixed\" this code by reverting it to deal exclusively with Version as before the PR", "url": "https://github.com/apache/geode/pull/5273#discussion_r446470857", "createdAt": "2020-06-27T02:00:15Z", "author": {"login": "Bill"}, "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/internal/AbstractSerializationContext.java", "diffHunk": "@@ -25,10 +26,10 @@\n  */\n public abstract class AbstractSerializationContext {\n \n-  <IO> Version getVersionForDataStream(final IO in) {\n+  <IO> VersionOrdinal getVersionForDataStream(final IO in) {\n     // check if this is a versioned data input\n     if (in instanceof VersionedDataStream) {\n-      final Version v = ((VersionedDataStream) in).getVersion();\n+      final VersionOrdinal v = ((VersionedDataStream) in).getVersion();\n       return v != null ? v : Version.getCurrentVersion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0NTgxMQ=="}, "originalCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTI0MzYwOnYy", "diffSide": "RIGHT", "path": "geode-core/src/upgradeTest/java/org/apache/geode/internal/cache/rollingupgrade/RollingUpgradeDUnitTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTo1MDo1NFrOGqNPKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoxNjo0NVrOGqtPfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxMDI0OQ==", "bodyText": "The shutdown command had also issues. That's why the variable was there initially in the test case.\nCould you add the execution of the shutdown command after the list members in order to verify that with your solution it works?\nOtherwise, the variable must be removed.", "url": "https://github.com/apache/geode/pull/5273#discussion_r446910249", "createdAt": "2020-06-29T11:50:54Z", "author": {"login": "albertogpz"}, "path": "geode-core/src/upgradeTest/java/org/apache/geode/internal/cache/rollingupgrade/RollingUpgradeDUnitTest.java", "diffHunk": "@@ -191,20 +207,26 @@ void doTestRollAll(String regionType, String objectType, String startingVersion)\n       }\n \n       putAndVerify(objectType, server1, regionName, 0, 10, server2);\n-      locator = rollLocatorToCurrent(locator, hostName, locatorPorts[0], getTestMethodName(),\n-          locatorString);\n+      locator =\n+          rollLocatorToCurrent(locator, hostName, locatorPort, locatorProps, getTestMethodName(),\n+              locatorString);\n \n       server1 = rollServerToCurrentAndCreateRegion(server1, regionType, testingDirs[0],\n-          shortcutName, regionName, locatorPorts);\n+          shortcutName, regionName, new int[] {locatorPort});\n       verifyValues(objectType, regionName, 0, 10, server1);\n       putAndVerify(objectType, server1, regionName, 5, 15, server2);\n       putAndVerify(objectType, server2, regionName, 10, 20, server1);\n \n       server2 = rollServerToCurrentAndCreateRegion(server2, regionType, testingDirs[1],\n-          shortcutName, regionName, locatorPorts);\n+          shortcutName, regionName, ports);\n       verifyValues(objectType, regionName, 0, 10, server2);\n       putAndVerify(objectType, server2, regionName, 15, 25, server1);\n \n+      String shutDownCommand = \"shutdown --include-locators=true\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8959930144f7ec8f203365dc8e0cfda8109a03"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE4MTUwMA==", "bodyText": "My latest commit eliminates gfsh entirely so the issue with shutDownCommand is moot.\nI eliminated use of gfsh because I found the test had become flaky on versions 1.3.0-1.8.0, at least on macOS. On Linux (CI) I did not see the flakiness. But rather than figuring that out, I decided to grab the view more directly: by accessing InternalDistributedSystem in the locator JVM.", "url": "https://github.com/apache/geode/pull/5273#discussion_r447181500", "createdAt": "2020-06-29T18:50:21Z", "author": {"login": "Bill"}, "path": "geode-core/src/upgradeTest/java/org/apache/geode/internal/cache/rollingupgrade/RollingUpgradeDUnitTest.java", "diffHunk": "@@ -191,20 +207,26 @@ void doTestRollAll(String regionType, String objectType, String startingVersion)\n       }\n \n       putAndVerify(objectType, server1, regionName, 0, 10, server2);\n-      locator = rollLocatorToCurrent(locator, hostName, locatorPorts[0], getTestMethodName(),\n-          locatorString);\n+      locator =\n+          rollLocatorToCurrent(locator, hostName, locatorPort, locatorProps, getTestMethodName(),\n+              locatorString);\n \n       server1 = rollServerToCurrentAndCreateRegion(server1, regionType, testingDirs[0],\n-          shortcutName, regionName, locatorPorts);\n+          shortcutName, regionName, new int[] {locatorPort});\n       verifyValues(objectType, regionName, 0, 10, server1);\n       putAndVerify(objectType, server1, regionName, 5, 15, server2);\n       putAndVerify(objectType, server2, regionName, 10, 20, server1);\n \n       server2 = rollServerToCurrentAndCreateRegion(server2, regionType, testingDirs[1],\n-          shortcutName, regionName, locatorPorts);\n+          shortcutName, regionName, ports);\n       verifyValues(objectType, regionName, 0, 10, server2);\n       putAndVerify(objectType, server2, regionName, 15, 25, server1);\n \n+      String shutDownCommand = \"shutdown --include-locators=true\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxMDI0OQ=="}, "originalCommit": {"oid": "be8959930144f7ec8f203365dc8e0cfda8109a03"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzNDYyMA==", "bodyText": "Overall, great work. Thanks, Bill.", "url": "https://github.com/apache/geode/pull/5273#discussion_r447434620", "createdAt": "2020-06-30T06:16:45Z", "author": {"login": "albertogpz"}, "path": "geode-core/src/upgradeTest/java/org/apache/geode/internal/cache/rollingupgrade/RollingUpgradeDUnitTest.java", "diffHunk": "@@ -191,20 +207,26 @@ void doTestRollAll(String regionType, String objectType, String startingVersion)\n       }\n \n       putAndVerify(objectType, server1, regionName, 0, 10, server2);\n-      locator = rollLocatorToCurrent(locator, hostName, locatorPorts[0], getTestMethodName(),\n-          locatorString);\n+      locator =\n+          rollLocatorToCurrent(locator, hostName, locatorPort, locatorProps, getTestMethodName(),\n+              locatorString);\n \n       server1 = rollServerToCurrentAndCreateRegion(server1, regionType, testingDirs[0],\n-          shortcutName, regionName, locatorPorts);\n+          shortcutName, regionName, new int[] {locatorPort});\n       verifyValues(objectType, regionName, 0, 10, server1);\n       putAndVerify(objectType, server1, regionName, 5, 15, server2);\n       putAndVerify(objectType, server2, regionName, 10, 20, server1);\n \n       server2 = rollServerToCurrentAndCreateRegion(server2, regionType, testingDirs[1],\n-          shortcutName, regionName, locatorPorts);\n+          shortcutName, regionName, ports);\n       verifyValues(objectType, regionName, 0, 10, server2);\n       putAndVerify(objectType, server2, regionName, 15, 25, server1);\n \n+      String shutDownCommand = \"shutdown --include-locators=true\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxMDI0OQ=="}, "originalCommit": {"oid": "be8959930144f7ec8f203365dc8e0cfda8109a03"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NzYyMTYwOnYy", "diffSide": "RIGHT", "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/VersionOrdinal.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjowODowMFrOGqj7-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMzo1MToyOFrOGqmd_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MjE3MA==", "bodyText": "VersionOrdinal's methods should take VersionOrdinal arguments.", "url": "https://github.com/apache/geode/pull/5273#discussion_r447282170", "createdAt": "2020-06-29T22:08:00Z", "author": {"login": "bschuchardt"}, "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/VersionOrdinal.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.internal.serialization;\n+\n+/**\n+ * VersionOrdinal is able to represent not only currently-known\n+ * Geode versions but future versions as well. This is necessary\n+ * because during rolling upgrades Geode manipulates member\n+ * identifiers for members running newer versions of the software.\n+ * In that case we receive the ordinal over the network\n+ * (serialization) but we don't know other version details such as\n+ * major/minor/patch version, which are known to the Version class.\n+ *\n+ * Implementations must define equals() and hashCode() based on\n+ * ordinal() result. And since this interface extends Comparable,\n+ * implementations must define compareTo() as well.\n+ *\n+ * Unlike Version (a subtype of VersionOrdinal which acts like an\n+ * enumerated type), VersionOrdinal does not, in general, guarantee\n+ * that if vo1.equals(vo2) then vo1 == vo2.\n+ *\n+ * Use the Versioning factory class to construct objects implementing\n+ * this interface. All instances of known versions are defined as\n+ * constants in the Version class, e.g. Version.GEODE_1_11_0\n+ */\n+public interface VersionOrdinal extends Comparable<VersionOrdinal> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f582bba890a40ba700dd5f8dcd7273d10b5a5428"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzMyMzY0NA==", "bodyText": "Corrected this and went one better: added a new unit test for VersionOrdinalImpl.", "url": "https://github.com/apache/geode/pull/5273#discussion_r447323644", "createdAt": "2020-06-29T23:51:28Z", "author": {"login": "Bill"}, "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/VersionOrdinal.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.internal.serialization;\n+\n+/**\n+ * VersionOrdinal is able to represent not only currently-known\n+ * Geode versions but future versions as well. This is necessary\n+ * because during rolling upgrades Geode manipulates member\n+ * identifiers for members running newer versions of the software.\n+ * In that case we receive the ordinal over the network\n+ * (serialization) but we don't know other version details such as\n+ * major/minor/patch version, which are known to the Version class.\n+ *\n+ * Implementations must define equals() and hashCode() based on\n+ * ordinal() result. And since this interface extends Comparable,\n+ * implementations must define compareTo() as well.\n+ *\n+ * Unlike Version (a subtype of VersionOrdinal which acts like an\n+ * enumerated type), VersionOrdinal does not, in general, guarantee\n+ * that if vo1.equals(vo2) then vo1 == vo2.\n+ *\n+ * Use the Versioning factory class to construct objects implementing\n+ * this interface. All instances of known versions are defined as\n+ * constants in the Version class, e.g. Version.GEODE_1_11_0\n+ */\n+public interface VersionOrdinal extends Comparable<VersionOrdinal> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MjE3MA=="}, "originalCommit": {"oid": "f582bba890a40ba700dd5f8dcd7273d10b5a5428"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4021, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}