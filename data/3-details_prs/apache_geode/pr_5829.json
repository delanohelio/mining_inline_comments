{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1MTkyMDU4", "number": 5829, "title": "GEODE-8765: Fix NullPointerException when group-transaction-events an\u2026", "bodyText": "\u2026d events in and not in transactions are sent.\nA NullPointerException (caught later in the code) can\nhappen when events without a transactionId in\ngateway sender queues are retrieved to complete\ntransactions.\nThe problem is that equals is invoked on a\npossibly null object (the transactionId).\nThe call has been rewritten to avoid the\nNullPointer exception.\nThe NullPointerException had different undesired effects\nin the Parallel and in the Serial Gateway senders.\nIn Parallel Gateway Senders it can provoke that events\nare left in the queue without ever being drained\nalthough all events are replicated.\nIn Serial Gateway Senders, the effect is much\nmore severe as once the NullPointerException is\nreached, no events from the queue are replicated.\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-12-09T13:47:17Z", "url": "https://github.com/apache/geode/pull/5829", "merged": true, "mergeCommit": {"oid": "4c00984eb3c32972b4b03fdbe2b6397decdc177f"}, "closed": true, "closedAt": "2020-12-14T09:56:31Z", "author": {"login": "albertogpz"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkgX0KgH2gAyNTM1MTkyMDU4OjQ1YTNkNzg5YTg2ZmM5NTI2NDQ2YmZmOWQ5Zjc2MGYyNThjOTAxODc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmCti_gFqTU1MTIwNzA3NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "45a3d789a86fc9526446bff9d9f760f258c90187", "author": {"user": {"login": "albertogpz", "name": "Alberto Gomez"}}, "url": "https://github.com/apache/geode/commit/45a3d789a86fc9526446bff9d9f760f258c90187", "committedDate": "2020-12-09T15:21:29Z", "message": "GEODE-8765: Fix NullPointerException when group-transaction-events and events in and not in transactions are sent.\n\nA NullPointerException (caught later in the code) was\ngenerated when events without a transactionId in\ngateway sender queues were retrieved to complete\ntransactions.\nThe problem was that equals was invoked on a\npossibly null object (the transactionId).\nThe call has been rewritten to avoid the\nNullPointer exception.\n\nThe NullPointerException had different undesired effects\nin the Parallel and in the Serial Gateway senders.\n\nIn Parallel Gateway Senders it can provoke that events\nare left in the queue without ever being drained\nalthough all events are replicated.\nIn Serial Gateway Senders, the effect is much\nmore severe as once the NullPointerException is\nreached, no events from the queue are replicated."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "30c77969608fa58568193d97731291b8cd3c84bc", "author": {"user": {"login": "albertogpz", "name": "Alberto Gomez"}}, "url": "https://github.com/apache/geode/commit/30c77969608fa58568193d97731291b8cd3c84bc", "committedDate": "2020-12-09T13:34:56Z", "message": "GEODE-8765: Fix NullPointerException when group-transaction-events and events in and not in transactions are sent.\n\nA NullPointerException (caught later in the code) was\ngenerated when events without a transactionId in\ngateway sender queues were retrieved to complete\ntransactions.\nThe problem was that equals was invoked on a\npossibly null object (the transactionId).\nThe call has been rewritten to avoid the\nNullPointer exception.\n\nThe NullPointerException had different undesired effects\nin the Parallel and in the Serial Gateway senders.\n\nIn Parallel Gateway Senders it can provoke that events\nare left in the queue without ever being drained\nalthough all events are replicated.\nIn Serial Gateway Senders, the effect is much\nmore severe as once the NullPointerException is\nreached, no events from the queue are replicated."}, "afterCommit": {"oid": "45a3d789a86fc9526446bff9d9f760f258c90187", "author": {"user": {"login": "albertogpz", "name": "Alberto Gomez"}}, "url": "https://github.com/apache/geode/commit/45a3d789a86fc9526446bff9d9f760f258c90187", "committedDate": "2020-12-09T15:21:29Z", "message": "GEODE-8765: Fix NullPointerException when group-transaction-events and events in and not in transactions are sent.\n\nA NullPointerException (caught later in the code) was\ngenerated when events without a transactionId in\ngateway sender queues were retrieved to complete\ntransactions.\nThe problem was that equals was invoked on a\npossibly null object (the transactionId).\nThe call has been rewritten to avoid the\nNullPointer exception.\n\nThe NullPointerException had different undesired effects\nin the Parallel and in the Serial Gateway senders.\n\nIn Parallel Gateway Senders it can provoke that events\nare left in the queue without ever being drained\nalthough all events are replicated.\nIn Serial Gateway Senders, the effect is much\nmore severe as once the NullPointerException is\nreached, no events from the queue are replicated."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NDQ1MTA1", "url": "https://github.com/apache/geode/pull/5829#pullrequestreview-549445105", "createdAt": "2020-12-10T17:37:26Z", "commit": {"oid": "45a3d789a86fc9526446bff9d9f760f258c90187"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxNzozNzoyNlrOIDVQvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxOToxOTozMVrOIDZYlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM2NDk4OA==", "bodyText": "The compiler warning here can be fixed if List<GatewaySenderEventImpl> is used as the method argument. This also means that the for loop below can be replaced with\nfor (GatewaySenderEventImpl event : batch) {\n\nand the cast to GatewaySenderEventImpl can be removed.", "url": "https://github.com/apache/geode/pull/5829#discussion_r540364988", "createdAt": "2020-12-10T17:37:26Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderQueue.java", "diffHunk": "@@ -1389,6 +1383,21 @@ private void peekEventsFromIncompleteTransactions(List<GatewaySenderEventImpl> b\n     }\n   }\n \n+  private Map<TransactionId, Integer> getIncompleteTransactionsInBatch(List batch) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a3d789a86fc9526446bff9d9f760f258c90187"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM4OTU5Ng==", "bodyText": "While not part of the changes in this PR, this method could be inlined, since it's used in only one place and is only one line.", "url": "https://github.com/apache/geode/pull/5829#discussion_r540389596", "createdAt": "2020-12-10T18:11:56Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderQueue.java", "diffHunk": "@@ -1389,6 +1383,21 @@ private void peekEventsFromIncompleteTransactions(List<GatewaySenderEventImpl> b\n     }\n   }\n \n+  private Map<TransactionId, Integer> getIncompleteTransactionsInBatch(List batch) {\n+    Map<TransactionId, Integer> incompleteTransactionsInBatch = new HashMap<>();\n+    for (Object object : batch) {\n+      GatewaySenderEventImpl event = (GatewaySenderEventImpl) object;\n+      if (event.getTransactionId() != null) {\n+        if (event.isLastEventInTransaction()) {\n+          incompleteTransactionsInBatch.remove(event.getTransactionId());\n+        } else {\n+          incompleteTransactionsInBatch.put(event.getTransactionId(), event.getBucketId());\n+        }\n+      }\n+    }\n+    return incompleteTransactionsInBatch;\n+  }\n+\n   private boolean areAllTransactionsCompleteInBatch(Map incompleteTransactions) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a3d789a86fc9526446bff9d9f760f258c90187"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5OTA2Ng==", "bodyText": "As with the similar method in ParallelGatewaySenderQueue, this method could also be inlined.", "url": "https://github.com/apache/geode/pull/5829#discussion_r540399066", "createdAt": "2020-12-10T18:26:36Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/serial/SerialGatewaySenderQueue.java", "diffHunk": "@@ -534,6 +523,23 @@ private boolean areAllTransactionsCompleteInBatch(Set incompleteTransactions) {\n     return (incompleteTransactions.size() == 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a3d789a86fc9526446bff9d9f760f258c90187"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQwMTUyMQ==", "bodyText": "The compiler warning on this line and several others can be resolved by making batch a List<AsyncEvent<?,?>> here and the other places it's used. The lines requiring this change are 416, 421, 431-432, 438, 479 and 526.", "url": "https://github.com/apache/geode/pull/5829#discussion_r540401521", "createdAt": "2020-12-10T18:30:14Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/serial/SerialGatewaySenderQueue.java", "diffHunk": "@@ -487,12 +476,12 @@ public Object peek() throws CacheException {\n     // so no need to worry about off-heap refCount.\n   }\n \n-  private void peekEventsFromIncompleteTransactions(List<AsyncEvent> batch,\n-      Set<TransactionId> incompleteTransactionIdsInBatch, long lastKey) {\n+  private void peekEventsFromIncompleteTransactions(List<AsyncEvent> batch, long lastKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a3d789a86fc9526446bff9d9f760f258c90187"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQxMjAwOA==", "bodyText": "To make the numbering a little more consistent, could this event's key be 2, and the subsequent events have their key values increased by 1? That way the calls to bucketRegionQueue.addToQueue() will have matching keys with the keys here.", "url": "https://github.com/apache/geode/pull/5829#discussion_r540412008", "createdAt": "2020-12-10T18:46:45Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/BucketRegionQueueJUnitTest.java", "diffHunk": "@@ -148,6 +149,7 @@ public void testGetElementsMatchingWithHasTransactionIdPredicateAndIsLastEventIn\n     TransactionId tx3 = new TXId(null, 3);\n \n     GatewaySenderEventImpl event1 = createMockGatewaySenderEvent(1, tx1, false);\n+    GatewaySenderEventImpl eventNotInTransaction1 = createMockGatewaySenderEvent(8, null, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a3d789a86fc9526446bff9d9f760f258c90187"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQxMjM4OQ==", "bodyText": "These calls to Long.valueOf() can be replaced with just 1L, 2L etc.", "url": "https://github.com/apache/geode/pull/5829#discussion_r540412389", "createdAt": "2020-12-10T18:47:19Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/BucketRegionQueueJUnitTest.java", "diffHunk": "@@ -159,17 +161,18 @@ public void testGetElementsMatchingWithHasTransactionIdPredicateAndIsLastEventIn\n         .cleanUpDestroyedTokensAndMarkGIIComplete(InitialImageOperation.GIIStatus.NO_GII);\n \n     this.bucketRegionQueue.addToQueue(Long.valueOf(1), event1);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(2), event2);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(3), event3);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(4), event4);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(5), event5);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(6), event6);\n-    this.bucketRegionQueue.addToQueue(Long.valueOf(7), event7);\n+    this.bucketRegionQueue.addToQueue(Long.valueOf(2), eventNotInTransaction1);\n+    this.bucketRegionQueue.addToQueue(Long.valueOf(3), event2);\n+    this.bucketRegionQueue.addToQueue(Long.valueOf(4), event3);\n+    this.bucketRegionQueue.addToQueue(Long.valueOf(5), event4);\n+    this.bucketRegionQueue.addToQueue(Long.valueOf(6), event5);\n+    this.bucketRegionQueue.addToQueue(Long.valueOf(7), event6);\n+    this.bucketRegionQueue.addToQueue(Long.valueOf(8), event7);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a3d789a86fc9526446bff9d9f760f258c90187"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQxOTE5NQ==", "bodyText": "Is it necessary to create a new overloaded method here? There is already a method setNumDispatcherThreadsForTheRun() in WANTestBase that allows this value to be set to whatever is desired.", "url": "https://github.com/apache/geode/pull/5829#discussion_r540419195", "createdAt": "2020-12-10T18:57:59Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java", "diffHunk": "@@ -1737,26 +1737,37 @@ public static GatewaySenderFactory configureGateway(DiskStoreFactory dsf, File[]\n     return gateway;\n   }\n \n+  public static void createSender(String dsName, int remoteDsId, boolean isParallel,\n+      Integer maxMemory, Integer batchSize, boolean isConflation, boolean isPersistent,\n+      GatewayEventFilter filter, boolean isManualStart, boolean groupTransactionEvents) {\n+    createSender(dsName, remoteDsId, isParallel, maxMemory, batchSize, isConflation, isPersistent,\n+        filter, isManualStart, groupTransactionEvents, 0);\n+  }\n+\n   public static void createSender(String dsName, int remoteDsId, boolean isParallel,\n       Integer maxMemory, Integer batchSize, boolean isConflation, boolean isPersistent,\n       GatewayEventFilter filter, boolean isManualStart) {\n     createSender(dsName, remoteDsId, isParallel, maxMemory, batchSize, isConflation, isPersistent,\n-        filter, isManualStart, false);\n+        filter, isManualStart, false, 0);\n   }\n \n   public static void createSender(String dsName, int remoteDsId, boolean isParallel,\n       Integer maxMemory, Integer batchSize, boolean isConflation, boolean isPersistent,\n-      GatewayEventFilter filter, boolean isManualStart, boolean groupTransactionEvents) {\n+      GatewayEventFilter filter, boolean isManualStart, boolean groupTransactionEvents,\n+      int dispatcherThreads) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a3d789a86fc9526446bff9d9f760f258c90187"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQyMzIxNQ==", "bodyText": "Compiler warnings on this line can be fixed by using\nfinal Map<Object, Object> keyValuesInTransactions = new HashMap<>();", "url": "https://github.com/apache/geode/pull/5829#discussion_r540423215", "createdAt": "2020-12-10T19:04:33Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java", "diffHunk": "@@ -1235,6 +1242,107 @@ public void testParallelPropagationTxNotificationsNotSentToAllRegionMembersWhenA\n     vm5.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n   }\n \n+  @Test\n+  public void testPartitionedParallelPropagationWithGroupTransactionEventsAndMixOfEventsInAndNotInTransactions()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(1));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(2, lnPort));\n+\n+    createCacheInVMs(nyPort, vm2, vm3);\n+    createReceiverInVMs(vm2, vm3);\n+    createCacheInVMs(lnPort, vm4, vm5, vm6, vm7);\n+\n+    vm4.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm5.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm6.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm7.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+\n+    vm4.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm5.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm6.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm7.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+\n+    startSenderInVMs(\"ln\", vm4, vm5, vm6, vm7);\n+\n+    vm2.invoke(() -> createCustomerOrderShipmentPartitionedRegion(null, 1, 8, isOffHeap()));\n+    vm3.invoke(() -> createCustomerOrderShipmentPartitionedRegion(null, 1, 8, isOffHeap()));\n+\n+    int customers = 4;\n+\n+    int transactionsPerCustomer = 1000;\n+    final Map keyValuesInTransactions = new HashMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a3d789a86fc9526446bff9d9f760f258c90187"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQyNTI0MA==", "bodyText": "Compiler warnings on this line can be fixed by using\nfinal Map<Object, Object> keyValuesNotInTransactions = new HashMap<>();", "url": "https://github.com/apache/geode/pull/5829#discussion_r540425240", "createdAt": "2020-12-10T19:07:28Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java", "diffHunk": "@@ -1235,6 +1242,107 @@ public void testParallelPropagationTxNotificationsNotSentToAllRegionMembersWhenA\n     vm5.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n   }\n \n+  @Test\n+  public void testPartitionedParallelPropagationWithGroupTransactionEventsAndMixOfEventsInAndNotInTransactions()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(1));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(2, lnPort));\n+\n+    createCacheInVMs(nyPort, vm2, vm3);\n+    createReceiverInVMs(vm2, vm3);\n+    createCacheInVMs(lnPort, vm4, vm5, vm6, vm7);\n+\n+    vm4.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm5.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm6.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm7.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+\n+    vm4.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm5.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm6.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm7.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+\n+    startSenderInVMs(\"ln\", vm4, vm5, vm6, vm7);\n+\n+    vm2.invoke(() -> createCustomerOrderShipmentPartitionedRegion(null, 1, 8, isOffHeap()));\n+    vm3.invoke(() -> createCustomerOrderShipmentPartitionedRegion(null, 1, 8, isOffHeap()));\n+\n+    int customers = 4;\n+\n+    int transactionsPerCustomer = 1000;\n+    final Map keyValuesInTransactions = new HashMap();\n+    for (int custId = 0; custId < customers; custId++) {\n+      for (int i = 0; i < transactionsPerCustomer; i++) {\n+        CustId custIdObject = new CustId(custId);\n+        OrderId orderId = new OrderId(i, custIdObject);\n+        ShipmentId shipmentId1 = new ShipmentId(i, orderId);\n+        ShipmentId shipmentId2 = new ShipmentId(i + 1, orderId);\n+        ShipmentId shipmentId3 = new ShipmentId(i + 2, orderId);\n+        keyValuesInTransactions.put(orderId, new Order());\n+        keyValuesInTransactions.put(shipmentId1, new Shipment());\n+        keyValuesInTransactions.put(shipmentId2, new Shipment());\n+        keyValuesInTransactions.put(shipmentId3, new Shipment());\n+      }\n+    }\n+\n+    int ordersPerCustomerNotInTransactions = 1000;\n+\n+    final Map keyValuesNotInTransactions = new HashMap();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a3d789a86fc9526446bff9d9f760f258c90187"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQyNjA0MA==", "bodyText": "The compiler warning here can be removed by using AsyncInvocation<Void>.", "url": "https://github.com/apache/geode/pull/5829#discussion_r540426040", "createdAt": "2020-12-10T19:08:58Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java", "diffHunk": "@@ -1235,6 +1242,107 @@ public void testParallelPropagationTxNotificationsNotSentToAllRegionMembersWhenA\n     vm5.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n   }\n \n+  @Test\n+  public void testPartitionedParallelPropagationWithGroupTransactionEventsAndMixOfEventsInAndNotInTransactions()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(1));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(2, lnPort));\n+\n+    createCacheInVMs(nyPort, vm2, vm3);\n+    createReceiverInVMs(vm2, vm3);\n+    createCacheInVMs(lnPort, vm4, vm5, vm6, vm7);\n+\n+    vm4.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm5.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm6.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm7.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+\n+    vm4.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm5.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm6.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm7.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+\n+    startSenderInVMs(\"ln\", vm4, vm5, vm6, vm7);\n+\n+    vm2.invoke(() -> createCustomerOrderShipmentPartitionedRegion(null, 1, 8, isOffHeap()));\n+    vm3.invoke(() -> createCustomerOrderShipmentPartitionedRegion(null, 1, 8, isOffHeap()));\n+\n+    int customers = 4;\n+\n+    int transactionsPerCustomer = 1000;\n+    final Map keyValuesInTransactions = new HashMap();\n+    for (int custId = 0; custId < customers; custId++) {\n+      for (int i = 0; i < transactionsPerCustomer; i++) {\n+        CustId custIdObject = new CustId(custId);\n+        OrderId orderId = new OrderId(i, custIdObject);\n+        ShipmentId shipmentId1 = new ShipmentId(i, orderId);\n+        ShipmentId shipmentId2 = new ShipmentId(i + 1, orderId);\n+        ShipmentId shipmentId3 = new ShipmentId(i + 2, orderId);\n+        keyValuesInTransactions.put(orderId, new Order());\n+        keyValuesInTransactions.put(shipmentId1, new Shipment());\n+        keyValuesInTransactions.put(shipmentId2, new Shipment());\n+        keyValuesInTransactions.put(shipmentId3, new Shipment());\n+      }\n+    }\n+\n+    int ordersPerCustomerNotInTransactions = 1000;\n+\n+    final Map keyValuesNotInTransactions = new HashMap();\n+    for (int custId = 0; custId < customers; custId++) {\n+      for (int i = 0; i < ordersPerCustomerNotInTransactions; i++) {\n+        CustId custIdObject = new CustId(custId);\n+        OrderId orderId = new OrderId(i + transactionsPerCustomer * customers, custIdObject);\n+        keyValuesNotInTransactions.put(orderId, new Order());\n+      }\n+    }\n+\n+    // eventsPerTransaction is 1 (orders) + 3 (shipments)\n+    int eventsPerTransaction = 4;\n+    AsyncInvocation inv1 =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a3d789a86fc9526446bff9d9f760f258c90187"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQyNjA2Ng==", "bodyText": "The compiler warning here can be removed by using AsyncInvocation<Void>.", "url": "https://github.com/apache/geode/pull/5829#discussion_r540426066", "createdAt": "2020-12-10T19:09:02Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java", "diffHunk": "@@ -1235,6 +1242,107 @@ public void testParallelPropagationTxNotificationsNotSentToAllRegionMembersWhenA\n     vm5.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n   }\n \n+  @Test\n+  public void testPartitionedParallelPropagationWithGroupTransactionEventsAndMixOfEventsInAndNotInTransactions()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(1));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(2, lnPort));\n+\n+    createCacheInVMs(nyPort, vm2, vm3);\n+    createReceiverInVMs(vm2, vm3);\n+    createCacheInVMs(lnPort, vm4, vm5, vm6, vm7);\n+\n+    vm4.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm5.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm6.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+    vm7.invoke(\n+        () -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true, true, 2));\n+\n+    vm4.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm5.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm6.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+    vm7.invoke(\n+        () -> WANTestBase.createCustomerOrderShipmentPartitionedRegion(\"ln\", 2, 10,\n+            isOffHeap()));\n+\n+    startSenderInVMs(\"ln\", vm4, vm5, vm6, vm7);\n+\n+    vm2.invoke(() -> createCustomerOrderShipmentPartitionedRegion(null, 1, 8, isOffHeap()));\n+    vm3.invoke(() -> createCustomerOrderShipmentPartitionedRegion(null, 1, 8, isOffHeap()));\n+\n+    int customers = 4;\n+\n+    int transactionsPerCustomer = 1000;\n+    final Map keyValuesInTransactions = new HashMap();\n+    for (int custId = 0; custId < customers; custId++) {\n+      for (int i = 0; i < transactionsPerCustomer; i++) {\n+        CustId custIdObject = new CustId(custId);\n+        OrderId orderId = new OrderId(i, custIdObject);\n+        ShipmentId shipmentId1 = new ShipmentId(i, orderId);\n+        ShipmentId shipmentId2 = new ShipmentId(i + 1, orderId);\n+        ShipmentId shipmentId3 = new ShipmentId(i + 2, orderId);\n+        keyValuesInTransactions.put(orderId, new Order());\n+        keyValuesInTransactions.put(shipmentId1, new Shipment());\n+        keyValuesInTransactions.put(shipmentId2, new Shipment());\n+        keyValuesInTransactions.put(shipmentId3, new Shipment());\n+      }\n+    }\n+\n+    int ordersPerCustomerNotInTransactions = 1000;\n+\n+    final Map keyValuesNotInTransactions = new HashMap();\n+    for (int custId = 0; custId < customers; custId++) {\n+      for (int i = 0; i < ordersPerCustomerNotInTransactions; i++) {\n+        CustId custIdObject = new CustId(custId);\n+        OrderId orderId = new OrderId(i + transactionsPerCustomer * customers, custIdObject);\n+        keyValuesNotInTransactions.put(orderId, new Order());\n+      }\n+    }\n+\n+    // eventsPerTransaction is 1 (orders) + 3 (shipments)\n+    int eventsPerTransaction = 4;\n+    AsyncInvocation inv1 =\n+        vm7.invokeAsync(\n+            () -> WANTestBase.doOrderAndShipmentPutsInsideTransactions(keyValuesInTransactions,\n+                eventsPerTransaction));\n+\n+    AsyncInvocation inv2 =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a3d789a86fc9526446bff9d9f760f258c90187"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQyNjkxMA==", "bodyText": "All comments that apply to ParallelWANPropagationDUnitTest also apply to this test method, since the code in both tests is largely identical.", "url": "https://github.com/apache/geode/pull/5829#discussion_r540426910", "createdAt": "2020-12-10T19:10:25Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANPropagation_PartitionedRegionDUnitTest.java", "diffHunk": "@@ -371,4 +379,107 @@ public void testPartitionedSerialPropagationWithParallelThreads() throws Excepti\n     vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 1000));\n     vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 1000));\n   }\n+\n+  @Test\n+  public void testPartitionedSerialPropagationWithGroupTransactionEventsAndMixOfEventsInAndNotInTransactions()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a3d789a86fc9526446bff9d9f760f258c90187"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQzMjUzNA==", "bodyText": "This variable is never used, so these lines could be just\nParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);", "url": "https://github.com/apache/geode/pull/5829#discussion_r540432534", "createdAt": "2020-12-10T19:19:31Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/BucketRegionQueueJUnitTest.java", "diffHunk": "@@ -138,7 +139,7 @@ public void testBasicDestroyConflationEnabledAndValueNotInRegion() {\n   }\n \n   @Test\n-  public void testGetElementsMatchingWithHasTransactionIdPredicateAndIsLastEventInTransactionPredicate()\n+  public void testGetElementsMatchingWithParallelGatewaySenderQueuePredicatesAndSomeEventsNotInTransactions()\n       throws ForceReattemptException {\n     ParallelGatewaySenderEventProcessor processor =\n         ParallelGatewaySenderHelper.createParallelGatewaySenderEventProcessor(this.sender);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45a3d789a86fc9526446bff9d9f760f258c90187"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "246d30dc1a6c21cc343e464c923dd28564227bcf", "author": {"user": {"login": "albertogpz", "name": "Alberto Gomez"}}, "url": "https://github.com/apache/geode/commit/246d30dc1a6c21cc343e464c923dd28564227bcf", "committedDate": "2020-12-11T11:16:43Z", "message": "GEODE-8765: Code clean up after review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUwMzEzOTE1", "url": "https://github.com/apache/geode/pull/5829#pullrequestreview-550313915", "createdAt": "2020-12-11T17:15:33Z", "commit": {"oid": "246d30dc1a6c21cc343e464c923dd28564227bcf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxMjA3MDc1", "url": "https://github.com/apache/geode/pull/5829#pullrequestreview-551207075", "createdAt": "2020-12-14T09:55:55Z", "commit": {"oid": "246d30dc1a6c21cc343e464c923dd28564227bcf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3937, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}