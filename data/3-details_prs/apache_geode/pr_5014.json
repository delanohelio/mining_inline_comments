{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwMzQ3MjQ1", "number": 5014, "title": "GEODE-8035: Parallel Disk Store Recovery when Cluster Restarts", "bodyText": "Thank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-04-28T20:35:01Z", "url": "https://github.com/apache/geode/pull/5014", "merged": true, "mergeCommit": {"oid": "0d602cc9d0b89cf875b883f53af912c2ddc4d26a"}, "closed": true, "closedAt": "2020-05-15T19:53:58Z", "author": {"login": "jchen21"}, "timelineItems": {"totalCount": 46, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZ3fzHAH2gAyNDEwMzQ3MjQ1OmJmMzI3NjgwNWQwNGM3MjY5OTUxNzI4ODQ4ZjRkMGE0NmI5ZDI2N2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABchU6_VgFqTQxMjIxOTcwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bf3276805d04c7269951728848f4d0a46b9d267a", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/bf3276805d04c7269951728848f4d0a46b9d267a", "committedDate": "2020-04-21T17:53:42Z", "message": "Add parallel stream for disk store recovery\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87fd8d9818986168ed9d3dfc1a15df4e16cf1a0c", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/87fd8d9818986168ed9d3dfc1a15df4e16cf1a0c", "committedDate": "2020-04-21T21:08:49Z", "message": "More parallel stream\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07490d14c79298edcbdc7dd37198d6b67183ee70", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/07490d14c79298edcbdc7dd37198d6b67183ee70", "committedDate": "2020-04-21T21:24:05Z", "message": "spotlessApply\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce2159090f1487d81086772d0bceb32c69078455", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/ce2159090f1487d81086772d0bceb32c69078455", "committedDate": "2020-04-21T22:44:29Z", "message": "Temporarily remove the synchronized block\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d6240e59378ec3ae479d8f38875c5f007a27db13", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/d6240e59378ec3ae479d8f38875c5f007a27db13", "committedDate": "2020-04-21T22:50:21Z", "message": "spotlessApply\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8737b1ddde8bd59040d362fd4f35793bfe6bcdda", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/8737b1ddde8bd59040d362fd4f35793bfe6bcdda", "committedDate": "2020-04-24T19:41:35Z", "message": "Replace synchronized block with CountDownLatch\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9af1c9195b2c04fc4679ed72123b2d2a2b9686fc", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/9af1c9195b2c04fc4679ed72123b2d2a2b9686fc", "committedDate": "2020-04-24T19:45:37Z", "message": "Revert some code\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9c7ecfc37fe1e4befef516371fa97a231519a0f", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/b9c7ecfc37fe1e4befef516371fa97a231519a0f", "committedDate": "2020-04-28T16:27:52Z", "message": "Code clean up\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMjIwOTg0", "url": "https://github.com/apache/geode/pull/5014#pullrequestreview-402220984", "createdAt": "2020-04-28T21:21:10Z", "commit": {"oid": "b9c7ecfc37fe1e4befef516371fa97a231519a0f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMToyMToxMFrOGNnalw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQyMTozMzoxN1rOGNn0ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzMDQ1NQ==", "bodyText": "Would it be possible to put a bound on the number of threads used here? In cases with large numbers of disk stores this might cause resource issues if unbounded, but maybe we never have so many disk stores that it will matter.", "url": "https://github.com/apache/geode/pull/5014#discussion_r416930455", "createdAt": "2020-04-28T21:21:10Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/xmlcache/CacheCreation.java", "diffHunk": "@@ -521,12 +521,12 @@ void create(InternalCache cache)\n \n     cache.initializePdxRegistry();\n \n-    for (DiskStore diskStore : diskStores.values()) {\n+    diskStores.values().parallelStream().forEach(diskStore -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c7ecfc37fe1e4befef516371fa97a231519a0f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzMTEyNQ==", "bodyText": "This comment is no longer entirely accurate.", "url": "https://github.com/apache/geode/pull/5014#discussion_r416931125", "createdAt": "2020-04-28T21:22:21Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/DiskStoreFactoryImpl.java", "diffHunk": "@@ -144,7 +144,10 @@ public DiskStore create(String name) {\n     // As a simple fix for 41290, only allow one DiskStore to be created\n     // at a time per cache by syncing on the cache.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c7ecfc37fe1e4befef516371fa97a231519a0f"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzNzA2MA==", "bodyText": "I think there is a small possibility of a race condition causing an NPE here if the latch associated with diskStoreName is removed after the first get() call. Would it be possible to change this method to use only one get() call?", "url": "https://github.com/apache/geode/pull/5014#discussion_r416937060", "createdAt": "2020-04-28T21:33:17Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/GemFireCacheImpl.java", "diffHunk": "@@ -1086,6 +1088,32 @@ public static GemFireCacheImpl getForPdx(String reason) {\n     clientMetadataService = clientMetadataServiceFactory.apply(this);\n   }\n \n+  public void lockDiskStore(String diskStoreName) {\n+    CountDownLatch countDownLatch = diskStoreLatches.get(diskStoreName);\n+    if (countDownLatch == null) {\n+      countDownLatch = diskStoreLatches.putIfAbsent(diskStoreName, new CountDownLatch(1));\n+      if (countDownLatch != null) {\n+        try {\n+          countDownLatch.await();\n+        } catch (InterruptedException e) {\n+          throw new InternalGemFireError(e);\n+        }\n+      }\n+    } else {\n+      try {\n+        countDownLatch.await();\n+      } catch (InterruptedException e) {\n+        throw new InternalGemFireError(e);\n+      }\n+    }\n+  }\n+\n+  public void unlockDiskStore(String diskStoreName) {\n+    if (diskStoreLatches.get(diskStoreName) != null) {\n+      diskStoreLatches.get(diskStoreName).countDown();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c7ecfc37fe1e4befef516371fa97a231519a0f"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyMjUxNzY5", "url": "https://github.com/apache/geode/pull/5014#pullrequestreview-402251769", "createdAt": "2020-04-28T22:16:41Z", "commit": {"oid": "b9c7ecfc37fe1e4befef516371fa97a231519a0f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAyNDYzMTAw", "url": "https://github.com/apache/geode/pull/5014#pullrequestreview-402463100", "createdAt": "2020-04-29T08:33:39Z", "commit": {"oid": "b9c7ecfc37fe1e4befef516371fa97a231519a0f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODozMzo0MFrOGN06cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQwODo0Njo0MlrOGN1X_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1MTYwMg==", "bodyText": "Can you the methods lockDiskStore and unlockDiskStore to the InternalCache interface instead?. It's cleaner as we won't need to cast to GemFireCacheImpl, besides that, we could use these methods in the future from other parts of the code.", "url": "https://github.com/apache/geode/pull/5014#discussion_r417151602", "createdAt": "2020-04-29T08:33:40Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/DiskStoreFactoryImpl.java", "diffHunk": "@@ -165,6 +168,10 @@ public DiskStore create(String name) {\n           creation.addDiskStore(result);\n         }\n       }\n+    } finally {\n+      if (this.cache instanceof GemFireCacheImpl) {\n+        ((GemFireCacheImpl) this.cache).unlockDiskStore(name);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c7ecfc37fe1e4befef516371fa97a231519a0f"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1NTU1NA==", "bodyText": "The above can be simplified with something like:\npublic void lockDiskStore(String diskStoreName) {\n\tCountDownLatch latch = JavaWorkarounds.computeIfAbsent(diskStoreLatches, diskStoreName, k -> new CountDownLatch(1));\n\n\ttry {\n\t\tcountDownLatch.await();\n\t} catch (InterruptedException e) {\n\t\tthrow new InternalGemFireError(e);\n\t}\n}", "url": "https://github.com/apache/geode/pull/5014#discussion_r417155554", "createdAt": "2020-04-29T08:40:44Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/GemFireCacheImpl.java", "diffHunk": "@@ -1086,6 +1088,32 @@ public static GemFireCacheImpl getForPdx(String reason) {\n     clientMetadataService = clientMetadataServiceFactory.apply(this);\n   }\n \n+  public void lockDiskStore(String diskStoreName) {\n+    CountDownLatch countDownLatch = diskStoreLatches.get(diskStoreName);\n+    if (countDownLatch == null) {\n+      countDownLatch = diskStoreLatches.putIfAbsent(diskStoreName, new CountDownLatch(1));\n+      if (countDownLatch != null) {\n+        try {\n+          countDownLatch.await();\n+        } catch (InterruptedException e) {\n+          throw new InternalGemFireError(e);\n+        }\n+      }\n+    } else {\n+      try {\n+        countDownLatch.await();\n+      } catch (InterruptedException e) {\n+        throw new InternalGemFireError(e);\n+      }\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9c7ecfc37fe1e4befef516371fa97a231519a0f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzE1OTE2Nw==", "bodyText": "I second @DonalEvans's comments here, could we use computeIfPresent or something similar?.\nAs a side note, if somebody invokes unlockDiskStore before calling lockDiskStore for exactly the same diskName first (aka the entry is null), shouldn't we throw an exception directly as the caller is using the API in a wrong way?.", "url": "https://github.com/apache/geode/pull/5014#discussion_r417159167", "createdAt": "2020-04-29T08:46:42Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/GemFireCacheImpl.java", "diffHunk": "@@ -1086,6 +1088,32 @@ public static GemFireCacheImpl getForPdx(String reason) {\n     clientMetadataService = clientMetadataServiceFactory.apply(this);\n   }\n \n+  public void lockDiskStore(String diskStoreName) {\n+    CountDownLatch countDownLatch = diskStoreLatches.get(diskStoreName);\n+    if (countDownLatch == null) {\n+      countDownLatch = diskStoreLatches.putIfAbsent(diskStoreName, new CountDownLatch(1));\n+      if (countDownLatch != null) {\n+        try {\n+          countDownLatch.await();\n+        } catch (InterruptedException e) {\n+          throw new InternalGemFireError(e);\n+        }\n+      }\n+    } else {\n+      try {\n+        countDownLatch.await();\n+      } catch (InterruptedException e) {\n+        throw new InternalGemFireError(e);\n+      }\n+    }\n+  }\n+\n+  public void unlockDiskStore(String diskStoreName) {\n+    if (diskStoreLatches.get(diskStoreName) != null) {\n+      diskStoreLatches.get(diskStoreName).countDown();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjkzNzA2MA=="}, "originalCommit": {"oid": "b9c7ecfc37fe1e4befef516371fa97a231519a0f"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88a77fc173c32a3771df54235f9c04a4905ab134", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/88a77fc173c32a3771df54235f9c04a4905ab134", "committedDate": "2020-04-30T22:32:13Z", "message": "Fix the code that could introduce NPE\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTI5NTA4", "url": "https://github.com/apache/geode/pull/5014#pullrequestreview-403929508", "createdAt": "2020-04-30T22:49:27Z", "commit": {"oid": "88a77fc173c32a3771df54235f9c04a4905ab134"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7d57a5aaf5c1bc8894e5211a232da34c07c0bec", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/e7d57a5aaf5c1bc8894e5211a232da34c07c0bec", "committedDate": "2020-04-30T23:10:11Z", "message": "Use default implementation in InternalCache\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0388205c1d73bf7a1e8d430b633cd9a28715d008", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/0388205c1d73bf7a1e8d430b633cd9a28715d008", "committedDate": "2020-04-30T23:14:34Z", "message": "Minor fix\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAzOTY1MzIw", "url": "https://github.com/apache/geode/pull/5014#pullrequestreview-403965320", "createdAt": "2020-05-01T00:34:26Z", "commit": {"oid": "0388205c1d73bf7a1e8d430b633cd9a28715d008"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDozNDoyNlrOGO-5FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQwMDo1NTo1M1rOGO_N0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MzY2OA==", "bodyText": "How is the exception handled?", "url": "https://github.com/apache/geode/pull/5014#discussion_r418363668", "createdAt": "2020-05-01T00:34:26Z", "author": {"login": "agingade"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/xmlcache/CacheCreation.java", "diffHunk": "@@ -521,12 +521,12 @@ void create(InternalCache cache)\n \n     cache.initializePdxRegistry();\n \n-    for (DiskStore diskStore : diskStores.values()) {\n+    diskStores.values().parallelStream().forEach(diskStore -> {\n       DiskStoreAttributesCreation creation = (DiskStoreAttributesCreation) diskStore;\n       if (creation != pdxRegDSC) {\n         createDiskStore(creation, cache);\n       }\n-    }\n+    });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0388205c1d73bf7a1e8d430b633cd9a28715d008"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NDY1OA==", "bodyText": "Is get() required, when using putIfAbsent()? putIfAbsent will return either null or old value.", "url": "https://github.com/apache/geode/pull/5014#discussion_r418364658", "createdAt": "2020-05-01T00:38:29Z", "author": {"login": "agingade"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/GemFireCacheImpl.java", "diffHunk": "@@ -1086,6 +1088,35 @@ public static GemFireCacheImpl getForPdx(String reason) {\n     clientMetadataService = clientMetadataServiceFactory.apply(this);\n   }\n \n+  @Override\n+  public void lockDiskStore(String diskStoreName) {\n+    CountDownLatch countDownLatch = diskStoreLatches.get(diskStoreName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0388205c1d73bf7a1e8d430b633cd9a28715d008"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2NzU0Mw==", "bodyText": "Based on the previous comment for 41290; it seems there was a need to create disk-store one at a time.\nFrom the comment its not clear, if its when the disk-stores are created through java API or cache xml (ClusterConfig).\nWhy do we need to change the synchronization...Here the disk-stores are just added into the map and reading from the disk happens in the CacheCreation.java.", "url": "https://github.com/apache/geode/pull/5014#discussion_r418367543", "createdAt": "2020-05-01T00:50:28Z", "author": {"login": "agingade"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/DiskStoreFactoryImpl.java", "diffHunk": "@@ -141,10 +141,9 @@ DiskStoreImpl createOwnedByRegion(String name, boolean isOwnedByPR,\n   @Override\n   public DiskStore create(String name) {\n     this.attrs.name = name;\n-    // As a simple fix for 41290, only allow one DiskStore to be created\n-    // at a time per cache by syncing on the cache.\n     DiskStore result;\n-    synchronized (this.cache) {\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0388205c1d73bf7a1e8d430b633cd9a28715d008"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2ODk3OA==", "bodyText": "Need to add unit/integration tests for both cases, with multiple and single thread trying to create disk-stores.", "url": "https://github.com/apache/geode/pull/5014#discussion_r418368978", "createdAt": "2020-05-01T00:55:53Z", "author": {"login": "agingade"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/xmlcache/CacheCreation.java", "diffHunk": "@@ -521,12 +521,12 @@ void create(InternalCache cache)\n \n     cache.initializePdxRegistry();\n \n-    for (DiskStore diskStore : diskStores.values()) {\n+    diskStores.values().parallelStream().forEach(diskStore -> {\n       DiskStoreAttributesCreation creation = (DiskStoreAttributesCreation) diskStore;\n       if (creation != pdxRegDSC) {\n         createDiskStore(creation, cache);\n       }\n-    }\n+    });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODM2MzY2OA=="}, "originalCommit": {"oid": "0388205c1d73bf7a1e8d430b633cd9a28715d008"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b535e4ace05e747ffff3059dc53bf13e4ec7bca5", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/b535e4ace05e747ffff3059dc53bf13e4ec7bca5", "committedDate": "2020-05-02T23:26:24Z", "message": "Remove unnecessary ConcurrentMap.get()\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1MTUzNTkw", "url": "https://github.com/apache/geode/pull/5014#pullrequestreview-405153590", "createdAt": "2020-05-04T16:33:33Z", "commit": {"oid": "b535e4ace05e747ffff3059dc53bf13e4ec7bca5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjozMzozM1rOGQIXuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxNjozMzozM1rOGQIXuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTU2NzU0NA==", "bodyText": "putIfAbsent returns the old value (if any) or null. Are you trying to await() on the old Latch or the new one you just put in the ConcurrentMap?", "url": "https://github.com/apache/geode/pull/5014#discussion_r419567544", "createdAt": "2020-05-04T16:33:33Z", "author": {"login": "kirklund"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/GemFireCacheImpl.java", "diffHunk": "@@ -1086,6 +1088,27 @@ public static GemFireCacheImpl getForPdx(String reason) {\n     clientMetadataService = clientMetadataServiceFactory.apply(this);\n   }\n \n+  @Override\n+  public void lockDiskStore(String diskStoreName) {\n+    CountDownLatch countDownLatch =\n+        diskStoreLatches.putIfAbsent(diskStoreName, new CountDownLatch(1));\n+    if (countDownLatch != null) {\n+      try {\n+        countDownLatch.await();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b535e4ace05e747ffff3059dc53bf13e4ec7bca5"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NDAyMTM2", "url": "https://github.com/apache/geode/pull/5014#pullrequestreview-405402136", "createdAt": "2020-05-04T22:53:26Z", "commit": {"oid": "b535e4ace05e747ffff3059dc53bf13e4ec7bca5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11bbce31d1eaf26c405dfac2efa039c5fb0ee646", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/11bbce31d1eaf26c405dfac2efa039c5fb0ee646", "committedDate": "2020-05-05T21:19:18Z", "message": "Add a unit test for GemFireCacheImpl\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4df132765993b0a0124e9382f4fe6d0a8059c258", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/4df132765993b0a0124e9382f4fe6d0a8059c258", "committedDate": "2020-05-06T01:08:43Z", "message": "DUnit test for parallel disk store recovery\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5d5abfed8faf24ce35ce56cf27438a72c20cb6d", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/d5d5abfed8faf24ce35ce56cf27438a72c20cb6d", "committedDate": "2020-05-06T05:06:50Z", "message": "Revert \"DUnit test for parallel disk store recovery\"\n\nThis reverts commit 4df132765993b0a0124e9382f4fe6d0a8059c258."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2ODA4NTkz", "url": "https://github.com/apache/geode/pull/5014#pullrequestreview-406808593", "createdAt": "2020-05-06T16:58:21Z", "commit": {"oid": "d5d5abfed8faf24ce35ce56cf27438a72c20cb6d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjo1ODoyMlrOGRcfYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNzowMDoyMlrOGRck4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk0NTc2MQ==", "bodyText": "I recommend replacing ExecutorService with ExecutorServiceRule. You can limit the rule to a specific number of threads if you need to otherwise it defaults to as many threads as tasks that you submit:\n@Rule\npublic ExecutorServiceRule executorServiceRule = new ExecutorServiceRule();\n\nThe Rule will automatically do shutdown etc during tearDown().\nIf you await on the Futures, then any assertion failures will be thrown causing the test to fail:\nFuture<Void> doLockUnlock = executorService.submit(() -> {\n  try {\n    assertThat(gemFireCacheImpl.doLockDiskStore(diskStoreName)).isTrue();\n  } finally {\n    assertThat(gemFireCacheImpl. doUnlockDiskStore(diskStoreName)).isTrue();\n  }\n}\n\ndoLockUnlock.get(GeodeAwaitility.getTimeout().toMillis(), TimeUnit.MILLISECONDS);", "url": "https://github.com/apache/geode/pull/5014#discussion_r420945761", "createdAt": "2020-05-06T16:58:22Z", "author": {"login": "kirklund"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/GemFireCacheImplTest.java", "diffHunk": "@@ -620,6 +625,40 @@ public void getCacheServers_isCanonical() {\n         .isSameAs(gemFireCacheImpl.getCacheServers());\n   }\n \n+  @Test\n+  public void testLockDiskStore() throws InterruptedException {\n+    int nThread = 10;\n+    String diskStoreName = \"MyDiskStore\";\n+    AtomicInteger nTrue = new AtomicInteger();\n+    AtomicInteger nFalse = new AtomicInteger();\n+    ExecutorService executorService = Executors.newFixedThreadPool(nThread);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5d5abfed8faf24ce35ce56cf27438a72c20cb6d"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk0NzE3MQ==", "bodyText": "If you use the Rule, you shouldn't need this or the shutdown. In general, you should however use GeodeAwaitility.getTimeout() instead of Long.MAX_VALUE.", "url": "https://github.com/apache/geode/pull/5014#discussion_r420947171", "createdAt": "2020-05-06T17:00:22Z", "author": {"login": "kirklund"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/GemFireCacheImplTest.java", "diffHunk": "@@ -620,6 +625,40 @@ public void getCacheServers_isCanonical() {\n         .isSameAs(gemFireCacheImpl.getCacheServers());\n   }\n \n+  @Test\n+  public void testLockDiskStore() throws InterruptedException {\n+    int nThread = 10;\n+    String diskStoreName = \"MyDiskStore\";\n+    AtomicInteger nTrue = new AtomicInteger();\n+    AtomicInteger nFalse = new AtomicInteger();\n+    ExecutorService executorService = Executors.newFixedThreadPool(nThread);\n+    IntStream.range(0, nThread).forEach(tid -> {\n+      executorService.submit(() -> {\n+        try {\n+          boolean lockResult = gemFireCacheImpl.doLockDiskStore(diskStoreName);\n+          if (lockResult) {\n+            nTrue.incrementAndGet();\n+          } else {\n+            nFalse.incrementAndGet();\n+          }\n+        } finally {\n+          boolean unlockResult = gemFireCacheImpl.doUnlockDiskStore(diskStoreName);\n+          if (unlockResult) {\n+            nTrue.incrementAndGet();\n+          } else {\n+            nFalse.incrementAndGet();\n+          }\n+        }\n+      });\n+    });\n+    executorService.shutdown();\n+    executorService.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5d5abfed8faf24ce35ce56cf27438a72c20cb6d"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82aa312b41aca18fc2c729e6d46d14b0ed962f14", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/82aa312b41aca18fc2c729e6d46d14b0ed962f14", "committedDate": "2020-05-06T18:32:25Z", "message": "Improve the unit test in GemFireCacheImplTest\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "309944e95a61279f9a0fb606836379306af74d9c", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/309944e95a61279f9a0fb606836379306af74d9c", "committedDate": "2020-05-06T22:08:58Z", "message": "Merge branch 'develop' into disk-recovery-perf-2"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb5a4634c9df8626f0f45a11b1167e1766530b51", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/bb5a4634c9df8626f0f45a11b1167e1766530b51", "committedDate": "2020-05-07T19:13:11Z", "message": "DUnit test for parallel disk store recovery\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cf1fdc39b52ed554a432bae47ed3d9b2c21b39e", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/5cf1fdc39b52ed554a432bae47ed3d9b2c21b39e", "committedDate": "2020-05-07T21:01:52Z", "message": "Limit the oplog size\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99d030342bc90fbeee14ba8a5b86a4b3839ea3c9", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/99d030342bc90fbeee14ba8a5b86a4b3839ea3c9", "committedDate": "2020-05-07T23:51:07Z", "message": "System property for parallel or sequential disk store recovery\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "023d64b15b24daa875e0f6a3c25a9c0bb2e1fb80", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/023d64b15b24daa875e0f6a3c25a9c0bb2e1fb80", "committedDate": "2020-05-08T00:33:33Z", "message": "Fix a NPE\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MzgxNzky", "url": "https://github.com/apache/geode/pull/5014#pullrequestreview-408381792", "createdAt": "2020-05-08T17:02:53Z", "commit": {"oid": "023d64b15b24daa875e0f6a3c25a9c0bb2e1fb80"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzowMjo1NFrOGSsmQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzoxMTozNVrOGSs2bQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI1ODI0Mg==", "bodyText": "The Green Team provided a presentation and recommendations for DUnit tests that result in tests that are easy for other developers to maintain. One important recommendation is to use the Geode User APIs directly instead of using any sort of API replacement/wrapper including ClusterStartupRule. See The Green Report (if you don't have access please let me know -- I'm happy to share it with anyone).\nBasically, if a Rule or Wrapper hides anything about configuring, starting, stopping, or doing anything with Geode then we should not use it because it obscures Geode.", "url": "https://github.com/apache/geode/pull/5014#discussion_r422258242", "createdAt": "2020-05-08T17:02:54Z", "author": {"login": "kirklund"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/ParallelDiskStoreRecoveryDUnitTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+\n+import java.util.concurrent.Future;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.management.internal.cli.util.CommandStringBuilder;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+\n+public class ParallelDiskStoreRecoveryDUnitTest {\n+\n+  @Rule\n+  public GfshCommandRule gfsh = new GfshCommandRule();\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "023d64b15b24daa875e0f6a3c25a9c0bb2e1fb80"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2MDAwMQ==", "bodyText": "Our coding standard has always disallowed declaration of multiple fields on one line. This may have slipped with Patrick setup spotless for Geode, but there was never a group discussion on the dev-list to get rid of this style requirement.", "url": "https://github.com/apache/geode/pull/5014#discussion_r422260001", "createdAt": "2020-05-08T17:06:34Z", "author": {"login": "kirklund"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/ParallelDiskStoreRecoveryDUnitTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+\n+import java.util.concurrent.Future;\n+import java.util.stream.IntStream;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.management.internal.cli.util.CommandStringBuilder;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+\n+public class ParallelDiskStoreRecoveryDUnitTest {\n+\n+  @Rule\n+  public GfshCommandRule gfsh = new GfshCommandRule();\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Rule\n+  public ExecutorServiceRule executorServiceRule = new ExecutorServiceRule();\n+\n+  private MemberVM locator, server1, server2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "023d64b15b24daa875e0f6a3c25a9c0bb2e1fb80"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2MjM4MQ==", "bodyText": "I recommend using ExecutorServiceRule for several reasons. Most important is that it always performs tearDown (ie shutdownNow) even if the test blows up before invoking executorService.shutdown();", "url": "https://github.com/apache/geode/pull/5014#discussion_r422262381", "createdAt": "2020-05-08T17:11:35Z", "author": {"login": "kirklund"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/GemFireCacheImplTest.java", "diffHunk": "@@ -620,6 +625,40 @@ public void getCacheServers_isCanonical() {\n         .isSameAs(gemFireCacheImpl.getCacheServers());\n   }\n \n+  @Test\n+  public void testLockDiskStore() throws InterruptedException {\n+    int nThread = 10;\n+    String diskStoreName = \"MyDiskStore\";\n+    AtomicInteger nTrue = new AtomicInteger();\n+    AtomicInteger nFalse = new AtomicInteger();\n+    ExecutorService executorService = Executors.newFixedThreadPool(nThread);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDk0NTc2MQ=="}, "originalCommit": {"oid": "d5d5abfed8faf24ce35ce56cf27438a72c20cb6d"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MzkwNzIz", "url": "https://github.com/apache/geode/pull/5014#pullrequestreview-408390723", "createdAt": "2020-05-08T17:17:41Z", "commit": {"oid": "023d64b15b24daa875e0f6a3c25a9c0bb2e1fb80"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzoxNzo0MlrOGStB2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNzoyNzoyOVrOGStVdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI2NTMwNA==", "bodyText": "Does this needs to be before \"try\"? if lock throws exception without locking we may be trying to unlock it...", "url": "https://github.com/apache/geode/pull/5014#discussion_r422265304", "createdAt": "2020-05-08T17:17:42Z", "author": {"login": "agingade"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/DiskStoreFactoryImpl.java", "diffHunk": "@@ -141,10 +141,9 @@ DiskStoreImpl createOwnedByRegion(String name, boolean isOwnedByPR,\n   @Override\n   public DiskStore create(String name) {\n     this.attrs.name = name;\n-    // As a simple fix for 41290, only allow one DiskStore to be created\n-    // at a time per cache by syncing on the cache.\n     DiskStore result;\n-    synchronized (this.cache) {\n+    try {\n+      this.cache.lockDiskStore(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "023d64b15b24daa875e0f6a3c25a9c0bb2e1fb80"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI3MDMyNg==", "bodyText": "Adding it here, makes it a distribution config setup...For system property you need to add in \"SystemPropertyHelper\". Look into \"EVICTION_SCAN_MAX_THREADS\" as an example.\nAlso, tests to verify the system property setting are working as expected....", "url": "https://github.com/apache/geode/pull/5014#discussion_r422270326", "createdAt": "2020-05-08T17:27:29Z", "author": {"login": "agingade"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/DistributionConfigImpl.java", "diffHunk": "@@ -668,6 +668,8 @@\n    */\n   private int threadMonitorTimeLimit = DEFAULT_THREAD_MONITOR_TIME_LIMIT;\n \n+  private boolean parallelDiskStoreRecovery = DEFAULT_PARALLEL_DISK_STORE_RECOVERY;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "023d64b15b24daa875e0f6a3c25a9c0bb2e1fb80"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bdc563929efff1d9dea231b96cc569ddfe47bc0", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/8bdc563929efff1d9dea231b96cc569ddfe47bc0", "committedDate": "2020-05-08T17:54:09Z", "message": "Using ExecutorServiceRule\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "242bbf0eca876e3d88d3116fe539bef9f3242223", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/242bbf0eca876e3d88d3116fe539bef9f3242223", "committedDate": "2020-05-11T18:27:42Z", "message": "Revert \"Fix a NPE\"\n\nThis reverts commit 023d64b15b24daa875e0f6a3c25a9c0bb2e1fb80."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0f52a1418eacc0a4cdd19f8a026cc788bfef6f8", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/a0f52a1418eacc0a4cdd19f8a026cc788bfef6f8", "committedDate": "2020-05-11T18:29:37Z", "message": "Revert \"System property for parallel or sequential disk store recovery\"\n\nThis reverts commit 99d030342bc90fbeee14ba8a5b86a4b3839ea3c9."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c46cf350cb9198a1aa69fd109b2056f71011a1a", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/8c46cf350cb9198a1aa69fd109b2056f71011a1a", "committedDate": "2020-05-11T19:24:06Z", "message": "Add system property parallelDiskStoreRecovery\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9951301a933a171a557ff22c06d493f87b2a5e1a", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/9951301a933a171a557ff22c06d493f87b2a5e1a", "committedDate": "2020-05-11T19:30:04Z", "message": "spotlessApply\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d8ad8a16f00a685cf4c1388409fef5975b154bf", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/3d8ad8a16f00a685cf4c1388409fef5975b154bf", "committedDate": "2020-05-11T19:31:46Z", "message": "spotlessApply\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bde412ec70f288750c2bf2188e1f52055df52623", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/bde412ec70f288750c2bf2188e1f52055df52623", "committedDate": "2020-05-11T19:36:48Z", "message": "Remove default empty implementation in the interface\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1490b7277637eb2a7e72e25920a29826a1113b5d", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/1490b7277637eb2a7e72e25920a29826a1113b5d", "committedDate": "2020-05-11T21:21:25Z", "message": "Clear specific system properties at the end of test\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ec4b3f4bd8236bc6d6c8583ae8917fb9caa8f91e", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/ec4b3f4bd8236bc6d6c8583ae8917fb9caa8f91e", "committedDate": "2020-05-11T21:29:30Z", "message": "Fix build failure\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "650f1d91d3bc3f48399d59165a8ba098f4d03bdf", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/650f1d91d3bc3f48399d59165a8ba098f4d03bdf", "committedDate": "2020-05-12T19:06:53Z", "message": "Refactor the dunit test\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTE1MjMz", "url": "https://github.com/apache/geode/pull/5014#pullrequestreview-410515233", "createdAt": "2020-05-13T00:45:32Z", "commit": {"oid": "650f1d91d3bc3f48399d59165a8ba098f4d03bdf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMTY5Nzcz", "url": "https://github.com/apache/geode/pull/5014#pullrequestreview-412169773", "createdAt": "2020-05-14T20:43:47Z", "commit": {"oid": "650f1d91d3bc3f48399d59165a8ba098f4d03bdf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dba3f46bf53a7974e8aafa94b48313490ce5b7e0", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/dba3f46bf53a7974e8aafa94b48313490ce5b7e0", "committedDate": "2020-05-14T21:31:23Z", "message": "Add documentation of the new system property\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34147f73bd79d8183216b7f32673fafaedce23ab", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/34147f73bd79d8183216b7f32673fafaedce23ab", "committedDate": "2020-05-14T22:00:41Z", "message": "Minor refactoring\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMjE5NzAz", "url": "https://github.com/apache/geode/pull/5014#pullrequestreview-412219703", "createdAt": "2020-05-14T22:08:07Z", "commit": {"oid": "34147f73bd79d8183216b7f32673fafaedce23ab"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4636, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}