{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNDk5ODQ0", "number": 4918, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMzozMTowMFrODwM6Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMzozOToxMlrODwNAlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODY5NzE4OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/ExecutionHandlerContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMzozMTowMFrOGDEgTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODoyNTowNFrOGDkU6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg3MjcxNg==", "bodyText": "Remove this printStackTrace. logger.error will log a stack trace if you do this: logger.error(\"description of context\", e);\nBasically we never want to see e.printStackTrace in geode code. Always use a logger instead.", "url": "https://github.com/apache/geode/pull/4918#discussion_r405872716", "createdAt": "2020-04-08T23:31:00Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/ExecutionHandlerContext.java", "diffHunk": "@@ -146,6 +146,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception\n       executeCommand(ctx, command);\n     } catch (Exception e) {\n       logger.error(e);\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9958ac4ae57c70a13a3683146e60e320a4e2164"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5NDA5MA==", "bodyText": "done - thanks!", "url": "https://github.com/apache/geode/pull/4918#discussion_r406394090", "createdAt": "2020-04-09T18:25:04Z", "author": {"login": "jhutchison"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/ExecutionHandlerContext.java", "diffHunk": "@@ -146,6 +146,7 @@ public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception\n       executeCommand(ctx, command);\n     } catch (Exception e) {\n       logger.error(e);\n+      e.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg3MjcxNg=="}, "originalCommit": {"oid": "d9958ac4ae57c70a13a3683146e60e320a4e2164"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODcwMTQ1OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/InternalDataSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMzozMzowOVrOGDEi9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODoyNTowMFrOGDkUyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg3MzM5Nw==", "bodyText": "Remove this printStackTrace call. Since \"t\" is given to ToDataException it seems like that should be enough. If you do need something here use the logger but I would advise against that and leave it up to the handler of the ToDataException to display the cause.", "url": "https://github.com/apache/geode/pull/4918#discussion_r405873397", "createdAt": "2020-04-08T23:33:09Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-core/src/main/java/org/apache/geode/internal/InternalDataSerializer.java", "diffHunk": "@@ -1506,7 +1506,9 @@ public static void writeDSFID(DataSerializableFixedID o, DataOutput out) throws\n       // error condition, so you also need to check to see if the JVM\n       // is still usable:\n       SystemFailure.checkFailure();\n+      t.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9958ac4ae57c70a13a3683146e60e320a4e2164"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5NDA1OA==", "bodyText": "done - thanks!", "url": "https://github.com/apache/geode/pull/4918#discussion_r406394058", "createdAt": "2020-04-09T18:25:00Z", "author": {"login": "jhutchison"}, "path": "geode-core/src/main/java/org/apache/geode/internal/InternalDataSerializer.java", "diffHunk": "@@ -1506,7 +1506,9 @@ public static void writeDSFID(DataSerializableFixedID o, DataOutput out) throws\n       // error condition, so you also need to check to see if the JVM\n       // is still usable:\n       SystemFailure.checkFailure();\n+      t.printStackTrace();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg3MzM5Nw=="}, "originalCommit": {"oid": "d9958ac4ae57c70a13a3683146e60e320a4e2164"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODcwMzc4OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/InternalDataSerializer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMzozNDowMlrOGDEkQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODoyNDo1N1rOGDkUrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg3MzczMQ==", "bodyText": "delete this blank line", "url": "https://github.com/apache/geode/pull/4918#discussion_r405873731", "createdAt": "2020-04-08T23:34:02Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-core/src/main/java/org/apache/geode/internal/InternalDataSerializer.java", "diffHunk": "@@ -1506,7 +1506,9 @@ public static void writeDSFID(DataSerializableFixedID o, DataOutput out) throws\n       // error condition, so you also need to check to see if the JVM\n       // is still usable:\n       SystemFailure.checkFailure();\n+      t.printStackTrace();\n       throw new ToDataException(\"toData failed on dsfid=\" + dsfid + \" msg:\" + t.getMessage(), t);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9958ac4ae57c70a13a3683146e60e320a4e2164"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5NDAyOA==", "bodyText": "done - thanks!", "url": "https://github.com/apache/geode/pull/4918#discussion_r406394028", "createdAt": "2020-04-09T18:24:57Z", "author": {"login": "jhutchison"}, "path": "geode-core/src/main/java/org/apache/geode/internal/InternalDataSerializer.java", "diffHunk": "@@ -1506,7 +1506,9 @@ public static void writeDSFID(DataSerializableFixedID o, DataOutput out) throws\n       // error condition, so you also need to check to see if the JVM\n       // is still usable:\n       SystemFailure.checkFailure();\n+      t.printStackTrace();\n       throw new ToDataException(\"toData failed on dsfid=\" + dsfid + \" msg:\" + t.getMessage(), t);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg3MzczMQ=="}, "originalCommit": {"oid": "d9958ac4ae57c70a13a3683146e60e320a4e2164"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODcwODI3OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisDistDUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMzozNjoyMlrOGDEnBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODoyNDo1MlrOGDkUgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg3NDQzOA==", "bodyText": "Do these tests still fail intermittently even with the compute fix?", "url": "https://github.com/apache/geode/pull/4918#discussion_r405874438", "createdAt": "2020-04-08T23:36:22Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisDistDUnitTest.java", "diffHunk": "@@ -84,7 +89,62 @@ public static void setup() {\n     client2 = cluster.getVM(4);\n   }\n \n+  class ConcurrentSADDOperation extends ClientTestBase {\n+\n+    private final Collection<String> strings;\n+    private final String key;\n+\n+    protected ConcurrentSADDOperation(int port, String key, Collection<String> strings) {\n+      super(port);\n+      this.strings = strings;\n+      this.key = key;\n+    }\n+\n+    @Override\n+    public void run() {\n+      Jedis jedis = new Jedis(LOCALHOST, port, JEDIS_TIMEOUT);\n+      for (String member : strings) {\n+        jedis.sadd(key, member);\n+      }\n+    }\n+  }\n+\n   @Test\n+  public void testConcurrentSaddOperations_runWithoutException_orDataLoss()\n+      throws InterruptedException {\n+    List<String> set1 = new ArrayList<>();\n+    List<String> set2 = new ArrayList<>();\n+    int setSize = populateSetValueArrays(set1, set2);\n+\n+    final String setName = \"keyset\";\n+\n+    AsyncInvocation<Void> remoteSaddInvocation =\n+        client1.invokeAsync(new ConcurrentSADDOperation(server1Port, setName, set1));\n+\n+    client2.invoke(new ConcurrentSADDOperation(server2Port, setName, set2));\n+\n+    remoteSaddInvocation.await();\n+\n+    Jedis jedis = new Jedis(LOCALHOST, server1Port, JEDIS_TIMEOUT);\n+\n+    Set<String> smembers = jedis.smembers(setName);\n+\n+    assertThat(smembers).hasSize(setSize * 2);\n+    assertThat(smembers).contains(set1.toArray(new String[] {}));\n+    assertThat(smembers).contains(set2.toArray(new String[] {}));\n+  }\n+\n+  private int populateSetValueArrays(List<String> set1, List<String> set2) {\n+    int setSize = 5000;\n+    for (int i = 0; i < setSize; i++) {\n+      set1.add(\"SETA-\" + i);\n+      set2.add(\"SETB-\" + i);\n+    }\n+    return setSize;\n+  }\n+\n+  @Test\n+  @Ignore(\"GEODE-7905\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9958ac4ae57c70a13a3683146e60e320a4e2164"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5Mzk4NQ==", "bodyText": "so the scope of this story changed-  original branch was dealing with number of commands.  This story now only deals with the SADD command.  We wouldn't expect those tests to pass until the code related to those commands are changed (though we did not explicitly run those testsdone)", "url": "https://github.com/apache/geode/pull/4918#discussion_r406393985", "createdAt": "2020-04-09T18:24:52Z", "author": {"login": "jhutchison"}, "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisDistDUnitTest.java", "diffHunk": "@@ -84,7 +89,62 @@ public static void setup() {\n     client2 = cluster.getVM(4);\n   }\n \n+  class ConcurrentSADDOperation extends ClientTestBase {\n+\n+    private final Collection<String> strings;\n+    private final String key;\n+\n+    protected ConcurrentSADDOperation(int port, String key, Collection<String> strings) {\n+      super(port);\n+      this.strings = strings;\n+      this.key = key;\n+    }\n+\n+    @Override\n+    public void run() {\n+      Jedis jedis = new Jedis(LOCALHOST, port, JEDIS_TIMEOUT);\n+      for (String member : strings) {\n+        jedis.sadd(key, member);\n+      }\n+    }\n+  }\n+\n   @Test\n+  public void testConcurrentSaddOperations_runWithoutException_orDataLoss()\n+      throws InterruptedException {\n+    List<String> set1 = new ArrayList<>();\n+    List<String> set2 = new ArrayList<>();\n+    int setSize = populateSetValueArrays(set1, set2);\n+\n+    final String setName = \"keyset\";\n+\n+    AsyncInvocation<Void> remoteSaddInvocation =\n+        client1.invokeAsync(new ConcurrentSADDOperation(server1Port, setName, set1));\n+\n+    client2.invoke(new ConcurrentSADDOperation(server2Port, setName, set2));\n+\n+    remoteSaddInvocation.await();\n+\n+    Jedis jedis = new Jedis(LOCALHOST, server1Port, JEDIS_TIMEOUT);\n+\n+    Set<String> smembers = jedis.smembers(setName);\n+\n+    assertThat(smembers).hasSize(setSize * 2);\n+    assertThat(smembers).contains(set1.toArray(new String[] {}));\n+    assertThat(smembers).contains(set2.toArray(new String[] {}));\n+  }\n+\n+  private int populateSetValueArrays(List<String> set1, List<String> set2) {\n+    int setSize = 5000;\n+    for (int i = 0; i < setSize; i++) {\n+      set1.add(\"SETA-\" + i);\n+      set2.add(\"SETB-\" + i);\n+    }\n+    return setSize;\n+  }\n+\n+  @Test\n+  @Ignore(\"GEODE-7905\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg3NDQzOA=="}, "originalCommit": {"oid": "d9958ac4ae57c70a13a3683146e60e320a4e2164"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODcxMzgzOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/SetsIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMzozOToxMlrOGDEqWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxODoyNDo1MVrOGDkUcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg3NTI4OA==", "bodyText": "It seems like you are expecting a certain exception here. Can it be made more specific than \"Exception\"?", "url": "https://github.com/apache/geode/pull/4918#discussion_r405875288", "createdAt": "2020-04-08T23:39:12Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/SetsIntegrationTest.java", "diffHunk": "@@ -98,6 +101,42 @@ public void testSAddSCard() {\n     assertThat(jedis.scard(key)).isEqualTo(strings.size());\n   }\n \n+  @Rule\n+  public ExpectedException exceptionRule = ExpectedException.none();\n+\n+  @Test\n+  public void testSAdd_withExistingKey_ofWrongType_shouldReturnError() {\n+    String key = \"key\";\n+    String stringValue = \"preexistingValue\";\n+    String[] setValue = new String[1];\n+    setValue[0] = \"set value that should never get added\";\n+\n+    exceptionRule.expect(JedisDataException.class);\n+    exceptionRule.expectMessage(RedisConstants.ERROR_WRONG_TYPE);\n+\n+    jedis.set(key, stringValue);\n+    jedis.sadd(key, setValue);\n+  }\n+\n+  @Test\n+  public void testSAdd_withExistingKey_ofWrongType_shouldNotOverWriteExistingKey() {\n+    String key = \"key\";\n+    String stringValue = \"preexistingValue\";\n+    String[] setValue = new String[1];\n+    setValue[0] = \"set value that should never get added\";\n+\n+    jedis.set(key, stringValue);\n+\n+    try {\n+      jedis.sadd(key, setValue);\n+    } catch (Exception exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9958ac4ae57c70a13a3683146e60e320a4e2164"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM5Mzk3MA==", "bodyText": "done!", "url": "https://github.com/apache/geode/pull/4918#discussion_r406393970", "createdAt": "2020-04-09T18:24:51Z", "author": {"login": "jhutchison"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/SetsIntegrationTest.java", "diffHunk": "@@ -98,6 +101,42 @@ public void testSAddSCard() {\n     assertThat(jedis.scard(key)).isEqualTo(strings.size());\n   }\n \n+  @Rule\n+  public ExpectedException exceptionRule = ExpectedException.none();\n+\n+  @Test\n+  public void testSAdd_withExistingKey_ofWrongType_shouldReturnError() {\n+    String key = \"key\";\n+    String stringValue = \"preexistingValue\";\n+    String[] setValue = new String[1];\n+    setValue[0] = \"set value that should never get added\";\n+\n+    exceptionRule.expect(JedisDataException.class);\n+    exceptionRule.expectMessage(RedisConstants.ERROR_WRONG_TYPE);\n+\n+    jedis.set(key, stringValue);\n+    jedis.sadd(key, setValue);\n+  }\n+\n+  @Test\n+  public void testSAdd_withExistingKey_ofWrongType_shouldNotOverWriteExistingKey() {\n+    String key = \"key\";\n+    String stringValue = \"preexistingValue\";\n+    String[] setValue = new String[1];\n+    setValue[0] = \"set value that should never get added\";\n+\n+    jedis.set(key, stringValue);\n+\n+    try {\n+      jedis.sadd(key, setValue);\n+    } catch (Exception exception) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg3NTI4OA=="}, "originalCommit": {"oid": "d9958ac4ae57c70a13a3683146e60e320a4e2164"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4261, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}