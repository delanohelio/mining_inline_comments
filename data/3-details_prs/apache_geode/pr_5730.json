{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MDQ3NTEy", "number": 5730, "title": "GEODE-8687: Fix for handling of PdxSerializationException on client", "bodyText": "Whenever PdxSerializationException is thrown on client for problematic CQ event, client will try to log that exception\ntogether with the problematic event value. But the problem is that client has to de-serialize event value in order to log it.\nWhen client tries to do that, it gets another PdxSerializationException which is now catched at higher level and cause\nshutdown of CacheClientUpdater and subscription queue connection.\n\n\nBehavior with this fix: At the reception of event that provoke\nPdxSerializationException client will only log the exception and ignore\nPdxSerializationException that happen during logging\n\n\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-11-11T08:48:03Z", "url": "https://github.com/apache/geode/pull/5730", "merged": true, "mergeCommit": {"oid": "2e7e45699b74812038dc516aaf7c14621951090b"}, "closed": true, "closedAt": "2020-12-03T07:23:56Z", "author": {"login": "jvarenina"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbZ06sgH2gAyNTE5MDQ3NTEyOmRmOTE5NjFlZWI1ODlhMzJmZDhkYTk0NTVmZmZlNjc1Zjk4ZWFiOTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdid7nAgFqTU0MzY2NTg3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "df91961eeb589a32fd8da9455fffe675f98eab93", "author": {"user": {"login": "jvarenina", "name": "Jakov Varenina"}}, "url": "https://github.com/apache/geode/commit/df91961eeb589a32fd8da9455fffe675f98eab93", "committedDate": "2020-11-11T08:38:37Z", "message": "GEODE-8687: Improve handling of seralization error\n\n* Improves handling of PdxSerializationException on client at the reception\nof events from subscription queue\n\n* Faulty behavior: At the reception of event for which\nPdxSerializationException is thrown the client would always shutdown\nCacheClientUpdater, destroy subscription queue connection\nand try to perform failover to other server in cluster\n\n* Behaviour with this fix: At the reception of event that provoke\nPdxSerializationException client will only log the exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a443a06621c8f89892b134d1bc5109378d52e9f", "author": {"user": {"login": "jvarenina", "name": "Jakov Varenina"}}, "url": "https://github.com/apache/geode/commit/9a443a06621c8f89892b134d1bc5109378d52e9f", "committedDate": "2020-11-11T14:27:12Z", "message": "DurableClientCQAutoSerializer test updated"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c93268a267e78b1758d1422dd1e1ad3998c0a355", "author": {"user": {"login": "jvarenina", "name": "Jakov Varenina"}}, "url": "https://github.com/apache/geode/commit/c93268a267e78b1758d1422dd1e1ad3998c0a355", "committedDate": "2020-11-12T12:26:27Z", "message": "Empty commit to trigger test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4Mzg2OTgz", "url": "https://github.com/apache/geode/pull/5730#pullrequestreview-538386983", "createdAt": "2020-11-25T11:07:43Z", "commit": {"oid": "c93268a267e78b1758d1422dd1e1ad3998c0a355"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMTowNzo0M1rOH5uXpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMTowODoxOVrOH5uY9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI5MDU5Nw==", "bodyText": "Please rename this file to be clear that it is the test. Something like DurableClientCQAutoSerializerDUnitTest", "url": "https://github.com/apache/geode/pull/5730#discussion_r530290597", "createdAt": "2020-11-25T11:07:43Z", "author": {"login": "mkevo"}, "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientCQAutoSerializer.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.tier.sockets;\n+\n+import static org.apache.geode.cache.Region.SEPARATOR;\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientRegionFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.client.internal.PoolImpl;\n+import org.apache.geode.cache.query.CqAttributesFactory;\n+import org.apache.geode.cache.query.CqQuery;\n+import org.apache.geode.cache.query.QueryService;\n+import org.apache.geode.internal.cache.CacheServerImpl;\n+import org.apache.geode.pdx.ReflectionBasedAutoSerializer;\n+import org.apache.geode.pdx.internal.AutoSerializableManager;\n+import org.apache.geode.test.dunit.Invoke;\n+import org.apache.geode.test.dunit.rules.ClientVM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.ClientSubscriptionTest;\n+import org.apache.geode.test.junit.categories.SerializationTest;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+\n+@Category({ClientSubscriptionTest.class, SerializationTest.class})\n+public class DurableClientCQAutoSerializer implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c93268a267e78b1758d1422dd1e1ad3998c0a355"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI5MDY1Mw==", "bodyText": "Please change the test name. Something like testCorrectClassPathsAutoSerializer", "url": "https://github.com/apache/geode/pull/5730#discussion_r530290653", "createdAt": "2020-11-25T11:07:49Z", "author": {"login": "mkevo"}, "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientCQAutoSerializer.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.tier.sockets;\n+\n+import static org.apache.geode.cache.Region.SEPARATOR;\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientRegionFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.client.internal.PoolImpl;\n+import org.apache.geode.cache.query.CqAttributesFactory;\n+import org.apache.geode.cache.query.CqQuery;\n+import org.apache.geode.cache.query.QueryService;\n+import org.apache.geode.internal.cache.CacheServerImpl;\n+import org.apache.geode.pdx.ReflectionBasedAutoSerializer;\n+import org.apache.geode.pdx.internal.AutoSerializableManager;\n+import org.apache.geode.test.dunit.Invoke;\n+import org.apache.geode.test.dunit.rules.ClientVM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.ClientSubscriptionTest;\n+import org.apache.geode.test.junit.categories.SerializationTest;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+\n+@Category({ClientSubscriptionTest.class, SerializationTest.class})\n+public class DurableClientCQAutoSerializer implements Serializable {\n+  private static final String REPLICATE_REGION_NAME = \"ReplicateRegion\";\n+  private static final String PARTITION_REGION_NAME = \"PartitionRegion\";\n+\n+  private MemberVM server;\n+  private MemberVM server2;\n+  private MemberVM locator;\n+  private ClientVM client;\n+  private ClientVM client2;\n+\n+  private static TestAutoSerializerCqListener cqListener = null;\n+\n+  private static final String TEST_OBJECT1_CLASS_PATH =\n+      \"org.apache.geode.internal.cache.tier.sockets.TestAutoSerializerObject1\";\n+  private static final String TEST_OBJECT2_CLASS_PATH =\n+      \"org.apache.geode.internal.cache.tier.sockets.TestAutoSerializerObject2\";\n+  private static final String TEST_FAULTY_CLASS_PATH =\n+      \"org.apache.geode.internal.cache.tier.sockets.TestAutoSerializerObject2Faulty\";\n+  private static final String DURABLE_CLIENT_ID = \"durableClient\";\n+\n+  // Traffic data\n+  static final Map<String, TestAutoSerializerObject1> LIST_TEST_OBJECT1 = ImmutableMap.of(\n+      \"key1\", new TestAutoSerializerObject1(\"aa\", \"bb\", 300),\n+      \"key2\", new TestAutoSerializerObject1(\"aa\", \"bb\", 600),\n+      \"key3\", new TestAutoSerializerObject1(\"aaa\", \"bbb\", 500));\n+\n+  static final Map<String, TestAutoSerializerObject2> LIST_TEST_OBJECT2 = ImmutableMap.of(\n+      \"key1\", new TestAutoSerializerObject2(\"cc\", \"ddd\", 300),\n+      \"key2\", new TestAutoSerializerObject2(\"cc\", \"dddd\", 400));\n+\n+  @Rule\n+  public GfshCommandRule gfsh = new GfshCommandRule();\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule(5);\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    Invoke.invokeInEveryVM(\n+        () -> System.setProperty(AutoSerializableManager.NO_HARDCODED_EXCLUDES_PARAM, \"true\"));\n+\n+    locator =\n+        cluster.startLocatorVM(0);\n+    int locatorPort = locator.getPort();\n+    server = cluster.startServerVM(1,\n+        s -> s.withConnectionToLocator(locatorPort));\n+\n+    server2 = cluster.startServerVM(2,\n+        s -> s.withConnectionToLocator(locatorPort));\n+\n+    gfsh.connectAndVerify(locator);\n+    gfsh.executeAndAssertThat(\n+        \"configure pdx --auto-serializable-classes='\" + TEST_OBJECT1_CLASS_PATH + \", \"\n+            + TEST_OBJECT2_CLASS_PATH + \"'\")\n+        .statusIsSuccess();\n+    gfsh.executeAndAssertThat(\"create region --name=\" + REPLICATE_REGION_NAME + \" --type=REPLICATE\")\n+        .statusIsSuccess();\n+    gfsh.executeAndAssertThat(\"create region --name=\" + PARTITION_REGION_NAME + \" --type=PARTITION\")\n+        .statusIsSuccess();\n+\n+    locator.invoke(() -> {\n+      ClusterStartupRule.memberStarter\n+          .waitUntilRegionIsReadyOnExactlyThisManyServers(SEPARATOR + REPLICATE_REGION_NAME, 2);\n+      ClusterStartupRule.memberStarter\n+          .waitUntilRegionIsReadyOnExactlyThisManyServers(SEPARATOR + PARTITION_REGION_NAME, 2);\n+    });\n+  }\n+\n+  @Test\n+  public void correctClassPathsAutoSerializer()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c93268a267e78b1758d1422dd1e1ad3998c0a355"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI5MDY3OA==", "bodyText": "The same as above. Something like testFaultyClassPathAutoSerializer", "url": "https://github.com/apache/geode/pull/5730#discussion_r530290678", "createdAt": "2020-11-25T11:07:52Z", "author": {"login": "mkevo"}, "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientCQAutoSerializer.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.tier.sockets;\n+\n+import static org.apache.geode.cache.Region.SEPARATOR;\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientRegionFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.client.internal.PoolImpl;\n+import org.apache.geode.cache.query.CqAttributesFactory;\n+import org.apache.geode.cache.query.CqQuery;\n+import org.apache.geode.cache.query.QueryService;\n+import org.apache.geode.internal.cache.CacheServerImpl;\n+import org.apache.geode.pdx.ReflectionBasedAutoSerializer;\n+import org.apache.geode.pdx.internal.AutoSerializableManager;\n+import org.apache.geode.test.dunit.Invoke;\n+import org.apache.geode.test.dunit.rules.ClientVM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.ClientSubscriptionTest;\n+import org.apache.geode.test.junit.categories.SerializationTest;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+\n+@Category({ClientSubscriptionTest.class, SerializationTest.class})\n+public class DurableClientCQAutoSerializer implements Serializable {\n+  private static final String REPLICATE_REGION_NAME = \"ReplicateRegion\";\n+  private static final String PARTITION_REGION_NAME = \"PartitionRegion\";\n+\n+  private MemberVM server;\n+  private MemberVM server2;\n+  private MemberVM locator;\n+  private ClientVM client;\n+  private ClientVM client2;\n+\n+  private static TestAutoSerializerCqListener cqListener = null;\n+\n+  private static final String TEST_OBJECT1_CLASS_PATH =\n+      \"org.apache.geode.internal.cache.tier.sockets.TestAutoSerializerObject1\";\n+  private static final String TEST_OBJECT2_CLASS_PATH =\n+      \"org.apache.geode.internal.cache.tier.sockets.TestAutoSerializerObject2\";\n+  private static final String TEST_FAULTY_CLASS_PATH =\n+      \"org.apache.geode.internal.cache.tier.sockets.TestAutoSerializerObject2Faulty\";\n+  private static final String DURABLE_CLIENT_ID = \"durableClient\";\n+\n+  // Traffic data\n+  static final Map<String, TestAutoSerializerObject1> LIST_TEST_OBJECT1 = ImmutableMap.of(\n+      \"key1\", new TestAutoSerializerObject1(\"aa\", \"bb\", 300),\n+      \"key2\", new TestAutoSerializerObject1(\"aa\", \"bb\", 600),\n+      \"key3\", new TestAutoSerializerObject1(\"aaa\", \"bbb\", 500));\n+\n+  static final Map<String, TestAutoSerializerObject2> LIST_TEST_OBJECT2 = ImmutableMap.of(\n+      \"key1\", new TestAutoSerializerObject2(\"cc\", \"ddd\", 300),\n+      \"key2\", new TestAutoSerializerObject2(\"cc\", \"dddd\", 400));\n+\n+  @Rule\n+  public GfshCommandRule gfsh = new GfshCommandRule();\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule(5);\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    Invoke.invokeInEveryVM(\n+        () -> System.setProperty(AutoSerializableManager.NO_HARDCODED_EXCLUDES_PARAM, \"true\"));\n+\n+    locator =\n+        cluster.startLocatorVM(0);\n+    int locatorPort = locator.getPort();\n+    server = cluster.startServerVM(1,\n+        s -> s.withConnectionToLocator(locatorPort));\n+\n+    server2 = cluster.startServerVM(2,\n+        s -> s.withConnectionToLocator(locatorPort));\n+\n+    gfsh.connectAndVerify(locator);\n+    gfsh.executeAndAssertThat(\n+        \"configure pdx --auto-serializable-classes='\" + TEST_OBJECT1_CLASS_PATH + \", \"\n+            + TEST_OBJECT2_CLASS_PATH + \"'\")\n+        .statusIsSuccess();\n+    gfsh.executeAndAssertThat(\"create region --name=\" + REPLICATE_REGION_NAME + \" --type=REPLICATE\")\n+        .statusIsSuccess();\n+    gfsh.executeAndAssertThat(\"create region --name=\" + PARTITION_REGION_NAME + \" --type=PARTITION\")\n+        .statusIsSuccess();\n+\n+    locator.invoke(() -> {\n+      ClusterStartupRule.memberStarter\n+          .waitUntilRegionIsReadyOnExactlyThisManyServers(SEPARATOR + REPLICATE_REGION_NAME, 2);\n+      ClusterStartupRule.memberStarter\n+          .waitUntilRegionIsReadyOnExactlyThisManyServers(SEPARATOR + PARTITION_REGION_NAME, 2);\n+    });\n+  }\n+\n+  @Test\n+  public void correctClassPathsAutoSerializer()\n+      throws Exception {\n+\n+    String query1 = \"SELECT * FROM \" + SEPARATOR + REPLICATE_REGION_NAME;\n+    String query2 = \"SELECT * FROM \" + SEPARATOR + PARTITION_REGION_NAME;\n+\n+    startDurableClient(TEST_OBJECT1_CLASS_PATH, TEST_OBJECT2_CLASS_PATH);\n+    createDurableCQs(query1, query2);\n+    verifyThatOnlyOneServerHostDurableSubscription();\n+\n+    // Start another client and provision data with traffic that should trigger CQs\n+    startDataProvisionClient(TEST_OBJECT1_CLASS_PATH, TEST_OBJECT2_CLASS_PATH);\n+    provisionRegionsWithData();\n+\n+    // Check that all events are received and successfully deserialized in cq listener\n+    checkCqEvents(LIST_TEST_OBJECT1.size(), LIST_TEST_OBJECT2.size());\n+    verifyThatOnlyOneServerHostDurableSubscription();\n+  }\n+\n+  @Test\n+  public void faultyClassPathAutoSerializer()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c93268a267e78b1758d1422dd1e1ad3998c0a355"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI5MDc1Mg==", "bodyText": "Please change this numData3 to numData, also change get methods.", "url": "https://github.com/apache/geode/pull/5730#discussion_r530290752", "createdAt": "2020-11-25T11:08:00Z", "author": {"login": "mkevo"}, "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/TestAutoSerializerObject1.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.tier.sockets;\n+\n+import java.util.Objects;\n+\n+import org.apache.geode.internal.PdxSerializerObject;\n+\n+/**\n+ * <strong>Explicitly</strong> not serializable by java.io.Serializable,\n+ * org.apache.geode.DataSerializable, or org.apache.geode.pdx.PdxSerializable.\n+ */\n+public class TestAutoSerializerObject1 implements PdxSerializerObject {\n+  protected String data1;\n+  protected String data2;\n+  protected int numData3;\n+\n+  public TestAutoSerializerObject1() {\n+    this(\"\", \"\", 0);\n+  }\n+\n+  protected TestAutoSerializerObject1(String data1, String data2, int numData3) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c93268a267e78b1758d1422dd1e1ad3998c0a355"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI5MDg2Nw==", "bodyText": "Can you merge this if statement with one above as they returning the same value?", "url": "https://github.com/apache/geode/pull/5730#discussion_r530290867", "createdAt": "2020-11-25T11:08:11Z", "author": {"login": "mkevo"}, "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/TestAutoSerializerObject1.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.tier.sockets;\n+\n+import java.util.Objects;\n+\n+import org.apache.geode.internal.PdxSerializerObject;\n+\n+/**\n+ * <strong>Explicitly</strong> not serializable by java.io.Serializable,\n+ * org.apache.geode.DataSerializable, or org.apache.geode.pdx.PdxSerializable.\n+ */\n+public class TestAutoSerializerObject1 implements PdxSerializerObject {\n+  protected String data1;\n+  protected String data2;\n+  protected int numData3;\n+\n+  public TestAutoSerializerObject1() {\n+    this(\"\", \"\", 0);\n+  }\n+\n+  protected TestAutoSerializerObject1(String data1, String data2, int numData3) {\n+    this.data1 = data1;\n+    this.data2 = data2;\n+    this.numData3 = numData3;\n+  }\n+\n+  public String getData1() {\n+    return data1;\n+  }\n+\n+  public String getData2() {\n+    return data2;\n+  }\n+\n+  public void setData2(String data2) {\n+    this.data2 = data2;\n+  }\n+\n+  public int getNumData3() {\n+    return numData3;\n+  }\n+\n+  public void setNumData3(int numData3) {\n+    this.numData3 = numData3;\n+  }\n+\n+  public String toString() {\n+    StringBuilder builder = new StringBuilder();\n+    if (data1 != null && !data1.isEmpty()) {\n+      builder.append(data1);\n+      builder.append(\" (\");\n+\n+      if (data2 != null && !data2.isEmpty()) {\n+        if (0 < builder.length() && '(' != builder.charAt(builder.length() - 1)) {\n+          builder.append(\", \");\n+        }\n+        builder.append(\"data2: \");\n+        builder.append(data2);\n+      }\n+\n+      if (0 < numData3) {\n+        if (0 < builder.length() && '(' != builder.charAt(builder.length() - 1)) {\n+          builder.append(\", \");\n+        }\n+        builder.append(\"numData3: \");\n+        builder.append(numData3);\n+      }\n+\n+      builder.append(\")\");\n+    }\n+    return builder.toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+\n+    if (this == o)\n+      return true;\n+\n+    if (o == null)\n+      return false;\n+\n+    if (getClass() != o.getClass())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c93268a267e78b1758d1422dd1e1ad3998c0a355"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI5MDg5OA==", "bodyText": "Please change this numData3 to numData, also change get methods.", "url": "https://github.com/apache/geode/pull/5730#discussion_r530290898", "createdAt": "2020-11-25T11:08:15Z", "author": {"login": "mkevo"}, "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/TestAutoSerializerObject2.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.tier.sockets;\n+\n+import java.util.Objects;\n+\n+import org.apache.geode.internal.PdxSerializerObject;\n+\n+/**\n+ * <strong>Explicitly</strong> not serializable by java.io.Serializable,\n+ * org.apache.geode.DataSerializable, or org.apache.geode.pdx.PdxSerializable.\n+ */\n+public class TestAutoSerializerObject2 implements PdxSerializerObject {\n+  protected String data1;\n+  protected String data2;\n+  protected int numData3;\n+\n+  public TestAutoSerializerObject2() {\n+    this(\"\", \"\", 0);\n+  }\n+\n+  protected TestAutoSerializerObject2(String data1, String data2, int numData3) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c93268a267e78b1758d1422dd1e1ad3998c0a355"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI5MDkzMg==", "bodyText": "Can you merge this if statement with one above as they returning the same value?", "url": "https://github.com/apache/geode/pull/5730#discussion_r530290932", "createdAt": "2020-11-25T11:08:19Z", "author": {"login": "mkevo"}, "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/TestAutoSerializerObject2.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.tier.sockets;\n+\n+import java.util.Objects;\n+\n+import org.apache.geode.internal.PdxSerializerObject;\n+\n+/**\n+ * <strong>Explicitly</strong> not serializable by java.io.Serializable,\n+ * org.apache.geode.DataSerializable, or org.apache.geode.pdx.PdxSerializable.\n+ */\n+public class TestAutoSerializerObject2 implements PdxSerializerObject {\n+  protected String data1;\n+  protected String data2;\n+  protected int numData3;\n+\n+  public TestAutoSerializerObject2() {\n+    this(\"\", \"\", 0);\n+  }\n+\n+  protected TestAutoSerializerObject2(String data1, String data2, int numData3) {\n+    this.data1 = data1;\n+    this.data2 = data2;\n+    this.numData3 = numData3;\n+  }\n+\n+  public String getData1() {\n+    return data1;\n+  }\n+\n+  public String getData2() {\n+    return data2;\n+  }\n+\n+  public void setData2(String data2) {\n+    this.data2 = data2;\n+  }\n+\n+  public int getNumData3() {\n+    return numData3;\n+  }\n+\n+  public void setNumData3(int numData3) {\n+    this.numData3 = numData3;\n+  }\n+\n+  public String toString() {\n+    StringBuilder builder = new StringBuilder();\n+    if (data1 != null && !data1.isEmpty()) {\n+      builder.append(data1);\n+      builder.append(\" (\");\n+\n+      if (data2 != null && !data2.isEmpty()) {\n+        if (0 < builder.length() && '(' != builder.charAt(builder.length() - 1)) {\n+          builder.append(\", \");\n+        }\n+        builder.append(\"data2: \");\n+        builder.append(data2);\n+      }\n+\n+      if (0 < numData3) {\n+        if (0 < builder.length() && '(' != builder.charAt(builder.length() - 1)) {\n+          builder.append(\", \");\n+        }\n+        builder.append(\"numData3: \");\n+        builder.append(numData3);\n+      }\n+\n+      builder.append(\")\");\n+    }\n+    return builder.toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o)\n+      return true;\n+\n+    if (o == null)\n+      return false;\n+\n+    if (getClass() != o.getClass())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c93268a267e78b1758d1422dd1e1ad3998c0a355"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8b938602429275a933814f31ed7bcbd7c3058f1d", "author": {"user": {"login": "jvarenina", "name": "Jakov Varenina"}}, "url": "https://github.com/apache/geode/commit/8b938602429275a933814f31ed7bcbd7c3058f1d", "committedDate": "2020-11-27T15:51:00Z", "message": "Updates after review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQwNjMyNzEx", "url": "https://github.com/apache/geode/pull/5730#pullrequestreview-540632711", "createdAt": "2020-11-30T06:46:09Z", "commit": {"oid": "8b938602429275a933814f31ed7bcbd7c3058f1d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNjY1ODcx", "url": "https://github.com/apache/geode/pull/5730#pullrequestreview-543665871", "createdAt": "2020-12-03T07:23:01Z", "commit": {"oid": "8b938602429275a933814f31ed7bcbd7c3058f1d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4021, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}