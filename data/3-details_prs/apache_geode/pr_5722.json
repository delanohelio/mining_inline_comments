{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3OTYwNTYw", "number": 5722, "title": "GEODE-8692: ArrayIndexOutOfBoundsException may be thrown in RegionAdvisor.processProfilesQueuedDuringInitialization", "bodyText": "If RegionAdvisor.buckets == null at the time the value of serials is generated, an ArrayIndexOutOfBoundsException may be thrown in RegionAdvisor.processProfilesQueuedDuringInitialization if buckets have been initialized at that point.\nCode where ArrayIndexOutOfBoundsException might be thrown in RegionAdvisor.processProfilesQueuedDuringInitialization():\nfor (int i = 0; i < buckets.length; i++) {\n  BucketAdvisor ba = buckets[i].getBucketAdvisor();\n  int serial = qbp.serials[i]; <<< Exception thrown here\n  if (serial != ILLEGAL_SERIAL) {\n    ba.removeIdWithSerial(qbp.memberId, serial, qbp.destroyed);\n  }\n}\n\nWe ultimately decided that if the buckets were not created at the time the value of serials is generated, there is no need to worry about their profiles getting deleted later.  To avoid the ArrayIndexOutOfBoundsException, getBucketSerials() was modified to return an array of ILLEGAL_SERIAL values if the buckets had not been created yet.\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-11-09T18:38:19Z", "url": "https://github.com/apache/geode/pull/5722", "merged": true, "mergeCommit": {"oid": "c99087aeb19abfb5bbd57036349870a6d784df1a"}, "closed": true, "closedAt": "2020-11-11T17:46:44Z", "author": {"login": "sabbey37"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABda38ahAH2gAyNTE3OTYwNTYwOjBjYmVhMTM5YTFkNmYxZTUzMmI5Y2IzMWM2ZmY3M2ZmMzRmZThjNTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbg590AFqTUyODM1NTU1OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0cbea139a1d6f1e532b9cb31c6ff73ff34fe8c53", "author": {"user": {"login": "sabbey37", "name": "Sarah"}}, "url": "https://github.com/apache/geode/commit/0cbea139a1d6f1e532b9cb31c6ff73ff34fe8c53", "committedDate": "2020-11-09T17:10:02Z", "message": "GEODE-8692: ArrayIndexOutOfBoundsException may be thrown in RegionAdvisor.processProfilesQueuedDuringInitialization"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NjgzNDc4", "url": "https://github.com/apache/geode/pull/5722#pullrequestreview-526683478", "createdAt": "2020-11-09T21:51:06Z", "commit": {"oid": "0cbea139a1d6f1e532b9cb31c6ff73ff34fe8c53"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "318605fce1a7e71791ecedcce7aa7b87dd727f83", "author": {"user": {"login": "sabbey37", "name": "Sarah"}}, "url": "https://github.com/apache/geode/commit/318605fce1a7e71791ecedcce7aa7b87dd727f83", "committedDate": "2020-11-10T16:07:06Z", "message": "Add unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDMzMzU2", "url": "https://github.com/apache/geode/pull/5722#pullrequestreview-527433356", "createdAt": "2020-11-10T17:21:28Z", "commit": {"oid": "318605fce1a7e71791ecedcce7aa7b87dd727f83"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNzoyMToyOFrOHwnN4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxODoxMzoyNFrOHwpQxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDczNjIyNw==", "bodyText": "Could this hardcoded 3 be replaced with serials.length to ensure that the test doesn't fail if someone modifies the size of serials?", "url": "https://github.com/apache/geode/pull/5722#discussion_r520736227", "createdAt": "2020-11-10T17:21:28Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RegionAdvisorJUnitTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.partitioned;\n+\n+import static org.apache.geode.distributed.internal.DistributionAdvisor.ILLEGAL_SERIAL;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.PartitionAttributes;\n+import org.apache.geode.cache.RegionAttributes;\n+import org.apache.geode.distributed.internal.DistributionManager;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.cache.BucketAdvisor;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.internal.cache.ProxyBucketRegion;\n+\n+public class RegionAdvisorJUnitTest {\n+\n+  private PartitionedRegion partitionedRegion;\n+  private RegionAdvisor regionAdvisor;\n+  private final int[] serials = new int[] {ILLEGAL_SERIAL, ILLEGAL_SERIAL, ILLEGAL_SERIAL};\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    partitionedRegion = mock(PartitionedRegion.class);\n+    regionAdvisor = new RegionAdvisor(partitionedRegion);\n+  }\n+\n+  @Test\n+  public void getBucketSerials_shouldReturnAnArrayOfIllegalSerials_whenBucketsAreNull() {\n+    RegionAttributes regionAttributes = mock(RegionAttributes.class);\n+    PartitionAttributes partitionAttributes = mock(PartitionAttributes.class);\n+    when(partitionedRegion.getAttributes()).thenReturn(regionAttributes);\n+    when(regionAttributes.getPartitionAttributes()).thenReturn(partitionAttributes);\n+    when(partitionAttributes.getTotalNumBuckets()).thenReturn(3);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "318605fce1a7e71791ecedcce7aa7b87dd727f83"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc0MjE4Ng==", "bodyText": "Two of the variable names in this test, qbp and pbr could be a bit more descriptive. I don't think there's anything wrong with long variable names, providing it's providing extra clarity.", "url": "https://github.com/apache/geode/pull/5722#discussion_r520742186", "createdAt": "2020-11-10T17:30:03Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RegionAdvisorJUnitTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.partitioned;\n+\n+import static org.apache.geode.distributed.internal.DistributionAdvisor.ILLEGAL_SERIAL;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.PartitionAttributes;\n+import org.apache.geode.cache.RegionAttributes;\n+import org.apache.geode.distributed.internal.DistributionManager;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.cache.BucketAdvisor;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.internal.cache.ProxyBucketRegion;\n+\n+public class RegionAdvisorJUnitTest {\n+\n+  private PartitionedRegion partitionedRegion;\n+  private RegionAdvisor regionAdvisor;\n+  private final int[] serials = new int[] {ILLEGAL_SERIAL, ILLEGAL_SERIAL, ILLEGAL_SERIAL};\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    partitionedRegion = mock(PartitionedRegion.class);\n+    regionAdvisor = new RegionAdvisor(partitionedRegion);\n+  }\n+\n+  @Test\n+  public void getBucketSerials_shouldReturnAnArrayOfIllegalSerials_whenBucketsAreNull() {\n+    RegionAttributes regionAttributes = mock(RegionAttributes.class);\n+    PartitionAttributes partitionAttributes = mock(PartitionAttributes.class);\n+    when(partitionedRegion.getAttributes()).thenReturn(regionAttributes);\n+    when(regionAttributes.getPartitionAttributes()).thenReturn(partitionAttributes);\n+    when(partitionAttributes.getTotalNumBuckets()).thenReturn(3);\n+\n+    assertThat(regionAdvisor.getBucketSerials()).containsExactly(serials);\n+  }\n+\n+  @Test\n+  public void processProfilesQueuedDuringInitialization_shouldNotThrowIndexOutOfBoundsException() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "318605fce1a7e71791ecedcce7aa7b87dd727f83"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDc2OTczNQ==", "bodyText": "Might it be worth adding a check to verify that ProxyBucketRegion.removeIdWithSerial() is never called for the contents of regionAdvisor.buckets since the serial is always ILLEGAL_SERIAL? Or would that be outside the scope of this test?", "url": "https://github.com/apache/geode/pull/5722#discussion_r520769735", "createdAt": "2020-11-10T18:13:24Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RegionAdvisorJUnitTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.partitioned;\n+\n+import static org.apache.geode.distributed.internal.DistributionAdvisor.ILLEGAL_SERIAL;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.PartitionAttributes;\n+import org.apache.geode.cache.RegionAttributes;\n+import org.apache.geode.distributed.internal.DistributionManager;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.cache.BucketAdvisor;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.internal.cache.ProxyBucketRegion;\n+\n+public class RegionAdvisorJUnitTest {\n+\n+  private PartitionedRegion partitionedRegion;\n+  private RegionAdvisor regionAdvisor;\n+  private final int[] serials = new int[] {ILLEGAL_SERIAL, ILLEGAL_SERIAL, ILLEGAL_SERIAL};\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    partitionedRegion = mock(PartitionedRegion.class);\n+    regionAdvisor = new RegionAdvisor(partitionedRegion);\n+  }\n+\n+  @Test\n+  public void getBucketSerials_shouldReturnAnArrayOfIllegalSerials_whenBucketsAreNull() {\n+    RegionAttributes regionAttributes = mock(RegionAttributes.class);\n+    PartitionAttributes partitionAttributes = mock(PartitionAttributes.class);\n+    when(partitionedRegion.getAttributes()).thenReturn(regionAttributes);\n+    when(regionAttributes.getPartitionAttributes()).thenReturn(partitionAttributes);\n+    when(partitionAttributes.getTotalNumBuckets()).thenReturn(3);\n+\n+    assertThat(regionAdvisor.getBucketSerials()).containsExactly(serials);\n+  }\n+\n+  @Test\n+  public void processProfilesQueuedDuringInitialization_shouldNotThrowIndexOutOfBoundsException() {\n+    RegionAdvisor.QueuedBucketProfile qbp =\n+        new RegionAdvisor.QueuedBucketProfile(mock(InternalDistributedMember.class), serials, true);\n+    DistributionManager distributionManager = mock(DistributionManager.class);\n+    when(regionAdvisor.getDistributionManager()).thenReturn(distributionManager);\n+    when(distributionManager.isCurrentMember(any())).thenReturn(true);\n+    regionAdvisor.preInitQueue.add(qbp);\n+\n+    ProxyBucketRegion pbr = mock(ProxyBucketRegion.class);\n+    when(pbr.getBucketAdvisor()).thenReturn(mock(BucketAdvisor.class));\n+    regionAdvisor.buckets = new ProxyBucketRegion[] {pbr, pbr, pbr};\n+\n+    regionAdvisor.processProfilesQueuedDuringInitialization();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "318605fce1a7e71791ecedcce7aa7b87dd727f83"}, "originalPosition": 70}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3NDc5MzU5", "url": "https://github.com/apache/geode/pull/5722#pullrequestreview-527479359", "createdAt": "2020-11-10T18:17:10Z", "commit": {"oid": "318605fce1a7e71791ecedcce7aa7b87dd727f83"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a66e08e7325856410796c3032b68a2c04e23b5c5", "author": {"user": {"login": "sabbey37", "name": "Sarah"}}, "url": "https://github.com/apache/geode/commit/a66e08e7325856410796c3032b68a2c04e23b5c5", "committedDate": "2020-11-11T15:43:33Z", "message": "PR review changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI4MzU1NTU4", "url": "https://github.com/apache/geode/pull/5722#pullrequestreview-528355558", "createdAt": "2020-11-11T16:53:28Z", "commit": {"oid": "a66e08e7325856410796c3032b68a2c04e23b5c5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4009, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}