{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0OTcxOTE4", "number": 5253, "title": "GEODE-8259: when client singlehop getAll encountered SerializationException, it should retry", "bodyText": "Thank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-06-16T04:51:35Z", "url": "https://github.com/apache/geode/pull/5253", "merged": true, "mergeCommit": {"oid": "ee9a4b05277ff531d0d89d5d0fb65f63063557e3"}, "closed": true, "closedAt": "2020-06-30T22:19:40Z", "author": {"login": "gesterzhou"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcrt28ZAH2gAyNDM0OTcxOTE4OjI1ZTUyZmRmMzU0ZmQ1ZmVmYWM4OWY2ZmI1OGVmZTA0NThlN2M2MGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwZgsXgFqTQ0MDI1ODgxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "25e52fdf354fd5fefac89f6fb58efe0458e7c60b", "author": {"user": {"login": "gesterzhou", "name": "Xiaojian Zhou"}}, "url": "https://github.com/apache/geode/commit/25e52fdf354fd5fefac89f6fb58efe0458e7c60b", "committedDate": "2020-06-16T04:50:34Z", "message": "GEODE-8259: DSFIDSerializerImpl should handle RTE the same as Exception"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5d48b0cee8b73104de290b26de6ab699d94a187", "author": {"user": {"login": "gesterzhou", "name": "Xiaojian Zhou"}}, "url": "https://github.com/apache/geode/commit/f5d48b0cee8b73104de290b26de6ab699d94a187", "committedDate": "2020-06-16T05:31:46Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2779bdd875b000f3683751c32ea279e76b866ceb", "author": {"user": {"login": "gesterzhou", "name": "Xiaojian Zhou"}}, "url": "https://github.com/apache/geode/commit/2779bdd875b000f3683751c32ea279e76b866ceb", "committedDate": "2020-06-16T18:51:13Z", "message": "fix based on bruce's comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNTc4Mjg3", "url": "https://github.com/apache/geode/pull/5253#pullrequestreview-432578287", "createdAt": "2020-06-17T16:36:37Z", "commit": {"oid": "2779bdd875b000f3683751c32ea279e76b866ceb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNTc2MTg4", "url": "https://github.com/apache/geode/pull/5253#pullrequestreview-432576188", "createdAt": "2020-06-17T16:34:08Z", "commit": {"oid": "2779bdd875b000f3683751c32ea279e76b866ceb"}, "state": "DISMISSED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjozNDowOFrOGlN0og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjozNjowNlrOGlN5Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3Njk2Mg==", "bodyText": "you should remove this commented-out code", "url": "https://github.com/apache/geode/pull/5253#discussion_r441676962", "createdAt": "2020-06-17T16:34:08Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/main/java/org/apache/geode/cache/client/internal/OpExecutorImpl.java", "diffHunk": "@@ -556,8 +556,8 @@ protected void handleException(Throwable e, Connection conn, int retryCount, boo\n       title = null;\n       exToThrow = new ServerOperationException(e);\n     } else if (e instanceof SerializationException) {\n-      title = null; // no message\n-      exToThrow = new ServerOperationException(e);\n+      title = \"Unexpected SerializationException\";\n+      // exToThrow = new ServerOperationException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2779bdd875b000f3683751c32ea279e76b866ceb"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3ODE3OQ==", "bodyText": "I still think you should catch CancelException and propagate that instead of a SerializationException", "url": "https://github.com/apache/geode/pull/5253#discussion_r441678179", "createdAt": "2020-06-17T16:36:06Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/main/java/org/apache/geode/internal/InternalDataSerializer.java", "diffHunk": "@@ -2506,153 +2506,156 @@ public static Object basicReadObject(final DataInput in)\n       throw new IOException(\"Unknown header byte: \" + header);\n     }\n \n-    switch (headerDSCode) {\n-      case DS_FIXED_ID_BYTE:\n-        return dsfidFactory.create(in.readByte(), in);\n-      case DS_FIXED_ID_SHORT:\n-        return dsfidFactory.create(in.readShort(), in);\n-      case DS_FIXED_ID_INT:\n-        return dsfidFactory.create(in.readInt(), in);\n-      case DS_NO_FIXED_ID:\n-      case DATA_SERIALIZABLE:\n-        return readDataSerializable(in);\n-      case NULL:\n-      case NULL_STRING:\n-        return null;\n-      case STRING:\n-        return readStringUTFFromDataInput(in);\n-      case HUGE_STRING:\n-        return readHugeStringFromDataInput(in);\n-      case STRING_BYTES:\n-        return readStringBytesFromDataInput(in, in.readUnsignedShort());\n-      case HUGE_STRING_BYTES:\n-        return readStringBytesFromDataInput(in, in.readInt());\n-      case CLASS:\n-        return readClass(in);\n-      case DATE:\n-        return readDate(in);\n-      case FILE:\n-        return readFile(in);\n-      case INET_ADDRESS:\n-        return readInetAddress(in);\n-      case BOOLEAN:\n-        return readBoolean(in);\n-      case CHARACTER:\n-        return readCharacter(in);\n-      case BYTE:\n-        return readByte(in);\n-      case SHORT:\n-        return readShort(in);\n-      case INTEGER:\n-        return readInteger(in);\n-      case LONG:\n-        return readLong(in);\n-      case FLOAT:\n-        return readFloat(in);\n-      case DOUBLE:\n-        return readDouble(in);\n-      case BYTE_ARRAY:\n-        return readByteArray(in);\n-      case ARRAY_OF_BYTE_ARRAYS:\n-        return readArrayOfByteArrays(in);\n-      case SHORT_ARRAY:\n-        return readShortArray(in);\n-      case STRING_ARRAY:\n-        return readStringArray(in);\n-      case INT_ARRAY:\n-        return readIntArray(in);\n-      case LONG_ARRAY:\n-        return readLongArray(in);\n-      case FLOAT_ARRAY:\n-        return readFloatArray(in);\n-      case DOUBLE_ARRAY:\n-        return readDoubleArray(in);\n-      case BOOLEAN_ARRAY:\n-        return readBooleanArray(in);\n-      case CHAR_ARRAY:\n-        return readCharArray(in);\n-      case OBJECT_ARRAY:\n-        return readObjectArray(in);\n-      case ARRAY_LIST:\n-        return readArrayList(in);\n-      case LINKED_LIST:\n-        return readLinkedList(in);\n-      case HASH_SET:\n-        return readHashSet(in);\n-      case LINKED_HASH_SET:\n-        return readLinkedHashSet(in);\n-      case HASH_MAP:\n-        return readHashMap(in);\n-      case IDENTITY_HASH_MAP:\n-        return readIdentityHashMap(in);\n-      case HASH_TABLE:\n-        return readHashtable(in);\n-      case CONCURRENT_HASH_MAP:\n-        return readConcurrentHashMap(in);\n-      case PROPERTIES:\n-        return readProperties(in);\n-      case TIME_UNIT:\n-        return readTimeUnit(in);\n-      case USER_CLASS:\n-        return readUserObject(in, in.readByte());\n-      case USER_CLASS_2:\n-        return readUserObject(in, in.readShort());\n-      case USER_CLASS_4:\n-        return readUserObject(in, in.readInt());\n-      case VECTOR:\n-        return readVector(in);\n-      case STACK:\n-        return readStack(in);\n-      case TREE_MAP:\n-        return readTreeMap(in);\n-      case TREE_SET:\n-        return readTreeSet(in);\n-      case BOOLEAN_TYPE:\n-        return Boolean.TYPE;\n-      case CHARACTER_TYPE:\n-        return Character.TYPE;\n-      case BYTE_TYPE:\n-        return Byte.TYPE;\n-      case SHORT_TYPE:\n-        return Short.TYPE;\n-      case INTEGER_TYPE:\n-        return Integer.TYPE;\n-      case LONG_TYPE:\n-        return Long.TYPE;\n-      case FLOAT_TYPE:\n-        return Float.TYPE;\n-      case DOUBLE_TYPE:\n-        return Double.TYPE;\n-      case VOID_TYPE:\n-        return Void.TYPE;\n-      case USER_DATA_SERIALIZABLE:\n-        return readUserDataSerializable(in, in.readByte());\n-      case USER_DATA_SERIALIZABLE_2:\n-        return readUserDataSerializable(in, in.readShort());\n-      case USER_DATA_SERIALIZABLE_4:\n-        return readUserDataSerializable(in, in.readInt());\n-      case SERIALIZABLE:\n-        return readSerializable(in);\n-      case PDX:\n-        return readPdxSerializable(in);\n-      case PDX_ENUM:\n-        return readPdxEnum(in);\n-      case GEMFIRE_ENUM:\n-        return readGemFireEnum(in);\n-      case PDX_INLINE_ENUM:\n-        return readPdxInlineEnum(in);\n-      case BIG_INTEGER:\n-        return readBigInteger(in);\n-      case BIG_DECIMAL:\n-        return readBigDecimal(in);\n-      case UUID:\n-        return readUUID(in);\n-      case TIMESTAMP:\n-        return readTimestamp(in);\n-      default:\n-        throw new IOException(\"Unknown header byte: \" + header);\n+    try {\n+      switch (headerDSCode) {\n+        case DS_FIXED_ID_BYTE:\n+          return dsfidFactory.create(in.readByte(), in);\n+        case DS_FIXED_ID_SHORT:\n+          return dsfidFactory.create(in.readShort(), in);\n+        case DS_FIXED_ID_INT:\n+          return dsfidFactory.create(in.readInt(), in);\n+        case DS_NO_FIXED_ID:\n+        case DATA_SERIALIZABLE:\n+          return readDataSerializable(in);\n+        case NULL:\n+        case NULL_STRING:\n+          return null;\n+        case STRING:\n+          return readStringUTFFromDataInput(in);\n+        case HUGE_STRING:\n+          return readHugeStringFromDataInput(in);\n+        case STRING_BYTES:\n+          return readStringBytesFromDataInput(in, in.readUnsignedShort());\n+        case HUGE_STRING_BYTES:\n+          return readStringBytesFromDataInput(in, in.readInt());\n+        case CLASS:\n+          return readClass(in);\n+        case DATE:\n+          return readDate(in);\n+        case FILE:\n+          return readFile(in);\n+        case INET_ADDRESS:\n+          return readInetAddress(in);\n+        case BOOLEAN:\n+          return readBoolean(in);\n+        case CHARACTER:\n+          return readCharacter(in);\n+        case BYTE:\n+          return readByte(in);\n+        case SHORT:\n+          return readShort(in);\n+        case INTEGER:\n+          return readInteger(in);\n+        case LONG:\n+          return readLong(in);\n+        case FLOAT:\n+          return readFloat(in);\n+        case DOUBLE:\n+          return readDouble(in);\n+        case BYTE_ARRAY:\n+          return readByteArray(in);\n+        case ARRAY_OF_BYTE_ARRAYS:\n+          return readArrayOfByteArrays(in);\n+        case SHORT_ARRAY:\n+          return readShortArray(in);\n+        case STRING_ARRAY:\n+          return readStringArray(in);\n+        case INT_ARRAY:\n+          return readIntArray(in);\n+        case LONG_ARRAY:\n+          return readLongArray(in);\n+        case FLOAT_ARRAY:\n+          return readFloatArray(in);\n+        case DOUBLE_ARRAY:\n+          return readDoubleArray(in);\n+        case BOOLEAN_ARRAY:\n+          return readBooleanArray(in);\n+        case CHAR_ARRAY:\n+          return readCharArray(in);\n+        case OBJECT_ARRAY:\n+          return readObjectArray(in);\n+        case ARRAY_LIST:\n+          return readArrayList(in);\n+        case LINKED_LIST:\n+          return readLinkedList(in);\n+        case HASH_SET:\n+          return readHashSet(in);\n+        case LINKED_HASH_SET:\n+          return readLinkedHashSet(in);\n+        case HASH_MAP:\n+          return readHashMap(in);\n+        case IDENTITY_HASH_MAP:\n+          return readIdentityHashMap(in);\n+        case HASH_TABLE:\n+          return readHashtable(in);\n+        case CONCURRENT_HASH_MAP:\n+          return readConcurrentHashMap(in);\n+        case PROPERTIES:\n+          return readProperties(in);\n+        case TIME_UNIT:\n+          return readTimeUnit(in);\n+        case USER_CLASS:\n+          return readUserObject(in, in.readByte());\n+        case USER_CLASS_2:\n+          return readUserObject(in, in.readShort());\n+        case USER_CLASS_4:\n+          return readUserObject(in, in.readInt());\n+        case VECTOR:\n+          return readVector(in);\n+        case STACK:\n+          return readStack(in);\n+        case TREE_MAP:\n+          return readTreeMap(in);\n+        case TREE_SET:\n+          return readTreeSet(in);\n+        case BOOLEAN_TYPE:\n+          return Boolean.TYPE;\n+        case CHARACTER_TYPE:\n+          return Character.TYPE;\n+        case BYTE_TYPE:\n+          return Byte.TYPE;\n+        case SHORT_TYPE:\n+          return Short.TYPE;\n+        case INTEGER_TYPE:\n+          return Integer.TYPE;\n+        case LONG_TYPE:\n+          return Long.TYPE;\n+        case FLOAT_TYPE:\n+          return Float.TYPE;\n+        case DOUBLE_TYPE:\n+          return Double.TYPE;\n+        case VOID_TYPE:\n+          return Void.TYPE;\n+        case USER_DATA_SERIALIZABLE:\n+          return readUserDataSerializable(in, in.readByte());\n+        case USER_DATA_SERIALIZABLE_2:\n+          return readUserDataSerializable(in, in.readShort());\n+        case USER_DATA_SERIALIZABLE_4:\n+          return readUserDataSerializable(in, in.readInt());\n+        case SERIALIZABLE:\n+          return readSerializable(in);\n+        case PDX:\n+          return readPdxSerializable(in);\n+        case PDX_ENUM:\n+          return readPdxEnum(in);\n+        case GEMFIRE_ENUM:\n+          return readGemFireEnum(in);\n+        case PDX_INLINE_ENUM:\n+          return readPdxInlineEnum(in);\n+        case BIG_INTEGER:\n+          return readBigInteger(in);\n+        case BIG_DECIMAL:\n+          return readBigDecimal(in);\n+        case UUID:\n+          return readUUID(in);\n+        case TIMESTAMP:\n+          return readTimestamp(in);\n+        default:\n+          throw new IOException(\"Unknown header byte: \" + header);\n+      }\n+    } catch (RuntimeException rte) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2779bdd875b000f3683751c32ea279e76b866ceb"}, "originalPosition": 296}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f79ae832c39c641d08091e6756b033f613ffb27e", "author": {"user": {"login": "gesterzhou", "name": "Xiaojian Zhou"}}, "url": "https://github.com/apache/geode/commit/f79ae832c39c641d08091e6756b033f613ffb27e", "committedDate": "2020-06-23T21:51:12Z", "message": "handle CacheClosedException separately"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79fab08e693c08940b38ee54b7eab5b02523ef92", "author": {"user": {"login": "gesterzhou", "name": "Xiaojian Zhou"}}, "url": "https://github.com/apache/geode/commit/79fab08e693c08940b38ee54b7eab5b02523ef92", "committedDate": "2020-06-27T00:47:07Z", "message": "refix to only change getAllOp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b25d75943ce1d499b284d3db92b48621cd431426", "author": {"user": {"login": "gesterzhou", "name": "Xiaojian Zhou"}}, "url": "https://github.com/apache/geode/commit/b25d75943ce1d499b284d3db92b48621cd431426", "committedDate": "2020-06-30T15:45:25Z", "message": "GEODE-8259: add junit test for GetAllOp\n\n    Co-authored-by: Xiaojian Zhou <gzhou@pivotal.io>\n    Co-authored-by: Anil <agingade@pivotal.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMTU4NjA5", "url": "https://github.com/apache/geode/pull/5253#pullrequestreview-440158609", "createdAt": "2020-06-30T15:53:52Z", "commit": {"oid": "b25d75943ce1d499b284d3db92b48621cd431426"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo1Mzo1MlrOGrDH4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo1Mzo1MlrOGrDH4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc5MzEyMw==", "bodyText": "this needs an assertion that the operation was retried", "url": "https://github.com/apache/geode/pull/5253#discussion_r447793123", "createdAt": "2020-06-30T15:53:52Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/test/java/org/apache/geode/cache/client/internal/GetAllOpJUnitTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.client.internal;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.apache.logging.log4j.Logger;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import org.apache.geode.SerializationException;\n+import org.apache.geode.cache.client.ServerOperationException;\n+import org.apache.geode.distributed.internal.ServerLocation;\n+import org.apache.geode.internal.cache.GemFireCacheImpl;\n+import org.apache.geode.internal.cache.LocalRegion;\n+import org.apache.geode.internal.cache.execute.BucketMovedException;\n+import org.apache.geode.internal.cache.tier.sockets.VersionedObjectList;\n+import org.apache.geode.logging.internal.log4j.api.LogService;\n+import org.apache.geode.test.fake.Fakes;\n+\n+public class GetAllOpJUnitTest {\n+  private ExecutablePool pool = mock(PoolImpl.class);\n+  private GemFireCacheImpl cache = Fakes.cache();\n+  private LocalRegion region = mock(LocalRegion.class);\n+  ArrayList<Integer> keys;\n+\n+  protected static final Logger logger = LogService.getLogger();\n+\n+  @Before\n+  public void setup() {\n+    when(region.getCache()).thenReturn(cache);\n+    ClientMetadataService cms = mock(ClientMetadataService.class);\n+    when(cache.getClientMetadataService()).thenReturn(cms);\n+\n+    keys = new ArrayList<>();\n+    for (int i = 1; i <= 10; i++) {\n+      keys.add(i);\n+    }\n+    Map<ServerLocation, Set> serverToFilterMap = new HashMap<>();\n+    when(cms.getServerToFilterMap(keys, region, true)).thenReturn(serverToFilterMap);\n+    ServerLocation serverLocation = new ServerLocation(\"localhost\", 12345);\n+    serverToFilterMap.put(serverLocation, new HashSet(keys));\n+  }\n+\n+  @Test\n+  public void singleHopGetAllShouldRetrySOECausedBySerialzationExp() {\n+    when(region.getFullPath()).thenReturn(\"/testRegion\")\n+        .thenThrow(new ServerOperationException(new SerializationException(\"testRetry\")))\n+        .thenReturn(\"/testRegion\");\n+    VersionedObjectList vol = new VersionedObjectList();\n+    when(pool.execute(any())).thenReturn(vol);\n+    GetAllOp.execute(pool, region, keys, -1, null);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b25d75943ce1d499b284d3db92b48621cd431426"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79551389f9b2a04e2f50e744931f355c7a196e4e", "author": {"user": {"login": "gesterzhou", "name": "Xiaojian Zhou"}}, "url": "https://github.com/apache/geode/commit/79551389f9b2a04e2f50e744931f355c7a196e4e", "committedDate": "2020-06-30T16:08:02Z", "message": "remove unnecessary logger"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "362fd5e2bad3466bfafc9739fa8cda5b1ad281d5", "author": {"user": {"login": "gesterzhou", "name": "Xiaojian Zhou"}}, "url": "https://github.com/apache/geode/commit/362fd5e2bad3466bfafc9739fa8cda5b1ad281d5", "committedDate": "2020-06-30T17:11:51Z", "message": "fix the test case based on bruce's comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMjU4ODE1", "url": "https://github.com/apache/geode/pull/5253#pullrequestreview-440258815", "createdAt": "2020-06-30T17:57:47Z", "commit": {"oid": "362fd5e2bad3466bfafc9739fa8cda5b1ad281d5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4470, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}