{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MTM0MzQ5", "number": 5365, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzoxMjoyN1rOENFiAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzoyODowNVrOENFuhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTU3NTcxOnYy", "diffSide": "RIGHT", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/PutAllPRMessageTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzoxMjoyN1rOGvkxFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzoyNjoxMFrOGvlBRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzODY0NQ==", "bodyText": "This can be replaced with assertThatThrownBy(() -> message.doLocalPutAll(partitionedRegion, mock(InternalDistributedMember.class), 1)).isInstanceOf(PrimaryBucketException.class); to make things a bit neater.", "url": "https://github.com/apache/geode/pull/5365#discussion_r452538645", "createdAt": "2020-07-09T23:12:27Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/PutAllPRMessageTest.java", "diffHunk": "@@ -119,4 +122,34 @@ public void removeAndNotifyKeysIsNotInvokedIfKeysNotLocked() throws Exception {\n         eq(regionDestroyedException));\n   }\n \n+  @Test\n+  public void rvvLockedAfterKeysAreLockedAndUnlockRVVBeforeKeys() throws Exception {\n+    PutAllPRMessage message = spy(new PutAllPRMessage(bucketId, 1, false, false, false, null));\n+    message.addEntry(entryData);\n+    doReturn(keys).when(message).getKeysToBeLocked();\n+    when(bucketRegion.waitUntilLocked(keys)).thenReturn(true);\n+    when(bucketRegion.doLockForPrimary(false)).thenThrow(new PrimaryBucketException());\n+    doNothing().when(bucketRegion).lockRVVForBulkOp();\n+    doNothing().when(bucketRegion).unlockRVVForBulkOp();\n+\n+    InternalCache cache = mock(InternalCache.class);\n+    InternalDistributedSystem ids = mock(InternalDistributedSystem.class);\n+    when(bucketRegion.getCache()).thenReturn(cache);\n+    when(cache.getDistributedSystem()).thenReturn(ids);\n+    when(ids.getOffHeapStore()).thenReturn(null);\n+\n+    try {\n+      message.doLocalPutAll(partitionedRegion, mock(InternalDistributedMember.class), 1);\n+      fail(\"Expect PrimaryBucketException\");\n+    } catch (Exception e) {\n+      assertThat(e instanceof PrimaryBucketException);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43cb2781e34b0b24f2628236256e13027f4b4e50"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0Mjc5MA==", "bodyText": "+1", "url": "https://github.com/apache/geode/pull/5365#discussion_r452542790", "createdAt": "2020-07-09T23:26:10Z", "author": {"login": "agingade"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/PutAllPRMessageTest.java", "diffHunk": "@@ -119,4 +122,34 @@ public void removeAndNotifyKeysIsNotInvokedIfKeysNotLocked() throws Exception {\n         eq(regionDestroyedException));\n   }\n \n+  @Test\n+  public void rvvLockedAfterKeysAreLockedAndUnlockRVVBeforeKeys() throws Exception {\n+    PutAllPRMessage message = spy(new PutAllPRMessage(bucketId, 1, false, false, false, null));\n+    message.addEntry(entryData);\n+    doReturn(keys).when(message).getKeysToBeLocked();\n+    when(bucketRegion.waitUntilLocked(keys)).thenReturn(true);\n+    when(bucketRegion.doLockForPrimary(false)).thenThrow(new PrimaryBucketException());\n+    doNothing().when(bucketRegion).lockRVVForBulkOp();\n+    doNothing().when(bucketRegion).unlockRVVForBulkOp();\n+\n+    InternalCache cache = mock(InternalCache.class);\n+    InternalDistributedSystem ids = mock(InternalDistributedSystem.class);\n+    when(bucketRegion.getCache()).thenReturn(cache);\n+    when(cache.getDistributedSystem()).thenReturn(ids);\n+    when(ids.getOffHeapStore()).thenReturn(null);\n+\n+    try {\n+      message.doLocalPutAll(partitionedRegion, mock(InternalDistributedMember.class), 1);\n+      fail(\"Expect PrimaryBucketException\");\n+    } catch (Exception e) {\n+      assertThat(e instanceof PrimaryBucketException);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzODY0NQ=="}, "originalCommit": {"oid": "43cb2781e34b0b24f2628236256e13027f4b4e50"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTU3NzE1OnYy", "diffSide": "RIGHT", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RemoveAllPRMessageTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzoxMzoxN1rOGvkyAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzoxMzoxN1rOGvkyAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzODg4MA==", "bodyText": "This can be replaced with assertThatThrownBy(() -> message.doLocalRemoveAll(partitionedRegion, mock(InternalDistributedMember.class), true)).isInstanceOf(PrimaryBucketException.class); to make things a bit neater.", "url": "https://github.com/apache/geode/pull/5365#discussion_r452538880", "createdAt": "2020-07-09T23:13:17Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RemoveAllPRMessageTest.java", "diffHunk": "@@ -131,4 +134,35 @@ public void removeAndNotifyKeysIsNotInvokedIfKeysNotLocked() throws Exception {\n     verify(dataStore).checkRegionDestroyedOnBucket(eq(bucketRegion), eq(true),\n         eq(regionDestroyedException));\n   }\n+\n+  @Test\n+  public void rvvLockedAfterKeysAreLockedAndUnlockRVVBeforeKeys() throws Exception {\n+    RemoveAllPRMessage message =\n+        spy(new RemoveAllPRMessage(bucketId, 1, false, false, false, null));\n+    message.addEntry(entryData);\n+    doReturn(keys).when(message).getKeysToBeLocked();\n+    when(bucketRegion.waitUntilLocked(keys)).thenReturn(true);\n+    when(bucketRegion.doLockForPrimary(false)).thenThrow(new PrimaryBucketException());\n+    doNothing().when(bucketRegion).lockRVVForBulkOp();\n+    doNothing().when(bucketRegion).unlockRVVForBulkOp();\n+\n+    InternalCache cache = mock(InternalCache.class);\n+    InternalDistributedSystem ids = mock(InternalDistributedSystem.class);\n+    when(bucketRegion.getCache()).thenReturn(cache);\n+    when(cache.getDistributedSystem()).thenReturn(ids);\n+    when(ids.getOffHeapStore()).thenReturn(null);\n+\n+    try {\n+      message.doLocalRemoveAll(partitionedRegion, mock(InternalDistributedMember.class), true);\n+      fail(\"Expect PrimaryBucketException\");\n+    } catch (Exception e) {\n+      assertThat(e instanceof PrimaryBucketException);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43cb2781e34b0b24f2628236256e13027f4b4e50"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTYwNjg1OnYy", "diffSide": "RIGHT", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/PutAllPRMessageTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzoyNzo0NVrOGvlDgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzoyNzo0NVrOGvlDgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MzM2MA==", "bodyText": "Having the actual operation \"put\" in between the lock and unlock makes sure the operation is operated under expected locking.", "url": "https://github.com/apache/geode/pull/5365#discussion_r452543360", "createdAt": "2020-07-09T23:27:45Z", "author": {"login": "agingade"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/PutAllPRMessageTest.java", "diffHunk": "@@ -119,4 +122,34 @@ public void removeAndNotifyKeysIsNotInvokedIfKeysNotLocked() throws Exception {\n         eq(regionDestroyedException));\n   }\n \n+  @Test\n+  public void rvvLockedAfterKeysAreLockedAndUnlockRVVBeforeKeys() throws Exception {\n+    PutAllPRMessage message = spy(new PutAllPRMessage(bucketId, 1, false, false, false, null));\n+    message.addEntry(entryData);\n+    doReturn(keys).when(message).getKeysToBeLocked();\n+    when(bucketRegion.waitUntilLocked(keys)).thenReturn(true);\n+    when(bucketRegion.doLockForPrimary(false)).thenThrow(new PrimaryBucketException());\n+    doNothing().when(bucketRegion).lockRVVForBulkOp();\n+    doNothing().when(bucketRegion).unlockRVVForBulkOp();\n+\n+    InternalCache cache = mock(InternalCache.class);\n+    InternalDistributedSystem ids = mock(InternalDistributedSystem.class);\n+    when(bucketRegion.getCache()).thenReturn(cache);\n+    when(cache.getDistributedSystem()).thenReturn(ids);\n+    when(ids.getOffHeapStore()).thenReturn(null);\n+\n+    try {\n+      message.doLocalPutAll(partitionedRegion, mock(InternalDistributedMember.class), 1);\n+      fail(\"Expect PrimaryBucketException\");\n+    } catch (Exception e) {\n+      assertThat(e instanceof PrimaryBucketException);\n+    }\n+\n+    InOrder inOrder = inOrder(bucketRegion);\n+    inOrder.verify(bucketRegion).waitUntilLocked(keys);\n+    inOrder.verify(bucketRegion).lockRVVForBulkOp();\n+    inOrder.verify(bucketRegion).unlockRVVForBulkOp();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43cb2781e34b0b24f2628236256e13027f4b4e50"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyMTYwNzc1OnYy", "diffSide": "RIGHT", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RemoveAllPRMessageTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzoyODowNVrOGvlD-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzo0MTo1OVrOGvlUaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MzQ4Mg==", "bodyText": "Having the actual operation \"remove\" in between the lock and unlock makes sure the operation is operated under expected locking.", "url": "https://github.com/apache/geode/pull/5365#discussion_r452543482", "createdAt": "2020-07-09T23:28:05Z", "author": {"login": "agingade"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RemoveAllPRMessageTest.java", "diffHunk": "@@ -131,4 +134,35 @@ public void removeAndNotifyKeysIsNotInvokedIfKeysNotLocked() throws Exception {\n     verify(dataStore).checkRegionDestroyedOnBucket(eq(bucketRegion), eq(true),\n         eq(regionDestroyedException));\n   }\n+\n+  @Test\n+  public void rvvLockedAfterKeysAreLockedAndUnlockRVVBeforeKeys() throws Exception {\n+    RemoveAllPRMessage message =\n+        spy(new RemoveAllPRMessage(bucketId, 1, false, false, false, null));\n+    message.addEntry(entryData);\n+    doReturn(keys).when(message).getKeysToBeLocked();\n+    when(bucketRegion.waitUntilLocked(keys)).thenReturn(true);\n+    when(bucketRegion.doLockForPrimary(false)).thenThrow(new PrimaryBucketException());\n+    doNothing().when(bucketRegion).lockRVVForBulkOp();\n+    doNothing().when(bucketRegion).unlockRVVForBulkOp();\n+\n+    InternalCache cache = mock(InternalCache.class);\n+    InternalDistributedSystem ids = mock(InternalDistributedSystem.class);\n+    when(bucketRegion.getCache()).thenReturn(cache);\n+    when(cache.getDistributedSystem()).thenReturn(ids);\n+    when(ids.getOffHeapStore()).thenReturn(null);\n+\n+    try {\n+      message.doLocalRemoveAll(partitionedRegion, mock(InternalDistributedMember.class), true);\n+      fail(\"Expect PrimaryBucketException\");\n+    } catch (Exception e) {\n+      assertThat(e instanceof PrimaryBucketException);\n+    }\n+\n+    InOrder inOrder = inOrder(bucketRegion);\n+    inOrder.verify(bucketRegion).waitUntilLocked(keys);\n+    inOrder.verify(bucketRegion).lockRVVForBulkOp();\n+    inOrder.verify(bucketRegion).unlockRVVForBulkOp();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43cb2781e34b0b24f2628236256e13027f4b4e50"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0NzY5MQ==", "bodyText": "doLockForPrimary acts as the operation to save a lot of trouble of mocking. The test expects this exception to happen.", "url": "https://github.com/apache/geode/pull/5365#discussion_r452547691", "createdAt": "2020-07-09T23:41:59Z", "author": {"login": "gesterzhou"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RemoveAllPRMessageTest.java", "diffHunk": "@@ -131,4 +134,35 @@ public void removeAndNotifyKeysIsNotInvokedIfKeysNotLocked() throws Exception {\n     verify(dataStore).checkRegionDestroyedOnBucket(eq(bucketRegion), eq(true),\n         eq(regionDestroyedException));\n   }\n+\n+  @Test\n+  public void rvvLockedAfterKeysAreLockedAndUnlockRVVBeforeKeys() throws Exception {\n+    RemoveAllPRMessage message =\n+        spy(new RemoveAllPRMessage(bucketId, 1, false, false, false, null));\n+    message.addEntry(entryData);\n+    doReturn(keys).when(message).getKeysToBeLocked();\n+    when(bucketRegion.waitUntilLocked(keys)).thenReturn(true);\n+    when(bucketRegion.doLockForPrimary(false)).thenThrow(new PrimaryBucketException());\n+    doNothing().when(bucketRegion).lockRVVForBulkOp();\n+    doNothing().when(bucketRegion).unlockRVVForBulkOp();\n+\n+    InternalCache cache = mock(InternalCache.class);\n+    InternalDistributedSystem ids = mock(InternalDistributedSystem.class);\n+    when(bucketRegion.getCache()).thenReturn(cache);\n+    when(cache.getDistributedSystem()).thenReturn(ids);\n+    when(ids.getOffHeapStore()).thenReturn(null);\n+\n+    try {\n+      message.doLocalRemoveAll(partitionedRegion, mock(InternalDistributedMember.class), true);\n+      fail(\"Expect PrimaryBucketException\");\n+    } catch (Exception e) {\n+      assertThat(e instanceof PrimaryBucketException);\n+    }\n+\n+    InOrder inOrder = inOrder(bucketRegion);\n+    inOrder.verify(bucketRegion).waitUntilLocked(keys);\n+    inOrder.verify(bucketRegion).lockRVVForBulkOp();\n+    inOrder.verify(bucketRegion).unlockRVVForBulkOp();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MzQ4Mg=="}, "originalCommit": {"oid": "43cb2781e34b0b24f2628236256e13027f4b4e50"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3924, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}