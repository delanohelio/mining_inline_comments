{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMTk4ODk0", "number": 4570, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMzozOTowN1rODWi0sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMzozOTowN1rODWi0sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0OTY1ODA5OnYy", "diffSide": "RIGHT", "path": "geode-dunit/src/main/java/org/apache/geode/management/internal/cli/commands/NestedQueryClassCastExceptionFailureDUnitTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxMzozOTowN1rOFbXHMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxNzo0MToxOVrOFbem_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIzNDU0Nw==", "bodyText": "Nitpick: this chunk of code can be replaced with something \"easier\" to read:\n  @Rule\n  public ServerStarterRule server =\n      new ServerStarterRule()\n          .withRegion(RegionShortcut.REPLICATE, \"product\")\n          .withProperty(SERIALIZABLE_OBJECT_FILTER, \"org.apache.geode.management.internal.cli.commands.*\")\n          .withPdxSerializer(new ReflectionBasedAutoSerializer(\"org.apache.geode.management.internal.cli.commands.*\"))\n          .withAutoStart();\n\n  @Test\n  public void classCastExceptionShouldNotBeThrownWhileExecutionNestedQueries() throws Exception {\n      Cache cache = server.getCache();\n      Region<Integer, Product> region = cache.getRegion(\"product\");\n      (...)\n}", "url": "https://github.com/apache/geode/pull/4570#discussion_r364234547", "createdAt": "2020-01-08T13:39:07Z", "author": {"login": "jujoramos"}, "path": "geode-dunit/src/main/java/org/apache/geode/management/internal/cli/commands/NestedQueryClassCastExceptionFailureDUnitTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.cli.commands;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.SERIALIZABLE_OBJECT_FILTER;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Properties;\n+import java.util.TreeMap;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.query.QueryService;\n+import org.apache.geode.cache.query.SelectResults;\n+import org.apache.geode.cache.server.CacheServer;\n+import org.apache.geode.pdx.ReflectionBasedAutoSerializer;\n+import org.apache.geode.test.dunit.Host;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.version.VersionManager;\n+\n+public class NestedQueryClassCastExceptionFailureDUnitTest {\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Test\n+  public void classCastExceptionShouldNotBeThrownWhileExecutionNestedQueries() {\n+    Host host = Host.getHost(0);\n+    VM server = host.getVM(VersionManager.CURRENT_VERSION, 0);\n+    server.invoke(() -> {\n+      Properties properties = new Properties();\n+      properties.put(SERIALIZABLE_OBJECT_FILTER,\n+          \"org.apache.geode.management.internal.cli.commands.*\");\n+      Cache cache = new CacheFactory(properties)\n+          .setPdxSerializer(new ReflectionBasedAutoSerializer(\n+              \"org.apache.geode.management.internal.cli.commands.*\"))\n+          .create();\n+\n+      CacheServer cacheServer = cache.addCacheServer();\n+      cacheServer.setPort(0);\n+      cacheServer.start();\n+      Region region = cache.createRegionFactory(RegionShortcut.REPLICATE).create(\"product\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beb2076a855d0bbe334dc0deba16af12c0c69eb6"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDM1NzM3NQ==", "bodyText": "I agree, but I personally prefer creating the setup as we say in our Geode documentation. Previously I had issues with Rules. I will try to refactor the tests better from now on to make it more readable", "url": "https://github.com/apache/geode/pull/4570#discussion_r364357375", "createdAt": "2020-01-08T17:41:19Z", "author": {"login": "nabarunnag"}, "path": "geode-dunit/src/main/java/org/apache/geode/management/internal/cli/commands/NestedQueryClassCastExceptionFailureDUnitTest.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.cli.commands;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.SERIALIZABLE_OBJECT_FILTER;\n+import static org.junit.Assert.assertEquals;\n+\n+import java.util.Properties;\n+import java.util.TreeMap;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.query.QueryService;\n+import org.apache.geode.cache.query.SelectResults;\n+import org.apache.geode.cache.server.CacheServer;\n+import org.apache.geode.pdx.ReflectionBasedAutoSerializer;\n+import org.apache.geode.test.dunit.Host;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.version.VersionManager;\n+\n+public class NestedQueryClassCastExceptionFailureDUnitTest {\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Test\n+  public void classCastExceptionShouldNotBeThrownWhileExecutionNestedQueries() {\n+    Host host = Host.getHost(0);\n+    VM server = host.getVM(VersionManager.CURRENT_VERSION, 0);\n+    server.invoke(() -> {\n+      Properties properties = new Properties();\n+      properties.put(SERIALIZABLE_OBJECT_FILTER,\n+          \"org.apache.geode.management.internal.cli.commands.*\");\n+      Cache cache = new CacheFactory(properties)\n+          .setPdxSerializer(new ReflectionBasedAutoSerializer(\n+              \"org.apache.geode.management.internal.cli.commands.*\"))\n+          .create();\n+\n+      CacheServer cacheServer = cache.addCacheServer();\n+      cacheServer.setPort(0);\n+      cacheServer.start();\n+      Region region = cache.createRegionFactory(RegionShortcut.REPLICATE).create(\"product\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDIzNDU0Nw=="}, "originalCommit": {"oid": "beb2076a855d0bbe334dc0deba16af12c0c69eb6"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3800, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}