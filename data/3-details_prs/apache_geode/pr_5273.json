{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NTE4ODkz", "number": 5273, "title": "GEODE-8240: solve rolling upgrade bug with new VersionOrdinal interface", "bodyText": "GEODE-8240\nThis is an alternative solution to the one explored in #5269. This PR introduces a new interface VersionOrdinal to model not just versions we know about (as Version does) but also future versions. Formerly Geode modeled these as short but that presented difficulties in the many places where we need to compare versions. By unifying known and unknown versions under one interface, capable of providing generic comparison (compareTo(), equals(), and hashCode()) my hope is that we can eliminate this egregious loss of information (in that other PR's Version implementation):\n  @Override\n  public Version getVersion() {\n    try {\n      return Version.fromOrdinal(versionOrdinal);\n    } catch (final UnsupportedSerializationVersionException e) {\n      return Version.CURRENT;\n    } \nThat code right there is essentially a mirror-image of the GMSMemberData.setVersionObject() method which is the original culprit in GEODE-8240. Rather than moving the wrongness from the eager/set side to the lazy/get side, this PR seeks to eliminate the wrongness entirely.\nHighlights\nIntroduced new VersionOrdinal type (interface). It carries all the equality, comparison, hash code functionality formerly down in Version. Made a VersionOrdinalImpl class to implement that interface and for use in places where we want an instance of just VersionOrdinal without the restrictions in Version (mainly that we can only have instances of known versions.)\nGMSMemberData, which is the state holder for a MemberIdentifier now has a VersionOrdinal where it used to have a Version. getVersion() has been renamed getVersionOrdinalObject() and now returns a VersionOrdinal where it used to return a Version. Since all the callers needed only comparison ops on that return value, the changes to call sites were trivial, if widespread. (Most of the files affected by this PR have those call sites and in every case the change was merely to change a method parameter, field, or local variable declaration from Version to VersionOrdinal.\nAlso since Version isa VersionOrdinal they are cross-comparable.\nI think this new VersionOrdinal type is more in the spirit of the old code (from before the bug was introduced.) That code carried short version ordinals around. The old GMSMember class (which later became GMSMembeData) had a short versionOrdinal field. This new VersionOrdinal class does that one better by giving us a place to hang the comparsion and hashing ops and gives us a type/subtype relationship between VersionOrdinal (any version ordinal, known or unknown) and Version (a known version.)\nIt would be nice if, when you asked for a VersionOrdinal, if that represented a known version, i.e. a Version, that you'd actually get the pertinent Version object back. A factory, Versioning.getVersionOrdinal(short ordinal) was introduced fore this purpose. Only that factory is allowed to construct VersionOrdinalImpl. As was the case before this PR, Version has no public constructor at all\u2014it is essentially an enumerated type.\nTesting\nThe original PR that pointed out this bug #5224 enhanced RollingUpgradeDUnitTest to check the versions (of each member) in the view reported by gfsh after a rolling upgrade. The fix to GMSMemberData was backported to a feature branch off of support/1.12 and the modified RollingUpgradeDUnitTest passed \u2713\nA new unit test GMSMemberDataVersionDUnitTest was added to verify that it's now possible to set an unknown version (ordinal) on GMSMemberData without loss of information.\nSo much for the bug itself. But what about 1.12.0 coordinators running in the wild with the bug?\nDuring an upgrade a locator will receive a bad view from one of those. \"Compensating\" code was added to GMSJoinLeave.installView() to patch up bad member version data arriving in a view from a compromised coordinator. See the call to GMSMembershipView.correctWrongVersionIn(final ID memberID) in GMSJoinLeave.installView().\nA new unit test, GMSJoinLeaveJUnitTest.repairWrongVersionInView() was added to test the compensation logic. As an additional test, the new RollingUpgradeDUnitTest was verified passing for all old Geode versions, including an un-repaired 1.12.0.\nMiscellaneous Things I Hope You'll Check Me On\n\nsanctionedDataSerializables.txt in geode-core changed. It's odd to me that there were apparently a bunch of geode-membership classes in that file before this PR. I don't think they should have been there. Nevertheless it's a mystery as to why they were and I'd like another opinion on that file. Also please double-check the (non-deletion) changes to that file\u2014I checked 'em but they need a double-check.\n\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?", "createdAt": "2020-06-18T14:39:13Z", "url": "https://github.com/apache/geode/pull/5273", "merged": true, "mergeCommit": {"oid": "bfe1ca113124ea958dc02dd9be90cdb0aabe5c4d"}, "closed": true, "closedAt": "2020-06-30T17:20:27Z", "author": {"login": "Bill"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsjk6qgFqTQzMzU4MTI4Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcwXl3CgFqTQ0MDE0ODMwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTgxMjg3", "url": "https://github.com/apache/geode/pull/5273#pullrequestreview-433581287", "createdAt": "2020-06-18T19:25:45Z", "commit": {"oid": "6cae5f4ea8e387194cc9ac285ec4e04944775633"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOToyNTo0NVrOGl9GTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOToyNTo0NVrOGl9GTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1MTUzMg==", "bodyText": "dead code", "url": "https://github.com/apache/geode/pull/5273#discussion_r442451532", "createdAt": "2020-06-18T19:25:45Z", "author": {"login": "Bill"}, "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/internal/DSFIDSerializerImpl.java", "diffHunk": "@@ -220,20 +220,6 @@ public void invokeToData(Object ds, DataOutput out) throws IOException {\n     }\n   }\n \n-  /**\n-   * Get the Version of the peer or disk store that created this {@link DataOutput}.\n-   * Returns\n-   * zero if the version is same as this member's.\n-   */\n-  public Version getVersionForDataStreamOrNull(DataOutput out) {\n-    // check if this is a versioned data output\n-    if (out instanceof VersionedDataStream) {\n-      return ((VersionedDataStream) out).getVersion();\n-    } else {\n-      return null;\n-    }\n-  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cae5f4ea8e387194cc9ac285ec4e04944775633"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTgxOTY4", "url": "https://github.com/apache/geode/pull/5273#pullrequestreview-433581968", "createdAt": "2020-06-18T19:26:47Z", "commit": {"oid": "6cae5f4ea8e387194cc9ac285ec4e04944775633"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOToyNjo0OFrOGl9IYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxOToyNjo0OFrOGl9IYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ1MjA2Nw==", "bodyText": "this was used in exactly two places and is better accomplished via Version.CURRENT.isEqual(someVersionOrdinal)", "url": "https://github.com/apache/geode/pull/5273#discussion_r442452067", "createdAt": "2020-06-18T19:26:48Z", "author": {"login": "Bill"}, "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/Version.java", "diffHunk": "@@ -635,48 +569,4 @@ public boolean isPre65() {\n         .collect(Collectors.toList());\n   }\n \n-  public boolean isCurrentVersion() {\n-    return this.ordinal == CURRENT.ordinal;\n-  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cae5f4ea8e387194cc9ac285ec4e04944775633"}, "originalPosition": 135}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e6f66ee29834c7a204f11022b8409cf08d382823", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/e6f66ee29834c7a204f11022b8409cf08d382823", "committedDate": "2020-06-18T21:46:17Z", "message": "repair TcpServerProductVersionDUnitTest"}, "afterCommit": {"oid": "9a0783994723b4571f71a30471520dc684eee3e8", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/9a0783994723b4571f71a30471520dc684eee3e8", "committedDate": "2020-06-18T21:58:11Z", "message": "repair TcpServerProductVersionDUnitTest"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7cfebff61d739a7222d8b461e898b7569a4b7fcd", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/7cfebff61d739a7222d8b461e898b7569a4b7fcd", "committedDate": "2020-06-19T00:07:55Z", "message": "geode-core sanctionedDataSerializables update"}, "afterCommit": {"oid": "423430fa971748578da2d8385de4109376a3ef40", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/423430fa971748578da2d8385de4109376a3ef40", "committedDate": "2020-06-19T15:51:25Z", "message": "GEODE-8240: carry version in new VersionOrdinal to support rolling\n\nBug in rolling upgrade caused by silently converting unknown future\nversion to a Version, fixed by carrying version in new base type\nVersionOrdinal.\n\nAuthored-by: Bill Burcham <bill.burcham@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "423430fa971748578da2d8385de4109376a3ef40", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/423430fa971748578da2d8385de4109376a3ef40", "committedDate": "2020-06-19T15:51:25Z", "message": "GEODE-8240: carry version in new VersionOrdinal to support rolling\n\nBug in rolling upgrade caused by silently converting unknown future\nversion to a Version, fixed by carrying version in new base type\nVersionOrdinal.\n\nAuthored-by: Bill Burcham <bill.burcham@gmail.com>"}, "afterCommit": {"oid": "3591ac29ecf509fc70cd98250696c8b3b686d27f", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/3591ac29ecf509fc70cd98250696c8b3b686d27f", "committedDate": "2020-06-19T16:08:21Z", "message": "GEODE-8240: carry version in new VersionOrdinal to support rolling\n\nBug in rolling upgrade caused by silently converting unknown future\nversion to a Version, fixed by carrying version in new base type\nVersionOrdinal.\n\nAuthored-by: Bill Burcham <bill.burcham@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/a8ba7f23349b52d9558978a12cc0276618c4c921", "committedDate": "2020-06-25T23:25:16Z", "message": "GEODE-8240: member identifier carries future versions\n\nGMSMemberData now carries future version (ordinals) again. Compensate\nfor 1.12.0 in-the-wild coordinator producing view with wrong (old)\nversion.\n\nAuthored-by: Bill Burcham <bill.burcham@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d73d7248568286f822f6ada74c7fa6a020268c9f", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/d73d7248568286f822f6ada74c7fa6a020268c9f", "committedDate": "2020-06-25T22:48:33Z", "message": "GEODE-8240: call compensating logic from installView()"}, "afterCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/a8ba7f23349b52d9558978a12cc0276618c4c921", "committedDate": "2020-06-25T23:25:16Z", "message": "GEODE-8240: member identifier carries future versions\n\nGMSMemberData now carries future version (ordinals) again. Compensate\nfor 1.12.0 in-the-wild coordinator producing view with wrong (old)\nversion.\n\nAuthored-by: Bill Burcham <bill.burcham@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4MzcwNDcy", "url": "https://github.com/apache/geode/pull/5273#pullrequestreview-438370472", "createdAt": "2020-06-26T15:02:53Z", "commit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNTowMjo1NFrOGpkSAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxNToxODo1N1rOGpk1ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjIzOTIzNQ==", "bodyText": "this removal of MissingPersistentIDsRequest surprised me.  The class still exists in my checkout and is a DSFID.", "url": "https://github.com/apache/geode/pull/5273#discussion_r446239235", "createdAt": "2020-06-26T15:02:54Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/integrationTest/resources/org/apache/geode/codeAnalysis/sanctionedDataSerializables.txt", "diffHunk": "@@ -578,9 +502,6 @@ org/apache/geode/internal/admin/remote/LicenseInfoResponse,2\n fromData,18\n toData,15\n \n-org/apache/geode/internal/admin/remote/MissingPersistentIDsRequest,1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0MDgzOA==", "bodyText": "This should continue to use Version, not VersionOrdinal.  Using Version ensures that we never create a datastream with an unknown ordinal.  None of our serialization code will know what to do if that should happen.", "url": "https://github.com/apache/geode/pull/5273#discussion_r446240838", "createdAt": "2020-06-26T15:05:51Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/main/java/org/apache/geode/cache/client/internal/ClientSideHandshakeImpl.java", "diffHunk": "@@ -270,7 +271,7 @@ public ServerQueueStatus handshakeWithServer(Connection conn, ServerLocation loc\n   private InternalDistributedMember readServerMember(DataInputStream p_dis) throws IOException {\n \n     byte[] memberBytes = DataSerializer.readByteArray(p_dis);\n-    Version v = StaticSerialization.getVersionForDataStreamOrNull(p_dis);\n+    final VersionOrdinal v = StaticSerialization.getVersionForDataStreamOrNull(p_dis);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0Mzc1MA==", "bodyText": "This should continue to return a Version, not a VersionOrdinal.  We already have a method for getting the ordinal.", "url": "https://github.com/apache/geode/pull/5273#discussion_r446243750", "createdAt": "2020-06-26T15:11:06Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/membership/InternalDistributedMember.java", "diffHunk": "@@ -549,7 +550,7 @@ public void setVersionObjectForTest(Version v) {\n   }\n \n   @Override\n-  public Version getVersionObject() {\n+  public VersionOrdinal getVersionObject() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0NTI2OA==", "bodyText": "same comment about retaining the use of Version in all serialization code.  We need assurance in place that we will never encounter an unknown ordinal during serialization/deserialization.", "url": "https://github.com/apache/geode/pull/5273#discussion_r446245268", "createdAt": "2020-06-26T15:13:31Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/main/java/org/apache/geode/internal/HeapDataOutputStream.java", "diffHunk": "@@ -48,7 +49,7 @@\n     org.apache.geode.internal.serialization.BufferDataOutputStream\n     implements ObjToByteArraySerializer, ByteBufferWriter {\n \n-  public HeapDataOutputStream(Version version) {\n+  public HeapDataOutputStream(VersionOrdinal version) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjI0ODMzMA==", "bodyText": "could this find the name of a Version and use it?  Alternatively just use \"VersionOrdinal\" instead of \"UNKNOWN\"", "url": "https://github.com/apache/geode/pull/5273#discussion_r446248330", "createdAt": "2020-06-26T15:18:57Z", "author": {"login": "bschuchardt"}, "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/VersionOrdinalImpl.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.internal.serialization;\n+\n+public class VersionOrdinalImpl implements VersionOrdinal {\n+\n+  protected final short ordinal;\n+\n+  public VersionOrdinalImpl(final short ordinal) {\n+    this.ordinal = ordinal;\n+  }\n+\n+  @Override\n+  public short ordinal() {\n+    return ordinal;\n+  }\n+\n+  @Override\n+  public int compareTo(final VersionOrdinal other) {\n+    if (other == null) {\n+      return 1;\n+    } else {\n+      return compareTo(other.ordinal());\n+    }\n+  }\n+\n+  /**\n+   * TODO: eliminate this legacy method in favor of requiring callers to construct a\n+   * VersionOrdinalImpl. Inline this logic up in compareTo(VersionOrdinal).\n+   */\n+  public int compareTo(final short other) {\n+    // short min/max can't overflow int, so use (a-b)\n+    final int thisOrdinal = this.ordinal;\n+    final int otherOrdinal = other;\n+    return thisOrdinal - otherOrdinal;\n+  }\n+\n+  @Override\n+  public boolean equals(final Object other) {\n+    if (other == this)\n+      return true;\n+    if (other instanceof VersionOrdinalImpl) {\n+      return this.ordinal == ((VersionOrdinalImpl) other).ordinal;\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  public boolean equals(final VersionOrdinal other) {\n+    return other != null && this.ordinal == other.ordinal();\n+  }\n+\n+  @Override\n+  public int hashCode() {\n+    int result = 17;\n+    final int mult = 37;\n+    result = mult * result + this.ordinal;\n+    return result;\n+  }\n+\n+  @Override\n+  public String toString() {\n+    return toString(ordinal);\n+  }\n+\n+  /**\n+   * TODO: eliminate this legacy method in favor of requiring callers to construct a\n+   * VersionOrdinalImpl. Inline this logic up in toString().\n+   */\n+  public static String toString(short ordinal) {\n+    return \"UNKNOWN[ordinal=\" + ordinal + ']';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NjI4MTE2", "url": "https://github.com/apache/geode/pull/5273#pullrequestreview-438628116", "createdAt": "2020-06-26T22:26:10Z", "commit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjoyNjoxMFrOGpwUnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMjoyNjoxMFrOGpwUnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQzNjUwOQ==", "bodyText": "we should have a null check on 'other' here", "url": "https://github.com/apache/geode/pull/5273#discussion_r446436509", "createdAt": "2020-06-26T22:26:10Z", "author": {"login": "luissson"}, "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/VersionOrdinalImpl.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.internal.serialization;\n+\n+public class VersionOrdinalImpl implements VersionOrdinal {\n+\n+  protected final short ordinal;\n+\n+  public VersionOrdinalImpl(final short ordinal) {\n+    this.ordinal = ordinal;\n+  }\n+\n+  @Override\n+  public short ordinal() {\n+    return ordinal;\n+  }\n+\n+  @Override\n+  public int compareTo(final VersionOrdinal other) {\n+    if (other == null) {\n+      return 1;\n+    } else {\n+      return compareTo(other.ordinal());\n+    }\n+  }\n+\n+  /**\n+   * TODO: eliminate this legacy method in favor of requiring callers to construct a\n+   * VersionOrdinalImpl. Inline this logic up in compareTo(VersionOrdinal).\n+   */\n+  public int compareTo(final short other) {\n+    // short min/max can't overflow int, so use (a-b)\n+    final int thisOrdinal = this.ordinal;\n+    final int otherOrdinal = other;\n+    return thisOrdinal - otherOrdinal;\n+  }\n+\n+  @Override\n+  public boolean equals(final Object other) {\n+    if (other == this)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM4NjM4Njg4", "url": "https://github.com/apache/geode/pull/5273#pullrequestreview-438638688", "createdAt": "2020-06-26T23:04:45Z", "commit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMzowNDo0NVrOGpw48w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMzowNDo0NVrOGpw48w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0NTgxMQ==", "bodyText": "the return here may be either Version or VersionOrdinal, do we want to upcast or downcast to ensure returning a single type? Doesn't appear to be a problem currently though", "url": "https://github.com/apache/geode/pull/5273#discussion_r446445811", "createdAt": "2020-06-26T23:04:45Z", "author": {"login": "luissson"}, "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/internal/AbstractSerializationContext.java", "diffHunk": "@@ -25,10 +26,10 @@\n  */\n public abstract class AbstractSerializationContext {\n \n-  <IO> Version getVersionForDataStream(final IO in) {\n+  <IO> VersionOrdinal getVersionForDataStream(final IO in) {\n     // check if this is a versioned data input\n     if (in instanceof VersionedDataStream) {\n-      final Version v = ((VersionedDataStream) in).getVersion();\n+      final VersionOrdinal v = ((VersionedDataStream) in).getVersion();\n       return v != null ? v : Version.getCurrentVersion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8ba7f23349b52d9558978a12cc0276618c4c921"}, "originalPosition": 18}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d063a77958dc70d828c7c167be3e24891ed2a836", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/d063a77958dc70d828c7c167be3e24891ed2a836", "committedDate": "2020-06-27T01:55:28Z", "message": "GEODE-8240: don't use VersionOrdinal in versioned streams"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91bcf6b46d3293e6cda764cf08cc1999035827f3", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/91bcf6b46d3293e6cda764cf08cc1999035827f3", "committedDate": "2020-06-27T16:17:13Z", "message": "GEODE-8240: fix compile error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2497fec767600845eef78fe56bb4d1215fa059b7", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/2497fec767600845eef78fe56bb4d1215fa059b7", "committedDate": "2020-06-27T16:58:49Z", "message": "GEODE-8240: fix core sanctionedDataSerializables.txt; introduce Versioning factory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "124fd801dc63bbddb157b1770711cc525dd27144", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/124fd801dc63bbddb157b1770711cc525dd27144", "committedDate": "2020-06-27T17:15:27Z", "message": "GEODE-8240: spA"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be8959930144f7ec8f203365dc8e0cfda8109a03", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/be8959930144f7ec8f203365dc8e0cfda8109a03", "committedDate": "2020-06-27T18:52:35Z", "message": "GEODE-8240: fix NPE in Configuration.fromData()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MDYxODQz", "url": "https://github.com/apache/geode/pull/5273#pullrequestreview-439061843", "createdAt": "2020-06-29T11:50:54Z", "commit": {"oid": "be8959930144f7ec8f203365dc8e0cfda8109a03"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTo1MDo1NFrOGqNPKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTo1MDo1NFrOGqNPKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxMDI0OQ==", "bodyText": "The shutdown command had also issues. That's why the variable was there initially in the test case.\nCould you add the execution of the shutdown command after the list members in order to verify that with your solution it works?\nOtherwise, the variable must be removed.", "url": "https://github.com/apache/geode/pull/5273#discussion_r446910249", "createdAt": "2020-06-29T11:50:54Z", "author": {"login": "albertogpz"}, "path": "geode-core/src/upgradeTest/java/org/apache/geode/internal/cache/rollingupgrade/RollingUpgradeDUnitTest.java", "diffHunk": "@@ -191,20 +207,26 @@ void doTestRollAll(String regionType, String objectType, String startingVersion)\n       }\n \n       putAndVerify(objectType, server1, regionName, 0, 10, server2);\n-      locator = rollLocatorToCurrent(locator, hostName, locatorPorts[0], getTestMethodName(),\n-          locatorString);\n+      locator =\n+          rollLocatorToCurrent(locator, hostName, locatorPort, locatorProps, getTestMethodName(),\n+              locatorString);\n \n       server1 = rollServerToCurrentAndCreateRegion(server1, regionType, testingDirs[0],\n-          shortcutName, regionName, locatorPorts);\n+          shortcutName, regionName, new int[] {locatorPort});\n       verifyValues(objectType, regionName, 0, 10, server1);\n       putAndVerify(objectType, server1, regionName, 5, 15, server2);\n       putAndVerify(objectType, server2, regionName, 10, 20, server1);\n \n       server2 = rollServerToCurrentAndCreateRegion(server2, regionType, testingDirs[1],\n-          shortcutName, regionName, locatorPorts);\n+          shortcutName, regionName, ports);\n       verifyValues(objectType, regionName, 0, 10, server2);\n       putAndVerify(objectType, server2, regionName, 15, 25, server1);\n \n+      String shutDownCommand = \"shutdown --include-locators=true\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be8959930144f7ec8f203365dc8e0cfda8109a03"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f582bba890a40ba700dd5f8dcd7273d10b5a5428", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/f582bba890a40ba700dd5f8dcd7273d10b5a5428", "committedDate": "2020-06-29T18:46:02Z", "message": "eliminate rolling upgrade test flakiness by eliminating gfsh"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5NTM0MzI0", "url": "https://github.com/apache/geode/pull/5273#pullrequestreview-439534324", "createdAt": "2020-06-29T22:08:00Z", "commit": {"oid": "f582bba890a40ba700dd5f8dcd7273d10b5a5428"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjowODowMFrOGqj7-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQyMjowODowMFrOGqj7-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzI4MjE3MA==", "bodyText": "VersionOrdinal's methods should take VersionOrdinal arguments.", "url": "https://github.com/apache/geode/pull/5273#discussion_r447282170", "createdAt": "2020-06-29T22:08:00Z", "author": {"login": "bschuchardt"}, "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/VersionOrdinal.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.internal.serialization;\n+\n+/**\n+ * VersionOrdinal is able to represent not only currently-known\n+ * Geode versions but future versions as well. This is necessary\n+ * because during rolling upgrades Geode manipulates member\n+ * identifiers for members running newer versions of the software.\n+ * In that case we receive the ordinal over the network\n+ * (serialization) but we don't know other version details such as\n+ * major/minor/patch version, which are known to the Version class.\n+ *\n+ * Implementations must define equals() and hashCode() based on\n+ * ordinal() result. And since this interface extends Comparable,\n+ * implementations must define compareTo() as well.\n+ *\n+ * Unlike Version (a subtype of VersionOrdinal which acts like an\n+ * enumerated type), VersionOrdinal does not, in general, guarantee\n+ * that if vo1.equals(vo2) then vo1 == vo2.\n+ *\n+ * Use the Versioning factory class to construct objects implementing\n+ * this interface. All instances of known versions are defined as\n+ * constants in the Version class, e.g. Version.GEODE_1_11_0\n+ */\n+public interface VersionOrdinal extends Comparable<VersionOrdinal> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f582bba890a40ba700dd5f8dcd7273d10b5a5428"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86c7f24f24c867177bdd737f2c068ac7a89b1744", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/86c7f24f24c867177bdd737f2c068ac7a89b1744", "committedDate": "2020-06-29T23:50:08Z", "message": "GEODE-8240: VersionOrdinalImpl unit test; correct signatures"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c34d0e73227837ac14aef49846c8069b81c713f4", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/c34d0e73227837ac14aef49846c8069b81c713f4", "committedDate": "2020-06-29T23:54:06Z", "message": "GEODE_8240: mod test to ensure we're using interface refs not class refs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMTQ4MzAw", "url": "https://github.com/apache/geode/pull/5273#pullrequestreview-440148300", "createdAt": "2020-06-30T15:43:37Z", "commit": {"oid": "c34d0e73227837ac14aef49846c8069b81c713f4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4495, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}