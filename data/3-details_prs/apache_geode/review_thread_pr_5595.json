{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MTQ2Njgy", "number": 5595, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoxODo1MVrOEq1_HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzozMjo1OFrOEq2Umw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzYwMTU2OnYy", "diffSide": "RIGHT", "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/util/LogExporter.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoxODo1MVrOHdSE6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMDoxMDo0N1rOHdeItA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2NjkyMA==", "bodyText": "By default, this follows the symbolic link. Just make sure this is expected.", "url": "https://github.com/apache/geode/pull/5595#discussion_r500466920", "createdAt": "2020-10-06T17:18:51Z", "author": {"login": "jchen21"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/util/LogExporter.java", "diffHunk": "@@ -181,12 +180,13 @@ private long filterAndSize(Path originalLogFile) throws IOException {\n   }\n \n   private List<Path> findFiles(Path workingDir, Predicate<Path> fileSelector) throws IOException {\n-    Stream<Path> selectedFiles/* = null */;\n     if (!workingDir.toFile().isDirectory()) {\n       return Collections.emptyList();\n     }\n-    selectedFiles = Files.list(workingDir).filter(fileSelector).filter(this.logFilter::acceptsFile);\n-\n-    return selectedFiles.collect(toList());\n+    return Files.list(workingDir)\n+        .filter(Files::isRegularFile)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09cd25d7fd9fb03430af84f2cdfed4793b2e6330"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUyOTM5OA==", "bodyText": "I hadn't thought about that. Is there a way to ensure that the path represents a regular file without following symbolic links?", "url": "https://github.com/apache/geode/pull/5595#discussion_r500529398", "createdAt": "2020-10-06T19:01:12Z", "author": {"login": "demery-pivotal"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/util/LogExporter.java", "diffHunk": "@@ -181,12 +180,13 @@ private long filterAndSize(Path originalLogFile) throws IOException {\n   }\n \n   private List<Path> findFiles(Path workingDir, Predicate<Path> fileSelector) throws IOException {\n-    Stream<Path> selectedFiles/* = null */;\n     if (!workingDir.toFile().isDirectory()) {\n       return Collections.emptyList();\n     }\n-    selectedFiles = Files.list(workingDir).filter(fileSelector).filter(this.logFilter::acceptsFile);\n-\n-    return selectedFiles.collect(toList());\n+    return Files.list(workingDir)\n+        .filter(Files::isRegularFile)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2NjkyMA=="}, "originalCommit": {"oid": "09cd25d7fd9fb03430af84f2cdfed4793b2e6330"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU3NjgxOA==", "bodyText": "You might want NOFOLLOW_LINKS.", "url": "https://github.com/apache/geode/pull/5595#discussion_r500576818", "createdAt": "2020-10-06T20:29:57Z", "author": {"login": "jchen21"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/util/LogExporter.java", "diffHunk": "@@ -181,12 +180,13 @@ private long filterAndSize(Path originalLogFile) throws IOException {\n   }\n \n   private List<Path> findFiles(Path workingDir, Predicate<Path> fileSelector) throws IOException {\n-    Stream<Path> selectedFiles/* = null */;\n     if (!workingDir.toFile().isDirectory()) {\n       return Collections.emptyList();\n     }\n-    selectedFiles = Files.list(workingDir).filter(fileSelector).filter(this.logFilter::acceptsFile);\n-\n-    return selectedFiles.collect(toList());\n+    return Files.list(workingDir)\n+        .filter(Files::isRegularFile)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2NjkyMA=="}, "originalCommit": {"oid": "09cd25d7fd9fb03430af84f2cdfed4793b2e6330"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDYxMDc3OQ==", "bodyText": "Here's a scenario: Let's say the path is a symbolic link, and it links to a regular file.\nMy understanding is:\n\nIf I use NOFOLLOW_LINKS, the exporter will skip the regular file.\nIf I omit NOFOLLOW_LINKS, the exporter will export the regular file.\n\nIs my understanding correct? If so, are you saying that it's best to ignore the regular file if the path we're testing is a symbolic link?", "url": "https://github.com/apache/geode/pull/5595#discussion_r500610779", "createdAt": "2020-10-06T21:37:24Z", "author": {"login": "demery-pivotal"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/util/LogExporter.java", "diffHunk": "@@ -181,12 +180,13 @@ private long filterAndSize(Path originalLogFile) throws IOException {\n   }\n \n   private List<Path> findFiles(Path workingDir, Predicate<Path> fileSelector) throws IOException {\n-    Stream<Path> selectedFiles/* = null */;\n     if (!workingDir.toFile().isDirectory()) {\n       return Collections.emptyList();\n     }\n-    selectedFiles = Files.list(workingDir).filter(fileSelector).filter(this.logFilter::acceptsFile);\n-\n-    return selectedFiles.collect(toList());\n+    return Files.list(workingDir)\n+        .filter(Files::isRegularFile)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2NjkyMA=="}, "originalCommit": {"oid": "09cd25d7fd9fb03430af84f2cdfed4793b2e6330"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0Mjk4OA==", "bodyText": "If you use NOFOLLOW_LINKS, for the scenario, Files::isRegularFile returns false.\nIf you omit NOFOLLOW_LINKS, Files::isRegularFile returns true.\nI haven't tried it with the exporter though.", "url": "https://github.com/apache/geode/pull/5595#discussion_r500642988", "createdAt": "2020-10-06T22:59:59Z", "author": {"login": "jchen21"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/util/LogExporter.java", "diffHunk": "@@ -181,12 +180,13 @@ private long filterAndSize(Path originalLogFile) throws IOException {\n   }\n \n   private List<Path> findFiles(Path workingDir, Predicate<Path> fileSelector) throws IOException {\n-    Stream<Path> selectedFiles/* = null */;\n     if (!workingDir.toFile().isDirectory()) {\n       return Collections.emptyList();\n     }\n-    selectedFiles = Files.list(workingDir).filter(fileSelector).filter(this.logFilter::acceptsFile);\n-\n-    return selectedFiles.collect(toList());\n+    return Files.list(workingDir)\n+        .filter(Files::isRegularFile)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2NjkyMA=="}, "originalCommit": {"oid": "09cd25d7fd9fb03430af84f2cdfed4793b2e6330"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY0OTEzMA==", "bodyText": "Yes, that's what I thought, and I verified with some experiments (which did not involve the exporter).\nMy question remains: If the path we're testing is a symbolic link, are you saying that you want to ignore the file it links to? If so, what makes you want to skip the file in that case?\nOne possibility: The link links to a file in the same dir, which would lead us to export the content twice (once via the file, and once via the link to the file). We could solve this by resolving the real path to the file, and collecting the matching files into a Set instead of a List.\nAnother possibility: The link links to a file in some other directory, and some concern makes you not want to read the file from the other directory.", "url": "https://github.com/apache/geode/pull/5595#discussion_r500649130", "createdAt": "2020-10-06T23:20:00Z", "author": {"login": "demery-pivotal"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/util/LogExporter.java", "diffHunk": "@@ -181,12 +180,13 @@ private long filterAndSize(Path originalLogFile) throws IOException {\n   }\n \n   private List<Path> findFiles(Path workingDir, Predicate<Path> fileSelector) throws IOException {\n-    Stream<Path> selectedFiles/* = null */;\n     if (!workingDir.toFile().isDirectory()) {\n       return Collections.emptyList();\n     }\n-    selectedFiles = Files.list(workingDir).filter(fileSelector).filter(this.logFilter::acceptsFile);\n-\n-    return selectedFiles.collect(toList());\n+    return Files.list(workingDir)\n+        .filter(Files::isRegularFile)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2NjkyMA=="}, "originalCommit": {"oid": "09cd25d7fd9fb03430af84f2cdfed4793b2e6330"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY1NzM4Mw==", "bodyText": "No, I am not saying I want to ignore the file it links to. Actually, I am not sure when it should follow the link, or when it should not. Based on my understanding, most likely, it should follow the link. You probably have more context than I have. What I am trying to say is that Files::isRegularFile has an option NOFOLLOW_LINKS for symbolic link. And symbolic link could be a tricky case. As long as it works for the scenario as you expect, it should be good.", "url": "https://github.com/apache/geode/pull/5595#discussion_r500657383", "createdAt": "2020-10-06T23:47:14Z", "author": {"login": "jchen21"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/util/LogExporter.java", "diffHunk": "@@ -181,12 +180,13 @@ private long filterAndSize(Path originalLogFile) throws IOException {\n   }\n \n   private List<Path> findFiles(Path workingDir, Predicate<Path> fileSelector) throws IOException {\n-    Stream<Path> selectedFiles/* = null */;\n     if (!workingDir.toFile().isDirectory()) {\n       return Collections.emptyList();\n     }\n-    selectedFiles = Files.list(workingDir).filter(fileSelector).filter(this.logFilter::acceptsFile);\n-\n-    return selectedFiles.collect(toList());\n+    return Files.list(workingDir)\n+        .filter(Files::isRegularFile)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2NjkyMA=="}, "originalCommit": {"oid": "09cd25d7fd9fb03430af84f2cdfed4793b2e6330"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY2NDUwMA==", "bodyText": "Okay. I'll merge this, because it fixes the problem of trying to read directories, but will otherwise behave as before. In particular, before and after this fix it follows symbolic links when exporting files.\nAs for whether we ought to follow symbolic links when we're exporting, I'm confident I have no more context than you do about that ;-)", "url": "https://github.com/apache/geode/pull/5595#discussion_r500664500", "createdAt": "2020-10-07T00:10:47Z", "author": {"login": "demery-pivotal"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/util/LogExporter.java", "diffHunk": "@@ -181,12 +180,13 @@ private long filterAndSize(Path originalLogFile) throws IOException {\n   }\n \n   private List<Path> findFiles(Path workingDir, Predicate<Path> fileSelector) throws IOException {\n-    Stream<Path> selectedFiles/* = null */;\n     if (!workingDir.toFile().isDirectory()) {\n       return Collections.emptyList();\n     }\n-    selectedFiles = Files.list(workingDir).filter(fileSelector).filter(this.logFilter::acceptsFile);\n-\n-    return selectedFiles.collect(toList());\n+    return Files.list(workingDir)\n+        .filter(Files::isRegularFile)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2NjkyMA=="}, "originalCommit": {"oid": "09cd25d7fd9fb03430af84f2cdfed4793b2e6330"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzY1NjU5OnYy", "diffSide": "RIGHT", "path": "geode-gfsh/src/integrationTest/java/org/apache/geode/management/internal/cli/util/LogExporterIntegrationTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzozMjo1OFrOHdSnzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxOTowMzo1M1rOHdV-dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3NTg1NQ==", "bodyText": "Not sure why this test is @ignore. Any change to the test is not executed.", "url": "https://github.com/apache/geode/pull/5595#discussion_r500475855", "createdAt": "2020-10-06T17:32:58Z", "author": {"login": "jchen21"}, "path": "geode-gfsh/src/integrationTest/java/org/apache/geode/management/internal/cli/util/LogExporterIntegrationTest.java", "diffHunk": "@@ -50,127 +48,146 @@\n \n @Category({GfshTest.class, LoggingTest.class})\n public class LogExporterIntegrationTest {\n+  @Rule\n+  public ServerStarterRule server = new ServerStarterRule();\n \n   private final LogFilter filter = new LogFilter(Level.INFO, null, null);\n \n-  private LogExporter logExporter;\n-  private Properties properties;\n-\n-  @Rule\n-  public ServerStarterRule server = new ServerStarterRule();\n+  public Path serverFilesDir;\n \n   @Before\n-  public void before() {\n-    properties = new Properties();\n-    // make sure the server's working dir has no log files or stats file to begin with, since in\n-    // some tests we are asserting on the # of log files and stats files created by the server\n-    File workingDir = server.getWorkingDir();\n-    Arrays.stream(workingDir.listFiles())\n-        .filter(f -> (f.getName().endsWith(\".log\") || f.getName().endsWith(\".gfs\")))\n-        .forEach(FileUtils::deleteQuietly);\n+  public void createServerFilesDir() throws IOException {\n+    // Name the directory after this test instance and the Gradle test worker, to ensure that tests\n+    // running in parallel use different directories.\n+    String testRunnerID = System.getProperty(\"org.gradle.test.worker\", \"standalone\");\n+    int testInstanceID = System.identityHashCode(this);\n+    String className = getClass().getSimpleName();\n+    String dirName = String.format(\"%s-%x-%s\", className, testInstanceID, testRunnerID);\n+    serverFilesDir = Files.createDirectories(Paths.get(dirName)).normalize().toAbsolutePath();\n+  }\n+\n+  @After\n+  public void deleteServerFilesDir() {\n+    FileUtils.deleteQuietly(serverFilesDir.toFile());\n   }\n \n   @Test\n   public void serverStartedWithWrongSuffix() throws Exception {\n-    properties.setProperty(LOG_FILE, new File(\"test.txt\").getAbsolutePath());\n-    properties.setProperty(STATISTIC_ARCHIVE_FILE, \"archive.archive\");\n-    server.withProperties(properties).startServer();\n-    File serverWorkingDir = server.getWorkingDir();\n-\n-    logExporter = new LogExporter(filter, new File(serverWorkingDir, \"test.log\"),\n-        new File(serverWorkingDir, \"stats.gfs\"));\n-    List<Path> logFiles = logExporter.findLogFiles(serverWorkingDir.toPath());\n-    assertThat(logFiles).isEmpty();\n-\n-    List<Path> statsFiles = logExporter.findStatFiles(serverWorkingDir.toPath());\n-    assertThat(statsFiles).isEmpty();\n+    String logFileNameWithWrongSuffix = \"test.txt\";\n+    String statsFileNameWithWrongSuffix = \"archive.archive\";\n+\n+    Path logFile = serverFilesDir.resolve(logFileNameWithWrongSuffix);\n+    Path statsFile = serverFilesDir.resolve(statsFileNameWithWrongSuffix);\n+\n+    server.withProperty(LOG_FILE, logFile.toString())\n+        .withProperty(STATISTIC_ARCHIVE_FILE, statsFile.toString())\n+        .startServer();\n+\n+    LogExporter logExporter = new LogExporter(filter, null, null);\n+    List<Path> logFiles = logExporter.findLogFiles(serverFilesDir);\n+\n+    assertThat(logFiles)\n+        .as(\"log files\")\n+        .isEmpty();\n+\n+    List<Path> statsFiles = logExporter.findStatFiles(serverFilesDir);\n+    assertThat(statsFiles)\n+        .as(\"stat files\")\n+        .isEmpty();\n   }\n \n   @Test\n   public void serverStartedWithCorrectSuffix() throws Exception {\n-    // (\"relative log file is problematic in the test environment\")\n-    properties.setProperty(LOG_FILE, new File(\"test.log\").getAbsolutePath());\n-    properties.setProperty(STATISTIC_ARCHIVE_FILE, \"archive.gfs\");\n-    server.withProperties(properties).startServer();\n-    File serverWorkingDir = server.getWorkingDir();\n-\n-    logExporter = new LogExporter(filter, new File(serverWorkingDir, \"test.log\"),\n-        new File(serverWorkingDir, \"archive.gfs\"));\n-    List<Path> logFiles = logExporter.findLogFiles(serverWorkingDir.toPath());\n-    assertThat(logFiles).hasSize(1);\n-    assertThat(logFiles.get(0)).hasFileName(\"test.log\");\n-\n-    List<Path> statsFiles = logExporter.findStatFiles(serverWorkingDir.toPath());\n-    assertThat(statsFiles).hasSize(1);\n-    assertThat(statsFiles.get(0)).hasFileName(\"archive.gfs\");\n+    String logFileName = \"test.log\";\n+    String statsFileName = \"archive.gfs\";\n+    Path logFile = serverFilesDir.resolve(logFileName);\n+    Path statsFile = serverFilesDir.resolve(statsFileName);\n+\n+    server.withProperty(LOG_FILE, logFile.toString())\n+        .withProperty(STATISTIC_ARCHIVE_FILE, statsFile.toString())\n+        .startServer();\n+\n+    LogExporter logExporter = new LogExporter(filter, null, null);\n+    List<Path> logFiles = logExporter.findLogFiles(serverFilesDir);\n+\n+    assertThat(logFiles)\n+        .as(\"log files\")\n+        .hasSize(1);\n+    assertThat(logFiles.get(0)).hasFileName(logFileName);\n+\n+    List<Path> statsFiles = logExporter.findStatFiles(serverFilesDir);\n+    assertThat(statsFiles)\n+        .as(\"stat files\")\n+        .hasSize(1);\n+    assertThat(statsFiles.get(0)).hasFileName(statsFileName);\n   }\n \n   @Test\n   @Ignore(\"GEODE-2574: fix .gz suffix\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09cd25d7fd9fb03430af84f2cdfed4793b2e6330"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDUzMDgwNg==", "bodyText": "Though the test is ignored, I updated it to match the style of the tests I changed. I left it ignored because the system fails the test.", "url": "https://github.com/apache/geode/pull/5595#discussion_r500530806", "createdAt": "2020-10-06T19:03:53Z", "author": {"login": "demery-pivotal"}, "path": "geode-gfsh/src/integrationTest/java/org/apache/geode/management/internal/cli/util/LogExporterIntegrationTest.java", "diffHunk": "@@ -50,127 +48,146 @@\n \n @Category({GfshTest.class, LoggingTest.class})\n public class LogExporterIntegrationTest {\n+  @Rule\n+  public ServerStarterRule server = new ServerStarterRule();\n \n   private final LogFilter filter = new LogFilter(Level.INFO, null, null);\n \n-  private LogExporter logExporter;\n-  private Properties properties;\n-\n-  @Rule\n-  public ServerStarterRule server = new ServerStarterRule();\n+  public Path serverFilesDir;\n \n   @Before\n-  public void before() {\n-    properties = new Properties();\n-    // make sure the server's working dir has no log files or stats file to begin with, since in\n-    // some tests we are asserting on the # of log files and stats files created by the server\n-    File workingDir = server.getWorkingDir();\n-    Arrays.stream(workingDir.listFiles())\n-        .filter(f -> (f.getName().endsWith(\".log\") || f.getName().endsWith(\".gfs\")))\n-        .forEach(FileUtils::deleteQuietly);\n+  public void createServerFilesDir() throws IOException {\n+    // Name the directory after this test instance and the Gradle test worker, to ensure that tests\n+    // running in parallel use different directories.\n+    String testRunnerID = System.getProperty(\"org.gradle.test.worker\", \"standalone\");\n+    int testInstanceID = System.identityHashCode(this);\n+    String className = getClass().getSimpleName();\n+    String dirName = String.format(\"%s-%x-%s\", className, testInstanceID, testRunnerID);\n+    serverFilesDir = Files.createDirectories(Paths.get(dirName)).normalize().toAbsolutePath();\n+  }\n+\n+  @After\n+  public void deleteServerFilesDir() {\n+    FileUtils.deleteQuietly(serverFilesDir.toFile());\n   }\n \n   @Test\n   public void serverStartedWithWrongSuffix() throws Exception {\n-    properties.setProperty(LOG_FILE, new File(\"test.txt\").getAbsolutePath());\n-    properties.setProperty(STATISTIC_ARCHIVE_FILE, \"archive.archive\");\n-    server.withProperties(properties).startServer();\n-    File serverWorkingDir = server.getWorkingDir();\n-\n-    logExporter = new LogExporter(filter, new File(serverWorkingDir, \"test.log\"),\n-        new File(serverWorkingDir, \"stats.gfs\"));\n-    List<Path> logFiles = logExporter.findLogFiles(serverWorkingDir.toPath());\n-    assertThat(logFiles).isEmpty();\n-\n-    List<Path> statsFiles = logExporter.findStatFiles(serverWorkingDir.toPath());\n-    assertThat(statsFiles).isEmpty();\n+    String logFileNameWithWrongSuffix = \"test.txt\";\n+    String statsFileNameWithWrongSuffix = \"archive.archive\";\n+\n+    Path logFile = serverFilesDir.resolve(logFileNameWithWrongSuffix);\n+    Path statsFile = serverFilesDir.resolve(statsFileNameWithWrongSuffix);\n+\n+    server.withProperty(LOG_FILE, logFile.toString())\n+        .withProperty(STATISTIC_ARCHIVE_FILE, statsFile.toString())\n+        .startServer();\n+\n+    LogExporter logExporter = new LogExporter(filter, null, null);\n+    List<Path> logFiles = logExporter.findLogFiles(serverFilesDir);\n+\n+    assertThat(logFiles)\n+        .as(\"log files\")\n+        .isEmpty();\n+\n+    List<Path> statsFiles = logExporter.findStatFiles(serverFilesDir);\n+    assertThat(statsFiles)\n+        .as(\"stat files\")\n+        .isEmpty();\n   }\n \n   @Test\n   public void serverStartedWithCorrectSuffix() throws Exception {\n-    // (\"relative log file is problematic in the test environment\")\n-    properties.setProperty(LOG_FILE, new File(\"test.log\").getAbsolutePath());\n-    properties.setProperty(STATISTIC_ARCHIVE_FILE, \"archive.gfs\");\n-    server.withProperties(properties).startServer();\n-    File serverWorkingDir = server.getWorkingDir();\n-\n-    logExporter = new LogExporter(filter, new File(serverWorkingDir, \"test.log\"),\n-        new File(serverWorkingDir, \"archive.gfs\"));\n-    List<Path> logFiles = logExporter.findLogFiles(serverWorkingDir.toPath());\n-    assertThat(logFiles).hasSize(1);\n-    assertThat(logFiles.get(0)).hasFileName(\"test.log\");\n-\n-    List<Path> statsFiles = logExporter.findStatFiles(serverWorkingDir.toPath());\n-    assertThat(statsFiles).hasSize(1);\n-    assertThat(statsFiles.get(0)).hasFileName(\"archive.gfs\");\n+    String logFileName = \"test.log\";\n+    String statsFileName = \"archive.gfs\";\n+    Path logFile = serverFilesDir.resolve(logFileName);\n+    Path statsFile = serverFilesDir.resolve(statsFileName);\n+\n+    server.withProperty(LOG_FILE, logFile.toString())\n+        .withProperty(STATISTIC_ARCHIVE_FILE, statsFile.toString())\n+        .startServer();\n+\n+    LogExporter logExporter = new LogExporter(filter, null, null);\n+    List<Path> logFiles = logExporter.findLogFiles(serverFilesDir);\n+\n+    assertThat(logFiles)\n+        .as(\"log files\")\n+        .hasSize(1);\n+    assertThat(logFiles.get(0)).hasFileName(logFileName);\n+\n+    List<Path> statsFiles = logExporter.findStatFiles(serverFilesDir);\n+    assertThat(statsFiles)\n+        .as(\"stat files\")\n+        .hasSize(1);\n+    assertThat(statsFiles.get(0)).hasFileName(statsFileName);\n   }\n \n   @Test\n   @Ignore(\"GEODE-2574: fix .gz suffix\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3NTg1NQ=="}, "originalCommit": {"oid": "09cd25d7fd9fb03430af84f2cdfed4793b2e6330"}, "originalPosition": 143}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4676, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}