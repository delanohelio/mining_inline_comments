{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxMTcwNTI1", "number": 4830, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo0Njo0M1rODpolKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo1MDoxN1rODpop3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTgzMDgxOnYy", "diffSide": "RIGHT", "path": "geode-assembly/src/acceptanceTest/resources/org/apache/geode/client/docker-compose.yml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo0Njo0M1rOF4735Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo0Njo0M1rOF4735Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI0NTU0MQ==", "bodyText": "Delete commented code.", "url": "https://github.com/apache/geode/pull/4830#discussion_r395245541", "createdAt": "2020-03-19T18:46:43Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-assembly/src/acceptanceTest/resources/org/apache/geode/client/docker-compose.yml", "diffHunk": "@@ -0,0 +1,48 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to You under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+#      http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+version: '3'\n+services:\n+  geode:\n+    container_name: 'geode'\n+    image: 'geode:develop'\n+    expose:\n+      - '10334'\n+      - '40404'\n+#   entrypoint: gfsh", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44783d9b843f0c60debeb4d3adeede1add9e79a1"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTg0MDA0OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/cache/client/SocketFactoryDUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo0OToyM1rOF4791g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo0OToyM1rOF4791g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI0NzA2Mg==", "bodyText": "Please don't leave raw type warnings. Use proper generic types or suppress warnings if generics can't work here.\npublic static class TestFunction implements Function<Void> ... {\n...\npublic void execute<FunctionContext<Void> context);\n}", "url": "https://github.com/apache/geode/pull/4830#discussion_r395247062", "createdAt": "2020-03-19T18:49:23Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/cache/client/SocketFactoryDUnitTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.net.SocketAddress;\n+import java.util.Arrays;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.DataSerializable;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+\n+public class SocketFactoryDUnitTest {\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+  private int locatorPort;\n+  private int serverPort;\n+\n+  @Before\n+  public void createCluster() {\n+    locatorPort = cluster.startLocatorVM(0).getPort();\n+    serverPort = cluster.startServerVM(1, locatorPort).getPort();\n+  }\n+\n+  @Test\n+  public void customSocketFactoryUsedForLocators() throws IOException {\n+    ClientCache client = new ClientCacheFactory()\n+        // Add a locator with the wrong hostname\n+        .addPoolLocator(\"notarealhostname\", locatorPort)\n+        // Set a socket factory that switches the hostname back\n+        .setPoolSocketFactory(new ChangeHostSocketFactory(\"localhost\"))\n+        .create();\n+\n+    // Verify the socket factory switched the hostname so we can connect\n+    verifyConnection(client);\n+  }\n+\n+  @Test\n+  public void customSocketFactoryUsedForServers() {\n+    ClientCache client = new ClientCacheFactory()\n+        // Add a locator with the wrong hostname\n+        .addPoolServer(\"notarealhostname\", serverPort)\n+        // Set a socket factory that switches the hostname back\n+        .setPoolSocketFactory(new ChangeHostSocketFactory(\"localhost\"))\n+        .create();\n+\n+\n+    // Verify the socket factory switched the hostname so we can connect\n+    verifyConnection(client);\n+  }\n+\n+  private void verifyConnection(ClientCache client) {\n+    // Verify connectivity with servers\n+    Object functionResult =\n+        FunctionService.onServers(client).execute(new TestFunction()).getResult();\n+\n+    assertThat(functionResult).isEqualTo(Arrays.asList(\"test\"));\n+  }\n+\n+\n+  public static class TestFunction implements Function, DataSerializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44783d9b843f0c60debeb4d3adeede1add9e79a1"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTg0Mjg1OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/cache/client/SocketFactoryDUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxODo1MDoxN1rOF47_yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQyMzo0Njo0OVrOF5EE4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI0NzU2Mw==", "bodyText": "Cleanup rawtype warnings.", "url": "https://github.com/apache/geode/pull/4830#discussion_r395247563", "createdAt": "2020-03-19T18:50:17Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/cache/client/SocketFactoryDUnitTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.net.SocketAddress;\n+import java.util.Arrays;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.DataSerializable;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+\n+public class SocketFactoryDUnitTest {\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+  private int locatorPort;\n+  private int serverPort;\n+\n+  @Before\n+  public void createCluster() {\n+    locatorPort = cluster.startLocatorVM(0).getPort();\n+    serverPort = cluster.startServerVM(1, locatorPort).getPort();\n+  }\n+\n+  @Test\n+  public void customSocketFactoryUsedForLocators() throws IOException {\n+    ClientCache client = new ClientCacheFactory()\n+        // Add a locator with the wrong hostname\n+        .addPoolLocator(\"notarealhostname\", locatorPort)\n+        // Set a socket factory that switches the hostname back\n+        .setPoolSocketFactory(new ChangeHostSocketFactory(\"localhost\"))\n+        .create();\n+\n+    // Verify the socket factory switched the hostname so we can connect\n+    verifyConnection(client);\n+  }\n+\n+  @Test\n+  public void customSocketFactoryUsedForServers() {\n+    ClientCache client = new ClientCacheFactory()\n+        // Add a locator with the wrong hostname\n+        .addPoolServer(\"notarealhostname\", serverPort)\n+        // Set a socket factory that switches the hostname back\n+        .setPoolSocketFactory(new ChangeHostSocketFactory(\"localhost\"))\n+        .create();\n+\n+\n+    // Verify the socket factory switched the hostname so we can connect\n+    verifyConnection(client);\n+  }\n+\n+  private void verifyConnection(ClientCache client) {\n+    // Verify connectivity with servers\n+    Object functionResult =\n+        FunctionService.onServers(client).execute(new TestFunction()).getResult();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44783d9b843f0c60debeb4d3adeede1add9e79a1"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTM3OTkzNg==", "bodyText": "Done.", "url": "https://github.com/apache/geode/pull/4830#discussion_r395379936", "createdAt": "2020-03-19T23:46:49Z", "author": {"login": "upthewaterspout"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/cache/client/SocketFactoryDUnitTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.client;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.net.SocketAddress;\n+import java.util.Arrays;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.DataSerializable;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+\n+public class SocketFactoryDUnitTest {\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+  private int locatorPort;\n+  private int serverPort;\n+\n+  @Before\n+  public void createCluster() {\n+    locatorPort = cluster.startLocatorVM(0).getPort();\n+    serverPort = cluster.startServerVM(1, locatorPort).getPort();\n+  }\n+\n+  @Test\n+  public void customSocketFactoryUsedForLocators() throws IOException {\n+    ClientCache client = new ClientCacheFactory()\n+        // Add a locator with the wrong hostname\n+        .addPoolLocator(\"notarealhostname\", locatorPort)\n+        // Set a socket factory that switches the hostname back\n+        .setPoolSocketFactory(new ChangeHostSocketFactory(\"localhost\"))\n+        .create();\n+\n+    // Verify the socket factory switched the hostname so we can connect\n+    verifyConnection(client);\n+  }\n+\n+  @Test\n+  public void customSocketFactoryUsedForServers() {\n+    ClientCache client = new ClientCacheFactory()\n+        // Add a locator with the wrong hostname\n+        .addPoolServer(\"notarealhostname\", serverPort)\n+        // Set a socket factory that switches the hostname back\n+        .setPoolSocketFactory(new ChangeHostSocketFactory(\"localhost\"))\n+        .create();\n+\n+\n+    // Verify the socket factory switched the hostname so we can connect\n+    verifyConnection(client);\n+  }\n+\n+  private void verifyConnection(ClientCache client) {\n+    // Verify connectivity with servers\n+    Object functionResult =\n+        FunctionService.onServers(client).execute(new TestFunction()).getResult();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTI0NzU2Mw=="}, "originalCommit": {"oid": "44783d9b843f0c60debeb4d3adeede1add9e79a1"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4400, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}