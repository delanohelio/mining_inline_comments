{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNjM3NjAw", "number": 5054, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNzozODo1OFrOD5gmHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNzozODo1OFrOD5gmHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjI5NDcwOnYy", "diffSide": "RIGHT", "path": "geode-dunit/src/main/java/org/apache/geode/management/internal/cli/commands/RebalanceCommandDistributedTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNzozODo1OFrOGQ0aog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODoyNToyMVrOGRIwnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4OTE4Ng==", "bodyText": "Could the ints added to the keys and values be cleared up a bit? There doesn't seem to be any reason to add 200 to them here, and if the number of entries is extracted to a constant, then it can be used in the invocation on server2 to prevent overwriting the existing data.", "url": "https://github.com/apache/geode/pull/5054#discussion_r420289186", "createdAt": "2020-05-05T17:38:58Z", "author": {"login": "DonalEvans"}, "path": "geode-dunit/src/main/java/org/apache/geode/management/internal/cli/commands/RebalanceCommandDistributedTest.java", "diffHunk": "@@ -35,40 +37,91 @@\n import org.apache.geode.test.dunit.rules.MemberVM;\n import org.apache.geode.test.junit.assertions.TabularResultModelAssert;\n import org.apache.geode.test.junit.rules.GfshCommandRule;\n+import org.apache.geode.test.junit.rules.MemberStarterRule;\n+\n+@RunWith(Parameterized.class)\n+public class RebalanceCommandDistributedTest {\n+  private static final String REGION_ONE_NAME = \"region-1\";\n+  private static final String REGION_TWO_NAME = \"region-2\";\n+  private static final String REGION_THREE_NAME = \"region-3\";\n+\n+  @Rule\n+  public GfshCommandRule gfsh = new GfshCommandRule();\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n \n-@SuppressWarnings(\"serial\")\n-public class RebalanceCommandDistributedTestBase {\n+  protected MemberVM locator, server1, server2;\n \n-  @ClassRule\n-  public static ClusterStartupRule cluster = new ClusterStartupRule();\n+  @Parameterized.Parameters(name = \"ConnectionType:{0}\")\n+  public static GfshCommandRule.PortType[] connectionTypes() {\n+    return new GfshCommandRule.PortType[] {http, jmxManager};\n+  }\n \n-  @ClassRule\n-  public static GfshCommandRule gfsh = new GfshCommandRule();\n+  @Parameterized.Parameter\n+  public static GfshCommandRule.PortType portType;\n \n-  protected static MemberVM locator, server1, server2, server3;\n+  private void setUpRegions() {\n+    server1.invoke(() -> {\n+      Cache cache = ClusterStartupRule.getCache();\n+      assertThat(cache).isNotNull();\n+      RegionFactory<String, String> dataRegionFactory =\n+          cache.createRegionFactory(RegionShortcut.PARTITION);\n+      Region<String, String> region = dataRegionFactory.create(REGION_ONE_NAME);\n+      for (int i = 0; i < 10; i++) {\n+        region.put(\"key\" + (i + 200), \"value\" + (i + 200));\n+      }\n+      region = dataRegionFactory.create(REGION_TWO_NAME);\n+      for (int i = 0; i < 100; i++) {\n+        region.put(\"key\" + (i + 200), \"value\" + (i + 200));\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "feb052e71cee12a5e7a2ca72809f9ad07a908e44"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyMjQ5Mg==", "bodyText": "I actually didn't add these tests and the entries looked a bit weird to me as well, I didn't want to change this but it makes sense, will do it, thanks.", "url": "https://github.com/apache/geode/pull/5054#discussion_r420622492", "createdAt": "2020-05-06T08:25:21Z", "author": {"login": "jujoramos"}, "path": "geode-dunit/src/main/java/org/apache/geode/management/internal/cli/commands/RebalanceCommandDistributedTest.java", "diffHunk": "@@ -35,40 +37,91 @@\n import org.apache.geode.test.dunit.rules.MemberVM;\n import org.apache.geode.test.junit.assertions.TabularResultModelAssert;\n import org.apache.geode.test.junit.rules.GfshCommandRule;\n+import org.apache.geode.test.junit.rules.MemberStarterRule;\n+\n+@RunWith(Parameterized.class)\n+public class RebalanceCommandDistributedTest {\n+  private static final String REGION_ONE_NAME = \"region-1\";\n+  private static final String REGION_TWO_NAME = \"region-2\";\n+  private static final String REGION_THREE_NAME = \"region-3\";\n+\n+  @Rule\n+  public GfshCommandRule gfsh = new GfshCommandRule();\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n \n-@SuppressWarnings(\"serial\")\n-public class RebalanceCommandDistributedTestBase {\n+  protected MemberVM locator, server1, server2;\n \n-  @ClassRule\n-  public static ClusterStartupRule cluster = new ClusterStartupRule();\n+  @Parameterized.Parameters(name = \"ConnectionType:{0}\")\n+  public static GfshCommandRule.PortType[] connectionTypes() {\n+    return new GfshCommandRule.PortType[] {http, jmxManager};\n+  }\n \n-  @ClassRule\n-  public static GfshCommandRule gfsh = new GfshCommandRule();\n+  @Parameterized.Parameter\n+  public static GfshCommandRule.PortType portType;\n \n-  protected static MemberVM locator, server1, server2, server3;\n+  private void setUpRegions() {\n+    server1.invoke(() -> {\n+      Cache cache = ClusterStartupRule.getCache();\n+      assertThat(cache).isNotNull();\n+      RegionFactory<String, String> dataRegionFactory =\n+          cache.createRegionFactory(RegionShortcut.PARTITION);\n+      Region<String, String> region = dataRegionFactory.create(REGION_ONE_NAME);\n+      for (int i = 0; i < 10; i++) {\n+        region.put(\"key\" + (i + 200), \"value\" + (i + 200));\n+      }\n+      region = dataRegionFactory.create(REGION_TWO_NAME);\n+      for (int i = 0; i < 100; i++) {\n+        region.put(\"key\" + (i + 200), \"value\" + (i + 200));\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI4OTE4Ng=="}, "originalCommit": {"oid": "feb052e71cee12a5e7a2ca72809f9ad07a908e44"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4178, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}