{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2MzY3OTU4", "number": 4977, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjo1NToxMFrOD03Jkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzozNjoxMlrOD1BN0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzU2MTE0OnYy", "diffSide": "RIGHT", "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/data/Repository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjo1NToxMFrOGKAx5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMDo1MzoyN1rOGKR2sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE1MTcxNg==", "bodyText": "It would be a good idea to document the the Object credentials here is the object that will be put in the jmx environment for connection: jmx.remote.credentials", "url": "https://github.com/apache/geode/pull/4977#discussion_r413151716", "createdAt": "2020-04-22T16:55:10Z", "author": {"login": "jinmeiliao"}, "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/data/Repository.java", "diffHunk": "@@ -80,8 +88,95 @@ public Repository(OAuth2AuthorizedClientService authorizedClientService,\n     this.clusterFactory = clusterFactory;\n   }\n \n+  /**\n+   * this will return a cluster already connected to the geode jmx manager for the user in the\n+   * request\n+   * <p>\n+   * But for multi-user connections to gemfireJMX, i.e pulse that uses gemfire integrated security,\n+   * we will need to get the username from the context\n+   */\n+  public Cluster getCluster() {\n+    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n+    if (authentication == null) {\n+      return null;\n+    }\n+\n+    if (authentication instanceof OAuth2AuthenticationToken) {\n+      return getClusterWithAuthenticationToken((OAuth2AuthenticationToken) authentication);\n+    }\n+\n+    return getClusterWithUserNameAndPassword(authentication.getName(), null);\n+  }\n+\n+  public Cluster getClusterWithUserNameAndPassword(String userName, String password) {\n+    String[] credentials = {userName, password};\n+    return getClusterWithCredentials(userName, credentials);\n+  }\n+\n+  public Cluster getClusterWithCredentials(String userName, Object credentials) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bb56b1151f1bb86c6b435a1a0f2c0d2921f6bf5"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQzMTQ3NA==", "bodyText": "Done.", "url": "https://github.com/apache/geode/pull/4977#discussion_r413431474", "createdAt": "2020-04-23T00:53:27Z", "author": {"login": "demery-pivotal"}, "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/data/Repository.java", "diffHunk": "@@ -80,8 +88,95 @@ public Repository(OAuth2AuthorizedClientService authorizedClientService,\n     this.clusterFactory = clusterFactory;\n   }\n \n+  /**\n+   * this will return a cluster already connected to the geode jmx manager for the user in the\n+   * request\n+   * <p>\n+   * But for multi-user connections to gemfireJMX, i.e pulse that uses gemfire integrated security,\n+   * we will need to get the username from the context\n+   */\n+  public Cluster getCluster() {\n+    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n+    if (authentication == null) {\n+      return null;\n+    }\n+\n+    if (authentication instanceof OAuth2AuthenticationToken) {\n+      return getClusterWithAuthenticationToken((OAuth2AuthenticationToken) authentication);\n+    }\n+\n+    return getClusterWithUserNameAndPassword(authentication.getName(), null);\n+  }\n+\n+  public Cluster getClusterWithUserNameAndPassword(String userName, String password) {\n+    String[] credentials = {userName, password};\n+    return getClusterWithCredentials(userName, credentials);\n+  }\n+\n+  public Cluster getClusterWithCredentials(String userName, Object credentials) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE1MTcxNg=="}, "originalCommit": {"oid": "2bb56b1151f1bb86c6b435a1a0f2c0d2921f6bf5"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NzYyMDk4OnYy", "diffSide": "RIGHT", "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/data/Repository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNzowNzozMFrOGKBVrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMDoyMTo1MVrOGKJ_gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE2MDg3OQ==", "bodyText": "wondering which flow is better. Using the following might get rid of the reconnectToGemfire method in Cluster.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                if (isExpired(authorizedClient.getAccessToken())) {\n          \n          \n            \n                String userName = authorizedClient.getPrincipalName();\n          \n          \n            \n            \n          \n          \n            \n                if (isExpired(authorizedClient.getAccessToken())) {\n          \n          \n            \n                  logoutUser(userName);\n          \n          \n            \n                  authorizedClient = refreshExpiredClient(authentication, authorizedClient);\n          \n          \n            \n                }\n          \n          \n            \n            \n          \n          \n            \n                userName = authorizedClient.getPrincipalName();\n          \n          \n            \n                String credentials = authorizedClient.getAccessToken().getTokenValue();\n          \n          \n            \n                return getClusterWithCredentials(userName, credentials);", "url": "https://github.com/apache/geode/pull/4977#discussion_r413160879", "createdAt": "2020-04-22T17:07:30Z", "author": {"login": "jinmeiliao"}, "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/data/Repository.java", "diffHunk": "@@ -80,8 +88,95 @@ public Repository(OAuth2AuthorizedClientService authorizedClientService,\n     this.clusterFactory = clusterFactory;\n   }\n \n+  /**\n+   * this will return a cluster already connected to the geode jmx manager for the user in the\n+   * request\n+   * <p>\n+   * But for multi-user connections to gemfireJMX, i.e pulse that uses gemfire integrated security,\n+   * we will need to get the username from the context\n+   */\n+  public Cluster getCluster() {\n+    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n+    if (authentication == null) {\n+      return null;\n+    }\n+\n+    if (authentication instanceof OAuth2AuthenticationToken) {\n+      return getClusterWithAuthenticationToken((OAuth2AuthenticationToken) authentication);\n+    }\n+\n+    return getClusterWithUserNameAndPassword(authentication.getName(), null);\n+  }\n+\n+  public Cluster getClusterWithUserNameAndPassword(String userName, String password) {\n+    String[] credentials = {userName, password};\n+    return getClusterWithCredentials(userName, credentials);\n+  }\n+\n+  public Cluster getClusterWithCredentials(String userName, Object credentials) {\n+    synchronized (clusterMap) {\n+      Cluster cluster = clusterMap.get(userName);\n+      if (cluster == null) {\n+        logger.info(resourceBundle.getString(\"LOG_MSG_CREATE_NEW_THREAD\") + \" : \" + userName);\n+        cluster = clusterFactory.create(host, port, userName, resourceBundle, this);\n+        // Assign name to thread created\n+        cluster.setName(PulseConstants.APP_NAME + \"-\" + host + \":\" + port + \":\" + userName);\n+        cluster.connectToGemFire(credentials);\n+        if (cluster.isConnectedFlag()) {\n+          clusterMap.put(userName, cluster);\n+        }\n+      }\n+      return cluster;\n+    }\n+  }\n+\n+  /**\n+   * Returns the cluster for the user associated with the given authentication. If the user's\n+   * access token is expired, it is refreshed and the cluster is reconnected to JMX using the fresh\n+   * token. If the refresh fails, the user's cluster is disconnected from JMX and removed from the\n+   * repository.\n+   */\n+  private Cluster getClusterWithAuthenticationToken(OAuth2AuthenticationToken authentication) {\n+    OAuth2AuthorizedClient authorizedClient = getAuthorizedClient(authentication);\n+\n+    if (isExpired(authorizedClient.getAccessToken())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bb56b1151f1bb86c6b435a1a0f2c0d2921f6bf5"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzMwMjY1Ng==", "bodyText": "logoutUser() discards any data cached in the Cluster, including all of the trends stored in circular buffers. That seems like a harsh thing to do when the token refreshes.", "url": "https://github.com/apache/geode/pull/4977#discussion_r413302656", "createdAt": "2020-04-22T20:21:51Z", "author": {"login": "demery-pivotal"}, "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/data/Repository.java", "diffHunk": "@@ -80,8 +88,95 @@ public Repository(OAuth2AuthorizedClientService authorizedClientService,\n     this.clusterFactory = clusterFactory;\n   }\n \n+  /**\n+   * this will return a cluster already connected to the geode jmx manager for the user in the\n+   * request\n+   * <p>\n+   * But for multi-user connections to gemfireJMX, i.e pulse that uses gemfire integrated security,\n+   * we will need to get the username from the context\n+   */\n+  public Cluster getCluster() {\n+    Authentication authentication = SecurityContextHolder.getContext().getAuthentication();\n+    if (authentication == null) {\n+      return null;\n+    }\n+\n+    if (authentication instanceof OAuth2AuthenticationToken) {\n+      return getClusterWithAuthenticationToken((OAuth2AuthenticationToken) authentication);\n+    }\n+\n+    return getClusterWithUserNameAndPassword(authentication.getName(), null);\n+  }\n+\n+  public Cluster getClusterWithUserNameAndPassword(String userName, String password) {\n+    String[] credentials = {userName, password};\n+    return getClusterWithCredentials(userName, credentials);\n+  }\n+\n+  public Cluster getClusterWithCredentials(String userName, Object credentials) {\n+    synchronized (clusterMap) {\n+      Cluster cluster = clusterMap.get(userName);\n+      if (cluster == null) {\n+        logger.info(resourceBundle.getString(\"LOG_MSG_CREATE_NEW_THREAD\") + \" : \" + userName);\n+        cluster = clusterFactory.create(host, port, userName, resourceBundle, this);\n+        // Assign name to thread created\n+        cluster.setName(PulseConstants.APP_NAME + \"-\" + host + \":\" + port + \":\" + userName);\n+        cluster.connectToGemFire(credentials);\n+        if (cluster.isConnectedFlag()) {\n+          clusterMap.put(userName, cluster);\n+        }\n+      }\n+      return cluster;\n+    }\n+  }\n+\n+  /**\n+   * Returns the cluster for the user associated with the given authentication. If the user's\n+   * access token is expired, it is refreshed and the cluster is reconnected to JMX using the fresh\n+   * token. If the refresh fails, the user's cluster is disconnected from JMX and removed from the\n+   * repository.\n+   */\n+  private Cluster getClusterWithAuthenticationToken(OAuth2AuthenticationToken authentication) {\n+    OAuth2AuthorizedClient authorizedClient = getAuthorizedClient(authentication);\n+\n+    if (isExpired(authorizedClient.getAccessToken())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzE2MDg3OQ=="}, "originalCommit": {"oid": "2bb56b1151f1bb86c6b435a1a0f2c0d2921f6bf5"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2OTIxMDQzOnYy", "diffSide": "RIGHT", "path": "geode-pulse/build.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzozNjoxMlrOGKQLNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwMDo1Mzo1NFrOGKR3Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwMzk1Nw==", "bodyText": "probably it would be good to do this in a separate PR so that we can backport this to support branches.", "url": "https://github.com/apache/geode/pull/4977#discussion_r413403957", "createdAt": "2020-04-22T23:36:12Z", "author": {"login": "jinmeiliao"}, "path": "geode-pulse/build.gradle", "diffHunk": "@@ -50,7 +50,9 @@ dependencies {\n   // Needed to fully use log4j instead of commons-logging.\n   implementation('org.apache.logging.log4j:log4j-jcl')\n   implementation('org.apache.logging.log4j:log4j-api')\n-//  implementation('org.apache.logging.log4j:log4j-core')\n+  implementation('org.apache.logging.log4j:log4j-slf4j-impl') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1464a4b6abed7d210d1df005dd8814a4e636d00e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQyNTc3Nw==", "bodyText": "Okay. And probably it should be runtimeOnly instead of implementation", "url": "https://github.com/apache/geode/pull/4977#discussion_r413425777", "createdAt": "2020-04-23T00:36:20Z", "author": {"login": "demery-pivotal"}, "path": "geode-pulse/build.gradle", "diffHunk": "@@ -50,7 +50,9 @@ dependencies {\n   // Needed to fully use log4j instead of commons-logging.\n   implementation('org.apache.logging.log4j:log4j-jcl')\n   implementation('org.apache.logging.log4j:log4j-api')\n-//  implementation('org.apache.logging.log4j:log4j-core')\n+  implementation('org.apache.logging.log4j:log4j-slf4j-impl') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwMzk1Nw=="}, "originalCommit": {"oid": "1464a4b6abed7d210d1df005dd8814a4e636d00e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQzMTYxNQ==", "bodyText": "Done: #4988\nAnd I rebased this PR on that one.", "url": "https://github.com/apache/geode/pull/4977#discussion_r413431615", "createdAt": "2020-04-23T00:53:54Z", "author": {"login": "demery-pivotal"}, "path": "geode-pulse/build.gradle", "diffHunk": "@@ -50,7 +50,9 @@ dependencies {\n   // Needed to fully use log4j instead of commons-logging.\n   implementation('org.apache.logging.log4j:log4j-jcl')\n   implementation('org.apache.logging.log4j:log4j-api')\n-//  implementation('org.apache.logging.log4j:log4j-core')\n+  implementation('org.apache.logging.log4j:log4j-slf4j-impl') {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwMzk1Nw=="}, "originalCommit": {"oid": "1464a4b6abed7d210d1df005dd8814a4e636d00e"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4348, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}