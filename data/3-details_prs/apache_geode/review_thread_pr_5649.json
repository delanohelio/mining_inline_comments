{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA3ODA5ODIz", "number": 5649, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTowNzoyM1rOEwfF7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODoyODozMVrOEw5GYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Mjc2NTI0OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/apache/geode/gradle/RunInSubdirectoryTestFramework.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMTowNzoyM1rOHmFdkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxNjo1NDo0N1rOHmrLag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY5NzQyNA==", "bodyText": "I wonder if we need/want this gemfire.properties file anymore? As far as I'm concerned tests shouldn't be running with a gemfire.properties file lying around anyway?\nI see we have TestPropertiesWriter that creates a properties file. But all it has is log-level=config, which is the default anyway...", "url": "https://github.com/apache/geode/pull/5649#discussion_r509697424", "createdAt": "2020-10-21T21:07:23Z", "author": {"login": "upthewaterspout"}, "path": "buildSrc/src/main/java/org/apache/geode/gradle/RunInSubdirectoryTestFramework.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.gradle;\n+\n+import static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.gradle.api.Action;\n+import org.gradle.api.internal.tasks.testing.TestFramework;\n+import org.gradle.api.internal.tasks.testing.WorkerTestClassProcessorFactory;\n+import org.gradle.api.internal.tasks.testing.detection.TestFrameworkDetector;\n+import org.gradle.api.tasks.testing.TestFrameworkOptions;\n+import org.gradle.process.internal.JavaExecHandleBuilder;\n+import org.gradle.process.internal.worker.WorkerProcessBuilder;\n+\n+/**\n+ * Wraps a test framework to run each test worker in a separate working directory.\n+ */\n+public class RunInSubdirectoryTestFramework implements TestFramework {\n+  private static final String GEMFIRE_PROPERTIES = \"gemfire.properties\";\n+  private final AtomicLong workerId = new AtomicLong();\n+  private final TestFramework delegate;\n+\n+  public RunInSubdirectoryTestFramework(TestFramework delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public TestFrameworkDetector getDetector() {\n+    return delegate.getDetector();\n+  }\n+\n+  @Override\n+  public TestFrameworkOptions getOptions() {\n+    return delegate.getOptions();\n+  }\n+\n+  @Override\n+  public WorkerTestClassProcessorFactory getProcessorFactory() {\n+    return delegate.getProcessorFactory();\n+  }\n+\n+  /**\n+   * Return an action that configures the test worker builder to run the test worker in a unique\n+   * subdirectory of the task's working directory.\n+   */\n+  @Override\n+  public Action<WorkerProcessBuilder> getWorkerConfigurationAction() {\n+    return workerProcessBuilder -> {\n+      delegate.getWorkerConfigurationAction().execute(workerProcessBuilder);\n+      JavaExecHandleBuilder javaCommand = workerProcessBuilder.getJavaCommand();\n+\n+      Path taskWorkingDir = javaCommand.getWorkingDir().toPath();\n+      String workerWorkingDirName = String.format(\"test-worker-%06d\", workerId.incrementAndGet());\n+      Path workerWorkingDir = taskWorkingDir.resolve(workerWorkingDirName);\n+\n+      createWorkingDir(workerWorkingDir);\n+      copyGemFirePropertiesFile(taskWorkingDir, workerWorkingDir);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fa02e9466c4f1b2422e9a33172738dd6547f1b6"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcxMDU2NQ==", "bodyText": "Just today I noticed that the non-repeat forms of these tasks don't write as properties file. If it's not needed, it would probably be better to delete the code that writes it.", "url": "https://github.com/apache/geode/pull/5649#discussion_r509710565", "createdAt": "2020-10-21T21:23:46Z", "author": {"login": "demery-pivotal"}, "path": "buildSrc/src/main/java/org/apache/geode/gradle/RunInSubdirectoryTestFramework.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.gradle;\n+\n+import static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.gradle.api.Action;\n+import org.gradle.api.internal.tasks.testing.TestFramework;\n+import org.gradle.api.internal.tasks.testing.WorkerTestClassProcessorFactory;\n+import org.gradle.api.internal.tasks.testing.detection.TestFrameworkDetector;\n+import org.gradle.api.tasks.testing.TestFrameworkOptions;\n+import org.gradle.process.internal.JavaExecHandleBuilder;\n+import org.gradle.process.internal.worker.WorkerProcessBuilder;\n+\n+/**\n+ * Wraps a test framework to run each test worker in a separate working directory.\n+ */\n+public class RunInSubdirectoryTestFramework implements TestFramework {\n+  private static final String GEMFIRE_PROPERTIES = \"gemfire.properties\";\n+  private final AtomicLong workerId = new AtomicLong();\n+  private final TestFramework delegate;\n+\n+  public RunInSubdirectoryTestFramework(TestFramework delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public TestFrameworkDetector getDetector() {\n+    return delegate.getDetector();\n+  }\n+\n+  @Override\n+  public TestFrameworkOptions getOptions() {\n+    return delegate.getOptions();\n+  }\n+\n+  @Override\n+  public WorkerTestClassProcessorFactory getProcessorFactory() {\n+    return delegate.getProcessorFactory();\n+  }\n+\n+  /**\n+   * Return an action that configures the test worker builder to run the test worker in a unique\n+   * subdirectory of the task's working directory.\n+   */\n+  @Override\n+  public Action<WorkerProcessBuilder> getWorkerConfigurationAction() {\n+    return workerProcessBuilder -> {\n+      delegate.getWorkerConfigurationAction().execute(workerProcessBuilder);\n+      JavaExecHandleBuilder javaCommand = workerProcessBuilder.getJavaCommand();\n+\n+      Path taskWorkingDir = javaCommand.getWorkingDir().toPath();\n+      String workerWorkingDirName = String.format(\"test-worker-%06d\", workerId.incrementAndGet());\n+      Path workerWorkingDir = taskWorkingDir.resolve(workerWorkingDirName);\n+\n+      createWorkingDir(workerWorkingDir);\n+      copyGemFirePropertiesFile(taskWorkingDir, workerWorkingDir);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY5NzQyNA=="}, "originalCommit": {"oid": "5fa02e9466c4f1b2422e9a33172738dd6547f1b6"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcyMTY5Mg==", "bodyText": "The gemfire.properties files, in all its incarnations, has been a thorn to me, because the writing of it causes a repack of geode-core.jar, which triggers all kinds of downstream effects.", "url": "https://github.com/apache/geode/pull/5649#discussion_r509721692", "createdAt": "2020-10-21T21:39:04Z", "author": {"login": "rhoughton-pivot"}, "path": "buildSrc/src/main/java/org/apache/geode/gradle/RunInSubdirectoryTestFramework.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.gradle;\n+\n+import static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.gradle.api.Action;\n+import org.gradle.api.internal.tasks.testing.TestFramework;\n+import org.gradle.api.internal.tasks.testing.WorkerTestClassProcessorFactory;\n+import org.gradle.api.internal.tasks.testing.detection.TestFrameworkDetector;\n+import org.gradle.api.tasks.testing.TestFrameworkOptions;\n+import org.gradle.process.internal.JavaExecHandleBuilder;\n+import org.gradle.process.internal.worker.WorkerProcessBuilder;\n+\n+/**\n+ * Wraps a test framework to run each test worker in a separate working directory.\n+ */\n+public class RunInSubdirectoryTestFramework implements TestFramework {\n+  private static final String GEMFIRE_PROPERTIES = \"gemfire.properties\";\n+  private final AtomicLong workerId = new AtomicLong();\n+  private final TestFramework delegate;\n+\n+  public RunInSubdirectoryTestFramework(TestFramework delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public TestFrameworkDetector getDetector() {\n+    return delegate.getDetector();\n+  }\n+\n+  @Override\n+  public TestFrameworkOptions getOptions() {\n+    return delegate.getOptions();\n+  }\n+\n+  @Override\n+  public WorkerTestClassProcessorFactory getProcessorFactory() {\n+    return delegate.getProcessorFactory();\n+  }\n+\n+  /**\n+   * Return an action that configures the test worker builder to run the test worker in a unique\n+   * subdirectory of the task's working directory.\n+   */\n+  @Override\n+  public Action<WorkerProcessBuilder> getWorkerConfigurationAction() {\n+    return workerProcessBuilder -> {\n+      delegate.getWorkerConfigurationAction().execute(workerProcessBuilder);\n+      JavaExecHandleBuilder javaCommand = workerProcessBuilder.getJavaCommand();\n+\n+      Path taskWorkingDir = javaCommand.getWorkingDir().toPath();\n+      String workerWorkingDirName = String.format(\"test-worker-%06d\", workerId.incrementAndGet());\n+      Path workerWorkingDir = taskWorkingDir.resolve(workerWorkingDirName);\n+\n+      createWorkingDir(workerWorkingDir);\n+      copyGemFirePropertiesFile(taskWorkingDir, workerWorkingDir);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY5NzQyNA=="}, "originalCommit": {"oid": "5fa02e9466c4f1b2422e9a33172738dd6547f1b6"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTczMzA2Mg==", "bodyText": "Do you have a reason to believe it's still needed? If you're not sure, I can do a run without it and see what explodes.", "url": "https://github.com/apache/geode/pull/5649#discussion_r509733062", "createdAt": "2020-10-21T21:53:59Z", "author": {"login": "demery-pivotal"}, "path": "buildSrc/src/main/java/org/apache/geode/gradle/RunInSubdirectoryTestFramework.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.gradle;\n+\n+import static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.gradle.api.Action;\n+import org.gradle.api.internal.tasks.testing.TestFramework;\n+import org.gradle.api.internal.tasks.testing.WorkerTestClassProcessorFactory;\n+import org.gradle.api.internal.tasks.testing.detection.TestFrameworkDetector;\n+import org.gradle.api.tasks.testing.TestFrameworkOptions;\n+import org.gradle.process.internal.JavaExecHandleBuilder;\n+import org.gradle.process.internal.worker.WorkerProcessBuilder;\n+\n+/**\n+ * Wraps a test framework to run each test worker in a separate working directory.\n+ */\n+public class RunInSubdirectoryTestFramework implements TestFramework {\n+  private static final String GEMFIRE_PROPERTIES = \"gemfire.properties\";\n+  private final AtomicLong workerId = new AtomicLong();\n+  private final TestFramework delegate;\n+\n+  public RunInSubdirectoryTestFramework(TestFramework delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public TestFrameworkDetector getDetector() {\n+    return delegate.getDetector();\n+  }\n+\n+  @Override\n+  public TestFrameworkOptions getOptions() {\n+    return delegate.getOptions();\n+  }\n+\n+  @Override\n+  public WorkerTestClassProcessorFactory getProcessorFactory() {\n+    return delegate.getProcessorFactory();\n+  }\n+\n+  /**\n+   * Return an action that configures the test worker builder to run the test worker in a unique\n+   * subdirectory of the task's working directory.\n+   */\n+  @Override\n+  public Action<WorkerProcessBuilder> getWorkerConfigurationAction() {\n+    return workerProcessBuilder -> {\n+      delegate.getWorkerConfigurationAction().execute(workerProcessBuilder);\n+      JavaExecHandleBuilder javaCommand = workerProcessBuilder.getJavaCommand();\n+\n+      Path taskWorkingDir = javaCommand.getWorkingDir().toPath();\n+      String workerWorkingDirName = String.format(\"test-worker-%06d\", workerId.incrementAndGet());\n+      Path workerWorkingDir = taskWorkingDir.resolve(workerWorkingDirName);\n+\n+      createWorkingDir(workerWorkingDir);\n+      copyGemFirePropertiesFile(taskWorkingDir, workerWorkingDir);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY5NzQyNA=="}, "originalCommit": {"oid": "5fa02e9466c4f1b2422e9a33172738dd6547f1b6"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc0MTM3MA==", "bodyText": "I don't think it is? The one thing maybe it might do is prevent us from looking for a gemfire.properties file in other places (the classpath?, the user's homedir?). Could be worth a run if we can get rid of some code.\nBTW, @rhoughton-pivot - I think maybe you are talking about writing the default properties file? That's different code I believe. But yeah, still seems like in that case maybe we could just check in a file or something.", "url": "https://github.com/apache/geode/pull/5649#discussion_r509741370", "createdAt": "2020-10-21T22:04:51Z", "author": {"login": "upthewaterspout"}, "path": "buildSrc/src/main/java/org/apache/geode/gradle/RunInSubdirectoryTestFramework.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.gradle;\n+\n+import static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.gradle.api.Action;\n+import org.gradle.api.internal.tasks.testing.TestFramework;\n+import org.gradle.api.internal.tasks.testing.WorkerTestClassProcessorFactory;\n+import org.gradle.api.internal.tasks.testing.detection.TestFrameworkDetector;\n+import org.gradle.api.tasks.testing.TestFrameworkOptions;\n+import org.gradle.process.internal.JavaExecHandleBuilder;\n+import org.gradle.process.internal.worker.WorkerProcessBuilder;\n+\n+/**\n+ * Wraps a test framework to run each test worker in a separate working directory.\n+ */\n+public class RunInSubdirectoryTestFramework implements TestFramework {\n+  private static final String GEMFIRE_PROPERTIES = \"gemfire.properties\";\n+  private final AtomicLong workerId = new AtomicLong();\n+  private final TestFramework delegate;\n+\n+  public RunInSubdirectoryTestFramework(TestFramework delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public TestFrameworkDetector getDetector() {\n+    return delegate.getDetector();\n+  }\n+\n+  @Override\n+  public TestFrameworkOptions getOptions() {\n+    return delegate.getOptions();\n+  }\n+\n+  @Override\n+  public WorkerTestClassProcessorFactory getProcessorFactory() {\n+    return delegate.getProcessorFactory();\n+  }\n+\n+  /**\n+   * Return an action that configures the test worker builder to run the test worker in a unique\n+   * subdirectory of the task's working directory.\n+   */\n+  @Override\n+  public Action<WorkerProcessBuilder> getWorkerConfigurationAction() {\n+    return workerProcessBuilder -> {\n+      delegate.getWorkerConfigurationAction().execute(workerProcessBuilder);\n+      JavaExecHandleBuilder javaCommand = workerProcessBuilder.getJavaCommand();\n+\n+      Path taskWorkingDir = javaCommand.getWorkingDir().toPath();\n+      String workerWorkingDirName = String.format(\"test-worker-%06d\", workerId.incrementAndGet());\n+      Path workerWorkingDir = taskWorkingDir.resolve(workerWorkingDirName);\n+\n+      createWorkingDir(workerWorkingDir);\n+      copyGemFirePropertiesFile(taskWorkingDir, workerWorkingDir);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY5NzQyNA=="}, "originalCommit": {"oid": "5fa02e9466c4f1b2422e9a33172738dd6547f1b6"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc1MzE1MQ==", "bodyText": "Hmmm. If the point of that file is to prevent looking in other places\u2026 removing it might change behavior on developers' machines, if they have a ~/gemfire.properties file. And a run in CI would not notice the problem.", "url": "https://github.com/apache/geode/pull/5649#discussion_r509753151", "createdAt": "2020-10-21T22:23:00Z", "author": {"login": "demery-pivotal"}, "path": "buildSrc/src/main/java/org/apache/geode/gradle/RunInSubdirectoryTestFramework.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.gradle;\n+\n+import static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.gradle.api.Action;\n+import org.gradle.api.internal.tasks.testing.TestFramework;\n+import org.gradle.api.internal.tasks.testing.WorkerTestClassProcessorFactory;\n+import org.gradle.api.internal.tasks.testing.detection.TestFrameworkDetector;\n+import org.gradle.api.tasks.testing.TestFrameworkOptions;\n+import org.gradle.process.internal.JavaExecHandleBuilder;\n+import org.gradle.process.internal.worker.WorkerProcessBuilder;\n+\n+/**\n+ * Wraps a test framework to run each test worker in a separate working directory.\n+ */\n+public class RunInSubdirectoryTestFramework implements TestFramework {\n+  private static final String GEMFIRE_PROPERTIES = \"gemfire.properties\";\n+  private final AtomicLong workerId = new AtomicLong();\n+  private final TestFramework delegate;\n+\n+  public RunInSubdirectoryTestFramework(TestFramework delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public TestFrameworkDetector getDetector() {\n+    return delegate.getDetector();\n+  }\n+\n+  @Override\n+  public TestFrameworkOptions getOptions() {\n+    return delegate.getOptions();\n+  }\n+\n+  @Override\n+  public WorkerTestClassProcessorFactory getProcessorFactory() {\n+    return delegate.getProcessorFactory();\n+  }\n+\n+  /**\n+   * Return an action that configures the test worker builder to run the test worker in a unique\n+   * subdirectory of the task's working directory.\n+   */\n+  @Override\n+  public Action<WorkerProcessBuilder> getWorkerConfigurationAction() {\n+    return workerProcessBuilder -> {\n+      delegate.getWorkerConfigurationAction().execute(workerProcessBuilder);\n+      JavaExecHandleBuilder javaCommand = workerProcessBuilder.getJavaCommand();\n+\n+      Path taskWorkingDir = javaCommand.getWorkingDir().toPath();\n+      String workerWorkingDirName = String.format(\"test-worker-%06d\", workerId.incrementAndGet());\n+      Path workerWorkingDir = taskWorkingDir.resolve(workerWorkingDirName);\n+\n+      createWorkingDir(workerWorkingDir);\n+      copyGemFirePropertiesFile(taskWorkingDir, workerWorkingDir);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY5NzQyNA=="}, "originalCommit": {"oid": "5fa02e9466c4f1b2422e9a33172738dd6547f1b6"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDMxNTM3MA==", "bodyText": "I am probably thinking of the gemfireVersion.properties :(", "url": "https://github.com/apache/geode/pull/5649#discussion_r510315370", "createdAt": "2020-10-22T16:54:47Z", "author": {"login": "rhoughton-pivot"}, "path": "buildSrc/src/main/java/org/apache/geode/gradle/RunInSubdirectoryTestFramework.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.gradle;\n+\n+import static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.gradle.api.Action;\n+import org.gradle.api.internal.tasks.testing.TestFramework;\n+import org.gradle.api.internal.tasks.testing.WorkerTestClassProcessorFactory;\n+import org.gradle.api.internal.tasks.testing.detection.TestFrameworkDetector;\n+import org.gradle.api.tasks.testing.TestFrameworkOptions;\n+import org.gradle.process.internal.JavaExecHandleBuilder;\n+import org.gradle.process.internal.worker.WorkerProcessBuilder;\n+\n+/**\n+ * Wraps a test framework to run each test worker in a separate working directory.\n+ */\n+public class RunInSubdirectoryTestFramework implements TestFramework {\n+  private static final String GEMFIRE_PROPERTIES = \"gemfire.properties\";\n+  private final AtomicLong workerId = new AtomicLong();\n+  private final TestFramework delegate;\n+\n+  public RunInSubdirectoryTestFramework(TestFramework delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public TestFrameworkDetector getDetector() {\n+    return delegate.getDetector();\n+  }\n+\n+  @Override\n+  public TestFrameworkOptions getOptions() {\n+    return delegate.getOptions();\n+  }\n+\n+  @Override\n+  public WorkerTestClassProcessorFactory getProcessorFactory() {\n+    return delegate.getProcessorFactory();\n+  }\n+\n+  /**\n+   * Return an action that configures the test worker builder to run the test worker in a unique\n+   * subdirectory of the task's working directory.\n+   */\n+  @Override\n+  public Action<WorkerProcessBuilder> getWorkerConfigurationAction() {\n+    return workerProcessBuilder -> {\n+      delegate.getWorkerConfigurationAction().execute(workerProcessBuilder);\n+      JavaExecHandleBuilder javaCommand = workerProcessBuilder.getJavaCommand();\n+\n+      Path taskWorkingDir = javaCommand.getWorkingDir().toPath();\n+      String workerWorkingDirName = String.format(\"test-worker-%06d\", workerId.incrementAndGet());\n+      Path workerWorkingDir = taskWorkingDir.resolve(workerWorkingDirName);\n+\n+      createWorkingDir(workerWorkingDir);\n+      copyGemFirePropertiesFile(taskWorkingDir, workerWorkingDir);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTY5NzQyNA=="}, "originalCommit": {"oid": "5fa02e9466c4f1b2422e9a33172738dd6547f1b6"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5Mjc5MDg1OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/apache/geode/gradle/RunInSubdirectoryTestFramework.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMToxMzowOVrOHmFucw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQyMjoxMToxN1rOHmIYgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwMTc0Nw==", "bodyText": "Huh, I wonder if you could do something like javaCommand.setExecutable(\"docker\") ... to run the workers in a docker container ;)", "url": "https://github.com/apache/geode/pull/5649#discussion_r509701747", "createdAt": "2020-10-21T21:13:09Z", "author": {"login": "upthewaterspout"}, "path": "buildSrc/src/main/java/org/apache/geode/gradle/RunInSubdirectoryTestFramework.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.gradle;\n+\n+import static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.gradle.api.Action;\n+import org.gradle.api.internal.tasks.testing.TestFramework;\n+import org.gradle.api.internal.tasks.testing.WorkerTestClassProcessorFactory;\n+import org.gradle.api.internal.tasks.testing.detection.TestFrameworkDetector;\n+import org.gradle.api.tasks.testing.TestFrameworkOptions;\n+import org.gradle.process.internal.JavaExecHandleBuilder;\n+import org.gradle.process.internal.worker.WorkerProcessBuilder;\n+\n+/**\n+ * Wraps a test framework to run each test worker in a separate working directory.\n+ */\n+public class RunInSubdirectoryTestFramework implements TestFramework {\n+  private static final String GEMFIRE_PROPERTIES = \"gemfire.properties\";\n+  private final AtomicLong workerId = new AtomicLong();\n+  private final TestFramework delegate;\n+\n+  public RunInSubdirectoryTestFramework(TestFramework delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public TestFrameworkDetector getDetector() {\n+    return delegate.getDetector();\n+  }\n+\n+  @Override\n+  public TestFrameworkOptions getOptions() {\n+    return delegate.getOptions();\n+  }\n+\n+  @Override\n+  public WorkerTestClassProcessorFactory getProcessorFactory() {\n+    return delegate.getProcessorFactory();\n+  }\n+\n+  /**\n+   * Return an action that configures the test worker builder to run the test worker in a unique\n+   * subdirectory of the task's working directory.\n+   */\n+  @Override\n+  public Action<WorkerProcessBuilder> getWorkerConfigurationAction() {\n+    return workerProcessBuilder -> {\n+      delegate.getWorkerConfigurationAction().execute(workerProcessBuilder);\n+      JavaExecHandleBuilder javaCommand = workerProcessBuilder.getJavaCommand();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fa02e9466c4f1b2422e9a33172738dd6547f1b6"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcxMTY4NA==", "bodyText": "That's a really interesting idea!", "url": "https://github.com/apache/geode/pull/5649#discussion_r509711684", "createdAt": "2020-10-21T21:25:17Z", "author": {"login": "demery-pivotal"}, "path": "buildSrc/src/main/java/org/apache/geode/gradle/RunInSubdirectoryTestFramework.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.gradle;\n+\n+import static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.gradle.api.Action;\n+import org.gradle.api.internal.tasks.testing.TestFramework;\n+import org.gradle.api.internal.tasks.testing.WorkerTestClassProcessorFactory;\n+import org.gradle.api.internal.tasks.testing.detection.TestFrameworkDetector;\n+import org.gradle.api.tasks.testing.TestFrameworkOptions;\n+import org.gradle.process.internal.JavaExecHandleBuilder;\n+import org.gradle.process.internal.worker.WorkerProcessBuilder;\n+\n+/**\n+ * Wraps a test framework to run each test worker in a separate working directory.\n+ */\n+public class RunInSubdirectoryTestFramework implements TestFramework {\n+  private static final String GEMFIRE_PROPERTIES = \"gemfire.properties\";\n+  private final AtomicLong workerId = new AtomicLong();\n+  private final TestFramework delegate;\n+\n+  public RunInSubdirectoryTestFramework(TestFramework delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public TestFrameworkDetector getDetector() {\n+    return delegate.getDetector();\n+  }\n+\n+  @Override\n+  public TestFrameworkOptions getOptions() {\n+    return delegate.getOptions();\n+  }\n+\n+  @Override\n+  public WorkerTestClassProcessorFactory getProcessorFactory() {\n+    return delegate.getProcessorFactory();\n+  }\n+\n+  /**\n+   * Return an action that configures the test worker builder to run the test worker in a unique\n+   * subdirectory of the task's working directory.\n+   */\n+  @Override\n+  public Action<WorkerProcessBuilder> getWorkerConfigurationAction() {\n+    return workerProcessBuilder -> {\n+      delegate.getWorkerConfigurationAction().execute(workerProcessBuilder);\n+      JavaExecHandleBuilder javaCommand = workerProcessBuilder.getJavaCommand();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwMTc0Nw=="}, "originalCommit": {"oid": "5fa02e9466c4f1b2422e9a33172738dd6547f1b6"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcxNDY5Mg==", "bodyText": "I suspect it's not as simple as that, given that the Gradle client process needs to interact with the test worker process.", "url": "https://github.com/apache/geode/pull/5649#discussion_r509714692", "createdAt": "2020-10-21T21:28:43Z", "author": {"login": "demery-pivotal"}, "path": "buildSrc/src/main/java/org/apache/geode/gradle/RunInSubdirectoryTestFramework.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.gradle;\n+\n+import static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.gradle.api.Action;\n+import org.gradle.api.internal.tasks.testing.TestFramework;\n+import org.gradle.api.internal.tasks.testing.WorkerTestClassProcessorFactory;\n+import org.gradle.api.internal.tasks.testing.detection.TestFrameworkDetector;\n+import org.gradle.api.tasks.testing.TestFrameworkOptions;\n+import org.gradle.process.internal.JavaExecHandleBuilder;\n+import org.gradle.process.internal.worker.WorkerProcessBuilder;\n+\n+/**\n+ * Wraps a test framework to run each test worker in a separate working directory.\n+ */\n+public class RunInSubdirectoryTestFramework implements TestFramework {\n+  private static final String GEMFIRE_PROPERTIES = \"gemfire.properties\";\n+  private final AtomicLong workerId = new AtomicLong();\n+  private final TestFramework delegate;\n+\n+  public RunInSubdirectoryTestFramework(TestFramework delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public TestFrameworkDetector getDetector() {\n+    return delegate.getDetector();\n+  }\n+\n+  @Override\n+  public TestFrameworkOptions getOptions() {\n+    return delegate.getOptions();\n+  }\n+\n+  @Override\n+  public WorkerTestClassProcessorFactory getProcessorFactory() {\n+    return delegate.getProcessorFactory();\n+  }\n+\n+  /**\n+   * Return an action that configures the test worker builder to run the test worker in a unique\n+   * subdirectory of the task's working directory.\n+   */\n+  @Override\n+  public Action<WorkerProcessBuilder> getWorkerConfigurationAction() {\n+    return workerProcessBuilder -> {\n+      delegate.getWorkerConfigurationAction().execute(workerProcessBuilder);\n+      JavaExecHandleBuilder javaCommand = workerProcessBuilder.getJavaCommand();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwMTc0Nw=="}, "originalCommit": {"oid": "5fa02e9466c4f1b2422e9a33172738dd6547f1b6"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc0MDA4Mg==", "bodyText": "Yeah, I'm sure it's a bit more complicated. But maybe all of the gradle internal APIs that we would need to use are already in use in this PR?\nAnyway, I wasn't being that serious with this comment, mostly just teasing you since I know you're trying to get rid of docker.", "url": "https://github.com/apache/geode/pull/5649#discussion_r509740082", "createdAt": "2020-10-21T22:02:48Z", "author": {"login": "upthewaterspout"}, "path": "buildSrc/src/main/java/org/apache/geode/gradle/RunInSubdirectoryTestFramework.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.gradle;\n+\n+import static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.gradle.api.Action;\n+import org.gradle.api.internal.tasks.testing.TestFramework;\n+import org.gradle.api.internal.tasks.testing.WorkerTestClassProcessorFactory;\n+import org.gradle.api.internal.tasks.testing.detection.TestFrameworkDetector;\n+import org.gradle.api.tasks.testing.TestFrameworkOptions;\n+import org.gradle.process.internal.JavaExecHandleBuilder;\n+import org.gradle.process.internal.worker.WorkerProcessBuilder;\n+\n+/**\n+ * Wraps a test framework to run each test worker in a separate working directory.\n+ */\n+public class RunInSubdirectoryTestFramework implements TestFramework {\n+  private static final String GEMFIRE_PROPERTIES = \"gemfire.properties\";\n+  private final AtomicLong workerId = new AtomicLong();\n+  private final TestFramework delegate;\n+\n+  public RunInSubdirectoryTestFramework(TestFramework delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public TestFrameworkDetector getDetector() {\n+    return delegate.getDetector();\n+  }\n+\n+  @Override\n+  public TestFrameworkOptions getOptions() {\n+    return delegate.getOptions();\n+  }\n+\n+  @Override\n+  public WorkerTestClassProcessorFactory getProcessorFactory() {\n+    return delegate.getProcessorFactory();\n+  }\n+\n+  /**\n+   * Return an action that configures the test worker builder to run the test worker in a unique\n+   * subdirectory of the task's working directory.\n+   */\n+  @Override\n+  public Action<WorkerProcessBuilder> getWorkerConfigurationAction() {\n+    return workerProcessBuilder -> {\n+      delegate.getWorkerConfigurationAction().execute(workerProcessBuilder);\n+      JavaExecHandleBuilder javaCommand = workerProcessBuilder.getJavaCommand();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwMTc0Nw=="}, "originalCommit": {"oid": "5fa02e9466c4f1b2422e9a33172738dd6547f1b6"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTc0NTI4MQ==", "bodyText": "I got the tease, but maybe you didn't know: We're not trying to get rid of docker per se. We're trying to get rid of dependence on an old, unmaintained dockerizer plugin that's holding us back. Now that I'm turning my attention back port conflicts, I find your not-serious idea unreasonably tempting! I'm not hopeful, but I will look into it.", "url": "https://github.com/apache/geode/pull/5649#discussion_r509745281", "createdAt": "2020-10-21T22:11:17Z", "author": {"login": "demery-pivotal"}, "path": "buildSrc/src/main/java/org/apache/geode/gradle/RunInSubdirectoryTestFramework.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.gradle;\n+\n+import static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.gradle.api.Action;\n+import org.gradle.api.internal.tasks.testing.TestFramework;\n+import org.gradle.api.internal.tasks.testing.WorkerTestClassProcessorFactory;\n+import org.gradle.api.internal.tasks.testing.detection.TestFrameworkDetector;\n+import org.gradle.api.tasks.testing.TestFrameworkOptions;\n+import org.gradle.process.internal.JavaExecHandleBuilder;\n+import org.gradle.process.internal.worker.WorkerProcessBuilder;\n+\n+/**\n+ * Wraps a test framework to run each test worker in a separate working directory.\n+ */\n+public class RunInSubdirectoryTestFramework implements TestFramework {\n+  private static final String GEMFIRE_PROPERTIES = \"gemfire.properties\";\n+  private final AtomicLong workerId = new AtomicLong();\n+  private final TestFramework delegate;\n+\n+  public RunInSubdirectoryTestFramework(TestFramework delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public TestFrameworkDetector getDetector() {\n+    return delegate.getDetector();\n+  }\n+\n+  @Override\n+  public TestFrameworkOptions getOptions() {\n+    return delegate.getOptions();\n+  }\n+\n+  @Override\n+  public WorkerTestClassProcessorFactory getProcessorFactory() {\n+    return delegate.getProcessorFactory();\n+  }\n+\n+  /**\n+   * Return an action that configures the test worker builder to run the test worker in a unique\n+   * subdirectory of the task's working directory.\n+   */\n+  @Override\n+  public Action<WorkerProcessBuilder> getWorkerConfigurationAction() {\n+    return workerProcessBuilder -> {\n+      delegate.getWorkerConfigurationAction().execute(workerProcessBuilder);\n+      JavaExecHandleBuilder javaCommand = workerProcessBuilder.getJavaCommand();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTcwMTc0Nw=="}, "originalCommit": {"oid": "5fa02e9466c4f1b2422e9a33172738dd6547f1b6"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzAyNjI3OnYy", "diffSide": "RIGHT", "path": "buildSrc/src/main/java/org/apache/geode/gradle/RunInSubdirectoryTestFramework.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxODoyODozMVrOHmumNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxOTowMTozM1rOHmvvTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM3MTM4MQ==", "bodyText": "If taskPropertiesFile does not exist, will it affect javaCommand.setWorkingDir(workerWorkingDir); (line 78)? Or will it have some unexpected behavior when running tests?", "url": "https://github.com/apache/geode/pull/5649#discussion_r510371381", "createdAt": "2020-10-22T18:28:31Z", "author": {"login": "jchen21"}, "path": "buildSrc/src/main/java/org/apache/geode/gradle/RunInSubdirectoryTestFramework.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.gradle;\n+\n+import static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.gradle.api.Action;\n+import org.gradle.api.internal.tasks.testing.TestFramework;\n+import org.gradle.api.internal.tasks.testing.WorkerTestClassProcessorFactory;\n+import org.gradle.api.internal.tasks.testing.detection.TestFrameworkDetector;\n+import org.gradle.api.tasks.testing.TestFrameworkOptions;\n+import org.gradle.process.internal.JavaExecHandleBuilder;\n+import org.gradle.process.internal.worker.WorkerProcessBuilder;\n+\n+/**\n+ * Wraps a test framework to run each test worker in a separate working directory.\n+ */\n+public class RunInSubdirectoryTestFramework implements TestFramework {\n+  private static final String GEMFIRE_PROPERTIES = \"gemfire.properties\";\n+  private final AtomicLong workerId = new AtomicLong();\n+  private final TestFramework delegate;\n+\n+  public RunInSubdirectoryTestFramework(TestFramework delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public TestFrameworkDetector getDetector() {\n+    return delegate.getDetector();\n+  }\n+\n+  @Override\n+  public TestFrameworkOptions getOptions() {\n+    return delegate.getOptions();\n+  }\n+\n+  @Override\n+  public WorkerTestClassProcessorFactory getProcessorFactory() {\n+    return delegate.getProcessorFactory();\n+  }\n+\n+  /**\n+   * Return an action that configures the test worker builder to run the test worker in a unique\n+   * subdirectory of the task's working directory.\n+   */\n+  @Override\n+  public Action<WorkerProcessBuilder> getWorkerConfigurationAction() {\n+    return workerProcessBuilder -> {\n+      delegate.getWorkerConfigurationAction().execute(workerProcessBuilder);\n+      JavaExecHandleBuilder javaCommand = workerProcessBuilder.getJavaCommand();\n+\n+      Path taskWorkingDir = javaCommand.getWorkingDir().toPath();\n+      String workerWorkingDirName = String.format(\"test-worker-%06d\", workerId.incrementAndGet());\n+      Path workerWorkingDir = taskWorkingDir.resolve(workerWorkingDirName);\n+\n+      createWorkingDir(workerWorkingDir);\n+      copyGemFirePropertiesFile(taskWorkingDir, workerWorkingDir);\n+\n+      javaCommand.setWorkingDir(workerWorkingDir);\n+    };\n+  }\n+\n+  private void copyGemFirePropertiesFile(Path taskWorkingDir, Path workerWorkingDir) {\n+    Path taskPropertiesFile = taskWorkingDir.resolve(GEMFIRE_PROPERTIES);\n+    if (!Files.exists(taskPropertiesFile)) {\n+      return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fa02e9466c4f1b2422e9a33172738dd6547f1b6"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM5MDA5NQ==", "bodyText": "If the file is missing, that doesn't indicate a problem. It's deliberate. Our Gradle build puts that file there for some test tasks (e.g. distributedTest) but not for others (e.g. repeatDistributedTest). I don't know why our Gradle build writes the file for some tasks and not others, but that's the current behavior.\nThe if statement accounts for Gradle writing the file for some tasks and not for others.\nThe effect is that if the file was in the test JVM's common working directory before this PR, it will be in the JVM's unique working directory after. And if the file was absent from the test JVM's working directory before the PR, it will be absent after.", "url": "https://github.com/apache/geode/pull/5649#discussion_r510390095", "createdAt": "2020-10-22T19:01:33Z", "author": {"login": "demery-pivotal"}, "path": "buildSrc/src/main/java/org/apache/geode/gradle/RunInSubdirectoryTestFramework.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.gradle;\n+\n+import static java.nio.file.StandardCopyOption.COPY_ATTRIBUTES;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.gradle.api.Action;\n+import org.gradle.api.internal.tasks.testing.TestFramework;\n+import org.gradle.api.internal.tasks.testing.WorkerTestClassProcessorFactory;\n+import org.gradle.api.internal.tasks.testing.detection.TestFrameworkDetector;\n+import org.gradle.api.tasks.testing.TestFrameworkOptions;\n+import org.gradle.process.internal.JavaExecHandleBuilder;\n+import org.gradle.process.internal.worker.WorkerProcessBuilder;\n+\n+/**\n+ * Wraps a test framework to run each test worker in a separate working directory.\n+ */\n+public class RunInSubdirectoryTestFramework implements TestFramework {\n+  private static final String GEMFIRE_PROPERTIES = \"gemfire.properties\";\n+  private final AtomicLong workerId = new AtomicLong();\n+  private final TestFramework delegate;\n+\n+  public RunInSubdirectoryTestFramework(TestFramework delegate) {\n+    this.delegate = delegate;\n+  }\n+\n+  @Override\n+  public TestFrameworkDetector getDetector() {\n+    return delegate.getDetector();\n+  }\n+\n+  @Override\n+  public TestFrameworkOptions getOptions() {\n+    return delegate.getOptions();\n+  }\n+\n+  @Override\n+  public WorkerTestClassProcessorFactory getProcessorFactory() {\n+    return delegate.getProcessorFactory();\n+  }\n+\n+  /**\n+   * Return an action that configures the test worker builder to run the test worker in a unique\n+   * subdirectory of the task's working directory.\n+   */\n+  @Override\n+  public Action<WorkerProcessBuilder> getWorkerConfigurationAction() {\n+    return workerProcessBuilder -> {\n+      delegate.getWorkerConfigurationAction().execute(workerProcessBuilder);\n+      JavaExecHandleBuilder javaCommand = workerProcessBuilder.getJavaCommand();\n+\n+      Path taskWorkingDir = javaCommand.getWorkingDir().toPath();\n+      String workerWorkingDirName = String.format(\"test-worker-%06d\", workerId.incrementAndGet());\n+      Path workerWorkingDir = taskWorkingDir.resolve(workerWorkingDirName);\n+\n+      createWorkingDir(workerWorkingDir);\n+      copyGemFirePropertiesFile(taskWorkingDir, workerWorkingDir);\n+\n+      javaCommand.setWorkingDir(workerWorkingDir);\n+    };\n+  }\n+\n+  private void copyGemFirePropertiesFile(Path taskWorkingDir, Path workerWorkingDir) {\n+    Path taskPropertiesFile = taskWorkingDir.resolve(GEMFIRE_PROPERTIES);\n+    if (!Files.exists(taskPropertiesFile)) {\n+      return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDM3MTM4MQ=="}, "originalCommit": {"oid": "5fa02e9466c4f1b2422e9a33172738dd6547f1b6"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4569, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}