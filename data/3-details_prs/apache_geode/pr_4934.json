{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMzYxNDk4", "number": 4934, "title": "GEODE-7940: Fix Tracking of ShadowBuckets Destroyed", "bodyText": "The BucketAdvisor can now keep track of more than just one shadow\nbucket to avoid incorrectly marking all of them as destroyed.\n\nAdded unit and distributed tests.\n\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-04-09T11:10:53Z", "url": "https://github.com/apache/geode/pull/4934", "merged": true, "mergeCommit": {"oid": "bfbb398891c5d96fa3a5975365b29d71bd849ad6"}, "closed": true, "closedAt": "2020-04-17T08:32:23Z", "author": {"login": "jujoramos"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcV6gcCgH2gAyNDAxMzYxNDk4OmU2OWJhN2ZlZjg1ZGYzNjEwYjEzYWRlMjQwZDcxYzQ0ZDc0MmYzZGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYPO4tAFqTM5NDc5OTgzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "e69ba7fef85df3610b13ade240d71c44d742f3dc", "author": {"user": {"login": "jujoramos", "name": "Juan Jos\u00e9 Ramos"}}, "url": "https://github.com/apache/geode/commit/e69ba7fef85df3610b13ade240d71c44d742f3dc", "committedDate": "2020-04-09T11:08:25Z", "message": "GEODE-7940: Fix Track of ShadowBuckets Destroyed\n\nThe BucketAdvisor can now keep track of more than just one shadow\nbucket to avoid incorrectly marking all of them as destroyed.\n\n- Added unit and distributed tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjMyMzcx", "url": "https://github.com/apache/geode/pull/4934#pullrequestreview-391632371", "createdAt": "2020-04-10T19:58:46Z", "commit": {"oid": "e69ba7fef85df3610b13ade240d71c44d742f3dc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1368aa290fcaa8adbb208a1262df5e762740b9d5", "author": {"user": {"login": "jujoramos", "name": "Juan Jos\u00e9 Ramos"}}, "url": "https://github.com/apache/geode/commit/1368aa290fcaa8adbb208a1262df5e762740b9d5", "committedDate": "2020-04-14T14:10:35Z", "message": "- Rename some methods.\n- Improve 'markAllShadowBucketsAsNonDestroyed' implementation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e1f15a19aee7a30af5de8bac8f1cb5592e4ad31", "author": {"user": {"login": "jujoramos", "name": "Juan Jos\u00e9 Ramos"}}, "url": "https://github.com/apache/geode/commit/9e1f15a19aee7a30af5de8bac8f1cb5592e4ad31", "committedDate": "2020-04-14T15:00:31Z", "message": "- Fix tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMTI3OTI5", "url": "https://github.com/apache/geode/pull/4934#pullrequestreview-393127929", "createdAt": "2020-04-14T17:07:24Z", "commit": {"oid": "9e1f15a19aee7a30af5de8bac8f1cb5592e4ad31"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzowNzoyNFrOGFYg1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoxMjo1NFrOGFYttw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI5NzY4Ng==", "bodyText": "just a thought, would this simplify to :\nboolean thisBucketDestroyed = brq.isDestroyed();\nif (!isDREvent) {\nthisBucketDestroyed |= prQ.getColocatedWithRegion()...;\n}", "url": "https://github.com/apache/geode/pull/4934#discussion_r408297686", "createdAt": "2020-04-14T17:07:24Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderQueue.java", "diffHunk": "@@ -790,17 +790,17 @@ public boolean put(Object object) throws InterruptedException, CacheException {\n           LocalRegion.setThreadInitLevelRequirement(oldLevel);\n         }\n       } else {\n-        boolean thisbucketDestroyed = false;\n+        boolean thisBucketDestroyed;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e1f15a19aee7a30af5de8bac8f1cb5592e4ad31"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI5OTM0OA==", "bodyText": "Pulling this out will always construct this string now.  Any ideas on perf impact?", "url": "https://github.com/apache/geode/pull/4934#discussion_r408299348", "createdAt": "2020-04-14T17:10:03Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderQueue.java", "diffHunk": "@@ -701,17 +701,17 @@ public boolean put(Object object) throws InterruptedException, CacheException {\n     AbstractBucketRegionQueue brq =\n         (AbstractBucketRegionQueue) prQ.getDataStore().getLocalBucketById(bucketId);\n \n+    // Full path of the bucket:\n+    final String bucketFullPath =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e1f15a19aee7a30af5de8bac8f1cb5592e4ad31"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMwMDA5Mw==", "bodyText": "No change needed, but there might be a way to do this with a stream filter instead .", "url": "https://github.com/apache/geode/pull/4934#discussion_r408300093", "createdAt": "2020-04-14T17:11:24Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/BucketAdvisorTest.java", "diffHunk": "@@ -150,4 +155,42 @@ public void volunteerForPrimaryIgnoresMissingPrimaryElector() {\n     advisorSpy.volunteerForPrimary();\n     verify(volunteeringDelegate).volunteerForPrimary();\n   }\n+\n+  @Test\n+  public void shadowBucketsDestroyedTrackingShouldWorkCorrectly() {\n+    DistributionManager distributionManager = mock(DistributionManager.class);\n+    when(distributionManager.getId()).thenReturn(new InternalDistributedMember(\"localhost\", 321));\n+\n+    Bucket bucket = mock(Bucket.class);\n+    when(bucket.isHosting()).thenReturn(true);\n+    when(bucket.isPrimary()).thenReturn(false);\n+    when(bucket.getDistributionManager()).thenReturn(distributionManager);\n+\n+    PartitionedRegion partitionedRegion = mock(PartitionedRegion.class);\n+    when(partitionedRegion.getRedundantCopies()).thenReturn(0);\n+    when(partitionedRegion.getPartitionAttributes()).thenReturn(new PartitionAttributesImpl());\n+    RegionAdvisor regionAdvisor = mock(RegionAdvisor.class);\n+    when(regionAdvisor.getPartitionedRegion()).thenReturn(partitionedRegion);\n+\n+    List<String> shadowBuckets = Arrays.asList(\"/bucket1\", \"/bucket2\", \"/bucket3\");\n+    BucketAdvisor bucketAdvisor = BucketAdvisor.createBucketAdvisor(bucket, regionAdvisor);\n+    shadowBuckets.forEach(bucketAdvisor::markShadowBucketAsDestroyed);\n+\n+    // Return false by default.\n+    assertThat(bucketAdvisor.isShadowBucketDestroyed(\"/bucket\")).isFalse();\n+\n+    // Return correct value when found.\n+    bucketAdvisor.markShadowBucketAsDestroyed(shadowBuckets.get(1));\n+    assertThat(bucketAdvisor.isShadowBucketDestroyed(shadowBuckets.get(1))).isTrue();\n+\n+    // Mark all shadow buckets values as destroyed\n+    bucketAdvisor.markAllShadowBucketsAsDestroyed();\n+    shadowBuckets", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e1f15a19aee7a30af5de8bac8f1cb5592e4ad31"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMwMDk4Mw==", "bodyText": "maybe break this into two tests, one just for marking?  it might seem redundant so it's up to you", "url": "https://github.com/apache/geode/pull/4934#discussion_r408300983", "createdAt": "2020-04-14T17:12:54Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/BucketAdvisorTest.java", "diffHunk": "@@ -150,4 +155,42 @@ public void volunteerForPrimaryIgnoresMissingPrimaryElector() {\n     advisorSpy.volunteerForPrimary();\n     verify(volunteeringDelegate).volunteerForPrimary();\n   }\n+\n+  @Test\n+  public void shadowBucketsDestroyedTrackingShouldWorkCorrectly() {\n+    DistributionManager distributionManager = mock(DistributionManager.class);\n+    when(distributionManager.getId()).thenReturn(new InternalDistributedMember(\"localhost\", 321));\n+\n+    Bucket bucket = mock(Bucket.class);\n+    when(bucket.isHosting()).thenReturn(true);\n+    when(bucket.isPrimary()).thenReturn(false);\n+    when(bucket.getDistributionManager()).thenReturn(distributionManager);\n+\n+    PartitionedRegion partitionedRegion = mock(PartitionedRegion.class);\n+    when(partitionedRegion.getRedundantCopies()).thenReturn(0);\n+    when(partitionedRegion.getPartitionAttributes()).thenReturn(new PartitionAttributesImpl());\n+    RegionAdvisor regionAdvisor = mock(RegionAdvisor.class);\n+    when(regionAdvisor.getPartitionedRegion()).thenReturn(partitionedRegion);\n+\n+    List<String> shadowBuckets = Arrays.asList(\"/bucket1\", \"/bucket2\", \"/bucket3\");\n+    BucketAdvisor bucketAdvisor = BucketAdvisor.createBucketAdvisor(bucket, regionAdvisor);\n+    shadowBuckets.forEach(bucketAdvisor::markShadowBucketAsDestroyed);\n+\n+    // Return false by default.\n+    assertThat(bucketAdvisor.isShadowBucketDestroyed(\"/bucket\")).isFalse();\n+\n+    // Return correct value when found.\n+    bucketAdvisor.markShadowBucketAsDestroyed(shadowBuckets.get(1));\n+    assertThat(bucketAdvisor.isShadowBucketDestroyed(shadowBuckets.get(1))).isTrue();\n+\n+    // Mark all shadow buckets values as destroyed\n+    bucketAdvisor.markAllShadowBucketsAsDestroyed();\n+    shadowBuckets\n+        .forEach(b -> assertThat(assertThat(bucketAdvisor.isShadowBucketDestroyed(b)).isTrue()));\n+\n+    // Mark all shadow buckets values as non destroyed\n+    bucketAdvisor.markAllShadowBucketsAsNonDestroyed();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e1f15a19aee7a30af5de8bac8f1cb5592e4ad31"}, "originalPosition": 87}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0400d7ce921e50c65b1ba1e23c1c647380ce920f", "author": {"user": {"login": "jujoramos", "name": "Juan Jos\u00e9 Ramos"}}, "url": "https://github.com/apache/geode/commit/0400d7ce921e50c65b1ba1e23c1c647380ce920f", "committedDate": "2020-04-15T09:23:19Z", "message": "- Changes requested by reviewers."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0Nzk5ODM3", "url": "https://github.com/apache/geode/pull/4934#pullrequestreview-394799837", "createdAt": "2020-04-16T16:25:06Z", "commit": {"oid": "0400d7ce921e50c65b1ba1e23c1c647380ce920f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4787, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}