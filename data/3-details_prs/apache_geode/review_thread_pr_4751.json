{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyMDc2Mjg3", "number": 4751, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo1NzowOVrODkwbRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDozNjoyOVrODmdDhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODY4NzQxOnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/tcp/TCPConduitDUnitTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo1NzowOVrOFxQcXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDoxNTo0NlrOFxu3sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5Mzk1MA==", "bodyText": "See earlier comment about descriptive test names.\nAlso, I wanted to check that this test is able to detect the failure condition it was written for (a hang caused by async messaging) so I ran it against the previous commit on this branch, before the asyncMode field was added to the Connection class. The test doesn't pass, as expected, but it takes 5 minutes to report the hang. Would it be possible to have the test use a smaller timeout instead of the default 5 minutes to speed things up a bit for if/when it does fail?", "url": "https://github.com/apache/geode/pull/4751#discussion_r387193950", "createdAt": "2020-03-03T17:57:09Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/tcp/TCPConduitDUnitTest.java", "diffHunk": "@@ -113,6 +116,88 @@ public void basicAcceptConnection() throws Exception {\n     }\n   }\n \n+\n+  @Test\n+  public void testClosingOfSenderConnections() throws Exception {\n+    final VM vm1 = VM.getVM(1);\n+    final VM vm2 = VM.getVM(2);\n+    final VM vm3 = VM.getVM(3);\n+\n+    disconnectAllFromDS();\n+\n+    int port = startLocator();\n+    properties.put(ConfigurationProperties.LOCATORS, \"localhost[\" + port + \"]\");\n+\n+    vm1.invoke(() -> startServer(properties));\n+    vm2.invoke(() -> startServer(properties));\n+    vm3.invoke(() -> startServer(properties));\n+\n+    await().untilAsserted(() -> {\n+      assertThat(ConnectionTable.getNumSenderSharedConnections()).isEqualTo(3);\n+    });\n+\n+    try {\n+      await(\"for message to be sent\").until(() -> {\n+        final SerialAckedMessage serialAckedMessage = new SerialAckedMessage();\n+        serialAckedMessage.send(system.getAllOtherMembers(), false);\n+        return true;\n+      });\n+    } finally {\n+      // DUnit won't clean up properly if the sockets are hung; we have to crash the systems.\n+      IgnoredException.addIgnoredException(\"ForcedDisconnectException|loss of quorum\");\n+      for (VM vm : Arrays.asList(vm1, vm2, vm3)) {\n+        vm.invoke(\"crash system in case it's hung\", () -> {\n+          if (system != null && system.isConnected()) {\n+            DistributedTestUtils.crashDistributedSystem(system);\n+          }\n+        });\n+      }\n+      assertThat(ConnectionTable.getNumSenderSharedConnections()).isEqualTo(0);\n+      DistributedTestUtils.crashDistributedSystem(system);\n+    }\n+  }\n+\n+  @Test\n+  public void testAsyncHanging() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08720eeae54c92ced8170574f80da47d7c375418"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5MjQ2Ng==", "bodyText": "await() functionality has default timeout of 5 minutes, which as I was told should not be changed.", "url": "https://github.com/apache/geode/pull/4751#discussion_r387692466", "createdAt": "2020-03-04T14:15:46Z", "author": {"login": "mivanac"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/tcp/TCPConduitDUnitTest.java", "diffHunk": "@@ -113,6 +116,88 @@ public void basicAcceptConnection() throws Exception {\n     }\n   }\n \n+\n+  @Test\n+  public void testClosingOfSenderConnections() throws Exception {\n+    final VM vm1 = VM.getVM(1);\n+    final VM vm2 = VM.getVM(2);\n+    final VM vm3 = VM.getVM(3);\n+\n+    disconnectAllFromDS();\n+\n+    int port = startLocator();\n+    properties.put(ConfigurationProperties.LOCATORS, \"localhost[\" + port + \"]\");\n+\n+    vm1.invoke(() -> startServer(properties));\n+    vm2.invoke(() -> startServer(properties));\n+    vm3.invoke(() -> startServer(properties));\n+\n+    await().untilAsserted(() -> {\n+      assertThat(ConnectionTable.getNumSenderSharedConnections()).isEqualTo(3);\n+    });\n+\n+    try {\n+      await(\"for message to be sent\").until(() -> {\n+        final SerialAckedMessage serialAckedMessage = new SerialAckedMessage();\n+        serialAckedMessage.send(system.getAllOtherMembers(), false);\n+        return true;\n+      });\n+    } finally {\n+      // DUnit won't clean up properly if the sockets are hung; we have to crash the systems.\n+      IgnoredException.addIgnoredException(\"ForcedDisconnectException|loss of quorum\");\n+      for (VM vm : Arrays.asList(vm1, vm2, vm3)) {\n+        vm.invoke(\"crash system in case it's hung\", () -> {\n+          if (system != null && system.isConnected()) {\n+            DistributedTestUtils.crashDistributedSystem(system);\n+          }\n+        });\n+      }\n+      assertThat(ConnectionTable.getNumSenderSharedConnections()).isEqualTo(0);\n+      DistributedTestUtils.crashDistributedSystem(system);\n+    }\n+  }\n+\n+  @Test\n+  public void testAsyncHanging() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5Mzk1MA=="}, "originalCommit": {"oid": "08720eeae54c92ced8170574f80da47d7c375418"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODY5Mzg0OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/tcp/TCPConduitDUnitTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo1OToxMFrOFxQggQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQxOTozNjoxMVrOFz2lNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5NTAwOQ==", "bodyText": "This test name could do with being more descriptive. A good test name should describe what part of the code is being tested, using which parameters, and what the expected outcome is.\nAlso, this test appears to be identical to the first test method in this class, with the addition of one extra assert. Are both cases needed?", "url": "https://github.com/apache/geode/pull/4751#discussion_r387195009", "createdAt": "2020-03-03T17:59:10Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/tcp/TCPConduitDUnitTest.java", "diffHunk": "@@ -113,6 +116,88 @@ public void basicAcceptConnection() throws Exception {\n     }\n   }\n \n+\n+  @Test\n+  public void testClosingOfSenderConnections() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08720eeae54c92ced8170574f80da47d7c375418"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5MzM5MQ==", "bodyText": "This added assert is for testing of modification added in this PR.", "url": "https://github.com/apache/geode/pull/4751#discussion_r387693391", "createdAt": "2020-03-04T14:17:16Z", "author": {"login": "mivanac"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/tcp/TCPConduitDUnitTest.java", "diffHunk": "@@ -113,6 +116,88 @@ public void basicAcceptConnection() throws Exception {\n     }\n   }\n \n+\n+  @Test\n+  public void testClosingOfSenderConnections() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5NTAwOQ=="}, "originalCommit": {"oid": "08720eeae54c92ced8170574f80da47d7c375418"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTkxNTk1OA==", "bodyText": "This test is removed", "url": "https://github.com/apache/geode/pull/4751#discussion_r389915958", "createdAt": "2020-03-09T19:36:11Z", "author": {"login": "mivanac"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/tcp/TCPConduitDUnitTest.java", "diffHunk": "@@ -113,6 +116,88 @@ public void basicAcceptConnection() throws Exception {\n     }\n   }\n \n+\n+  @Test\n+  public void testClosingOfSenderConnections() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE5NTAwOQ=="}, "originalCommit": {"oid": "08720eeae54c92ced8170574f80da47d7c375418"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTA2MDEyOnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/tcp/TCPConduitDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo0ODo1NVrOFxUISA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo0ODo1NVrOFxUISA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1NDM0NA==", "bodyText": "This block of code doesn't appear to achieve anything. The test runs the same with or without it, both before and after the asyncMode fix introduction.", "url": "https://github.com/apache/geode/pull/4751#discussion_r387254344", "createdAt": "2020-03-03T19:48:55Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/tcp/TCPConduitDUnitTest.java", "diffHunk": "@@ -113,6 +116,88 @@ public void basicAcceptConnection() throws Exception {\n     }\n   }\n \n+\n+  @Test\n+  public void testClosingOfSenderConnections() throws Exception {\n+    final VM vm1 = VM.getVM(1);\n+    final VM vm2 = VM.getVM(2);\n+    final VM vm3 = VM.getVM(3);\n+\n+    disconnectAllFromDS();\n+\n+    int port = startLocator();\n+    properties.put(ConfigurationProperties.LOCATORS, \"localhost[\" + port + \"]\");\n+\n+    vm1.invoke(() -> startServer(properties));\n+    vm2.invoke(() -> startServer(properties));\n+    vm3.invoke(() -> startServer(properties));\n+\n+    await().untilAsserted(() -> {\n+      assertThat(ConnectionTable.getNumSenderSharedConnections()).isEqualTo(3);\n+    });\n+\n+    try {\n+      await(\"for message to be sent\").until(() -> {\n+        final SerialAckedMessage serialAckedMessage = new SerialAckedMessage();\n+        serialAckedMessage.send(system.getAllOtherMembers(), false);\n+        return true;\n+      });\n+    } finally {\n+      // DUnit won't clean up properly if the sockets are hung; we have to crash the systems.\n+      IgnoredException.addIgnoredException(\"ForcedDisconnectException|loss of quorum\");\n+      for (VM vm : Arrays.asList(vm1, vm2, vm3)) {\n+        vm.invoke(\"crash system in case it's hung\", () -> {\n+          if (system != null && system.isConnected()) {\n+            DistributedTestUtils.crashDistributedSystem(system);\n+          }\n+        });\n+      }\n+      assertThat(ConnectionTable.getNumSenderSharedConnections()).isEqualTo(0);\n+      DistributedTestUtils.crashDistributedSystem(system);\n+    }\n+  }\n+\n+  @Test\n+  public void testAsyncHanging() throws Exception {\n+    final VM vm1 = VM.getVM(1);\n+    final VM vm2 = VM.getVM(2);\n+    final VM vm3 = VM.getVM(3);\n+\n+    disconnectAllFromDS();\n+\n+    int port = startLocator();\n+    properties.put(ConfigurationProperties.LOCATORS, \"localhost[\" + port + \"]\");\n+    properties.put(\"async-distribution-timeout\", \"5\");\n+\n+    vm1.invoke(() -> startServer(properties));\n+    vm2.invoke(() -> startServer(properties));\n+    vm3.invoke(() -> startServer(properties));\n+\n+    await().untilAsserted(() -> {\n+      assertThat(ConnectionTable.getNumSenderSharedConnections()).isEqualTo(3);\n+    });\n+\n+    try {\n+      await(\"for message to be sent\").until(() -> {\n+        final SerialAckedMessage serialAckedMessage = new SerialAckedMessage();\n+        serialAckedMessage.send(system.getAllOtherMembers(), false);\n+        return true;\n+      });\n+    } finally {\n+      // DUnit won't clean up properly if the sockets are hung; we have to crash the systems.\n+      IgnoredException.addIgnoredException(\"ForcedDisconnectException|loss of quorum\");\n+      for (VM vm : Arrays.asList(vm1, vm2, vm3)) {\n+        vm.invoke(\"crash system in case it's hung\", () -> {\n+          if (system != null && system.isConnected()) {\n+            DistributedTestUtils.crashDistributedSystem(system);\n+          }\n+        });\n+      }\n+      DistributedTestUtils.crashDistributedSystem(system);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08720eeae54c92ced8170574f80da47d7c375418"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTExNjA5OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/management/DistributedSystemMXBeanWithAlertsDistributedTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDowNToyMlrOFxUqqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNDoxOTozMFrOFxvBHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2MzE0NA==", "bodyText": "What is the reason for adding this as an ignored exception?  Why do we now expect to see this exception and feel okay ignoring it?", "url": "https://github.com/apache/geode/pull/4751#discussion_r387263144", "createdAt": "2020-03-03T20:05:22Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/management/DistributedSystemMXBeanWithAlertsDistributedTest.java", "diffHunk": "@@ -137,6 +137,7 @@ public void setUp() throws Exception {\n     memberVM3 = getVM(3);\n \n     managerMember = managerVM.invoke(() -> createManager());\n+    IgnoredException.addIgnoredException(\"Cannot form connection to alert listener\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08720eeae54c92ced8170574f80da47d7c375418"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY5NDg3Ng==", "bodyText": "Due to previous solution, sender thread did not detect release of connection. So this is the reason why this exception did not appear in test logs.", "url": "https://github.com/apache/geode/pull/4751#discussion_r387694876", "createdAt": "2020-03-04T14:19:30Z", "author": {"login": "mivanac"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/management/DistributedSystemMXBeanWithAlertsDistributedTest.java", "diffHunk": "@@ -137,6 +137,7 @@ public void setUp() throws Exception {\n     memberVM3 = getVM(3);\n \n     managerMember = managerVM.invoke(() -> createManager());\n+    IgnoredException.addIgnoredException(\"Cannot form connection to alert listener\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI2MzE0NA=="}, "originalCommit": {"oid": "08720eeae54c92ced8170574f80da47d7c375418"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQ3NTE1OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/tcp/ConnectionChangeHangTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDozMzoyNFrOFz4XHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDozMzoyNFrOFz4XHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk0NTExNw==", "bodyText": "There is an empty finally block here that should either be removed along with the try, or have something relevant done in it.", "url": "https://github.com/apache/geode/pull/4751#discussion_r389945117", "createdAt": "2020-03-09T20:33:24Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/tcp/ConnectionChangeHangTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.tcp;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.distributed.internal.InternalDistributedSystem;\n+import org.apache.geode.distributed.internal.SerialAckedMessage;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+public class ConnectionChangeHangTest implements Serializable {\n+  int serversToStart = 3;\n+\n+  protected static InternalDistributedSystem system =\n+      InternalDistributedSystem.getConnectedInstance();\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule(serversToStart + 1);\n+\n+  MemberVM locator;\n+  MemberVM server1;\n+  MemberVM server2;\n+  MemberVM server3;\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    locator = cluster.startLocatorVM(0);\n+\n+  }\n+\n+  private MemberVM startServer(final int vmIndex) {\n+    return cluster.startServerVM(\n+        vmIndex, s -> s.withConnectionToLocator(locator.getPort())\n+            .withProperty(\"async-distribution-timeout\", \"5\"));\n+  }\n+\n+  @Test\n+\n+  public void testNoHanging() {\n+    server1 = startServer(1);\n+    server2 = startServer(2);\n+    server3 = startServer(3);\n+    locator.invoke(() -> await().untilAsserted(() -> {\n+      assertThat(ConnectionTable.getNumSenderSharedConnections()).isEqualTo(3);\n+    }));\n+\n+\n+    try {\n+      locator.invoke(() -> await(\"for message to be sent\").until(() -> {\n+        final SerialAckedMessage serialAckedMessage = new SerialAckedMessage();\n+        serialAckedMessage.send(system.getAllOtherMembers(), false);\n+        return true;\n+      }));\n+    } finally {\n+\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73163ce0d5520fb6d6dc2a771313882bf3546ca2"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQ4MDI0OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/tcp/ConnectionChangeHangTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDozNDo1NFrOFz4aFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDozNDo1NFrOFz4aFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk0NTg3Nw==", "bodyText": "This test name would be more descriptive if it was something like \"serverStartupDoesNotHangWhenAsyncDistributionTimeoutIsSet\"", "url": "https://github.com/apache/geode/pull/4751#discussion_r389945877", "createdAt": "2020-03-09T20:34:54Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/tcp/ConnectionChangeHangTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.tcp;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.distributed.internal.InternalDistributedSystem;\n+import org.apache.geode.distributed.internal.SerialAckedMessage;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+public class ConnectionChangeHangTest implements Serializable {\n+  int serversToStart = 3;\n+\n+  protected static InternalDistributedSystem system =\n+      InternalDistributedSystem.getConnectedInstance();\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule(serversToStart + 1);\n+\n+  MemberVM locator;\n+  MemberVM server1;\n+  MemberVM server2;\n+  MemberVM server3;\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    locator = cluster.startLocatorVM(0);\n+\n+  }\n+\n+  private MemberVM startServer(final int vmIndex) {\n+    return cluster.startServerVM(\n+        vmIndex, s -> s.withConnectionToLocator(locator.getPort())\n+            .withProperty(\"async-distribution-timeout\", \"5\"));\n+  }\n+\n+  @Test\n+\n+  public void testNoHanging() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73163ce0d5520fb6d6dc2a771313882bf3546ca2"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQ4MDQ5OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/tcp/ConnectionChangeHangTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDozNTowMlrOFz4aUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDozNTowMlrOFz4aUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk0NTkzOA==", "bodyText": "There is an extra line break here", "url": "https://github.com/apache/geode/pull/4751#discussion_r389945938", "createdAt": "2020-03-09T20:35:02Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/tcp/ConnectionChangeHangTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.tcp;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.distributed.internal.InternalDistributedSystem;\n+import org.apache.geode.distributed.internal.SerialAckedMessage;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+public class ConnectionChangeHangTest implements Serializable {\n+  int serversToStart = 3;\n+\n+  protected static InternalDistributedSystem system =\n+      InternalDistributedSystem.getConnectedInstance();\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule(serversToStart + 1);\n+\n+  MemberVM locator;\n+  MemberVM server1;\n+  MemberVM server2;\n+  MemberVM server3;\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    locator = cluster.startLocatorVM(0);\n+\n+  }\n+\n+  private MemberVM startServer(final int vmIndex) {\n+    return cluster.startServerVM(\n+        vmIndex, s -> s.withConnectionToLocator(locator.getPort())\n+            .withProperty(\"async-distribution-timeout\", \"5\"));\n+  }\n+\n+  @Test\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73163ce0d5520fb6d6dc2a771313882bf3546ca2"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQxNjQ4NTE2OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/tcp/ConnectionChangeHangTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDozNjoyOVrOFz4dNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wOVQyMDozNjoyOVrOFz4dNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4OTk0NjY3OQ==", "bodyText": "This class should be renamed. The original name was a placeholder for use while debugging.", "url": "https://github.com/apache/geode/pull/4751#discussion_r389946679", "createdAt": "2020-03-09T20:36:29Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/tcp/ConnectionChangeHangTest.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.tcp;\n+\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.distributed.internal.InternalDistributedSystem;\n+import org.apache.geode.distributed.internal.SerialAckedMessage;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+public class ConnectionChangeHangTest implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73163ce0d5520fb6d6dc2a771313882bf3546ca2"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4472, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}