{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2OTgyNzc2", "number": 5102, "title": "GEODE-8112: Add --member option in query command.", "bodyText": "", "createdAt": "2020-05-12T21:34:34Z", "url": "https://github.com/apache/geode/pull/5102", "merged": true, "mergeCommit": {"oid": "d08847baebcd2c975941be4641e8db2b7612ab6b"}, "closed": true, "closedAt": "2020-05-21T16:28:21Z", "author": {"login": "pivotal-eshu"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgrLOLAH2gAyNDE2OTgyNzc2OmE3NTEyNTExNWVhZWYwNzFkMGI1MzdiNDBjNjk0MjVhYWNhNWU2NTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjczO6AFqTQxNjEwMzAzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a75125115eaef071d0b537b40c69425aaca5e653", "author": {"user": {"login": "pivotal-eshu", "name": "Eric Shu"}}, "url": "https://github.com/apache/geode/commit/a75125115eaef071d0b537b40c69425aaca5e653", "committedDate": "2020-05-12T21:29:50Z", "message": "GEODE-8112: Add --member option in query command."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNDY1ODMz", "url": "https://github.com/apache/geode/pull/5102#pullrequestreview-410465833", "createdAt": "2020-05-12T22:25:07Z", "commit": {"oid": "a75125115eaef071d0b537b40c69425aaca5e653"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjoyNTowOFrOGUbG1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMjo0MjoxMFrOGUbepA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2ODgyMA==", "bodyText": "Could this use CommandStringBuilder? It makes things easier to read in my experience.", "url": "https://github.com/apache/geode/pull/5102#discussion_r424068820", "createdAt": "2020-05-12T22:25:08Z", "author": {"login": "DonalEvans"}, "path": "geode-dunit/src/main/java/org/apache/geode/management/internal/cli/commands/QueryCommandDUnitTestBase.java", "diffHunk": "@@ -310,4 +323,40 @@ public void setValue1(Value1 value1) {\n       this.value1 = value1;\n     }\n   }\n+\n+  @Test\n+  public void testSimpleQueryWithProxyRegion() {\n+    server1.invoke(() -> setupReplicatedProxyRegion(DATA_REGION_WITH_PROXY_NAME));\n+    server2.invoke(() -> setupReplicatedRegion(DATA_REGION_WITH_PROXY_NAME));\n+    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(DATA_REGION_WITH_PROXY_NAME_PATH, 2);\n+\n+    server1.invoke(() -> prepareDataForRegion(DATA_REGION_WITH_PROXY_NAME_PATH));\n+\n+    String member = getHostingMember();\n+    Random random = new Random(System.nanoTime());\n+    int randomInteger = random.nextInt(COUNT);\n+    String query = \"query --member=\" + member\n+        + \" --query=\\\"select ID , status , createTime , pk, floatMinValue from \"\n+        + DATA_REGION_WITH_PROXY_NAME_PATH + \" where ID <= \" + randomInteger\n+        + \"\\\" --interactive=false\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a75125115eaef071d0b537b40c69425aaca5e653"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2OTgwNA==", "bodyText": "executeCommand() is deprecated. You can use executeAndAssertThat(query).getCommandResult() instead.", "url": "https://github.com/apache/geode/pull/5102#discussion_r424069804", "createdAt": "2020-05-12T22:27:49Z", "author": {"login": "DonalEvans"}, "path": "geode-dunit/src/main/java/org/apache/geode/management/internal/cli/commands/QueryCommandDUnitTestBase.java", "diffHunk": "@@ -310,4 +323,40 @@ public void setValue1(Value1 value1) {\n       this.value1 = value1;\n     }\n   }\n+\n+  @Test\n+  public void testSimpleQueryWithProxyRegion() {\n+    server1.invoke(() -> setupReplicatedProxyRegion(DATA_REGION_WITH_PROXY_NAME));\n+    server2.invoke(() -> setupReplicatedRegion(DATA_REGION_WITH_PROXY_NAME));\n+    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(DATA_REGION_WITH_PROXY_NAME_PATH, 2);\n+\n+    server1.invoke(() -> prepareDataForRegion(DATA_REGION_WITH_PROXY_NAME_PATH));\n+\n+    String member = getHostingMember();\n+    Random random = new Random(System.nanoTime());\n+    int randomInteger = random.nextInt(COUNT);\n+    String query = \"query --member=\" + member\n+        + \" --query=\\\"select ID , status , createTime , pk, floatMinValue from \"\n+        + DATA_REGION_WITH_PROXY_NAME_PATH + \" where ID <= \" + randomInteger\n+        + \"\\\" --interactive=false\";\n+\n+    CommandResult commandResult = gfsh.executeCommand(query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a75125115eaef071d0b537b40c69425aaca5e653"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2OTkzNw==", "bodyText": "executeCommand() is deprecated. You can use executeAndAssertThat(query).getCommandResult() instead.", "url": "https://github.com/apache/geode/pull/5102#discussion_r424069937", "createdAt": "2020-05-12T22:28:09Z", "author": {"login": "DonalEvans"}, "path": "geode-dunit/src/main/java/org/apache/geode/management/internal/cli/commands/QueryCommandDUnitTestBase.java", "diffHunk": "@@ -310,4 +323,40 @@ public void setValue1(Value1 value1) {\n       this.value1 = value1;\n     }\n   }\n+\n+  @Test\n+  public void testSimpleQueryWithProxyRegion() {\n+    server1.invoke(() -> setupReplicatedProxyRegion(DATA_REGION_WITH_PROXY_NAME));\n+    server2.invoke(() -> setupReplicatedRegion(DATA_REGION_WITH_PROXY_NAME));\n+    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(DATA_REGION_WITH_PROXY_NAME_PATH, 2);\n+\n+    server1.invoke(() -> prepareDataForRegion(DATA_REGION_WITH_PROXY_NAME_PATH));\n+\n+    String member = getHostingMember();\n+    Random random = new Random(System.nanoTime());\n+    int randomInteger = random.nextInt(COUNT);\n+    String query = \"query --member=\" + member\n+        + \" --query=\\\"select ID , status , createTime , pk, floatMinValue from \"\n+        + DATA_REGION_WITH_PROXY_NAME_PATH + \" where ID <= \" + randomInteger\n+        + \"\\\" --interactive=false\";\n+\n+    CommandResult commandResult = gfsh.executeCommand(query);\n+    validateSelectResult(commandResult, true, (randomInteger + 1),\n+        new String[] {\"ID\", \"status\", \"createTime\", \"pk\", \"floatMinValue\"});\n+  }\n+\n+  private String getHostingMember() {\n+    String hostingMember = null;\n+    String findMemberCommand = \"describe region --name=\" + DATA_REGION_WITH_PROXY_NAME;\n+    CommandResult findMemberResult = gfsh.executeCommand(findMemberCommand);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a75125115eaef071d0b537b40c69425aaca5e653"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA3NDkxNg==", "bodyText": "This new command option should be documented in query.html.md.erb. Also, I notice that that page has some inaccuracies that could be fixed while you're updating it. [--step-name=value] is listed as an argument, but not represented in the code,  and the --file option described in the docs seems to not be used at all in the code. The --interactive option is also not used anywhere in the code, or documented, so I wonder if it could just be removed.", "url": "https://github.com/apache/geode/pull/5102#discussion_r424074916", "createdAt": "2020-05-12T22:42:10Z", "author": {"login": "DonalEvans"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/QueryCommand.java", "diffHunk": "@@ -60,12 +60,17 @@ public ResultModel query(\n       @CliOption(key = \"file\", help = \"File in which to output the results.\",\n           optionContext = ConverterHint.FILE) final File outputFile,\n       @CliOption(key = CliStrings.QUERY__INTERACTIVE, unspecifiedDefaultValue = \"false\",\n-          help = CliStrings.QUERY__INTERACTIVE__HELP) final boolean interactive) {\n-    DataCommandResult dataResult = select(query);\n+          help = CliStrings.QUERY__INTERACTIVE__HELP) final boolean interactive,\n+      @CliOption(key = CliStrings.MEMBER,\n+          optionContext = ConverterHint.MEMBERIDNAME,\n+          help = CliStrings.QUERY__MEMBER__HELP) final String memberNameOrId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a75125115eaef071d0b537b40c69425aaca5e653"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNzE0MTMy", "url": "https://github.com/apache/geode/pull/5102#pullrequestreview-410714132", "createdAt": "2020-05-13T08:45:06Z", "commit": {"oid": "a75125115eaef071d0b537b40c69425aaca5e653"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODo0NTowNlrOGUnmmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODo1MzoyOFrOGUn7Xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI3MzU2Mg==", "bodyText": "Maybe change this to Name/Id of the member on which to execute the query instead?, I think is easier to understand and doesn't generate doubts on the operator/user executing the command.", "url": "https://github.com/apache/geode/pull/5102#discussion_r424273562", "createdAt": "2020-05-13T08:45:06Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java", "diffHunk": "@@ -1823,6 +1823,8 @@\n       \"Cannot find regions <{0}> in any of the members\";\n   public static final String QUERY__MSG__NOT_SUPPORTED_ON_MEMBERS = CliStrings.QUERY\n       + \" command should be used only from shell. Use QueryService API for running query inside Geode VMs\";\n+  public static final String QUERY__MEMBER__HELP =\n+      \"Name/Id of a member which hosts the regions to be queried.\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a75125115eaef071d0b537b40c69425aaca5e653"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI3NTg4Ng==", "bodyText": "Small nitpicks: since the region name is always the same (DATA_REGION_WITH_PROXY_NAME), can we use the constant instead of the parameter?.\nAlso, to prevent introducing unnecessary warnings, can we avoid the usage of rawtypes in the method?:\nRegionFactory<Integer, Portfolio> regionFactory = cache.createRegionFactory(RegionShortcut.REPLICATE_PROXY);\nRegion<Integer, Portfolio> proxyRegion = regionFactory.create(regionName);", "url": "https://github.com/apache/geode/pull/5102#discussion_r424275886", "createdAt": "2020-05-13T08:48:41Z", "author": {"login": "jujoramos"}, "path": "geode-dunit/src/main/java/org/apache/geode/management/internal/cli/commands/QueryCommandDUnitTestBase.java", "diffHunk": "@@ -256,6 +260,15 @@ private static void setupReplicatedRegion(String regionName) {\n     assertThat(dataRegion.getFullPath()).contains(regionName);\n   }\n \n+  private static void setupReplicatedProxyRegion(String regionName) {\n+    InternalCache cache = ClusterStartupRule.getCache();\n+    RegionFactory regionFactory = cache.createRegionFactory(RegionShortcut.REPLICATE_PROXY);\n+\n+    Region proxyRegion = regionFactory.create(regionName);\n+    assertThat(proxyRegion).isNotNull();\n+    assertThat(proxyRegion.getFullPath()).contains(regionName);\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a75125115eaef071d0b537b40c69425aaca5e653"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI3NzY5MQ==", "bodyText": "Would it make sense to add the same test for a PARTITION_PROXY region?, or the changes within this PR doesn't affect that use case?.", "url": "https://github.com/apache/geode/pull/5102#discussion_r424277691", "createdAt": "2020-05-13T08:51:38Z", "author": {"login": "jujoramos"}, "path": "geode-dunit/src/main/java/org/apache/geode/management/internal/cli/commands/QueryCommandDUnitTestBase.java", "diffHunk": "@@ -310,4 +323,40 @@ public void setValue1(Value1 value1) {\n       this.value1 = value1;\n     }\n   }\n+\n+  @Test\n+  public void testSimpleQueryWithProxyRegion() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a75125115eaef071d0b537b40c69425aaca5e653"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI3ODMzOA==", "bodyText": "+1", "url": "https://github.com/apache/geode/pull/5102#discussion_r424278338", "createdAt": "2020-05-13T08:52:36Z", "author": {"login": "jujoramos"}, "path": "geode-dunit/src/main/java/org/apache/geode/management/internal/cli/commands/QueryCommandDUnitTestBase.java", "diffHunk": "@@ -310,4 +323,40 @@ public void setValue1(Value1 value1) {\n       this.value1 = value1;\n     }\n   }\n+\n+  @Test\n+  public void testSimpleQueryWithProxyRegion() {\n+    server1.invoke(() -> setupReplicatedProxyRegion(DATA_REGION_WITH_PROXY_NAME));\n+    server2.invoke(() -> setupReplicatedRegion(DATA_REGION_WITH_PROXY_NAME));\n+    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(DATA_REGION_WITH_PROXY_NAME_PATH, 2);\n+\n+    server1.invoke(() -> prepareDataForRegion(DATA_REGION_WITH_PROXY_NAME_PATH));\n+\n+    String member = getHostingMember();\n+    Random random = new Random(System.nanoTime());\n+    int randomInteger = random.nextInt(COUNT);\n+    String query = \"query --member=\" + member\n+        + \" --query=\\\"select ID , status , createTime , pk, floatMinValue from \"\n+        + DATA_REGION_WITH_PROXY_NAME_PATH + \" where ID <= \" + randomInteger\n+        + \"\\\" --interactive=false\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2ODgyMA=="}, "originalCommit": {"oid": "a75125115eaef071d0b537b40c69425aaca5e653"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI3ODM5NA==", "bodyText": "+1", "url": "https://github.com/apache/geode/pull/5102#discussion_r424278394", "createdAt": "2020-05-13T08:52:41Z", "author": {"login": "jujoramos"}, "path": "geode-dunit/src/main/java/org/apache/geode/management/internal/cli/commands/QueryCommandDUnitTestBase.java", "diffHunk": "@@ -310,4 +323,40 @@ public void setValue1(Value1 value1) {\n       this.value1 = value1;\n     }\n   }\n+\n+  @Test\n+  public void testSimpleQueryWithProxyRegion() {\n+    server1.invoke(() -> setupReplicatedProxyRegion(DATA_REGION_WITH_PROXY_NAME));\n+    server2.invoke(() -> setupReplicatedRegion(DATA_REGION_WITH_PROXY_NAME));\n+    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(DATA_REGION_WITH_PROXY_NAME_PATH, 2);\n+\n+    server1.invoke(() -> prepareDataForRegion(DATA_REGION_WITH_PROXY_NAME_PATH));\n+\n+    String member = getHostingMember();\n+    Random random = new Random(System.nanoTime());\n+    int randomInteger = random.nextInt(COUNT);\n+    String query = \"query --member=\" + member\n+        + \" --query=\\\"select ID , status , createTime , pk, floatMinValue from \"\n+        + DATA_REGION_WITH_PROXY_NAME_PATH + \" where ID <= \" + randomInteger\n+        + \"\\\" --interactive=false\";\n+\n+    CommandResult commandResult = gfsh.executeCommand(query);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2OTgwNA=="}, "originalCommit": {"oid": "a75125115eaef071d0b537b40c69425aaca5e653"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI3ODg3OQ==", "bodyText": "+1", "url": "https://github.com/apache/geode/pull/5102#discussion_r424278879", "createdAt": "2020-05-13T08:53:28Z", "author": {"login": "jujoramos"}, "path": "geode-dunit/src/main/java/org/apache/geode/management/internal/cli/commands/QueryCommandDUnitTestBase.java", "diffHunk": "@@ -310,4 +323,40 @@ public void setValue1(Value1 value1) {\n       this.value1 = value1;\n     }\n   }\n+\n+  @Test\n+  public void testSimpleQueryWithProxyRegion() {\n+    server1.invoke(() -> setupReplicatedProxyRegion(DATA_REGION_WITH_PROXY_NAME));\n+    server2.invoke(() -> setupReplicatedRegion(DATA_REGION_WITH_PROXY_NAME));\n+    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(DATA_REGION_WITH_PROXY_NAME_PATH, 2);\n+\n+    server1.invoke(() -> prepareDataForRegion(DATA_REGION_WITH_PROXY_NAME_PATH));\n+\n+    String member = getHostingMember();\n+    Random random = new Random(System.nanoTime());\n+    int randomInteger = random.nextInt(COUNT);\n+    String query = \"query --member=\" + member\n+        + \" --query=\\\"select ID , status , createTime , pk, floatMinValue from \"\n+        + DATA_REGION_WITH_PROXY_NAME_PATH + \" where ID <= \" + randomInteger\n+        + \"\\\" --interactive=false\";\n+\n+    CommandResult commandResult = gfsh.executeCommand(query);\n+    validateSelectResult(commandResult, true, (randomInteger + 1),\n+        new String[] {\"ID\", \"status\", \"createTime\", \"pk\", \"floatMinValue\"});\n+  }\n+\n+  private String getHostingMember() {\n+    String hostingMember = null;\n+    String findMemberCommand = \"describe region --name=\" + DATA_REGION_WITH_PROXY_NAME;\n+    CommandResult findMemberResult = gfsh.executeCommand(findMemberCommand);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA2OTkzNw=="}, "originalCommit": {"oid": "a75125115eaef071d0b537b40c69425aaca5e653"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMDYwMDUz", "url": "https://github.com/apache/geode/pull/5102#pullrequestreview-411060053", "createdAt": "2020-05-13T15:45:59Z", "commit": {"oid": "a75125115eaef071d0b537b40c69425aaca5e653"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTo0NTo1OVrOGU4ASQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTo1NDo0NVrOGU4ZfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0MjI4MQ==", "bodyText": "you probably want to consult doc's team on this. To me something that says: \"the member to start the query on, usually should be the member that holds the data of the region.\" would be more helpful.", "url": "https://github.com/apache/geode/pull/5102#discussion_r424542281", "createdAt": "2020-05-13T15:45:59Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/i18n/CliStrings.java", "diffHunk": "@@ -1823,6 +1823,8 @@\n       \"Cannot find regions <{0}> in any of the members\";\n   public static final String QUERY__MSG__NOT_SUPPORTED_ON_MEMBERS = CliStrings.QUERY\n       + \" command should be used only from shell. Use QueryService API for running query inside Geode VMs\";\n+  public static final String QUERY__MEMBER__HELP =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a75125115eaef071d0b537b40c69425aaca5e653"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0NzE0NQ==", "bodyText": "for this test, you know server1 has the data and server2 is the proxy, so you don't really need to use \"describe region\" to get this information, you can simply add \"--member=server-1\" in your query command", "url": "https://github.com/apache/geode/pull/5102#discussion_r424547145", "createdAt": "2020-05-13T15:52:37Z", "author": {"login": "jinmeiliao"}, "path": "geode-dunit/src/main/java/org/apache/geode/management/internal/cli/commands/QueryCommandDUnitTestBase.java", "diffHunk": "@@ -310,4 +323,40 @@ public void setValue1(Value1 value1) {\n       this.value1 = value1;\n     }\n   }\n+\n+  @Test\n+  public void testSimpleQueryWithProxyRegion() {\n+    server1.invoke(() -> setupReplicatedProxyRegion(DATA_REGION_WITH_PROXY_NAME));\n+    server2.invoke(() -> setupReplicatedRegion(DATA_REGION_WITH_PROXY_NAME));\n+    locator.waitUntilRegionIsReadyOnExactlyThisManyServers(DATA_REGION_WITH_PROXY_NAME_PATH, 2);\n+\n+    server1.invoke(() -> prepareDataForRegion(DATA_REGION_WITH_PROXY_NAME_PATH));\n+\n+    String member = getHostingMember();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a75125115eaef071d0b537b40c69425aaca5e653"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDU0ODczMw==", "bodyText": "you can put these two lines in a @before setup method so that you don't need to repeat that for every test.", "url": "https://github.com/apache/geode/pull/5102#discussion_r424548733", "createdAt": "2020-05-13T15:54:45Z", "author": {"login": "jinmeiliao"}, "path": "geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/commands/QueryCommandTest.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.management.internal.cli.commands;\n+\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import org.junit.Test;\n+\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.management.internal.cli.domain.DataCommandResult;\n+\n+public class QueryCommandTest {\n+  private final QueryCommand command = new QueryCommand();\n+\n+  @Test\n+  public void targetMemberIsNotSetIfMemberOptionsIsNotUsed() {\n+    QueryCommand spyCommand = spy(command);\n+    String query = \"select query\";\n+    doReturn(mock(DataCommandResult.class)).when(spyCommand).select(query, null);\n+\n+    spyCommand.query(query, null, false, null);\n+\n+    verify(spyCommand).select(query, null);\n+  }\n+\n+  @Test\n+  public void targetMemberIsSetIfMemberOptionsIsUsed() {\n+    QueryCommand spyCommand = spy(command);\n+    DistributedMember member = mock(DistributedMember.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a75125115eaef071d0b537b40c69425aaca5e653"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b7ea1a49f1d630e0f3333fe552e9e48ac145b6b", "author": {"user": {"login": "pivotal-eshu", "name": "Eric Shu"}}, "url": "https://github.com/apache/geode/commit/5b7ea1a49f1d630e0f3333fe552e9e48ac145b6b", "committedDate": "2020-05-20T14:46:04Z", "message": "GEODE-8112: Add --member option in query command."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "484b775bbeb17ce97cd1398ae60e1c059bd0e3ae", "author": {"user": {"login": "pivotal-eshu", "name": "Eric Shu"}}, "url": "https://github.com/apache/geode/commit/484b775bbeb17ce97cd1398ae60e1c059bd0e3ae", "committedDate": "2020-05-20T17:03:46Z", "message": "Fix review comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NTU3OTE0", "url": "https://github.com/apache/geode/pull/5102#pullrequestreview-415557914", "createdAt": "2020-05-20T17:25:41Z", "commit": {"oid": "484b775bbeb17ce97cd1398ae60e1c059bd0e3ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzoyNTo0MVrOGYWQow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNzoyNTo0MVrOGYWQow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE4MzcxNQ==", "bodyText": "I think there was some confusion about my original review comment. I meant to use the Geode CommandStringBuilder class, not the Java StringBuilder.", "url": "https://github.com/apache/geode/pull/5102#discussion_r428183715", "createdAt": "2020-05-20T17:25:41Z", "author": {"login": "DonalEvans"}, "path": "geode-dunit/src/main/java/org/apache/geode/management/internal/cli/commands/QueryCommandDUnitTestBase.java", "diffHunk": "@@ -332,31 +333,18 @@ public void testSimpleQueryWithProxyRegion() {\n \n     server1.invoke(() -> prepareDataForRegion(DATA_REGION_WITH_PROXY_NAME_PATH));\n \n-    String member = getHostingMember();\n+    String member = \"server-2\";\n     Random random = new Random(System.nanoTime());\n     int randomInteger = random.nextInt(COUNT);\n-    String query = \"query --member=\" + member\n-        + \" --query=\\\"select ID , status , createTime , pk, floatMinValue from \"\n-        + DATA_REGION_WITH_PROXY_NAME_PATH + \" where ID <= \" + randomInteger\n-        + \"\\\" --interactive=false\";\n-\n-    CommandResult commandResult = gfsh.executeCommand(query);\n+    StringBuilder queryString = new StringBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "484b775bbeb17ce97cd1398ae60e1c059bd0e3ae"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "333dd4f0fe996846b45467d58bde2c30c5315639", "author": {"user": {"login": "pivotal-eshu", "name": "Eric Shu"}}, "url": "https://github.com/apache/geode/commit/333dd4f0fe996846b45467d58bde2c30c5315639", "committedDate": "2020-05-20T18:36:43Z", "message": "fix a review comment."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb3b4616c4d5e80cc4c733dcb8799e6cab498eb1", "author": {"user": {"login": "pivotal-eshu", "name": "Eric Shu"}}, "url": "https://github.com/apache/geode/commit/eb3b4616c4d5e80cc4c733dcb8799e6cab498eb1", "committedDate": "2020-05-20T18:45:07Z", "message": "Using existing cli command String."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NzE4MjIx", "url": "https://github.com/apache/geode/pull/5102#pullrequestreview-415718221", "createdAt": "2020-05-20T21:13:21Z", "commit": {"oid": "eb3b4616c4d5e80cc4c733dcb8799e6cab498eb1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NzI5NzI1", "url": "https://github.com/apache/geode/pull/5102#pullrequestreview-415729725", "createdAt": "2020-05-20T21:32:01Z", "commit": {"oid": "eb3b4616c4d5e80cc4c733dcb8799e6cab498eb1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MDQwMTky", "url": "https://github.com/apache/geode/pull/5102#pullrequestreview-416040192", "createdAt": "2020-05-21T10:28:59Z", "commit": {"oid": "eb3b4616c4d5e80cc4c733dcb8799e6cab498eb1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE2MTAzMDM0", "url": "https://github.com/apache/geode/pull/5102#pullrequestreview-416103034", "createdAt": "2020-05-21T12:26:44Z", "commit": {"oid": "eb3b4616c4d5e80cc4c733dcb8799e6cab498eb1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4521, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}