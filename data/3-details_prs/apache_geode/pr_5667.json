{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5MzAwOTg0", "number": 5667, "title": "GEODE-8647: Support multiple instances of DistributedMap", "bodyText": "Additional improvements for usage of DistributedMap.\nImprove fluent style API usage of dunit VM.\n\nNOTE: #5664 should be merged before this PR.", "createdAt": "2020-10-24T01:17:40Z", "url": "https://github.com/apache/geode/pull/5667", "merged": true, "mergeCommit": {"oid": "aff7a559ffc24d206017735ec617a5f9e741569a"}, "closed": true, "closedAt": "2020-10-28T16:47:37Z", "author": {"login": "kirklund"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWX7rNABqjM5MjE5OTkyMTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWxOwTAFqTUxODIxNDY0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f074233e358c9be255c9f23c13e09e31aec69c18", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/f074233e358c9be255c9f23c13e09e31aec69c18", "committedDate": "2020-10-24T01:15:50Z", "message": "GEODE-8647: Support multiple instances of DistributedMap\n\nIncludes additional improvements for usage of DistributedMap."}, "afterCommit": {"oid": "0da61e93da01eb15771ab53e1201c35d2a99aa9c", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/0da61e93da01eb15771ab53e1201c35d2a99aa9c", "committedDate": "2020-10-26T17:36:25Z", "message": "GEODE-8647: Support multiple instances of DistributedMap\n\nIncludes additional improvements for usage of DistributedMap."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8591490eed0ca4fee90f05a1815aee785753616", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/e8591490eed0ca4fee90f05a1815aee785753616", "committedDate": "2020-10-26T22:13:04Z", "message": "GEODE-8647: Support multiple instances of DistributedMap\n\nIncludes additional improvements for usage of DistributedMap."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0da61e93da01eb15771ab53e1201c35d2a99aa9c", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/0da61e93da01eb15771ab53e1201c35d2a99aa9c", "committedDate": "2020-10-26T17:36:25Z", "message": "GEODE-8647: Support multiple instances of DistributedMap\n\nIncludes additional improvements for usage of DistributedMap."}, "afterCommit": {"oid": "e8591490eed0ca4fee90f05a1815aee785753616", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/e8591490eed0ca4fee90f05a1815aee785753616", "committedDate": "2020-10-26T22:13:04Z", "message": "GEODE-8647: Support multiple instances of DistributedMap\n\nIncludes additional improvements for usage of DistributedMap."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MTk3MTMx", "url": "https://github.com/apache/geode/pull/5667#pullrequestreview-518197131", "createdAt": "2020-10-27T22:25:35Z", "commit": {"oid": "e8591490eed0ca4fee90f05a1815aee785753616"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MTk4NjE5", "url": "https://github.com/apache/geode/pull/5667#pullrequestreview-518198619", "createdAt": "2020-10-27T22:28:34Z", "commit": {"oid": "e8591490eed0ca4fee90f05a1815aee785753616"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMjoyODozNFrOHpTWfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMjoyODozNFrOHpTWfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzA3MDcxNw==", "bodyText": "Might it be worth extracting the hardcoded string keys/values in this test class to constants?", "url": "https://github.com/apache/geode/pull/5667#discussion_r513070717", "createdAt": "2020-10-27T22:28:34Z", "author": {"login": "DonalEvans"}, "path": "geode-dunit/src/distributedTest/java/org/apache/geode/test/dunit/rules/tests/DistributedMapTest.java", "diffHunk": "@@ -491,4 +495,162 @@ public void getReturnsSameValueInEveryVmAsPutInOtherVm() {\n       });\n     }\n   }\n+\n+  @Test\n+  public void accessesDistributedMapInEachVm() {\n+    runTestWithValidation(HasDistributedMap.class);\n+  }\n+\n+  @Test\n+  public void tearsDownDistributedMapInEachVm() {\n+    runTestWithValidation(HasDistributedMap.class);\n+\n+    getController().invoke(() -> {\n+      assertThat(HasDistributedMap.map.get()).isEmpty();\n+    });\n+  }\n+\n+  @Test\n+  public void accessesTwoDistributedMapsInEachVm() {\n+    runTestWithValidation(HasTwoDistributedMaps.class);\n+  }\n+\n+  @Test\n+  public void tearsDownTwoDistributedMapsInEachVm() {\n+    runTestWithValidation(HasTwoDistributedMaps.class);\n+\n+    getController().invoke(() -> {\n+      assertThat(HasTwoDistributedMaps.map1.get()).isEmpty();\n+      assertThat(HasTwoDistributedMaps.map2.get()).isEmpty();\n+    });\n+  }\n+\n+  @Test\n+  public void accessesManyDistributedMapsInEachVm() {\n+    runTestWithValidation(HasManyDistributedMaps.class);\n+  }\n+\n+  @Test\n+  public void tearsDownManyDistributedMapsInEachVm() {\n+    runTestWithValidation(HasManyDistributedMaps.class);\n+\n+    getController().invoke(() -> {\n+      assertThat(HasManyDistributedMaps.map1.get()).isEmpty();\n+      assertThat(HasManyDistributedMaps.map2.get()).isEmpty();\n+      assertThat(HasManyDistributedMaps.map3.get()).isEmpty();\n+    });\n+  }\n+\n+  public static class HasDistributedMap implements Serializable {\n+\n+    private static final AtomicReference<Map<Object, Object>> map = new AtomicReference<>();\n+\n+    @Rule\n+    public DistributedMap<Object, Object> distributedMap = new DistributedMap<>();\n+\n+    @Before\n+    public void setUp() {\n+      getController().invoke(() -> {\n+        map.set(distributedMap.map());\n+        distributedMap.put(\"key1\", \"value1\");\n+      });\n+    }\n+\n+    @Test\n+    public void distributedMapIsAccessibleInEveryVm() {\n+      for (VM vm : asList(getVM(0), getVM(1), getVM(2), getVM(3), getController())) {\n+        vm.invoke(() -> {\n+          assertThat(distributedMap.map()).isSameAs(map.get());\n+          assertThat(distributedMap.get(\"key1\")).isEqualTo(\"value1\");\n+        });\n+      }\n+    }\n+  }\n+\n+  public static class HasTwoDistributedMaps implements Serializable {\n+\n+    private static final AtomicReference<Map<Object, Object>> map1 = new AtomicReference<>();\n+    private static final AtomicReference<Map<Object, Object>> map2 = new AtomicReference<>();\n+\n+    @Rule\n+    public DistributedMap<Object, Object> distributedMap1 = new DistributedMap<>();\n+    @Rule\n+    public DistributedMap<Object, Object> distributedMap2 = new DistributedMap<>();\n+\n+    @Before\n+    public void setUp() {\n+      getController().invoke(() -> {\n+        map1.set(distributedMap1.map());\n+        distributedMap1.put(\"key1\", \"value1\");\n+\n+        map2.set(distributedMap2.map());\n+        distributedMap2.put(\"key2\", \"value2\");\n+      });\n+    }\n+\n+    @Test\n+    public void twoDistributedMapsAreAccessibleInEveryVm() {\n+      for (VM vm : asList(getVM(0), getVM(1), getVM(2), getVM(3), getController())) {\n+        vm.invoke(() -> {\n+          assertThat(distributedMap1.map()).isSameAs(map1.get());\n+          assertThat(distributedMap1.get(\"key1\")).isEqualTo(\"value1\");\n+          assertThat(distributedMap1.get(\"key2\")).isNull();\n+\n+          assertThat(distributedMap2.map()).isSameAs(map2.get());\n+          assertThat(distributedMap2.get(\"key1\")).isNull();\n+          assertThat(distributedMap2.get(\"key2\")).isEqualTo(\"value2\");\n+        });\n+      }\n+    }\n+  }\n+\n+  public static class HasManyDistributedMaps implements Serializable {\n+\n+    private static final AtomicReference<Map<Object, Object>> map1 = new AtomicReference<>();\n+    private static final AtomicReference<Map<Object, Object>> map2 = new AtomicReference<>();\n+    private static final AtomicReference<Map<Object, Object>> map3 = new AtomicReference<>();\n+\n+    @Rule\n+    public DistributedMap<Object, Object> distributedMap1 = new DistributedMap<>();\n+    @Rule\n+    public DistributedMap<Object, Object> distributedMap2 = new DistributedMap<>();\n+    @Rule\n+    public DistributedMap<Object, Object> distributedMap3 = new DistributedMap<>();\n+\n+    @Before\n+    public void setUp() {\n+      getController().invoke(() -> {\n+        map1.set(distributedMap1.map());\n+        distributedMap1.put(\"key1\", \"value1\");\n+\n+        map2.set(distributedMap2.map());\n+        distributedMap2.put(\"key2\", \"value2\");\n+\n+        map3.set(distributedMap3.map());\n+        distributedMap3.put(\"key3\", \"value3\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8591490eed0ca4fee90f05a1815aee785753616"}, "originalPosition": 169}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MjE0NjQ4", "url": "https://github.com/apache/geode/pull/5667#pullrequestreview-518214648", "createdAt": "2020-10-27T23:05:02Z", "commit": {"oid": "e8591490eed0ca4fee90f05a1815aee785753616"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3976, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}