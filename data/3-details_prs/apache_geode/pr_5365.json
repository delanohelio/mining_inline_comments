{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ3MTM0MzQ5", "number": 5365, "title": "GEODE-8334: PR.clear should sync with putAll or removeAll on rvvLock", "bodyText": "Co-authored-by: Xiaojian Zhou <gzhou@pivotal.io>\nCo-authored-by: Anil <agingade@pivotal.io>\n\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-07-09T22:59:04Z", "url": "https://github.com/apache/geode/pull/5365", "merged": true, "mergeCommit": {"oid": "edaf14896d951554d406bd16969948bbd3953d38"}, "closed": true, "closedAt": "2020-07-10T15:59:27Z", "author": {"login": "gesterzhou"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABczXKRDgH2gAyNDQ3MTM0MzQ5OjQzY2IyNzgxZTM0YjBiMjRmMjYyODIzNjI1NmUxMzAyN2Y0YjRlNTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABczXogmgFqTQ0NjAzMjQzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "43cb2781e34b0b24f2628236256e13027f4b4e50", "author": {"user": {"login": "gesterzhou", "name": "Xiaojian Zhou"}}, "url": "https://github.com/apache/geode/commit/43cb2781e34b0b24f2628236256e13027f4b4e50", "committedDate": "2020-07-09T22:55:15Z", "message": "GEODE-8334: PR.clear should sync with putAll or removeAll on rvvLock\n\n    Co-authored-by: Xiaojian Zhou <gzhou@pivotal.io>\n    Co-authored-by: Anil <agingade@pivotal.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MDI3MjMy", "url": "https://github.com/apache/geode/pull/5365#pullrequestreview-446027232", "createdAt": "2020-07-09T23:12:27Z", "commit": {"oid": "43cb2781e34b0b24f2628236256e13027f4b4e50"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzoxMjoyN1rOGvkxFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzoxMzoxN1rOGvkyAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzODY0NQ==", "bodyText": "This can be replaced with assertThatThrownBy(() -> message.doLocalPutAll(partitionedRegion, mock(InternalDistributedMember.class), 1)).isInstanceOf(PrimaryBucketException.class); to make things a bit neater.", "url": "https://github.com/apache/geode/pull/5365#discussion_r452538645", "createdAt": "2020-07-09T23:12:27Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/PutAllPRMessageTest.java", "diffHunk": "@@ -119,4 +122,34 @@ public void removeAndNotifyKeysIsNotInvokedIfKeysNotLocked() throws Exception {\n         eq(regionDestroyedException));\n   }\n \n+  @Test\n+  public void rvvLockedAfterKeysAreLockedAndUnlockRVVBeforeKeys() throws Exception {\n+    PutAllPRMessage message = spy(new PutAllPRMessage(bucketId, 1, false, false, false, null));\n+    message.addEntry(entryData);\n+    doReturn(keys).when(message).getKeysToBeLocked();\n+    when(bucketRegion.waitUntilLocked(keys)).thenReturn(true);\n+    when(bucketRegion.doLockForPrimary(false)).thenThrow(new PrimaryBucketException());\n+    doNothing().when(bucketRegion).lockRVVForBulkOp();\n+    doNothing().when(bucketRegion).unlockRVVForBulkOp();\n+\n+    InternalCache cache = mock(InternalCache.class);\n+    InternalDistributedSystem ids = mock(InternalDistributedSystem.class);\n+    when(bucketRegion.getCache()).thenReturn(cache);\n+    when(cache.getDistributedSystem()).thenReturn(ids);\n+    when(ids.getOffHeapStore()).thenReturn(null);\n+\n+    try {\n+      message.doLocalPutAll(partitionedRegion, mock(InternalDistributedMember.class), 1);\n+      fail(\"Expect PrimaryBucketException\");\n+    } catch (Exception e) {\n+      assertThat(e instanceof PrimaryBucketException);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43cb2781e34b0b24f2628236256e13027f4b4e50"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjUzODg4MA==", "bodyText": "This can be replaced with assertThatThrownBy(() -> message.doLocalRemoveAll(partitionedRegion, mock(InternalDistributedMember.class), true)).isInstanceOf(PrimaryBucketException.class); to make things a bit neater.", "url": "https://github.com/apache/geode/pull/5365#discussion_r452538880", "createdAt": "2020-07-09T23:13:17Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RemoveAllPRMessageTest.java", "diffHunk": "@@ -131,4 +134,35 @@ public void removeAndNotifyKeysIsNotInvokedIfKeysNotLocked() throws Exception {\n     verify(dataStore).checkRegionDestroyedOnBucket(eq(bucketRegion), eq(true),\n         eq(regionDestroyedException));\n   }\n+\n+  @Test\n+  public void rvvLockedAfterKeysAreLockedAndUnlockRVVBeforeKeys() throws Exception {\n+    RemoveAllPRMessage message =\n+        spy(new RemoveAllPRMessage(bucketId, 1, false, false, false, null));\n+    message.addEntry(entryData);\n+    doReturn(keys).when(message).getKeysToBeLocked();\n+    when(bucketRegion.waitUntilLocked(keys)).thenReturn(true);\n+    when(bucketRegion.doLockForPrimary(false)).thenThrow(new PrimaryBucketException());\n+    doNothing().when(bucketRegion).lockRVVForBulkOp();\n+    doNothing().when(bucketRegion).unlockRVVForBulkOp();\n+\n+    InternalCache cache = mock(InternalCache.class);\n+    InternalDistributedSystem ids = mock(InternalDistributedSystem.class);\n+    when(bucketRegion.getCache()).thenReturn(cache);\n+    when(cache.getDistributedSystem()).thenReturn(ids);\n+    when(ids.getOffHeapStore()).thenReturn(null);\n+\n+    try {\n+      message.doLocalRemoveAll(partitionedRegion, mock(InternalDistributedMember.class), true);\n+      fail(\"Expect PrimaryBucketException\");\n+    } catch (Exception e) {\n+      assertThat(e instanceof PrimaryBucketException);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43cb2781e34b0b24f2628236256e13027f4b4e50"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9462fd0e4897d5887cf245a14698752a95d032b1", "author": {"user": {"login": "gesterzhou", "name": "Xiaojian Zhou"}}, "url": "https://github.com/apache/geode/commit/9462fd0e4897d5887cf245a14698752a95d032b1", "committedDate": "2020-07-09T23:24:27Z", "message": "fix the test case"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MDMyNDM2", "url": "https://github.com/apache/geode/pull/5365#pullrequestreview-446032436", "createdAt": "2020-07-09T23:27:44Z", "commit": {"oid": "43cb2781e34b0b24f2628236256e13027f4b4e50"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzoyNzo0NVrOGvlDgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQyMzoyODowNVrOGvlD-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MzM2MA==", "bodyText": "Having the actual operation \"put\" in between the lock and unlock makes sure the operation is operated under expected locking.", "url": "https://github.com/apache/geode/pull/5365#discussion_r452543360", "createdAt": "2020-07-09T23:27:45Z", "author": {"login": "agingade"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/PutAllPRMessageTest.java", "diffHunk": "@@ -119,4 +122,34 @@ public void removeAndNotifyKeysIsNotInvokedIfKeysNotLocked() throws Exception {\n         eq(regionDestroyedException));\n   }\n \n+  @Test\n+  public void rvvLockedAfterKeysAreLockedAndUnlockRVVBeforeKeys() throws Exception {\n+    PutAllPRMessage message = spy(new PutAllPRMessage(bucketId, 1, false, false, false, null));\n+    message.addEntry(entryData);\n+    doReturn(keys).when(message).getKeysToBeLocked();\n+    when(bucketRegion.waitUntilLocked(keys)).thenReturn(true);\n+    when(bucketRegion.doLockForPrimary(false)).thenThrow(new PrimaryBucketException());\n+    doNothing().when(bucketRegion).lockRVVForBulkOp();\n+    doNothing().when(bucketRegion).unlockRVVForBulkOp();\n+\n+    InternalCache cache = mock(InternalCache.class);\n+    InternalDistributedSystem ids = mock(InternalDistributedSystem.class);\n+    when(bucketRegion.getCache()).thenReturn(cache);\n+    when(cache.getDistributedSystem()).thenReturn(ids);\n+    when(ids.getOffHeapStore()).thenReturn(null);\n+\n+    try {\n+      message.doLocalPutAll(partitionedRegion, mock(InternalDistributedMember.class), 1);\n+      fail(\"Expect PrimaryBucketException\");\n+    } catch (Exception e) {\n+      assertThat(e instanceof PrimaryBucketException);\n+    }\n+\n+    InOrder inOrder = inOrder(bucketRegion);\n+    inOrder.verify(bucketRegion).waitUntilLocked(keys);\n+    inOrder.verify(bucketRegion).lockRVVForBulkOp();\n+    inOrder.verify(bucketRegion).unlockRVVForBulkOp();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43cb2781e34b0b24f2628236256e13027f4b4e50"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjU0MzQ4Mg==", "bodyText": "Having the actual operation \"remove\" in between the lock and unlock makes sure the operation is operated under expected locking.", "url": "https://github.com/apache/geode/pull/5365#discussion_r452543482", "createdAt": "2020-07-09T23:28:05Z", "author": {"login": "agingade"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/partitioned/RemoveAllPRMessageTest.java", "diffHunk": "@@ -131,4 +134,35 @@ public void removeAndNotifyKeysIsNotInvokedIfKeysNotLocked() throws Exception {\n     verify(dataStore).checkRegionDestroyedOnBucket(eq(bucketRegion), eq(true),\n         eq(regionDestroyedException));\n   }\n+\n+  @Test\n+  public void rvvLockedAfterKeysAreLockedAndUnlockRVVBeforeKeys() throws Exception {\n+    RemoveAllPRMessage message =\n+        spy(new RemoveAllPRMessage(bucketId, 1, false, false, false, null));\n+    message.addEntry(entryData);\n+    doReturn(keys).when(message).getKeysToBeLocked();\n+    when(bucketRegion.waitUntilLocked(keys)).thenReturn(true);\n+    when(bucketRegion.doLockForPrimary(false)).thenThrow(new PrimaryBucketException());\n+    doNothing().when(bucketRegion).lockRVVForBulkOp();\n+    doNothing().when(bucketRegion).unlockRVVForBulkOp();\n+\n+    InternalCache cache = mock(InternalCache.class);\n+    InternalDistributedSystem ids = mock(InternalDistributedSystem.class);\n+    when(bucketRegion.getCache()).thenReturn(cache);\n+    when(cache.getDistributedSystem()).thenReturn(ids);\n+    when(ids.getOffHeapStore()).thenReturn(null);\n+\n+    try {\n+      message.doLocalRemoveAll(partitionedRegion, mock(InternalDistributedMember.class), true);\n+      fail(\"Expect PrimaryBucketException\");\n+    } catch (Exception e) {\n+      assertThat(e instanceof PrimaryBucketException);\n+    }\n+\n+    InOrder inOrder = inOrder(bucketRegion);\n+    inOrder.verify(bucketRegion).waitUntilLocked(keys);\n+    inOrder.verify(bucketRegion).lockRVVForBulkOp();\n+    inOrder.verify(bucketRegion).unlockRVVForBulkOp();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "43cb2781e34b0b24f2628236256e13027f4b4e50"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4380, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}