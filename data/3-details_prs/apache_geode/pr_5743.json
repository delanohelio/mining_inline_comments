{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwMTYzMDc1", "number": 5743, "title": "GEODE-8623: Retry getting local host if it fails.", "bodyText": "This is a continuation of the work done by #5680", "createdAt": "2020-11-12T21:17:46Z", "url": "https://github.com/apache/geode/pull/5743", "merged": true, "mergeCommit": {"oid": "5deb409fe5498845b1365463b11f7a8d558c55f7"}, "closed": true, "closedAt": "2020-11-30T19:39:19Z", "author": {"login": "jinmeiliao"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdb5QAqAH2gAyNTIwMTYzMDc1OjM4NWM4MjAwM2RhN2Y1NjEwZDM0MDhkMGU3ZjdmZjFlNDRmNzI3OTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdhqpToAFqTU0MTIzMTEzOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "385c82003da7f5610d3408d0e7f7ff1e44f72794", "author": {"user": {"login": "pivotal-jbarrett", "name": "Jacob Barrett"}}, "url": "https://github.com/apache/geode/commit/385c82003da7f5610d3408d0e7f7ff1e44f72794", "committedDate": "2020-11-12T21:15:16Z", "message": "GEODE-8623: Retry getting local host if it fails."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "500109db160ebcd2604c413e28c149196ab766a4", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/500109db160ebcd2604c413e28c149196ab766a4", "committedDate": "2020-11-12T21:15:33Z", "message": "review comments\n* add sleep between retries"}, "afterCommit": {"oid": "e3956b0ca99d794fdc1c473a2ed9160b89d6391e", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/e3956b0ca99d794fdc1c473a2ed9160b89d6391e", "committedDate": "2020-11-12T21:48:40Z", "message": "review comments\n* add sleep between retries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e1b6856f6b01b38983f87d6cd12f59745824d3f1", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/e1b6856f6b01b38983f87d6cd12f59745824d3f1", "committedDate": "2020-11-12T22:14:03Z", "message": "review comments\n* add sleep between retries"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e3956b0ca99d794fdc1c473a2ed9160b89d6391e", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/e3956b0ca99d794fdc1c473a2ed9160b89d6391e", "committedDate": "2020-11-12T21:48:40Z", "message": "review comments\n* add sleep between retries"}, "afterCommit": {"oid": "e1b6856f6b01b38983f87d6cd12f59745824d3f1", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/e1b6856f6b01b38983f87d6cd12f59745824d3f1", "committedDate": "2020-11-12T22:14:03Z", "message": "review comments\n* add sleep between retries"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NTc5NjQ2", "url": "https://github.com/apache/geode/pull/5743#pullrequestreview-529579646", "createdAt": "2020-11-12T23:20:03Z", "commit": {"oid": "e1b6856f6b01b38983f87d6cd12f59745824d3f1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5NjEwMDE4", "url": "https://github.com/apache/geode/pull/5743#pullrequestreview-529610018", "createdAt": "2020-11-13T00:25:27Z", "commit": {"oid": "e1b6856f6b01b38983f87d6cd12f59745824d3f1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDoyNToyOFrOHyUaoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwMDoyNzo0OFrOHyUdrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyNTM0NQ==", "bodyText": "Sleeping doesn't feel like the responsibility of a clock.", "url": "https://github.com/apache/geode/pull/5743#discussion_r522525345", "createdAt": "2020-11-13T00:25:28Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-common/src/main/java/org/apache/geode/internal/Retry.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+\n+import org.apache.geode.annotations.VisibleForTesting;\n+\n+/**\n+ * Utility class for retrying operations.\n+ */\n+public class Retry {\n+\n+  interface Clock {\n+    long nanoTime();\n+\n+    void sleep(long sleepTime, TimeUnit sleepTimeUnit) throws InterruptedException;\n+  }\n+\n+  private static class SteadyClock implements Clock {\n+    @Override\n+    public long nanoTime() {\n+      return System.nanoTime();\n+    }\n+\n+    @Override\n+    public void sleep(long sleepTime, TimeUnit sleepTimeUnit) throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1b6856f6b01b38983f87d6cd12f59745824d3f1"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjUyNjEyNA==", "bodyText": "Is TimeUnit intended to cover both time values? I think its more readable to have TimeUnit param for each so it reads as \"(1, SECOND, 4,  SECOND)\" rather than \"(1, 4, SECOND)\".", "url": "https://github.com/apache/geode/pull/5743#discussion_r522526124", "createdAt": "2020-11-13T00:27:48Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-common/src/main/java/org/apache/geode/internal/Retry.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal;\n+\n+import static java.util.concurrent.TimeUnit.MILLISECONDS;\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+\n+import org.apache.geode.annotations.VisibleForTesting;\n+\n+/**\n+ * Utility class for retrying operations.\n+ */\n+public class Retry {\n+\n+  interface Clock {\n+    long nanoTime();\n+\n+    void sleep(long sleepTime, TimeUnit sleepTimeUnit) throws InterruptedException;\n+  }\n+\n+  private static class SteadyClock implements Clock {\n+    @Override\n+    public long nanoTime() {\n+      return System.nanoTime();\n+    }\n+\n+    @Override\n+    public void sleep(long sleepTime, TimeUnit sleepTimeUnit) throws InterruptedException {\n+      Thread.sleep(MILLISECONDS.convert(sleepTime, sleepTimeUnit));\n+    }\n+  }\n+\n+  private static final SteadyClock steadyClock = new SteadyClock();\n+\n+  /**\n+   * Try the supplier function until the predicate is true or timeout occurs.\n+   *\n+   * @param timeout to retry for\n+   * @param interval time between each try\n+   * @param timeUnit to retry for\n+   * @param supplier to execute until predicate is true or times out\n+   * @param predicate to test for retry\n+   * @param <T> type of return value\n+   * @return value from supplier after it passes predicate or times out.\n+   */\n+  public static <T> T tryFor(long timeout,\n+      long interval,\n+      TimeUnit timeUnit,\n+      Supplier<T> supplier,\n+      Predicate<T> predicate) throws TimeoutException, InterruptedException {\n+    return tryFor(timeout, interval, timeUnit, supplier, predicate, steadyClock);\n+  }\n+\n+  @VisibleForTesting\n+  static <T> T tryFor(long timeout,\n+      long interval,\n+      TimeUnit timeUnit,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1b6856f6b01b38983f87d6cd12f59745824d3f1"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ad348d3a30b31742355f8483dc503c917ca8752", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/7ad348d3a30b31742355f8483dc503c917ca8752", "committedDate": "2020-11-13T06:04:15Z", "message": "review comments\n* rename and add parameter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "85f1c5bf50426a2407d243e5d92ed6818afb24c3", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/85f1c5bf50426a2407d243e5d92ed6818afb24c3", "committedDate": "2020-11-13T05:15:25Z", "message": "review comments\n* rename and add parameter"}, "afterCommit": {"oid": "7ad348d3a30b31742355f8483dc503c917ca8752", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/7ad348d3a30b31742355f8483dc503c917ca8752", "committedDate": "2020-11-13T06:04:15Z", "message": "review comments\n* rename and add parameter"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5ODEzNDgw", "url": "https://github.com/apache/geode/pull/5743#pullrequestreview-529813480", "createdAt": "2020-11-13T06:59:09Z", "commit": {"oid": "7ad348d3a30b31742355f8483dc503c917ca8752"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNjo1OTowOVrOHyfKwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QwNjo1OTowOVrOHyfKwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjcwMTUwNg==", "bodyText": "The sleep should happen for min(interval, until - now) otherwise you could sleep past the timeout.", "url": "https://github.com/apache/geode/pull/5743#discussion_r522701506", "createdAt": "2020-11-13T06:59:09Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-common/src/main/java/org/apache/geode/internal/Retry.java", "diffHunk": "@@ -47,45 +47,44 @@ public void sleep(long sleepTime, TimeUnit sleepTimeUnit) throws InterruptedExce\n     }\n   }\n \n-  private static final SteadyClock steadyClock = new SteadyClock();\n+  private static final SteadyTimer steadyClock = new SteadyTimer();\n \n   /**\n    * Try the supplier function until the predicate is true or timeout occurs.\n    *\n    * @param timeout to retry for\n+   * @param timeoutUnit the unit for timeout\n    * @param interval time between each try\n-   * @param timeUnit to retry for\n+   * @param intervalUnit the unit for interval\n    * @param supplier to execute until predicate is true or times out\n    * @param predicate to test for retry\n    * @param <T> type of return value\n    * @return value from supplier after it passes predicate or times out.\n    */\n-  public static <T> T tryFor(long timeout,\n-      long interval,\n-      TimeUnit timeUnit,\n+  public static <T> T tryFor(long timeout, TimeUnit timeoutUnit,\n+      long interval, TimeUnit intervalUnit,\n       Supplier<T> supplier,\n       Predicate<T> predicate) throws TimeoutException, InterruptedException {\n-    return tryFor(timeout, interval, timeUnit, supplier, predicate, steadyClock);\n+    return tryFor(timeout, timeoutUnit, interval, intervalUnit, supplier, predicate, steadyClock);\n   }\n \n   @VisibleForTesting\n-  static <T> T tryFor(long timeout,\n-      long interval,\n-      TimeUnit timeUnit,\n+  static <T> T tryFor(long timeout, TimeUnit timeoutUnit,\n+      long interval, TimeUnit intervalUnit,\n       Supplier<T> supplier,\n       Predicate<T> predicate,\n-      Clock clock) throws TimeoutException, InterruptedException {\n-    long until = clock.nanoTime() + NANOSECONDS.convert(timeout, timeUnit);\n+      Timer timer) throws TimeoutException, InterruptedException {\n+    long until = timer.nanoTime() + NANOSECONDS.convert(timeout, timeoutUnit);\n \n     T value;\n     do {\n       value = supplier.get();\n       if (predicate.test(value)) {\n         return value;\n       } else {\n-        clock.sleep(interval, timeUnit);\n+        timer.sleep(interval, intervalUnit);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad348d3a30b31742355f8483dc503c917ca8752"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwMTg2MTg3", "url": "https://github.com/apache/geode/pull/5743#pullrequestreview-530186187", "createdAt": "2020-11-13T16:01:30Z", "commit": {"oid": "7ad348d3a30b31742355f8483dc503c917ca8752"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNjowMTozMFrOHy0Huw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QxNjowMTozMFrOHy0Huw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzA0NDc5NQ==", "bodyText": "Also, we sleep at the end only to delay the return of the failed predicate state. Sleeping min time and then continue after guards against sleeping past the timeout and gives the opportunity of the predicate to go pass before returning. No point in sleeping if we are just going to fall through the while block immediately, we aren't trying to delay the return but rather the execution of the code block.", "url": "https://github.com/apache/geode/pull/5743#discussion_r523044795", "createdAt": "2020-11-13T16:01:30Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-common/src/main/java/org/apache/geode/internal/Retry.java", "diffHunk": "@@ -47,45 +47,44 @@ public void sleep(long sleepTime, TimeUnit sleepTimeUnit) throws InterruptedExce\n     }\n   }\n \n-  private static final SteadyClock steadyClock = new SteadyClock();\n+  private static final SteadyTimer steadyClock = new SteadyTimer();\n \n   /**\n    * Try the supplier function until the predicate is true or timeout occurs.\n    *\n    * @param timeout to retry for\n+   * @param timeoutUnit the unit for timeout\n    * @param interval time between each try\n-   * @param timeUnit to retry for\n+   * @param intervalUnit the unit for interval\n    * @param supplier to execute until predicate is true or times out\n    * @param predicate to test for retry\n    * @param <T> type of return value\n    * @return value from supplier after it passes predicate or times out.\n    */\n-  public static <T> T tryFor(long timeout,\n-      long interval,\n-      TimeUnit timeUnit,\n+  public static <T> T tryFor(long timeout, TimeUnit timeoutUnit,\n+      long interval, TimeUnit intervalUnit,\n       Supplier<T> supplier,\n       Predicate<T> predicate) throws TimeoutException, InterruptedException {\n-    return tryFor(timeout, interval, timeUnit, supplier, predicate, steadyClock);\n+    return tryFor(timeout, timeoutUnit, interval, intervalUnit, supplier, predicate, steadyClock);\n   }\n \n   @VisibleForTesting\n-  static <T> T tryFor(long timeout,\n-      long interval,\n-      TimeUnit timeUnit,\n+  static <T> T tryFor(long timeout, TimeUnit timeoutUnit,\n+      long interval, TimeUnit intervalUnit,\n       Supplier<T> supplier,\n       Predicate<T> predicate,\n-      Clock clock) throws TimeoutException, InterruptedException {\n-    long until = clock.nanoTime() + NANOSECONDS.convert(timeout, timeUnit);\n+      Timer timer) throws TimeoutException, InterruptedException {\n+    long until = timer.nanoTime() + NANOSECONDS.convert(timeout, timeoutUnit);\n \n     T value;\n     do {\n       value = supplier.get();\n       if (predicate.test(value)) {\n         return value;\n       } else {\n-        clock.sleep(interval, timeUnit);\n+        timer.sleep(interval, intervalUnit);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjcwMTUwNg=="}, "originalCommit": {"oid": "7ad348d3a30b31742355f8483dc503c917ca8752"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMwNDg2OTE5", "url": "https://github.com/apache/geode/pull/5743#pullrequestreview-530486919", "createdAt": "2020-11-13T23:53:48Z", "commit": {"oid": "7ad348d3a30b31742355f8483dc503c917ca8752"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMzo1Mzo0OVrOHzDKTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xM1QyMzo1Mzo0OVrOHzDKTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzI5MTIxNQ==", "bodyText": "so cool!", "url": "https://github.com/apache/geode/pull/5743#discussion_r523291215", "createdAt": "2020-11-13T23:53:49Z", "author": {"login": "Bill"}, "path": "geode-common/src/main/java/org/apache/geode/internal/inet/LocalHostUtil.java", "diffHunk": "@@ -54,19 +59,27 @@\n   private static final boolean useLinkLocalAddresses =\n       Boolean.getBoolean(USE_LINK_LOCAL_ADDRESSES_PROPERTY);\n \n-  /**\n-   * we cache localHost to avoid bug #40619, access-violation in native code\n-   */\n-  private static final InetAddress localHost;\n-\n   /**\n    * all classes should use this variable to determine whether to use IPv4 or IPv6 addresses\n    */\n   @MakeNotStatic\n   private static boolean useIPv6Addresses = !Boolean.getBoolean(\"java.net.preferIPv4Stack\")\n       && Boolean.getBoolean(\"java.net.preferIPv6Addresses\");\n \n-  static {\n+  /**\n+   * Resolves local host. Will retry if resolution fails.\n+   *\n+   * @return local host if resolved otherwise null.\n+   */\n+  private static InetAddress tryToResolveLocalHost() {\n+    try {\n+      return tryFor(60, SECONDS, 1, SECONDS, LocalHostUtil::resolveLocalHost, Objects::nonNull);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ad348d3a30b31742355f8483dc503c917ca8752"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNzQ1MjE2", "url": "https://github.com/apache/geode/pull/5743#pullrequestreview-533745216", "createdAt": "2020-11-18T18:15:20Z", "commit": {"oid": "7ad348d3a30b31742355f8483dc503c917ca8752"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3eb958505fb986de09fc1fe7fae085f9ad61e760", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/3eb958505fb986de09fc1fe7fae085f9ad61e760", "committedDate": "2020-11-19T19:19:04Z", "message": "make the last iteration sleep less than interval if necessary"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0Nzg0NjAz", "url": "https://github.com/apache/geode/pull/5743#pullrequestreview-534784603", "createdAt": "2020-11-19T19:35:02Z", "commit": {"oid": "3eb958505fb986de09fc1fe7fae085f9ad61e760"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTozNTowM1rOH2ugzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTozNTowM1rOH2ugzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE0NzIxMw==", "bodyText": "I recommend testing the condition after the conversion to milliseconds since e.g. NANOSECONDS.toMillis(1) == 0", "url": "https://github.com/apache/geode/pull/5743#discussion_r527147213", "createdAt": "2020-11-19T19:35:03Z", "author": {"login": "Bill"}, "path": "geode-common/src/main/java/org/apache/geode/internal/Retry.java", "diffHunk": "@@ -32,18 +31,21 @@\n   interface Timer {\n     long nanoTime();\n \n-    void sleep(long sleepTime, TimeUnit sleepTimeUnit) throws InterruptedException;\n+    void sleep(long sleepTimeInNano) throws InterruptedException;\n   }\n \n-  private static class SteadyTimer implements Timer {\n+  static class SteadyTimer implements Timer {\n     @Override\n     public long nanoTime() {\n       return System.nanoTime();\n     }\n \n     @Override\n-    public void sleep(long sleepTime, TimeUnit sleepTimeUnit) throws InterruptedException {\n-      Thread.sleep(MILLISECONDS.convert(sleepTime, sleepTimeUnit));\n+    public void sleep(long sleepTimeInNano) throws InterruptedException {\n+      // avoid throwing IllegalArgumentException\n+      if (sleepTimeInNano > 0) {\n+        Thread.sleep(NANOSECONDS.toMillis(sleepTimeInNano));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eb958505fb986de09fc1fe7fae085f9ad61e760"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM0Nzg1NTcx", "url": "https://github.com/apache/geode/pull/5743#pullrequestreview-534785571", "createdAt": "2020-11-19T19:36:20Z", "commit": {"oid": "3eb958505fb986de09fc1fe7fae085f9ad61e760"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTozNjoyMVrOH2uj2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxOTozNjoyMVrOH2uj2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzE0Nzk5Mw==", "bodyText": "I recommend converting this outside the loop since it never changes.", "url": "https://github.com/apache/geode/pull/5743#discussion_r527147993", "createdAt": "2020-11-19T19:36:21Z", "author": {"login": "Bill"}, "path": "geode-common/src/main/java/org/apache/geode/internal/Retry.java", "diffHunk": "@@ -82,7 +84,9 @@ public void sleep(long sleepTime, TimeUnit sleepTimeUnit) throws InterruptedExce\n       if (predicate.test(value)) {\n         return value;\n       } else {\n-        timer.sleep(interval, intervalUnit);\n+        long sleepTimeInNano =\n+            Math.min(NANOSECONDS.convert(interval, intervalUnit), until - timer.nanoTime());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eb958505fb986de09fc1fe7fae085f9ad61e760"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3327c7e9be36f072c67faef3fdfd2d8210dbc1a8", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/3327c7e9be36f072c67faef3fdfd2d8210dbc1a8", "committedDate": "2020-11-19T20:10:58Z", "message": "review changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c8d9dfdef48d155b45bb9ccf2bab06b19b89c72", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/5c8d9dfdef48d155b45bb9ccf2bab06b19b89c72", "committedDate": "2020-11-19T21:04:01Z", "message": "do not sleep if the time is less than the allotted sleep time"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1Njc2MjAz", "url": "https://github.com/apache/geode/pull/5743#pullrequestreview-535676203", "createdAt": "2020-11-20T18:24:01Z", "commit": {"oid": "5c8d9dfdef48d155b45bb9ccf2bab06b19b89c72"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxODoyNDowMVrOH3b_dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxODoyNDowMVrOH3b_dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg5MjM0Mw==", "bodyText": "There is no need to sleep for the full interval (intervalNano) if until - timer.nanoTime() is smaller.\nI recommend (again), as have others, that the code sleep for the minimum time required. We understand that Thread.sleep() does not make real-time guarantees. Nevertheless, this code would be more robust and accurate if it was coded that way.\nSomething like this:", "url": "https://github.com/apache/geode/pull/5743#discussion_r527892343", "createdAt": "2020-11-20T18:24:01Z", "author": {"login": "Bill"}, "path": "geode-common/src/main/java/org/apache/geode/internal/Retry.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal;\n+\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+\n+import org.apache.geode.annotations.VisibleForTesting;\n+\n+/**\n+ * Utility class for retrying operations.\n+ */\n+public class Retry {\n+\n+  interface Timer {\n+    long nanoTime();\n+\n+    void sleep(long sleepTimeInNano) throws InterruptedException;\n+  }\n+\n+  static class SteadyTimer implements Timer {\n+    @Override\n+    public long nanoTime() {\n+      return System.nanoTime();\n+    }\n+\n+    @Override\n+    public void sleep(long sleepTimeInNano) throws InterruptedException {\n+      long millis = NANOSECONDS.toMillis(sleepTimeInNano);\n+      // avoid throwing IllegalArgumentException\n+      if (millis > 0) {\n+        Thread.sleep(millis);\n+      }\n+    }\n+  }\n+\n+  private static final SteadyTimer steadyClock = new SteadyTimer();\n+\n+  /**\n+   * Try the supplier function until the predicate is true or timeout occurs.\n+   *\n+   * @param timeout to retry for\n+   * @param timeoutUnit the unit for timeout\n+   * @param interval time between each try\n+   * @param intervalUnit the unit for interval\n+   * @param supplier to execute until predicate is true or times out\n+   * @param predicate to test for retry\n+   * @param <T> type of return value\n+   * @return value from supplier after it passes predicate or times out.\n+   */\n+  public static <T> T tryFor(long timeout, TimeUnit timeoutUnit,\n+      long interval, TimeUnit intervalUnit,\n+      Supplier<T> supplier,\n+      Predicate<T> predicate) throws TimeoutException, InterruptedException {\n+    return tryFor(timeout, timeoutUnit, interval, intervalUnit, supplier, predicate, steadyClock);\n+  }\n+\n+  @VisibleForTesting\n+  static <T> T tryFor(long timeout, TimeUnit timeoutUnit,\n+      long interval, TimeUnit intervalUnit,\n+      Supplier<T> supplier,\n+      Predicate<T> predicate,\n+      Timer timer) throws TimeoutException, InterruptedException {\n+    long until = timer.nanoTime() + NANOSECONDS.convert(timeout, timeoutUnit);\n+    long intervalNano = NANOSECONDS.convert(interval, intervalUnit);\n+\n+    T value;\n+    for (;;) {\n+      value = supplier.get();\n+      if (predicate.test(value)) {\n+        return value;\n+      } else {\n+        // if there is still more time left after we sleep for interval period, then sleep and retry\n+        // otherwise break out and throw TimeoutException\n+        if ((timer.nanoTime() + intervalNano) < until) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c8d9dfdef48d155b45bb9ccf2bab06b19b89c72"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1Njc5NTMy", "url": "https://github.com/apache/geode/pull/5743#pullrequestreview-535679532", "createdAt": "2020-11-20T18:28:55Z", "commit": {"oid": "5c8d9dfdef48d155b45bb9ccf2bab06b19b89c72"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxODoyODo1NlrOH3cKPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxODoyODo1NlrOH3cKPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzg5NTEwMw==", "bodyText": "By making sleep() take nanosecond units, every implementation (like the one below) has to make the conversion and handle any problems.\nI recommend making this method take millisecond units since that's what Thread.sleep() takes. This simplifies every implementation, and, perhaps more importantly, moves the error-handling logic up into the tryFor() method, making that method more robust.", "url": "https://github.com/apache/geode/pull/5743#discussion_r527895103", "createdAt": "2020-11-20T18:28:56Z", "author": {"login": "Bill"}, "path": "geode-common/src/main/java/org/apache/geode/internal/Retry.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal;\n+\n+import static java.util.concurrent.TimeUnit.NANOSECONDS;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.function.Predicate;\n+import java.util.function.Supplier;\n+\n+import org.apache.geode.annotations.VisibleForTesting;\n+\n+/**\n+ * Utility class for retrying operations.\n+ */\n+public class Retry {\n+\n+  interface Timer {\n+    long nanoTime();\n+\n+    void sleep(long sleepTimeInNano) throws InterruptedException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c8d9dfdef48d155b45bb9ccf2bab06b19b89c72"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMjMxMTM4", "url": "https://github.com/apache/geode/pull/5743#pullrequestreview-541231138", "createdAt": "2020-11-30T19:37:51Z", "commit": {"oid": "5c8d9dfdef48d155b45bb9ccf2bab06b19b89c72"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4032, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}