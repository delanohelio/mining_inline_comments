{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNTU0MzA3", "number": 4924, "title": "GEODE-7964: Upgrade Mockito to 3.3.3", "bodyText": "GEODE-7964: Upgrade Mockito to 3.3.3\nFixup all tests touched for Mockito upgrade.\nUpdate usage of Mockito deprecated APIs.", "createdAt": "2020-04-07T23:41:40Z", "url": "https://github.com/apache/geode/pull/4924", "merged": true, "mergeCommit": {"oid": "0a1701e92dc09bcd6b79edd3b52f20ee9e9a867c"}, "closed": true, "closedAt": "2020-04-24T16:20:22Z", "author": {"login": "kirklund"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWYSPuABqjMyMjMxODE5Mjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaLq5-AH2gAyNDAwNTU0MzA3OjNjN2RkZTRjZjBkM2ZhOWRhNThkOGU5ODFkZjU5OWUwNTNlYWZjODg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1782d0d88e44b8aa6159bf43f79df746bf5795c5", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/1782d0d88e44b8aa6159bf43f79df746bf5795c5", "committedDate": "2020-04-10T21:16:31Z", "message": "GEODE-7964: clearInlineMocks in tearDown"}, "afterCommit": {"oid": "8578a253816d2a7955e7b5f9c545d465db950f37", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/8578a253816d2a7955e7b5f9c545d465db950f37", "committedDate": "2020-04-10T21:22:53Z", "message": "GEODE-7964: Upgrade Mockito to 2.25.0"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "15838ffbffefd299802b46ad28e1450d061db5eb", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/15838ffbffefd299802b46ad28e1450d061db5eb", "committedDate": "2020-04-15T17:08:21Z", "message": "Disable all concurrent tests"}, "afterCommit": {"oid": "bdbc6d847843818efa79cce07cf7455d396ec42d", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/bdbc6d847843818efa79cce07cf7455d396ec42d", "committedDate": "2020-04-15T17:09:03Z", "message": "Disable all concurrent tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "346c08b023528774a3b79477bcd92cb77c52aeb6", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/346c08b023528774a3b79477bcd92cb77c52aeb6", "committedDate": "2020-04-16T16:42:20Z", "message": "Trigger precheckin"}, "afterCommit": {"oid": "4ce4cac256904577b9f8cf9d79898552e3f4093e", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/4ce4cac256904577b9f8cf9d79898552e3f4093e", "committedDate": "2020-04-17T16:14:51Z", "message": "GEODE-7964: Upgrade Mockito 2.25.0"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4ce4cac256904577b9f8cf9d79898552e3f4093e", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/4ce4cac256904577b9f8cf9d79898552e3f4093e", "committedDate": "2020-04-17T16:14:51Z", "message": "GEODE-7964: Upgrade Mockito 2.25.0"}, "afterCommit": {"oid": "ec5d696b1d4857629b562648613a197c29eb1e47", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/ec5d696b1d4857629b562648613a197c29eb1e47", "committedDate": "2020-04-17T17:10:40Z", "message": "Upgrade to Mockito 2.25.0 and fix HARegionQueueIntegrationTest"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5819e44fd2fbfc6c97e1127da5967f0370254515", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/5819e44fd2fbfc6c97e1127da5967f0370254515", "committedDate": "2020-04-17T20:57:39Z", "message": "Fixup Connection and PooledConnection tests"}, "afterCommit": {"oid": "c0aaef2cd41686acd2b3fbda0e6770b269fa7d08", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/c0aaef2cd41686acd2b3fbda0e6770b269fa7d08", "committedDate": "2020-04-20T21:58:33Z", "message": "GEODE-7964: Fixup all tests touched for Mockito upgrade"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MzQzMjg5", "url": "https://github.com/apache/geode/pull/4924#pullrequestreview-398343289", "createdAt": "2020-04-22T16:03:14Z", "commit": {"oid": "b2dd4579bb67e1604cb3245ea244beb8e12faa2c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjowMzoxNVrOGJ-Vqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjowMzoxNVrOGJ-Vqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzExMTcyMg==", "bodyText": "Clean up these TODO:KIRK parts.", "url": "https://github.com/apache/geode/pull/4924#discussion_r413111722", "createdAt": "2020-04-22T16:03:15Z", "author": {"login": "upthewaterspout"}, "path": "geode-core/src/main/java/org/apache/geode/cache/client/internal/ConnectionImpl.java", "diffHunk": "@@ -223,6 +223,16 @@ public Socket getSocket() {\n     return theSocket;\n   }\n \n+  @Override\n+  public long getBirthDate() {\n+    return 0; // TODO:KIRK", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2dd4579bb67e1604cb3245ea244beb8e12faa2c"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b2dd4579bb67e1604cb3245ea244beb8e12faa2c", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/b2dd4579bb67e1604cb3245ea244beb8e12faa2c", "committedDate": "2020-04-20T22:51:57Z", "message": "GEODE-7964: Update usage of Mockito deprecated APIs"}, "afterCommit": {"oid": "c67aec72348133cb7128fd272b1e60f88afddfee", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/c67aec72348133cb7128fd272b1e60f88afddfee", "committedDate": "2020-04-22T16:58:56Z", "message": "GEODE-7964: Fixup all tests touched for Mockito upgrade"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c67aec72348133cb7128fd272b1e60f88afddfee", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/c67aec72348133cb7128fd272b1e60f88afddfee", "committedDate": "2020-04-22T16:58:56Z", "message": "GEODE-7964: Fixup all tests touched for Mockito upgrade"}, "afterCommit": {"oid": "8274d9b113c05169f8cc341210c7a3e9390ab534", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/8274d9b113c05169f8cc341210c7a3e9390ab534", "committedDate": "2020-04-22T16:58:56Z", "message": "GEODE-7964: Update usage of Mockito deprecated APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb084947c864a71f4a925b4616892aa4b572bba5", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/fb084947c864a71f4a925b4616892aa4b572bba5", "committedDate": "2020-04-22T17:05:32Z", "message": "GEODE-7964: Upgrade Mockito to 3.3.3"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8274d9b113c05169f8cc341210c7a3e9390ab534", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/8274d9b113c05169f8cc341210c7a3e9390ab534", "committedDate": "2020-04-22T16:58:56Z", "message": "GEODE-7964: Update usage of Mockito deprecated APIs"}, "afterCommit": {"oid": "fb084947c864a71f4a925b4616892aa4b572bba5", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/fb084947c864a71f4a925b4616892aa4b572bba5", "committedDate": "2020-04-22T17:05:32Z", "message": "GEODE-7964: Upgrade Mockito to 3.3.3"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dfa89c3811899a32133b06e2ac719b2d66d344b", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/8dfa89c3811899a32133b06e2ac719b2d66d344b", "committedDate": "2020-04-22T17:14:40Z", "message": "Remove TODO comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4Mzc0MjEz", "url": "https://github.com/apache/geode/pull/4924#pullrequestreview-398374213", "createdAt": "2020-04-22T16:38:48Z", "commit": {"oid": "b2dd4579bb67e1604cb3245ea244beb8e12faa2c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjozODo0OFrOGJ_-yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNjozODo0OFrOGJ_-yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzEzODYzMw==", "bodyText": "This does not look like it is asserting the same thing about timeouts any more..", "url": "https://github.com/apache/geode/pull/4924#discussion_r413138633", "createdAt": "2020-04-22T16:38:48Z", "author": {"login": "mhansonp"}, "path": "geode-core/src/integrationTest/java/org/apache/geode/cache/client/internal/pooling/ConnectionManagerJUnitTest.java", "diffHunk": "@@ -122,278 +138,271 @@ public void tearDown() throws InterruptedException {\n \n   @Test\n   public void testAddVarianceToInterval() {\n-    assertThat(ConnectionManagerImpl.addVarianceToInterval(0)).as(\"Zero gets zero variance\")\n+    assertThat(ConnectionManagerImpl.addVarianceToInterval(0))\n+        .as(\"Zero gets zero variance\")\n         .isEqualTo(0);\n+\n     assertThat(ConnectionManagerImpl.addVarianceToInterval(300000))\n-        .as(\"Large value gets +/-10% variance\").isNotEqualTo(300000).isGreaterThanOrEqualTo(270000)\n+        .as(\"Large value gets +/-10% variance\")\n+        .isNotEqualTo(300000)\n+        .isGreaterThanOrEqualTo(270000)\n         .isLessThanOrEqualTo(330000);\n-    assertThat(ConnectionManagerImpl.addVarianceToInterval(9)).as(\"Small value gets +/-1 variance\")\n-        .isNotEqualTo(9).isGreaterThanOrEqualTo(8).isLessThanOrEqualTo(10);\n+\n+    assertThat(ConnectionManagerImpl.addVarianceToInterval(9))\n+        .as(\"Small value gets +/-1 variance\")\n+        .isNotEqualTo(9)\n+        .isGreaterThanOrEqualTo(8)\n+        .isLessThanOrEqualTo(10);\n   }\n \n   @Test\n-  public void testGet()\n-      throws InterruptedException, AllConnectionsInUseException, NoAvailableServersException {\n+  public void testGet() {\n     manager = new ConnectionManagerImpl(\"pool\", factory, endpointManager, 3, 0, -1, -1, logger,\n         60 * 1000, cancelCriterion, poolStats);\n     manager.start(background);\n \n-    Connection conn[] = new Connection[4];\n-\n-    conn[0] = manager.borrowConnection(0);\n-    Assert.assertEquals(1, factory.creates);\n-\n-    manager.returnConnection(conn[0]);\n-    conn[0] = manager.borrowConnection(0);\n-    Assert.assertEquals(1, factory.creates);\n-    conn[1] = manager.borrowConnection(0);\n-    manager.returnConnection(conn[0]);\n-    manager.returnConnection(conn[1]);\n-    Assert.assertEquals(2, factory.creates);\n-\n-    conn[0] = manager.borrowConnection(0);\n-    conn[1] = manager.borrowConnection(0);\n-    conn[2] = manager.borrowConnection(0);\n-    Assert.assertEquals(3, factory.creates);\n-\n-    try {\n-      conn[4] = manager.borrowConnection(10);\n-      fail(\"Should have received an all connections in use exception\");\n-    } catch (AllConnectionsInUseException e) {\n-      // expected exception\n-    }\n+    Connection connection1 = manager.borrowConnection(0);\n+    assertThat(factory.creates.get()).isEqualTo(1);\n+\n+    manager.returnConnection(connection1);\n+    connection1 = manager.borrowConnection(0);\n+\n+    assertThat(factory.creates.get()).isEqualTo(1);\n+\n+    Connection connection2 = manager.borrowConnection(0);\n+    manager.returnConnection(connection1);\n+    manager.returnConnection(connection2);\n+\n+    assertThat(factory.creates.get()).isEqualTo(2);\n+\n+    manager.borrowConnection(0);\n+    manager.borrowConnection(0);\n+    manager.borrowConnection(0);\n+\n+    assertThat(factory.creates.get()).isEqualTo(3);\n+\n+    Throwable thrown = catchThrowable(() -> {\n+      manager.borrowConnection(10);\n+    });\n+    assertThat(thrown).isInstanceOf(AllConnectionsInUseException.class);\n   }\n \n   @Test\n-  public void testPrefill() throws InterruptedException {\n+  public void testPrefill() {\n     manager = new ConnectionManagerImpl(\"pool\", factory, endpointManager, 10, 2, -1, -1, logger,\n         60 * 1000, cancelCriterion, poolStats);\n     manager.start(background);\n-    final String descrip = manager.toString();\n-    WaitCriterion ev = new WaitCriterion() {\n-      @Override\n-      public boolean done() {\n-        return factory.creates == 2 && factory.destroys == 0;\n-      }\n \n-      @Override\n-      public String description() {\n-        return \"waiting for manager \" + descrip;\n-      }\n-    };\n-    GeodeAwaitility.await().untilAsserted(ev);\n+    await(\"waiting for manager \" + manager).untilAsserted(() -> {\n+      assertThat(factory.creates.get()).isEqualTo(2);\n+      assertThat(factory.destroys.get()).isEqualTo(0);\n+    });\n   }\n \n   @Test\n-  public void testInvalidateConnection()\n-      throws InterruptedException, AllConnectionsInUseException, NoAvailableServersException {\n+  public void testInvalidateConnection() {\n     manager = new ConnectionManagerImpl(\"pool\", factory, endpointManager, 10, 0, 0L, -1, logger,\n         60 * 1000, cancelCriterion, poolStats);\n     manager.start(background);\n \n-    Connection conn = manager.borrowConnection(0);\n-    Assert.assertEquals(1, factory.creates);\n-    Assert.assertEquals(0, factory.destroys);\n-    conn.destroy();\n-    manager.returnConnection(conn);\n-    Assert.assertEquals(1, factory.creates);\n-    Assert.assertEquals(1, factory.destroys);\n-    conn = manager.borrowConnection(0);\n-    Assert.assertEquals(2, factory.creates);\n-    Assert.assertEquals(1, factory.destroys);\n+    Connection connection = manager.borrowConnection(0);\n+\n+    assertThat(factory.creates.get()).isEqualTo(1);\n+    assertThat(factory.destroys.get()).isEqualTo(0);\n+\n+    connection.destroy();\n+    manager.returnConnection(connection);\n+\n+    assertThat(factory.creates.get()).isEqualTo(1);\n+    assertThat(factory.destroys.get()).isEqualTo(1);\n+\n+    manager.borrowConnection(0);\n+\n+    assertThat(factory.creates.get()).isEqualTo(2);\n+    assertThat(factory.destroys.get()).isEqualTo(1);\n   }\n \n   @Test\n-  public void testInvalidateServer()\n-      throws InterruptedException, AllConnectionsInUseException, NoAvailableServersException {\n+  public void testInvalidateServer() {\n     manager = new ConnectionManagerImpl(\"pool\", factory, endpointManager, 10, 0, -1, -1, logger,\n         60 * 1000, cancelCriterion, poolStats);\n     manager.start(background);\n \n     ServerLocation server1 = new ServerLocation(\"localhost\", 1);\n     ServerLocation server2 = new ServerLocation(\"localhost\", 2);\n-    factory.nextServer = server1;\n-    Connection conn1 = manager.borrowConnection(0);\n-    Connection conn2 = manager.borrowConnection(0);\n-    Connection conn3 = manager.borrowConnection(0);\n-    factory.nextServer = server2;\n-    Connection conn4 = manager.borrowConnection(0);\n-\n-    Assert.assertEquals(4, factory.creates);\n-    Assert.assertEquals(0, factory.destroys);\n-\n-    manager.returnConnection(conn2);\n-    endpointManager.serverCrashed(conn2.getEndpoint());\n-    Assert.assertEquals(3, factory.destroys);\n-    conn1.destroy();\n-    manager.returnConnection(conn1);\n-    Assert.assertEquals(3, factory.destroys);\n-    manager.returnConnection(conn3);\n-    manager.returnConnection(conn4);\n-    Assert.assertEquals(3, factory.destroys);\n+    factory.nextServer.set(server1);\n+    Connection connection1 = manager.borrowConnection(0);\n+    Connection connection2 = manager.borrowConnection(0);\n+    Connection connection3 = manager.borrowConnection(0);\n+    factory.nextServer.set(server2);\n+    Connection connection4 = manager.borrowConnection(0);\n+\n+    assertThat(factory.creates.get()).isEqualTo(4);\n+    assertThat(factory.destroys.get()).isEqualTo(0);\n+\n+    manager.returnConnection(connection2);\n+    endpointManager.serverCrashed(connection2.getEndpoint());\n+\n+    assertThat(factory.destroys.get()).isEqualTo(3);\n+\n+    connection1.destroy();\n+    manager.returnConnection(connection1);\n+\n+    assertThat(factory.destroys.get()).isEqualTo(3);\n+\n+    manager.returnConnection(connection3);\n+    manager.returnConnection(connection4);\n+\n+    assertThat(factory.destroys.get()).isEqualTo(3);\n \n     manager.borrowConnection(0);\n-    Assert.assertEquals(4, factory.creates);\n-    Assert.assertEquals(3, factory.destroys);\n+    assertThat(factory.creates.get()).isEqualTo(4);\n+    assertThat(factory.destroys.get()).isEqualTo(3);\n   }\n \n   @Test\n-  public void testIdleExpiration()\n-      throws InterruptedException, AllConnectionsInUseException, NoAvailableServersException {\n-    final long idleTimeoutMillis = 300;\n+  public void testIdleExpiration() throws Exception {\n+    long idleTimeoutMillis = 300;\n     manager =\n         new ConnectionManagerImpl(\"pool\", factory, endpointManager, 5, 2, idleTimeoutMillis, -1,\n             logger, 60 * 1000, cancelCriterion, poolStats);\n     manager.start(background);\n \n-    {\n-      factory.waitWhile(() -> factory.creates < 2);\n-      Assert.assertEquals(2, factory.creates);\n-      Assert.assertEquals(0, factory.destroys);\n-      Assert.assertEquals(0, factory.closes);\n-      Assert.assertEquals(0, poolStats.getIdleExpire());\n-      // no need to wait; dangerous because it gives connections a chance to expire\n-      // //wait for prefill task to finish.\n-      // Thread.sleep(100);\n-    }\n+    await().untilAsserted(() -> {\n+      assertThat(factory.creates.get()).isEqualTo(2);\n+      assertThat(factory.destroys.get()).isEqualTo(0);\n+      assertThat(factory.closes.get()).isEqualTo(0);\n+      assertThat(poolStats.getIdleExpire()).isEqualTo(0);\n+    });\n+\n+    // no need to wait; dangerous because it gives connections a chance to expire\n \n-    Connection conn1 = manager.borrowConnection(500);\n-    Connection conn2 = manager.borrowConnection(500);\n-    Connection conn3 = manager.borrowConnection(500);\n-    Connection conn4 = manager.borrowConnection(500);\n-    Connection conn5 = manager.borrowConnection(500);\n+    Connection connection1 = manager.borrowConnection(500);\n+    Connection connection2 = manager.borrowConnection(500);\n+    Connection connection3 = manager.borrowConnection(500);\n+    Connection connection4 = manager.borrowConnection(500);\n+    Connection connection5 = manager.borrowConnection(500);\n \n     // wait to make sure checked out connections aren't timed out\n     Thread.sleep(idleTimeoutMillis * 2);\n-    Assert.assertEquals(5, factory.creates);\n-    Assert.assertEquals(0, factory.destroys);\n-    Assert.assertEquals(0, factory.closes);\n-    Assert.assertEquals(0, poolStats.getIdleExpire());\n-\n-    {\n-      // make sure a connection that has been passivated can idle-expire\n-      conn1.passivate(true);\n-\n-      long elapsedMillis = factory.waitWhile(() -> factory.destroys < 1);\n-      Assert.assertEquals(5, factory.creates);\n-      Assert.assertEquals(1, factory.destroys);\n-      Assert.assertEquals(1, factory.closes);\n-      Assert.assertEquals(1, poolStats.getIdleExpire());\n-      checkIdleTimeout(idleTimeoutMillis, elapsedMillis);\n-    }\n+    assertThat(factory.creates.get()).isEqualTo(5);\n+    assertThat(factory.destroys.get()).isEqualTo(0);\n+    assertThat(factory.closes.get()).isEqualTo(0);\n+    assertThat(poolStats.getIdleExpire()).isEqualTo(0);\n+\n+    // make sure a connection that has been passivated can idle-expire\n+    connection1.passivate(true);\n+\n+    long elapsedMillis = Timer.measure(() -> {\n+      await().untilAsserted(() -> {\n+        assertThat(factory.creates.get()).isEqualTo(5);\n+        assertThat(factory.destroys.get()).isEqualTo(1);\n+        assertThat(factory.closes.get()).isEqualTo(1);\n+        assertThat(poolStats.getIdleExpire()).isEqualTo(1);\n+      });\n+    });\n+    checkIdleTimeout(idleTimeoutMillis, elapsedMillis);\n \n     // now return all other connections to pool and verify that just 2 expire\n-    manager.returnConnection(conn2);\n-    manager.returnConnection(conn3);\n-    manager.returnConnection(conn4);\n-    manager.returnConnection(conn5);\n-\n-    {\n-      long elapsedMillis = factory.waitWhile(() -> factory.destroys < 3);\n-      Assert.assertEquals(5, factory.creates);\n-      Assert.assertEquals(3, factory.destroys);\n-      Assert.assertEquals(3, factory.closes);\n-      Assert.assertEquals(3, poolStats.getIdleExpire());\n-      checkIdleTimeout(idleTimeoutMillis, elapsedMillis);\n-    }\n+    manager.returnConnection(connection2);\n+    manager.returnConnection(connection3);\n+    manager.returnConnection(connection4);\n+    manager.returnConnection(connection5);\n+\n+    elapsedMillis = Timer.measure(() -> {\n+      await().untilAsserted(() -> {\n+        assertThat(factory.creates.get()).isEqualTo(5);\n+        assertThat(factory.destroys.get()).isEqualTo(3);\n+        assertThat(factory.closes.get()).isEqualTo(3);\n+        assertThat(poolStats.getIdleExpire()).isEqualTo(3);\n+      });\n+    });\n+    checkIdleTimeout(idleTimeoutMillis, elapsedMillis);\n \n     // wait to make sure min-connections don't time out\n     Thread.sleep(idleTimeoutMillis * 2);\n-    Assert.assertEquals(5, factory.creates);\n-    Assert.assertEquals(3, factory.destroys);\n-    Assert.assertEquals(3, factory.closes);\n-    Assert.assertEquals(3, poolStats.getIdleExpire());\n-  }\n-\n-  private void checkIdleTimeout(final long idleTimeoutMillis, long elapsedMillis) {\n-    Assert.assertTrue(\n-        \"Elapsed \" + elapsedMillis + \" is less than idle timeout \" + idleTimeoutMillis,\n-        elapsedMillis >= (idleTimeoutMillis - ALLOWABLE_ERROR_IN_MILLIS));\n-    Assert.assertTrue(\n-        \"Elapsed \" + elapsedMillis + \" is greater than idle timeout \" + idleTimeoutMillis,\n-        elapsedMillis <= (idleTimeoutMillis + ALLOWABLE_ERROR_IN_MILLIS));\n+    assertThat(factory.creates.get()).isEqualTo(5);\n+    assertThat(factory.destroys.get()).isEqualTo(3);\n+    assertThat(factory.closes.get()).isEqualTo(3);\n+    assertThat(poolStats.getIdleExpire()).isEqualTo(3);\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2dd4579bb67e1604cb3245ea244beb8e12faa2c"}, "originalPosition": 453}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c7dde4cf0d3fa9da58d8e981df599e053eafc88", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/3c7dde4cf0d3fa9da58d8e981df599e053eafc88", "committedDate": "2020-04-22T17:23:56Z", "message": "Revert geode-concurrency-test build changes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4767, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}