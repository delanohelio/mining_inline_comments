{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMzUwNTUz", "number": 4959, "title": "GEODE-7852:  Create test for running cache operations with a dropped \u2026", "bodyText": "\u2026proxy.\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-04-14T18:40:32Z", "url": "https://github.com/apache/geode/pull/4959", "merged": true, "mergeCommit": {"oid": "54bfcae0ef394cc188a08f7edb7a675864f795de"}, "closed": true, "closedAt": "2020-04-21T21:20:16Z", "author": {"login": "echobravopapa"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXn_HxgFqTM5MzE5NzM2OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZ6YkTgFqTM5NzY4MTMwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMTk3MzY5", "url": "https://github.com/apache/geode/pull/4959#pullrequestreview-393197369", "createdAt": "2020-04-14T18:41:34Z", "commit": {"oid": "0378b4f38c66cf945535f4b5996765447feecbe4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODo0MTozNVrOGFcA4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODo0MTozNVrOGFcA4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1NTA0MQ==", "bodyText": "binding to a well known port, intentionally", "url": "https://github.com/apache/geode/pull/4959#discussion_r408355041", "createdAt": "2020-04-14T18:41:35Z", "author": {"login": "echobravopapa"}, "path": "geode-assembly/src/acceptanceTest/resources/org/apache/geode/client/sni/docker-compose.yml", "diffHunk": "@@ -33,7 +33,7 @@ services:\n     container_name: 'haproxy'\n     image: 'haproxy:2.1'\n     ports:\n-      - \"15443\"\n+      - \"15443:15443\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0378b4f38c66cf945535f4b5996765447feecbe4"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMTk4MDAz", "url": "https://github.com/apache/geode/pull/4959#pullrequestreview-393198003", "createdAt": "2020-04-14T18:42:23Z", "commit": {"oid": "0378b4f38c66cf945535f4b5996765447feecbe4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODo0MjoyNFrOGFcCtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODo0MjoyNFrOGFcCtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1NTUwOA==", "bodyText": "without the bind of the port this will not match when the proxy is restarted", "url": "https://github.com/apache/geode/pull/4959#discussion_r408355508", "createdAt": "2020-04-14T18:42:24Z", "author": {"login": "echobravopapa"}, "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.client.sni;\n+\n+import static com.palantir.docker.compose.execution.DockerComposeExecArgument.arguments;\n+import static com.palantir.docker.compose.execution.DockerComposeExecOption.options;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENABLED_COMPONENTS;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENDPOINT_IDENTIFICATION_ENABLED;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_KEYSTORE_TYPE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_REQUIRE_AUTHENTICATION;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE_PASSWORD;\n+import static org.apache.geode.test.util.ResourceUtils.createTempFileFromResource;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Properties;\n+\n+import com.palantir.docker.compose.DockerComposeRule;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.client.NoAvailableLocatorsException;\n+import org.apache.geode.cache.client.proxy.ProxySocketFactories;\n+import org.apache.geode.test.junit.rules.IgnoreOnWindowsRule;\n+\n+public class ClientSNIDropProxyAcceptanceTest {\n+\n+  private static final URL DOCKER_COMPOSE_PATH =\n+      ClientSNIDropProxyAcceptanceTest.class.getResource(\"docker-compose.yml\");\n+\n+  // Docker compose does not work on windows in CI. Ignore this test on windows\n+  // Using a RuleChain to make sure we ignore the test before the rule comes into play\n+  @ClassRule\n+  public static TestRule ignoreOnWindowsRule = new IgnoreOnWindowsRule();\n+\n+  @Rule\n+  public DockerComposeRule docker = DockerComposeRule.builder()\n+      .file(DOCKER_COMPOSE_PATH.getPath())\n+      .build();\n+\n+  private ClientCache cache;\n+\n+  private String trustStorePath;\n+\n+  @Before\n+  public void before() throws IOException, InterruptedException {\n+    trustStorePath =\n+        createTempFileFromResource(ClientSNIDropProxyAcceptanceTest.class,\n+            \"geode-config/truststore.jks\")\n+                .getAbsolutePath();\n+    docker.exec(options(\"-T\"), \"geode\",\n+        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter.gfsh\"));\n+\n+  }\n+\n+  @Test\n+  public void performSimpleOperationsDropSNIProxy()\n+      throws IOException,\n+      InterruptedException {\n+    final Region<String, Integer> region = getRegion();\n+\n+    region.put(\"Roy Hobbs\", 9);\n+    assertThat(region.get(\"Roy Hobbs\")).isEqualTo(9);\n+\n+    docker.containers()\n+        .container(\"haproxy\")\n+        .stop();\n+\n+    assertThatThrownBy(() -> region.get(\"Roy Hobbs\"))\n+        .isInstanceOf(NoAvailableLocatorsException.class)\n+        .hasMessageContaining(\"Unable to connect to any locators in the list\");\n+\n+    docker.containers()\n+        .container(\"haproxy\")\n+        .start();\n+\n+    assertThat(region.get(\"Roy Hobbs\")).isEqualTo(9);\n+\n+    region.put(\"Bennie Rodriquez\", 30);\n+    assertThat(region.get(\"Bennie Rodriquez\")).isEqualTo(30);\n+\n+    region.put(\"Jake Taylor\", 7);\n+    region.put(\"Crash Davis\", 8);\n+\n+    region.put(\"Ricky Vaughn\", 99);\n+    region.put(\"Ebbie Calvin LaLoosh\", 37);\n+\n+  }\n+\n+  public Region<String, Integer> getRegion() {\n+    Properties gemFireProps = new Properties();\n+    gemFireProps.setProperty(SSL_ENABLED_COMPONENTS, \"all\");\n+    gemFireProps.setProperty(SSL_KEYSTORE_TYPE, \"jks\");\n+    gemFireProps.setProperty(SSL_REQUIRE_AUTHENTICATION, \"false\");\n+\n+    gemFireProps.setProperty(SSL_TRUSTSTORE, trustStorePath);\n+    gemFireProps.setProperty(SSL_TRUSTSTORE_PASSWORD, \"geode\");\n+    gemFireProps.setProperty(SSL_ENDPOINT_IDENTIFICATION_ENABLED, \"true\");\n+\n+    int proxyPort = docker.containers()\n+        .container(\"haproxy\")\n+        .port(15443)\n+        .getExternalPort();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0378b4f38c66cf945535f4b5996765447feecbe4"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMTk5NTc0", "url": "https://github.com/apache/geode/pull/4959#pullrequestreview-393199574", "createdAt": "2020-04-14T18:44:31Z", "commit": {"oid": "0378b4f38c66cf945535f4b5996765447feecbe4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODo0NDozMVrOGFcHnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODo0NDozMVrOGFcHnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1Njc2NQ==", "bodyText": "another possibility would be to sub-class the sniSocketFactory and allow the port to be reset as needed, which is the class most under test here and that makes me not a fan of that approach", "url": "https://github.com/apache/geode/pull/4959#discussion_r408356765", "createdAt": "2020-04-14T18:44:31Z", "author": {"login": "echobravopapa"}, "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.client.sni;\n+\n+import static com.palantir.docker.compose.execution.DockerComposeExecArgument.arguments;\n+import static com.palantir.docker.compose.execution.DockerComposeExecOption.options;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENABLED_COMPONENTS;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENDPOINT_IDENTIFICATION_ENABLED;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_KEYSTORE_TYPE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_REQUIRE_AUTHENTICATION;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE_PASSWORD;\n+import static org.apache.geode.test.util.ResourceUtils.createTempFileFromResource;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Properties;\n+\n+import com.palantir.docker.compose.DockerComposeRule;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.client.NoAvailableLocatorsException;\n+import org.apache.geode.cache.client.proxy.ProxySocketFactories;\n+import org.apache.geode.test.junit.rules.IgnoreOnWindowsRule;\n+\n+public class ClientSNIDropProxyAcceptanceTest {\n+\n+  private static final URL DOCKER_COMPOSE_PATH =\n+      ClientSNIDropProxyAcceptanceTest.class.getResource(\"docker-compose.yml\");\n+\n+  // Docker compose does not work on windows in CI. Ignore this test on windows\n+  // Using a RuleChain to make sure we ignore the test before the rule comes into play\n+  @ClassRule\n+  public static TestRule ignoreOnWindowsRule = new IgnoreOnWindowsRule();\n+\n+  @Rule\n+  public DockerComposeRule docker = DockerComposeRule.builder()\n+      .file(DOCKER_COMPOSE_PATH.getPath())\n+      .build();\n+\n+  private ClientCache cache;\n+\n+  private String trustStorePath;\n+\n+  @Before\n+  public void before() throws IOException, InterruptedException {\n+    trustStorePath =\n+        createTempFileFromResource(ClientSNIDropProxyAcceptanceTest.class,\n+            \"geode-config/truststore.jks\")\n+                .getAbsolutePath();\n+    docker.exec(options(\"-T\"), \"geode\",\n+        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter.gfsh\"));\n+\n+  }\n+\n+  @Test\n+  public void performSimpleOperationsDropSNIProxy()\n+      throws IOException,\n+      InterruptedException {\n+    final Region<String, Integer> region = getRegion();\n+\n+    region.put(\"Roy Hobbs\", 9);\n+    assertThat(region.get(\"Roy Hobbs\")).isEqualTo(9);\n+\n+    docker.containers()\n+        .container(\"haproxy\")\n+        .stop();\n+\n+    assertThatThrownBy(() -> region.get(\"Roy Hobbs\"))\n+        .isInstanceOf(NoAvailableLocatorsException.class)\n+        .hasMessageContaining(\"Unable to connect to any locators in the list\");\n+\n+    docker.containers()\n+        .container(\"haproxy\")\n+        .start();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0378b4f38c66cf945535f4b5996765447feecbe4"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMjA0OTcx", "url": "https://github.com/apache/geode/pull/4959#pullrequestreview-393204971", "createdAt": "2020-04-14T18:51:56Z", "commit": {"oid": "0378b4f38c66cf945535f4b5996765447feecbe4"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMjcwMjQ1", "url": "https://github.com/apache/geode/pull/4959#pullrequestreview-393270245", "createdAt": "2020-04-14T20:27:57Z", "commit": {"oid": "0378b4f38c66cf945535f4b5996765447feecbe4"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDoyNzo1N1rOGFfpUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQyMDoyOTo0MVrOGFftKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxNDU0Nw==", "bodyText": "Maybe use the new NotOnWindowsDockerRule?", "url": "https://github.com/apache/geode/pull/4959#discussion_r408414547", "createdAt": "2020-04-14T20:27:57Z", "author": {"login": "upthewaterspout"}, "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.client.sni;\n+\n+import static com.palantir.docker.compose.execution.DockerComposeExecArgument.arguments;\n+import static com.palantir.docker.compose.execution.DockerComposeExecOption.options;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENABLED_COMPONENTS;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENDPOINT_IDENTIFICATION_ENABLED;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_KEYSTORE_TYPE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_REQUIRE_AUTHENTICATION;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE_PASSWORD;\n+import static org.apache.geode.test.util.ResourceUtils.createTempFileFromResource;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Properties;\n+\n+import com.palantir.docker.compose.DockerComposeRule;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.client.NoAvailableLocatorsException;\n+import org.apache.geode.cache.client.proxy.ProxySocketFactories;\n+import org.apache.geode.test.junit.rules.IgnoreOnWindowsRule;\n+\n+public class ClientSNIDropProxyAcceptanceTest {\n+\n+  private static final URL DOCKER_COMPOSE_PATH =\n+      ClientSNIDropProxyAcceptanceTest.class.getResource(\"docker-compose.yml\");\n+\n+  // Docker compose does not work on windows in CI. Ignore this test on windows\n+  // Using a RuleChain to make sure we ignore the test before the rule comes into play\n+  @ClassRule\n+  public static TestRule ignoreOnWindowsRule = new IgnoreOnWindowsRule();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0378b4f38c66cf945535f4b5996765447feecbe4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODQxNTUyOQ==", "bodyText": "This will cause the test to be flaky if something else has this port. AvailablePortHelper would help here.", "url": "https://github.com/apache/geode/pull/4959#discussion_r408415529", "createdAt": "2020-04-14T20:29:41Z", "author": {"login": "upthewaterspout"}, "path": "geode-assembly/src/acceptanceTest/resources/org/apache/geode/client/sni/docker-compose.yml", "diffHunk": "@@ -33,7 +33,7 @@ services:\n     container_name: 'haproxy'\n     image: 'haproxy:2.1'\n     ports:\n-      - \"15443\"\n+      - \"15443:15443\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM1NTA0MQ=="}, "originalCommit": {"oid": "0378b4f38c66cf945535f4b5996765447feecbe4"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "068736287a618920807629db78aa545f22cff868", "author": {"user": {"login": "echobravopapa", "name": "Ernie Burghardt"}}, "url": "https://github.com/apache/geode/commit/068736287a618920807629db78aa545f22cff868", "committedDate": "2020-04-20T22:43:43Z", "message": "GEODE-7852:  Create test for running cache operations with a dropped proxy."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "393c4d890af962eefc1d001750f5f5c2e6d572c1", "author": {"user": {"login": "echobravopapa", "name": "Ernie Burghardt"}}, "url": "https://github.com/apache/geode/commit/393c4d890af962eefc1d001750f5f5c2e6d572c1", "committedDate": "2020-04-20T22:43:43Z", "message": "store proxPort as Field and then use DockerComposeRun to restart HAProxy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "190a11a0d1650355873023117c3c58013fc64698", "author": {"user": {"login": "echobravopapa", "name": "Ernie Burghardt"}}, "url": "https://github.com/apache/geode/commit/190a11a0d1650355873023117c3c58013fc64698", "committedDate": "2020-04-20T22:43:43Z", "message": "spa"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58d3938f1004eb1bab01a4e3c898451872b77433", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/58d3938f1004eb1bab01a4e3c898451872b77433", "committedDate": "2020-04-20T22:43:43Z", "message": "GEODE-7852-drop-proxy: daemonize re-run container"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1bfe42da3e1c233effea6e445d9492ae4809e731", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/1bfe42da3e1c233effea6e445d9492ae4809e731", "committedDate": "2020-04-17T23:54:11Z", "message": "GEODE-7852-drop-proxy: daemonize re-run container"}, "afterCommit": {"oid": "58d3938f1004eb1bab01a4e3c898451872b77433", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/58d3938f1004eb1bab01a4e3c898451872b77433", "committedDate": "2020-04-20T22:43:43Z", "message": "GEODE-7852-drop-proxy: daemonize re-run container"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab6c1bfc67e029602032ade36e64d429a3e2ade1", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/ab6c1bfc67e029602032ade36e64d429a3e2ade1", "committedDate": "2020-04-21T16:34:30Z", "message": "GEODE-7852-drop-proxy: awaitility after restarting SNI proxy"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NTU0NzE2", "url": "https://github.com/apache/geode/pull/4959#pullrequestreview-397554716", "createdAt": "2020-04-21T18:11:58Z", "commit": {"oid": "ab6c1bfc67e029602032ade36e64d429a3e2ade1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODoxMTo1OFrOGJRxtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxODoxMTo1OFrOGJRxtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM4MTYyMg==", "bodyText": "It would be nice to have a comment describing what the string.format() arguments are about.  Otherwise someone working on this in the future will have to do some digging to figure it out.", "url": "https://github.com/apache/geode/pull/4959#discussion_r412381622", "createdAt": "2020-04-21T18:11:58Z", "author": {"login": "bschuchardt"}, "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIDropProxyAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.client.sni;\n+\n+import static com.palantir.docker.compose.execution.DockerComposeExecArgument.arguments;\n+import static com.palantir.docker.compose.execution.DockerComposeExecOption.options;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENABLED_COMPONENTS;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_ENDPOINT_IDENTIFICATION_ENABLED;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_KEYSTORE_TYPE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_REQUIRE_AUTHENTICATION;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE;\n+import static org.apache.geode.distributed.ConfigurationProperties.SSL_TRUSTSTORE_PASSWORD;\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.apache.geode.test.util.ResourceUtils.createTempFileFromResource;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.IOException;\n+import java.net.URL;\n+import java.util.Properties;\n+\n+import com.palantir.docker.compose.DockerComposeRule;\n+import com.palantir.docker.compose.execution.DockerComposeRunArgument;\n+import com.palantir.docker.compose.execution.DockerComposeRunOption;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TestRule;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.client.NoAvailableLocatorsException;\n+import org.apache.geode.cache.client.proxy.ProxySocketFactories;\n+import org.apache.geode.test.junit.rules.IgnoreOnWindowsRule;\n+\n+public class ClientSNIDropProxyAcceptanceTest {\n+\n+  private static final URL DOCKER_COMPOSE_PATH =\n+      ClientSNIDropProxyAcceptanceTest.class.getResource(\"docker-compose.yml\");\n+\n+  // Docker compose does not work on windows in CI. Ignore this test on windows\n+  // Using a RuleChain to make sure we ignore the test before the rule comes into play\n+  @ClassRule\n+  public static TestRule ignoreOnWindowsRule = new IgnoreOnWindowsRule();\n+\n+  @Rule\n+  public DockerComposeRule docker = DockerComposeRule.builder()\n+      .file(DOCKER_COMPOSE_PATH.getPath())\n+      .build();\n+\n+  private ClientCache cache;\n+\n+  private String trustStorePath;\n+  private int proxyPort;\n+\n+  @Before\n+  public void before() throws IOException, InterruptedException {\n+    trustStorePath =\n+        createTempFileFromResource(ClientSNIDropProxyAcceptanceTest.class,\n+            \"geode-config/truststore.jks\")\n+                .getAbsolutePath();\n+    docker.exec(options(\"-T\"), \"geode\",\n+        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter.gfsh\"));\n+  }\n+\n+  @After\n+  public void after() {\n+    ensureCacheClosed();\n+  }\n+\n+  @Test\n+  public void performSimpleOperationsDropSNIProxy()\n+      throws IOException,\n+      InterruptedException {\n+    final Region<String, Integer> region = getRegion();\n+\n+    region.put(\"Roy Hobbs\", 9);\n+    assertThat(region.get(\"Roy Hobbs\")).isEqualTo(9);\n+\n+    stopProxy();\n+\n+    assertThatThrownBy(() -> region.get(\"Roy Hobbs\"))\n+        .isInstanceOf(NoAvailableLocatorsException.class)\n+        .hasMessageContaining(\"Unable to connect to any locators in the list\");\n+\n+\n+    restartProxy();\n+\n+    await().untilAsserted(() -> assertThat(region.get(\"Roy Hobbs\")).isEqualTo(9));\n+\n+    region.put(\"Bennie Rodriquez\", 30);\n+    assertThat(region.get(\"Bennie Rodriquez\")).isEqualTo(30);\n+\n+    region.put(\"Jake Taylor\", 7);\n+    region.put(\"Crash Davis\", 8);\n+\n+    region.put(\"Ricky Vaughn\", 99);\n+    region.put(\"Ebbie Calvin LaLoosh\", 37);\n+\n+  }\n+\n+  private void stopProxy() throws IOException, InterruptedException {\n+    docker.containers()\n+        .container(\"haproxy\")\n+        .stop();\n+  }\n+\n+  private void restartProxy() throws IOException, InterruptedException {\n+    restartProxyOnPreviousPort();\n+    // Leave this commented here in case you need it for troubleshooting\n+    // restartProxyOnDockerComposePort();\n+  }\n+\n+  /**\n+   * Use this variant to (re)start the container on whatever port(s) is specified in\n+   * docker-compose.yml. Usually that would look something like:\n+   *\n+   * ports:\n+   * - \"15443:15443\"\n+   *\n+   * Leave this unused method here for troubleshooting.\n+   */\n+  private void restartProxyOnDockerComposePort() throws IOException, InterruptedException {\n+    docker.containers()\n+        .container(\"haproxy\")\n+        .start();\n+  }\n+\n+  /**\n+   * Use this variant to (re)start the container whatever host port it was bound to before\n+   * it was stopped. Usually you'll want the ports spec in docker-compose.yml to look like\n+   * this when using this method (allowing Docker to initially choose a random host port\n+   * to bind to):\n+   *\n+   * ports:\n+   * - \"15443\"\n+   */\n+  private void restartProxyOnPreviousPort() throws IOException, InterruptedException {\n+    docker.run(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab6c1bfc67e029602032ade36e64d429a3e2ade1"}, "originalPosition": 155}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d25d5077786065f9e5ee713aeedefc3e34981c4d", "author": {"user": {"login": "Bill", "name": "Bill Burcham"}}, "url": "https://github.com/apache/geode/commit/d25d5077786065f9e5ee713aeedefc3e34981c4d", "committedDate": "2020-04-21T18:44:01Z", "message": "GEODE-7852-drop-proxy: use NotOnWindowsDockerRule and improve comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NjgxMzA3", "url": "https://github.com/apache/geode/pull/4959#pullrequestreview-397681307", "createdAt": "2020-04-21T21:15:31Z", "commit": {"oid": "d25d5077786065f9e5ee713aeedefc3e34981c4d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4811, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}