{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczMDI3Nzk1", "number": 5476, "title": "GEODE-8455: Fix difference between create region with gw sender and a\u2026", "bodyText": "\u2026lter region with gw sender\nGeode behaves differently with respect to transactions when\ncreating a partitioned region with a parallel gateway sender to\nwhen first the partitioned region is created and then the\nparallel gateway sender is added by altering the region.\nIn the first case (create region with gateway sender), when\nsending a transaction for the region, an event is sent\nto each server hosting the bucket for the data in the transaction.\nIn the second case (create region + alter region),\nwhen sending a transaction for the region, an event\nis sent to every cache member and not only to those hosting\nthe bucket for the data in the transaction. This leads to,\nin the servers not hosting the bucket for the data,\nthat the events are stored in the\nbucketToTempQueueMap member variable of the\nParallelGatewaySenderQueue.\nThe behavior in the first case is the right one.\nThe wrong behavior is provoked by the setting to true of the\nrequiresNotification variable of the PartitionedRegion\nby the distributeUpdatedProfileOnSenderCreation method.\nThis method should only set this variable to true\nin case the sender is serial as it is done when\na partitioned region is initialized.\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-08-25T08:18:43Z", "url": "https://github.com/apache/geode/pull/5476", "merged": true, "mergeCommit": {"oid": "304e4d5857fc7539c054713e6eaddb0e74ea01d8"}, "closed": true, "closedAt": "2020-09-01T09:19:53Z", "author": {"login": "albertogpz"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCSvKEgH2gAyNDczMDI3Nzk1Ojk0OGUwN2U4MWE0YjMxNmIwMGQ5OWNkMmYzMjlmNzYxOGU3MWFlYzE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEj2cygFqTQ3OTU1MTY0MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "948e07e81a4b316b00d99cd2f329f7618e71aec1", "author": {"user": {"login": "albertogpz", "name": "Alberto Gomez"}}, "url": "https://github.com/apache/geode/commit/948e07e81a4b316b00d99cd2f329f7618e71aec1", "committedDate": "2020-08-25T08:14:53Z", "message": "GEODE-8455: Fix difference between create region with gw sender and alter region with gw sender\n\nGeode behaves differently with respect to transactions when\ncreating a partitioned region with a parallel gateway sender to\nwhen first the partitioned region is created and then the\nparallel gateway sender is added by altering the region.\n\nIn the first case (create region with gateway sender), when\nsending a transaction for the region, an event is sent\nto each server hosting the bucket for the data in the transaction.\n\nIn the second case (create region + alter region),\nwhen sending a transaction for the region, an event\nis sent to every cache member and not only to those hosting\nthe bucket for the data in the transaction. This leads to,\nin the servers not hosting the bucket for the data,\nthat the events are stored in the\nbucketToTempQueueMap member variable of the\nParallelGatewaySenderQueue.\n\nThe behavior in the first case is the right one.\n\nThe wrong behavior is provoked by the setting to true of the\nrequiresNotification variable of the PartitionedRegion\nby the distributeUpdatedProfileOnSenderCreation method.\nThis method should only set this variable to true\nin case the sender is serial as it is done when\na partitioned region is initialized."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NzU3NzY1", "url": "https://github.com/apache/geode/pull/5476#pullrequestreview-475757765", "createdAt": "2020-08-26T18:40:32Z", "commit": {"oid": "948e07e81a4b316b00d99cd2f329f7618e71aec1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxODo0MDozM1rOHHY1uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOToxMDozMlrOHHaECw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUwOTA0OQ==", "bodyText": "This method almost entirely duplicates the existing getGatewaySender() method, so it can be removed and calls to it replaced with (AbstractGatewaySender) getGatewaySender(senderId)", "url": "https://github.com/apache/geode/pull/5476#discussion_r477509049", "createdAt": "2020-08-26T18:40:33Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java", "diffHunk": "@@ -3197,6 +3114,18 @@ public static Boolean killSender(String senderId) {\n     }\n   }\n \n+  private static AbstractGatewaySender getAbstractGatewaySender(String senderId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948e07e81a4b316b00d99cd2f329f7618e71aec1"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyMjczMg==", "bodyText": "These methods are very similar. Would it be possible to replace them with one method which takes an int argument for the desired redundancy level?", "url": "https://github.com/apache/geode/pull/5476#discussion_r477522732", "createdAt": "2020-08-26T19:03:17Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java", "diffHunk": "@@ -190,6 +190,16 @@ protected SerializableRunnableIF createPartitionedRegionRedundancy1Runnable() {\n         isOffHeap());\n   }\n \n+  protected SerializableRunnableIF createPartitionedRegionRedundancy1RunnableNoSenders() {\n+    return () -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", null, 1, 100,\n+        isOffHeap());\n+  }\n+\n+  protected SerializableRunnableIF createPartitionedRegionRedundancy0RunnableNoSenders() {\n+    return () -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", null, 0, 100,\n+        isOffHeap());\n+  }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948e07e81a4b316b00d99cd2f329f7618e71aec1"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyNTM0NA==", "bodyText": "This should be Set<RegionQueue> to avoid compiler warnings.", "url": "https://github.com/apache/geode/pull/5476#discussion_r477525344", "createdAt": "2020-08-26T19:05:41Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java", "diffHunk": "@@ -3599,21 +3444,42 @@ public static Long getNumberOfEntriesInVM(final String senderId) {\n   }\n \n   public static void verifyTmpDroppedEventSize(String senderId, int size) {\n-    Set<GatewaySender> senders = cache.getGatewaySenders();\n-    GatewaySender sender = null;\n-    for (GatewaySender s : senders) {\n-      if (s.getId().equals(senderId)) {\n-        sender = s;\n-        break;\n-      }\n-    }\n+    GatewaySender sender = getGatewaySender(senderId);\n \n     AbstractGatewaySender ags = (AbstractGatewaySender) sender;\n     await().untilAsserted(() -> assertEquals(\"Expected tmpDroppedEvents size: \" + size\n         + \" but actual size: \" + ags.getTmpDroppedEventSize(), size, ags.getTmpDroppedEventSize()));\n   }\n \n-  public static void verifyQueueSize(String senderId, int size) {\n+  /**\n+   * Checks that the bucketToTempQueueMap for a partitioned region\n+   * that holds events for buckets that are not available locally, is empty.\n+   */\n+  public static void validateEmptyBucketToTempQueueMap(String senderId) {\n+    GatewaySender sender = getGatewaySender(senderId);\n+\n+    int size = 0;\n+    Set queues = ((AbstractGatewaySender) sender).getQueues();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948e07e81a4b316b00d99cd2f329f7618e71aec1"}, "originalPosition": 436}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyNTg2NQ==", "bodyText": "This should be BlockingQueue<GatewaySenderEventImpl> to avoid compiler warnings.", "url": "https://github.com/apache/geode/pull/5476#discussion_r477525865", "createdAt": "2020-08-26T19:06:10Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java", "diffHunk": "@@ -3599,21 +3444,42 @@ public static Long getNumberOfEntriesInVM(final String senderId) {\n   }\n \n   public static void verifyTmpDroppedEventSize(String senderId, int size) {\n-    Set<GatewaySender> senders = cache.getGatewaySenders();\n-    GatewaySender sender = null;\n-    for (GatewaySender s : senders) {\n-      if (s.getId().equals(senderId)) {\n-        sender = s;\n-        break;\n-      }\n-    }\n+    GatewaySender sender = getGatewaySender(senderId);\n \n     AbstractGatewaySender ags = (AbstractGatewaySender) sender;\n     await().untilAsserted(() -> assertEquals(\"Expected tmpDroppedEvents size: \" + size\n         + \" but actual size: \" + ags.getTmpDroppedEventSize(), size, ags.getTmpDroppedEventSize()));\n   }\n \n-  public static void verifyQueueSize(String senderId, int size) {\n+  /**\n+   * Checks that the bucketToTempQueueMap for a partitioned region\n+   * that holds events for buckets that are not available locally, is empty.\n+   */\n+  public static void validateEmptyBucketToTempQueueMap(String senderId) {\n+    GatewaySender sender = getGatewaySender(senderId);\n+\n+    int size = 0;\n+    Set queues = ((AbstractGatewaySender) sender).getQueues();\n+    for (Object queue : queues) {\n+      PartitionedRegion region =\n+          (PartitionedRegion) ((ConcurrentParallelGatewaySenderQueue) queue).getRegion();\n+      int buckets = region.getTotalNumberOfBuckets();\n+      for (int bucket = 0; bucket < buckets; bucket++) {\n+        BlockingQueue newQueue =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948e07e81a4b316b00d99cd2f329f7618e71aec1"}, "originalPosition": 442}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyNjE5MA==", "bodyText": "The cast to int here is unnecessary.", "url": "https://github.com/apache/geode/pull/5476#discussion_r477526190", "createdAt": "2020-08-26T19:06:26Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java", "diffHunk": "@@ -3599,21 +3444,42 @@ public static Long getNumberOfEntriesInVM(final String senderId) {\n   }\n \n   public static void verifyTmpDroppedEventSize(String senderId, int size) {\n-    Set<GatewaySender> senders = cache.getGatewaySenders();\n-    GatewaySender sender = null;\n-    for (GatewaySender s : senders) {\n-      if (s.getId().equals(senderId)) {\n-        sender = s;\n-        break;\n-      }\n-    }\n+    GatewaySender sender = getGatewaySender(senderId);\n \n     AbstractGatewaySender ags = (AbstractGatewaySender) sender;\n     await().untilAsserted(() -> assertEquals(\"Expected tmpDroppedEvents size: \" + size\n         + \" but actual size: \" + ags.getTmpDroppedEventSize(), size, ags.getTmpDroppedEventSize()));\n   }\n \n-  public static void verifyQueueSize(String senderId, int size) {\n+  /**\n+   * Checks that the bucketToTempQueueMap for a partitioned region\n+   * that holds events for buckets that are not available locally, is empty.\n+   */\n+  public static void validateEmptyBucketToTempQueueMap(String senderId) {\n+    GatewaySender sender = getGatewaySender(senderId);\n+\n+    int size = 0;\n+    Set queues = ((AbstractGatewaySender) sender).getQueues();\n+    for (Object queue : queues) {\n+      PartitionedRegion region =\n+          (PartitionedRegion) ((ConcurrentParallelGatewaySenderQueue) queue).getRegion();\n+      int buckets = region.getTotalNumberOfBuckets();\n+      for (int bucket = 0; bucket < buckets; bucket++) {\n+        BlockingQueue newQueue =\n+            ((ConcurrentParallelGatewaySenderQueue) queue).getBucketTmpQueue((int) bucket);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948e07e81a4b316b00d99cd2f329f7618e71aec1"}, "originalPosition": 443}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyODExMg==", "bodyText": "No exception is thrown from this method, so this can be removed.", "url": "https://github.com/apache/geode/pull/5476#discussion_r477528112", "createdAt": "2020-08-26T19:08:42Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java", "diffHunk": "@@ -1131,6 +1141,111 @@ public void testParallelPropagationWithFilter_AfterAck() throws Exception {\n \n   }\n \n+  /**\n+   * Test that, when a parallel gateway sender is added to a partitioned region through attributes\n+   * mutator, transaction events are not sent to all region members but only to those who are\n+   * hosting the bucket for the event and thus, events are not stored in the bucketToTempQueueMap\n+   * member of the ParallelGatewaySenderQueue.\n+   * Redundancy = 1 in the partitioned region.\n+   *\n+   */\n+  @Test\n+  public void testParallelPropagationTxNotificationsNotSentToAllRegionMembersWhenAddingParallelGatewaySenderThroughAttributesMutator()\n+      throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948e07e81a4b316b00d99cd2f329f7618e71aec1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyODI0Mg==", "bodyText": "These casts to Integer are redundant and can be removed.", "url": "https://github.com/apache/geode/pull/5476#discussion_r477528242", "createdAt": "2020-08-26T19:08:57Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java", "diffHunk": "@@ -1131,6 +1141,111 @@ public void testParallelPropagationWithFilter_AfterAck() throws Exception {\n \n   }\n \n+  /**\n+   * Test that, when a parallel gateway sender is added to a partitioned region through attributes\n+   * mutator, transaction events are not sent to all region members but only to those who are\n+   * hosting the bucket for the event and thus, events are not stored in the bucketToTempQueueMap\n+   * member of the ParallelGatewaySenderQueue.\n+   * Redundancy = 1 in the partitioned region.\n+   *\n+   */\n+  @Test\n+  public void testParallelPropagationTxNotificationsNotSentToAllRegionMembersWhenAddingParallelGatewaySenderThroughAttributesMutator()\n+      throws Exception {\n+    Integer lnPort = (Integer) vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(1));\n+    Integer nyPort = (Integer) vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(2, lnPort));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948e07e81a4b316b00d99cd2f329f7618e71aec1"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyODk2Ng==", "bodyText": "No exception is thrown from this method, so this can be removed.", "url": "https://github.com/apache/geode/pull/5476#discussion_r477528966", "createdAt": "2020-08-26T19:10:19Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java", "diffHunk": "@@ -1131,6 +1141,111 @@ public void testParallelPropagationWithFilter_AfterAck() throws Exception {\n \n   }\n \n+  /**\n+   * Test that, when a parallel gateway sender is added to a partitioned region through attributes\n+   * mutator, transaction events are not sent to all region members but only to those who are\n+   * hosting the bucket for the event and thus, events are not stored in the bucketToTempQueueMap\n+   * member of the ParallelGatewaySenderQueue.\n+   * Redundancy = 1 in the partitioned region.\n+   *\n+   */\n+  @Test\n+  public void testParallelPropagationTxNotificationsNotSentToAllRegionMembersWhenAddingParallelGatewaySenderThroughAttributesMutator()\n+      throws Exception {\n+    Integer lnPort = (Integer) vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(1));\n+    Integer nyPort = (Integer) vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(2, lnPort));\n+\n+    createCacheInVMs(nyPort, vm2, vm3);\n+\n+    createCacheInVMs(lnPort, vm4, vm5, vm6, vm7);\n+\n+    vm4.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+    vm6.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+    vm7.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+\n+    vm4.invoke(createPartitionedRegionRedundancy1RunnableNoSenders());\n+    vm5.invoke(createPartitionedRegionRedundancy1RunnableNoSenders());\n+    vm6.invoke(createPartitionedRegionRedundancy1RunnableNoSenders());\n+    vm7.invoke(createPartitionedRegionRedundancy1RunnableNoSenders());\n+\n+    vm2.invoke(createReceiverPartitionedRegionRedundancy1());\n+    vm3.invoke(createReceiverPartitionedRegionRedundancy1());\n+\n+    vm4.invoke(() -> addSenderThroughAttributesMutator(getTestMethodName() + \"_PR\", \"ln\"));\n+    vm5.invoke(() -> addSenderThroughAttributesMutator(getTestMethodName() + \"_PR\", \"ln\"));\n+    vm6.invoke(() -> addSenderThroughAttributesMutator(getTestMethodName() + \"_PR\", \"ln\"));\n+    vm7.invoke(() -> addSenderThroughAttributesMutator(getTestMethodName() + \"_PR\", \"ln\"));\n+\n+    startSenderInVMs(\"ln\", vm4, vm5, vm6, vm7);\n+\n+    vm4.invoke(waitForSenderRunnable());\n+    vm5.invoke(waitForSenderRunnable());\n+    vm6.invoke(waitForSenderRunnable());\n+    vm7.invoke(waitForSenderRunnable());\n+\n+    vm4.invoke(() -> WANTestBase.doTxPuts(getTestMethodName() + \"_PR\"));\n+\n+    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 3));\n+    vm4.invoke(() -> WANTestBase.verifyQueueSize(\"ln\", 3));\n+\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+\n+    vm4.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n+    vm5.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n+    vm6.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n+    vm7.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n+  }\n+\n+  /**\n+   * Test that, when a parallel gateway sender is added to a partitioned region through attributes\n+   * mutator, transaction events are not sent to all region members but only to those who are\n+   * hosting the bucket for the event and thus, events are not stored in the bucketToTempQueueMap\n+   * member of the ParallelGatewaySenderQueue.\n+   * No redundancy in the partitioned region.\n+   *\n+   */\n+  @Test\n+  public void testParallelPropagationTxNotificationsNotSentToAllRegionMembersWhenAddingParallelGatewaySenderThroughAttributesMutatorNoRedundancy()\n+      throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948e07e81a4b316b00d99cd2f329f7618e71aec1"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUyOTA5OQ==", "bodyText": "These casts to Integer are redundant and can be removed.", "url": "https://github.com/apache/geode/pull/5476#discussion_r477529099", "createdAt": "2020-08-26T19:10:32Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationDUnitTest.java", "diffHunk": "@@ -1131,6 +1141,111 @@ public void testParallelPropagationWithFilter_AfterAck() throws Exception {\n \n   }\n \n+  /**\n+   * Test that, when a parallel gateway sender is added to a partitioned region through attributes\n+   * mutator, transaction events are not sent to all region members but only to those who are\n+   * hosting the bucket for the event and thus, events are not stored in the bucketToTempQueueMap\n+   * member of the ParallelGatewaySenderQueue.\n+   * Redundancy = 1 in the partitioned region.\n+   *\n+   */\n+  @Test\n+  public void testParallelPropagationTxNotificationsNotSentToAllRegionMembersWhenAddingParallelGatewaySenderThroughAttributesMutator()\n+      throws Exception {\n+    Integer lnPort = (Integer) vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(1));\n+    Integer nyPort = (Integer) vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(2, lnPort));\n+\n+    createCacheInVMs(nyPort, vm2, vm3);\n+\n+    createCacheInVMs(lnPort, vm4, vm5, vm6, vm7);\n+\n+    vm4.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+    vm6.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+    vm7.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+\n+    vm4.invoke(createPartitionedRegionRedundancy1RunnableNoSenders());\n+    vm5.invoke(createPartitionedRegionRedundancy1RunnableNoSenders());\n+    vm6.invoke(createPartitionedRegionRedundancy1RunnableNoSenders());\n+    vm7.invoke(createPartitionedRegionRedundancy1RunnableNoSenders());\n+\n+    vm2.invoke(createReceiverPartitionedRegionRedundancy1());\n+    vm3.invoke(createReceiverPartitionedRegionRedundancy1());\n+\n+    vm4.invoke(() -> addSenderThroughAttributesMutator(getTestMethodName() + \"_PR\", \"ln\"));\n+    vm5.invoke(() -> addSenderThroughAttributesMutator(getTestMethodName() + \"_PR\", \"ln\"));\n+    vm6.invoke(() -> addSenderThroughAttributesMutator(getTestMethodName() + \"_PR\", \"ln\"));\n+    vm7.invoke(() -> addSenderThroughAttributesMutator(getTestMethodName() + \"_PR\", \"ln\"));\n+\n+    startSenderInVMs(\"ln\", vm4, vm5, vm6, vm7);\n+\n+    vm4.invoke(waitForSenderRunnable());\n+    vm5.invoke(waitForSenderRunnable());\n+    vm6.invoke(waitForSenderRunnable());\n+    vm7.invoke(waitForSenderRunnable());\n+\n+    vm4.invoke(() -> WANTestBase.doTxPuts(getTestMethodName() + \"_PR\"));\n+\n+    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 3));\n+    vm4.invoke(() -> WANTestBase.verifyQueueSize(\"ln\", 3));\n+\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+\n+    vm4.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n+    vm5.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n+    vm6.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n+    vm7.invoke(() -> WANTestBase.validateEmptyBucketToTempQueueMap(\"ln\"));\n+  }\n+\n+  /**\n+   * Test that, when a parallel gateway sender is added to a partitioned region through attributes\n+   * mutator, transaction events are not sent to all region members but only to those who are\n+   * hosting the bucket for the event and thus, events are not stored in the bucketToTempQueueMap\n+   * member of the ParallelGatewaySenderQueue.\n+   * No redundancy in the partitioned region.\n+   *\n+   */\n+  @Test\n+  public void testParallelPropagationTxNotificationsNotSentToAllRegionMembersWhenAddingParallelGatewaySenderThroughAttributesMutatorNoRedundancy()\n+      throws Exception {\n+    Integer lnPort = (Integer) vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(1));\n+    Integer nyPort = (Integer) vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(2, lnPort));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "948e07e81a4b316b00d99cd2f329f7618e71aec1"}, "originalPosition": 90}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92a9415c3330e963bdfddc3f9a1e4d3210bcc380", "author": {"user": {"login": "albertogpz", "name": "Alberto Gomez"}}, "url": "https://github.com/apache/geode/commit/92a9415c3330e963bdfddc3f9a1e4d3210bcc380", "committedDate": "2020-08-27T11:56:23Z", "message": "feature/GEODE-8455: Fix bug shown in dist tests and minor changes after review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dde720b6166623e92bfe15c1fbeab7fef5b54e3e", "author": {"user": {"login": "albertogpz", "name": "Alberto Gomez"}}, "url": "https://github.com/apache/geode/commit/dde720b6166623e92bfe15c1fbeab7fef5b54e3e", "committedDate": "2020-08-27T12:39:55Z", "message": "GEODE-8455: Remove unused parameter from helper method in WANTestBase support test class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2ODc5NzEy", "url": "https://github.com/apache/geode/pull/5476#pullrequestreview-476879712", "createdAt": "2020-08-27T16:16:23Z", "commit": {"oid": "dde720b6166623e92bfe15c1fbeab7fef5b54e3e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc5NTUxNjQw", "url": "https://github.com/apache/geode/pull/5476#pullrequestreview-479551640", "createdAt": "2020-09-01T09:19:05Z", "commit": {"oid": "dde720b6166623e92bfe15c1fbeab7fef5b54e3e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4164, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}