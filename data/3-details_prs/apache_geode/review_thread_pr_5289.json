{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4ODgwMjc1", "number": 5289, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjowMjoxN1rOEIi1DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDowMjoxM1rOEIxk4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Mzk0NzAxOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PassiveExpirationManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjowMjoxOFrOGokqWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjozMjo0N1rOGolWeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5Njg5MQ==", "bodyText": "I think this would be potentially better with scheduleWithFixedDelay so that there's a guaranteed pause between runs. I'm concerned that a large data set would result in doDataExpiration taking longer than 1 second and putting pressure on the system by constantly running back-to-back.", "url": "https://github.com/apache/geode/pull/5289#discussion_r445196891", "createdAt": "2020-06-24T22:02:18Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PassiveExpirationManager.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.apache.geode.logging.internal.executors.LoggingExecutors.newSingleThreadScheduledExecutor;\n+\n+import java.util.Map;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import org.apache.logging.log4j.Logger;\n+\n+import org.apache.geode.cache.CacheClosedException;\n+import org.apache.geode.cache.EntryDestroyedException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.partition.PartitionRegionHelper;\n+import org.apache.geode.logging.internal.log4j.api.LogService;\n+import org.apache.geode.redis.internal.data.ByteArrayWrapper;\n+import org.apache.geode.redis.internal.data.RedisData;\n+import org.apache.geode.redis.internal.executor.key.RedisKeyCommands;\n+import org.apache.geode.redis.internal.executor.key.RedisKeyCommandsFunctionExecutor;\n+\n+public class PassiveExpirationManager {\n+  private static final Logger logger = LogService.getLogger();\n+\n+  private final Region<ByteArrayWrapper, RedisData> dataRegion;\n+  private final ScheduledExecutorService expirationExecutor;\n+\n+\n+  public PassiveExpirationManager(Region<ByteArrayWrapper, RedisData> dataRegion) {\n+    this.dataRegion = dataRegion;\n+    expirationExecutor = newSingleThreadScheduledExecutor(\"GemFireRedis-PassiveExpiration-\");\n+  }\n+\n+  public void start() {\n+    int INTERVAL = 1;\n+    expirationExecutor.scheduleAtFixedRate(() -> doDataExpiration(dataRegion), INTERVAL, INTERVAL,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eb2b0e65fbcea9d49f518bf2b5bd56609c3e68f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwODE4Ng==", "bodyText": "good idea; it is done", "url": "https://github.com/apache/geode/pull/5289#discussion_r445208186", "createdAt": "2020-06-24T22:32:47Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/PassiveExpirationManager.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal;\n+\n+import static java.util.concurrent.TimeUnit.SECONDS;\n+import static org.apache.geode.logging.internal.executors.LoggingExecutors.newSingleThreadScheduledExecutor;\n+\n+import java.util.Map;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import org.apache.logging.log4j.Logger;\n+\n+import org.apache.geode.cache.CacheClosedException;\n+import org.apache.geode.cache.EntryDestroyedException;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.partition.PartitionRegionHelper;\n+import org.apache.geode.logging.internal.log4j.api.LogService;\n+import org.apache.geode.redis.internal.data.ByteArrayWrapper;\n+import org.apache.geode.redis.internal.data.RedisData;\n+import org.apache.geode.redis.internal.executor.key.RedisKeyCommands;\n+import org.apache.geode.redis.internal.executor.key.RedisKeyCommandsFunctionExecutor;\n+\n+public class PassiveExpirationManager {\n+  private static final Logger logger = LogService.getLogger();\n+\n+  private final Region<ByteArrayWrapper, RedisData> dataRegion;\n+  private final ScheduledExecutorService expirationExecutor;\n+\n+\n+  public PassiveExpirationManager(Region<ByteArrayWrapper, RedisData> dataRegion) {\n+    this.dataRegion = dataRegion;\n+    expirationExecutor = newSingleThreadScheduledExecutor(\"GemFireRedis-PassiveExpiration-\");\n+  }\n+\n+  public void start() {\n+    int INTERVAL = 1;\n+    expirationExecutor.scheduleAtFixedRate(() -> doDataExpiration(dataRegion), INTERVAL, INTERVAL,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5Njg5MQ=="}, "originalCommit": {"oid": "3eb2b0e65fbcea9d49f518bf2b5bd56609c3e68f"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3Mzk1NTM4OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/netty/NettyRedisServer.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQyMjowNTo0MFrOGokvcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOTowMzozOVrOGpIDug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5ODE5Mg==", "bodyText": "What do you think about removing this altogether? We do no testing with this mode and I wouldn't expect anyone to actually use it.", "url": "https://github.com/apache/geode/pull/5289#discussion_r445198192", "createdAt": "2020-06-24T22:05:40Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/netty/NettyRedisServer.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal.netty;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.UnknownHostException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.function.Supplier;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelOption;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import io.netty.handler.timeout.WriteTimeoutHandler;\n+import io.netty.util.concurrent.Future;\n+import org.apache.logging.log4j.Logger;\n+\n+import org.apache.geode.distributed.internal.DistributionConfig;\n+import org.apache.geode.internal.admin.SSLConfig;\n+import org.apache.geode.internal.inet.LocalHostUtil;\n+import org.apache.geode.internal.net.SSLConfigurationFactory;\n+import org.apache.geode.internal.security.SecurableCommunicationChannel;\n+import org.apache.geode.logging.internal.executors.LoggingThreadFactory;\n+import org.apache.geode.logging.internal.log4j.api.LogService;\n+import org.apache.geode.management.ManagementException;\n+import org.apache.geode.redis.internal.RegionProvider;\n+import org.apache.geode.redis.internal.pubsub.PubSub;\n+\n+public class NettyRedisServer {\n+\n+  /**\n+   * System property name that can be used to set the number of threads to be used by the\n+   * GeodeRedisServer\n+   */\n+  private static final String NUM_THREADS_SYS_PROP_NAME = \"gemfireredis.numthreads\";\n+\n+  private static final int RANDOM_PORT_INDICATOR = 0;\n+\n+  private static final Logger logger = LogService.getLogger();\n+  /**\n+   * Connection timeout in milliseconds\n+   */\n+  private static final int connectTimeoutMillis = 1000;\n+\n+  /**\n+   * The number of threads that will work on handling requests\n+   */\n+  private final int numWorkerThreads;\n+\n+  /**\n+   * The number of threads that will work socket selectors\n+   */\n+  private final int numSelectorThreads;\n+\n+  /**\n+   * whether to use old single thread per connection model for worker group\n+   */\n+  private final boolean singleThreadPerConnection;\n+\n+  private final Supplier<DistributionConfig> configSupplier;\n+  private final RegionProvider regionProvider;\n+  private final PubSub pubsub;\n+  private final Supplier<Boolean> allowUnsupportedSupplier;\n+  private final Runnable shutdownInvoker;\n+\n+\n+  private Channel serverChannel;\n+  private EventLoopGroup bossGroup;\n+  private EventLoopGroup workerGroup;\n+  private EventLoopGroup subscriberGroup;\n+\n+  private final InetAddress bindAddress;\n+  private int serverPort;\n+\n+  public NettyRedisServer(Supplier<DistributionConfig> configSupplier,\n+      RegionProvider regionProvider, PubSub pubsub, Supplier<Boolean> allowUnsupportedSupplier,\n+      Runnable shutdownInvoker, int port, String requestedAddress) {\n+    this.configSupplier = configSupplier;\n+    this.regionProvider = regionProvider;\n+    this.pubsub = pubsub;\n+    this.allowUnsupportedSupplier = allowUnsupportedSupplier;\n+    this.shutdownInvoker = shutdownInvoker;\n+    if (port < RANDOM_PORT_INDICATOR) {\n+      throw new IllegalArgumentException(\"Redis port cannot be less than 0\");\n+    }\n+    serverPort = port;\n+    this.bindAddress = getBindAddress(requestedAddress);\n+    numWorkerThreads = setNumWorkerThreads();\n+    singleThreadPerConnection = numWorkerThreads == 0;\n+    numSelectorThreads = 1;\n+  }\n+\n+\n+  public void start() {\n+    Class<? extends ServerChannel> socketClass = initializeEventLoopGroups();\n+    ServerBootstrap serverBootstrap = new ServerBootstrap();\n+\n+    serverBootstrap.group(bossGroup, workerGroup).channel(socketClass)\n+        .childHandler(createChannelInitializer())\n+        .option(ChannelOption.SO_REUSEADDR, true)\n+        .option(ChannelOption.SO_RCVBUF, getBufferSize())\n+        .childOption(ChannelOption.SO_KEEPALIVE, true)\n+        .childOption(ChannelOption.CONNECT_TIMEOUT_MILLIS, connectTimeoutMillis)\n+        .childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT);\n+\n+    serverChannel = createBoundChannel(serverBootstrap);\n+  }\n+\n+  public void stop() {\n+    ChannelFuture closeFuture = null;\n+    if (serverChannel != null) {\n+      closeFuture = serverChannel.closeFuture();\n+    }\n+    workerGroup.shutdownGracefully();\n+    Future<?> bossFuture = bossGroup.shutdownGracefully();\n+    if (serverChannel != null) {\n+      serverChannel.close();\n+    }\n+    bossFuture.syncUninterruptibly();\n+    if (closeFuture != null) {\n+      closeFuture.syncUninterruptibly();\n+    }\n+  }\n+\n+  public int getPort() {\n+    return serverPort;\n+  }\n+\n+  private ChannelInitializer<SocketChannel> createChannelInitializer() {\n+    String redisPassword = configSupplier.get().getRedisPassword();\n+    final byte[] redisPasswordBytes = Coder.stringToBytes(redisPassword);\n+\n+    return new ChannelInitializer<SocketChannel>() {\n+      @Override\n+      public void initChannel(SocketChannel socketChannel) {\n+        if (logger.isDebugEnabled()) {\n+          logger.debug(\n+              \"GeodeRedisServer-Connection established with \" + socketChannel.remoteAddress());\n+        }\n+        ChannelPipeline pipeline = socketChannel.pipeline();\n+        addSSLIfEnabled(socketChannel, pipeline);\n+        pipeline.addLast(ByteToCommandDecoder.class.getSimpleName(), new ByteToCommandDecoder());\n+        pipeline.addLast(new WriteTimeoutHandler(10));\n+        pipeline.addLast(ExecutionHandlerContext.class.getSimpleName(),\n+            new ExecutionHandlerContext(socketChannel, regionProvider, pubsub, subscriberGroup,\n+                allowUnsupportedSupplier, shutdownInvoker, redisPasswordBytes));\n+      }\n+    };\n+  }\n+\n+  private void addSSLIfEnabled(SocketChannel ch, ChannelPipeline p) {\n+\n+    SSLConfig sslConfigForComponent =\n+        SSLConfigurationFactory.getSSLConfigForComponent(configSupplier.get(),\n+            SecurableCommunicationChannel.SERVER);\n+\n+    if (!sslConfigForComponent.isEnabled()) {\n+      return;\n+    }\n+\n+    SslContext sslContext;\n+    try {\n+      KeyStore ks = KeyStore.getInstance(\"JKS\");\n+      ks.load(new FileInputStream(sslConfigForComponent.getKeystore()),\n+          sslConfigForComponent.getKeystorePassword().toCharArray()/**/);\n+\n+      // Set up key manager factory to use our key store\n+      KeyManagerFactory kmf =\n+          KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+      kmf.init(ks, sslConfigForComponent.getKeystorePassword().toCharArray());\n+\n+      SslContextBuilder sslContextBuilder = SslContextBuilder.forServer(kmf);\n+      sslContext = sslContextBuilder.build();\n+\n+    } catch (KeyStoreException | NoSuchAlgorithmException | UnrecoverableKeyException | IOException\n+        | CertificateException e) {\n+      throw new RuntimeException(e);\n+    }\n+    p.addLast(sslContext.newHandler(ch.alloc()));\n+  }\n+\n+  private Class<? extends ServerChannel> initializeEventLoopGroups() {\n+    ThreadFactory selectorThreadFactory =\n+        new LoggingThreadFactory(\"GeodeRedisServer-SelectorThread-\", false);\n+\n+    ThreadFactory workerThreadFactory =\n+        new LoggingThreadFactory(\"GeodeRedisServer-WorkerThread-\", true);\n+\n+    if (singleThreadPerConnection) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3eb2b0e65fbcea9d49f518bf2b5bd56609c3e68f"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTIwNjYzNg==", "bodyText": "I like that idea. It uses deprecated apis so I'd really want us to test with it before allowing customers to use it.\nBut I think that should be on its own PR. We have one about numThreads sys prop; seems like we could do it on that one.", "url": "https://github.com/apache/geode/pull/5289#discussion_r445206636", "createdAt": "2020-06-24T22:28:27Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/netty/NettyRedisServer.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal.netty;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.UnknownHostException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.function.Supplier;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelOption;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import io.netty.handler.timeout.WriteTimeoutHandler;\n+import io.netty.util.concurrent.Future;\n+import org.apache.logging.log4j.Logger;\n+\n+import org.apache.geode.distributed.internal.DistributionConfig;\n+import org.apache.geode.internal.admin.SSLConfig;\n+import org.apache.geode.internal.inet.LocalHostUtil;\n+import org.apache.geode.internal.net.SSLConfigurationFactory;\n+import org.apache.geode.internal.security.SecurableCommunicationChannel;\n+import org.apache.geode.logging.internal.executors.LoggingThreadFactory;\n+import org.apache.geode.logging.internal.log4j.api.LogService;\n+import org.apache.geode.management.ManagementException;\n+import org.apache.geode.redis.internal.RegionProvider;\n+import org.apache.geode.redis.internal.pubsub.PubSub;\n+\n+public class NettyRedisServer {\n+\n+  /**\n+   * System property name that can be used to set the number of threads to be used by the\n+   * GeodeRedisServer\n+   */\n+  private static final String NUM_THREADS_SYS_PROP_NAME = \"gemfireredis.numthreads\";\n+\n+  private static final int RANDOM_PORT_INDICATOR = 0;\n+\n+  private static final Logger logger = LogService.getLogger();\n+  /**\n+   * Connection timeout in milliseconds\n+   */\n+  private static final int connectTimeoutMillis = 1000;\n+\n+  /**\n+   * The number of threads that will work on handling requests\n+   */\n+  private final int numWorkerThreads;\n+\n+  /**\n+   * The number of threads that will work socket selectors\n+   */\n+  private final int numSelectorThreads;\n+\n+  /**\n+   * whether to use old single thread per connection model for worker group\n+   */\n+  private final boolean singleThreadPerConnection;\n+\n+  private final Supplier<DistributionConfig> configSupplier;\n+  private final RegionProvider regionProvider;\n+  private final PubSub pubsub;\n+  private final Supplier<Boolean> allowUnsupportedSupplier;\n+  private final Runnable shutdownInvoker;\n+\n+\n+  private Channel serverChannel;\n+  private EventLoopGroup bossGroup;\n+  private EventLoopGroup workerGroup;\n+  private EventLoopGroup subscriberGroup;\n+\n+  private final InetAddress bindAddress;\n+  private int serverPort;\n+\n+  public NettyRedisServer(Supplier<DistributionConfig> configSupplier,\n+      RegionProvider regionProvider, PubSub pubsub, Supplier<Boolean> allowUnsupportedSupplier,\n+      Runnable shutdownInvoker, int port, String requestedAddress) {\n+    this.configSupplier = configSupplier;\n+    this.regionProvider = regionProvider;\n+    this.pubsub = pubsub;\n+    this.allowUnsupportedSupplier = allowUnsupportedSupplier;\n+    this.shutdownInvoker = shutdownInvoker;\n+    if (port < RANDOM_PORT_INDICATOR) {\n+      throw new IllegalArgumentException(\"Redis port cannot be less than 0\");\n+    }\n+    serverPort = port;\n+    this.bindAddress = getBindAddress(requestedAddress);\n+    numWorkerThreads = setNumWorkerThreads();\n+    singleThreadPerConnection = numWorkerThreads == 0;\n+    numSelectorThreads = 1;\n+  }\n+\n+\n+  public void start() {\n+    Class<? extends ServerChannel> socketClass = initializeEventLoopGroups();\n+    ServerBootstrap serverBootstrap = new ServerBootstrap();\n+\n+    serverBootstrap.group(bossGroup, workerGroup).channel(socketClass)\n+        .childHandler(createChannelInitializer())\n+        .option(ChannelOption.SO_REUSEADDR, true)\n+        .option(ChannelOption.SO_RCVBUF, getBufferSize())\n+        .childOption(ChannelOption.SO_KEEPALIVE, true)\n+        .childOption(ChannelOption.CONNECT_TIMEOUT_MILLIS, connectTimeoutMillis)\n+        .childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT);\n+\n+    serverChannel = createBoundChannel(serverBootstrap);\n+  }\n+\n+  public void stop() {\n+    ChannelFuture closeFuture = null;\n+    if (serverChannel != null) {\n+      closeFuture = serverChannel.closeFuture();\n+    }\n+    workerGroup.shutdownGracefully();\n+    Future<?> bossFuture = bossGroup.shutdownGracefully();\n+    if (serverChannel != null) {\n+      serverChannel.close();\n+    }\n+    bossFuture.syncUninterruptibly();\n+    if (closeFuture != null) {\n+      closeFuture.syncUninterruptibly();\n+    }\n+  }\n+\n+  public int getPort() {\n+    return serverPort;\n+  }\n+\n+  private ChannelInitializer<SocketChannel> createChannelInitializer() {\n+    String redisPassword = configSupplier.get().getRedisPassword();\n+    final byte[] redisPasswordBytes = Coder.stringToBytes(redisPassword);\n+\n+    return new ChannelInitializer<SocketChannel>() {\n+      @Override\n+      public void initChannel(SocketChannel socketChannel) {\n+        if (logger.isDebugEnabled()) {\n+          logger.debug(\n+              \"GeodeRedisServer-Connection established with \" + socketChannel.remoteAddress());\n+        }\n+        ChannelPipeline pipeline = socketChannel.pipeline();\n+        addSSLIfEnabled(socketChannel, pipeline);\n+        pipeline.addLast(ByteToCommandDecoder.class.getSimpleName(), new ByteToCommandDecoder());\n+        pipeline.addLast(new WriteTimeoutHandler(10));\n+        pipeline.addLast(ExecutionHandlerContext.class.getSimpleName(),\n+            new ExecutionHandlerContext(socketChannel, regionProvider, pubsub, subscriberGroup,\n+                allowUnsupportedSupplier, shutdownInvoker, redisPasswordBytes));\n+      }\n+    };\n+  }\n+\n+  private void addSSLIfEnabled(SocketChannel ch, ChannelPipeline p) {\n+\n+    SSLConfig sslConfigForComponent =\n+        SSLConfigurationFactory.getSSLConfigForComponent(configSupplier.get(),\n+            SecurableCommunicationChannel.SERVER);\n+\n+    if (!sslConfigForComponent.isEnabled()) {\n+      return;\n+    }\n+\n+    SslContext sslContext;\n+    try {\n+      KeyStore ks = KeyStore.getInstance(\"JKS\");\n+      ks.load(new FileInputStream(sslConfigForComponent.getKeystore()),\n+          sslConfigForComponent.getKeystorePassword().toCharArray()/**/);\n+\n+      // Set up key manager factory to use our key store\n+      KeyManagerFactory kmf =\n+          KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+      kmf.init(ks, sslConfigForComponent.getKeystorePassword().toCharArray());\n+\n+      SslContextBuilder sslContextBuilder = SslContextBuilder.forServer(kmf);\n+      sslContext = sslContextBuilder.build();\n+\n+    } catch (KeyStoreException | NoSuchAlgorithmException | UnrecoverableKeyException | IOException\n+        | CertificateException e) {\n+      throw new RuntimeException(e);\n+    }\n+    p.addLast(sslContext.newHandler(ch.alloc()));\n+  }\n+\n+  private Class<? extends ServerChannel> initializeEventLoopGroups() {\n+    ThreadFactory selectorThreadFactory =\n+        new LoggingThreadFactory(\"GeodeRedisServer-SelectorThread-\", false);\n+\n+    ThreadFactory workerThreadFactory =\n+        new LoggingThreadFactory(\"GeodeRedisServer-WorkerThread-\", true);\n+\n+    if (singleThreadPerConnection) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5ODE5Mg=="}, "originalCommit": {"oid": "3eb2b0e65fbcea9d49f518bf2b5bd56609c3e68f"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc3NjcwOQ==", "bodyText": "I added this to the numThreads sys prop story", "url": "https://github.com/apache/geode/pull/5289#discussion_r445776709", "createdAt": "2020-06-25T19:03:25Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/netty/NettyRedisServer.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal.netty;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.UnknownHostException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.function.Supplier;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelOption;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import io.netty.handler.timeout.WriteTimeoutHandler;\n+import io.netty.util.concurrent.Future;\n+import org.apache.logging.log4j.Logger;\n+\n+import org.apache.geode.distributed.internal.DistributionConfig;\n+import org.apache.geode.internal.admin.SSLConfig;\n+import org.apache.geode.internal.inet.LocalHostUtil;\n+import org.apache.geode.internal.net.SSLConfigurationFactory;\n+import org.apache.geode.internal.security.SecurableCommunicationChannel;\n+import org.apache.geode.logging.internal.executors.LoggingThreadFactory;\n+import org.apache.geode.logging.internal.log4j.api.LogService;\n+import org.apache.geode.management.ManagementException;\n+import org.apache.geode.redis.internal.RegionProvider;\n+import org.apache.geode.redis.internal.pubsub.PubSub;\n+\n+public class NettyRedisServer {\n+\n+  /**\n+   * System property name that can be used to set the number of threads to be used by the\n+   * GeodeRedisServer\n+   */\n+  private static final String NUM_THREADS_SYS_PROP_NAME = \"gemfireredis.numthreads\";\n+\n+  private static final int RANDOM_PORT_INDICATOR = 0;\n+\n+  private static final Logger logger = LogService.getLogger();\n+  /**\n+   * Connection timeout in milliseconds\n+   */\n+  private static final int connectTimeoutMillis = 1000;\n+\n+  /**\n+   * The number of threads that will work on handling requests\n+   */\n+  private final int numWorkerThreads;\n+\n+  /**\n+   * The number of threads that will work socket selectors\n+   */\n+  private final int numSelectorThreads;\n+\n+  /**\n+   * whether to use old single thread per connection model for worker group\n+   */\n+  private final boolean singleThreadPerConnection;\n+\n+  private final Supplier<DistributionConfig> configSupplier;\n+  private final RegionProvider regionProvider;\n+  private final PubSub pubsub;\n+  private final Supplier<Boolean> allowUnsupportedSupplier;\n+  private final Runnable shutdownInvoker;\n+\n+\n+  private Channel serverChannel;\n+  private EventLoopGroup bossGroup;\n+  private EventLoopGroup workerGroup;\n+  private EventLoopGroup subscriberGroup;\n+\n+  private final InetAddress bindAddress;\n+  private int serverPort;\n+\n+  public NettyRedisServer(Supplier<DistributionConfig> configSupplier,\n+      RegionProvider regionProvider, PubSub pubsub, Supplier<Boolean> allowUnsupportedSupplier,\n+      Runnable shutdownInvoker, int port, String requestedAddress) {\n+    this.configSupplier = configSupplier;\n+    this.regionProvider = regionProvider;\n+    this.pubsub = pubsub;\n+    this.allowUnsupportedSupplier = allowUnsupportedSupplier;\n+    this.shutdownInvoker = shutdownInvoker;\n+    if (port < RANDOM_PORT_INDICATOR) {\n+      throw new IllegalArgumentException(\"Redis port cannot be less than 0\");\n+    }\n+    serverPort = port;\n+    this.bindAddress = getBindAddress(requestedAddress);\n+    numWorkerThreads = setNumWorkerThreads();\n+    singleThreadPerConnection = numWorkerThreads == 0;\n+    numSelectorThreads = 1;\n+  }\n+\n+\n+  public void start() {\n+    Class<? extends ServerChannel> socketClass = initializeEventLoopGroups();\n+    ServerBootstrap serverBootstrap = new ServerBootstrap();\n+\n+    serverBootstrap.group(bossGroup, workerGroup).channel(socketClass)\n+        .childHandler(createChannelInitializer())\n+        .option(ChannelOption.SO_REUSEADDR, true)\n+        .option(ChannelOption.SO_RCVBUF, getBufferSize())\n+        .childOption(ChannelOption.SO_KEEPALIVE, true)\n+        .childOption(ChannelOption.CONNECT_TIMEOUT_MILLIS, connectTimeoutMillis)\n+        .childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT);\n+\n+    serverChannel = createBoundChannel(serverBootstrap);\n+  }\n+\n+  public void stop() {\n+    ChannelFuture closeFuture = null;\n+    if (serverChannel != null) {\n+      closeFuture = serverChannel.closeFuture();\n+    }\n+    workerGroup.shutdownGracefully();\n+    Future<?> bossFuture = bossGroup.shutdownGracefully();\n+    if (serverChannel != null) {\n+      serverChannel.close();\n+    }\n+    bossFuture.syncUninterruptibly();\n+    if (closeFuture != null) {\n+      closeFuture.syncUninterruptibly();\n+    }\n+  }\n+\n+  public int getPort() {\n+    return serverPort;\n+  }\n+\n+  private ChannelInitializer<SocketChannel> createChannelInitializer() {\n+    String redisPassword = configSupplier.get().getRedisPassword();\n+    final byte[] redisPasswordBytes = Coder.stringToBytes(redisPassword);\n+\n+    return new ChannelInitializer<SocketChannel>() {\n+      @Override\n+      public void initChannel(SocketChannel socketChannel) {\n+        if (logger.isDebugEnabled()) {\n+          logger.debug(\n+              \"GeodeRedisServer-Connection established with \" + socketChannel.remoteAddress());\n+        }\n+        ChannelPipeline pipeline = socketChannel.pipeline();\n+        addSSLIfEnabled(socketChannel, pipeline);\n+        pipeline.addLast(ByteToCommandDecoder.class.getSimpleName(), new ByteToCommandDecoder());\n+        pipeline.addLast(new WriteTimeoutHandler(10));\n+        pipeline.addLast(ExecutionHandlerContext.class.getSimpleName(),\n+            new ExecutionHandlerContext(socketChannel, regionProvider, pubsub, subscriberGroup,\n+                allowUnsupportedSupplier, shutdownInvoker, redisPasswordBytes));\n+      }\n+    };\n+  }\n+\n+  private void addSSLIfEnabled(SocketChannel ch, ChannelPipeline p) {\n+\n+    SSLConfig sslConfigForComponent =\n+        SSLConfigurationFactory.getSSLConfigForComponent(configSupplier.get(),\n+            SecurableCommunicationChannel.SERVER);\n+\n+    if (!sslConfigForComponent.isEnabled()) {\n+      return;\n+    }\n+\n+    SslContext sslContext;\n+    try {\n+      KeyStore ks = KeyStore.getInstance(\"JKS\");\n+      ks.load(new FileInputStream(sslConfigForComponent.getKeystore()),\n+          sslConfigForComponent.getKeystorePassword().toCharArray()/**/);\n+\n+      // Set up key manager factory to use our key store\n+      KeyManagerFactory kmf =\n+          KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+      kmf.init(ks, sslConfigForComponent.getKeystorePassword().toCharArray());\n+\n+      SslContextBuilder sslContextBuilder = SslContextBuilder.forServer(kmf);\n+      sslContext = sslContextBuilder.build();\n+\n+    } catch (KeyStoreException | NoSuchAlgorithmException | UnrecoverableKeyException | IOException\n+        | CertificateException e) {\n+      throw new RuntimeException(e);\n+    }\n+    p.addLast(sslContext.newHandler(ch.alloc()));\n+  }\n+\n+  private Class<? extends ServerChannel> initializeEventLoopGroups() {\n+    ThreadFactory selectorThreadFactory =\n+        new LoggingThreadFactory(\"GeodeRedisServer-SelectorThread-\", false);\n+\n+    ThreadFactory workerThreadFactory =\n+        new LoggingThreadFactory(\"GeodeRedisServer-WorkerThread-\", true);\n+\n+    if (singleThreadPerConnection) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5ODE5Mg=="}, "originalCommit": {"oid": "3eb2b0e65fbcea9d49f518bf2b5bd56609c3e68f"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc3NjgyNg==", "bodyText": "Sounds good.", "url": "https://github.com/apache/geode/pull/5289#discussion_r445776826", "createdAt": "2020-06-25T19:03:39Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/netty/NettyRedisServer.java", "diffHunk": "@@ -0,0 +1,317 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal.netty;\n+\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.UnknownHostException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.UnrecoverableKeyException;\n+import java.security.cert.CertificateException;\n+import java.util.concurrent.ThreadFactory;\n+import java.util.function.Supplier;\n+\n+import javax.net.ssl.KeyManagerFactory;\n+\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelOption;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import io.netty.handler.timeout.WriteTimeoutHandler;\n+import io.netty.util.concurrent.Future;\n+import org.apache.logging.log4j.Logger;\n+\n+import org.apache.geode.distributed.internal.DistributionConfig;\n+import org.apache.geode.internal.admin.SSLConfig;\n+import org.apache.geode.internal.inet.LocalHostUtil;\n+import org.apache.geode.internal.net.SSLConfigurationFactory;\n+import org.apache.geode.internal.security.SecurableCommunicationChannel;\n+import org.apache.geode.logging.internal.executors.LoggingThreadFactory;\n+import org.apache.geode.logging.internal.log4j.api.LogService;\n+import org.apache.geode.management.ManagementException;\n+import org.apache.geode.redis.internal.RegionProvider;\n+import org.apache.geode.redis.internal.pubsub.PubSub;\n+\n+public class NettyRedisServer {\n+\n+  /**\n+   * System property name that can be used to set the number of threads to be used by the\n+   * GeodeRedisServer\n+   */\n+  private static final String NUM_THREADS_SYS_PROP_NAME = \"gemfireredis.numthreads\";\n+\n+  private static final int RANDOM_PORT_INDICATOR = 0;\n+\n+  private static final Logger logger = LogService.getLogger();\n+  /**\n+   * Connection timeout in milliseconds\n+   */\n+  private static final int connectTimeoutMillis = 1000;\n+\n+  /**\n+   * The number of threads that will work on handling requests\n+   */\n+  private final int numWorkerThreads;\n+\n+  /**\n+   * The number of threads that will work socket selectors\n+   */\n+  private final int numSelectorThreads;\n+\n+  /**\n+   * whether to use old single thread per connection model for worker group\n+   */\n+  private final boolean singleThreadPerConnection;\n+\n+  private final Supplier<DistributionConfig> configSupplier;\n+  private final RegionProvider regionProvider;\n+  private final PubSub pubsub;\n+  private final Supplier<Boolean> allowUnsupportedSupplier;\n+  private final Runnable shutdownInvoker;\n+\n+\n+  private Channel serverChannel;\n+  private EventLoopGroup bossGroup;\n+  private EventLoopGroup workerGroup;\n+  private EventLoopGroup subscriberGroup;\n+\n+  private final InetAddress bindAddress;\n+  private int serverPort;\n+\n+  public NettyRedisServer(Supplier<DistributionConfig> configSupplier,\n+      RegionProvider regionProvider, PubSub pubsub, Supplier<Boolean> allowUnsupportedSupplier,\n+      Runnable shutdownInvoker, int port, String requestedAddress) {\n+    this.configSupplier = configSupplier;\n+    this.regionProvider = regionProvider;\n+    this.pubsub = pubsub;\n+    this.allowUnsupportedSupplier = allowUnsupportedSupplier;\n+    this.shutdownInvoker = shutdownInvoker;\n+    if (port < RANDOM_PORT_INDICATOR) {\n+      throw new IllegalArgumentException(\"Redis port cannot be less than 0\");\n+    }\n+    serverPort = port;\n+    this.bindAddress = getBindAddress(requestedAddress);\n+    numWorkerThreads = setNumWorkerThreads();\n+    singleThreadPerConnection = numWorkerThreads == 0;\n+    numSelectorThreads = 1;\n+  }\n+\n+\n+  public void start() {\n+    Class<? extends ServerChannel> socketClass = initializeEventLoopGroups();\n+    ServerBootstrap serverBootstrap = new ServerBootstrap();\n+\n+    serverBootstrap.group(bossGroup, workerGroup).channel(socketClass)\n+        .childHandler(createChannelInitializer())\n+        .option(ChannelOption.SO_REUSEADDR, true)\n+        .option(ChannelOption.SO_RCVBUF, getBufferSize())\n+        .childOption(ChannelOption.SO_KEEPALIVE, true)\n+        .childOption(ChannelOption.CONNECT_TIMEOUT_MILLIS, connectTimeoutMillis)\n+        .childOption(ChannelOption.ALLOCATOR, PooledByteBufAllocator.DEFAULT);\n+\n+    serverChannel = createBoundChannel(serverBootstrap);\n+  }\n+\n+  public void stop() {\n+    ChannelFuture closeFuture = null;\n+    if (serverChannel != null) {\n+      closeFuture = serverChannel.closeFuture();\n+    }\n+    workerGroup.shutdownGracefully();\n+    Future<?> bossFuture = bossGroup.shutdownGracefully();\n+    if (serverChannel != null) {\n+      serverChannel.close();\n+    }\n+    bossFuture.syncUninterruptibly();\n+    if (closeFuture != null) {\n+      closeFuture.syncUninterruptibly();\n+    }\n+  }\n+\n+  public int getPort() {\n+    return serverPort;\n+  }\n+\n+  private ChannelInitializer<SocketChannel> createChannelInitializer() {\n+    String redisPassword = configSupplier.get().getRedisPassword();\n+    final byte[] redisPasswordBytes = Coder.stringToBytes(redisPassword);\n+\n+    return new ChannelInitializer<SocketChannel>() {\n+      @Override\n+      public void initChannel(SocketChannel socketChannel) {\n+        if (logger.isDebugEnabled()) {\n+          logger.debug(\n+              \"GeodeRedisServer-Connection established with \" + socketChannel.remoteAddress());\n+        }\n+        ChannelPipeline pipeline = socketChannel.pipeline();\n+        addSSLIfEnabled(socketChannel, pipeline);\n+        pipeline.addLast(ByteToCommandDecoder.class.getSimpleName(), new ByteToCommandDecoder());\n+        pipeline.addLast(new WriteTimeoutHandler(10));\n+        pipeline.addLast(ExecutionHandlerContext.class.getSimpleName(),\n+            new ExecutionHandlerContext(socketChannel, regionProvider, pubsub, subscriberGroup,\n+                allowUnsupportedSupplier, shutdownInvoker, redisPasswordBytes));\n+      }\n+    };\n+  }\n+\n+  private void addSSLIfEnabled(SocketChannel ch, ChannelPipeline p) {\n+\n+    SSLConfig sslConfigForComponent =\n+        SSLConfigurationFactory.getSSLConfigForComponent(configSupplier.get(),\n+            SecurableCommunicationChannel.SERVER);\n+\n+    if (!sslConfigForComponent.isEnabled()) {\n+      return;\n+    }\n+\n+    SslContext sslContext;\n+    try {\n+      KeyStore ks = KeyStore.getInstance(\"JKS\");\n+      ks.load(new FileInputStream(sslConfigForComponent.getKeystore()),\n+          sslConfigForComponent.getKeystorePassword().toCharArray()/**/);\n+\n+      // Set up key manager factory to use our key store\n+      KeyManagerFactory kmf =\n+          KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());\n+      kmf.init(ks, sslConfigForComponent.getKeystorePassword().toCharArray());\n+\n+      SslContextBuilder sslContextBuilder = SslContextBuilder.forServer(kmf);\n+      sslContext = sslContextBuilder.build();\n+\n+    } catch (KeyStoreException | NoSuchAlgorithmException | UnrecoverableKeyException | IOException\n+        | CertificateException e) {\n+      throw new RuntimeException(e);\n+    }\n+    p.addLast(sslContext.newHandler(ch.alloc()));\n+  }\n+\n+  private Class<? extends ServerChannel> initializeEventLoopGroups() {\n+    ThreadFactory selectorThreadFactory =\n+        new LoggingThreadFactory(\"GeodeRedisServer-SelectorThread-\", false);\n+\n+    ThreadFactory workerThreadFactory =\n+        new LoggingThreadFactory(\"GeodeRedisServer-WorkerThread-\", true);\n+\n+    if (singleThreadPerConnection) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTE5ODE5Mg=="}, "originalCommit": {"oid": "3eb2b0e65fbcea9d49f518bf2b5bd56609c3e68f"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NjM2MzIwOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/GeodeRedisService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNDowMjoxM1rOGo8LZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNTo0Mzo1N1rOGpArUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4MjE4MA==", "bodyText": "Since you're working on this, could you move the log message after the start so that we log the actual port used in the event that it is started on an ephemeral port. (Otherwise it just says Starting... on port 0).", "url": "https://github.com/apache/geode/pull/5289#discussion_r445582180", "createdAt": "2020-06-25T14:02:13Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/GeodeRedisService.java", "diffHunk": "@@ -77,7 +78,7 @@ private void startRedisServer(InternalCache cache) {\n           String.format(\"Starting GeodeRedisServer on bind address %s on port %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b1827f612ae61b908f7f4f4098c691fafd96f6f9"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY1NTg5MA==", "bodyText": "We currently have two log messages. One says \"starting\" and shows the requested configuration. The other says \"started\" and show the actual host and port. It seems like both are worth having. Does that resolve this conversation?", "url": "https://github.com/apache/geode/pull/5289#discussion_r445655890", "createdAt": "2020-06-25T15:43:57Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/GeodeRedisService.java", "diffHunk": "@@ -77,7 +78,7 @@ private void startRedisServer(InternalCache cache) {\n           String.format(\"Starting GeodeRedisServer on bind address %s on port %s\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU4MjE4MA=="}, "originalCommit": {"oid": "b1827f612ae61b908f7f4f4098c691fafd96f6f9"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3866, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}