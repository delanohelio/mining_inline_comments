{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MzcwMjAz", "number": 4774, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjozMTo0NVrODlflWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTozMToyN1rODnQleQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjQxMzcxOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/RenameTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjozMTo0NVrOFyaxFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToxMDowMlrOFygUcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxMTY2OQ==", "bodyText": "Please don't use single (or double) character variable names", "url": "https://github.com/apache/geode/pull/4774#discussion_r388411669", "createdAt": "2020-03-05T16:31:45Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/RenameTest.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;\n+import static org.apache.geode.distributed.ConfigurationProperties.LOG_LEVEL;\n+import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.util.HashSet;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.GemFireCache;\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.management.internal.cli.util.ThreePhraseGenerator;\n+import org.apache.geode.test.junit.categories.RedisTest;\n+\n+@Category({RedisTest.class})\n+public class RenameTest {\n+  private static GeodeRedisServer server;\n+  private static GemFireCache cache;\n+  private static Random rand;\n+  private static Jedis client;\n+  private static int port = 6379;\n+  private static ThreePhraseGenerator generator = new ThreePhraseGenerator();\n+\n+  @BeforeClass\n+  public static void setUp() {\n+    rand = new Random();\n+    CacheFactory cf = new CacheFactory();\n+    cf.set(LOG_LEVEL, \"info\");\n+    cf.set(MCAST_PORT, \"0\");\n+    cf.set(LOCATORS, \"\");\n+    cache = cf.create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77a694cccd83785d478718824e6040cc31948f48"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwMjY0MA==", "bodyText": "done. thx", "url": "https://github.com/apache/geode/pull/4774#discussion_r388502640", "createdAt": "2020-03-05T19:10:02Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/RenameTest.java", "diffHunk": "@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;\n+import static org.apache.geode.distributed.ConfigurationProperties.LOG_LEVEL;\n+import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.util.HashSet;\n+import java.util.Random;\n+import java.util.Set;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.GemFireCache;\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.management.internal.cli.util.ThreePhraseGenerator;\n+import org.apache.geode.test.junit.categories.RedisTest;\n+\n+@Category({RedisTest.class})\n+public class RenameTest {\n+  private static GeodeRedisServer server;\n+  private static GemFireCache cache;\n+  private static Random rand;\n+  private static Jedis client;\n+  private static int port = 6379;\n+  private static ThreePhraseGenerator generator = new ThreePhraseGenerator();\n+\n+  @BeforeClass\n+  public static void setUp() {\n+    rand = new Random();\n+    CacheFactory cf = new CacheFactory();\n+    cf.set(LOG_LEVEL, \"info\");\n+    cf.set(MCAST_PORT, \"0\");\n+    cf.set(LOCATORS, \"\");\n+    cache = cf.create();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxMTY2OQ=="}, "originalCommit": {"oid": "77a694cccd83785d478718824e6040cc31948f48"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjQxODQwOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/ExecutionHandlerContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjozMzowMlrOFya0Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToxMDowNlrOFygUiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxMjQ4Mg==", "bodyText": "what is pwd?", "url": "https://github.com/apache/geode/pull/4774#discussion_r388412482", "createdAt": "2020-03-05T16:33:02Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/ExecutionHandlerContext.java", "diffHunk": "@@ -101,13 +100,10 @@ public PubSub getPubSub() {\n    * @param pwd Authentication password for each context, can be null\n    */\n   public ExecutionHandlerContext(Channel ch, Cache cache, RegionProvider regionProvider,\n-      GeodeRedisServer server, byte[] pwd, KeyRegistrar keyRegistrar,\n-      PubSub pubSub,\n-      RedisLockService hashLockService,\n-      RedisLockService setLockService) {\n+      GeodeRedisServer server, byte[] pwd, KeyRegistrar keyRegistrar, PubSub pubSub,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77a694cccd83785d478718824e6040cc31948f48"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwMjY2Nw==", "bodyText": "done. thx", "url": "https://github.com/apache/geode/pull/4774#discussion_r388502667", "createdAt": "2020-03-05T19:10:06Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/ExecutionHandlerContext.java", "diffHunk": "@@ -101,13 +100,10 @@ public PubSub getPubSub() {\n    * @param pwd Authentication password for each context, can be null\n    */\n   public ExecutionHandlerContext(Channel ch, Cache cache, RegionProvider regionProvider,\n-      GeodeRedisServer server, byte[] pwd, KeyRegistrar keyRegistrar,\n-      PubSub pubSub,\n-      RedisLockService hashLockService,\n-      RedisLockService setLockService) {\n+      GeodeRedisServer server, byte[] pwd, KeyRegistrar keyRegistrar, PubSub pubSub,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxMjQ4Mg=="}, "originalCommit": {"oid": "77a694cccd83785d478718824e6040cc31948f48"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjQyMzU3OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/ExecutionHandlerContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjozNDoyNVrOFya3og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxOToxMDoxM1rOFygUsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxMzM0Ng==", "bodyText": "ch is bad parameter/variable name. Please correct to something a little more descriptive. Like channel... makes it easier to read when one gets past 15 lines of code where it was initially defined", "url": "https://github.com/apache/geode/pull/4774#discussion_r388413346", "createdAt": "2020-03-05T16:34:25Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/ExecutionHandlerContext.java", "diffHunk": "@@ -101,13 +100,10 @@ public PubSub getPubSub() {\n    * @param pwd Authentication password for each context, can be null\n    */\n   public ExecutionHandlerContext(Channel ch, Cache cache, RegionProvider regionProvider,\n-      GeodeRedisServer server, byte[] pwd, KeyRegistrar keyRegistrar,\n-      PubSub pubSub,\n-      RedisLockService hashLockService,\n-      RedisLockService setLockService) {\n+      GeodeRedisServer server, byte[] pwd, KeyRegistrar keyRegistrar, PubSub pubSub,\n+      RedisLockService lockService) {\n     this.keyRegistrar = keyRegistrar;\n-    this.hashLockService = hashLockService;\n-    this.setLockService = setLockService;\n+    this.lockService = lockService;\n     this.pubSub = pubSub;\n     if (ch == null || cache == null || regionProvider == null || server == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77a694cccd83785d478718824e6040cc31948f48"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODUwMjcwNA==", "bodyText": "done. thx", "url": "https://github.com/apache/geode/pull/4774#discussion_r388502704", "createdAt": "2020-03-05T19:10:13Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/ExecutionHandlerContext.java", "diffHunk": "@@ -101,13 +100,10 @@ public PubSub getPubSub() {\n    * @param pwd Authentication password for each context, can be null\n    */\n   public ExecutionHandlerContext(Channel ch, Cache cache, RegionProvider regionProvider,\n-      GeodeRedisServer server, byte[] pwd, KeyRegistrar keyRegistrar,\n-      PubSub pubSub,\n-      RedisLockService hashLockService,\n-      RedisLockService setLockService) {\n+      GeodeRedisServer server, byte[] pwd, KeyRegistrar keyRegistrar, PubSub pubSub,\n+      RedisLockService lockService) {\n     this.keyRegistrar = keyRegistrar;\n-    this.hashLockService = hashLockService;\n-    this.setLockService = setLockService;\n+    this.lockService = lockService;\n     this.pubSub = pubSub;\n     if (ch == null || cache == null || regionProvider == null || server == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxMzM0Ng=="}, "originalCommit": {"oid": "77a694cccd83785d478718824e6040cc31948f48"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNDkyNzkzOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/string/GetExecutor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTozMToyN1rOF1J1iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQyMTozMToyN1rOF1J1iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTI4MDAwOQ==", "bodyText": "r?", "url": "https://github.com/apache/geode/pull/4774#discussion_r391280009", "createdAt": "2020-03-11T21:31:27Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/string/GetExecutor.java", "diffHunk": "@@ -36,6 +35,8 @@ public void executeCommand(Command command, ExecutionHandlerContext context) {\n \n     ByteArrayWrapper key = command.getKey();\n     checkDataType(key, RedisDataType.REDIS_STRING, context);\n+\n+    Region<ByteArrayWrapper, ByteArrayWrapper> r = context.getRegionProvider().getStringsRegion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40d91e71af4108250988e8171f093c7904a9355f"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4491, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}