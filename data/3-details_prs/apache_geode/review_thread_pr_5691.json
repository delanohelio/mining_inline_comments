{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNjU2NDAw", "number": 5691, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjozMTowMlrOEz3jZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTozMDoxM1rOE0hUiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODIzMDEzOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/LocalRegion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjozMTowMlrOHrWzlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjozMTowMlrOHrWzlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyNDQ2OQ==", "bodyText": "This method might be better named \"isInTokenModeNeeded.\" This will also require that test names in LocalRegionTest be changed.", "url": "https://github.com/apache/geode/pull/5691#discussion_r515224469", "createdAt": "2020-10-30T16:31:02Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/LocalRegion.java", "diffHunk": "@@ -6847,6 +6847,10 @@ public void txApplyDestroy(Object key, TransactionId rmtOrigin, TXRmtEvent event\n     }\n   }\n \n+  boolean isNeedInTokenMode(boolean needTokensForGII, boolean needRIDestroyToken) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c1dc7d4d7b0a17830d694308d1aab2fc4f5d43"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODI3ODExOnYy", "diffSide": "RIGHT", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/LocalRegionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjo0Mzo1NFrOHrXRZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMDowMDoxNFrOHreUvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMjEwMg==", "bodyText": "This test name seems not to match with what the test is doing. The call to isNeedInTokenMode() has needTokensForGII as true and needRIDestroyToken as false, but the name seems to imply that needRIDestroyToken is true.\nAlso, would it be worth adding a test for the case where needTokensForGII is false and needRIDestroyToken is true, for completeness?", "url": "https://github.com/apache/geode/pull/5691#discussion_r515232102", "createdAt": "2020-10-30T16:43:54Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/LocalRegionTest.java", "diffHunk": "@@ -277,4 +277,35 @@ public void generateLocalFilterRoutingIsNotNeededIfChangeNotAppliedToCacheYet()\n \n     assertThat(region.isGenerateLocalFilterRoutingNeeded(event)).isFalse();\n   }\n+\n+  @Test\n+  public void isNeedInTokenModeReturnsFalseIfConcurrencyChecksEnabled() {\n+    LocalRegion region =\n+        spy(new LocalRegion(\"region\", regionAttributes, null, cache, internalRegionArguments,\n+            internalDataView, regionMapConstructor, serverRegionProxyConstructor, entryEventFactory,\n+            poolFinder, regionPerfStatsFactory, disabledClock()));\n+    doReturn(true).when(region).getConcurrencyChecksEnabled();\n+\n+    assertThat(region.isNeedInTokenMode(true, true)).isFalse();\n+  }\n+\n+  @Test\n+  public void isNeedInTokenModeReturnsFalseIfBothNeedTokensForGIIAndNeedRIDestroyTokenAreFalse() {\n+    LocalRegion region =\n+        spy(new LocalRegion(\"region\", regionAttributes, null, cache, internalRegionArguments,\n+            internalDataView, regionMapConstructor, serverRegionProxyConstructor, entryEventFactory,\n+            poolFinder, regionPerfStatsFactory, disabledClock()));\n+\n+    assertThat(region.isNeedInTokenMode(false, false)).isFalse();\n+  }\n+\n+  @Test\n+  public void isNeedInTokenModeReturnsTrueIfConcurrencyChecksNotEnabledAndNeedDestroyToken() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c1dc7d4d7b0a17830d694308d1aab2fc4f5d43"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTM0NzY0NA==", "bodyText": "Actually both setting is used to determine if Destroyed token is needed. But you are right, it is a little confusing. I have changed the test name and added another test case.", "url": "https://github.com/apache/geode/pull/5691#discussion_r515347644", "createdAt": "2020-10-30T20:00:14Z", "author": {"login": "pivotal-eshu"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/LocalRegionTest.java", "diffHunk": "@@ -277,4 +277,35 @@ public void generateLocalFilterRoutingIsNotNeededIfChangeNotAppliedToCacheYet()\n \n     assertThat(region.isGenerateLocalFilterRoutingNeeded(event)).isFalse();\n   }\n+\n+  @Test\n+  public void isNeedInTokenModeReturnsFalseIfConcurrencyChecksEnabled() {\n+    LocalRegion region =\n+        spy(new LocalRegion(\"region\", regionAttributes, null, cache, internalRegionArguments,\n+            internalDataView, regionMapConstructor, serverRegionProxyConstructor, entryEventFactory,\n+            poolFinder, regionPerfStatsFactory, disabledClock()));\n+    doReturn(true).when(region).getConcurrencyChecksEnabled();\n+\n+    assertThat(region.isNeedInTokenMode(true, true)).isFalse();\n+  }\n+\n+  @Test\n+  public void isNeedInTokenModeReturnsFalseIfBothNeedTokensForGIIAndNeedRIDestroyTokenAreFalse() {\n+    LocalRegion region =\n+        spy(new LocalRegion(\"region\", regionAttributes, null, cache, internalRegionArguments,\n+            internalDataView, regionMapConstructor, serverRegionProxyConstructor, entryEventFactory,\n+            poolFinder, regionPerfStatsFactory, disabledClock()));\n+\n+    assertThat(region.isNeedInTokenMode(false, false)).isFalse();\n+  }\n+\n+  @Test\n+  public void isNeedInTokenModeReturnsTrueIfConcurrencyChecksNotEnabledAndNeedDestroyToken() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMjEwMg=="}, "originalCommit": {"oid": "f6c1dc7d4d7b0a17830d694308d1aab2fc4f5d43"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTQ4ODc3OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzoyODozM1rOHri5rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzoyODozM1rOHri5rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMjYzNg==", "bodyText": "Can this not be a ConcurrentLinkedQueue or possibly use Collections.synchronizedList()?", "url": "https://github.com/apache/geode/pull/5691#discussion_r515422636", "createdAt": "2020-10-30T23:28:33Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "diffHunk": "@@ -2834,4 +2778,180 @@ public void close() {\n       closed = true;\n     }\n   }\n+\n+  private String regionName = \"region\";\n+  private int numOfEntry = 2500;\n+  private int totalNumberOfBuckets = 31;\n+  private final ArrayList<Integer> list = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813"}, "originalPosition": 284}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTQ5MzA0OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzozMTo0NlrOHri8KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzozMTo0NlrOHri8KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMzI3Mw==", "bodyText": "This synchronization block should be replaced with a collection that handles concurrency, like ConcurrencyLinkedQueue or Collections.synchronizedList()", "url": "https://github.com/apache/geode/pull/5691#discussion_r515423273", "createdAt": "2020-10-30T23:31:46Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "diffHunk": "@@ -2834,4 +2778,180 @@ public void close() {\n       closed = true;\n     }\n   }\n+\n+  private String regionName = \"region\";\n+  private int numOfEntry = 2500;\n+  private int totalNumberOfBuckets = 31;\n+  private final ArrayList<Integer> list = new ArrayList<>();\n+\n+  @Test\n+  public void correctVersionGeneratedForConcurrentOperationsInTxWithRebalance() throws Exception {\n+    toSetBucketNumber = true;\n+    vm0.invoke(() -> createPartitionedRegion(regionName, 0));\n+    vm0.invoke(() -> doPut(\"A\"));\n+    vm0.invoke(this::doDestroy);\n+    vm0.invoke(() -> doPut(\"B\"));\n+\n+    vm1.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"C\");\n+    validateVersionsInVms(vm0, vm1);\n+\n+    vm2.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"D\");\n+    validateVersionsInVms(vm0, vm1, vm2);\n+\n+    vm3.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"E\");\n+    validateVersionsInVms(vm0, vm1, vm2, vm3);\n+  }\n+\n+  private void doConcurrentOpsAndRebalance(String s) throws Exception {\n+    AsyncInvocation async0 = vm0.invokeAsync(this::doConcurrentDestroyInTx);\n+    AsyncInvocation async1 = vm1.invokeAsync(() -> doConcurrentPutInTx(s));\n+    vm0.invoke(() -> doRebalance());\n+    async0.await();\n+    async1.await();\n+  }\n+\n+  private void doRebalance() throws TimeoutException, InterruptedException {\n+    InternalResourceManager manager = getCache().getInternalResourceManager();\n+    doRebalance(false, manager);\n+  }\n+\n+  private void doConcurrentPutInTx(String s) throws Exception {\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      synchronized (list) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813"}, "originalPosition": 322}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTQ5NzAzOnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzozNTowMlrOHri-WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMVQwMDowMTozN1rOHrjQ0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMzgzMg==", "bodyText": "All of this can be replaced with an ExecutorService", "url": "https://github.com/apache/geode/pull/5691#discussion_r515423832", "createdAt": "2020-10-30T23:35:02Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "diffHunk": "@@ -2834,4 +2778,180 @@ public void close() {\n       closed = true;\n     }\n   }\n+\n+  private String regionName = \"region\";\n+  private int numOfEntry = 2500;\n+  private int totalNumberOfBuckets = 31;\n+  private final ArrayList<Integer> list = new ArrayList<>();\n+\n+  @Test\n+  public void correctVersionGeneratedForConcurrentOperationsInTxWithRebalance() throws Exception {\n+    toSetBucketNumber = true;\n+    vm0.invoke(() -> createPartitionedRegion(regionName, 0));\n+    vm0.invoke(() -> doPut(\"A\"));\n+    vm0.invoke(this::doDestroy);\n+    vm0.invoke(() -> doPut(\"B\"));\n+\n+    vm1.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"C\");\n+    validateVersionsInVms(vm0, vm1);\n+\n+    vm2.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"D\");\n+    validateVersionsInVms(vm0, vm1, vm2);\n+\n+    vm3.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"E\");\n+    validateVersionsInVms(vm0, vm1, vm2, vm3);\n+  }\n+\n+  private void doConcurrentOpsAndRebalance(String s) throws Exception {\n+    AsyncInvocation async0 = vm0.invokeAsync(this::doConcurrentDestroyInTx);\n+    AsyncInvocation async1 = vm1.invokeAsync(() -> doConcurrentPutInTx(s));\n+    vm0.invoke(() -> doRebalance());\n+    async0.await();\n+    async1.await();\n+  }\n+\n+  private void doRebalance() throws TimeoutException, InterruptedException {\n+    InternalResourceManager manager = getCache().getInternalResourceManager();\n+    doRebalance(false, manager);\n+  }\n+\n+  private void doConcurrentPutInTx(String s) throws Exception {\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      synchronized (list) {\n+        list.add(i);\n+      }\n+    }\n+\n+    Thread[] threads = new Thread[totalNumberOfBuckets];\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i] = new Thread(() -> doPutOpInTx(s));\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].start();\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].join();\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813"}, "originalPosition": 339}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyNTYxNA==", "bodyText": "Can ExecutorService be used in a server vm? I tried using the ExecutorService but was failed as the rule not applied in a server vm.", "url": "https://github.com/apache/geode/pull/5691#discussion_r515425614", "createdAt": "2020-10-30T23:44:33Z", "author": {"login": "pivotal-eshu"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "diffHunk": "@@ -2834,4 +2778,180 @@ public void close() {\n       closed = true;\n     }\n   }\n+\n+  private String regionName = \"region\";\n+  private int numOfEntry = 2500;\n+  private int totalNumberOfBuckets = 31;\n+  private final ArrayList<Integer> list = new ArrayList<>();\n+\n+  @Test\n+  public void correctVersionGeneratedForConcurrentOperationsInTxWithRebalance() throws Exception {\n+    toSetBucketNumber = true;\n+    vm0.invoke(() -> createPartitionedRegion(regionName, 0));\n+    vm0.invoke(() -> doPut(\"A\"));\n+    vm0.invoke(this::doDestroy);\n+    vm0.invoke(() -> doPut(\"B\"));\n+\n+    vm1.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"C\");\n+    validateVersionsInVms(vm0, vm1);\n+\n+    vm2.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"D\");\n+    validateVersionsInVms(vm0, vm1, vm2);\n+\n+    vm3.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"E\");\n+    validateVersionsInVms(vm0, vm1, vm2, vm3);\n+  }\n+\n+  private void doConcurrentOpsAndRebalance(String s) throws Exception {\n+    AsyncInvocation async0 = vm0.invokeAsync(this::doConcurrentDestroyInTx);\n+    AsyncInvocation async1 = vm1.invokeAsync(() -> doConcurrentPutInTx(s));\n+    vm0.invoke(() -> doRebalance());\n+    async0.await();\n+    async1.await();\n+  }\n+\n+  private void doRebalance() throws TimeoutException, InterruptedException {\n+    InternalResourceManager manager = getCache().getInternalResourceManager();\n+    doRebalance(false, manager);\n+  }\n+\n+  private void doConcurrentPutInTx(String s) throws Exception {\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      synchronized (list) {\n+        list.add(i);\n+      }\n+    }\n+\n+    Thread[] threads = new Thread[totalNumberOfBuckets];\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i] = new Thread(() -> doPutOpInTx(s));\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].start();\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].join();\n+    }\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMzgzMg=="}, "originalCommit": {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813"}, "originalPosition": 339}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyODU2Mw==", "bodyText": "Never heard of a reason why it should not be able to.", "url": "https://github.com/apache/geode/pull/5691#discussion_r515428563", "createdAt": "2020-10-31T00:01:37Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "diffHunk": "@@ -2834,4 +2778,180 @@ public void close() {\n       closed = true;\n     }\n   }\n+\n+  private String regionName = \"region\";\n+  private int numOfEntry = 2500;\n+  private int totalNumberOfBuckets = 31;\n+  private final ArrayList<Integer> list = new ArrayList<>();\n+\n+  @Test\n+  public void correctVersionGeneratedForConcurrentOperationsInTxWithRebalance() throws Exception {\n+    toSetBucketNumber = true;\n+    vm0.invoke(() -> createPartitionedRegion(regionName, 0));\n+    vm0.invoke(() -> doPut(\"A\"));\n+    vm0.invoke(this::doDestroy);\n+    vm0.invoke(() -> doPut(\"B\"));\n+\n+    vm1.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"C\");\n+    validateVersionsInVms(vm0, vm1);\n+\n+    vm2.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"D\");\n+    validateVersionsInVms(vm0, vm1, vm2);\n+\n+    vm3.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"E\");\n+    validateVersionsInVms(vm0, vm1, vm2, vm3);\n+  }\n+\n+  private void doConcurrentOpsAndRebalance(String s) throws Exception {\n+    AsyncInvocation async0 = vm0.invokeAsync(this::doConcurrentDestroyInTx);\n+    AsyncInvocation async1 = vm1.invokeAsync(() -> doConcurrentPutInTx(s));\n+    vm0.invoke(() -> doRebalance());\n+    async0.await();\n+    async1.await();\n+  }\n+\n+  private void doRebalance() throws TimeoutException, InterruptedException {\n+    InternalResourceManager manager = getCache().getInternalResourceManager();\n+    doRebalance(false, manager);\n+  }\n+\n+  private void doConcurrentPutInTx(String s) throws Exception {\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      synchronized (list) {\n+        list.add(i);\n+      }\n+    }\n+\n+    Thread[] threads = new Thread[totalNumberOfBuckets];\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i] = new Thread(() -> doPutOpInTx(s));\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].start();\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].join();\n+    }\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMzgzMg=="}, "originalCommit": {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813"}, "originalPosition": 339}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTQ5NzQ0OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzozNToxNlrOHri-jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzozNToxNlrOHri-jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMzg4Nw==", "bodyText": "All of this can be replaced with an ExecutorService", "url": "https://github.com/apache/geode/pull/5691#discussion_r515423887", "createdAt": "2020-10-30T23:35:16Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "diffHunk": "@@ -2834,4 +2778,180 @@ public void close() {\n       closed = true;\n     }\n   }\n+\n+  private String regionName = \"region\";\n+  private int numOfEntry = 2500;\n+  private int totalNumberOfBuckets = 31;\n+  private final ArrayList<Integer> list = new ArrayList<>();\n+\n+  @Test\n+  public void correctVersionGeneratedForConcurrentOperationsInTxWithRebalance() throws Exception {\n+    toSetBucketNumber = true;\n+    vm0.invoke(() -> createPartitionedRegion(regionName, 0));\n+    vm0.invoke(() -> doPut(\"A\"));\n+    vm0.invoke(this::doDestroy);\n+    vm0.invoke(() -> doPut(\"B\"));\n+\n+    vm1.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"C\");\n+    validateVersionsInVms(vm0, vm1);\n+\n+    vm2.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"D\");\n+    validateVersionsInVms(vm0, vm1, vm2);\n+\n+    vm3.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"E\");\n+    validateVersionsInVms(vm0, vm1, vm2, vm3);\n+  }\n+\n+  private void doConcurrentOpsAndRebalance(String s) throws Exception {\n+    AsyncInvocation async0 = vm0.invokeAsync(this::doConcurrentDestroyInTx);\n+    AsyncInvocation async1 = vm1.invokeAsync(() -> doConcurrentPutInTx(s));\n+    vm0.invoke(() -> doRebalance());\n+    async0.await();\n+    async1.await();\n+  }\n+\n+  private void doRebalance() throws TimeoutException, InterruptedException {\n+    InternalResourceManager manager = getCache().getInternalResourceManager();\n+    doRebalance(false, manager);\n+  }\n+\n+  private void doConcurrentPutInTx(String s) throws Exception {\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      synchronized (list) {\n+        list.add(i);\n+      }\n+    }\n+\n+    Thread[] threads = new Thread[totalNumberOfBuckets];\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i] = new Thread(() -> doPutOpInTx(s));\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].start();\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].join();\n+    }\n+  }\n+\n+  private void doConcurrentDestroyInTx() throws Exception {\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      synchronized (list) {\n+        list.add(i);\n+      }\n+    }\n+\n+    Thread[] threads = new Thread[totalNumberOfBuckets];\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i] = new Thread(this::doDestroyOpInTx);\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].start();\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].join();\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813"}, "originalPosition": 360}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTQ5NzY4OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzozNTozM1rOHri-uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzozNTozM1rOHri-uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMzkyOQ==", "bodyText": "Can this not be a ConcurrentLinkedQueue or possibly use Collections.synchronizedList()?", "url": "https://github.com/apache/geode/pull/5691#discussion_r515423929", "createdAt": "2020-10-30T23:35:33Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "diffHunk": "@@ -2834,4 +2778,180 @@ public void close() {\n       closed = true;\n     }\n   }\n+\n+  private String regionName = \"region\";\n+  private int numOfEntry = 2500;\n+  private int totalNumberOfBuckets = 31;\n+  private final ArrayList<Integer> list = new ArrayList<>();\n+\n+  @Test\n+  public void correctVersionGeneratedForConcurrentOperationsInTxWithRebalance() throws Exception {\n+    toSetBucketNumber = true;\n+    vm0.invoke(() -> createPartitionedRegion(regionName, 0));\n+    vm0.invoke(() -> doPut(\"A\"));\n+    vm0.invoke(this::doDestroy);\n+    vm0.invoke(() -> doPut(\"B\"));\n+\n+    vm1.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"C\");\n+    validateVersionsInVms(vm0, vm1);\n+\n+    vm2.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"D\");\n+    validateVersionsInVms(vm0, vm1, vm2);\n+\n+    vm3.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"E\");\n+    validateVersionsInVms(vm0, vm1, vm2, vm3);\n+  }\n+\n+  private void doConcurrentOpsAndRebalance(String s) throws Exception {\n+    AsyncInvocation async0 = vm0.invokeAsync(this::doConcurrentDestroyInTx);\n+    AsyncInvocation async1 = vm1.invokeAsync(() -> doConcurrentPutInTx(s));\n+    vm0.invoke(() -> doRebalance());\n+    async0.await();\n+    async1.await();\n+  }\n+\n+  private void doRebalance() throws TimeoutException, InterruptedException {\n+    InternalResourceManager manager = getCache().getInternalResourceManager();\n+    doRebalance(false, manager);\n+  }\n+\n+  private void doConcurrentPutInTx(String s) throws Exception {\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      synchronized (list) {\n+        list.add(i);\n+      }\n+    }\n+\n+    Thread[] threads = new Thread[totalNumberOfBuckets];\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i] = new Thread(() -> doPutOpInTx(s));\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].start();\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].join();\n+    }\n+  }\n+\n+  private void doConcurrentDestroyInTx() throws Exception {\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      synchronized (list) {\n+        list.add(i);\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813"}, "originalPosition": 346}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyOTUwNTUwOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/LocalRegion.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzo0MTozOFrOHrjDLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzo0MTozOFrOHrjDLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyNTA3MQ==", "bodyText": "Small change, but can you swap the check around? First evaluate the ConcurrencyCheck. As this check has a greater chance to short circuit the conditional sooner.", "url": "https://github.com/apache/geode/pull/5691#discussion_r515425071", "createdAt": "2020-10-30T23:41:38Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/LocalRegion.java", "diffHunk": "@@ -6847,6 +6847,10 @@ public void txApplyDestroy(Object key, TransactionId rmtOrigin, TXRmtEvent event\n     }\n   }\n \n+  boolean isInTokenModeNeeded(boolean needTokensForGII, boolean needRIDestroyToken) {\n+    return (needTokensForGII || needRIDestroyToken) && !getConcurrencyChecksEnabled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTA3MzM3OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTozMDoxM1rOHsSuRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTozMDoxM1rOHsSuRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwNjE0OA==", "bodyText": "I was more thinking in the line of using the invokeAll rather than the single submit. With invokeAll you can create all the operations up front and then invoke all of them at the same time.\nAre we not concerned that if we do it this way, that there is a possibility that the concurrency issue is possibly not ever hit?", "url": "https://github.com/apache/geode/pull/5691#discussion_r516206148", "createdAt": "2020-11-02T19:30:13Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "diffHunk": "@@ -2820,68 +2823,58 @@ private void doRebalance() throws TimeoutException, InterruptedException {\n \n   private void doConcurrentPutInTx(String s) throws Exception {\n     for (int i = 0; i < totalNumberOfBuckets; i++) {\n-      synchronized (list) {\n-        list.add(i);\n-      }\n-    }\n-\n-    Thread[] threads = new Thread[totalNumberOfBuckets];\n-    for (int i = 0; i < totalNumberOfBuckets; i++) {\n-      threads[i] = new Thread(() -> doPutOpInTx(s));\n+      queue.add(i);\n     }\n \n+    ExecutorService pool = Executors.newCachedThreadPool();\n+    Future<?>[] futures = new Future<?>[totalNumberOfBuckets];\n     for (int i = 0; i < totalNumberOfBuckets; i++) {\n-      threads[i].start();\n+      futures[i] = pool.submit(() -> doPutOpInTx(s));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb91d851be4d0d91ed67e4715cbfea815169e2ae"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4611, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}