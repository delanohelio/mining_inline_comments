{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczOTkzMTQy", "number": 4690, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMjoxMjowMFrODfBs6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzozNzo0M1rODfoxwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODYwMzMxOnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/execute/FunctionExecutionDUnit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMjoxMjowMFrOFofq1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMjoxMjowMFrOFofq1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNjIyOA==", "bodyText": "perhaps a more detailed test name describing what the test is trying to test for?", "url": "https://github.com/apache/geode/pull/4690#discussion_r378006228", "createdAt": "2020-02-12T02:12:00Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/execute/FunctionExecutionDUnit.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.execute;\n+\n+import static org.apache.geode.internal.lang.ThrowableUtils.hasCauseType;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionFactory;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.NoAvailableServersException;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.rules.ClientVM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+public class FunctionExecutionDUnit implements Serializable {\n+\n+  public class TestFunction implements Function {\n+\n+    @Override\n+    public void execute(FunctionContext context) {\n+      if (context.getCache().getRegion(\"testRegion\") == null) {\n+        RegionFactory regionFactory = context.getCache().createRegionFactory();\n+        regionFactory.create(\"testRegion\");\n+        context.getResultSender().lastResult(true);\n+      } else {\n+        context.getResultSender().lastResult(false);\n+      }\n+    }\n+\n+    @Override\n+    public String getId() {\n+      return getClass().getSimpleName();\n+    }\n+  }\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Test\n+  public void test() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "606a8ea588487f05f1ed97cfba1e4fed2928b322"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODYwNDc4OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/execute/FunctionExecutionDUnit.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMjoxMzowMVrOFofrug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMjoxMzowMVrOFofrug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNjQ1OA==", "bodyText": "Perhaps use awaitility instead of spinning?", "url": "https://github.com/apache/geode/pull/4690#discussion_r378006458", "createdAt": "2020-02-12T02:13:01Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/execute/FunctionExecutionDUnit.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.execute;\n+\n+import static org.apache.geode.internal.lang.ThrowableUtils.hasCauseType;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionFactory;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.NoAvailableServersException;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.rules.ClientVM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+public class FunctionExecutionDUnit implements Serializable {\n+\n+  public class TestFunction implements Function {\n+\n+    @Override\n+    public void execute(FunctionContext context) {\n+      if (context.getCache().getRegion(\"testRegion\") == null) {\n+        RegionFactory regionFactory = context.getCache().createRegionFactory();\n+        regionFactory.create(\"testRegion\");\n+        context.getResultSender().lastResult(true);\n+      } else {\n+        context.getResultSender().lastResult(false);\n+      }\n+    }\n+\n+    @Override\n+    public String getId() {\n+      return getClass().getSimpleName();\n+    }\n+  }\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Test\n+  public void test() throws Exception {\n+    MemberVM locator = cluster.startLocatorVM(0);\n+    MemberVM server = cluster.startServerVM(1, locator.getPort());\n+    ClientVM client = cluster.startClientVM(2, c -> c.withLocatorConnection(locator.getPort()));\n+\n+    server.invoke(() -> {\n+      Function function = new TestFunction();\n+      FunctionService.registerFunction(function);\n+    });\n+    AsyncInvocation async = client.invokeAsync(() -> {\n+      ClientCache clientCache = ClusterStartupRule.getClientCache();\n+      while (true) {\n+        FunctionService.onServers(clientCache).execute(\"TestFunction\").getResult();\n+      }\n+    });\n+    server.invoke(() -> {\n+      Region region = null;\n+      while (region == null) {\n+        region = ClusterStartupRule.getCache().getRegion(\"testRegion\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "606a8ea588487f05f1ed97cfba1e4fed2928b322"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzODYwNzA0OnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/execute/FunctionExecutionDUnit.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMjoxNDoyNVrOFoftAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQwMjoxNjowM1rOFofucA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNjc4Nw==", "bodyText": "I think there is a chance these asserts don't get called.  I think you'll have to add a throw on line 90-91 so that if the await() doesn't fail, then the test should fail.", "url": "https://github.com/apache/geode/pull/4690#discussion_r378006787", "createdAt": "2020-02-12T02:14:25Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/execute/FunctionExecutionDUnit.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.execute;\n+\n+import static org.apache.geode.internal.lang.ThrowableUtils.hasCauseType;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionFactory;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.NoAvailableServersException;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.rules.ClientVM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+public class FunctionExecutionDUnit implements Serializable {\n+\n+  public class TestFunction implements Function {\n+\n+    @Override\n+    public void execute(FunctionContext context) {\n+      if (context.getCache().getRegion(\"testRegion\") == null) {\n+        RegionFactory regionFactory = context.getCache().createRegionFactory();\n+        regionFactory.create(\"testRegion\");\n+        context.getResultSender().lastResult(true);\n+      } else {\n+        context.getResultSender().lastResult(false);\n+      }\n+    }\n+\n+    @Override\n+    public String getId() {\n+      return getClass().getSimpleName();\n+    }\n+  }\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Test\n+  public void test() throws Exception {\n+    MemberVM locator = cluster.startLocatorVM(0);\n+    MemberVM server = cluster.startServerVM(1, locator.getPort());\n+    ClientVM client = cluster.startClientVM(2, c -> c.withLocatorConnection(locator.getPort()));\n+\n+    server.invoke(() -> {\n+      Function function = new TestFunction();\n+      FunctionService.registerFunction(function);\n+    });\n+    AsyncInvocation async = client.invokeAsync(() -> {\n+      ClientCache clientCache = ClusterStartupRule.getClientCache();\n+      while (true) {\n+        FunctionService.onServers(clientCache).execute(\"TestFunction\").getResult();\n+      }\n+    });\n+    server.invoke(() -> {\n+      Region region = null;\n+      while (region == null) {\n+        region = ClusterStartupRule.getCache().getRegion(\"testRegion\");\n+      }\n+    });\n+    cluster.stop(1);\n+    cluster.stop(0);\n+    waitForException(async);\n+  }\n+\n+  private void waitForException(AsyncInvocation async) {\n+    try {\n+      async.await();\n+    } catch (Throwable e) {\n+      assertThat(hasCauseType(e, NullPointerException.class)).isFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "606a8ea588487f05f1ed97cfba1e4fed2928b322"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNzE1Mg==", "bodyText": "Also, is there a way we can convert to awaitility so there is no chance a test can hang forever?", "url": "https://github.com/apache/geode/pull/4690#discussion_r378007152", "createdAt": "2020-02-12T02:16:03Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/execute/FunctionExecutionDUnit.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.execute;\n+\n+import static org.apache.geode.internal.lang.ThrowableUtils.hasCauseType;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionFactory;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.NoAvailableServersException;\n+import org.apache.geode.cache.execute.Function;\n+import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.test.dunit.AsyncInvocation;\n+import org.apache.geode.test.dunit.rules.ClientVM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+public class FunctionExecutionDUnit implements Serializable {\n+\n+  public class TestFunction implements Function {\n+\n+    @Override\n+    public void execute(FunctionContext context) {\n+      if (context.getCache().getRegion(\"testRegion\") == null) {\n+        RegionFactory regionFactory = context.getCache().createRegionFactory();\n+        regionFactory.create(\"testRegion\");\n+        context.getResultSender().lastResult(true);\n+      } else {\n+        context.getResultSender().lastResult(false);\n+      }\n+    }\n+\n+    @Override\n+    public String getId() {\n+      return getClass().getSimpleName();\n+    }\n+  }\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Test\n+  public void test() throws Exception {\n+    MemberVM locator = cluster.startLocatorVM(0);\n+    MemberVM server = cluster.startServerVM(1, locator.getPort());\n+    ClientVM client = cluster.startClientVM(2, c -> c.withLocatorConnection(locator.getPort()));\n+\n+    server.invoke(() -> {\n+      Function function = new TestFunction();\n+      FunctionService.registerFunction(function);\n+    });\n+    AsyncInvocation async = client.invokeAsync(() -> {\n+      ClientCache clientCache = ClusterStartupRule.getClientCache();\n+      while (true) {\n+        FunctionService.onServers(clientCache).execute(\"TestFunction\").getResult();\n+      }\n+    });\n+    server.invoke(() -> {\n+      Region region = null;\n+      while (region == null) {\n+        region = ClusterStartupRule.getCache().getRegion(\"testRegion\");\n+      }\n+    });\n+    cluster.stop(1);\n+    cluster.stop(0);\n+    waitForException(async);\n+  }\n+\n+  private void waitForException(AsyncInvocation async) {\n+    try {\n+      async.await();\n+    } catch (Throwable e) {\n+      assertThat(hasCauseType(e, NullPointerException.class)).isFalse();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODAwNjc4Nw=="}, "originalCommit": {"oid": "606a8ea588487f05f1ed97cfba1e4fed2928b322"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTAwNTQ1OnYy", "diffSide": "RIGHT", "path": "extensions/geode-modules/src/distributedTest/java/org/apache/geode/modules/util/ClientServerSessionCacheDUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzozNzo0M1rOFpdLnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxOToxMjoyN1rOFpgL0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAxNDA0NA==", "bodyText": "Now that this changes the exception thrown... will this affect any other parts of function service?  such as retries?", "url": "https://github.com/apache/geode/pull/4690#discussion_r379014044", "createdAt": "2020-02-13T17:37:43Z", "author": {"login": "jhuynh1"}, "path": "extensions/geode-modules/src/distributedTest/java/org/apache/geode/modules/util/ClientServerSessionCacheDUnitTest.java", "diffHunk": "@@ -105,7 +105,7 @@ public void startingAClientWithoutServersFails() {\n     final VM client = VM.getVM(2);\n \n     assertThatThrownBy(() -> client.invoke(this::startClientSessionCache))\n-        .hasCauseInstanceOf(FunctionException.class);\n+        .hasCauseInstanceOf(NoAvailableServersException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77683491ee4352d8809e3d7c4e9de054dfc14724"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTA2MzI1MQ==", "bodyText": "This is a test code change. I don't think it will affect the product behavior of function service.\nWhen there is no server in the cluster, I don't think there is retry for function service. It should throw NoAvailableServersException.\nThe NullPointerException(NPE) bug (GEODE-7746) can be reproduced by this test from develop branch without any code change. The test originally expects a FunctionException which wraps a NPE as its cause. The NPE is exactly GEODE-7746, same stack trace. The purpose of the test is to test the case of function execution when there is no server. It should throw NoAvailableServersException(ServerConnectivityException), instead of FunctionException which wraps a NPE. The related catch and throw code is https://github.com/apache/geode/blob/develop/geode-core/src/main/java/org/apache/geode/internal/cache/execute/ServerFunctionExecutor.java#L182-L190\nand https://github.com/apache/geode/blob/develop/geode-core/src/main/java/org/apache/geode/internal/cache/execute/ServerFunctionExecutor.java#L227-L235", "url": "https://github.com/apache/geode/pull/4690#discussion_r379063251", "createdAt": "2020-02-13T19:12:27Z", "author": {"login": "jchen21"}, "path": "extensions/geode-modules/src/distributedTest/java/org/apache/geode/modules/util/ClientServerSessionCacheDUnitTest.java", "diffHunk": "@@ -105,7 +105,7 @@ public void startingAClientWithoutServersFails() {\n     final VM client = VM.getVM(2);\n \n     assertThatThrownBy(() -> client.invoke(this::startClientSessionCache))\n-        .hasCauseInstanceOf(FunctionException.class);\n+        .hasCauseInstanceOf(NoAvailableServersException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAxNDA0NA=="}, "originalCommit": {"oid": "77683491ee4352d8809e3d7c4e9de054dfc14724"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3765, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}