{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1MTY0MzYw", "number": 5570, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo0MDoxNFrOEpOqkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo0MDoxNFrOEpOqkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNjY3MzQ1OnYy", "diffSide": "RIGHT", "path": "geode-junit/src/main/java/org/apache/geode/test/junit/rules/CloseableReference.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo0MDoxNFrOHaxxRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQyMjo0MDoxNFrOHaxxRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Nzg0MDQ1Mg==", "bodyText": "Also: stop()", "url": "https://github.com/apache/geode/pull/5570#discussion_r497840452", "createdAt": "2020-09-30T22:40:14Z", "author": {"login": "demery-pivotal"}, "path": "geode-junit/src/main/java/org/apache/geode/test/junit/rules/CloseableReference.java", "diffHunk": "@@ -0,0 +1,208 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.test.junit.rules;\n+\n+import static org.apache.geode.util.internal.UncheckedUtils.uncheckedCast;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Modifier;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.apache.geode.test.junit.rules.serializable.SerializableExternalResource;\n+\n+/**\n+ * JUnit Rule that provides automated tearDown for an atomic reference. If the referenced value is\n+ * an {@code AutoCloseable} or {@code Closeable} then it will be auto-closed and set to null during\n+ * tear down.\n+ *\n+ * <p>\n+ * If the referenced value is not an {@code AutoCloseable} or {@code Closeable}, the\n+ * {@code CloseableReference} will use reflection to invoke any method named {@code close} or\n+ * {@code disconnect} regardless of what interfaces are implemented.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1d23047c4f02cb8ae84e742ad138343740d790d"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4659, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}