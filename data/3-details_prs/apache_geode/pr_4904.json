{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MzQ3Mjk2", "number": 4904, "title": "GEODE-7947 Implement tests for EXPIRE-related functionality", "bodyText": "This does not cover concurrent tests. It ensures correctness of single-threaded functionality compared to native Redis. A few fixes to commands have been implemented when identified by the new tests.", "createdAt": "2020-04-03T19:29:03Z", "url": "https://github.com/apache/geode/pull/4904", "merged": true, "mergeCommit": {"oid": "1b1ad6b4c0c8d49dbbc78d20e77de12d1ff68391"}, "closed": true, "closedAt": "2020-04-06T23:47:42Z", "author": {"login": "ringles"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcUGANzAH2gAyMzk4MzQ3Mjk2OmFiNWIyZWE5ZmMyOGFjZmVhYWQwMGMwMWIzYmMyN2ZlMTgzYzVhMmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVCAMlgFqTM4ODQ1ODU0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ab5b2ea9fc28acfeaad00c01b3bc27fe183c5a2e", "author": {"user": null}, "url": "https://github.com/apache/geode/commit/ab5b2ea9fc28acfeaad00c01b3bc27fe183c5a2e", "committedDate": "2020-04-03T19:24:14Z", "message": "GEODE-7947 Implement tests for EXPIRE-related functionality"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3NjE0MzI1", "url": "https://github.com/apache/geode/pull/4904#pullrequestreview-387614325", "createdAt": "2020-04-03T22:25:10Z", "commit": {"oid": "ab5b2ea9fc28acfeaad00c01b3bc27fe183c5a2e"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjoyNToxMFrOGArdDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMjo0ODo0OVrOGAr5KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2NTEzNA==", "bodyText": "I noticed a warning raw use of paramtrized 'GenericContainer'.  Above on the line declaring redisContainer it might be nice to actually declare as GenericContainer<WHATEVER THE TYPE IS> redisContainer.  At the very least, you use empty angle brackers in the initialization new GenericContainer<>(\"redis:5.0.6\")\nSame comment for ExpireDockerAcceptanceTest and PexpireDockerAcceptanceTest", "url": "https://github.com/apache/geode/pull/4904#discussion_r403365134", "createdAt": "2020-04-03T22:25:10Z", "author": {"login": "moleske"}, "path": "geode-redis/src/acceptanceTest/java/org/apache/geode/redis/ExpireAtDockerAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.experimental.categories.Category;\n+import org.testcontainers.containers.GenericContainer;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.redis.general.ExpireAtIntegrationTest;\n+import org.apache.geode.test.junit.categories.RedisTest;\n+\n+@Category({RedisTest.class})\n+public class ExpireAtDockerAcceptanceTest extends ExpireAtIntegrationTest {\n+\n+  private static GenericContainer redisContainer;\n+\n+  @BeforeClass\n+  public static void setUp() {\n+    redisContainer = new GenericContainer(\"redis:5.0.6\").withExposedPorts(6379);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab5b2ea9fc28acfeaad00c01b3bc27fe183c5a2e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2NTk0OA==", "bodyText": "Since you were already in this file, might be worth making the line below use a capital \"L\"\nlong millisecondsToLive = 20000L", "url": "https://github.com/apache/geode/pull/4904#discussion_r403365948", "createdAt": "2020-04-03T22:27:48Z", "author": {"login": "moleske"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/PexpireIntegrationTest.java", "diffHunk": "@@ -27,27 +27,27 @@\n \n public class PexpireIntegrationTest {\n \n-  private static Jedis jedis;\n+  public static Jedis jedis;\n+  public static int REDIS_CLIENT_TIMEOUT = 10000000;\n   private static GeodeRedisServer server;\n \n   @BeforeClass\n   public static void setUp() {\n     int port = AvailablePortHelper.getRandomAvailableTCPPort();\n-    int TIMEOUT = 10000000;\n \n     server = new GeodeRedisServer(\"localhost\", port);\n     server.start();\n-    jedis = new Jedis(\"localhost\", port, TIMEOUT);\n+    jedis = new Jedis(\"localhost\", port, REDIS_CLIENT_TIMEOUT);\n   }\n \n   @AfterClass\n-  public static void tearDown() {\n+  public static void classLevelTearDown() {\n     jedis.close();\n     server.shutdown();\n   }\n \n   @Test\n-  public void Should_SetExpiration_givenKeyTo_StringValueInMilliSeconds() {\n+  public void should_SetExpiration_givenKeyTo_StringValueInMilliSeconds() {\n \n     String key = \"key\";\n     String value = \"value\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab5b2ea9fc28acfeaad00c01b3bc27fe183c5a2e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2NzEwMQ==", "bodyText": "rand is unused in the file.  And port below could be local to the setUp method", "url": "https://github.com/apache/geode/pull/4904#discussion_r403367101", "createdAt": "2020-04-03T22:31:17Z", "author": {"login": "moleske"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/ExpireIntegrationTest.java", "diffHunk": "@@ -37,7 +37,8 @@\n \n public class ExpireIntegrationTest {\n \n-  private static Jedis jedis;\n+  public static Jedis jedis;\n+  public static int REDIS_CLIENT_TIMEOUT = 10000000;\n   private static GeodeRedisServer server;\n   private static GemFireCache cache;\n   private static Random rand;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab5b2ea9fc28acfeaad00c01b3bc27fe183c5a2e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2ODQ5Nw==", "bodyText": "0L would be good here instead of 0l.", "url": "https://github.com/apache/geode/pull/4904#discussion_r403368497", "createdAt": "2020-04-03T22:36:09Z", "author": {"login": "moleske"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/ExpireAtIntegrationTest.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.general;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.Before;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.redis.GeodeRedisServer;\n+import org.apache.geode.test.awaitility.GeodeAwaitility;\n+\n+public class ExpireAtIntegrationTest {\n+\n+  public static Jedis jedis;\n+  public static int REDIS_CLIENT_TIMEOUT = 10000000;\n+  private static GeodeRedisServer server;\n+  private long unixTimeStampInTheFutureInSeconds;\n+  private long unixTimeStampFromThePast = 0l;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab5b2ea9fc28acfeaad00c01b3bc27fe183c5a2e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2OTA0OA==", "bodyText": "The private final fields can all be local, except for ERROR_TIMESTAMP_NOT_USABLE which is unused", "url": "https://github.com/apache/geode/pull/4904#discussion_r403369048", "createdAt": "2020-04-03T22:38:01Z", "author": {"login": "moleske"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/ExpireAtExecutor.java", "diffHunk": "@@ -22,6 +24,7 @@\n import org.apache.geode.redis.internal.ExecutionHandlerContext;\n import org.apache.geode.redis.internal.Extendable;\n import org.apache.geode.redis.internal.RedisConstants.ArityDef;\n+import org.apache.geode.redis.internal.RedisDataType;\n import org.apache.geode.redis.internal.RegionProvider;\n \n public class ExpireAtExecutor extends AbstractExecutor implements Extendable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab5b2ea9fc28acfeaad00c01b3bc27fe183c5a2e"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM2OTg1MA==", "bodyText": "You could remove the initialization if you want since it is redundant", "url": "https://github.com/apache/geode/pull/4904#discussion_r403369850", "createdAt": "2020-04-03T22:40:43Z", "author": {"login": "moleske"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/ExpireAtExecutor.java", "diffHunk": "@@ -62,18 +68,29 @@ public void executeCommand(Command command, ExecutionHandlerContext context) {\n     long currentTimeMillis = System.currentTimeMillis();\n \n     if (timestamp <= currentTimeMillis) {\n-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NOT_SET));\n+      int result = NOT_SET;\n+      RedisDataType redisDataType = context.getKeyRegistrar().getType(wKey);\n+\n+      if (redisDataType != null) {\n+        regionProvider.getRegionForType(redisDataType).remove(wKey);\n+        result = SET;\n+      }\n+\n+      command.setResponse(\n+          Coder.getIntegerResponse(\n+              context.getByteBufAllocator(),\n+              result));\n       return;\n     }\n \n     long delayMillis = timestamp - currentTimeMillis;\n \n     boolean expirationSet = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab5b2ea9fc28acfeaad00c01b3bc27fe183c5a2e"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3MTY2OA==", "bodyText": "private finals could be local.  Though maybe since these are the same as ExpireAtExecutor they should be abstracted?  Though I would also wait for rule of three duplications...", "url": "https://github.com/apache/geode/pull/4904#discussion_r403371668", "createdAt": "2020-04-03T22:46:46Z", "author": {"login": "moleske"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/ExpireExecutor.java", "diffHunk": "@@ -26,8 +28,6 @@\n \n public class ExpireExecutor extends AbstractExecutor implements Extendable {\n \n-  private final String ERROR_SECONDS_NOT_USABLE = \"The number of seconds specified must be numeric\";\n-\n   private final int SECONDS_INDEX = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab5b2ea9fc28acfeaad00c01b3bc27fe183c5a2e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzM3MjMyOQ==", "bodyText": "I see who's influence is here \ud83d\ude09", "url": "https://github.com/apache/geode/pull/4904#discussion_r403372329", "createdAt": "2020-04-03T22:48:49Z", "author": {"login": "moleske"}, "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/ExpireAtExecutorJUnitTest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.general;\n+\n+import static java.nio.charset.Charset.defaultCharset;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.UnpooledByteBufAllocator;\n+import org.assertj.core.api.AssertionsForClassTypes;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import org.apache.geode.redis.internal.Command;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+import org.apache.geode.redis.internal.Executor;\n+import org.apache.geode.redis.internal.executor.ExpireAtExecutor;\n+\n+public class ExpireAtExecutorJUnitTest {\n+\n+  private ExecutionHandlerContext context;\n+  private Command command;\n+  private UnpooledByteBufAllocator byteBuf;\n+  Executor subject;\n+\n+  @Before\n+  public void setUp() {\n+    context = mock(ExecutionHandlerContext.class);\n+    command = mock(Command.class);\n+    byteBuf = new UnpooledByteBufAllocator(false);\n+    subject = new ExpireAtExecutor();\n+  }\n+\n+  @Test\n+  public void calledWithTooFewCommandArguments_returnsError() {\n+    List<byte[]> commandsAsBytesWithTooFewArguments = new ArrayList<>();\n+    commandsAsBytesWithTooFewArguments.add(\"EXPIREAT\".getBytes());\n+    commandsAsBytesWithTooFewArguments.add(\"key\".getBytes());\n+\n+    ArgumentCaptor<ByteBuf> argsErrorCaptor = ArgumentCaptor.forClass(ByteBuf.class);\n+\n+    when(context.getByteBufAllocator()).thenReturn(byteBuf);\n+    when(command.getProcessedCommand()).thenReturn(commandsAsBytesWithTooFewArguments);\n+\n+    subject.executeCommand(command, context);\n+    verify(command, times(1)).setResponse(argsErrorCaptor.capture());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab5b2ea9fc28acfeaad00c01b3bc27fe183c5a2e"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c00b623d73658e8035483c40bd851952902da70b", "author": {"user": {"login": "ringles", "name": "Ray Ingles"}}, "url": "https://github.com/apache/geode/commit/c00b623d73658e8035483c40bd851952902da70b", "committedDate": "2020-04-06T14:22:45Z", "message": "Fixes from PR review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc22a9a12cffbbe55bb8b2391ad299f4ce0501e2", "author": {"user": {"login": "sabbey37", "name": "Sarah"}}, "url": "https://github.com/apache/geode/commit/bc22a9a12cffbbe55bb8b2391ad299f4ce0501e2", "committedDate": "2020-04-06T16:36:24Z", "message": "Runs spA"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg4NDU4NTQ0", "url": "https://github.com/apache/geode/pull/4904#pullrequestreview-388458544", "createdAt": "2020-04-06T17:18:31Z", "commit": {"oid": "bc22a9a12cffbbe55bb8b2391ad299f4ce0501e2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4743, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}