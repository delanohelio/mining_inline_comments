{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMzU0NjI2", "number": 4913, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzoyMDozNFrODvqcXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzoyMDozNFrODvqcXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzA1MDU0OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Subscriptions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNzoyMDozNFrOGCOFNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo1NDoyMVrOGCXkDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4MTA0Nw==", "bodyText": "Technically I think size() needs to be synchronized as well.", "url": "https://github.com/apache/geode/pull/4913#discussion_r404981047", "createdAt": "2020-04-07T17:20:34Z", "author": {"login": "upthewaterspout"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Subscriptions.java", "diffHunk": "@@ -55,30 +55,37 @@ public boolean exists(Object channelOrPattern, Client client) {\n    * @param channelOrPattern the channel or pattern\n    * @return a list of subscriptions\n    */\n-  public List<Subscription> findSubscriptions(String channelOrPattern) {\n-    return this.subscriptions.stream()\n+  public synchronized List<Subscription> findSubscriptions(String channelOrPattern) {\n+    return subscriptions.stream()\n         .filter(subscription -> subscription.matches(channelOrPattern))\n         .collect(Collectors.toList());\n   }\n \n   /**\n    * Add a new subscription\n    */\n-  public void add(Subscription subscription) {\n-    this.subscriptions.add(subscription);\n+  public synchronized void add(Subscription subscription) {\n+    subscriptions.add(subscription);\n   }\n \n   /**\n    * Remove all subscriptions for a given client\n    */\n-  public void remove(Client client) {\n-    this.subscriptions.removeIf(subscription -> subscription.matchesClient(client));\n+  public synchronized void remove(Client client) {\n+    subscriptions.removeIf(subscription -> subscription.matchesClient(client));\n   }\n \n   /**\n    * Remove a single subscription\n    */\n-  public void remove(Object channel, Client client) {\n-    this.subscriptions.removeIf(subscription -> subscription.isEqualTo(channel, client));\n+  public synchronized void remove(Object channel, Client client) {\n+    subscriptions.removeIf(subscription -> subscription.isEqualTo(channel, client));\n+  }\n+\n+  /**\n+   * @return the total number of all local subscriptions\n+   */\n+  public int size() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f5453b641aa9d6a0aa9fac083f0e1227c204dd4"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNjM5Nw==", "bodyText": "I've switched to using a CopyOnWriteArrayList.", "url": "https://github.com/apache/geode/pull/4913#discussion_r405136397", "createdAt": "2020-04-07T21:54:21Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/Subscriptions.java", "diffHunk": "@@ -55,30 +55,37 @@ public boolean exists(Object channelOrPattern, Client client) {\n    * @param channelOrPattern the channel or pattern\n    * @return a list of subscriptions\n    */\n-  public List<Subscription> findSubscriptions(String channelOrPattern) {\n-    return this.subscriptions.stream()\n+  public synchronized List<Subscription> findSubscriptions(String channelOrPattern) {\n+    return subscriptions.stream()\n         .filter(subscription -> subscription.matches(channelOrPattern))\n         .collect(Collectors.toList());\n   }\n \n   /**\n    * Add a new subscription\n    */\n-  public void add(Subscription subscription) {\n-    this.subscriptions.add(subscription);\n+  public synchronized void add(Subscription subscription) {\n+    subscriptions.add(subscription);\n   }\n \n   /**\n    * Remove all subscriptions for a given client\n    */\n-  public void remove(Client client) {\n-    this.subscriptions.removeIf(subscription -> subscription.matchesClient(client));\n+  public synchronized void remove(Client client) {\n+    subscriptions.removeIf(subscription -> subscription.matchesClient(client));\n   }\n \n   /**\n    * Remove a single subscription\n    */\n-  public void remove(Object channel, Client client) {\n-    this.subscriptions.removeIf(subscription -> subscription.isEqualTo(channel, client));\n+  public synchronized void remove(Object channel, Client client) {\n+    subscriptions.removeIf(subscription -> subscription.isEqualTo(channel, client));\n+  }\n+\n+  /**\n+   * @return the total number of all local subscriptions\n+   */\n+  public int size() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDk4MTA0Nw=="}, "originalCommit": {"oid": "9f5453b641aa9d6a0aa9fac083f0e1227c204dd4"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4259, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}