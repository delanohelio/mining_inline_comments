{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxOTY5ODE2", "number": 4941, "title": " GEODE-7979: Implement a test class for the PERSIST Redis API command", "bodyText": "The Redis PERSIST command removes the existing timeout on a key (https://redis.io/commands/persist).  The PERSIST command was previously implemented, but not tested. This PR adds tests for this command.", "createdAt": "2020-04-10T16:08:33Z", "url": "https://github.com/apache/geode/pull/4941", "merged": true, "mergeCommit": {"oid": "90a3d50998308150c355422a22fc5d192c009ea2"}, "closed": true, "closedAt": "2020-04-14T20:31:55Z", "author": {"login": "sabbey37"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcXQHNpAFqTM5MjE3NTg4NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXpis0gFqTM5MzI3MTgzMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMTc1ODg1", "url": "https://github.com/apache/geode/pull/4941#pullrequestreview-392175885", "createdAt": "2020-04-13T14:23:33Z", "commit": {"oid": "a2c60c72a2ca022f714d7e23a8eb3019a7d29d19"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDoyMzozM1rOGEoFJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDo1MjoyNlrOGEo_tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUwNDE2Ng==", "bodyText": "why is this so high?  do we even need to set this below, or can we rely on the default?", "url": "https://github.com/apache/geode/pull/4941#discussion_r407504166", "createdAt": "2020-04-13T14:23:33Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/PersistIntegrationTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.general;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;\n+import static org.apache.geode.distributed.ConfigurationProperties.LOG_LEVEL;\n+import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+import redis.clients.jedis.params.SetParams;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.GemFireCache;\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.redis.GeodeRedisServer;\n+\n+public class PersistIntegrationTest {\n+\n+  public static Jedis jedis;\n+  public static Jedis jedis2;\n+  public static int REDIS_CLIENT_TIMEOUT = 10000000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2c60c72a2ca022f714d7e23a8eb3019a7d29d19"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUwNDgyMg==", "bodyText": "i think this should be a local variable to the concurrent test, not a global to this whole class.", "url": "https://github.com/apache/geode/pull/4941#discussion_r407504822", "createdAt": "2020-04-13T14:24:46Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/PersistIntegrationTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.general;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;\n+import static org.apache.geode.distributed.ConfigurationProperties.LOG_LEVEL;\n+import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+import redis.clients.jedis.params.SetParams;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.GemFireCache;\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.redis.GeodeRedisServer;\n+\n+public class PersistIntegrationTest {\n+\n+  public static Jedis jedis;\n+  public static Jedis jedis2;\n+  public static int REDIS_CLIENT_TIMEOUT = 10000000;\n+  private static GeodeRedisServer server;\n+  private static GemFireCache cache;\n+  private static int ITERATION_COUNT = 5000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2c60c72a2ca022f714d7e23a8eb3019a7d29d19"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUwNjY4OA==", "bodyText": "can you rename this to element or set_element...it is really hard to distinguish this test from the one above without looking VERY carefully", "url": "https://github.com/apache/geode/pull/4941#discussion_r407506688", "createdAt": "2020-04-13T14:28:14Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/PersistIntegrationTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.general;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;\n+import static org.apache.geode.distributed.ConfigurationProperties.LOG_LEVEL;\n+import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+import redis.clients.jedis.params.SetParams;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.GemFireCache;\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.redis.GeodeRedisServer;\n+\n+public class PersistIntegrationTest {\n+\n+  public static Jedis jedis;\n+  public static Jedis jedis2;\n+  public static int REDIS_CLIENT_TIMEOUT = 10000000;\n+  private static GeodeRedisServer server;\n+  private static GemFireCache cache;\n+  private static int ITERATION_COUNT = 5000;\n+\n+  @BeforeClass\n+  public static void setUp() {\n+    CacheFactory cf = new CacheFactory();\n+    cf.set(LOG_LEVEL, \"error\");\n+    cf.set(MCAST_PORT, \"0\");\n+    cf.set(LOCATORS, \"\");\n+    cache = cf.create();\n+    int port = AvailablePortHelper.getRandomAvailableTCPPort();\n+    server = new GeodeRedisServer(\"localhost\", port);\n+\n+    server.start();\n+    jedis = new Jedis(\"localhost\", port, REDIS_CLIENT_TIMEOUT);\n+    jedis2 = new Jedis(\"localhost\", port, REDIS_CLIENT_TIMEOUT);\n+  }\n+\n+  @After\n+  public void flushAll() {\n+    jedis.flushAll();\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    jedis.close();\n+    cache.close();\n+    server.shutdown();\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithStringValue() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    jedis.set(key, value);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldReturnZero_givenKeyDoesNotExist() {\n+    assertThat(jedis.persist(\"key\")).isEqualTo(0L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithSetValue() {\n+    String key = \"key\";\n+    String value = \"value\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2c60c72a2ca022f714d7e23a8eb3019a7d29d19"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUwODQwMw==", "bodyText": "where's the blocking queue here?  this name may be a relic, and needs to be updated?\n\"do a bunch of\" is odd.  maybe the method is just expireKeys, and  below one is persistKeys", "url": "https://github.com/apache/geode/pull/4941#discussion_r407508403", "createdAt": "2020-04-13T14:31:43Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/PersistIntegrationTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.general;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;\n+import static org.apache.geode.distributed.ConfigurationProperties.LOG_LEVEL;\n+import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+import redis.clients.jedis.params.SetParams;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.GemFireCache;\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.redis.GeodeRedisServer;\n+\n+public class PersistIntegrationTest {\n+\n+  public static Jedis jedis;\n+  public static Jedis jedis2;\n+  public static int REDIS_CLIENT_TIMEOUT = 10000000;\n+  private static GeodeRedisServer server;\n+  private static GemFireCache cache;\n+  private static int ITERATION_COUNT = 5000;\n+\n+  @BeforeClass\n+  public static void setUp() {\n+    CacheFactory cf = new CacheFactory();\n+    cf.set(LOG_LEVEL, \"error\");\n+    cf.set(MCAST_PORT, \"0\");\n+    cf.set(LOCATORS, \"\");\n+    cache = cf.create();\n+    int port = AvailablePortHelper.getRandomAvailableTCPPort();\n+    server = new GeodeRedisServer(\"localhost\", port);\n+\n+    server.start();\n+    jedis = new Jedis(\"localhost\", port, REDIS_CLIENT_TIMEOUT);\n+    jedis2 = new Jedis(\"localhost\", port, REDIS_CLIENT_TIMEOUT);\n+  }\n+\n+  @After\n+  public void flushAll() {\n+    jedis.flushAll();\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    jedis.close();\n+    cache.close();\n+    server.shutdown();\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithStringValue() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    jedis.set(key, value);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldReturnZero_givenKeyDoesNotExist() {\n+    assertThat(jedis.persist(\"key\")).isEqualTo(0L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithSetValue() {\n+    String key = \"key\";\n+    String value = \"value\";\n+\n+    jedis.sadd(key, value);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithSortedSetValue() {\n+    String key = \"key\";\n+    double score = 2.0;\n+    String member = \"member\";\n+\n+    jedis.zadd(key, score, member);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithHashValue() {\n+    String key = \"key\";\n+    String field = \"field\";\n+    String value = \"value\";\n+\n+    jedis.hset(key, field, value);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithGeoValue() {\n+    String key = \"sicily\";\n+    double latitude = 13.361389;\n+    double longitude = 38.115556;\n+    String member = \"Palermo Catina\";\n+\n+    jedis.geoadd(key, latitude, longitude, member);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithHyperLogLogValue() {\n+    String key = \"crawled:127.0.0.2\";\n+    String value = \"www.insideTheHouse.com\";\n+\n+    jedis.pfadd(key, value);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithListValue() {\n+    String key = \"list\";\n+    String value = \"value\";\n+\n+    jedis.lpush(key, value);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithBitMapValue() {\n+    String key = \"key\";\n+    long offset = 1L;\n+    String value = \"0\";\n+\n+    jedis.setbit(key, offset, value);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKeysConcurrently() throws InterruptedException {\n+    doABunchOfSetEXsWithBlockingQueue(jedis);\n+\n+    AtomicLong persistedFromThread1 = new AtomicLong(0);\n+    AtomicLong persistedFromThread2 = new AtomicLong(0);\n+\n+    Runnable runnable1 = () -> doABunchOfPersistsWithBlockingQueue(persistedFromThread1, jedis);\n+    Runnable runnable2 = () -> doABunchOfPersistsWithBlockingQueue(persistedFromThread2, jedis2);\n+\n+    Thread thread1 = new Thread(runnable1);\n+    Thread thread2 = new Thread(runnable2);\n+\n+    thread1.start();\n+    thread2.start();\n+    thread1.join();\n+    thread2.join();\n+\n+    assertThat(persistedFromThread1.get() + persistedFromThread2.get()).isEqualTo(ITERATION_COUNT);\n+  }\n+\n+  private void doABunchOfSetEXsWithBlockingQueue(Jedis jedis) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2c60c72a2ca022f714d7e23a8eb3019a7d29d19"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUxOTE1OQ==", "bodyText": "I think you should use the actual Command class and not a mock.  I tried it out and the tests are simpler. Give it a try and see what you think.", "url": "https://github.com/apache/geode/pull/4941#discussion_r407519159", "createdAt": "2020-04-13T14:52:26Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/PersistExecutorJUnitTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.general;\n+\n+import static java.nio.charset.Charset.defaultCharset;\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.UnpooledByteBufAllocator;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import org.apache.geode.redis.internal.Command;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+import org.apache.geode.redis.internal.Executor;\n+import org.apache.geode.redis.internal.executor.PersistExecutor;\n+\n+public class PersistExecutorJUnitTest {\n+\n+  private ExecutionHandlerContext context;\n+  private Command command;\n+  private UnpooledByteBufAllocator byteBuf;\n+\n+  @Before\n+  public void setUp() {\n+    context = mock(ExecutionHandlerContext.class);\n+    command = mock(Command.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2c60c72a2ca022f714d7e23a8eb3019a7d29d19"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMTk4NDcy", "url": "https://github.com/apache/geode/pull/4941#pullrequestreview-392198472", "createdAt": "2020-04-13T14:58:10Z", "commit": {"oid": "a2c60c72a2ca022f714d7e23a8eb3019a7d29d19"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyNDk3MTU3", "url": "https://github.com/apache/geode/pull/4941#pullrequestreview-392497157", "createdAt": "2020-04-13T23:05:50Z", "commit": {"oid": "a2c60c72a2ca022f714d7e23a8eb3019a7d29d19"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzowNTo1MVrOGE4SYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzowNTo1MVrOGE4SYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc2OTY5OQ==", "bodyText": "is this test still a work in progress? I don't see that it tests anything", "url": "https://github.com/apache/geode/pull/4941#discussion_r407769699", "createdAt": "2020-04-13T23:05:51Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/acceptanceTest/java/org/apache/geode/redis/PersistDockerAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.experimental.categories.Category;\n+import org.testcontainers.containers.GenericContainer;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.redis.general.PersistIntegrationTest;\n+import org.apache.geode.test.junit.categories.RedisTest;\n+\n+@Category({RedisTest.class})\n+public class PersistDockerAcceptanceTest extends PersistIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2c60c72a2ca022f714d7e23a8eb3019a7d29d19"}, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a2c60c72a2ca022f714d7e23a8eb3019a7d29d19", "author": {"user": {"login": "sabbey37", "name": "Sarah"}}, "url": "https://github.com/apache/geode/commit/a2c60c72a2ca022f714d7e23a8eb3019a7d29d19", "committedDate": "2020-04-10T15:52:39Z", "message": " GEODE-7979: Implement a test class for the PERSIST Redis API command"}, "afterCommit": {"oid": "eae174eda6a5b40a57b51a06db232c8f01622fcf", "author": {"user": {"login": "sabbey37", "name": "Sarah"}}, "url": "https://github.com/apache/geode/commit/eae174eda6a5b40a57b51a06db232c8f01622fcf", "committedDate": "2020-04-14T13:21:19Z", "message": " GEODE-7979: Implement a test class for the PERSIST Redis API command"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84b65511f770ef13b973e338b14cbe77a9fe11de", "author": {"user": {"login": "sabbey37", "name": "Sarah"}}, "url": "https://github.com/apache/geode/commit/84b65511f770ef13b973e338b14cbe77a9fe11de", "committedDate": "2020-04-14T13:38:39Z", "message": " GEODE-7979: Implement a test class for the PERSIST Redis API command"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "06c29376cb43811af4517a64015c881a729a5d5f", "author": {"user": {"login": "sabbey37", "name": "Sarah"}}, "url": "https://github.com/apache/geode/commit/06c29376cb43811af4517a64015c881a729a5d5f", "committedDate": "2020-04-14T13:33:56Z", "message": "Adds IgnoreWindowsRule to all test classes that use a docker test container"}, "afterCommit": {"oid": "84b65511f770ef13b973e338b14cbe77a9fe11de", "author": {"user": {"login": "sabbey37", "name": "Sarah"}}, "url": "https://github.com/apache/geode/commit/84b65511f770ef13b973e338b14cbe77a9fe11de", "committedDate": "2020-04-14T13:38:39Z", "message": " GEODE-7979: Implement a test class for the PERSIST Redis API command"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkzMjcxODMz", "url": "https://github.com/apache/geode/pull/4941#pullrequestreview-393271833", "createdAt": "2020-04-14T20:30:21Z", "commit": {"oid": "84b65511f770ef13b973e338b14cbe77a9fe11de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4798, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}