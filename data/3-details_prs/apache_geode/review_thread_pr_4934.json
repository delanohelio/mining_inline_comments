{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMzYxNDk4", "number": 4934, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzowNzoyNFrODxvaaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoxMjo1NFrODxvifg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDgzNjI1OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderQueue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzowNzoyNFrOGFYg1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwODo0ODowM1rOGFv7og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI5NzY4Ng==", "bodyText": "just a thought, would this simplify to :\nboolean thisBucketDestroyed = brq.isDestroyed();\nif (!isDREvent) {\nthisBucketDestroyed |= prQ.getColocatedWithRegion()...;\n}", "url": "https://github.com/apache/geode/pull/4934#discussion_r408297686", "createdAt": "2020-04-14T17:07:24Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderQueue.java", "diffHunk": "@@ -790,17 +790,17 @@ public boolean put(Object object) throws InterruptedException, CacheException {\n           LocalRegion.setThreadInitLevelRequirement(oldLevel);\n         }\n       } else {\n-        boolean thisbucketDestroyed = false;\n+        boolean thisBucketDestroyed;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e1f15a19aee7a30af5de8bac8f1cb5592e4ad31"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY4MTM3OA==", "bodyText": "Changed!.", "url": "https://github.com/apache/geode/pull/4934#discussion_r408681378", "createdAt": "2020-04-15T08:48:03Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderQueue.java", "diffHunk": "@@ -790,17 +790,17 @@ public boolean put(Object object) throws InterruptedException, CacheException {\n           LocalRegion.setThreadInitLevelRequirement(oldLevel);\n         }\n       } else {\n-        boolean thisbucketDestroyed = false;\n+        boolean thisBucketDestroyed;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI5NzY4Ng=="}, "originalCommit": {"oid": "9e1f15a19aee7a30af5de8bac8f1cb5592e4ad31"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDg0Njc4OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderQueue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoxMDowM1rOGFYnVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOTowMjo0NlrOGFwejg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI5OTM0OA==", "bodyText": "Pulling this out will always construct this string now.  Any ideas on perf impact?", "url": "https://github.com/apache/geode/pull/4934#discussion_r408299348", "createdAt": "2020-04-14T17:10:03Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderQueue.java", "diffHunk": "@@ -701,17 +701,17 @@ public boolean put(Object object) throws InterruptedException, CacheException {\n     AbstractBucketRegionQueue brq =\n         (AbstractBucketRegionQueue) prQ.getDataStore().getLocalBucketById(bucketId);\n \n+    // Full path of the bucket:\n+    final String bucketFullPath =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e1f15a19aee7a30af5de8bac8f1cb5592e4ad31"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODY5MDMxOA==", "bodyText": "Good point, I haven't ran any performance tests related to the change.\nI've refactored the first part of the String as a constant and moved the initialisation only to places where is needed, hopefully this will reduce the impact. Let me know if you think that's enough.", "url": "https://github.com/apache/geode/pull/4934#discussion_r408690318", "createdAt": "2020-04-15T09:02:46Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/parallel/ParallelGatewaySenderQueue.java", "diffHunk": "@@ -701,17 +701,17 @@ public boolean put(Object object) throws InterruptedException, CacheException {\n     AbstractBucketRegionQueue brq =\n         (AbstractBucketRegionQueue) prQ.getDataStore().getLocalBucketById(bucketId);\n \n+    // Full path of the bucket:\n+    final String bucketFullPath =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI5OTM0OA=="}, "originalCommit": {"oid": "9e1f15a19aee7a30af5de8bac8f1cb5592e4ad31"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDg1MTMwOnYy", "diffSide": "RIGHT", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/BucketAdvisorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoxMToyNFrOGFYqPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToyMjowNlrOGFxLQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMwMDA5Mw==", "bodyText": "No change needed, but there might be a way to do this with a stream filter instead .", "url": "https://github.com/apache/geode/pull/4934#discussion_r408300093", "createdAt": "2020-04-14T17:11:24Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/BucketAdvisorTest.java", "diffHunk": "@@ -150,4 +155,42 @@ public void volunteerForPrimaryIgnoresMissingPrimaryElector() {\n     advisorSpy.volunteerForPrimary();\n     verify(volunteeringDelegate).volunteerForPrimary();\n   }\n+\n+  @Test\n+  public void shadowBucketsDestroyedTrackingShouldWorkCorrectly() {\n+    DistributionManager distributionManager = mock(DistributionManager.class);\n+    when(distributionManager.getId()).thenReturn(new InternalDistributedMember(\"localhost\", 321));\n+\n+    Bucket bucket = mock(Bucket.class);\n+    when(bucket.isHosting()).thenReturn(true);\n+    when(bucket.isPrimary()).thenReturn(false);\n+    when(bucket.getDistributionManager()).thenReturn(distributionManager);\n+\n+    PartitionedRegion partitionedRegion = mock(PartitionedRegion.class);\n+    when(partitionedRegion.getRedundantCopies()).thenReturn(0);\n+    when(partitionedRegion.getPartitionAttributes()).thenReturn(new PartitionAttributesImpl());\n+    RegionAdvisor regionAdvisor = mock(RegionAdvisor.class);\n+    when(regionAdvisor.getPartitionedRegion()).thenReturn(partitionedRegion);\n+\n+    List<String> shadowBuckets = Arrays.asList(\"/bucket1\", \"/bucket2\", \"/bucket3\");\n+    BucketAdvisor bucketAdvisor = BucketAdvisor.createBucketAdvisor(bucket, regionAdvisor);\n+    shadowBuckets.forEach(bucketAdvisor::markShadowBucketAsDestroyed);\n+\n+    // Return false by default.\n+    assertThat(bucketAdvisor.isShadowBucketDestroyed(\"/bucket\")).isFalse();\n+\n+    // Return correct value when found.\n+    bucketAdvisor.markShadowBucketAsDestroyed(shadowBuckets.get(1));\n+    assertThat(bucketAdvisor.isShadowBucketDestroyed(shadowBuckets.get(1))).isTrue();\n+\n+    // Mark all shadow buckets values as destroyed\n+    bucketAdvisor.markAllShadowBucketsAsDestroyed();\n+    shadowBuckets", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e1f15a19aee7a30af5de8bac8f1cb5592e4ad31"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMTc2MQ==", "bodyText": "\ud83d\udc4d", "url": "https://github.com/apache/geode/pull/4934#discussion_r408701761", "createdAt": "2020-04-15T09:22:06Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/BucketAdvisorTest.java", "diffHunk": "@@ -150,4 +155,42 @@ public void volunteerForPrimaryIgnoresMissingPrimaryElector() {\n     advisorSpy.volunteerForPrimary();\n     verify(volunteeringDelegate).volunteerForPrimary();\n   }\n+\n+  @Test\n+  public void shadowBucketsDestroyedTrackingShouldWorkCorrectly() {\n+    DistributionManager distributionManager = mock(DistributionManager.class);\n+    when(distributionManager.getId()).thenReturn(new InternalDistributedMember(\"localhost\", 321));\n+\n+    Bucket bucket = mock(Bucket.class);\n+    when(bucket.isHosting()).thenReturn(true);\n+    when(bucket.isPrimary()).thenReturn(false);\n+    when(bucket.getDistributionManager()).thenReturn(distributionManager);\n+\n+    PartitionedRegion partitionedRegion = mock(PartitionedRegion.class);\n+    when(partitionedRegion.getRedundantCopies()).thenReturn(0);\n+    when(partitionedRegion.getPartitionAttributes()).thenReturn(new PartitionAttributesImpl());\n+    RegionAdvisor regionAdvisor = mock(RegionAdvisor.class);\n+    when(regionAdvisor.getPartitionedRegion()).thenReturn(partitionedRegion);\n+\n+    List<String> shadowBuckets = Arrays.asList(\"/bucket1\", \"/bucket2\", \"/bucket3\");\n+    BucketAdvisor bucketAdvisor = BucketAdvisor.createBucketAdvisor(bucket, regionAdvisor);\n+    shadowBuckets.forEach(bucketAdvisor::markShadowBucketAsDestroyed);\n+\n+    // Return false by default.\n+    assertThat(bucketAdvisor.isShadowBucketDestroyed(\"/bucket\")).isFalse();\n+\n+    // Return correct value when found.\n+    bucketAdvisor.markShadowBucketAsDestroyed(shadowBuckets.get(1));\n+    assertThat(bucketAdvisor.isShadowBucketDestroyed(shadowBuckets.get(1))).isTrue();\n+\n+    // Mark all shadow buckets values as destroyed\n+    bucketAdvisor.markAllShadowBucketsAsDestroyed();\n+    shadowBuckets", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMwMDA5Mw=="}, "originalCommit": {"oid": "9e1f15a19aee7a30af5de8bac8f1cb5592e4ad31"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDg1Njk0OnYy", "diffSide": "RIGHT", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/BucketAdvisorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzoxMjo1NFrOGFYttw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwOToyMjoxMlrOGFxLig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMwMDk4Mw==", "bodyText": "maybe break this into two tests, one just for marking?  it might seem redundant so it's up to you", "url": "https://github.com/apache/geode/pull/4934#discussion_r408300983", "createdAt": "2020-04-14T17:12:54Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/BucketAdvisorTest.java", "diffHunk": "@@ -150,4 +155,42 @@ public void volunteerForPrimaryIgnoresMissingPrimaryElector() {\n     advisorSpy.volunteerForPrimary();\n     verify(volunteeringDelegate).volunteerForPrimary();\n   }\n+\n+  @Test\n+  public void shadowBucketsDestroyedTrackingShouldWorkCorrectly() {\n+    DistributionManager distributionManager = mock(DistributionManager.class);\n+    when(distributionManager.getId()).thenReturn(new InternalDistributedMember(\"localhost\", 321));\n+\n+    Bucket bucket = mock(Bucket.class);\n+    when(bucket.isHosting()).thenReturn(true);\n+    when(bucket.isPrimary()).thenReturn(false);\n+    when(bucket.getDistributionManager()).thenReturn(distributionManager);\n+\n+    PartitionedRegion partitionedRegion = mock(PartitionedRegion.class);\n+    when(partitionedRegion.getRedundantCopies()).thenReturn(0);\n+    when(partitionedRegion.getPartitionAttributes()).thenReturn(new PartitionAttributesImpl());\n+    RegionAdvisor regionAdvisor = mock(RegionAdvisor.class);\n+    when(regionAdvisor.getPartitionedRegion()).thenReturn(partitionedRegion);\n+\n+    List<String> shadowBuckets = Arrays.asList(\"/bucket1\", \"/bucket2\", \"/bucket3\");\n+    BucketAdvisor bucketAdvisor = BucketAdvisor.createBucketAdvisor(bucket, regionAdvisor);\n+    shadowBuckets.forEach(bucketAdvisor::markShadowBucketAsDestroyed);\n+\n+    // Return false by default.\n+    assertThat(bucketAdvisor.isShadowBucketDestroyed(\"/bucket\")).isFalse();\n+\n+    // Return correct value when found.\n+    bucketAdvisor.markShadowBucketAsDestroyed(shadowBuckets.get(1));\n+    assertThat(bucketAdvisor.isShadowBucketDestroyed(shadowBuckets.get(1))).isTrue();\n+\n+    // Mark all shadow buckets values as destroyed\n+    bucketAdvisor.markAllShadowBucketsAsDestroyed();\n+    shadowBuckets\n+        .forEach(b -> assertThat(assertThat(bucketAdvisor.isShadowBucketDestroyed(b)).isTrue()));\n+\n+    // Mark all shadow buckets values as non destroyed\n+    bucketAdvisor.markAllShadowBucketsAsNonDestroyed();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e1f15a19aee7a30af5de8bac8f1cb5592e4ad31"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODcwMTgzNA==", "bodyText": "Changed!", "url": "https://github.com/apache/geode/pull/4934#discussion_r408701834", "createdAt": "2020-04-15T09:22:12Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/BucketAdvisorTest.java", "diffHunk": "@@ -150,4 +155,42 @@ public void volunteerForPrimaryIgnoresMissingPrimaryElector() {\n     advisorSpy.volunteerForPrimary();\n     verify(volunteeringDelegate).volunteerForPrimary();\n   }\n+\n+  @Test\n+  public void shadowBucketsDestroyedTrackingShouldWorkCorrectly() {\n+    DistributionManager distributionManager = mock(DistributionManager.class);\n+    when(distributionManager.getId()).thenReturn(new InternalDistributedMember(\"localhost\", 321));\n+\n+    Bucket bucket = mock(Bucket.class);\n+    when(bucket.isHosting()).thenReturn(true);\n+    when(bucket.isPrimary()).thenReturn(false);\n+    when(bucket.getDistributionManager()).thenReturn(distributionManager);\n+\n+    PartitionedRegion partitionedRegion = mock(PartitionedRegion.class);\n+    when(partitionedRegion.getRedundantCopies()).thenReturn(0);\n+    when(partitionedRegion.getPartitionAttributes()).thenReturn(new PartitionAttributesImpl());\n+    RegionAdvisor regionAdvisor = mock(RegionAdvisor.class);\n+    when(regionAdvisor.getPartitionedRegion()).thenReturn(partitionedRegion);\n+\n+    List<String> shadowBuckets = Arrays.asList(\"/bucket1\", \"/bucket2\", \"/bucket3\");\n+    BucketAdvisor bucketAdvisor = BucketAdvisor.createBucketAdvisor(bucket, regionAdvisor);\n+    shadowBuckets.forEach(bucketAdvisor::markShadowBucketAsDestroyed);\n+\n+    // Return false by default.\n+    assertThat(bucketAdvisor.isShadowBucketDestroyed(\"/bucket\")).isFalse();\n+\n+    // Return correct value when found.\n+    bucketAdvisor.markShadowBucketAsDestroyed(shadowBuckets.get(1));\n+    assertThat(bucketAdvisor.isShadowBucketDestroyed(shadowBuckets.get(1))).isTrue();\n+\n+    // Mark all shadow buckets values as destroyed\n+    bucketAdvisor.markAllShadowBucketsAsDestroyed();\n+    shadowBuckets\n+        .forEach(b -> assertThat(assertThat(bucketAdvisor.isShadowBucketDestroyed(b)).isTrue()));\n+\n+    // Mark all shadow buckets values as non destroyed\n+    bucketAdvisor.markAllShadowBucketsAsNonDestroyed();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMwMDk4Mw=="}, "originalCommit": {"oid": "9e1f15a19aee7a30af5de8bac8f1cb5592e4ad31"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4295, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}