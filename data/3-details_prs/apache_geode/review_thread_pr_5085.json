{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NDc0NDQ2", "number": 5085, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDozNzo1NlrOD7ZUmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMTowNjo1MFrOD7Z5Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjA3NDQ5OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/HashExecutor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDozNzo1NlrOGTsdzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMzoyMTowOVrOGTwtaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwNDY1Mw==", "bodyText": "can we deprecate this method?", "url": "https://github.com/apache/geode/pull/5085#discussion_r423304653", "createdAt": "2020-05-11T20:37:56Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/HashExecutor.java", "diffHunk": "@@ -42,14 +41,14 @@\n    * @param key the region hash key region:<key>\n    * @return the map data\n    */\n-  protected Map<ByteArrayWrapper, ByteArrayWrapper> getMap(ExecutionHandlerContext context,\n+  protected RedisHash getMap(ExecutionHandlerContext context,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a9ffe9a7ca8dfa38bd18866f7e676b2fda3405b"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM3NDE4NQ==", "bodyText": "We could but we still will use it internally until the other HASH commands are converted to use functions. I don't think it is worth marking the internal apis we need to support this older implementation as deprecated. We should just spend a day converting the other HASH commands to use a function and then we can get rid of this, and other, methods.", "url": "https://github.com/apache/geode/pull/5085#discussion_r423374185", "createdAt": "2020-05-11T23:21:09Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/HashExecutor.java", "diffHunk": "@@ -42,14 +41,14 @@\n    * @param key the region hash key region:<key>\n    * @return the map data\n    */\n-  protected Map<ByteArrayWrapper, ByteArrayWrapper> getMap(ExecutionHandlerContext context,\n+  protected RedisHash getMap(ExecutionHandlerContext context,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwNDY1Mw=="}, "originalCommit": {"oid": "2a9ffe9a7ca8dfa38bd18866f7e676b2fda3405b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjA5NDA0OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/RedisHashCommands.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDo0Mzo1NVrOGTsqEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMzoxNzo1NlrOGTwpSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwNzc5NQ==", "bodyText": "i think it would be nice if hgetall returned a collection of enttries.  That has more semantic meaning, but I understand that the caller would end up just flattening it to send it over the wire.", "url": "https://github.com/apache/geode/pull/5085#discussion_r423307795", "createdAt": "2020-05-11T20:43:55Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/RedisHashCommands.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.hash;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.geode.redis.internal.ByteArrayWrapper;\n+\n+public interface RedisHashCommands {\n+  int hset(ByteArrayWrapper key, List<ByteArrayWrapper> fieldsToSet, boolean NX);\n+\n+  int hdel(ByteArrayWrapper key, List<ByteArrayWrapper> fieldsToRemove);\n+\n+  // TODO: refactor this onto something like RedisKeyCommands\n+  boolean del(ByteArrayWrapper key);\n+\n+  Collection<ByteArrayWrapper> hgetall(ByteArrayWrapper key);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a9ffe9a7ca8dfa38bd18866f7e676b2fda3405b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMyNTA1OA==", "bodyText": "And it would not be serializable", "url": "https://github.com/apache/geode/pull/5085#discussion_r423325058", "createdAt": "2020-05-11T21:16:56Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/RedisHashCommands.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.hash;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.geode.redis.internal.ByteArrayWrapper;\n+\n+public interface RedisHashCommands {\n+  int hset(ByteArrayWrapper key, List<ByteArrayWrapper> fieldsToSet, boolean NX);\n+\n+  int hdel(ByteArrayWrapper key, List<ByteArrayWrapper> fieldsToRemove);\n+\n+  // TODO: refactor this onto something like RedisKeyCommands\n+  boolean del(ByteArrayWrapper key);\n+\n+  Collection<ByteArrayWrapper> hgetall(ByteArrayWrapper key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwNzc5NQ=="}, "originalCommit": {"oid": "2a9ffe9a7ca8dfa38bd18866f7e676b2fda3405b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM3MzEzMA==", "bodyText": "I do think it makes more sense for hgetall to return a Collection instead of Collection<Entry<ByteArrayWrapper, ByteArrayWrapper>> because the output of the redis HGETALL command is a flat list. The output is \"key1 value1 key2 value2\". It does not have structure (for example \"{key1 value1} {key2 value2}\". So by having hgetall return a simple Collection it actually corresponds to the public REDIS HGETALL output.", "url": "https://github.com/apache/geode/pull/5085#discussion_r423373130", "createdAt": "2020-05-11T23:17:56Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/RedisHashCommands.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.hash;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.geode.redis.internal.ByteArrayWrapper;\n+\n+public interface RedisHashCommands {\n+  int hset(ByteArrayWrapper key, List<ByteArrayWrapper> fieldsToSet, boolean NX);\n+\n+  int hdel(ByteArrayWrapper key, List<ByteArrayWrapper> fieldsToRemove);\n+\n+  // TODO: refactor this onto something like RedisKeyCommands\n+  boolean del(ByteArrayWrapper key);\n+\n+  Collection<ByteArrayWrapper> hgetall(ByteArrayWrapper key);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMwNzc5NQ=="}, "originalCommit": {"oid": "2a9ffe9a7ca8dfa38bd18866f7e676b2fda3405b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNjE2ODAzOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/CommandFunction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMTowNjo1MFrOGTtZjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMzoxNToyM1rOGTwl9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMxOTk0OA==", "bodyText": "this class is going to grow with each new command added.  Is there any way we can break this up?", "url": "https://github.com/apache/geode/pull/5085#discussion_r423319948", "createdAt": "2020-05-11T21:06:50Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/CommandFunction.java", "diffHunk": "@@ -16,26 +16,53 @@\n \n package org.apache.geode.redis.internal.executor;\n \n+import static org.apache.geode.redis.internal.RedisCommandType.HSET;\n+\n import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.regex.Pattern;\n \n import org.apache.geode.cache.Region;\n import org.apache.geode.cache.execute.Function;\n import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n import org.apache.geode.cache.execute.ResultSender;\n import org.apache.geode.internal.cache.execute.RegionFunctionContextImpl;\n import org.apache.geode.redis.internal.ByteArrayWrapper;\n import org.apache.geode.redis.internal.RedisCommandType;\n+import org.apache.geode.redis.internal.RedisDataType;\n+import org.apache.geode.redis.internal.executor.hash.RedisHash;\n import org.apache.geode.redis.internal.executor.set.RedisSet;\n import org.apache.geode.redis.internal.executor.set.StripedExecutor;\n+import org.apache.geode.redis.internal.executor.set.SynchronizedStripedExecutor;\n \n public class CommandFunction implements Function<Object[]> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a9ffe9a7ca8dfa38bd18866f7e676b2fda3405b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzM3MjI3OQ==", "bodyText": "Probably. I don't have any ideas. But it does seem like we have a bunch of things that are related to each other and maybe they can be refactored in some way. I do like having a single function. For example we could have a function for each command but that would cause a bunch of busy work each time we add function support for another redis command. I would suggest we wait on this refactoring until we get all the commands we want to support for our first release done. Then we can look at those and figure out the best way to organize the code for those commands.", "url": "https://github.com/apache/geode/pull/5085#discussion_r423372279", "createdAt": "2020-05-11T23:15:23Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/CommandFunction.java", "diffHunk": "@@ -16,26 +16,53 @@\n \n package org.apache.geode.redis.internal.executor;\n \n+import static org.apache.geode.redis.internal.RedisCommandType.HSET;\n+\n import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n import java.util.concurrent.atomic.AtomicBoolean;\n import java.util.regex.Pattern;\n \n import org.apache.geode.cache.Region;\n import org.apache.geode.cache.execute.Function;\n import org.apache.geode.cache.execute.FunctionContext;\n+import org.apache.geode.cache.execute.FunctionService;\n+import org.apache.geode.cache.execute.ResultCollector;\n import org.apache.geode.cache.execute.ResultSender;\n import org.apache.geode.internal.cache.execute.RegionFunctionContextImpl;\n import org.apache.geode.redis.internal.ByteArrayWrapper;\n import org.apache.geode.redis.internal.RedisCommandType;\n+import org.apache.geode.redis.internal.RedisDataType;\n+import org.apache.geode.redis.internal.executor.hash.RedisHash;\n import org.apache.geode.redis.internal.executor.set.RedisSet;\n import org.apache.geode.redis.internal.executor.set.StripedExecutor;\n+import org.apache.geode.redis.internal.executor.set.SynchronizedStripedExecutor;\n \n public class CommandFunction implements Function<Object[]> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzMxOTk0OA=="}, "originalCommit": {"oid": "2a9ffe9a7ca8dfa38bd18866f7e676b2fda3405b"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4030, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}