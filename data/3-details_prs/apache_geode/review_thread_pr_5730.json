{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5MDQ3NTEy", "number": 5730, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMTowNzo0M1rOE9LXdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMTowODoxOVrOE9LYPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTg0ODIxOnYy", "diffSide": "RIGHT", "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientCQAutoSerializer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMTowNzo0M1rOH5uXpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQwNjo0NTo1OFrOH7tt0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI5MDU5Nw==", "bodyText": "Please rename this file to be clear that it is the test. Something like DurableClientCQAutoSerializerDUnitTest", "url": "https://github.com/apache/geode/pull/5730#discussion_r530290597", "createdAt": "2020-11-25T11:07:43Z", "author": {"login": "mkevo"}, "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientCQAutoSerializer.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.tier.sockets;\n+\n+import static org.apache.geode.cache.Region.SEPARATOR;\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientRegionFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.client.internal.PoolImpl;\n+import org.apache.geode.cache.query.CqAttributesFactory;\n+import org.apache.geode.cache.query.CqQuery;\n+import org.apache.geode.cache.query.QueryService;\n+import org.apache.geode.internal.cache.CacheServerImpl;\n+import org.apache.geode.pdx.ReflectionBasedAutoSerializer;\n+import org.apache.geode.pdx.internal.AutoSerializableManager;\n+import org.apache.geode.test.dunit.Invoke;\n+import org.apache.geode.test.dunit.rules.ClientVM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.ClientSubscriptionTest;\n+import org.apache.geode.test.junit.categories.SerializationTest;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+\n+@Category({ClientSubscriptionTest.class, SerializationTest.class})\n+public class DurableClientCQAutoSerializer implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c93268a267e78b1758d1422dd1e1ad3998c0a355"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY3ODEwMA==", "bodyText": "Hi Mario, thanks for the comments. I have applied all of them in the following commit.", "url": "https://github.com/apache/geode/pull/5730#discussion_r531678100", "createdAt": "2020-11-27T16:02:47Z", "author": {"login": "jvarenina"}, "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientCQAutoSerializer.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.tier.sockets;\n+\n+import static org.apache.geode.cache.Region.SEPARATOR;\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientRegionFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.client.internal.PoolImpl;\n+import org.apache.geode.cache.query.CqAttributesFactory;\n+import org.apache.geode.cache.query.CqQuery;\n+import org.apache.geode.cache.query.QueryService;\n+import org.apache.geode.internal.cache.CacheServerImpl;\n+import org.apache.geode.pdx.ReflectionBasedAutoSerializer;\n+import org.apache.geode.pdx.internal.AutoSerializableManager;\n+import org.apache.geode.test.dunit.Invoke;\n+import org.apache.geode.test.dunit.rules.ClientVM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.ClientSubscriptionTest;\n+import org.apache.geode.test.junit.categories.SerializationTest;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+\n+@Category({ClientSubscriptionTest.class, SerializationTest.class})\n+public class DurableClientCQAutoSerializer implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI5MDU5Nw=="}, "originalCommit": {"oid": "c93268a267e78b1758d1422dd1e1ad3998c0a355"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjM3NzA0Mg==", "bodyText": "Thanks Jakov!", "url": "https://github.com/apache/geode/pull/5730#discussion_r532377042", "createdAt": "2020-11-30T06:45:58Z", "author": {"login": "mkevo"}, "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientCQAutoSerializer.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.tier.sockets;\n+\n+import static org.apache.geode.cache.Region.SEPARATOR;\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientRegionFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.client.internal.PoolImpl;\n+import org.apache.geode.cache.query.CqAttributesFactory;\n+import org.apache.geode.cache.query.CqQuery;\n+import org.apache.geode.cache.query.QueryService;\n+import org.apache.geode.internal.cache.CacheServerImpl;\n+import org.apache.geode.pdx.ReflectionBasedAutoSerializer;\n+import org.apache.geode.pdx.internal.AutoSerializableManager;\n+import org.apache.geode.test.dunit.Invoke;\n+import org.apache.geode.test.dunit.rules.ClientVM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.ClientSubscriptionTest;\n+import org.apache.geode.test.junit.categories.SerializationTest;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+\n+@Category({ClientSubscriptionTest.class, SerializationTest.class})\n+public class DurableClientCQAutoSerializer implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI5MDU5Nw=="}, "originalCommit": {"oid": "c93268a267e78b1758d1422dd1e1ad3998c0a355"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTg0ODUzOnYy", "diffSide": "RIGHT", "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientCQAutoSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMTowNzo0OVrOH5uX3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMTowNzo0OVrOH5uX3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI5MDY1Mw==", "bodyText": "Please change the test name. Something like testCorrectClassPathsAutoSerializer", "url": "https://github.com/apache/geode/pull/5730#discussion_r530290653", "createdAt": "2020-11-25T11:07:49Z", "author": {"login": "mkevo"}, "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientCQAutoSerializer.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.tier.sockets;\n+\n+import static org.apache.geode.cache.Region.SEPARATOR;\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientRegionFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.client.internal.PoolImpl;\n+import org.apache.geode.cache.query.CqAttributesFactory;\n+import org.apache.geode.cache.query.CqQuery;\n+import org.apache.geode.cache.query.QueryService;\n+import org.apache.geode.internal.cache.CacheServerImpl;\n+import org.apache.geode.pdx.ReflectionBasedAutoSerializer;\n+import org.apache.geode.pdx.internal.AutoSerializableManager;\n+import org.apache.geode.test.dunit.Invoke;\n+import org.apache.geode.test.dunit.rules.ClientVM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.ClientSubscriptionTest;\n+import org.apache.geode.test.junit.categories.SerializationTest;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+\n+@Category({ClientSubscriptionTest.class, SerializationTest.class})\n+public class DurableClientCQAutoSerializer implements Serializable {\n+  private static final String REPLICATE_REGION_NAME = \"ReplicateRegion\";\n+  private static final String PARTITION_REGION_NAME = \"PartitionRegion\";\n+\n+  private MemberVM server;\n+  private MemberVM server2;\n+  private MemberVM locator;\n+  private ClientVM client;\n+  private ClientVM client2;\n+\n+  private static TestAutoSerializerCqListener cqListener = null;\n+\n+  private static final String TEST_OBJECT1_CLASS_PATH =\n+      \"org.apache.geode.internal.cache.tier.sockets.TestAutoSerializerObject1\";\n+  private static final String TEST_OBJECT2_CLASS_PATH =\n+      \"org.apache.geode.internal.cache.tier.sockets.TestAutoSerializerObject2\";\n+  private static final String TEST_FAULTY_CLASS_PATH =\n+      \"org.apache.geode.internal.cache.tier.sockets.TestAutoSerializerObject2Faulty\";\n+  private static final String DURABLE_CLIENT_ID = \"durableClient\";\n+\n+  // Traffic data\n+  static final Map<String, TestAutoSerializerObject1> LIST_TEST_OBJECT1 = ImmutableMap.of(\n+      \"key1\", new TestAutoSerializerObject1(\"aa\", \"bb\", 300),\n+      \"key2\", new TestAutoSerializerObject1(\"aa\", \"bb\", 600),\n+      \"key3\", new TestAutoSerializerObject1(\"aaa\", \"bbb\", 500));\n+\n+  static final Map<String, TestAutoSerializerObject2> LIST_TEST_OBJECT2 = ImmutableMap.of(\n+      \"key1\", new TestAutoSerializerObject2(\"cc\", \"ddd\", 300),\n+      \"key2\", new TestAutoSerializerObject2(\"cc\", \"dddd\", 400));\n+\n+  @Rule\n+  public GfshCommandRule gfsh = new GfshCommandRule();\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule(5);\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    Invoke.invokeInEveryVM(\n+        () -> System.setProperty(AutoSerializableManager.NO_HARDCODED_EXCLUDES_PARAM, \"true\"));\n+\n+    locator =\n+        cluster.startLocatorVM(0);\n+    int locatorPort = locator.getPort();\n+    server = cluster.startServerVM(1,\n+        s -> s.withConnectionToLocator(locatorPort));\n+\n+    server2 = cluster.startServerVM(2,\n+        s -> s.withConnectionToLocator(locatorPort));\n+\n+    gfsh.connectAndVerify(locator);\n+    gfsh.executeAndAssertThat(\n+        \"configure pdx --auto-serializable-classes='\" + TEST_OBJECT1_CLASS_PATH + \", \"\n+            + TEST_OBJECT2_CLASS_PATH + \"'\")\n+        .statusIsSuccess();\n+    gfsh.executeAndAssertThat(\"create region --name=\" + REPLICATE_REGION_NAME + \" --type=REPLICATE\")\n+        .statusIsSuccess();\n+    gfsh.executeAndAssertThat(\"create region --name=\" + PARTITION_REGION_NAME + \" --type=PARTITION\")\n+        .statusIsSuccess();\n+\n+    locator.invoke(() -> {\n+      ClusterStartupRule.memberStarter\n+          .waitUntilRegionIsReadyOnExactlyThisManyServers(SEPARATOR + REPLICATE_REGION_NAME, 2);\n+      ClusterStartupRule.memberStarter\n+          .waitUntilRegionIsReadyOnExactlyThisManyServers(SEPARATOR + PARTITION_REGION_NAME, 2);\n+    });\n+  }\n+\n+  @Test\n+  public void correctClassPathsAutoSerializer()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c93268a267e78b1758d1422dd1e1ad3998c0a355"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTg0ODY4OnYy", "diffSide": "RIGHT", "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientCQAutoSerializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMTowNzo1MlrOH5uX9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMTowNzo1MlrOH5uX9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI5MDY3OA==", "bodyText": "The same as above. Something like testFaultyClassPathAutoSerializer", "url": "https://github.com/apache/geode/pull/5730#discussion_r530290678", "createdAt": "2020-11-25T11:07:52Z", "author": {"login": "mkevo"}, "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/DurableClientCQAutoSerializer.java", "diffHunk": "@@ -0,0 +1,289 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.tier.sockets;\n+\n+import static org.apache.geode.cache.Region.SEPARATOR;\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.Serializable;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import com.google.common.collect.ImmutableMap;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientRegionFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.client.internal.PoolImpl;\n+import org.apache.geode.cache.query.CqAttributesFactory;\n+import org.apache.geode.cache.query.CqQuery;\n+import org.apache.geode.cache.query.QueryService;\n+import org.apache.geode.internal.cache.CacheServerImpl;\n+import org.apache.geode.pdx.ReflectionBasedAutoSerializer;\n+import org.apache.geode.pdx.internal.AutoSerializableManager;\n+import org.apache.geode.test.dunit.Invoke;\n+import org.apache.geode.test.dunit.rules.ClientVM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.ClientSubscriptionTest;\n+import org.apache.geode.test.junit.categories.SerializationTest;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+\n+@Category({ClientSubscriptionTest.class, SerializationTest.class})\n+public class DurableClientCQAutoSerializer implements Serializable {\n+  private static final String REPLICATE_REGION_NAME = \"ReplicateRegion\";\n+  private static final String PARTITION_REGION_NAME = \"PartitionRegion\";\n+\n+  private MemberVM server;\n+  private MemberVM server2;\n+  private MemberVM locator;\n+  private ClientVM client;\n+  private ClientVM client2;\n+\n+  private static TestAutoSerializerCqListener cqListener = null;\n+\n+  private static final String TEST_OBJECT1_CLASS_PATH =\n+      \"org.apache.geode.internal.cache.tier.sockets.TestAutoSerializerObject1\";\n+  private static final String TEST_OBJECT2_CLASS_PATH =\n+      \"org.apache.geode.internal.cache.tier.sockets.TestAutoSerializerObject2\";\n+  private static final String TEST_FAULTY_CLASS_PATH =\n+      \"org.apache.geode.internal.cache.tier.sockets.TestAutoSerializerObject2Faulty\";\n+  private static final String DURABLE_CLIENT_ID = \"durableClient\";\n+\n+  // Traffic data\n+  static final Map<String, TestAutoSerializerObject1> LIST_TEST_OBJECT1 = ImmutableMap.of(\n+      \"key1\", new TestAutoSerializerObject1(\"aa\", \"bb\", 300),\n+      \"key2\", new TestAutoSerializerObject1(\"aa\", \"bb\", 600),\n+      \"key3\", new TestAutoSerializerObject1(\"aaa\", \"bbb\", 500));\n+\n+  static final Map<String, TestAutoSerializerObject2> LIST_TEST_OBJECT2 = ImmutableMap.of(\n+      \"key1\", new TestAutoSerializerObject2(\"cc\", \"ddd\", 300),\n+      \"key2\", new TestAutoSerializerObject2(\"cc\", \"dddd\", 400));\n+\n+  @Rule\n+  public GfshCommandRule gfsh = new GfshCommandRule();\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule(5);\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    Invoke.invokeInEveryVM(\n+        () -> System.setProperty(AutoSerializableManager.NO_HARDCODED_EXCLUDES_PARAM, \"true\"));\n+\n+    locator =\n+        cluster.startLocatorVM(0);\n+    int locatorPort = locator.getPort();\n+    server = cluster.startServerVM(1,\n+        s -> s.withConnectionToLocator(locatorPort));\n+\n+    server2 = cluster.startServerVM(2,\n+        s -> s.withConnectionToLocator(locatorPort));\n+\n+    gfsh.connectAndVerify(locator);\n+    gfsh.executeAndAssertThat(\n+        \"configure pdx --auto-serializable-classes='\" + TEST_OBJECT1_CLASS_PATH + \", \"\n+            + TEST_OBJECT2_CLASS_PATH + \"'\")\n+        .statusIsSuccess();\n+    gfsh.executeAndAssertThat(\"create region --name=\" + REPLICATE_REGION_NAME + \" --type=REPLICATE\")\n+        .statusIsSuccess();\n+    gfsh.executeAndAssertThat(\"create region --name=\" + PARTITION_REGION_NAME + \" --type=PARTITION\")\n+        .statusIsSuccess();\n+\n+    locator.invoke(() -> {\n+      ClusterStartupRule.memberStarter\n+          .waitUntilRegionIsReadyOnExactlyThisManyServers(SEPARATOR + REPLICATE_REGION_NAME, 2);\n+      ClusterStartupRule.memberStarter\n+          .waitUntilRegionIsReadyOnExactlyThisManyServers(SEPARATOR + PARTITION_REGION_NAME, 2);\n+    });\n+  }\n+\n+  @Test\n+  public void correctClassPathsAutoSerializer()\n+      throws Exception {\n+\n+    String query1 = \"SELECT * FROM \" + SEPARATOR + REPLICATE_REGION_NAME;\n+    String query2 = \"SELECT * FROM \" + SEPARATOR + PARTITION_REGION_NAME;\n+\n+    startDurableClient(TEST_OBJECT1_CLASS_PATH, TEST_OBJECT2_CLASS_PATH);\n+    createDurableCQs(query1, query2);\n+    verifyThatOnlyOneServerHostDurableSubscription();\n+\n+    // Start another client and provision data with traffic that should trigger CQs\n+    startDataProvisionClient(TEST_OBJECT1_CLASS_PATH, TEST_OBJECT2_CLASS_PATH);\n+    provisionRegionsWithData();\n+\n+    // Check that all events are received and successfully deserialized in cq listener\n+    checkCqEvents(LIST_TEST_OBJECT1.size(), LIST_TEST_OBJECT2.size());\n+    verifyThatOnlyOneServerHostDurableSubscription();\n+  }\n+\n+  @Test\n+  public void faultyClassPathAutoSerializer()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c93268a267e78b1758d1422dd1e1ad3998c0a355"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTg0OTE3OnYy", "diffSide": "RIGHT", "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/TestAutoSerializerObject1.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMTowODowMFrOH5uYQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMTowODowMFrOH5uYQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI5MDc1Mg==", "bodyText": "Please change this numData3 to numData, also change get methods.", "url": "https://github.com/apache/geode/pull/5730#discussion_r530290752", "createdAt": "2020-11-25T11:08:00Z", "author": {"login": "mkevo"}, "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/TestAutoSerializerObject1.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.tier.sockets;\n+\n+import java.util.Objects;\n+\n+import org.apache.geode.internal.PdxSerializerObject;\n+\n+/**\n+ * <strong>Explicitly</strong> not serializable by java.io.Serializable,\n+ * org.apache.geode.DataSerializable, or org.apache.geode.pdx.PdxSerializable.\n+ */\n+public class TestAutoSerializerObject1 implements PdxSerializerObject {\n+  protected String data1;\n+  protected String data2;\n+  protected int numData3;\n+\n+  public TestAutoSerializerObject1() {\n+    this(\"\", \"\", 0);\n+  }\n+\n+  protected TestAutoSerializerObject1(String data1, String data2, int numData3) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c93268a267e78b1758d1422dd1e1ad3998c0a355"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTg0OTc5OnYy", "diffSide": "RIGHT", "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/TestAutoSerializerObject1.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMTowODoxMVrOH5uYsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMTowODoxMVrOH5uYsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI5MDg2Nw==", "bodyText": "Can you merge this if statement with one above as they returning the same value?", "url": "https://github.com/apache/geode/pull/5730#discussion_r530290867", "createdAt": "2020-11-25T11:08:11Z", "author": {"login": "mkevo"}, "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/TestAutoSerializerObject1.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.tier.sockets;\n+\n+import java.util.Objects;\n+\n+import org.apache.geode.internal.PdxSerializerObject;\n+\n+/**\n+ * <strong>Explicitly</strong> not serializable by java.io.Serializable,\n+ * org.apache.geode.DataSerializable, or org.apache.geode.pdx.PdxSerializable.\n+ */\n+public class TestAutoSerializerObject1 implements PdxSerializerObject {\n+  protected String data1;\n+  protected String data2;\n+  protected int numData3;\n+\n+  public TestAutoSerializerObject1() {\n+    this(\"\", \"\", 0);\n+  }\n+\n+  protected TestAutoSerializerObject1(String data1, String data2, int numData3) {\n+    this.data1 = data1;\n+    this.data2 = data2;\n+    this.numData3 = numData3;\n+  }\n+\n+  public String getData1() {\n+    return data1;\n+  }\n+\n+  public String getData2() {\n+    return data2;\n+  }\n+\n+  public void setData2(String data2) {\n+    this.data2 = data2;\n+  }\n+\n+  public int getNumData3() {\n+    return numData3;\n+  }\n+\n+  public void setNumData3(int numData3) {\n+    this.numData3 = numData3;\n+  }\n+\n+  public String toString() {\n+    StringBuilder builder = new StringBuilder();\n+    if (data1 != null && !data1.isEmpty()) {\n+      builder.append(data1);\n+      builder.append(\" (\");\n+\n+      if (data2 != null && !data2.isEmpty()) {\n+        if (0 < builder.length() && '(' != builder.charAt(builder.length() - 1)) {\n+          builder.append(\", \");\n+        }\n+        builder.append(\"data2: \");\n+        builder.append(data2);\n+      }\n+\n+      if (0 < numData3) {\n+        if (0 < builder.length() && '(' != builder.charAt(builder.length() - 1)) {\n+          builder.append(\", \");\n+        }\n+        builder.append(\"numData3: \");\n+        builder.append(numData3);\n+      }\n+\n+      builder.append(\")\");\n+    }\n+    return builder.toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+\n+    if (this == o)\n+      return true;\n+\n+    if (o == null)\n+      return false;\n+\n+    if (getClass() != o.getClass())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c93268a267e78b1758d1422dd1e1ad3998c0a355"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTg0OTk5OnYy", "diffSide": "RIGHT", "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/TestAutoSerializerObject2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMTowODoxNVrOH5uY0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMTowODoxNVrOH5uY0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI5MDg5OA==", "bodyText": "Please change this numData3 to numData, also change get methods.", "url": "https://github.com/apache/geode/pull/5730#discussion_r530290898", "createdAt": "2020-11-25T11:08:15Z", "author": {"login": "mkevo"}, "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/TestAutoSerializerObject2.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.tier.sockets;\n+\n+import java.util.Objects;\n+\n+import org.apache.geode.internal.PdxSerializerObject;\n+\n+/**\n+ * <strong>Explicitly</strong> not serializable by java.io.Serializable,\n+ * org.apache.geode.DataSerializable, or org.apache.geode.pdx.PdxSerializable.\n+ */\n+public class TestAutoSerializerObject2 implements PdxSerializerObject {\n+  protected String data1;\n+  protected String data2;\n+  protected int numData3;\n+\n+  public TestAutoSerializerObject2() {\n+    this(\"\", \"\", 0);\n+  }\n+\n+  protected TestAutoSerializerObject2(String data1, String data2, int numData3) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c93268a267e78b1758d1422dd1e1ad3998c0a355"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTg1MDIwOnYy", "diffSide": "RIGHT", "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/TestAutoSerializerObject2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMTowODoxOVrOH5uY9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMTowODoxOVrOH5uY9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI5MDkzMg==", "bodyText": "Can you merge this if statement with one above as they returning the same value?", "url": "https://github.com/apache/geode/pull/5730#discussion_r530290932", "createdAt": "2020-11-25T11:08:19Z", "author": {"login": "mkevo"}, "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/TestAutoSerializerObject2.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.tier.sockets;\n+\n+import java.util.Objects;\n+\n+import org.apache.geode.internal.PdxSerializerObject;\n+\n+/**\n+ * <strong>Explicitly</strong> not serializable by java.io.Serializable,\n+ * org.apache.geode.DataSerializable, or org.apache.geode.pdx.PdxSerializable.\n+ */\n+public class TestAutoSerializerObject2 implements PdxSerializerObject {\n+  protected String data1;\n+  protected String data2;\n+  protected int numData3;\n+\n+  public TestAutoSerializerObject2() {\n+    this(\"\", \"\", 0);\n+  }\n+\n+  protected TestAutoSerializerObject2(String data1, String data2, int numData3) {\n+    this.data1 = data1;\n+    this.data2 = data2;\n+    this.numData3 = numData3;\n+  }\n+\n+  public String getData1() {\n+    return data1;\n+  }\n+\n+  public String getData2() {\n+    return data2;\n+  }\n+\n+  public void setData2(String data2) {\n+    this.data2 = data2;\n+  }\n+\n+  public int getNumData3() {\n+    return numData3;\n+  }\n+\n+  public void setNumData3(int numData3) {\n+    this.numData3 = numData3;\n+  }\n+\n+  public String toString() {\n+    StringBuilder builder = new StringBuilder();\n+    if (data1 != null && !data1.isEmpty()) {\n+      builder.append(data1);\n+      builder.append(\" (\");\n+\n+      if (data2 != null && !data2.isEmpty()) {\n+        if (0 < builder.length() && '(' != builder.charAt(builder.length() - 1)) {\n+          builder.append(\", \");\n+        }\n+        builder.append(\"data2: \");\n+        builder.append(data2);\n+      }\n+\n+      if (0 < numData3) {\n+        if (0 < builder.length() && '(' != builder.charAt(builder.length() - 1)) {\n+          builder.append(\", \");\n+        }\n+        builder.append(\"numData3: \");\n+        builder.append(numData3);\n+      }\n+\n+      builder.append(\")\");\n+    }\n+    return builder.toString();\n+  }\n+\n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o)\n+      return true;\n+\n+    if (o == null)\n+      return false;\n+\n+    if (getClass() != o.getClass())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c93268a267e78b1758d1422dd1e1ad3998c0a355"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4625, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}