{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4MTQ2Njgy", "number": 5595, "title": "GEODE-8572: Make LogExporter not read dirs", "bodyText": "Changed LogExporter to refrain from attempting to read directories, even\nwhen a directory's path matches the exporter's file selector predicates.\nChanged LogExporterIntegrationTest to configure the server to write\nfiles in a unique subdirectory of the current working directory. Some\ntests were configuring the server to use a temporary folder that could\nbe reused by other tests.", "createdAt": "2020-10-05T22:12:11Z", "url": "https://github.com/apache/geode/pull/5595", "merged": true, "mergeCommit": {"oid": "dbd180319aa6435091fd87b7aeac4e542565011c"}, "closed": true, "closedAt": "2020-10-07T00:14:27Z", "author": {"login": "demery-pivotal"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdPrfW0AH2gAyNDk4MTQ2NjgyOjA5Y2QyNWQ3ZmQ5ZmIwMzQzMGFmODRmMmNkZmVkNDc5M2IyZTYzMzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdP7_sSAFqTUwMzE5MTUyNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "09cd25d7fd9fb03430af84f2cdfed4793b2e6330", "author": {"user": {"login": "demery-pivotal", "name": "Dale Emery"}}, "url": "https://github.com/apache/geode/commit/09cd25d7fd9fb03430af84f2cdfed4793b2e6330", "committedDate": "2020-10-05T22:26:16Z", "message": "GEODE-8572: Make LogExporter not read dirs\n\nChanged LogExporter to refrain from attempting to read directories, even\nwhen a directory's path matches the exporter's file selector predicates.\n\nChanged LogExporterIntegrationTest to configure the server to write\nfiles in a unique subdirectory of the current working directory. Some\ntests were configuring the server to use a temporary folder that could\nbe reused by other tests."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd496cec465a342442d5bada368a72a317e37e3c", "author": {"user": {"login": "demery-pivotal", "name": "Dale Emery"}}, "url": "https://github.com/apache/geode/commit/dd496cec465a342442d5bada368a72a317e37e3c", "committedDate": "2020-10-05T22:03:30Z", "message": "GEODE-8572: Make LogExporter not read dirs\n\nChanged LogExporter to refrain from attempting to read directories, even\nwhen a directory's path matches the exporter's file selector predicates.\n\nChanged LogExporterIntegrationTest to configure the server to write\nfiles in a unique subdirectory of the current working directory. Some\ntests were configuring the server to use a temporary folder that could\nbe reused by other tests."}, "afterCommit": {"oid": "09cd25d7fd9fb03430af84f2cdfed4793b2e6330", "author": {"user": {"login": "demery-pivotal", "name": "Dale Emery"}}, "url": "https://github.com/apache/geode/commit/09cd25d7fd9fb03430af84f2cdfed4793b2e6330", "committedDate": "2020-10-05T22:26:16Z", "message": "GEODE-8572: Make LogExporter not read dirs\n\nChanged LogExporter to refrain from attempting to read directories, even\nwhen a directory's path matches the exporter's file selector predicates.\n\nChanged LogExporterIntegrationTest to configure the server to write\nfiles in a unique subdirectory of the current working directory. Some\ntests were configuring the server to use a temporary folder that could\nbe reused by other tests."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTAzODg1", "url": "https://github.com/apache/geode/pull/5595#pullrequestreview-503103885", "createdAt": "2020-10-06T15:40:17Z", "commit": {"oid": "09cd25d7fd9fb03430af84f2cdfed4793b2e6330"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTkxNTI2", "url": "https://github.com/apache/geode/pull/5595#pullrequestreview-503191526", "createdAt": "2020-10-06T17:18:51Z", "commit": {"oid": "09cd25d7fd9fb03430af84f2cdfed4793b2e6330"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzoxODo1MVrOHdSE6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzozMjo1OFrOHdSnzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ2NjkyMA==", "bodyText": "By default, this follows the symbolic link. Just make sure this is expected.", "url": "https://github.com/apache/geode/pull/5595#discussion_r500466920", "createdAt": "2020-10-06T17:18:51Z", "author": {"login": "jchen21"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/util/LogExporter.java", "diffHunk": "@@ -181,12 +180,13 @@ private long filterAndSize(Path originalLogFile) throws IOException {\n   }\n \n   private List<Path> findFiles(Path workingDir, Predicate<Path> fileSelector) throws IOException {\n-    Stream<Path> selectedFiles/* = null */;\n     if (!workingDir.toFile().isDirectory()) {\n       return Collections.emptyList();\n     }\n-    selectedFiles = Files.list(workingDir).filter(fileSelector).filter(this.logFilter::acceptsFile);\n-\n-    return selectedFiles.collect(toList());\n+    return Files.list(workingDir)\n+        .filter(Files::isRegularFile)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09cd25d7fd9fb03430af84f2cdfed4793b2e6330"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ3NTg1NQ==", "bodyText": "Not sure why this test is @ignore. Any change to the test is not executed.", "url": "https://github.com/apache/geode/pull/5595#discussion_r500475855", "createdAt": "2020-10-06T17:32:58Z", "author": {"login": "jchen21"}, "path": "geode-gfsh/src/integrationTest/java/org/apache/geode/management/internal/cli/util/LogExporterIntegrationTest.java", "diffHunk": "@@ -50,127 +48,146 @@\n \n @Category({GfshTest.class, LoggingTest.class})\n public class LogExporterIntegrationTest {\n+  @Rule\n+  public ServerStarterRule server = new ServerStarterRule();\n \n   private final LogFilter filter = new LogFilter(Level.INFO, null, null);\n \n-  private LogExporter logExporter;\n-  private Properties properties;\n-\n-  @Rule\n-  public ServerStarterRule server = new ServerStarterRule();\n+  public Path serverFilesDir;\n \n   @Before\n-  public void before() {\n-    properties = new Properties();\n-    // make sure the server's working dir has no log files or stats file to begin with, since in\n-    // some tests we are asserting on the # of log files and stats files created by the server\n-    File workingDir = server.getWorkingDir();\n-    Arrays.stream(workingDir.listFiles())\n-        .filter(f -> (f.getName().endsWith(\".log\") || f.getName().endsWith(\".gfs\")))\n-        .forEach(FileUtils::deleteQuietly);\n+  public void createServerFilesDir() throws IOException {\n+    // Name the directory after this test instance and the Gradle test worker, to ensure that tests\n+    // running in parallel use different directories.\n+    String testRunnerID = System.getProperty(\"org.gradle.test.worker\", \"standalone\");\n+    int testInstanceID = System.identityHashCode(this);\n+    String className = getClass().getSimpleName();\n+    String dirName = String.format(\"%s-%x-%s\", className, testInstanceID, testRunnerID);\n+    serverFilesDir = Files.createDirectories(Paths.get(dirName)).normalize().toAbsolutePath();\n+  }\n+\n+  @After\n+  public void deleteServerFilesDir() {\n+    FileUtils.deleteQuietly(serverFilesDir.toFile());\n   }\n \n   @Test\n   public void serverStartedWithWrongSuffix() throws Exception {\n-    properties.setProperty(LOG_FILE, new File(\"test.txt\").getAbsolutePath());\n-    properties.setProperty(STATISTIC_ARCHIVE_FILE, \"archive.archive\");\n-    server.withProperties(properties).startServer();\n-    File serverWorkingDir = server.getWorkingDir();\n-\n-    logExporter = new LogExporter(filter, new File(serverWorkingDir, \"test.log\"),\n-        new File(serverWorkingDir, \"stats.gfs\"));\n-    List<Path> logFiles = logExporter.findLogFiles(serverWorkingDir.toPath());\n-    assertThat(logFiles).isEmpty();\n-\n-    List<Path> statsFiles = logExporter.findStatFiles(serverWorkingDir.toPath());\n-    assertThat(statsFiles).isEmpty();\n+    String logFileNameWithWrongSuffix = \"test.txt\";\n+    String statsFileNameWithWrongSuffix = \"archive.archive\";\n+\n+    Path logFile = serverFilesDir.resolve(logFileNameWithWrongSuffix);\n+    Path statsFile = serverFilesDir.resolve(statsFileNameWithWrongSuffix);\n+\n+    server.withProperty(LOG_FILE, logFile.toString())\n+        .withProperty(STATISTIC_ARCHIVE_FILE, statsFile.toString())\n+        .startServer();\n+\n+    LogExporter logExporter = new LogExporter(filter, null, null);\n+    List<Path> logFiles = logExporter.findLogFiles(serverFilesDir);\n+\n+    assertThat(logFiles)\n+        .as(\"log files\")\n+        .isEmpty();\n+\n+    List<Path> statsFiles = logExporter.findStatFiles(serverFilesDir);\n+    assertThat(statsFiles)\n+        .as(\"stat files\")\n+        .isEmpty();\n   }\n \n   @Test\n   public void serverStartedWithCorrectSuffix() throws Exception {\n-    // (\"relative log file is problematic in the test environment\")\n-    properties.setProperty(LOG_FILE, new File(\"test.log\").getAbsolutePath());\n-    properties.setProperty(STATISTIC_ARCHIVE_FILE, \"archive.gfs\");\n-    server.withProperties(properties).startServer();\n-    File serverWorkingDir = server.getWorkingDir();\n-\n-    logExporter = new LogExporter(filter, new File(serverWorkingDir, \"test.log\"),\n-        new File(serverWorkingDir, \"archive.gfs\"));\n-    List<Path> logFiles = logExporter.findLogFiles(serverWorkingDir.toPath());\n-    assertThat(logFiles).hasSize(1);\n-    assertThat(logFiles.get(0)).hasFileName(\"test.log\");\n-\n-    List<Path> statsFiles = logExporter.findStatFiles(serverWorkingDir.toPath());\n-    assertThat(statsFiles).hasSize(1);\n-    assertThat(statsFiles.get(0)).hasFileName(\"archive.gfs\");\n+    String logFileName = \"test.log\";\n+    String statsFileName = \"archive.gfs\";\n+    Path logFile = serverFilesDir.resolve(logFileName);\n+    Path statsFile = serverFilesDir.resolve(statsFileName);\n+\n+    server.withProperty(LOG_FILE, logFile.toString())\n+        .withProperty(STATISTIC_ARCHIVE_FILE, statsFile.toString())\n+        .startServer();\n+\n+    LogExporter logExporter = new LogExporter(filter, null, null);\n+    List<Path> logFiles = logExporter.findLogFiles(serverFilesDir);\n+\n+    assertThat(logFiles)\n+        .as(\"log files\")\n+        .hasSize(1);\n+    assertThat(logFiles.get(0)).hasFileName(logFileName);\n+\n+    List<Path> statsFiles = logExporter.findStatFiles(serverFilesDir);\n+    assertThat(statsFiles)\n+        .as(\"stat files\")\n+        .hasSize(1);\n+    assertThat(statsFiles.get(0)).hasFileName(statsFileName);\n   }\n \n   @Test\n   @Ignore(\"GEODE-2574: fix .gz suffix\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09cd25d7fd9fb03430af84f2cdfed4793b2e6330"}, "originalPosition": 143}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4067, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}