{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzODMyNTE3", "number": 5058, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzoyNjoyNVrOD6f2Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzozMjoyNVrOD6f6MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjY1NzY2OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/SScanExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzoyNjoyNVrOGSXsvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNDo0NzowNVrOGSY5Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxNTgzOQ==", "bodyText": "I don't think returnList can ever be null.  In that case, this check is unnecessary", "url": "https://github.com/apache/geode/pull/5058#discussion_r421915839", "createdAt": "2020-05-08T03:26:25Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/SScanExecutor.java", "diffHunk": "@@ -108,53 +99,17 @@ public void executeCommand(Command command, ExecutionHandlerContext context) {\n       return;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    List<ByteArrayWrapper> returnList =\n-        (List<ByteArrayWrapper>) getIteration(new ArrayList<>(set), matchPattern,\n-            count, cursor);\n-\n+    RedisSetCommands redisSetCommands =\n+        new RedisSetCommandsFunctionExecutor(context.getRegionProvider().getSetRegion());\n+    List<Object> returnList = redisSetCommands.sscan(key, matchPattern, count, cursor);\n+    if (returnList == null) {\n+      returnList = Collections.emptyList();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0703fe20aebc8c521e394a3d0a9dd5501641c7"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNTQzMQ==", "bodyText": "done", "url": "https://github.com/apache/geode/pull/5058#discussion_r421935431", "createdAt": "2020-05-08T04:47:05Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/SScanExecutor.java", "diffHunk": "@@ -108,53 +99,17 @@ public void executeCommand(Command command, ExecutionHandlerContext context) {\n       return;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    List<ByteArrayWrapper> returnList =\n-        (List<ByteArrayWrapper>) getIteration(new ArrayList<>(set), matchPattern,\n-            count, cursor);\n-\n+    RedisSetCommands redisSetCommands =\n+        new RedisSetCommandsFunctionExecutor(context.getRegionProvider().getSetRegion());\n+    List<Object> returnList = redisSetCommands.sscan(key, matchPattern, count, cursor);\n+    if (returnList == null) {\n+      returnList = Collections.emptyList();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxNTgzOQ=="}, "originalCommit": {"oid": "3c0703fe20aebc8c521e394a3d0a9dd5501641c7"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjY2NzIwOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/RedisSet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzozMTo0OVrOGSXyNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNDo0NzoyMVrOGSY5gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxNzIzOA==", "bodyText": "does the calling code differentiate between null and an empty collection? If not, can we just return an empty collection and get rid of the upstream null checks.", "url": "https://github.com/apache/geode/pull/5058#discussion_r421917238", "createdAt": "2020-05-08T03:31:49Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/RedisSet.java", "diffHunk": "@@ -98,6 +102,156 @@ public static boolean del(Region<ByteArrayWrapper, RedisSet> region,\n     }\n   }\n \n+  public static int scard(Region<ByteArrayWrapper, RedisSet> region, ByteArrayWrapper key) {\n+    RedisSet redisSet = region.get(key);\n+    if (redisSet != null) {\n+      return redisSet.size();\n+    } else {\n+      return -1;\n+    }\n+  }\n+\n+  public static boolean sismember(Region<ByteArrayWrapper, RedisSet> region,\n+      ByteArrayWrapper key, ByteArrayWrapper member) {\n+    RedisSet redisSet = region.get(key);\n+    if (redisSet != null) {\n+      return redisSet.contains(member);\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  public static Collection<ByteArrayWrapper> srandmember(Region<ByteArrayWrapper, RedisSet> region,\n+      ByteArrayWrapper key, int count) {\n+    RedisSet redisSet = region.get(key);\n+    if (redisSet != null) {\n+      return redisSet.srandmember(count);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public static Collection<ByteArrayWrapper> spop(Region<ByteArrayWrapper, RedisSet> region,\n+      ByteArrayWrapper key, int popCount) {\n+    RedisSet redisSet = region.get(key);\n+    if (redisSet != null) {\n+      return redisSet.doSpop(region, key, popCount);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public static List<Object> sscan(Region<ByteArrayWrapper, RedisSet> region,\n+      ByteArrayWrapper key, Pattern matchPattern, int count, int cursor) {\n+    RedisSet RedisSet = region.get(key);\n+    if (RedisSet != null) {\n+      return RedisSet.doSscan(matchPattern, count, cursor);\n+    } else {\n+      return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0703fe20aebc8c521e394a3d0a9dd5501641c7"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNTQ5MQ==", "bodyText": "done", "url": "https://github.com/apache/geode/pull/5058#discussion_r421935491", "createdAt": "2020-05-08T04:47:21Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/RedisSet.java", "diffHunk": "@@ -98,6 +102,156 @@ public static boolean del(Region<ByteArrayWrapper, RedisSet> region,\n     }\n   }\n \n+  public static int scard(Region<ByteArrayWrapper, RedisSet> region, ByteArrayWrapper key) {\n+    RedisSet redisSet = region.get(key);\n+    if (redisSet != null) {\n+      return redisSet.size();\n+    } else {\n+      return -1;\n+    }\n+  }\n+\n+  public static boolean sismember(Region<ByteArrayWrapper, RedisSet> region,\n+      ByteArrayWrapper key, ByteArrayWrapper member) {\n+    RedisSet redisSet = region.get(key);\n+    if (redisSet != null) {\n+      return redisSet.contains(member);\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  public static Collection<ByteArrayWrapper> srandmember(Region<ByteArrayWrapper, RedisSet> region,\n+      ByteArrayWrapper key, int count) {\n+    RedisSet redisSet = region.get(key);\n+    if (redisSet != null) {\n+      return redisSet.srandmember(count);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public static Collection<ByteArrayWrapper> spop(Region<ByteArrayWrapper, RedisSet> region,\n+      ByteArrayWrapper key, int popCount) {\n+    RedisSet redisSet = region.get(key);\n+    if (redisSet != null) {\n+      return redisSet.doSpop(region, key, popCount);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public static List<Object> sscan(Region<ByteArrayWrapper, RedisSet> region,\n+      ByteArrayWrapper key, Pattern matchPattern, int count, int cursor) {\n+    RedisSet RedisSet = region.get(key);\n+    if (RedisSet != null) {\n+      return RedisSet.doSscan(matchPattern, count, cursor);\n+    } else {\n+      return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxNzIzOA=="}, "originalCommit": {"oid": "3c0703fe20aebc8c521e394a3d0a9dd5501641c7"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNjY2ODAwOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/RedisSet.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwMzozMjoyNVrOGSXyrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQwNDo0OTozNFrOGSY7kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxNzM1Ng==", "bodyText": "does the calling code differentiate between null and an empty collection? If not, can we just return an empty collection and get rid of the upstream null checks.", "url": "https://github.com/apache/geode/pull/5058#discussion_r421917356", "createdAt": "2020-05-08T03:32:25Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/RedisSet.java", "diffHunk": "@@ -98,6 +102,156 @@ public static boolean del(Region<ByteArrayWrapper, RedisSet> region,\n     }\n   }\n \n+  public static int scard(Region<ByteArrayWrapper, RedisSet> region, ByteArrayWrapper key) {\n+    RedisSet redisSet = region.get(key);\n+    if (redisSet != null) {\n+      return redisSet.size();\n+    } else {\n+      return -1;\n+    }\n+  }\n+\n+  public static boolean sismember(Region<ByteArrayWrapper, RedisSet> region,\n+      ByteArrayWrapper key, ByteArrayWrapper member) {\n+    RedisSet redisSet = region.get(key);\n+    if (redisSet != null) {\n+      return redisSet.contains(member);\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  public static Collection<ByteArrayWrapper> srandmember(Region<ByteArrayWrapper, RedisSet> region,\n+      ByteArrayWrapper key, int count) {\n+    RedisSet redisSet = region.get(key);\n+    if (redisSet != null) {\n+      return redisSet.srandmember(count);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public static Collection<ByteArrayWrapper> spop(Region<ByteArrayWrapper, RedisSet> region,\n+      ByteArrayWrapper key, int popCount) {\n+    RedisSet redisSet = region.get(key);\n+    if (redisSet != null) {\n+      return redisSet.doSpop(region, key, popCount);\n+    } else {\n+      return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c0703fe20aebc8c521e394a3d0a9dd5501641c7"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkzNjAxNg==", "bodyText": "done", "url": "https://github.com/apache/geode/pull/5058#discussion_r421936016", "createdAt": "2020-05-08T04:49:34Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/set/RedisSet.java", "diffHunk": "@@ -98,6 +102,156 @@ public static boolean del(Region<ByteArrayWrapper, RedisSet> region,\n     }\n   }\n \n+  public static int scard(Region<ByteArrayWrapper, RedisSet> region, ByteArrayWrapper key) {\n+    RedisSet redisSet = region.get(key);\n+    if (redisSet != null) {\n+      return redisSet.size();\n+    } else {\n+      return -1;\n+    }\n+  }\n+\n+  public static boolean sismember(Region<ByteArrayWrapper, RedisSet> region,\n+      ByteArrayWrapper key, ByteArrayWrapper member) {\n+    RedisSet redisSet = region.get(key);\n+    if (redisSet != null) {\n+      return redisSet.contains(member);\n+    } else {\n+      return false;\n+    }\n+  }\n+\n+  public static Collection<ByteArrayWrapper> srandmember(Region<ByteArrayWrapper, RedisSet> region,\n+      ByteArrayWrapper key, int count) {\n+    RedisSet redisSet = region.get(key);\n+    if (redisSet != null) {\n+      return redisSet.srandmember(count);\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  public static Collection<ByteArrayWrapper> spop(Region<ByteArrayWrapper, RedisSet> region,\n+      ByteArrayWrapper key, int popCount) {\n+    RedisSet redisSet = region.get(key);\n+    if (redisSet != null) {\n+      return redisSet.doSpop(region, key, popCount);\n+    } else {\n+      return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTkxNzM1Ng=="}, "originalCommit": {"oid": "3c0703fe20aebc8c521e394a3d0a9dd5501641c7"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4185, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}