{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMjAyODUx", "number": 4580, "title": "GEODE-5407: Fix JMXMBeanReconnectDUnitTest", "bodyText": "GEODE-5407: Fix JMXMBeanReconnectDUnitTest\n\n* Rewrite test with standard Geode and JMX APIs\n* Use CountDownLatch instead of Blackboard\n* Use SharedErrorCollector for remote listener errors\n* Always consistently use Awaitility before checking GemFire MXBeans\n    \nCo-authored-by: Ivan Godwin <igodwin@pivotal.io>", "createdAt": "2020-01-09T23:09:50Z", "url": "https://github.com/apache/geode/pull/4580", "merged": true, "mergeCommit": {"oid": "21fce819826f79e6f52adb829a5b2636a1213d9a"}, "closed": true, "closedAt": "2020-01-14T17:48:48Z", "author": {"login": "kirklund"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4ye4GABqjI5MzY4MDE2NTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb6UqO3AFqTM0MjcxOTY3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7c0e12a72aa4224c92dcf2bce67a4115ea19da29", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/7c0e12a72aa4224c92dcf2bce67a4115ea19da29", "committedDate": "2020-01-09T23:21:48Z", "message": "Fixup"}, "afterCommit": {"oid": "66525f917335c00125368c7570871bc6ac4242b5", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/66525f917335c00125368c7570871bc6ac4242b5", "committedDate": "2020-01-09T23:23:31Z", "message": "GEODE-5407: Fix JMXMBeanReconnectDUnitTest\n\nRewrite test with standard Geode and JMX APIs.\n\nUse Awaitility consistently before validating GemFire MXBeans."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66525f917335c00125368c7570871bc6ac4242b5", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/66525f917335c00125368c7570871bc6ac4242b5", "committedDate": "2020-01-09T23:23:31Z", "message": "GEODE-5407: Fix JMXMBeanReconnectDUnitTest\n\nRewrite test with standard Geode and JMX APIs.\n\nUse Awaitility consistently before validating GemFire MXBeans."}, "afterCommit": {"oid": "49936e93909e467884e015b57149bdbdbe5c10cf", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/49936e93909e467884e015b57149bdbdbe5c10cf", "committedDate": "2020-01-09T23:23:56Z", "message": "GEODE-5407: Fix JMXMBeanReconnectDUnitTest\n\n* Rewrite test with standard Geode and JMX APIs\n* Use CountDownLatch instead of Blackboard\n* Use SharedErrorCollector for remote listener errors\n* Always consistently use Awaitility before checking GemFire MXBeans\n\nCo-authored-by: Ivan Godwin <igodwin@pivotal.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e5e0153297ed2498d358dcfb3c7d48d3d367ac5", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/9e5e0153297ed2498d358dcfb3c7d48d3d367ac5", "committedDate": "2020-01-10T23:06:37Z", "message": "Fixup"}, "afterCommit": {"oid": "cb6463bff5bdc1b60e4e292a084cb5e3698a9b5f", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/cb6463bff5bdc1b60e4e292a084cb5e3698a9b5f", "committedDate": "2020-01-10T23:07:12Z", "message": "GEODE-5407: Fix JMXMBeanReconnectDUnitTest\n\n* Rewrite test with standard Geode and JMX APIs\n* Use CountDownLatch instead of Blackboard\n* Use SharedErrorCollector for remote listener errors\n* Always consistently use Awaitility before checking GemFire MXBeans\n\nCo-authored-by: Ivan Godwin <igodwin@pivotal.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51b88a57b537f19876bc90edfdf3b067163b8d85", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/51b88a57b537f19876bc90edfdf3b067163b8d85", "committedDate": "2020-01-10T23:10:40Z", "message": "GEODE-5407: Fix JMXMBeanReconnectDUnitTest\n\n* Rewrite test with standard Geode and JMX APIs\n* Use CountDownLatch instead of Blackboard\n* Use SharedErrorCollector for remote listener errors\n* Always consistently use Awaitility before checking GemFire MXBeans\n\nCo-authored-by: Ivan Godwin <igodwin@pivotal.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb6463bff5bdc1b60e4e292a084cb5e3698a9b5f", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/cb6463bff5bdc1b60e4e292a084cb5e3698a9b5f", "committedDate": "2020-01-10T23:07:12Z", "message": "GEODE-5407: Fix JMXMBeanReconnectDUnitTest\n\n* Rewrite test with standard Geode and JMX APIs\n* Use CountDownLatch instead of Blackboard\n* Use SharedErrorCollector for remote listener errors\n* Always consistently use Awaitility before checking GemFire MXBeans\n\nCo-authored-by: Ivan Godwin <igodwin@pivotal.io>"}, "afterCommit": {"oid": "51b88a57b537f19876bc90edfdf3b067163b8d85", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/51b88a57b537f19876bc90edfdf3b067163b8d85", "committedDate": "2020-01-10T23:10:40Z", "message": "GEODE-5407: Fix JMXMBeanReconnectDUnitTest\n\n* Rewrite test with standard Geode and JMX APIs\n* Use CountDownLatch instead of Blackboard\n* Use SharedErrorCollector for remote listener errors\n* Always consistently use Awaitility before checking GemFire MXBeans\n\nCo-authored-by: Ivan Godwin <igodwin@pivotal.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMDg2OTc2", "url": "https://github.com/apache/geode/pull/4580#pullrequestreview-342086976", "createdAt": "2020-01-13T19:33:48Z", "commit": {"oid": "51b88a57b537f19876bc90edfdf3b067163b8d85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTozMzo0OFrOFdCJog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxOTozMzo0OFrOFdCJog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTk4ODI1OA==", "bodyText": "Is this change to default still required? It looks like we are overriding for each implementation of ReconnectListener.", "url": "https://github.com/apache/geode/pull/4580#discussion_r365988258", "createdAt": "2020-01-13T19:33:48Z", "author": {"login": "igodwin"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/InternalDistributedSystem.java", "diffHunk": "@@ -2212,15 +2212,20 @@ public Properties getSecurityProperties() {\n      * @param oldSystem the old DS, which is in a partially disconnected state and cannot be used\n      *        for messaging\n      */\n-    void reconnecting(InternalDistributedSystem oldSystem);\n+    default void reconnecting(InternalDistributedSystem oldSystem) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b88a57b537f19876bc90edfdf3b067163b8d85"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMDg4MzY3", "url": "https://github.com/apache/geode/pull/4580#pullrequestreview-342088367", "createdAt": "2020-01-13T19:36:03Z", "commit": {"oid": "51b88a57b537f19876bc90edfdf3b067163b8d85"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMTgzMDEw", "url": "https://github.com/apache/geode/pull/4580#pullrequestreview-342183010", "createdAt": "2020-01-13T22:27:50Z", "commit": {"oid": "51b88a57b537f19876bc90edfdf3b067163b8d85"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjoyNzo1MFrOFdGtDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjoyNzo1MFrOFdGtDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA2Mjg2Mw==", "bodyText": "@igodwin Here's one of the implementations of ReconnectListener in the new test which doesn't implement both methods. If we remove default, then this impl would have to provide an empty impl of onReconnect.", "url": "https://github.com/apache/geode/pull/4580#discussion_r366062863", "createdAt": "2020-01-13T22:27:50Z", "author": {"login": "kirklund"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/management/JMXMBeanReconnectDUnitTest.java", "diffHunk": "@@ -156,47 +341,51 @@ public void testLocalBeans_MaintainLocatorAndCrashServer() {\n    * All MBeans not related to the killed member should remain the same when a member is killed.\n    */\n   @Test\n-  public void testRemoteBeanKnowledge_MaintainServerAndCrashLocator() throws IOException {\n-    // check that the initial state is good\n-    List<ObjectName> initialL1Beans = jmxConToLocator1.getGemfireFederatedBeans();\n-    List<ObjectName> initialL2Beans = jmxConToLocator2.getGemfireFederatedBeans();\n-    assertThat(initialL1Beans).containsExactlyElementsOf(initialL2Beans).hasSize(NUM_REMOTE_BEANS);\n-\n-    // calculate the expected list for use once the locator has crashed\n-    List<ObjectName> expectedIntermediateBeanList = initialL1Beans.stream()\n-        .filter(excludingBeansFor(\"locator-0\")).collect(toList());\n-\n-    // crash the locator\n-    locator1.forceDisconnect(TIMEOUT, TimeUnit.MILLISECONDS, RECONNECT_MAILBOX);\n-\n-    // wait for the locator's crash to federate to the remaining locator\n-    List<ObjectName> intermediateL2Beans = new ArrayList<>();\n-    await().untilAsserted(() -> {\n-      intermediateL2Beans.clear();\n-      intermediateL2Beans.addAll(jmxConToLocator2.getGemfireFederatedBeans());\n-\n-      assertThat(intermediateL2Beans)\n-          .containsExactlyElementsOf(expectedIntermediateBeanList)\n-          .hasSameSizeAs(expectedIntermediateBeanList);\n+  public void locatorMXBeansOnOtherLocatorAreRestoredAfterCrashedLocatorReturns() {\n+    locator1VM.invoke(() -> {\n+      RECONNECT_LATCH.set(new CountDownLatch(1));\n+\n+      addReconnectListener(new ReconnectListener() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b88a57b537f19876bc90edfdf3b067163b8d85"}, "originalPosition": 438}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNzE5Njcw", "url": "https://github.com/apache/geode/pull/4580#pullrequestreview-342719670", "createdAt": "2020-01-14T17:45:37Z", "commit": {"oid": "51b88a57b537f19876bc90edfdf3b067163b8d85"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzo0NTozN1rOFdgPZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxNzo0NTozN1rOFdgPZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjQ4MTI1NQ==", "bodyText": "There are a lot of collapsible lambdas. I presume you intentionally did not collapse them for readability.", "url": "https://github.com/apache/geode/pull/4580#discussion_r366481255", "createdAt": "2020-01-14T17:45:37Z", "author": {"login": "mhansonp"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/management/JMXMBeanReconnectDUnitTest.java", "diffHunk": "@@ -36,117 +54,284 @@\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n \n-import org.apache.geode.cache.Cache;\n-import org.apache.geode.management.internal.SystemManagementService;\n-import org.apache.geode.test.awaitility.GeodeAwaitility;\n-import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n-import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.CancelException;\n+import org.apache.geode.ForcedDisconnectException;\n+import org.apache.geode.cache.CacheClosedException;\n+import org.apache.geode.distributed.DistributedSystemDisconnectedException;\n+import org.apache.geode.distributed.LocatorLauncher;\n+import org.apache.geode.distributed.ServerLauncher;\n+import org.apache.geode.distributed.internal.InternalDistributedSystem;\n+import org.apache.geode.distributed.internal.InternalDistributedSystem.ReconnectListener;\n+import org.apache.geode.distributed.internal.InternalLocator;\n+import org.apache.geode.distributed.internal.membership.api.MemberDisconnectedException;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.dunit.rules.SharedErrorCollector;\n import org.apache.geode.test.junit.categories.JMXTest;\n-import org.apache.geode.test.junit.rules.ConcurrencyRule;\n import org.apache.geode.test.junit.rules.GfshCommandRule;\n-import org.apache.geode.test.junit.rules.MBeanServerConnectionRule;\n-\n-@Category({JMXTest.class})\n-public class JMXMBeanReconnectDUnitTest {\n-  private static final String REGION_PATH = \"/test-region-1\";\n-  private static final String RECONNECT_MAILBOX = \"reconnectReady\";\n-  private static final int SERVER_COUNT = 2;\n-  private static final int NUM_REMOTE_BEANS = 19;\n-  private static final int NUM_LOCATOR_BEANS = 8;\n-  private static final int NUM_SERVER_BEANS = 3;\n-  private static final long TIMEOUT = GeodeAwaitility.getTimeout().getValueInMS();\n-\n-  private MemberVM locator1, locator2, server1;\n+import org.apache.geode.test.junit.rules.GfshCommandRule.PortType;\n+import org.apache.geode.test.junit.rules.serializable.SerializableTemporaryFolder;\n+\n+@Category(JMXTest.class)\n+@SuppressWarnings(\"serial\")\n+public class JMXMBeanReconnectDUnitTest implements Serializable {\n+\n+  private static final long TIMEOUT_MILLIS = getTimeout().getValueInMS();\n+\n+  private static final AtomicReference<CountDownLatch> RECONNECT_LATCH =\n+      new AtomicReference<>(new CountDownLatch(0));\n+  private static final AtomicReference<CountDownLatch> RECONNECTED_LATCH =\n+      new AtomicReference<>(new CountDownLatch(0));\n+\n+  private static LocatorLauncher locatorLauncher;\n+  private static ServerLauncher serverLauncher;\n+\n+  private VM locator1VM;\n+  private VM locator2VM;\n+  private VM serverVM;\n+\n+  private String locator1Name;\n+  private String locator2Name;\n+  private String serverName;\n+  private String locators;\n+  private int locator1Port;\n+  private int locator2Port;\n+  private int locator1JmxPort;\n+  private int locator2JmxPort;\n+  private Set<ObjectName> serverMXBeans;\n+  private Set<ObjectName> mxbeansOnLocator1;\n+  private Set<ObjectName> mxbeansOnLocator2;\n \n   @Rule\n-  public ClusterStartupRule lsRule = new ClusterStartupRule();\n+  public DistributedRule distributedRule = new DistributedRule();\n \n   @Rule\n-  public GfshCommandRule gfsh = new GfshCommandRule();\n+  public SerializableTemporaryFolder temporaryFolder = new SerializableTemporaryFolder();\n \n-  private MBeanServerConnectionRule jmxConToLocator1;\n-  private MBeanServerConnectionRule jmxConToLocator2;\n+  @Rule\n+  public SharedErrorCollector errorCollector = new SharedErrorCollector();\n \n   @Rule\n-  public ConcurrencyRule concurrencyRule = new ConcurrencyRule();\n+  public transient GfshCommandRule gfsh = new GfshCommandRule();\n \n   @Before\n-  public void before() throws Exception {\n-    locator1 = lsRule.startLocatorVM(0);\n-    locator2 = lsRule.startLocatorVM(1, locator1.getPort());\n-\n-    server1 = lsRule.startServerVM(2, locator1.getPort());\n-    // start an extra server to have more MBeans, but we don't need to use it in these tests\n-    lsRule.startServerVM(3, locator1.getPort());\n+  public void setUp() throws Exception {\n+    locator1VM = getVM(1);\n+    locator2VM = getVM(2);\n+    serverVM = getVM(0);\n+\n+    locator1Name = \"locator1\";\n+    locator2Name = \"locator2\";\n+    serverName = \"server1\";\n+    File locator1Dir = temporaryFolder.newFolder(locator1Name);\n+    File locator2Dir = temporaryFolder.newFolder(locator2Name);\n+    File serverDir = temporaryFolder.newFolder(serverName);\n+\n+    int[] port = getRandomAvailableTCPPorts(4);\n+    locator1Port = port[0];\n+    locator2Port = port[1];\n+    locator1JmxPort = port[2];\n+    locator2JmxPort = port[3];\n+    locators = \"localhost[\" + locator1Port + \"];localhost[\" + locator2Port;\n+\n+    locator1VM.invoke(\n+        () -> startLocator(locator1Name, locator1Dir, locator1Port, locator1JmxPort, locators));\n+    locator2VM.invoke(\n+        () -> startLocator(locator2Name, locator2Dir, locator2Port, locator2JmxPort, locators));\n+\n+    serverVM.invoke(() -> startServer(serverName, serverDir, locators));\n+\n+    gfsh.connectAndVerify(locator1JmxPort, PortType.jmxManager);\n+\n+    String regionName = \"region1\";\n+    String createRegionCommand = \"create region --type=REPLICATE --name=\" + SEPARATOR + regionName;\n+    gfsh.executeAndAssertThat(createRegionCommand).statusIsSuccess();\n+\n+    addIgnoredException(CacheClosedException.class);\n+    addIgnoredException(CancelException.class);\n+    addIgnoredException(DistributedSystemDisconnectedException.class);\n+    addIgnoredException(ForcedDisconnectException.class);\n+    addIgnoredException(MemberDisconnectedException.class);\n+    addIgnoredException(\"Possible loss of quorum\");\n+\n+    serverMXBeans = serverVM.invoke(() -> {\n+      await().untilAsserted(() -> {\n+        assertThat(getPlatformMBeanServer().queryNames(getInstance(\"GemFire:*\"), null))\n+            .containsAll(expectedMXBeansOnServer());\n+      });\n+      return getPlatformMBeanServer().queryNames(getInstance(\"GemFire:*\"), null);\n+    });\n \n-    gfsh.connectAndVerify(locator1);\n-    gfsh.executeAndAssertThat(\"create region --type=REPLICATE --name=\" + REGION_PATH\n-        + \" --enable-statistics=true\").statusIsSuccess();\n+    mxbeansOnLocator1 = locator1VM.invoke(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51b88a57b537f19876bc90edfdf3b067163b8d85"}, "originalPosition": 197}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3831, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}