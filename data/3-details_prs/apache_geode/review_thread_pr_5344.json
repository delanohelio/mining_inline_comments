{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNjk0NzM2", "number": 5344, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowMDozNlrOELztrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOToxMTowOVrOELz6UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODE3MDcwOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/InitialImageOperation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowMDozNlrOGtjiVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjowOTo1NFrOGtorRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMTMzNQ==", "bodyText": "I think this should be pulled out of the loop.  It's invariant, so we don't need to be doing this calculation every time we invoke fillInValue().", "url": "https://github.com/apache/geode/pull/5344#discussion_r450421335", "createdAt": "2020-07-06T19:00:36Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/InitialImageOperation.java", "diffHunk": "@@ -2038,7 +2039,8 @@ protected boolean chunkEntries(DistributedRegion rgn, int chunkSizeInBytes,\n                     entry.key = key;\n                     entry.setVersionTag(stamp.asVersionTag());\n                     fillRes = mapEntry.fillInValue(rgn, entry, in, rgn.getDistributionManager(),\n-                        sender.getVersionObject());\n+                        Versioning", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7d6a5daee7cabd1e8b70d432e0612d25c55f079"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwNTU0Mw==", "bodyText": "pulled \u2713", "url": "https://github.com/apache/geode/pull/5344#discussion_r450505543", "createdAt": "2020-07-06T22:09:54Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/InitialImageOperation.java", "diffHunk": "@@ -2038,7 +2039,8 @@ protected boolean chunkEntries(DistributedRegion rgn, int chunkSizeInBytes,\n                     entry.key = key;\n                     entry.setVersionTag(stamp.asVersionTag());\n                     fillRes = mapEntry.fillInValue(rgn, entry, in, rgn.getDistributionManager(),\n-                        sender.getVersionObject());\n+                        Versioning", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMTMzNQ=="}, "originalCommit": {"oid": "a7d6a5daee7cabd1e8b70d432e0612d25c55f079"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODE3MTkwOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/InitialImageOperation.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowMDo1NlrOGtjjEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjoxMDowM1rOGtorgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMTUyMA==", "bodyText": "same here - pull it out of the loop", "url": "https://github.com/apache/geode/pull/5344#discussion_r450421520", "createdAt": "2020-07-06T19:00:56Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/InitialImageOperation.java", "diffHunk": "@@ -2050,7 +2052,8 @@ protected boolean chunkEntries(DistributedRegion rgn, int chunkSizeInBytes,\n                   entry = new InitialImageOperation.Entry();\n                   entry.key = key;\n                   fillRes = mapEntry.fillInValue(rgn, entry, in, rgn.getDistributionManager(),\n-                      sender.getVersionObject());\n+                      Versioning", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7d6a5daee7cabd1e8b70d432e0612d25c55f079"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwNTYwMQ==", "bodyText": "pulled \u2713", "url": "https://github.com/apache/geode/pull/5344#discussion_r450505601", "createdAt": "2020-07-06T22:10:03Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/InitialImageOperation.java", "diffHunk": "@@ -2050,7 +2052,8 @@ protected boolean chunkEntries(DistributedRegion rgn, int chunkSizeInBytes,\n                   entry = new InitialImageOperation.Entry();\n                   entry.key = key;\n                   fillRes = mapEntry.fillInValue(rgn, entry, in, rgn.getDistributionManager(),\n-                      sender.getVersionObject());\n+                      Versioning", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMTUyMA=="}, "originalCommit": {"oid": "a7d6a5daee7cabd1e8b70d432e0612d25c55f079"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODE4ODI1OnYy", "diffSide": "RIGHT", "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/Versioning.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOTowNjozMFrOGtjtPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMjowODoxM1rOGtopGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyNDEyNw==", "bodyText": "It seems like it would be more efficient to have an isKnownVersion() method than to be using instanceof.", "url": "https://github.com/apache/geode/pull/5344#discussion_r450424127", "createdAt": "2020-07-06T19:06:30Z", "author": {"login": "bschuchardt"}, "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/Versioning.java", "diffHunk": "@@ -26,11 +26,40 @@\n public class Versioning {\n   private Versioning() {}\n \n+  /**\n+   * Make a VersionOrdinal for the short ordinal value.\n+   *\n+   * If the short ordinal represents a known version (Version) then return\n+   * that instead of constructing a new VersionOrdinal.\n+   *\n+   * @return a known version (Version) if possible, otherwise a VersionOrdinal.\n+   */\n   public static VersionOrdinal getVersionOrdinal(final short ordinal) {\n-    try {\n-      return Version.fromOrdinal(ordinal);\n-    } catch (final UnsupportedSerializationVersionException e) {\n-      return new VersionOrdinalImpl(ordinal);\n+    final Version knownVersion = Version.getKnownVersion(ordinal, null);\n+    if (knownVersion == null) {\n+      return new UnknownVersion(ordinal);\n+    } else {\n+      return knownVersion;\n+    }\n+  }\n+\n+  /**\n+   * Return the known version (Version) for the VersionOrdinal, if possible.\n+   * Otherwise return the returnWhenUnknown Version. This method essentially\n+   * downcasts a {@link VersionOrdinal} to a known version {@link Version}\n+   *\n+   * @param anyVersion came from a call to {@link #getVersionOrdinal(short)} or this\n+   *        method\n+   * @param returnWhenUnknown will be returned if anyVersion does not represent\n+   *        a known version\n+   * @return a known version\n+   */\n+  public static Version getKnownVersion(final VersionOrdinal anyVersion,\n+      Version returnWhenUnknown) {\n+    if (anyVersion instanceof Version) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7d6a5daee7cabd1e8b70d432e0612d25c55f079"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDUwNDk4NA==", "bodyText": "It might be more efficient. Or it might not be. What is certain, is that it would add a method to the VersionOrdinal interface.\nMy thinking is that if we write our deserialization code correctly then we need to do this version determination at most once when establishing a network connection (to detect the serialization version of the counterparty) or once when reading from a serialized file on disk (to detect the serialization version of the content in the file). Establishing a network connection or opening a file for reading take on the order of a millisecond whereas instanceof will take on the order of nanoseconds.\nIf you find my reasoning sound, I'd like to leave the instanceof call here instead of adding a predicate to VersionOrdinal.", "url": "https://github.com/apache/geode/pull/5344#discussion_r450504984", "createdAt": "2020-07-06T22:08:13Z", "author": {"login": "Bill"}, "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/Versioning.java", "diffHunk": "@@ -26,11 +26,40 @@\n public class Versioning {\n   private Versioning() {}\n \n+  /**\n+   * Make a VersionOrdinal for the short ordinal value.\n+   *\n+   * If the short ordinal represents a known version (Version) then return\n+   * that instead of constructing a new VersionOrdinal.\n+   *\n+   * @return a known version (Version) if possible, otherwise a VersionOrdinal.\n+   */\n   public static VersionOrdinal getVersionOrdinal(final short ordinal) {\n-    try {\n-      return Version.fromOrdinal(ordinal);\n-    } catch (final UnsupportedSerializationVersionException e) {\n-      return new VersionOrdinalImpl(ordinal);\n+    final Version knownVersion = Version.getKnownVersion(ordinal, null);\n+    if (knownVersion == null) {\n+      return new UnknownVersion(ordinal);\n+    } else {\n+      return knownVersion;\n+    }\n+  }\n+\n+  /**\n+   * Return the known version (Version) for the VersionOrdinal, if possible.\n+   * Otherwise return the returnWhenUnknown Version. This method essentially\n+   * downcasts a {@link VersionOrdinal} to a known version {@link Version}\n+   *\n+   * @param anyVersion came from a call to {@link #getVersionOrdinal(short)} or this\n+   *        method\n+   * @param returnWhenUnknown will be returned if anyVersion does not represent\n+   *        a known version\n+   * @return a known version\n+   */\n+  public static Version getKnownVersion(final VersionOrdinal anyVersion,\n+      Version returnWhenUnknown) {\n+    if (anyVersion instanceof Version) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyNDEyNw=="}, "originalCommit": {"oid": "a7d6a5daee7cabd1e8b70d432e0612d25c55f079"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODIwMzA1OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/Oplog.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxOToxMTowOVrOGtj2Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQyMTo0ODo1NlrOGtoL-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyNjQ2Nw==", "bodyText": "You're using this pattern a lot.  Versioning.getVersionOrdinal() is going to possibly create an unknown version object and then getKnownVersion() is going to throw it away.  Is there a way to do this w/o creating an object?  Maybe Versioning.getKnownVersion(short, default)?", "url": "https://github.com/apache/geode/pull/5344#discussion_r450426467", "createdAt": "2020-07-06T19:11:09Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/Oplog.java", "diffHunk": "@@ -2077,13 +2078,13 @@ private void readGemfireVersionRecord(DataInput dis, File f) throws IOException\n   }\n \n   private Version readProductVersionRecord(DataInput dis, File f) throws IOException {\n-    Version recoveredGFVersion;\n-    short ver = Version.readOrdinal(dis);\n-    try {\n-      recoveredGFVersion = Version.fromOrdinal(ver);\n-    } catch (UnsupportedSerializationVersionException e) {\n+    short ver = VersioningIO.readOrdinal(dis);\n+    final Version recoveredGFVersion =\n+        Versioning.getKnownVersion(\n+            Versioning.getVersionOrdinal(ver), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a7d6a5daee7cabd1e8b70d432e0612d25c55f079"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQ5NzUyOQ==", "bodyText": "getVersionOrdinal(short) only constructs an UnknownVersion instance if the short does not map to a known version (Version). If the short maps to a known version (Version) then that object is returned. In that case, the subsequent call to getKnownVersion(VersionOrdinal,Version) is a merely a downcast (instanceof call followed by return.) No UnknownVersion becomes garbage prematurely in this scenario.\nIf we introduce getKnownVersion(short,default) we'd save one instanceof call in this case, but we'd then have two methods for converting short into a version. I think there is value in the orthogonality we currently have in the Versioning API: one way to convert a short to a VersionOrdinal and one way to convert a VersionOrdinal into a known version (Version.) Two methods in the Versioning API instead of three.\nI feel this pattern is plenty fast (nanoseconds) relative to the number of times we need to call these methods.", "url": "https://github.com/apache/geode/pull/5344#discussion_r450497529", "createdAt": "2020-07-06T21:48:56Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/Oplog.java", "diffHunk": "@@ -2077,13 +2078,13 @@ private void readGemfireVersionRecord(DataInput dis, File f) throws IOException\n   }\n \n   private Version readProductVersionRecord(DataInput dis, File f) throws IOException {\n-    Version recoveredGFVersion;\n-    short ver = Version.readOrdinal(dis);\n-    try {\n-      recoveredGFVersion = Version.fromOrdinal(ver);\n-    } catch (UnsupportedSerializationVersionException e) {\n+    short ver = VersioningIO.readOrdinal(dis);\n+    final Version recoveredGFVersion =\n+        Versioning.getKnownVersion(\n+            Versioning.getVersionOrdinal(ver), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyNjQ2Nw=="}, "originalCommit": {"oid": "a7d6a5daee7cabd1e8b70d432e0612d25c55f079"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3905, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}