{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxOTY5ODE2", "number": 4941, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDoyMzozM1rODxQg0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzowNTo1MVrODxawUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTc3MzYzOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/PersistIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDoyMzozM1rOGEoFJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzoyMzo0OFrOGFOa0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUwNDE2Ng==", "bodyText": "why is this so high?  do we even need to set this below, or can we rely on the default?", "url": "https://github.com/apache/geode/pull/4941#discussion_r407504166", "createdAt": "2020-04-13T14:23:33Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/PersistIntegrationTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.general;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;\n+import static org.apache.geode.distributed.ConfigurationProperties.LOG_LEVEL;\n+import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+import redis.clients.jedis.params.SetParams;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.GemFireCache;\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.redis.GeodeRedisServer;\n+\n+public class PersistIntegrationTest {\n+\n+  public static Jedis jedis;\n+  public static Jedis jedis2;\n+  public static int REDIS_CLIENT_TIMEOUT = 10000000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2c60c72a2ca022f714d7e23a8eb3019a7d29d19"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzMjMwNg==", "bodyText": "I set it to the default from awaitility.  I'll double check with the team though.  For some reason I remember us having to set it really high, but it may not be necessary for Persist.", "url": "https://github.com/apache/geode/pull/4941#discussion_r408132306", "createdAt": "2020-04-14T13:23:48Z", "author": {"login": "sabbey37"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/PersistIntegrationTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.general;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;\n+import static org.apache.geode.distributed.ConfigurationProperties.LOG_LEVEL;\n+import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+import redis.clients.jedis.params.SetParams;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.GemFireCache;\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.redis.GeodeRedisServer;\n+\n+public class PersistIntegrationTest {\n+\n+  public static Jedis jedis;\n+  public static Jedis jedis2;\n+  public static int REDIS_CLIENT_TIMEOUT = 10000000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUwNDE2Ng=="}, "originalCommit": {"oid": "a2c60c72a2ca022f714d7e23a8eb3019a7d29d19"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTc3NzgxOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/PersistIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDoyNDo0NlrOGEoHtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzoyNDowOVrOGFObzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUwNDgyMg==", "bodyText": "i think this should be a local variable to the concurrent test, not a global to this whole class.", "url": "https://github.com/apache/geode/pull/4941#discussion_r407504822", "createdAt": "2020-04-13T14:24:46Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/PersistIntegrationTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.general;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;\n+import static org.apache.geode.distributed.ConfigurationProperties.LOG_LEVEL;\n+import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+import redis.clients.jedis.params.SetParams;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.GemFireCache;\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.redis.GeodeRedisServer;\n+\n+public class PersistIntegrationTest {\n+\n+  public static Jedis jedis;\n+  public static Jedis jedis2;\n+  public static int REDIS_CLIENT_TIMEOUT = 10000000;\n+  private static GeodeRedisServer server;\n+  private static GemFireCache cache;\n+  private static int ITERATION_COUNT = 5000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2c60c72a2ca022f714d7e23a8eb3019a7d29d19"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzMjU1OQ==", "bodyText": "Sounds good, just made it local.", "url": "https://github.com/apache/geode/pull/4941#discussion_r408132559", "createdAt": "2020-04-14T13:24:09Z", "author": {"login": "sabbey37"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/PersistIntegrationTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.general;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;\n+import static org.apache.geode.distributed.ConfigurationProperties.LOG_LEVEL;\n+import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+import redis.clients.jedis.params.SetParams;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.GemFireCache;\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.redis.GeodeRedisServer;\n+\n+public class PersistIntegrationTest {\n+\n+  public static Jedis jedis;\n+  public static Jedis jedis2;\n+  public static int REDIS_CLIENT_TIMEOUT = 10000000;\n+  private static GeodeRedisServer server;\n+  private static GemFireCache cache;\n+  private static int ITERATION_COUNT = 5000;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUwNDgyMg=="}, "originalCommit": {"oid": "a2c60c72a2ca022f714d7e23a8eb3019a7d29d19"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTc4OTE4OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/PersistIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDoyODoxNFrOGEoPAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzoyNDo1NVrOGFOePw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUwNjY4OA==", "bodyText": "can you rename this to element or set_element...it is really hard to distinguish this test from the one above without looking VERY carefully", "url": "https://github.com/apache/geode/pull/4941#discussion_r407506688", "createdAt": "2020-04-13T14:28:14Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/PersistIntegrationTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.general;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;\n+import static org.apache.geode.distributed.ConfigurationProperties.LOG_LEVEL;\n+import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+import redis.clients.jedis.params.SetParams;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.GemFireCache;\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.redis.GeodeRedisServer;\n+\n+public class PersistIntegrationTest {\n+\n+  public static Jedis jedis;\n+  public static Jedis jedis2;\n+  public static int REDIS_CLIENT_TIMEOUT = 10000000;\n+  private static GeodeRedisServer server;\n+  private static GemFireCache cache;\n+  private static int ITERATION_COUNT = 5000;\n+\n+  @BeforeClass\n+  public static void setUp() {\n+    CacheFactory cf = new CacheFactory();\n+    cf.set(LOG_LEVEL, \"error\");\n+    cf.set(MCAST_PORT, \"0\");\n+    cf.set(LOCATORS, \"\");\n+    cache = cf.create();\n+    int port = AvailablePortHelper.getRandomAvailableTCPPort();\n+    server = new GeodeRedisServer(\"localhost\", port);\n+\n+    server.start();\n+    jedis = new Jedis(\"localhost\", port, REDIS_CLIENT_TIMEOUT);\n+    jedis2 = new Jedis(\"localhost\", port, REDIS_CLIENT_TIMEOUT);\n+  }\n+\n+  @After\n+  public void flushAll() {\n+    jedis.flushAll();\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    jedis.close();\n+    cache.close();\n+    server.shutdown();\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithStringValue() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    jedis.set(key, value);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldReturnZero_givenKeyDoesNotExist() {\n+    assertThat(jedis.persist(\"key\")).isEqualTo(0L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithSetValue() {\n+    String key = \"key\";\n+    String value = \"value\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2c60c72a2ca022f714d7e23a8eb3019a7d29d19"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzMzE4Mw==", "bodyText": "Just put an underscore before the data types and updated the key and value names.  Does that help in distinguishing?", "url": "https://github.com/apache/geode/pull/4941#discussion_r408133183", "createdAt": "2020-04-14T13:24:55Z", "author": {"login": "sabbey37"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/PersistIntegrationTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.general;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;\n+import static org.apache.geode.distributed.ConfigurationProperties.LOG_LEVEL;\n+import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+import redis.clients.jedis.params.SetParams;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.GemFireCache;\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.redis.GeodeRedisServer;\n+\n+public class PersistIntegrationTest {\n+\n+  public static Jedis jedis;\n+  public static Jedis jedis2;\n+  public static int REDIS_CLIENT_TIMEOUT = 10000000;\n+  private static GeodeRedisServer server;\n+  private static GemFireCache cache;\n+  private static int ITERATION_COUNT = 5000;\n+\n+  @BeforeClass\n+  public static void setUp() {\n+    CacheFactory cf = new CacheFactory();\n+    cf.set(LOG_LEVEL, \"error\");\n+    cf.set(MCAST_PORT, \"0\");\n+    cf.set(LOCATORS, \"\");\n+    cache = cf.create();\n+    int port = AvailablePortHelper.getRandomAvailableTCPPort();\n+    server = new GeodeRedisServer(\"localhost\", port);\n+\n+    server.start();\n+    jedis = new Jedis(\"localhost\", port, REDIS_CLIENT_TIMEOUT);\n+    jedis2 = new Jedis(\"localhost\", port, REDIS_CLIENT_TIMEOUT);\n+  }\n+\n+  @After\n+  public void flushAll() {\n+    jedis.flushAll();\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    jedis.close();\n+    cache.close();\n+    server.shutdown();\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithStringValue() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    jedis.set(key, value);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldReturnZero_givenKeyDoesNotExist() {\n+    assertThat(jedis.persist(\"key\")).isEqualTo(0L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithSetValue() {\n+    String key = \"key\";\n+    String value = \"value\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUwNjY4OA=="}, "originalCommit": {"oid": "a2c60c72a2ca022f714d7e23a8eb3019a7d29d19"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTgwMDIwOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/PersistIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDozMTo0M1rOGEoVsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzoyNjoxMlrOGFOhnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUwODQwMw==", "bodyText": "where's the blocking queue here?  this name may be a relic, and needs to be updated?\n\"do a bunch of\" is odd.  maybe the method is just expireKeys, and  below one is persistKeys", "url": "https://github.com/apache/geode/pull/4941#discussion_r407508403", "createdAt": "2020-04-13T14:31:43Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/PersistIntegrationTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.general;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;\n+import static org.apache.geode.distributed.ConfigurationProperties.LOG_LEVEL;\n+import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+import redis.clients.jedis.params.SetParams;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.GemFireCache;\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.redis.GeodeRedisServer;\n+\n+public class PersistIntegrationTest {\n+\n+  public static Jedis jedis;\n+  public static Jedis jedis2;\n+  public static int REDIS_CLIENT_TIMEOUT = 10000000;\n+  private static GeodeRedisServer server;\n+  private static GemFireCache cache;\n+  private static int ITERATION_COUNT = 5000;\n+\n+  @BeforeClass\n+  public static void setUp() {\n+    CacheFactory cf = new CacheFactory();\n+    cf.set(LOG_LEVEL, \"error\");\n+    cf.set(MCAST_PORT, \"0\");\n+    cf.set(LOCATORS, \"\");\n+    cache = cf.create();\n+    int port = AvailablePortHelper.getRandomAvailableTCPPort();\n+    server = new GeodeRedisServer(\"localhost\", port);\n+\n+    server.start();\n+    jedis = new Jedis(\"localhost\", port, REDIS_CLIENT_TIMEOUT);\n+    jedis2 = new Jedis(\"localhost\", port, REDIS_CLIENT_TIMEOUT);\n+  }\n+\n+  @After\n+  public void flushAll() {\n+    jedis.flushAll();\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    jedis.close();\n+    cache.close();\n+    server.shutdown();\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithStringValue() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    jedis.set(key, value);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldReturnZero_givenKeyDoesNotExist() {\n+    assertThat(jedis.persist(\"key\")).isEqualTo(0L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithSetValue() {\n+    String key = \"key\";\n+    String value = \"value\";\n+\n+    jedis.sadd(key, value);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithSortedSetValue() {\n+    String key = \"key\";\n+    double score = 2.0;\n+    String member = \"member\";\n+\n+    jedis.zadd(key, score, member);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithHashValue() {\n+    String key = \"key\";\n+    String field = \"field\";\n+    String value = \"value\";\n+\n+    jedis.hset(key, field, value);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithGeoValue() {\n+    String key = \"sicily\";\n+    double latitude = 13.361389;\n+    double longitude = 38.115556;\n+    String member = \"Palermo Catina\";\n+\n+    jedis.geoadd(key, latitude, longitude, member);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithHyperLogLogValue() {\n+    String key = \"crawled:127.0.0.2\";\n+    String value = \"www.insideTheHouse.com\";\n+\n+    jedis.pfadd(key, value);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithListValue() {\n+    String key = \"list\";\n+    String value = \"value\";\n+\n+    jedis.lpush(key, value);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithBitMapValue() {\n+    String key = \"key\";\n+    long offset = 1L;\n+    String value = \"0\";\n+\n+    jedis.setbit(key, offset, value);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKeysConcurrently() throws InterruptedException {\n+    doABunchOfSetEXsWithBlockingQueue(jedis);\n+\n+    AtomicLong persistedFromThread1 = new AtomicLong(0);\n+    AtomicLong persistedFromThread2 = new AtomicLong(0);\n+\n+    Runnable runnable1 = () -> doABunchOfPersistsWithBlockingQueue(persistedFromThread1, jedis);\n+    Runnable runnable2 = () -> doABunchOfPersistsWithBlockingQueue(persistedFromThread2, jedis2);\n+\n+    Thread thread1 = new Thread(runnable1);\n+    Thread thread2 = new Thread(runnable2);\n+\n+    thread1.start();\n+    thread2.start();\n+    thread1.join();\n+    thread2.join();\n+\n+    assertThat(persistedFromThread1.get() + persistedFromThread2.get()).isEqualTo(ITERATION_COUNT);\n+  }\n+\n+  private void doABunchOfSetEXsWithBlockingQueue(Jedis jedis) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2c60c72a2ca022f714d7e23a8eb3019a7d29d19"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzNDA0NQ==", "bodyText": "It was a relic! We forgot to rename the method names.  Thank you!  As far as \"do a bunch of\", we were following a naming convention from a few other test suites.  I changed it though.  Maybe we should discuss as a team or rename the other methods as well?", "url": "https://github.com/apache/geode/pull/4941#discussion_r408134045", "createdAt": "2020-04-14T13:26:12Z", "author": {"login": "sabbey37"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/PersistIntegrationTest.java", "diffHunk": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.general;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;\n+import static org.apache.geode.distributed.ConfigurationProperties.LOG_LEVEL;\n+import static org.apache.geode.distributed.ConfigurationProperties.MCAST_PORT;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.Test;\n+import redis.clients.jedis.Jedis;\n+import redis.clients.jedis.params.SetParams;\n+\n+import org.apache.geode.cache.CacheFactory;\n+import org.apache.geode.cache.GemFireCache;\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.redis.GeodeRedisServer;\n+\n+public class PersistIntegrationTest {\n+\n+  public static Jedis jedis;\n+  public static Jedis jedis2;\n+  public static int REDIS_CLIENT_TIMEOUT = 10000000;\n+  private static GeodeRedisServer server;\n+  private static GemFireCache cache;\n+  private static int ITERATION_COUNT = 5000;\n+\n+  @BeforeClass\n+  public static void setUp() {\n+    CacheFactory cf = new CacheFactory();\n+    cf.set(LOG_LEVEL, \"error\");\n+    cf.set(MCAST_PORT, \"0\");\n+    cf.set(LOCATORS, \"\");\n+    cache = cf.create();\n+    int port = AvailablePortHelper.getRandomAvailableTCPPort();\n+    server = new GeodeRedisServer(\"localhost\", port);\n+\n+    server.start();\n+    jedis = new Jedis(\"localhost\", port, REDIS_CLIENT_TIMEOUT);\n+    jedis2 = new Jedis(\"localhost\", port, REDIS_CLIENT_TIMEOUT);\n+  }\n+\n+  @After\n+  public void flushAll() {\n+    jedis.flushAll();\n+  }\n+\n+  @AfterClass\n+  public static void tearDown() {\n+    jedis.close();\n+    cache.close();\n+    server.shutdown();\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithStringValue() {\n+    String key = \"key\";\n+    String value = \"value\";\n+    jedis.set(key, value);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldReturnZero_givenKeyDoesNotExist() {\n+    assertThat(jedis.persist(\"key\")).isEqualTo(0L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithSetValue() {\n+    String key = \"key\";\n+    String value = \"value\";\n+\n+    jedis.sadd(key, value);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithSortedSetValue() {\n+    String key = \"key\";\n+    double score = 2.0;\n+    String member = \"member\";\n+\n+    jedis.zadd(key, score, member);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithHashValue() {\n+    String key = \"key\";\n+    String field = \"field\";\n+    String value = \"value\";\n+\n+    jedis.hset(key, field, value);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithGeoValue() {\n+    String key = \"sicily\";\n+    double latitude = 13.361389;\n+    double longitude = 38.115556;\n+    String member = \"Palermo Catina\";\n+\n+    jedis.geoadd(key, latitude, longitude, member);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithHyperLogLogValue() {\n+    String key = \"crawled:127.0.0.2\";\n+    String value = \"www.insideTheHouse.com\";\n+\n+    jedis.pfadd(key, value);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithListValue() {\n+    String key = \"list\";\n+    String value = \"value\";\n+\n+    jedis.lpush(key, value);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKey_givenKeyWithBitMapValue() {\n+    String key = \"key\";\n+    long offset = 1L;\n+    String value = \"0\";\n+\n+    jedis.setbit(key, offset, value);\n+    jedis.expire(key, 20);\n+\n+    assertThat(jedis.persist(key)).isEqualTo(1L);\n+    assertThat(jedis.ttl(key)).isEqualTo(-1L);\n+  }\n+\n+  @Test\n+  public void shouldPersistKeysConcurrently() throws InterruptedException {\n+    doABunchOfSetEXsWithBlockingQueue(jedis);\n+\n+    AtomicLong persistedFromThread1 = new AtomicLong(0);\n+    AtomicLong persistedFromThread2 = new AtomicLong(0);\n+\n+    Runnable runnable1 = () -> doABunchOfPersistsWithBlockingQueue(persistedFromThread1, jedis);\n+    Runnable runnable2 = () -> doABunchOfPersistsWithBlockingQueue(persistedFromThread2, jedis2);\n+\n+    Thread thread1 = new Thread(runnable1);\n+    Thread thread2 = new Thread(runnable2);\n+\n+    thread1.start();\n+    thread2.start();\n+    thread1.join();\n+    thread2.join();\n+\n+    assertThat(persistedFromThread1.get() + persistedFromThread2.get()).isEqualTo(ITERATION_COUNT);\n+  }\n+\n+  private void doABunchOfSetEXsWithBlockingQueue(Jedis jedis) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUwODQwMw=="}, "originalCommit": {"oid": "a2c60c72a2ca022f714d7e23a8eb3019a7d29d19"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyOTg3MDk0OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/PersistExecutorJUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QxNDo1MjoyNlrOGEo_tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzoyNzoyOVrOGFOk-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUxOTE1OQ==", "bodyText": "I think you should use the actual Command class and not a mock.  I tried it out and the tests are simpler. Give it a try and see what you think.", "url": "https://github.com/apache/geode/pull/4941#discussion_r407519159", "createdAt": "2020-04-13T14:52:26Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/PersistExecutorJUnitTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.general;\n+\n+import static java.nio.charset.Charset.defaultCharset;\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.UnpooledByteBufAllocator;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import org.apache.geode.redis.internal.Command;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+import org.apache.geode.redis.internal.Executor;\n+import org.apache.geode.redis.internal.executor.PersistExecutor;\n+\n+public class PersistExecutorJUnitTest {\n+\n+  private ExecutionHandlerContext context;\n+  private Command command;\n+  private UnpooledByteBufAllocator byteBuf;\n+\n+  @Before\n+  public void setUp() {\n+    context = mock(ExecutionHandlerContext.class);\n+    command = mock(Command.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2c60c72a2ca022f714d7e23a8eb3019a7d29d19"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzNDkwNg==", "bodyText": "We wanted the unit test to remain pure and only test the relevant executor.  We also mock the Command class in other JUnit tests.  We could bring this up at techtro though if we want to change the way we're doing the executor unit tests?", "url": "https://github.com/apache/geode/pull/4941#discussion_r408134906", "createdAt": "2020-04-14T13:27:29Z", "author": {"login": "sabbey37"}, "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/general/PersistExecutorJUnitTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.internal.executor.general;\n+\n+import static java.nio.charset.Charset.defaultCharset;\n+import static org.assertj.core.api.AssertionsForInterfaceTypes.assertThat;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.UnpooledByteBufAllocator;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+\n+import org.apache.geode.redis.internal.Command;\n+import org.apache.geode.redis.internal.ExecutionHandlerContext;\n+import org.apache.geode.redis.internal.Executor;\n+import org.apache.geode.redis.internal.executor.PersistExecutor;\n+\n+public class PersistExecutorJUnitTest {\n+\n+  private ExecutionHandlerContext context;\n+  private Command command;\n+  private UnpooledByteBufAllocator byteBuf;\n+\n+  @Before\n+  public void setUp() {\n+    context = mock(ExecutionHandlerContext.class);\n+    command = mock(Command.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzUxOTE1OQ=="}, "originalCommit": {"oid": "a2c60c72a2ca022f714d7e23a8eb3019a7d29d19"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMTQ1MTcxOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/acceptanceTest/java/org/apache/geode/redis/PersistDockerAcceptanceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QyMzowNTo1MVrOGE4SYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzozMTozM1rOGFOwdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc2OTY5OQ==", "bodyText": "is this test still a work in progress? I don't see that it tests anything", "url": "https://github.com/apache/geode/pull/4941#discussion_r407769699", "createdAt": "2020-04-13T23:05:51Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/acceptanceTest/java/org/apache/geode/redis/PersistDockerAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.experimental.categories.Category;\n+import org.testcontainers.containers.GenericContainer;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.redis.general.PersistIntegrationTest;\n+import org.apache.geode.test.junit.categories.RedisTest;\n+\n+@Category({RedisTest.class})\n+public class PersistDockerAcceptanceTest extends PersistIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2c60c72a2ca022f714d7e23a8eb3019a7d29d19"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzNzg0NA==", "bodyText": "It actually runs all the PersistIntegrationTests against native Redis running in a Docker container.", "url": "https://github.com/apache/geode/pull/4941#discussion_r408137844", "createdAt": "2020-04-14T13:31:33Z", "author": {"login": "sabbey37"}, "path": "geode-redis/src/acceptanceTest/java/org/apache/geode/redis/PersistDockerAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis;\n+\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.experimental.categories.Category;\n+import org.testcontainers.containers.GenericContainer;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.redis.general.PersistIntegrationTest;\n+import org.apache.geode.test.junit.categories.RedisTest;\n+\n+@Category({RedisTest.class})\n+public class PersistDockerAcceptanceTest extends PersistIntegrationTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzc2OTY5OQ=="}, "originalCommit": {"oid": "a2c60c72a2ca022f714d7e23a8eb3019a7d29d19"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4309, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}