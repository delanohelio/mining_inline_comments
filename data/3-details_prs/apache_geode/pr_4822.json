{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5OTIyMjIy", "number": 4822, "title": "GEODE-7884: server hangs due to IllegalStateException", "bodyText": "Added cancellation check before scheduling an idle-timeout or\nack-wait-threshold timer task.  I had to add a new method to\nSystemTimerTask and then noticed there were no tests for SystemTimer, so\nI cleaned up that class and added tests.\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-03-17T15:53:18Z", "url": "https://github.com/apache/geode/pull/4822", "merged": true, "mergeCommit": {"oid": "2d2a3f80bd5053749963889c1898df48e9aa0be7"}, "closed": true, "closedAt": "2020-03-20T16:05:24Z", "author": {"login": "bschuchardt"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcO69R7gFqTM3NzA5NDQ5MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcPieCwAFqTM3ODU5NzE3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MDk0NDkx", "url": "https://github.com/apache/geode/pull/4822#pullrequestreview-377094491", "createdAt": "2020-03-18T17:40:39Z", "commit": {"oid": "dd345d434a73293003faa3a44532f6c9635a8447"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzo0MDozOVrOF4QDEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNzo0MTo0NlrOF4QF1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyNzUwNw==", "bodyText": "does synchronizing here relate to removing the continues in the timer code?", "url": "https://github.com/apache/geode/pull/4822#discussion_r394527507", "createdAt": "2020-03-18T17:40:39Z", "author": {"login": "echobravopapa"}, "path": "geode-core/src/main/java/org/apache/geode/internal/tcp/ConnectionTable.java", "diffHunk": "@@ -519,8 +519,12 @@ private void scheduleIdleTimeout(Connection conn) {\n           if (!closed) {\n             IdleConnTT task = new IdleConnTT(conn);\n             conn.setIdleTimeoutTask(task);\n-            getIdleConnTimer().scheduleAtFixedRate(task, owner.idleConnectionTimeout,\n-                owner.idleConnectionTimeout);\n+            synchronized (task) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd345d434a73293003faa3a44532f6c9635a8447"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDUyODIxMw==", "bodyText": "no more continue...", "url": "https://github.com/apache/geode/pull/4822#discussion_r394528213", "createdAt": "2020-03-18T17:41:46Z", "author": {"login": "echobravopapa"}, "path": "geode-core/src/main/java/org/apache/geode/internal/SystemTimer.java", "diffHunk": "@@ -181,88 +167,67 @@ private static void sweepAllSwarms() {\n   /**\n    * Remove given timer from the swarm.\n    *\n-   * @param t timer to remove\n+   * @param timerToRemove timer to remove\n    *\n    * @see #cancel()\n    */\n-  private static void removeFromSwarm(SystemTimer t) {\n-    final boolean isDebugEnabled = logger.isTraceEnabled();\n+  private static void removeFromSwarm(SystemTimer timerToRemove) {\n     synchronized (allSwarms) {\n       // Get timer's swarm\n-      ArrayList swarmSet = (ArrayList) allSwarms.get(t.swarm);\n+      List<WeakReference<SystemTimer>> swarmSet = allSwarms.get(timerToRemove.swarm);\n       if (swarmSet == null) {\n-        if (isDebugEnabled) {\n-          logger.trace(\"SystemTimer#removeFromSwarm: timer already removed: {}\", t);\n-        }\n         return; // already gone\n       }\n \n       // Remove timer from swarm\n-      if (isDebugEnabled) {\n-        logger.trace(\"SystemTimer#removeFromSwarm: removing timer <{}>\", t);\n-      }\n       synchronized (swarmSet) {\n-        Iterator it = swarmSet.iterator();\n-        while (it.hasNext()) {\n-          WeakReference ref = (WeakReference) it.next();\n-          SystemTimer t2 = (SystemTimer) ref.get();\n-          if (t2 == null) {\n-            // Since we've discovered an empty reference, we should remove it.\n-            it.remove();\n-            continue;\n-          }\n-          if (t2 == t) {\n-            it.remove();\n+        Iterator<WeakReference<SystemTimer>> swarmIterator = swarmSet.iterator();\n+        while (swarmIterator.hasNext()) {\n+          WeakReference<SystemTimer> ref = swarmIterator.next();\n+          SystemTimer timer = ref.get();\n+          if (timer == null || timer == timerToRemove) {\n+            swarmIterator.remove();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd345d434a73293003faa3a44532f6c9635a8447"}, "originalPosition": 229}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MTIzMzI3", "url": "https://github.com/apache/geode/pull/4822#pullrequestreview-377123327", "createdAt": "2020-03-18T18:18:22Z", "commit": {"oid": "89d3397f6d8cf171db4b557973ea3688997c673b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxODoxODoyMlrOF4RceQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxOTowMjo1NVrOF4S_NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU1MDM5Mw==", "bodyText": "nice move breaking a dependency on an internal class", "url": "https://github.com/apache/geode/pull/4822#discussion_r394550393", "createdAt": "2020-03-18T18:18:22Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/internal/SystemTimer.java", "diffHunk": "@@ -15,45 +15,36 @@\n package org.apache.geode.internal;\n \n import java.lang.ref.WeakReference;\n-import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.Timer;\n import java.util.TimerTask;\n \n import org.apache.logging.log4j.Logger;\n \n import org.apache.geode.CancelException;\n-import org.apache.geode.SystemFailure;\n import org.apache.geode.annotations.internal.MakeNotStatic;\n-import org.apache.geode.distributed.internal.InternalDistributedSystem;\n+import org.apache.geode.distributed.DistributedSystem;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d3397f6d8cf171db4b557973ea3688997c673b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU1MDc2OQ==", "bodyText": "seems like we shouldn't call this a \"swarm\" any more", "url": "https://github.com/apache/geode/pull/4822#discussion_r394550769", "createdAt": "2020-03-18T18:19:01Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/internal/SystemTimer.java", "diffHunk": "@@ -62,58 +53,58 @@\n   /**\n    * True if this timer has been cancelled\n    */\n-  private boolean cancelled = false;\n+  private volatile boolean cancelled = false;\n \n   /**\n    * the swarm to which this timer belongs\n    */\n-  private final Object /* T */ swarm;\n+  private final DistributedSystem swarm;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d3397f6d8cf171db4b557973ea3688997c673b"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU1MTAzNw==", "bodyText": "death to all statics! \u2713", "url": "https://github.com/apache/geode/pull/4822#discussion_r394551037", "createdAt": "2020-03-18T18:19:33Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/internal/SystemTimer.java", "diffHunk": "@@ -15,45 +15,36 @@\n package org.apache.geode.internal;\n \n import java.lang.ref.WeakReference;\n-import java.text.SimpleDateFormat;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.HashMap;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.Timer;\n import java.util.TimerTask;\n \n import org.apache.logging.log4j.Logger;\n \n import org.apache.geode.CancelException;\n-import org.apache.geode.SystemFailure;\n import org.apache.geode.annotations.internal.MakeNotStatic;\n-import org.apache.geode.distributed.internal.InternalDistributedSystem;\n+import org.apache.geode.distributed.DistributedSystem;\n import org.apache.geode.logging.internal.log4j.api.LogService;\n \n /**\n  * Instances of this class are like {@link Timer}, but are associated with a \"swarm\", which can be\n- * cancelled as a group with {@link #cancelSwarm(Object)}.\n+ * cancelled as a group with {@link #cancelSwarm(DistributedSystem)}.\n  *\n  * @see Timer\n  * @see TimerTask\n  *\n- *      TODO -- with Java 1.5, this will be a template type so that the swarm's class can be\n- *      specified.\n  */\n public class SystemTimer {\n   private static final Logger logger = LogService.getLogger();\n \n   private static final boolean isIBM =\n       \"IBM Corporation\".equals(System.getProperty(\"java.vm.vendor\"));\n \n-  /**\n-   * Extra debugging for this class\n-   */\n-  // private static final boolean DEBUG = true;\n-  static final boolean DEBUG = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d3397f6d8cf171db4b557973ea3688997c673b"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU1NjA0NQ==", "bodyText": "the name \"swarmSet\" is misleading. It's really a list of timers associated with this swarm. Furthermore, we blindly add the timer to the list, making it even less of a \"set\" than the mere name vs type discrepancy might indicate.\nif duplicates do not hurt us, or if there is no possibility of duplicates, I suppose it's ok to not check for duplicates. Nevertheless. If we aren't eliding dupes tho, I feel like the name should change.", "url": "https://github.com/apache/geode/pull/4822#discussion_r394556045", "createdAt": "2020-03-18T18:28:19Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/internal/SystemTimer.java", "diffHunk": "@@ -62,58 +53,58 @@\n   /**\n    * True if this timer has been cancelled\n    */\n-  private boolean cancelled = false;\n+  private volatile boolean cancelled = false;\n \n   /**\n    * the swarm to which this timer belongs\n    */\n-  private final Object /* T */ swarm;\n+  private final DistributedSystem swarm;\n \n   @Override\n   public String toString() {\n-    StringBuffer sb = new StringBuffer();\n-    sb.append(\"SystemTimer[\");\n-    sb.append(\"swarm = \" + swarm);\n-    // sb.append(\"; timer = \" + timer);\n-    sb.append(\"]\");\n-    return sb.toString();\n+    return \"SystemTimer[\"\n+        + \"swarm = \" + swarm\n+        + \"]\";\n   }\n \n   /**\n    * List of all of the swarms in the system\n    */\n   @MakeNotStatic\n-  private static final HashMap allSwarms = new HashMap();\n+  private static final HashMap<DistributedSystem, List<WeakReference<SystemTimer>>> allSwarms =\n+      new HashMap<>();\n \n   /**\n    * Add the given timer is in the given swarm. Used only by constructors.\n    *\n    * @param swarm swarm to add the timer to\n-   * @param t timer to add\n+   * @param systemTimer timer to add\n    */\n-  private static void addToSwarm(Object /* T */ swarm, SystemTimer t) {\n-    final boolean isDebugEnabled = logger.isTraceEnabled();\n+  private static void addToSwarm(DistributedSystem swarm, SystemTimer systemTimer) {\n     // Get or add list of timers for this swarm...\n-    ArrayList /* ArrayList<WeakReference<SystemTimer>> */ swarmSet;\n+    List<WeakReference<SystemTimer>> swarmSet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d3397f6d8cf171db4b557973ea3688997c673b"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU1NzMzOA==", "bodyText": "the name \"swarmIterator\" is misleading to me since it's iterating over timers. recommend name change", "url": "https://github.com/apache/geode/pull/4822#discussion_r394557338", "createdAt": "2020-03-18T18:30:36Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/internal/SystemTimer.java", "diffHunk": "@@ -143,35 +134,30 @@ private static void sweepAllSwarms() {\n     }\n     final boolean isDebugEnabled = logger.isTraceEnabled();\n     synchronized (allSwarms) {\n-      Iterator it = allSwarms.entrySet().iterator();\n-      while (it.hasNext()) { // iterate over allSwarms\n-        Map.Entry entry = (Map.Entry) it.next();\n-        ArrayList swarm = (ArrayList) entry.getValue();\n+      Iterator<Map.Entry<DistributedSystem, List<WeakReference<SystemTimer>>>> allSwarmsIterator =\n+          allSwarms.entrySet().iterator();\n+      while (allSwarmsIterator.hasNext()) { // iterate over allSwarms\n+        Map.Entry<DistributedSystem, List<WeakReference<SystemTimer>>> entry =\n+            allSwarmsIterator.next();\n+        List<WeakReference<SystemTimer>> swarm = entry.getValue();\n         synchronized (swarm) {\n-          Iterator it2 = swarm.iterator();\n-          while (it2.hasNext()) { // iterate over current swarm\n-            WeakReference wr = (WeakReference) it2.next();\n-            SystemTimer st = (SystemTimer) wr.get();\n-            if (st == null) {\n-              // Remove stale reference\n-              it2.remove();\n-              continue;\n-            }\n-            // Get rid of a cancelled timer; it's not interesting.\n-            if (st.cancelled) {\n-              it2.remove();\n-              continue;\n+          Iterator<WeakReference<SystemTimer>> swarmIterator = swarm.iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d3397f6d8cf171db4b557973ea3688997c673b"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU1ODM0Nw==", "bodyText": "again the naming confuses me. It would make more sense to me if it was named something like \"timers\"", "url": "https://github.com/apache/geode/pull/4822#discussion_r394558347", "createdAt": "2020-03-18T18:32:19Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/internal/SystemTimer.java", "diffHunk": "@@ -181,88 +167,67 @@ private static void sweepAllSwarms() {\n   /**\n    * Remove given timer from the swarm.\n    *\n-   * @param t timer to remove\n+   * @param timerToRemove timer to remove\n    *\n    * @see #cancel()\n    */\n-  private static void removeFromSwarm(SystemTimer t) {\n-    final boolean isDebugEnabled = logger.isTraceEnabled();\n+  private static void removeFromSwarm(SystemTimer timerToRemove) {\n     synchronized (allSwarms) {\n       // Get timer's swarm\n-      ArrayList swarmSet = (ArrayList) allSwarms.get(t.swarm);\n+      List<WeakReference<SystemTimer>> swarmSet = allSwarms.get(timerToRemove.swarm);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d3397f6d8cf171db4b557973ea3688997c673b"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU1OTQ0Ng==", "bodyText": "as above, I request renaming \"swarmSet\" to something like \"timers\"", "url": "https://github.com/apache/geode/pull/4822#discussion_r394559446", "createdAt": "2020-03-18T18:34:05Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/internal/SystemTimer.java", "diffHunk": "@@ -181,88 +167,67 @@ private static void sweepAllSwarms() {\n   /**\n    * Remove given timer from the swarm.\n    *\n-   * @param t timer to remove\n+   * @param timerToRemove timer to remove\n    *\n    * @see #cancel()\n    */\n-  private static void removeFromSwarm(SystemTimer t) {\n-    final boolean isDebugEnabled = logger.isTraceEnabled();\n+  private static void removeFromSwarm(SystemTimer timerToRemove) {\n     synchronized (allSwarms) {\n       // Get timer's swarm\n-      ArrayList swarmSet = (ArrayList) allSwarms.get(t.swarm);\n+      List<WeakReference<SystemTimer>> swarmSet = allSwarms.get(timerToRemove.swarm);\n       if (swarmSet == null) {\n-        if (isDebugEnabled) {\n-          logger.trace(\"SystemTimer#removeFromSwarm: timer already removed: {}\", t);\n-        }\n         return; // already gone\n       }\n \n       // Remove timer from swarm\n-      if (isDebugEnabled) {\n-        logger.trace(\"SystemTimer#removeFromSwarm: removing timer <{}>\", t);\n-      }\n       synchronized (swarmSet) {\n-        Iterator it = swarmSet.iterator();\n-        while (it.hasNext()) {\n-          WeakReference ref = (WeakReference) it.next();\n-          SystemTimer t2 = (SystemTimer) ref.get();\n-          if (t2 == null) {\n-            // Since we've discovered an empty reference, we should remove it.\n-            it.remove();\n-            continue;\n-          }\n-          if (t2 == t) {\n-            it.remove();\n-            // Don't keep sweeping once we've found it; just quit.\n+        Iterator<WeakReference<SystemTimer>> swarmIterator = swarmSet.iterator();\n+        while (swarmIterator.hasNext()) {\n+          WeakReference<SystemTimer> ref = swarmIterator.next();\n+          SystemTimer timer = ref.get();\n+          if (timer == null) {\n+            swarmIterator.remove();\n+          } else if (timer == timerToRemove) {\n+            swarmIterator.remove();\n             break;\n+          } else if (timer.isCancelled()) {\n+            swarmIterator.remove();\n           }\n-          if (t2.cancelled) {\n-            // But if we happen to run across a cancelled timer,\n-            // remove it.\n-            it.remove();\n-            continue;\n-          }\n-        } // while\n+        }\n \n         // While we're here, if the swarm has gone to zero size,\n         // we should remove it.\n         if (swarmSet.size() == 0) {\n-          allSwarms.remove(t.swarm); // last reference\n-          if (isDebugEnabled) {\n-            logger.trace(\"SystemTimer#removeFromSwarm: removed last reference to {}\", t.swarm);\n-          }\n+          allSwarms.remove(timerToRemove.swarm); // last reference\n         }\n-      } // synchronized swarmSet\n-    } // synchronized allSwarms\n+      }\n+    }\n \n-    sweepAllSwarms(); // Occasionally check global list, use any available logger :-)\n+    sweepAllSwarms(); // Occasionally check global list\n   }\n \n   /**\n    * Cancel all outstanding timers\n    *\n    * @param swarm the swarm to cancel\n    */\n-  public static void cancelSwarm(Object /* T */ swarm) {\n-    Assert.assertTrue(swarm instanceof InternalDistributedSystem); // TODO\n+  public static void cancelSwarm(DistributedSystem swarm) {\n     // Find the swarmSet and remove it\n-    ArrayList swarmSet;\n+    List<WeakReference<SystemTimer>> swarmSet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d3397f6d8cf171db4b557973ea3688997c673b"}, "originalPosition": 274}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU2MjI2Mw==", "bodyText": "Glad you got rid of this dead constructor. I disliked it because it was dead. But I hated it because it was not chained.", "url": "https://github.com/apache/geode/pull/4822#discussion_r394562263", "createdAt": "2020-03-18T18:39:06Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/internal/SystemTimer.java", "diffHunk": "@@ -273,53 +238,19 @@ public static void cancelSwarm(Object /* T */ swarm) {\n   }\n \n   public int timerPurge() {\n-    if (logger.isTraceEnabled()) {\n-      logger.trace(\"SystemTimer#timerPurge of {}\", this);\n-    }\n-\n     // Fix 39585, IBM's java.util.timer's purge() has stack overflow issue\n     if (isIBM) {\n       return 0;\n     }\n     return this.timer.purge();\n   }\n \n-  // This creates a non-daemon timer thread. We don't EVER do this...\n-  // /**\n-  // * @see Timer#Timer()\n-  // *\n-  // * @param swarm the swarm this timer belongs to\n-  // */\n-  // public SystemTimer(DistributedSystem swarm) {\n-  // this.timer = new Timer();\n-  // this.swarm = swarm;\n-  // addToSwarm(swarm, this);\n-  // }\n-\n   /**\n    * @see Timer#Timer(boolean)\n    * @param swarm the swarm this timer belongs to, currently must be a DistributedSystem\n-   * @param isDaemon whether the timer is a daemon. Must be true for GemFire use.\n-   */\n-  public SystemTimer(Object /* T */ swarm, boolean isDaemon) {\n-    Assert.assertTrue(isDaemon); // we don't currently allow non-daemon timers\n-    Assert.assertTrue(swarm instanceof InternalDistributedSystem,\n-        \"Attempt to create swarm on \" + swarm); // TODO allow template class?\n-    this.timer = new Timer(isDaemon);\n-    this.swarm = swarm;\n-    addToSwarm(swarm, this);\n-  }\n-\n-  /**\n-   * @param name the name to give the timer thread\n-   * @param swarm the swarm this timer belongs to, currently must be a DistributedMember\n-   * @param isDaemon whether the timer is a daemon. Must be true for GemFire use.\n    */\n-  public SystemTimer(String name, Object /* T */ swarm, boolean isDaemon) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d3397f6d8cf171db4b557973ea3688997c673b"}, "originalPosition": 344}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDU3NTY2OA==", "bodyText": "I see idleTask is never changed from non-null back to null \u2713 OTOH since the variable is neither volatile nor guarded when we do the null-check, it is possible that if setIdleTimeoutTask() was called from a different thread than close() we could leak tasks.\nI feel like maybe idleTask and ackTimeoutTask need to be volatile for this reason. Or maybe they need to be final and set from the constructor.", "url": "https://github.com/apache/geode/pull/4822#discussion_r394575668", "createdAt": "2020-03-18T19:02:55Z", "author": {"login": "Bill"}, "path": "geode-core/src/main/java/org/apache/geode/internal/tcp/Connection.java", "diffHunk": "@@ -1411,11 +1411,15 @@ private void close(String reason, boolean cleanupEndpoint, boolean p_removeEndpo\n     // This cancels the idle timer task, but it also removes the tasks reference to this connection,\n     // freeing up the connection (and it's buffers for GC sooner.\n     if (idleTask != null) {\n-      idleTask.cancel();\n+      synchronized (idleTask) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89d3397f6d8cf171db4b557973ea3688997c673b"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MzIwOTIw", "url": "https://github.com/apache/geode/pull/4822#pullrequestreview-377320920", "createdAt": "2020-03-19T00:05:56Z", "commit": {"oid": "268a0d6c8b7c8f3ea9b0816603a877289904173b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad7cee55e3292f05a8bcda6d0ae20261e878b090", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/ad7cee55e3292f05a8bcda6d0ae20261e878b090", "committedDate": "2020-03-19T01:39:37Z", "message": "GEODE-7884: server hangs due to IllegalStateException\n\nAdded cancellation check before scheduling an idle-timeout or\nack-wait-threshold timer task.  I had to add a new method to\nSystemTimerTask and then noticed there were no tests for SystemTimer, so\nI cleaned up that class and added tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c189c013c5fa1a6003f7b60cfe8606b9bcaa1396", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/c189c013c5fa1a6003f7b60cfe8606b9bcaa1396", "committedDate": "2020-03-19T01:39:37Z", "message": "adding missing copyright header to new test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "522bd572432881c14a2c2661355e45863b6c763f", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/522bd572432881c14a2c2661355e45863b6c763f", "committedDate": "2020-03-19T01:39:37Z", "message": "fixing LGTM issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae39ff54c2170611e1b5e450c980db851b1329e5", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/ae39ff54c2170611e1b5e450c980db851b1329e5", "committedDate": "2020-03-19T01:39:37Z", "message": "reinstating 'continue' when encountering a null timer during a sweep"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c72117151484ca7ec32f8c408c8c66b867f199a4", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/c72117151484ca7ec32f8c408c8c66b867f199a4", "committedDate": "2020-03-19T01:39:38Z", "message": "addressing Bill's comments\n\nrenamed swarm everwhere\nmade the collection of timers associated with a DistributedSystem into a Set\nmade timer task variables in Connection volatile\nadded checks in tasks to cancel themselves if their Connection is closed"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "268a0d6c8b7c8f3ea9b0816603a877289904173b", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/268a0d6c8b7c8f3ea9b0816603a877289904173b", "committedDate": "2020-03-18T21:54:50Z", "message": "addressing Bill's comments\n\nrenamed swarm everwhere\nmade the collection of timers associated with a DistributedSystem into a Set\nmade timer task variables in Connection volatile\nadded checks in tasks to cancel themselves if their Connection is closed"}, "afterCommit": {"oid": "c72117151484ca7ec32f8c408c8c66b867f199a4", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/c72117151484ca7ec32f8c408c8c66b867f199a4", "committedDate": "2020-03-19T01:39:38Z", "message": "addressing Bill's comments\n\nrenamed swarm everwhere\nmade the collection of timers associated with a DistributedSystem into a Set\nmade timer task variables in Connection volatile\nadded checks in tasks to cancel themselves if their Connection is closed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NTk3MTc5", "url": "https://github.com/apache/geode/pull/4822#pullrequestreview-378597179", "createdAt": "2020-03-20T15:44:32Z", "commit": {"oid": "c72117151484ca7ec32f8c408c8c66b867f199a4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4885, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}