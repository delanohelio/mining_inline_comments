{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExMDQ3MzA2", "number": 5677, "title": "GEODE-7858: PR.clear notify client should let the queue holder member to notify", "bodyText": "", "createdAt": "2020-10-27T20:42:00Z", "url": "https://github.com/apache/geode/pull/5677", "merged": true, "mergeCommit": {"oid": "406042179bab4e3907315bf2a783ade9534c585d"}, "closed": true, "closedAt": "2020-10-29T00:02:54Z", "author": {"login": "jinmeiliao"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdW1e6RAFqTUxODMwODYyOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXD1NwAFqTUxOTA2ODcwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzA4NjI4", "url": "https://github.com/apache/geode/pull/5677#pullrequestreview-518308628", "createdAt": "2020-10-28T04:02:18Z", "commit": {"oid": "7bc2532bfc47b90cba20de725eda4494fb440c49"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7bc2532bfc47b90cba20de725eda4494fb440c49", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/7bc2532bfc47b90cba20de725eda4494fb440c49", "committedDate": "2020-10-27T20:40:14Z", "message": "GEODE-7858: PR.clear notify client should let the queue holder member to notify"}, "afterCommit": {"oid": "240305376b2f2dd9f7130f9b9e6d05a06719185f", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/240305376b2f2dd9f7130f9b9e6d05a06719185f", "committedDate": "2020-10-28T15:34:50Z", "message": "GEODE-7858: PR.clear notify client should let the queue holder member to notify"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4OTY4MTc5", "url": "https://github.com/apache/geode/pull/5677#pullrequestreview-518968179", "createdAt": "2020-10-28T18:28:24Z", "commit": {"oid": "240305376b2f2dd9f7130f9b9e6d05a06719185f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxODoyODoyNFrOHp4Bgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQxODoyODoyNFrOHp4Bgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzY3MTU1NQ==", "bodyText": "Should this clear be invoked on each server? If it successfully clears on one server, it seems it will be happy. and finish the loop. One could just introduce a break if cleared == true rather than continuing to loop.\nThe logic here is a bit odd either way.", "url": "https://github.com/apache/geode/pull/5677#discussion_r513671555", "createdAt": "2020-10-28T18:28:24Z", "author": {"login": "mhansonp"}, "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PartitionRegionClearMessageQueueDUnitTest.java", "diffHunk": "@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+import static org.apache.geode.test.dunit.rules.ClusterStartupRule.getCache;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Operation;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.query.CqAttributesFactory;\n+import org.apache.geode.cache.query.CqEvent;\n+import org.apache.geode.cache.query.CqListener;\n+import org.apache.geode.cache.query.CqQuery;\n+import org.apache.geode.cache.query.QueryService;\n+import org.apache.geode.internal.cache.tier.sockets.CacheClientNotifier;\n+import org.apache.geode.internal.cache.tier.sockets.CacheClientProxy;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.rules.ClientCacheRule;\n+\n+public class PartitionRegionClearMessageQueueDUnitTest {\n+  public static final String NAME = \"testRegion\";\n+  protected static MemberVM locator;\n+  protected static MemberVM server1, server2, server3, accessor;\n+  protected static List<MemberVM> servers;\n+\n+  @ClassRule\n+  public static ClusterStartupRule cluster = new ClusterStartupRule(5);\n+\n+  @ClassRule\n+  public static ClientCacheRule client = new ClientCacheRule();\n+\n+  @BeforeClass\n+  public static void setUp() throws Exception {\n+    locator = cluster.startLocatorVM(0);\n+    int locatorPort = locator.getPort();\n+    server1 = cluster.startServerVM(1,\n+        s -> s.withConnectionToLocator(locatorPort).withRegion(RegionShortcut.PARTITION, NAME));\n+    server2 = cluster.startServerVM(2,\n+        s -> s.withConnectionToLocator(locatorPort).withRegion(RegionShortcut.PARTITION, NAME));\n+    server3 = cluster.startServerVM(3,\n+        s -> s.withConnectionToLocator(locatorPort).withRegion(RegionShortcut.PARTITION, NAME));\n+    accessor = cluster.startServerVM(4, s -> s.withConnectionToLocator(locatorPort)\n+        .withRegion(RegionShortcut.PARTITION_PROXY, NAME));\n+\n+    servers = Arrays.asList(server1, server2, server3, accessor);\n+\n+    client.withLocatorConnection(locatorPort).withPoolSubscription(true).createCache();\n+    client.getCache()\n+        .createClientRegionFactory(ClientRegionShortcut.CACHING_PROXY)\n+        .create(NAME);\n+  }\n+\n+  @Test\n+  public void clearMessageSentToClientWithRegisteredInterest() throws Exception {\n+    Region<Object, Object> testRegion = client.getCache().getRegion(NAME);\n+\n+    assertThat(testRegion).isEmpty();\n+    server1.invoke(() -> addRecord(10));\n+    // verify that before register for interest, client region has no data\n+    assertThat(testRegion).hasSize(0);\n+\n+    // verify that after register for interest, client region has data now.\n+    testRegion.registerInterestForAllKeys();\n+    assertThat(testRegion).hasSize(10);\n+\n+    // do PR clear on a server that has no client proxy, hence no HARegionQueue\n+    Boolean cleared = false;\n+    for (int i = 0; i < servers.size(); i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "240305376b2f2dd9f7130f9b9e6d05a06719185f"}, "originalPosition": 92}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40664a6a3fdd08b5156012e07792fea2e053e76f", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/40664a6a3fdd08b5156012e07792fea2e053e76f", "committedDate": "2020-10-28T19:14:03Z", "message": "GEODE-7858: PR.clear notify client should let the queue holder member to notify"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c5fa46b8d76319684bd212b5e81fdae82dd3f88", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/2c5fa46b8d76319684bd212b5e81fdae82dd3f88", "committedDate": "2020-10-28T19:14:03Z", "message": "review requests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f4f486286d078ae3a42567f097afe212690ad467", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/f4f486286d078ae3a42567f097afe212690ad467", "committedDate": "2020-10-28T18:36:06Z", "message": "review requests"}, "afterCommit": {"oid": "2c5fa46b8d76319684bd212b5e81fdae82dd3f88", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/2c5fa46b8d76319684bd212b5e81fdae82dd3f88", "committedDate": "2020-10-28T19:14:03Z", "message": "review requests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MDY0ODI2", "url": "https://github.com/apache/geode/pull/5677#pullrequestreview-519064826", "createdAt": "2020-10-28T20:39:46Z", "commit": {"oid": "2c5fa46b8d76319684bd212b5e81fdae82dd3f88"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MDY4NzAx", "url": "https://github.com/apache/geode/pull/5677#pullrequestreview-519068701", "createdAt": "2020-10-28T20:45:20Z", "commit": {"oid": "2c5fa46b8d76319684bd212b5e81fdae82dd3f88"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDo0NToyMFrOHp8uPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQyMDo0NToyMFrOHp8uPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzc0ODU0Mw==", "bodyText": "I see in the tests the clear operations are invoked from a server directly, rather than from a client. If a server's clientProxies is not empty, can we invoke clear from that server? Will it work? I am not sure why clear has to be invoked from a server with empty clientProxies. Can you explain a bit?", "url": "https://github.com/apache/geode/pull/5677#discussion_r513748543", "createdAt": "2020-10-28T20:45:20Z", "author": {"login": "jchen21"}, "path": "geode-cq/src/distributedTest/java/org/apache/geode/internal/cache/PartitionRegionClearMessageQueueDUnitTest.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+import static org.apache.geode.test.dunit.rules.ClusterStartupRule.getCache;\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Operation;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.cache.query.CqAttributesFactory;\n+import org.apache.geode.cache.query.CqEvent;\n+import org.apache.geode.cache.query.CqListener;\n+import org.apache.geode.cache.query.CqQuery;\n+import org.apache.geode.cache.query.QueryService;\n+import org.apache.geode.internal.cache.tier.sockets.CacheClientNotifier;\n+import org.apache.geode.internal.cache.tier.sockets.CacheClientProxy;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.rules.ClientCacheRule;\n+\n+public class PartitionRegionClearMessageQueueDUnitTest {\n+  public static final String NAME = \"testRegion\";\n+  protected static MemberVM locator;\n+  protected static MemberVM server1, server2, server3, accessor;\n+  protected static List<MemberVM> servers;\n+\n+  @ClassRule\n+  public static ClusterStartupRule cluster = new ClusterStartupRule(5);\n+\n+  @ClassRule\n+  public static ClientCacheRule client = new ClientCacheRule();\n+\n+  @BeforeClass\n+  public static void setUp() throws Exception {\n+    locator = cluster.startLocatorVM(0);\n+    int locatorPort = locator.getPort();\n+    server1 = cluster.startServerVM(1,\n+        s -> s.withConnectionToLocator(locatorPort).withRegion(RegionShortcut.PARTITION, NAME));\n+    server2 = cluster.startServerVM(2,\n+        s -> s.withConnectionToLocator(locatorPort).withRegion(RegionShortcut.PARTITION, NAME));\n+    server3 = cluster.startServerVM(3,\n+        s -> s.withConnectionToLocator(locatorPort).withRegion(RegionShortcut.PARTITION, NAME));\n+    accessor = cluster.startServerVM(4, s -> s.withConnectionToLocator(locatorPort)\n+        .withRegion(RegionShortcut.PARTITION_PROXY, NAME));\n+\n+    servers = Arrays.asList(server1, server2, server3, accessor);\n+\n+    client.withLocatorConnection(locatorPort).withPoolSubscription(true).createCache();\n+    client.getCache()\n+        .createClientRegionFactory(ClientRegionShortcut.CACHING_PROXY)\n+        .create(NAME);\n+  }\n+\n+  @Test\n+  public void clearMessageSentToClientWithRegisteredInterest() throws Exception {\n+    Region<Object, Object> testRegion = client.getCache().getRegion(NAME);\n+\n+    assertThat(testRegion).isEmpty();\n+    server1.invoke(() -> addRecord(10));\n+    // verify that before register for interest, client region has no data\n+    assertThat(testRegion).hasSize(0);\n+\n+    // verify that after register for interest, client region has data now.\n+    testRegion.registerInterestForAllKeys();\n+    assertThat(testRegion).hasSize(10);\n+\n+    // do PR clear on a server that has no client proxy, hence no HARegionQueue\n+    Boolean cleared = false;\n+    for (int i = 0; i < servers.size(); i++) {\n+      cleared = servers.get(i).invoke(\n+          PartitionRegionClearMessageQueueDUnitTest::clearRegionOnNoClientProxyMember);\n+      if (cleared) {\n+        break;\n+      }\n+    }\n+\n+    // verify that clear is called on a server\n+    assertThat(cleared).isTrue();\n+    // verify that the PR clear message is still delivered to the client\n+    assertThat(testRegion).hasSize(0);\n+  }\n+\n+  private static void addRecord(int size) {\n+    Region<Object, Object> region = getTestRegion();\n+    for (int i = 0; i < size; i++) {\n+      region.put(i, \"value\" + i);\n+    }\n+  }\n+\n+  @Test\n+  public void clearMessageSentToClientWithCQ() throws Exception {\n+    QueryService queryService = client.getCache().getDefaultPool().getQueryService();\n+    CqAttributesFactory cqaFactory = new CqAttributesFactory();\n+    AtomicBoolean clearEventReceived = new AtomicBoolean(false);\n+    cqaFactory.addCqListener(new CqListener() {\n+      @Override\n+      public void onEvent(CqEvent aCqEvent) {\n+        Operation baseOperation = aCqEvent.getBaseOperation();\n+        if (baseOperation.isClear()) {\n+          clearEventReceived.set(true);\n+        }\n+      }\n+\n+      @Override\n+      public void onError(CqEvent aCqEvent) {}\n+    });\n+\n+    CqQuery cqQuery =\n+        queryService.newCq(\"select * from /\" + NAME, cqaFactory.create());\n+    cqQuery.execute();\n+\n+    server1.invoke(() -> addRecord(10));\n+\n+    Boolean cleared = false;\n+    for (int i = 0; i < servers.size(); i++) {\n+      cleared = servers.get(i).invoke(\n+          PartitionRegionClearMessageQueueDUnitTest::clearRegionOnNoClientProxyMember);\n+      if (cleared) {\n+        break;\n+      }\n+    }\n+\n+    // verify that clear is called on a server\n+    assertThat(cleared).isTrue();\n+    // verify that the PR clear message is still delivered to the client\n+    assertThat(clearEventReceived.get()).isTrue();\n+  }\n+\n+  private static boolean clearRegionOnNoClientProxyMember() {\n+    Collection<CacheClientProxy> clientProxies =\n+        CacheClientNotifier.getInstance().getClientProxies();\n+    if (clientProxies.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c5fa46b8d76319684bd212b5e81fdae82dd3f88"}, "originalPosition": 155}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3987, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}