{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNjgzNTU1", "number": 4938, "title": "GEODE-7852: Add bulk operation / large result tests for SNI gateway", "bodyText": "Adding tests for query, putAll, getAll.  Ensuring that a client can\nreceive responses that are streamed through \"chunking\" from the server.\nThe test now creates the server cluster and client cache in a class rule\nfor faster execution.\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-04-09T22:59:57Z", "url": "https://github.com/apache/geode/pull/4938", "merged": true, "mergeCommit": {"oid": "a1ed7f23479998e7869c541c82f7140516d2cd87"}, "closed": true, "closedAt": "2020-04-13T20:27:14Z", "author": {"login": "bschuchardt"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWS2FfgBqjMyMjIyMDAzMzI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcXTBO6gBqjMyMjgwMzYyOTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae87dd490d240cafaf002686cd10ac1e9cccad3b", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/ae87dd490d240cafaf002686cd10ac1e9cccad3b", "committedDate": "2020-04-10T14:59:16Z", "message": "removed useless test of toString method"}, "afterCommit": {"oid": "4d593a716881bb66b19f7d3ebdd0c2ad6b2b0da9", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/4d593a716881bb66b19f7d3ebdd0c2ad6b2b0da9", "committedDate": "2020-04-10T15:29:07Z", "message": "rebasing on develop after Bill's revert"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjgwNjA2", "url": "https://github.com/apache/geode/pull/4938#pullrequestreview-391680606", "createdAt": "2020-04-10T21:51:26Z", "commit": {"oid": "649f0a72fa8aaaed75100818edb3825b4fc2d729"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMTo1MToyNlrOGEGy3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMjowMDoxMVrOGEG9cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk1ODgxMw==", "bodyText": "Is this comment correct? When I look at MAXIMUM_CHUNK_SIZE I see it defaults to 100. If that's the value it has then numberOfKeys would be 1000", "url": "https://github.com/apache/geode/pull/4938#discussion_r406958813", "createdAt": "2020-04-10T21:51:26Z", "author": {"login": "Bill"}, "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIAcceptanceTest.java", "diffHunk": "@@ -58,50 +64,143 @@\n       .file(DOCKER_COMPOSE_PATH.getPath())\n       .build();\n \n-\n-  private String trustStorePath;\n+  private ClientCache cache;\n+  private Region<String, String> region;\n+  private Map<String, String> bulkData;\n \n   @Before\n   public void before() throws IOException, InterruptedException {\n-    trustStorePath =\n+    // start up server/locator processes and initialize the server cache\n+    docker.exec(options(\"-T\"), \"geode\",\n+        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter.gfsh\"));\n+\n+    final String trustStorePath =\n         createTempFileFromResource(ClientSNIAcceptanceTest.class,\n             \"geode-config/truststore.jks\")\n                 .getAbsolutePath();\n-    docker.exec(options(\"-T\"), \"geode\",\n-        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter.gfsh\"));\n+\n+    // set up client cache properties so it can connect to the server\n+    Properties clientCacheProperties = new Properties();\n+    clientCacheProperties.setProperty(SSL_ENABLED_COMPONENTS, \"all\");\n+    clientCacheProperties.setProperty(SSL_KEYSTORE_TYPE, \"jks\");\n+    clientCacheProperties.setProperty(SSL_REQUIRE_AUTHENTICATION, \"false\");\n+\n+    clientCacheProperties.setProperty(SSL_TRUSTSTORE, trustStorePath);\n+    clientCacheProperties.setProperty(SSL_TRUSTSTORE_PASSWORD, \"geode\");\n+    clientCacheProperties.setProperty(SSL_ENDPOINT_IDENTIFICATION_ENABLED, \"true\");\n+    cache = getClientCache(clientCacheProperties);\n+\n+    // the gfsh startup script created a server-side region named \"jellyfish\"\n+    region = cache.<String, String>createClientRegionFactory(ClientRegionShortcut.PROXY)\n+        .create(\"jellyfish\");\n+    bulkData = getBulkDataMap();\n+    region.putAll(bulkData);\n+  }\n+\n+  @After\n+  public void after() {\n+    // preserve this commented code for debugging\n+    // String logs = docker.exec(options(\"-T\"), \"geode\",\n+    // arguments(\"cat\", \"server-dolores/server-dolores.log\"));\n+    // System.out.println(\"server logs------------------------------------------\");\n+    // System.out.println(logs);\n+\n+    if (cache != null) {\n+      cache.close();\n+      cache = null;\n+    }\n+    bulkData = null;\n+    region = null;\n   }\n \n+  // run all tests in one @Test to avoid having to stage a new Docker cluster for each\n   @Test\n+  public void runAllTests() throws Exception {\n+    connectToSNIProxyDocker();\n+    verifyServerAPIs();\n+    query();\n+    getAll();\n+    removeAll();\n+  }\n+\n+  /**\n+   * A basic connectivity test that performs a few simple operations\n+   */\n   public void connectToSNIProxyDocker() {\n-    Properties gemFireProps = new Properties();\n-    gemFireProps.setProperty(SSL_ENABLED_COMPONENTS, \"all\");\n-    gemFireProps.setProperty(SSL_KEYSTORE_TYPE, \"jks\");\n-    gemFireProps.setProperty(SSL_REQUIRE_AUTHENTICATION, \"false\");\n+    region.put(\"hello\", \"world\");\n+    assertThat(region.containsKey(\"hello\")).isFalse(); // proxy regions don't store locally\n+    assertThat(region.get(\"hello\")).isEqualTo(\"world\");\n+    region.destroy(\"hello\");\n+    assertThat(region.get(\"hello\")).isNull();\n+  }\n+\n+  /**\n+   * A test of Region query that returns a \"big\" result\n+   */\n+  public void query() throws Exception {\n+    final SelectResults<String> results = region.query(\"SELECT * from /jellyfish\");\n+    assertThat(results).hasSize(bulkData.size());\n+    for (String result : results) {\n+      assertThat(bulkData.containsValue(result)).isTrue();\n+    }\n+  }\n+\n+  /**\n+   * A test of Region bulk getAll\n+   */\n+  public void getAll() {\n+    final Map<String, String> results = region.getAll(bulkData.keySet());\n+    assertThat(results).hasSize(bulkData.size());\n+    for (Map.Entry<String, String> entry : results.entrySet()) {\n+      assertThat(region.containsKey(entry.getKey())).isFalse();\n+      assertThat(bulkData.containsKey(entry.getKey())).isTrue();\n+      assertThat(entry.getValue()).isEqualTo(bulkData.get(entry.getKey()));\n+    }\n+  }\n+\n+  /**\n+   * A test of Region bulk removeAll\n+   */\n+  public void removeAll() {\n+    assertThat(region.sizeOnServer()).isEqualTo(bulkData.size());\n+    region.removeAll(bulkData.keySet());\n+    assertThat(region.sizeOnServer()).isZero();\n+    region.putAll(bulkData);\n+  }\n \n-    gemFireProps.setProperty(SSL_TRUSTSTORE, trustStorePath);\n-    gemFireProps.setProperty(SSL_TRUSTSTORE_PASSWORD, \"geode\");\n-    gemFireProps.setProperty(SSL_ENDPOINT_IDENTIFICATION_ENABLED, \"true\");\n+  /**\n+   * A test of the Region API's methods that directly access the server cache\n+   */\n+  public void verifyServerAPIs() {\n+    assertThat(region.sizeOnServer()).isEqualTo(bulkData.size());\n+    Set<String> keysOnServer = region.keySetOnServer();\n+    for (String entry : bulkData.keySet()) {\n+      assertThat(region.containsKeyOnServer(entry)).isTrue();\n+      assertThat(keysOnServer).contains(entry);\n+    }\n+  }\n+\n+\n+  protected Map<String, String> getBulkDataMap() {\n+    // create a putAll map with enough keys to force a lot of \"chunking\" of the results\n+    int numberOfKeys = BaseCommand.MAXIMUM_CHUNK_SIZE * 10; // 10,000 keys", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "649f0a72fa8aaaed75100818edb3825b4fc2d729"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2MDUyMg==", "bodyText": "I don't understand why the region should not contain this key?", "url": "https://github.com/apache/geode/pull/4938#discussion_r406960522", "createdAt": "2020-04-10T21:56:48Z", "author": {"login": "Bill"}, "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIAcceptanceTest.java", "diffHunk": "@@ -58,50 +64,143 @@\n       .file(DOCKER_COMPOSE_PATH.getPath())\n       .build();\n \n-\n-  private String trustStorePath;\n+  private ClientCache cache;\n+  private Region<String, String> region;\n+  private Map<String, String> bulkData;\n \n   @Before\n   public void before() throws IOException, InterruptedException {\n-    trustStorePath =\n+    // start up server/locator processes and initialize the server cache\n+    docker.exec(options(\"-T\"), \"geode\",\n+        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter.gfsh\"));\n+\n+    final String trustStorePath =\n         createTempFileFromResource(ClientSNIAcceptanceTest.class,\n             \"geode-config/truststore.jks\")\n                 .getAbsolutePath();\n-    docker.exec(options(\"-T\"), \"geode\",\n-        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter.gfsh\"));\n+\n+    // set up client cache properties so it can connect to the server\n+    Properties clientCacheProperties = new Properties();\n+    clientCacheProperties.setProperty(SSL_ENABLED_COMPONENTS, \"all\");\n+    clientCacheProperties.setProperty(SSL_KEYSTORE_TYPE, \"jks\");\n+    clientCacheProperties.setProperty(SSL_REQUIRE_AUTHENTICATION, \"false\");\n+\n+    clientCacheProperties.setProperty(SSL_TRUSTSTORE, trustStorePath);\n+    clientCacheProperties.setProperty(SSL_TRUSTSTORE_PASSWORD, \"geode\");\n+    clientCacheProperties.setProperty(SSL_ENDPOINT_IDENTIFICATION_ENABLED, \"true\");\n+    cache = getClientCache(clientCacheProperties);\n+\n+    // the gfsh startup script created a server-side region named \"jellyfish\"\n+    region = cache.<String, String>createClientRegionFactory(ClientRegionShortcut.PROXY)\n+        .create(\"jellyfish\");\n+    bulkData = getBulkDataMap();\n+    region.putAll(bulkData);\n+  }\n+\n+  @After\n+  public void after() {\n+    // preserve this commented code for debugging\n+    // String logs = docker.exec(options(\"-T\"), \"geode\",\n+    // arguments(\"cat\", \"server-dolores/server-dolores.log\"));\n+    // System.out.println(\"server logs------------------------------------------\");\n+    // System.out.println(logs);\n+\n+    if (cache != null) {\n+      cache.close();\n+      cache = null;\n+    }\n+    bulkData = null;\n+    region = null;\n   }\n \n+  // run all tests in one @Test to avoid having to stage a new Docker cluster for each\n   @Test\n+  public void runAllTests() throws Exception {\n+    connectToSNIProxyDocker();\n+    verifyServerAPIs();\n+    query();\n+    getAll();\n+    removeAll();\n+  }\n+\n+  /**\n+   * A basic connectivity test that performs a few simple operations\n+   */\n   public void connectToSNIProxyDocker() {\n-    Properties gemFireProps = new Properties();\n-    gemFireProps.setProperty(SSL_ENABLED_COMPONENTS, \"all\");\n-    gemFireProps.setProperty(SSL_KEYSTORE_TYPE, \"jks\");\n-    gemFireProps.setProperty(SSL_REQUIRE_AUTHENTICATION, \"false\");\n+    region.put(\"hello\", \"world\");\n+    assertThat(region.containsKey(\"hello\")).isFalse(); // proxy regions don't store locally\n+    assertThat(region.get(\"hello\")).isEqualTo(\"world\");\n+    region.destroy(\"hello\");\n+    assertThat(region.get(\"hello\")).isNull();\n+  }\n+\n+  /**\n+   * A test of Region query that returns a \"big\" result\n+   */\n+  public void query() throws Exception {\n+    final SelectResults<String> results = region.query(\"SELECT * from /jellyfish\");\n+    assertThat(results).hasSize(bulkData.size());\n+    for (String result : results) {\n+      assertThat(bulkData.containsValue(result)).isTrue();\n+    }\n+  }\n+\n+  /**\n+   * A test of Region bulk getAll\n+   */\n+  public void getAll() {\n+    final Map<String, String> results = region.getAll(bulkData.keySet());\n+    assertThat(results).hasSize(bulkData.size());\n+    for (Map.Entry<String, String> entry : results.entrySet()) {\n+      assertThat(region.containsKey(entry.getKey())).isFalse();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "649f0a72fa8aaaed75100818edb3825b4fc2d729"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2MTA1Nw==", "bodyText": "should we be testing clear() also?", "url": "https://github.com/apache/geode/pull/4938#discussion_r406961057", "createdAt": "2020-04-10T21:58:42Z", "author": {"login": "Bill"}, "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIAcceptanceTest.java", "diffHunk": "@@ -58,50 +64,143 @@\n       .file(DOCKER_COMPOSE_PATH.getPath())\n       .build();\n \n-\n-  private String trustStorePath;\n+  private ClientCache cache;\n+  private Region<String, String> region;\n+  private Map<String, String> bulkData;\n \n   @Before\n   public void before() throws IOException, InterruptedException {\n-    trustStorePath =\n+    // start up server/locator processes and initialize the server cache\n+    docker.exec(options(\"-T\"), \"geode\",\n+        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter.gfsh\"));\n+\n+    final String trustStorePath =\n         createTempFileFromResource(ClientSNIAcceptanceTest.class,\n             \"geode-config/truststore.jks\")\n                 .getAbsolutePath();\n-    docker.exec(options(\"-T\"), \"geode\",\n-        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter.gfsh\"));\n+\n+    // set up client cache properties so it can connect to the server\n+    Properties clientCacheProperties = new Properties();\n+    clientCacheProperties.setProperty(SSL_ENABLED_COMPONENTS, \"all\");\n+    clientCacheProperties.setProperty(SSL_KEYSTORE_TYPE, \"jks\");\n+    clientCacheProperties.setProperty(SSL_REQUIRE_AUTHENTICATION, \"false\");\n+\n+    clientCacheProperties.setProperty(SSL_TRUSTSTORE, trustStorePath);\n+    clientCacheProperties.setProperty(SSL_TRUSTSTORE_PASSWORD, \"geode\");\n+    clientCacheProperties.setProperty(SSL_ENDPOINT_IDENTIFICATION_ENABLED, \"true\");\n+    cache = getClientCache(clientCacheProperties);\n+\n+    // the gfsh startup script created a server-side region named \"jellyfish\"\n+    region = cache.<String, String>createClientRegionFactory(ClientRegionShortcut.PROXY)\n+        .create(\"jellyfish\");\n+    bulkData = getBulkDataMap();\n+    region.putAll(bulkData);\n+  }\n+\n+  @After\n+  public void after() {\n+    // preserve this commented code for debugging\n+    // String logs = docker.exec(options(\"-T\"), \"geode\",\n+    // arguments(\"cat\", \"server-dolores/server-dolores.log\"));\n+    // System.out.println(\"server logs------------------------------------------\");\n+    // System.out.println(logs);\n+\n+    if (cache != null) {\n+      cache.close();\n+      cache = null;\n+    }\n+    bulkData = null;\n+    region = null;\n   }\n \n+  // run all tests in one @Test to avoid having to stage a new Docker cluster for each\n   @Test\n+  public void runAllTests() throws Exception {\n+    connectToSNIProxyDocker();\n+    verifyServerAPIs();\n+    query();\n+    getAll();\n+    removeAll();\n+  }\n+\n+  /**\n+   * A basic connectivity test that performs a few simple operations\n+   */\n   public void connectToSNIProxyDocker() {\n-    Properties gemFireProps = new Properties();\n-    gemFireProps.setProperty(SSL_ENABLED_COMPONENTS, \"all\");\n-    gemFireProps.setProperty(SSL_KEYSTORE_TYPE, \"jks\");\n-    gemFireProps.setProperty(SSL_REQUIRE_AUTHENTICATION, \"false\");\n+    region.put(\"hello\", \"world\");\n+    assertThat(region.containsKey(\"hello\")).isFalse(); // proxy regions don't store locally\n+    assertThat(region.get(\"hello\")).isEqualTo(\"world\");\n+    region.destroy(\"hello\");\n+    assertThat(region.get(\"hello\")).isNull();\n+  }\n+\n+  /**\n+   * A test of Region query that returns a \"big\" result\n+   */\n+  public void query() throws Exception {\n+    final SelectResults<String> results = region.query(\"SELECT * from /jellyfish\");\n+    assertThat(results).hasSize(bulkData.size());\n+    for (String result : results) {\n+      assertThat(bulkData.containsValue(result)).isTrue();\n+    }\n+  }\n+\n+  /**\n+   * A test of Region bulk getAll\n+   */\n+  public void getAll() {\n+    final Map<String, String> results = region.getAll(bulkData.keySet());\n+    assertThat(results).hasSize(bulkData.size());\n+    for (Map.Entry<String, String> entry : results.entrySet()) {\n+      assertThat(region.containsKey(entry.getKey())).isFalse();\n+      assertThat(bulkData.containsKey(entry.getKey())).isTrue();\n+      assertThat(entry.getValue()).isEqualTo(bulkData.get(entry.getKey()));\n+    }\n+  }\n+\n+  /**\n+   * A test of Region bulk removeAll\n+   */\n+  public void removeAll() {\n+    assertThat(region.sizeOnServer()).isEqualTo(bulkData.size());\n+    region.removeAll(bulkData.keySet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "649f0a72fa8aaaed75100818edb3825b4fc2d729"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk2MTUyMA==", "bodyText": "I see you modified toString(). is there a reason why this test is no longer valuable?", "url": "https://github.com/apache/geode/pull/4938#discussion_r406961520", "createdAt": "2020-04-10T22:00:11Z", "author": {"login": "Bill"}, "path": "geode-tcp-server/src/test/java/org/apache/geode/distributed/internal/tcpserver/HostAndPortTest.java", "diffHunk": "@@ -93,12 +93,6 @@ public void hashCode_of_SocketAddress() {\n     assertThat(locator1.hashCode()).isEqualTo(host1address.hashCode());\n   }\n \n-  @Test\n-  public void toString_LocatorAddress() {\n-    HostAndPort locator1 = new HostAndPort(\"fakelocalhost\", 8091);\n-    assertThat(locator1.toString()).contains(\"socketInetAddress\");\n-  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "649f0a72fa8aaaed75100818edb3825b4fc2d729"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjgwMzU3", "url": "https://github.com/apache/geode/pull/4938#pullrequestreview-391680357", "createdAt": "2020-04-10T21:50:41Z", "commit": {"oid": "649f0a72fa8aaaed75100818edb3825b4fc2d729"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMTo1MDo0MVrOGEGyDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQyMTo1MDo0MVrOGEGyDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjk1ODYwNQ==", "bodyText": "Should this code just be enabled by default so we have the logs in CI?", "url": "https://github.com/apache/geode/pull/4938#discussion_r406958605", "createdAt": "2020-04-10T21:50:41Z", "author": {"login": "upthewaterspout"}, "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/client/sni/ClientSNIAcceptanceTest.java", "diffHunk": "@@ -58,50 +64,143 @@\n       .file(DOCKER_COMPOSE_PATH.getPath())\n       .build();\n \n-\n-  private String trustStorePath;\n+  private ClientCache cache;\n+  private Region<String, String> region;\n+  private Map<String, String> bulkData;\n \n   @Before\n   public void before() throws IOException, InterruptedException {\n-    trustStorePath =\n+    // start up server/locator processes and initialize the server cache\n+    docker.exec(options(\"-T\"), \"geode\",\n+        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter.gfsh\"));\n+\n+    final String trustStorePath =\n         createTempFileFromResource(ClientSNIAcceptanceTest.class,\n             \"geode-config/truststore.jks\")\n                 .getAbsolutePath();\n-    docker.exec(options(\"-T\"), \"geode\",\n-        arguments(\"gfsh\", \"run\", \"--file=/geode/scripts/geode-starter.gfsh\"));\n+\n+    // set up client cache properties so it can connect to the server\n+    Properties clientCacheProperties = new Properties();\n+    clientCacheProperties.setProperty(SSL_ENABLED_COMPONENTS, \"all\");\n+    clientCacheProperties.setProperty(SSL_KEYSTORE_TYPE, \"jks\");\n+    clientCacheProperties.setProperty(SSL_REQUIRE_AUTHENTICATION, \"false\");\n+\n+    clientCacheProperties.setProperty(SSL_TRUSTSTORE, trustStorePath);\n+    clientCacheProperties.setProperty(SSL_TRUSTSTORE_PASSWORD, \"geode\");\n+    clientCacheProperties.setProperty(SSL_ENDPOINT_IDENTIFICATION_ENABLED, \"true\");\n+    cache = getClientCache(clientCacheProperties);\n+\n+    // the gfsh startup script created a server-side region named \"jellyfish\"\n+    region = cache.<String, String>createClientRegionFactory(ClientRegionShortcut.PROXY)\n+        .create(\"jellyfish\");\n+    bulkData = getBulkDataMap();\n+    region.putAll(bulkData);\n+  }\n+\n+  @After\n+  public void after() {\n+    // preserve this commented code for debugging\n+    // String logs = docker.exec(options(\"-T\"), \"geode\",\n+    // arguments(\"cat\", \"server-dolores/server-dolores.log\"));\n+    // System.out.println(\"server logs------------------------------------------\");\n+    // System.out.println(logs);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "649f0a72fa8aaaed75100818edb3825b4fc2d729"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNjg3OTky", "url": "https://github.com/apache/geode/pull/4938#pullrequestreview-391687992", "createdAt": "2020-04-10T22:15:59Z", "commit": {"oid": "649f0a72fa8aaaed75100818edb3825b4fc2d729"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e12bf75e667d162e731a67f30bf5e0bb873a7709", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/e12bf75e667d162e731a67f30bf5e0bb873a7709", "committedDate": "2020-04-13T18:03:46Z", "message": "GEODE-7852: Add client side configuration option to support a SNI proxy\n\nAdding tests for query, putAll, getAll.  Ensuring that a client can\nreceive responses that are streamed through \"chunking\" from the server.\n\nThe test now creates the server cluster and client cache in a class rule\nfor faster execution."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f64662a6e1c8ced6b2fb6929c99b971ae8eab93f", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/f64662a6e1c8ced6b2fb6929c99b971ae8eab93f", "committedDate": "2020-04-13T18:03:55Z", "message": "removed useless test of toString method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd80530086a83d41a001bbe73537aba7dcc09e3e", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/dd80530086a83d41a001bbe73537aba7dcc09e3e", "committedDate": "2020-04-13T18:03:55Z", "message": "rebasing on develop after Bill's revert"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e5aff31a28fe472f34efab00119365b2db89708", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/2e5aff31a28fe472f34efab00119365b2db89708", "committedDate": "2020-04-13T18:03:55Z", "message": "avoiding Windows lack of Docker support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9662f87b430549f09a5beeab1e4a0f79914ac07", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/b9662f87b430549f09a5beeab1e4a0f79914ac07", "committedDate": "2020-04-13T18:03:55Z", "message": "removing more statics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "636197b3a9241ed0344310086cb4973257214c07", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/636197b3a9241ed0344310086cb4973257214c07", "committedDate": "2020-04-13T18:03:55Z", "message": "more statics removed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8b33c1972974a771aace7a6e6e11866da958ab5", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/f8b33c1972974a771aace7a6e6e11866da958ab5", "committedDate": "2020-04-13T18:03:55Z", "message": "adding a removeAll test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "629254382e07b7d865ca6472b65b65e3709f3468", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/629254382e07b7d865ca6472b65b65e3709f3468", "committedDate": "2020-04-13T18:03:56Z", "message": "removing foo/bar from cluster startup script and test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7582bd869a763959820dcaeaf6e8598ec05e676", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/f7582bd869a763959820dcaeaf6e8598ec05e676", "committedDate": "2020-04-13T18:03:56Z", "message": "fixing comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd26491589159d3210207b1486f49dec0f0c5af3", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/cd26491589159d3210207b1486f49dec0f0c5af3", "committedDate": "2020-04-13T18:03:56Z", "message": "incorporating Dan's new Rule to avoid running on Windows"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29ce395d29fb6a1670aac8c14eb03eb6aec1dd37", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/29ce395d29fb6a1670aac8c14eb03eb6aec1dd37", "committedDate": "2020-04-13T16:07:31Z", "message": "incorporating Dan's new Rule to avoid running on Windows"}, "afterCommit": {"oid": "cd26491589159d3210207b1486f49dec0f0c5af3", "author": {"user": {"login": "bschuchardt", "name": "Bruce Schuchardt"}}, "url": "https://github.com/apache/geode/commit/cd26491589159d3210207b1486f49dec0f0c5af3", "committedDate": "2020-04-13T18:03:56Z", "message": "incorporating Dan's new Rule to avoid running on Windows"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4794, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}