{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNjg2NTk0", "number": 5801, "title": "GEODE-8665: validate offline-disk-store command is missing information", "bodyText": "Thank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-12-02T01:55:50Z", "url": "https://github.com/apache/geode/pull/5801", "merged": true, "mergeCommit": {"oid": "6e3e43c1fa28b4d4b626f9231d677a365051d873"}, "closed": true, "closedAt": "2020-12-15T21:34:12Z", "author": {"login": "jchen21"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdiEntLgH2gAyNTMwNjg2NTk0OjM0ZTYxMjVmNWY5NWE0ZDkzMDU3MmY3YjM2YzlmYjU4MWE4NjgwZjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmNBQrAH2gAyNTMwNjg2NTk0OmYxYjNmMTIyNjE1ZmYyMjQ3MjM1M2I2NjE5MzY3MzZhMWRmODhjNjY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "34e6125f5f95a4d930572f7b36c9fb581a8680f6", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/34e6125f5f95a4d930572f7b36c9fb581a8680f6", "committedDate": "2020-12-02T01:53:39Z", "message": "Initial fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af9cb350efc60ac0be4b4dd18b5344b6239f37d4", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/af9cb350efc60ac0be4b4dd18b5344b6239f37d4", "committedDate": "2020-12-04T22:58:16Z", "message": "Add a DUnit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNTA5NTAw", "url": "https://github.com/apache/geode/pull/5801#pullrequestreview-551509500", "createdAt": "2020-12-14T15:57:24Z", "commit": {"oid": "af9cb350efc60ac0be4b4dd18b5344b6239f37d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTo1NzoyNFrOIFXa7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTo1NzoyNFrOIFXa7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ5NzUxOQ==", "bodyText": "Can there be a case where tc and tlc both are same number (including 0); in that case dead-record-counts are 0; is this valid?", "url": "https://github.com/apache/geode/pull/5801#discussion_r542497519", "createdAt": "2020-12-14T15:57:24Z", "author": {"login": "agingade"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/Oplog.java", "diffHunk": "@@ -2225,6 +2225,12 @@ long recoverCrf(OplogEntryIdSet deletedIds, boolean recoverValues, boolean recov\n         if (getParent().isOfflineCompacting()) {\n           getParent().incLiveEntryCount(getRecoveryMap().size());\n         }\n+        long tc = totalCount.get();\n+        long tlc = totalLiveCount.get();\n+        if (getParent().isValidating() && tlc >= 0\n+            && tc > tlc) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af9cb350efc60ac0be4b4dd18b5344b6239f37d4"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxOTIxNTIz", "url": "https://github.com/apache/geode/pull/5801#pullrequestreview-551921523", "createdAt": "2020-12-14T21:49:03Z", "commit": {"oid": "af9cb350efc60ac0be4b4dd18b5344b6239f37d4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTo0OTowM1rOIFr2eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQyMTo0OTowM1rOIFr2eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgzMjI1MA==", "bodyText": "method name should starts with lower case.", "url": "https://github.com/apache/geode/pull/5801#discussion_r542832250", "createdAt": "2020-12-14T21:49:03Z", "author": {"login": "gesterzhou"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/ValidateOfflineDiskStoreDUnitTest.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+import static org.apache.geode.distributed.ConfigurationProperties.HTTP_SERVICE_PORT;\n+import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER;\n+import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER_PORT;\n+import static org.apache.geode.distributed.ConfigurationProperties.JMX_MANAGER_START;\n+import static org.apache.geode.distributed.ConfigurationProperties.LOCATORS;\n+import static org.apache.geode.distributed.ConfigurationProperties.LOG_FILE;\n+import static org.apache.geode.distributed.ConfigurationProperties.MAX_WAIT_TIME_RECONNECT;\n+import static org.apache.geode.distributed.ConfigurationProperties.MEMBER_TIMEOUT;\n+import static org.apache.geode.internal.AvailablePortHelper.getRandomAvailableTCPPorts;\n+import static org.apache.geode.internal.lang.SystemPropertyHelper.GEODE_PREFIX;\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.apache.geode.test.dunit.Disconnect.disconnectAllFromDS;\n+import static org.apache.geode.test.dunit.Invoke.invokeInEveryVM;\n+import static org.apache.geode.test.dunit.VM.getVM;\n+import static org.apache.geode.test.dunit.VM.getVMId;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.mock;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.PrintStream;\n+import java.io.Serializable;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.IntStream;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.client.ClientCache;\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.ClientRegionShortcut;\n+import org.apache.geode.distributed.LocatorLauncher;\n+import org.apache.geode.distributed.ServerLauncher;\n+import org.apache.geode.distributed.internal.InternalLocator;\n+import org.apache.geode.internal.lang.SystemPropertyHelper;\n+import org.apache.geode.management.internal.cli.util.CommandStringBuilder;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.junit.rules.GfshCommandRule;\n+import org.apache.geode.test.junit.rules.serializable.SerializableTemporaryFolder;\n+\n+public class ValidateOfflineDiskStoreDUnitTest implements Serializable {\n+\n+  @Rule\n+  public transient GfshCommandRule gfsh = new GfshCommandRule();\n+\n+  @Rule\n+  public SerializableTemporaryFolder temporaryFolder = new SerializableTemporaryFolder();\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule(2);\n+\n+  private String locatorName;\n+\n+  private File locatorDir;\n+\n+  private int locatorPort;\n+\n+  private int locatorJmxPort;\n+\n+  private static final LocatorLauncher DUMMY_LOCATOR = mock(LocatorLauncher.class);\n+\n+  private static final AtomicReference<LocatorLauncher> LOCATOR =\n+      new AtomicReference<>(DUMMY_LOCATOR);\n+\n+  private VM server;\n+\n+  private String serverName;\n+\n+  private File serverDir;\n+\n+  private int serverPort;\n+\n+  private String locators;\n+\n+  private static final ServerLauncher DUMMY_SERVER = mock(ServerLauncher.class);\n+\n+  private static final AtomicReference<ServerLauncher> SERVER =\n+      new AtomicReference<>(DUMMY_SERVER);\n+\n+  private final int NUM_ENTRIES = 1000;\n+\n+  private static final String DISK_STORE_NAME = \"testDiskStore\";\n+\n+  private static final String REGION_NAME = \"testRegion\";\n+\n+  @Before\n+  public void setUp() throws Exception {\n+    VM locator = getVM(0);\n+    server = getVM(1);\n+\n+    locatorName = \"locator\";\n+    serverName = \"server\";\n+\n+    locatorDir = temporaryFolder.newFolder(locatorName);\n+\n+    serverDir = temporaryFolder.newFolder(serverName);\n+\n+    int[] port = getRandomAvailableTCPPorts(3);\n+    locatorPort = port[0];\n+    locatorJmxPort = port[1];\n+    serverPort = port[2];\n+\n+    locators = \"localhost[\" + locatorPort + \"]\";\n+\n+    locator.invoke(() -> startLocator(locatorName, locatorDir, locatorPort, locatorJmxPort));\n+\n+    gfsh.connectAndVerify(locatorJmxPort, GfshCommandRule.PortType.jmxManager);\n+\n+    server.invoke(() -> startServer(serverName, serverDir, serverPort, locators));\n+  }\n+\n+  @After\n+  public void tearDown() {\n+    invokeInEveryVM(() -> {\n+      SERVER.getAndSet(DUMMY_SERVER).stop();\n+      LOCATOR.getAndSet(DUMMY_LOCATOR).stop();\n+    });\n+    disconnectAllFromDS();\n+  }\n+\n+  @Test\n+  public void testValidateOfflineDiskStoreInfo() {\n+\n+    createDiskStore();\n+\n+    createRegion();\n+\n+    populateRegions();\n+\n+    AssertRegionSizeAndDiskStore();\n+\n+    server.invoke(ValidateOfflineDiskStoreDUnitTest::stopServer);\n+\n+    server.invoke(() -> {\n+      ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n+      PrintStream originalSystemOut = System.out;\n+      System.setOut(new PrintStream(byteArrayOutputStream));\n+      validateOfflineDiskStore();\n+      assertThat(byteArrayOutputStream.toString())\n+          .contains(\"Disk store contains \" + NUM_ENTRIES + \" compactable records.\");\n+      System.setOut(originalSystemOut);\n+    });\n+\n+  }\n+\n+  private void validateOfflineDiskStore() throws Exception {\n+    DiskStoreImpl.offlineValidate(DISK_STORE_NAME, new File[] {serverDir});\n+  }\n+\n+  private static void startLocator(String name, File workingDirectory, int locatorPort,\n+      int jmxPort) {\n+    LOCATOR.set(new LocatorLauncher.Builder()\n+        .setMemberName(name)\n+        .setPort(locatorPort)\n+        .setWorkingDirectory(workingDirectory.getAbsolutePath())\n+        .set(JMX_MANAGER, \"true\")\n+        .set(JMX_MANAGER_PORT, String.valueOf(jmxPort))\n+        .set(JMX_MANAGER_START, \"true\")\n+        .set(LOG_FILE, new File(workingDirectory, name + \".log\").getAbsolutePath())\n+        .set(MAX_WAIT_TIME_RECONNECT, \"1000\")\n+        .set(MEMBER_TIMEOUT, \"2000\")\n+        .build());\n+\n+    LOCATOR.get().start();\n+\n+    await().untilAsserted(() -> {\n+      InternalLocator locator = (InternalLocator) LOCATOR.get().getLocator();\n+      assertThat(locator.isSharedConfigurationRunning())\n+          .as(\"Locator shared configuration is running on locator\" + getVMId())\n+          .isTrue();\n+    });\n+  }\n+\n+  private static void startServer(String name, File workingDirectory, int serverPort,\n+      String locators) {\n+\n+    System.setProperty(GEODE_PREFIX + SystemPropertyHelper.PARALLEL_DISK_STORE_RECOVERY,\n+        \"true\");\n+\n+    SERVER.set(new ServerLauncher.Builder()\n+        .setDeletePidFileOnStop(Boolean.TRUE)\n+        .setMemberName(name)\n+        .setWorkingDirectory(workingDirectory.getAbsolutePath())\n+        .setServerPort(serverPort)\n+        .set(HTTP_SERVICE_PORT, \"0\")\n+        .set(LOCATORS, locators)\n+        .set(LOG_FILE, new File(workingDirectory, name + \".log\").getAbsolutePath())\n+        .set(MAX_WAIT_TIME_RECONNECT, \"1000\")\n+        .set(MEMBER_TIMEOUT, \"2000\")\n+        .build());\n+\n+    SERVER.get().start();\n+  }\n+\n+  private static void stopServer() {\n+    SERVER.get().stop();\n+  }\n+\n+  private void AssertRegionSizeAndDiskStore() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af9cb350efc60ac0be4b4dd18b5344b6239f37d4"}, "originalPosition": 219}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxOTIxNzA5", "url": "https://github.com/apache/geode/pull/5801#pullrequestreview-551921709", "createdAt": "2020-12-14T21:49:20Z", "commit": {"oid": "af9cb350efc60ac0be4b4dd18b5344b6239f37d4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1b3f122615ff22472353b661936736a1df88c66", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/f1b3f122615ff22472353b661936736a1df88c66", "committedDate": "2020-12-14T21:56:30Z", "message": "Minor refactor"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3922, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}