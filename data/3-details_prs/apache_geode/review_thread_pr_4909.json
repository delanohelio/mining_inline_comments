{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5ODE2NDQ3", "number": 4909, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODozMTozMlrODvdI_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzozMDo0OVrOD1hUYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDg3MTAxOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODozMTozMlrOGB4xDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToyNToyMlrOGCStzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzMTgyMw==", "bodyText": "Small nitpick: can we rename this to setReassignPrimaries instead?, sounds better in my mind than having the doNot in the method name, just use the setXxxxx and let the user choose the value for the boolean flag.", "url": "https://github.com/apache/geode/pull/4909#discussion_r404631823", "createdAt": "2020-04-07T08:31:32Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyBuilder.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.cache.control;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Factory for defining and starting a {@link CompletableFuture} that returns\n+ * {@link RestoreRedundancyResults}.\n+ */\n+public interface RestoreRedundancyBuilder {\n+  /**\n+   * Specify which regions to include in the restore redundancy operation. The default,\n+   * <code>null<code>, means all regions should be included. Includes take precedence over\n+   * excludes.\n+   *\n+   * @param regions A set containing the names of regions to include.\n+   */\n+  RestoreRedundancyBuilder includeRegions(Set<String> regions);\n+\n+  /**\n+   * Exclude specific regions from the restore redundancy operation. The default,\n+   * <code>null<code>, means don't exclude any regions.\n+   *\n+   * @param regions A set containing the names of regions to exclude.\n+   */\n+  RestoreRedundancyBuilder excludeRegions(Set<String> regions);\n+\n+  /**\n+   * Set whether the restore redundancy operation should reassign primary buckets. The default,\n+   * <code>false</code>, will result in primary buckets being reassigned for better load balancing\n+   * across members.\n+   *\n+   * @param shouldNotReassign A boolean indicating whether or not the operation created by this\n+   *        class should reassign primary bucket hosts.\n+   */\n+  RestoreRedundancyBuilder doNotReassignPrimaries(boolean shouldNotReassign);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e13d8fe88dcf11b59b199ea6e31d84265717aa64"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1Njk3Mg==", "bodyText": "Done", "url": "https://github.com/apache/geode/pull/4909#discussion_r405056972", "createdAt": "2020-04-07T19:25:22Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyBuilder.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.cache.control;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Factory for defining and starting a {@link CompletableFuture} that returns\n+ * {@link RestoreRedundancyResults}.\n+ */\n+public interface RestoreRedundancyBuilder {\n+  /**\n+   * Specify which regions to include in the restore redundancy operation. The default,\n+   * <code>null<code>, means all regions should be included. Includes take precedence over\n+   * excludes.\n+   *\n+   * @param regions A set containing the names of regions to include.\n+   */\n+  RestoreRedundancyBuilder includeRegions(Set<String> regions);\n+\n+  /**\n+   * Exclude specific regions from the restore redundancy operation. The default,\n+   * <code>null<code>, means don't exclude any regions.\n+   *\n+   * @param regions A set containing the names of regions to exclude.\n+   */\n+  RestoreRedundancyBuilder excludeRegions(Set<String> regions);\n+\n+  /**\n+   * Set whether the restore redundancy operation should reassign primary buckets. The default,\n+   * <code>false</code>, will result in primary buckets being reassigned for better load balancing\n+   * across members.\n+   *\n+   * @param shouldNotReassign A boolean indicating whether or not the operation created by this\n+   *        class should reassign primary bucket hosts.\n+   */\n+  RestoreRedundancyBuilder doNotReassignPrimaries(boolean shouldNotReassign);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzMTgyMw=="}, "originalCommit": {"oid": "e13d8fe88dcf11b59b199ea6e31d84265717aa64"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDkxNjMwOnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RestoreRedundancyOperationDUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0MzoyNVrOGB5ODw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTo1OToxMlrOGCKpvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzOTI0Nw==", "bodyText": "Another nitpick: since these are all constants, maybe we can name them using upper case notation?, SERVERS_TO_START, PARENT_REGION_NAME, etc?.", "url": "https://github.com/apache/geode/pull/4909#discussion_r404639247", "createdAt": "2020-04-07T08:43:25Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RestoreRedundancyOperationDUnitTest.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.control;\n+\n+import static org.apache.geode.cache.PartitionAttributesFactory.GLOBAL_MAX_BUCKETS_DEFAULT;\n+import static org.apache.geode.cache.control.RestoreRedundancyResults.Status.FAILURE;\n+import static org.apache.geode.cache.control.RestoreRedundancyResults.Status.SUCCESS;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyRegionResult.RedundancyStatus.NOT_SATISFIED;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyRegionResult.RedundancyStatus.NO_REDUNDANT_COPIES;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyRegionResult.RedundancyStatus.SATISFIED;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.lessThanOrEqualTo;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.junit.Assert.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.stream.IntStream;\n+\n+import junitparams.JUnitParamsRunner;\n+import junitparams.Parameters;\n+import junitparams.naming.TestCaseName;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.control.ResourceManager;\n+import org.apache.geode.cache.control.RestoreRedundancyResults;\n+import org.apache.geode.internal.cache.PartitionAttributesImpl;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.test.dunit.SerializableRunnableIF;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+@RunWith(JUnitParamsRunner.class)\n+public class RestoreRedundancyOperationDUnitTest {\n+  private List<MemberVM> servers;\n+  private static final int serversToStart = 3;\n+  private static final String parentRegionName = \"parentColocatedRegion\";\n+  private static final String childRegionName = \"childColocatedRegion\";\n+  private static final int desiredRedundancyCopies = 2;\n+  private static final String lowRedundancyRegionName = \"lowRedundancyRegion\";\n+  private static final int lowRedundancyCopies = 1;\n+  private static final int numBuckets = GLOBAL_MAX_BUCKETS_DEFAULT;\n+  private static final int entries = 5 * numBuckets;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e13d8fe88dcf11b59b199ea6e31d84265717aa64"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNDg2Mg==", "bodyText": "Good call.", "url": "https://github.com/apache/geode/pull/4909#discussion_r404924862", "createdAt": "2020-04-07T15:59:12Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RestoreRedundancyOperationDUnitTest.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.control;\n+\n+import static org.apache.geode.cache.PartitionAttributesFactory.GLOBAL_MAX_BUCKETS_DEFAULT;\n+import static org.apache.geode.cache.control.RestoreRedundancyResults.Status.FAILURE;\n+import static org.apache.geode.cache.control.RestoreRedundancyResults.Status.SUCCESS;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyRegionResult.RedundancyStatus.NOT_SATISFIED;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyRegionResult.RedundancyStatus.NO_REDUNDANT_COPIES;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyRegionResult.RedundancyStatus.SATISFIED;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.lessThanOrEqualTo;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.junit.Assert.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.stream.IntStream;\n+\n+import junitparams.JUnitParamsRunner;\n+import junitparams.Parameters;\n+import junitparams.naming.TestCaseName;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.control.ResourceManager;\n+import org.apache.geode.cache.control.RestoreRedundancyResults;\n+import org.apache.geode.internal.cache.PartitionAttributesImpl;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.test.dunit.SerializableRunnableIF;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+@RunWith(JUnitParamsRunner.class)\n+public class RestoreRedundancyOperationDUnitTest {\n+  private List<MemberVM> servers;\n+  private static final int serversToStart = 3;\n+  private static final String parentRegionName = \"parentColocatedRegion\";\n+  private static final String childRegionName = \"childColocatedRegion\";\n+  private static final int desiredRedundancyCopies = 2;\n+  private static final String lowRedundancyRegionName = \"lowRedundancyRegion\";\n+  private static final int lowRedundancyCopies = 1;\n+  private static final int numBuckets = GLOBAL_MAX_BUCKETS_DEFAULT;\n+  private static final int entries = 5 * numBuckets;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDYzOTI0Nw=="}, "originalCommit": {"oid": "e13d8fe88dcf11b59b199ea6e31d84265717aa64"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDkyMzgzOnYy", "diffSide": "RIGHT", "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RestoreRedundancyOperationDUnitTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo0NToxNVrOGB5SnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTo0NjowNFrOGCKCNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MDQxMg==", "bodyText": "Small spelling mistake: it should read Redundancy instead of Redundnacy.", "url": "https://github.com/apache/geode/pull/4909#discussion_r404640412", "createdAt": "2020-04-07T08:45:15Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RestoreRedundancyOperationDUnitTest.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.control;\n+\n+import static org.apache.geode.cache.PartitionAttributesFactory.GLOBAL_MAX_BUCKETS_DEFAULT;\n+import static org.apache.geode.cache.control.RestoreRedundancyResults.Status.FAILURE;\n+import static org.apache.geode.cache.control.RestoreRedundancyResults.Status.SUCCESS;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyRegionResult.RedundancyStatus.NOT_SATISFIED;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyRegionResult.RedundancyStatus.NO_REDUNDANT_COPIES;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyRegionResult.RedundancyStatus.SATISFIED;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.lessThanOrEqualTo;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.junit.Assert.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.stream.IntStream;\n+\n+import junitparams.JUnitParamsRunner;\n+import junitparams.Parameters;\n+import junitparams.naming.TestCaseName;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.control.ResourceManager;\n+import org.apache.geode.cache.control.RestoreRedundancyResults;\n+import org.apache.geode.internal.cache.PartitionAttributesImpl;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.test.dunit.SerializableRunnableIF;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+@RunWith(JUnitParamsRunner.class)\n+public class RestoreRedundancyOperationDUnitTest {\n+  private List<MemberVM> servers;\n+  private static final int serversToStart = 3;\n+  private static final String parentRegionName = \"parentColocatedRegion\";\n+  private static final String childRegionName = \"childColocatedRegion\";\n+  private static final int desiredRedundancyCopies = 2;\n+  private static final String lowRedundancyRegionName = \"lowRedundancyRegion\";\n+  private static final int lowRedundancyCopies = 1;\n+  private static final int numBuckets = GLOBAL_MAX_BUCKETS_DEFAULT;\n+  private static final int entries = 5 * numBuckets;\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Before\n+  public void startUp() {\n+    MemberVM locator = cluster.startLocatorVM(0);\n+    int locatorPort = locator.getPort();\n+    servers = new ArrayList<>();\n+    IntStream.range(0, serversToStart)\n+        .forEach(i -> servers.add(cluster.startServerVM(i + 1, locatorPort)));\n+\n+    // Create the regions on server1 and populate with data\n+    servers.get(0).invoke(() -> {\n+      Collection<Region<Object, Object>> regions = createRegions();\n+      regions.forEach(\n+          region -> IntStream.range(0, entries).forEach(i -> region.put(\"key\" + i, \"value\" + i)));\n+    });\n+\n+    // Create regions on other servers but do not populate with data\n+    servers.stream().skip(1).forEach(\n+        s -> s.invoke((SerializableRunnableIF) RestoreRedundancyOperationDUnitTest::createRegions));\n+\n+    // Confirm that redundancy is impaired and primaries unbalanced for all regions on all members\n+    servers.forEach(s -> s.invoke(() -> {\n+      assertRedundancyStatus(parentRegionName, false);\n+      assertRedundancyStatus(childRegionName, false);\n+      assertRedundancyStatus(lowRedundancyRegionName, false);\n+      assertPrimariesBalanced(parentRegionName, serversToStart, false);\n+      assertPrimariesBalanced(childRegionName, serversToStart, false);\n+      assertPrimariesBalanced(lowRedundancyRegionName, serversToStart, false);\n+    }));\n+  }\n+\n+  @Test\n+  public void statsAreUpdatedWhenRestoreRedundnacyIsCalled() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e13d8fe88dcf11b59b199ea6e31d84265717aa64"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkxMjI2OQ==", "bodyText": "I swear I must have made this exact same typo a hundred times when writing this code. My brain just had a problem typing the word redundancy I guess. Thanks for catching it.", "url": "https://github.com/apache/geode/pull/4909#discussion_r404912269", "createdAt": "2020-04-07T15:42:47Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RestoreRedundancyOperationDUnitTest.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.control;\n+\n+import static org.apache.geode.cache.PartitionAttributesFactory.GLOBAL_MAX_BUCKETS_DEFAULT;\n+import static org.apache.geode.cache.control.RestoreRedundancyResults.Status.FAILURE;\n+import static org.apache.geode.cache.control.RestoreRedundancyResults.Status.SUCCESS;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyRegionResult.RedundancyStatus.NOT_SATISFIED;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyRegionResult.RedundancyStatus.NO_REDUNDANT_COPIES;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyRegionResult.RedundancyStatus.SATISFIED;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.lessThanOrEqualTo;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.junit.Assert.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.stream.IntStream;\n+\n+import junitparams.JUnitParamsRunner;\n+import junitparams.Parameters;\n+import junitparams.naming.TestCaseName;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.control.ResourceManager;\n+import org.apache.geode.cache.control.RestoreRedundancyResults;\n+import org.apache.geode.internal.cache.PartitionAttributesImpl;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.test.dunit.SerializableRunnableIF;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+@RunWith(JUnitParamsRunner.class)\n+public class RestoreRedundancyOperationDUnitTest {\n+  private List<MemberVM> servers;\n+  private static final int serversToStart = 3;\n+  private static final String parentRegionName = \"parentColocatedRegion\";\n+  private static final String childRegionName = \"childColocatedRegion\";\n+  private static final int desiredRedundancyCopies = 2;\n+  private static final String lowRedundancyRegionName = \"lowRedundancyRegion\";\n+  private static final int lowRedundancyCopies = 1;\n+  private static final int numBuckets = GLOBAL_MAX_BUCKETS_DEFAULT;\n+  private static final int entries = 5 * numBuckets;\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Before\n+  public void startUp() {\n+    MemberVM locator = cluster.startLocatorVM(0);\n+    int locatorPort = locator.getPort();\n+    servers = new ArrayList<>();\n+    IntStream.range(0, serversToStart)\n+        .forEach(i -> servers.add(cluster.startServerVM(i + 1, locatorPort)));\n+\n+    // Create the regions on server1 and populate with data\n+    servers.get(0).invoke(() -> {\n+      Collection<Region<Object, Object>> regions = createRegions();\n+      regions.forEach(\n+          region -> IntStream.range(0, entries).forEach(i -> region.put(\"key\" + i, \"value\" + i)));\n+    });\n+\n+    // Create regions on other servers but do not populate with data\n+    servers.stream().skip(1).forEach(\n+        s -> s.invoke((SerializableRunnableIF) RestoreRedundancyOperationDUnitTest::createRegions));\n+\n+    // Confirm that redundancy is impaired and primaries unbalanced for all regions on all members\n+    servers.forEach(s -> s.invoke(() -> {\n+      assertRedundancyStatus(parentRegionName, false);\n+      assertRedundancyStatus(childRegionName, false);\n+      assertRedundancyStatus(lowRedundancyRegionName, false);\n+      assertPrimariesBalanced(parentRegionName, serversToStart, false);\n+      assertPrimariesBalanced(childRegionName, serversToStart, false);\n+      assertPrimariesBalanced(lowRedundancyRegionName, serversToStart, false);\n+    }));\n+  }\n+\n+  @Test\n+  public void statsAreUpdatedWhenRestoreRedundnacyIsCalled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MDQxMg=="}, "originalCommit": {"oid": "e13d8fe88dcf11b59b199ea6e31d84265717aa64"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkxNDc0Mw==", "bodyText": "I didn't catch it, IntelliJ did, I won't take the credit  :-P", "url": "https://github.com/apache/geode/pull/4909#discussion_r404914743", "createdAt": "2020-04-07T15:46:04Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RestoreRedundancyOperationDUnitTest.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.control;\n+\n+import static org.apache.geode.cache.PartitionAttributesFactory.GLOBAL_MAX_BUCKETS_DEFAULT;\n+import static org.apache.geode.cache.control.RestoreRedundancyResults.Status.FAILURE;\n+import static org.apache.geode.cache.control.RestoreRedundancyResults.Status.SUCCESS;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyRegionResult.RedundancyStatus.NOT_SATISFIED;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyRegionResult.RedundancyStatus.NO_REDUNDANT_COPIES;\n+import static org.apache.geode.internal.cache.control.RestoreRedundancyRegionResult.RedundancyStatus.SATISFIED;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.Matchers.greaterThan;\n+import static org.hamcrest.Matchers.lessThanOrEqualTo;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.nullValue;\n+import static org.junit.Assert.assertThat;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.stream.IntStream;\n+\n+import junitparams.JUnitParamsRunner;\n+import junitparams.Parameters;\n+import junitparams.naming.TestCaseName;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import org.apache.geode.cache.Cache;\n+import org.apache.geode.cache.Region;\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.control.ResourceManager;\n+import org.apache.geode.cache.control.RestoreRedundancyResults;\n+import org.apache.geode.internal.cache.PartitionAttributesImpl;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.test.dunit.SerializableRunnableIF;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+\n+@RunWith(JUnitParamsRunner.class)\n+public class RestoreRedundancyOperationDUnitTest {\n+  private List<MemberVM> servers;\n+  private static final int serversToStart = 3;\n+  private static final String parentRegionName = \"parentColocatedRegion\";\n+  private static final String childRegionName = \"childColocatedRegion\";\n+  private static final int desiredRedundancyCopies = 2;\n+  private static final String lowRedundancyRegionName = \"lowRedundancyRegion\";\n+  private static final int lowRedundancyCopies = 1;\n+  private static final int numBuckets = GLOBAL_MAX_BUCKETS_DEFAULT;\n+  private static final int entries = 5 * numBuckets;\n+\n+  @Rule\n+  public ClusterStartupRule cluster = new ClusterStartupRule();\n+\n+  @Before\n+  public void startUp() {\n+    MemberVM locator = cluster.startLocatorVM(0);\n+    int locatorPort = locator.getPort();\n+    servers = new ArrayList<>();\n+    IntStream.range(0, serversToStart)\n+        .forEach(i -> servers.add(cluster.startServerVM(i + 1, locatorPort)));\n+\n+    // Create the regions on server1 and populate with data\n+    servers.get(0).invoke(() -> {\n+      Collection<Region<Object, Object>> regions = createRegions();\n+      regions.forEach(\n+          region -> IntStream.range(0, entries).forEach(i -> region.put(\"key\" + i, \"value\" + i)));\n+    });\n+\n+    // Create regions on other servers but do not populate with data\n+    servers.stream().skip(1).forEach(\n+        s -> s.invoke((SerializableRunnableIF) RestoreRedundancyOperationDUnitTest::createRegions));\n+\n+    // Confirm that redundancy is impaired and primaries unbalanced for all regions on all members\n+    servers.forEach(s -> s.invoke(() -> {\n+      assertRedundancyStatus(parentRegionName, false);\n+      assertRedundancyStatus(childRegionName, false);\n+      assertRedundancyStatus(lowRedundancyRegionName, false);\n+      assertPrimariesBalanced(parentRegionName, serversToStart, false);\n+      assertPrimariesBalanced(childRegionName, serversToStart, false);\n+      assertPrimariesBalanced(lowRedundancyRegionName, serversToStart, false);\n+    }));\n+  }\n+\n+  @Test\n+  public void statsAreUpdatedWhenRestoreRedundnacyIsCalled() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0MDQxMg=="}, "originalCommit": {"oid": "e13d8fe88dcf11b59b199ea6e31d84265717aa64"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDk1ODIwOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyResults.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwODo1MzozN1rOGB5n-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOToyNjo1NVrOGCSxJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0NTg4MA==", "bodyText": "Haven't checked the actual implementation yet, but shouldn't SUCCESS be returned if and only if every included region has exactly the amount of redundant copies configured instead of just one redundant?.\nAs an example, if I configure a region to have 5 redundant copies and after the recover redundancy operation is executed I end up (for whatever reason) with just 2 redundant copies, should the operation be considered as SUCESS or FAILURE?.", "url": "https://github.com/apache/geode/pull/4909#discussion_r404645880", "createdAt": "2020-04-07T08:53:37Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyResults.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.control;\n+\n+import java.util.Map;\n+\n+import org.apache.geode.cache.partition.PartitionRebalanceInfo;\n+import org.apache.geode.internal.cache.control.RestoreRedundancyRegionResult;\n+import org.apache.geode.internal.cache.partitioned.PartitionedRegionRebalanceOp;\n+\n+/**\n+ * A class to collect the results of restore redundancy operations for one or more regions and\n+ * determine the success of failure of the operation.\n+ */\n+public interface RestoreRedundancyResults {\n+\n+  /**\n+   * {@link #SUCCESS} is defined as every included region having at least one redundant copy.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e13d8fe88dcf11b59b199ea6e31d84265717aa64"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkxMTMyNw==", "bodyText": "The idea is that as long as redundancy has been established, at any level, then the operation has succeeded, since in 99% of cases, a user cares far more about whether they have redundancy or not vs how much redundancy they have. A user can get information about how many regions (if any) do not have fully satisfied redundancy using the RestoreRedundancyResults.getUnderRedundancyRegionResults() method if they need that information.", "url": "https://github.com/apache/geode/pull/4909#discussion_r404911327", "createdAt": "2020-04-07T15:41:34Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyResults.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.control;\n+\n+import java.util.Map;\n+\n+import org.apache.geode.cache.partition.PartitionRebalanceInfo;\n+import org.apache.geode.internal.cache.control.RestoreRedundancyRegionResult;\n+import org.apache.geode.internal.cache.partitioned.PartitionedRegionRebalanceOp;\n+\n+/**\n+ * A class to collect the results of restore redundancy operations for one or more regions and\n+ * determine the success of failure of the operation.\n+ */\n+public interface RestoreRedundancyResults {\n+\n+  /**\n+   * {@link #SUCCESS} is defined as every included region having at least one redundant copy.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0NTg4MA=="}, "originalCommit": {"oid": "e13d8fe88dcf11b59b199ea6e31d84265717aa64"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkxNTA3NA==", "bodyText": "Sounds good, thanks for the clarification!.", "url": "https://github.com/apache/geode/pull/4909#discussion_r404915074", "createdAt": "2020-04-07T15:46:31Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyResults.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.control;\n+\n+import java.util.Map;\n+\n+import org.apache.geode.cache.partition.PartitionRebalanceInfo;\n+import org.apache.geode.internal.cache.control.RestoreRedundancyRegionResult;\n+import org.apache.geode.internal.cache.partitioned.PartitionedRegionRebalanceOp;\n+\n+/**\n+ * A class to collect the results of restore redundancy operations for one or more regions and\n+ * determine the success of failure of the operation.\n+ */\n+public interface RestoreRedundancyResults {\n+\n+  /**\n+   * {@link #SUCCESS} is defined as every included region having at least one redundant copy.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0NTg4MA=="}, "originalCommit": {"oid": "e13d8fe88dcf11b59b199ea6e31d84265717aa64"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1NzgzMA==", "bodyText": "After a bit more discussion, it was decided to go with the suggestion here. SUCCESS will now only be returned if all regions have their redundancy fully satisfied.", "url": "https://github.com/apache/geode/pull/4909#discussion_r405057830", "createdAt": "2020-04-07T19:26:55Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyResults.java", "diffHunk": "@@ -0,0 +1,151 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.control;\n+\n+import java.util.Map;\n+\n+import org.apache.geode.cache.partition.PartitionRebalanceInfo;\n+import org.apache.geode.internal.cache.control.RestoreRedundancyRegionResult;\n+import org.apache.geode.internal.cache.partitioned.PartitionedRegionRebalanceOp;\n+\n+/**\n+ * A class to collect the results of restore redundancy operations for one or more regions and\n+ * determine the success of failure of the operation.\n+ */\n+public interface RestoreRedundancyResults {\n+\n+  /**\n+   * {@link #SUCCESS} is defined as every included region having at least one redundant copy.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY0NTg4MA=="}, "originalCommit": {"oid": "e13d8fe88dcf11b59b199ea6e31d84265717aa64"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMDk5NzEzOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/ResourceManagerStats.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTowMzozNVrOGB6BAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjowMDoxM1rOGCKsWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1MjI4OQ==", "bodyText": "I think we should add these new statistics to geode-docs/reference/statistics_list.html.md.erb.", "url": "https://github.com/apache/geode/pull/4909#discussion_r404652289", "createdAt": "2020-04-07T09:03:35Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/ResourceManagerStats.java", "diffHunk": "@@ -92,6 +95,16 @@\n             f.createLongCounter(\"rebalanceTime\",\n                 \"Total time spent directing cache rebalance operations.\", \"nanoseconds\", false),\n \n+            f.createLongCounter(\"restoreRedundanciesInProgress\",\n+                \"Current number of cache restore redundancy operations being directed by this process.\",\n+                \"operations\"),\n+            f.createLongCounter(\"restoreRedundanciesCompleted\",\n+                \"Total number of cache restore redundancy operations directed by this process.\",\n+                \"operations\"),\n+            f.createLongCounter(\"restoreRedundancyTime\",\n+                \"Total time spent directing cache restore redundancy operations.\", \"nanoseconds\",\n+                false),\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e13d8fe88dcf11b59b199ea6e31d84265717aa64"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNTUyOA==", "bodyText": "Thanks for pointing this out, I was unaware of this doc. I'll add the changes to the final PR for this set of changes, which will include all docs updates.", "url": "https://github.com/apache/geode/pull/4909#discussion_r404925528", "createdAt": "2020-04-07T16:00:13Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/ResourceManagerStats.java", "diffHunk": "@@ -92,6 +95,16 @@\n             f.createLongCounter(\"rebalanceTime\",\n                 \"Total time spent directing cache rebalance operations.\", \"nanoseconds\", false),\n \n+            f.createLongCounter(\"restoreRedundanciesInProgress\",\n+                \"Current number of cache restore redundancy operations being directed by this process.\",\n+                \"operations\"),\n+            f.createLongCounter(\"restoreRedundanciesCompleted\",\n+                \"Total number of cache restore redundancy operations directed by this process.\",\n+                \"operations\"),\n+            f.createLongCounter(\"restoreRedundancyTime\",\n+                \"Total time spent directing cache restore redundancy operations.\", \"nanoseconds\",\n+                false),\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1MjI4OQ=="}, "originalCommit": {"oid": "e13d8fe88dcf11b59b199ea6e31d84265717aa64"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTAxNTE1OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/RestoreRedundancyRegionResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOTowODoyOVrOGB6MqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjowMDozNVrOGCKtXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1NTI3Mg==", "bodyText": "According to the IDE this method is never invoked.\nUnless we foresee somebody using it within the near future, can we just delete it?.", "url": "https://github.com/apache/geode/pull/4909#discussion_r404655272", "createdAt": "2020-04-07T09:08:29Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/RestoreRedundancyRegionResult.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.control;\n+\n+import java.io.Serializable;\n+\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+\n+/**\n+ * Used to calculate and store the redundancy status for a {@link PartitionedRegion}.\n+ */\n+public class RestoreRedundancyRegionResult implements Serializable {\n+  private static final long serialVersionUID = 3407539362166634316L;\n+\n+  /**\n+   * The message prefix to be applied when redundancy was successfully restored for the region used\n+   * to create this object.\n+   */\n+  public static final String SATISFIED_MESSAGE = \"Redundancy satisfied for region \";\n+\n+  /**\n+   * The message prefix to be applied when redundancy was not successfully restored for the region\n+   * used to create this object.\n+   */\n+  public static final String NOT_SATISFIED_MESSAGE =\n+      \"Redundancy NOT satisfied for region \";\n+\n+  /**\n+   * The name of the region used to create this object.\n+   */\n+  private final String regionName;\n+\n+  /**\n+   * The configured redundancy of the region used to create this object.\n+   */\n+  private final int desiredRedundancy;\n+\n+  /**\n+   * The actual redundancy of the region used to create this object at time of creation.\n+   */\n+  private final int actualRedundancy;\n+\n+  /**\n+   * The {@link RedundancyStatus} of the region used to create this object at time of creation.\n+   */\n+  private final RedundancyStatus status;\n+\n+  /**\n+   * The redundancy status of the region used to create this object at time of creation.\n+   * {@link #SATISFIED} if every bucket in the region has the configured number of redundant copies\n+   * {@link #NOT_SATISFIED} if at least one bucket in the region has less than the configured number\n+   * of redundant copies\n+   * {@link #NO_REDUNDANT_COPIES} if at least one bucket in the region has zero redundant copies and\n+   * the region is not configured for zero redundancy\n+   */\n+  enum RedundancyStatus {\n+    SATISFIED,\n+    NOT_SATISFIED,\n+    NO_REDUNDANT_COPIES\n+  }\n+\n+  public RestoreRedundancyRegionResult(PartitionedRegion region) {\n+    regionName = region.getName();\n+    desiredRedundancy = region.getRedundantCopies();\n+    actualRedundancy = calculateLowestRedundancy(region);\n+    status = determineStatus(desiredRedundancy, actualRedundancy);\n+  }\n+\n+  public String getRegionName() {\n+    return regionName;\n+  }\n+\n+  public int getDesiredRedundancy() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e13d8fe88dcf11b59b199ea6e31d84265717aa64"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNTc4OA==", "bodyText": "Sure", "url": "https://github.com/apache/geode/pull/4909#discussion_r404925788", "createdAt": "2020-04-07T16:00:35Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/RestoreRedundancyRegionResult.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.control;\n+\n+import java.io.Serializable;\n+\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+\n+/**\n+ * Used to calculate and store the redundancy status for a {@link PartitionedRegion}.\n+ */\n+public class RestoreRedundancyRegionResult implements Serializable {\n+  private static final long serialVersionUID = 3407539362166634316L;\n+\n+  /**\n+   * The message prefix to be applied when redundancy was successfully restored for the region used\n+   * to create this object.\n+   */\n+  public static final String SATISFIED_MESSAGE = \"Redundancy satisfied for region \";\n+\n+  /**\n+   * The message prefix to be applied when redundancy was not successfully restored for the region\n+   * used to create this object.\n+   */\n+  public static final String NOT_SATISFIED_MESSAGE =\n+      \"Redundancy NOT satisfied for region \";\n+\n+  /**\n+   * The name of the region used to create this object.\n+   */\n+  private final String regionName;\n+\n+  /**\n+   * The configured redundancy of the region used to create this object.\n+   */\n+  private final int desiredRedundancy;\n+\n+  /**\n+   * The actual redundancy of the region used to create this object at time of creation.\n+   */\n+  private final int actualRedundancy;\n+\n+  /**\n+   * The {@link RedundancyStatus} of the region used to create this object at time of creation.\n+   */\n+  private final RedundancyStatus status;\n+\n+  /**\n+   * The redundancy status of the region used to create this object at time of creation.\n+   * {@link #SATISFIED} if every bucket in the region has the configured number of redundant copies\n+   * {@link #NOT_SATISFIED} if at least one bucket in the region has less than the configured number\n+   * of redundant copies\n+   * {@link #NO_REDUNDANT_COPIES} if at least one bucket in the region has zero redundant copies and\n+   * the region is not configured for zero redundancy\n+   */\n+  enum RedundancyStatus {\n+    SATISFIED,\n+    NOT_SATISFIED,\n+    NO_REDUNDANT_COPIES\n+  }\n+\n+  public RestoreRedundancyRegionResult(PartitionedRegion region) {\n+    regionName = region.getName();\n+    desiredRedundancy = region.getRedundantCopies();\n+    actualRedundancy = calculateLowestRedundancy(region);\n+    status = determineStatus(desiredRedundancy, actualRedundancy);\n+  }\n+\n+  public String getRegionName() {\n+    return regionName;\n+  }\n+\n+  public int getDesiredRedundancy() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1NTI3Mg=="}, "originalCommit": {"oid": "e13d8fe88dcf11b59b199ea6e31d84265717aa64"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMTA0MzM3OnYy", "diffSide": "RIGHT", "path": "geode-core/src/upgradeTest/java/org/apache/geode/internal/cache/rollingupgrade/RollingUpgradeRestoreRedundancy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QwOToxNTozNFrOGB6eTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNjowMjowM1rOGCKy5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1OTc5MA==", "bodyText": "Do we need this debug message in the test?.", "url": "https://github.com/apache/geode/pull/4909#discussion_r404659790", "createdAt": "2020-04-07T09:15:34Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/upgradeTest/java/org/apache/geode/internal/cache/rollingupgrade/RollingUpgradeRestoreRedundancy.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.rollingupgrade;\n+\n+import static org.apache.geode.cache.control.RestoreRedundancyResults.Status.ERROR;\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.junit.runners.Parameterized;\n+\n+import org.apache.geode.cache.control.RestoreRedundancyResults;\n+import org.apache.geode.distributed.internal.InternalLocator;\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.internal.serialization.Version;\n+import org.apache.geode.test.dunit.DistributedTestUtils;\n+import org.apache.geode.test.dunit.Host;\n+import org.apache.geode.test.dunit.NetworkUtils;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.version.TestVersion;\n+import org.apache.geode.test.version.VersionManager;\n+\n+public class RollingUpgradeRestoreRedundancy extends RollingUpgrade2DUnitTestBase {\n+  private static final long serialVersionUID = 8679945004188693280L;\n+\n+  @Parameterized.Parameters(name = \"from_v{0}\")\n+  public static Collection<String> data() {\n+    List<String> result = VersionManager.getInstance().getVersionsWithoutCurrent();\n+    if (result.size() < 1) {\n+      throw new RuntimeException(\"No older versions of Geode were found to test against\");\n+    } else {\n+      // The restore redundancy feature was added in 1.13.0, so versions newer than that do not need\n+      // to be tested in a rolling upgrade environment\n+      result.removeIf(version -> TestVersion.compare(version, \"1.13.0\") > 0);\n+      System.out.println(\"running against these versions: \" + result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e13d8fe88dcf11b59b199ea6e31d84265717aa64"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDkyNzIwNA==", "bodyText": "Nope, I was just sloppy when reusing an existing test as a framework and didn't notice it. I've removed it now.", "url": "https://github.com/apache/geode/pull/4909#discussion_r404927204", "createdAt": "2020-04-07T16:02:03Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/upgradeTest/java/org/apache/geode/internal/cache/rollingupgrade/RollingUpgradeRestoreRedundancy.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.rollingupgrade;\n+\n+import static org.apache.geode.cache.control.RestoreRedundancyResults.Status.ERROR;\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.junit.Test;\n+import org.junit.runners.Parameterized;\n+\n+import org.apache.geode.cache.control.RestoreRedundancyResults;\n+import org.apache.geode.distributed.internal.InternalLocator;\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.internal.serialization.Version;\n+import org.apache.geode.test.dunit.DistributedTestUtils;\n+import org.apache.geode.test.dunit.Host;\n+import org.apache.geode.test.dunit.NetworkUtils;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.version.TestVersion;\n+import org.apache.geode.test.version.VersionManager;\n+\n+public class RollingUpgradeRestoreRedundancy extends RollingUpgrade2DUnitTestBase {\n+  private static final long serialVersionUID = 8679945004188693280L;\n+\n+  @Parameterized.Parameters(name = \"from_v{0}\")\n+  public static Collection<String> data() {\n+    List<String> result = VersionManager.getInstance().getVersionsWithoutCurrent();\n+    if (result.size() < 1) {\n+      throw new RuntimeException(\"No older versions of Geode were found to test against\");\n+    } else {\n+      // The restore redundancy feature was added in 1.13.0, so versions newer than that do not need\n+      // to be tested in a rolling upgrade environment\n+      result.removeIf(version -> TestVersion.compare(version, \"1.13.0\") > 0);\n+      System.out.println(\"running against these versions: \" + result);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDY1OTc5MA=="}, "originalCommit": {"oid": "e13d8fe88dcf11b59b199ea6e31d84265717aa64"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjI1MTA0OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyResults.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzo0NToxNFrOGJQnXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMzo0NDozMFrOGJdE4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM2MjU4OQ==", "bodyText": "This is leaking an internal class into the public API. The public API should not refer to internal classes.\nIn this case, I'm not clear why these mutation methods are part of the public API at all. Would it make more sense for RestoreRedundancyResults to be a read only view of the results?", "url": "https://github.com/apache/geode/pull/4909#discussion_r412362589", "createdAt": "2020-04-21T17:45:14Z", "author": {"login": "upthewaterspout"}, "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyResults.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.control;\n+\n+import java.util.Map;\n+\n+import org.apache.geode.cache.partition.PartitionRebalanceInfo;\n+import org.apache.geode.internal.cache.control.RegionRedundancyStatus;\n+import org.apache.geode.internal.cache.partitioned.PartitionedRegionRebalanceOp;\n+\n+/**\n+ * A class to collect the results of restore redundancy operations for one or more regions and\n+ * determine the success of failure of the operation.\n+ */\n+public interface RestoreRedundancyResults {\n+\n+  /**\n+   * {@link #SUCCESS} is defined as every included region having fully satisfied redundancy.\n+   * {@link #FAILURE} is defined as at least one region that is configured to have redundant copies\n+   * having fewer than its configured number of redundant copies.\n+   * {@link #ERROR} is for cases when the restore redundancy operation was unable to begin or threw\n+   * an exception.\n+   */\n+  enum Status {\n+    SUCCESS,\n+    FAILURE,\n+    ERROR\n+  }\n+\n+  /**\n+   * Adds the contents of another {@link RestoreRedundancyResults} object to this one, including\n+   * both {@link RegionRedundancyStatus} objects and information on the number of primaries\n+   * reassigned and the time taken to reassign them.\n+   *\n+   * @param results a {@link RestoreRedundancyResults} object whose contents will be added to this\n+   *        one.\n+   */\n+  void addRegionResults(RestoreRedundancyResults results);\n+\n+  /**\n+   * Adds information regarding the number of primaries reassigned and the time taken to reassign\n+   * them during a restore redundancy operation.\n+   *\n+   * @param details a {@link PartitionRebalanceInfo} generated by a\n+   *        {@link PartitionedRegionRebalanceOp} operation.\n+   */\n+  void addPrimaryReassignmentDetails(PartitionRebalanceInfo details);\n+\n+  /**\n+   * Adds one {@link RegionRedundancyStatus} to the result set.\n+   *\n+   * @param regionResult The {@link RegionRedundancyStatus} to be added to the result set.\n+   */\n+  void addRegionResult(RegionRedundancyStatus regionResult);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2Njc1Mw==", "bodyText": "Good call. I've removed the mutators from the interface and moved RegionRedundancyStatus to no longer be internal.", "url": "https://github.com/apache/geode/pull/4909#discussion_r412566753", "createdAt": "2020-04-21T23:44:30Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyResults.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.control;\n+\n+import java.util.Map;\n+\n+import org.apache.geode.cache.partition.PartitionRebalanceInfo;\n+import org.apache.geode.internal.cache.control.RegionRedundancyStatus;\n+import org.apache.geode.internal.cache.partitioned.PartitionedRegionRebalanceOp;\n+\n+/**\n+ * A class to collect the results of restore redundancy operations for one or more regions and\n+ * determine the success of failure of the operation.\n+ */\n+public interface RestoreRedundancyResults {\n+\n+  /**\n+   * {@link #SUCCESS} is defined as every included region having fully satisfied redundancy.\n+   * {@link #FAILURE} is defined as at least one region that is configured to have redundant copies\n+   * having fewer than its configured number of redundant copies.\n+   * {@link #ERROR} is for cases when the restore redundancy operation was unable to begin or threw\n+   * an exception.\n+   */\n+  enum Status {\n+    SUCCESS,\n+    FAILURE,\n+    ERROR\n+  }\n+\n+  /**\n+   * Adds the contents of another {@link RestoreRedundancyResults} object to this one, including\n+   * both {@link RegionRedundancyStatus} objects and information on the number of primaries\n+   * reassigned and the time taken to reassign them.\n+   *\n+   * @param results a {@link RestoreRedundancyResults} object whose contents will be added to this\n+   *        one.\n+   */\n+  void addRegionResults(RestoreRedundancyResults results);\n+\n+  /**\n+   * Adds information regarding the number of primaries reassigned and the time taken to reassign\n+   * them during a restore redundancy operation.\n+   *\n+   * @param details a {@link PartitionRebalanceInfo} generated by a\n+   *        {@link PartitionedRegionRebalanceOp} operation.\n+   */\n+  void addPrimaryReassignmentDetails(PartitionRebalanceInfo details);\n+\n+  /**\n+   * Adds one {@link RegionRedundancyStatus} to the result set.\n+   *\n+   * @param regionResult The {@link RegionRedundancyStatus} to be added to the result set.\n+   */\n+  void addRegionResult(RegionRedundancyStatus regionResult);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM2MjU4OQ=="}, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjI2MTA0OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyResults.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzo0NzoxNlrOGJQtXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzo0NzoxNlrOGJQtXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM2NDEyNQ==", "bodyText": "Another reference to an internal class. Should RegionRedundancyStatus be part of the public API?", "url": "https://github.com/apache/geode/pull/4909#discussion_r412364125", "createdAt": "2020-04-21T17:47:16Z", "author": {"login": "upthewaterspout"}, "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyResults.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.control;\n+\n+import java.util.Map;\n+\n+import org.apache.geode.cache.partition.PartitionRebalanceInfo;\n+import org.apache.geode.internal.cache.control.RegionRedundancyStatus;\n+import org.apache.geode.internal.cache.partitioned.PartitionedRegionRebalanceOp;\n+\n+/**\n+ * A class to collect the results of restore redundancy operations for one or more regions and\n+ * determine the success of failure of the operation.\n+ */\n+public interface RestoreRedundancyResults {\n+\n+  /**\n+   * {@link #SUCCESS} is defined as every included region having fully satisfied redundancy.\n+   * {@link #FAILURE} is defined as at least one region that is configured to have redundant copies\n+   * having fewer than its configured number of redundant copies.\n+   * {@link #ERROR} is for cases when the restore redundancy operation was unable to begin or threw\n+   * an exception.\n+   */\n+  enum Status {\n+    SUCCESS,\n+    FAILURE,\n+    ERROR\n+  }\n+\n+  /**\n+   * Adds the contents of another {@link RestoreRedundancyResults} object to this one, including\n+   * both {@link RegionRedundancyStatus} objects and information on the number of primaries\n+   * reassigned and the time taken to reassign them.\n+   *\n+   * @param results a {@link RestoreRedundancyResults} object whose contents will be added to this\n+   *        one.\n+   */\n+  void addRegionResults(RestoreRedundancyResults results);\n+\n+  /**\n+   * Adds information regarding the number of primaries reassigned and the time taken to reassign\n+   * them during a restore redundancy operation.\n+   *\n+   * @param details a {@link PartitionRebalanceInfo} generated by a\n+   *        {@link PartitionedRegionRebalanceOp} operation.\n+   */\n+  void addPrimaryReassignmentDetails(PartitionRebalanceInfo details);\n+\n+  /**\n+   * Adds one {@link RegionRedundancyStatus} to the result set.\n+   *\n+   * @param regionResult The {@link RegionRedundancyStatus} to be added to the result set.\n+   */\n+  void addRegionResult(RegionRedundancyStatus regionResult);\n+\n+  /**\n+   * Returns the {@link Status} of this restore redundancy operation. Possible statuses are\n+   * {@link Status#SUCCESS}, {@link Status#FAILURE} and {@link Status#ERROR}.\n+   *\n+   * @return The {@link Status} of this restore redundancy operation.\n+   */\n+  Status getStatus();\n+\n+  /**\n+   * Returns a message describing the results of this restore redundancy operation.\n+   *\n+   * @return A {@link String} describing the results of this restore redundancy operation.\n+   */\n+  String getMessage();\n+\n+  /**\n+   * Returns the {@link RegionRedundancyStatus} for a specific region or null if that region\n+   * is not present in this {@link RestoreRedundancyResults}.\n+   *\n+   * @param regionName The region to which the {@link RegionRedundancyStatus} to be returned\n+   *        belongs.\n+   * @return A {@link RegionRedundancyStatus} for the specified region or null if that region is not\n+   *         present in this {@link RestoreRedundancyResults}.\n+   */\n+  RegionRedundancyStatus getRegionResult(String regionName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjI2NDU1OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyResults.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzo0ODowN1rOGJQvmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDoyOTo0MlrOGJXJMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM2NDY5OA==", "bodyText": "Internal class.", "url": "https://github.com/apache/geode/pull/4909#discussion_r412364698", "createdAt": "2020-04-21T17:48:07Z", "author": {"login": "upthewaterspout"}, "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyResults.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.control;\n+\n+import java.util.Map;\n+\n+import org.apache.geode.cache.partition.PartitionRebalanceInfo;\n+import org.apache.geode.internal.cache.control.RegionRedundancyStatus;\n+import org.apache.geode.internal.cache.partitioned.PartitionedRegionRebalanceOp;\n+\n+/**\n+ * A class to collect the results of restore redundancy operations for one or more regions and\n+ * determine the success of failure of the operation.\n+ */\n+public interface RestoreRedundancyResults {\n+\n+  /**\n+   * {@link #SUCCESS} is defined as every included region having fully satisfied redundancy.\n+   * {@link #FAILURE} is defined as at least one region that is configured to have redundant copies\n+   * having fewer than its configured number of redundant copies.\n+   * {@link #ERROR} is for cases when the restore redundancy operation was unable to begin or threw\n+   * an exception.\n+   */\n+  enum Status {\n+    SUCCESS,\n+    FAILURE,\n+    ERROR\n+  }\n+\n+  /**\n+   * Adds the contents of another {@link RestoreRedundancyResults} object to this one, including\n+   * both {@link RegionRedundancyStatus} objects and information on the number of primaries\n+   * reassigned and the time taken to reassign them.\n+   *\n+   * @param results a {@link RestoreRedundancyResults} object whose contents will be added to this\n+   *        one.\n+   */\n+  void addRegionResults(RestoreRedundancyResults results);\n+\n+  /**\n+   * Adds information regarding the number of primaries reassigned and the time taken to reassign\n+   * them during a restore redundancy operation.\n+   *\n+   * @param details a {@link PartitionRebalanceInfo} generated by a\n+   *        {@link PartitionedRegionRebalanceOp} operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1MzQzOA==", "bodyText": "If we had a proper API module these would be a compile time failure for any tests.\n@upthewaterspout Seems like there should be a test in the static analyzer or other that should reject APIs like this.", "url": "https://github.com/apache/geode/pull/4909#discussion_r412453438", "createdAt": "2020-04-21T20:02:55Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyResults.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.control;\n+\n+import java.util.Map;\n+\n+import org.apache.geode.cache.partition.PartitionRebalanceInfo;\n+import org.apache.geode.internal.cache.control.RegionRedundancyStatus;\n+import org.apache.geode.internal.cache.partitioned.PartitionedRegionRebalanceOp;\n+\n+/**\n+ * A class to collect the results of restore redundancy operations for one or more regions and\n+ * determine the success of failure of the operation.\n+ */\n+public interface RestoreRedundancyResults {\n+\n+  /**\n+   * {@link #SUCCESS} is defined as every included region having fully satisfied redundancy.\n+   * {@link #FAILURE} is defined as at least one region that is configured to have redundant copies\n+   * having fewer than its configured number of redundant copies.\n+   * {@link #ERROR} is for cases when the restore redundancy operation was unable to begin or threw\n+   * an exception.\n+   */\n+  enum Status {\n+    SUCCESS,\n+    FAILURE,\n+    ERROR\n+  }\n+\n+  /**\n+   * Adds the contents of another {@link RestoreRedundancyResults} object to this one, including\n+   * both {@link RegionRedundancyStatus} objects and information on the number of primaries\n+   * reassigned and the time taken to reassign them.\n+   *\n+   * @param results a {@link RestoreRedundancyResults} object whose contents will be added to this\n+   *        one.\n+   */\n+  void addRegionResults(RestoreRedundancyResults results);\n+\n+  /**\n+   * Adds information regarding the number of primaries reassigned and the time taken to reassign\n+   * them during a restore redundancy operation.\n+   *\n+   * @param details a {@link PartitionRebalanceInfo} generated by a\n+   *        {@link PartitionedRegionRebalanceOp} operation.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM2NDY5OA=="}, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2OTU1NA==", "bodyText": "Perhaps this is the opportunity to start a geode-control-api.jar that contains all these interfaces. We have to start somewhere and this seems like a good small start.", "url": "https://github.com/apache/geode/pull/4909#discussion_r412469554", "createdAt": "2020-04-21T20:29:42Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyResults.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.control;\n+\n+import java.util.Map;\n+\n+import org.apache.geode.cache.partition.PartitionRebalanceInfo;\n+import org.apache.geode.internal.cache.control.RegionRedundancyStatus;\n+import org.apache.geode.internal.cache.partitioned.PartitionedRegionRebalanceOp;\n+\n+/**\n+ * A class to collect the results of restore redundancy operations for one or more regions and\n+ * determine the success of failure of the operation.\n+ */\n+public interface RestoreRedundancyResults {\n+\n+  /**\n+   * {@link #SUCCESS} is defined as every included region having fully satisfied redundancy.\n+   * {@link #FAILURE} is defined as at least one region that is configured to have redundant copies\n+   * having fewer than its configured number of redundant copies.\n+   * {@link #ERROR} is for cases when the restore redundancy operation was unable to begin or threw\n+   * an exception.\n+   */\n+  enum Status {\n+    SUCCESS,\n+    FAILURE,\n+    ERROR\n+  }\n+\n+  /**\n+   * Adds the contents of another {@link RestoreRedundancyResults} object to this one, including\n+   * both {@link RegionRedundancyStatus} objects and information on the number of primaries\n+   * reassigned and the time taken to reassign them.\n+   *\n+   * @param results a {@link RestoreRedundancyResults} object whose contents will be added to this\n+   *        one.\n+   */\n+  void addRegionResults(RestoreRedundancyResults results);\n+\n+  /**\n+   * Adds information regarding the number of primaries reassigned and the time taken to reassign\n+   * them during a restore redundancy operation.\n+   *\n+   * @param details a {@link PartitionRebalanceInfo} generated by a\n+   *        {@link PartitionedRegionRebalanceOp} operation.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM2NDY5OA=="}, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjI3MjIwOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/RegionRedundancyStatus.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzo0OTo0NVrOGJQ0Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMzo0NDozNlrOGJdE-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM2NTgzMQ==", "bodyText": "I think this class probably should be DataSerializableFixedId if we intend to serialize it in production.\nI saw RebalanceResults was Serializable as well. I'm not clear if we serialize these things in production or not, maybe for gfsh? For new classes we don't want to be using java serialization.", "url": "https://github.com/apache/geode/pull/4909#discussion_r412365831", "createdAt": "2020-04-21T17:49:45Z", "author": {"login": "upthewaterspout"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/RegionRedundancyStatus.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.control;\n+\n+import java.io.Serializable;\n+\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+\n+/**\n+ * Used to calculate and store the redundancy status for a {@link PartitionedRegion}.\n+ */\n+public class RegionRedundancyStatus implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2MzcyMQ==", "bodyText": "The only time I would say we should have Java Serializable classes is for testing. All other uses for client/server or p2p messaging should be DataSerializableFixedId. I wonder if our static analyzer could be updated to catch things like this?", "url": "https://github.com/apache/geode/pull/4909#discussion_r412463721", "createdAt": "2020-04-21T20:19:55Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/RegionRedundancyStatus.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.control;\n+\n+import java.io.Serializable;\n+\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+\n+/**\n+ * Used to calculate and store the redundancy status for a {@link PartitionedRegion}.\n+ */\n+public class RegionRedundancyStatus implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM2NTgzMQ=="}, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2Njc3Ng==", "bodyText": "Done.", "url": "https://github.com/apache/geode/pull/4909#discussion_r412566776", "createdAt": "2020-04-21T23:44:36Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/RegionRedundancyStatus.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.control;\n+\n+import java.io.Serializable;\n+\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+\n+/**\n+ * Used to calculate and store the redundancy status for a {@link PartitionedRegion}.\n+ */\n+public class RegionRedundancyStatus implements Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM2NTgzMQ=="}, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjMxMzY1OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/RestoreRedundancyBuilderImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzo1ODoyM1rOGJRMXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMzo0NDo0MFrOGJdFFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3MjA2Mg==", "bodyText": "These seems to be sort of a reimplementation of RebalanceOperationImpl.start(). Both that and this method seem to have some complicated scheduling logic. Should we have two copies and two different ways of doing this complicated scheduling?\nThis seems to be missing some of the logic from RebalanceOperationImpl. For example, that method filters out child colocated regions. Seems like that should be done here as well.\nMaybe we should just reuse/improve RebalanceOperationImpl?", "url": "https://github.com/apache/geode/pull/4909#discussion_r412372062", "createdAt": "2020-04-21T17:58:23Z", "author": {"login": "upthewaterspout"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/RestoreRedundancyBuilderImpl.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.control;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.RegionDestroyedException;\n+import org.apache.geode.cache.control.RestoreRedundancyBuilder;\n+import org.apache.geode.cache.control.RestoreRedundancyResults;\n+import org.apache.geode.cache.partition.PartitionRebalanceInfo;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.internal.cache.partitioned.PartitionedRegionRebalanceOp;\n+import org.apache.geode.internal.cache.partitioned.rebalance.RestoreRedundancyDirector;\n+import org.apache.geode.logging.internal.log4j.api.LogService;\n+\n+class RestoreRedundancyBuilderImpl implements RestoreRedundancyBuilder {\n+\n+  private final InternalCache cache;\n+  private final InternalResourceManager manager;\n+  private Set<String> includedRegions;\n+  private Set<String> excludedRegions;\n+  private boolean shouldReassign = true;\n+  private ScheduledExecutorService executor;\n+\n+  public RestoreRedundancyBuilderImpl(InternalCache cache) {\n+    this.cache = cache;\n+    this.manager = cache.getInternalResourceManager();\n+    this.executor = this.manager.getExecutor();\n+  }\n+\n+  @Override\n+  public RestoreRedundancyBuilder includeRegions(Set<String> regions) {\n+    this.includedRegions = regions;\n+    return this;\n+  }\n+\n+  @Override\n+  public RestoreRedundancyBuilder excludeRegions(Set<String> regions) {\n+    this.excludedRegions = regions;\n+    return this;\n+  }\n+\n+  @Override\n+  public RestoreRedundancyBuilder setReassignPrimaries(boolean shouldReassign) {\n+    this.shouldReassign = shouldReassign;\n+    return this;\n+  }\n+\n+  @Override\n+  public CompletableFuture<RestoreRedundancyResults> start() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjU2NjgwNg==", "bodyText": "If child colocated regions are automatically rejected, then if we explicitly include a child region in the restore redundancy operation but not its parent, no work will be done. This could make life difficult for users who might not know which region in a colocation group is the parent, so the behaviour implemented here is to restore redundancy to all regions in the colocation group if any one of them is included, regardless of whether it's the parent or not.\nThe missing logic is also not strictly needed here, since if we call execute() on a PartitionedRegionRebalanceOp for a colocated region, we will either rebalance the entire colocation group (if it's the first region in the group to be executed on) or we'll exit early because isRebalanceNecessary() will return false (if any of the other regions in the group have already been executed on), so no additional work is being done at the region level.\nThe design for this class was originally much closer to what is seen in RebalanceFactoryImpl, but following feedback on the RFC in which several people requested that the start() method return a CompletableFuture rather than a separate Operation class, this approach was taken. I agree that it would be better to have both operations use the same logic, but RebalanceOperation and RebalanceFactory are both public APIs and so can't be easily changed, and there was a strong agreement on the RFC to use a CompletableFuture rather than the existing approach, so I'm not sure it's possible to make everyone happy here.", "url": "https://github.com/apache/geode/pull/4909#discussion_r412566806", "createdAt": "2020-04-21T23:44:40Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/RestoreRedundancyBuilderImpl.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.control;\n+\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.RegionDestroyedException;\n+import org.apache.geode.cache.control.RestoreRedundancyBuilder;\n+import org.apache.geode.cache.control.RestoreRedundancyResults;\n+import org.apache.geode.cache.partition.PartitionRebalanceInfo;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.internal.cache.partitioned.PartitionedRegionRebalanceOp;\n+import org.apache.geode.internal.cache.partitioned.rebalance.RestoreRedundancyDirector;\n+import org.apache.geode.logging.internal.log4j.api.LogService;\n+\n+class RestoreRedundancyBuilderImpl implements RestoreRedundancyBuilder {\n+\n+  private final InternalCache cache;\n+  private final InternalResourceManager manager;\n+  private Set<String> includedRegions;\n+  private Set<String> excludedRegions;\n+  private boolean shouldReassign = true;\n+  private ScheduledExecutorService executor;\n+\n+  public RestoreRedundancyBuilderImpl(InternalCache cache) {\n+    this.cache = cache;\n+    this.manager = cache.getInternalResourceManager();\n+    this.executor = this.manager.getExecutor();\n+  }\n+\n+  @Override\n+  public RestoreRedundancyBuilder includeRegions(Set<String> regions) {\n+    this.includedRegions = regions;\n+    return this;\n+  }\n+\n+  @Override\n+  public RestoreRedundancyBuilder excludeRegions(Set<String> regions) {\n+    this.excludedRegions = regions;\n+    return this;\n+  }\n+\n+  @Override\n+  public RestoreRedundancyBuilder setReassignPrimaries(boolean shouldReassign) {\n+    this.shouldReassign = shouldReassign;\n+    return this;\n+  }\n+\n+  @Override\n+  public CompletableFuture<RestoreRedundancyResults> start() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjM3MjA2Mg=="}, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Mjg2MTkxOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyResults.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDowNTozMFrOGJWQNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzowNjo1NFrOGKy1gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1NDk2NA==", "bodyText": "Is it reasonable to assume we will never be able to transfer 2^31 or more primaries?", "url": "https://github.com/apache/geode/pull/4909#discussion_r412454964", "createdAt": "2020-04-21T20:05:30Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyResults.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.control;\n+\n+import java.util.Map;\n+\n+import org.apache.geode.cache.partition.PartitionRebalanceInfo;\n+import org.apache.geode.internal.cache.control.RegionRedundancyStatus;\n+import org.apache.geode.internal.cache.partitioned.PartitionedRegionRebalanceOp;\n+\n+/**\n+ * A class to collect the results of restore redundancy operations for one or more regions and\n+ * determine the success of failure of the operation.\n+ */\n+public interface RestoreRedundancyResults {\n+\n+  /**\n+   * {@link #SUCCESS} is defined as every included region having fully satisfied redundancy.\n+   * {@link #FAILURE} is defined as at least one region that is configured to have redundant copies\n+   * having fewer than its configured number of redundant copies.\n+   * {@link #ERROR} is for cases when the restore redundancy operation was unable to begin or threw\n+   * an exception.\n+   */\n+  enum Status {\n+    SUCCESS,\n+    FAILURE,\n+    ERROR\n+  }\n+\n+  /**\n+   * Adds the contents of another {@link RestoreRedundancyResults} object to this one, including\n+   * both {@link RegionRedundancyStatus} objects and information on the number of primaries\n+   * reassigned and the time taken to reassign them.\n+   *\n+   * @param results a {@link RestoreRedundancyResults} object whose contents will be added to this\n+   *        one.\n+   */\n+  void addRegionResults(RestoreRedundancyResults results);\n+\n+  /**\n+   * Adds information regarding the number of primaries reassigned and the time taken to reassign\n+   * them during a restore redundancy operation.\n+   *\n+   * @param details a {@link PartitionRebalanceInfo} generated by a\n+   *        {@link PartitionedRegionRebalanceOp} operation.\n+   */\n+  void addPrimaryReassignmentDetails(PartitionRebalanceInfo details);\n+\n+  /**\n+   * Adds one {@link RegionRedundancyStatus} to the result set.\n+   *\n+   * @param regionResult The {@link RegionRedundancyStatus} to be added to the result set.\n+   */\n+  void addRegionResult(RegionRedundancyStatus regionResult);\n+\n+  /**\n+   * Returns the {@link Status} of this restore redundancy operation. Possible statuses are\n+   * {@link Status#SUCCESS}, {@link Status#FAILURE} and {@link Status#ERROR}.\n+   *\n+   * @return The {@link Status} of this restore redundancy operation.\n+   */\n+  Status getStatus();\n+\n+  /**\n+   * Returns a message describing the results of this restore redundancy operation.\n+   *\n+   * @return A {@link String} describing the results of this restore redundancy operation.\n+   */\n+  String getMessage();\n+\n+  /**\n+   * Returns the {@link RegionRedundancyStatus} for a specific region or null if that region\n+   * is not present in this {@link RestoreRedundancyResults}.\n+   *\n+   * @param regionName The region to which the {@link RegionRedundancyStatus} to be returned\n+   *        belongs.\n+   * @return A {@link RegionRedundancyStatus} for the specified region or null if that region is not\n+   *         present in this {@link RestoreRedundancyResults}.\n+   */\n+  RegionRedundancyStatus getRegionResult(String regionName);\n+\n+  /**\n+   * Returns all the {@link RegionRedundancyStatus RegionRedundancyStatuses} for regions with\n+   * configured redundancy but zero actual redundant copies.\n+   *\n+   * @return A {@link Map} of {@link String} region name to {@link RegionRedundancyStatus} for every\n+   *         region contained in this {@link RestoreRedundancyResults} with configured redundancy\n+   *         but zero actual redundant copies.\n+   */\n+  Map<String, RegionRedundancyStatus> getZeroRedundancyRegionResults();\n+\n+  /**\n+   * Returns all the {@link RegionRedundancyStatus RegionRedundancyStatuses} for regions with with\n+   * at least one redundant copy, but fewer than the configured number of redundant copies.\n+   *\n+   * @return A {@link Map} of {@link String} region name to {@link RegionRedundancyStatus} for every\n+   *         region contained in this {@link RestoreRedundancyResults} with at least one redundant\n+   *         copy, but fewer than the configured number of redundant copies.\n+   */\n+  Map<String, RegionRedundancyStatus> getUnderRedundancyRegionResults();\n+\n+  /**\n+   * Returns all the {@link RegionRedundancyStatus RegionRedundancyStatuses} for regions with\n+   * redundancy satisfied.\n+   *\n+   * @return A {@link Map} of {@link String} region name to {@link RegionRedundancyStatus} for every\n+   *         region contained in this {@link RestoreRedundancyResults} with redundancy satisfied.\n+   */\n+  Map<String, RegionRedundancyStatus> getSatisfiedRedundancyRegionResults();\n+\n+  /**\n+   * Returns all the {@link RegionRedundancyStatus RegionRedundancyStatuses} contained in this\n+   * {@link RestoreRedundancyResults}. This method may return the actual backing map depending on\n+   * implementation.\n+   *\n+   * @return A {@link Map} of {@link String} region name to {@link RegionRedundancyStatus} for every\n+   *         region contained in this {@link RestoreRedundancyResults}.\n+   */\n+  Map<String, RegionRedundancyStatus> getRegionResults();\n+\n+  /**\n+   * Returns the total number of primaries that were transferred as part of the restore redundancy\n+   * operations.\n+   *\n+   * @return the total number of primaries that were transferred\n+   */\n+  int getTotalPrimaryTransfersCompleted();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk0MDIyMQ==", "bodyText": "I would hope we don't have to transfer that many primaries... ever...Can we even handle that many buckets (not theoretically but do we know of any cases where we have over 100 million buckets\u2753)", "url": "https://github.com/apache/geode/pull/4909#discussion_r413940221", "createdAt": "2020-04-23T16:23:34Z", "author": {"login": "jhuynh1"}, "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyResults.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.control;\n+\n+import java.util.Map;\n+\n+import org.apache.geode.cache.partition.PartitionRebalanceInfo;\n+import org.apache.geode.internal.cache.control.RegionRedundancyStatus;\n+import org.apache.geode.internal.cache.partitioned.PartitionedRegionRebalanceOp;\n+\n+/**\n+ * A class to collect the results of restore redundancy operations for one or more regions and\n+ * determine the success of failure of the operation.\n+ */\n+public interface RestoreRedundancyResults {\n+\n+  /**\n+   * {@link #SUCCESS} is defined as every included region having fully satisfied redundancy.\n+   * {@link #FAILURE} is defined as at least one region that is configured to have redundant copies\n+   * having fewer than its configured number of redundant copies.\n+   * {@link #ERROR} is for cases when the restore redundancy operation was unable to begin or threw\n+   * an exception.\n+   */\n+  enum Status {\n+    SUCCESS,\n+    FAILURE,\n+    ERROR\n+  }\n+\n+  /**\n+   * Adds the contents of another {@link RestoreRedundancyResults} object to this one, including\n+   * both {@link RegionRedundancyStatus} objects and information on the number of primaries\n+   * reassigned and the time taken to reassign them.\n+   *\n+   * @param results a {@link RestoreRedundancyResults} object whose contents will be added to this\n+   *        one.\n+   */\n+  void addRegionResults(RestoreRedundancyResults results);\n+\n+  /**\n+   * Adds information regarding the number of primaries reassigned and the time taken to reassign\n+   * them during a restore redundancy operation.\n+   *\n+   * @param details a {@link PartitionRebalanceInfo} generated by a\n+   *        {@link PartitionedRegionRebalanceOp} operation.\n+   */\n+  void addPrimaryReassignmentDetails(PartitionRebalanceInfo details);\n+\n+  /**\n+   * Adds one {@link RegionRedundancyStatus} to the result set.\n+   *\n+   * @param regionResult The {@link RegionRedundancyStatus} to be added to the result set.\n+   */\n+  void addRegionResult(RegionRedundancyStatus regionResult);\n+\n+  /**\n+   * Returns the {@link Status} of this restore redundancy operation. Possible statuses are\n+   * {@link Status#SUCCESS}, {@link Status#FAILURE} and {@link Status#ERROR}.\n+   *\n+   * @return The {@link Status} of this restore redundancy operation.\n+   */\n+  Status getStatus();\n+\n+  /**\n+   * Returns a message describing the results of this restore redundancy operation.\n+   *\n+   * @return A {@link String} describing the results of this restore redundancy operation.\n+   */\n+  String getMessage();\n+\n+  /**\n+   * Returns the {@link RegionRedundancyStatus} for a specific region or null if that region\n+   * is not present in this {@link RestoreRedundancyResults}.\n+   *\n+   * @param regionName The region to which the {@link RegionRedundancyStatus} to be returned\n+   *        belongs.\n+   * @return A {@link RegionRedundancyStatus} for the specified region or null if that region is not\n+   *         present in this {@link RestoreRedundancyResults}.\n+   */\n+  RegionRedundancyStatus getRegionResult(String regionName);\n+\n+  /**\n+   * Returns all the {@link RegionRedundancyStatus RegionRedundancyStatuses} for regions with\n+   * configured redundancy but zero actual redundant copies.\n+   *\n+   * @return A {@link Map} of {@link String} region name to {@link RegionRedundancyStatus} for every\n+   *         region contained in this {@link RestoreRedundancyResults} with configured redundancy\n+   *         but zero actual redundant copies.\n+   */\n+  Map<String, RegionRedundancyStatus> getZeroRedundancyRegionResults();\n+\n+  /**\n+   * Returns all the {@link RegionRedundancyStatus RegionRedundancyStatuses} for regions with with\n+   * at least one redundant copy, but fewer than the configured number of redundant copies.\n+   *\n+   * @return A {@link Map} of {@link String} region name to {@link RegionRedundancyStatus} for every\n+   *         region contained in this {@link RestoreRedundancyResults} with at least one redundant\n+   *         copy, but fewer than the configured number of redundant copies.\n+   */\n+  Map<String, RegionRedundancyStatus> getUnderRedundancyRegionResults();\n+\n+  /**\n+   * Returns all the {@link RegionRedundancyStatus RegionRedundancyStatuses} for regions with\n+   * redundancy satisfied.\n+   *\n+   * @return A {@link Map} of {@link String} region name to {@link RegionRedundancyStatus} for every\n+   *         region contained in this {@link RestoreRedundancyResults} with redundancy satisfied.\n+   */\n+  Map<String, RegionRedundancyStatus> getSatisfiedRedundancyRegionResults();\n+\n+  /**\n+   * Returns all the {@link RegionRedundancyStatus RegionRedundancyStatuses} contained in this\n+   * {@link RestoreRedundancyResults}. This method may return the actual backing map depending on\n+   * implementation.\n+   *\n+   * @return A {@link Map} of {@link String} region name to {@link RegionRedundancyStatus} for every\n+   *         region contained in this {@link RestoreRedundancyResults}.\n+   */\n+  Map<String, RegionRedundancyStatus> getRegionResults();\n+\n+  /**\n+   * Returns the total number of primaries that were transferred as part of the restore redundancy\n+   * operations.\n+   *\n+   * @return the total number of primaries that were transferred\n+   */\n+  int getTotalPrimaryTransfersCompleted();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1NDk2NA=="}, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk3MTg0Mg==", "bodyText": "The most primaries that could possibly be transferred for a single region during a restore redundancy operation is equal to the number of buckets in the region (this scenario would also require there to be at least as many servers as there are buckets). Assuming the default number of buckets (113) is used, there would need to be a little over 19 million regions for an integer overflow to occur, which seems like an extremely unlikely scenario.", "url": "https://github.com/apache/geode/pull/4909#discussion_r413971842", "createdAt": "2020-04-23T17:06:54Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyResults.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.control;\n+\n+import java.util.Map;\n+\n+import org.apache.geode.cache.partition.PartitionRebalanceInfo;\n+import org.apache.geode.internal.cache.control.RegionRedundancyStatus;\n+import org.apache.geode.internal.cache.partitioned.PartitionedRegionRebalanceOp;\n+\n+/**\n+ * A class to collect the results of restore redundancy operations for one or more regions and\n+ * determine the success of failure of the operation.\n+ */\n+public interface RestoreRedundancyResults {\n+\n+  /**\n+   * {@link #SUCCESS} is defined as every included region having fully satisfied redundancy.\n+   * {@link #FAILURE} is defined as at least one region that is configured to have redundant copies\n+   * having fewer than its configured number of redundant copies.\n+   * {@link #ERROR} is for cases when the restore redundancy operation was unable to begin or threw\n+   * an exception.\n+   */\n+  enum Status {\n+    SUCCESS,\n+    FAILURE,\n+    ERROR\n+  }\n+\n+  /**\n+   * Adds the contents of another {@link RestoreRedundancyResults} object to this one, including\n+   * both {@link RegionRedundancyStatus} objects and information on the number of primaries\n+   * reassigned and the time taken to reassign them.\n+   *\n+   * @param results a {@link RestoreRedundancyResults} object whose contents will be added to this\n+   *        one.\n+   */\n+  void addRegionResults(RestoreRedundancyResults results);\n+\n+  /**\n+   * Adds information regarding the number of primaries reassigned and the time taken to reassign\n+   * them during a restore redundancy operation.\n+   *\n+   * @param details a {@link PartitionRebalanceInfo} generated by a\n+   *        {@link PartitionedRegionRebalanceOp} operation.\n+   */\n+  void addPrimaryReassignmentDetails(PartitionRebalanceInfo details);\n+\n+  /**\n+   * Adds one {@link RegionRedundancyStatus} to the result set.\n+   *\n+   * @param regionResult The {@link RegionRedundancyStatus} to be added to the result set.\n+   */\n+  void addRegionResult(RegionRedundancyStatus regionResult);\n+\n+  /**\n+   * Returns the {@link Status} of this restore redundancy operation. Possible statuses are\n+   * {@link Status#SUCCESS}, {@link Status#FAILURE} and {@link Status#ERROR}.\n+   *\n+   * @return The {@link Status} of this restore redundancy operation.\n+   */\n+  Status getStatus();\n+\n+  /**\n+   * Returns a message describing the results of this restore redundancy operation.\n+   *\n+   * @return A {@link String} describing the results of this restore redundancy operation.\n+   */\n+  String getMessage();\n+\n+  /**\n+   * Returns the {@link RegionRedundancyStatus} for a specific region or null if that region\n+   * is not present in this {@link RestoreRedundancyResults}.\n+   *\n+   * @param regionName The region to which the {@link RegionRedundancyStatus} to be returned\n+   *        belongs.\n+   * @return A {@link RegionRedundancyStatus} for the specified region or null if that region is not\n+   *         present in this {@link RestoreRedundancyResults}.\n+   */\n+  RegionRedundancyStatus getRegionResult(String regionName);\n+\n+  /**\n+   * Returns all the {@link RegionRedundancyStatus RegionRedundancyStatuses} for regions with\n+   * configured redundancy but zero actual redundant copies.\n+   *\n+   * @return A {@link Map} of {@link String} region name to {@link RegionRedundancyStatus} for every\n+   *         region contained in this {@link RestoreRedundancyResults} with configured redundancy\n+   *         but zero actual redundant copies.\n+   */\n+  Map<String, RegionRedundancyStatus> getZeroRedundancyRegionResults();\n+\n+  /**\n+   * Returns all the {@link RegionRedundancyStatus RegionRedundancyStatuses} for regions with with\n+   * at least one redundant copy, but fewer than the configured number of redundant copies.\n+   *\n+   * @return A {@link Map} of {@link String} region name to {@link RegionRedundancyStatus} for every\n+   *         region contained in this {@link RestoreRedundancyResults} with at least one redundant\n+   *         copy, but fewer than the configured number of redundant copies.\n+   */\n+  Map<String, RegionRedundancyStatus> getUnderRedundancyRegionResults();\n+\n+  /**\n+   * Returns all the {@link RegionRedundancyStatus RegionRedundancyStatuses} for regions with\n+   * redundancy satisfied.\n+   *\n+   * @return A {@link Map} of {@link String} region name to {@link RegionRedundancyStatus} for every\n+   *         region contained in this {@link RestoreRedundancyResults} with redundancy satisfied.\n+   */\n+  Map<String, RegionRedundancyStatus> getSatisfiedRedundancyRegionResults();\n+\n+  /**\n+   * Returns all the {@link RegionRedundancyStatus RegionRedundancyStatuses} contained in this\n+   * {@link RestoreRedundancyResults}. This method may return the actual backing map depending on\n+   * implementation.\n+   *\n+   * @return A {@link Map} of {@link String} region name to {@link RegionRedundancyStatus} for every\n+   *         region contained in this {@link RestoreRedundancyResults}.\n+   */\n+  Map<String, RegionRedundancyStatus> getRegionResults();\n+\n+  /**\n+   * Returns the total number of primaries that were transferred as part of the restore redundancy\n+   * operations.\n+   *\n+   * @return the total number of primaries that were transferred\n+   */\n+  int getTotalPrimaryTransfersCompleted();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1NDk2NA=="}, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Mjg3NDQ1OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyResults.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDowODoyOFrOGJWXqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODozNjoyMVrOGK2hkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1Njg3Mw==", "bodyText": "We had discussion long ago about making sure time based APIs used TimeUnit. This method should be long getTotalPrimaryTransferTime(TimeUnit unit). Alternatively we could consider java.time.Duration. Although that does incur an object allocation, given the infrequency that it is called the overhead is probably worth the correctness.", "url": "https://github.com/apache/geode/pull/4909#discussion_r412456873", "createdAt": "2020-04-21T20:08:28Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyResults.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.control;\n+\n+import java.util.Map;\n+\n+import org.apache.geode.cache.partition.PartitionRebalanceInfo;\n+import org.apache.geode.internal.cache.control.RegionRedundancyStatus;\n+import org.apache.geode.internal.cache.partitioned.PartitionedRegionRebalanceOp;\n+\n+/**\n+ * A class to collect the results of restore redundancy operations for one or more regions and\n+ * determine the success of failure of the operation.\n+ */\n+public interface RestoreRedundancyResults {\n+\n+  /**\n+   * {@link #SUCCESS} is defined as every included region having fully satisfied redundancy.\n+   * {@link #FAILURE} is defined as at least one region that is configured to have redundant copies\n+   * having fewer than its configured number of redundant copies.\n+   * {@link #ERROR} is for cases when the restore redundancy operation was unable to begin or threw\n+   * an exception.\n+   */\n+  enum Status {\n+    SUCCESS,\n+    FAILURE,\n+    ERROR\n+  }\n+\n+  /**\n+   * Adds the contents of another {@link RestoreRedundancyResults} object to this one, including\n+   * both {@link RegionRedundancyStatus} objects and information on the number of primaries\n+   * reassigned and the time taken to reassign them.\n+   *\n+   * @param results a {@link RestoreRedundancyResults} object whose contents will be added to this\n+   *        one.\n+   */\n+  void addRegionResults(RestoreRedundancyResults results);\n+\n+  /**\n+   * Adds information regarding the number of primaries reassigned and the time taken to reassign\n+   * them during a restore redundancy operation.\n+   *\n+   * @param details a {@link PartitionRebalanceInfo} generated by a\n+   *        {@link PartitionedRegionRebalanceOp} operation.\n+   */\n+  void addPrimaryReassignmentDetails(PartitionRebalanceInfo details);\n+\n+  /**\n+   * Adds one {@link RegionRedundancyStatus} to the result set.\n+   *\n+   * @param regionResult The {@link RegionRedundancyStatus} to be added to the result set.\n+   */\n+  void addRegionResult(RegionRedundancyStatus regionResult);\n+\n+  /**\n+   * Returns the {@link Status} of this restore redundancy operation. Possible statuses are\n+   * {@link Status#SUCCESS}, {@link Status#FAILURE} and {@link Status#ERROR}.\n+   *\n+   * @return The {@link Status} of this restore redundancy operation.\n+   */\n+  Status getStatus();\n+\n+  /**\n+   * Returns a message describing the results of this restore redundancy operation.\n+   *\n+   * @return A {@link String} describing the results of this restore redundancy operation.\n+   */\n+  String getMessage();\n+\n+  /**\n+   * Returns the {@link RegionRedundancyStatus} for a specific region or null if that region\n+   * is not present in this {@link RestoreRedundancyResults}.\n+   *\n+   * @param regionName The region to which the {@link RegionRedundancyStatus} to be returned\n+   *        belongs.\n+   * @return A {@link RegionRedundancyStatus} for the specified region or null if that region is not\n+   *         present in this {@link RestoreRedundancyResults}.\n+   */\n+  RegionRedundancyStatus getRegionResult(String regionName);\n+\n+  /**\n+   * Returns all the {@link RegionRedundancyStatus RegionRedundancyStatuses} for regions with\n+   * configured redundancy but zero actual redundant copies.\n+   *\n+   * @return A {@link Map} of {@link String} region name to {@link RegionRedundancyStatus} for every\n+   *         region contained in this {@link RestoreRedundancyResults} with configured redundancy\n+   *         but zero actual redundant copies.\n+   */\n+  Map<String, RegionRedundancyStatus> getZeroRedundancyRegionResults();\n+\n+  /**\n+   * Returns all the {@link RegionRedundancyStatus RegionRedundancyStatuses} for regions with with\n+   * at least one redundant copy, but fewer than the configured number of redundant copies.\n+   *\n+   * @return A {@link Map} of {@link String} region name to {@link RegionRedundancyStatus} for every\n+   *         region contained in this {@link RestoreRedundancyResults} with at least one redundant\n+   *         copy, but fewer than the configured number of redundant copies.\n+   */\n+  Map<String, RegionRedundancyStatus> getUnderRedundancyRegionResults();\n+\n+  /**\n+   * Returns all the {@link RegionRedundancyStatus RegionRedundancyStatuses} for regions with\n+   * redundancy satisfied.\n+   *\n+   * @return A {@link Map} of {@link String} region name to {@link RegionRedundancyStatus} for every\n+   *         region contained in this {@link RestoreRedundancyResults} with redundancy satisfied.\n+   */\n+  Map<String, RegionRedundancyStatus> getSatisfiedRedundancyRegionResults();\n+\n+  /**\n+   * Returns all the {@link RegionRedundancyStatus RegionRedundancyStatuses} contained in this\n+   * {@link RestoreRedundancyResults}. This method may return the actual backing map depending on\n+   * implementation.\n+   *\n+   * @return A {@link Map} of {@link String} region name to {@link RegionRedundancyStatus} for every\n+   *         region contained in this {@link RestoreRedundancyResults}.\n+   */\n+  Map<String, RegionRedundancyStatus> getRegionResults();\n+\n+  /**\n+   * Returns the total number of primaries that were transferred as part of the restore redundancy\n+   * operations.\n+   *\n+   * @return the total number of primaries that were transferred\n+   */\n+  int getTotalPrimaryTransfersCompleted();\n+\n+  /**\n+   * Returns the total time, in milliseconds, spent transferring primaries as part of the restore\n+   * redundancy operations.\n+   *\n+   * @return the total time, in milliseconds, spent transferring primaries\n+   */\n+  long getTotalPrimaryTransferTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 147}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzMjI3Mw==", "bodyText": "Done", "url": "https://github.com/apache/geode/pull/4909#discussion_r414032273", "createdAt": "2020-04-23T18:36:21Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyResults.java", "diffHunk": "@@ -0,0 +1,148 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.control;\n+\n+import java.util.Map;\n+\n+import org.apache.geode.cache.partition.PartitionRebalanceInfo;\n+import org.apache.geode.internal.cache.control.RegionRedundancyStatus;\n+import org.apache.geode.internal.cache.partitioned.PartitionedRegionRebalanceOp;\n+\n+/**\n+ * A class to collect the results of restore redundancy operations for one or more regions and\n+ * determine the success of failure of the operation.\n+ */\n+public interface RestoreRedundancyResults {\n+\n+  /**\n+   * {@link #SUCCESS} is defined as every included region having fully satisfied redundancy.\n+   * {@link #FAILURE} is defined as at least one region that is configured to have redundant copies\n+   * having fewer than its configured number of redundant copies.\n+   * {@link #ERROR} is for cases when the restore redundancy operation was unable to begin or threw\n+   * an exception.\n+   */\n+  enum Status {\n+    SUCCESS,\n+    FAILURE,\n+    ERROR\n+  }\n+\n+  /**\n+   * Adds the contents of another {@link RestoreRedundancyResults} object to this one, including\n+   * both {@link RegionRedundancyStatus} objects and information on the number of primaries\n+   * reassigned and the time taken to reassign them.\n+   *\n+   * @param results a {@link RestoreRedundancyResults} object whose contents will be added to this\n+   *        one.\n+   */\n+  void addRegionResults(RestoreRedundancyResults results);\n+\n+  /**\n+   * Adds information regarding the number of primaries reassigned and the time taken to reassign\n+   * them during a restore redundancy operation.\n+   *\n+   * @param details a {@link PartitionRebalanceInfo} generated by a\n+   *        {@link PartitionedRegionRebalanceOp} operation.\n+   */\n+  void addPrimaryReassignmentDetails(PartitionRebalanceInfo details);\n+\n+  /**\n+   * Adds one {@link RegionRedundancyStatus} to the result set.\n+   *\n+   * @param regionResult The {@link RegionRedundancyStatus} to be added to the result set.\n+   */\n+  void addRegionResult(RegionRedundancyStatus regionResult);\n+\n+  /**\n+   * Returns the {@link Status} of this restore redundancy operation. Possible statuses are\n+   * {@link Status#SUCCESS}, {@link Status#FAILURE} and {@link Status#ERROR}.\n+   *\n+   * @return The {@link Status} of this restore redundancy operation.\n+   */\n+  Status getStatus();\n+\n+  /**\n+   * Returns a message describing the results of this restore redundancy operation.\n+   *\n+   * @return A {@link String} describing the results of this restore redundancy operation.\n+   */\n+  String getMessage();\n+\n+  /**\n+   * Returns the {@link RegionRedundancyStatus} for a specific region or null if that region\n+   * is not present in this {@link RestoreRedundancyResults}.\n+   *\n+   * @param regionName The region to which the {@link RegionRedundancyStatus} to be returned\n+   *        belongs.\n+   * @return A {@link RegionRedundancyStatus} for the specified region or null if that region is not\n+   *         present in this {@link RestoreRedundancyResults}.\n+   */\n+  RegionRedundancyStatus getRegionResult(String regionName);\n+\n+  /**\n+   * Returns all the {@link RegionRedundancyStatus RegionRedundancyStatuses} for regions with\n+   * configured redundancy but zero actual redundant copies.\n+   *\n+   * @return A {@link Map} of {@link String} region name to {@link RegionRedundancyStatus} for every\n+   *         region contained in this {@link RestoreRedundancyResults} with configured redundancy\n+   *         but zero actual redundant copies.\n+   */\n+  Map<String, RegionRedundancyStatus> getZeroRedundancyRegionResults();\n+\n+  /**\n+   * Returns all the {@link RegionRedundancyStatus RegionRedundancyStatuses} for regions with with\n+   * at least one redundant copy, but fewer than the configured number of redundant copies.\n+   *\n+   * @return A {@link Map} of {@link String} region name to {@link RegionRedundancyStatus} for every\n+   *         region contained in this {@link RestoreRedundancyResults} with at least one redundant\n+   *         copy, but fewer than the configured number of redundant copies.\n+   */\n+  Map<String, RegionRedundancyStatus> getUnderRedundancyRegionResults();\n+\n+  /**\n+   * Returns all the {@link RegionRedundancyStatus RegionRedundancyStatuses} for regions with\n+   * redundancy satisfied.\n+   *\n+   * @return A {@link Map} of {@link String} region name to {@link RegionRedundancyStatus} for every\n+   *         region contained in this {@link RestoreRedundancyResults} with redundancy satisfied.\n+   */\n+  Map<String, RegionRedundancyStatus> getSatisfiedRedundancyRegionResults();\n+\n+  /**\n+   * Returns all the {@link RegionRedundancyStatus RegionRedundancyStatuses} contained in this\n+   * {@link RestoreRedundancyResults}. This method may return the actual backing map depending on\n+   * implementation.\n+   *\n+   * @return A {@link Map} of {@link String} region name to {@link RegionRedundancyStatus} for every\n+   *         region contained in this {@link RestoreRedundancyResults}.\n+   */\n+  Map<String, RegionRedundancyStatus> getRegionResults();\n+\n+  /**\n+   * Returns the total number of primaries that were transferred as part of the restore redundancy\n+   * operations.\n+   *\n+   * @return the total number of primaries that were transferred\n+   */\n+  int getTotalPrimaryTransfersCompleted();\n+\n+  /**\n+   * Returns the total time, in milliseconds, spent transferring primaries as part of the restore\n+   * redundancy operations.\n+   *\n+   * @return the total time, in milliseconds, spent transferring primaries\n+   */\n+  long getTotalPrimaryTransferTime();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1Njg3Mw=="}, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Mjg4OTQ2OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDoxMjoxMFrOGJWggQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODozNjoxNlrOGK2hWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1OTEzNw==", "bodyText": "I think builder.shouldReassignPrimaries(true) is more consistent with the other builder methods here. Otherwise I would change all to use the set prefix. Naming convention consistency is preferable.", "url": "https://github.com/apache/geode/pull/4909#discussion_r412459137", "createdAt": "2020-04-21T20:12:10Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyBuilder.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.cache.control;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Factory for defining and starting a {@link CompletableFuture} that returns\n+ * {@link RestoreRedundancyResults}.\n+ */\n+public interface RestoreRedundancyBuilder {\n+  /**\n+   * Specify which regions to include in the restore redundancy operation. The default,\n+   * <code>null<code>, means all regions should be included. Includes take precedence over\n+   * excludes.\n+   *\n+   * @param regions A set containing the names of regions to include.\n+   */\n+  RestoreRedundancyBuilder includeRegions(Set<String> regions);\n+\n+  /**\n+   * Exclude specific regions from the restore redundancy operation. The default,\n+   * <code>null<code>, means don't exclude any regions.\n+   *\n+   * @param regions A set containing the names of regions to exclude.\n+   */\n+  RestoreRedundancyBuilder excludeRegions(Set<String> regions);\n+\n+  /**\n+   * Set whether the restore redundancy operation should reassign primary buckets. The default,\n+   * <code>true</code>, will result in primary buckets being reassigned for better load balancing\n+   * across members.\n+   *\n+   * @param shouldReassign A boolean indicating whether or not the operation created by this\n+   *        class should reassign primary bucket hosts.\n+   */\n+  RestoreRedundancyBuilder setReassignPrimaries(boolean shouldReassign);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzMjIxNw==", "bodyText": "Done", "url": "https://github.com/apache/geode/pull/4909#discussion_r414032217", "createdAt": "2020-04-23T18:36:16Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyBuilder.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.cache.control;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Factory for defining and starting a {@link CompletableFuture} that returns\n+ * {@link RestoreRedundancyResults}.\n+ */\n+public interface RestoreRedundancyBuilder {\n+  /**\n+   * Specify which regions to include in the restore redundancy operation. The default,\n+   * <code>null<code>, means all regions should be included. Includes take precedence over\n+   * excludes.\n+   *\n+   * @param regions A set containing the names of regions to include.\n+   */\n+  RestoreRedundancyBuilder includeRegions(Set<String> regions);\n+\n+  /**\n+   * Exclude specific regions from the restore redundancy operation. The default,\n+   * <code>null<code>, means don't exclude any regions.\n+   *\n+   * @param regions A set containing the names of regions to exclude.\n+   */\n+  RestoreRedundancyBuilder excludeRegions(Set<String> regions);\n+\n+  /**\n+   * Set whether the restore redundancy operation should reassign primary buckets. The default,\n+   * <code>true</code>, will result in primary buckets being reassigned for better load balancing\n+   * across members.\n+   *\n+   * @param shouldReassign A boolean indicating whether or not the operation created by this\n+   *        class should reassign primary bucket hosts.\n+   */\n+  RestoreRedundancyBuilder setReassignPrimaries(boolean shouldReassign);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1OTEzNw=="}, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Mjg5MjQ0OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDoxMzowNFrOGJWicw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDoxMzowNFrOGJWicw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ1OTYzNQ==", "bodyText": "A builder with a \"start\" method? I get that \"build\" doesn't feel right either. Maybe there is a better name for this class? \u00af\\_(\u30c4)_/\u00af", "url": "https://github.com/apache/geode/pull/4909#discussion_r412459635", "createdAt": "2020-04-21T20:13:04Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-core/src/main/java/org/apache/geode/cache/control/RestoreRedundancyBuilder.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.cache.control;\n+\n+import java.util.Set;\n+import java.util.concurrent.CompletableFuture;\n+\n+/**\n+ * Factory for defining and starting a {@link CompletableFuture} that returns\n+ * {@link RestoreRedundancyResults}.\n+ */\n+public interface RestoreRedundancyBuilder {\n+  /**\n+   * Specify which regions to include in the restore redundancy operation. The default,\n+   * <code>null<code>, means all regions should be included. Includes take precedence over\n+   * excludes.\n+   *\n+   * @param regions A set containing the names of regions to include.\n+   */\n+  RestoreRedundancyBuilder includeRegions(Set<String> regions);\n+\n+  /**\n+   * Exclude specific regions from the restore redundancy operation. The default,\n+   * <code>null<code>, means don't exclude any regions.\n+   *\n+   * @param regions A set containing the names of regions to exclude.\n+   */\n+  RestoreRedundancyBuilder excludeRegions(Set<String> regions);\n+\n+  /**\n+   * Set whether the restore redundancy operation should reassign primary buckets. The default,\n+   * <code>true</code>, will result in primary buckets being reassigned for better load balancing\n+   * across members.\n+   *\n+   * @param shouldReassign A boolean indicating whether or not the operation created by this\n+   *        class should reassign primary bucket hosts.\n+   */\n+  RestoreRedundancyBuilder setReassignPrimaries(boolean shouldReassign);\n+\n+  /**\n+   * Asynchronously starts a new restore redundancy operation. Only the cache resources used by this\n+   * member will have redundancy restored. The operation may queue as needed for resources in\n+   * contention by other active restore redundancy operations.\n+   *\n+   * @return a {@link CompletableFuture} which will return the results of the restore redundancy\n+   *         operation started by this method.\n+   */\n+  CompletableFuture<RestoreRedundancyResults> start();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjkxMDIwOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/InternalResourceManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDoxNzo0MlrOGJWtMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODozNjowNFrOGK2guw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2MjM4Nw==", "bodyText": "Maybe an unmodifiable set wrapped around a concurrent map?\nAlso the use of this. qualifier is not necessary in this context.", "url": "https://github.com/apache/geode/pull/4909#discussion_r412462387", "createdAt": "2020-04-21T20:17:42Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/InternalResourceManager.java", "diffHunk": "@@ -288,20 +294,20 @@ public RebalanceFactory createRebalanceFactory() {\n \n   @Override\n   public Set<RebalanceOperation> getRebalanceOperations() {\n-    synchronized (this.inProgressOperationsLock) {\n-      return new HashSet<RebalanceOperation>(this.inProgressOperations);\n+    synchronized (this.inProgressRebalanceOperationsLock) {\n+      return new HashSet<>(this.inProgressRebalanceOperations);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzMjA1OQ==", "bodyText": "Done", "url": "https://github.com/apache/geode/pull/4909#discussion_r414032059", "createdAt": "2020-04-23T18:36:04Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/InternalResourceManager.java", "diffHunk": "@@ -288,20 +294,20 @@ public RebalanceFactory createRebalanceFactory() {\n \n   @Override\n   public Set<RebalanceOperation> getRebalanceOperations() {\n-    synchronized (this.inProgressOperationsLock) {\n-      return new HashSet<RebalanceOperation>(this.inProgressOperations);\n+    synchronized (this.inProgressRebalanceOperationsLock) {\n+      return new HashSet<>(this.inProgressRebalanceOperations);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2MjM4Nw=="}, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2MjkyNzAyOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/RegionRedundancyStatus.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDoyMTo0MlrOGJW2sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODozNjowN1rOGK2g4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2NDgxNg==", "bodyText": "Javadoc, what does \"Actual Redundancy\" mean?", "url": "https://github.com/apache/geode/pull/4909#discussion_r412464816", "createdAt": "2020-04-21T20:21:42Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/RegionRedundancyStatus.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.control;\n+\n+import java.io.Serializable;\n+\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+\n+/**\n+ * Used to calculate and store the redundancy status for a {@link PartitionedRegion}.\n+ */\n+public class RegionRedundancyStatus implements Serializable {\n+  private static final long serialVersionUID = 3407539362166634316L;\n+\n+  public static final String OUTPUT_STRING =\n+      \"%s redundancy status: %s. Desired redundancy is %s and actual redundancy is %s.\";\n+\n+  /**\n+   * The name of the region used to create this object.\n+   */\n+  private final String regionName;\n+\n+  /**\n+   * The configured redundancy of the region used to create this object.\n+   */\n+  private final int desiredRedundancy;\n+\n+  /**\n+   * The actual redundancy of the region used to create this object at time of creation.\n+   */\n+  private final int actualRedundancy;\n+\n+  /**\n+   * The {@link RedundancyStatus} of the region used to create this object at time of creation.\n+   */\n+  private final RedundancyStatus status;\n+\n+  /**\n+   * The redundancy status of the region used to create this object at time of creation.\n+   * {@link #SATISFIED} if every bucket in the region has the configured number of redundant copies\n+   * {@link #NOT_SATISFIED} if at least one bucket in the region has less than the configured number\n+   * of redundant copies\n+   * {@link #NO_REDUNDANT_COPIES} if at least one bucket in the region has zero redundant copies and\n+   * the region is not configured for zero redundancy\n+   */\n+  enum RedundancyStatus {\n+    SATISFIED,\n+    NOT_SATISFIED,\n+    NO_REDUNDANT_COPIES\n+  }\n+\n+  public RegionRedundancyStatus(PartitionedRegion region) {\n+    regionName = region.getName();\n+    desiredRedundancy = region.getRedundantCopies();\n+    actualRedundancy = calculateLowestRedundancy(region);\n+    status = determineStatus(desiredRedundancy, actualRedundancy);\n+  }\n+\n+  public String getRegionName() {\n+    return regionName;\n+  }\n+\n+  public int getActualRedundancy() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzMjA5OQ==", "bodyText": "Updated with a description. The actual redundancy is the number of redundant copies that existed when the RegionRedundancyStatus was created, which may be different from the configured desired redundancy.", "url": "https://github.com/apache/geode/pull/4909#discussion_r414032099", "createdAt": "2020-04-23T18:36:07Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/RegionRedundancyStatus.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.control;\n+\n+import java.io.Serializable;\n+\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+\n+/**\n+ * Used to calculate and store the redundancy status for a {@link PartitionedRegion}.\n+ */\n+public class RegionRedundancyStatus implements Serializable {\n+  private static final long serialVersionUID = 3407539362166634316L;\n+\n+  public static final String OUTPUT_STRING =\n+      \"%s redundancy status: %s. Desired redundancy is %s and actual redundancy is %s.\";\n+\n+  /**\n+   * The name of the region used to create this object.\n+   */\n+  private final String regionName;\n+\n+  /**\n+   * The configured redundancy of the region used to create this object.\n+   */\n+  private final int desiredRedundancy;\n+\n+  /**\n+   * The actual redundancy of the region used to create this object at time of creation.\n+   */\n+  private final int actualRedundancy;\n+\n+  /**\n+   * The {@link RedundancyStatus} of the region used to create this object at time of creation.\n+   */\n+  private final RedundancyStatus status;\n+\n+  /**\n+   * The redundancy status of the region used to create this object at time of creation.\n+   * {@link #SATISFIED} if every bucket in the region has the configured number of redundant copies\n+   * {@link #NOT_SATISFIED} if at least one bucket in the region has less than the configured number\n+   * of redundant copies\n+   * {@link #NO_REDUNDANT_COPIES} if at least one bucket in the region has zero redundant copies and\n+   * the region is not configured for zero redundancy\n+   */\n+  enum RedundancyStatus {\n+    SATISFIED,\n+    NOT_SATISFIED,\n+    NO_REDUNDANT_COPIES\n+  }\n+\n+  public RegionRedundancyStatus(PartitionedRegion region) {\n+    regionName = region.getName();\n+    desiredRedundancy = region.getRedundantCopies();\n+    actualRedundancy = calculateLowestRedundancy(region);\n+    status = determineStatus(desiredRedundancy, actualRedundancy);\n+  }\n+\n+  public String getRegionName() {\n+    return regionName;\n+  }\n+\n+  public int getActualRedundancy() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2NDgxNg=="}, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2Mjk0MTg4OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/RestoreRedundancyResultsImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQyMDoyNTozNVrOGJW_jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODozNjowOVrOGK2hCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2NzA4Nw==", "bodyText": "Again with the serialization here.", "url": "https://github.com/apache/geode/pull/4909#discussion_r412467087", "createdAt": "2020-04-21T20:25:35Z", "author": {"login": "pivotal-jbarrett"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/RestoreRedundancyResultsImpl.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.control;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.control.RestoreRedundancyResults;\n+import org.apache.geode.cache.partition.PartitionRebalanceInfo;\n+\n+public class RestoreRedundancyResultsImpl implements RestoreRedundancyResults, Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzMjEzNw==", "bodyText": "Fixed", "url": "https://github.com/apache/geode/pull/4909#discussion_r414032137", "createdAt": "2020-04-23T18:36:09Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/control/RestoreRedundancyResultsImpl.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.control;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import org.apache.geode.cache.control.RestoreRedundancyResults;\n+import org.apache.geode.cache.partition.PartitionRebalanceInfo;\n+\n+public class RestoreRedundancyResultsImpl implements RestoreRedundancyResults, Serializable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjQ2NzA4Nw=="}, "originalCommit": {"oid": "7592c897a1fbfb767326835364319713e6dfb16f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2OTIyOTgzOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/cache/control/RegionRedundancyStatus.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQyMzo0MzoxMlrOGKQV9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODozODo1N1rOGK2ocw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwNjcxMQ==", "bodyText": "I think this is still leaking internal classes (in this case DataSerializableFixedID). This probably needs another (read only) interface as part of the public API and an internal implementation class.", "url": "https://github.com/apache/geode/pull/4909#discussion_r413406711", "createdAt": "2020-04-22T23:43:12Z", "author": {"login": "upthewaterspout"}, "path": "geode-core/src/main/java/org/apache/geode/cache/control/RegionRedundancyStatus.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.control;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+\n+import org.apache.geode.DataSerializer;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.internal.serialization.DataSerializableFixedID;\n+import org.apache.geode.internal.serialization.DeserializationContext;\n+import org.apache.geode.internal.serialization.SerializationContext;\n+import org.apache.geode.internal.serialization.Version;\n+\n+/**\n+ * Used to calculate and store the redundancy status for a {@link PartitionedRegion}.\n+ */\n+public class RegionRedundancyStatus implements DataSerializableFixedID {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f700bedcbf80b89bf93515313e269a3f4960b9d5"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAzNDAzNQ==", "bodyText": "Thanks for catching this", "url": "https://github.com/apache/geode/pull/4909#discussion_r414034035", "createdAt": "2020-04-23T18:38:57Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/cache/control/RegionRedundancyStatus.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.cache.control;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+\n+import org.apache.geode.DataSerializer;\n+import org.apache.geode.internal.cache.PartitionedRegion;\n+import org.apache.geode.internal.serialization.DataSerializableFixedID;\n+import org.apache.geode.internal.serialization.DeserializationContext;\n+import org.apache.geode.internal.serialization.SerializationContext;\n+import org.apache.geode.internal.serialization.Version;\n+\n+/**\n+ * Used to calculate and store the redundancy status for a {@link PartitionedRegion}.\n+ */\n+public class RegionRedundancyStatus implements DataSerializableFixedID {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzQwNjcxMQ=="}, "originalCommit": {"oid": "f700bedcbf80b89bf93515313e269a3f4960b9d5"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDQ2MTgzOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/cache/control/ResourceManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzoyNzozMVrOGLAJTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzoyNzozMVrOGLAJTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE4OTkwMA==", "bodyText": "I think we should improve these javadocs and maybe clarify the difference between \"restore redundancy\" and rebalance. Restore redundancy is really just a subset of the rebalance operation - there is no need to invoke both, for example.", "url": "https://github.com/apache/geode/pull/4909#discussion_r414189900", "createdAt": "2020-04-23T23:27:31Z", "author": {"login": "upthewaterspout"}, "path": "geode-core/src/main/java/org/apache/geode/cache/control/ResourceManager.java", "diffHunk": "@@ -77,6 +78,21 @@\n    */\n   Set<RebalanceOperation> getRebalanceOperations();\n \n+  /**\n+   * Creates a class for defining and starting restore redundancy operations.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6989fd53eccb15c966b29c2871675958b5211953"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3NDQ3MDExOnYy", "diffSide": "RIGHT", "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/DataSerializableFixedID.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzozMDo0OVrOGLAODQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QyMzo0Mzo1M1rOGLAiEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5MTExNw==", "bodyText": "Nitpick - but maybe we should save these small message ids for more frequent messages?", "url": "https://github.com/apache/geode/pull/4909#discussion_r414191117", "createdAt": "2020-04-23T23:30:49Z", "author": {"login": "upthewaterspout"}, "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/DataSerializableFixedID.java", "diffHunk": "@@ -225,7 +225,10 @@\n \n   byte REMOVE_CACHESERVER_PROFILE_UPDATE = -19;\n \n-  // IDs -18 through -10 unused\n+  byte REGION_REDUNDANCY_STATUS = -18;\n+  byte RESTORE_REDUNDANCY_RESULTS = -17;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6989fd53eccb15c966b29c2871675958b5211953"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5NjI0MA==", "bodyText": "Sounds sensible", "url": "https://github.com/apache/geode/pull/4909#discussion_r414196240", "createdAt": "2020-04-23T23:43:53Z", "author": {"login": "DonalEvans"}, "path": "geode-serialization/src/main/java/org/apache/geode/internal/serialization/DataSerializableFixedID.java", "diffHunk": "@@ -225,7 +225,10 @@\n \n   byte REMOVE_CACHESERVER_PROFILE_UPDATE = -19;\n \n-  // IDs -18 through -10 unused\n+  byte REGION_REDUNDANCY_STATUS = -18;\n+  byte RESTORE_REDUNDANCY_RESULTS = -17;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDE5MTExNw=="}, "originalCommit": {"oid": "6989fd53eccb15c966b29c2871675958b5211953"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4254, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}