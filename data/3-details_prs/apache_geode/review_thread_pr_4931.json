{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMTM0MDU2", "number": 4931, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjoyMDo0OVrODweWkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjozMDoxMFrODwelLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTU1NTM3OnYy", "diffSide": "RIGHT", "path": "geode-assembly/src/distributedTest/java/org/apache/geode/session/tests/CargoTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjoyMDo0OVrOGDf8EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjozODozNFrOGDgnEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyMjE5Mw==", "bodyText": "You should be able to delete the 2-second sleep. The very next line is an await.", "url": "https://github.com/apache/geode/pull/4931#discussion_r406322193", "createdAt": "2020-04-09T16:20:49Z", "author": {"login": "kirklund"}, "path": "geode-assembly/src/distributedTest/java/org/apache/geode/session/tests/CargoTestBase.java", "diffHunk": "@@ -246,13 +250,14 @@ public void containersShouldExpireInSetTimeframe()\n \n     client.setPort(Integer.parseInt(manager.getContainerPort(0)));\n     Client.Response resp = client.set(key, value);\n-\n-    getKeyValueDataOnAllClients(key, value, resp.getSessionCookie());\n-\n-    client.setMaxInactive(1);\n-    Thread.sleep(5000);\n-\n-    verifySessionIsRemoved(key);\n+    await().untilAsserted(() -> getKeyValueDataOnAllClients(key, value, resp.getSessionCookie()));\n+    client.setMaxInactive(1); // max inactive time is 1 second. Lets wait a second.\n+    Thread.sleep(2000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b235ee1f361aa3cc863a441828807d211ac3e5d0"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzMzIwMA==", "bodyText": "This sleep forces the timeout to expire so I cannot delete it.", "url": "https://github.com/apache/geode/pull/4931#discussion_r406333200", "createdAt": "2020-04-09T16:38:34Z", "author": {"login": "mhansonp"}, "path": "geode-assembly/src/distributedTest/java/org/apache/geode/session/tests/CargoTestBase.java", "diffHunk": "@@ -246,13 +250,14 @@ public void containersShouldExpireInSetTimeframe()\n \n     client.setPort(Integer.parseInt(manager.getContainerPort(0)));\n     Client.Response resp = client.set(key, value);\n-\n-    getKeyValueDataOnAllClients(key, value, resp.getSessionCookie());\n-\n-    client.setMaxInactive(1);\n-    Thread.sleep(5000);\n-\n-    verifySessionIsRemoved(key);\n+    await().untilAsserted(() -> getKeyValueDataOnAllClients(key, value, resp.getSessionCookie()));\n+    client.setMaxInactive(1); // max inactive time is 1 second. Lets wait a second.\n+    Thread.sleep(2000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyMjE5Mw=="}, "originalCommit": {"oid": "b235ee1f361aa3cc863a441828807d211ac3e5d0"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTU2NDM5OnYy", "diffSide": "RIGHT", "path": "geode-assembly/src/distributedTest/java/org/apache/geode/session/tests/CargoTestBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjoyMzowNlrOGDgByg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjozOTo1MFrOGDgqOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyMzY1OA==", "bodyText": "It should be ok as is, but I recommend making the Logger static final because that's the standard.", "url": "https://github.com/apache/geode/pull/4931#discussion_r406323658", "createdAt": "2020-04-09T16:23:06Z", "author": {"login": "kirklund"}, "path": "geode-assembly/src/distributedTest/java/org/apache/geode/session/tests/CargoTestBase.java", "diffHunk": "@@ -23,30 +25,32 @@\n import java.nio.file.Paths;\n import java.util.function.IntSupplier;\n \n+import org.apache.logging.log4j.Logger;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n import org.junit.rules.TestName;\n \n+import org.apache.geode.internal.AvailablePortHelper;\n import org.apache.geode.internal.UniquePortSupplier;\n import org.apache.geode.logging.internal.log4j.api.LogService;\n import org.apache.geode.modules.session.functions.GetMaxInactiveInterval;\n-import org.apache.geode.test.awaitility.GeodeAwaitility;\n import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n import org.apache.geode.test.dunit.rules.MemberVM;\n import org.apache.geode.test.junit.categories.SessionTest;\n \n /**\n  * Base class for test of session replication.\n- *\n+ * <p>\n  * This class contains all of the tests of session replication functionality. Subclasses of this\n  * class configure different containers in order to run these tests against specific containers.\n  */\n @Category({SessionTest.class})\n public abstract class CargoTestBase {\n   private final UniquePortSupplier portSupplier = new UniquePortSupplier();\n+  Logger logger = LogService.getLogger();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b235ee1f361aa3cc863a441828807d211ac3e5d0"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNDAwOA==", "bodyText": "yup.", "url": "https://github.com/apache/geode/pull/4931#discussion_r406334008", "createdAt": "2020-04-09T16:39:50Z", "author": {"login": "mhansonp"}, "path": "geode-assembly/src/distributedTest/java/org/apache/geode/session/tests/CargoTestBase.java", "diffHunk": "@@ -23,30 +25,32 @@\n import java.nio.file.Paths;\n import java.util.function.IntSupplier;\n \n+import org.apache.logging.log4j.Logger;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n import org.junit.rules.TestName;\n \n+import org.apache.geode.internal.AvailablePortHelper;\n import org.apache.geode.internal.UniquePortSupplier;\n import org.apache.geode.logging.internal.log4j.api.LogService;\n import org.apache.geode.modules.session.functions.GetMaxInactiveInterval;\n-import org.apache.geode.test.awaitility.GeodeAwaitility;\n import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n import org.apache.geode.test.dunit.rules.MemberVM;\n import org.apache.geode.test.junit.categories.SessionTest;\n \n /**\n  * Base class for test of session replication.\n- *\n+ * <p>\n  * This class contains all of the tests of session replication functionality. Subclasses of this\n  * class configure different containers in order to run these tests against specific containers.\n  */\n @Category({SessionTest.class})\n public abstract class CargoTestBase {\n   private final UniquePortSupplier portSupplier = new UniquePortSupplier();\n+  Logger logger = LogService.getLogger();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyMzY1OA=="}, "originalCommit": {"oid": "b235ee1f361aa3cc863a441828807d211ac3e5d0"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTU4NDI1OnYy", "diffSide": "RIGHT", "path": "geode-assembly/src/distributedTest/java/org/apache/geode/session/tests/CargoTestBase.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjoyODowOFrOGDgOKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo0MDoxNlrOGDgrUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyNjgyNA==", "bodyText": "await has a built-in sleep between each iteration, so you could delete this thread sleep as well.", "url": "https://github.com/apache/geode/pull/4931#discussion_r406326824", "createdAt": "2020-04-09T16:28:08Z", "author": {"login": "kirklund"}, "path": "geode-assembly/src/distributedTest/java/org/apache/geode/session/tests/CargoTestBase.java", "diffHunk": "@@ -246,13 +250,14 @@ public void containersShouldExpireInSetTimeframe()\n \n     client.setPort(Integer.parseInt(manager.getContainerPort(0)));\n     Client.Response resp = client.set(key, value);\n-\n-    getKeyValueDataOnAllClients(key, value, resp.getSessionCookie());\n-\n-    client.setMaxInactive(1);\n-    Thread.sleep(5000);\n-\n-    verifySessionIsRemoved(key);\n+    await().untilAsserted(() -> getKeyValueDataOnAllClients(key, value, resp.getSessionCookie()));\n+    client.setMaxInactive(1); // max inactive time is 1 second. Lets wait a second.\n+    Thread.sleep(2000);\n+\n+    await().untilAsserted(() -> {\n+      verifySessionIsRemoved(key);\n+      Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b235ee1f361aa3cc863a441828807d211ac3e5d0"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNDI4OQ==", "bodyText": "It was waiting a very small amount and setting the poll delay was not working.", "url": "https://github.com/apache/geode/pull/4931#discussion_r406334289", "createdAt": "2020-04-09T16:40:16Z", "author": {"login": "mhansonp"}, "path": "geode-assembly/src/distributedTest/java/org/apache/geode/session/tests/CargoTestBase.java", "diffHunk": "@@ -246,13 +250,14 @@ public void containersShouldExpireInSetTimeframe()\n \n     client.setPort(Integer.parseInt(manager.getContainerPort(0)));\n     Client.Response resp = client.set(key, value);\n-\n-    getKeyValueDataOnAllClients(key, value, resp.getSessionCookie());\n-\n-    client.setMaxInactive(1);\n-    Thread.sleep(5000);\n-\n-    verifySessionIsRemoved(key);\n+    await().untilAsserted(() -> getKeyValueDataOnAllClients(key, value, resp.getSessionCookie()));\n+    client.setMaxInactive(1); // max inactive time is 1 second. Lets wait a second.\n+    Thread.sleep(2000);\n+\n+    await().untilAsserted(() -> {\n+      verifySessionIsRemoved(key);\n+      Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyNjgyNA=="}, "originalCommit": {"oid": "b235ee1f361aa3cc863a441828807d211ac3e5d0"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTU5Mjc2OnYy", "diffSide": "RIGHT", "path": "geode-tcp-server/src/main/java/org/apache/geode/distributed/internal/tcpserver/AdvancedSocketCreatorImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjozMDoxMFrOGDgTNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo0MToyOFrOGDgt4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyODExOQ==", "bodyText": "This looks like debugging code that was left in. Delete it?", "url": "https://github.com/apache/geode/pull/4931#discussion_r406328119", "createdAt": "2020-04-09T16:30:10Z", "author": {"login": "kirklund"}, "path": "geode-tcp-server/src/main/java/org/apache/geode/distributed/internal/tcpserver/AdvancedSocketCreatorImpl.java", "diffHunk": "@@ -97,6 +98,9 @@ public Socket connect(HostAndPort addr, int timeout,\n       InetSocketAddress inetSocketAddress = addr.getSocketInetAddress();\n       try {\n         socket.connect(inetSocketAddress, Math.max(timeout, 0));\n+      } catch (ConnectException connectException) {\n+        LogService.getLogger().info(\"Failed to connect to \" + inetSocketAddress);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b235ee1f361aa3cc863a441828807d211ac3e5d0"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNDk0NQ==", "bodyText": "This is debugging code, but it is necessary to leave in. When running multiple workers, it is not possible to tell them apart unless you have the address thrown in. For debugging testing I put this in, but I also think that is necessary generally speaking.", "url": "https://github.com/apache/geode/pull/4931#discussion_r406334945", "createdAt": "2020-04-09T16:41:28Z", "author": {"login": "mhansonp"}, "path": "geode-tcp-server/src/main/java/org/apache/geode/distributed/internal/tcpserver/AdvancedSocketCreatorImpl.java", "diffHunk": "@@ -97,6 +98,9 @@ public Socket connect(HostAndPort addr, int timeout,\n       InetSocketAddress inetSocketAddress = addr.getSocketInetAddress();\n       try {\n         socket.connect(inetSocketAddress, Math.max(timeout, 0));\n+      } catch (ConnectException connectException) {\n+        LogService.getLogger().info(\"Failed to connect to \" + inetSocketAddress);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMyODExOQ=="}, "originalCommit": {"oid": "b235ee1f361aa3cc863a441828807d211ac3e5d0"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4291, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}