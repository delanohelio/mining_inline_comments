{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMjMyMDg5", "number": 5536, "title": "GEODE-8520: GCStatsMonitor should sum up all the GC stats to get the \u2026", "bodyText": "\u2026total GC count and GC time.", "createdAt": "2020-09-22T22:43:56Z", "url": "https://github.com/apache/geode/pull/5536", "merged": true, "mergeCommit": {"oid": "fe514398d7d64206fb792018e3a675f1d9d94e2f"}, "closed": true, "closedAt": "2020-09-24T21:51:12Z", "author": {"login": "jinmeiliao"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLf8HHgH2gAyNDkxMjMyMDg5OjZjZWUwNGIzNTk5MjBmNmUxNTIwNjllNWEwZWQ4MGQ1NWJiZWRiZTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMGBQqAFqTQ5NTg3MjEyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6cee04b359920f6e152069e5a0ed80d55bbedbe5", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/6cee04b359920f6e152069e5a0ed80d55bbedbe5", "committedDate": "2020-09-22T22:43:07Z", "message": "GEODE-8520: GCStatsMonitor should sum up all the GC stats to get the total GC count and GC time."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzOTE3Njkw", "url": "https://github.com/apache/geode/pull/5536#pullrequestreview-493917690", "createdAt": "2020-09-22T23:42:24Z", "commit": {"oid": "6cee04b359920f6e152069e5a0ed80d55bbedbe5"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMzo0MjoyNFrOHWQBbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMzo0MjoyNFrOHWQBbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5MzIzMQ==", "bodyText": "Why did we switch from getCollections and getCollectionTime to the string based approach?", "url": "https://github.com/apache/geode/pull/5536#discussion_r493093231", "createdAt": "2020-09-22T23:42:24Z", "author": {"login": "mhansonp"}, "path": "geode-core/src/test/java/org/apache/geode/management/bean/stats/MemberLevelStatsTest.java", "diffHunk": "@@ -339,6 +342,41 @@ public void testRegionCounters() {\n     assertThat(memberMBeanBridge.getTotalPrimaryBucketCount()).isZero();\n   }\n \n+  @Test\n+  public void testVMStats() {\n+    Statistics[] realStats = statisticsManager.findStatisticsByType(VMStats50.getGCType());\n+    long[] totals = modifyStatsAndReturnTotalCountAndTime(10, 2500, realStats);\n+    memberMBeanBridge.addVMStats(statSampler.getVMStats());\n+    assertThat(memberMBeanBridge.getGarbageCollectionCount()).isEqualTo(totals[0]);\n+    assertThat(memberMBeanBridge.getGarbageCollectionTime()).isEqualTo(totals[1]);\n+\n+    long[] newTotals = modifyStatsAndReturnTotalCountAndTime(20, 3500, realStats);\n+    sampleStats();\n+    assertThat(memberMBeanBridge.getGarbageCollectionCount()).isEqualTo(newTotals[0]);\n+    assertThat(memberMBeanBridge.getGarbageCollectionTime()).isEqualTo(newTotals[1]);\n+  }\n+\n+  private long[] modifyStatsAndReturnTotalCountAndTime(\n+      long baseCount, long baseTime,\n+      Statistics[] modifiedStats) {\n+    long[] totalCountAndTime = {0, 0};\n+    for (Statistics gcStat : modifiedStats) {\n+      StatisticDescriptor[] statistics = gcStat.getType().getStatistics();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cee04b359920f6e152069e5a0ed80d55bbedbe5"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0ODUyNjkw", "url": "https://github.com/apache/geode/pull/5536#pullrequestreview-494852690", "createdAt": "2020-09-23T16:43:30Z", "commit": {"oid": "6cee04b359920f6e152069e5a0ed80d55bbedbe5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjo0MzozMVrOHW3ZgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjo0MzozMVrOHW3ZgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczODM2OQ==", "bodyText": "I think you should either reference a constant instead of referencing \"collections\" and \"collectionTime\" in multiple classes or go back to using methods such as getCollections().", "url": "https://github.com/apache/geode/pull/5536#discussion_r493738369", "createdAt": "2020-09-23T16:43:31Z", "author": {"login": "kirklund"}, "path": "geode-core/src/test/java/org/apache/geode/management/bean/stats/MemberLevelStatsTest.java", "diffHunk": "@@ -339,6 +342,41 @@ public void testRegionCounters() {\n     assertThat(memberMBeanBridge.getTotalPrimaryBucketCount()).isZero();\n   }\n \n+  @Test\n+  public void testVMStats() {\n+    Statistics[] realStats = statisticsManager.findStatisticsByType(VMStats50.getGCType());\n+    long[] totals = modifyStatsAndReturnTotalCountAndTime(10, 2500, realStats);\n+    memberMBeanBridge.addVMStats(statSampler.getVMStats());\n+    assertThat(memberMBeanBridge.getGarbageCollectionCount()).isEqualTo(totals[0]);\n+    assertThat(memberMBeanBridge.getGarbageCollectionTime()).isEqualTo(totals[1]);\n+\n+    long[] newTotals = modifyStatsAndReturnTotalCountAndTime(20, 3500, realStats);\n+    sampleStats();\n+    assertThat(memberMBeanBridge.getGarbageCollectionCount()).isEqualTo(newTotals[0]);\n+    assertThat(memberMBeanBridge.getGarbageCollectionTime()).isEqualTo(newTotals[1]);\n+  }\n+\n+  private long[] modifyStatsAndReturnTotalCountAndTime(\n+      long baseCount, long baseTime,\n+      Statistics[] modifiedStats) {\n+    long[] totalCountAndTime = {0, 0};\n+    for (Statistics gcStat : modifiedStats) {\n+      StatisticDescriptor[] statistics = gcStat.getType().getStatistics();\n+      for (StatisticDescriptor d : statistics) {\n+        if (\"collections\".equals(d.getName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cee04b359920f6e152069e5a0ed80d55bbedbe5"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0ODU0MzEz", "url": "https://github.com/apache/geode/pull/5536#pullrequestreview-494854313", "createdAt": "2020-09-23T16:45:35Z", "commit": {"oid": "6cee04b359920f6e152069e5a0ed80d55bbedbe5"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjo0NTozNVrOHW3ehw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjo0NTozNVrOHW3ehw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzczOTY1NQ==", "bodyText": "Using += on a volatile field is not thread safe. I recommend changing collections and collectionTime to be AtomicLong instances. Then you can use incrementAndGet() instead of +=. Even if multiple threads do not currently invoke this method, maybe they will in the future.", "url": "https://github.com/apache/geode/pull/5536#discussion_r493739655", "createdAt": "2020-09-23T16:45:35Z", "author": {"login": "kirklund"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/beans/stats/GCStatsMonitor.java", "diffHunk": "@@ -39,69 +39,71 @@\n  * @see org.apache.geode.management.internal.beans.stats.MBeanStatsMonitor\n  */\n public class GCStatsMonitor extends MBeanStatsMonitor {\n+  // this class uses these volatile variables to make sure reads are reading the latest values\n+  // it is not using the parent's siteMap which is not volatile to keep the stats values.\n   private volatile long collections = 0;\n   private volatile long collectionTime = 0;\n \n-  long getCollections() {\n-    return collections;\n-  }\n-\n-  long getCollectionTime() {\n-    return collectionTime;\n-  }\n-\n   public GCStatsMonitor(String name) {\n     super(name);\n   }\n \n-  void decreasePrevValues(Map<String, Number> statsMap) {\n-    collections -= statsMap.getOrDefault(StatsKey.VM_GC_STATS_COLLECTIONS, 0).longValue();\n-    collectionTime -= statsMap.getOrDefault(StatsKey.VM_GC_STATS_COLLECTION_TIME, 0).longValue();\n-  }\n-\n-  void increaseStats(String name, Number value) {\n-    if (name.equals(StatsKey.VM_GC_STATS_COLLECTIONS)) {\n-      collections += value.longValue();\n-      return;\n-    }\n-\n-    if (name.equals(StatsKey.VM_GC_STATS_COLLECTION_TIME)) {\n-      collectionTime += value.longValue();\n-      return;\n+  @Override\n+  // this will be called multiple times with different collector's stats\n+  public void addStatisticsToMonitor(Statistics stats) {\n+    monitor.addListener(this);// if already listener is added this will be a no-op\n+    monitor.addStatistics(stats);\n+\n+    // stats map should keep the sum of all the GC stats\n+    StatisticDescriptor[] descriptors = stats.getType().getStatistics();\n+    for (StatisticDescriptor d : descriptors) {\n+      String name = d.getName();\n+      Number value = stats.get(d);\n+      if (name.equals(StatsKey.VM_GC_STATS_COLLECTIONS)) {\n+        collections += value.longValue();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cee04b359920f6e152069e5a0ed80d55bbedbe5"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0ODgyNzk4", "url": "https://github.com/apache/geode/pull/5536#pullrequestreview-494882798", "createdAt": "2020-09-23T17:21:35Z", "commit": {"oid": "6cee04b359920f6e152069e5a0ed80d55bbedbe5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzoyMTozNVrOHW40ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzoyNjoyNVrOHW5AYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MTcyMg==", "bodyText": "I think a notification includes only those stats whose values have changed. If that's correct, what we're summing here is only the changed GC stats, not all of the GC stats. This will work only if we're absolutely certain that every stat will change on every sample.\nSee ValueMonitor.monitorStatistics(), which builds the notification only from updated stats.\nSee SampleCollector.sample(), which adds a stats to the updated stats list only if the value of the stat changed from the previous sample.", "url": "https://github.com/apache/geode/pull/5536#discussion_r493761722", "createdAt": "2020-09-23T17:21:35Z", "author": {"login": "demery-pivotal"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/beans/stats/GCStatsMonitor.java", "diffHunk": "@@ -39,69 +39,71 @@\n  * @see org.apache.geode.management.internal.beans.stats.MBeanStatsMonitor\n  */\n public class GCStatsMonitor extends MBeanStatsMonitor {\n+  // this class uses these volatile variables to make sure reads are reading the latest values\n+  // it is not using the parent's siteMap which is not volatile to keep the stats values.\n   private volatile long collections = 0;\n   private volatile long collectionTime = 0;\n \n-  long getCollections() {\n-    return collections;\n-  }\n-\n-  long getCollectionTime() {\n-    return collectionTime;\n-  }\n-\n   public GCStatsMonitor(String name) {\n     super(name);\n   }\n \n-  void decreasePrevValues(Map<String, Number> statsMap) {\n-    collections -= statsMap.getOrDefault(StatsKey.VM_GC_STATS_COLLECTIONS, 0).longValue();\n-    collectionTime -= statsMap.getOrDefault(StatsKey.VM_GC_STATS_COLLECTION_TIME, 0).longValue();\n-  }\n-\n-  void increaseStats(String name, Number value) {\n-    if (name.equals(StatsKey.VM_GC_STATS_COLLECTIONS)) {\n-      collections += value.longValue();\n-      return;\n-    }\n-\n-    if (name.equals(StatsKey.VM_GC_STATS_COLLECTION_TIME)) {\n-      collectionTime += value.longValue();\n-      return;\n+  @Override\n+  // this will be called multiple times with different collector's stats\n+  public void addStatisticsToMonitor(Statistics stats) {\n+    monitor.addListener(this);// if already listener is added this will be a no-op\n+    monitor.addStatistics(stats);\n+\n+    // stats map should keep the sum of all the GC stats\n+    StatisticDescriptor[] descriptors = stats.getType().getStatistics();\n+    for (StatisticDescriptor d : descriptors) {\n+      String name = d.getName();\n+      Number value = stats.get(d);\n+      if (name.equals(StatsKey.VM_GC_STATS_COLLECTIONS)) {\n+        collections += value.longValue();\n+      } else if (name.equals(StatsKey.VM_GC_STATS_COLLECTION_TIME)) {\n+        collectionTime += value.longValue();\n+      }\n     }\n   }\n \n   @Override\n   public Number getStatistic(String statName) {\n     if (statName.equals(StatsKey.VM_GC_STATS_COLLECTIONS)) {\n-      return getCollections();\n+      return collections;\n     }\n \n     if (statName.equals(StatsKey.VM_GC_STATS_COLLECTION_TIME)) {\n-      return getCollectionTime();\n+      return collectionTime;\n     }\n-\n     return 0;\n   }\n \n   @Override\n   public void handleNotification(StatisticsNotification notification) {\n-    decreasePrevValues(statsMap);\n-\n+    // sum up all the count and all the time in the stats included in this notification\n+    long totalCount = 0;\n+    long totalTime = 0;\n     for (StatisticId statId : notification) {\n       StatisticDescriptor descriptor = statId.getStatisticDescriptor();\n       String name = descriptor.getName();\n       Number value;\n-\n       try {\n         value = notification.getValue(statId);\n       } catch (StatisticNotFoundException e) {\n         value = 0;\n       }\n-\n       log(name, value);\n-      increaseStats(name, value);\n-      statsMap.put(name, value);\n+      if (name.equals(StatsKey.VM_GC_STATS_COLLECTIONS)) {\n+        totalCount += value.longValue();\n+      }\n+\n+      else if (name.equals(StatsKey.VM_GC_STATS_COLLECTION_TIME)) {\n+        totalTime += value.longValue();\n+      }\n     }\n+\n+    collections = totalCount;\n+    collectionTime = totalTime;\n   }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cee04b359920f6e152069e5a0ed80d55bbedbe5"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2NDcwNw==", "bodyText": "Please write unit tests for GCSTatsMonitor directly, rather than testing only through MemberLevelStatsTest.", "url": "https://github.com/apache/geode/pull/5536#discussion_r493764707", "createdAt": "2020-09-23T17:26:25Z", "author": {"login": "demery-pivotal"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/beans/stats/GCStatsMonitor.java", "diffHunk": "@@ -39,69 +39,71 @@\n  * @see org.apache.geode.management.internal.beans.stats.MBeanStatsMonitor\n  */\n public class GCStatsMonitor extends MBeanStatsMonitor {\n+  // this class uses these volatile variables to make sure reads are reading the latest values\n+  // it is not using the parent's siteMap which is not volatile to keep the stats values.\n   private volatile long collections = 0;\n   private volatile long collectionTime = 0;\n \n-  long getCollections() {\n-    return collections;\n-  }\n-\n-  long getCollectionTime() {\n-    return collectionTime;\n-  }\n-\n   public GCStatsMonitor(String name) {\n     super(name);\n   }\n \n-  void decreasePrevValues(Map<String, Number> statsMap) {\n-    collections -= statsMap.getOrDefault(StatsKey.VM_GC_STATS_COLLECTIONS, 0).longValue();\n-    collectionTime -= statsMap.getOrDefault(StatsKey.VM_GC_STATS_COLLECTION_TIME, 0).longValue();\n-  }\n-\n-  void increaseStats(String name, Number value) {\n-    if (name.equals(StatsKey.VM_GC_STATS_COLLECTIONS)) {\n-      collections += value.longValue();\n-      return;\n-    }\n-\n-    if (name.equals(StatsKey.VM_GC_STATS_COLLECTION_TIME)) {\n-      collectionTime += value.longValue();\n-      return;\n+  @Override\n+  // this will be called multiple times with different collector's stats\n+  public void addStatisticsToMonitor(Statistics stats) {\n+    monitor.addListener(this);// if already listener is added this will be a no-op\n+    monitor.addStatistics(stats);\n+\n+    // stats map should keep the sum of all the GC stats\n+    StatisticDescriptor[] descriptors = stats.getType().getStatistics();\n+    for (StatisticDescriptor d : descriptors) {\n+      String name = d.getName();\n+      Number value = stats.get(d);\n+      if (name.equals(StatsKey.VM_GC_STATS_COLLECTIONS)) {\n+        collections += value.longValue();\n+      } else if (name.equals(StatsKey.VM_GC_STATS_COLLECTION_TIME)) {\n+        collectionTime += value.longValue();\n+      }\n     }\n   }\n \n   @Override\n   public Number getStatistic(String statName) {\n     if (statName.equals(StatsKey.VM_GC_STATS_COLLECTIONS)) {\n-      return getCollections();\n+      return collections;\n     }\n \n     if (statName.equals(StatsKey.VM_GC_STATS_COLLECTION_TIME)) {\n-      return getCollectionTime();\n+      return collectionTime;\n     }\n-\n     return 0;\n   }\n \n   @Override\n   public void handleNotification(StatisticsNotification notification) {\n-    decreasePrevValues(statsMap);\n-\n+    // sum up all the count and all the time in the stats included in this notification\n+    long totalCount = 0;\n+    long totalTime = 0;\n     for (StatisticId statId : notification) {\n       StatisticDescriptor descriptor = statId.getStatisticDescriptor();\n       String name = descriptor.getName();\n       Number value;\n-\n       try {\n         value = notification.getValue(statId);\n       } catch (StatisticNotFoundException e) {\n         value = 0;\n       }\n-\n       log(name, value);\n-      increaseStats(name, value);\n-      statsMap.put(name, value);\n+      if (name.equals(StatsKey.VM_GC_STATS_COLLECTIONS)) {\n+        totalCount += value.longValue();\n+      }\n+\n+      else if (name.equals(StatsKey.VM_GC_STATS_COLLECTION_TIME)) {\n+        totalTime += value.longValue();\n+      }\n     }\n+\n+    collections = totalCount;\n+    collectionTime = totalTime;\n   }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc2MTcyMg=="}, "originalCommit": {"oid": "6cee04b359920f6e152069e5a0ed80d55bbedbe5"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0OTk5MTMw", "url": "https://github.com/apache/geode/pull/5536#pullrequestreview-494999130", "createdAt": "2020-09-23T19:53:42Z", "commit": {"oid": "6cee04b359920f6e152069e5a0ed80d55bbedbe5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTo1Mzo0MlrOHW-ntA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOTo1Mzo0MlrOHW-ntA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzg1NjY5Mg==", "bodyText": "The addStatisticsToMonitor method ignores the descriptors other than VM_GC_STATS_COLLECTIONS and VM_GC_STATS_COLLECTION_TIME. Can we guarantee that there is no other descriptor?", "url": "https://github.com/apache/geode/pull/5536#discussion_r493856692", "createdAt": "2020-09-23T19:53:42Z", "author": {"login": "jchen21"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/beans/stats/GCStatsMonitor.java", "diffHunk": "@@ -39,69 +39,71 @@\n  * @see org.apache.geode.management.internal.beans.stats.MBeanStatsMonitor\n  */\n public class GCStatsMonitor extends MBeanStatsMonitor {\n+  // this class uses these volatile variables to make sure reads are reading the latest values\n+  // it is not using the parent's siteMap which is not volatile to keep the stats values.\n   private volatile long collections = 0;\n   private volatile long collectionTime = 0;\n \n-  long getCollections() {\n-    return collections;\n-  }\n-\n-  long getCollectionTime() {\n-    return collectionTime;\n-  }\n-\n   public GCStatsMonitor(String name) {\n     super(name);\n   }\n \n-  void decreasePrevValues(Map<String, Number> statsMap) {\n-    collections -= statsMap.getOrDefault(StatsKey.VM_GC_STATS_COLLECTIONS, 0).longValue();\n-    collectionTime -= statsMap.getOrDefault(StatsKey.VM_GC_STATS_COLLECTION_TIME, 0).longValue();\n-  }\n-\n-  void increaseStats(String name, Number value) {\n-    if (name.equals(StatsKey.VM_GC_STATS_COLLECTIONS)) {\n-      collections += value.longValue();\n-      return;\n-    }\n-\n-    if (name.equals(StatsKey.VM_GC_STATS_COLLECTION_TIME)) {\n-      collectionTime += value.longValue();\n-      return;\n+  @Override\n+  // this will be called multiple times with different collector's stats\n+  public void addStatisticsToMonitor(Statistics stats) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cee04b359920f6e152069e5a0ed80d55bbedbe5"}, "originalPosition": 48}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90154e662daa1d58ae2023c36d129e4b6de25fb6", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/90154e662daa1d58ae2023c36d129e4b6de25fb6", "committedDate": "2020-09-23T23:53:19Z", "message": "change the implementation of GCStatsMonitor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NzQzNDgz", "url": "https://github.com/apache/geode/pull/5536#pullrequestreview-495743483", "createdAt": "2020-09-24T16:22:13Z", "commit": {"oid": "90154e662daa1d58ae2023c36d129e4b6de25fb6"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoyMjoxM1rOHXixkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNjoyMjoxM1rOHXixkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ0OTA0MA==", "bodyText": "This way of specifying return values unnecessarily couples the test to the current implementation\u2014it insists that the implementation must call stats.get(sd) this many times, and in this specific order.\nOn this line and the two later ones, it would be better to associate each value with the appropriate statistic descriptor, the way the other test does.", "url": "https://github.com/apache/geode/pull/5536#discussion_r494449040", "createdAt": "2020-09-24T16:22:13Z", "author": {"login": "demery-pivotal"}, "path": "geode-core/src/test/java/org/apache/geode/management/internal/beans/stats/GCStatsMonitorTest.java", "diffHunk": "@@ -33,16 +45,94 @@\n \n   @Before\n   public void setUp() {\n-    gcStatsMonitor = new GCStatsMonitor(testName.getMethodName());\n+    ValueMonitor valueMonitor = mock(ValueMonitor.class);\n+    gcStatsMonitor = new GCStatsMonitor(testName.getMethodName(), valueMonitor);\n+\n     assertThat(gcStatsMonitor).isNotNull();\n-    assertThat(gcStatsMonitor.getStatistic(\"collections\")).isEqualTo(0L);\n-    assertThat(gcStatsMonitor.getStatistic(\"collectionTime\")).isEqualTo(0L);\n+    assertThat(gcStatsMonitor.getCollections()).isEqualTo(0L);\n+    assertThat(gcStatsMonitor.getCollectionTime()).isEqualTo(0L);\n   }\n \n   @Test\n   public void getStatisticShouldReturnZeroForUnknownStatistics() {\n     assertThat(gcStatsMonitor.getStatistic(\"unknownStatistic\")).isEqualTo(0);\n   }\n \n+  @Test\n+  public void addStatsToMonitor() throws Exception {\n+    Statistics stats = mock(Statistics.class);\n+    when(stats.getUniqueId()).thenReturn(11L);\n+    StatisticDescriptor d1 = mock(StatisticDescriptor.class);\n+    when(d1.getName()).thenReturn(StatsKey.VM_GC_STATS_COLLECTIONS);\n+    StatisticDescriptor d2 = mock(StatisticDescriptor.class);\n+    when(d2.getName()).thenReturn(StatsKey.VM_GC_STATS_COLLECTION_TIME);\n+    StatisticDescriptor[] descriptors = {d1, d2};\n+    StatisticsType type = mock(StatisticsType.class);\n+    when(stats.getType()).thenReturn(type);\n+    when(type.getStatistics()).thenReturn(descriptors);\n+\n+    when(stats.get(any(StatisticDescriptor.class))).thenReturn(8L, 300L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90154e662daa1d58ae2023c36d129e4b6de25fb6"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NzQ1Njc2", "url": "https://github.com/apache/geode/pull/5536#pullrequestreview-495745676", "createdAt": "2020-09-24T16:24:59Z", "commit": {"oid": "90154e662daa1d58ae2023c36d129e4b6de25fb6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1ODcyMTI1", "url": "https://github.com/apache/geode/pull/5536#pullrequestreview-495872125", "createdAt": "2020-09-24T19:05:08Z", "commit": {"oid": "90154e662daa1d58ae2023c36d129e4b6de25fb6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4227, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}