{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1ODU5Mzc0", "number": 5262, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDoxNDoxM1rOEGXn7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDoxNzowOVrOEGXs9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTEzOTY1OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/key/ExpireAtExecutorJUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDoxNDoxM1rOGlHyqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTowMzowMVrOGlKFOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3ODE1NQ==", "bodyText": "Can this be a assertThatThrownBy assertion?", "url": "https://github.com/apache/geode/pull/5262#discussion_r441578155", "createdAt": "2020-06-17T14:14:13Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/key/ExpireAtExecutorJUnitTest.java", "diffHunk": "@@ -34,30 +37,30 @@\n \n   @Test\n   public void calledWithTooFewCommandArguments_returnsError() {\n-    List<byte[]> commandsAsBytesWithTooFewArguments = new ArrayList<>();\n-    commandsAsBytesWithTooFewArguments.add(\"EXPIREAT\".getBytes());\n-    commandsAsBytesWithTooFewArguments.add(\"key\".getBytes());\n-    Command command = new Command(commandsAsBytesWithTooFewArguments);\n+    List<byte[]> commandAsBytes = new ArrayList<>();\n+    commandAsBytes.add(\"EXPIREAT\".getBytes());\n+    commandAsBytes.add(\"key\".getBytes());\n+    Command command = new Command(commandAsBytes);\n \n-    RedisResponse response =\n-        new ExpireAtExecutor().executeCommand(command, mockContext());\n+    Throwable thrown = catchThrowable(() -> command.execute(mockContext()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a12a40eff6dd4a1ea5c6cc2de2cf6be18b501a9"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYxNTY3NA==", "bodyText": "yeah! good catch.", "url": "https://github.com/apache/geode/pull/5262#discussion_r441615674", "createdAt": "2020-06-17T15:03:01Z", "author": {"login": "sabbey37"}, "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/key/ExpireAtExecutorJUnitTest.java", "diffHunk": "@@ -34,30 +37,30 @@\n \n   @Test\n   public void calledWithTooFewCommandArguments_returnsError() {\n-    List<byte[]> commandsAsBytesWithTooFewArguments = new ArrayList<>();\n-    commandsAsBytesWithTooFewArguments.add(\"EXPIREAT\".getBytes());\n-    commandsAsBytesWithTooFewArguments.add(\"key\".getBytes());\n-    Command command = new Command(commandsAsBytesWithTooFewArguments);\n+    List<byte[]> commandAsBytes = new ArrayList<>();\n+    commandAsBytes.add(\"EXPIREAT\".getBytes());\n+    commandAsBytes.add(\"key\".getBytes());\n+    Command command = new Command(commandAsBytes);\n \n-    RedisResponse response =\n-        new ExpireAtExecutor().executeCommand(command, mockContext());\n+    Throwable thrown = catchThrowable(() -> command.execute(mockContext()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3ODE1NQ=="}, "originalCommit": {"oid": "0a12a40eff6dd4a1ea5c6cc2de2cf6be18b501a9"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTE0NzMxOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/key/ExpireAtExecutorJUnitTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDoxNTo1NFrOGlH3kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNTowMzoyM1rOGlKGXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3OTQxMA==", "bodyText": "Maybe the same thing, but at least for consistency, assertThat should come from the org.assertj.core.api.Assertions package.", "url": "https://github.com/apache/geode/pull/5262#discussion_r441579410", "createdAt": "2020-06-17T14:15:54Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/key/ExpireAtExecutorJUnitTest.java", "diffHunk": "@@ -34,30 +37,30 @@\n \n   @Test\n   public void calledWithTooFewCommandArguments_returnsError() {\n-    List<byte[]> commandsAsBytesWithTooFewArguments = new ArrayList<>();\n-    commandsAsBytesWithTooFewArguments.add(\"EXPIREAT\".getBytes());\n-    commandsAsBytesWithTooFewArguments.add(\"key\".getBytes());\n-    Command command = new Command(commandsAsBytesWithTooFewArguments);\n+    List<byte[]> commandAsBytes = new ArrayList<>();\n+    commandAsBytes.add(\"EXPIREAT\".getBytes());\n+    commandAsBytes.add(\"key\".getBytes());\n+    Command command = new Command(commandAsBytes);\n \n-    RedisResponse response =\n-        new ExpireAtExecutor().executeCommand(command, mockContext());\n+    Throwable thrown = catchThrowable(() -> command.execute(mockContext()));\n \n-    assertThat(response.toString()).startsWith(\"-ERR The wrong number of arguments\");\n+    AssertionsForClassTypes.assertThat(thrown).hasMessageContaining(\"wrong number of arguments\");\n+    AssertionsForClassTypes.assertThat(thrown).isInstanceOf(RedisParametersMismatchException.class);\n   }\n \n   @Test\n   public void calledWithTooManyCommandArguments_returnsError() {\n-    List<byte[]> commandsAsBytesWithTooFewArguments = new ArrayList<>();\n-    commandsAsBytesWithTooFewArguments.add(\"EXPIREAT\".getBytes());\n-    commandsAsBytesWithTooFewArguments.add(\"key\".getBytes());\n-    commandsAsBytesWithTooFewArguments.add(\"1\".getBytes());\n-    commandsAsBytesWithTooFewArguments.add(\"extra-argument\".getBytes());\n-    Command command = new Command(commandsAsBytesWithTooFewArguments);\n+    List<byte[]> commandsAsBytes = new ArrayList<>();\n+    commandsAsBytes.add(\"EXPIREAT\".getBytes());\n+    commandsAsBytes.add(\"key\".getBytes());\n+    commandsAsBytes.add(\"1\".getBytes());\n+    commandsAsBytes.add(\"extra-argument\".getBytes());\n+    Command command = new Command(commandsAsBytes);\n \n-    RedisResponse response =\n-        new ExpireAtExecutor().executeCommand(command, mockContext());\n+    Throwable thrown = catchThrowable(() -> command.execute(mockContext()));\n \n-    assertThat(response.toString()).startsWith(\"-ERR The wrong number of arguments\");\n+    AssertionsForClassTypes.assertThat(thrown).hasMessageContaining(\"wrong number of arguments\");\n+    AssertionsForClassTypes.assertThat(thrown).isInstanceOf(RedisParametersMismatchException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a12a40eff6dd4a1ea5c6cc2de2cf6be18b501a9"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYxNTk2NA==", "bodyText": "Definitely. Editing those now.", "url": "https://github.com/apache/geode/pull/5262#discussion_r441615964", "createdAt": "2020-06-17T15:03:23Z", "author": {"login": "sabbey37"}, "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/key/ExpireAtExecutorJUnitTest.java", "diffHunk": "@@ -34,30 +37,30 @@\n \n   @Test\n   public void calledWithTooFewCommandArguments_returnsError() {\n-    List<byte[]> commandsAsBytesWithTooFewArguments = new ArrayList<>();\n-    commandsAsBytesWithTooFewArguments.add(\"EXPIREAT\".getBytes());\n-    commandsAsBytesWithTooFewArguments.add(\"key\".getBytes());\n-    Command command = new Command(commandsAsBytesWithTooFewArguments);\n+    List<byte[]> commandAsBytes = new ArrayList<>();\n+    commandAsBytes.add(\"EXPIREAT\".getBytes());\n+    commandAsBytes.add(\"key\".getBytes());\n+    Command command = new Command(commandAsBytes);\n \n-    RedisResponse response =\n-        new ExpireAtExecutor().executeCommand(command, mockContext());\n+    Throwable thrown = catchThrowable(() -> command.execute(mockContext()));\n \n-    assertThat(response.toString()).startsWith(\"-ERR The wrong number of arguments\");\n+    AssertionsForClassTypes.assertThat(thrown).hasMessageContaining(\"wrong number of arguments\");\n+    AssertionsForClassTypes.assertThat(thrown).isInstanceOf(RedisParametersMismatchException.class);\n   }\n \n   @Test\n   public void calledWithTooManyCommandArguments_returnsError() {\n-    List<byte[]> commandsAsBytesWithTooFewArguments = new ArrayList<>();\n-    commandsAsBytesWithTooFewArguments.add(\"EXPIREAT\".getBytes());\n-    commandsAsBytesWithTooFewArguments.add(\"key\".getBytes());\n-    commandsAsBytesWithTooFewArguments.add(\"1\".getBytes());\n-    commandsAsBytesWithTooFewArguments.add(\"extra-argument\".getBytes());\n-    Command command = new Command(commandsAsBytesWithTooFewArguments);\n+    List<byte[]> commandsAsBytes = new ArrayList<>();\n+    commandsAsBytes.add(\"EXPIREAT\".getBytes());\n+    commandsAsBytes.add(\"key\".getBytes());\n+    commandsAsBytes.add(\"1\".getBytes());\n+    commandsAsBytes.add(\"extra-argument\".getBytes());\n+    Command command = new Command(commandsAsBytes);\n \n-    RedisResponse response =\n-        new ExpireAtExecutor().executeCommand(command, mockContext());\n+    Throwable thrown = catchThrowable(() -> command.execute(mockContext()));\n \n-    assertThat(response.toString()).startsWith(\"-ERR The wrong number of arguments\");\n+    AssertionsForClassTypes.assertThat(thrown).hasMessageContaining(\"wrong number of arguments\");\n+    AssertionsForClassTypes.assertThat(thrown).isInstanceOf(RedisParametersMismatchException.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3OTQxMA=="}, "originalCommit": {"oid": "0a12a40eff6dd4a1ea5c6cc2de2cf6be18b501a9"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTE1MDkwOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/key/ExpireExecutorJUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDoxNjo0N1rOGlH58Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDoxNjo0N1rOGlH58Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU4MDAxNw==", "bodyText": "Ditto previous comment.", "url": "https://github.com/apache/geode/pull/5262#discussion_r441580017", "createdAt": "2020-06-17T14:16:47Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/key/ExpireExecutorJUnitTest.java", "diffHunk": "@@ -35,42 +37,41 @@\n \n   @Test\n   public void calledWithTooFewCommandArguments_returnsError() {\n-    Executor executor = new ExpireExecutor();\n-    List<byte[]> commandsAsBytesWithTooFewArguments = new ArrayList<>();\n-    commandsAsBytesWithTooFewArguments.add(\"EXPIRE\".getBytes());\n-    commandsAsBytesWithTooFewArguments.add(\"key\".getBytes());\n+    List<byte[]> commandsAsBytes = new ArrayList<>();\n+    commandsAsBytes.add(\"EXPIRE\".getBytes());\n+    commandsAsBytes.add(\"key\".getBytes());\n+    Command command = new Command(commandsAsBytes);\n \n-    Command command = new Command(commandsAsBytesWithTooFewArguments);\n-    RedisResponse response = executor.executeCommand(command, mockContext());\n+    Throwable thrown = catchThrowable(() -> command.execute(mockContext()));\n \n-    assertThat(response.toString()).startsWith(\"-ERR The wrong number of arguments\");\n+    AssertionsForClassTypes.assertThat(thrown).hasMessageContaining(\"wrong number of arguments\");\n+    AssertionsForClassTypes.assertThat(thrown).isInstanceOf(RedisParametersMismatchException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a12a40eff6dd4a1ea5c6cc2de2cf6be18b501a9"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTE1MjUzOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/key/KeysExecutorJUnitTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDoxNzowOVrOGlH7Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDoxNzowOVrOGlH7Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU4MDI5OQ==", "bodyText": "Ditto previous comment", "url": "https://github.com/apache/geode/pull/5262#discussion_r441580299", "createdAt": "2020-06-17T14:17:09Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/test/java/org/apache/geode/redis/internal/executor/key/KeysExecutorJUnitTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.redis.internal.executor.key;\n+\n+import static org.assertj.core.api.AssertionsForClassTypes.catchThrowable;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.netty.buffer.UnpooledByteBufAllocator;\n+import org.assertj.core.api.AssertionsForClassTypes;\n+import org.junit.Test;\n+\n+import org.apache.geode.redis.internal.ParameterRequirements.RedisParametersMismatchException;\n+import org.apache.geode.redis.internal.netty.Command;\n+import org.apache.geode.redis.internal.netty.ExecutionHandlerContext;\n+\n+\n+public class KeysExecutorJUnitTest {\n+\n+  @Test\n+  public void calledWithTooFewOptions_returnsError() {\n+    List<byte[]> commandsAsBytes = new ArrayList<>();\n+    commandsAsBytes.add(\"KEYS\".getBytes());\n+    Command command = new Command(commandsAsBytes);\n+\n+    Throwable thrown = catchThrowable(() -> command.execute(mockContext()));\n+\n+    AssertionsForClassTypes.assertThat(thrown).hasMessageContaining(\"wrong number of arguments\");\n+    AssertionsForClassTypes.assertThat(thrown).isInstanceOf(RedisParametersMismatchException.class);\n+  }\n+\n+  @Test\n+  public void calledWithTooManyOptions_returnsError() {\n+    List<byte[]> commandsAsBytes = new ArrayList<>();\n+    commandsAsBytes.add(\"KEYS\".getBytes());\n+    commandsAsBytes.add(\"*\".getBytes());\n+    commandsAsBytes.add(\"**\".getBytes());\n+    Command command = new Command(commandsAsBytes);\n+\n+    Throwable thrown = catchThrowable(() -> command.execute(mockContext()));\n+\n+    AssertionsForClassTypes.assertThat(thrown).hasMessageContaining(\"wrong number of arguments\");\n+    AssertionsForClassTypes.assertThat(thrown).isInstanceOf(RedisParametersMismatchException.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a12a40eff6dd4a1ea5c6cc2de2cf6be18b501a9"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4012, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}