{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5MzczODk4", "number": 5601, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDowNjowN1rOErxZtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozODowOVrOEw72Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzMzNjIwOnYy", "diffSide": "RIGHT", "path": "geode-junit/src/main/java/org/apache/geode/test/util/ClassScanner.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMDowNjowN1rOHeujXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoxMDoyOVrOHgIjlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4MjA0Ng==", "bodyText": "Is this possibly missing running concrete classes that also have subclasses? Like someone extended a real test with more subclasses?", "url": "https://github.com/apache/geode/pull/5601#discussion_r501982046", "createdAt": "2020-10-08T20:06:07Z", "author": {"login": "upthewaterspout"}, "path": "geode-junit/src/main/java/org/apache/geode/test/util/ClassScanner.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.test.util;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import io.github.classgraph.ClassGraph;\n+import io.github.classgraph.ClassInfo;\n+import io.github.classgraph.ScanResult;\n+\n+/**\n+ * This class is intended as a helper to the CI StressNewTest job.\n+ */\n+public class ClassScanner {\n+\n+  private ScanResult scanResult;\n+  private String packageToScan;\n+\n+  public ClassScanner(String packageToScan) {\n+    this.packageToScan = packageToScan;\n+    scanResult = new ClassGraph().whitelistPackages(packageToScan)\n+        .enableClassInfo()\n+        .enableAnnotationInfo().scan();\n+  }\n+\n+  public List<String> whatExtends(String classOrFile) {\n+    Set<String> classesToConsider = new HashSet<>();\n+    classesToConsider.add(pathToClass(classOrFile));\n+\n+    if (!classOrFile.contains(\".\")) {\n+      classesToConsider.addAll(fullyQualifyClass(classOrFile));\n+    }\n+\n+    return classesToConsider.stream()\n+        .flatMap(x -> scanResult.getSubclasses(x).stream().map(ClassInfo::getSimpleName))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e1a5793cbbe281547ed24963bcaf5074cb7067"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ1NjY2MA==", "bodyText": "In that case the selected subclass would end up executing tests in the super. A test could be missed if the subclass overrides a test in the super.", "url": "https://github.com/apache/geode/pull/5601#discussion_r503456660", "createdAt": "2020-10-12T18:10:29Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-junit/src/main/java/org/apache/geode/test/util/ClassScanner.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.test.util;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import io.github.classgraph.ClassGraph;\n+import io.github.classgraph.ClassInfo;\n+import io.github.classgraph.ScanResult;\n+\n+/**\n+ * This class is intended as a helper to the CI StressNewTest job.\n+ */\n+public class ClassScanner {\n+\n+  private ScanResult scanResult;\n+  private String packageToScan;\n+\n+  public ClassScanner(String packageToScan) {\n+    this.packageToScan = packageToScan;\n+    scanResult = new ClassGraph().whitelistPackages(packageToScan)\n+        .enableClassInfo()\n+        .enableAnnotationInfo().scan();\n+  }\n+\n+  public List<String> whatExtends(String classOrFile) {\n+    Set<String> classesToConsider = new HashSet<>();\n+    classesToConsider.add(pathToClass(classOrFile));\n+\n+    if (!classOrFile.contains(\".\")) {\n+      classesToConsider.addAll(fullyQualifyClass(classOrFile));\n+    }\n+\n+    return classesToConsider.stream()\n+        .flatMap(x -> scanResult.getSubclasses(x).stream().map(ClassInfo::getSimpleName))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk4MjA0Ng=="}, "originalCommit": {"oid": "55e1a5793cbbe281547ed24963bcaf5074cb7067"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MzU5OTA2OnYy", "diffSide": "RIGHT", "path": "ci/scripts/repeat-new-tests.sh", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQyMToyODozOFrOHexDdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxODoxMTo1MVrOHgImLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyMzAzMQ==", "bodyText": "What is the behavior if devBuild has not been run first?", "url": "https://github.com/apache/geode/pull/5601#discussion_r502023031", "createdAt": "2020-10-08T21:28:38Z", "author": {"login": "rhoughton-pivot"}, "path": "ci/scripts/repeat-new-tests.sh", "diffHunk": "@@ -46,26 +46,56 @@ function changes_for_path() {\n   popd >> /dev/null\n }\n \n-UNIT_TEST_CHANGES=$(changes_for_path '*/src/test/java') || exit $?\n-INTEGRATION_TEST_CHANGES=$(changes_for_path '*/src/integrationTest/java') || exit $?\n-DISTRIBUTED_TEST_CHANGES=$(changes_for_path '*/src/distributedTest/java') || exit $?\n-ACCEPTANCE_TEST_CHANGES=$(changes_for_path '*/src/acceptanceTest/java') || exit $?\n-UPGRADE_TEST_CHANGES=$(changes_for_path '*/src/upgradeTest/java') || exit $?\n+function save_classpath() {\n+  echo \"Building and saving classpath\"\n+  pushd geode >> /dev/null\n+    # Do this twice since devBuild still dumps a warning string to stdout.\n+    ./gradlew --console=plain -q devBuild 2>/dev/null\n+    ./gradlew --console=plain -q printTestClasspath 2>/dev/null >/tmp/classpath.txt", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55e1a5793cbbe281547ed24963bcaf5074cb7067"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQ1NzMyNQ==", "bodyText": "No code is compiled which is needed for the subsequent StressNewTestHelper to be executed.", "url": "https://github.com/apache/geode/pull/5601#discussion_r503457325", "createdAt": "2020-10-12T18:11:51Z", "author": {"login": "jdeppe-pivotal"}, "path": "ci/scripts/repeat-new-tests.sh", "diffHunk": "@@ -46,26 +46,56 @@ function changes_for_path() {\n   popd >> /dev/null\n }\n \n-UNIT_TEST_CHANGES=$(changes_for_path '*/src/test/java') || exit $?\n-INTEGRATION_TEST_CHANGES=$(changes_for_path '*/src/integrationTest/java') || exit $?\n-DISTRIBUTED_TEST_CHANGES=$(changes_for_path '*/src/distributedTest/java') || exit $?\n-ACCEPTANCE_TEST_CHANGES=$(changes_for_path '*/src/acceptanceTest/java') || exit $?\n-UPGRADE_TEST_CHANGES=$(changes_for_path '*/src/upgradeTest/java') || exit $?\n+function save_classpath() {\n+  echo \"Building and saving classpath\"\n+  pushd geode >> /dev/null\n+    # Do this twice since devBuild still dumps a warning string to stdout.\n+    ./gradlew --console=plain -q devBuild 2>/dev/null\n+    ./gradlew --console=plain -q printTestClasspath 2>/dev/null >/tmp/classpath.txt", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjAyMzAzMQ=="}, "originalCommit": {"oid": "55e1a5793cbbe281547ed24963bcaf5074cb7067"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5NzQ3NTkxOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/pubsub/AbstractPubSubIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDozODowOVrOHmy6ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQyMDo0NDozMVrOHmzHFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MjA5MA==", "bodyText": "was this intended to be left in?", "url": "https://github.com/apache/geode/pull/5601#discussion_r510442090", "createdAt": "2020-10-22T20:38:09Z", "author": {"login": "onichols-pivotal"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/pubsub/AbstractPubSubIntegrationTest.java", "diffHunk": "@@ -51,6 +51,7 @@\n import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n \n public abstract class AbstractPubSubIntegrationTest implements RedisPortSupplier {\n+  /* Trigger a stress test run */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2f3e8fffb8dd57cc8ec0efbfc5aefbdd82b26d9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0NTMzMw==", "bodyText": "Thanks for pointing that out - I'll remove it.", "url": "https://github.com/apache/geode/pull/5601#discussion_r510445333", "createdAt": "2020-10-22T20:44:31Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/internal/executor/pubsub/AbstractPubSubIntegrationTest.java", "diffHunk": "@@ -51,6 +51,7 @@\n import org.apache.geode.test.junit.rules.ExecutorServiceRule;\n \n public abstract class AbstractPubSubIntegrationTest implements RedisPortSupplier {\n+  /* Trigger a stress test run */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDQ0MjA5MA=="}, "originalCommit": {"oid": "c2f3e8fffb8dd57cc8ec0efbfc5aefbdd82b26d9"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4684, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}