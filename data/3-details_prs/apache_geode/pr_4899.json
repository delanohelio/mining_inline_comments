{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3NzgyODgw", "number": 4899, "title": "GEODE-7945: Replace Map with ConcurrentMap for GemFireCacheImpl.rootRegions", "bodyText": "Authored-by: Jianxia Chen jchen21@apache.org\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-04-02T19:49:35Z", "url": "https://github.com/apache/geode/pull/4899", "merged": true, "mergeCommit": {"oid": "37e2d982f6de16615fa62708ab4f104b402a688a"}, "closed": true, "closedAt": "2020-04-09T00:07:52Z", "author": {"login": "jchen21"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcTxugFgH2gAyMzk3NzgyODgwOmRhNGMzNmM3YjQ3MGJkMThhNTBhMjQ2ZjQ3MDQ5ZGRiY2Q0ZGY1OTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcVwxb-AH2gAyMzk3NzgyODgwOjQxNzAxNWMzOTdhMzQ5NmNhYWU0NWRlNjBjMDRiM2U5ZmY5OGUxNDY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "da4c36c7b470bd18a50a246f47049ddbcd4df595", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/da4c36c7b470bd18a50a246f47049ddbcd4df595", "committedDate": "2020-04-02T19:46:47Z", "message": "GEODE-7945: Replace Map with ConcurrentMap for GemFireCacheImpl.rootRegions\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg2NzgyOTU4", "url": "https://github.com/apache/geode/pull/4899#pullrequestreview-386782958", "createdAt": "2020-04-02T21:17:22Z", "commit": {"oid": "da4c36c7b470bd18a50a246f47049ddbcd4df595"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMToxNzoyM1rOF_81Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQyMToyNDozNlrOF_9DVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwMTMxMQ==", "bodyText": "This code no longer looks correct. The synchronization made this thread safe.\nWithout the sync you need to just call a method on rootRegions once.\nI think you just want to do this: return rootRegions.remove(regionName, rootRgn);", "url": "https://github.com/apache/geode/pull/4899#discussion_r402601311", "createdAt": "2020-04-02T21:17:23Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/GemFireCacheImpl.java", "diffHunk": "@@ -3438,16 +3436,16 @@ public boolean getCopyOnRead() {\n \n   @Override\n   public boolean removeRoot(InternalRegion rootRgn) {\n-    synchronized (rootRegions) {\n-      String regionName = rootRgn.getName();\n-      InternalRegion found = rootRegions.get(regionName);\n-      if (found == rootRgn) {\n-        InternalRegion previous = rootRegions.remove(regionName);\n-        Assert.assertTrue(previous == rootRgn);\n-        return true;\n-      }\n-      return false;\n+\n+    String regionName = rootRgn.getName();\n+    InternalRegion found = rootRegions.get(regionName);\n+    if (found == rootRgn) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da4c36c7b470bd18a50a246f47049ddbcd4df595"}, "originalPosition": 322}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwMzI2NA==", "bodyText": "This does not look thread safe. Instead of calling get and then remove you need a single call.\nHere I think you want: rootRegions.remove(name, region);", "url": "https://github.com/apache/geode/pull/4899#discussion_r402603264", "createdAt": "2020-04-02T21:21:17Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/GemFireCacheImpl.java", "diffHunk": "@@ -2997,12 +2995,12 @@ public void validatePoolFactory(PoolFactory poolFactory) {\n           } finally {\n             // clean up if initialize fails for any reason\n             setRegionByPath(region.getFullPath(), null);\n-            synchronized (rootRegions) {\n-              Region rootRegion = rootRegions.get(name);\n-              if (rootRegion == region) {\n-                rootRegions.remove(name);\n-              }\n+\n+            Region rootRegion = rootRegions.get(name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da4c36c7b470bd18a50a246f47049ddbcd4df595"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjYwNDg4Ng==", "bodyText": "This does not look thread safe. I don't think we want to do a get followed by a put here. This allows two threads to both see null on the get and then they both create it and the last one wins. Maybe a single call of computeIfAbsent instead of the get+put is what you want here", "url": "https://github.com/apache/geode/pull/4899#discussion_r402604886", "createdAt": "2020-04-02T21:24:36Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/GemFireCacheImpl.java", "diffHunk": "@@ -2905,45 +2904,44 @@ public void validatePoolFactory(PoolFactory poolFactory) {\n         getCancelCriterion().checkCancelInProgress(null);\n \n         Future<InternalRegion> future = null;\n-        synchronized (rootRegions) {\n-          region = rootRegions.get(name);\n-          if (region != null) {\n-            throw new RegionExistsException(region);\n-          }\n-          // check for case where a root region is being reinitialized\n-          // and we didn't find a region, i.e. the new region is about to be created\n \n-          if (!isReInitCreate) {\n-            String fullPath = Region.SEPARATOR + name;\n-            future = reinitializingRegions.get(fullPath);\n-          }\n-          if (future == null) {\n-            if (internalRegionArgs.getInternalMetaRegion() != null) {\n-              region = internalRegionArgs.getInternalMetaRegion();\n-            } else if (isPartitionedRegion) {\n-              region = new PartitionedRegion(name, attrs, null, this, internalRegionArgs,\n-                  statisticsClock, ColocationLoggerFactory.create());\n+        region = rootRegions.get(name);\n+        if (region != null) {\n+          throw new RegionExistsException(region);\n+        }\n+        // check for case where a root region is being reinitialized\n+        // and we didn't find a region, i.e. the new region is about to be created\n+\n+        if (!isReInitCreate) {\n+          String fullPath = Region.SEPARATOR + name;\n+          future = reinitializingRegions.get(fullPath);\n+        }\n+        if (future == null) {\n+          if (internalRegionArgs.getInternalMetaRegion() != null) {\n+            region = internalRegionArgs.getInternalMetaRegion();\n+          } else if (isPartitionedRegion) {\n+            region = new PartitionedRegion(name, attrs, null, this, internalRegionArgs,\n+                statisticsClock, ColocationLoggerFactory.create());\n+          } else {\n+            // Abstract region depends on the default pool existing so lazily initialize it\n+            // if necessary.\n+            if (Objects.equals(attrs.getPoolName(), DEFAULT_POOL_NAME)) {\n+              determineDefaultPool();\n+            }\n+            if (attrs.getScope().isLocal()) {\n+              region =\n+                  new LocalRegion(name, attrs, null, this, internalRegionArgs, statisticsClock);\n             } else {\n-              // Abstract region depends on the default pool existing so lazily initialize it\n-              // if necessary.\n-              if (Objects.equals(attrs.getPoolName(), DEFAULT_POOL_NAME)) {\n-                determineDefaultPool();\n-              }\n-              if (attrs.getScope().isLocal()) {\n-                region =\n-                    new LocalRegion(name, attrs, null, this, internalRegionArgs, statisticsClock);\n-              } else {\n-                region = new DistributedRegion(name, attrs, null, this, internalRegionArgs,\n-                    statisticsClock);\n-              }\n+              region = new DistributedRegion(name, attrs, null, this, internalRegionArgs,\n+                  statisticsClock);\n             }\n+          }\n \n-            rootRegions.put(name, region);\n-            if (isReInitCreate) {\n-              regionReinitialized(region);\n-            }\n-            break;\n+          rootRegions.put(name, region);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da4c36c7b470bd18a50a246f47049ddbcd4df595"}, "originalPosition": 101}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91de61e84be80af1ad76a2e6e52242f71b0baf56", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/91de61e84be80af1ad76a2e6e52242f71b0baf56", "committedDate": "2020-04-03T00:57:44Z", "message": "Replace Map.get and remove with remove\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94035a6f242839ec52bf0836b98209bde8b53f59", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/94035a6f242839ec52bf0836b98209bde8b53f59", "committedDate": "2020-04-06T17:26:06Z", "message": "Remove unnecessary import\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8692b9143f34ecd0189adf743e8ae18f6352b0d", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/b8692b9143f34ecd0189adf743e8ae18f6352b0d", "committedDate": "2020-04-06T18:11:25Z", "message": "Revert the removed synchronized block\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c4734fc50cdd02ce9eb44a4807ff00e13dc51f3", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/1c4734fc50cdd02ce9eb44a4807ff00e13dc51f3", "committedDate": "2020-04-07T18:53:15Z", "message": "Fix the typo in log messages\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e2f035af72a60baccf13aa4c85e4628ccbaf202", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/6e2f035af72a60baccf13aa4c85e4628ccbaf202", "committedDate": "2020-04-07T18:54:53Z", "message": "Correct misleading log message\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NDUwODQz", "url": "https://github.com/apache/geode/pull/4899#pullrequestreview-389450843", "createdAt": "2020-04-07T20:06:42Z", "commit": {"oid": "6e2f035af72a60baccf13aa4c85e4628ccbaf202"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDowNjo0M1rOGCUG8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDowNjo0M1rOGCUG8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA3OTc5NA==", "bodyText": "I see no reason for continuing to have this method make a copy of \"rootRegions.values()\". All it does with \"rootRegionValues\" is an iteration. So now that you have changed to a ConcurrentMap, I think you can safely get rid of \"rootRegionValues\" and down on line 2194 do this: for (InternalRegion lr: rootRegions.values())", "url": "https://github.com/apache/geode/pull/4899#discussion_r405079794", "createdAt": "2020-04-07T20:06:43Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/GemFireCacheImpl.java", "diffHunk": "@@ -2176,9 +2175,8 @@ public void close(String reason, Throwable systemFailureCause, boolean keepAlive\n           prepareDiskStoresForClose();\n \n           List<InternalRegion> rootRegionValues;\n-          synchronized (rootRegions) {\n-            rootRegionValues = new ArrayList<>(rootRegions.values());\n-          }\n+\n+          rootRegionValues = new ArrayList<>(rootRegions.values());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e2f035af72a60baccf13aa4c85e4628ccbaf202"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTMyODk4", "url": "https://github.com/apache/geode/pull/4899#pullrequestreview-389532898", "createdAt": "2020-04-07T22:24:49Z", "commit": {"oid": "6e2f035af72a60baccf13aa4c85e4628ccbaf202"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d58266e5bef46beca1f79c6488bea6dd35591f35", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/d58266e5bef46beca1f79c6488bea6dd35591f35", "committedDate": "2020-04-07T22:39:07Z", "message": "Remove unnecessary copy of rootRegions values\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTQxNzk0", "url": "https://github.com/apache/geode/pull/4899#pullrequestreview-389541794", "createdAt": "2020-04-07T22:45:33Z", "commit": {"oid": "d58266e5bef46beca1f79c6488bea6dd35591f35"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5NTQ1OTQz", "url": "https://github.com/apache/geode/pull/4899#pullrequestreview-389545943", "createdAt": "2020-04-07T22:55:31Z", "commit": {"oid": "d58266e5bef46beca1f79c6488bea6dd35591f35"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "84afd1c942957124fefdd1364b5189f21cbdf5b4", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/84afd1c942957124fefdd1364b5189f21cbdf5b4", "committedDate": "2020-04-08T00:24:34Z", "message": "spotlessApply\n\nAuthored-by: Jianxia Chen <jchen21@apache.org>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "417015c397a3496caae45de60c04b3e9ff98e146", "author": {"user": {"login": "jchen21", "name": "Jianxia Chen"}}, "url": "https://github.com/apache/geode/commit/417015c397a3496caae45de60c04b3e9ff98e146", "committedDate": "2020-04-08T23:47:56Z", "message": "Revert \"Correct misleading log message\"\n\nThis reverts commit 6e2f035af72a60baccf13aa4c85e4628ccbaf202."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4734, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}