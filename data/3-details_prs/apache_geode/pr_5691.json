{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyNjU2NDAw", "number": 5691, "title": "GEODE-8672: No need in token mode if concurrencyChecksEnabled", "bodyText": "The DESTROYED token is only needed to prevent concurrent destroy op\nis lost in GII. If concurrency checks are enabled, the version tag\nshould be able to prevent the destroy op being lost.\n\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-10-29T23:59:43Z", "url": "https://github.com/apache/geode/pull/5691", "merged": true, "mergeCommit": {"oid": "e695938dff4b39f1755c707e81e1eb7e2e143fe0"}, "closed": true, "closedAt": "2020-11-03T00:26:52Z", "author": {"login": "pivotal-eshu"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdXbFTDgH2gAyNTEyNjU2NDAwOmY2YzFkYzdkNGQ3YjBhMTc4MzBkNjk0MzA4ZDFhYWIyZmM0ZjVkNDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYsHbKgFqTUyMjA0NTc0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f6c1dc7d4d7b0a17830d694308d1aab2fc4f5d43", "author": {"user": {"login": "pivotal-eshu", "name": "Eric Shu"}}, "url": "https://github.com/apache/geode/commit/f6c1dc7d4d7b0a17830d694308d1aab2fc4f5d43", "committedDate": "2020-10-29T23:50:43Z", "message": "GEODE-8672: No need in token mode if concurrencyChecksEnabled\n\n  * The DESTROYED token is only needed to prevent concurrent destroy op\n    is lost in GII. If concurrency checks are enabled, the version tag\n    should be able to prevent the destroy op being lost."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwODM2ODQ2", "url": "https://github.com/apache/geode/pull/5691#pullrequestreview-520836846", "createdAt": "2020-10-30T16:31:01Z", "commit": {"oid": "f6c1dc7d4d7b0a17830d694308d1aab2fc4f5d43"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjozMTowMlrOHrWzlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjo0Mzo1NFrOHrXRZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIyNDQ2OQ==", "bodyText": "This method might be better named \"isInTokenModeNeeded.\" This will also require that test names in LocalRegionTest be changed.", "url": "https://github.com/apache/geode/pull/5691#discussion_r515224469", "createdAt": "2020-10-30T16:31:02Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/LocalRegion.java", "diffHunk": "@@ -6847,6 +6847,10 @@ public void txApplyDestroy(Object key, TransactionId rmtOrigin, TXRmtEvent event\n     }\n   }\n \n+  boolean isNeedInTokenMode(boolean needTokensForGII, boolean needRIDestroyToken) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c1dc7d4d7b0a17830d694308d1aab2fc4f5d43"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzMjEwMg==", "bodyText": "This test name seems not to match with what the test is doing. The call to isNeedInTokenMode() has needTokensForGII as true and needRIDestroyToken as false, but the name seems to imply that needRIDestroyToken is true.\nAlso, would it be worth adding a test for the case where needTokensForGII is false and needRIDestroyToken is true, for completeness?", "url": "https://github.com/apache/geode/pull/5691#discussion_r515232102", "createdAt": "2020-10-30T16:43:54Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/LocalRegionTest.java", "diffHunk": "@@ -277,4 +277,35 @@ public void generateLocalFilterRoutingIsNotNeededIfChangeNotAppliedToCacheYet()\n \n     assertThat(region.isGenerateLocalFilterRoutingNeeded(event)).isFalse();\n   }\n+\n+  @Test\n+  public void isNeedInTokenModeReturnsFalseIfConcurrencyChecksEnabled() {\n+    LocalRegion region =\n+        spy(new LocalRegion(\"region\", regionAttributes, null, cache, internalRegionArguments,\n+            internalDataView, regionMapConstructor, serverRegionProxyConstructor, entryEventFactory,\n+            poolFinder, regionPerfStatsFactory, disabledClock()));\n+    doReturn(true).when(region).getConcurrencyChecksEnabled();\n+\n+    assertThat(region.isNeedInTokenMode(true, true)).isFalse();\n+  }\n+\n+  @Test\n+  public void isNeedInTokenModeReturnsFalseIfBothNeedTokensForGIIAndNeedRIDestroyTokenAreFalse() {\n+    LocalRegion region =\n+        spy(new LocalRegion(\"region\", regionAttributes, null, cache, internalRegionArguments,\n+            internalDataView, regionMapConstructor, serverRegionProxyConstructor, entryEventFactory,\n+            poolFinder, regionPerfStatsFactory, disabledClock()));\n+\n+    assertThat(region.isNeedInTokenMode(false, false)).isFalse();\n+  }\n+\n+  @Test\n+  public void isNeedInTokenModeReturnsTrueIfConcurrencyChecksNotEnabledAndNeedDestroyToken() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6c1dc7d4d7b0a17830d694308d1aab2fc4f5d43"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813", "author": {"user": {"login": "pivotal-eshu", "name": "Eric Shu"}}, "url": "https://github.com/apache/geode/commit/ed42965f69de46c9c95980ed3d276d874e3d9813", "committedDate": "2020-10-30T19:58:15Z", "message": "fix a review comment."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwOTk5OTE1", "url": "https://github.com/apache/geode/pull/5691#pullrequestreview-520999915", "createdAt": "2020-10-30T20:07:10Z", "commit": {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDg0NDkx", "url": "https://github.com/apache/geode/pull/5691#pullrequestreview-521084491", "createdAt": "2020-10-30T23:28:33Z", "commit": {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzoyODozM1rOHri5rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzoyODozM1rOHri5rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMjYzNg==", "bodyText": "Can this not be a ConcurrentLinkedQueue or possibly use Collections.synchronizedList()?", "url": "https://github.com/apache/geode/pull/5691#discussion_r515422636", "createdAt": "2020-10-30T23:28:33Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "diffHunk": "@@ -2834,4 +2778,180 @@ public void close() {\n       closed = true;\n     }\n   }\n+\n+  private String regionName = \"region\";\n+  private int numOfEntry = 2500;\n+  private int totalNumberOfBuckets = 31;\n+  private final ArrayList<Integer> list = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813"}, "originalPosition": 284}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDg1MTk1", "url": "https://github.com/apache/geode/pull/5691#pullrequestreview-521085195", "createdAt": "2020-10-30T23:31:46Z", "commit": {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzozMTo0NlrOHri8KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzozMTo0NlrOHri8KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMzI3Mw==", "bodyText": "This synchronization block should be replaced with a collection that handles concurrency, like ConcurrencyLinkedQueue or Collections.synchronizedList()", "url": "https://github.com/apache/geode/pull/5691#discussion_r515423273", "createdAt": "2020-10-30T23:31:46Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "diffHunk": "@@ -2834,4 +2778,180 @@ public void close() {\n       closed = true;\n     }\n   }\n+\n+  private String regionName = \"region\";\n+  private int numOfEntry = 2500;\n+  private int totalNumberOfBuckets = 31;\n+  private final ArrayList<Integer> list = new ArrayList<>();\n+\n+  @Test\n+  public void correctVersionGeneratedForConcurrentOperationsInTxWithRebalance() throws Exception {\n+    toSetBucketNumber = true;\n+    vm0.invoke(() -> createPartitionedRegion(regionName, 0));\n+    vm0.invoke(() -> doPut(\"A\"));\n+    vm0.invoke(this::doDestroy);\n+    vm0.invoke(() -> doPut(\"B\"));\n+\n+    vm1.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"C\");\n+    validateVersionsInVms(vm0, vm1);\n+\n+    vm2.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"D\");\n+    validateVersionsInVms(vm0, vm1, vm2);\n+\n+    vm3.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"E\");\n+    validateVersionsInVms(vm0, vm1, vm2, vm3);\n+  }\n+\n+  private void doConcurrentOpsAndRebalance(String s) throws Exception {\n+    AsyncInvocation async0 = vm0.invokeAsync(this::doConcurrentDestroyInTx);\n+    AsyncInvocation async1 = vm1.invokeAsync(() -> doConcurrentPutInTx(s));\n+    vm0.invoke(() -> doRebalance());\n+    async0.await();\n+    async1.await();\n+  }\n+\n+  private void doRebalance() throws TimeoutException, InterruptedException {\n+    InternalResourceManager manager = getCache().getInternalResourceManager();\n+    doRebalance(false, manager);\n+  }\n+\n+  private void doConcurrentPutInTx(String s) throws Exception {\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      synchronized (list) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813"}, "originalPosition": 322}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDg1OTQ5", "url": "https://github.com/apache/geode/pull/5691#pullrequestreview-521085949", "createdAt": "2020-10-30T23:35:02Z", "commit": {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzozNTowMlrOHri-WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzozNTowMlrOHri-WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMzgzMg==", "bodyText": "All of this can be replaced with an ExecutorService", "url": "https://github.com/apache/geode/pull/5691#discussion_r515423832", "createdAt": "2020-10-30T23:35:02Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "diffHunk": "@@ -2834,4 +2778,180 @@ public void close() {\n       closed = true;\n     }\n   }\n+\n+  private String regionName = \"region\";\n+  private int numOfEntry = 2500;\n+  private int totalNumberOfBuckets = 31;\n+  private final ArrayList<Integer> list = new ArrayList<>();\n+\n+  @Test\n+  public void correctVersionGeneratedForConcurrentOperationsInTxWithRebalance() throws Exception {\n+    toSetBucketNumber = true;\n+    vm0.invoke(() -> createPartitionedRegion(regionName, 0));\n+    vm0.invoke(() -> doPut(\"A\"));\n+    vm0.invoke(this::doDestroy);\n+    vm0.invoke(() -> doPut(\"B\"));\n+\n+    vm1.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"C\");\n+    validateVersionsInVms(vm0, vm1);\n+\n+    vm2.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"D\");\n+    validateVersionsInVms(vm0, vm1, vm2);\n+\n+    vm3.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"E\");\n+    validateVersionsInVms(vm0, vm1, vm2, vm3);\n+  }\n+\n+  private void doConcurrentOpsAndRebalance(String s) throws Exception {\n+    AsyncInvocation async0 = vm0.invokeAsync(this::doConcurrentDestroyInTx);\n+    AsyncInvocation async1 = vm1.invokeAsync(() -> doConcurrentPutInTx(s));\n+    vm0.invoke(() -> doRebalance());\n+    async0.await();\n+    async1.await();\n+  }\n+\n+  private void doRebalance() throws TimeoutException, InterruptedException {\n+    InternalResourceManager manager = getCache().getInternalResourceManager();\n+    doRebalance(false, manager);\n+  }\n+\n+  private void doConcurrentPutInTx(String s) throws Exception {\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      synchronized (list) {\n+        list.add(i);\n+      }\n+    }\n+\n+    Thread[] threads = new Thread[totalNumberOfBuckets];\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i] = new Thread(() -> doPutOpInTx(s));\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].start();\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].join();\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813"}, "originalPosition": 339}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDg2MDAy", "url": "https://github.com/apache/geode/pull/5691#pullrequestreview-521086002", "createdAt": "2020-10-30T23:35:16Z", "commit": {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzozNToxNlrOHri-jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzozNToxNlrOHri-jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMzg4Nw==", "bodyText": "All of this can be replaced with an ExecutorService", "url": "https://github.com/apache/geode/pull/5691#discussion_r515423887", "createdAt": "2020-10-30T23:35:16Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "diffHunk": "@@ -2834,4 +2778,180 @@ public void close() {\n       closed = true;\n     }\n   }\n+\n+  private String regionName = \"region\";\n+  private int numOfEntry = 2500;\n+  private int totalNumberOfBuckets = 31;\n+  private final ArrayList<Integer> list = new ArrayList<>();\n+\n+  @Test\n+  public void correctVersionGeneratedForConcurrentOperationsInTxWithRebalance() throws Exception {\n+    toSetBucketNumber = true;\n+    vm0.invoke(() -> createPartitionedRegion(regionName, 0));\n+    vm0.invoke(() -> doPut(\"A\"));\n+    vm0.invoke(this::doDestroy);\n+    vm0.invoke(() -> doPut(\"B\"));\n+\n+    vm1.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"C\");\n+    validateVersionsInVms(vm0, vm1);\n+\n+    vm2.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"D\");\n+    validateVersionsInVms(vm0, vm1, vm2);\n+\n+    vm3.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"E\");\n+    validateVersionsInVms(vm0, vm1, vm2, vm3);\n+  }\n+\n+  private void doConcurrentOpsAndRebalance(String s) throws Exception {\n+    AsyncInvocation async0 = vm0.invokeAsync(this::doConcurrentDestroyInTx);\n+    AsyncInvocation async1 = vm1.invokeAsync(() -> doConcurrentPutInTx(s));\n+    vm0.invoke(() -> doRebalance());\n+    async0.await();\n+    async1.await();\n+  }\n+\n+  private void doRebalance() throws TimeoutException, InterruptedException {\n+    InternalResourceManager manager = getCache().getInternalResourceManager();\n+    doRebalance(false, manager);\n+  }\n+\n+  private void doConcurrentPutInTx(String s) throws Exception {\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      synchronized (list) {\n+        list.add(i);\n+      }\n+    }\n+\n+    Thread[] threads = new Thread[totalNumberOfBuckets];\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i] = new Thread(() -> doPutOpInTx(s));\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].start();\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].join();\n+    }\n+  }\n+\n+  private void doConcurrentDestroyInTx() throws Exception {\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      synchronized (list) {\n+        list.add(i);\n+      }\n+    }\n+\n+    Thread[] threads = new Thread[totalNumberOfBuckets];\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i] = new Thread(this::doDestroyOpInTx);\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].start();\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].join();\n+    }\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813"}, "originalPosition": 360}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDg2MDYx", "url": "https://github.com/apache/geode/pull/5691#pullrequestreview-521086061", "createdAt": "2020-10-30T23:35:33Z", "commit": {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzozNTozM1rOHri-uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzozNTozM1rOHri-uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyMzkyOQ==", "bodyText": "Can this not be a ConcurrentLinkedQueue or possibly use Collections.synchronizedList()?", "url": "https://github.com/apache/geode/pull/5691#discussion_r515423929", "createdAt": "2020-10-30T23:35:33Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "diffHunk": "@@ -2834,4 +2778,180 @@ public void close() {\n       closed = true;\n     }\n   }\n+\n+  private String regionName = \"region\";\n+  private int numOfEntry = 2500;\n+  private int totalNumberOfBuckets = 31;\n+  private final ArrayList<Integer> list = new ArrayList<>();\n+\n+  @Test\n+  public void correctVersionGeneratedForConcurrentOperationsInTxWithRebalance() throws Exception {\n+    toSetBucketNumber = true;\n+    vm0.invoke(() -> createPartitionedRegion(regionName, 0));\n+    vm0.invoke(() -> doPut(\"A\"));\n+    vm0.invoke(this::doDestroy);\n+    vm0.invoke(() -> doPut(\"B\"));\n+\n+    vm1.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"C\");\n+    validateVersionsInVms(vm0, vm1);\n+\n+    vm2.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"D\");\n+    validateVersionsInVms(vm0, vm1, vm2);\n+\n+    vm3.invoke(() -> createPartitionedRegion(regionName, 0));\n+    doConcurrentOpsAndRebalance(\"E\");\n+    validateVersionsInVms(vm0, vm1, vm2, vm3);\n+  }\n+\n+  private void doConcurrentOpsAndRebalance(String s) throws Exception {\n+    AsyncInvocation async0 = vm0.invokeAsync(this::doConcurrentDestroyInTx);\n+    AsyncInvocation async1 = vm1.invokeAsync(() -> doConcurrentPutInTx(s));\n+    vm0.invoke(() -> doRebalance());\n+    async0.await();\n+    async1.await();\n+  }\n+\n+  private void doRebalance() throws TimeoutException, InterruptedException {\n+    InternalResourceManager manager = getCache().getInternalResourceManager();\n+    doRebalance(false, manager);\n+  }\n+\n+  private void doConcurrentPutInTx(String s) throws Exception {\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      synchronized (list) {\n+        list.add(i);\n+      }\n+    }\n+\n+    Thread[] threads = new Thread[totalNumberOfBuckets];\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i] = new Thread(() -> doPutOpInTx(s));\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].start();\n+    }\n+\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      threads[i].join();\n+    }\n+  }\n+\n+  private void doConcurrentDestroyInTx() throws Exception {\n+    for (int i = 0; i < totalNumberOfBuckets; i++) {\n+      synchronized (list) {\n+        list.add(i);\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813"}, "originalPosition": 346}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDg3MzA3", "url": "https://github.com/apache/geode/pull/5691#pullrequestreview-521087307", "createdAt": "2020-10-30T23:41:37Z", "commit": {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzo0MTozOFrOHrjDLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQyMzo0MTozOFrOHrjDLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTQyNTA3MQ==", "bodyText": "Small change, but can you swap the check around? First evaluate the ConcurrencyCheck. As this check has a greater chance to short circuit the conditional sooner.", "url": "https://github.com/apache/geode/pull/5691#discussion_r515425071", "createdAt": "2020-10-30T23:41:38Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/LocalRegion.java", "diffHunk": "@@ -6847,6 +6847,10 @@ public void txApplyDestroy(Object key, TransactionId rmtOrigin, TXRmtEvent event\n     }\n   }\n \n+  boolean isInTokenModeNeeded(boolean needTokensForGII, boolean needRIDestroyToken) {\n+    return (needTokensForGII || needRIDestroyToken) && !getConcurrencyChecksEnabled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxMDg3NTk5", "url": "https://github.com/apache/geode/pull/5691#pullrequestreview-521087599", "createdAt": "2020-10-30T23:43:04Z", "commit": {"oid": "ed42965f69de46c9c95980ed3d276d874e3d9813"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb91d851be4d0d91ed67e4715cbfea815169e2ae", "author": {"user": {"login": "pivotal-eshu", "name": "Eric Shu"}}, "url": "https://github.com/apache/geode/commit/cb91d851be4d0d91ed67e4715cbfea815169e2ae", "committedDate": "2020-11-02T18:41:44Z", "message": "fix review comments."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxOTMyNTM1", "url": "https://github.com/apache/geode/pull/5691#pullrequestreview-521932535", "createdAt": "2020-11-02T19:30:13Z", "commit": {"oid": "cb91d851be4d0d91ed67e4715cbfea815169e2ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTozMDoxM1rOHsSuRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOTozMDoxM1rOHsSuRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwNjE0OA==", "bodyText": "I was more thinking in the line of using the invokeAll rather than the single submit. With invokeAll you can create all the operations up front and then invoke all of them at the same time.\nAre we not concerned that if we do it this way, that there is a possibility that the concurrency issue is possibly not ever hit?", "url": "https://github.com/apache/geode/pull/5691#discussion_r516206148", "createdAt": "2020-11-02T19:30:13Z", "author": {"login": "kohlmu-pivotal"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/control/RebalanceOperationDistributedTest.java", "diffHunk": "@@ -2820,68 +2823,58 @@ private void doRebalance() throws TimeoutException, InterruptedException {\n \n   private void doConcurrentPutInTx(String s) throws Exception {\n     for (int i = 0; i < totalNumberOfBuckets; i++) {\n-      synchronized (list) {\n-        list.add(i);\n-      }\n-    }\n-\n-    Thread[] threads = new Thread[totalNumberOfBuckets];\n-    for (int i = 0; i < totalNumberOfBuckets; i++) {\n-      threads[i] = new Thread(() -> doPutOpInTx(s));\n+      queue.add(i);\n     }\n \n+    ExecutorService pool = Executors.newCachedThreadPool();\n+    Future<?>[] futures = new Future<?>[totalNumberOfBuckets];\n     for (int i = 0; i < totalNumberOfBuckets; i++) {\n-      threads[i].start();\n+      futures[i] = pool.submit(() -> doPutOpInTx(s));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb91d851be4d0d91ed67e4715cbfea815169e2ae"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21a081bdeaf764f223410323ecd149e966c8b00c", "author": {"user": {"login": "pivotal-eshu", "name": "Eric Shu"}}, "url": "https://github.com/apache/geode/commit/21a081bdeaf764f223410323ecd149e966c8b00c", "committedDate": "2020-11-02T22:01:50Z", "message": "Fix a review comment."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIyMDQ1NzQ3", "url": "https://github.com/apache/geode/pull/5691#pullrequestreview-522045747", "createdAt": "2020-11-02T22:15:21Z", "commit": {"oid": "21a081bdeaf764f223410323ecd149e966c8b00c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4008, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}