{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MzcwNDcz", "number": 5257, "title": "GEODE-8251: make sure Configuration can be deserialized post 1.12.", "bodyText": "Co-authoried-by: Alberto Gomez alberto.gomez@est.tech\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-06-16T17:43:43Z", "url": "https://github.com/apache/geode/pull/5257", "merged": true, "mergeCommit": {"oid": "4a825a8631d13b9f6979c66fd02fac3ea07ab751"}, "closed": true, "closedAt": "2020-06-19T15:33:46Z", "author": {"login": "jinmeiliao"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcr-qVlgH2gAyNDM1MzcwNDczOjI0NGFkYjcxOGIyNmQ0Y2E0NzdmZWZmYzMxOWZjNDVjZmFiYmQzOGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsmAnggFqTQzMzY2OTUzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "244adb718b26d4ca477feffc319fc45cfabbd38e", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/244adb718b26d4ca477feffc319fc45cfabbd38e", "committedDate": "2020-06-17T00:25:11Z", "message": "GEODE-8251: make sure Configuration can be deserialized post 1.12.\n\nCo-authoried-by: Alberto Gomez <alberto.gomez@est.tech>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a0cbbf9339d75b8c48c4d99399367720463bb8a", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/1a0cbbf9339d75b8c48c4d99399367720463bb8a", "committedDate": "2020-06-17T00:25:12Z", "message": "fix test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMTg2MTg0", "url": "https://github.com/apache/geode/pull/5257#pullrequestreview-432186184", "createdAt": "2020-06-17T08:43:44Z", "commit": {"oid": "3d586cf3beefc5f4aab4e226fbb27539aaf1b60e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODo0Mzo0NVrOGk72ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwODo0Mzo0NVrOGk72ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTM4MjU2Mw==", "bodyText": "Why start from this version? Is the upgrade from previous versions not supported?", "url": "https://github.com/apache/geode/pull/5257#discussion_r441382563", "createdAt": "2020-06-17T08:43:45Z", "author": {"login": "albertogpz"}, "path": "geode-core/src/upgradeTest/java/org/apache/geode/internal/cache/rollingupgrade/RollingUpgradeWithGfshDUnitTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.rollingupgrade;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import org.apache.geode.internal.UniquePortSupplier;\n+import org.apache.geode.test.compiler.ClassBuilder;\n+import org.apache.geode.test.junit.categories.BackwardCompatibilityTest;\n+import org.apache.geode.test.junit.rules.gfsh.GfshExecution;\n+import org.apache.geode.test.junit.rules.gfsh.GfshRule;\n+import org.apache.geode.test.junit.rules.gfsh.GfshScript;\n+import org.apache.geode.test.junit.runners.CategoryWithParameterizedRunnerFactory;\n+import org.apache.geode.test.version.TestVersion;\n+import org.apache.geode.test.version.VersionManager;\n+\n+/**\n+ * This test iterates through the versions of Geode and executes client compatibility with\n+ * the current version of Geode.\n+ */\n+@Category({BackwardCompatibilityTest.class})\n+@RunWith(Parameterized.class)\n+@Parameterized.UseParametersRunnerFactory(CategoryWithParameterizedRunnerFactory.class)\n+public class RollingUpgradeWithGfshDUnitTest {\n+  private final UniquePortSupplier portSupplier = new UniquePortSupplier();\n+  private final String oldVersion;\n+\n+  @Parameterized.Parameters(name = \"{0}\")\n+  public static Collection<String> data() {\n+    List<String> result = VersionManager.getInstance().getVersionsWithoutCurrent();\n+    result.removeIf(s -> TestVersion.compare(s, \"1.10.0\") < 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d586cf3beefc5f4aab4e226fbb27539aaf1b60e"}, "originalPosition": 70}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b1f7b852fb08785b488ada6c8ba91d3c0c09d5d4", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/b1f7b852fb08785b488ada6c8ba91d3c0c09d5d4", "committedDate": "2020-06-16T18:46:29Z", "message": "fix test"}, "afterCommit": {"oid": "95d42c7ba902d0c29e2f1ad32b7496a1a632d650", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/95d42c7ba902d0c29e2f1ad32b7496a1a632d650", "committedDate": "2020-06-17T17:27:07Z", "message": "only provide the environemnt variable in upgrade tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e5eef5e378b331dcfe73148f8b18cc1b30627ae", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/1e5eef5e378b331dcfe73148f8b18cc1b30627ae", "committedDate": "2020-06-17T18:25:31Z", "message": "only provide the environemnt variable in upgrade tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "95d42c7ba902d0c29e2f1ad32b7496a1a632d650", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/95d42c7ba902d0c29e2f1ad32b7496a1a632d650", "committedDate": "2020-06-17T17:27:07Z", "message": "only provide the environemnt variable in upgrade tests"}, "afterCommit": {"oid": "1e5eef5e378b331dcfe73148f8b18cc1b30627ae", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/1e5eef5e378b331dcfe73148f8b18cc1b30627ae", "committedDate": "2020-06-17T18:25:31Z", "message": "only provide the environemnt variable in upgrade tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNTEzMTg3", "url": "https://github.com/apache/geode/pull/5257#pullrequestreview-433513187", "createdAt": "2020-06-18T17:47:48Z", "commit": {"oid": "1e5eef5e378b331dcfe73148f8b18cc1b30627ae"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzo0Nzo0OFrOGl56pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzo1NDowMFrOGl6ISQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM5OTM5Nw==", "bodyText": "You accidentally have the license header in this class twice.", "url": "https://github.com/apache/geode/pull/5257#discussion_r442399397", "createdAt": "2020-06-18T17:47:48Z", "author": {"login": "kirklund"}, "path": "geode-core/src/upgradeTest/java/org/apache/geode/internal/cache/rollingupgrade/RollingUpgradeWithGfshDUnitTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.rollingupgrade;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e5eef5e378b331dcfe73148f8b18cc1b30627ae"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwMTc5MQ==", "bodyText": "Is there a subclass? I'd like to see these protected methods be private if possible.", "url": "https://github.com/apache/geode/pull/5257#discussion_r442401791", "createdAt": "2020-06-18T17:52:02Z", "author": {"login": "kirklund"}, "path": "geode-core/src/upgradeTest/java/org/apache/geode/internal/cache/rollingupgrade/RollingUpgradeWithGfshDUnitTest.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.rollingupgrade;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import org.apache.geode.internal.UniquePortSupplier;\n+import org.apache.geode.test.compiler.ClassBuilder;\n+import org.apache.geode.test.junit.categories.BackwardCompatibilityTest;\n+import org.apache.geode.test.junit.rules.gfsh.GfshExecution;\n+import org.apache.geode.test.junit.rules.gfsh.GfshRule;\n+import org.apache.geode.test.junit.rules.gfsh.GfshScript;\n+import org.apache.geode.test.junit.runners.CategoryWithParameterizedRunnerFactory;\n+import org.apache.geode.test.version.TestVersion;\n+import org.apache.geode.test.version.VersionManager;\n+\n+/**\n+ * This test iterates through the versions of Geode and executes client compatibility with\n+ * the current version of Geode.\n+ */\n+@Category({BackwardCompatibilityTest.class})\n+@RunWith(Parameterized.class)\n+@Parameterized.UseParametersRunnerFactory(CategoryWithParameterizedRunnerFactory.class)\n+public class RollingUpgradeWithGfshDUnitTest {\n+  private final UniquePortSupplier portSupplier = new UniquePortSupplier();\n+  private final String oldVersion;\n+\n+  @Parameterized.Parameters(name = \"{0}\")\n+  public static Collection<String> data() {\n+    List<String> result = VersionManager.getInstance().getVersionsWithoutCurrent();\n+    result.removeIf(s -> TestVersion.compare(s, \"1.10.0\") < 0);\n+    return result;\n+  }\n+\n+  @Rule\n+  public GfshRule oldGfsh;\n+\n+  @Rule\n+  public GfshRule currentGfsh = new GfshRule();\n+\n+  @Rule\n+  public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+  public RollingUpgradeWithGfshDUnitTest(String version) {\n+    oldVersion = version;\n+    oldGfsh = new GfshRule(oldVersion);\n+  }\n+\n+  @Test\n+  public void testRollingUpgradeWithDeployment() throws Exception {\n+    int locatorPort = portSupplier.getAvailablePort();\n+    int locatorJmxPort = portSupplier.getAvailablePort();\n+    int locator2Port = portSupplier.getAvailablePort();\n+    int locator2JmxPort = portSupplier.getAvailablePort();\n+    int server1Port = portSupplier.getAvailablePort();\n+    int server2Port = portSupplier.getAvailablePort();\n+\n+    GfshExecution startupExecution =\n+        GfshScript.of(startLocatorCommand(\"loc1\", locatorPort, locatorJmxPort, -1))\n+            .and(startLocatorCommand(\"loc2\", locator2Port, locator2JmxPort, locatorPort))\n+            .and(startServerCommand(\"server1\", server1Port, locatorPort))\n+            .and(startServerCommand(\"server2\", server2Port, locatorPort))\n+            .and(deployDirCommand())\n+            .execute(oldGfsh);\n+\n+    // doing rolling upgrades\n+    oldGfsh.stopLocator(startupExecution, \"loc1\");\n+    GfshScript.of(startLocatorCommand(\"loc1\", locatorPort, locatorJmxPort, locator2Port))\n+        .execute(currentGfsh);\n+    verifyListDeployed(locatorPort);\n+\n+    oldGfsh.stopLocator(startupExecution, \"loc2\");\n+    GfshScript.of(startLocatorCommand(\"loc2\", locator2Port, locator2JmxPort, locatorPort))\n+        .execute(currentGfsh);\n+    verifyListDeployed(locator2Port);\n+\n+    // make sure servers can do rolling upgrade too\n+    oldGfsh.stopServer(startupExecution, \"server1\");\n+    GfshScript.of(startServerCommand(\"server1\", server1Port, locatorPort)).execute(currentGfsh);\n+\n+    oldGfsh.stopServer(startupExecution, \"server2\");\n+    GfshScript.of(startServerCommand(\"server2\", server2Port, locatorPort)).execute(currentGfsh);\n+  }\n+\n+  private void verifyListDeployed(int locatorPort) {\n+    GfshExecution list_deployed = GfshScript.of(\"connect --locator=localhost[\" + locatorPort + \"]\")\n+        .and(\"list deployed\").execute(currentGfsh);\n+    assertThat(list_deployed.getOutputText()).contains(\"DeployCommandsDUnit1.jar\")\n+        .contains(\"server1\").contains(\"server2\");\n+    currentGfsh.execute(\"disconnect\");\n+  }\n+\n+  private String deployDirCommand() throws IOException {\n+    ClassBuilder classBuilder = new ClassBuilder();\n+    File jarsDir = tempFolder.newFolder();\n+    String jarName1 = \"DeployCommandsDUnit1.jar\";\n+    File jar1 = new File(jarsDir, jarName1);\n+    String class1 = \"DeployCommandsDUnitA\";\n+    classBuilder.writeJarFromName(class1, jar1);\n+    return \"deploy --dir=\" + jarsDir.getAbsolutePath();\n+  }\n+\n+  protected String startServerCommand(String name, int port, int connectedLocatorPort) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e5eef5e378b331dcfe73148f8b18cc1b30627ae"}, "originalPosition": 142}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQwMjg4OQ==", "bodyText": "Optional: all JDK classes put serialVersionUID at the bottom of the class. I usually do this to try and be consistent but obviously doesn't matter much.", "url": "https://github.com/apache/geode/pull/5257#discussion_r442402889", "createdAt": "2020-06-18T17:54:00Z", "author": {"login": "kirklund"}, "path": "geode-management/src/main/java/org/apache/geode/management/configuration/AbstractConfiguration.java", "diffHunk": "@@ -47,7 +47,7 @@\n @Experimental\n public abstract class AbstractConfiguration<R extends RuntimeInfo>\n     implements Identifiable<String>, JsonSerializable {\n-\n+  private static final long serialVersionUID = -6612840641128145954L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e5eef5e378b331dcfe73148f8b18cc1b30627ae"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14c087c0f6da7f9cfeffe49acad42ef3ad70feaa", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/14c087c0f6da7f9cfeffe49acad42ef3ad70feaa", "committedDate": "2020-06-18T20:45:55Z", "message": "review udpates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjY5NTM2", "url": "https://github.com/apache/geode/pull/5257#pullrequestreview-433669536", "createdAt": "2020-06-18T21:45:43Z", "commit": {"oid": "14c087c0f6da7f9cfeffe49acad42ef3ad70feaa"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMTo0NTo0M1rOGmBRvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMjowNjo0M1rOGmBx1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUxOTk5OQ==", "bodyText": "Will it actually start listening on a random available port, because it is set to 0?", "url": "https://github.com/apache/geode/pull/5257#discussion_r442519999", "createdAt": "2020-06-18T21:45:43Z", "author": {"login": "jchen21"}, "path": "geode-core/src/upgradeTest/java/org/apache/geode/internal/cache/rollingupgrade/RollingUpgrade2DUnitTestBase.java", "diffHunk": "@@ -1185,6 +1185,8 @@ Properties getLocatorProperties(String locatorsString, boolean enableCC) {\n     props.setProperty(DistributionConfig.LOCATORS_NAME, locatorsString);\n     props.setProperty(DistributionConfig.LOG_LEVEL_NAME, DUnitLauncher.logLevel);\n     props.setProperty(DistributionConfig.ENABLE_CLUSTER_CONFIGURATION_NAME, enableCC + \"\");\n+    // do not start http service to avoid port conflict between upgrade tests\n+    props.setProperty(DistributionConfig.HTTP_SERVICE_PORT_NAME, \"0\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c087c0f6da7f9cfeffe49acad42ef3ad70feaa"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjUyODIxMw==", "bodyText": "Better verifyListDeployed after rolling upgrade the servers.", "url": "https://github.com/apache/geode/pull/5257#discussion_r442528213", "createdAt": "2020-06-18T22:06:43Z", "author": {"login": "jchen21"}, "path": "geode-core/src/upgradeTest/java/org/apache/geode/internal/cache/rollingupgrade/RollingUpgradeWithGfshDUnitTest.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.rollingupgrade;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+\n+import org.apache.geode.internal.UniquePortSupplier;\n+import org.apache.geode.test.compiler.ClassBuilder;\n+import org.apache.geode.test.junit.categories.BackwardCompatibilityTest;\n+import org.apache.geode.test.junit.rules.gfsh.GfshExecution;\n+import org.apache.geode.test.junit.rules.gfsh.GfshRule;\n+import org.apache.geode.test.junit.rules.gfsh.GfshScript;\n+import org.apache.geode.test.junit.runners.CategoryWithParameterizedRunnerFactory;\n+import org.apache.geode.test.version.TestVersion;\n+import org.apache.geode.test.version.VersionManager;\n+\n+/**\n+ * This test iterates through the versions of Geode and executes client compatibility with\n+ * the current version of Geode.\n+ */\n+@Category({BackwardCompatibilityTest.class})\n+@RunWith(Parameterized.class)\n+@Parameterized.UseParametersRunnerFactory(CategoryWithParameterizedRunnerFactory.class)\n+public class RollingUpgradeWithGfshDUnitTest {\n+  private final UniquePortSupplier portSupplier = new UniquePortSupplier();\n+  private final String oldVersion;\n+\n+  @Parameterized.Parameters(name = \"{0}\")\n+  public static Collection<String> data() {\n+    List<String> result = VersionManager.getInstance().getVersionsWithoutCurrent();\n+    result.removeIf(s -> TestVersion.compare(s, \"1.10.0\") < 0);\n+    return result;\n+  }\n+\n+  @Rule\n+  public GfshRule oldGfsh;\n+\n+  @Rule\n+  public GfshRule currentGfsh = new GfshRule();\n+\n+  @Rule\n+  public TemporaryFolder tempFolder = new TemporaryFolder();\n+\n+  public RollingUpgradeWithGfshDUnitTest(String version) {\n+    oldVersion = version;\n+    oldGfsh = new GfshRule(oldVersion);\n+  }\n+\n+  @Test\n+  public void testRollingUpgradeWithDeployment() throws Exception {\n+    int locatorPort = portSupplier.getAvailablePort();\n+    int locatorJmxPort = portSupplier.getAvailablePort();\n+    int locator2Port = portSupplier.getAvailablePort();\n+    int locator2JmxPort = portSupplier.getAvailablePort();\n+    int server1Port = portSupplier.getAvailablePort();\n+    int server2Port = portSupplier.getAvailablePort();\n+\n+    GfshExecution startupExecution =\n+        GfshScript.of(startLocatorCommand(\"loc1\", locatorPort, locatorJmxPort, -1))\n+            .and(startLocatorCommand(\"loc2\", locator2Port, locator2JmxPort, locatorPort))\n+            .and(startServerCommand(\"server1\", server1Port, locatorPort))\n+            .and(startServerCommand(\"server2\", server2Port, locatorPort))\n+            .and(deployDirCommand())\n+            .execute(oldGfsh);\n+\n+    // doing rolling upgrades\n+    oldGfsh.stopLocator(startupExecution, \"loc1\");\n+    GfshScript.of(startLocatorCommand(\"loc1\", locatorPort, locatorJmxPort, locator2Port))\n+        .execute(currentGfsh);\n+    verifyListDeployed(locatorPort);\n+\n+    oldGfsh.stopLocator(startupExecution, \"loc2\");\n+    GfshScript.of(startLocatorCommand(\"loc2\", locator2Port, locator2JmxPort, locatorPort))\n+        .execute(currentGfsh);\n+    verifyListDeployed(locator2Port);\n+\n+    // make sure servers can do rolling upgrade too\n+    oldGfsh.stopServer(startupExecution, \"server1\");\n+    GfshScript.of(startServerCommand(\"server1\", server1Port, locatorPort)).execute(currentGfsh);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14c087c0f6da7f9cfeffe49acad42ef3ad70feaa"}, "originalPosition": 103}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4479, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}