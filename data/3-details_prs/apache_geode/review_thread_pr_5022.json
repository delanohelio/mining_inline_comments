{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEwODcxMDgw", "number": 5022, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTozMDowNVrOD3zw6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToxOToyNVrOD4LKMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODQ2Mzc4OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisSessionDistDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTozMDowNVrOGORv3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTozMDowNVrOGORv3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYyNDAyOQ==", "bodyText": "Could we use the jedis we created in set up here instead of creating a new one?", "url": "https://github.com/apache/geode/pull/5022#discussion_r417624029", "createdAt": "2020-04-29T21:30:05Z", "author": {"login": "sabbey37"}, "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisSessionDistDUnitTest.java", "diffHunk": "@@ -0,0 +1,399 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.redis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+import java.net.HttpCookie;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.web.client.RestTemplate;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.redis.springRedisTestApplication.RedisSpringTestApplication;\n+import org.apache.geode.test.awaitility.GeodeAwaitility;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.DistributedRestoreSystemProperties;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.RedisTest;\n+\n+@Category({RedisTest.class})\n+public class RedisSessionDistDUnitTest implements Serializable {\n+\n+  @ClassRule\n+  public static ClusterStartupRule cluster =\n+      new ClusterStartupRule(5);\n+\n+  @Rule\n+  public DistributedRestoreSystemProperties restoreSystemProperties =\n+      new DistributedRestoreSystemProperties();\n+\n+  public static ConfigurableApplicationContext springApplicationContext;\n+\n+  private String LOCALHOST = \"http://127.0.0.1\";\n+\n+  private static int indexOfLocator = 0;\n+  private static int indexOfServer1 = 1;\n+  private static int indexOfServer2 = 2;\n+  private static int indexOfClient1 = 3;\n+  private static int indexOfClient2 = 4;\n+\n+  private static VM client1;\n+  private static VM client2;\n+\n+  private static int server1Port;\n+  private static int server2Port;\n+  private static int client1Port;\n+  private static int client2Port;\n+\n+  private static Properties redisPropsForServer1;\n+  private static Properties redisPropsForServer2;\n+  private static MemberVM locator;\n+\n+  private static RestTemplate restTemplate;\n+\n+  private static Jedis jedis;\n+\n+  private static final int JEDIS_TIMEOUT =\n+      Math.toIntExact(GeodeAwaitility.getTimeout().toMillis());\n+\n+  @BeforeClass\n+  public static void setup() {\n+\n+    int[] availablePorts =\n+        AvailablePortHelper.getRandomAvailableTCPPorts(4);\n+\n+    server1Port = availablePorts[0];\n+    server2Port = availablePorts[1];\n+    client1Port = availablePorts[2];\n+    client2Port = availablePorts[3];\n+\n+    int localServer1Port = server1Port;\n+    int localServer2Port = server2Port;\n+    int localClient1Port = client1Port;\n+    int localClient2Port = client2Port;\n+\n+    locator = cluster.startLocatorVM(indexOfLocator);\n+\n+    redisPropsForServer1 = new Properties();\n+    redisPropsForServer1.setProperty(\"redis-bind-address\", \"localHost\");\n+    redisPropsForServer1.setProperty(\"redis-port\", Integer.toString(server1Port));\n+    redisPropsForServer1.setProperty(\"log-level\", \"warn\");\n+\n+    redisPropsForServer2 = new Properties();\n+    redisPropsForServer2.setProperty(\"redis-bind-address\", \"localHost\");\n+    redisPropsForServer2.setProperty(\"redis-port\", Integer.toString(server2Port));\n+    redisPropsForServer2.setProperty(\"log-level\", \"warn\");\n+\n+    cluster.startServerVM(indexOfServer1, redisPropsForServer1, locator.getPort());\n+    cluster.startServerVM(indexOfServer2, redisPropsForServer2, locator.getPort());\n+\n+    client1 = cluster.getVM(indexOfClient1);\n+    client2 = cluster.getVM(indexOfClient2);\n+\n+    client1.invoke(\"start a spring app\", () -> {\n+      System.setProperty(\"server.port\", Integer.toString(localClient1Port));\n+      System.setProperty(\"spring.redis.port\", Integer.toString(localServer1Port));\n+      SpringApplication.run(\n+          RedisSpringTestApplication.class,\n+          \"\" + localServer1Port, \"\" + localServer2Port);\n+    });\n+\n+    client2.invoke(\"start a spring app\", () -> {\n+      System.setProperty(\"server.port\", Integer.toString(localClient2Port));\n+      System.setProperty(\"spring.redis.port\", Integer.toString(localServer2Port));\n+      springApplicationContext = SpringApplication.run(\n+          RedisSpringTestApplication.class,\n+          \"\" + localServer1Port, \"\" + localServer2Port);\n+    });\n+\n+    restTemplate = new RestTemplate();\n+    jedis = new Jedis(\"localHost\", server1Port, JEDIS_TIMEOUT);\n+  }\n+\n+  @After\n+  public void cleanupAfterTest() {\n+    jedis.flushAll();\n+  }\n+\n+  @AfterClass\n+  public static void cleanupAfterClass() {\n+    jedis.disconnect();\n+  }\n+\n+  @Test\n+  public void should_beAbleToCreateASession() {\n+    HttpEntity<String> request = new HttpEntity<>(\"note1\");\n+    cluster.getMember(0);\n+    HttpHeaders resultHeaders = restTemplate\n+        .postForEntity(\n+            LOCALHOST + \":\" + client1Port + \"/addSessionNote\",\n+            request,\n+            String.class)\n+        .getHeaders();\n+\n+    assertThat(resultHeaders).isNotNull();\n+\n+    String cookieString = resultHeaders.get(\"Set-Cookie\").get(0);\n+    HttpHeaders requestHeaders = new HttpHeaders();\n+    requestHeaders.add(\"Cookie\", cookieString);\n+\n+    List<HttpCookie> cookies = HttpCookie.parse(cookieString);\n+    byte[] decodedCookie = Base64.getDecoder().decode(cookies.get(0).getValue());\n+\n+    assertThat(jedis.hgetAll(\"spring:session:sessions:\" + new String(decodedCookie))).isNotEmpty();\n+  }\n+\n+  @Test\n+  public void should_storeSessionDataInRedis() {\n+    HttpEntity<String> request = new HttpEntity<>(\"note1\");\n+    HttpHeaders responseHeaders = restTemplate\n+        .postForEntity(\n+            LOCALHOST + \":\" + client1Port + \"/addSessionNote\",\n+            request,\n+            String.class)\n+        .getHeaders();\n+\n+    String sessionAsCookie = responseHeaders.get(\"Set-Cookie\").get(0);\n+\n+    HttpHeaders requestHeaders = new HttpHeaders();\n+    requestHeaders.add(\"Cookie\", sessionAsCookie);\n+    HttpEntity<String> request2 = new HttpEntity<>(\"\", requestHeaders);\n+\n+    String[] sessionNotes = restTemplate\n+        .exchange(\n+            LOCALHOST + \":\" + client2Port + \"/getSessionNotes\",\n+            HttpMethod.GET,\n+            request2,\n+            String[].class)\n+        .getBody();\n+\n+    assertThat(sessionNotes[0]).isEqualTo(\"note1\");\n+\n+    List<HttpCookie> cookies = HttpCookie.parse(sessionAsCookie);\n+    byte[] decodedCookie = Base64.getDecoder().decode(cookies.get(0).getValue());\n+\n+    // Hook up to redis server, confirm session is there...\n+    Jedis jedis =\n+        new Jedis(\"localHost\", server1Port, JEDIS_TIMEOUT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a524ade36d44df0428ea605654e6763a95aa4f"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODQ5NzEzOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/distributedTest/resources/org/apache/geode/redis/springRedisTestApplication/application.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTo0MToxM1rOGOSEoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTo0MToxM1rOGOSEoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYyOTM0NQ==", "bodyText": "Should we remove the commented out properties?", "url": "https://github.com/apache/geode/pull/5022#discussion_r417629345", "createdAt": "2020-04-29T21:41:13Z", "author": {"login": "sabbey37"}, "path": "geode-redis/src/distributedTest/resources/org/apache/geode/redis/springRedisTestApplication/application.properties", "diffHunk": "@@ -0,0 +1,19 @@\n+#\n+# Copyright (C) 2019-Present Pivotal Software, Inc. All rights reserved.\n+#\n+# This program and the accompanying materials are made available under the terms of the under the Apache License, Version\n+# 2.0 (the \"License\u201d); you may not use this file except in compliance with the License. You may obtain a copy of the\n+# License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific\n+# language governing permissions and limitations under the License.\n+#\n+\n+spring.security.user.password=password\n+spring.session.store-type=redis\n+#server.servlet.session.timeout=10\n+#spring.session.timeout=15\n+#servlet.session.timeout=20", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a524ade36d44df0428ea605654e6763a95aa4f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODUxMDg5OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/distributedTest/resources/org/apache/geode/redis/springRedisTestApplication/templates/layout.html", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTo0NTo0MlrOGOSM7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTo0NTo0MlrOGOSM7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzMTQ2OA==", "bodyText": "(same as above) I don't know very much about copyrights... is there any weirdness around having this app inside our module or having the Pivotal copyright there, etc.?", "url": "https://github.com/apache/geode/pull/5022#discussion_r417631468", "createdAt": "2020-04-29T21:45:42Z", "author": {"login": "sabbey37"}, "path": "geode-redis/src/distributedTest/resources/org/apache/geode/redis/springRedisTestApplication/templates/layout.html", "diffHunk": "@@ -0,0 +1,146 @@\n+<!--\n+  ~ Copyright (C) 2019-Present Pivotal Software, Inc. All rights reserved.\n+  ~\n+  ~ This program and the accompanying materials are made available under the terms of the under the Apache License, Version\n+  ~ 2.0 (the \"License\u201d); you may not use this file except in compliance with the License. You may obtain a copy of the\n+  ~ License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific\n+  ~ language governing permissions and limitations under the License.\n+  -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a524ade36d44df0428ea605654e6763a95aa4f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODUxMTM5OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/distributedTest/resources/org/apache/geode/redis/springRedisTestApplication/templates/index.html", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTo0NTo1M1rOGOSNQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTo0NTo1M1rOGOSNQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzMTU1Mg==", "bodyText": "(same as above) I don't know very much about copyrights... is there any weirdness around having this app inside our module or having the Pivotal copyright there, etc.?", "url": "https://github.com/apache/geode/pull/5022#discussion_r417631552", "createdAt": "2020-04-29T21:45:53Z", "author": {"login": "sabbey37"}, "path": "geode-redis/src/distributedTest/resources/org/apache/geode/redis/springRedisTestApplication/templates/index.html", "diffHunk": "@@ -0,0 +1,27 @@\n+<!--\n+  ~ Copyright (C) 2019-Present Pivotal Software, Inc. All rights reserved.\n+  ~\n+  ~ This program and the accompanying materials are made available under the terms of the under the Apache License, Version\n+  ~ 2.0 (the \"License\u201d); you may not use this file except in compliance with the License. You may obtain a copy of the\n+  ~ License at\n+  ~\n+  ~ http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an\n+  ~ \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific\n+  ~ language governing permissions and limitations under the License.\n+  -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a524ade36d44df0428ea605654e6763a95aa4f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5ODUxMzE4OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/distributedTest/resources/org/apache/geode/redis/springRedisTestApplication/application.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTo0NjoyOVrOGOSOWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQyMTo0NjoyOVrOGOSOWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzYzMTgzNQ==", "bodyText": "I don't know very much about copyrights... is there any weirdness around having this app inside our module or having the Pivotal copyright there, etc.?", "url": "https://github.com/apache/geode/pull/5022#discussion_r417631835", "createdAt": "2020-04-29T21:46:29Z", "author": {"login": "sabbey37"}, "path": "geode-redis/src/distributedTest/resources/org/apache/geode/redis/springRedisTestApplication/application.properties", "diffHunk": "@@ -0,0 +1,19 @@\n+#\n+# Copyright (C) 2019-Present Pivotal Software, Inc. All rights reserved.\n+#\n+# This program and the accompanying materials are made available under the terms of the under the Apache License, Version\n+# 2.0 (the \"License\u201d); you may not use this file except in compliance with the License. You may obtain a copy of the\n+# License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific\n+# language governing permissions and limitations under the License.\n+#", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a524ade36d44df0428ea605654e6763a95aa4f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjIyNzEwOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisSessionDistDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1ODoxN1rOGO2U9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxODo1ODoxN1rOGO2U9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyMzM1MA==", "bodyText": "Should these be final, and all-caps?", "url": "https://github.com/apache/geode/pull/5022#discussion_r418223350", "createdAt": "2020-04-30T18:58:17Z", "author": {"login": "ringles"}, "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisSessionDistDUnitTest.java", "diffHunk": "@@ -0,0 +1,395 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.redis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+import java.net.HttpCookie;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.web.client.RestTemplate;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.redis.springRedisTestApplication.RedisSpringTestApplication;\n+import org.apache.geode.test.awaitility.GeodeAwaitility;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.DistributedRestoreSystemProperties;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.RedisTest;\n+\n+@Category({RedisTest.class})\n+public class RedisSessionDistDUnitTest implements Serializable {\n+\n+  @ClassRule\n+  public static ClusterStartupRule cluster =\n+      new ClusterStartupRule(5);\n+\n+  @Rule\n+  public DistributedRestoreSystemProperties restoreSystemProperties =\n+      new DistributedRestoreSystemProperties();\n+\n+  public static ConfigurableApplicationContext springApplicationContext;\n+\n+  private String LOCALHOST = \"http://127.0.0.1\";\n+\n+  private static int indexOfLocator = 0;\n+  private static int indexOfServer1 = 1;\n+  private static int indexOfServer2 = 2;\n+  private static int indexOfClient1 = 3;\n+  private static int indexOfClient2 = 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b71b6bc3ce110e1e7e9bd167615790e556ec27e2"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjIzNjA3OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisSessionDistDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTowMDo1OVrOGO2bAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTowMDo1OVrOGO2bAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNDg5OA==", "bodyText": "Since these have the same values and almost the same names, do they really buy any clarity? It seems to make things more confusing down below when they are used.", "url": "https://github.com/apache/geode/pull/5022#discussion_r418224898", "createdAt": "2020-04-30T19:00:59Z", "author": {"login": "ringles"}, "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisSessionDistDUnitTest.java", "diffHunk": "@@ -0,0 +1,395 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.redis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+import java.net.HttpCookie;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.web.client.RestTemplate;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.redis.springRedisTestApplication.RedisSpringTestApplication;\n+import org.apache.geode.test.awaitility.GeodeAwaitility;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.DistributedRestoreSystemProperties;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.RedisTest;\n+\n+@Category({RedisTest.class})\n+public class RedisSessionDistDUnitTest implements Serializable {\n+\n+  @ClassRule\n+  public static ClusterStartupRule cluster =\n+      new ClusterStartupRule(5);\n+\n+  @Rule\n+  public DistributedRestoreSystemProperties restoreSystemProperties =\n+      new DistributedRestoreSystemProperties();\n+\n+  public static ConfigurableApplicationContext springApplicationContext;\n+\n+  private String LOCALHOST = \"http://127.0.0.1\";\n+\n+  private static int indexOfLocator = 0;\n+  private static int indexOfServer1 = 1;\n+  private static int indexOfServer2 = 2;\n+  private static int indexOfClient1 = 3;\n+  private static int indexOfClient2 = 4;\n+\n+  private static VM client1;\n+  private static VM client2;\n+\n+  private static int server1Port;\n+  private static int server2Port;\n+  private static int client1Port;\n+  private static int client2Port;\n+\n+  private static Properties redisPropsForServer1;\n+  private static Properties redisPropsForServer2;\n+  private static MemberVM locator;\n+\n+  private static RestTemplate restTemplate;\n+\n+  private static Jedis jedis;\n+\n+  private static final int JEDIS_TIMEOUT =\n+      Math.toIntExact(GeodeAwaitility.getTimeout().toMillis());\n+\n+  @BeforeClass\n+  public static void setup() {\n+\n+    int[] availablePorts =\n+        AvailablePortHelper.getRandomAvailableTCPPorts(4);\n+\n+    server1Port = availablePorts[0];\n+    server2Port = availablePorts[1];\n+    client1Port = availablePorts[2];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b71b6bc3ce110e1e7e9bd167615790e556ec27e2"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjI0NTM1OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisSessionDistDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTowMzo0OFrOGO2gvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTowMzo0OFrOGO2gvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNjM2Ng==", "bodyText": "Could these blocks be pulled into methods, like \"startGeodeServer([args])\", \"startRedisServer([args])\"?", "url": "https://github.com/apache/geode/pull/5022#discussion_r418226366", "createdAt": "2020-04-30T19:03:48Z", "author": {"login": "ringles"}, "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisSessionDistDUnitTest.java", "diffHunk": "@@ -0,0 +1,395 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.redis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+import java.net.HttpCookie;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.web.client.RestTemplate;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.redis.springRedisTestApplication.RedisSpringTestApplication;\n+import org.apache.geode.test.awaitility.GeodeAwaitility;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.DistributedRestoreSystemProperties;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.RedisTest;\n+\n+@Category({RedisTest.class})\n+public class RedisSessionDistDUnitTest implements Serializable {\n+\n+  @ClassRule\n+  public static ClusterStartupRule cluster =\n+      new ClusterStartupRule(5);\n+\n+  @Rule\n+  public DistributedRestoreSystemProperties restoreSystemProperties =\n+      new DistributedRestoreSystemProperties();\n+\n+  public static ConfigurableApplicationContext springApplicationContext;\n+\n+  private String LOCALHOST = \"http://127.0.0.1\";\n+\n+  private static int indexOfLocator = 0;\n+  private static int indexOfServer1 = 1;\n+  private static int indexOfServer2 = 2;\n+  private static int indexOfClient1 = 3;\n+  private static int indexOfClient2 = 4;\n+\n+  private static VM client1;\n+  private static VM client2;\n+\n+  private static int server1Port;\n+  private static int server2Port;\n+  private static int client1Port;\n+  private static int client2Port;\n+\n+  private static Properties redisPropsForServer1;\n+  private static Properties redisPropsForServer2;\n+  private static MemberVM locator;\n+\n+  private static RestTemplate restTemplate;\n+\n+  private static Jedis jedis;\n+\n+  private static final int JEDIS_TIMEOUT =\n+      Math.toIntExact(GeodeAwaitility.getTimeout().toMillis());\n+\n+  @BeforeClass\n+  public static void setup() {\n+\n+    int[] availablePorts =\n+        AvailablePortHelper.getRandomAvailableTCPPorts(4);\n+\n+    server1Port = availablePorts[0];\n+    server2Port = availablePorts[1];\n+    client1Port = availablePorts[2];\n+    client2Port = availablePorts[3];\n+\n+    int localServer1Port = server1Port;\n+    int localServer2Port = server2Port;\n+    int localClient1Port = client1Port;\n+    int localClient2Port = client2Port;\n+\n+    locator = cluster.startLocatorVM(indexOfLocator);\n+\n+    redisPropsForServer1 = new Properties();\n+    redisPropsForServer1.setProperty(\"redis-bind-address\", \"localHost\");\n+    redisPropsForServer1.setProperty(\"redis-port\", Integer.toString(server1Port));\n+    redisPropsForServer1.setProperty(\"log-level\", \"warn\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b71b6bc3ce110e1e7e9bd167615790e556ec27e2"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjI1MTQ4OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisSessionDistDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTowNTo0NlrOGO2kqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOTowNTo0NlrOGO2kqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIyNzM2OQ==", "bodyText": "requestHeaders is not used in this test.", "url": "https://github.com/apache/geode/pull/5022#discussion_r418227369", "createdAt": "2020-04-30T19:05:46Z", "author": {"login": "ringles"}, "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisSessionDistDUnitTest.java", "diffHunk": "@@ -0,0 +1,395 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.redis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+import java.net.HttpCookie;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.web.client.RestTemplate;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.redis.springRedisTestApplication.RedisSpringTestApplication;\n+import org.apache.geode.test.awaitility.GeodeAwaitility;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.DistributedRestoreSystemProperties;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.RedisTest;\n+\n+@Category({RedisTest.class})\n+public class RedisSessionDistDUnitTest implements Serializable {\n+\n+  @ClassRule\n+  public static ClusterStartupRule cluster =\n+      new ClusterStartupRule(5);\n+\n+  @Rule\n+  public DistributedRestoreSystemProperties restoreSystemProperties =\n+      new DistributedRestoreSystemProperties();\n+\n+  public static ConfigurableApplicationContext springApplicationContext;\n+\n+  private String LOCALHOST = \"http://127.0.0.1\";\n+\n+  private static int indexOfLocator = 0;\n+  private static int indexOfServer1 = 1;\n+  private static int indexOfServer2 = 2;\n+  private static int indexOfClient1 = 3;\n+  private static int indexOfClient2 = 4;\n+\n+  private static VM client1;\n+  private static VM client2;\n+\n+  private static int server1Port;\n+  private static int server2Port;\n+  private static int client1Port;\n+  private static int client2Port;\n+\n+  private static Properties redisPropsForServer1;\n+  private static Properties redisPropsForServer2;\n+  private static MemberVM locator;\n+\n+  private static RestTemplate restTemplate;\n+\n+  private static Jedis jedis;\n+\n+  private static final int JEDIS_TIMEOUT =\n+      Math.toIntExact(GeodeAwaitility.getTimeout().toMillis());\n+\n+  @BeforeClass\n+  public static void setup() {\n+\n+    int[] availablePorts =\n+        AvailablePortHelper.getRandomAvailableTCPPorts(4);\n+\n+    server1Port = availablePorts[0];\n+    server2Port = availablePorts[1];\n+    client1Port = availablePorts[2];\n+    client2Port = availablePorts[3];\n+\n+    int localServer1Port = server1Port;\n+    int localServer2Port = server2Port;\n+    int localClient1Port = client1Port;\n+    int localClient2Port = client2Port;\n+\n+    locator = cluster.startLocatorVM(indexOfLocator);\n+\n+    redisPropsForServer1 = new Properties();\n+    redisPropsForServer1.setProperty(\"redis-bind-address\", \"localHost\");\n+    redisPropsForServer1.setProperty(\"redis-port\", Integer.toString(server1Port));\n+    redisPropsForServer1.setProperty(\"log-level\", \"warn\");\n+\n+    redisPropsForServer2 = new Properties();\n+    redisPropsForServer2.setProperty(\"redis-bind-address\", \"localHost\");\n+    redisPropsForServer2.setProperty(\"redis-port\", Integer.toString(server2Port));\n+    redisPropsForServer2.setProperty(\"log-level\", \"warn\");\n+\n+    cluster.startServerVM(indexOfServer1, redisPropsForServer1, locator.getPort());\n+    cluster.startServerVM(indexOfServer2, redisPropsForServer2, locator.getPort());\n+\n+    client1 = cluster.getVM(indexOfClient1);\n+    client2 = cluster.getVM(indexOfClient2);\n+\n+    client1.invoke(\"start a spring app\", () -> {\n+      System.setProperty(\"server.port\", Integer.toString(localClient1Port));\n+      System.setProperty(\"spring.redis.port\", Integer.toString(localServer1Port));\n+      SpringApplication.run(\n+          RedisSpringTestApplication.class,\n+          \"\" + localServer1Port, \"\" + localServer2Port);\n+    });\n+\n+    client2.invoke(\"start a spring app\", () -> {\n+      System.setProperty(\"server.port\", Integer.toString(localClient2Port));\n+      System.setProperty(\"spring.redis.port\", Integer.toString(localServer2Port));\n+      springApplicationContext = SpringApplication.run(\n+          RedisSpringTestApplication.class,\n+          \"\" + localServer1Port, \"\" + localServer2Port);\n+    });\n+\n+    restTemplate = new RestTemplate();\n+    jedis = new Jedis(\"localHost\", server1Port, JEDIS_TIMEOUT);\n+  }\n+\n+  @After\n+  public void cleanupAfterTest() {\n+    jedis.flushAll();\n+  }\n+\n+  @AfterClass\n+  public static void cleanupAfterClass() {\n+    jedis.disconnect();\n+  }\n+\n+  @Test\n+  public void should_beAbleToCreateASession() {\n+    HttpEntity<String> request = new HttpEntity<>(\"note1\");\n+    cluster.getMember(0);\n+    HttpHeaders resultHeaders = restTemplate\n+        .postForEntity(\n+            LOCALHOST + \":\" + client1Port + \"/addSessionNote\",\n+            request,\n+            String.class)\n+        .getHeaders();\n+\n+    assertThat(resultHeaders).isNotNull();\n+\n+    String cookieString = resultHeaders.get(\"Set-Cookie\").get(0);\n+    HttpHeaders requestHeaders = new HttpHeaders();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b71b6bc3ce110e1e7e9bd167615790e556ec27e2"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjI2ODg3OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisSessionDistDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToxMTowNlrOGO2vtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToxMTowNlrOGO2vtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzMDE5OQ==", "bodyText": "It might flow better if this section were at line 188. Then the flow is \"set some data, confirm the data is in Redis, then pull the data out and confirm its what we set.\"\nPerhaps even better, split into two tests, one that sets the data and finds it in Redis, and another tests that pulls the data back out and checks it against what was sent.", "url": "https://github.com/apache/geode/pull/5022#discussion_r418230199", "createdAt": "2020-04-30T19:11:06Z", "author": {"login": "ringles"}, "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisSessionDistDUnitTest.java", "diffHunk": "@@ -0,0 +1,395 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.redis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+import java.net.HttpCookie;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.web.client.RestTemplate;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.redis.springRedisTestApplication.RedisSpringTestApplication;\n+import org.apache.geode.test.awaitility.GeodeAwaitility;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.DistributedRestoreSystemProperties;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.RedisTest;\n+\n+@Category({RedisTest.class})\n+public class RedisSessionDistDUnitTest implements Serializable {\n+\n+  @ClassRule\n+  public static ClusterStartupRule cluster =\n+      new ClusterStartupRule(5);\n+\n+  @Rule\n+  public DistributedRestoreSystemProperties restoreSystemProperties =\n+      new DistributedRestoreSystemProperties();\n+\n+  public static ConfigurableApplicationContext springApplicationContext;\n+\n+  private String LOCALHOST = \"http://127.0.0.1\";\n+\n+  private static int indexOfLocator = 0;\n+  private static int indexOfServer1 = 1;\n+  private static int indexOfServer2 = 2;\n+  private static int indexOfClient1 = 3;\n+  private static int indexOfClient2 = 4;\n+\n+  private static VM client1;\n+  private static VM client2;\n+\n+  private static int server1Port;\n+  private static int server2Port;\n+  private static int client1Port;\n+  private static int client2Port;\n+\n+  private static Properties redisPropsForServer1;\n+  private static Properties redisPropsForServer2;\n+  private static MemberVM locator;\n+\n+  private static RestTemplate restTemplate;\n+\n+  private static Jedis jedis;\n+\n+  private static final int JEDIS_TIMEOUT =\n+      Math.toIntExact(GeodeAwaitility.getTimeout().toMillis());\n+\n+  @BeforeClass\n+  public static void setup() {\n+\n+    int[] availablePorts =\n+        AvailablePortHelper.getRandomAvailableTCPPorts(4);\n+\n+    server1Port = availablePorts[0];\n+    server2Port = availablePorts[1];\n+    client1Port = availablePorts[2];\n+    client2Port = availablePorts[3];\n+\n+    int localServer1Port = server1Port;\n+    int localServer2Port = server2Port;\n+    int localClient1Port = client1Port;\n+    int localClient2Port = client2Port;\n+\n+    locator = cluster.startLocatorVM(indexOfLocator);\n+\n+    redisPropsForServer1 = new Properties();\n+    redisPropsForServer1.setProperty(\"redis-bind-address\", \"localHost\");\n+    redisPropsForServer1.setProperty(\"redis-port\", Integer.toString(server1Port));\n+    redisPropsForServer1.setProperty(\"log-level\", \"warn\");\n+\n+    redisPropsForServer2 = new Properties();\n+    redisPropsForServer2.setProperty(\"redis-bind-address\", \"localHost\");\n+    redisPropsForServer2.setProperty(\"redis-port\", Integer.toString(server2Port));\n+    redisPropsForServer2.setProperty(\"log-level\", \"warn\");\n+\n+    cluster.startServerVM(indexOfServer1, redisPropsForServer1, locator.getPort());\n+    cluster.startServerVM(indexOfServer2, redisPropsForServer2, locator.getPort());\n+\n+    client1 = cluster.getVM(indexOfClient1);\n+    client2 = cluster.getVM(indexOfClient2);\n+\n+    client1.invoke(\"start a spring app\", () -> {\n+      System.setProperty(\"server.port\", Integer.toString(localClient1Port));\n+      System.setProperty(\"spring.redis.port\", Integer.toString(localServer1Port));\n+      SpringApplication.run(\n+          RedisSpringTestApplication.class,\n+          \"\" + localServer1Port, \"\" + localServer2Port);\n+    });\n+\n+    client2.invoke(\"start a spring app\", () -> {\n+      System.setProperty(\"server.port\", Integer.toString(localClient2Port));\n+      System.setProperty(\"spring.redis.port\", Integer.toString(localServer2Port));\n+      springApplicationContext = SpringApplication.run(\n+          RedisSpringTestApplication.class,\n+          \"\" + localServer1Port, \"\" + localServer2Port);\n+    });\n+\n+    restTemplate = new RestTemplate();\n+    jedis = new Jedis(\"localHost\", server1Port, JEDIS_TIMEOUT);\n+  }\n+\n+  @After\n+  public void cleanupAfterTest() {\n+    jedis.flushAll();\n+  }\n+\n+  @AfterClass\n+  public static void cleanupAfterClass() {\n+    jedis.disconnect();\n+  }\n+\n+  @Test\n+  public void should_beAbleToCreateASession() {\n+    HttpEntity<String> request = new HttpEntity<>(\"note1\");\n+    cluster.getMember(0);\n+    HttpHeaders resultHeaders = restTemplate\n+        .postForEntity(\n+            LOCALHOST + \":\" + client1Port + \"/addSessionNote\",\n+            request,\n+            String.class)\n+        .getHeaders();\n+\n+    assertThat(resultHeaders).isNotNull();\n+\n+    String cookieString = resultHeaders.get(\"Set-Cookie\").get(0);\n+    HttpHeaders requestHeaders = new HttpHeaders();\n+    requestHeaders.add(\"Cookie\", cookieString);\n+\n+    List<HttpCookie> cookies = HttpCookie.parse(cookieString);\n+    byte[] decodedCookie = Base64.getDecoder().decode(cookies.get(0).getValue());\n+\n+    assertThat(jedis.hgetAll(\"spring:session:sessions:\" + new String(decodedCookie))).isNotEmpty();\n+  }\n+\n+  @Test\n+  public void should_storeSessionDataInRedis() {\n+    HttpEntity<String> request = new HttpEntity<>(\"note1\");\n+    HttpHeaders responseHeaders = restTemplate\n+        .postForEntity(\n+            LOCALHOST + \":\" + client1Port + \"/addSessionNote\",\n+            request,\n+            String.class)\n+        .getHeaders();\n+\n+    String sessionAsCookie = responseHeaders.get(\"Set-Cookie\").get(0);\n+\n+    HttpHeaders requestHeaders = new HttpHeaders();\n+    requestHeaders.add(\"Cookie\", sessionAsCookie);\n+    HttpEntity<String> request2 = new HttpEntity<>(\"\", requestHeaders);\n+\n+    String[] sessionNotes = restTemplate\n+        .exchange(\n+            LOCALHOST + \":\" + client2Port + \"/getSessionNotes\",\n+            HttpMethod.GET,\n+            request2,\n+            String[].class)\n+        .getBody();\n+\n+    assertThat(sessionNotes[0]).isEqualTo(\"note1\");\n+\n+    List<HttpCookie> cookies = HttpCookie.parse(sessionAsCookie);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b71b6bc3ce110e1e7e9bd167615790e556ec27e2"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjI3MjYwOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisSessionDistDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToxMjowN1rOGO2yDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToxMjowN1rOGO2yDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzMDc5Ng==", "bodyText": "These blocks processing HttpHeaders and HttpCookies could be put into methods; they are just tools to access the data, not material to what we're testing themselves.", "url": "https://github.com/apache/geode/pull/5022#discussion_r418230796", "createdAt": "2020-04-30T19:12:07Z", "author": {"login": "ringles"}, "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisSessionDistDUnitTest.java", "diffHunk": "@@ -0,0 +1,395 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.redis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+import java.net.HttpCookie;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.web.client.RestTemplate;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.redis.springRedisTestApplication.RedisSpringTestApplication;\n+import org.apache.geode.test.awaitility.GeodeAwaitility;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.DistributedRestoreSystemProperties;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.RedisTest;\n+\n+@Category({RedisTest.class})\n+public class RedisSessionDistDUnitTest implements Serializable {\n+\n+  @ClassRule\n+  public static ClusterStartupRule cluster =\n+      new ClusterStartupRule(5);\n+\n+  @Rule\n+  public DistributedRestoreSystemProperties restoreSystemProperties =\n+      new DistributedRestoreSystemProperties();\n+\n+  public static ConfigurableApplicationContext springApplicationContext;\n+\n+  private String LOCALHOST = \"http://127.0.0.1\";\n+\n+  private static int indexOfLocator = 0;\n+  private static int indexOfServer1 = 1;\n+  private static int indexOfServer2 = 2;\n+  private static int indexOfClient1 = 3;\n+  private static int indexOfClient2 = 4;\n+\n+  private static VM client1;\n+  private static VM client2;\n+\n+  private static int server1Port;\n+  private static int server2Port;\n+  private static int client1Port;\n+  private static int client2Port;\n+\n+  private static Properties redisPropsForServer1;\n+  private static Properties redisPropsForServer2;\n+  private static MemberVM locator;\n+\n+  private static RestTemplate restTemplate;\n+\n+  private static Jedis jedis;\n+\n+  private static final int JEDIS_TIMEOUT =\n+      Math.toIntExact(GeodeAwaitility.getTimeout().toMillis());\n+\n+  @BeforeClass\n+  public static void setup() {\n+\n+    int[] availablePorts =\n+        AvailablePortHelper.getRandomAvailableTCPPorts(4);\n+\n+    server1Port = availablePorts[0];\n+    server2Port = availablePorts[1];\n+    client1Port = availablePorts[2];\n+    client2Port = availablePorts[3];\n+\n+    int localServer1Port = server1Port;\n+    int localServer2Port = server2Port;\n+    int localClient1Port = client1Port;\n+    int localClient2Port = client2Port;\n+\n+    locator = cluster.startLocatorVM(indexOfLocator);\n+\n+    redisPropsForServer1 = new Properties();\n+    redisPropsForServer1.setProperty(\"redis-bind-address\", \"localHost\");\n+    redisPropsForServer1.setProperty(\"redis-port\", Integer.toString(server1Port));\n+    redisPropsForServer1.setProperty(\"log-level\", \"warn\");\n+\n+    redisPropsForServer2 = new Properties();\n+    redisPropsForServer2.setProperty(\"redis-bind-address\", \"localHost\");\n+    redisPropsForServer2.setProperty(\"redis-port\", Integer.toString(server2Port));\n+    redisPropsForServer2.setProperty(\"log-level\", \"warn\");\n+\n+    cluster.startServerVM(indexOfServer1, redisPropsForServer1, locator.getPort());\n+    cluster.startServerVM(indexOfServer2, redisPropsForServer2, locator.getPort());\n+\n+    client1 = cluster.getVM(indexOfClient1);\n+    client2 = cluster.getVM(indexOfClient2);\n+\n+    client1.invoke(\"start a spring app\", () -> {\n+      System.setProperty(\"server.port\", Integer.toString(localClient1Port));\n+      System.setProperty(\"spring.redis.port\", Integer.toString(localServer1Port));\n+      SpringApplication.run(\n+          RedisSpringTestApplication.class,\n+          \"\" + localServer1Port, \"\" + localServer2Port);\n+    });\n+\n+    client2.invoke(\"start a spring app\", () -> {\n+      System.setProperty(\"server.port\", Integer.toString(localClient2Port));\n+      System.setProperty(\"spring.redis.port\", Integer.toString(localServer2Port));\n+      springApplicationContext = SpringApplication.run(\n+          RedisSpringTestApplication.class,\n+          \"\" + localServer1Port, \"\" + localServer2Port);\n+    });\n+\n+    restTemplate = new RestTemplate();\n+    jedis = new Jedis(\"localHost\", server1Port, JEDIS_TIMEOUT);\n+  }\n+\n+  @After\n+  public void cleanupAfterTest() {\n+    jedis.flushAll();\n+  }\n+\n+  @AfterClass\n+  public static void cleanupAfterClass() {\n+    jedis.disconnect();\n+  }\n+\n+  @Test\n+  public void should_beAbleToCreateASession() {\n+    HttpEntity<String> request = new HttpEntity<>(\"note1\");\n+    cluster.getMember(0);\n+    HttpHeaders resultHeaders = restTemplate\n+        .postForEntity(\n+            LOCALHOST + \":\" + client1Port + \"/addSessionNote\",\n+            request,\n+            String.class)\n+        .getHeaders();\n+\n+    assertThat(resultHeaders).isNotNull();\n+\n+    String cookieString = resultHeaders.get(\"Set-Cookie\").get(0);\n+    HttpHeaders requestHeaders = new HttpHeaders();\n+    requestHeaders.add(\"Cookie\", cookieString);\n+\n+    List<HttpCookie> cookies = HttpCookie.parse(cookieString);\n+    byte[] decodedCookie = Base64.getDecoder().decode(cookies.get(0).getValue());\n+\n+    assertThat(jedis.hgetAll(\"spring:session:sessions:\" + new String(decodedCookie))).isNotEmpty();\n+  }\n+\n+  @Test\n+  public void should_storeSessionDataInRedis() {\n+    HttpEntity<String> request = new HttpEntity<>(\"note1\");\n+    HttpHeaders responseHeaders = restTemplate\n+        .postForEntity(\n+            LOCALHOST + \":\" + client1Port + \"/addSessionNote\",\n+            request,\n+            String.class)\n+        .getHeaders();\n+\n+    String sessionAsCookie = responseHeaders.get(\"Set-Cookie\").get(0);\n+\n+    HttpHeaders requestHeaders = new HttpHeaders();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b71b6bc3ce110e1e7e9bd167615790e556ec27e2"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjI4OTExOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisSessionDistDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToxNjo1OVrOGO28VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToxNjo1OVrOGO28VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzMzQyOA==", "bodyText": "Without seeing the DunitSocketResolver below, it's hard to understand how the Spring app knows to switch ports when a server goes down. If starting a Spring app was in a method, the \"localport1\", \"localport2\" arguments might stand out better.", "url": "https://github.com/apache/geode/pull/5022#discussion_r418233428", "createdAt": "2020-04-30T19:16:59Z", "author": {"login": "ringles"}, "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisSessionDistDUnitTest.java", "diffHunk": "@@ -0,0 +1,395 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.redis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+import java.net.HttpCookie;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.web.client.RestTemplate;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.redis.springRedisTestApplication.RedisSpringTestApplication;\n+import org.apache.geode.test.awaitility.GeodeAwaitility;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.DistributedRestoreSystemProperties;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.RedisTest;\n+\n+@Category({RedisTest.class})\n+public class RedisSessionDistDUnitTest implements Serializable {\n+\n+  @ClassRule\n+  public static ClusterStartupRule cluster =\n+      new ClusterStartupRule(5);\n+\n+  @Rule\n+  public DistributedRestoreSystemProperties restoreSystemProperties =\n+      new DistributedRestoreSystemProperties();\n+\n+  public static ConfigurableApplicationContext springApplicationContext;\n+\n+  private String LOCALHOST = \"http://127.0.0.1\";\n+\n+  private static int indexOfLocator = 0;\n+  private static int indexOfServer1 = 1;\n+  private static int indexOfServer2 = 2;\n+  private static int indexOfClient1 = 3;\n+  private static int indexOfClient2 = 4;\n+\n+  private static VM client1;\n+  private static VM client2;\n+\n+  private static int server1Port;\n+  private static int server2Port;\n+  private static int client1Port;\n+  private static int client2Port;\n+\n+  private static Properties redisPropsForServer1;\n+  private static Properties redisPropsForServer2;\n+  private static MemberVM locator;\n+\n+  private static RestTemplate restTemplate;\n+\n+  private static Jedis jedis;\n+\n+  private static final int JEDIS_TIMEOUT =\n+      Math.toIntExact(GeodeAwaitility.getTimeout().toMillis());\n+\n+  @BeforeClass\n+  public static void setup() {\n+\n+    int[] availablePorts =\n+        AvailablePortHelper.getRandomAvailableTCPPorts(4);\n+\n+    server1Port = availablePorts[0];\n+    server2Port = availablePorts[1];\n+    client1Port = availablePorts[2];\n+    client2Port = availablePorts[3];\n+\n+    int localServer1Port = server1Port;\n+    int localServer2Port = server2Port;\n+    int localClient1Port = client1Port;\n+    int localClient2Port = client2Port;\n+\n+    locator = cluster.startLocatorVM(indexOfLocator);\n+\n+    redisPropsForServer1 = new Properties();\n+    redisPropsForServer1.setProperty(\"redis-bind-address\", \"localHost\");\n+    redisPropsForServer1.setProperty(\"redis-port\", Integer.toString(server1Port));\n+    redisPropsForServer1.setProperty(\"log-level\", \"warn\");\n+\n+    redisPropsForServer2 = new Properties();\n+    redisPropsForServer2.setProperty(\"redis-bind-address\", \"localHost\");\n+    redisPropsForServer2.setProperty(\"redis-port\", Integer.toString(server2Port));\n+    redisPropsForServer2.setProperty(\"log-level\", \"warn\");\n+\n+    cluster.startServerVM(indexOfServer1, redisPropsForServer1, locator.getPort());\n+    cluster.startServerVM(indexOfServer2, redisPropsForServer2, locator.getPort());\n+\n+    client1 = cluster.getVM(indexOfClient1);\n+    client2 = cluster.getVM(indexOfClient2);\n+\n+    client1.invoke(\"start a spring app\", () -> {\n+      System.setProperty(\"server.port\", Integer.toString(localClient1Port));\n+      System.setProperty(\"spring.redis.port\", Integer.toString(localServer1Port));\n+      SpringApplication.run(\n+          RedisSpringTestApplication.class,\n+          \"\" + localServer1Port, \"\" + localServer2Port);\n+    });\n+\n+    client2.invoke(\"start a spring app\", () -> {\n+      System.setProperty(\"server.port\", Integer.toString(localClient2Port));\n+      System.setProperty(\"spring.redis.port\", Integer.toString(localServer2Port));\n+      springApplicationContext = SpringApplication.run(\n+          RedisSpringTestApplication.class,\n+          \"\" + localServer1Port, \"\" + localServer2Port);\n+    });\n+\n+    restTemplate = new RestTemplate();\n+    jedis = new Jedis(\"localHost\", server1Port, JEDIS_TIMEOUT);\n+  }\n+\n+  @After\n+  public void cleanupAfterTest() {\n+    jedis.flushAll();\n+  }\n+\n+  @AfterClass\n+  public static void cleanupAfterClass() {\n+    jedis.disconnect();\n+  }\n+\n+  @Test\n+  public void should_beAbleToCreateASession() {\n+    HttpEntity<String> request = new HttpEntity<>(\"note1\");\n+    cluster.getMember(0);\n+    HttpHeaders resultHeaders = restTemplate\n+        .postForEntity(\n+            LOCALHOST + \":\" + client1Port + \"/addSessionNote\",\n+            request,\n+            String.class)\n+        .getHeaders();\n+\n+    assertThat(resultHeaders).isNotNull();\n+\n+    String cookieString = resultHeaders.get(\"Set-Cookie\").get(0);\n+    HttpHeaders requestHeaders = new HttpHeaders();\n+    requestHeaders.add(\"Cookie\", cookieString);\n+\n+    List<HttpCookie> cookies = HttpCookie.parse(cookieString);\n+    byte[] decodedCookie = Base64.getDecoder().decode(cookies.get(0).getValue());\n+\n+    assertThat(jedis.hgetAll(\"spring:session:sessions:\" + new String(decodedCookie))).isNotEmpty();\n+  }\n+\n+  @Test\n+  public void should_storeSessionDataInRedis() {\n+    HttpEntity<String> request = new HttpEntity<>(\"note1\");\n+    HttpHeaders responseHeaders = restTemplate\n+        .postForEntity(\n+            LOCALHOST + \":\" + client1Port + \"/addSessionNote\",\n+            request,\n+            String.class)\n+        .getHeaders();\n+\n+    String sessionAsCookie = responseHeaders.get(\"Set-Cookie\").get(0);\n+\n+    HttpHeaders requestHeaders = new HttpHeaders();\n+    requestHeaders.add(\"Cookie\", sessionAsCookie);\n+    HttpEntity<String> request2 = new HttpEntity<>(\"\", requestHeaders);\n+\n+    String[] sessionNotes = restTemplate\n+        .exchange(\n+            LOCALHOST + \":\" + client2Port + \"/getSessionNotes\",\n+            HttpMethod.GET,\n+            request2,\n+            String[].class)\n+        .getBody();\n+\n+    assertThat(sessionNotes[0]).isEqualTo(\"note1\");\n+\n+    List<HttpCookie> cookies = HttpCookie.parse(sessionAsCookie);\n+    byte[] decodedCookie = Base64.getDecoder().decode(cookies.get(0).getValue());\n+\n+    Map<String, String> sessionInfo =\n+        jedis.hgetAll(\"spring:session:sessions:\" + new String(decodedCookie));\n+\n+    assertThat(sessionInfo).isNotNull();\n+    assertThat(sessionInfo.get(\"sessionAttr:NOTES\")).isNotNull();\n+\n+    jedis.disconnect();\n+  }\n+\n+  @Test\n+  public void should_propagateSessionData_toOtherServers() {\n+\n+    HttpEntity<String> request = new HttpEntity<>(\"noteFromClient1\");\n+    HttpHeaders resultHeaders = restTemplate\n+        .postForEntity(\n+            LOCALHOST + \":\" + client1Port + \"/addSessionNote\",\n+            request,\n+            String.class)\n+        .getHeaders();\n+\n+    String sessionAsCookie = resultHeaders.get(\"Set-Cookie\").get(0);\n+    HttpHeaders requestHeaders = new HttpHeaders();\n+    requestHeaders.add(\"Cookie\", sessionAsCookie);\n+\n+    HttpEntity<String> request2 = new HttpEntity<>(\"\", requestHeaders);\n+\n+    String[] sessionNotes = restTemplate\n+        .exchange(\n+            LOCALHOST + \":\" + client2Port + \"/getSessionNotes\",\n+            HttpMethod.GET,\n+            request2,\n+            String[].class)\n+        .getBody();\n+\n+    assertThat(sessionNotes[0]).isEqualTo(\"noteFromClient1\");\n+  }\n+\n+  @Test\n+  public void should_getSessionDataFromOtherGeodeRedisServer_whenOriginalServerGoesDown() {\n+    HttpEntity<String> request = new HttpEntity<>(\"noteFromClient2\");\n+    HttpHeaders responseHeaders = restTemplate\n+        .postForEntity(\n+            LOCALHOST + \":\" + client2Port + \"/addSessionNote\",\n+            request,\n+            String.class)\n+        .getHeaders();\n+\n+    String sessionAsCookie = responseHeaders.get(\"Set-Cookie\").get(0);\n+    HttpHeaders requestHeaders = new HttpHeaders();\n+    requestHeaders.add(\"Cookie\", sessionAsCookie);\n+    HttpEntity<String> request2 = new HttpEntity<>(\"\", requestHeaders);\n+\n+    cluster.crashVM(indexOfServer2);\n+\n+    String[] sessionNotes = restTemplate\n+        .exchange(\n+            LOCALHOST + \":\" + client1Port + \"/getSessionNotes\",\n+            HttpMethod.GET,\n+            request2,\n+            String[].class)\n+        .getBody();\n+\n+    assertThat(sessionNotes[0]).isEqualTo(\"noteFromClient2\");\n+\n+    cluster.startServerVM(indexOfServer2, redisPropsForServer2, locator.getPort());\n+  }\n+\n+  @Test\n+  public void should_getSessionDataFromServer_whenServerGoesDownAndIsRestarted() {\n+    HttpEntity<String> request = new HttpEntity<>(\"noteFromClient2\");\n+\n+    HttpHeaders resultHeaders = restTemplate\n+        .postForEntity(\n+            LOCALHOST + \":\" + client2Port + \"/addSessionNote\",\n+            request,\n+            String.class)\n+        .getHeaders();\n+\n+    String cookieString = resultHeaders.get(\"Set-Cookie\").get(0);\n+    HttpHeaders requestHeaders = new HttpHeaders();\n+    requestHeaders.add(\"Cookie\", cookieString);\n+    HttpEntity<String> request2 = new HttpEntity<>(\"noteFromClient1\", requestHeaders);\n+\n+    cluster.crashVM(indexOfServer2);\n+\n+    restTemplate\n+        .postForEntity(\n+            LOCALHOST + \":\" + client1Port + \"/addSessionNote\",\n+            request2,\n+            String.class);\n+\n+    cluster.startServerVM(indexOfServer2,\n+        redisPropsForServer2,\n+        locator.getPort());\n+\n+    HttpEntity<String> request3 = new HttpEntity<>(\"\", requestHeaders);\n+\n+    String[] sessionNotes = restTemplate\n+        .exchange(\n+            LOCALHOST + \":\" + client2Port + \"/getSessionNotes\",\n+            HttpMethod.GET,\n+            request3,\n+            String[].class)\n+        .getBody();\n+\n+    assertThat(sessionNotes).containsExactly(\"noteFromClient2\", \"noteFromClient1\");\n+  }\n+\n+  @Test\n+  public void should_getCorrectSessionData_whenGeodeRedisServerGoesDown_andClientConnectsToDifferentServer() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b71b6bc3ce110e1e7e9bd167615790e556ec27e2"}, "originalPosition": 315}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMjI5NjgyOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisSessionDistDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToxOToyNVrOGO3BOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxOToxOToyNVrOGO3BOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODIzNDY4MQ==", "bodyText": "This block (http-level stuff) should be moved closer to where it's used, immediately above the try/finally block. (If http operations were all bundled into a method, then it wouldn't be possible to interleave logic like this.)", "url": "https://github.com/apache/geode/pull/5022#discussion_r418234681", "createdAt": "2020-04-30T19:19:25Z", "author": {"login": "ringles"}, "path": "geode-redis/src/distributedTest/java/org/apache/geode/redis/RedisSessionDistDUnitTest.java", "diffHunk": "@@ -0,0 +1,395 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.redis;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+import java.io.Serializable;\n+import java.net.HttpCookie;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Properties;\n+\n+import org.junit.After;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+import org.springframework.boot.SpringApplication;\n+import org.springframework.context.ConfigurableApplicationContext;\n+import org.springframework.http.HttpEntity;\n+import org.springframework.http.HttpHeaders;\n+import org.springframework.http.HttpMethod;\n+import org.springframework.web.client.RestTemplate;\n+import redis.clients.jedis.Jedis;\n+\n+import org.apache.geode.internal.AvailablePortHelper;\n+import org.apache.geode.redis.springRedisTestApplication.RedisSpringTestApplication;\n+import org.apache.geode.test.awaitility.GeodeAwaitility;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.ClusterStartupRule;\n+import org.apache.geode.test.dunit.rules.DistributedRestoreSystemProperties;\n+import org.apache.geode.test.dunit.rules.MemberVM;\n+import org.apache.geode.test.junit.categories.RedisTest;\n+\n+@Category({RedisTest.class})\n+public class RedisSessionDistDUnitTest implements Serializable {\n+\n+  @ClassRule\n+  public static ClusterStartupRule cluster =\n+      new ClusterStartupRule(5);\n+\n+  @Rule\n+  public DistributedRestoreSystemProperties restoreSystemProperties =\n+      new DistributedRestoreSystemProperties();\n+\n+  public static ConfigurableApplicationContext springApplicationContext;\n+\n+  private String LOCALHOST = \"http://127.0.0.1\";\n+\n+  private static int indexOfLocator = 0;\n+  private static int indexOfServer1 = 1;\n+  private static int indexOfServer2 = 2;\n+  private static int indexOfClient1 = 3;\n+  private static int indexOfClient2 = 4;\n+\n+  private static VM client1;\n+  private static VM client2;\n+\n+  private static int server1Port;\n+  private static int server2Port;\n+  private static int client1Port;\n+  private static int client2Port;\n+\n+  private static Properties redisPropsForServer1;\n+  private static Properties redisPropsForServer2;\n+  private static MemberVM locator;\n+\n+  private static RestTemplate restTemplate;\n+\n+  private static Jedis jedis;\n+\n+  private static final int JEDIS_TIMEOUT =\n+      Math.toIntExact(GeodeAwaitility.getTimeout().toMillis());\n+\n+  @BeforeClass\n+  public static void setup() {\n+\n+    int[] availablePorts =\n+        AvailablePortHelper.getRandomAvailableTCPPorts(4);\n+\n+    server1Port = availablePorts[0];\n+    server2Port = availablePorts[1];\n+    client1Port = availablePorts[2];\n+    client2Port = availablePorts[3];\n+\n+    int localServer1Port = server1Port;\n+    int localServer2Port = server2Port;\n+    int localClient1Port = client1Port;\n+    int localClient2Port = client2Port;\n+\n+    locator = cluster.startLocatorVM(indexOfLocator);\n+\n+    redisPropsForServer1 = new Properties();\n+    redisPropsForServer1.setProperty(\"redis-bind-address\", \"localHost\");\n+    redisPropsForServer1.setProperty(\"redis-port\", Integer.toString(server1Port));\n+    redisPropsForServer1.setProperty(\"log-level\", \"warn\");\n+\n+    redisPropsForServer2 = new Properties();\n+    redisPropsForServer2.setProperty(\"redis-bind-address\", \"localHost\");\n+    redisPropsForServer2.setProperty(\"redis-port\", Integer.toString(server2Port));\n+    redisPropsForServer2.setProperty(\"log-level\", \"warn\");\n+\n+    cluster.startServerVM(indexOfServer1, redisPropsForServer1, locator.getPort());\n+    cluster.startServerVM(indexOfServer2, redisPropsForServer2, locator.getPort());\n+\n+    client1 = cluster.getVM(indexOfClient1);\n+    client2 = cluster.getVM(indexOfClient2);\n+\n+    client1.invoke(\"start a spring app\", () -> {\n+      System.setProperty(\"server.port\", Integer.toString(localClient1Port));\n+      System.setProperty(\"spring.redis.port\", Integer.toString(localServer1Port));\n+      SpringApplication.run(\n+          RedisSpringTestApplication.class,\n+          \"\" + localServer1Port, \"\" + localServer2Port);\n+    });\n+\n+    client2.invoke(\"start a spring app\", () -> {\n+      System.setProperty(\"server.port\", Integer.toString(localClient2Port));\n+      System.setProperty(\"spring.redis.port\", Integer.toString(localServer2Port));\n+      springApplicationContext = SpringApplication.run(\n+          RedisSpringTestApplication.class,\n+          \"\" + localServer1Port, \"\" + localServer2Port);\n+    });\n+\n+    restTemplate = new RestTemplate();\n+    jedis = new Jedis(\"localHost\", server1Port, JEDIS_TIMEOUT);\n+  }\n+\n+  @After\n+  public void cleanupAfterTest() {\n+    jedis.flushAll();\n+  }\n+\n+  @AfterClass\n+  public static void cleanupAfterClass() {\n+    jedis.disconnect();\n+  }\n+\n+  @Test\n+  public void should_beAbleToCreateASession() {\n+    HttpEntity<String> request = new HttpEntity<>(\"note1\");\n+    cluster.getMember(0);\n+    HttpHeaders resultHeaders = restTemplate\n+        .postForEntity(\n+            LOCALHOST + \":\" + client1Port + \"/addSessionNote\",\n+            request,\n+            String.class)\n+        .getHeaders();\n+\n+    assertThat(resultHeaders).isNotNull();\n+\n+    String cookieString = resultHeaders.get(\"Set-Cookie\").get(0);\n+    HttpHeaders requestHeaders = new HttpHeaders();\n+    requestHeaders.add(\"Cookie\", cookieString);\n+\n+    List<HttpCookie> cookies = HttpCookie.parse(cookieString);\n+    byte[] decodedCookie = Base64.getDecoder().decode(cookies.get(0).getValue());\n+\n+    assertThat(jedis.hgetAll(\"spring:session:sessions:\" + new String(decodedCookie))).isNotEmpty();\n+  }\n+\n+  @Test\n+  public void should_storeSessionDataInRedis() {\n+    HttpEntity<String> request = new HttpEntity<>(\"note1\");\n+    HttpHeaders responseHeaders = restTemplate\n+        .postForEntity(\n+            LOCALHOST + \":\" + client1Port + \"/addSessionNote\",\n+            request,\n+            String.class)\n+        .getHeaders();\n+\n+    String sessionAsCookie = responseHeaders.get(\"Set-Cookie\").get(0);\n+\n+    HttpHeaders requestHeaders = new HttpHeaders();\n+    requestHeaders.add(\"Cookie\", sessionAsCookie);\n+    HttpEntity<String> request2 = new HttpEntity<>(\"\", requestHeaders);\n+\n+    String[] sessionNotes = restTemplate\n+        .exchange(\n+            LOCALHOST + \":\" + client2Port + \"/getSessionNotes\",\n+            HttpMethod.GET,\n+            request2,\n+            String[].class)\n+        .getBody();\n+\n+    assertThat(sessionNotes[0]).isEqualTo(\"note1\");\n+\n+    List<HttpCookie> cookies = HttpCookie.parse(sessionAsCookie);\n+    byte[] decodedCookie = Base64.getDecoder().decode(cookies.get(0).getValue());\n+\n+    Map<String, String> sessionInfo =\n+        jedis.hgetAll(\"spring:session:sessions:\" + new String(decodedCookie));\n+\n+    assertThat(sessionInfo).isNotNull();\n+    assertThat(sessionInfo.get(\"sessionAttr:NOTES\")).isNotNull();\n+\n+    jedis.disconnect();\n+  }\n+\n+  @Test\n+  public void should_propagateSessionData_toOtherServers() {\n+\n+    HttpEntity<String> request = new HttpEntity<>(\"noteFromClient1\");\n+    HttpHeaders resultHeaders = restTemplate\n+        .postForEntity(\n+            LOCALHOST + \":\" + client1Port + \"/addSessionNote\",\n+            request,\n+            String.class)\n+        .getHeaders();\n+\n+    String sessionAsCookie = resultHeaders.get(\"Set-Cookie\").get(0);\n+    HttpHeaders requestHeaders = new HttpHeaders();\n+    requestHeaders.add(\"Cookie\", sessionAsCookie);\n+\n+    HttpEntity<String> request2 = new HttpEntity<>(\"\", requestHeaders);\n+\n+    String[] sessionNotes = restTemplate\n+        .exchange(\n+            LOCALHOST + \":\" + client2Port + \"/getSessionNotes\",\n+            HttpMethod.GET,\n+            request2,\n+            String[].class)\n+        .getBody();\n+\n+    assertThat(sessionNotes[0]).isEqualTo(\"noteFromClient1\");\n+  }\n+\n+  @Test\n+  public void should_getSessionDataFromOtherGeodeRedisServer_whenOriginalServerGoesDown() {\n+    HttpEntity<String> request = new HttpEntity<>(\"noteFromClient2\");\n+    HttpHeaders responseHeaders = restTemplate\n+        .postForEntity(\n+            LOCALHOST + \":\" + client2Port + \"/addSessionNote\",\n+            request,\n+            String.class)\n+        .getHeaders();\n+\n+    String sessionAsCookie = responseHeaders.get(\"Set-Cookie\").get(0);\n+    HttpHeaders requestHeaders = new HttpHeaders();\n+    requestHeaders.add(\"Cookie\", sessionAsCookie);\n+    HttpEntity<String> request2 = new HttpEntity<>(\"\", requestHeaders);\n+\n+    cluster.crashVM(indexOfServer2);\n+\n+    String[] sessionNotes = restTemplate\n+        .exchange(\n+            LOCALHOST + \":\" + client1Port + \"/getSessionNotes\",\n+            HttpMethod.GET,\n+            request2,\n+            String[].class)\n+        .getBody();\n+\n+    assertThat(sessionNotes[0]).isEqualTo(\"noteFromClient2\");\n+\n+    cluster.startServerVM(indexOfServer2, redisPropsForServer2, locator.getPort());\n+  }\n+\n+  @Test\n+  public void should_getSessionDataFromServer_whenServerGoesDownAndIsRestarted() {\n+    HttpEntity<String> request = new HttpEntity<>(\"noteFromClient2\");\n+\n+    HttpHeaders resultHeaders = restTemplate\n+        .postForEntity(\n+            LOCALHOST + \":\" + client2Port + \"/addSessionNote\",\n+            request,\n+            String.class)\n+        .getHeaders();\n+\n+    String cookieString = resultHeaders.get(\"Set-Cookie\").get(0);\n+    HttpHeaders requestHeaders = new HttpHeaders();\n+    requestHeaders.add(\"Cookie\", cookieString);\n+    HttpEntity<String> request2 = new HttpEntity<>(\"noteFromClient1\", requestHeaders);\n+\n+    cluster.crashVM(indexOfServer2);\n+\n+    restTemplate\n+        .postForEntity(\n+            LOCALHOST + \":\" + client1Port + \"/addSessionNote\",\n+            request2,\n+            String.class);\n+\n+    cluster.startServerVM(indexOfServer2,\n+        redisPropsForServer2,\n+        locator.getPort());\n+\n+    HttpEntity<String> request3 = new HttpEntity<>(\"\", requestHeaders);\n+\n+    String[] sessionNotes = restTemplate\n+        .exchange(\n+            LOCALHOST + \":\" + client2Port + \"/getSessionNotes\",\n+            HttpMethod.GET,\n+            request3,\n+            String[].class)\n+        .getBody();\n+\n+    assertThat(sessionNotes).containsExactly(\"noteFromClient2\", \"noteFromClient1\");\n+  }\n+\n+  @Test\n+  public void should_getCorrectSessionData_whenGeodeRedisServerGoesDown_andClientConnectsToDifferentServer() {\n+    HttpEntity<String> request = new HttpEntity<>(\"noteFromClient2\");\n+\n+    HttpHeaders resultHeaders = restTemplate\n+        .postForEntity(\n+            LOCALHOST + \":\" + client2Port + \"/addSessionNote\",\n+            request,\n+            String.class)\n+        .getHeaders();\n+\n+    String cookieString = resultHeaders.get(\"Set-Cookie\").get(0);\n+    HttpHeaders requestHeaders = new HttpHeaders();\n+    requestHeaders.add(\"Cookie\", cookieString);\n+    HttpEntity<String> request2 = new HttpEntity<>(\"\", requestHeaders);\n+\n+    cluster.crashVM(indexOfServer2);\n+\n+    String[] sessionNotes = restTemplate\n+        .exchange(\n+            LOCALHOST + \":\" + client2Port + \"/getSessionNotes\",\n+            HttpMethod.GET,\n+            request2,\n+            String[].class)\n+        .getBody();\n+\n+    assertThat(sessionNotes[0]).isEqualTo(\"noteFromClient2\");\n+\n+    cluster.startServerVM(indexOfServer2, redisPropsForServer2, locator.getPort());\n+  }\n+\n+\n+  @Test\n+  public void should_getCorrectSessionData_whenAppInstanceGoesDown_andClientConnectsToDifferentAppInstance() {\n+\n+    HttpEntity<String> request = new HttpEntity<>(\"noteFromClient2\");\n+    HttpHeaders responseHeaders = restTemplate\n+        .postForEntity(\n+            LOCALHOST + \":\" + client2Port + \"/addSessionNote\",\n+            request,\n+            String.class)\n+        .getHeaders();\n+\n+    String sessionAsCookie = responseHeaders.get(\"Set-Cookie\").get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b71b6bc3ce110e1e7e9bd167615790e556ec27e2"}, "originalPosition": 357}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4145, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}