{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MzgyODQ5", "number": 4973, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoyMDozN1rODz3FwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoyMDozN1rODz3FwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NzA2NTYxOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/LoopingThreads.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoyMDozN1rOGIhn-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQxNzowODoxNlrOGJO_sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5MjY5Ng==", "bodyText": "Should the call of Thread.yield be optional? I'm not sure you would always want this", "url": "https://github.com/apache/geode/pull/4973#discussion_r411592696", "createdAt": "2020-04-20T18:20:37Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/LoopingThreads.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.general;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+public class LoopingThreads {\n+  private final int iterationCount;\n+  private final Function<Integer, Object>[] functions;\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public LoopingThreads(int iterationCount,\n+      Function... functions) {\n+    this.iterationCount = iterationCount;\n+    this.functions = (Function<Integer, Object>[]) functions;\n+  }\n+\n+  public void run() {\n+    CountDownLatch latch = new CountDownLatch(1);\n+    Stream<LoopingThread> loopingThreadStream = Arrays\n+        .stream(functions)\n+        .map((r) -> new LoopingThread(r, iterationCount, latch))\n+        .map((t) -> {\n+          t.start();\n+          return t;\n+        });\n+\n+    latch.countDown();\n+\n+    loopingThreadStream.forEach(loopingThread -> {\n+      try {\n+        loopingThread.join();\n+      } catch (InterruptedException e) {\n+        throw new RuntimeException(e);\n+      }\n+    });\n+\n+  }\n+\n+  private class LoopingRunnable implements Runnable {\n+    private final Function<Integer, Object> runnable;\n+    private final int iterationCount;\n+    private CountDownLatch startLatch;\n+\n+    public LoopingRunnable(Function<Integer, Object> runnable, int iterationCount,\n+        CountDownLatch startLatch) {\n+      this.runnable = runnable;\n+      this.iterationCount = iterationCount;\n+      this.startLatch = startLatch;\n+    }\n+\n+    @Override\n+    public void run() {\n+      try {\n+        startLatch.await();\n+      } catch (InterruptedException e) {\n+        throw new RuntimeException(e);\n+      }\n+      for (int i = 0; i < iterationCount; i++) {\n+        runnable.apply(i);\n+        Thread.yield();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0163d1b0eb1257a525e54a78c7f8ccbfdc91368a"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTY5MTQ0NA==", "bodyText": "That makes sense. I want to leave it like this as the default, though, and if someone wants to change the behavior they can add that functionality.  How do you feel about that?  Or do you think not having this as an option is a dealbreaker.", "url": "https://github.com/apache/geode/pull/4973#discussion_r411691444", "createdAt": "2020-04-20T21:05:00Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/LoopingThreads.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.general;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+public class LoopingThreads {\n+  private final int iterationCount;\n+  private final Function<Integer, Object>[] functions;\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public LoopingThreads(int iterationCount,\n+      Function... functions) {\n+    this.iterationCount = iterationCount;\n+    this.functions = (Function<Integer, Object>[]) functions;\n+  }\n+\n+  public void run() {\n+    CountDownLatch latch = new CountDownLatch(1);\n+    Stream<LoopingThread> loopingThreadStream = Arrays\n+        .stream(functions)\n+        .map((r) -> new LoopingThread(r, iterationCount, latch))\n+        .map((t) -> {\n+          t.start();\n+          return t;\n+        });\n+\n+    latch.countDown();\n+\n+    loopingThreadStream.forEach(loopingThread -> {\n+      try {\n+        loopingThread.join();\n+      } catch (InterruptedException e) {\n+        throw new RuntimeException(e);\n+      }\n+    });\n+\n+  }\n+\n+  private class LoopingRunnable implements Runnable {\n+    private final Function<Integer, Object> runnable;\n+    private final int iterationCount;\n+    private CountDownLatch startLatch;\n+\n+    public LoopingRunnable(Function<Integer, Object> runnable, int iterationCount,\n+        CountDownLatch startLatch) {\n+      this.runnable = runnable;\n+      this.iterationCount = iterationCount;\n+      this.startLatch = startLatch;\n+    }\n+\n+    @Override\n+    public void run() {\n+      try {\n+        startLatch.await();\n+      } catch (InterruptedException e) {\n+        throw new RuntimeException(e);\n+      }\n+      for (int i = 0; i < iterationCount; i++) {\n+        runnable.apply(i);\n+        Thread.yield();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5MjY5Ng=="}, "originalCommit": {"oid": "0163d1b0eb1257a525e54a78c7f8ccbfdc91368a"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMxODgzMA==", "bodyText": "not a deal breaker. I just merged in a new dunit test for concurrent testing of SADD. It would be nice to have this encapsulated concurrency code in that test before it becomes the pattern for subsequent tests", "url": "https://github.com/apache/geode/pull/4973#discussion_r412318830", "createdAt": "2020-04-21T16:46:41Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/LoopingThreads.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.general;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+public class LoopingThreads {\n+  private final int iterationCount;\n+  private final Function<Integer, Object>[] functions;\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public LoopingThreads(int iterationCount,\n+      Function... functions) {\n+    this.iterationCount = iterationCount;\n+    this.functions = (Function<Integer, Object>[]) functions;\n+  }\n+\n+  public void run() {\n+    CountDownLatch latch = new CountDownLatch(1);\n+    Stream<LoopingThread> loopingThreadStream = Arrays\n+        .stream(functions)\n+        .map((r) -> new LoopingThread(r, iterationCount, latch))\n+        .map((t) -> {\n+          t.start();\n+          return t;\n+        });\n+\n+    latch.countDown();\n+\n+    loopingThreadStream.forEach(loopingThread -> {\n+      try {\n+        loopingThread.join();\n+      } catch (InterruptedException e) {\n+        throw new RuntimeException(e);\n+      }\n+    });\n+\n+  }\n+\n+  private class LoopingRunnable implements Runnable {\n+    private final Function<Integer, Object> runnable;\n+    private final int iterationCount;\n+    private CountDownLatch startLatch;\n+\n+    public LoopingRunnable(Function<Integer, Object> runnable, int iterationCount,\n+        CountDownLatch startLatch) {\n+      this.runnable = runnable;\n+      this.iterationCount = iterationCount;\n+      this.startLatch = startLatch;\n+    }\n+\n+    @Override\n+    public void run() {\n+      try {\n+        startLatch.await();\n+      } catch (InterruptedException e) {\n+        throw new RuntimeException(e);\n+      }\n+      for (int i = 0; i < iterationCount; i++) {\n+        runnable.apply(i);\n+        Thread.yield();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5MjY5Ng=="}, "originalCommit": {"oid": "0163d1b0eb1257a525e54a78c7f8ccbfdc91368a"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjMzNjA1MA==", "bodyText": "alright.  it's a real PR now.", "url": "https://github.com/apache/geode/pull/4973#discussion_r412336050", "createdAt": "2020-04-21T17:08:16Z", "author": {"login": "prettyClouds"}, "path": "geode-redis/src/integrationTest/java/org/apache/geode/redis/general/LoopingThreads.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.redis.general;\n+\n+import java.util.Arrays;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.function.Function;\n+import java.util.stream.Stream;\n+\n+public class LoopingThreads {\n+  private final int iterationCount;\n+  private final Function<Integer, Object>[] functions;\n+\n+  @SuppressWarnings(\"unchecked\")\n+  public LoopingThreads(int iterationCount,\n+      Function... functions) {\n+    this.iterationCount = iterationCount;\n+    this.functions = (Function<Integer, Object>[]) functions;\n+  }\n+\n+  public void run() {\n+    CountDownLatch latch = new CountDownLatch(1);\n+    Stream<LoopingThread> loopingThreadStream = Arrays\n+        .stream(functions)\n+        .map((r) -> new LoopingThread(r, iterationCount, latch))\n+        .map((t) -> {\n+          t.start();\n+          return t;\n+        });\n+\n+    latch.countDown();\n+\n+    loopingThreadStream.forEach(loopingThread -> {\n+      try {\n+        loopingThread.join();\n+      } catch (InterruptedException e) {\n+        throw new RuntimeException(e);\n+      }\n+    });\n+\n+  }\n+\n+  private class LoopingRunnable implements Runnable {\n+    private final Function<Integer, Object> runnable;\n+    private final int iterationCount;\n+    private CountDownLatch startLatch;\n+\n+    public LoopingRunnable(Function<Integer, Object> runnable, int iterationCount,\n+        CountDownLatch startLatch) {\n+      this.runnable = runnable;\n+      this.iterationCount = iterationCount;\n+      this.startLatch = startLatch;\n+    }\n+\n+    @Override\n+    public void run() {\n+      try {\n+        startLatch.await();\n+      } catch (InterruptedException e) {\n+        throw new RuntimeException(e);\n+      }\n+      for (int i = 0; i < iterationCount; i++) {\n+        runnable.apply(i);\n+        Thread.yield();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5MjY5Ng=="}, "originalCommit": {"oid": "0163d1b0eb1257a525e54a78c7f8ccbfdc91368a"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4341, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}