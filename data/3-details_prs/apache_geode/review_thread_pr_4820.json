{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NTIyNzk2", "number": 4820, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMjowOTozOVrODqBvkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNToyMzoxN1rODqbQHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mzk1MzQ0OnYy", "diffSide": "RIGHT", "path": "geode-core/src/test/java/org/apache/geode/distributed/internal/InternalLocatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMjowOTozOVrOF5kgTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo0MDo0MFrOF6TJyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxMTI0NQ==", "bodyText": "I think most of the common setup stuff could be moved into a setup method. Then only the stuff that differs from one test to another would remain. That would make the test-specific details stand out more, and would more clearly express the intent of each test.\nIf only a few setup details remain in each test, and the intent is obvious, that's enough. If there are more than a few details, perhaps they can be hidden in helper methods with that express the intent.", "url": "https://github.com/apache/geode/pull/4820#discussion_r395911245", "createdAt": "2020-03-20T22:09:39Z", "author": {"login": "demery-pivotal"}, "path": "geode-core/src/test/java/org/apache/geode/distributed/internal/InternalLocatorTest.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.distributed.internal;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.internal.HttpService;\n+import org.apache.geode.internal.cache.InternalCacheForClientAccess;\n+import org.apache.geode.internal.cache.InternalRegionFactory;\n+import org.apache.geode.internal.security.SecurableCommunicationChannel;\n+import org.apache.geode.logging.internal.LoggingSession;\n+import org.apache.geode.management.internal.BaseManagementService;\n+\n+public class InternalLocatorTest {\n+  @Test\n+  public void startClusterManagementServiceWithRestServiceEnabledInvokesStartManager()\n+      throws IOException {\n+    LoggingSession loggingSession = mock(LoggingSession.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3213a44aad6764869cad84305796f72f10ac2ebf"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NTUyOQ==", "bodyText": "I refactored common code into a couple of helper methods. I hope that at some point this unit test will have more coverage for this class so I did not put this code into a common setup method. I think most of this code is specific to testing the \"startClusterManagementService\" method.", "url": "https://github.com/apache/geode/pull/4820#discussion_r396675529", "createdAt": "2020-03-23T18:40:40Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-core/src/test/java/org/apache/geode/distributed/internal/InternalLocatorTest.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.distributed.internal;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.internal.HttpService;\n+import org.apache.geode.internal.cache.InternalCacheForClientAccess;\n+import org.apache.geode.internal.cache.InternalRegionFactory;\n+import org.apache.geode.internal.security.SecurableCommunicationChannel;\n+import org.apache.geode.logging.internal.LoggingSession;\n+import org.apache.geode.management.internal.BaseManagementService;\n+\n+public class InternalLocatorTest {\n+  @Test\n+  public void startClusterManagementServiceWithRestServiceEnabledInvokesStartManager()\n+      throws IOException {\n+    LoggingSession loggingSession = mock(LoggingSession.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxMTI0NQ=="}, "originalCommit": {"oid": "3213a44aad6764869cad84305796f72f10ac2ebf"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1Mzk4NTU4OnYy", "diffSide": "RIGHT", "path": "geode-core/src/test/java/org/apache/geode/distributed/internal/InternalLocatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQyMjoyNjozMlrOF5kzgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODo0Mjo0MFrOF6TOTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxNjE2Mg==", "bodyText": "Instead of adding a new test-only method, try this:\n\nAdd a new Supplier<InternalCache> parameter to the InternalLocator constructor, and let the constructor store the supplier in a field for later use.\nChange InternalLocator.getCache() to call the supplier instead of calling GemFireCacheImpl.getInstance() directly.\nChange InternalLocator.createLocator(\u2026) and InternalLocatorIntegrationTest to pass GemFireCacheImpl::getInstance to the InternalLocator constructor.\nIn these new tests, pass the mock cache to the InternalLocator constructor.", "url": "https://github.com/apache/geode/pull/4820#discussion_r395916162", "createdAt": "2020-03-20T22:26:32Z", "author": {"login": "demery-pivotal"}, "path": "geode-core/src/test/java/org/apache/geode/distributed/internal/InternalLocatorTest.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.distributed.internal;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.internal.HttpService;\n+import org.apache.geode.internal.cache.InternalCacheForClientAccess;\n+import org.apache.geode.internal.cache.InternalRegionFactory;\n+import org.apache.geode.internal.security.SecurableCommunicationChannel;\n+import org.apache.geode.logging.internal.LoggingSession;\n+import org.apache.geode.management.internal.BaseManagementService;\n+\n+public class InternalLocatorTest {\n+  @Test\n+  public void startClusterManagementServiceWithRestServiceEnabledInvokesStartManager()\n+      throws IOException {\n+    LoggingSession loggingSession = mock(LoggingSession.class);\n+    DistributionConfigImpl distributionConfig = mock(DistributionConfigImpl.class);\n+    when(distributionConfig.getJmxManager()).thenReturn(true);\n+    when(distributionConfig.getLocators()).thenReturn(\"\");\n+    when(distributionConfig.getSecurableCommunicationChannels())\n+        .thenReturn(new SecurableCommunicationChannel[] {});\n+    when(distributionConfig.getSecurityAuthTokenEnabledComponents()).thenReturn(new String[] {});\n+    InternalLocator internalLocator = new InternalLocator(0, loggingSession, null, null, null, null,\n+        null, null, distributionConfig, null);\n+    InternalCacheForClientAccess cache = mock(InternalCacheForClientAccess.class);\n+    InternalRegionFactory regionFactory = mock(InternalRegionFactory.class);\n+    when(cache.createInternalRegionFactory(RegionShortcut.REPLICATE)).thenReturn(regionFactory);\n+    when(cache.getOptionalService(HttpService.class))\n+        .thenReturn(Optional.of(mock(HttpService.class)));\n+    when(cache.getCacheForProcessingClientRequests()).thenReturn(cache);\n+    BaseManagementService managementService = mock(BaseManagementService.class);\n+    BaseManagementService.setManagementService(cache, managementService);\n+    internalLocator.setInternalCache(cache);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3213a44aad6764869cad84305796f72f10ac2ebf"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NjY4Nw==", "bodyText": "I was able to get rid of the new test-only method. But I did it in a different way that did not require the constructor to change. The method being tested now takes as a parameter the cache it should use. Let me know what you think.", "url": "https://github.com/apache/geode/pull/4820#discussion_r396676687", "createdAt": "2020-03-23T18:42:40Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-core/src/test/java/org/apache/geode/distributed/internal/InternalLocatorTest.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.distributed.internal;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.catchThrowable;\n+import static org.mockito.Mockito.doThrow;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.IOException;\n+import java.util.Optional;\n+\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.RegionShortcut;\n+import org.apache.geode.cache.internal.HttpService;\n+import org.apache.geode.internal.cache.InternalCacheForClientAccess;\n+import org.apache.geode.internal.cache.InternalRegionFactory;\n+import org.apache.geode.internal.security.SecurableCommunicationChannel;\n+import org.apache.geode.logging.internal.LoggingSession;\n+import org.apache.geode.management.internal.BaseManagementService;\n+\n+public class InternalLocatorTest {\n+  @Test\n+  public void startClusterManagementServiceWithRestServiceEnabledInvokesStartManager()\n+      throws IOException {\n+    LoggingSession loggingSession = mock(LoggingSession.class);\n+    DistributionConfigImpl distributionConfig = mock(DistributionConfigImpl.class);\n+    when(distributionConfig.getJmxManager()).thenReturn(true);\n+    when(distributionConfig.getLocators()).thenReturn(\"\");\n+    when(distributionConfig.getSecurableCommunicationChannels())\n+        .thenReturn(new SecurableCommunicationChannel[] {});\n+    when(distributionConfig.getSecurityAuthTokenEnabledComponents()).thenReturn(new String[] {});\n+    InternalLocator internalLocator = new InternalLocator(0, loggingSession, null, null, null, null,\n+        null, null, distributionConfig, null);\n+    InternalCacheForClientAccess cache = mock(InternalCacheForClientAccess.class);\n+    InternalRegionFactory regionFactory = mock(InternalRegionFactory.class);\n+    when(cache.createInternalRegionFactory(RegionShortcut.REPLICATE)).thenReturn(regionFactory);\n+    when(cache.getOptionalService(HttpService.class))\n+        .thenReturn(Optional.of(mock(HttpService.class)));\n+    when(cache.getCacheForProcessingClientRequests()).thenReturn(cache);\n+    BaseManagementService managementService = mock(BaseManagementService.class);\n+    BaseManagementService.setManagementService(cache, managementService);\n+    internalLocator.setInternalCache(cache);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTkxNjE2Mg=="}, "originalCommit": {"oid": "3213a44aad6764869cad84305796f72f10ac2ebf"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1ODEzMjc4OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/InternalLocator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxNToyMzoxN1rOF6Kfow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxODozODoyN1rOF6TE7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzMzY2Nw==", "bodyText": "Maybe put a comment here stating why jmxManager is needed when starting management rest service", "url": "https://github.com/apache/geode/pull/4820#discussion_r396533667", "createdAt": "2020-03-23T15:23:17Z", "author": {"login": "jinmeiliao"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/InternalLocator.java", "diffHunk": "@@ -815,6 +822,10 @@ void startClusterManagementService() throws IOException {\n \n     if (distributionConfig.getEnableManagementRestService()) {\n       myCache.getOptionalService(HttpService.class).ifPresent(x -> {\n+        ManagementService managementService = ManagementService.getManagementService(myCache);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3213a44aad6764869cad84305796f72f10ac2ebf"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY3NDI4Ng==", "bodyText": "added a comment", "url": "https://github.com/apache/geode/pull/4820#discussion_r396674286", "createdAt": "2020-03-23T18:38:27Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/InternalLocator.java", "diffHunk": "@@ -815,6 +822,10 @@ void startClusterManagementService() throws IOException {\n \n     if (distributionConfig.getEnableManagementRestService()) {\n       myCache.getOptionalService(HttpService.class).ifPresent(x -> {\n+        ManagementService managementService = ManagementService.getManagementService(myCache);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjUzMzY2Nw=="}, "originalCommit": {"oid": "3213a44aad6764869cad84305796f72f10ac2ebf"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4385, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}