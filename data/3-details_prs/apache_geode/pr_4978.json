{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NjMwMDky", "number": 4978, "title": "GEODE-8004: Fix for regression introduced by GEODE-7565", "bodyText": "This PR reverts the revert of GEODE-7565 and introduces a fix for the problem identified", "createdAt": "2020-04-21T12:03:22Z", "url": "https://github.com/apache/geode/pull/4978", "merged": true, "mergeCommit": {"oid": "be877883f3e123ba3c00af7d01464c2c80785522"}, "closed": true, "closedAt": "2020-05-08T13:11:48Z", "author": {"login": "alb3rtobr"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZ4-zMAFqTM5NzYxNTg2MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfONcCgFqTQwODEwODI0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NjE1ODYx", "url": "https://github.com/apache/geode/pull/4978#pullrequestreview-397615861", "createdAt": "2020-04-21T19:37:28Z", "commit": {"oid": "23a1eb1eb0d4861568be6bf5acbcc9055837b070"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3OTg0MTQ4", "url": "https://github.com/apache/geode/pull/4978#pullrequestreview-397984148", "createdAt": "2020-04-22T08:57:57Z", "commit": {"oid": "23a1eb1eb0d4861568be6bf5acbcc9055837b070"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MDE0NzM2", "url": "https://github.com/apache/geode/pull/4978#pullrequestreview-398014736", "createdAt": "2020-04-22T09:35:47Z", "commit": {"oid": "23a1eb1eb0d4861568be6bf5acbcc9055837b070"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOTozNTo0N1rOGJtBcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwOTo0Njo0M1rOGJtfnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgyODAxOQ==", "bodyText": "The above fields are not used anywhere, can we just remove them?, or am I missing something?.", "url": "https://github.com/apache/geode/pull/4978#discussion_r412828019", "createdAt": "2020-04-22T09:35:47Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/cache/client/internal/PingOp.java", "diffHunk": "@@ -43,12 +45,16 @@ private PingOp() {\n   static class PingOpImpl extends AbstractOp {\n \n     private long startTime;\n+    private ServerLocation location;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23a1eb1eb0d4861568be6bf5acbcc9055837b070"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjgzNTc0MQ==", "bodyText": "These operations can be directly executed within the PingOpImpl constructor, as we do with the rest of the messages. I've also noted that you changed the clearMessage flag from false to true as well, any reasons behind that?.", "url": "https://github.com/apache/geode/pull/4978#discussion_r412835741", "createdAt": "2020-04-22T09:46:43Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/cache/client/internal/PingOp.java", "diffHunk": "@@ -65,8 +71,9 @@ protected boolean needsUserId() {\n     @Override\n     protected void sendMessage(Connection cnx) throws Exception {\n       getMessage().clearMessageHasSecurePartFlag();\n-      this.startTime = System.currentTimeMillis();\n-      getMessage().send(false);\n+      getMessage().setNumberOfParts(1);\n+      getMessage().addObjPart(serverID);\n+      getMessage().send(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23a1eb1eb0d4861568be6bf5acbcc9055837b070"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5ODk0NzY2", "url": "https://github.com/apache/geode/pull/4978#pullrequestreview-399894766", "createdAt": "2020-04-24T12:19:29Z", "commit": {"oid": "6e0e44ca076883fb21d6d3f8be227a50dcd0f577"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjoxOTozMFrOGLVBIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMjoyNTo0M1rOGLVPxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUzMTg3Mw==", "bodyText": "You don't need to expose the MemberIdentifier here, you can directly use InternalDistributedMember.compareTo(DistributedMember o, boolean compareMemberData, boolean compareViewIds), which internally delegates to the MemberIdentifier class.", "url": "https://github.com/apache/geode/pull/4978#discussion_r414531873", "createdAt": "2020-04-24T12:19:30Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/membership/InternalDistributedMember.java", "diffHunk": "@@ -641,4 +641,8 @@ public UUID getUUID() {\n   public interface HostnameResolver {\n     InetAddress getInetAddress(ServerLocation location) throws UnknownHostException;\n   }\n+\n+  public MemberIdentifier getMemberIdentifier() {\n+    return memberIdentifier;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e0e44ca076883fb21d6d3f8be227a50dcd0f577"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDUzNTYyMA==", "bodyText": "The issue described here still remains, you're comparing myID (instance of InternalDistributedMember) against targetServer.getMemberIdentifier() (instance of MemberIdentifier), so the comparison fails with a ClassCastException and the client logs the following:\n[warn 2020/04/24 01:33:02.869 PDT <poolTimer-edgeDescript-29> tid=0x112] Pool unexpected java.lang.ClassCastException: [B cannot be cast to java.lang.Throwable connection=Pooled Connection to rs-GEM-2885-0120a0i32xlarge-hydra-client-4:20245: Connection[DESTROYED]). Server unreachable: could not connect after 1 attempts", "url": "https://github.com/apache/geode/pull/4978#discussion_r414535620", "createdAt": "2020-04-24T12:25:43Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/command/Ping.java", "diffHunk": "@@ -50,11 +51,17 @@ public void cmdExecute(final Message clientMessage, final ServerConnection serve\n     }\n     if (clientMessage.getNumberOfParts() > 0) {\n       try {\n-        DistributedMember targetServer = (DistributedMember) clientMessage.getPart(0).getObject();\n-        DistributedMember myID = serverConnection.getCache().getMyId();\n+        InternalDistributedMember targetServer =\n+            (InternalDistributedMember) clientMessage.getPart(0).getObject();\n+        InternalDistributedMember myID = serverConnection.getCache().getMyId();\n         if (!myID.equals(targetServer)) {\n-          pingCorrectServer(clientMessage, targetServer, serverConnection);\n-          writeReply(clientMessage, serverConnection);\n+          if (myID.compareTo(targetServer.getMemberIdentifier(), true, false) == 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e0e44ca076883fb21d6d3f8be227a50dcd0f577"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5OTM1NTQ4", "url": "https://github.com/apache/geode/pull/4978#pullrequestreview-399935548", "createdAt": "2020-04-24T13:16:18Z", "commit": {"oid": "5105b6424f1c38e13ccd10d61ac6d7b185208010"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzoxNjoxOFrOGLXLfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQxMzoxNjoxOFrOGLXLfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDU2NzI5NQ==", "bodyText": "@jujoramos Implementing tests I realized this writeReply here is duplicated, pingCorrectServer is already calling it when the ping is forwarded. So this should be the cause for the error you saw about an unexpected REPLY message.", "url": "https://github.com/apache/geode/pull/4978#discussion_r414567295", "createdAt": "2020-04-24T13:16:18Z", "author": {"login": "alb3rtobr"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/command/Ping.java", "diffHunk": "@@ -55,12 +55,11 @@ public void cmdExecute(final Message clientMessage, final ServerConnection serve\n             (InternalDistributedMember) clientMessage.getPart(0).getObject();\n         InternalDistributedMember myID = serverConnection.getCache().getMyId();\n         if (!myID.equals(targetServer)) {\n-          if (myID.compareTo(targetServer.getMemberIdentifier(), true, false) == 0) {\n+          if (myID.compareTo(targetServer, true, false) == 0) {\n             logger.warn(\"Target server {} has different viewId {}\", targetServer, myID);\n             writeErrorResponse(clientMessage, MessageType.EXCEPTION, serverConnection);\n           } else {\n             pingCorrectServer(clientMessage, targetServer, serverConnection);\n-            writeReply(clientMessage, serverConnection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5105b6424f1c38e13ccd10d61ac6d7b185208010"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMDExMDc1", "url": "https://github.com/apache/geode/pull/4978#pullrequestreview-401011075", "createdAt": "2020-04-27T14:31:50Z", "commit": {"oid": "086b36a6265fd3aade6e1e2b2c3ab5c501e8374b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDozMTo1MFrOGMmTTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxNDozMzoyMFrOGMmX_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg2MzYyOA==", "bodyText": "This entire class has several modifications and new non-trivial methods, we should add tests to verify the correct behaviour.", "url": "https://github.com/apache/geode/pull/4978#discussion_r415863628", "createdAt": "2020-04-27T14:31:50Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/LocatorLoadSnapshot.java", "diffHunk": "@@ -50,7 +50,8 @@\n \n   private final Map<ServerLocation, String[]> serverGroupMap = new HashMap<>();\n \n-  private final Map<String, Map<ServerLocation, LoadHolder>> connectionLoadMap = new HashMap<>();\n+  private final Map<String, Map<ServerLocationAndMemberId, LoadHolder>> connectionLoadMap =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "086b36a6265fd3aade6e1e2b2c3ab5c501e8374b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg2NDE4OQ==", "bodyText": "Unnecessary empty line here.", "url": "https://github.com/apache/geode/pull/4978#discussion_r415864189", "createdAt": "2020-04-27T14:32:36Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/membership/InternalDistributedMember.java", "diffHunk": "@@ -641,4 +641,5 @@ public UUID getUUID() {\n   public interface HostnameResolver {\n     InetAddress getInetAddress(ServerLocation location) throws UnknownHostException;\n   }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "086b36a6265fd3aade6e1e2b2c3ab5c501e8374b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTg2NDgyOQ==", "bodyText": "This is a new class, unit and distribution tests are required.", "url": "https://github.com/apache/geode/pull/4978#discussion_r415864829", "createdAt": "2020-04-27T14:33:20Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/DistributedPingMessage.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache;\n+\n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+\n+import org.apache.geode.distributed.DistributedMember;\n+import org.apache.geode.distributed.internal.ClusterDistributionManager;\n+import org.apache.geode.distributed.internal.HighPriorityDistributionMessage;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.cache.tier.sockets.ClientHealthMonitor;\n+import org.apache.geode.internal.cache.tier.sockets.ClientProxyMembershipID;\n+import org.apache.geode.internal.serialization.DeserializationContext;\n+import org.apache.geode.internal.serialization.SerializationContext;\n+import org.apache.geode.internal.serialization.Version;\n+\n+public class DistributedPingMessage extends HighPriorityDistributionMessage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "086b36a6265fd3aade6e1e2b2c3ab5c501e8374b"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6dc399547ba5f730770180305176bbbb9ef2a41", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/b6dc399547ba5f730770180305176bbbb9ef2a41", "committedDate": "2020-04-30T11:03:51Z", "message": "Revert \"Revert \"GEODE-7565: Allow gateway receivers with same host and port (#4824)\" (#4974)\"\n\nThis reverts commit e1c17e16fd28174b37a5426b30d729a94d6766a3."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d783a24c3dd0f9d69748e22e81948e7102f4e431", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/d783a24c3dd0f9d69748e22e81948e7102f4e431", "committedDate": "2020-04-30T11:03:51Z", "message": "Change returned message type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63d7644423b6e5006386595d0a8352b2c6be74d9", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/63d7644423b6e5006386595d0a8352b2c6be74d9", "committedDate": "2020-04-30T11:03:51Z", "message": "Change returned message type from REPLY to EXCEPTION"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f8f2621c73650dc16106e894a749fb5e2733124", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/5f8f2621c73650dc16106e894a749fb5e2733124", "committedDate": "2020-04-30T11:03:51Z", "message": "Remove unused attributes from PingOp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfc87cee97614ff3b115eef34a410f637c126b5c", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/bfc87cee97614ff3b115eef34a410f637c126b5c", "committedDate": "2020-04-30T11:03:51Z", "message": "Use views info to compare servers in ping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a00d9144071a5fd5f64e3a43dca3b8bd347a7e8", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/8a00d9144071a5fd5f64e3a43dca3b8bd347a7e8", "committedDate": "2020-04-30T11:03:51Z", "message": "Fix spotlessJava"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9bdcddc0bd94411a3382535d89330e5c4e3599b", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/d9bdcddc0bd94411a3382535d89330e5c4e3599b", "committedDate": "2020-04-30T11:03:51Z", "message": "Fix distributed member comparision"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "811b76c80b801d3ab9bfb6f8339680af42c87bac", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/811b76c80b801d3ab9bfb6f8339680af42c87bac", "committedDate": "2020-04-30T11:03:51Z", "message": "Ping tests added"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86b202143c7c167ba369fe97f4a15d052d2a0724", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/86b202143c7c167ba369fe97f4a15d052d2a0724", "committedDate": "2020-04-30T11:03:51Z", "message": "Dont forward ping if target server view is different"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55b458bedb736d03a5957510edc0f582e0ad5ec3", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/55b458bedb736d03a5957510edc0f582e0ad5ec3", "committedDate": "2020-04-30T11:03:51Z", "message": "Remove blank line"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d09d583f381d252436694ef8b4fae79f81ed436", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/0d09d583f381d252436694ef8b4fae79f81ed436", "committedDate": "2020-04-30T11:03:51Z", "message": "More fixes and distributed tests for ping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc6b7fd070dcff51ce08ccfe907a25672b13a022", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/dc6b7fd070dcff51ce08ccfe907a25672b13a022", "committedDate": "2020-04-30T11:03:51Z", "message": "Dont use empty member IDs in LocatorLoadSnapshot UT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "706b153b70d0244c19654b37a1eed335992e6704", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/706b153b70d0244c19654b37a1eed335992e6704", "committedDate": "2020-04-30T11:03:51Z", "message": "ServerLocationAndMemberId UT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0400408b7dd0acda2ccd1cc4c1bb6bf84f31fe35", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/0400408b7dd0acda2ccd1cc4c1bb6bf84f31fe35", "committedDate": "2020-04-30T11:03:51Z", "message": "Dont use empty member IDs in LocatorLoadSnapshotIntegrationTest"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "85c6d0f44950f6503d868b19751122707072e97a", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/85c6d0f44950f6503d868b19751122707072e97a", "committedDate": "2020-04-30T10:57:59Z", "message": "Merge branch 'develop' into feature/GEODE-8004"}, "afterCommit": {"oid": "0400408b7dd0acda2ccd1cc4c1bb6bf84f31fe35", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/0400408b7dd0acda2ccd1cc4c1bb6bf84f31fe35", "committedDate": "2020-04-30T11:03:51Z", "message": "Dont use empty member IDs in LocatorLoadSnapshotIntegrationTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e60f7aac384977019e15f423b0416e7d358fbb4a", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/e60f7aac384977019e15f423b0416e7d358fbb4a", "committedDate": "2020-04-30T12:23:46Z", "message": "Remove unnecessary findBestServersWithMemberId method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "759492734e2fe7877b995429b45c7ff3cd072c9e", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/759492734e2fe7877b995429b45c7ff3cd072c9e", "committedDate": "2020-04-30T17:49:40Z", "message": "DistributedPingMessage UT"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "edf71b5ee4a960e52e3bafc4e9bc84c76062e3c7", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/edf71b5ee4a960e52e3bafc4e9bc84c76062e3c7", "committedDate": "2020-04-30T17:20:30Z", "message": "Empty commit to retrigger CI"}, "afterCommit": {"oid": "759492734e2fe7877b995429b45c7ff3cd072c9e", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/759492734e2fe7877b995429b45c7ff3cd072c9e", "committedDate": "2020-04-30T17:49:40Z", "message": "DistributedPingMessage UT"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0MTE0NDAw", "url": "https://github.com/apache/geode/pull/4978#pullrequestreview-404114400", "createdAt": "2020-05-01T11:06:17Z", "commit": {"oid": "759492734e2fe7877b995429b45c7ff3cd072c9e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMTowNjoxN1rOGPHUDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMTo1NjoyMVrOGPICEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwMTY0NA==", "bodyText": "The exception is not thrown anywhere in the method, it can be removed.", "url": "https://github.com/apache/geode/pull/4978#discussion_r418501644", "createdAt": "2020-05-01T11:06:17Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/PingOpDistributedTest.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.tier.sockets;\n+\n+import static java.util.Arrays.asList;\n+import static org.apache.geode.internal.AvailablePortHelper.getRandomAvailableTCPPortsForDUnitSite;\n+import static org.apache.geode.test.dunit.VM.getVM;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.PoolFactory;\n+import org.apache.geode.cache.client.PoolManager;\n+import org.apache.geode.cache.client.ServerOperationException;\n+import org.apache.geode.cache.client.internal.PingOp;\n+import org.apache.geode.cache.client.internal.PoolImpl;\n+import org.apache.geode.cache.server.CacheServer;\n+import org.apache.geode.distributed.internal.ServerLocation;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.test.awaitility.GeodeAwaitility;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.ClientCacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.junit.rules.serializable.SerializableTemporaryFolder;\n+import org.apache.geode.test.junit.rules.serializable.SerializableTestName;\n+\n+public class PingOpDistributedTest implements Serializable {\n+\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+\n+  @Rule\n+  public ClientCacheRule clientCacheRule = new ClientCacheRule();\n+\n+  @Rule\n+  public SerializableTestName testName = new SerializableTestName();\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule(2);\n+\n+  @Rule\n+  public SerializableTemporaryFolder folder = new SerializableTemporaryFolder();\n+\n+  private VM client;\n+  private VM server1, server2;\n+  private int server1Port, server2Port;\n+\n+\n+  private void initServer(int serverPort) throws IOException {\n+    cacheRule.createCache();\n+    CacheServer cacheServer = cacheRule.getCache().addCacheServer();\n+    cacheServer.setPort(serverPort);\n+\n+    // \"Disable\" the auto-ping for the duration of this test.\n+    cacheServer.setMaximumTimeBetweenPings((int) GeodeAwaitility.getTimeout().toMillis());\n+    cacheServer.start();\n+  }\n+\n+  private void initClient(String poolName, List<Integer> serverPorts) {\n+    final ClientCacheFactory clientCacheFactory = new ClientCacheFactory();\n+    clientCacheFactory.create();\n+\n+    PoolFactory poolFactory = PoolManager.createFactory();\n+    serverPorts.forEach(serverPort -> poolFactory.addServer(\"localhost\", serverPort));\n+\n+    // \"Disable\" the auto-ping for the duration of this test.\n+    poolFactory.setPingInterval((int) GeodeAwaitility.getTimeout().toMillis());\n+    poolFactory.create(poolName);\n+  }\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    int[] ports = getRandomAvailableTCPPortsForDUnitSite(2);\n+\n+    client = getVM(0);\n+    server1 = getVM(1);\n+    server2 = getVM(2);\n+    server1Port = ports[0];\n+    server2Port = ports[1];\n+    server1.invoke(() -> initServer(server1Port));\n+    server2.invoke(() -> initServer(server2Port));\n+  }\n+\n+  void parametrizedSetUp(String poolName, List<Integer> serverPorts) {\n+    client.invoke(() -> initClient(poolName, serverPorts));\n+  }\n+\n+  public void executePing(String poolName, int serverPort,\n+      InternalDistributedMember distributedMember) {\n+    PoolImpl poolImpl = (PoolImpl) PoolManager.find(poolName);\n+    PingOp.execute(poolImpl, new ServerLocation(\"localhost\", serverPort), distributedMember);\n+  }\n+\n+  public Long getSingleHeartBeat() {\n+    ClientHealthMonitor chm = ClientHealthMonitor.getInstance();\n+    if (chm.getClientHeartbeats().size() == 0) {\n+      return 0L;\n+    }\n+    assertThat(chm.getClientHeartbeats()).isNotEmpty().hasSize(1);\n+\n+    return chm.getClientHeartbeats().entrySet().iterator().next().getValue();\n+  }\n+\n+  @Test\n+  public void regularPingFlow() {\n+    final String poolName = testName.getMethodName();\n+    parametrizedSetUp(poolName, Collections.singletonList(server1Port));\n+    InternalDistributedMember distributedMember1 = (InternalDistributedMember) server1\n+        .invoke(() -> cacheRule.getCache().getDistributedSystem().getDistributedMember());\n+\n+    client.invoke(() -> executePing(poolName, server1Port, distributedMember1));\n+    Long firstHeartbeat = server1.invoke(this::getSingleHeartBeat);\n+\n+    client.invoke(() -> executePing(poolName, server1Port, distributedMember1));\n+    Long secondHeartbeat = server1.invoke(this::getSingleHeartBeat);\n+\n+    assertThat(secondHeartbeat).isGreaterThan(firstHeartbeat);\n+\n+  }\n+\n+  @Test\n+  public void memberShouldNotRedirectPingMessageWhenClientCachedViewIdIsWrong() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "759492734e2fe7877b995429b45c7ff3cd072c9e"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwMTc5Ng==", "bodyText": "The exception is not thrown anywhere in the method, it can be removed.", "url": "https://github.com/apache/geode/pull/4978#discussion_r418501796", "createdAt": "2020-05-01T11:06:47Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/PingOpDistributedTest.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.tier.sockets;\n+\n+import static java.util.Arrays.asList;\n+import static org.apache.geode.internal.AvailablePortHelper.getRandomAvailableTCPPortsForDUnitSite;\n+import static org.apache.geode.test.dunit.VM.getVM;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.PoolFactory;\n+import org.apache.geode.cache.client.PoolManager;\n+import org.apache.geode.cache.client.ServerOperationException;\n+import org.apache.geode.cache.client.internal.PingOp;\n+import org.apache.geode.cache.client.internal.PoolImpl;\n+import org.apache.geode.cache.server.CacheServer;\n+import org.apache.geode.distributed.internal.ServerLocation;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.test.awaitility.GeodeAwaitility;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.ClientCacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.junit.rules.serializable.SerializableTemporaryFolder;\n+import org.apache.geode.test.junit.rules.serializable.SerializableTestName;\n+\n+public class PingOpDistributedTest implements Serializable {\n+\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+\n+  @Rule\n+  public ClientCacheRule clientCacheRule = new ClientCacheRule();\n+\n+  @Rule\n+  public SerializableTestName testName = new SerializableTestName();\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule(2);\n+\n+  @Rule\n+  public SerializableTemporaryFolder folder = new SerializableTemporaryFolder();\n+\n+  private VM client;\n+  private VM server1, server2;\n+  private int server1Port, server2Port;\n+\n+\n+  private void initServer(int serverPort) throws IOException {\n+    cacheRule.createCache();\n+    CacheServer cacheServer = cacheRule.getCache().addCacheServer();\n+    cacheServer.setPort(serverPort);\n+\n+    // \"Disable\" the auto-ping for the duration of this test.\n+    cacheServer.setMaximumTimeBetweenPings((int) GeodeAwaitility.getTimeout().toMillis());\n+    cacheServer.start();\n+  }\n+\n+  private void initClient(String poolName, List<Integer> serverPorts) {\n+    final ClientCacheFactory clientCacheFactory = new ClientCacheFactory();\n+    clientCacheFactory.create();\n+\n+    PoolFactory poolFactory = PoolManager.createFactory();\n+    serverPorts.forEach(serverPort -> poolFactory.addServer(\"localhost\", serverPort));\n+\n+    // \"Disable\" the auto-ping for the duration of this test.\n+    poolFactory.setPingInterval((int) GeodeAwaitility.getTimeout().toMillis());\n+    poolFactory.create(poolName);\n+  }\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    int[] ports = getRandomAvailableTCPPortsForDUnitSite(2);\n+\n+    client = getVM(0);\n+    server1 = getVM(1);\n+    server2 = getVM(2);\n+    server1Port = ports[0];\n+    server2Port = ports[1];\n+    server1.invoke(() -> initServer(server1Port));\n+    server2.invoke(() -> initServer(server2Port));\n+  }\n+\n+  void parametrizedSetUp(String poolName, List<Integer> serverPorts) {\n+    client.invoke(() -> initClient(poolName, serverPorts));\n+  }\n+\n+  public void executePing(String poolName, int serverPort,\n+      InternalDistributedMember distributedMember) {\n+    PoolImpl poolImpl = (PoolImpl) PoolManager.find(poolName);\n+    PingOp.execute(poolImpl, new ServerLocation(\"localhost\", serverPort), distributedMember);\n+  }\n+\n+  public Long getSingleHeartBeat() {\n+    ClientHealthMonitor chm = ClientHealthMonitor.getInstance();\n+    if (chm.getClientHeartbeats().size() == 0) {\n+      return 0L;\n+    }\n+    assertThat(chm.getClientHeartbeats()).isNotEmpty().hasSize(1);\n+\n+    return chm.getClientHeartbeats().entrySet().iterator().next().getValue();\n+  }\n+\n+  @Test\n+  public void regularPingFlow() {\n+    final String poolName = testName.getMethodName();\n+    parametrizedSetUp(poolName, Collections.singletonList(server1Port));\n+    InternalDistributedMember distributedMember1 = (InternalDistributedMember) server1\n+        .invoke(() -> cacheRule.getCache().getDistributedSystem().getDistributedMember());\n+\n+    client.invoke(() -> executePing(poolName, server1Port, distributedMember1));\n+    Long firstHeartbeat = server1.invoke(this::getSingleHeartBeat);\n+\n+    client.invoke(() -> executePing(poolName, server1Port, distributedMember1));\n+    Long secondHeartbeat = server1.invoke(this::getSingleHeartBeat);\n+\n+    assertThat(secondHeartbeat).isGreaterThan(firstHeartbeat);\n+\n+  }\n+\n+  @Test\n+  public void memberShouldNotRedirectPingMessageWhenClientCachedViewIdIsWrong() throws IOException {\n+    final String poolName = testName.getMethodName();\n+    parametrizedSetUp(poolName, Collections.singletonList(server1Port));\n+    InternalDistributedMember distributedMember1 = (InternalDistributedMember) server1\n+        .invoke(() -> cacheRule.getCache().getDistributedSystem().getDistributedMember());\n+\n+    client.invoke(() -> {\n+      PoolImpl poolImpl = (PoolImpl) PoolManager.find(poolName);\n+      distributedMember1.setVmViewId(distributedMember1.getVmViewId() + 1);\n+      assertThatThrownBy(() -> {\n+        PingOp.execute(poolImpl, new ServerLocation(\"localhost\", server1Port), distributedMember1);\n+      }).isInstanceOf(ServerOperationException.class).hasMessageContaining(\"has different viewId:\");\n+    });\n+  }\n+\n+  @Test\n+  public void pingReturnsErrorIfTheTargetServerIsNotAMember() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "759492734e2fe7877b995429b45c7ff3cd072c9e"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwMjI2OQ==", "bodyText": "The exceptions are not thrown anywhere in the method, they can be removed.", "url": "https://github.com/apache/geode/pull/4978#discussion_r418502269", "createdAt": "2020-05-01T11:08:41Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/distributedTest/java/org/apache/geode/internal/cache/tier/sockets/PingOpDistributedTest.java", "diffHunk": "@@ -0,0 +1,202 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.tier.sockets;\n+\n+import static java.util.Arrays.asList;\n+import static org.apache.geode.internal.AvailablePortHelper.getRandomAvailableTCPPortsForDUnitSite;\n+import static org.apache.geode.test.dunit.VM.getVM;\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.assertj.core.api.Assertions.assertThatThrownBy;\n+\n+import java.io.IOException;\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+\n+import org.apache.geode.cache.client.ClientCacheFactory;\n+import org.apache.geode.cache.client.PoolFactory;\n+import org.apache.geode.cache.client.PoolManager;\n+import org.apache.geode.cache.client.ServerOperationException;\n+import org.apache.geode.cache.client.internal.PingOp;\n+import org.apache.geode.cache.client.internal.PoolImpl;\n+import org.apache.geode.cache.server.CacheServer;\n+import org.apache.geode.distributed.internal.ServerLocation;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.test.awaitility.GeodeAwaitility;\n+import org.apache.geode.test.dunit.VM;\n+import org.apache.geode.test.dunit.rules.CacheRule;\n+import org.apache.geode.test.dunit.rules.ClientCacheRule;\n+import org.apache.geode.test.dunit.rules.DistributedRule;\n+import org.apache.geode.test.junit.rules.serializable.SerializableTemporaryFolder;\n+import org.apache.geode.test.junit.rules.serializable.SerializableTestName;\n+\n+public class PingOpDistributedTest implements Serializable {\n+\n+  @Rule\n+  public CacheRule cacheRule = new CacheRule();\n+\n+  @Rule\n+  public ClientCacheRule clientCacheRule = new ClientCacheRule();\n+\n+  @Rule\n+  public SerializableTestName testName = new SerializableTestName();\n+\n+  @Rule\n+  public DistributedRule distributedRule = new DistributedRule(2);\n+\n+  @Rule\n+  public SerializableTemporaryFolder folder = new SerializableTemporaryFolder();\n+\n+  private VM client;\n+  private VM server1, server2;\n+  private int server1Port, server2Port;\n+\n+\n+  private void initServer(int serverPort) throws IOException {\n+    cacheRule.createCache();\n+    CacheServer cacheServer = cacheRule.getCache().addCacheServer();\n+    cacheServer.setPort(serverPort);\n+\n+    // \"Disable\" the auto-ping for the duration of this test.\n+    cacheServer.setMaximumTimeBetweenPings((int) GeodeAwaitility.getTimeout().toMillis());\n+    cacheServer.start();\n+  }\n+\n+  private void initClient(String poolName, List<Integer> serverPorts) {\n+    final ClientCacheFactory clientCacheFactory = new ClientCacheFactory();\n+    clientCacheFactory.create();\n+\n+    PoolFactory poolFactory = PoolManager.createFactory();\n+    serverPorts.forEach(serverPort -> poolFactory.addServer(\"localhost\", serverPort));\n+\n+    // \"Disable\" the auto-ping for the duration of this test.\n+    poolFactory.setPingInterval((int) GeodeAwaitility.getTimeout().toMillis());\n+    poolFactory.create(poolName);\n+  }\n+\n+  @Before\n+  public void setUp() throws IOException {\n+    int[] ports = getRandomAvailableTCPPortsForDUnitSite(2);\n+\n+    client = getVM(0);\n+    server1 = getVM(1);\n+    server2 = getVM(2);\n+    server1Port = ports[0];\n+    server2Port = ports[1];\n+    server1.invoke(() -> initServer(server1Port));\n+    server2.invoke(() -> initServer(server2Port));\n+  }\n+\n+  void parametrizedSetUp(String poolName, List<Integer> serverPorts) {\n+    client.invoke(() -> initClient(poolName, serverPorts));\n+  }\n+\n+  public void executePing(String poolName, int serverPort,\n+      InternalDistributedMember distributedMember) {\n+    PoolImpl poolImpl = (PoolImpl) PoolManager.find(poolName);\n+    PingOp.execute(poolImpl, new ServerLocation(\"localhost\", serverPort), distributedMember);\n+  }\n+\n+  public Long getSingleHeartBeat() {\n+    ClientHealthMonitor chm = ClientHealthMonitor.getInstance();\n+    if (chm.getClientHeartbeats().size() == 0) {\n+      return 0L;\n+    }\n+    assertThat(chm.getClientHeartbeats()).isNotEmpty().hasSize(1);\n+\n+    return chm.getClientHeartbeats().entrySet().iterator().next().getValue();\n+  }\n+\n+  @Test\n+  public void regularPingFlow() {\n+    final String poolName = testName.getMethodName();\n+    parametrizedSetUp(poolName, Collections.singletonList(server1Port));\n+    InternalDistributedMember distributedMember1 = (InternalDistributedMember) server1\n+        .invoke(() -> cacheRule.getCache().getDistributedSystem().getDistributedMember());\n+\n+    client.invoke(() -> executePing(poolName, server1Port, distributedMember1));\n+    Long firstHeartbeat = server1.invoke(this::getSingleHeartBeat);\n+\n+    client.invoke(() -> executePing(poolName, server1Port, distributedMember1));\n+    Long secondHeartbeat = server1.invoke(this::getSingleHeartBeat);\n+\n+    assertThat(secondHeartbeat).isGreaterThan(firstHeartbeat);\n+\n+  }\n+\n+  @Test\n+  public void memberShouldNotRedirectPingMessageWhenClientCachedViewIdIsWrong() throws IOException {\n+    final String poolName = testName.getMethodName();\n+    parametrizedSetUp(poolName, Collections.singletonList(server1Port));\n+    InternalDistributedMember distributedMember1 = (InternalDistributedMember) server1\n+        .invoke(() -> cacheRule.getCache().getDistributedSystem().getDistributedMember());\n+\n+    client.invoke(() -> {\n+      PoolImpl poolImpl = (PoolImpl) PoolManager.find(poolName);\n+      distributedMember1.setVmViewId(distributedMember1.getVmViewId() + 1);\n+      assertThatThrownBy(() -> {\n+        PingOp.execute(poolImpl, new ServerLocation(\"localhost\", server1Port), distributedMember1);\n+      }).isInstanceOf(ServerOperationException.class).hasMessageContaining(\"has different viewId:\");\n+    });\n+  }\n+\n+  @Test\n+  public void pingReturnsErrorIfTheTargetServerIsNotAMember() throws IOException {\n+    final String poolName = testName.getMethodName();\n+    parametrizedSetUp(poolName, Collections.singletonList(server1Port));\n+    int notUsedPort = getRandomAvailableTCPPortsForDUnitSite(1)[0];\n+    InternalDistributedMember fakeDistributedMember =\n+        new InternalDistributedMember(\"localhost\", notUsedPort);\n+    client.invoke(() -> {\n+      PoolImpl poolImpl = (PoolImpl) PoolManager.find(poolName);\n+      assertThatThrownBy(() -> {\n+        PingOp.execute(poolImpl, new ServerLocation(\"localhost\", server1Port),\n+            fakeDistributedMember);\n+      }).isInstanceOf(ServerOperationException.class)\n+          .hasMessageContaining(\"Unable to ping non-member\");\n+    });\n+  }\n+\n+  @Test\n+  public void memberShouldCorrectlyRedirectPingMessage() throws IOException, InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "759492734e2fe7877b995429b45c7ff3cd072c9e"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwNTA0Ng==", "bodyText": "I'm not sure it is entirely correct to override the procesAck method... Looking through the source code, there's only one operation overriding this (TXSynchronizationOp) and it ends up delegating to the super class method whenever the exception is not the one it knows how to handle. There's also a comment regarding c++ clients in AbstractOp.processAck(), we should be careful not to break those clients as well.\n@bschuchardt: thoughts on this one?.", "url": "https://github.com/apache/geode/pull/4978#discussion_r418505046", "createdAt": "2020-05-01T11:19:32Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/cache/client/internal/PingOp.java", "diffHunk": "@@ -65,17 +71,33 @@ protected boolean needsUserId() {\n     @Override\n     protected void sendMessage(Connection cnx) throws Exception {\n       getMessage().clearMessageHasSecurePartFlag();\n-      this.startTime = System.currentTimeMillis();\n-      getMessage().send(false);\n+      getMessage().setNumberOfParts(1);\n+      getMessage().addObjPart(serverID);\n+      getMessage().send(true);\n       Message.MESSAGE_TYPE.set(MessageType.PING);\n     }\n \n     @Override\n     protected Object processResponse(Message msg) throws Exception {\n-      processAck(msg, \"ping\");\n+      processAck(msg);\n       return null;\n     }\n \n+    private void processAck(Message msg) throws Exception {\n+      final int msgType = msg.getMessageType();\n+      if (msgType != MessageType.REPLY) {\n+        Part part = msg.getPart(0);\n+        if (msgType == MessageType.EXCEPTION) {\n+          Throwable t = (Throwable) part.getObject();\n+          throw new ServerOperationException(\"While performing a remote ping: \" + t.getMessage(),\n+              t);\n+        } else {\n+          throw new InternalGemFireError(\n+              \"Unexpected message type \" + MessageType.getString(msgType));\n+        }\n+      }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "759492734e2fe7877b995429b45c7ff3cd072c9e"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwNTg3Nw==", "bodyText": "Can these two fields be declared as final?.", "url": "https://github.com/apache/geode/pull/4978#discussion_r418505877", "createdAt": "2020-05-01T11:22:48Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/ServerLocationAndMemberId.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.distributed.internal;\n+\n+public class ServerLocationAndMemberId {\n+\n+  private ServerLocation serverLocation;\n+  private String memberId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "759492734e2fe7877b995429b45c7ff3cd072c9e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxMDk1OA==", "bodyText": "Should we use getMemberId().getUniqueId() here instead of just getMemberId(), as that's what we are using to calculate the hashCode?.", "url": "https://github.com/apache/geode/pull/4978#discussion_r418510958", "createdAt": "2020-05-01T11:45:35Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/GridAdvisor.java", "diffHunk": "@@ -418,18 +418,24 @@ public String toString() {\n     public int hashCode() {\n       final String thisHost = this.gp.getHost();\n       final int thisPort = this.gp.getPort();\n-      return thisHost != null ? (thisHost.hashCode() ^ thisPort) : thisPort;\n+      final String thisMemberId = this.getMemberId().getUniqueId();\n+      final int thisMemberIdHashCode = (thisMemberId != null) ? thisMemberId.hashCode() : 0;\n+      return thisHost != null ? (thisHost.hashCode() ^ thisPort) + thisMemberIdHashCode\n+          : thisPort + thisMemberIdHashCode;\n     }\n \n     @Override\n     public boolean equals(Object obj) {\n       if (obj instanceof GridProfileId) {\n         final GridProfileId other = (GridProfileId) obj;\n+\n         if (this.gp.getPort() == other.gp.getPort()) {\n           final String thisHost = this.gp.getHost();\n           final String otherHost = other.gp.getHost();\n           if (thisHost != null) {\n-            return thisHost.equals(otherHost);\n+            if (thisHost.equals(otherHost)) {\n+              return this.getMemberId().equals(other.getMemberId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "759492734e2fe7877b995429b45c7ff3cd072c9e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxMTE1Mw==", "bodyText": "No need to use format as we are not using parameters, just concatenating String objects.", "url": "https://github.com/apache/geode/pull/4978#discussion_r418511153", "createdAt": "2020-05-01T11:46:26Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/tier/sockets/command/Ping.java", "diffHunk": "@@ -47,10 +50,37 @@ public void cmdExecute(final Message clientMessage, final ServerConnection serve\n           clientMessage.getTransactionId(), serverConnection.getSocketString(),\n           (DistributionStats.getStatTime() - start));\n     }\n+    if (clientMessage.getNumberOfParts() > 0) {\n+      try {\n+        InternalDistributedMember targetServer =\n+            (InternalDistributedMember) clientMessage.getPart(0).getObject();\n+        InternalDistributedMember myID = serverConnection.getCache().getMyId();\n+        if (!myID.equals(targetServer)) {\n+          if (myID.compareTo(targetServer, true, false) == 0) {\n+            String errorMessage =\n+                String.format(\"Target server \" + targetServer + \" has different viewId: \" + myID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "759492734e2fe7877b995429b45c7ff3cd072c9e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxMzQyNw==", "bodyText": "Tests could be improved to also assert that the receivedPing method from the ClientHealthMonitor class has been invoked when required. Just a suggestion, anyways.", "url": "https://github.com/apache/geode/pull/4978#discussion_r418513427", "createdAt": "2020-05-01T11:56:21Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/tier/sockets/command/PingTest.java", "diffHunk": "@@ -0,0 +1,136 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.internal.cache.tier.sockets.command;\n+\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.times;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+import org.apache.geode.CancelCriterion;\n+import org.apache.geode.distributed.internal.DistributionManager;\n+import org.apache.geode.distributed.internal.ServerLocation;\n+import org.apache.geode.distributed.internal.membership.InternalDistributedMember;\n+import org.apache.geode.internal.cache.InternalCache;\n+import org.apache.geode.internal.cache.tier.sockets.Message;\n+import org.apache.geode.internal.cache.tier.sockets.Part;\n+import org.apache.geode.internal.cache.tier.sockets.ServerConnection;\n+\n+public class PingTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "759492734e2fe7877b995429b45c7ff3cd072c9e"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a005b9096dc4c2fcacc6a8ee52eb8a7236d6667a", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/a005b9096dc4c2fcacc6a8ee52eb8a7236d6667a", "committedDate": "2020-05-01T16:55:05Z", "message": "Changes after review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NjUyMjEy", "url": "https://github.com/apache/geode/pull/4978#pullrequestreview-405652212", "createdAt": "2020-05-05T10:07:34Z", "commit": {"oid": "a005b9096dc4c2fcacc6a8ee52eb8a7236d6667a"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDowNzozNFrOGQitJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMDoyOTowNVrOGQjXcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTk5OTAxMg==", "bodyText": "This constructor doesn't seem to be used anywhere, so we could just delete it.", "url": "https://github.com/apache/geode/pull/4978#discussion_r419999012", "createdAt": "2020-05-05T10:07:34Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/ServerLocationAndMemberId.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.distributed.internal;\n+\n+public class ServerLocationAndMemberId {\n+\n+  private final ServerLocation serverLocation;\n+  private final String memberId;\n+\n+  public ServerLocationAndMemberId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a005b9096dc4c2fcacc6a8ee52eb8a7236d6667a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNTUyOA==", "bodyText": "This is a new method and should be, at leat, unit tested.\nYou can make it package private, annotate it with @VisibleForTesting and access it directly from LocatorLoadSnapshotJUnitTest and/or LocatorLoadSnapshotIntegrationTest.", "url": "https://github.com/apache/geode/pull/4978#discussion_r420005528", "createdAt": "2020-05-05T10:20:24Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/LocatorLoadSnapshot.java", "diffHunk": "@@ -425,6 +429,22 @@ private void addGroups(Map<String, Map<ServerLocation, LoadHolder>> map, String[\n     }\n   }\n \n+  private void addGroups(Map<String, Map<ServerLocationAndMemberId, LoadHolder>> map,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a005b9096dc4c2fcacc6a8ee52eb8a7236d6667a"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNTU4NQ==", "bodyText": "This is a new method and should be, at leat, unit tested.\nYou can make it package private, annotate it with @VisibleForTesting and access it directly from LocatorLoadSnapshotJUnitTest and/or LocatorLoadSnapshotIntegrationTest.", "url": "https://github.com/apache/geode/pull/4978#discussion_r420005585", "createdAt": "2020-05-05T10:20:31Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/LocatorLoadSnapshot.java", "diffHunk": "@@ -440,6 +460,24 @@ private void removeFromMap(Map<String, Map<ServerLocation, LoadHolder>> map, Str\n     groupMap.remove(location);\n   }\n \n+  private void removeFromMap(Map<String, Map<ServerLocationAndMemberId, LoadHolder>> map,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a005b9096dc4c2fcacc6a8ee52eb8a7236d6667a"}, "originalPosition": 210}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNTY2MQ==", "bodyText": "This is a new method and should be, at leat, unit tested.\nYou can make it package private, annotate it with @VisibleForTesting and access it directly from LocatorLoadSnapshotJUnitTest and/or LocatorLoadSnapshotIntegrationTest.", "url": "https://github.com/apache/geode/pull/4978#discussion_r420005661", "createdAt": "2020-05-05T10:20:39Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/LocatorLoadSnapshot.java", "diffHunk": "@@ -448,14 +486,28 @@ private void updateMap(Map map, ServerLocation location, float load, float loadP\n     }\n   }\n \n+  private void updateMap(Map map, ServerLocation location, String memberId, float load,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a005b9096dc4c2fcacc6a8ee52eb8a7236d6667a"}, "originalPosition": 235}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwNjE4MQ==", "bodyText": "Not a new method but significantly changed, it should be, at leat, unit tested.\nYou can make it package private, annotate it with @VisibleForTesting and access it directly from LocatorLoadSnapshotJUnitTest and/or LocatorLoadSnapshotIntegrationTest.", "url": "https://github.com/apache/geode/pull/4978#discussion_r420006181", "createdAt": "2020-05-05T10:21:42Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/LocatorLoadSnapshot.java", "diffHunk": "@@ -448,14 +486,28 @@ private void updateMap(Map map, ServerLocation location, float load, float loadP\n     }\n   }\n \n+  private void updateMap(Map map, ServerLocation location, String memberId, float load,\n+      float loadPerConnection) {\n+    Map groupMap = (Map) map.get(null);\n+    ServerLocationAndMemberId locationAndMemberId =\n+        new ServerLocationAndMemberId(location, memberId);\n+    LoadHolder holder =\n+        (LoadHolder) groupMap.get(locationAndMemberId);\n+\n+    if (holder != null) {\n+      holder.setLoad(load, loadPerConnection);\n+    }\n+  }\n+\n   /**\n    *\n    * @param groupServers the servers to consider\n    * @param excludedServers servers to exclude\n    * @param count how many you want. a negative number means all of them in order of best to worst\n    * @return a list of best...worst server LoadHolders\n    */\n-  private List<LoadHolder> findBestServers(Map<ServerLocation, LoadHolder> groupServers,\n+  private List<LoadHolder> findBestServers(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a005b9096dc4c2fcacc6a8ee52eb8a7236d6667a"}, "originalPosition": 256}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDAwOTg0Mg==", "bodyText": "Not a new method but significantly changed, it should be, at leat, unit tested.\nYou can make it package private, annotate it with @VisibleForTesting and access it directly from LocatorLoadSnapshotJUnitTest and/or LocatorLoadSnapshotIntegrationTest.", "url": "https://github.com/apache/geode/pull/4978#discussion_r420009842", "createdAt": "2020-05-05T10:29:05Z", "author": {"login": "jujoramos"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/LocatorLoadSnapshot.java", "diffHunk": "@@ -497,13 +558,21 @@ private void updateMap(Map map, ServerLocation location, float load, float loadP\n    * If it is most loaded then return its LoadHolder; otherwise return null;\n    */\n   private LoadHolder isCurrentServerMostLoaded(ServerLocation currentServer,\n-      Map<ServerLocation, LoadHolder> groupServers) {\n-    final LoadHolder currentLH = groupServers.get(currentServer);\n+      Map<ServerLocationAndMemberId, LoadHolder> groupServers) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a005b9096dc4c2fcacc6a8ee52eb8a7236d6667a"}, "originalPosition": 287}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf73ac6a73f39e4e1b76bd73193342dfffe640d6", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/bf73ac6a73f39e4e1b76bd73193342dfffe640d6", "committedDate": "2020-05-05T13:16:40Z", "message": "UT:updateMap,findBestServers,isCurrentServerMostLoaded"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d72a4d17afe173c093f1103a446e21c73e0e28c6", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/d72a4d17afe173c093f1103a446e21c73e0e28c6", "committedDate": "2020-05-05T13:17:54Z", "message": "Remove unnecessary constructor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a154a1328ffe406f223749fd7b900257478ac57a", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/a154a1328ffe406f223749fd7b900257478ac57a", "committedDate": "2020-05-05T14:11:21Z", "message": "UT: removeFromMap,addGroups"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTE2OTIz", "url": "https://github.com/apache/geode/pull/4978#pullrequestreview-405916923", "createdAt": "2020-05-05T15:44:51Z", "commit": {"oid": "a154a1328ffe406f223749fd7b900257478ac57a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo0NDo1MlrOGQvpgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNTo0OTo0MVrOGQv3eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxMTA3NA==", "bodyText": "There is a null check for memberId in hashCode() but not in equals().  If it's possible for memberId to be null then you should add a null check to equals().", "url": "https://github.com/apache/geode/pull/4978#discussion_r420211074", "createdAt": "2020-05-05T15:44:52Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/main/java/org/apache/geode/distributed/internal/ServerLocationAndMemberId.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.distributed.internal;\n+\n+public class ServerLocationAndMemberId {\n+\n+  private final ServerLocation serverLocation;\n+  private final String memberId;\n+\n+  public ServerLocationAndMemberId(ServerLocation serverLocation, String memberId) {\n+    this.serverLocation = serverLocation;\n+    this.memberId = memberId;\n+  }\n+\n+  public ServerLocation getServerLocation() {\n+    return this.serverLocation;\n+  }\n+\n+  public String getMemberId() {\n+    return this.memberId;\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (this == obj)\n+      return true;\n+    if (obj == null)\n+      return false;\n+    if (!(obj instanceof ServerLocationAndMemberId))\n+      return false;\n+    final ServerLocationAndMemberId other = (ServerLocationAndMemberId) obj;\n+\n+    if (!this.serverLocation.equals(other.getServerLocation())) {\n+      return false;\n+    }\n+\n+    return this.memberId.equals(other.getMemberId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a154a1328ffe406f223749fd7b900257478ac57a"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDIxNDY0OQ==", "bodyText": "This pair of equals()/hashCode() methods has the same problem.", "url": "https://github.com/apache/geode/pull/4978#discussion_r420214649", "createdAt": "2020-05-05T15:49:41Z", "author": {"login": "bschuchardt"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/GridAdvisor.java", "diffHunk": "@@ -418,18 +418,24 @@ public String toString() {\n     public int hashCode() {\n       final String thisHost = this.gp.getHost();\n       final int thisPort = this.gp.getPort();\n-      return thisHost != null ? (thisHost.hashCode() ^ thisPort) : thisPort;\n+      final String thisMemberId = this.getMemberId().getUniqueId();\n+      final int thisMemberIdHashCode = (thisMemberId != null) ? thisMemberId.hashCode() : 0;\n+      return thisHost != null ? (thisHost.hashCode() ^ thisPort) + thisMemberIdHashCode\n+          : thisPort + thisMemberIdHashCode;\n     }\n \n     @Override\n     public boolean equals(Object obj) {\n       if (obj instanceof GridProfileId) {\n         final GridProfileId other = (GridProfileId) obj;\n+\n         if (this.gp.getPort() == other.gp.getPort()) {\n           final String thisHost = this.gp.getHost();\n           final String otherHost = other.gp.getHost();\n           if (thisHost != null) {\n-            return thisHost.equals(otherHost);\n+            if (thisHost.equals(otherHost)) {\n+              return this.getMemberId().getUniqueId().equals(other.getMemberId().getUniqueId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a154a1328ffe406f223749fd7b900257478ac57a"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e6f4838d3db2048337c8c10656c572af48ae13ce", "author": {"user": {"login": "alb3rtobr", "name": "Alberto Bustamante Reyes"}}, "url": "https://github.com/apache/geode/commit/e6f4838d3db2048337c8c10656c572af48ae13ce", "committedDate": "2020-05-05T17:24:42Z", "message": "Fix equals & hashcode in ServerLocationAndMemberId & GridAdvisor"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NTg0NDgz", "url": "https://github.com/apache/geode/pull/4978#pullrequestreview-407584483", "createdAt": "2020-05-07T15:25:10Z", "commit": {"oid": "e6f4838d3db2048337c8c10656c572af48ae13ce"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4MTA4MjQx", "url": "https://github.com/apache/geode/pull/4978#pullrequestreview-408108241", "createdAt": "2020-05-08T09:11:06Z", "commit": {"oid": "e6f4838d3db2048337c8c10656c572af48ae13ce"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4844, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}