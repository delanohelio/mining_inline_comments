{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2MzE4MzQw", "number": 5509, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNTo0OToxMFrOEjNEyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMzo1NDowMFrOEj1cdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzQ5ODMyOnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/AbstractGatewaySender.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNTo0OToxMFrOHRbjng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxODoyMDoxOVrOHZKW_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAzOTMyNg==", "bodyText": "Again, don't clone a new event. In the new code change, the \"else\" will only be executed in very very small time windows.\nYou have proved that when the sender is shutdown, the eventProcessor will be kept. So enqueue will not go to the \"else\". We will never worry about the tmpDroppedEvents become too big.", "url": "https://github.com/apache/geode/pull/5509#discussion_r488039326", "createdAt": "2020-09-14T15:49:10Z", "author": {"login": "gesterzhou"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/AbstractGatewaySender.java", "diffHunk": "@@ -1118,6 +1115,24 @@ public void distribute(EnumListenerEvent operation, EntryEventImpl event,\n     }\n   }\n \n+  private void recordDroppedEvent(EntryEventImpl event) {\n+    final boolean isDebugEnabled = logger.isDebugEnabled();\n+    if (this.eventProcessor != null) {\n+      this.eventProcessor.registerEventDroppedInPrimaryQueue(event);\n+    } else {\n+      // Add empty event so that in case the event stays for long in\n+      // tmpDroppedEvents it takes as little space as possible.\n+      // No need to have all the contents of the event for a dropped one.\n+      EntryEventImpl emptyEvent = new EntryEventImpl(event.getKey(), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b677a62da11d45f3bd00a381fc85f45756b6bb9"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODA1MjEzOQ==", "bodyText": "ok. I will remove it.\nAnyway, if the gateway sender is created with manualStart=true then the eventProcessor will not be yet instantiated. In that case, and until the gateway sender is started we could see dropped events put in tmpDroppedEvents. It cannot be guaranteed that it will be a small time window.", "url": "https://github.com/apache/geode/pull/5509#discussion_r488052139", "createdAt": "2020-09-14T16:08:00Z", "author": {"login": "albertogpz"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/AbstractGatewaySender.java", "diffHunk": "@@ -1118,6 +1115,24 @@ public void distribute(EnumListenerEvent operation, EntryEventImpl event,\n     }\n   }\n \n+  private void recordDroppedEvent(EntryEventImpl event) {\n+    final boolean isDebugEnabled = logger.isDebugEnabled();\n+    if (this.eventProcessor != null) {\n+      this.eventProcessor.registerEventDroppedInPrimaryQueue(event);\n+    } else {\n+      // Add empty event so that in case the event stays for long in\n+      // tmpDroppedEvents it takes as little space as possible.\n+      // No need to have all the contents of the event for a dropped one.\n+      EntryEventImpl emptyEvent = new EntryEventImpl(event.getKey(), false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAzOTMyNg=="}, "originalCommit": {"oid": "6b677a62da11d45f3bd00a381fc85f45756b6bb9"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjE0NjE3Mw==", "bodyText": "For this part, it's unnecessary to enhance registerEventDroppedInPrimaryQueue() since it's used for a very small window (sender is restarting).\nI feel your previous solution is good enough.", "url": "https://github.com/apache/geode/pull/5509#discussion_r496146173", "createdAt": "2020-09-28T18:20:19Z", "author": {"login": "gesterzhou"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/AbstractGatewaySender.java", "diffHunk": "@@ -1118,6 +1115,24 @@ public void distribute(EnumListenerEvent operation, EntryEventImpl event,\n     }\n   }\n \n+  private void recordDroppedEvent(EntryEventImpl event) {\n+    final boolean isDebugEnabled = logger.isDebugEnabled();\n+    if (this.eventProcessor != null) {\n+      this.eventProcessor.registerEventDroppedInPrimaryQueue(event);\n+    } else {\n+      // Add empty event so that in case the event stays for long in\n+      // tmpDroppedEvents it takes as little space as possible.\n+      // No need to have all the contents of the event for a dropped one.\n+      EntryEventImpl emptyEvent = new EntryEventImpl(event.getKey(), false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAzOTMyNg=="}, "originalCommit": {"oid": "6b677a62da11d45f3bd00a381fc85f45756b6bb9"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDA3NzA1OnYy", "diffSide": "RIGHT", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoxNzowNVrOHRhJGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoxNzowNVrOHRhJGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzMDg0MA==", "bodyText": "The IDE warnings here can be resolved by using List<AsyncInvocation<Void>>.", "url": "https://github.com/apache/geode/pull/5509#discussion_r488130840", "createdAt": "2020-09-14T18:17:05Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/WANTestBase.java", "diffHunk": "@@ -1646,6 +1646,20 @@ public static void resumeSender(String senderId) {\n     }\n   }\n \n+  public static void stopSenderInVMsAsync(String senderId, VM... vms) {\n+    List<AsyncInvocation> tasks = new LinkedList<>();\n+    for (VM vm : vms) {\n+      tasks.add(vm.invokeAsync(() -> stopSender(senderId)));\n+    }\n+    for (AsyncInvocation invocation : tasks) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc1967afb0469d8c6fd38492c9de9ec71fff627"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDEwMTk3OnYy", "diffSide": "RIGHT", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationLoopBackDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoyNDoxOFrOHRhY5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoyNDoxOFrOHRhY5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzNDg4Nw==", "bodyText": "The IDE warning here can be resolved by using List<AsyncInvocation<Void>>.", "url": "https://github.com/apache/geode/pull/5509#discussion_r488134887", "createdAt": "2020-09-14T18:24:18Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationLoopBackDUnitTest.java", "diffHunk": "@@ -370,69 +371,312 @@ public void testParallelPropagationLoopBack3SitesNtoNTopologyPutFromOneDS() {\n    */\n   @Test\n   public void unstartedSenderShouldNotAddReceivedEventsIntoTmpDropped() throws Exception {\n-    Integer lnPort = (Integer) vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n-    Integer nyPort = (Integer) vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n \n     // create receiver on site-ln and site-ny\n     createCacheInVMs(lnPort, vm2, vm4);\n     createReceiverInVMs(vm2, vm4);\n     createCacheInVMs(nyPort, vm3, vm5);\n     createReceiverInVMs(vm3, vm5);\n \n-    // create senders on site-ln, Note: sender-id is its destination, i.e. ny\n+    // create senders on site-ny, Note: sender-id is its destination, i.e. ny\n     vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n     vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n \n-    // create senders on site-ny, Note: sender-id is its destination, i.e. ln\n+    // create senders on site-ln, Note: sender-id is its destination, i.e. ln\n     vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n     vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n \n-    // create PR on site-ln\n+    // create PR on site-ny\n     vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n         isOffHeap()));\n     vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n         isOffHeap()));\n \n-    // create PR on site-ny\n+    // create PR on site-ln\n     vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n         isOffHeap()));\n     vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n         isOffHeap()));\n \n-    // start sender on site-ln\n+    // start sender on site-ny\n     startSenderInVMs(\"ny\", vm2, vm4);\n-    // Do 100 puts on site-ln\n-    vm2.invoke(() -> WANTestBase.doPuts(getTestMethodName() + \"_PR\", 100));\n \n-    // verify site-ny received the 100 events\n+    // do 100 puts on site-ln\n+    vm3.invoke(() -> WANTestBase.doPutsFrom(getTestMethodName() + \"_PR\", 0, 100));\n+\n+    // verify site-ny have 100 entries\n     vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n     vm5.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n \n-    // verify tmpDroppedEvents should be 0 at site-ny\n-    vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n-    vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n-\n-    // do next 100 puts on site-ny\n-    vm3.invoke(() -> WANTestBase.doPutsFrom(getTestMethodName() + \"_PR\", 100, 200));\n-\n-    // verify site-ny have 200 entries\n-    vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 200));\n-    vm5.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 200));\n-\n-    // verify tmpDroppedEvents should be 100 at site-ny, because the sender is not started yet\n+    // verify tmpDroppedEvents should be 100 at site-ln, because the sender is not started yet\n     vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 100));\n     vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 100));\n \n     // verify site-ln has not received the events from site-ny yet\n-    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n-    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n \n-    // start sender on site-ny\n+    // start sender on site-ln\n     startSenderInVMsAsync(\"ln\", vm3, vm5);\n \n     // verify tmpDroppedEvents should be 0 now at site-ny\n     vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n     vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n+\n+    vm3.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+    vm5.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+  }\n+\n+  /**\n+   * Test that gateway sender's secondary queues do not keep dropped events\n+   * by the primary gateway sender received while it was starting but was not\n+   * started yet, after the primary finishes starting.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=true\n+   * LN site's sender's manual-start=true\n+   *\n+   * put some events from LN and start the sender in NY simultaneously\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void startedSenderReceivingEventsWhileStartingShouldDrainQueues()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n+\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    AsyncInvocation inv =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc1967afb0469d8c6fd38492c9de9ec71fff627"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDEwMzE1OnYy", "diffSide": "RIGHT", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationLoopBackDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoyNDo0MlrOHRhZrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODoyNDo0MlrOHRhZrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODEzNTA4Ng==", "bodyText": "The IDE warning here can be resolved by using List<AsyncInvocation<Void>>.", "url": "https://github.com/apache/geode/pull/5509#discussion_r488135086", "createdAt": "2020-09-14T18:24:42Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationLoopBackDUnitTest.java", "diffHunk": "@@ -370,69 +371,312 @@ public void testParallelPropagationLoopBack3SitesNtoNTopologyPutFromOneDS() {\n    */\n   @Test\n   public void unstartedSenderShouldNotAddReceivedEventsIntoTmpDropped() throws Exception {\n-    Integer lnPort = (Integer) vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n-    Integer nyPort = (Integer) vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n \n     // create receiver on site-ln and site-ny\n     createCacheInVMs(lnPort, vm2, vm4);\n     createReceiverInVMs(vm2, vm4);\n     createCacheInVMs(nyPort, vm3, vm5);\n     createReceiverInVMs(vm3, vm5);\n \n-    // create senders on site-ln, Note: sender-id is its destination, i.e. ny\n+    // create senders on site-ny, Note: sender-id is its destination, i.e. ny\n     vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n     vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n \n-    // create senders on site-ny, Note: sender-id is its destination, i.e. ln\n+    // create senders on site-ln, Note: sender-id is its destination, i.e. ln\n     vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n     vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n \n-    // create PR on site-ln\n+    // create PR on site-ny\n     vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n         isOffHeap()));\n     vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n         isOffHeap()));\n \n-    // create PR on site-ny\n+    // create PR on site-ln\n     vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n         isOffHeap()));\n     vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n         isOffHeap()));\n \n-    // start sender on site-ln\n+    // start sender on site-ny\n     startSenderInVMs(\"ny\", vm2, vm4);\n-    // Do 100 puts on site-ln\n-    vm2.invoke(() -> WANTestBase.doPuts(getTestMethodName() + \"_PR\", 100));\n \n-    // verify site-ny received the 100 events\n+    // do 100 puts on site-ln\n+    vm3.invoke(() -> WANTestBase.doPutsFrom(getTestMethodName() + \"_PR\", 0, 100));\n+\n+    // verify site-ny have 100 entries\n     vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n     vm5.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n \n-    // verify tmpDroppedEvents should be 0 at site-ny\n-    vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n-    vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n-\n-    // do next 100 puts on site-ny\n-    vm3.invoke(() -> WANTestBase.doPutsFrom(getTestMethodName() + \"_PR\", 100, 200));\n-\n-    // verify site-ny have 200 entries\n-    vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 200));\n-    vm5.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 200));\n-\n-    // verify tmpDroppedEvents should be 100 at site-ny, because the sender is not started yet\n+    // verify tmpDroppedEvents should be 100 at site-ln, because the sender is not started yet\n     vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 100));\n     vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 100));\n \n     // verify site-ln has not received the events from site-ny yet\n-    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n-    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n \n-    // start sender on site-ny\n+    // start sender on site-ln\n     startSenderInVMsAsync(\"ln\", vm3, vm5);\n \n     // verify tmpDroppedEvents should be 0 now at site-ny\n     vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n     vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n+\n+    vm3.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+    vm5.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+  }\n+\n+  /**\n+   * Test that gateway sender's secondary queues do not keep dropped events\n+   * by the primary gateway sender received while it was starting but was not\n+   * started yet, after the primary finishes starting.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=true\n+   * LN site's sender's manual-start=true\n+   *\n+   * put some events from LN and start the sender in NY simultaneously\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void startedSenderReceivingEventsWhileStartingShouldDrainQueues()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n+\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    AsyncInvocation inv =\n+        vm2.invokeAsync(() -> WANTestBase.doPuts(getTestMethodName() + \"_PR\", 1000));\n+    startSenderInVMsAsync(\"ny\", vm2, vm4);\n+    inv.join();\n+\n+    vm2.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+    vm4.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+\n+    vm2.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+    vm4.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n   }\n \n+  /**\n+   * Test that gateway sender's secondary queues do not keep dropped events\n+   * by the primary gateway sender received while it was stopping after it is started again.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=false\n+   * LN site's sender's manual-start=false\n+   *\n+   * put some events from LN and stop the sender in NY simultaneously\n+   * Start the sender in NY.\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void startedSenderReceivingEventsWhileStoppingShouldDrainQueues()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, false));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, false));\n+\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, false));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, false));\n+\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    AsyncInvocation inv =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc1967afb0469d8c6fd38492c9de9ec71fff627"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDEzNTc1OnYy", "diffSide": "RIGHT", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationLoopBackDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozNDoxMFrOHRht6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozNDoxMFrOHRht6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MDI2Nw==", "bodyText": "The AsyncInvocation.join() method is deprecated. It should be replaced with AsyncInvocation.await().", "url": "https://github.com/apache/geode/pull/5509#discussion_r488140267", "createdAt": "2020-09-14T18:34:10Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationLoopBackDUnitTest.java", "diffHunk": "@@ -370,69 +371,312 @@ public void testParallelPropagationLoopBack3SitesNtoNTopologyPutFromOneDS() {\n    */\n   @Test\n   public void unstartedSenderShouldNotAddReceivedEventsIntoTmpDropped() throws Exception {\n-    Integer lnPort = (Integer) vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n-    Integer nyPort = (Integer) vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n \n     // create receiver on site-ln and site-ny\n     createCacheInVMs(lnPort, vm2, vm4);\n     createReceiverInVMs(vm2, vm4);\n     createCacheInVMs(nyPort, vm3, vm5);\n     createReceiverInVMs(vm3, vm5);\n \n-    // create senders on site-ln, Note: sender-id is its destination, i.e. ny\n+    // create senders on site-ny, Note: sender-id is its destination, i.e. ny\n     vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n     vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n \n-    // create senders on site-ny, Note: sender-id is its destination, i.e. ln\n+    // create senders on site-ln, Note: sender-id is its destination, i.e. ln\n     vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n     vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n \n-    // create PR on site-ln\n+    // create PR on site-ny\n     vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n         isOffHeap()));\n     vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n         isOffHeap()));\n \n-    // create PR on site-ny\n+    // create PR on site-ln\n     vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n         isOffHeap()));\n     vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n         isOffHeap()));\n \n-    // start sender on site-ln\n+    // start sender on site-ny\n     startSenderInVMs(\"ny\", vm2, vm4);\n-    // Do 100 puts on site-ln\n-    vm2.invoke(() -> WANTestBase.doPuts(getTestMethodName() + \"_PR\", 100));\n \n-    // verify site-ny received the 100 events\n+    // do 100 puts on site-ln\n+    vm3.invoke(() -> WANTestBase.doPutsFrom(getTestMethodName() + \"_PR\", 0, 100));\n+\n+    // verify site-ny have 100 entries\n     vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n     vm5.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n \n-    // verify tmpDroppedEvents should be 0 at site-ny\n-    vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n-    vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n-\n-    // do next 100 puts on site-ny\n-    vm3.invoke(() -> WANTestBase.doPutsFrom(getTestMethodName() + \"_PR\", 100, 200));\n-\n-    // verify site-ny have 200 entries\n-    vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 200));\n-    vm5.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 200));\n-\n-    // verify tmpDroppedEvents should be 100 at site-ny, because the sender is not started yet\n+    // verify tmpDroppedEvents should be 100 at site-ln, because the sender is not started yet\n     vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 100));\n     vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 100));\n \n     // verify site-ln has not received the events from site-ny yet\n-    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n-    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n \n-    // start sender on site-ny\n+    // start sender on site-ln\n     startSenderInVMsAsync(\"ln\", vm3, vm5);\n \n     // verify tmpDroppedEvents should be 0 now at site-ny\n     vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n     vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n+\n+    vm3.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+    vm5.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+  }\n+\n+  /**\n+   * Test that gateway sender's secondary queues do not keep dropped events\n+   * by the primary gateway sender received while it was starting but was not\n+   * started yet, after the primary finishes starting.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=true\n+   * LN site's sender's manual-start=true\n+   *\n+   * put some events from LN and start the sender in NY simultaneously\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void startedSenderReceivingEventsWhileStartingShouldDrainQueues()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n+\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    AsyncInvocation inv =\n+        vm2.invokeAsync(() -> WANTestBase.doPuts(getTestMethodName() + \"_PR\", 1000));\n+    startSenderInVMsAsync(\"ny\", vm2, vm4);\n+    inv.join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc1967afb0469d8c6fd38492c9de9ec71fff627"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDE0Mjg1OnYy", "diffSide": "RIGHT", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationLoopBackDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozNjowNVrOHRhyUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozNjowNVrOHRhyUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MTM5Mg==", "bodyText": "The AsyncInvocation.join() method is deprecated. It should be replaced with AsyncInvocation.await().", "url": "https://github.com/apache/geode/pull/5509#discussion_r488141392", "createdAt": "2020-09-14T18:36:05Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationLoopBackDUnitTest.java", "diffHunk": "@@ -370,69 +371,312 @@ public void testParallelPropagationLoopBack3SitesNtoNTopologyPutFromOneDS() {\n    */\n   @Test\n   public void unstartedSenderShouldNotAddReceivedEventsIntoTmpDropped() throws Exception {\n-    Integer lnPort = (Integer) vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n-    Integer nyPort = (Integer) vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n \n     // create receiver on site-ln and site-ny\n     createCacheInVMs(lnPort, vm2, vm4);\n     createReceiverInVMs(vm2, vm4);\n     createCacheInVMs(nyPort, vm3, vm5);\n     createReceiverInVMs(vm3, vm5);\n \n-    // create senders on site-ln, Note: sender-id is its destination, i.e. ny\n+    // create senders on site-ny, Note: sender-id is its destination, i.e. ny\n     vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n     vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n \n-    // create senders on site-ny, Note: sender-id is its destination, i.e. ln\n+    // create senders on site-ln, Note: sender-id is its destination, i.e. ln\n     vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n     vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n \n-    // create PR on site-ln\n+    // create PR on site-ny\n     vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n         isOffHeap()));\n     vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n         isOffHeap()));\n \n-    // create PR on site-ny\n+    // create PR on site-ln\n     vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n         isOffHeap()));\n     vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n         isOffHeap()));\n \n-    // start sender on site-ln\n+    // start sender on site-ny\n     startSenderInVMs(\"ny\", vm2, vm4);\n-    // Do 100 puts on site-ln\n-    vm2.invoke(() -> WANTestBase.doPuts(getTestMethodName() + \"_PR\", 100));\n \n-    // verify site-ny received the 100 events\n+    // do 100 puts on site-ln\n+    vm3.invoke(() -> WANTestBase.doPutsFrom(getTestMethodName() + \"_PR\", 0, 100));\n+\n+    // verify site-ny have 100 entries\n     vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n     vm5.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n \n-    // verify tmpDroppedEvents should be 0 at site-ny\n-    vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n-    vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n-\n-    // do next 100 puts on site-ny\n-    vm3.invoke(() -> WANTestBase.doPutsFrom(getTestMethodName() + \"_PR\", 100, 200));\n-\n-    // verify site-ny have 200 entries\n-    vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 200));\n-    vm5.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 200));\n-\n-    // verify tmpDroppedEvents should be 100 at site-ny, because the sender is not started yet\n+    // verify tmpDroppedEvents should be 100 at site-ln, because the sender is not started yet\n     vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 100));\n     vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 100));\n \n     // verify site-ln has not received the events from site-ny yet\n-    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n-    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n \n-    // start sender on site-ny\n+    // start sender on site-ln\n     startSenderInVMsAsync(\"ln\", vm3, vm5);\n \n     // verify tmpDroppedEvents should be 0 now at site-ny\n     vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n     vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n+\n+    vm3.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+    vm5.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+  }\n+\n+  /**\n+   * Test that gateway sender's secondary queues do not keep dropped events\n+   * by the primary gateway sender received while it was starting but was not\n+   * started yet, after the primary finishes starting.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=true\n+   * LN site's sender's manual-start=true\n+   *\n+   * put some events from LN and start the sender in NY simultaneously\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void startedSenderReceivingEventsWhileStartingShouldDrainQueues()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n+\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    AsyncInvocation inv =\n+        vm2.invokeAsync(() -> WANTestBase.doPuts(getTestMethodName() + \"_PR\", 1000));\n+    startSenderInVMsAsync(\"ny\", vm2, vm4);\n+    inv.join();\n+\n+    vm2.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+    vm4.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+\n+    vm2.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+    vm4.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n   }\n \n+  /**\n+   * Test that gateway sender's secondary queues do not keep dropped events\n+   * by the primary gateway sender received while it was stopping after it is started again.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=false\n+   * LN site's sender's manual-start=false\n+   *\n+   * put some events from LN and stop the sender in NY simultaneously\n+   * Start the sender in NY.\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void startedSenderReceivingEventsWhileStoppingShouldDrainQueues()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, false));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, false));\n+\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, false));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, false));\n+\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    AsyncInvocation inv =\n+        vm2.invokeAsync(() -> WANTestBase.doPuts(getTestMethodName() + \"_PR\", 1000));\n+    stopSenderInVMsAsync(\"ny\", vm2, vm4);\n+    inv.join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc1967afb0469d8c6fd38492c9de9ec71fff627"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDE0NDY4OnYy", "diffSide": "RIGHT", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationLoopBackDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozNjozNVrOHRhzZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozNjozNVrOHRhzZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MTY3MQ==", "bodyText": "An exception is never thrown from this method, so this can be removed.", "url": "https://github.com/apache/geode/pull/5509#discussion_r488141671", "createdAt": "2020-09-14T18:36:35Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationLoopBackDUnitTest.java", "diffHunk": "@@ -370,69 +371,312 @@ public void testParallelPropagationLoopBack3SitesNtoNTopologyPutFromOneDS() {\n    */\n   @Test\n   public void unstartedSenderShouldNotAddReceivedEventsIntoTmpDropped() throws Exception {\n-    Integer lnPort = (Integer) vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n-    Integer nyPort = (Integer) vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n \n     // create receiver on site-ln and site-ny\n     createCacheInVMs(lnPort, vm2, vm4);\n     createReceiverInVMs(vm2, vm4);\n     createCacheInVMs(nyPort, vm3, vm5);\n     createReceiverInVMs(vm3, vm5);\n \n-    // create senders on site-ln, Note: sender-id is its destination, i.e. ny\n+    // create senders on site-ny, Note: sender-id is its destination, i.e. ny\n     vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n     vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n \n-    // create senders on site-ny, Note: sender-id is its destination, i.e. ln\n+    // create senders on site-ln, Note: sender-id is its destination, i.e. ln\n     vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n     vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n \n-    // create PR on site-ln\n+    // create PR on site-ny\n     vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n         isOffHeap()));\n     vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n         isOffHeap()));\n \n-    // create PR on site-ny\n+    // create PR on site-ln\n     vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n         isOffHeap()));\n     vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n         isOffHeap()));\n \n-    // start sender on site-ln\n+    // start sender on site-ny\n     startSenderInVMs(\"ny\", vm2, vm4);\n-    // Do 100 puts on site-ln\n-    vm2.invoke(() -> WANTestBase.doPuts(getTestMethodName() + \"_PR\", 100));\n \n-    // verify site-ny received the 100 events\n+    // do 100 puts on site-ln\n+    vm3.invoke(() -> WANTestBase.doPutsFrom(getTestMethodName() + \"_PR\", 0, 100));\n+\n+    // verify site-ny have 100 entries\n     vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n     vm5.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n \n-    // verify tmpDroppedEvents should be 0 at site-ny\n-    vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n-    vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n-\n-    // do next 100 puts on site-ny\n-    vm3.invoke(() -> WANTestBase.doPutsFrom(getTestMethodName() + \"_PR\", 100, 200));\n-\n-    // verify site-ny have 200 entries\n-    vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 200));\n-    vm5.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 200));\n-\n-    // verify tmpDroppedEvents should be 100 at site-ny, because the sender is not started yet\n+    // verify tmpDroppedEvents should be 100 at site-ln, because the sender is not started yet\n     vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 100));\n     vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 100));\n \n     // verify site-ln has not received the events from site-ny yet\n-    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n-    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n \n-    // start sender on site-ny\n+    // start sender on site-ln\n     startSenderInVMsAsync(\"ln\", vm3, vm5);\n \n     // verify tmpDroppedEvents should be 0 now at site-ny\n     vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n     vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n+\n+    vm3.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+    vm5.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+  }\n+\n+  /**\n+   * Test that gateway sender's secondary queues do not keep dropped events\n+   * by the primary gateway sender received while it was starting but was not\n+   * started yet, after the primary finishes starting.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=true\n+   * LN site's sender's manual-start=true\n+   *\n+   * put some events from LN and start the sender in NY simultaneously\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void startedSenderReceivingEventsWhileStartingShouldDrainQueues()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n+\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    AsyncInvocation inv =\n+        vm2.invokeAsync(() -> WANTestBase.doPuts(getTestMethodName() + \"_PR\", 1000));\n+    startSenderInVMsAsync(\"ny\", vm2, vm4);\n+    inv.join();\n+\n+    vm2.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+    vm4.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+\n+    vm2.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+    vm4.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n   }\n \n+  /**\n+   * Test that gateway sender's secondary queues do not keep dropped events\n+   * by the primary gateway sender received while it was stopping after it is started again.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=false\n+   * LN site's sender's manual-start=false\n+   *\n+   * put some events from LN and stop the sender in NY simultaneously\n+   * Start the sender in NY.\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void startedSenderReceivingEventsWhileStoppingShouldDrainQueues()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, false));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, false));\n+\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, false));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, false));\n+\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    AsyncInvocation inv =\n+        vm2.invokeAsync(() -> WANTestBase.doPuts(getTestMethodName() + \"_PR\", 1000));\n+    stopSenderInVMsAsync(\"ny\", vm2, vm4);\n+    inv.join();\n+\n+    startSenderInVMsAsync(\"ny\", vm2, vm4);\n+\n+    vm2.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+    vm4.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+\n+    vm2.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+    vm4.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+  }\n+\n+  /**\n+   * Test that a stopped gateway sender receiving events\n+   * does not store them in tmpDroppedEvents but after started\n+   * does not leave any event in the\n+   * gateway sender's secondary queues.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=false\n+   * LN site's sender's manual-start=false\n+   *\n+   * put some events from LN and stop the sender in NY simultaneously\n+   * Start the sender in NY.\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void stoppedSenderShouldNotAddEventsToTmpDroppedEventsButStillDrainQueuesWhenStarted()\n+      throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc1967afb0469d8c6fd38492c9de9ec71fff627"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDE0NzM0OnYy", "diffSide": "RIGHT", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationLoopBackDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozNzoyNlrOHRh1Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODozNzoyNlrOHRh1Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0MjEwMw==", "bodyText": "An exception is never thrown from this method, so this can be removed.", "url": "https://github.com/apache/geode/pull/5509#discussion_r488142103", "createdAt": "2020-09-14T18:37:26Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/parallel/ParallelWANPropagationLoopBackDUnitTest.java", "diffHunk": "@@ -370,69 +371,312 @@ public void testParallelPropagationLoopBack3SitesNtoNTopologyPutFromOneDS() {\n    */\n   @Test\n   public void unstartedSenderShouldNotAddReceivedEventsIntoTmpDropped() throws Exception {\n-    Integer lnPort = (Integer) vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n-    Integer nyPort = (Integer) vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n \n     // create receiver on site-ln and site-ny\n     createCacheInVMs(lnPort, vm2, vm4);\n     createReceiverInVMs(vm2, vm4);\n     createCacheInVMs(nyPort, vm3, vm5);\n     createReceiverInVMs(vm3, vm5);\n \n-    // create senders on site-ln, Note: sender-id is its destination, i.e. ny\n+    // create senders on site-ny, Note: sender-id is its destination, i.e. ny\n     vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n     vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n \n-    // create senders on site-ny, Note: sender-id is its destination, i.e. ln\n+    // create senders on site-ln, Note: sender-id is its destination, i.e. ln\n     vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n     vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n \n-    // create PR on site-ln\n+    // create PR on site-ny\n     vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n         isOffHeap()));\n     vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n         isOffHeap()));\n \n-    // create PR on site-ny\n+    // create PR on site-ln\n     vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n         isOffHeap()));\n     vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n         isOffHeap()));\n \n-    // start sender on site-ln\n+    // start sender on site-ny\n     startSenderInVMs(\"ny\", vm2, vm4);\n-    // Do 100 puts on site-ln\n-    vm2.invoke(() -> WANTestBase.doPuts(getTestMethodName() + \"_PR\", 100));\n \n-    // verify site-ny received the 100 events\n+    // do 100 puts on site-ln\n+    vm3.invoke(() -> WANTestBase.doPutsFrom(getTestMethodName() + \"_PR\", 0, 100));\n+\n+    // verify site-ny have 100 entries\n     vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n     vm5.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n \n-    // verify tmpDroppedEvents should be 0 at site-ny\n-    vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n-    vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n-\n-    // do next 100 puts on site-ny\n-    vm3.invoke(() -> WANTestBase.doPutsFrom(getTestMethodName() + \"_PR\", 100, 200));\n-\n-    // verify site-ny have 200 entries\n-    vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 200));\n-    vm5.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 200));\n-\n-    // verify tmpDroppedEvents should be 100 at site-ny, because the sender is not started yet\n+    // verify tmpDroppedEvents should be 100 at site-ln, because the sender is not started yet\n     vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 100));\n     vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 100));\n \n     // verify site-ln has not received the events from site-ny yet\n-    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n-    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n \n-    // start sender on site-ny\n+    // start sender on site-ln\n     startSenderInVMsAsync(\"ln\", vm3, vm5);\n \n     // verify tmpDroppedEvents should be 0 now at site-ny\n     vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n     vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n+\n+    vm3.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+    vm5.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+  }\n+\n+  /**\n+   * Test that gateway sender's secondary queues do not keep dropped events\n+   * by the primary gateway sender received while it was starting but was not\n+   * started yet, after the primary finishes starting.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=true\n+   * LN site's sender's manual-start=true\n+   *\n+   * put some events from LN and start the sender in NY simultaneously\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void startedSenderReceivingEventsWhileStartingShouldDrainQueues()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, true));\n+\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, true));\n+\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    AsyncInvocation inv =\n+        vm2.invokeAsync(() -> WANTestBase.doPuts(getTestMethodName() + \"_PR\", 1000));\n+    startSenderInVMsAsync(\"ny\", vm2, vm4);\n+    inv.join();\n+\n+    vm2.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+    vm4.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+\n+    vm2.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+    vm4.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n   }\n \n+  /**\n+   * Test that gateway sender's secondary queues do not keep dropped events\n+   * by the primary gateway sender received while it was stopping after it is started again.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=false\n+   * LN site's sender's manual-start=false\n+   *\n+   * put some events from LN and stop the sender in NY simultaneously\n+   * Start the sender in NY.\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void startedSenderReceivingEventsWhileStoppingShouldDrainQueues()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, false));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, false));\n+\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, false));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, false));\n+\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    AsyncInvocation inv =\n+        vm2.invokeAsync(() -> WANTestBase.doPuts(getTestMethodName() + \"_PR\", 1000));\n+    stopSenderInVMsAsync(\"ny\", vm2, vm4);\n+    inv.join();\n+\n+    startSenderInVMsAsync(\"ny\", vm2, vm4);\n+\n+    vm2.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+    vm4.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+\n+    vm2.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+    vm4.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+  }\n+\n+  /**\n+   * Test that a stopped gateway sender receiving events\n+   * does not store them in tmpDroppedEvents but after started\n+   * does not leave any event in the\n+   * gateway sender's secondary queues.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=false\n+   * LN site's sender's manual-start=false\n+   *\n+   * put some events from LN and stop the sender in NY simultaneously\n+   * Start the sender in NY.\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void stoppedSenderShouldNotAddEventsToTmpDroppedEventsButStillDrainQueuesWhenStarted()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, false));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, true, 100, 10, false, false, null, false));\n+\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, false));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, true, 100, 10, false, false, null, false));\n+\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    stopSenderInVMsAsync(\"ny\", vm2, vm4);\n+\n+    vm2.invoke(() -> WANTestBase.doPutsFrom(getTestMethodName() + \"_PR\", 0, 100));\n+\n+    // verify tmpDroppedEvents is 0 at site-ny\n+    vm2.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+    vm4.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n+    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n+\n+    vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+    vm5.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+\n+\n+    startSenderInVMsAsync(\"ny\", vm2, vm4);\n+\n+    vm2.invoke(() -> WANTestBase.doPutsFrom(getTestMethodName() + \"_PR\", 100, 1000));\n+\n+    vm2.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+    vm4.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 1000));\n+    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 1000));\n+\n+    vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 900));\n+    vm5.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 900));\n+\n+    // verify the secondary's queues are drained at site-ny\n+    vm2.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+    vm4.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+  }\n+\n+  /**\n+   * Test that a stopped primary gateway sender receiving events\n+   * does not store them in tmpDroppedEvents but after started\n+   * does not leave any event in the\n+   * gateway sender's secondary queues.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=false\n+   * LN site's sender's manual-start=false\n+   *\n+   * put some events from LN and stop one instance of the sender in NY simultaneously\n+   * Start the stopped instance of the sender in NY.\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void stoppedPrimarySenderShouldNotAddEventsToTmpDroppedEventsButStillDrainQueuesWhenStarted()\n+      throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc1967afb0469d8c6fd38492c9de9ec71fff627"}, "originalPosition": 289}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDE3MTEzOnYy", "diffSide": "RIGHT", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANPropagationsFeatureDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0NDoxMFrOHRiDTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0NDoxMFrOHRiDTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0NTc0MQ==", "bodyText": "An exception is never thrown from this method, so this \"throws\" can be removed.", "url": "https://github.com/apache/geode/pull/5509#discussion_r488145741", "createdAt": "2020-09-14T18:44:10Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANPropagationsFeatureDUnitTest.java", "diffHunk": "@@ -297,4 +298,322 @@ public void testReplicatedSerialPropagationWithFilter_AfterAck() throws Exceptio\n     vm4.invoke(() -> WANTestBase.waitForConcurrentSerialSenderQueueToDrain(\"ln\"));\n     vm5.invoke(() -> WANTestBase.waitForConcurrentSerialSenderQueueToDrain(\"ln\"));\n   }\n+\n+  /**\n+   * Test unstarted sender\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=true\n+   *\n+   * Make sure the events are sent from LN to NY and will not be added into tmpDroppedEvents\n+   * while normal events put from NY site can still be added to tmpDroppedEvents\n+   * Start the sender, make sure the events in tmpDroppedEvents are sent to LN finally\n+   */\n+  @Test\n+  public void unstartedSenderShouldNotAddReceivedEventsIntoTmpDropped() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc1967afb0469d8c6fd38492c9de9ec71fff627"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDE3OTY3OnYy", "diffSide": "RIGHT", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANPropagationsFeatureDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0NjozOVrOHRiIjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0NjozOVrOHRiIjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0NzA4Ng==", "bodyText": "The IDE warning here can be resolved by using List<AsyncInvocation<Void>>.", "url": "https://github.com/apache/geode/pull/5509#discussion_r488147086", "createdAt": "2020-09-14T18:46:39Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANPropagationsFeatureDUnitTest.java", "diffHunk": "@@ -297,4 +298,322 @@ public void testReplicatedSerialPropagationWithFilter_AfterAck() throws Exceptio\n     vm4.invoke(() -> WANTestBase.waitForConcurrentSerialSenderQueueToDrain(\"ln\"));\n     vm5.invoke(() -> WANTestBase.waitForConcurrentSerialSenderQueueToDrain(\"ln\"));\n   }\n+\n+  /**\n+   * Test unstarted sender\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=true\n+   *\n+   * Make sure the events are sent from LN to NY and will not be added into tmpDroppedEvents\n+   * while normal events put from NY site can still be added to tmpDroppedEvents\n+   * Start the sender, make sure the events in tmpDroppedEvents are sent to LN finally\n+   */\n+  @Test\n+  public void unstartedSenderShouldNotAddReceivedEventsIntoTmpDropped() throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    // create receiver on site-ln and site-ny\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    // create senders on site-ny, Note: sender-id is its destination, i.e. ny\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+\n+    // create senders on site-ln, Note: sender-id is its destination, i.e. ln\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+\n+    // create PR on site-ny\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    // create PR on site-ln\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    // start sender on site-ny\n+    startSenderInVMs(\"ny\", vm2, vm4);\n+\n+    // do 100 puts on site-ln\n+    vm3.invoke(() -> WANTestBase.doPutsFrom(getTestMethodName() + \"_PR\", 0, 100));\n+\n+    // verify site-ny have 100 entries\n+    vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n+    vm5.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n+\n+    // verify site-ln has not received the events from site-ny yet\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+\n+    // start sender on site-ln\n+    startSenderInVMsAsync(\"ln\", vm3, vm5);\n+\n+    // verify tmpDroppedEvents should be 0 now at site-ny\n+    vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n+    vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n+\n+    vm3.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+    vm5.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+  }\n+\n+  /**\n+   * Test that gateway sender's secondary queues do not keep dropped events\n+   * by the primary gateway sender received while it was starting but was not\n+   * started yet, after the primary finishes starting.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=true\n+   * LN site's sender's manual-start=true\n+   *\n+   * put some events from LN and start the sender in NY simultaneously\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void startedSenderReceivingEventsWhileStartingShouldDrainQueues()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    AsyncInvocation inv =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc1967afb0469d8c6fd38492c9de9ec71fff627"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDE3OTgyOnYy", "diffSide": "RIGHT", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANPropagationsFeatureDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0Njo0MVrOHRiIow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0Njo0MVrOHRiIow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0NzEwNw==", "bodyText": "The AsyncInvocation.join() method is deprecated. It should be replaced with AsyncInvocation.await().", "url": "https://github.com/apache/geode/pull/5509#discussion_r488147107", "createdAt": "2020-09-14T18:46:41Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANPropagationsFeatureDUnitTest.java", "diffHunk": "@@ -297,4 +298,322 @@ public void testReplicatedSerialPropagationWithFilter_AfterAck() throws Exceptio\n     vm4.invoke(() -> WANTestBase.waitForConcurrentSerialSenderQueueToDrain(\"ln\"));\n     vm5.invoke(() -> WANTestBase.waitForConcurrentSerialSenderQueueToDrain(\"ln\"));\n   }\n+\n+  /**\n+   * Test unstarted sender\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=true\n+   *\n+   * Make sure the events are sent from LN to NY and will not be added into tmpDroppedEvents\n+   * while normal events put from NY site can still be added to tmpDroppedEvents\n+   * Start the sender, make sure the events in tmpDroppedEvents are sent to LN finally\n+   */\n+  @Test\n+  public void unstartedSenderShouldNotAddReceivedEventsIntoTmpDropped() throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    // create receiver on site-ln and site-ny\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    // create senders on site-ny, Note: sender-id is its destination, i.e. ny\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+\n+    // create senders on site-ln, Note: sender-id is its destination, i.e. ln\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+\n+    // create PR on site-ny\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    // create PR on site-ln\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    // start sender on site-ny\n+    startSenderInVMs(\"ny\", vm2, vm4);\n+\n+    // do 100 puts on site-ln\n+    vm3.invoke(() -> WANTestBase.doPutsFrom(getTestMethodName() + \"_PR\", 0, 100));\n+\n+    // verify site-ny have 100 entries\n+    vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n+    vm5.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n+\n+    // verify site-ln has not received the events from site-ny yet\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+\n+    // start sender on site-ln\n+    startSenderInVMsAsync(\"ln\", vm3, vm5);\n+\n+    // verify tmpDroppedEvents should be 0 now at site-ny\n+    vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n+    vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n+\n+    vm3.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+    vm5.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+  }\n+\n+  /**\n+   * Test that gateway sender's secondary queues do not keep dropped events\n+   * by the primary gateway sender received while it was starting but was not\n+   * started yet, after the primary finishes starting.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=true\n+   * LN site's sender's manual-start=true\n+   *\n+   * put some events from LN and start the sender in NY simultaneously\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void startedSenderReceivingEventsWhileStartingShouldDrainQueues()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    AsyncInvocation inv =\n+        vm2.invokeAsync(() -> WANTestBase.doPuts(getTestMethodName() + \"_PR\", 1000));\n+    startSenderInVMsAsync(\"ny\", vm2, vm4);\n+    inv.join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc1967afb0469d8c6fd38492c9de9ec71fff627"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDE4MTMxOnYy", "diffSide": "RIGHT", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANPropagationsFeatureDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0NzoxMFrOHRiJmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0NzoxMFrOHRiJmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0NzM1NA==", "bodyText": "The AsyncInvocation.join() method is deprecated. It should be replaced with AsyncInvocation.await().", "url": "https://github.com/apache/geode/pull/5509#discussion_r488147354", "createdAt": "2020-09-14T18:47:10Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANPropagationsFeatureDUnitTest.java", "diffHunk": "@@ -297,4 +298,322 @@ public void testReplicatedSerialPropagationWithFilter_AfterAck() throws Exceptio\n     vm4.invoke(() -> WANTestBase.waitForConcurrentSerialSenderQueueToDrain(\"ln\"));\n     vm5.invoke(() -> WANTestBase.waitForConcurrentSerialSenderQueueToDrain(\"ln\"));\n   }\n+\n+  /**\n+   * Test unstarted sender\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=true\n+   *\n+   * Make sure the events are sent from LN to NY and will not be added into tmpDroppedEvents\n+   * while normal events put from NY site can still be added to tmpDroppedEvents\n+   * Start the sender, make sure the events in tmpDroppedEvents are sent to LN finally\n+   */\n+  @Test\n+  public void unstartedSenderShouldNotAddReceivedEventsIntoTmpDropped() throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    // create receiver on site-ln and site-ny\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    // create senders on site-ny, Note: sender-id is its destination, i.e. ny\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+\n+    // create senders on site-ln, Note: sender-id is its destination, i.e. ln\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+\n+    // create PR on site-ny\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    // create PR on site-ln\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    // start sender on site-ny\n+    startSenderInVMs(\"ny\", vm2, vm4);\n+\n+    // do 100 puts on site-ln\n+    vm3.invoke(() -> WANTestBase.doPutsFrom(getTestMethodName() + \"_PR\", 0, 100));\n+\n+    // verify site-ny have 100 entries\n+    vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n+    vm5.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n+\n+    // verify site-ln has not received the events from site-ny yet\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+\n+    // start sender on site-ln\n+    startSenderInVMsAsync(\"ln\", vm3, vm5);\n+\n+    // verify tmpDroppedEvents should be 0 now at site-ny\n+    vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n+    vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n+\n+    vm3.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+    vm5.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+  }\n+\n+  /**\n+   * Test that gateway sender's secondary queues do not keep dropped events\n+   * by the primary gateway sender received while it was starting but was not\n+   * started yet, after the primary finishes starting.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=true\n+   * LN site's sender's manual-start=true\n+   *\n+   * put some events from LN and start the sender in NY simultaneously\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void startedSenderReceivingEventsWhileStartingShouldDrainQueues()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    AsyncInvocation inv =\n+        vm2.invokeAsync(() -> WANTestBase.doPuts(getTestMethodName() + \"_PR\", 1000));\n+    startSenderInVMsAsync(\"ny\", vm2, vm4);\n+    inv.join();\n+\n+    vm2.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+    vm4.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+\n+    vm2.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+    vm4.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+  }\n+\n+  /**\n+   * Test that gateway sender's secondary queues do not keep dropped events\n+   * by the primary gateway sender received while it was stopping after it is started again.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=false\n+   * LN site's sender's manual-start=false\n+   *\n+   * put some events from LN and stop the sender in NY simultaneously\n+   * Start the sender in NY.\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void startedSenderReceivingEventsWhileStoppingShouldDrainQueues()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, false));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, false));\n+\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, false));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, false));\n+\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    AsyncInvocation inv =\n+        vm2.invokeAsync(() -> WANTestBase.doPuts(getTestMethodName() + \"_PR\", 1000));\n+    stopSenderInVMsAsync(\"ny\", vm2, vm4);\n+    inv.join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc1967afb0469d8c6fd38492c9de9ec71fff627"}, "originalPosition": 172}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDE4MjExOnYy", "diffSide": "RIGHT", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANPropagationsFeatureDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0NzoyMlrOHRiKEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0NzoyMlrOHRiKEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0NzQ3Mw==", "bodyText": "The IDE warning here can be resolved by using List<AsyncInvocation<Void>>.", "url": "https://github.com/apache/geode/pull/5509#discussion_r488147473", "createdAt": "2020-09-14T18:47:22Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANPropagationsFeatureDUnitTest.java", "diffHunk": "@@ -297,4 +298,322 @@ public void testReplicatedSerialPropagationWithFilter_AfterAck() throws Exceptio\n     vm4.invoke(() -> WANTestBase.waitForConcurrentSerialSenderQueueToDrain(\"ln\"));\n     vm5.invoke(() -> WANTestBase.waitForConcurrentSerialSenderQueueToDrain(\"ln\"));\n   }\n+\n+  /**\n+   * Test unstarted sender\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=true\n+   *\n+   * Make sure the events are sent from LN to NY and will not be added into tmpDroppedEvents\n+   * while normal events put from NY site can still be added to tmpDroppedEvents\n+   * Start the sender, make sure the events in tmpDroppedEvents are sent to LN finally\n+   */\n+  @Test\n+  public void unstartedSenderShouldNotAddReceivedEventsIntoTmpDropped() throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    // create receiver on site-ln and site-ny\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    // create senders on site-ny, Note: sender-id is its destination, i.e. ny\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+\n+    // create senders on site-ln, Note: sender-id is its destination, i.e. ln\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+\n+    // create PR on site-ny\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    // create PR on site-ln\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    // start sender on site-ny\n+    startSenderInVMs(\"ny\", vm2, vm4);\n+\n+    // do 100 puts on site-ln\n+    vm3.invoke(() -> WANTestBase.doPutsFrom(getTestMethodName() + \"_PR\", 0, 100));\n+\n+    // verify site-ny have 100 entries\n+    vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n+    vm5.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n+\n+    // verify site-ln has not received the events from site-ny yet\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+\n+    // start sender on site-ln\n+    startSenderInVMsAsync(\"ln\", vm3, vm5);\n+\n+    // verify tmpDroppedEvents should be 0 now at site-ny\n+    vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n+    vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n+\n+    vm3.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+    vm5.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+  }\n+\n+  /**\n+   * Test that gateway sender's secondary queues do not keep dropped events\n+   * by the primary gateway sender received while it was starting but was not\n+   * started yet, after the primary finishes starting.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=true\n+   * LN site's sender's manual-start=true\n+   *\n+   * put some events from LN and start the sender in NY simultaneously\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void startedSenderReceivingEventsWhileStartingShouldDrainQueues()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    AsyncInvocation inv =\n+        vm2.invokeAsync(() -> WANTestBase.doPuts(getTestMethodName() + \"_PR\", 1000));\n+    startSenderInVMsAsync(\"ny\", vm2, vm4);\n+    inv.join();\n+\n+    vm2.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+    vm4.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+\n+    vm2.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+    vm4.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+  }\n+\n+  /**\n+   * Test that gateway sender's secondary queues do not keep dropped events\n+   * by the primary gateway sender received while it was stopping after it is started again.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=false\n+   * LN site's sender's manual-start=false\n+   *\n+   * put some events from LN and stop the sender in NY simultaneously\n+   * Start the sender in NY.\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void startedSenderReceivingEventsWhileStoppingShouldDrainQueues()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, false));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, false));\n+\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, false));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, false));\n+\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    AsyncInvocation inv =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc1967afb0469d8c6fd38492c9de9ec71fff627"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDE4MzczOnYy", "diffSide": "RIGHT", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANPropagationsFeatureDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0Nzo1MVrOHRiLBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0Nzo1MVrOHRiLBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0NzcxOQ==", "bodyText": "An exception is never thrown from this method, so this \"throws\" can be removed.", "url": "https://github.com/apache/geode/pull/5509#discussion_r488147719", "createdAt": "2020-09-14T18:47:51Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANPropagationsFeatureDUnitTest.java", "diffHunk": "@@ -297,4 +298,322 @@ public void testReplicatedSerialPropagationWithFilter_AfterAck() throws Exceptio\n     vm4.invoke(() -> WANTestBase.waitForConcurrentSerialSenderQueueToDrain(\"ln\"));\n     vm5.invoke(() -> WANTestBase.waitForConcurrentSerialSenderQueueToDrain(\"ln\"));\n   }\n+\n+  /**\n+   * Test unstarted sender\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=true\n+   *\n+   * Make sure the events are sent from LN to NY and will not be added into tmpDroppedEvents\n+   * while normal events put from NY site can still be added to tmpDroppedEvents\n+   * Start the sender, make sure the events in tmpDroppedEvents are sent to LN finally\n+   */\n+  @Test\n+  public void unstartedSenderShouldNotAddReceivedEventsIntoTmpDropped() throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    // create receiver on site-ln and site-ny\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    // create senders on site-ny, Note: sender-id is its destination, i.e. ny\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+\n+    // create senders on site-ln, Note: sender-id is its destination, i.e. ln\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+\n+    // create PR on site-ny\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    // create PR on site-ln\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    // start sender on site-ny\n+    startSenderInVMs(\"ny\", vm2, vm4);\n+\n+    // do 100 puts on site-ln\n+    vm3.invoke(() -> WANTestBase.doPutsFrom(getTestMethodName() + \"_PR\", 0, 100));\n+\n+    // verify site-ny have 100 entries\n+    vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n+    vm5.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n+\n+    // verify site-ln has not received the events from site-ny yet\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+\n+    // start sender on site-ln\n+    startSenderInVMsAsync(\"ln\", vm3, vm5);\n+\n+    // verify tmpDroppedEvents should be 0 now at site-ny\n+    vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n+    vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n+\n+    vm3.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+    vm5.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+  }\n+\n+  /**\n+   * Test that gateway sender's secondary queues do not keep dropped events\n+   * by the primary gateway sender received while it was starting but was not\n+   * started yet, after the primary finishes starting.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=true\n+   * LN site's sender's manual-start=true\n+   *\n+   * put some events from LN and start the sender in NY simultaneously\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void startedSenderReceivingEventsWhileStartingShouldDrainQueues()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    AsyncInvocation inv =\n+        vm2.invokeAsync(() -> WANTestBase.doPuts(getTestMethodName() + \"_PR\", 1000));\n+    startSenderInVMsAsync(\"ny\", vm2, vm4);\n+    inv.join();\n+\n+    vm2.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+    vm4.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+\n+    vm2.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+    vm4.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+  }\n+\n+  /**\n+   * Test that gateway sender's secondary queues do not keep dropped events\n+   * by the primary gateway sender received while it was stopping after it is started again.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=false\n+   * LN site's sender's manual-start=false\n+   *\n+   * put some events from LN and stop the sender in NY simultaneously\n+   * Start the sender in NY.\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void startedSenderReceivingEventsWhileStoppingShouldDrainQueues()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, false));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, false));\n+\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, false));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, false));\n+\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    AsyncInvocation inv =\n+        vm2.invokeAsync(() -> WANTestBase.doPuts(getTestMethodName() + \"_PR\", 1000));\n+    stopSenderInVMsAsync(\"ny\", vm2, vm4);\n+    inv.join();\n+\n+    startSenderInVMsAsync(\"ny\", vm2, vm4);\n+\n+    vm2.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+    vm4.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+\n+    vm2.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+    vm4.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+  }\n+\n+  /**\n+   * Test that a stopped gateway sender receiving events\n+   * does not store them in tmpDroppedEvents but after started\n+   * does not leave any event in the\n+   * gateway sender's secondary queues.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=false\n+   * LN site's sender's manual-start=false\n+   *\n+   * put some events from LN and stop the sender in NY simultaneously\n+   * Start the sender in NY.\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void stoppedSenderShouldNotAddEventsToTmpDroppedEventsButStillDrainQueuesWhenStarted()\n+      throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc1967afb0469d8c6fd38492c9de9ec71fff627"}, "originalPosition": 199}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDE4NTg4OnYy", "diffSide": "RIGHT", "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANPropagationsFeatureDUnitTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0ODoyOFrOHRiMUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0ODoyOFrOHRiMUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0ODA1MQ==", "bodyText": "An exception is never thrown from this method, so this \"throws\" can be removed.", "url": "https://github.com/apache/geode/pull/5509#discussion_r488148051", "createdAt": "2020-09-14T18:48:28Z", "author": {"login": "DonalEvans"}, "path": "geode-wan/src/distributedTest/java/org/apache/geode/internal/cache/wan/serial/SerialWANPropagationsFeatureDUnitTest.java", "diffHunk": "@@ -297,4 +298,322 @@ public void testReplicatedSerialPropagationWithFilter_AfterAck() throws Exceptio\n     vm4.invoke(() -> WANTestBase.waitForConcurrentSerialSenderQueueToDrain(\"ln\"));\n     vm5.invoke(() -> WANTestBase.waitForConcurrentSerialSenderQueueToDrain(\"ln\"));\n   }\n+\n+  /**\n+   * Test unstarted sender\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=true\n+   *\n+   * Make sure the events are sent from LN to NY and will not be added into tmpDroppedEvents\n+   * while normal events put from NY site can still be added to tmpDroppedEvents\n+   * Start the sender, make sure the events in tmpDroppedEvents are sent to LN finally\n+   */\n+  @Test\n+  public void unstartedSenderShouldNotAddReceivedEventsIntoTmpDropped() throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    // create receiver on site-ln and site-ny\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    // create senders on site-ny, Note: sender-id is its destination, i.e. ny\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+\n+    // create senders on site-ln, Note: sender-id is its destination, i.e. ln\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+\n+    // create PR on site-ny\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    // create PR on site-ln\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    // start sender on site-ny\n+    startSenderInVMs(\"ny\", vm2, vm4);\n+\n+    // do 100 puts on site-ln\n+    vm3.invoke(() -> WANTestBase.doPutsFrom(getTestMethodName() + \"_PR\", 0, 100));\n+\n+    // verify site-ny have 100 entries\n+    vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n+    vm5.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n+\n+    // verify site-ln has not received the events from site-ny yet\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+\n+    // start sender on site-ln\n+    startSenderInVMsAsync(\"ln\", vm3, vm5);\n+\n+    // verify tmpDroppedEvents should be 0 now at site-ny\n+    vm3.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n+    vm5.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ln\", 0));\n+\n+    vm3.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+    vm5.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ln\"));\n+  }\n+\n+  /**\n+   * Test that gateway sender's secondary queues do not keep dropped events\n+   * by the primary gateway sender received while it was starting but was not\n+   * started yet, after the primary finishes starting.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=true\n+   * LN site's sender's manual-start=true\n+   *\n+   * put some events from LN and start the sender in NY simultaneously\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void startedSenderReceivingEventsWhileStartingShouldDrainQueues()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, true));\n+\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, true));\n+\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    AsyncInvocation inv =\n+        vm2.invokeAsync(() -> WANTestBase.doPuts(getTestMethodName() + \"_PR\", 1000));\n+    startSenderInVMsAsync(\"ny\", vm2, vm4);\n+    inv.join();\n+\n+    vm2.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+    vm4.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+\n+    vm2.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+    vm4.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+  }\n+\n+  /**\n+   * Test that gateway sender's secondary queues do not keep dropped events\n+   * by the primary gateway sender received while it was stopping after it is started again.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=false\n+   * LN site's sender's manual-start=false\n+   *\n+   * put some events from LN and stop the sender in NY simultaneously\n+   * Start the sender in NY.\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void startedSenderReceivingEventsWhileStoppingShouldDrainQueues()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, false));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, false));\n+\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, false));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, false));\n+\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    AsyncInvocation inv =\n+        vm2.invokeAsync(() -> WANTestBase.doPuts(getTestMethodName() + \"_PR\", 1000));\n+    stopSenderInVMsAsync(\"ny\", vm2, vm4);\n+    inv.join();\n+\n+    startSenderInVMsAsync(\"ny\", vm2, vm4);\n+\n+    vm2.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+    vm4.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+\n+    vm2.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+    vm4.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+  }\n+\n+  /**\n+   * Test that a stopped gateway sender receiving events\n+   * does not store them in tmpDroppedEvents but after started\n+   * does not leave any event in the\n+   * gateway sender's secondary queues.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=false\n+   * LN site's sender's manual-start=false\n+   *\n+   * put some events from LN and stop the sender in NY simultaneously\n+   * Start the sender in NY.\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void stoppedSenderShouldNotAddEventsToTmpDroppedEventsButStillDrainQueuesWhenStarted()\n+      throws Exception {\n+    Integer lnPort = vm0.invoke(() -> WANTestBase.createFirstLocatorWithDSId(2));\n+    Integer nyPort = vm1.invoke(() -> WANTestBase.createFirstRemoteLocator(1, lnPort));\n+\n+    createCacheInVMs(lnPort, vm2, vm4);\n+    createReceiverInVMs(vm2, vm4);\n+    createCacheInVMs(nyPort, vm3, vm5);\n+    createReceiverInVMs(vm3, vm5);\n+\n+    vm2.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, false));\n+    vm4.invoke(() -> WANTestBase.createSender(\"ny\", 1, false, 100, 10, false, false, null, false));\n+\n+    vm3.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, false));\n+    vm5.invoke(() -> WANTestBase.createSender(\"ln\", 2, false, 100, 10, false, false, null, false));\n+\n+    vm2.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+    vm4.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ny\", 1, 100,\n+        isOffHeap()));\n+\n+    vm3.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+    vm5.invoke(() -> WANTestBase.createPartitionedRegion(getTestMethodName() + \"_PR\", \"ln\", 1, 100,\n+        isOffHeap()));\n+\n+    stopSenderInVMsAsync(\"ny\", vm2, vm4);\n+\n+    vm2.invoke(() -> WANTestBase.doPutsFrom(getTestMethodName() + \"_PR\", 0, 100));\n+\n+    // verify tmpDroppedEvents is 0 at site-ny\n+    vm2.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+    vm4.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n+    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 100));\n+\n+    vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+    vm5.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 0));\n+\n+\n+    startSenderInVMsAsync(\"ny\", vm2, vm4);\n+\n+    vm2.invoke(() -> WANTestBase.doPutsFrom(getTestMethodName() + \"_PR\", 100, 1000));\n+\n+    vm2.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+    vm4.invoke(() -> WANTestBase.verifyTmpDroppedEventSize(\"ny\", 0));\n+\n+    vm2.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 1000));\n+    vm4.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 1000));\n+\n+    vm3.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 900));\n+    vm5.invoke(() -> WANTestBase.validateRegionSize(getTestMethodName() + \"_PR\", 900));\n+\n+    // verify the secondary's queues are drained at site-ny\n+    vm2.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+    vm4.invoke(() -> WANTestBase.validateParallelSenderQueueAllBucketsDrained(\"ny\"));\n+  }\n+\n+  /**\n+   * Test that a stopped primary gateway sender receiving events\n+   * does not store them in tmpDroppedEvents but after started\n+   * does not leave any event in the\n+   * gateway sender's secondary queues.\n+   * Site-LN: dsid=2: senderId=\"ny\": vm2, vm4\n+   * Site-NY: dsid=1: senderId=\"ln\": vm3, vm6\n+   * NY site's sender's manual-start=false\n+   * LN site's sender's manual-start=false\n+   *\n+   * put some events from LN and stop one instance of the sender in NY simultaneously\n+   * Start the stopped instance of the sender in NY.\n+   * Make sure there are no events in tmpDroppedEvents and the queues are drained.\n+   */\n+  @Test\n+  public void stoppedPrimarySenderShouldNotAddEventsToTmpDroppedEventsButStillDrainQueuesWhenStarted()\n+      throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc1967afb0469d8c6fd38492c9de9ec71fff627"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDIxNDI5OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/AbstractGatewaySender.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo1NjoyN1rOHRid5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo1NjoyN1rOHRid5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1MjU0OA==", "bodyText": "This line could be moved to immediately before the if (isDebugEnabled) check so that it's only executed if necessary rather than unnecessarily in the case that this.eventProcessor != null evaluates to true.", "url": "https://github.com/apache/geode/pull/5509#discussion_r488152548", "createdAt": "2020-09-14T18:56:27Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/AbstractGatewaySender.java", "diffHunk": "@@ -1118,6 +1115,18 @@ public void distribute(EnumListenerEvent operation, EntryEventImpl event,\n     }\n   }\n \n+  private void recordDroppedEvent(EntryEventImpl event) {\n+    final boolean isDebugEnabled = logger.isDebugEnabled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc1967afb0469d8c6fd38492c9de9ec71fff627"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MDExMjU0OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/AbstractGatewaySender.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMzo1NDowMVrOHSbKbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNzo0MDoyNFrOHYM05w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4MTQ1Mw==", "bodyText": "In ConcurrentParallelGatewaySenderEventProcessor.registerEventDroppedInPrimaryQueue instead of calling sendQueueRemovalMesssageForDroppedEvent to send a ParallelQueueRemovalMessage inline, can you call ParallelGatewaySenderQueue.addRemovedEvent and let the BatchRemovalThread handle sending the message?\nSomething like:\n...\nint bucketId = PartitionedRegionHelper.getHashKey((EntryOperation) droppedEvent);\nboolean isPrimary = prQ.getRegionAdvisor().getBucketAdvisor(bucketId).isPrimary();\nif (isPrimary) {\n  long shadowKey = droppedEvent.getTailKey();\n  ParallelGatewaySenderQueue pgsq = (ParallelGatewaySenderQueue) cpgsq.getQueueByBucket(bucketId);\n  pgsq.addRemovedEvent(prQ, bucketId, shadowKey);\n  this.sender.getStatistics().incEventsDroppedDueToPrimarySenderNotRunning();\n...\n``\nI didn't try this, but it seems like it should work.\n\nI'm not sure if the same idea would work for SerialGatewaySenderEventProcessor.sendBatchDestroyOperationForDroppedEvent since it has a different implementation.\n\nbtw - sendQueueRemovalMesssageForDroppedEvent has an extra 's'.", "url": "https://github.com/apache/geode/pull/5509#discussion_r489081453", "createdAt": "2020-09-15T23:54:01Z", "author": {"login": "boglesby"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/AbstractGatewaySender.java", "diffHunk": "@@ -1118,6 +1115,17 @@ public void distribute(EnumListenerEvent operation, EntryEventImpl event,\n     }\n   }\n \n+  private void recordDroppedEvent(EntryEventImpl event) {\n+    if (this.eventProcessor != null) {\n+      this.eventProcessor.registerEventDroppedInPrimaryQueue(event);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa901e3db98277d940ef3d049b46dd0835f35b30"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM5NTU1OQ==", "bodyText": "@boglesby I have made the change you have proposed for the parallel gateway sender case. You can check it in the new commit. Nevertheless, this change it requires that the BatchRemoval thread is not shutdown when the gateway sender is stopped. Is there any problem with not stopping the BatchRemoval thread when the sender is stopped?\nRegarding the SerialGatewaySender, I think I found a way of doing it which consists of changing the following call in SerialGatewaySenderEventProcessor.registerEventDroppedInPrimaryQueue():\nthis.processors.get(index).sendBatchDestroyOperationForDroppedEvent(droppedEvent, index);\nto this one:\nthis.processors.get(index).sendBatchDestroyOperationForDroppedEvent(droppedEvent, index);\nAnd adding the following method to SerialGatewaySenderQueue:\npublic void addRemovedEvent(EntryEventImpl droppedEvent) { lock.writeLock().lock(); lastDispatchedKey = droppedEvent.getTailKey(); notifyAll(); lock.writeLock().unlock(); }\nThe problem is that I did not find any test case to verify that it worked correctly. I ran the tests in SerialWANPropagationsFeatureDUnitTest and it did not matter if I used the original solution, the new solution or even removed the sending of batch destroy operation. I looks as if it were not necessary. That's why I did not dare to add the change. Any idea?", "url": "https://github.com/apache/geode/pull/5509#discussion_r489395559", "createdAt": "2020-09-16T12:25:40Z", "author": {"login": "albertogpz"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/AbstractGatewaySender.java", "diffHunk": "@@ -1118,6 +1115,17 @@ public void distribute(EnumListenerEvent operation, EntryEventImpl event,\n     }\n   }\n \n+  private void recordDroppedEvent(EntryEventImpl event) {\n+    if (this.eventProcessor != null) {\n+      this.eventProcessor.registerEventDroppedInPrimaryQueue(event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4MTQ1Mw=="}, "originalCommit": {"oid": "aa901e3db98277d940ef3d049b46dd0835f35b30"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTU2NTU4OA==", "bodyText": "Oh, I didn't think about the BatchRemoval thread not being there. I'm not really sure the consequences of keeping that thread around. I just seems better for performance to not send a message on every operation, and instead batch them up. Maybe the behavior can be something like: If that cache is closing, stop the BRM; otherwise keep it around to process these messages.", "url": "https://github.com/apache/geode/pull/5509#discussion_r489565588", "createdAt": "2020-09-16T16:23:24Z", "author": {"login": "boglesby"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/AbstractGatewaySender.java", "diffHunk": "@@ -1118,6 +1115,17 @@ public void distribute(EnumListenerEvent operation, EntryEventImpl event,\n     }\n   }\n \n+  private void recordDroppedEvent(EntryEventImpl event) {\n+    if (this.eventProcessor != null) {\n+      this.eventProcessor.registerEventDroppedInPrimaryQueue(event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4MTQ1Mw=="}, "originalCommit": {"oid": "aa901e3db98277d940ef3d049b46dd0835f35b30"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3MDExMw==", "bodyText": "How could I know if the cache is closing from inside the stop method of the ParallelGatewaySender? Is there a way?", "url": "https://github.com/apache/geode/pull/5509#discussion_r490270113", "createdAt": "2020-09-17T14:01:05Z", "author": {"login": "albertogpz"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/AbstractGatewaySender.java", "diffHunk": "@@ -1118,6 +1115,17 @@ public void distribute(EnumListenerEvent operation, EntryEventImpl event,\n     }\n   }\n \n+  private void recordDroppedEvent(EntryEventImpl event) {\n+    if (this.eventProcessor != null) {\n+      this.eventProcessor.registerEventDroppedInPrimaryQueue(event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4MTQ1Mw=="}, "originalCommit": {"oid": "aa901e3db98277d940ef3d049b46dd0835f35b30"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjA4MDQ1OQ==", "bodyText": "@boglesby I reverted the change about letting the batch removal thread remove the dropped events because I did not find a way to stop the thread when the cache was closing.\n@boglesby and @gesterzhou , could you please approve the PR if you are ok with the changes? Otherwise, please let me know what else should be changed.", "url": "https://github.com/apache/geode/pull/5509#discussion_r492080459", "createdAt": "2020-09-21T14:14:48Z", "author": {"login": "albertogpz"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/AbstractGatewaySender.java", "diffHunk": "@@ -1118,6 +1115,17 @@ public void distribute(EnumListenerEvent operation, EntryEventImpl event,\n     }\n   }\n \n+  private void recordDroppedEvent(EntryEventImpl event) {\n+    if (this.eventProcessor != null) {\n+      this.eventProcessor.registerEventDroppedInPrimaryQueue(event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4MTQ1Mw=="}, "originalCommit": {"oid": "aa901e3db98277d940ef3d049b46dd0835f35b30"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTEzODAyMw==", "bodyText": "@boglesby and @gesterzhou, friendly reminder :-)", "url": "https://github.com/apache/geode/pull/5509#discussion_r495138023", "createdAt": "2020-09-25T17:40:24Z", "author": {"login": "albertogpz"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/wan/AbstractGatewaySender.java", "diffHunk": "@@ -1118,6 +1115,17 @@ public void distribute(EnumListenerEvent operation, EntryEventImpl event,\n     }\n   }\n \n+  private void recordDroppedEvent(EntryEventImpl event) {\n+    if (this.eventProcessor != null) {\n+      this.eventProcessor.registerEventDroppedInPrimaryQueue(event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTA4MTQ1Mw=="}, "originalCommit": {"oid": "aa901e3db98277d940ef3d049b46dd0835f35b30"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4796, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}