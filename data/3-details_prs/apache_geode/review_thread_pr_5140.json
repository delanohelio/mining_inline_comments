{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNzkzNjEx", "number": 5140, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzoyNToyMVrOD-dihA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzoyNzoyN1rOD-djog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODIyMjc2OnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/HExistsExecutor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzoyNToyMVrOGYk-DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNDowMzoxMFrOGZYSDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyNDcxNw==", "bodyText": "What do you think of supporting a flavor of \"integer(boolean)\" that would respond with 1 if true and 0 if false? I've seen a large number of redis commands that do this", "url": "https://github.com/apache/geode/pull/5140#discussion_r428424717", "createdAt": "2020-05-21T03:25:21Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/HExistsExecutor.java", "diffHunk": "@@ -53,12 +54,7 @@ public void executeCommand(Command command, ExecutionHandlerContext context) {\n     RedisHash map = getRedisHash(context, key);\n     boolean hasField = map.containsKey(field);\n \n-    if (hasField) {\n-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), EXISTS));\n-    } else {\n-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NOT_EXISTS));\n-    }\n-\n+    return RedisResponse.integer(hasField ? EXISTS : NOT_EXISTS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a174b344c5295f8b77c4d9a8048245321025e68"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI2NTQyMA==", "bodyText": "Yes, good idea.", "url": "https://github.com/apache/geode/pull/5140#discussion_r429265420", "createdAt": "2020-05-22T14:03:10Z", "author": {"login": "jdeppe-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/HExistsExecutor.java", "diffHunk": "@@ -53,12 +54,7 @@ public void executeCommand(Command command, ExecutionHandlerContext context) {\n     RedisHash map = getRedisHash(context, key);\n     boolean hasField = map.containsKey(field);\n \n-    if (hasField) {\n-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), EXISTS));\n-    } else {\n-      command.setResponse(Coder.getIntegerResponse(context.getByteBufAllocator(), NOT_EXISTS));\n-    }\n-\n+    return RedisResponse.integer(hasField ? EXISTS : NOT_EXISTS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyNDcxNw=="}, "originalCommit": {"oid": "2a174b344c5295f8b77c4d9a8048245321025e68"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2ODIyNTYyOnYy", "diffSide": "RIGHT", "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/HScanExecutor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzoyNzoyN1rOGYk__Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQwMzoyNzoyN1rOGYk__Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODQyNTIxMw==", "bodyText": "a static import of ERROR_ILLEGAL_GLOB would be nice", "url": "https://github.com/apache/geode/pull/5140#discussion_r428425213", "createdAt": "2020-05-21T03:27:27Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-redis/src/main/java/org/apache/geode/redis/internal/executor/hash/HScanExecutor.java", "diffHunk": "@@ -95,28 +94,24 @@ public void executeCommand(Command command, ExecutionHandlerContext context) {\n           count = Coder.bytesToInt(bytes);\n         }\n       } catch (NumberFormatException e) {\n-        command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_COUNT));\n-        return;\n+        return RedisResponse.error(ERROR_COUNT);\n       }\n     }\n \n     if (count < 0) {\n-      command.setResponse(Coder.getErrorResponse(context.getByteBufAllocator(), ERROR_COUNT));\n-      return;\n+      return RedisResponse.error(ERROR_COUNT);\n     }\n \n     try {\n       matchPattern = convertGlobToRegex(globMatchPattern);\n     } catch (PatternSyntaxException e) {\n-      command.setResponse(\n-          Coder.getErrorResponse(context.getByteBufAllocator(), RedisConstants.ERROR_ILLEGAL_GLOB));\n-      return;\n+      return RedisResponse.error(RedisConstants.ERROR_ILLEGAL_GLOB);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a174b344c5295f8b77c4d9a8048245321025e68"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4087, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}