{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNzAwMTYz", "number": 5055, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTo0MDo1MlrOD5jScQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTo1NjozNVrOD5jnfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjczNTg1OnYy", "diffSide": "RIGHT", "path": "geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegion.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTo0MDo1MlrOGQ4wow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzowMjo0MlrOGQ-s8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2MDM1NQ==", "bodyText": "The exception isn't ignored, so it shouldn't be called \"ignore.\"", "url": "https://github.com/apache/geode/pull/5055#discussion_r420360355", "createdAt": "2020-05-05T19:40:52Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegion.java", "diffHunk": "@@ -4593,39 +4593,58 @@ void updateNodeToBucketMap(\n         buckets = bucketKeys.keySet();\n       }\n \n-      for (Integer bucket : buckets) {\n-        Set keys = null;\n-        if (bucketKeys == null) {\n-          try {\n-            FetchKeysResponse fkr = FetchKeysMessage.send(member, this, bucket, true);\n-            keys = fkr.waitForKeys();\n-          } catch (ForceReattemptException ignore) {\n-            failures.add(bucket);\n-          }\n-        } else {\n-          keys = bucketKeys.get(bucket);\n+      fetchKeysAndValues(values, servConn, failures, member, bucketKeys, buckets);\n+    }\n+    return failures;\n+  }\n+\n+  void fetchKeysAndValues(VersionedObjectList values, ServerConnection servConn,\n+      Set<Integer> failures, InternalDistributedMember member,\n+      HashMap<Integer, HashSet> bucketKeys, Set<Integer> buckets)\n+      throws IOException {\n+    for (Integer bucket : buckets) {\n+      Set keys = null;\n+      if (bucketKeys == null) {\n+        try {\n+          FetchKeysResponse fetchKeysResponse = getFetchKeysResponse(member, bucket);\n+          keys = fetchKeysResponse.waitForKeys();\n+        } catch (ForceReattemptException ignore) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d61bae66de48625dfbff45cf159b9fcb54529828"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxNjIyNw==", "bodyText": "The exception was caught here, but the exception is itself being ignored. Seems that this was particularly changed to ignore in a previous checkin. Does this needs to change back definitely?", "url": "https://github.com/apache/geode/pull/5055#discussion_r420416227", "createdAt": "2020-05-05T21:26:08Z", "author": {"login": "pivotal-eshu"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegion.java", "diffHunk": "@@ -4593,39 +4593,58 @@ void updateNodeToBucketMap(\n         buckets = bucketKeys.keySet();\n       }\n \n-      for (Integer bucket : buckets) {\n-        Set keys = null;\n-        if (bucketKeys == null) {\n-          try {\n-            FetchKeysResponse fkr = FetchKeysMessage.send(member, this, bucket, true);\n-            keys = fkr.waitForKeys();\n-          } catch (ForceReattemptException ignore) {\n-            failures.add(bucket);\n-          }\n-        } else {\n-          keys = bucketKeys.get(bucket);\n+      fetchKeysAndValues(values, servConn, failures, member, bucketKeys, buckets);\n+    }\n+    return failures;\n+  }\n+\n+  void fetchKeysAndValues(VersionedObjectList values, ServerConnection servConn,\n+      Set<Integer> failures, InternalDistributedMember member,\n+      HashMap<Integer, HashSet> bucketKeys, Set<Integer> buckets)\n+      throws IOException {\n+    for (Integer bucket : buckets) {\n+      Set keys = null;\n+      if (bucketKeys == null) {\n+        try {\n+          FetchKeysResponse fetchKeysResponse = getFetchKeysResponse(member, bucket);\n+          keys = fetchKeysResponse.waitForKeys();\n+        } catch (ForceReattemptException ignore) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2MDM1NQ=="}, "originalCommit": {"oid": "d61bae66de48625dfbff45cf159b9fcb54529828"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1NzcxNQ==", "bodyText": "Ah, I see. We may catch the exception, but we don't actually do anything with it, even though we do something if we catch it. This name is fine as it is.", "url": "https://github.com/apache/geode/pull/5055#discussion_r420457715", "createdAt": "2020-05-05T23:02:42Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/main/java/org/apache/geode/internal/cache/PartitionedRegion.java", "diffHunk": "@@ -4593,39 +4593,58 @@ void updateNodeToBucketMap(\n         buckets = bucketKeys.keySet();\n       }\n \n-      for (Integer bucket : buckets) {\n-        Set keys = null;\n-        if (bucketKeys == null) {\n-          try {\n-            FetchKeysResponse fkr = FetchKeysMessage.send(member, this, bucket, true);\n-            keys = fkr.waitForKeys();\n-          } catch (ForceReattemptException ignore) {\n-            failures.add(bucket);\n-          }\n-        } else {\n-          keys = bucketKeys.get(bucket);\n+      fetchKeysAndValues(values, servConn, failures, member, bucketKeys, buckets);\n+    }\n+    return failures;\n+  }\n+\n+  void fetchKeysAndValues(VersionedObjectList values, ServerConnection servConn,\n+      Set<Integer> failures, InternalDistributedMember member,\n+      HashMap<Integer, HashSet> bucketKeys, Set<Integer> buckets)\n+      throws IOException {\n+    for (Integer bucket : buckets) {\n+      Set keys = null;\n+      if (bucketKeys == null) {\n+        try {\n+          FetchKeysResponse fetchKeysResponse = getFetchKeysResponse(member, bucket);\n+          keys = fetchKeysResponse.waitForKeys();\n+        } catch (ForceReattemptException ignore) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2MDM1NQ=="}, "originalCommit": {"oid": "d61bae66de48625dfbff45cf159b9fcb54529828"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjc3MDc0OnYy", "diffSide": "RIGHT", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTo1MDo1N1rOGQ5GHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMTozMTo1OFrOGQ8W1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2NTg1NA==", "bodyText": "Here you should use a real Set instead of a mock.", "url": "https://github.com/apache/geode/pull/5055#discussion_r420365854", "createdAt": "2020-05-05T19:50:57Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionTest.java", "diffHunk": "@@ -573,6 +578,50 @@ public void transactionThrowsTransactionDataRebalancedExceptionIfIsAForceReattem\n         .hasMessage(PartitionedRegion.DATA_MOVED_BY_REBALANCE).hasCause(exception);\n   }\n \n+  @Test\n+  public void failuresSavedIfFetchKeysThrows() throws Exception {\n+    PartitionedRegion spyPartitionedRegion = spy(partitionedRegion);\n+\n+    VersionedObjectList values = mock(VersionedObjectList.class);\n+    ServerConnection serverConnection = mock(ServerConnection.class);\n+    Set<Integer> failures = mock(Set.class);\n+    InternalDistributedMember member = mock(InternalDistributedMember.class);\n+    Set<Integer> buckets = new HashSet<>();\n+    buckets.add(1);\n+    doThrow(new ForceReattemptException(\"\")).when(spyPartitionedRegion).getFetchKeysResponse(member,\n+        1);\n+\n+    spyPartitionedRegion.fetchKeysAndValues(values, serverConnection, failures, member, null,\n+        buckets);\n+\n+    verify(failures).add(1);\n+    verify(spyPartitionedRegion, never()).getValuesForKeys(values, serverConnection, null);\n+  }\n+\n+  @Test\n+  public void fetchKeysAndValuesInvokesGetValuesForKeys() throws Exception {\n+    PartitionedRegion spyPartitionedRegion = spy(partitionedRegion);\n+\n+    VersionedObjectList values = mock(VersionedObjectList.class);\n+    ServerConnection serverConnection = mock(ServerConnection.class);\n+    Set<Integer> failures = mock(Set.class);\n+    InternalDistributedMember member = mock(InternalDistributedMember.class);\n+    Set<Integer> buckets = new HashSet<>();\n+    buckets.add(1);\n+    FetchKeysMessage.FetchKeysResponse fetchKeysResponse =\n+        mock(FetchKeysMessage.FetchKeysResponse.class);\n+    doReturn(fetchKeysResponse).when(spyPartitionedRegion).getFetchKeysResponse(member, 1);\n+    Set keys = mock(Set.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d61bae66de48625dfbff45cf159b9fcb54529828"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxOTI4NQ==", "bodyText": "I'd like to know the reason why this has to be a real Set.", "url": "https://github.com/apache/geode/pull/5055#discussion_r420419285", "createdAt": "2020-05-05T21:31:58Z", "author": {"login": "pivotal-eshu"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionTest.java", "diffHunk": "@@ -573,6 +578,50 @@ public void transactionThrowsTransactionDataRebalancedExceptionIfIsAForceReattem\n         .hasMessage(PartitionedRegion.DATA_MOVED_BY_REBALANCE).hasCause(exception);\n   }\n \n+  @Test\n+  public void failuresSavedIfFetchKeysThrows() throws Exception {\n+    PartitionedRegion spyPartitionedRegion = spy(partitionedRegion);\n+\n+    VersionedObjectList values = mock(VersionedObjectList.class);\n+    ServerConnection serverConnection = mock(ServerConnection.class);\n+    Set<Integer> failures = mock(Set.class);\n+    InternalDistributedMember member = mock(InternalDistributedMember.class);\n+    Set<Integer> buckets = new HashSet<>();\n+    buckets.add(1);\n+    doThrow(new ForceReattemptException(\"\")).when(spyPartitionedRegion).getFetchKeysResponse(member,\n+        1);\n+\n+    spyPartitionedRegion.fetchKeysAndValues(values, serverConnection, failures, member, null,\n+        buckets);\n+\n+    verify(failures).add(1);\n+    verify(spyPartitionedRegion, never()).getValuesForKeys(values, serverConnection, null);\n+  }\n+\n+  @Test\n+  public void fetchKeysAndValuesInvokesGetValuesForKeys() throws Exception {\n+    PartitionedRegion spyPartitionedRegion = spy(partitionedRegion);\n+\n+    VersionedObjectList values = mock(VersionedObjectList.class);\n+    ServerConnection serverConnection = mock(ServerConnection.class);\n+    Set<Integer> failures = mock(Set.class);\n+    InternalDistributedMember member = mock(InternalDistributedMember.class);\n+    Set<Integer> buckets = new HashSet<>();\n+    buckets.add(1);\n+    FetchKeysMessage.FetchKeysResponse fetchKeysResponse =\n+        mock(FetchKeysMessage.FetchKeysResponse.class);\n+    doReturn(fetchKeysResponse).when(spyPartitionedRegion).getFetchKeysResponse(member, 1);\n+    Set keys = mock(Set.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2NTg1NA=="}, "originalCommit": {"oid": "d61bae66de48625dfbff45cf159b9fcb54529828"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjc4NjkxOnYy", "diffSide": "RIGHT", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTo1NTo0NFrOGQ5QXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzowMjo1NFrOGQ-tPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2ODQ3Ng==", "bodyText": "It's best not to mock Collections. It's fine to just use an actual Set here.", "url": "https://github.com/apache/geode/pull/5055#discussion_r420368476", "createdAt": "2020-05-05T19:55:44Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionTest.java", "diffHunk": "@@ -573,6 +578,50 @@ public void transactionThrowsTransactionDataRebalancedExceptionIfIsAForceReattem\n         .hasMessage(PartitionedRegion.DATA_MOVED_BY_REBALANCE).hasCause(exception);\n   }\n \n+  @Test\n+  public void failuresSavedIfFetchKeysThrows() throws Exception {\n+    PartitionedRegion spyPartitionedRegion = spy(partitionedRegion);\n+\n+    VersionedObjectList values = mock(VersionedObjectList.class);\n+    ServerConnection serverConnection = mock(ServerConnection.class);\n+    Set<Integer> failures = mock(Set.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d61bae66de48625dfbff45cf159b9fcb54529828"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxNzUxNw==", "bodyText": "The mocked failures as a set is used later to verify whether a method is invoked on the set. Otherwise it would be hard to verify.", "url": "https://github.com/apache/geode/pull/5055#discussion_r420417517", "createdAt": "2020-05-05T21:28:44Z", "author": {"login": "pivotal-eshu"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionTest.java", "diffHunk": "@@ -573,6 +578,50 @@ public void transactionThrowsTransactionDataRebalancedExceptionIfIsAForceReattem\n         .hasMessage(PartitionedRegion.DATA_MOVED_BY_REBALANCE).hasCause(exception);\n   }\n \n+  @Test\n+  public void failuresSavedIfFetchKeysThrows() throws Exception {\n+    PartitionedRegion spyPartitionedRegion = spy(partitionedRegion);\n+\n+    VersionedObjectList values = mock(VersionedObjectList.class);\n+    ServerConnection serverConnection = mock(ServerConnection.class);\n+    Set<Integer> failures = mock(Set.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2ODQ3Ng=="}, "originalCommit": {"oid": "d61bae66de48625dfbff45cf159b9fcb54529828"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1Nzc4OA==", "bodyText": "Instead of verifying the method call on the mocked set, you can verify the contents of the real set, which should contain one item, which is the Integer 1.", "url": "https://github.com/apache/geode/pull/5055#discussion_r420457788", "createdAt": "2020-05-05T23:02:54Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionTest.java", "diffHunk": "@@ -573,6 +578,50 @@ public void transactionThrowsTransactionDataRebalancedExceptionIfIsAForceReattem\n         .hasMessage(PartitionedRegion.DATA_MOVED_BY_REBALANCE).hasCause(exception);\n   }\n \n+  @Test\n+  public void failuresSavedIfFetchKeysThrows() throws Exception {\n+    PartitionedRegion spyPartitionedRegion = spy(partitionedRegion);\n+\n+    VersionedObjectList values = mock(VersionedObjectList.class);\n+    ServerConnection serverConnection = mock(ServerConnection.class);\n+    Set<Integer> failures = mock(Set.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2ODQ3Ng=="}, "originalCommit": {"oid": "d61bae66de48625dfbff45cf159b9fcb54529828"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjc4OTcyOnYy", "diffSide": "RIGHT", "path": "geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTo1NjozNVrOGQ5SKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMzoyOTo0MFrOGQ_SWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2ODkzOQ==", "bodyText": "Here you should use a real Set instead of a mock.", "url": "https://github.com/apache/geode/pull/5055#discussion_r420368939", "createdAt": "2020-05-05T19:56:35Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionTest.java", "diffHunk": "@@ -573,6 +578,50 @@ public void transactionThrowsTransactionDataRebalancedExceptionIfIsAForceReattem\n         .hasMessage(PartitionedRegion.DATA_MOVED_BY_REBALANCE).hasCause(exception);\n   }\n \n+  @Test\n+  public void failuresSavedIfFetchKeysThrows() throws Exception {\n+    PartitionedRegion spyPartitionedRegion = spy(partitionedRegion);\n+\n+    VersionedObjectList values = mock(VersionedObjectList.class);\n+    ServerConnection serverConnection = mock(ServerConnection.class);\n+    Set<Integer> failures = mock(Set.class);\n+    InternalDistributedMember member = mock(InternalDistributedMember.class);\n+    Set<Integer> buckets = new HashSet<>();\n+    buckets.add(1);\n+    doThrow(new ForceReattemptException(\"\")).when(spyPartitionedRegion).getFetchKeysResponse(member,\n+        1);\n+\n+    spyPartitionedRegion.fetchKeysAndValues(values, serverConnection, failures, member, null,\n+        buckets);\n+\n+    verify(failures).add(1);\n+    verify(spyPartitionedRegion, never()).getValuesForKeys(values, serverConnection, null);\n+  }\n+\n+  @Test\n+  public void fetchKeysAndValuesInvokesGetValuesForKeys() throws Exception {\n+    PartitionedRegion spyPartitionedRegion = spy(partitionedRegion);\n+\n+    VersionedObjectList values = mock(VersionedObjectList.class);\n+    ServerConnection serverConnection = mock(ServerConnection.class);\n+    Set<Integer> failures = mock(Set.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d61bae66de48625dfbff45cf159b9fcb54529828"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQxODg0Ng==", "bodyText": "Is that a particular reason set should not be mocked? It is not being iterated through, just used as a placeholder. I would like to know the reason for the requested change so that I may gain some new knowledge.", "url": "https://github.com/apache/geode/pull/5055#discussion_r420418846", "createdAt": "2020-05-05T21:31:15Z", "author": {"login": "pivotal-eshu"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionTest.java", "diffHunk": "@@ -573,6 +578,50 @@ public void transactionThrowsTransactionDataRebalancedExceptionIfIsAForceReattem\n         .hasMessage(PartitionedRegion.DATA_MOVED_BY_REBALANCE).hasCause(exception);\n   }\n \n+  @Test\n+  public void failuresSavedIfFetchKeysThrows() throws Exception {\n+    PartitionedRegion spyPartitionedRegion = spy(partitionedRegion);\n+\n+    VersionedObjectList values = mock(VersionedObjectList.class);\n+    ServerConnection serverConnection = mock(ServerConnection.class);\n+    Set<Integer> failures = mock(Set.class);\n+    InternalDistributedMember member = mock(InternalDistributedMember.class);\n+    Set<Integer> buckets = new HashSet<>();\n+    buckets.add(1);\n+    doThrow(new ForceReattemptException(\"\")).when(spyPartitionedRegion).getFetchKeysResponse(member,\n+        1);\n+\n+    spyPartitionedRegion.fetchKeysAndValues(values, serverConnection, failures, member, null,\n+        buckets);\n+\n+    verify(failures).add(1);\n+    verify(spyPartitionedRegion, never()).getValuesForKeys(values, serverConnection, null);\n+  }\n+\n+  @Test\n+  public void fetchKeysAndValuesInvokesGetValuesForKeys() throws Exception {\n+    PartitionedRegion spyPartitionedRegion = spy(partitionedRegion);\n+\n+    VersionedObjectList values = mock(VersionedObjectList.class);\n+    ServerConnection serverConnection = mock(ServerConnection.class);\n+    Set<Integer> failures = mock(Set.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2ODkzOQ=="}, "originalCommit": {"oid": "d61bae66de48625dfbff45cf159b9fcb54529828"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ1NzgwNg==", "bodyText": "It's part of the \"don't mock what you don't own\" principle in TDD, explained here and here. Also, as discussed here, if you can avoid mocking a class, as in this case, then that's probably a good thing.", "url": "https://github.com/apache/geode/pull/5055#discussion_r420457806", "createdAt": "2020-05-05T23:02:58Z", "author": {"login": "DonalEvans"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionTest.java", "diffHunk": "@@ -573,6 +578,50 @@ public void transactionThrowsTransactionDataRebalancedExceptionIfIsAForceReattem\n         .hasMessage(PartitionedRegion.DATA_MOVED_BY_REBALANCE).hasCause(exception);\n   }\n \n+  @Test\n+  public void failuresSavedIfFetchKeysThrows() throws Exception {\n+    PartitionedRegion spyPartitionedRegion = spy(partitionedRegion);\n+\n+    VersionedObjectList values = mock(VersionedObjectList.class);\n+    ServerConnection serverConnection = mock(ServerConnection.class);\n+    Set<Integer> failures = mock(Set.class);\n+    InternalDistributedMember member = mock(InternalDistributedMember.class);\n+    Set<Integer> buckets = new HashSet<>();\n+    buckets.add(1);\n+    doThrow(new ForceReattemptException(\"\")).when(spyPartitionedRegion).getFetchKeysResponse(member,\n+        1);\n+\n+    spyPartitionedRegion.fetchKeysAndValues(values, serverConnection, failures, member, null,\n+        buckets);\n+\n+    verify(failures).add(1);\n+    verify(spyPartitionedRegion, never()).getValuesForKeys(values, serverConnection, null);\n+  }\n+\n+  @Test\n+  public void fetchKeysAndValuesInvokesGetValuesForKeys() throws Exception {\n+    PartitionedRegion spyPartitionedRegion = spy(partitionedRegion);\n+\n+    VersionedObjectList values = mock(VersionedObjectList.class);\n+    ServerConnection serverConnection = mock(ServerConnection.class);\n+    Set<Integer> failures = mock(Set.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2ODkzOQ=="}, "originalCommit": {"oid": "d61bae66de48625dfbff45cf159b9fcb54529828"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ2NzI4OQ==", "bodyText": "Thanks for the explanation. Change has been made.", "url": "https://github.com/apache/geode/pull/5055#discussion_r420467289", "createdAt": "2020-05-05T23:29:40Z", "author": {"login": "pivotal-eshu"}, "path": "geode-core/src/test/java/org/apache/geode/internal/cache/PartitionedRegionTest.java", "diffHunk": "@@ -573,6 +578,50 @@ public void transactionThrowsTransactionDataRebalancedExceptionIfIsAForceReattem\n         .hasMessage(PartitionedRegion.DATA_MOVED_BY_REBALANCE).hasCause(exception);\n   }\n \n+  @Test\n+  public void failuresSavedIfFetchKeysThrows() throws Exception {\n+    PartitionedRegion spyPartitionedRegion = spy(partitionedRegion);\n+\n+    VersionedObjectList values = mock(VersionedObjectList.class);\n+    ServerConnection serverConnection = mock(ServerConnection.class);\n+    Set<Integer> failures = mock(Set.class);\n+    InternalDistributedMember member = mock(InternalDistributedMember.class);\n+    Set<Integer> buckets = new HashSet<>();\n+    buckets.add(1);\n+    doThrow(new ForceReattemptException(\"\")).when(spyPartitionedRegion).getFetchKeysResponse(member,\n+        1);\n+\n+    spyPartitionedRegion.fetchKeysAndValues(values, serverConnection, failures, member, null,\n+        buckets);\n+\n+    verify(failures).add(1);\n+    verify(spyPartitionedRegion, never()).getValuesForKeys(values, serverConnection, null);\n+  }\n+\n+  @Test\n+  public void fetchKeysAndValuesInvokesGetValuesForKeys() throws Exception {\n+    PartitionedRegion spyPartitionedRegion = spy(partitionedRegion);\n+\n+    VersionedObjectList values = mock(VersionedObjectList.class);\n+    ServerConnection serverConnection = mock(ServerConnection.class);\n+    Set<Integer> failures = mock(Set.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2ODkzOQ=="}, "originalCommit": {"oid": "d61bae66de48625dfbff45cf159b9fcb54529828"}, "originalPosition": 53}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4180, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}