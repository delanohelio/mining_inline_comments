{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5MjA0MTA2", "number": 5462, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjozNToxMVrOEZkCOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjoxODo1NFrOEbBxqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjQwMjUxOnYy", "diffSide": "RIGHT", "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjozNToxMVrOHCcuOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMTo1MTowMlrOHCsg9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMyOTc4NA==", "bodyText": "Intuitively, it seems that this logic should be tried first and that the alternative (examining the marketing version) should be the fallback.\nAnother issue with this block of code is that the exception is silently ignored. At a minimum we need a clear comment explaining where the exception comes from since none of the method signatures inside the block have throws clauses. Seems like we could eliminate this try-catch entirely.\nAlso, it would aid in maintenance if the code on lines 171-197 was extracted into a method. This would simplify ConnectCommand.connect() and would give us the opportunity to name the new method, hide variables, etc. By the way, the comment at line 171 lies:\n    // since 1.14, only allow gfsh to connect to cluster that's older than 1.10\n\nShould say \"newer\" not \"older\".\nUm also, the logic on line 178-179:\n      if (versionComponent(remoteVersion, VERSION_MAJOR).equals(\"1\") && minorVersion >= 10 ||\n          versionComponent(remoteVersion, VERSION_MAJOR).equals(\"9\") && minorVersion >= 9) {\n\nNeeds a gating condition that checks the product name so that these version checks only succeed for Geode and GemFire respectively.", "url": "https://github.com/apache/geode/pull/5462#discussion_r472329784", "createdAt": "2020-08-18T16:35:11Z", "author": {"login": "Bill"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "diffHunk": "@@ -186,6 +186,16 @@ public ResultModel connect(\n       gfsh.logInfo(\"failed to get the the remote version.\", ex);\n     }\n \n+    // fallback: see if serialization versions matches (Geode 1.12 or later cluster)\n+    try {\n+      String gfshGeodeSerializationVersion = gfsh.getGeodeSerializationVersion();\n+      String remoteGeodeSerializationVersion = invoker.getRemoteGeodeSerializationVersion();\n+      if (gfshGeodeSerializationVersion.equals(remoteGeodeSerializationVersion)) {\n+        return result;\n+      }\n+    } catch (Exception ignore) {\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f99ab789269149b37a3b8861566521065144273f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4ODUzMg==", "bodyText": "I've moved the logic for determining compatible clusters into a central method to decouple from the network calls needed to get the necessary info.  It's a lot easier now to test just this method in isolation.\nRather than add even further assumptions about product name (even if it were available from the remote cluster) I've constrained the logic that uses product version to the narrowest possible scenario (specific known versions and only used if the remote cluster does not report serialization version)", "url": "https://github.com/apache/geode/pull/5462#discussion_r472588532", "createdAt": "2020-08-19T01:51:02Z", "author": {"login": "onichols-pivotal"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "diffHunk": "@@ -186,6 +186,16 @@ public ResultModel connect(\n       gfsh.logInfo(\"failed to get the the remote version.\", ex);\n     }\n \n+    // fallback: see if serialization versions matches (Geode 1.12 or later cluster)\n+    try {\n+      String gfshGeodeSerializationVersion = gfsh.getGeodeSerializationVersion();\n+      String remoteGeodeSerializationVersion = invoker.getRemoteGeodeSerializationVersion();\n+      if (gfshGeodeSerializationVersion.equals(remoteGeodeSerializationVersion)) {\n+        return result;\n+      }\n+    } catch (Exception ignore) {\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMyOTc4NA=="}, "originalCommit": {"oid": "f99ab789269149b37a3b8861566521065144273f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjU4ODYzOnYy", "diffSide": "RIGHT", "path": "geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/commands/ConnectCommandTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNzoyMzoxNVrOHCekkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwMTo0Nzo0N1rOHCsdkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM2MDA4Mw==", "bodyText": "This is my understanding of the equivalence classes for testing are (rsv = remote serialization version read via JMX, rmv = remote marketing version read via JMX)\nrsv >= 1.12 && rmv == dont-care\n   compatible, covered by connectToManagerBySerializationVersion()\nrsv < 1.12\n   impossible\nrsv unknown\n   rmv >= 1.10\n     compatible, covered by connectToManagerOlderThan1_10() sic\n   rmv < 1.10\n      incompatible\n   rmv unknown\n      incompatible\n\nBy the way connectToManagerOlderThan1_10() is mis-named: it's actually connecting to version 1.10\u2014not a version older than 1.10. Please fix this name.\nBut then I also see these tests:\nconnectToManagerWithDifferentMajorVersion()\nconnectToManagerWithDifferentMinorVersion()\n\nSo major and minor versions seem to be important too. But only for certain version ranges? Actually ConnectCommand does not, in general respect semver at all. I think those tests need to be removed.", "url": "https://github.com/apache/geode/pull/5462#discussion_r472360083", "createdAt": "2020-08-18T17:23:15Z", "author": {"login": "Bill"}, "path": "geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/commands/ConnectCommandTest.java", "diffHunk": "@@ -417,4 +417,21 @@ public void connectToManagerBefore1_10() {\n         .statusIsError()\n         .containsOutput(\"Cannot use a 1.14 gfsh client to connect to a 1.9 cluster\");\n   }\n+\n+  @Test\n+  public void connectToManagerBySerializationVersion() {\n+    when(gfsh.getVersion()).thenReturn(\"0.0.0\");\n+    when(gfsh.getGeodeSerializationVersion()).thenReturn(\"1.14.0\");\n+    when(operationInvoker.getRemoteVersion()).thenReturn(\"0.0.0\");\n+    when(operationInvoker.getRemoteGeodeSerializationVersion()).thenReturn(\"1.14.0\");\n+    when(operationInvoker.isConnected()).thenReturn(true);\n+\n+    ResultModel resultModel = new ResultModel();\n+    when(connectCommand.jmxConnect(any(), anyBoolean(), any(), any(), anyBoolean()))\n+        .thenReturn(resultModel);\n+\n+    gfshParserRule.executeAndAssertThat(connectCommand, \"connect --locator=localhost:4040\")\n+        .statusIsSuccess()\n+        .doesNotContainOutput(\"Cannot use a 0.0.0 gfsh client to connect to a 0.0.0 cluster\");\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f99ab789269149b37a3b8861566521065144273f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjU4NzY2Ng==", "bodyText": "The different-minor-version test was a holdover from the old days when gfsh was locked to same major&minor as the cluster.  I removed it.  I think major versions still play a role, as we need to carefully consider how far into the future we are willing to guarantee forward compatibility.  It seems safest for now to presume that gfsh 1.x won't be interoperable with a future Geode 2.x.  The reverse might be more plausible but we can unlock backward major version compatibility if and when the time comes.", "url": "https://github.com/apache/geode/pull/5462#discussion_r472587666", "createdAt": "2020-08-19T01:47:47Z", "author": {"login": "onichols-pivotal"}, "path": "geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/commands/ConnectCommandTest.java", "diffHunk": "@@ -417,4 +417,21 @@ public void connectToManagerBefore1_10() {\n         .statusIsError()\n         .containsOutput(\"Cannot use a 1.14 gfsh client to connect to a 1.9 cluster\");\n   }\n+\n+  @Test\n+  public void connectToManagerBySerializationVersion() {\n+    when(gfsh.getVersion()).thenReturn(\"0.0.0\");\n+    when(gfsh.getGeodeSerializationVersion()).thenReturn(\"1.14.0\");\n+    when(operationInvoker.getRemoteVersion()).thenReturn(\"0.0.0\");\n+    when(operationInvoker.getRemoteGeodeSerializationVersion()).thenReturn(\"1.14.0\");\n+    when(operationInvoker.isConnected()).thenReturn(true);\n+\n+    ResultModel resultModel = new ResultModel();\n+    when(connectCommand.jmxConnect(any(), anyBoolean(), any(), any(), anyBoolean()))\n+        .thenReturn(resultModel);\n+\n+    gfshParserRule.executeAndAssertThat(connectCommand, \"connect --locator=localhost:4040\")\n+        .statusIsSuccess()\n+        .doesNotContainOutput(\"Cannot use a 0.0.0 gfsh client to connect to a 0.0.0 cluster\");\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjM2MDA4Mw=="}, "originalCommit": {"oid": "f99ab789269149b37a3b8861566521065144273f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzEwNjc1OnYy", "diffSide": "RIGHT", "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDo0NDo0MlrOHDK1RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjozMDozMVrOHDdZ3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4NTI1Mw==", "bodyText": "I think we should try to get the geodeSeriliazationVersion first since that's introduced later than the remoteVersion. If we can't get the remoteVersion, we definitely would fail at getting the remoteGeodeSerilizationVersion", "url": "https://github.com/apache/geode/pull/5462#discussion_r473085253", "createdAt": "2020-08-19T14:44:42Z", "author": {"login": "jinmeiliao"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "diffHunk": "@@ -168,26 +168,30 @@ public ResultModel connect(\n       return result;\n     }\n \n-    // since 1.14, only allow gfsh to connect to cluster that's older than 1.10\n     String remoteVersion = null;\n-    String gfshVersion = gfsh.getVersion();\n+    String remoteGeodeSerializationVersion = null;\n     try {\n       remoteVersion = invoker.getRemoteVersion();\n-      int minorVersion = Integer.parseInt(versionComponent(remoteVersion, VERSION_MINOR));\n-      if (versionComponent(remoteVersion, VERSION_MAJOR).equals(\"1\") && minorVersion >= 10 ||\n-          versionComponent(remoteVersion, VERSION_MAJOR).equals(\"9\") && minorVersion >= 9) {\n-        InfoResultModel versionInfo = result.addInfo(\"versionInfo\");\n-        versionInfo.addLine(\"You are connected to a cluster of version: \" + remoteVersion);\n-        return result;\n+      try {\n+        remoteGeodeSerializationVersion = invoker.getRemoteGeodeSerializationVersion();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b982acc4c8ea91aeca28f664a8b6e52841081a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE0MTM1NQ==", "bodyText": "I can't tell what change you are asking for.  This PR gets the remote version first, because there would be no reason to try to get remote serialization version if that fails.\nGetting the local properties (version and geodeSerializationVersion) is not prone to failure, so can be gotten exactly where needed...", "url": "https://github.com/apache/geode/pull/5462#discussion_r473141355", "createdAt": "2020-08-19T16:03:46Z", "author": {"login": "onichols-pivotal"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "diffHunk": "@@ -168,26 +168,30 @@ public ResultModel connect(\n       return result;\n     }\n \n-    // since 1.14, only allow gfsh to connect to cluster that's older than 1.10\n     String remoteVersion = null;\n-    String gfshVersion = gfsh.getVersion();\n+    String remoteGeodeSerializationVersion = null;\n     try {\n       remoteVersion = invoker.getRemoteVersion();\n-      int minorVersion = Integer.parseInt(versionComponent(remoteVersion, VERSION_MINOR));\n-      if (versionComponent(remoteVersion, VERSION_MAJOR).equals(\"1\") && minorVersion >= 10 ||\n-          versionComponent(remoteVersion, VERSION_MAJOR).equals(\"9\") && minorVersion >= 9) {\n-        InfoResultModel versionInfo = result.addInfo(\"versionInfo\");\n-        versionInfo.addLine(\"You are connected to a cluster of version: \" + remoteVersion);\n-        return result;\n+      try {\n+        remoteGeodeSerializationVersion = invoker.getRemoteGeodeSerializationVersion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4NTI1Mw=="}, "originalCommit": {"oid": "c9b982acc4c8ea91aeca28f664a8b6e52841081a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE0MjA3Ng==", "bodyText": "I think I misread your code.", "url": "https://github.com/apache/geode/pull/5462#discussion_r473142076", "createdAt": "2020-08-19T16:04:57Z", "author": {"login": "jinmeiliao"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "diffHunk": "@@ -168,26 +168,30 @@ public ResultModel connect(\n       return result;\n     }\n \n-    // since 1.14, only allow gfsh to connect to cluster that's older than 1.10\n     String remoteVersion = null;\n-    String gfshVersion = gfsh.getVersion();\n+    String remoteGeodeSerializationVersion = null;\n     try {\n       remoteVersion = invoker.getRemoteVersion();\n-      int minorVersion = Integer.parseInt(versionComponent(remoteVersion, VERSION_MINOR));\n-      if (versionComponent(remoteVersion, VERSION_MAJOR).equals(\"1\") && minorVersion >= 10 ||\n-          versionComponent(remoteVersion, VERSION_MAJOR).equals(\"9\") && minorVersion >= 9) {\n-        InfoResultModel versionInfo = result.addInfo(\"versionInfo\");\n-        versionInfo.addLine(\"You are connected to a cluster of version: \" + remoteVersion);\n-        return result;\n+      try {\n+        remoteGeodeSerializationVersion = invoker.getRemoteGeodeSerializationVersion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4NTI1Mw=="}, "originalCommit": {"oid": "c9b982acc4c8ea91aeca28f664a8b6e52841081a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4NjI0MQ==", "bodyText": "Can you put these two remote call in the same try block, this \"try\" inside \"try\" seems confusing:\ntry {\n      // serialization version is  introduced later than remoteVersion, have to call them in the right order\n      remoteVersion = invoker.getRemoteVersion();\n      remoteSerializationVersion = invoker.getRemoteGeodeSerializationVersion();\n    }\n    catch (Exception ex) {\n      // if unable to get the remote version, we are certainly talking to a pre-1.5 cluster\n      // if unable to get the remote serilization version, we are certainly talking to a pre-1.12 cluster\n      gfsh.logInfo(\"failed to get the the remote version.\", ex);\n    }", "url": "https://github.com/apache/geode/pull/5462#discussion_r473186241", "createdAt": "2020-08-19T17:01:15Z", "author": {"login": "jinmeiliao"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "diffHunk": "@@ -168,26 +168,30 @@ public ResultModel connect(\n       return result;\n     }\n \n-    // since 1.14, only allow gfsh to connect to cluster that's older than 1.10\n     String remoteVersion = null;\n-    String gfshVersion = gfsh.getVersion();\n+    String remoteGeodeSerializationVersion = null;\n     try {\n       remoteVersion = invoker.getRemoteVersion();\n-      int minorVersion = Integer.parseInt(versionComponent(remoteVersion, VERSION_MINOR));\n-      if (versionComponent(remoteVersion, VERSION_MAJOR).equals(\"1\") && minorVersion >= 10 ||\n-          versionComponent(remoteVersion, VERSION_MAJOR).equals(\"9\") && minorVersion >= 9) {\n-        InfoResultModel versionInfo = result.addInfo(\"versionInfo\");\n-        versionInfo.addLine(\"You are connected to a cluster of version: \" + remoteVersion);\n-        return result;\n+      try {\n+        remoteGeodeSerializationVersion = invoker.getRemoteGeodeSerializationVersion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4NTI1Mw=="}, "originalCommit": {"oid": "c9b982acc4c8ea91aeca28f664a8b6e52841081a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5MDE2MQ==", "bodyText": "combining like this would cause gfsh to print \"failed to get the the remote version.\" when connecting to 1.10 or 1.11", "url": "https://github.com/apache/geode/pull/5462#discussion_r473190161", "createdAt": "2020-08-19T17:05:11Z", "author": {"login": "onichols-pivotal"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "diffHunk": "@@ -168,26 +168,30 @@ public ResultModel connect(\n       return result;\n     }\n \n-    // since 1.14, only allow gfsh to connect to cluster that's older than 1.10\n     String remoteVersion = null;\n-    String gfshVersion = gfsh.getVersion();\n+    String remoteGeodeSerializationVersion = null;\n     try {\n       remoteVersion = invoker.getRemoteVersion();\n-      int minorVersion = Integer.parseInt(versionComponent(remoteVersion, VERSION_MINOR));\n-      if (versionComponent(remoteVersion, VERSION_MAJOR).equals(\"1\") && minorVersion >= 10 ||\n-          versionComponent(remoteVersion, VERSION_MAJOR).equals(\"9\") && minorVersion >= 9) {\n-        InfoResultModel versionInfo = result.addInfo(\"versionInfo\");\n-        versionInfo.addLine(\"You are connected to a cluster of version: \" + remoteVersion);\n-        return result;\n+      try {\n+        remoteGeodeSerializationVersion = invoker.getRemoteGeodeSerializationVersion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4NTI1Mw=="}, "originalCommit": {"oid": "c9b982acc4c8ea91aeca28f664a8b6e52841081a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5NDI3Mw==", "bodyText": "Oh, we use gfsh to log, maybe instead of calling gfsh.logInfo we should just call gfsh.logToFile, we will tell user they can't connect later.", "url": "https://github.com/apache/geode/pull/5462#discussion_r473194273", "createdAt": "2020-08-19T17:12:03Z", "author": {"login": "jinmeiliao"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "diffHunk": "@@ -168,26 +168,30 @@ public ResultModel connect(\n       return result;\n     }\n \n-    // since 1.14, only allow gfsh to connect to cluster that's older than 1.10\n     String remoteVersion = null;\n-    String gfshVersion = gfsh.getVersion();\n+    String remoteGeodeSerializationVersion = null;\n     try {\n       remoteVersion = invoker.getRemoteVersion();\n-      int minorVersion = Integer.parseInt(versionComponent(remoteVersion, VERSION_MINOR));\n-      if (versionComponent(remoteVersion, VERSION_MAJOR).equals(\"1\") && minorVersion >= 10 ||\n-          versionComponent(remoteVersion, VERSION_MAJOR).equals(\"9\") && minorVersion >= 9) {\n-        InfoResultModel versionInfo = result.addInfo(\"versionInfo\");\n-        versionInfo.addLine(\"You are connected to a cluster of version: \" + remoteVersion);\n-        return result;\n+      try {\n+        remoteGeodeSerializationVersion = invoker.getRemoteGeodeSerializationVersion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4NTI1Mw=="}, "originalCommit": {"oid": "c9b982acc4c8ea91aeca28f664a8b6e52841081a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM4OTUzNA==", "bodyText": "factored out a method to make this more readable (and add the comment on ignored exception that Bill requested)", "url": "https://github.com/apache/geode/pull/5462#discussion_r473389534", "createdAt": "2020-08-19T22:30:31Z", "author": {"login": "onichols-pivotal"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "diffHunk": "@@ -168,26 +168,30 @@ public ResultModel connect(\n       return result;\n     }\n \n-    // since 1.14, only allow gfsh to connect to cluster that's older than 1.10\n     String remoteVersion = null;\n-    String gfshVersion = gfsh.getVersion();\n+    String remoteGeodeSerializationVersion = null;\n     try {\n       remoteVersion = invoker.getRemoteVersion();\n-      int minorVersion = Integer.parseInt(versionComponent(remoteVersion, VERSION_MINOR));\n-      if (versionComponent(remoteVersion, VERSION_MAJOR).equals(\"1\") && minorVersion >= 10 ||\n-          versionComponent(remoteVersion, VERSION_MAJOR).equals(\"9\") && minorVersion >= 9) {\n-        InfoResultModel versionInfo = result.addInfo(\"versionInfo\");\n-        versionInfo.addLine(\"You are connected to a cluster of version: \" + remoteVersion);\n-        return result;\n+      try {\n+        remoteGeodeSerializationVersion = invoker.getRemoteGeodeSerializationVersion();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA4NTI1Mw=="}, "originalCommit": {"oid": "c9b982acc4c8ea91aeca28f664a8b6e52841081a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzcyMjQxOnYy", "diffSide": "RIGHT", "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzowMDo1MVrOHDQ-Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMjoyOTo1OVrOHDdYOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4NTgzMQ==", "bodyText": "Maybe call this method shouldConnect?\nYour logic is correct, but maybe to make this more readable and have the code reflect our train of thought better, you can consider this logic flow:\n// client should connect to cluster version newer than 1.10\nboolean shouldConnect (String ourSerializationVersion, String remoteVersion, String remoteSerializationVersion) {\n  if (remoteVersion == null) { // pre 1.5\n     return false;\n  }\n  // post 1.12, this should always return true, since it's definitely after 1.10.  I think this should fix the hydra test \n  // not sure if we need the ourSerilizationVersion to make this decision\n  if (remoteSerializationVersion !=null) {\n      return true;\n  }\n  // after 1.5 but before 1.12, use remoteVersion to deteremin if it's after 1.10 or 9.9\n  ......\n\n}", "url": "https://github.com/apache/geode/pull/5462#discussion_r473185831", "createdAt": "2020-08-19T17:00:51Z", "author": {"login": "jinmeiliao"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "diffHunk": "@@ -197,6 +201,32 @@ public ResultModel connect(\n     }\n   }\n \n+  /**\n+   * because remote serialization version was not exposed until 1.12, but we are compatible back to\n+   * 1.10, then any 1.x remote serialization version implies compatibility; otherwise make some\n+   * narrow assumptions about product version numbers known to be associated with 1.10/1.11 to fill\n+   * the gap.\n+   *\n+   * It seems reasonable to commit to future compatibility with any future Geode of the same major,\n+   * but we should probably draw the line somewhere and not promise that gfsh 1.x will be eternally\n+   * compatible with Geode 2.x and later\n+   */\n+  static boolean isCompatible(String ourSerializationVersion, String remoteVersion,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9b982acc4c8ea91aeca28f664a8b6e52841081a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5MTYyMw==", "bodyText": "it sounds like you want to guarantee future compatibility with ALL Geode majors.  Are we sure we can promise that today's gfsh should connect to some future Geode 2.0 or 3.0 cluster?  I included ourSerializationVersion to limit that promise to same-major.", "url": "https://github.com/apache/geode/pull/5462#discussion_r473191623", "createdAt": "2020-08-19T17:07:20Z", "author": {"login": "onichols-pivotal"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "diffHunk": "@@ -197,6 +201,32 @@ public ResultModel connect(\n     }\n   }\n \n+  /**\n+   * because remote serialization version was not exposed until 1.12, but we are compatible back to\n+   * 1.10, then any 1.x remote serialization version implies compatibility; otherwise make some\n+   * narrow assumptions about product version numbers known to be associated with 1.10/1.11 to fill\n+   * the gap.\n+   *\n+   * It seems reasonable to commit to future compatibility with any future Geode of the same major,\n+   * but we should probably draw the line somewhere and not promise that gfsh 1.x will be eternally\n+   * compatible with Geode 2.x and later\n+   */\n+  static boolean isCompatible(String ourSerializationVersion, String remoteVersion,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4NTgzMQ=="}, "originalCommit": {"oid": "c9b982acc4c8ea91aeca28f664a8b6e52841081a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE5NTM0Ng==", "bodyText": "sure, if we want to limit that promise to same-major, we can add the compare major in the 2nd if block", "url": "https://github.com/apache/geode/pull/5462#discussion_r473195346", "createdAt": "2020-08-19T17:13:59Z", "author": {"login": "jinmeiliao"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "diffHunk": "@@ -197,6 +201,32 @@ public ResultModel connect(\n     }\n   }\n \n+  /**\n+   * because remote serialization version was not exposed until 1.12, but we are compatible back to\n+   * 1.10, then any 1.x remote serialization version implies compatibility; otherwise make some\n+   * narrow assumptions about product version numbers known to be associated with 1.10/1.11 to fill\n+   * the gap.\n+   *\n+   * It seems reasonable to commit to future compatibility with any future Geode of the same major,\n+   * but we should probably draw the line somewhere and not promise that gfsh 1.x will be eternally\n+   * compatible with Geode 2.x and later\n+   */\n+  static boolean isCompatible(String ourSerializationVersion, String remoteVersion,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4NTgzMQ=="}, "originalCommit": {"oid": "c9b982acc4c8ea91aeca28f664a8b6e52841081a"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzM4OTExMg==", "bodyText": "I have renamed the method to shouldConnect and arranged it as you suggested to make it more readable, thanks", "url": "https://github.com/apache/geode/pull/5462#discussion_r473389112", "createdAt": "2020-08-19T22:29:59Z", "author": {"login": "onichols-pivotal"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "diffHunk": "@@ -197,6 +201,32 @@ public ResultModel connect(\n     }\n   }\n \n+  /**\n+   * because remote serialization version was not exposed until 1.12, but we are compatible back to\n+   * 1.10, then any 1.x remote serialization version implies compatibility; otherwise make some\n+   * narrow assumptions about product version numbers known to be associated with 1.10/1.11 to fill\n+   * the gap.\n+   *\n+   * It seems reasonable to commit to future compatibility with any future Geode of the same major,\n+   * but we should probably draw the line somewhere and not promise that gfsh 1.x will be eternally\n+   * compatible with Geode 2.x and later\n+   */\n+  static boolean isCompatible(String ourSerializationVersion, String remoteVersion,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzE4NTgzMQ=="}, "originalCommit": {"oid": "c9b982acc4c8ea91aeca28f664a8b6e52841081a"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTMxNjQyOnYy", "diffSide": "RIGHT", "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzo1MjowMlrOHDg9nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMzo1MjowMlrOHDg9nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzQ0NzgzNw==", "bodyText": "This is fine, but if you just call the invoker method directly, and use gfsh.logToFile in the catch block, things should be fine too. The difference is that user won't see this \"failed to get the remote version\" message when they connect to pre-1.5 cluster, but they would still see \"you can't use a xxx version gfsh to connect to this cluster\"", "url": "https://github.com/apache/geode/pull/5462#discussion_r473447837", "createdAt": "2020-08-19T23:52:02Z", "author": {"login": "jinmeiliao"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "diffHunk": "@@ -168,26 +168,27 @@ public ResultModel connect(\n       return result;\n     }\n \n-    // since 1.14, only allow gfsh to connect to cluster that's older than 1.10\n     String remoteVersion = null;\n-    String gfshVersion = gfsh.getVersion();\n+    String remoteGeodeSerializationVersion = null;\n     try {\n       remoteVersion = invoker.getRemoteVersion();\n-      int minorVersion = Integer.parseInt(versionComponent(remoteVersion, VERSION_MINOR));\n-      if (versionComponent(remoteVersion, VERSION_MAJOR).equals(\"1\") && minorVersion >= 10 ||\n-          versionComponent(remoteVersion, VERSION_MAJOR).equals(\"9\") && minorVersion >= 9) {\n-        InfoResultModel versionInfo = result.addInfo(\"versionInfo\");\n-        versionInfo.addLine(\"You are connected to a cluster of version: \" + remoteVersion);\n-        return result;\n-      }\n+      remoteGeodeSerializationVersion = getRemoteSerializationVersion(invoker);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "478fc0ba7dc00c04ddc28d6a115ac7efefc88adc"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzczMjQyOnYy", "diffSide": "RIGHT", "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjowOTo1NVrOHEzDZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDoxMTowMlrOHFAxgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5MjgwNw==", "bodyText": "It's great that we now have a method that encodes the logic but does no I/O!\nIt's a minor issue that this method requires the caller to always (try to) retrieve the remoteVersion even though, if remoteSerializationVersion was retrieved then remoteVersion is not necessary.\nThis could be addressed by passing a Supplier<String> remoteVersionSupplier. On the other hand it's not a big deal and this PR is approved without that change.", "url": "https://github.com/apache/geode/pull/5462#discussion_r474792807", "createdAt": "2020-08-21T16:09:55Z", "author": {"login": "Bill"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "diffHunk": "@@ -197,9 +198,56 @@ public ResultModel connect(\n     }\n   }\n \n-  private static String versionComponent(String version, int component) {\n+  private static String getRemoteSerializationVersion(OperationInvoker invoker) {\n+    try {\n+      return invoker.getRemoteGeodeSerializationVersion();\n+    } catch (Exception ignore) {\n+      // expected to fail for Geode cluster older than 1.12\n+      return null;\n+    }\n+  }\n+\n+  /**\n+   * because remote serialization version was not exposed until 1.12, but we are compatible back to\n+   * 1.10, then any 1.x remote serialization version implies compatibility; otherwise make some\n+   * narrow assumptions about product version numbers known to be associated with 1.10/1.11 to fill\n+   * the gap.\n+   *\n+   * It seems reasonable to commit to future compatibility with any future Geode of the same major,\n+   * but we should probably draw the line somewhere and not promise that gfsh 1.x will be eternally\n+   * compatible with Geode 2.x and later\n+   */\n+  static boolean shouldConnect(String ourSerializationVersion, String remoteVersion,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "478fc0ba7dc00c04ddc28d6a115ac7efefc88adc"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxNzYwMw==", "bodyText": "remoteVersion is needed regardless, as it is using in the info message upon successful connect", "url": "https://github.com/apache/geode/pull/5462#discussion_r475017603", "createdAt": "2020-08-22T00:11:02Z", "author": {"login": "onichols-pivotal"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "diffHunk": "@@ -197,9 +198,56 @@ public ResultModel connect(\n     }\n   }\n \n-  private static String versionComponent(String version, int component) {\n+  private static String getRemoteSerializationVersion(OperationInvoker invoker) {\n+    try {\n+      return invoker.getRemoteGeodeSerializationVersion();\n+    } catch (Exception ignore) {\n+      // expected to fail for Geode cluster older than 1.12\n+      return null;\n+    }\n+  }\n+\n+  /**\n+   * because remote serialization version was not exposed until 1.12, but we are compatible back to\n+   * 1.10, then any 1.x remote serialization version implies compatibility; otherwise make some\n+   * narrow assumptions about product version numbers known to be associated with 1.10/1.11 to fill\n+   * the gap.\n+   *\n+   * It seems reasonable to commit to future compatibility with any future Geode of the same major,\n+   * but we should probably draw the line somewhere and not promise that gfsh 1.x will be eternally\n+   * compatible with Geode 2.x and later\n+   */\n+  static boolean shouldConnect(String ourSerializationVersion, String remoteVersion,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5MjgwNw=="}, "originalCommit": {"oid": "478fc0ba7dc00c04ddc28d6a115ac7efefc88adc"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzczOTAyOnYy", "diffSide": "RIGHT", "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjoxMjowOVrOHEzHsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDoyMTowNVrOHFA57g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5MzkwNw==", "bodyText": "This method would be easier to analyze if this check on remoteVersion was moved down with the other checks on remoteVersion (after the checks on remoteSerializationVersion.\nNotice the form of the check on remoteSerializationVersion that follows. There's a null-check guarding it. Doing the same for remoteVersion would make the checks symmetrical.\nIt's acceptable as-is though.", "url": "https://github.com/apache/geode/pull/5462#discussion_r474793907", "createdAt": "2020-08-21T16:12:09Z", "author": {"login": "Bill"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "diffHunk": "@@ -197,9 +198,56 @@ public ResultModel connect(\n     }\n   }\n \n-  private static String versionComponent(String version, int component) {\n+  private static String getRemoteSerializationVersion(OperationInvoker invoker) {\n+    try {\n+      return invoker.getRemoteGeodeSerializationVersion();\n+    } catch (Exception ignore) {\n+      // expected to fail for Geode cluster older than 1.12\n+      return null;\n+    }\n+  }\n+\n+  /**\n+   * because remote serialization version was not exposed until 1.12, but we are compatible back to\n+   * 1.10, then any 1.x remote serialization version implies compatibility; otherwise make some\n+   * narrow assumptions about product version numbers known to be associated with 1.10/1.11 to fill\n+   * the gap.\n+   *\n+   * It seems reasonable to commit to future compatibility with any future Geode of the same major,\n+   * but we should probably draw the line somewhere and not promise that gfsh 1.x will be eternally\n+   * compatible with Geode 2.x and later\n+   */\n+  static boolean shouldConnect(String ourSerializationVersion, String remoteVersion,\n+      String remoteSerializationVersion) {\n+    // pre 1.5\n+    if (remoteVersion == null) {\n+      return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "478fc0ba7dc00c04ddc28d6a115ac7efefc88adc"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAxOTc1OA==", "bodyText": "this ordering was requested by a previous review comment.  many orderings are possible but I happen to like this one because the checks are ordered from simplest and most common first to trickiest edge case last, while keeping indentation and flow control to a minimum.", "url": "https://github.com/apache/geode/pull/5462#discussion_r475019758", "createdAt": "2020-08-22T00:21:05Z", "author": {"login": "onichols-pivotal"}, "path": "geode-gfsh/src/main/java/org/apache/geode/management/internal/cli/commands/ConnectCommand.java", "diffHunk": "@@ -197,9 +198,56 @@ public ResultModel connect(\n     }\n   }\n \n-  private static String versionComponent(String version, int component) {\n+  private static String getRemoteSerializationVersion(OperationInvoker invoker) {\n+    try {\n+      return invoker.getRemoteGeodeSerializationVersion();\n+    } catch (Exception ignore) {\n+      // expected to fail for Geode cluster older than 1.12\n+      return null;\n+    }\n+  }\n+\n+  /**\n+   * because remote serialization version was not exposed until 1.12, but we are compatible back to\n+   * 1.10, then any 1.x remote serialization version implies compatibility; otherwise make some\n+   * narrow assumptions about product version numbers known to be associated with 1.10/1.11 to fill\n+   * the gap.\n+   *\n+   * It seems reasonable to commit to future compatibility with any future Geode of the same major,\n+   * but we should probably draw the line somewhere and not promise that gfsh 1.x will be eternally\n+   * compatible with Geode 2.x and later\n+   */\n+  static boolean shouldConnect(String ourSerializationVersion, String remoteVersion,\n+      String remoteSerializationVersion) {\n+    // pre 1.5\n+    if (remoteVersion == null) {\n+      return false;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5MzkwNw=="}, "originalCommit": {"oid": "478fc0ba7dc00c04ddc28d6a115ac7efefc88adc"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Nzc2MTA1OnYy", "diffSide": "RIGHT", "path": "geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/commands/ConnectCommandTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjoxODo1NFrOHEzVWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMlQwMDoyOTowMlrOHFA98A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5NzQwMQ==", "bodyText": "Big improvement in these test methods!\nNow that they are setting \"all the things\" there is an opportunity to make these test cases more understandable by factoring out the when-then statements into a separate method. That would take away the visual noise and allow maintainers to see more clearly what each test case is really doing\u2014similar to the tests for ConnectCommand.shouldConnect() below!\nThese methods work though so they are acceptable as-is.", "url": "https://github.com/apache/geode/pull/5462#discussion_r474797401", "createdAt": "2020-08-21T16:18:54Z", "author": {"login": "Bill"}, "path": "geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/commands/ConnectCommandTest.java", "diffHunk": "@@ -362,28 +362,40 @@ public void resolveSslProperties() {\n   }\n \n   @Test\n-  public void connectToManagerWithDifferentMajorVersion() {\n+  public void connectToManagerWithOlderMajorVersionAllowed() {\n     when(gfsh.getVersion()).thenReturn(\"2.2\");\n-    when(operationInvoker.getRemoteVersion()).thenReturn(\"1.2\");\n+    when(operationInvoker.getRemoteVersion()).thenReturn(\"1.10\");\n+    when(gfsh.getGeodeSerializationVersion()).thenReturn(\"2.2\");\n+    when(operationInvoker.getRemoteGeodeSerializationVersion()).thenReturn(\"1.10\");\n     when(operationInvoker.isConnected()).thenReturn(true);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "478fc0ba7dc00c04ddc28d6a115ac7efefc88adc"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTAyMDc4NA==", "bodyText": "some books on this subject advise against the temptation to factor out \"duplicated\" code in unit tests.  you could argue, perhaps, that we don't need as many of the mock-base tests now that the shouldConnect logic is factored out and tested separately...", "url": "https://github.com/apache/geode/pull/5462#discussion_r475020784", "createdAt": "2020-08-22T00:29:02Z", "author": {"login": "onichols-pivotal"}, "path": "geode-gfsh/src/test/java/org/apache/geode/management/internal/cli/commands/ConnectCommandTest.java", "diffHunk": "@@ -362,28 +362,40 @@ public void resolveSslProperties() {\n   }\n \n   @Test\n-  public void connectToManagerWithDifferentMajorVersion() {\n+  public void connectToManagerWithOlderMajorVersionAllowed() {\n     when(gfsh.getVersion()).thenReturn(\"2.2\");\n-    when(operationInvoker.getRemoteVersion()).thenReturn(\"1.2\");\n+    when(operationInvoker.getRemoteVersion()).thenReturn(\"1.10\");\n+    when(gfsh.getGeodeSerializationVersion()).thenReturn(\"2.2\");\n+    when(operationInvoker.getRemoteGeodeSerializationVersion()).thenReturn(\"1.10\");\n     when(operationInvoker.isConnected()).thenReturn(true);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5NzQwMQ=="}, "originalCommit": {"oid": "478fc0ba7dc00c04ddc28d6a115ac7efefc88adc"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4741, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}