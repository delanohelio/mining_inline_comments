{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwMTkxMTI5", "number": 4823, "title": "GEODE-7851: Pulse Oauth Configuration", "bodyText": "create an OauthSecurityConfig to configure spring using oauth\nadd PULSE as one of the oauth-enabled-component, and if pulse is set to use oauth, set the OauthSecurityConfig as the active security profile\nuse pulse.properties in the locator's working dir to externalize pulse authentication provider configuration\n\nThank you for submitting a contribution to Apache Geode.\nIn order to streamline the review of the contribution we ask you\nto ensure the following steps have been taken:\nFor all changes:\n\n\n Is there a JIRA ticket associated with this PR? Is it referenced in the commit message?\n\n\n Has your PR been rebased against the latest commit within the target branch (typically develop)?\n\n\n Is your initial contribution a single, squashed commit?\n\n\n Does gradlew build run cleanly?\n\n\n Have you written or updated unit tests to verify your changes?\n\n\n If adding new dependencies to the code, are these dependencies licensed in a way that is compatible for inclusion under ASF 2.0?\n\n\nNote:\nPlease ensure that once the PR is submitted, check Concourse for build issues and\nsubmit an update to your PR as soon as possible. If you need help, please send an\nemail to dev@geode.apache.org.", "createdAt": "2020-03-18T03:19:26Z", "url": "https://github.com/apache/geode/pull/4823", "merged": true, "mergeCommit": {"oid": "578cb0756710cf18ba345e125601e057ec413ebf"}, "closed": true, "closedAt": "2020-03-23T16:58:32Z", "author": {"login": "jinmeiliao"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcOulgGgH2gAyMzkwMTkxMTI5Ojc3NWJhNjY4NTY3OTIxODE2NWRiYzU4OTg1ZGFkNzQ3NWYxNjNkZDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQhTIXAFqTM3OTYyNjM1NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "775ba6685679218165dbc58985dad7475f163dd9", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/775ba6685679218165dbc58985dad7475f163dd9", "committedDate": "2020-03-18T03:17:37Z", "message": "GEODE-7851: Pulse Oauth Support\n\n* create an OauthSecurityConfig to configure spring using oauth\n* add PULSE as one of the oauth-enabled-component, and if pulse is set to use oauth, set the OauthSecurityConfig as the active security profile\n* use pulse.properties in the locator's working dir to externalize pulse authentication provider configuration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc909c20594c0a90d2f24e76791094ed50a6e28b", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/bc909c20594c0a90d2f24e76791094ed50a6e28b", "committedDate": "2020-03-18T19:42:39Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41fb0abd16ee620968278917c1fca05d919babb5", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/41fb0abd16ee620968278917c1fca05d919babb5", "committedDate": "2020-03-18T19:48:27Z", "message": "Co-authored-by: Dale Emery <demery@pivotal.io>\nCo-authored-by: Joris Melchior <jmelchior@pivotal.io>\n\ndelete unnecessary test file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "49726156d3275a9f7f8822afccaa4358125000e0", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/49726156d3275a9f7f8822afccaa4358125000e0", "committedDate": "2020-03-18T20:19:24Z", "message": "spotless"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MzE1OTM5", "url": "https://github.com/apache/geode/pull/4823#pullrequestreview-377315939", "createdAt": "2020-03-18T23:50:50Z", "commit": {"oid": "49726156d3275a9f7f8822afccaa4358125000e0"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzo1MDo1MFrOF4azXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMzo1ODozNlrOF4a8lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwMzcxMA==", "bodyText": "this code repeats \"spring.profiles.active\" four times. Consider changing it to just call System.setProperty once (at the end). You could introduce a localvar \"String activeProfileValue\" and have each of these lines set that local var.", "url": "https://github.com/apache/geode/pull/4823#discussion_r394703710", "createdAt": "2020-03-18T23:50:50Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/ManagementAgent.java", "diffHunk": "@@ -192,9 +194,20 @@ private void loadWebApplications() {\n         logger.debug(message);\n       }\n     } else {\n+      String[] authTokenEnabledComponents = config.getSecurityAuthTokenEnabledComponents();\n+      boolean pulseOauth = Arrays.stream(authTokenEnabledComponents)\n+          .anyMatch(AuthTokenEnabledComponents::hasPulse);\n       String pwFile = this.config.getJmxManagerPasswordFile();\n-      if (securityService.isIntegratedSecurity() || StringUtils.isNotBlank(pwFile)) {\n+      if (securityService.isIntegratedSecurity()) {\n+        if (pulseOauth) {\n+          System.setProperty(\"spring.profiles.active\", \"pulse.authentication.oauth\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49726156d3275a9f7f8822afccaa4358125000e0"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNDU2NA==", "bodyText": "Since you only use \"pulseOauth\" inside the if(isIntegratedSecurity) would it be better to initialize the variable inside that if?", "url": "https://github.com/apache/geode/pull/4823#discussion_r394704564", "createdAt": "2020-03-18T23:53:33Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-core/src/main/java/org/apache/geode/management/internal/ManagementAgent.java", "diffHunk": "@@ -192,9 +194,20 @@ private void loadWebApplications() {\n         logger.debug(message);\n       }\n     } else {\n+      String[] authTokenEnabledComponents = config.getSecurityAuthTokenEnabledComponents();\n+      boolean pulseOauth = Arrays.stream(authTokenEnabledComponents)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49726156d3275a9f7f8822afccaa4358125000e0"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDcwNjA2OQ==", "bodyText": "It looks like we only have uaa support here. So if a customer is using oauth2 will it only work with uaa or can the configure it for some other oauth2 authentication server?", "url": "https://github.com/apache/geode/pull/4823#discussion_r394706069", "createdAt": "2020-03-18T23:58:36Z", "author": {"login": "dschneider-pivotal"}, "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/security/OauthSecurityConfig.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse.internal.security;\n+\n+import static org.springframework.security.config.Customizer.withDefaults;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+\n+@Configuration\n+@EnableWebSecurity\n+@EnableGlobalMethodSecurity(prePostEnabled = true)\n+@Profile(\"pulse.authentication.oauth\")\n+@PropertySource(\"classpath:pulse.properties\")\n+public class OauthSecurityConfig extends WebSecurityConfigurerAdapter {\n+  @Value(\"${pulse.oauth.provider}\")\n+  private String providerId;\n+  @Value(\"${pulse.oauth.clientId}\")\n+  private String clientId;\n+  @Value(\"${pulse.oauth.clientSecret}\")\n+  private String clientSecret;\n+  @Value(\"${pulse.oauth.authorizationUri}\")\n+  private String authorizationUri;\n+  @Value(\"${pulse.oauth.tokenUri}\")\n+  private String tokenUri;\n+  @Value(\"${pulse.oauth.userInfoUri}\")\n+  private String userInfoUri;\n+  @Value(\"${pulse.oauth.jwkSetUri}\")\n+  private String jwkSetUri;\n+  @Value(\"${pulse.oauth.userNameAttributeName}\")\n+  private String userNameAttributeName;\n+\n+  @Override\n+  protected void configure(HttpSecurity http) throws Exception {\n+    http.authorizeRequests(authorize -> authorize\n+        .anyRequest().authenticated())\n+        .oauth2Login(withDefaults());\n+  }\n+\n+  @Bean\n+  public ClientRegistrationRepository clientRegistrationRepository() {\n+    return new InMemoryClientRegistrationRepository(this.uaaClientRegistration());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "49726156d3275a9f7f8822afccaa4358125000e0"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/2082ed6390460415d1a5f5250fe019252acfb004", "committedDate": "2020-03-19T03:04:34Z", "message": "review changes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3ODA0OTAz", "url": "https://github.com/apache/geode/pull/4823#pullrequestreview-377804903", "createdAt": "2020-03-19T15:00:50Z", "commit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTowMDo1MVrOF4yjIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNTowMDo1MVrOF4yjIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTA5Mjc3MA==", "bodyText": "Do we need to add something here to take of where the app goes after logging out? For OAuth this should be different from Default or Gemfire flows I believe.", "url": "https://github.com/apache/geode/pull/4823#discussion_r395092770", "createdAt": "2020-03-19T15:00:51Z", "author": {"login": "jmelchio"}, "path": "geode-pulse/src/main/java/org/apache/geode/tools/pulse/internal/security/OauthSecurityConfig.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse.internal.security;\n+\n+import static org.springframework.security.config.Customizer.withDefaults;\n+\n+import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.context.annotation.Bean;\n+import org.springframework.context.annotation.Configuration;\n+import org.springframework.context.annotation.Profile;\n+import org.springframework.context.annotation.PropertySource;\n+import org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\n+import org.springframework.security.config.annotation.web.builders.HttpSecurity;\n+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n+import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;\n+import org.springframework.security.oauth2.client.InMemoryOAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.OAuth2AuthorizedClientService;\n+import org.springframework.security.oauth2.client.registration.ClientRegistration;\n+import org.springframework.security.oauth2.client.registration.ClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.registration.InMemoryClientRegistrationRepository;\n+import org.springframework.security.oauth2.client.web.AuthenticatedPrincipalOAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.client.web.OAuth2AuthorizedClientRepository;\n+import org.springframework.security.oauth2.core.AuthorizationGrantType;\n+\n+@Configuration\n+@EnableWebSecurity\n+@EnableGlobalMethodSecurity(prePostEnabled = true)\n+@Profile(\"pulse.authentication.oauth\")\n+@PropertySource(\"classpath:pulse.properties\")\n+public class OauthSecurityConfig extends WebSecurityConfigurerAdapter {\n+  @Value(\"${pulse.oauth.provider}\")\n+  private String providerId;\n+  @Value(\"${pulse.oauth.clientId}\")\n+  private String clientId;\n+  @Value(\"${pulse.oauth.clientSecret}\")\n+  private String clientSecret;\n+  @Value(\"${pulse.oauth.authorizationUri}\")\n+  private String authorizationUri;\n+  @Value(\"${pulse.oauth.tokenUri}\")\n+  private String tokenUri;\n+  @Value(\"${pulse.oauth.userInfoUri}\")\n+  private String userInfoUri;\n+  @Value(\"${pulse.oauth.jwkSetUri}\")\n+  private String jwkSetUri;\n+  @Value(\"${pulse.oauth.userNameAttributeName}\")\n+  private String userNameAttributeName;\n+\n+  @Override\n+  protected void configure(HttpSecurity http) throws Exception {\n+    http.authorizeRequests(authorize -> authorize\n+        .anyRequest().authenticated())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4NzIzMTQy", "url": "https://github.com/apache/geode/pull/4823#pullrequestreview-378723142", "createdAt": "2020-03-20T18:32:33Z", "commit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODozMjozM1rOF5fB2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQxODo0MToxNFrOF5fSjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMTUyOQ==", "bodyText": "It looks as if this uses the /management API itself to somehow mimic UAA (or some other OAuth server). How does that work?", "url": "https://github.com/apache/geode/pull/4823#discussion_r395821529", "createdAt": "2020-03-20T18:32:33Z", "author": {"login": "demery-pivotal"}, "path": "geode-assembly/src/integrationTest/java/org/apache/geode/tools/pulse/PulseSecurityConfigOauthProfileTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse;\n+\n+import static org.apache.geode.test.junit.rules.HttpResponseAssert.assertResponse;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.util.Properties;\n+\n+import org.apache.http.HttpResponse;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.examples.SimpleSecurityManager;\n+import org.apache.geode.test.junit.categories.PulseTest;\n+import org.apache.geode.test.junit.rules.GeodeHttpClientRule;\n+import org.apache.geode.test.junit.rules.LocatorStarterRule;\n+\n+@Category({PulseTest.class})\n+public class PulseSecurityConfigOauthProfileTest {\n+  // this test just makes sure the property file in the locator's working dir\n+  // gets properly read and used in the oauth security configuration\n+\n+  @ClassRule\n+  public static LocatorStarterRule locator =\n+      new LocatorStarterRule().withHttpService()\n+          .withSecurityManager(SimpleSecurityManager.class)\n+          .withProperty(\"security-auth-token-enabled-components\", \"pulse\");\n+\n+  private static File pulsePropertyFile;\n+\n+  @BeforeClass\n+  public static void setup() throws Exception {\n+    // copy the pulse.properties to the locator's working dir. Pulse will use the locator's working\n+    // dir as classpath to search for this property file\n+    pulsePropertyFile = new File(locator.getWorkingDir(), \"pulse.properties\");\n+    Properties properties = new Properties();\n+    properties.setProperty(\"pulse.oauth.provider\", \"uaa\");\n+    properties.setProperty(\"pulse.oauth.clientId\", \"pulse\");\n+    properties.setProperty(\"pulse.oauth.clientSecret\", \"secret\");\n+    // have the authorization uri point to a known uri that locator itself can serve\n+    properties.setProperty(\"pulse.oauth.authorizationUri\",\n+        \"http://localhost:\" + locator.getHttpPort() + \"/management\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMzE1MQ==", "bodyText": "Why only once? This looks fragile: If someone changes the page to show these words more than once, the test will fail, even if the request redirects properly.", "url": "https://github.com/apache/geode/pull/4823#discussion_r395823151", "createdAt": "2020-03-20T18:35:51Z", "author": {"login": "demery-pivotal"}, "path": "geode-assembly/src/integrationTest/java/org/apache/geode/tools/pulse/PulseSecurityConfigOauthProfileTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse;\n+\n+import static org.apache.geode.test.junit.rules.HttpResponseAssert.assertResponse;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.util.Properties;\n+\n+import org.apache.http.HttpResponse;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.examples.SimpleSecurityManager;\n+import org.apache.geode.test.junit.categories.PulseTest;\n+import org.apache.geode.test.junit.rules.GeodeHttpClientRule;\n+import org.apache.geode.test.junit.rules.LocatorStarterRule;\n+\n+@Category({PulseTest.class})\n+public class PulseSecurityConfigOauthProfileTest {\n+  // this test just makes sure the property file in the locator's working dir\n+  // gets properly read and used in the oauth security configuration\n+\n+  @ClassRule\n+  public static LocatorStarterRule locator =\n+      new LocatorStarterRule().withHttpService()\n+          .withSecurityManager(SimpleSecurityManager.class)\n+          .withProperty(\"security-auth-token-enabled-components\", \"pulse\");\n+\n+  private static File pulsePropertyFile;\n+\n+  @BeforeClass\n+  public static void setup() throws Exception {\n+    // copy the pulse.properties to the locator's working dir. Pulse will use the locator's working\n+    // dir as classpath to search for this property file\n+    pulsePropertyFile = new File(locator.getWorkingDir(), \"pulse.properties\");\n+    Properties properties = new Properties();\n+    properties.setProperty(\"pulse.oauth.provider\", \"uaa\");\n+    properties.setProperty(\"pulse.oauth.clientId\", \"pulse\");\n+    properties.setProperty(\"pulse.oauth.clientSecret\", \"secret\");\n+    // have the authorization uri point to a known uri that locator itself can serve\n+    properties.setProperty(\"pulse.oauth.authorizationUri\",\n+        \"http://localhost:\" + locator.getHttpPort() + \"/management\");\n+\n+    properties.store(new FileWriter(pulsePropertyFile), null);\n+    locator.startLocator();\n+  }\n+\n+  @AfterClass\n+  public static void cleanup() {\n+    pulsePropertyFile.delete();\n+  }\n+\n+  @Rule\n+  public GeodeHttpClientRule client = new GeodeHttpClientRule(locator::getHttpPort);\n+\n+  @Test\n+  public void testLogin() throws Exception {\n+    HttpResponse response = client.get(\"/pulse/login.html\");\n+    // the request is redirect to the authorization uri configured before\n+    assertResponse(response).hasStatusCode(200).hasResponseBody()\n+        .containsOnlyOnce(\"latest\")\n+        .containsOnlyOnce(\"supported\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyMzQzMA==", "bodyText": "Capitalize the A in OAuth (here and elsewhere)", "url": "https://github.com/apache/geode/pull/4823#discussion_r395823430", "createdAt": "2020-03-20T18:36:24Z", "author": {"login": "demery-pivotal"}, "path": "geode-assembly/src/integrationTest/java/org/apache/geode/tools/pulse/PulseSecurityConfigOauthProfileTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse;\n+\n+import static org.apache.geode.test.junit.rules.HttpResponseAssert.assertResponse;\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.util.Properties;\n+\n+import org.apache.http.HttpResponse;\n+import org.junit.AfterClass;\n+import org.junit.BeforeClass;\n+import org.junit.ClassRule;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.experimental.categories.Category;\n+\n+import org.apache.geode.examples.SimpleSecurityManager;\n+import org.apache.geode.test.junit.categories.PulseTest;\n+import org.apache.geode.test.junit.rules.GeodeHttpClientRule;\n+import org.apache.geode.test.junit.rules.LocatorStarterRule;\n+\n+@Category({PulseTest.class})\n+public class PulseSecurityConfigOauthProfileTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyNTM3Mw==", "bodyText": "xyz.com is an actual domain name. Please use a test-specific domain name such as:\n\nexample.com (example.com is intended mostly for documentation, but people use it for testing)\n<any-subdomain>.test (.test is a special top-level domain name designed for testing)\n<any-subdomain>.example (.example is another special top-level domain name)", "url": "https://github.com/apache/geode/pull/4823#discussion_r395825373", "createdAt": "2020-03-20T18:40:18Z", "author": {"login": "demery-pivotal"}, "path": "geode-pulse/src/integrationTest/java/org/apache/geode/tools/pulse/security/OauthSecurityConfigTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+package org.apache.geode.tools.pulse.security;\n+\n+import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;\n+import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrl;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.redirectedUrlPattern;\n+import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.context.ActiveProfiles;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringRunner;\n+import org.springframework.test.context.web.GenericXmlWebContextLoader;\n+import org.springframework.test.context.web.WebAppConfiguration;\n+import org.springframework.test.web.servlet.MockMvc;\n+import org.springframework.test.web.servlet.setup.MockMvcBuilders;\n+import org.springframework.web.context.WebApplicationContext;\n+\n+@RunWith(SpringRunner.class)\n+@ContextConfiguration(locations = {\"classpath*:WEB-INF/pulse-servlet.xml\"},\n+    loader = GenericXmlWebContextLoader.class)\n+@WebAppConfiguration\n+@ActiveProfiles({\"pulse.authentication.oauth\"})\n+public class OauthSecurityConfigTest {\n+  @Autowired\n+  private WebApplicationContext context;\n+\n+  private MockMvc mvc;\n+\n+  @Before\n+  public void setup() {\n+    mvc = MockMvcBuilders\n+        .webAppContextSetup(context)\n+        .apply(springSecurity())\n+        .build();\n+  }\n+\n+  @Test\n+  public void redirectToOauth() throws Exception {\n+    mvc.perform(get(\"/login.html\")).andExpect(status().is3xxRedirection())\n+        .andExpect(redirectedUrl((\"http://localhost/oauth2/authorization/uaa\")));\n+\n+    mvc.perform(get(\"http://localhost/oauth2/authorization/uaa\"))\n+        .andExpect(status().is3xxRedirection())\n+        .andExpect(redirectedUrlPattern(\"http://xyz.com/uaa/oauth/**\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTgyNTgwNQ==", "bodyText": "Someone else owns xyz.com, so we should not use it.", "url": "https://github.com/apache/geode/pull/4823#discussion_r395825805", "createdAt": "2020-03-20T18:41:14Z", "author": {"login": "demery-pivotal"}, "path": "geode-pulse/src/integrationTest/resources/pulse.properties", "diffHunk": "@@ -0,0 +1,23 @@\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+# agreements. See the NOTICE file distributed with this work for additional information regarding\n+# copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+# copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software distributed under the License\n+# is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+# or implied. See the License for the specific language governing permissions and limitations under\n+# the License.\n+#\n+\n+pulse.oauth.provider=uaa\n+pulse.oauth.clientId=pulse\n+pulse.oauth.clientSecret=secret\n+pulse.oauth.authorizationUri=http://xyz.com/uaa/oauth/authorize\n+pulse.oauth.tokenUri=http://xyz.com/uaa/oauth/token\n+pulse.oauth.userInfoUri=http://xyz.com/uaa/userinfo\n+pulse.oauth.jwkSetUri=http://xyz.com/uaa/token_keys", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2082ed6390460415d1a5f5250fe019252acfb004"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c9ebd4ece055c15c6b6b0ec5bacc2605d786b2b", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/7c9ebd4ece055c15c6b6b0ec5bacc2605d786b2b", "committedDate": "2020-03-20T19:52:32Z", "message": "review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95c67ba5a0322672ec21c702dcb3c27492e983e7", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/95c67ba5a0322672ec21c702dcb3c27492e983e7", "committedDate": "2020-03-20T19:56:28Z", "message": "review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "384f93e990b89487954f85282ea80fe9bb42793f", "author": {"user": {"login": "jinmeiliao", "name": "Jinmei Liao"}}, "url": "https://github.com/apache/geode/commit/384f93e990b89487954f85282ea80fe9bb42793f", "committedDate": "2020-03-20T20:36:45Z", "message": "review comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NTUyNTU5", "url": "https://github.com/apache/geode/pull/4823#pullrequestreview-379552559", "createdAt": "2020-03-23T15:39:51Z", "commit": {"oid": "384f93e990b89487954f85282ea80fe9bb42793f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5NjI2MzU1", "url": "https://github.com/apache/geode/pull/4823#pullrequestreview-379626355", "createdAt": "2020-03-23T16:56:38Z", "commit": {"oid": "384f93e990b89487954f85282ea80fe9bb42793f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4887, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}