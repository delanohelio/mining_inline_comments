{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2MDYwMTQ1", "number": 5268, "title": "GEODE-8250: Create new custom log config acceptance tests", "bodyText": "New tests to discover and verify that use of custom log configs works\nwhen using GFSH to start Locator and Server.", "createdAt": "2020-06-17T19:48:48Z", "url": "https://github.com/apache/geode/pull/5268", "merged": true, "mergeCommit": {"oid": "ba6e44cf3aafcee211590fd06a65fc561f20578f"}, "closed": true, "closedAt": "2020-06-24T20:29:36Z", "author": {"login": "kirklund"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsPAingH2gAyNDM2MDYwMTQ1OmYxMmZiZmE4ZmU0ZTMwNTBlNzk1NTE2MjQ1ZGIzNTNjYjY4ODAxNjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcugEqNgFqTQzNjk4MjQ2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f12fbfa8fe4e3050e795516245db353cb6880168", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/f12fbfa8fe4e3050e795516245db353cb6880168", "committedDate": "2020-06-17T19:27:55Z", "message": "GEODE-8250: Create new custom log config acceptance tests\n\nNew tests to discover and verify that use of custom log configs works\nwhen using GFSH to start Locator and Server."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNDMwODQx", "url": "https://github.com/apache/geode/pull/5268#pullrequestreview-433430841", "createdAt": "2020-06-18T16:02:11Z", "commit": {"oid": "f12fbfa8fe4e3050e795516245db353cb6880168"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNjowMjoxMVrOGl2E-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQxNzoyNzozN1rOGl5PFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjMzNjUwNA==", "bodyText": "in order to use GfshRule you have to have geode home set already (it will give you an error if you don't). so you don't really need this rule here.", "url": "https://github.com/apache/geode/pull/5268#discussion_r442336504", "createdAt": "2020-06-18T16:02:11Z", "author": {"login": "jinmeiliao"}, "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/LocatorWithCustomLogConfigAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.logging;\n+\n+import static java.nio.file.Files.copy;\n+import static org.apache.geode.internal.AvailablePortHelper.getRandomAvailableTCPPorts;\n+import static org.apache.geode.test.assertj.LogFileAssert.assertThat;\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.apache.geode.test.util.ResourceUtils.createFileFromResource;\n+import static org.apache.geode.test.util.ResourceUtils.getResource;\n+\n+import java.nio.file.Path;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.rules.TestName;\n+\n+import org.apache.geode.test.junit.rules.RequiresGeodeHome;\n+import org.apache.geode.test.junit.rules.gfsh.GfshRule;\n+\n+public class LocatorWithCustomLogConfigAcceptanceTest {\n+\n+  private static final String CONFIG_WITH_GEODE_PLUGINS_FILE_NAME =\n+      \"LocatorWithCustomLogConfigAcceptanceTestWithGeodePlugins.xml\";\n+  private static final String CONFIG_WITHOUT_GEODE_PLUGINS_FILE_NAME =\n+      \"LocatorWithCustomLogConfigAcceptanceTestWithoutGeodePlugins.xml\";\n+\n+  private String locatorName;\n+  private Path workingDir;\n+  private int locatorPort;\n+  private int httpPort;\n+  private int rmiPort;\n+  private Path configWithGeodePluginsFile;\n+  private Path configWithoutGeodePluginsFile;\n+  private Path locatorLogFile;\n+  private Path pulseLogFile;\n+  private Path customLogFile;\n+\n+  @Rule\n+  public GfshRule gfshRule = new GfshRule();\n+  @Rule\n+  public RequiresGeodeHome requiresGeodeHome = new RequiresGeodeHome();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f12fbfa8fe4e3050e795516245db353cb6880168"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM4Nzg2Mg==", "bodyText": "GfshRule itself will try to stop all the processes it starts using the rule if you allow it to host the working dir of all the servers/locators it started. Using the gfshRule.getWorkingDir will get the temp folder that gfsh uses and all the servers/locators' working dir will be under there. That way, when tests finish, GfshRule will kill all the members automatically.", "url": "https://github.com/apache/geode/pull/5268#discussion_r442387862", "createdAt": "2020-06-18T17:27:00Z", "author": {"login": "jinmeiliao"}, "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/LocatorWithCustomLogConfigAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.logging;\n+\n+import static java.nio.file.Files.copy;\n+import static org.apache.geode.internal.AvailablePortHelper.getRandomAvailableTCPPorts;\n+import static org.apache.geode.test.assertj.LogFileAssert.assertThat;\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.apache.geode.test.util.ResourceUtils.createFileFromResource;\n+import static org.apache.geode.test.util.ResourceUtils.getResource;\n+\n+import java.nio.file.Path;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.rules.TestName;\n+\n+import org.apache.geode.test.junit.rules.RequiresGeodeHome;\n+import org.apache.geode.test.junit.rules.gfsh.GfshRule;\n+\n+public class LocatorWithCustomLogConfigAcceptanceTest {\n+\n+  private static final String CONFIG_WITH_GEODE_PLUGINS_FILE_NAME =\n+      \"LocatorWithCustomLogConfigAcceptanceTestWithGeodePlugins.xml\";\n+  private static final String CONFIG_WITHOUT_GEODE_PLUGINS_FILE_NAME =\n+      \"LocatorWithCustomLogConfigAcceptanceTestWithoutGeodePlugins.xml\";\n+\n+  private String locatorName;\n+  private Path workingDir;\n+  private int locatorPort;\n+  private int httpPort;\n+  private int rmiPort;\n+  private Path configWithGeodePluginsFile;\n+  private Path configWithoutGeodePluginsFile;\n+  private Path locatorLogFile;\n+  private Path pulseLogFile;\n+  private Path customLogFile;\n+\n+  @Rule\n+  public GfshRule gfshRule = new GfshRule();\n+  @Rule\n+  public RequiresGeodeHome requiresGeodeHome = new RequiresGeodeHome();\n+  @Rule\n+  public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+  @Rule\n+  public TestName testName = new TestName();\n+\n+  @Before\n+  public void setUpLogConfigFiles() {\n+    configWithGeodePluginsFile = createFileFromResource(\n+        getResource(CONFIG_WITH_GEODE_PLUGINS_FILE_NAME), temporaryFolder.getRoot(),\n+        CONFIG_WITH_GEODE_PLUGINS_FILE_NAME)\n+            .toPath();\n+\n+    configWithoutGeodePluginsFile = createFileFromResource(\n+        getResource(CONFIG_WITHOUT_GEODE_PLUGINS_FILE_NAME), temporaryFolder.getRoot(),\n+        CONFIG_WITHOUT_GEODE_PLUGINS_FILE_NAME)\n+            .toPath();\n+  }\n+\n+  @Before\n+  public void setUpOutputFiles() {\n+    locatorName = testName.getMethodName();\n+\n+    workingDir = temporaryFolder.getRoot().toPath().toAbsolutePath();\n+    locatorLogFile = workingDir.resolve(locatorName + \".log\");\n+    pulseLogFile = workingDir.resolve(\"pulse.log\");\n+    customLogFile = workingDir.resolve(\"custom.log\");\n+  }\n+\n+  @Before\n+  public void setUpRandomPorts() {\n+    int[] ports = getRandomAvailableTCPPorts(3);\n+\n+    locatorPort = ports[0];\n+    httpPort = ports[1];\n+    rmiPort = ports[2];\n+  }\n+\n+  @After\n+  public void stopLocator() {\n+    gfshRule.execute(\"stop locator --dir=\" + workingDir);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f12fbfa8fe4e3050e795516245db353cb6880168"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjM4ODI0Nw==", "bodyText": "so basically, no need to give a dir here if you allow gfshrule to manage the dir", "url": "https://github.com/apache/geode/pull/5268#discussion_r442388247", "createdAt": "2020-06-18T17:27:37Z", "author": {"login": "jinmeiliao"}, "path": "geode-assembly/src/acceptanceTest/java/org/apache/geode/logging/LocatorWithCustomLogConfigAcceptanceTest.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package org.apache.geode.logging;\n+\n+import static java.nio.file.Files.copy;\n+import static org.apache.geode.internal.AvailablePortHelper.getRandomAvailableTCPPorts;\n+import static org.apache.geode.test.assertj.LogFileAssert.assertThat;\n+import static org.apache.geode.test.awaitility.GeodeAwaitility.await;\n+import static org.apache.geode.test.util.ResourceUtils.createFileFromResource;\n+import static org.apache.geode.test.util.ResourceUtils.getResource;\n+\n+import java.nio.file.Path;\n+\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.rules.TestName;\n+\n+import org.apache.geode.test.junit.rules.RequiresGeodeHome;\n+import org.apache.geode.test.junit.rules.gfsh.GfshRule;\n+\n+public class LocatorWithCustomLogConfigAcceptanceTest {\n+\n+  private static final String CONFIG_WITH_GEODE_PLUGINS_FILE_NAME =\n+      \"LocatorWithCustomLogConfigAcceptanceTestWithGeodePlugins.xml\";\n+  private static final String CONFIG_WITHOUT_GEODE_PLUGINS_FILE_NAME =\n+      \"LocatorWithCustomLogConfigAcceptanceTestWithoutGeodePlugins.xml\";\n+\n+  private String locatorName;\n+  private Path workingDir;\n+  private int locatorPort;\n+  private int httpPort;\n+  private int rmiPort;\n+  private Path configWithGeodePluginsFile;\n+  private Path configWithoutGeodePluginsFile;\n+  private Path locatorLogFile;\n+  private Path pulseLogFile;\n+  private Path customLogFile;\n+\n+  @Rule\n+  public GfshRule gfshRule = new GfshRule();\n+  @Rule\n+  public RequiresGeodeHome requiresGeodeHome = new RequiresGeodeHome();\n+  @Rule\n+  public TemporaryFolder temporaryFolder = new TemporaryFolder();\n+  @Rule\n+  public TestName testName = new TestName();\n+\n+  @Before\n+  public void setUpLogConfigFiles() {\n+    configWithGeodePluginsFile = createFileFromResource(\n+        getResource(CONFIG_WITH_GEODE_PLUGINS_FILE_NAME), temporaryFolder.getRoot(),\n+        CONFIG_WITH_GEODE_PLUGINS_FILE_NAME)\n+            .toPath();\n+\n+    configWithoutGeodePluginsFile = createFileFromResource(\n+        getResource(CONFIG_WITHOUT_GEODE_PLUGINS_FILE_NAME), temporaryFolder.getRoot(),\n+        CONFIG_WITHOUT_GEODE_PLUGINS_FILE_NAME)\n+            .toPath();\n+  }\n+\n+  @Before\n+  public void setUpOutputFiles() {\n+    locatorName = testName.getMethodName();\n+\n+    workingDir = temporaryFolder.getRoot().toPath().toAbsolutePath();\n+    locatorLogFile = workingDir.resolve(locatorName + \".log\");\n+    pulseLogFile = workingDir.resolve(\"pulse.log\");\n+    customLogFile = workingDir.resolve(\"custom.log\");\n+  }\n+\n+  @Before\n+  public void setUpRandomPorts() {\n+    int[] ports = getRandomAvailableTCPPorts(3);\n+\n+    locatorPort = ports[0];\n+    httpPort = ports[1];\n+    rmiPort = ports[2];\n+  }\n+\n+  @After\n+  public void stopLocator() {\n+    gfshRule.execute(\"stop locator --dir=\" + workingDir);\n+  }\n+\n+  @Test\n+  public void locatorLauncherUsesDefaultLoggingConfig() {\n+    String startLocatorCommand = String.join(\" \",\n+        \"start locator\",\n+        \"--name=\" + locatorName,\n+        \"--dir=\" + workingDir,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f12fbfa8fe4e3050e795516245db353cb6880168"}, "originalPosition": 105}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54e4bd4d407db98de90a7de7e29568134fdd0684", "author": {"user": {"login": "kirklund", "name": "Kirk Lund"}}, "url": "https://github.com/apache/geode/commit/54e4bd4d407db98de90a7de7e29568134fdd0684", "committedDate": "2020-06-23T20:10:21Z", "message": "=Trigger"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MTMzNDg0", "url": "https://github.com/apache/geode/pull/5268#pullrequestreview-436133484", "createdAt": "2020-06-23T20:33:40Z", "commit": {"oid": "54e4bd4d407db98de90a7de7e29568134fdd0684"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2MTUyNDMx", "url": "https://github.com/apache/geode/pull/5268#pullrequestreview-436152431", "createdAt": "2020-06-23T20:57:58Z", "commit": {"oid": "54e4bd4d407db98de90a7de7e29568134fdd0684"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2ODc5NDA4", "url": "https://github.com/apache/geode/pull/5268#pullrequestreview-436879408", "createdAt": "2020-06-24T17:56:31Z", "commit": {"oid": "54e4bd4d407db98de90a7de7e29568134fdd0684"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2OTgyNDY4", "url": "https://github.com/apache/geode/pull/5268#pullrequestreview-436982468", "createdAt": "2020-06-24T20:28:39Z", "commit": {"oid": "54e4bd4d407db98de90a7de7e29568134fdd0684"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4486, "cost": 1, "resetAt": "2021-10-29T19:57:52Z"}}}