{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5NTU3Mjc4", "number": 5300, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOTowMToxOVrOEI4yYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOTowMToyN1rOEI4yiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzU0NDY3OnYy", "diffSide": "RIGHT", "path": "geode-web-management/src/main/java/org/apache/geode/management/internal/rest/controllers/RestoreRedundancyOperationController.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOTowMToxOVrOGpH-_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzowMzoyMVrOGqaGFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc3NTYxMg==", "bodyText": "Is this the right authorization code we need to  use?", "url": "https://github.com/apache/geode/pull/5300#discussion_r445775612", "createdAt": "2020-06-25T19:01:19Z", "author": {"login": "jinmeiliao"}, "path": "geode-web-management/src/main/java/org/apache/geode/management/internal/rest/controllers/RestoreRedundancyOperationController.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.management.internal.rest.controllers;\n+\n+import static org.apache.geode.management.configuration.Links.URI_VERSION;\n+import static org.apache.geode.management.operation.RestoreRedundancyRequest.RESTORE_REDUNDANCY_ENDPOINT;\n+\n+import java.util.Optional;\n+\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import org.apache.geode.internal.security.SecurityService;\n+import org.apache.geode.management.api.ClusterManagementListOperationsResult;\n+import org.apache.geode.management.api.ClusterManagementOperationResult;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+@RestController(\"restoreRedundancyOperation\")\n+@RequestMapping(URI_VERSION)\n+public class RestoreRedundancyOperationController extends AbstractManagementController {\n+  @ApiOperation(value = \"start restore-redundancy\")\n+  @PreAuthorize(\"@securityService.authorize('DATA', 'MANAGE')\")\n+  @PostMapping(RESTORE_REDUNDANCY_ENDPOINT)\n+  public ResponseEntity<ClusterManagementOperationResult<RestoreRedundancyRequest, RestoreRedundancyResults>> startRestoreRedundancy(\n+      @RequestBody RestoreRedundancyRequest operation) {\n+    operation.setOperator(\n+        Optional.ofNullable(securityService).map(SecurityService::getSubject).map(Object::toString)\n+            .orElse(null));\n+    ClusterManagementOperationResult<RestoreRedundancyRequest, RestoreRedundancyResults> result =\n+        clusterManagementService\n+            .start(operation);\n+    return new ResponseEntity<>(result, HttpStatus.ACCEPTED);\n+  }\n+\n+  @ApiOperation(value = \"list restore-redundancy\")\n+  @PreAuthorize(\"@securityService.authorize('DATA', 'MANAGE')\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106b3e4bf28f80f6413c424a6b3d190f03638818"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjMwOTM5OQ==", "bodyText": "How do I check it?", "url": "https://github.com/apache/geode/pull/5300#discussion_r446309399", "createdAt": "2020-06-26T17:14:01Z", "author": {"login": "mhansonp"}, "path": "geode-web-management/src/main/java/org/apache/geode/management/internal/rest/controllers/RestoreRedundancyOperationController.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.management.internal.rest.controllers;\n+\n+import static org.apache.geode.management.configuration.Links.URI_VERSION;\n+import static org.apache.geode.management.operation.RestoreRedundancyRequest.RESTORE_REDUNDANCY_ENDPOINT;\n+\n+import java.util.Optional;\n+\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import org.apache.geode.internal.security.SecurityService;\n+import org.apache.geode.management.api.ClusterManagementListOperationsResult;\n+import org.apache.geode.management.api.ClusterManagementOperationResult;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+@RestController(\"restoreRedundancyOperation\")\n+@RequestMapping(URI_VERSION)\n+public class RestoreRedundancyOperationController extends AbstractManagementController {\n+  @ApiOperation(value = \"start restore-redundancy\")\n+  @PreAuthorize(\"@securityService.authorize('DATA', 'MANAGE')\")\n+  @PostMapping(RESTORE_REDUNDANCY_ENDPOINT)\n+  public ResponseEntity<ClusterManagementOperationResult<RestoreRedundancyRequest, RestoreRedundancyResults>> startRestoreRedundancy(\n+      @RequestBody RestoreRedundancyRequest operation) {\n+    operation.setOperator(\n+        Optional.ofNullable(securityService).map(SecurityService::getSubject).map(Object::toString)\n+            .orElse(null));\n+    ClusterManagementOperationResult<RestoreRedundancyRequest, RestoreRedundancyResults> result =\n+        clusterManagementService\n+            .start(operation);\n+    return new ResponseEntity<>(result, HttpStatus.ACCEPTED);\n+  }\n+\n+  @ApiOperation(value = \"list restore-redundancy\")\n+  @PreAuthorize(\"@securityService.authorize('DATA', 'MANAGE')\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc3NTYxMg=="}, "originalCommit": {"oid": "106b3e4bf28f80f6413c424a6b3d190f03638818"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyMDkxOQ==", "bodyText": "We are agreed that this is correct.", "url": "https://github.com/apache/geode/pull/5300#discussion_r447120919", "createdAt": "2020-06-29T17:03:21Z", "author": {"login": "mhansonp"}, "path": "geode-web-management/src/main/java/org/apache/geode/management/internal/rest/controllers/RestoreRedundancyOperationController.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.management.internal.rest.controllers;\n+\n+import static org.apache.geode.management.configuration.Links.URI_VERSION;\n+import static org.apache.geode.management.operation.RestoreRedundancyRequest.RESTORE_REDUNDANCY_ENDPOINT;\n+\n+import java.util.Optional;\n+\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import org.apache.geode.internal.security.SecurityService;\n+import org.apache.geode.management.api.ClusterManagementListOperationsResult;\n+import org.apache.geode.management.api.ClusterManagementOperationResult;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+@RestController(\"restoreRedundancyOperation\")\n+@RequestMapping(URI_VERSION)\n+public class RestoreRedundancyOperationController extends AbstractManagementController {\n+  @ApiOperation(value = \"start restore-redundancy\")\n+  @PreAuthorize(\"@securityService.authorize('DATA', 'MANAGE')\")\n+  @PostMapping(RESTORE_REDUNDANCY_ENDPOINT)\n+  public ResponseEntity<ClusterManagementOperationResult<RestoreRedundancyRequest, RestoreRedundancyResults>> startRestoreRedundancy(\n+      @RequestBody RestoreRedundancyRequest operation) {\n+    operation.setOperator(\n+        Optional.ofNullable(securityService).map(SecurityService::getSubject).map(Object::toString)\n+            .orElse(null));\n+    ClusterManagementOperationResult<RestoreRedundancyRequest, RestoreRedundancyResults> result =\n+        clusterManagementService\n+            .start(operation);\n+    return new ResponseEntity<>(result, HttpStatus.ACCEPTED);\n+  }\n+\n+  @ApiOperation(value = \"list restore-redundancy\")\n+  @PreAuthorize(\"@securityService.authorize('DATA', 'MANAGE')\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc3NTYxMg=="}, "originalCommit": {"oid": "106b3e4bf28f80f6413c424a6b3d190f03638818"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NzU0NTA3OnYy", "diffSide": "RIGHT", "path": "geode-web-management/src/main/java/org/apache/geode/management/internal/rest/controllers/RestoreRedundancyOperationController.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxOTowMToyN1rOGpH_RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzowMzoyN1rOGqaGUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc3NTY4NQ==", "bodyText": "check this as well", "url": "https://github.com/apache/geode/pull/5300#discussion_r445775685", "createdAt": "2020-06-25T19:01:27Z", "author": {"login": "jinmeiliao"}, "path": "geode-web-management/src/main/java/org/apache/geode/management/internal/rest/controllers/RestoreRedundancyOperationController.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.management.internal.rest.controllers;\n+\n+import static org.apache.geode.management.configuration.Links.URI_VERSION;\n+import static org.apache.geode.management.operation.RestoreRedundancyRequest.RESTORE_REDUNDANCY_ENDPOINT;\n+\n+import java.util.Optional;\n+\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import org.apache.geode.internal.security.SecurityService;\n+import org.apache.geode.management.api.ClusterManagementListOperationsResult;\n+import org.apache.geode.management.api.ClusterManagementOperationResult;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+@RestController(\"restoreRedundancyOperation\")\n+@RequestMapping(URI_VERSION)\n+public class RestoreRedundancyOperationController extends AbstractManagementController {\n+  @ApiOperation(value = \"start restore-redundancy\")\n+  @PreAuthorize(\"@securityService.authorize('DATA', 'MANAGE')\")\n+  @PostMapping(RESTORE_REDUNDANCY_ENDPOINT)\n+  public ResponseEntity<ClusterManagementOperationResult<RestoreRedundancyRequest, RestoreRedundancyResults>> startRestoreRedundancy(\n+      @RequestBody RestoreRedundancyRequest operation) {\n+    operation.setOperator(\n+        Optional.ofNullable(securityService).map(SecurityService::getSubject).map(Object::toString)\n+            .orElse(null));\n+    ClusterManagementOperationResult<RestoreRedundancyRequest, RestoreRedundancyResults> result =\n+        clusterManagementService\n+            .start(operation);\n+    return new ResponseEntity<>(result, HttpStatus.ACCEPTED);\n+  }\n+\n+  @ApiOperation(value = \"list restore-redundancy\")\n+  @PreAuthorize(\"@securityService.authorize('DATA', 'MANAGE')\")\n+  @GetMapping(RESTORE_REDUNDANCY_ENDPOINT)\n+  public ClusterManagementListOperationsResult<RestoreRedundancyRequest, RestoreRedundancyResults> listRestoreRedundancies() {\n+    return clusterManagementService.list(new RestoreRedundancyRequest());\n+  }\n+\n+  @ApiOperation(value = \"get restore-redundancy\")\n+  @PreAuthorize(\"@securityService.authorize('DATA', 'MANAGE')\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106b3e4bf28f80f6413c424a6b3d190f03638818"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzEyMDk3OA==", "bodyText": "We are agreed that this is correct.", "url": "https://github.com/apache/geode/pull/5300#discussion_r447120978", "createdAt": "2020-06-29T17:03:27Z", "author": {"login": "mhansonp"}, "path": "geode-web-management/src/main/java/org/apache/geode/management/internal/rest/controllers/RestoreRedundancyOperationController.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to You under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ *\n+ */\n+\n+package org.apache.geode.management.internal.rest.controllers;\n+\n+import static org.apache.geode.management.configuration.Links.URI_VERSION;\n+import static org.apache.geode.management.operation.RestoreRedundancyRequest.RESTORE_REDUNDANCY_ENDPOINT;\n+\n+import java.util.Optional;\n+\n+import io.swagger.annotations.ApiOperation;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import org.apache.geode.internal.security.SecurityService;\n+import org.apache.geode.management.api.ClusterManagementListOperationsResult;\n+import org.apache.geode.management.api.ClusterManagementOperationResult;\n+import org.apache.geode.management.operation.RestoreRedundancyRequest;\n+import org.apache.geode.management.runtime.RestoreRedundancyResults;\n+\n+@RestController(\"restoreRedundancyOperation\")\n+@RequestMapping(URI_VERSION)\n+public class RestoreRedundancyOperationController extends AbstractManagementController {\n+  @ApiOperation(value = \"start restore-redundancy\")\n+  @PreAuthorize(\"@securityService.authorize('DATA', 'MANAGE')\")\n+  @PostMapping(RESTORE_REDUNDANCY_ENDPOINT)\n+  public ResponseEntity<ClusterManagementOperationResult<RestoreRedundancyRequest, RestoreRedundancyResults>> startRestoreRedundancy(\n+      @RequestBody RestoreRedundancyRequest operation) {\n+    operation.setOperator(\n+        Optional.ofNullable(securityService).map(SecurityService::getSubject).map(Object::toString)\n+            .orElse(null));\n+    ClusterManagementOperationResult<RestoreRedundancyRequest, RestoreRedundancyResults> result =\n+        clusterManagementService\n+            .start(operation);\n+    return new ResponseEntity<>(result, HttpStatus.ACCEPTED);\n+  }\n+\n+  @ApiOperation(value = \"list restore-redundancy\")\n+  @PreAuthorize(\"@securityService.authorize('DATA', 'MANAGE')\")\n+  @GetMapping(RESTORE_REDUNDANCY_ENDPOINT)\n+  public ClusterManagementListOperationsResult<RestoreRedundancyRequest, RestoreRedundancyResults> listRestoreRedundancies() {\n+    return clusterManagementService.list(new RestoreRedundancyRequest());\n+  }\n+\n+  @ApiOperation(value = \"get restore-redundancy\")\n+  @PreAuthorize(\"@securityService.authorize('DATA', 'MANAGE')\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTc3NTY4NQ=="}, "originalCommit": {"oid": "106b3e4bf28f80f6413c424a6b3d190f03638818"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3876, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}