{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NjY5NjEx", "number": 1802, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTozMzozMlrOEkmRCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTo0MzoxN1rOEkmheg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODExMTQ1OnYy", "diffSide": "RIGHT", "path": "extensions/ssh/deployment/src/main/java/org/apache/camel/quarkus/component/ssh/deployment/SshProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTozMzozMlrOHToa_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOToxMDo0OVrOHUEuCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0NzI2Mw==", "bodyText": "I think org.apache.camel.quarkus.support.bouncycastle.deployment.BouncycastleSupportProcessor would be the right home for this BuildStep.", "url": "https://github.com/apache/camel-quarkus/pull/1802#discussion_r490347263", "createdAt": "2020-09-17T15:33:32Z", "author": {"login": "ppalaga"}, "path": "extensions/ssh/deployment/src/main/java/org/apache/camel/quarkus/component/ssh/deployment/SshProcessor.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.ssh.deployment;\n+\n+import java.security.KeyFactory;\n+import java.security.KeyPairGenerator;\n+import java.security.Signature;\n+import java.util.Arrays;\n+\n+import javax.crypto.KeyAgreement;\n+import javax.crypto.Mac;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeReinitializedClassBuildItem;\n+import org.apache.sshd.common.channel.ChannelListener;\n+import org.apache.sshd.common.forward.PortForwardingEventListener;\n+import org.apache.sshd.common.io.nio2.Nio2ServiceFactoryFactory;\n+import org.apache.sshd.common.session.SessionListener;\n+import org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils;\n+\n+class SshProcessor {\n+\n+    private static final String FEATURE = \"camel-ssh\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void secureRandomConfiguration(BuildProducer<RuntimeReinitializedClassBuildItem> reinitialized) {\n+        for (String s : Arrays.asList(\n+                \"java.security.SecureRandom\",\n+                \"org.bouncycastle.crypto.CryptoServicesRegistrar\",\n+                \"org.bouncycastle.jcajce.provider.drbg.DRBG$NonceAndIV\",\n+                \"org.bouncycastle.jcajce.provider.drbg.DRBG$Default\")) {\n+            reinitialized.produce(new RuntimeReinitializedClassBuildItem(s));\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff2d16da9c78ec6fdf3eda240d6b7ed49f7ba00"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxMDg4OA==", "bodyText": "Yeah, I was in doubt if it belongs there. Thanks for confirming, I am going to move it accordingly.", "url": "https://github.com/apache/camel-quarkus/pull/1802#discussion_r490810888", "createdAt": "2020-09-18T09:10:49Z", "author": {"login": "squakez"}, "path": "extensions/ssh/deployment/src/main/java/org/apache/camel/quarkus/component/ssh/deployment/SshProcessor.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.ssh.deployment;\n+\n+import java.security.KeyFactory;\n+import java.security.KeyPairGenerator;\n+import java.security.Signature;\n+import java.util.Arrays;\n+\n+import javax.crypto.KeyAgreement;\n+import javax.crypto.Mac;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeReinitializedClassBuildItem;\n+import org.apache.sshd.common.channel.ChannelListener;\n+import org.apache.sshd.common.forward.PortForwardingEventListener;\n+import org.apache.sshd.common.io.nio2.Nio2ServiceFactoryFactory;\n+import org.apache.sshd.common.session.SessionListener;\n+import org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils;\n+\n+class SshProcessor {\n+\n+    private static final String FEATURE = \"camel-ssh\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void secureRandomConfiguration(BuildProducer<RuntimeReinitializedClassBuildItem> reinitialized) {\n+        for (String s : Arrays.asList(\n+                \"java.security.SecureRandom\",\n+                \"org.bouncycastle.crypto.CryptoServicesRegistrar\",\n+                \"org.bouncycastle.jcajce.provider.drbg.DRBG$NonceAndIV\",\n+                \"org.bouncycastle.jcajce.provider.drbg.DRBG$Default\")) {\n+            reinitialized.produce(new RuntimeReinitializedClassBuildItem(s));\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0NzI2Mw=="}, "originalCommit": {"oid": "4ff2d16da9c78ec6fdf3eda240d6b7ed49f7ba00"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODEyMDUyOnYy", "diffSide": "RIGHT", "path": "extensions/ssh/deployment/src/main/java/org/apache/camel/quarkus/component/ssh/deployment/SshProcessor.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTozNTozMVrOHTogbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOToyMDozNVrOHUFD_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0ODY1NQ==", "bodyText": "Please prefer class.getName() here and also in other methods of this class. It works also for inner classes and is a safer choice for people copying from here.", "url": "https://github.com/apache/camel-quarkus/pull/1802#discussion_r490348655", "createdAt": "2020-09-17T15:35:31Z", "author": {"login": "ppalaga"}, "path": "extensions/ssh/deployment/src/main/java/org/apache/camel/quarkus/component/ssh/deployment/SshProcessor.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.ssh.deployment;\n+\n+import java.security.KeyFactory;\n+import java.security.KeyPairGenerator;\n+import java.security.Signature;\n+import java.util.Arrays;\n+\n+import javax.crypto.KeyAgreement;\n+import javax.crypto.Mac;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeReinitializedClassBuildItem;\n+import org.apache.sshd.common.channel.ChannelListener;\n+import org.apache.sshd.common.forward.PortForwardingEventListener;\n+import org.apache.sshd.common.io.nio2.Nio2ServiceFactoryFactory;\n+import org.apache.sshd.common.session.SessionListener;\n+import org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils;\n+\n+class SshProcessor {\n+\n+    private static final String FEATURE = \"camel-ssh\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void secureRandomConfiguration(BuildProducer<RuntimeReinitializedClassBuildItem> reinitialized) {\n+        for (String s : Arrays.asList(\n+                \"java.security.SecureRandom\",\n+                \"org.bouncycastle.crypto.CryptoServicesRegistrar\",\n+                \"org.bouncycastle.jcajce.provider.drbg.DRBG$NonceAndIV\",\n+                \"org.bouncycastle.jcajce.provider.drbg.DRBG$Default\")) {\n+            reinitialized.produce(new RuntimeReinitializedClassBuildItem(s));\n+        }\n+    }\n+\n+    @BuildStep\n+    RuntimeInitializedClassBuildItem delayEdDSAConfiguration() {\n+        return new RuntimeInitializedClassBuildItem(EdDSASecurityProviderUtils.class.getCanonicalName());\n+    }\n+\n+    @BuildStep\n+    void registerForReflection(BuildProducer<ReflectiveClassBuildItem> reflectiveClasses) {\n+        reflectiveClasses.produce(\n+                new ReflectiveClassBuildItem(\n+                        true,\n+                        false,\n+                        KeyPairGenerator.class.getCanonicalName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff2d16da9c78ec6fdf3eda240d6b7ed49f7ba00"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxMjA0Mw==", "bodyText": "you may also remove the .getName() AFAIK", "url": "https://github.com/apache/camel-quarkus/pull/1802#discussion_r490812043", "createdAt": "2020-09-18T09:13:04Z", "author": {"login": "lburgazzoli"}, "path": "extensions/ssh/deployment/src/main/java/org/apache/camel/quarkus/component/ssh/deployment/SshProcessor.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.ssh.deployment;\n+\n+import java.security.KeyFactory;\n+import java.security.KeyPairGenerator;\n+import java.security.Signature;\n+import java.util.Arrays;\n+\n+import javax.crypto.KeyAgreement;\n+import javax.crypto.Mac;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeReinitializedClassBuildItem;\n+import org.apache.sshd.common.channel.ChannelListener;\n+import org.apache.sshd.common.forward.PortForwardingEventListener;\n+import org.apache.sshd.common.io.nio2.Nio2ServiceFactoryFactory;\n+import org.apache.sshd.common.session.SessionListener;\n+import org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils;\n+\n+class SshProcessor {\n+\n+    private static final String FEATURE = \"camel-ssh\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void secureRandomConfiguration(BuildProducer<RuntimeReinitializedClassBuildItem> reinitialized) {\n+        for (String s : Arrays.asList(\n+                \"java.security.SecureRandom\",\n+                \"org.bouncycastle.crypto.CryptoServicesRegistrar\",\n+                \"org.bouncycastle.jcajce.provider.drbg.DRBG$NonceAndIV\",\n+                \"org.bouncycastle.jcajce.provider.drbg.DRBG$Default\")) {\n+            reinitialized.produce(new RuntimeReinitializedClassBuildItem(s));\n+        }\n+    }\n+\n+    @BuildStep\n+    RuntimeInitializedClassBuildItem delayEdDSAConfiguration() {\n+        return new RuntimeInitializedClassBuildItem(EdDSASecurityProviderUtils.class.getCanonicalName());\n+    }\n+\n+    @BuildStep\n+    void registerForReflection(BuildProducer<ReflectiveClassBuildItem> reflectiveClasses) {\n+        reflectiveClasses.produce(\n+                new ReflectiveClassBuildItem(\n+                        true,\n+                        false,\n+                        KeyPairGenerator.class.getCanonicalName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0ODY1NQ=="}, "originalCommit": {"oid": "4ff2d16da9c78ec6fdf3eda240d6b7ed49f7ba00"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxMzU3MQ==", "bodyText": "True, ReflectiveClassBuildItem accepts also Class... for which it calls getName() under the hood.", "url": "https://github.com/apache/camel-quarkus/pull/1802#discussion_r490813571", "createdAt": "2020-09-18T09:15:18Z", "author": {"login": "ppalaga"}, "path": "extensions/ssh/deployment/src/main/java/org/apache/camel/quarkus/component/ssh/deployment/SshProcessor.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.ssh.deployment;\n+\n+import java.security.KeyFactory;\n+import java.security.KeyPairGenerator;\n+import java.security.Signature;\n+import java.util.Arrays;\n+\n+import javax.crypto.KeyAgreement;\n+import javax.crypto.Mac;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeReinitializedClassBuildItem;\n+import org.apache.sshd.common.channel.ChannelListener;\n+import org.apache.sshd.common.forward.PortForwardingEventListener;\n+import org.apache.sshd.common.io.nio2.Nio2ServiceFactoryFactory;\n+import org.apache.sshd.common.session.SessionListener;\n+import org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils;\n+\n+class SshProcessor {\n+\n+    private static final String FEATURE = \"camel-ssh\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void secureRandomConfiguration(BuildProducer<RuntimeReinitializedClassBuildItem> reinitialized) {\n+        for (String s : Arrays.asList(\n+                \"java.security.SecureRandom\",\n+                \"org.bouncycastle.crypto.CryptoServicesRegistrar\",\n+                \"org.bouncycastle.jcajce.provider.drbg.DRBG$NonceAndIV\",\n+                \"org.bouncycastle.jcajce.provider.drbg.DRBG$Default\")) {\n+            reinitialized.produce(new RuntimeReinitializedClassBuildItem(s));\n+        }\n+    }\n+\n+    @BuildStep\n+    RuntimeInitializedClassBuildItem delayEdDSAConfiguration() {\n+        return new RuntimeInitializedClassBuildItem(EdDSASecurityProviderUtils.class.getCanonicalName());\n+    }\n+\n+    @BuildStep\n+    void registerForReflection(BuildProducer<ReflectiveClassBuildItem> reflectiveClasses) {\n+        reflectiveClasses.produce(\n+                new ReflectiveClassBuildItem(\n+                        true,\n+                        false,\n+                        KeyPairGenerator.class.getCanonicalName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0ODY1NQ=="}, "originalCommit": {"oid": "4ff2d16da9c78ec6fdf3eda240d6b7ed49f7ba00"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxNDcyNA==", "bodyText": "you may also remove the .getName() AFAIK\n\nDo you mean using a text with the fully qualified name instead?", "url": "https://github.com/apache/camel-quarkus/pull/1802#discussion_r490814724", "createdAt": "2020-09-18T09:17:18Z", "author": {"login": "squakez"}, "path": "extensions/ssh/deployment/src/main/java/org/apache/camel/quarkus/component/ssh/deployment/SshProcessor.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.ssh.deployment;\n+\n+import java.security.KeyFactory;\n+import java.security.KeyPairGenerator;\n+import java.security.Signature;\n+import java.util.Arrays;\n+\n+import javax.crypto.KeyAgreement;\n+import javax.crypto.Mac;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeReinitializedClassBuildItem;\n+import org.apache.sshd.common.channel.ChannelListener;\n+import org.apache.sshd.common.forward.PortForwardingEventListener;\n+import org.apache.sshd.common.io.nio2.Nio2ServiceFactoryFactory;\n+import org.apache.sshd.common.session.SessionListener;\n+import org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils;\n+\n+class SshProcessor {\n+\n+    private static final String FEATURE = \"camel-ssh\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void secureRandomConfiguration(BuildProducer<RuntimeReinitializedClassBuildItem> reinitialized) {\n+        for (String s : Arrays.asList(\n+                \"java.security.SecureRandom\",\n+                \"org.bouncycastle.crypto.CryptoServicesRegistrar\",\n+                \"org.bouncycastle.jcajce.provider.drbg.DRBG$NonceAndIV\",\n+                \"org.bouncycastle.jcajce.provider.drbg.DRBG$Default\")) {\n+            reinitialized.produce(new RuntimeReinitializedClassBuildItem(s));\n+        }\n+    }\n+\n+    @BuildStep\n+    RuntimeInitializedClassBuildItem delayEdDSAConfiguration() {\n+        return new RuntimeInitializedClassBuildItem(EdDSASecurityProviderUtils.class.getCanonicalName());\n+    }\n+\n+    @BuildStep\n+    void registerForReflection(BuildProducer<ReflectiveClassBuildItem> reflectiveClasses) {\n+        reflectiveClasses.produce(\n+                new ReflectiveClassBuildItem(\n+                        true,\n+                        false,\n+                        KeyPairGenerator.class.getCanonicalName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0ODY1NQ=="}, "originalCommit": {"oid": "4ff2d16da9c78ec6fdf3eda240d6b7ed49f7ba00"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxNjUwOA==", "bodyText": "Ah, okey, I see, thanks!", "url": "https://github.com/apache/camel-quarkus/pull/1802#discussion_r490816508", "createdAt": "2020-09-18T09:20:35Z", "author": {"login": "squakez"}, "path": "extensions/ssh/deployment/src/main/java/org/apache/camel/quarkus/component/ssh/deployment/SshProcessor.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.ssh.deployment;\n+\n+import java.security.KeyFactory;\n+import java.security.KeyPairGenerator;\n+import java.security.Signature;\n+import java.util.Arrays;\n+\n+import javax.crypto.KeyAgreement;\n+import javax.crypto.Mac;\n+\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageProxyDefinitionBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeInitializedClassBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.RuntimeReinitializedClassBuildItem;\n+import org.apache.sshd.common.channel.ChannelListener;\n+import org.apache.sshd.common.forward.PortForwardingEventListener;\n+import org.apache.sshd.common.io.nio2.Nio2ServiceFactoryFactory;\n+import org.apache.sshd.common.session.SessionListener;\n+import org.apache.sshd.common.util.security.eddsa.EdDSASecurityProviderUtils;\n+\n+class SshProcessor {\n+\n+    private static final String FEATURE = \"camel-ssh\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void secureRandomConfiguration(BuildProducer<RuntimeReinitializedClassBuildItem> reinitialized) {\n+        for (String s : Arrays.asList(\n+                \"java.security.SecureRandom\",\n+                \"org.bouncycastle.crypto.CryptoServicesRegistrar\",\n+                \"org.bouncycastle.jcajce.provider.drbg.DRBG$NonceAndIV\",\n+                \"org.bouncycastle.jcajce.provider.drbg.DRBG$Default\")) {\n+            reinitialized.produce(new RuntimeReinitializedClassBuildItem(s));\n+        }\n+    }\n+\n+    @BuildStep\n+    RuntimeInitializedClassBuildItem delayEdDSAConfiguration() {\n+        return new RuntimeInitializedClassBuildItem(EdDSASecurityProviderUtils.class.getCanonicalName());\n+    }\n+\n+    @BuildStep\n+    void registerForReflection(BuildProducer<ReflectiveClassBuildItem> reflectiveClasses) {\n+        reflectiveClasses.produce(\n+                new ReflectiveClassBuildItem(\n+                        true,\n+                        false,\n+                        KeyPairGenerator.class.getCanonicalName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0ODY1NQ=="}, "originalCommit": {"oid": "4ff2d16da9c78ec6fdf3eda240d6b7ed49f7ba00"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODE0NzI4OnYy", "diffSide": "RIGHT", "path": "extensions/ssh/runtime/src/main/java/org/apache/camel/quarkus/component/ssh/runtime/SubstituteSecurityUtils.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTo0MTo0OVrOHToxZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwOTozMjoxMlrOHUFc_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM1Mjk5Nw==", "bodyText": "Is this documented somewhere? I am not finding any mention of eddsa on https://camel.apache.org/components/latest/ssh-component.html Shouldn't we file a documentation issue?", "url": "https://github.com/apache/camel-quarkus/pull/1802#discussion_r490352997", "createdAt": "2020-09-17T15:41:49Z", "author": {"login": "ppalaga"}, "path": "extensions/ssh/runtime/src/main/java/org/apache/camel/quarkus/component/ssh/runtime/SubstituteSecurityUtils.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.ssh.runtime;\n+\n+import java.security.GeneralSecurityException;\n+import java.security.PrivateKey;\n+import java.security.PublicKey;\n+\n+import com.oracle.svm.core.annotate.Substitute;\n+import com.oracle.svm.core.annotate.TargetClass;\n+import org.apache.sshd.common.util.buffer.Buffer;\n+import org.apache.sshd.common.util.security.SecurityUtils;\n+\n+/**\n+ * We're substituting those offending methods that would require the presence of\n+ * net.i2p.crypto:eddsa library which is not supported by Camel SSH component", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff2d16da9c78ec6fdf3eda240d6b7ed49f7ba00"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxMzI1NQ==", "bodyText": "I think I did not explain properly in the comment. The camel-ssh depends on sshd-core library which has 2 optional security providers, bouncycastle and eddsa. In camel-ssh we chose to use bouncycastle. I will rephrase the comment to highlight that.", "url": "https://github.com/apache/camel-quarkus/pull/1802#discussion_r490813255", "createdAt": "2020-09-18T09:14:46Z", "author": {"login": "squakez"}, "path": "extensions/ssh/runtime/src/main/java/org/apache/camel/quarkus/component/ssh/runtime/SubstituteSecurityUtils.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.ssh.runtime;\n+\n+import java.security.GeneralSecurityException;\n+import java.security.PrivateKey;\n+import java.security.PublicKey;\n+\n+import com.oracle.svm.core.annotate.Substitute;\n+import com.oracle.svm.core.annotate.TargetClass;\n+import org.apache.sshd.common.util.buffer.Buffer;\n+import org.apache.sshd.common.util.security.SecurityUtils;\n+\n+/**\n+ * We're substituting those offending methods that would require the presence of\n+ * net.i2p.crypto:eddsa library which is not supported by Camel SSH component", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM1Mjk5Nw=="}, "originalCommit": {"oid": "4ff2d16da9c78ec6fdf3eda240d6b7ed49f7ba00"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxNjEyOA==", "bodyText": "I think I did not explain properly in the comment. The camel-ssh depends on sshd-core library which has 2 optional security providers, bouncycastle and eddsa. In camel-ssh we chose to use bouncycastle.\n\nThanks for the clarification. I still think that this is a piece of info interesting for the end users and it should ideally be present on https://camel.apache.org/components/latest/ssh-component.html . Filing a documentation issue would be a way not forget about that :)", "url": "https://github.com/apache/camel-quarkus/pull/1802#discussion_r490816128", "createdAt": "2020-09-18T09:19:57Z", "author": {"login": "ppalaga"}, "path": "extensions/ssh/runtime/src/main/java/org/apache/camel/quarkus/component/ssh/runtime/SubstituteSecurityUtils.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.ssh.runtime;\n+\n+import java.security.GeneralSecurityException;\n+import java.security.PrivateKey;\n+import java.security.PublicKey;\n+\n+import com.oracle.svm.core.annotate.Substitute;\n+import com.oracle.svm.core.annotate.TargetClass;\n+import org.apache.sshd.common.util.buffer.Buffer;\n+import org.apache.sshd.common.util.security.SecurityUtils;\n+\n+/**\n+ * We're substituting those offending methods that would require the presence of\n+ * net.i2p.crypto:eddsa library which is not supported by Camel SSH component", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM1Mjk5Nw=="}, "originalCommit": {"oid": "4ff2d16da9c78ec6fdf3eda240d6b7ed49f7ba00"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxODc0NQ==", "bodyText": "Okey, I'll take care!", "url": "https://github.com/apache/camel-quarkus/pull/1802#discussion_r490818745", "createdAt": "2020-09-18T09:24:42Z", "author": {"login": "squakez"}, "path": "extensions/ssh/runtime/src/main/java/org/apache/camel/quarkus/component/ssh/runtime/SubstituteSecurityUtils.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.ssh.runtime;\n+\n+import java.security.GeneralSecurityException;\n+import java.security.PrivateKey;\n+import java.security.PublicKey;\n+\n+import com.oracle.svm.core.annotate.Substitute;\n+import com.oracle.svm.core.annotate.TargetClass;\n+import org.apache.sshd.common.util.buffer.Buffer;\n+import org.apache.sshd.common.util.security.SecurityUtils;\n+\n+/**\n+ * We're substituting those offending methods that would require the presence of\n+ * net.i2p.crypto:eddsa library which is not supported by Camel SSH component", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM1Mjk5Nw=="}, "originalCommit": {"oid": "4ff2d16da9c78ec6fdf3eda240d6b7ed49f7ba00"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgyMjkwOQ==", "bodyText": "For the record: https://issues.apache.org/jira/browse/CAMEL-15550", "url": "https://github.com/apache/camel-quarkus/pull/1802#discussion_r490822909", "createdAt": "2020-09-18T09:32:12Z", "author": {"login": "squakez"}, "path": "extensions/ssh/runtime/src/main/java/org/apache/camel/quarkus/component/ssh/runtime/SubstituteSecurityUtils.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.ssh.runtime;\n+\n+import java.security.GeneralSecurityException;\n+import java.security.PrivateKey;\n+import java.security.PublicKey;\n+\n+import com.oracle.svm.core.annotate.Substitute;\n+import com.oracle.svm.core.annotate.TargetClass;\n+import org.apache.sshd.common.util.buffer.Buffer;\n+import org.apache.sshd.common.util.security.SecurityUtils;\n+\n+/**\n+ * We're substituting those offending methods that would require the presence of\n+ * net.i2p.crypto:eddsa library which is not supported by Camel SSH component", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM1Mjk5Nw=="}, "originalCommit": {"oid": "4ff2d16da9c78ec6fdf3eda240d6b7ed49f7ba00"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODE1MzU0OnYy", "diffSide": "RIGHT", "path": "integration-tests/ssh/src/test/java/org/apache/camel/quarkus/component/ssh/it/SshTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTo0MzoxN1rOHTo1XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTo0MzoxN1rOHTo1XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM1NDAxMg==", "bodyText": "Can't we remove this line?", "url": "https://github.com/apache/camel-quarkus/pull/1802#discussion_r490354012", "createdAt": "2020-09-17T15:43:17Z", "author": {"login": "ppalaga"}, "path": "integration-tests/ssh/src/test/java/org/apache/camel/quarkus/component/ssh/it/SshTest.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.ssh.it;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.bouncycastle.jce.provider.BouncyCastleProvider;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@QuarkusTest\n+@QuarkusTestResource(SshTestResource.class)\n+class SshTest {\n+\n+    @Test\n+    public void testWriteToSSHAndReadFromSSH() {\n+        final String fileContent = \"Hello Camel Quarkus SSH\";\n+        BouncyCastleProvider x;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ff2d16da9c78ec6fdf3eda240d6b7ed49f7ba00"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4650, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}