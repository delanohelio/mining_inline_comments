{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NTMwMDE0", "number": 2025, "title": "Camel Avro RPC component native support #1941", "bodyText": "fixes: #1941\nChange overrides version of avro dependencies from 1.9.1 (camel) to 1.10.0 (used by quarkus). Once issue https://issues.apache.org/jira/browse/CAMEL-15879 is solved, restriction could be removed. But version has to be still aligned manually, because camel uses dependencies like avro-ipc*, which are not used in quarkus.\nThere is a \"questionable\" substitution - GenericDatumReaderSubstitute.\nAs you can see, there is a method getStringClass in avro (see https://github.com/apache/avro/blob/branch-1.10/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java#L503), which uses local cache created right during instantiation (see https://github.com/apache/avro/blob/branch-1.10/lang/java/avro/src/main/java/org/apache/avro/generic/GenericDatumReader.java#L500).\nThis cache is null (in some tests) during execution in native mode. I don't see how this is possible. But I've created substitution, which creates this cache if it is null. With this substitution tests are successful. (but I still think that it should work without this substitution, which obviously does not)\nFrom my POV it could be nice, to create a separate issue to investigate this behavior. WDYT?\n[ ] An issue should be filed for the change unless this is a trivial change (fixing a typo or similar). One issue should ideally be fixed by not more than one commit and the other way round, each commit should fix just one issue, without pulling in other changes.\n[ ] Each commit in the pull request should have a meaningful and properly spelled subject line and body. Copying the title of the associated issue is typically enough. Please include the issue number in the commit message prefixed by #.\n[ ] The pull request description should explain what the pull request does, how, and why. If the info is available in the associated issue or some other external document, a link is enough.\n[ ] Phrases like Fix # or Fixes # will auto-close the named issue upon merging the pull request. Using them is typically a good idea.\n[ ] Please run mvn process-resources -Pformat (and amend the changes if necessary) before sending the pull request.\n[ ] Contributor guide is your good friend: https://camel.apache.org/camel-quarkus/latest/contributor-guide.html", "createdAt": "2020-11-24T14:46:10Z", "url": "https://github.com/apache/camel-quarkus/pull/2025", "merged": true, "mergeCommit": {"oid": "0946165ba3b644f568043420dfaf6b60e1e25cfc"}, "closed": true, "closedAt": "2020-11-25T13:14:03Z", "author": {"login": "JiriOndrusek"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfrmdmgFqTUzNzU5MTYwOA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdf8LSLgBqjQwMzc0NzIzMjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NTkxNjA4", "url": "https://github.com/apache/camel-quarkus/pull/2025#pullrequestreview-537591608", "createdAt": "2020-11-24T15:09:57Z", "commit": {"oid": "7bf56167c2506c3ac280d68dcacd2ef2e04cec32"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTowOTo1N1rOH5FWiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNToyNzoyNVrOH5GTLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYxODU2OQ==", "bodyText": "This should either be active by default (and inactive in quickly) or we should at least document here under which circumstances should the classes be regenerated.", "url": "https://github.com/apache/camel-quarkus/pull/2025#discussion_r529618569", "createdAt": "2020-11-24T15:09:57Z", "author": {"login": "ppalaga"}, "path": "integration-tests/avro-rpc/pom.xml", "diffHunk": "@@ -0,0 +1,154 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>org.apache.camel.quarkus</groupId>\n+        <artifactId>camel-quarkus-integration-tests</artifactId>\n+        <version>1.5.0-SNAPSHOT</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+\n+    <artifactId>camel-quarkus-integration-test-avro-rpc</artifactId>\n+    <name>Camel Quarkus :: Integration Tests :: Avro RPC</name>\n+    <description>Integration tests for Camel Quarkus Avro RPC extension</description>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <dependency>\n+                <groupId>org.apache.camel.quarkus</groupId>\n+                <artifactId>camel-quarkus-bom-test</artifactId>\n+                <version>${project.version}</version>\n+                <type>pom</type>\n+                <scope>import</scope>\n+            </dependency>\n+        </dependencies>\n+    </dependencyManagement>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.apache.camel.quarkus</groupId>\n+            <artifactId>camel-quarkus-avro-rpc</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-resteasy</artifactId>\n+        </dependency>\n+        <!-- test dependencies -->\n+        <dependency>\n+            <groupId>io.quarkus</groupId>\n+            <artifactId>quarkus-junit5</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.rest-assured</groupId>\n+            <artifactId>rest-assured</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel.quarkus</groupId>\n+            <artifactId>camel-quarkus-integration-test-support</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+\n+        <!-- The following dependencies guarantee that this module is built after them. You can update them by running `mvn process-resources -Pformat -N` from the source tree root directory -->\n+        <dependency>\n+            <groupId>org.apache.camel.quarkus</groupId>\n+            <artifactId>camel-quarkus-avro-rpc-deployment</artifactId>\n+            <version>${project.version}</version>\n+            <type>pom</type>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>*</groupId>\n+                    <artifactId>*</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+    </dependencies>\n+\n+    <profiles>\n+        <profile>\n+            <id>native</id>\n+            <activation>\n+                <property>\n+                    <name>native</name>\n+                </property>\n+            </activation>\n+            <properties>\n+                <quarkus.package.type>native</quarkus.package.type>\n+            </properties>\n+            <build>\n+                <plugins>\n+                    <plugin>\n+                        <groupId>org.apache.maven.plugins</groupId>\n+                        <artifactId>maven-failsafe-plugin</artifactId>\n+                        <executions>\n+                            <execution>\n+                                <goals>\n+                                    <goal>integration-test</goal>\n+                                    <goal>verify</goal>\n+                                </goals>\n+                            </execution>\n+                        </executions>\n+                    </plugin>\n+                </plugins>\n+            </build>\n+        </profile>\n+\n+        <!-- Profile for generation of protocol files into package `org.apache.camel.quarkus.component.avro.rpc.it.specific.generated` -->\n+        <profile>\n+            <id>avro</id>\n+            <activation>\n+                <property>\n+                    <name>avro</name>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf56167c2506c3ac280d68dcacd2ef2e04cec32"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYzNDA5NA==", "bodyText": "I'd vote for configuring the endpoint in the same way here and in AvroRpcRouteBuilder. I personally find the @ConfigProperty fields in AvroRpcRouteBuilder a bit better readable than Camel property expansion.", "url": "https://github.com/apache/camel-quarkus/pull/2025#discussion_r529634094", "createdAt": "2020-11-24T15:27:25Z", "author": {"login": "ppalaga"}, "path": "integration-tests/avro-rpc/src/main/java/org/apache/camel/quarkus/component/avro/rpc/it/AvroRpcResource.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.avro.rpc.it;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+\n+import org.apache.camel.ProducerTemplate;\n+import org.apache.camel.quarkus.component.avro.rpc.it.reflection.TestPojo;\n+import org.apache.camel.quarkus.component.avro.rpc.it.reflection.TestReflection;\n+import org.apache.camel.quarkus.component.avro.rpc.it.reflection.impl.TestReflectionImpl;\n+import org.apache.camel.quarkus.component.avro.rpc.it.specific.generated.Key;\n+import org.apache.camel.quarkus.component.avro.rpc.it.specific.generated.KeyValueProtocol;\n+import org.apache.camel.quarkus.component.avro.rpc.it.specific.generated.Value;\n+import org.apache.camel.quarkus.component.avro.rpc.it.specific.impl.KeyValueProtocolImpl;\n+\n+@Path(\"/avro-rpc\")\n+@ApplicationScoped\n+public class AvroRpcResource {\n+\n+    public static final String REFLECTIVE_HTTP_SERVER_PORT_PARAM = \"camel.avro-rpc.test.reflective.httpServerReflection.port\";\n+    public static final String REFLECTIVE_NETTY_SERVER_PORT_PARAM = \"camel.avro-rpc.test.reflective.nettyServerReflection.port\";\n+    public static final String SPECIFIC_HTTP_SERVER_PORT_PARAM = \"camel.avro-rpc.test.generated.httpServerReflection.port\";\n+    public static final String SPECIFIC_NETTY_SERVER_PORT_PARAM = \"camel.avro-rpc.test.generated.nettyServerReflection.port\";\n+    public static final String REFLECTIVE_HTTP_TRANSCEIVER_PORT_PARAM = \"camel.avro-rpc.test.httpTransceiverReflection.port\";\n+    public static final String REFLECTIVE_NETTY_TRANSCEIVER_PORT_PARAM = \"camel.avro-rpc.test.nettyTransceiverReflection.port\";\n+    public static final String SPECIFIC_HTTP_TRANSCEIVER_PORT_PARAM = \"camel.avro-rpc.test.specific.httpTransceiverReflection.port\";\n+    public static final String SPECIFIC_NETTY_TRANSCEIVER_PORT_PARAM = \"camel.avro-rpc.test.specific.nettyTransceiverReflection.port\";\n+\n+    private TestReflection httpTestReflection = new TestReflectionImpl(),\n+            nettyTestReflection = new TestReflectionImpl();\n+    private KeyValueProtocol httpKeyValue = new KeyValueProtocolImpl(),\n+            nettyKeyValue = new KeyValueProtocolImpl();\n+\n+    @Inject\n+    ProducerTemplate producerTemplate;\n+\n+    @Path(\"/reflectionProducerSet\")\n+    @POST\n+    @Consumes(MediaType.TEXT_PLAIN)\n+    public void reflectionProducerSet(@QueryParam(\"protocol\") ProtocolType protocol, String name) throws Exception {\n+        Object[] request = { name };\n+        producerTemplate.requestBody(String.format(\n+                \"avro:%s:localhost:{{%s}}/setName?protocolClassName=%s&singleParameter=true\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf56167c2506c3ac280d68dcacd2ef2e04cec32"}, "originalPosition": 64}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NjQzMDM3", "url": "https://github.com/apache/camel-quarkus/pull/2025#pullrequestreview-537643037", "createdAt": "2020-11-24T15:42:06Z", "commit": {"oid": "7bf56167c2506c3ac280d68dcacd2ef2e04cec32"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo0MjowNlrOH5Hkyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNTo0MjowNlrOH5Hkyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY1NDk4Ng==", "bodyText": "If these ipc deps are always going to have the same version, lets have a single property for them.", "url": "https://github.com/apache/camel-quarkus/pull/2025#discussion_r529654986", "createdAt": "2020-11-24T15:42:06Z", "author": {"login": "jamesnetherton"}, "path": "pom.xml", "diffHunk": "@@ -41,6 +41,8 @@\n         <ahc.version>2.12.1</ahc.version>\n         <animal-sniffer.version>1.18</animal-sniffer.version>\n         <antlr3.version>3.5.2</antlr3.version><!-- Spark, Stringtemplate and probably others -->\n+\t    <avro-ipc-jetty-version>1.10.0</avro-ipc-jetty-version>\n+        <avro-ipc-netty-version>1.10.0</avro-ipc-netty-version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7bf56167c2506c3ac280d68dcacd2ef2e04cec32"}, "originalPosition": 5}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7bf56167c2506c3ac280d68dcacd2ef2e04cec32", "author": {"user": {"login": "JiriOndrusek", "name": null}}, "url": "https://github.com/apache/camel-quarkus/commit/7bf56167c2506c3ac280d68dcacd2ef2e04cec32", "committedDate": "2020-11-24T14:24:22Z", "message": "Camel Avro RPC component native support #1941"}, "afterCommit": {"oid": "9e13859fd9170b81a8f7122768ef619c8ba6fe0b", "author": {"user": {"login": "JiriOndrusek", "name": null}}, "url": "https://github.com/apache/camel-quarkus/commit/9e13859fd9170b81a8f7122768ef619c8ba6fe0b", "committedDate": "2020-11-25T08:13:08Z", "message": "Camel Avro RPC component native support #1941"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9e13859fd9170b81a8f7122768ef619c8ba6fe0b", "author": {"user": {"login": "JiriOndrusek", "name": null}}, "url": "https://github.com/apache/camel-quarkus/commit/9e13859fd9170b81a8f7122768ef619c8ba6fe0b", "committedDate": "2020-11-25T08:13:08Z", "message": "Camel Avro RPC component native support #1941"}, "afterCommit": {"oid": "de0b8bc507289ed31a69a1bf095808eb0605b1a2", "author": {"user": {"login": "JiriOndrusek", "name": null}}, "url": "https://github.com/apache/camel-quarkus/commit/de0b8bc507289ed31a69a1bf095808eb0605b1a2", "committedDate": "2020-11-25T09:10:47Z", "message": "Camel Avro RPC component native support #1941"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4MjkzMjAw", "url": "https://github.com/apache/camel-quarkus/pull/2025#pullrequestreview-538293200", "createdAt": "2020-11-25T09:17:39Z", "commit": {"oid": "de0b8bc507289ed31a69a1bf095808eb0605b1a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b14a8c9ba277eaf7712859938d4dd081b5db02c1", "author": {"user": {"login": "JiriOndrusek", "name": null}}, "url": "https://github.com/apache/camel-quarkus/commit/b14a8c9ba277eaf7712859938d4dd081b5db02c1", "committedDate": "2020-11-25T10:55:05Z", "message": "Camel Avro RPC component native support #1941"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "de0b8bc507289ed31a69a1bf095808eb0605b1a2", "author": {"user": {"login": "JiriOndrusek", "name": null}}, "url": "https://github.com/apache/camel-quarkus/commit/de0b8bc507289ed31a69a1bf095808eb0605b1a2", "committedDate": "2020-11-25T09:10:47Z", "message": "Camel Avro RPC component native support #1941"}, "afterCommit": {"oid": "b14a8c9ba277eaf7712859938d4dd081b5db02c1", "author": {"user": {"login": "JiriOndrusek", "name": null}}, "url": "https://github.com/apache/camel-quarkus/commit/b14a8c9ba277eaf7712859938d4dd081b5db02c1", "committedDate": "2020-11-25T10:55:05Z", "message": "Camel Avro RPC component native support #1941"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2753, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}