{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NTI4NTkx", "number": 998, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoyODoxM1rODuUcIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODoxNjo0MVrOEGpauQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODk1OTcxOnYy", "diffSide": "RIGHT", "path": ".github/workflows/pr-build.yaml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoyODoxM1rOGAPsQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoyODoxM1rOGAPsQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMDI3Mg==", "bodyText": "Plz. remove the tailing whitespace", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r402910272", "createdAt": "2020-04-03T10:28:13Z", "author": {"login": "ppalaga"}, "path": ".github/workflows/pr-build.yaml", "diffHunk": "@@ -154,11 +154,12 @@ jobs:\n               braintree\n               compression\n               graphql\n-              mustache\n+              mustache              ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b37998613ed1dea92647c776d7d6120eb43a8f8d"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODk2MzMwOnYy", "diffSide": "RIGHT", "path": "extensions/tika/deployment/src/main/java/org/apache/camel/quarkus/component/tika/deployment/TikaProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoyOToxOFrOGAPuYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDoyOToxOFrOGAPuYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMDgxNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * The bean-validator component is programmatically configured by the extension thus\n          \n          \n            \n                 * The tika component is programmatically configured by the extension thus", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r402910816", "createdAt": "2020-04-03T10:29:18Z", "author": {"login": "ppalaga"}, "path": "extensions/tika/deployment/src/main/java/org/apache/camel/quarkus/component/tika/deployment/TikaProcessor.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.tika.deployment;\n+\n+import io.quarkus.arc.deployment.BeanContainerBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.ExecutionTime;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.apache.camel.quarkus.component.tika.TikaRecorder;\n+import org.apache.camel.quarkus.core.deployment.CamelRuntimeBeanBuildItem;\n+import org.apache.camel.quarkus.core.deployment.CamelServiceFilter;\n+import org.apache.camel.quarkus.core.deployment.CamelServiceFilterBuildItem;\n+import org.jboss.logging.Logger;\n+\n+class TikaProcessor {\n+\n+    private static final Logger LOG = Logger.getLogger(TikaProcessor.class);\n+    private static final String FEATURE = \"camel-tika\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    /*\n+     * The bean-validator component is programmatically configured by the extension thus", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b37998613ed1dea92647c776d7d6120eb43a8f8d"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODk3NzYwOnYy", "diffSide": "RIGHT", "path": "extensions/tika/deployment/src/main/java/org/apache/camel/quarkus/component/tika/deployment/TikaProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDozMzozOFrOGAP3Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDozMzozOFrOGAP3Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxMzA2Ng==", "bodyText": "TikaRecorder looks strange. TikaComponent maybe?", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r402913066", "createdAt": "2020-04-03T10:33:38Z", "author": {"login": "ppalaga"}, "path": "extensions/tika/deployment/src/main/java/org/apache/camel/quarkus/component/tika/deployment/TikaProcessor.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.tika.deployment;\n+\n+import io.quarkus.arc.deployment.BeanContainerBuildItem;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.ExecutionTime;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import org.apache.camel.quarkus.component.tika.TikaRecorder;\n+import org.apache.camel.quarkus.core.deployment.CamelRuntimeBeanBuildItem;\n+import org.apache.camel.quarkus.core.deployment.CamelServiceFilter;\n+import org.apache.camel.quarkus.core.deployment.CamelServiceFilterBuildItem;\n+import org.jboss.logging.Logger;\n+\n+class TikaProcessor {\n+\n+    private static final Logger LOG = Logger.getLogger(TikaProcessor.class);\n+    private static final String FEATURE = \"camel-tika\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    /*\n+     * The bean-validator component is programmatically configured by the extension thus\n+     * we can safely prevent camel to instantiate a default instance.\n+     */\n+    @BuildStep\n+    CamelServiceFilterBuildItem serviceFilter() {\n+        return new CamelServiceFilterBuildItem(CamelServiceFilter.forComponent(\"tika\"));\n+    }\n+\n+    @Record(ExecutionTime.STATIC_INIT)\n+    @BuildStep\n+    CamelRuntimeBeanBuildItem tikaComponent(BeanContainerBuildItem beanContainer, TikaRecorder recorder) {\n+        return new CamelRuntimeBeanBuildItem(\n+                \"tika\",\n+                TikaRecorder.class.getName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b37998613ed1dea92647c776d7d6120eb43a8f8d"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODk4NDUwOnYy", "diffSide": "RIGHT", "path": "integration-tests/tika/src/main/java/org/apache/camel/quarkus/component/tika/it/TikaResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDozNTo0MVrOGAP7MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDozNTo0MVrOGAP7MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNDA5Ng==", "bodyText": "Plz remove the commented code.", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r402914096", "createdAt": "2020-04-03T10:35:41Z", "author": {"login": "ppalaga"}, "path": "integration-tests/tika/src/main/java/org/apache/camel/quarkus/component/tika/it/TikaResource.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.tika.it;\n+\n+import java.net.URI;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+// import org.apache.camel.ProducerTemplate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b37998613ed1dea92647c776d7d6120eb43a8f8d"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5ODk5NTk1OnYy", "diffSide": "RIGHT", "path": "integration-tests/tika/src/test/java/org/apache/camel/quarkus/component/tika/it/TikaTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDozOToxN1rOGAQCKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDozOToxN1rOGAQCKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNTg4MQ==", "bodyText": "Maybe better this?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                //    @Test\n          \n          \n            \n                @Test\n          \n          \n            \n                @Disabled(\"https://github.com/quarkusio/quarkus/issues/8375\")", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r402915881", "createdAt": "2020-04-03T10:39:17Z", "author": {"login": "ppalaga"}, "path": "integration-tests/tika/src/test/java/org/apache/camel/quarkus/component/tika/it/TikaTest.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.tika.it;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.txt.UniversalEncodingDetector;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.Matchers.containsStringIgnoringCase;\n+import static org.hamcrest.Matchers.not;\n+\n+@QuarkusTest\n+class TikaTest {\n+\n+    @Test\n+    public void testPdf() throws Exception {\n+        test(\"quarkus.pdf\", \"application/pdf\", \"Hello Quarkus\");\n+    }\n+\n+    @Test\n+    public void testOdf() throws Exception {\n+        String body = test(\"testOpenOffice2.odt\", \"application/vnd.oasis.opendocument.text\",\n+                \"This is a sample Open Office document, written in NeoOffice 2.2.1 for the Mac\");\n+\n+        Charset detectedCharset = null;\n+        try {\n+            InputStream bodyIs = new ByteArrayInputStream(body.getBytes(StandardCharsets.UTF_16));\n+            UniversalEncodingDetector encodingDetector = new UniversalEncodingDetector();\n+            detectedCharset = encodingDetector.detect(bodyIs, new Metadata());\n+        } catch (IOException e1) {\n+            Assertions.fail();\n+        }\n+\n+        Assertions.assertTrue(detectedCharset.name().startsWith(StandardCharsets.UTF_16.name()));\n+    }\n+\n+    @Test\n+    public void testOffice() throws Exception {\n+        String body = test(\"test.doc\", \"application/msword\", \"test\");\n+\n+        Charset detectedCharset = null;\n+        try {\n+            InputStream bodyIs = new ByteArrayInputStream(body.getBytes());\n+            UniversalEncodingDetector encodingDetector = new UniversalEncodingDetector();\n+            detectedCharset = encodingDetector.detect(bodyIs, new Metadata());\n+        } catch (IOException e1) {\n+            Assertions.fail();\n+        }\n+\n+        Assertions.assertTrue(detectedCharset.name().startsWith(Charset.defaultCharset().name()));\n+    }\n+\n+    //    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b37998613ed1dea92647c776d7d6120eb43a8f8d"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTAwMDgwOnYy", "diffSide": "RIGHT", "path": "poms/bom-deployment/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDo0MDo0OVrOGAQFAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDo0MDo0OVrOGAQFAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNjYwOA==", "bodyText": "quarkus.version is defined in the top pom so I think this one is not needed?", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r402916608", "createdAt": "2020-04-03T10:40:49Z", "author": {"login": "ppalaga"}, "path": "poms/bom-deployment/pom.xml", "diffHunk": "@@ -34,6 +34,7 @@\n \n     <properties>\n         <camel-quarkus.version>1.1.0-SNAPSHOT</camel-quarkus.version><!-- kept in sync with project.version by the release plugin -->\n+        <quarkus-version>1.3.0.Final</quarkus-version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b37998613ed1dea92647c776d7d6120eb43a8f8d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5OTAwNjE4OnYy", "diffSide": "RIGHT", "path": "poms/bom-deployment/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDo0MjozMlrOGAQIMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxMDo0MjozMlrOGAQIMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjkxNzQyNg==", "bodyText": "Plz move this one to the top where the mysql driver is and add a link to the quarkus PR where it is fixed in their BOM.", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r402917426", "createdAt": "2020-04-03T10:42:32Z", "author": {"login": "ppalaga"}, "path": "poms/bom-deployment/pom.xml", "diffHunk": "@@ -822,6 +823,16 @@\n                 <artifactId>camel-quarkus-telegram-deployment</artifactId>\n                 <version>${camel-quarkus.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>org.apache.camel.quarkus</groupId>\n+                <artifactId>camel-quarkus-tika-deployment</artifactId>\n+                <version>${camel-quarkus.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>io.quarkus</groupId>\n+                <artifactId>quarkus-tika-deployment</artifactId>\n+                <version>${quarkus.version}</version>\n+            </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b37998613ed1dea92647c776d7d6120eb43a8f8d"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTEwOTIwOnYy", "diffSide": "RIGHT", "path": "extensions-support/xalan/runtime/src/main/java/org/apache/camel/quarkus/support/xalan/XalanTransformerFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDowNzoxN1rOGlHe8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDowNzoxN1rOGlHe8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU3MzEwNg==", "bodyText": "I think it would be more effective to move this check to the constructor and change the type of the delegate field to SAXTransformerFactory thus eliminating the delegateAsSAXTransformerFactory() method. Given that we call TransformerFactory.newInstance( \"org.apache.xalan.xsltc.trax.TransformerFactoryImpl\", ...) we are quite safe to always get a SAXTransformerFactory", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r441573106", "createdAt": "2020-06-17T14:07:17Z", "author": {"login": "ppalaga"}, "path": "extensions-support/xalan/runtime/src/main/java/org/apache/camel/quarkus/support/xalan/XalanTransformerFactory.java", "diffHunk": "@@ -110,4 +115,42 @@ public void setErrorListener(ErrorListener listener) {\n     public ErrorListener getErrorListener() {\n         return delegate.getErrorListener();\n     }\n+\n+    private SAXTransformerFactory delegateAsSAXTransformerFactory() {\n+        if (delegate instanceof SAXTransformerFactory) {\n+            return (SAXTransformerFactory) delegate;\n+        }\n+        throw new IllegalArgumentException(\"Unsupported TransformerFactory feature \" + SAXTransformerFactory.FEATURE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "318ec108c81e0ab492f8fb1cf6b17c3df2e72ace"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTE4Mzc2OnYy", "diffSide": "RIGHT", "path": "extensions/tika/runtime/src/main/doc/limitations.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDoyMzo0OFrOGlIPFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDoyMzo0OFrOGlIPFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU4NTQyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            While you can use any of the available Tika parsers in JVM mode (https://tika.apache.org/[Apache Tika]),\n          \n          \n            \n            only several Tika parses are supported in native mode. See https://quarkus.io/guides/tika[QUARKUS - USING APACHE TIKA].\n          \n          \n            \n            While you can use any of the available https://tika.apache.org/1.24.1/formats.html[Tika parsers] in JVM mode,\n          \n          \n            \n            only some of those are supported in native mode - see the https://quarkus.io/guides/tika[Quarkus Tika guide].", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r441585428", "createdAt": "2020-06-17T14:23:48Z", "author": {"login": "ppalaga"}, "path": "extensions/tika/runtime/src/main/doc/limitations.adoc", "diffHunk": "@@ -0,0 +1,20 @@\n+Parameters `tikaConfig` and `tikaConfigUri` are not available in quarkus camel tika extension. Configuration\n+can be changed only via `application.properties`.\n+\n+While you can use any of the available Tika parsers in JVM mode (https://tika.apache.org/[Apache Tika]),\n+only several Tika parses are supported in native mode. See https://quarkus.io/guides/tika[QUARKUS - USING APACHE TIKA].", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "318ec108c81e0ab492f8fb1cf6b17c3df2e72ace"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTI1NDY2OnYy", "diffSide": "RIGHT", "path": "extensions/tika/runtime/src/main/doc/limitations.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDozOToyN1rOGlI9VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDozOToyN1rOGlI9VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU5NzI2OA==", "bodyText": "My understanding is that using quarkus.tika.parsers is recommended (not required) to reduce the application memory and native executable sizes. So we should perhaps also formulate it like that.\nIt is not clear to me whether each abbreviation used in quarkus.tika.parsers needs to be defined in quarkus.tika.parser.my-abbrev ? Or are there some well known abbreviations?", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r441597268", "createdAt": "2020-06-17T14:39:27Z", "author": {"login": "ppalaga"}, "path": "extensions/tika/runtime/src/main/doc/limitations.adoc", "diffHunk": "@@ -0,0 +1,20 @@\n+Parameters `tikaConfig` and `tikaConfigUri` are not available in quarkus camel tika extension. Configuration\n+can be changed only via `application.properties`.\n+\n+While you can use any of the available Tika parsers in JVM mode (https://tika.apache.org/[Apache Tika]),\n+only several Tika parses are supported in native mode. See https://quarkus.io/guides/tika[QUARKUS - USING APACHE TIKA].\n+\n+In order to work in native mode, some properties should be set:\n+\n+* `quarkus.tika.parsers`\n+* optionally `quarkus.tika.parser.*`\n+\n+Example of `application.properties` follows :\n+[source,properties]\n+----\n+quarkus.tika.parsers = pdf,odf,office\n+quarkus.tika.parser.office = org.apache.tika.parser.microsoft.OfficeParser\n+----", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "318ec108c81e0ab492f8fb1cf6b17c3df2e72ace"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTI1NjcwOnYy", "diffSide": "RIGHT", "path": "extensions/tika/runtime/src/main/doc/limitations.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDozOTo1M1rOGlI-kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDozOTo1M1rOGlI-kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU5NzU4NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            For more information about selecting parsers see https://quarkus.io/guides/tika[QUARKUS - USING APACHE TIKA]\n          \n          \n            \n            For more information about selecting parsers see https://quarkus.io/guides/tika[Quarkus Tika guide]", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r441597585", "createdAt": "2020-06-17T14:39:53Z", "author": {"login": "ppalaga"}, "path": "extensions/tika/runtime/src/main/doc/limitations.adoc", "diffHunk": "@@ -0,0 +1,20 @@\n+Parameters `tikaConfig` and `tikaConfigUri` are not available in quarkus camel tika extension. Configuration\n+can be changed only via `application.properties`.\n+\n+While you can use any of the available Tika parsers in JVM mode (https://tika.apache.org/[Apache Tika]),\n+only several Tika parses are supported in native mode. See https://quarkus.io/guides/tika[QUARKUS - USING APACHE TIKA].\n+\n+In order to work in native mode, some properties should be set:\n+\n+* `quarkus.tika.parsers`\n+* optionally `quarkus.tika.parser.*`\n+\n+Example of `application.properties` follows :\n+[source,properties]\n+----\n+quarkus.tika.parsers = pdf,odf,office\n+quarkus.tika.parser.office = org.apache.tika.parser.microsoft.OfficeParser\n+----\n+\n+For more information about selecting parsers see https://quarkus.io/guides/tika[QUARKUS - USING APACHE TIKA]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "318ec108c81e0ab492f8fb1cf6b17c3df2e72ace"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTI2NDI3OnYy", "diffSide": "RIGHT", "path": "extensions/tika/runtime/src/main/java/org/apache/camel/quarkus/component/tika/TikaRecorder.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDo0MTozNVrOGlJDlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODowNTowMFrOGlkJ7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU5ODg2OQ==", "bodyText": "Is this annotation required given that we produce a named bean above? https://github.com/apache/camel-quarkus/pull/998/files#diff-6af9bcae1d2af7449582ad99e6bdac3cR54", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r441598869", "createdAt": "2020-06-17T14:41:35Z", "author": {"login": "ppalaga"}, "path": "extensions/tika/runtime/src/main/java/org/apache/camel/quarkus/component/tika/TikaRecorder.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.tika;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.SAXException;\n+\n+import io.quarkus.arc.runtime.BeanContainer;\n+import io.quarkus.runtime.RuntimeValue;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.quarkus.tika.TikaContent;\n+import io.quarkus.tika.TikaMetadata;\n+import io.quarkus.tika.TikaParser;\n+import io.quarkus.tika.runtime.TikaParserProducer;\n+import org.apache.camel.Component;\n+import org.apache.camel.Producer;\n+import org.apache.camel.component.tika.TikaComponent;\n+import org.apache.camel.component.tika.TikaConfiguration;\n+import org.apache.camel.component.tika.TikaEndpoint;\n+import org.apache.camel.component.tika.TikaProducer;\n+import org.apache.tika.exception.TikaException;\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.mime.MediaType;\n+import org.apache.tika.parser.ParseContext;\n+import org.apache.tika.parser.Parser;\n+\n+@Recorder\n+public class TikaRecorder {\n+\n+    public RuntimeValue<TikaComponent> createTikaComponent(BeanContainer container) {\n+        return new RuntimeValue<>(new QuarkusTikaComponent(container.instance(TikaParserProducer.class)));\n+    }\n+\n+    @org.apache.camel.spi.annotations.Component(\"tika\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "318ec108c81e0ab492f8fb1cf6b17c3df2e72ace"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAxOTkxOA==", "bodyText": "@ppalaga It would make sense to get rid of this annotation.\nBut  without it, execution fails for odf parser with:\n\nCaused by: java.lang.LinkageError: loader constraint violation: loader (instance of ) previously initiated loading for a different type with name \"org/w3c/dom/Node\"\n\nI'm not sure about the reason of this behavior. There is a one related comment: quarkusio/quarkus#8375 (comment)", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r442019918", "createdAt": "2020-06-18T07:23:25Z", "author": {"login": "JiriOndrusek"}, "path": "extensions/tika/runtime/src/main/java/org/apache/camel/quarkus/component/tika/TikaRecorder.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.tika;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.SAXException;\n+\n+import io.quarkus.arc.runtime.BeanContainer;\n+import io.quarkus.runtime.RuntimeValue;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.quarkus.tika.TikaContent;\n+import io.quarkus.tika.TikaMetadata;\n+import io.quarkus.tika.TikaParser;\n+import io.quarkus.tika.runtime.TikaParserProducer;\n+import org.apache.camel.Component;\n+import org.apache.camel.Producer;\n+import org.apache.camel.component.tika.TikaComponent;\n+import org.apache.camel.component.tika.TikaConfiguration;\n+import org.apache.camel.component.tika.TikaEndpoint;\n+import org.apache.camel.component.tika.TikaProducer;\n+import org.apache.tika.exception.TikaException;\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.mime.MediaType;\n+import org.apache.tika.parser.ParseContext;\n+import org.apache.tika.parser.Parser;\n+\n+@Recorder\n+public class TikaRecorder {\n+\n+    public RuntimeValue<TikaComponent> createTikaComponent(BeanContainer container) {\n+        return new RuntimeValue<>(new QuarkusTikaComponent(container.instance(TikaParserProducer.class)));\n+    }\n+\n+    @org.apache.camel.spi.annotations.Component(\"tika\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU5ODg2OQ=="}, "originalCommit": {"oid": "318ec108c81e0ab492f8fb1cf6b17c3df2e72ace"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA0Mjg2MA==", "bodyText": "Strange, that looks like a symptom of some class loading nastyness. Either org/w3c/dom/Node is coming from two jars or it is loaded by two different class loaders.", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r442042860", "createdAt": "2020-06-18T08:05:00Z", "author": {"login": "ppalaga"}, "path": "extensions/tika/runtime/src/main/java/org/apache/camel/quarkus/component/tika/TikaRecorder.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.tika;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.SAXException;\n+\n+import io.quarkus.arc.runtime.BeanContainer;\n+import io.quarkus.runtime.RuntimeValue;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.quarkus.tika.TikaContent;\n+import io.quarkus.tika.TikaMetadata;\n+import io.quarkus.tika.TikaParser;\n+import io.quarkus.tika.runtime.TikaParserProducer;\n+import org.apache.camel.Component;\n+import org.apache.camel.Producer;\n+import org.apache.camel.component.tika.TikaComponent;\n+import org.apache.camel.component.tika.TikaConfiguration;\n+import org.apache.camel.component.tika.TikaEndpoint;\n+import org.apache.camel.component.tika.TikaProducer;\n+import org.apache.tika.exception.TikaException;\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.mime.MediaType;\n+import org.apache.tika.parser.ParseContext;\n+import org.apache.tika.parser.Parser;\n+\n+@Recorder\n+public class TikaRecorder {\n+\n+    public RuntimeValue<TikaComponent> createTikaComponent(BeanContainer container) {\n+        return new RuntimeValue<>(new QuarkusTikaComponent(container.instance(TikaParserProducer.class)));\n+    }\n+\n+    @org.apache.camel.spi.annotations.Component(\"tika\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU5ODg2OQ=="}, "originalCommit": {"oid": "318ec108c81e0ab492f8fb1cf6b17c3df2e72ace"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTMwMDkxOnYy", "diffSide": "RIGHT", "path": "extensions/tika/runtime/src/main/java/org/apache/camel/quarkus/component/tika/TikaRecorder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDo0OToxMVrOGlJalg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDo0OToxMVrOGlJalg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYwNDc1OA==", "bodyText": "This is acceptable for now, but as a next step, could we perhaps define some sort of TikaParserProducer interface in Camel and have it there in the Camel Tika component and producer, so that we do not have to subclass here?", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r441604758", "createdAt": "2020-06-17T14:49:11Z", "author": {"login": "ppalaga"}, "path": "extensions/tika/runtime/src/main/java/org/apache/camel/quarkus/component/tika/TikaRecorder.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.tika;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.SAXException;\n+\n+import io.quarkus.arc.runtime.BeanContainer;\n+import io.quarkus.runtime.RuntimeValue;\n+import io.quarkus.runtime.annotations.Recorder;\n+import io.quarkus.tika.TikaContent;\n+import io.quarkus.tika.TikaMetadata;\n+import io.quarkus.tika.TikaParser;\n+import io.quarkus.tika.runtime.TikaParserProducer;\n+import org.apache.camel.Component;\n+import org.apache.camel.Producer;\n+import org.apache.camel.component.tika.TikaComponent;\n+import org.apache.camel.component.tika.TikaConfiguration;\n+import org.apache.camel.component.tika.TikaEndpoint;\n+import org.apache.camel.component.tika.TikaProducer;\n+import org.apache.tika.exception.TikaException;\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.mime.MediaType;\n+import org.apache.tika.parser.ParseContext;\n+import org.apache.tika.parser.Parser;\n+\n+@Recorder\n+public class TikaRecorder {\n+\n+    public RuntimeValue<TikaComponent> createTikaComponent(BeanContainer container) {\n+        return new RuntimeValue<>(new QuarkusTikaComponent(container.instance(TikaParserProducer.class)));\n+    }\n+\n+    @org.apache.camel.spi.annotations.Component(\"tika\")\n+    static class QuarkusTikaComponent extends TikaComponent {\n+\n+        private final TikaParserProducer tikaParserProducer;\n+\n+        public QuarkusTikaComponent(TikaParserProducer tikaParserProducer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "318ec108c81e0ab492f8fb1cf6b17c3df2e72ace"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDA0NTA1OnYy", "diffSide": "RIGHT", "path": "integration-tests/tika/src/test/java/org/apache/camel/quarkus/component/tika/it/TikaTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODoxMzo1M1rOGlkeNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODoxMzo1M1rOGlkeNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA0ODA1Mg==", "bodyText": "I wonder why do we need to test UniversalEncodingDetector here? It does not seem to be testing any Camel Quarkus code.", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r442048052", "createdAt": "2020-06-18T08:13:53Z", "author": {"login": "ppalaga"}, "path": "integration-tests/tika/src/test/java/org/apache/camel/quarkus/component/tika/it/TikaTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.tika.it;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.txt.UniversalEncodingDetector;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.Matchers.containsStringIgnoringCase;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+@QuarkusTest\n+class TikaTest {\n+\n+    @Test\n+    public void testPdf() throws Exception {\n+        testParse(\"quarkus.pdf\", \"application/pdf\", \"Hello Quarkus\");\n+    }\n+\n+    @Test\n+    public void testOdf() throws Exception {\n+        String body = testParse(\"testOpenOffice2.odt\", \"application/vnd.oasis.opendocument.text\",\n+                \"This is a sample Open Office document, written in NeoOffice 2.2.1 for the Mac\");\n+\n+        Charset detectedCharset = null;\n+        try {\n+            InputStream bodyIs = new ByteArrayInputStream(body.getBytes(StandardCharsets.UTF_16));\n+            UniversalEncodingDetector encodingDetector = new UniversalEncodingDetector();\n+            detectedCharset = encodingDetector.detect(bodyIs, new Metadata());\n+        } catch (IOException e1) {\n+            Assertions.fail();\n+        }\n+\n+        Assertions.assertTrue(detectedCharset.name().startsWith(StandardCharsets.UTF_16.name()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9615da64588c351c69fe3988752846250f76208"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NDA1NDk3OnYy", "diffSide": "RIGHT", "path": "integration-tests/tika/src/test/java/org/apache/camel/quarkus/component/tika/it/TikaTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODoxNjo0MVrOGlkkiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODoyNjoyMFrOGlk7nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA0OTY3Mg==", "bodyText": "Same as above: do we need this?", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r442049672", "createdAt": "2020-06-18T08:16:41Z", "author": {"login": "ppalaga"}, "path": "integration-tests/tika/src/test/java/org/apache/camel/quarkus/component/tika/it/TikaTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.tika.it;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.txt.UniversalEncodingDetector;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.Matchers.containsStringIgnoringCase;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+@QuarkusTest\n+class TikaTest {\n+\n+    @Test\n+    public void testPdf() throws Exception {\n+        testParse(\"quarkus.pdf\", \"application/pdf\", \"Hello Quarkus\");\n+    }\n+\n+    @Test\n+    public void testOdf() throws Exception {\n+        String body = testParse(\"testOpenOffice2.odt\", \"application/vnd.oasis.opendocument.text\",\n+                \"This is a sample Open Office document, written in NeoOffice 2.2.1 for the Mac\");\n+\n+        Charset detectedCharset = null;\n+        try {\n+            InputStream bodyIs = new ByteArrayInputStream(body.getBytes(StandardCharsets.UTF_16));\n+            UniversalEncodingDetector encodingDetector = new UniversalEncodingDetector();\n+            detectedCharset = encodingDetector.detect(bodyIs, new Metadata());\n+        } catch (IOException e1) {\n+            Assertions.fail();\n+        }\n+\n+        Assertions.assertTrue(detectedCharset.name().startsWith(StandardCharsets.UTF_16.name()));\n+    }\n+\n+    @Test\n+    public void testOffice() throws Exception {\n+        String body = testParse(\"test.doc\", \"application/msword\", \"test\");\n+\n+        Charset detectedCharset = null;\n+        try {\n+            InputStream bodyIs = new ByteArrayInputStream(body.getBytes(StandardCharsets.UTF_16));\n+            UniversalEncodingDetector encodingDetector = new UniversalEncodingDetector();\n+            detectedCharset = encodingDetector.detect(bodyIs, new Metadata());\n+        } catch (IOException e1) {\n+            Assertions.fail();\n+        }\n+\n+        Assertions.assertTrue(detectedCharset.name().startsWith(StandardCharsets.UTF_16.name()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b9615da64588c351c69fe3988752846250f76208"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA1NTU4MQ==", "bodyText": "You are right. This is covered by camel itself (https://github.com/apache/camel/blob/master/components/camel-tika/src/test/java/org/apache/camel/component/tika/TikaParseTest.java#L71). I'll remove both parts.", "url": "https://github.com/apache/camel-quarkus/pull/998#discussion_r442055581", "createdAt": "2020-06-18T08:26:20Z", "author": {"login": "JiriOndrusek"}, "path": "integration-tests/tika/src/test/java/org/apache/camel/quarkus/component/tika/it/TikaTest.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.tika.it;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.RestAssured;\n+import io.restassured.http.ContentType;\n+import io.restassured.response.ValidatableResponse;\n+import org.apache.tika.metadata.Metadata;\n+import org.apache.tika.parser.txt.UniversalEncodingDetector;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.Matchers.containsStringIgnoringCase;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+@QuarkusTest\n+class TikaTest {\n+\n+    @Test\n+    public void testPdf() throws Exception {\n+        testParse(\"quarkus.pdf\", \"application/pdf\", \"Hello Quarkus\");\n+    }\n+\n+    @Test\n+    public void testOdf() throws Exception {\n+        String body = testParse(\"testOpenOffice2.odt\", \"application/vnd.oasis.opendocument.text\",\n+                \"This is a sample Open Office document, written in NeoOffice 2.2.1 for the Mac\");\n+\n+        Charset detectedCharset = null;\n+        try {\n+            InputStream bodyIs = new ByteArrayInputStream(body.getBytes(StandardCharsets.UTF_16));\n+            UniversalEncodingDetector encodingDetector = new UniversalEncodingDetector();\n+            detectedCharset = encodingDetector.detect(bodyIs, new Metadata());\n+        } catch (IOException e1) {\n+            Assertions.fail();\n+        }\n+\n+        Assertions.assertTrue(detectedCharset.name().startsWith(StandardCharsets.UTF_16.name()));\n+    }\n+\n+    @Test\n+    public void testOffice() throws Exception {\n+        String body = testParse(\"test.doc\", \"application/msword\", \"test\");\n+\n+        Charset detectedCharset = null;\n+        try {\n+            InputStream bodyIs = new ByteArrayInputStream(body.getBytes(StandardCharsets.UTF_16));\n+            UniversalEncodingDetector encodingDetector = new UniversalEncodingDetector();\n+            detectedCharset = encodingDetector.detect(bodyIs, new Metadata());\n+        } catch (IOException e1) {\n+            Assertions.fail();\n+        }\n+\n+        Assertions.assertTrue(detectedCharset.name().startsWith(StandardCharsets.UTF_16.name()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA0OTY3Mg=="}, "originalCommit": {"oid": "b9615da64588c351c69fe3988752846250f76208"}, "originalPosition": 79}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4441, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}