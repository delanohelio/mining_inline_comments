{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NzA2MjY3", "number": 1542, "title": "Added support for flatpack dataformat fixes #796", "bodyText": "[ ] An issue should be filed for the change unless this is a trivial change (fixing a typo or similar). One issue should ideally be fixed by not more than one commit and the other way round, each commit should fix just one issue, without pulling in other changes.\n[ ] Each commit in the pull request should have a meaningful and properly spelled subject line and body. Copying the title of the associated issue is typically enough. Please include the issue number in the commit message prefixed by #.\n[ ] The pull request description should explain what the pull request does, how, and why. If the info is available in the associated issue or some other external document, a link is enough.\n[ ] Phrases like Fix # or Fixes # will auto-close the named issue upon merging the pull request. Using them is typically a good idea.\n[ ] Please run mvn process-resources -Pformat (and amend the changes if necessary) before sending the pull request.\n[ ] Contributor guide is your good friend: https://camel.apache.org/camel-quarkus/latest/contributor-guide.html", "createdAt": "2020-08-18T19:50:37Z", "url": "https://github.com/apache/camel-quarkus/pull/1542", "merged": true, "mergeCommit": {"oid": "7c082ae3f362cfa10cd8e2c1d7000f6c2ebda47f"}, "closed": true, "closedAt": "2020-08-19T06:52:40Z", "author": {"login": "aldettinger"}, "timelineItems": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAMcWsAH2gAyNDY5NzA2MjY3OjZmYmQxOTAwMmRkZjk1OWM0Mzg0ZDJiMDdmM2IyZDI5MDhhYzUxMjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAXmjrAFqTQ3MDI0Nzg3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6fbd19002ddf959c4384d2b07f3b2d2908ac5121", "author": {"user": {"login": "aldettinger", "name": "Alexandre Gallice"}}, "url": "https://github.com/apache/camel-quarkus/commit/6fbd19002ddf959c4384d2b07f3b2d2908ac5121", "committedDate": "2020-08-18T19:47:04Z", "message": "Added support for flatpack dataformat fixes #796"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMjQ3ODc5", "url": "https://github.com/apache/camel-quarkus/pull/1542#pullrequestreview-470247879", "createdAt": "2020-08-19T08:43:48Z", "commit": {"oid": "6fbd19002ddf959c4384d2b07f3b2d2908ac5121"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODo0Mzo0OFrOHC9XHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODo0NDoyOVrOHC9YxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg2NDU0MA==", "bodyText": "This won't work when the test is executed on the platform because there is only the test-jar available. No local filesystem.\nCould you plz load the file via classloader?", "url": "https://github.com/apache/camel-quarkus/pull/1542#discussion_r472864540", "createdAt": "2020-08-19T08:43:48Z", "author": {"login": "ppalaga"}, "path": "integration-tests/flatpack/src/test/java/org/apache/camel/quarkus/component/flatpack/it/FlatpackTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.flatpack.it;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import org.apache.camel.converter.IOConverter;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+@QuarkusTest\n+class FlatpackTest {\n+\n+    @Test\n+    public void delimitedUnmarshalShouldSucceed() throws IOException {\n+        String data = IOConverter.toString(new File(\"src/test/data/delim/INVENTORY-CommaDelimitedWithQualifier.txt\"), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fbd19002ddf959c4384d2b07f3b2d2908ac5121"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg2NDk2NA==", "bodyText": "Same as above: could you plz load the file via class loader?", "url": "https://github.com/apache/camel-quarkus/pull/1542#discussion_r472864964", "createdAt": "2020-08-19T08:44:29Z", "author": {"login": "ppalaga"}, "path": "integration-tests/flatpack/src/test/java/org/apache/camel/quarkus/component/flatpack/it/FlatpackTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.flatpack.it;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.restassured.http.ContentType;\n+import org.apache.camel.converter.IOConverter;\n+import org.junit.jupiter.api.Test;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.startsWith;\n+\n+@QuarkusTest\n+class FlatpackTest {\n+\n+    @Test\n+    public void delimitedUnmarshalShouldSucceed() throws IOException {\n+        String data = IOConverter.toString(new File(\"src/test/data/delim/INVENTORY-CommaDelimitedWithQualifier.txt\"), null);\n+\n+        given().body(data).when().get(\"/flatpack/delimited-unmarshal\").then().statusCode(200).body(is(\"4-SOME VALVE\"));\n+    }\n+\n+    @Test\n+    public void delimitedMarshalShouldSucceed() {\n+        List<Map<String, String>> data = new ArrayList<>();\n+        Map<String, String> firstRow = new LinkedHashMap<>();\n+        firstRow.put(\"ITEM_DESC\", \"SOME VALVE\");\n+        firstRow.put(\"IN_STOCK\", \"2\");\n+        firstRow.put(\"PRICE\", \"5.00\");\n+        firstRow.put(\"LAST_RECV_DT\", \"20050101\");\n+        data.add(firstRow);\n+\n+        Map<String, String> secondRow = new LinkedHashMap<>();\n+        secondRow.put(\"ITEM_DESC\", \"AN ENGINE\");\n+        secondRow.put(\"IN_STOCK\", \"100\");\n+        secondRow.put(\"PRICE\", \"1000.00\");\n+        secondRow.put(\"LAST_RECV_DT\", \"20040601\");\n+        data.add(secondRow);\n+\n+        String expected = \"ITEM_DESC,IN_STOCK,PRICE,LAST_RECV_DT\\nAN ENGINE,100,1000.00,20040601\\n\";\n+        given().contentType(ContentType.JSON).body(data).when().get(\"/flatpack/delimited-marshal\").then().statusCode(200)\n+                .body(is(expected));\n+    }\n+\n+    @Test\n+    public void fixedLengthUnmarshalShouldSucceed() throws IOException {\n+        String data = IOConverter.toString(new File(\"src/test/data/fixed/PEOPLE-FixedLength.txt\"), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6fbd19002ddf959c4384d2b07f3b2d2908ac5121"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2929, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}