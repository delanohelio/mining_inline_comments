{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3NDgwOTYy", "number": 1797, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODo1NjozNlrOEjulUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTowNDoyMFrOEjuyEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODk4ODMzOnYy", "diffSide": "RIGHT", "path": "extensions/grpc/deployment/src/main/java/org/apache/camel/quarkus/component/grpc/deployment/GrpcProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxODo1NjozNlrOHSP0cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjoxOTo1NVrOHShwfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg5NTYwMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void QuarkusBindableServiceFactoryBean(BuildProducer<AdditionalBeanBuildItem> additionalBeans) {\n          \n          \n            \n                void quarkusBindableServiceFactoryBean(BuildProducer<AdditionalBeanBuildItem> additionalBeans) {", "url": "https://github.com/apache/camel-quarkus/pull/1797#discussion_r488895602", "createdAt": "2020-09-15T18:56:36Z", "author": {"login": "ppalaga"}, "path": "extensions/grpc/deployment/src/main/java/org/apache/camel/quarkus/component/grpc/deployment/GrpcProcessor.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.grpc.deployment;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.inject.Singleton;\n+\n+import io.grpc.BindableService;\n+import io.grpc.stub.AbstractAsyncStub;\n+import io.grpc.stub.AbstractBlockingStub;\n+import io.grpc.stub.AbstractFutureStub;\n+import io.grpc.stub.StreamObserver;\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.GeneratedBeanBuildItem;\n+import io.quarkus.arc.deployment.GeneratedBeanGizmoAdaptor;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.ExecutionTime;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.gizmo.ClassCreator;\n+import io.quarkus.gizmo.FieldCreator;\n+import io.quarkus.gizmo.MethodCreator;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.gizmo.ResultHandle;\n+import io.quarkus.grpc.deployment.BindableServiceBuildItem;\n+import org.apache.camel.component.grpc.GrpcComponent;\n+import org.apache.camel.component.grpc.server.GrpcMethodHandler;\n+import org.apache.camel.quarkus.core.deployment.spi.CamelBeanBuildItem;\n+import org.apache.camel.quarkus.grpc.runtime.CamelGrpcRecorder;\n+import org.apache.camel.quarkus.grpc.runtime.CamelQuarkusBindableService;\n+import org.apache.camel.quarkus.grpc.runtime.QuarkusBindableServiceFactory;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.jandex.Type;\n+\n+class GrpcProcessor {\n+\n+    private static final DotName BINDABLE_SERVICE_DOT_NAME = DotName.createSimple(BindableService.class.getName());\n+    private static final DotName[] STUB_CLASS_DOT_NAMES = new DotName[] {\n+            DotName.createSimple(AbstractAsyncStub.class.getName()),\n+            DotName.createSimple(AbstractBlockingStub.class.getName()),\n+            DotName.createSimple(AbstractFutureStub.class.getName())\n+    };\n+    private static final String FEATURE = \"camel-grpc\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void registerForReflection(BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n+            CombinedIndexBuildItem combinedIndexBuildItem) {\n+\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        for (DotName dotName : STUB_CLASS_DOT_NAMES) {\n+            index.getAllKnownSubclasses(dotName)\n+                    .stream()\n+                    .map(classInfo -> new ReflectiveClassBuildItem(true, false, classInfo.name().toString()))\n+                    .forEach(reflectiveClass::produce);\n+        }\n+    }\n+\n+    @BuildStep\n+    void createBindableServiceBeans(\n+            BuildProducer<GeneratedBeanBuildItem> generatedBean,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n+            BuildProducer<BindableServiceBuildItem> bindableService,\n+            CombinedIndexBuildItem combinedIndexBuildItem) {\n+\n+        Set<String> services = generateBindableServiceBeans(generatedBean, reflectiveClass, combinedIndexBuildItem.getIndex());\n+        services.stream()\n+                .map(DotName::createSimple)\n+                .map(BindableServiceBuildItem::new)\n+                .forEach(bindableService::produce);\n+    }\n+\n+    @BuildStep\n+    void QuarkusBindableServiceFactoryBean(BuildProducer<AdditionalBeanBuildItem> additionalBeans) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed282f9a3721819e0fd6dc0a8f9deb3636907f5b"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4OTUwMA==", "bodyText": "Good catch. I'll fix.", "url": "https://github.com/apache/camel-quarkus/pull/1797#discussion_r489189500", "createdAt": "2020-09-16T06:19:55Z", "author": {"login": "jamesnetherton"}, "path": "extensions/grpc/deployment/src/main/java/org/apache/camel/quarkus/component/grpc/deployment/GrpcProcessor.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.grpc.deployment;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.inject.Singleton;\n+\n+import io.grpc.BindableService;\n+import io.grpc.stub.AbstractAsyncStub;\n+import io.grpc.stub.AbstractBlockingStub;\n+import io.grpc.stub.AbstractFutureStub;\n+import io.grpc.stub.StreamObserver;\n+import io.quarkus.arc.deployment.AdditionalBeanBuildItem;\n+import io.quarkus.arc.deployment.GeneratedBeanBuildItem;\n+import io.quarkus.arc.deployment.GeneratedBeanGizmoAdaptor;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.annotations.ExecutionTime;\n+import io.quarkus.deployment.annotations.Record;\n+import io.quarkus.deployment.builditem.CombinedIndexBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem;\n+import io.quarkus.gizmo.ClassCreator;\n+import io.quarkus.gizmo.FieldCreator;\n+import io.quarkus.gizmo.MethodCreator;\n+import io.quarkus.gizmo.MethodDescriptor;\n+import io.quarkus.gizmo.ResultHandle;\n+import io.quarkus.grpc.deployment.BindableServiceBuildItem;\n+import org.apache.camel.component.grpc.GrpcComponent;\n+import org.apache.camel.component.grpc.server.GrpcMethodHandler;\n+import org.apache.camel.quarkus.core.deployment.spi.CamelBeanBuildItem;\n+import org.apache.camel.quarkus.grpc.runtime.CamelGrpcRecorder;\n+import org.apache.camel.quarkus.grpc.runtime.CamelQuarkusBindableService;\n+import org.apache.camel.quarkus.grpc.runtime.QuarkusBindableServiceFactory;\n+import org.jboss.jandex.ClassInfo;\n+import org.jboss.jandex.DotName;\n+import org.jboss.jandex.IndexView;\n+import org.jboss.jandex.MethodInfo;\n+import org.jboss.jandex.Type;\n+\n+class GrpcProcessor {\n+\n+    private static final DotName BINDABLE_SERVICE_DOT_NAME = DotName.createSimple(BindableService.class.getName());\n+    private static final DotName[] STUB_CLASS_DOT_NAMES = new DotName[] {\n+            DotName.createSimple(AbstractAsyncStub.class.getName()),\n+            DotName.createSimple(AbstractBlockingStub.class.getName()),\n+            DotName.createSimple(AbstractFutureStub.class.getName())\n+    };\n+    private static final String FEATURE = \"camel-grpc\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void registerForReflection(BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n+            CombinedIndexBuildItem combinedIndexBuildItem) {\n+\n+        IndexView index = combinedIndexBuildItem.getIndex();\n+        for (DotName dotName : STUB_CLASS_DOT_NAMES) {\n+            index.getAllKnownSubclasses(dotName)\n+                    .stream()\n+                    .map(classInfo -> new ReflectiveClassBuildItem(true, false, classInfo.name().toString()))\n+                    .forEach(reflectiveClass::produce);\n+        }\n+    }\n+\n+    @BuildStep\n+    void createBindableServiceBeans(\n+            BuildProducer<GeneratedBeanBuildItem> generatedBean,\n+            BuildProducer<ReflectiveClassBuildItem> reflectiveClass,\n+            BuildProducer<BindableServiceBuildItem> bindableService,\n+            CombinedIndexBuildItem combinedIndexBuildItem) {\n+\n+        Set<String> services = generateBindableServiceBeans(generatedBean, reflectiveClass, combinedIndexBuildItem.getIndex());\n+        services.stream()\n+                .map(DotName::createSimple)\n+                .map(BindableServiceBuildItem::new)\n+                .forEach(bindableService::produce);\n+    }\n+\n+    @BuildStep\n+    void QuarkusBindableServiceFactoryBean(BuildProducer<AdditionalBeanBuildItem> additionalBeans) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg5NTYwMg=="}, "originalCommit": {"oid": "ed282f9a3721819e0fd6dc0a8f9deb3636907f5b"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTAyMDk5OnYy", "diffSide": "RIGHT", "path": "extensions/grpc/runtime/src/main/java/org/apache/camel/quarkus/grpc/runtime/CamelGrpcRecorder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTowNDoyMFrOHSQJYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNjoyMDowMVrOHShwuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwMDk2MA==", "bodyText": "I wonder if we eventually want to avoid overriding the Camel component?", "url": "https://github.com/apache/camel-quarkus/pull/1797#discussion_r488900960", "createdAt": "2020-09-15T19:04:20Z", "author": {"login": "ppalaga"}, "path": "extensions/grpc/runtime/src/main/java/org/apache/camel/quarkus/grpc/runtime/CamelGrpcRecorder.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.grpc.runtime;\n+\n+import java.util.Map;\n+\n+import io.quarkus.runtime.RuntimeValue;\n+import io.quarkus.runtime.annotations.Recorder;\n+import org.apache.camel.Consumer;\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.Processor;\n+import org.apache.camel.component.grpc.GrpcComponent;\n+import org.apache.camel.component.grpc.GrpcConfiguration;\n+import org.apache.camel.component.grpc.GrpcConsumer;\n+import org.apache.camel.component.grpc.GrpcEndpoint;\n+import org.apache.camel.component.grpc.server.BindableServiceFactory;\n+import org.apache.camel.spi.annotations.Component;\n+import org.apache.camel.support.CamelContextHelper;\n+import org.apache.camel.support.service.ServiceHelper;\n+\n+import static org.apache.camel.component.grpc.GrpcConstants.GRPC_BINDABLE_SERVICE_FACTORY_NAME;\n+\n+@Recorder\n+public class CamelGrpcRecorder {\n+\n+    public RuntimeValue<GrpcComponent> createGrpcComponent() {\n+        return new RuntimeValue<>(new QuarkusGrpcComponent());\n+    }\n+\n+    @Component(\"grpc\")\n+    static final class QuarkusGrpcComponent extends GrpcComponent {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed282f9a3721819e0fd6dc0a8f9deb3636907f5b"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE4OTU2Mw==", "bodyText": "Yes, I want to do some follow up investigation / rework of the Camel component to try and avoid this stuff.", "url": "https://github.com/apache/camel-quarkus/pull/1797#discussion_r489189563", "createdAt": "2020-09-16T06:20:01Z", "author": {"login": "jamesnetherton"}, "path": "extensions/grpc/runtime/src/main/java/org/apache/camel/quarkus/grpc/runtime/CamelGrpcRecorder.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.grpc.runtime;\n+\n+import java.util.Map;\n+\n+import io.quarkus.runtime.RuntimeValue;\n+import io.quarkus.runtime.annotations.Recorder;\n+import org.apache.camel.Consumer;\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.Processor;\n+import org.apache.camel.component.grpc.GrpcComponent;\n+import org.apache.camel.component.grpc.GrpcConfiguration;\n+import org.apache.camel.component.grpc.GrpcConsumer;\n+import org.apache.camel.component.grpc.GrpcEndpoint;\n+import org.apache.camel.component.grpc.server.BindableServiceFactory;\n+import org.apache.camel.spi.annotations.Component;\n+import org.apache.camel.support.CamelContextHelper;\n+import org.apache.camel.support.service.ServiceHelper;\n+\n+import static org.apache.camel.component.grpc.GrpcConstants.GRPC_BINDABLE_SERVICE_FACTORY_NAME;\n+\n+@Recorder\n+public class CamelGrpcRecorder {\n+\n+    public RuntimeValue<GrpcComponent> createGrpcComponent() {\n+        return new RuntimeValue<>(new QuarkusGrpcComponent());\n+    }\n+\n+    @Component(\"grpc\")\n+    static final class QuarkusGrpcComponent extends GrpcComponent {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwMDk2MA=="}, "originalCommit": {"oid": "ed282f9a3721819e0fd6dc0a8f9deb3636907f5b"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4647, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}