{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5NzIyNDgz", "number": 1888, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNzo0MTo1NVrOErfHVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwODoyODoyOVrOErgMsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MDM0MDA3OnYy", "diffSide": "RIGHT", "path": "extensions/geocoder/deployment/src/main/java/org/apache/camel/quarkus/component/geocoder/deployment/GeocoderProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwNzo0MTo1NVrOHeRzcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwODoyNzo0N1rOHeTeHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUxMTAyNQ==", "bodyText": "This is only needed for for the reflection hack in the test, right? I guess it is not necessary for users normal runtime operation?\nIf so, we can use a configuration property in the test:\nquarkus.camel.native.reflection.include-patterns=com.google.maps.GeoApiContext$Builder", "url": "https://github.com/apache/camel-quarkus/pull/1888#discussion_r501511025", "createdAt": "2020-10-08T07:41:55Z", "author": {"login": "jamesnetherton"}, "path": "extensions/geocoder/deployment/src/main/java/org/apache/camel/quarkus/component/geocoder/deployment/GeocoderProcessor.java", "diffHunk": "@@ -50,6 +50,7 @@ ExtensionSslNativeSupportBuildItem activateSslNativeSupport() {\n         items.add(new ReflectiveClassBuildItem(false, true, \"com.google.maps.model.Bounds\"));\n         items.add(new ReflectiveClassBuildItem(false, true, \"com.google.maps.model.LatLng\"));\n         items.add(new ReflectiveClassBuildItem(false, true, \"com.google.maps.model.LocationType\"));\n+        items.add(new ReflectiveClassBuildItem(false, true, \"com.google.maps.GeoApiContext$Builder\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8512fdcb1472f27c0bea219f24a858680d4edda"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUxNTA2Nw==", "bodyText": "yes!! I'll do that !!", "url": "https://github.com/apache/camel-quarkus/pull/1888#discussion_r501515067", "createdAt": "2020-10-08T07:49:14Z", "author": {"login": "zbendhiba"}, "path": "extensions/geocoder/deployment/src/main/java/org/apache/camel/quarkus/component/geocoder/deployment/GeocoderProcessor.java", "diffHunk": "@@ -50,6 +50,7 @@ ExtensionSslNativeSupportBuildItem activateSslNativeSupport() {\n         items.add(new ReflectiveClassBuildItem(false, true, \"com.google.maps.model.Bounds\"));\n         items.add(new ReflectiveClassBuildItem(false, true, \"com.google.maps.model.LatLng\"));\n         items.add(new ReflectiveClassBuildItem(false, true, \"com.google.maps.model.LocationType\"));\n+        items.add(new ReflectiveClassBuildItem(false, true, \"com.google.maps.GeoApiContext$Builder\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUxMTAyNQ=="}, "originalCommit": {"oid": "d8512fdcb1472f27c0bea219f24a858680d4edda"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUzODMzMg==", "bodyText": "done !!", "url": "https://github.com/apache/camel-quarkus/pull/1888#discussion_r501538332", "createdAt": "2020-10-08T08:27:47Z", "author": {"login": "zbendhiba"}, "path": "extensions/geocoder/deployment/src/main/java/org/apache/camel/quarkus/component/geocoder/deployment/GeocoderProcessor.java", "diffHunk": "@@ -50,6 +50,7 @@ ExtensionSslNativeSupportBuildItem activateSslNativeSupport() {\n         items.add(new ReflectiveClassBuildItem(false, true, \"com.google.maps.model.Bounds\"));\n         items.add(new ReflectiveClassBuildItem(false, true, \"com.google.maps.model.LatLng\"));\n         items.add(new ReflectiveClassBuildItem(false, true, \"com.google.maps.model.LocationType\"));\n+        items.add(new ReflectiveClassBuildItem(false, true, \"com.google.maps.GeoApiContext$Builder\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUxMTAyNQ=="}, "originalCommit": {"oid": "d8512fdcb1472f27c0bea219f24a858680d4edda"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MDQ5OTc1OnYy", "diffSide": "RIGHT", "path": "integration-tests/geocoder/src/main/java/org/apache/camel/quarkus/component/geocoder/it/Routes.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwODoyMzo1OVrOHeTU1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwODoyMzo1OVrOHeTU1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUzNTk1Ng==", "bodyText": "Knowledge sharing: one day this may become easier if Quarkus folks fix quarkusio/quarkus#9287 for us.", "url": "https://github.com/apache/camel-quarkus/pull/1888#discussion_r501535956", "createdAt": "2020-10-08T08:23:59Z", "author": {"login": "ppalaga"}, "path": "integration-tests/geocoder/src/main/java/org/apache/camel/quarkus/component/geocoder/it/Routes.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.geocoder.it;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import io.quarkus.arc.Unremovable;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.geocoder.GeoCoderComponent;\n+import org.apache.camel.quarkus.test.mock.backend.MockBackendUtils;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@ApplicationScoped\n+public class Routes extends RouteBuilder {\n+\n+    @ConfigProperty(name = \"google.api.key\")\n+    String googleApiKey;\n+    @ConfigProperty(name = \"quarkus.http.test-port\")\n+    int httpTestPort;\n+    @ConfigProperty(name = \"quarkus.http.port\")\n+    int httpPort;\n+    @Inject\n+    MockApiService mockApiService;\n+\n+    private String getBaseUri() {\n+        final boolean isNativeMode = \"executable\".equals(System.getProperty(\"org.graalvm.nativeimage.kind\"));\n+        return \"AIzaFakeKey\".equals(googleApiKey)\n+                ? \"http://localhost:\" + (isNativeMode ? httpPort : httpTestPort)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8512fdcb1472f27c0bea219f24a858680d4edda"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MDUxNzYxOnYy", "diffSide": "RIGHT", "path": "integration-tests/geocoder/src/main/java/org/apache/camel/quarkus/component/geocoder/it/Routes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwODoyODoyOVrOHeTf7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMToyMToxNVrOHeZ2RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUzODc5Nw==", "bodyText": "@llowinge will love this!", "url": "https://github.com/apache/camel-quarkus/pull/1888#discussion_r501538797", "createdAt": "2020-10-08T08:28:29Z", "author": {"login": "ppalaga"}, "path": "integration-tests/geocoder/src/main/java/org/apache/camel/quarkus/component/geocoder/it/Routes.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.geocoder.it;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import io.quarkus.arc.Unremovable;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.geocoder.GeoCoderComponent;\n+import org.apache.camel.quarkus.test.mock.backend.MockBackendUtils;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@ApplicationScoped\n+public class Routes extends RouteBuilder {\n+\n+    @ConfigProperty(name = \"google.api.key\")\n+    String googleApiKey;\n+    @ConfigProperty(name = \"quarkus.http.test-port\")\n+    int httpTestPort;\n+    @ConfigProperty(name = \"quarkus.http.port\")\n+    int httpPort;\n+    @Inject\n+    MockApiService mockApiService;\n+\n+    private String getBaseUri() {\n+        final boolean isNativeMode = \"executable\".equals(System.getProperty(\"org.graalvm.nativeimage.kind\"));\n+        return \"AIzaFakeKey\".equals(googleApiKey)\n+                ? \"http://localhost:\" + (isNativeMode ? httpPort : httpTestPort)\n+                : \"https://maps.googleapis.com\";\n+    }\n+\n+    /**\n+     * We need to implement some conditional configuration of the {@link GeoCoderComponent} thus we create it\n+     * programmatically and publish via CDI.\n+     *\n+     * @return a configured {@link GeoCoderComponent}\n+     */\n+    @Produces\n+    @ApplicationScoped\n+    @Unremovable\n+    @Named(\"geocoder\")\n+    GeoCoderComponent geocoderComponent() throws IllegalAccessException, NoSuchFieldException, InstantiationException {\n+        final GeoCoderComponent result = new GeoCoderComponent();\n+        result.setCamelContext(getContext());\n+        result.setGeoApiContext(mockApiService.createGeoApiContext(getBaseUri(), googleApiKey));\n+        return result;\n+    }\n+\n+    @Override\n+    public void configure() throws Exception {\n+        if (MockBackendUtils.startMockBackend(true)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f363035ff3bc53f0a86fb0bf28a38ceb2b8aab10"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY0MjgyMQ==", "bodyText": "@ppalaga That is great ! Thanks @zbendhiba for using MockBackendUtils.", "url": "https://github.com/apache/camel-quarkus/pull/1888#discussion_r501642821", "createdAt": "2020-10-08T11:21:15Z", "author": {"login": "llowinge"}, "path": "integration-tests/geocoder/src/main/java/org/apache/camel/quarkus/component/geocoder/it/Routes.java", "diffHunk": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.component.geocoder.it;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import io.quarkus.arc.Unremovable;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.geocoder.GeoCoderComponent;\n+import org.apache.camel.quarkus.test.mock.backend.MockBackendUtils;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@ApplicationScoped\n+public class Routes extends RouteBuilder {\n+\n+    @ConfigProperty(name = \"google.api.key\")\n+    String googleApiKey;\n+    @ConfigProperty(name = \"quarkus.http.test-port\")\n+    int httpTestPort;\n+    @ConfigProperty(name = \"quarkus.http.port\")\n+    int httpPort;\n+    @Inject\n+    MockApiService mockApiService;\n+\n+    private String getBaseUri() {\n+        final boolean isNativeMode = \"executable\".equals(System.getProperty(\"org.graalvm.nativeimage.kind\"));\n+        return \"AIzaFakeKey\".equals(googleApiKey)\n+                ? \"http://localhost:\" + (isNativeMode ? httpPort : httpTestPort)\n+                : \"https://maps.googleapis.com\";\n+    }\n+\n+    /**\n+     * We need to implement some conditional configuration of the {@link GeoCoderComponent} thus we create it\n+     * programmatically and publish via CDI.\n+     *\n+     * @return a configured {@link GeoCoderComponent}\n+     */\n+    @Produces\n+    @ApplicationScoped\n+    @Unremovable\n+    @Named(\"geocoder\")\n+    GeoCoderComponent geocoderComponent() throws IllegalAccessException, NoSuchFieldException, InstantiationException {\n+        final GeoCoderComponent result = new GeoCoderComponent();\n+        result.setCamelContext(getContext());\n+        result.setGeoApiContext(mockApiService.createGeoApiContext(getBaseUri(), googleApiKey));\n+        return result;\n+    }\n+\n+    @Override\n+    public void configure() throws Exception {\n+        if (MockBackendUtils.startMockBackend(true)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTUzODc5Nw=="}, "originalCommit": {"oid": "f363035ff3bc53f0a86fb0bf28a38ceb2b8aab10"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4557, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}