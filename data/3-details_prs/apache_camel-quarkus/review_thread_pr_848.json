{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MTMxMjUz", "number": 848, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo0MjozMlrODlVTdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo0NToxN1rODlVWng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDcyOTQ4OnYy", "diffSide": "RIGHT", "path": "extensions/support/jackson-dataformat-xml/deployment/src/main/java/org/apache/camel/quarkus/support/jackson/datafromat/xml/deployment/JacksonDataformatXmlSupportProcessor.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo0MjozMlrOFyKlvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTozNTozN1rOFyMT5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0NjYyMQ==", "bodyText": "maybe we should just use class names as strings", "url": "https://github.com/apache/camel-quarkus/pull/848#discussion_r388146621", "createdAt": "2020-03-05T08:42:32Z", "author": {"login": "lburgazzoli"}, "path": "extensions/support/jackson-dataformat-xml/deployment/src/main/java/org/apache/camel/quarkus/support/jackson/datafromat/xml/deployment/JacksonDataformatXmlSupportProcessor.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.support.jackson.datafromat.xml.deployment;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+\n+import com.ctc.wstx.shaded.msv.org_isorelax.verifier.VerifierFactoryLoader;\n+import com.ctc.wstx.shaded.msv.relaxng_datatype.DatatypeLibraryFactory;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.ObjectCodec;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.DeploymentClassLoaderBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ServiceProviderBuildItem;\n+import io.quarkus.deployment.util.ServiceUtil;\n+import org.codehaus.stax2.validation.XMLValidationSchemaFactory;\n+\n+public class JacksonDataformatXmlSupportProcessor {\n+\n+    private static final String FEATURE = \"camel-support-jackson-dataformat-xml\";\n+    static final String SERVICES_PREFIX = \"META-INF/services/\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void serviceProviders(BuildProducer<ServiceProviderBuildItem> serviceProviders,\n+            final DeploymentClassLoaderBuildItem classLoader) {\n+        Stream.concat(\n+                Stream.of(\n+                        JsonFactory.class,\n+                        ObjectCodec.class,\n+                        VerifierFactoryLoader.class,\n+                        DatatypeLibraryFactory.class,\n+                        XMLEventFactory.class,\n+                        XMLInputFactory.class,\n+                        XMLOutputFactory.class)\n+                        .map(Class::getName),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45e450d2e39066d51bef8c598299434a8867af1"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2MDYxOQ==", "bodyText": "Yeah, we discussed this some time ago with the result that strings are faster and they do not have any disadvantages related to class loading. In the meantime, I asked David about this and he said he finds the perf drawbacks negligible and so I started preferring maintainability. WDYT?", "url": "https://github.com/apache/camel-quarkus/pull/848#discussion_r388160619", "createdAt": "2020-03-05T09:10:25Z", "author": {"login": "ppalaga"}, "path": "extensions/support/jackson-dataformat-xml/deployment/src/main/java/org/apache/camel/quarkus/support/jackson/datafromat/xml/deployment/JacksonDataformatXmlSupportProcessor.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.support.jackson.datafromat.xml.deployment;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+\n+import com.ctc.wstx.shaded.msv.org_isorelax.verifier.VerifierFactoryLoader;\n+import com.ctc.wstx.shaded.msv.relaxng_datatype.DatatypeLibraryFactory;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.ObjectCodec;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.DeploymentClassLoaderBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ServiceProviderBuildItem;\n+import io.quarkus.deployment.util.ServiceUtil;\n+import org.codehaus.stax2.validation.XMLValidationSchemaFactory;\n+\n+public class JacksonDataformatXmlSupportProcessor {\n+\n+    private static final String FEATURE = \"camel-support-jackson-dataformat-xml\";\n+    static final String SERVICES_PREFIX = \"META-INF/services/\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void serviceProviders(BuildProducer<ServiceProviderBuildItem> serviceProviders,\n+            final DeploymentClassLoaderBuildItem classLoader) {\n+        Stream.concat(\n+                Stream.of(\n+                        JsonFactory.class,\n+                        ObjectCodec.class,\n+                        VerifierFactoryLoader.class,\n+                        DatatypeLibraryFactory.class,\n+                        XMLEventFactory.class,\n+                        XMLInputFactory.class,\n+                        XMLOutputFactory.class)\n+                        .map(Class::getName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0NjYyMQ=="}, "originalCommit": {"oid": "f45e450d2e39066d51bef8c598299434a8867af1"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3NDgyMw==", "bodyText": "I'm always +1 for maintainability you know :)", "url": "https://github.com/apache/camel-quarkus/pull/848#discussion_r388174823", "createdAt": "2020-03-05T09:35:37Z", "author": {"login": "lburgazzoli"}, "path": "extensions/support/jackson-dataformat-xml/deployment/src/main/java/org/apache/camel/quarkus/support/jackson/datafromat/xml/deployment/JacksonDataformatXmlSupportProcessor.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.support.jackson.datafromat.xml.deployment;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+\n+import com.ctc.wstx.shaded.msv.org_isorelax.verifier.VerifierFactoryLoader;\n+import com.ctc.wstx.shaded.msv.relaxng_datatype.DatatypeLibraryFactory;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.ObjectCodec;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.DeploymentClassLoaderBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ServiceProviderBuildItem;\n+import io.quarkus.deployment.util.ServiceUtil;\n+import org.codehaus.stax2.validation.XMLValidationSchemaFactory;\n+\n+public class JacksonDataformatXmlSupportProcessor {\n+\n+    private static final String FEATURE = \"camel-support-jackson-dataformat-xml\";\n+    static final String SERVICES_PREFIX = \"META-INF/services/\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void serviceProviders(BuildProducer<ServiceProviderBuildItem> serviceProviders,\n+            final DeploymentClassLoaderBuildItem classLoader) {\n+        Stream.concat(\n+                Stream.of(\n+                        JsonFactory.class,\n+                        ObjectCodec.class,\n+                        VerifierFactoryLoader.class,\n+                        DatatypeLibraryFactory.class,\n+                        XMLEventFactory.class,\n+                        XMLInputFactory.class,\n+                        XMLOutputFactory.class)\n+                        .map(Class::getName),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0NjYyMQ=="}, "originalCommit": {"oid": "f45e450d2e39066d51bef8c598299434a8867af1"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNDczNzU4OnYy", "diffSide": "RIGHT", "path": "extensions/support/jackson-dataformat-xml/deployment/src/main/java/org/apache/camel/quarkus/support/jackson/datafromat/xml/deployment/JacksonDataformatXmlSupportProcessor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwODo0NToxN1rOFyKqyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDowNjowOVrOFyNX4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0NzkxNA==", "bodyText": "As there's no discovery but we deal with a fixed set of ites, maybe we can use strings so we can avoid the the two Stream.of and the Stream.concat", "url": "https://github.com/apache/camel-quarkus/pull/848#discussion_r388147914", "createdAt": "2020-03-05T08:45:17Z", "author": {"login": "lburgazzoli"}, "path": "extensions/support/jackson-dataformat-xml/deployment/src/main/java/org/apache/camel/quarkus/support/jackson/datafromat/xml/deployment/JacksonDataformatXmlSupportProcessor.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.support.jackson.datafromat.xml.deployment;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+\n+import com.ctc.wstx.shaded.msv.org_isorelax.verifier.VerifierFactoryLoader;\n+import com.ctc.wstx.shaded.msv.relaxng_datatype.DatatypeLibraryFactory;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.ObjectCodec;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.DeploymentClassLoaderBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ServiceProviderBuildItem;\n+import io.quarkus.deployment.util.ServiceUtil;\n+import org.codehaus.stax2.validation.XMLValidationSchemaFactory;\n+\n+public class JacksonDataformatXmlSupportProcessor {\n+\n+    private static final String FEATURE = \"camel-support-jackson-dataformat-xml\";\n+    static final String SERVICES_PREFIX = \"META-INF/services/\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void serviceProviders(BuildProducer<ServiceProviderBuildItem> serviceProviders,\n+            final DeploymentClassLoaderBuildItem classLoader) {\n+        Stream.concat(\n+                Stream.of(\n+                        JsonFactory.class,\n+                        ObjectCodec.class,\n+                        VerifierFactoryLoader.class,\n+                        DatatypeLibraryFactory.class,\n+                        XMLEventFactory.class,\n+                        XMLInputFactory.class,\n+                        XMLOutputFactory.class)\n+                        .map(Class::getName),\n+                Stream.of(\n+                        XMLValidationSchemaFactory.INTERNAL_ID_SCHEMA_DTD,\n+                        XMLValidationSchemaFactory.INTERNAL_ID_SCHEMA_RELAXNG,\n+                        XMLValidationSchemaFactory.INTERNAL_ID_SCHEMA_W3C,\n+                        XMLValidationSchemaFactory.INTERNAL_ID_SCHEMA_TREX)\n+                        .map(schemaId -> XMLValidationSchemaFactory.class.getName() + \".\" + schemaId))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f45e450d2e39066d51bef8c598299434a8867af1"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE2MzM3OA==", "bodyText": "Yes, your proposal is valid and I can see the advantages but classes are easier to type in an IDE and any typos will cause a compilation error so it feels safer. I am open to continue discussing this.", "url": "https://github.com/apache/camel-quarkus/pull/848#discussion_r388163378", "createdAt": "2020-03-05T09:15:37Z", "author": {"login": "ppalaga"}, "path": "extensions/support/jackson-dataformat-xml/deployment/src/main/java/org/apache/camel/quarkus/support/jackson/datafromat/xml/deployment/JacksonDataformatXmlSupportProcessor.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.support.jackson.datafromat.xml.deployment;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+\n+import com.ctc.wstx.shaded.msv.org_isorelax.verifier.VerifierFactoryLoader;\n+import com.ctc.wstx.shaded.msv.relaxng_datatype.DatatypeLibraryFactory;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.ObjectCodec;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.DeploymentClassLoaderBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ServiceProviderBuildItem;\n+import io.quarkus.deployment.util.ServiceUtil;\n+import org.codehaus.stax2.validation.XMLValidationSchemaFactory;\n+\n+public class JacksonDataformatXmlSupportProcessor {\n+\n+    private static final String FEATURE = \"camel-support-jackson-dataformat-xml\";\n+    static final String SERVICES_PREFIX = \"META-INF/services/\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void serviceProviders(BuildProducer<ServiceProviderBuildItem> serviceProviders,\n+            final DeploymentClassLoaderBuildItem classLoader) {\n+        Stream.concat(\n+                Stream.of(\n+                        JsonFactory.class,\n+                        ObjectCodec.class,\n+                        VerifierFactoryLoader.class,\n+                        DatatypeLibraryFactory.class,\n+                        XMLEventFactory.class,\n+                        XMLInputFactory.class,\n+                        XMLOutputFactory.class)\n+                        .map(Class::getName),\n+                Stream.of(\n+                        XMLValidationSchemaFactory.INTERNAL_ID_SCHEMA_DTD,\n+                        XMLValidationSchemaFactory.INTERNAL_ID_SCHEMA_RELAXNG,\n+                        XMLValidationSchemaFactory.INTERNAL_ID_SCHEMA_W3C,\n+                        XMLValidationSchemaFactory.INTERNAL_ID_SCHEMA_TREX)\n+                        .map(schemaId -> XMLValidationSchemaFactory.class.getName() + \".\" + schemaId))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0NzkxNA=="}, "originalCommit": {"oid": "f45e450d2e39066d51bef8c598299434a8867af1"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3MDcyNQ==", "bodyText": "Yes it is not really related to perf of loading classes but more about  the perceived complexity of two nested streams with mapping. Looking at the code - at least as first look - it seems much more complex that what it actually does but there's no problem to keep it as it is", "url": "https://github.com/apache/camel-quarkus/pull/848#discussion_r388170725", "createdAt": "2020-03-05T09:28:28Z", "author": {"login": "lburgazzoli"}, "path": "extensions/support/jackson-dataformat-xml/deployment/src/main/java/org/apache/camel/quarkus/support/jackson/datafromat/xml/deployment/JacksonDataformatXmlSupportProcessor.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.support.jackson.datafromat.xml.deployment;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+\n+import com.ctc.wstx.shaded.msv.org_isorelax.verifier.VerifierFactoryLoader;\n+import com.ctc.wstx.shaded.msv.relaxng_datatype.DatatypeLibraryFactory;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.ObjectCodec;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.DeploymentClassLoaderBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ServiceProviderBuildItem;\n+import io.quarkus.deployment.util.ServiceUtil;\n+import org.codehaus.stax2.validation.XMLValidationSchemaFactory;\n+\n+public class JacksonDataformatXmlSupportProcessor {\n+\n+    private static final String FEATURE = \"camel-support-jackson-dataformat-xml\";\n+    static final String SERVICES_PREFIX = \"META-INF/services/\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void serviceProviders(BuildProducer<ServiceProviderBuildItem> serviceProviders,\n+            final DeploymentClassLoaderBuildItem classLoader) {\n+        Stream.concat(\n+                Stream.of(\n+                        JsonFactory.class,\n+                        ObjectCodec.class,\n+                        VerifierFactoryLoader.class,\n+                        DatatypeLibraryFactory.class,\n+                        XMLEventFactory.class,\n+                        XMLInputFactory.class,\n+                        XMLOutputFactory.class)\n+                        .map(Class::getName),\n+                Stream.of(\n+                        XMLValidationSchemaFactory.INTERNAL_ID_SCHEMA_DTD,\n+                        XMLValidationSchemaFactory.INTERNAL_ID_SCHEMA_RELAXNG,\n+                        XMLValidationSchemaFactory.INTERNAL_ID_SCHEMA_W3C,\n+                        XMLValidationSchemaFactory.INTERNAL_ID_SCHEMA_TREX)\n+                        .map(schemaId -> XMLValidationSchemaFactory.class.getName() + \".\" + schemaId))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0NzkxNA=="}, "originalCommit": {"oid": "f45e450d2e39066d51bef8c598299434a8867af1"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE5MjIyNw==", "bodyText": "I am at least hanging this quote from Plato's Timaeus above my table to remind me not to sin against the beauty in the future ;)\n\nThe good, of course, is always beautiful, and the beautiful never lacks proportion.", "url": "https://github.com/apache/camel-quarkus/pull/848#discussion_r388192227", "createdAt": "2020-03-05T10:06:09Z", "author": {"login": "ppalaga"}, "path": "extensions/support/jackson-dataformat-xml/deployment/src/main/java/org/apache/camel/quarkus/support/jackson/datafromat/xml/deployment/JacksonDataformatXmlSupportProcessor.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.quarkus.support.jackson.datafromat.xml.deployment;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+import javax.xml.stream.XMLEventFactory;\n+import javax.xml.stream.XMLInputFactory;\n+import javax.xml.stream.XMLOutputFactory;\n+\n+import com.ctc.wstx.shaded.msv.org_isorelax.verifier.VerifierFactoryLoader;\n+import com.ctc.wstx.shaded.msv.relaxng_datatype.DatatypeLibraryFactory;\n+import com.fasterxml.jackson.core.JsonFactory;\n+import com.fasterxml.jackson.core.ObjectCodec;\n+import io.quarkus.deployment.annotations.BuildProducer;\n+import io.quarkus.deployment.annotations.BuildStep;\n+import io.quarkus.deployment.builditem.DeploymentClassLoaderBuildItem;\n+import io.quarkus.deployment.builditem.FeatureBuildItem;\n+import io.quarkus.deployment.builditem.nativeimage.ServiceProviderBuildItem;\n+import io.quarkus.deployment.util.ServiceUtil;\n+import org.codehaus.stax2.validation.XMLValidationSchemaFactory;\n+\n+public class JacksonDataformatXmlSupportProcessor {\n+\n+    private static final String FEATURE = \"camel-support-jackson-dataformat-xml\";\n+    static final String SERVICES_PREFIX = \"META-INF/services/\";\n+\n+    @BuildStep\n+    FeatureBuildItem feature() {\n+        return new FeatureBuildItem(FEATURE);\n+    }\n+\n+    @BuildStep\n+    void serviceProviders(BuildProducer<ServiceProviderBuildItem> serviceProviders,\n+            final DeploymentClassLoaderBuildItem classLoader) {\n+        Stream.concat(\n+                Stream.of(\n+                        JsonFactory.class,\n+                        ObjectCodec.class,\n+                        VerifierFactoryLoader.class,\n+                        DatatypeLibraryFactory.class,\n+                        XMLEventFactory.class,\n+                        XMLInputFactory.class,\n+                        XMLOutputFactory.class)\n+                        .map(Class::getName),\n+                Stream.of(\n+                        XMLValidationSchemaFactory.INTERNAL_ID_SCHEMA_DTD,\n+                        XMLValidationSchemaFactory.INTERNAL_ID_SCHEMA_RELAXNG,\n+                        XMLValidationSchemaFactory.INTERNAL_ID_SCHEMA_W3C,\n+                        XMLValidationSchemaFactory.INTERNAL_ID_SCHEMA_TREX)\n+                        .map(schemaId -> XMLValidationSchemaFactory.class.getName() + \".\" + schemaId))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE0NzkxNA=="}, "originalCommit": {"oid": "f45e450d2e39066d51bef8c598299434a8867af1"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4379, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}